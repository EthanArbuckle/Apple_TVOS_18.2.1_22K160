void sub_18230C1BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NWConcrete_nw_interface *nw_nat64_prefixes_resolver_copy_interface(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 2);
    v3 = nw_interface_create_with_index(v2[3]._os_unfair_lock_opaque);
    os_unfair_lock_unlock(v2 + 2);
    goto LABEL_3;
  }

  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_nat64_prefixes_resolver_copy_interface";
  v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_nat64_prefixes_resolver_copy_interface";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null resolver", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_nat64_prefixes_resolver_copy_interface";
          __int16 v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null resolver, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_nat64_prefixes_resolver_copy_interface";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_nat64_prefixes_resolver_copy_interface";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null resolver, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18230C478(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t llhttp_finish(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 24)) {
    return 0LL;
  }
  int v2 = *(unsigned __int8 *)(a1 + 81);
  if (!*(_BYTE *)(a1 + 81)) {
    return 0LL;
  }
  if (v2 == 2)
  {
    *(void *)(a1 + 32) = "Invalid EOF state";
    return 14LL;
  }

  if (v2 != 1) {
    abort();
  }
  uint64_t v3 = *(void *)(a1 + 88);
  if (!v3) {
    return 0LL;
  }
  v4 = *(uint64_t (**)(void))(v3 + 88);
  if (!v4) {
    return 0LL;
  }
  uint64_t result = v4();
  if (!(_DWORD)result) {
    return 0LL;
  }
  return result;
}

uint64_t llhttp__on_url(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (!v1) {
    return 0LL;
  }
  int v2 = *(uint64_t (**)(void))(v1 + 8);
  if (!v2) {
    return 0LL;
  }
  uint64_t result = v2();
  if ((_DWORD)result == -1)
  {
    *(void *)(a1 + 32) = "Span callback error in on_url";
    return 24LL;
  }

  return result;
}

uint64_t llhttp__on_status(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (!v1) {
    return 0LL;
  }
  int v2 = *(uint64_t (**)(void))(v1 + 16);
  if (!v2) {
    return 0LL;
  }
  uint64_t result = v2();
  if ((_DWORD)result == -1)
  {
    *(void *)(a1 + 32) = "Span callback error in on_status";
    return 24LL;
  }

  return result;
}

uint64_t llhttp__on_method(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (!v1) {
    return 0LL;
  }
  int v2 = *(uint64_t (**)(void))(v1 + 24);
  if (!v2) {
    return 0LL;
  }
  uint64_t result = v2();
  if ((_DWORD)result == -1)
  {
    *(void *)(a1 + 32) = "Span callback error in on_method";
    return 24LL;
  }

  return result;
}

uint64_t llhttp__on_version(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (!v1) {
    return 0LL;
  }
  int v2 = *(uint64_t (**)(void))(v1 + 32);
  if (!v2) {
    return 0LL;
  }
  uint64_t result = v2();
  if ((_DWORD)result == -1)
  {
    *(void *)(a1 + 32) = "Span callback error in on_version";
    return 24LL;
  }

  return result;
}

uint64_t llhttp__on_header_field(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (!v1) {
    return 0LL;
  }
  int v2 = *(uint64_t (**)(void))(v1 + 40);
  if (!v2) {
    return 0LL;
  }
  uint64_t result = v2();
  if ((_DWORD)result == -1)
  {
    *(void *)(a1 + 32) = "Span callback error in on_header_field";
    return 24LL;
  }

  return result;
}

uint64_t llhttp__on_header_value(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (!v1) {
    return 0LL;
  }
  int v2 = *(uint64_t (**)(void))(v1 + 48);
  if (!v2) {
    return 0LL;
  }
  uint64_t result = v2();
  if ((_DWORD)result == -1)
  {
    *(void *)(a1 + 32) = "Span callback error in on_header_value";
    return 24LL;
  }

  return result;
}

uint64_t llhttp__on_body(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (!v1) {
    return 0LL;
  }
  int v2 = *(uint64_t (**)(void))(v1 + 80);
  if (!v2) {
    return 0LL;
  }
  uint64_t result = v2();
  if ((_DWORD)result == -1)
  {
    *(void *)(a1 + 32) = "Span callback error in on_body";
    return 24LL;
  }

  return result;
}

uint64_t llhttp__on_chunk_extension_name(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (!v1) {
    return 0LL;
  }
  int v2 = *(uint64_t (**)(void))(v1 + 56);
  if (!v2) {
    return 0LL;
  }
  uint64_t result = v2();
  if ((_DWORD)result == -1)
  {
    *(void *)(a1 + 32) = "Span callback error in on_chunk_extension_name";
    return 24LL;
  }

  return result;
}

uint64_t llhttp__on_chunk_extension_value(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (!v1) {
    return 0LL;
  }
  int v2 = *(uint64_t (**)(void))(v1 + 64);
  if (!v2) {
    return 0LL;
  }
  uint64_t result = v2();
  if ((_DWORD)result == -1)
  {
    *(void *)(a1 + 32) = "Span callback error in on_chunk_extension_value";
    return 24LL;
  }

  return result;
}

void ___ZL19nw_mem_cache_updateP12nw_mem_cache_block_invoke(uint64_t a1)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  uint64_t v1 = *(void *)(a1 + 32);
  unint64_t v2 = *(void *)(v1 + 8);
  unint64_t v3 = *(void *)(v1 + 280);
  BOOL v4 = (v2 <= 2 * v3 || v3 + 1 >= *(void *)(v1 + 264)) && (v2 >= v3 >> 1 || v3 <= *(void *)(v1 + 256));
  *(void *)(v1 + 364) = *(void *)(v1 + 360);
  *(void *)(v1 + 396) = *(void *)(v1 + 392);
  uint64_t v5 = *(void *)(v1 + 64);
  if (*(void *)(v1 + 232) >= *(void *)(*(void *)(v1 + 336) + 16LL))
  {
    BOOL v6 = 1;
    *(void *)(v1 + 72) = v5;
    if (v4) {
      goto LABEL_36;
    }
  }

  else
  {
    BOOL v6 = (int)v5 - *(_DWORD *)(v1 + 72) < 4;
    *(void *)(v1 + 72) = v5;
    if (v4) {
      goto LABEL_36;
    }
  }

  unint64_t v7 = *(void *)(v1 + 256);
  if (v7 <= 1 << (flsll(3 * v2 + 4) - 2)) {
    size_t v8 = 1 << (flsll(3LL * *(void *)(v1 + 8) + 4) - 2);
  }
  else {
    size_t v8 = *(void *)(v1 + 256);
  }
  if (*(void *)(v1 + 264) >= v8) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = *(void *)(v1 + 264);
  }
  unint64_t v10 = *(void *)(v1 + 280) + 1LL;
  if (v9 < v10 >> 1 || v9 > 2 * v10)
  {
    BOOL v12 = nw_calloc_type<nw_mem_bufctl_bkt>(v9);
    if (v9)
    {
      if (v9 >= 0xE && ((_DWORD)v9 ? (BOOL v13 = (v9 - 1) >> 32 == 0) : (BOOL v13 = 0), v13))
      {
        unint64_t v14 = v9 & 0xFFFFFFFFFFFFFFFCLL;
        v32 = (_OWORD *)v12;
        unint64_t v33 = v9 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          _OWORD *v32 = 0uLL;
          v32[1] = 0uLL;
          v32 += 2;
          v33 -= 4LL;
        }

        while (v33);
        int v15 = v9 & 0xFFFFFFFC;
        if (v9 == v14) {
          goto LABEL_31;
        }
      }

      else
      {
        unint64_t v14 = 0LL;
        int v15 = 0;
      }

      unsigned int v16 = v15 + 1;
      do
      {
        *(void *)(v12 + 8 * v14) = 0LL;
        unint64_t v14 = v16++;
      }

      while (v9 > v14);
    }

BOOL nw_calloc_type<nw_mem_bufctl_bkt>(size_t __count)
{
  if (!__count || __count >> 61)
  {
    BOOL v4 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    uint64_t v5 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v5);
    if (result) {
      goto LABEL_9;
    }
    free(v5);
  }

  unint64_t v2 = calloc(__count, 8uLL);
  if (v2) {
    return (BOOL)v2;
  }
  BOOL v6 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  unint64_t v7 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v7);
  if (!result)
  {
    free(v7);
    return (BOOL)v2;
  }

uint64_t copyassocids(int a1, BOOL *a2, _DWORD *a3)
{
  if (a2 && a3)
  {
    *a2 = 0LL;
    *a3 = 0;
    uint64_t v8 = 0LL;
    BOOL v9 = 0LL;
    if (!ioctl(a1, 0xC0107396uLL, &v8))
    {
      uint64_t result = v8;
      if (!(_DWORD)v8) {
        return result;
      }
      BOOL v7 = nw_calloc_type<unsigned int>(v8);
      BOOL v9 = v7;
      uint64_t result = ioctl(a1, 0xC0107396uLL, &v8);
      if (!(_DWORD)result)
      {
        *a2 = v7;
        *a3 = v8;
        return result;
      }

      if (v7) {
        free((void *)v7);
      }
    }
  }

  else
  {
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
  }

  return 0xFFFFFFFFLL;
}

BOOL nw_calloc_type<unsigned int>(size_t a1)
{
  uint64_t v1 = calloc(a1, 4uLL);
  if (v1) {
    return (BOOL)v1;
  }
  unint64_t v3 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  BOOL v4 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v4);
  if (!result)
  {
    free(v4);
    return (BOOL)v1;
  }

  __break(1u);
  return result;
}

void freeassocids(void *a1)
{
  if (a1) {
    free(a1);
  }
}

uint64_t copyconnids(int a1, int a2, BOOL *a3, unsigned int *a4)
{
  if (a3 && a4)
  {
    *a3 = 0LL;
    *a4 = 0;
    int v9 = a2;
    unsigned int v10 = 0;
    BOOL v11 = 0LL;
    if (!ioctl(a1, 0xC0107397uLL, &v9))
    {
      uint64_t result = v10;
      if (!v10) {
        return result;
      }
      BOOL v8 = nw_calloc_type<unsigned int>(v10);
      BOOL v11 = v8;
      uint64_t result = ioctl(a1, 0xC0107397uLL, &v9);
      if (!(_DWORD)result)
      {
        *a3 = v8;
        *a4 = v10;
        return result;
      }

      if (v8) {
        free((void *)v8);
      }
    }
  }

  else
  {
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
  }

  return 0xFFFFFFFFLL;
}

void freeconnids(void *a1)
{
  if (a1) {
    free(a1);
  }
}

uint64_t copyconninfo(int a1, int a2, void *a3)
{
  uint64_t v84 = *MEMORY[0x1895F89C0];
  if (!a3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)v81 = 136446210;
    *(void *)&v81[4] = "copyconninfo";
    BOOL v7 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (buf[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v8 = (os_log_s *)gLogObj;
      os_log_type_t v9 = buf[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)buf[0])) {
        goto LABEL_63;
      }
      *(_DWORD *)v81 = 136446210;
      *(void *)&v81[4] = "copyconninfo";
      unsigned int v10 = "%{public}s called with null cfop";
    }

    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v8 = (os_log_s *)gLogObj;
      os_log_type_t v9 = buf[0];
      BOOL v16 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)v81 = 136446466;
          *(void *)&v81[4] = "copyconninfo";
          *(_WORD *)&v81[12] = 2082;
          *(void *)&v81[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null cfop, dumping backtrace:%{public}s",  v81,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_63;
      }

      if (!v16)
      {
LABEL_63:
        if (v7) {
          free(v7);
        }
        goto LABEL_82;
      }

      *(_DWORD *)v81 = 136446210;
      *(void *)&v81[4] = "copyconninfo";
      unsigned int v10 = "%{public}s called with null cfop, no backtrace";
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v8 = (os_log_s *)gLogObj;
      os_log_type_t v9 = buf[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)buf[0])) {
        goto LABEL_63;
      }
      *(_DWORD *)v81 = 136446210;
      *(void *)&v81[4] = "copyconninfo";
      unsigned int v10 = "%{public}s called with null cfop, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v8, v9, v10, v81, 0xCu);
    goto LABEL_63;
  }

  if (a1 < 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)v81 = 136446466;
    *(void *)&v81[4] = "copyconninfo";
    *(_WORD *)&v81[12] = 1024;
    *(_DWORD *)&v81[14] = a1;
    BOOL v11 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (buf[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v12 = (os_log_s *)gLogObj;
      os_log_type_t v13 = buf[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)buf[0])) {
        goto LABEL_80;
      }
      *(_DWORD *)v81 = 136446466;
      *(void *)&v81[4] = "copyconninfo";
      *(_WORD *)&v81[12] = 1024;
      *(_DWORD *)&v81[14] = a1;
      unint64_t v14 = "%{public}s called with null s (%d)";
    }

    else if (type)
    {
      v25 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v12 = (os_log_s *)gLogObj;
      os_log_type_t v13 = buf[0];
      BOOL v26 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)buf[0]);
      if (v25)
      {
        if (v26)
        {
          *(_DWORD *)v81 = 136446722;
          *(void *)&v81[4] = "copyconninfo";
          *(_WORD *)&v81[12] = 1024;
          *(_DWORD *)&v81[14] = a1;
          *(_WORD *)&v81[18] = 2082;
          *(void *)&v81[20] = v25;
          _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s called with null s (%d), dumping backtrace:%{public}s",  v81,  0x1Cu);
        }

        free(v25);
        goto LABEL_80;
      }

      if (!v26)
      {
LABEL_80:
        if (v11) {
          free(v11);
        }
LABEL_82:
        **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
        return 0xFFFFFFFFLL;
      }

      *(_DWORD *)v81 = 136446466;
      *(void *)&v81[4] = "copyconninfo";
      *(_WORD *)&v81[12] = 1024;
      *(_DWORD *)&v81[14] = a1;
      unint64_t v14 = "%{public}s called with null s (%d), no backtrace";
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v12 = (os_log_s *)gLogObj;
      os_log_type_t v13 = buf[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)buf[0])) {
        goto LABEL_80;
      }
      *(_DWORD *)v81 = 136446466;
      *(void *)&v81[4] = "copyconninfo";
      *(_WORD *)&v81[12] = 1024;
      *(_DWORD *)&v81[14] = a1;
      unint64_t v14 = "%{public}s called with null s (%d), backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v12, v13, v14, v81, 0x12u);
    goto LABEL_80;
  }

  *(_OWORD *)v82 = 0u;
  *(_OWORD *)__size = 0u;
  memset(v81, 0, sizeof(v81));
  *(_DWORD *)v81 = a2;
  if (ioctl(a1, 0xC0407398uLL, v81))
  {
    int v5 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if ((v5 | 0x10) == 0x16)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v6 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v77 = "copyconninfo";
        __int16 v78 = 1024;
        *(_DWORD *)v79 = a1;
        *(_WORD *)&v79[4] = 1024;
        *(_DWORD *)&v79[6] = v5;
        _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_ERROR,  "%{public}s ioctl(%d,SIOCGCONNINFO_1) %{darwin.errno}d",  buf,  0x18u);
      }

      return 0xFFFFFFFFLL;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    v77 = "copyconninfo";
    __int16 v78 = 1024;
    *(_DWORD *)v79 = a1;
    *(_WORD *)&v79[4] = 1024;
    *(_DWORD *)&v79[6] = v5;
    int v27 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v74 = 0;
    if ((__nwlog_fault(v27, &type, &v74) & 1) != 0)
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v28 = (os_log_s *)gLogObj;
        os_log_type_t v29 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_105;
        }
        *(_DWORD *)buf = 136446722;
        v77 = "copyconninfo";
        __int16 v78 = 1024;
        *(_DWORD *)v79 = a1;
        *(_WORD *)&v79[4] = 1024;
        *(_DWORD *)&v79[6] = v5;
        uint64_t v30 = "%{public}s ioctl(%d,SIOCGCONNINFO_1) %{darwin.errno}d";
        goto LABEL_104;
      }

      if (!v74)
      {
        uint64_t v28 = (os_log_s *)__nwlog_obj();
        os_log_type_t v29 = type;
        if (!os_log_type_enabled(v28, type)) {
          goto LABEL_105;
        }
        *(_DWORD *)buf = 136446722;
        v77 = "copyconninfo";
        __int16 v78 = 1024;
        *(_DWORD *)v79 = a1;
        *(_WORD *)&v79[4] = 1024;
        *(_DWORD *)&v79[6] = v5;
        uint64_t v30 = "%{public}s ioctl(%d,SIOCGCONNINFO_1) %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_104;
      }

      v39 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v28 = (os_log_s *)gLogObj;
      os_log_type_t v29 = type;
      BOOL v40 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v39)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446978;
          v77 = "copyconninfo";
          __int16 v78 = 1024;
          *(_DWORD *)v79 = a1;
          *(_WORD *)&v79[4] = 1024;
          *(_DWORD *)&v79[6] = v5;
          LOWORD(v80[0]) = 2082;
          *(void *)((char *)v80 + 2) = v39;
          _os_log_impl( &dword_181A5C000,  v28,  v29,  "%{public}s ioctl(%d,SIOCGCONNINFO_1) %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x22u);
        }

        free(v39);
        goto LABEL_105;
      }

      if (v40)
      {
        *(_DWORD *)buf = 136446722;
        v77 = "copyconninfo";
        __int16 v78 = 1024;
        *(_DWORD *)v79 = a1;
        *(_WORD *)&v79[4] = 1024;
        *(_DWORD *)&v79[6] = v5;
        uint64_t v30 = "%{public}s ioctl(%d,SIOCGCONNINFO_1) %{darwin.errno}d, no backtrace";
LABEL_104:
        _os_log_impl(&dword_181A5C000, v28, v29, v30, buf, 0x18u);
      }
    }

void freeconninfo(void *a1)
{
  if (a1)
  {
    unint64_t v2 = (void *)a1[1];
    if (v2)
    {
      free(v2);
      a1[1] = 0LL;
    }

    unint64_t v3 = (void *)a1[2];
    if (v3)
    {
      free(v3);
      a1[2] = 0LL;
    }

    BOOL v4 = (void *)a1[4];
    if (v4) {
      free(v4);
    }
    free(a1);
  }

uint64_t copymptcpinfo(int a1, void *a2)
{
  uint64_t v76 = *MEMORY[0x1895F89C0];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v72 = "copymptcpinfo";
    v53 = (char *)_os_log_send_and_compose_impl();
    v70[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v69) = 0;
    if (v70[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v54 = (os_log_s *)__nwlog_obj();
      os_log_type_t v55 = v70[0];
      if (!os_log_type_enabled(v54, v70[0])) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      v72 = "copymptcpinfo";
      BOOL v56 = "%{public}s called with null mpinfo";
    }

    else if ((_BYTE)v69)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v54 = (os_log_s *)__nwlog_obj();
      os_log_type_t v55 = v70[0];
      BOOL v61 = os_log_type_enabled(v54, v70[0]);
      if (backtrace_string)
      {
        if (v61)
        {
          *(_DWORD *)buf = 136446466;
          v72 = "copymptcpinfo";
          __int16 v73 = 2082;
          *(void *)char v74 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v54,  v55,  "%{public}s called with null mpinfo, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_98;
      }

      if (!v61)
      {
LABEL_98:
        if (v53) {
          free(v53);
        }
        return 0xFFFFFFFFLL;
      }

      *(_DWORD *)buf = 136446210;
      v72 = "copymptcpinfo";
      BOOL v56 = "%{public}s called with null mpinfo, no backtrace";
    }

    else
    {
      BOOL v54 = (os_log_s *)__nwlog_obj();
      os_log_type_t v55 = v70[0];
      if (!os_log_type_enabled(v54, v70[0])) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      v72 = "copymptcpinfo";
      BOOL v56 = "%{public}s called with null mpinfo, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v54, v55, v56, buf, 0xCu);
    goto LABEL_98;
  }

  unint64_t v2 = a2;
  *(void *)v70 = 0LL;
  BOOL v4 = calloc(1uLL, 0x18uLL);
  if (!v4)
  {
    int v57 = v2;
    v58 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v58, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v72 = "strict_calloc";
    __int16 v73 = 2048;
    *(void *)char v74 = 1LL;
    *(_WORD *)&v74[8] = 2048;
    *(void *)&__int128 v75 = 24LL;
    BOOL v59 = (void *)_os_log_send_and_compose_impl();
    uint64_t result = __nwlog_abort((uint64_t)v59);
    if ((_DWORD)result)
    {
LABEL_101:
      __break(1u);
      return result;
    }

    free(v59);
    unint64_t v2 = v57;
  }

  uint64_t v6 = *(void *)v70;
  if (*(_DWORD *)(*(void *)v70 + 28LL) == 2)
  {
    *BOOL v4 = *(void *)v70;
    BOOL v7 = *(_WORD **)(v6 + 32);
    if (v7[20]) {
      unsigned int v8 = (v7[56] != 0) + 1;
    }
    else {
      unsigned int v8 = v7[56] != 0;
    }
    if (v7[92]) {
      ++v8;
    }
    if (v7[128]) {
      size_t v9 = v8 + 1;
    }
    else {
      size_t v9 = v8;
    }
    if (!(_DWORD)v9)
    {
LABEL_4:
      uint64_t result = 0LL;
      void *v2 = v4;
      return result;
    }

    int v64 = v2;
    unsigned int v10 = calloc(v9, 8uLL);
    if (v10)
    {
LABEL_16:
      unsigned int v65 = 0;
      v4[1] = v10;
      uint64_t v11 = 20LL;
      unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (1)
      {
        int v12 = (unsigned __int16)v7[v11];
        if (v7[v11])
        {
          v69 = 0LL;
          if (copyconninfo(a1, v12, &v69))
          {
            int v13 = **(_DWORD **)(StatusReg + 8);
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            unint64_t v14 = (os_log_s *)gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446978;
              v72 = "copymptcpinfo";
              __int16 v73 = 1024;
              *(_DWORD *)char v74 = v12;
              *(_WORD *)&v74[4] = 1024;
              *(_DWORD *)&v74[6] = a1;
              LOWORD(v75) = 1024;
              *(_DWORD *)((char *)&v75 + 2) = v13;
              _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_ERROR,  "%{public}s copyconninfo failed for ifindex %u on fd %d %{darwin.errno}d",  buf,  0x1Eu);
            }
          }

          else
          {
            if (*((_DWORD *)v69 + 7) != 1)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              int v15 = *((_DWORD *)v69 + 7);
              *(_DWORD *)buf = 136446978;
              v72 = "copymptcpinfo";
              __int16 v73 = 1024;
              *(_DWORD *)char v74 = v15;
              *(_WORD *)&v74[4] = 1024;
              *(_DWORD *)&v74[6] = v12;
              LOWORD(v75) = 1024;
              *(_DWORD *)((char *)&v75 + 2) = a1;
              BOOL v16 = (char *)_os_log_send_and_compose_impl();
              os_log_type_t type = OS_LOG_TYPE_ERROR;
              char v67 = 0;
              if (type != OS_LOG_TYPE_FAULT)
              {
                if (v67)
                {
                  int v23 = (char *)__nw_create_backtrace_string();
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  uint64_t v24 = (os_log_s *)gLogObj;
                  os_log_type_t v25 = type;
                  BOOL v26 = os_log_type_enabled((os_log_t)gLogObj, type);
                  if (v23)
                  {
                    if (v26)
                    {
                      int v27 = *((_DWORD *)v69 + 7);
                      *(_DWORD *)buf = 136447234;
                      v72 = "copymptcpinfo";
                      __int16 v73 = 1024;
                      *(_DWORD *)char v74 = v27;
                      *(_WORD *)&v74[4] = 1024;
                      *(_DWORD *)&v74[6] = v12;
                      LOWORD(v75) = 1024;
                      *(_DWORD *)((char *)&v75 + 2) = a1;
                      WORD3(v75) = 2082;
                      *((void *)&v75 + 1) = v23;
                      _os_log_impl( &dword_181A5C000,  v24,  v25,  "%{public}s Unknown conninfo type %u for ifindex %u on fd %d, dumping backtrace:%{public}s",  buf,  0x28u);
                    }

                    free(v23);
                    goto LABEL_48;
                  }

                  if (!v26) {
                    goto LABEL_48;
                  }
                  int v41 = *((_DWORD *)v69 + 7);
                  *(_DWORD *)buf = 136446978;
                  v72 = "copymptcpinfo";
                  __int16 v73 = 1024;
                  *(_DWORD *)char v74 = v41;
                  *(_WORD *)&v74[4] = 1024;
                  *(_DWORD *)&v74[6] = v12;
                  LOWORD(v75) = 1024;
                  *(_DWORD *)((char *)&v75 + 2) = a1;
                  int v20 = v24;
                  os_log_type_t v21 = v25;
                  uint64_t v22 = "%{public}s Unknown conninfo type %u for ifindex %u on fd %d, no backtrace";
                }

                else
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  uint64_t v34 = gLogObj;
                  os_log_type_t v35 = type;
                  if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
                    goto LABEL_48;
                  }
                  int v36 = *((_DWORD *)v69 + 7);
                  *(_DWORD *)buf = 136446978;
                  v72 = "copymptcpinfo";
                  __int16 v73 = 1024;
                  *(_DWORD *)char v74 = v36;
                  *(_WORD *)&v74[4] = 1024;
                  *(_DWORD *)&v74[6] = v12;
                  LOWORD(v75) = 1024;
                  *(_DWORD *)((char *)&v75 + 2) = a1;
                  int v20 = (os_log_s *)v34;
                  os_log_type_t v21 = v35;
                  uint64_t v22 = "%{public}s Unknown conninfo type %u for ifindex %u on fd %d, backtrace limit exceeded";
                }

void freemptcpinfo(void *a1)
{
  if (a1)
  {
    unint64_t v2 = (void *)*a1;
    if (*a1)
    {
      unint64_t v3 = (void *)v2[1];
      if (v3)
      {
        free(v3);
        v2[1] = 0LL;
      }

      BOOL v4 = (void *)v2[2];
      if (v4)
      {
        free(v4);
        v2[2] = 0LL;
      }

      int v5 = (void *)v2[4];
      if (v5) {
        free(v5);
      }
      free(v2);
    }

    uint64_t v6 = (void *)a1[1];
    if (v6)
    {
      unint64_t v7 = *((unsigned int *)a1 + 4);
      if (!(_DWORD)v7) {
        goto LABEL_24;
      }
      for (unint64_t i = 0LL; i < v7; ++i)
      {
        size_t v9 = *(void **)(a1[1] + 8 * i);
        if (v9)
        {
          unsigned int v10 = (void *)v9[1];
          if (v10)
          {
            free(v10);
            v9[1] = 0LL;
          }

          uint64_t v11 = (void *)v9[2];
          if (v11)
          {
            free(v11);
            v9[2] = 0LL;
          }

          int v12 = (void *)v9[4];
          if (v12) {
            free(v12);
          }
          free(v9);
          unint64_t v7 = *((unsigned int *)a1 + 4);
        }
      }

      uint64_t v6 = (void *)a1[1];
      if (v6) {
LABEL_24:
      }
        free(v6);
    }

    free(a1);
  }

void nw_quic_metadata_set_original(void *a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!nw_protocol_metadata_is_quic_connection(v3))
  {
    __nwlog_obj();
    int v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v24 = "nw_quic_metadata_set_original";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v24 = "nw_quic_metadata_set_original";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v24 = "nw_quic_metadata_set_original";
          __int16 v25 = 2082;
          BOOL v26 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v24 = "nw_quic_metadata_set_original";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v24 = "nw_quic_metadata_set_original";
        _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_18230FCEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

BOOL nw_protocol_metadata_is_quic_connection(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  unint64_t v2 = v1;
  if (v1)
  {
    id v3 = (id *)v1;
    id v4 = v3[1];

    if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55123);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v4,  nw_protocol_copy_quic_connection_definition::quic_definition);

    goto LABEL_5;
  }

  __nwlog_obj();
  unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_protocol_metadata_is_quic_connection";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_metadata_is_quic_connection";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_protocol_metadata_is_quic_connection";
          __int16 v19 = 2082;
          id v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_metadata_is_quic_connection";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_metadata_is_quic_connection";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18230FFF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_metadata_set_original_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

void __nw_protocol_copy_quic_connection_definition_block_invoke()
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  named = nw_protocol_definition_create_named(3, "quic-connection");
  id v1 = (void *)nw_protocol_copy_quic_connection_definition::quic_definition;
  nw_protocol_copy_quic_connection_definition::quic_definition = (uint64_t)named;

  nw_protocol_definition_set_options_allocator( (void *)nw_protocol_copy_quic_connection_definition::quic_definition,  (uint64_t)nw_quic_connection_allocate_options,  (uint64_t)nw_quic_connection_copy_options,  (uint64_t)nw_quic_connection_deallocate_options);
  nw_protocol_definition_set_options_comparator( (void *)nw_protocol_copy_quic_connection_definition::quic_definition,  (uint64_t)nw_quic_connection_option_compare);
  nw_protocol_definition_set_metadata_initializer( (void *)nw_protocol_copy_quic_connection_definition::quic_definition,  0xE0u,  nw_quic_connection_initialize_metadata,  nw_quic_connection_finalize_metadata);
  nw_protocol_definition_set_metadata_copy_reply( (void *)nw_protocol_copy_quic_connection_definition::quic_definition,  nw_quic_metadata_create_reply,  nw_quic_metadata_copy_original,  nw_quic_metadata_set_original);
  nw_protocol_definition_set_metadata_copy_message_options( (void *)nw_protocol_copy_quic_connection_definition::quic_definition,  nw_quic_metadata_copy_stream_options);
  id v2 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
  id v3 = v2;
  if (v2)
  {
    *((_BYTE *)v2 + 184) |= 6u;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_protocol_definition_set_message_is_stream";
  unint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v7, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_definition_set_message_is_stream";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null definition", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_protocol_definition_set_message_is_stream";
          __int16 v19 = 2082;
          id v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null definition, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_definition_set_message_is_stream";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_definition_set_message_is_stream";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null definition, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823103F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
}

BOOL nw_quic_connection_allocate_options(void *a1)
{
  id v1 = a1;
  id v2 = (char *)calloc(1uLL, 0xE0uLL);
  if (v2) {
    goto LABEL_2;
  }
  __nwlog_obj();
  BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
  os_log_type_t v17 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v17);
  if (!result)
  {
    free(v17);
LABEL_2:
    *((_OWORD *)v2 + 12) = 0u;
    *((_OWORD *)v2 + 13) = 0u;
    *((_OWORD *)v2 + 10) = 0u;
    *((_OWORD *)v2 + 11) = 0u;
    *((_OWORD *)v2 + 8) = 0u;
    *((_OWORD *)v2 + 9) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 7) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *(_OWORD *)id v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    id v3 = (void *)nw_protocol_boringssl_copy_definition();
    options = nw_protocol_create_options(v3);

    objc_storeStrong((id *)v2 + 12, options);
    *((_DWORD *)v2 + 48) = -1;
    *((_WORD *)v2 + 102) = -1;
    *(void *)&__int128 v5 = -1LL;
    *((void *)&v5 + 1) = -1LL;
    *(_OWORD *)id v2 = v5;
    *((_OWORD *)v2 + 1) = v5;
    int v6 = *(unsigned __int16 *)(v2 + 215);
    *((_OWORD *)v2 + 2) = v5;
    int v7 = v6 | (v2[217] << 16);
    *(_DWORD *)(v2 + 206) = 0;
    *(_DWORD *)(v2 + 209) = 0;
    *((_DWORD *)v2 + 50) = 2;
    v7 &= 0xF86000u;
    *(_WORD *)(v2 + 215) = v7 | 1;
    v2[217] = BYTE2(v7);
    *((void *)v2 + 14) = 0LL;
    *((void *)v2 + 15) = 0LL;
    *((void *)v2 + 13) = 0LL;
    os_log_type_t v8 = (void *)*((void *)v2 + 17);
    *((void *)v2 + 17) = 0LL;

    os_log_type_t v9 = (void *)*((void *)v2 + 18);
    *((void *)v2 + 18) = 0LL;

    os_log_type_t v10 = (void *)*((void *)v2 + 20);
    *((void *)v2 + 20) = 0LL;

    os_log_type_t v11 = (void *)*((void *)v2 + 21);
    *((void *)v2 + 21) = 0LL;

    BOOL v12 = (void *)*((void *)v2 + 22);
    *((void *)v2 + 22) = 0LL;

    os_log_type_t v13 = (void *)*((void *)v2 + 23);
    *((void *)v2 + 23) = 0LL;

    os_log_type_t v14 = (void *)*((void *)v2 + 19);
    *((void *)v2 + 19) = 0LL;

    v2[214] = -1;
    return (BOOL)v2;
  }

  __break(1u);
  return result;
}

void sub_182310630(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_quic_connection_copy_options(void *a1, uint64_t a2)
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    BOOL v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v39 = "nw_quic_connection_copy_options_internal";
    uint64_t v27 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (__nwlog_fault(v27, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v39 = "nw_quic_connection_copy_options_internal";
          _os_log_impl(&dword_181A5C000, v28, v29, "%{public}s called with null existing_handle", buf, 0xCu);
        }
      }

      else if (v36)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v33 = type;
        BOOL v34 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v34)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v39 = "nw_quic_connection_copy_options_internal";
            __int16 v40 = 2082;
            uint64_t v41 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v28,  v33,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_33;
        }

        if (v34)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v39 = "nw_quic_connection_copy_options_internal";
          _os_log_impl( &dword_181A5C000,  v28,  v33,  "%{public}s called with null existing_handle, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v35 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v39 = "nw_quic_connection_copy_options_internal";
          _os_log_impl( &dword_181A5C000,  v28,  v35,  "%{public}s called with null existing_handle, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182310BC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_deallocate_options(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a2 + 96);
  *(void *)(a2 + 96) = 0LL;

  id v4 = *(const void **)(a2 + 104);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a2 + 104) = 0LL;
  }

  __int128 v5 = *(const void **)(a2 + 112);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a2 + 112) = 0LL;
  }

  int v6 = *(const void **)(a2 + 120);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a2 + 120) = 0LL;
  }

  int v7 = *(const void **)(a2 + 128);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a2 + 128) = 0LL;
  }

  os_log_type_t v8 = *(void **)(a2 + 136);
  *(void *)(a2 + 136) = 0LL;

  os_log_type_t v9 = *(void **)(a2 + 144);
  *(void *)(a2 + 144) = 0LL;

  os_log_type_t v10 = *(void **)(a2 + 160);
  *(void *)(a2 + 160) = 0LL;

  os_log_type_t v11 = *(void **)(a2 + 168);
  *(void *)(a2 + 168) = 0LL;

  BOOL v12 = *(void **)(a2 + 176);
  *(void *)(a2 + 176) = 0LL;

  os_log_type_t v13 = *(void **)(a2 + 184);
  *(void *)(a2 + 184) = 0LL;

  int v14 = *(void **)(a2 + 152);
  *(void *)(a2 + 152) = 0LL;

  free((void *)a2);
}

uint64_t nw_quic_connection_option_compare(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 1) {
    return 1LL;
  }
  else {
    return nw_protocol_option_is_equal(*(void **)(a2 + 96), *(void **)(a3 + 96));
  }
}

double nw_quic_connection_initialize_metadata(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 216) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a2 + 200) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 8) = 0u;
  *(void *)a2 = -1LL;
  return result;
}

void nw_quic_connection_finalize_metadata(uint64_t a1, id *a2)
{
  if (a2)
  {
    id v3 = a2[1];
    a2[1] = 0LL;

    id v4 = a2[2];
    a2[2] = 0LL;

    id v5 = a2[3];
    a2[3] = 0LL;

    id v6 = a2[5];
    a2[5] = 0LL;

    id v7 = a2[4];
    a2[4] = 0LL;

    id v8 = a2[6];
    a2[6] = 0LL;

    id v9 = a2[7];
    a2[7] = 0LL;

    id v10 = a2[8];
    a2[8] = 0LL;

    id v11 = a2[9];
    a2[9] = 0LL;

    id v12 = a2[10];
    a2[10] = 0LL;

    id v13 = a2[11];
    a2[11] = 0LL;

    id v14 = a2[12];
    a2[12] = 0LL;

    id v15 = a2[13];
    a2[13] = 0LL;

    id v16 = a2[14];
    a2[14] = 0LL;

    id v17 = a2[15];
    a2[15] = 0LL;

    id v18 = a2[16];
    a2[16] = 0LL;

    id v19 = a2[17];
    a2[17] = 0LL;

    id v20 = a2[18];
    a2[18] = 0LL;

    id v21 = a2[22];
    a2[22] = 0LL;

    id v22 = a2[19];
    a2[19] = 0LL;

    id v23 = a2[20];
    a2[20] = 0LL;

    id v24 = a2[21];
    a2[21] = 0LL;

    id v25 = a2[25];
    a2[25] = 0LL;
  }

id *nw_quic_metadata_create_reply(void *a1)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    if (nw_protocol_metadata_is_quic_connection(v1))
    {
      id v3 = v2;
      *(_OWORD *)buf = v3[1];

      buf[9] |= 1u;
      if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
        dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55123);
      }
      id v4 = nw_protocol_metadata_create((void *)nw_protocol_copy_quic_connection_definition::quic_definition, buf);
      if (v4)
      {
        v23[0] = MEMORY[0x1895F87A8];
        v23[1] = 3221225472LL;
        v23[2] = ___ZL29nw_quic_metadata_create_replyPU34objcproto23OS_nw_protocol_metadata8NSObject_block_invoke;
        v23[3] = &unk_189BC6260;
        id v5 = v3;
        id v24 = v5;
        uint64_t v6 = (uint64_t)v4[4];
        if (v6)
        {
          ___ZL29nw_quic_metadata_create_replyPU34objcproto23OS_nw_protocol_metadata8NSObject_block_invoke( (uint64_t)v23,  v6);
          id v7 = v24;
        }

        else
        {
          id v7 = v5;
        }

        id v8 = v4;
      }

      goto LABEL_11;
    }

    __nwlog_obj();
    id v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_quic_metadata_create_reply";
    id v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v11, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_metadata_create_reply";
          _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(original_metadata)",  buf,  0xCu);
        }

void sub_18231149C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *nw_quic_metadata_copy_original(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a2 + 24);
  if (v2) {
    id v3 = v2;
  }
  return v2;
}

id nw_quic_metadata_copy_stream_options(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    id v16 = __Block_byref_object_copy__55130;
    os_log_type_t v17 = __Block_byref_object_dispose__55131;
    id v18 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_metadata_copy_stream_options_block_invoke;
    v12[3] = &unk_189BC60A8;
    v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    id v2 = *(id *)(*(void *)&buf[8] + 40LL);
    _Block_object_dispose(buf, 8);

    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_metadata_copy_stream_options";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_metadata_copy_stream_options";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_metadata_copy_stream_options";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_metadata_copy_stream_options";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_metadata_copy_stream_options";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823117FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id a24)
{
  _Unwind_Resume(a1);
}

void nw_quic_deallocate_cache_entry(uint64_t a1, void **a2)
{
  id v3 = *a2;
  *a2 = 0LL;

  id v4 = a2[1];
  a2[1] = 0LL;

  id v5 = a2[2];
  a2[2] = 0LL;

  free(a2);
}

size_t nw_quic_should_flush_cache_entry(uint64_t a1, uint64_t a2, char a3, void *a4, void *a5)
{
  id v7 = a4;
  id v8 = a5;
  os_log_type_t v9 = v8;
  if ((a3 & 1) != 0) {
    size_t v10 = 1LL;
  }
  else {
    size_t v10 = nw_path_signature_changed_from_previous(v8, v7);
  }

  return v10;
}

void sub_1823118D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__55130(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__55131(uint64_t a1)
{
}

uint64_t __nw_quic_metadata_copy_stream_options_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

uint64_t ___ZL29nw_quic_metadata_create_replyPU34objcproto23OS_nw_protocol_metadata8NSObject_block_invoke( uint64_t a1, uint64_t a2)
{
  return 1LL;
}

void *nw_protocol_set_quic_overrides(void *result, void *a2, void *a3, void *a4, void *a5)
{
  quic_fillout_definition_callbacks_override = result;
  qpod_conn_create_override = a2;
  qpod_conn_free_override = a3;
  qpod_conn_encode_datagram_override = a4;
  qpod_conn_decode_datagram_override = a5;
  return result;
}

uint64_t nw_quic_is_above_failure_threshold(void *a1, _BYTE *a2)
{
  uint64_t v49 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (v3)
  {
    if (a2)
    {
      if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
        dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55123);
      }
      id v4 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
      if (v4)
      {
        cached_content_for_protocol = (_DWORD *)nw_association_get_cached_content_for_protocol(v3, v4);
        if (cached_content_for_protocol)
        {
          int64_t int64_with_default = networkd_settings_get_int64_with_default( (const char *)nw_setting_quic_failure_threshold,  10LL);
          int64_t v7 = networkd_settings_get_int64_with_default( (const char *)nw_setting_quic_application_failure_threshold,  3LL);
          if (cached_content_for_protocol[6]
            || int64_with_default >= cached_content_for_protocol[7]
            && int64_with_default >= cached_content_for_protocol[8])
          {
            uint64_t v8 = 0LL;
          }

          else
          {
            *a2 = 0;
            if (gLogDatapath)
            {
              int64_t v35 = v7;
              __nwlog_obj();
              char v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
              {
                int v37 = cached_content_for_protocol[6];
                int v38 = cached_content_for_protocol[7];
                int v39 = cached_content_for_protocol[8];
                *(_DWORD *)buf = 136446978;
                uint64_t v44 = "nw_quic_is_above_failure_threshold";
                __int16 v45 = 1024;
                *(_DWORD *)uint64_t v46 = v37;
                *(_WORD *)&v46[4] = 1024;
                *(_DWORD *)&v46[6] = v38;
                __int16 v47 = 1024;
                int v48 = v39;
                _os_log_impl( &dword_181A5C000,  v36,  OS_LOG_TYPE_DEBUG,  "%{public}s QUIC above failure threshold (success: %u, fail: %u, cancel: %u)",  buf,  0x1Eu);
              }

              uint64_t v8 = 1LL;
              int64_t v7 = v35;
            }

            else
            {
              uint64_t v8 = 1LL;
            }
          }

          int64_t v9 = cached_content_for_protocol[10];
          if (cached_content_for_protocol[9] < v9 && v7 < v9)
          {
            uint64_t v8 = 1LL;
            *a2 = 1;
            if (gLogDatapath)
            {
              __nwlog_obj();
              os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
              {
                int v12 = cached_content_for_protocol[9];
                int v13 = cached_content_for_protocol[10];
                *(_DWORD *)buf = 136446722;
                uint64_t v44 = "nw_quic_is_above_failure_threshold";
                __int16 v45 = 1024;
                *(_DWORD *)uint64_t v46 = v12;
                *(_WORD *)&v46[4] = 1024;
                *(_DWORD *)&v46[6] = v13;
                _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_DEBUG,  "%{public}s QUIC above application failure threshold (success: %u, fail: %u)",  buf,  0x18u);
              }
            }
          }

          goto LABEL_79;
        }

void sub_1823121E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_report_race_result_on_queue(void *a1, int a2, int a3)
{
  uint64_t v95 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  if (!v5)
  {
    __nwlog_obj();
    BOOL v59 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v86 = "nw_quic_report_race_result_on_queue";
    int v60 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v83 = 0;
    if (__nwlog_fault(v60, &type, &v83))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v61 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v62 = type;
        if (os_log_type_enabled(v61, type))
        {
          *(_DWORD *)buf = 136446210;
          v86 = "nw_quic_report_race_result_on_queue";
          _os_log_impl(&dword_181A5C000, v61, v62, "%{public}s called with null association", buf, 0xCu);
        }
      }

      else if (v83)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v61 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v68 = type;
        BOOL v69 = os_log_type_enabled(v61, type);
        if (backtrace_string)
        {
          if (v69)
          {
            *(_DWORD *)buf = 136446466;
            v86 = "nw_quic_report_race_result_on_queue";
            __int16 v87 = 2082;
            v88 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v61,  v68,  "%{public}s called with null association, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_119;
        }

        if (v69)
        {
          *(_DWORD *)buf = 136446210;
          v86 = "nw_quic_report_race_result_on_queue";
          _os_log_impl(&dword_181A5C000, v61, v68, "%{public}s called with null association, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v61 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v77 = type;
        if (os_log_type_enabled(v61, type))
        {
          *(_DWORD *)buf = 136446210;
          v86 = "nw_quic_report_race_result_on_queue";
          _os_log_impl( &dword_181A5C000,  v61,  v77,  "%{public}s called with null association, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182313424(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_report_application_result_on_queue(void *a1, int a2)
{
  uint64_t v77 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (!v3)
  {
    __nwlog_obj();
    __int16 v42 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v69 = "nw_quic_report_application_result_on_queue";
    uint64_t v43 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v66 = 0;
    if (__nwlog_fault(v43, &type, &v66))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v45 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v69 = "nw_quic_report_application_result_on_queue";
          _os_log_impl(&dword_181A5C000, v44, v45, "%{public}s called with null association", buf, 0xCu);
        }
      }

      else if (v66)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v51 = type;
        BOOL v52 = os_log_type_enabled(v44, type);
        if (backtrace_string)
        {
          if (v52)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v69 = "nw_quic_report_application_result_on_queue";
            __int16 v70 = 2082;
            os_log_type_t v71 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v44,  v51,  "%{public}s called with null association, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_100;
        }

        if (v52)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v69 = "nw_quic_report_application_result_on_queue";
          _os_log_impl(&dword_181A5C000, v44, v51, "%{public}s called with null association, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v60 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v69 = "nw_quic_report_application_result_on_queue";
          _os_log_impl( &dword_181A5C000,  v44,  v60,  "%{public}s called with null association, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_1823143AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_access_application_result_on_queue(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55123);
    }
    id v5 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
    if (v5)
    {
      uint64_t cached_content_for_protocol = nw_association_get_cached_content_for_protocol(v3, v5);
      if (cached_content_for_protocol)
      {
        uint64_t v7 = *(unsigned int *)(cached_content_for_protocol + 36);
        uint64_t v8 = *(unsigned int *)(cached_content_for_protocol + 40);
      }

      else
      {
        uint64_t v7 = 0LL;
        uint64_t v8 = 0LL;
      }

      v4[2](v4, v7, v8);
LABEL_9:

      goto LABEL_10;
    }

    __nwlog_obj();
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v28 = "nw_quic_access_application_result_on_queue";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v14, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v28 = "nw_quic_access_application_result_on_queue";
          _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s called with null definition", buf, 0xCu);
        }
      }

      else if (v25)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        BOOL v22 = os_log_type_enabled(v15, type);
        if (backtrace_string)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v28 = "nw_quic_access_application_result_on_queue";
            __int16 v29 = 2082;
            os_log_type_t v30 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v15,  v21,  "%{public}s called with null definition, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_45;
        }

        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v28 = "nw_quic_access_application_result_on_queue";
          _os_log_impl(&dword_181A5C000, v15, v21, "%{public}s called with null definition, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v28 = "nw_quic_access_application_result_on_queue";
          _os_log_impl( &dword_181A5C000,  v15,  v24,  "%{public}s called with null definition, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_1823148DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_save_token_on_queue(void *a1, void *a2)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v36 = "nw_quic_save_token_on_queue";
    id v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v10, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          char v36 = "nw_quic_save_token_on_queue";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null association", buf, 0xCu);
        }
      }

      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        BOOL v19 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v19)
          {
            *(_DWORD *)buf = 136446466;
            char v36 = "nw_quic_save_token_on_queue";
            __int16 v37 = 2082;
            uint64_t v38 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s called with null association, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_51;
        }

        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          char v36 = "nw_quic_save_token_on_queue";
          _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s called with null association, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          char v36 = "nw_quic_save_token_on_queue";
          _os_log_impl( &dword_181A5C000,  v11,  v27,  "%{public}s called with null association, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182315104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_access_token_on_queue(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55123);
    }
    id v5 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
    if (v5)
    {
      uint64_t cached_content_for_protocol = (uint64_t *)nw_association_get_cached_content_for_protocol(v3, v5);
      if (cached_content_for_protocol) {
        uint64_t v7 = *cached_content_for_protocol;
      }
      else {
        uint64_t v7 = 0LL;
      }
      v4[2](v4, v7);
LABEL_9:

      goto LABEL_10;
    }

    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v27 = "nw_quic_access_token_on_queue";
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v13, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v27 = "nw_quic_access_token_on_queue";
          _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null definition", buf, 0xCu);
        }
      }

      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        BOOL v21 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v21)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v27 = "nw_quic_access_token_on_queue";
            __int16 v28 = 2082;
            __int16 v29 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v14,  v20,  "%{public}s called with null definition, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_45;
        }

        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v27 = "nw_quic_access_token_on_queue";
          _os_log_impl(&dword_181A5C000, v14, v20, "%{public}s called with null definition, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v27 = "nw_quic_access_token_on_queue";
          _os_log_impl( &dword_181A5C000,  v14,  v23,  "%{public}s called with null definition, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182315630(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_save_0rtt_state_on_queue(void *a1, void *a2, void *a3)
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (!v5)
  {
    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v39 = "nw_quic_save_0rtt_state_on_queue";
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (__nwlog_fault(v13, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v39 = "nw_quic_save_0rtt_state_on_queue";
          _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null association", buf, 0xCu);
        }
      }

      else if (v36)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        BOOL v22 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v39 = "nw_quic_save_0rtt_state_on_queue";
            __int16 v40 = 2082;
            uint64_t v41 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v14,  v21,  "%{public}s called with null association, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_51;
        }

        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v39 = "nw_quic_save_0rtt_state_on_queue";
          _os_log_impl(&dword_181A5C000, v14, v21, "%{public}s called with null association, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v39 = "nw_quic_save_0rtt_state_on_queue";
          _os_log_impl( &dword_181A5C000,  v14,  v30,  "%{public}s called with null association, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182315E74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_access_0rtt_state_on_queue(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55123);
    }
    id v5 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
    if (v5)
    {
      uint64_t cached_content_for_protocol = nw_association_get_cached_content_for_protocol(v3, v5);
      if (cached_content_for_protocol)
      {
        uint64_t v7 = *(void *)(cached_content_for_protocol + 8);
        uint64_t v8 = *(void *)(cached_content_for_protocol + 16);
      }

      else
      {
        uint64_t v7 = 0LL;
        uint64_t v8 = 0LL;
      }

      v4[2](v4, v7, v8);
LABEL_9:

      goto LABEL_10;
    }

    __nwlog_obj();
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v28 = "nw_quic_access_0rtt_state_on_queue";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v14, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v28 = "nw_quic_access_0rtt_state_on_queue";
          _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s called with null definition", buf, 0xCu);
        }
      }

      else if (v25)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        BOOL v22 = os_log_type_enabled(v15, type);
        if (backtrace_string)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v28 = "nw_quic_access_0rtt_state_on_queue";
            __int16 v29 = 2082;
            os_log_type_t v30 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v15,  v21,  "%{public}s called with null definition, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_45;
        }

        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v28 = "nw_quic_access_0rtt_state_on_queue";
          _os_log_impl(&dword_181A5C000, v15, v21, "%{public}s called with null definition, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v28 = "nw_quic_access_0rtt_state_on_queue";
          _os_log_impl( &dword_181A5C000,  v15,  v24,  "%{public}s called with null definition, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_1823163A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_protocol_copy_quic_stream_definition_block_invoke()
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  named = nw_protocol_definition_create_named(3, "quic");
  id v1 = (void *)nw_protocol_copy_quic_stream_definition::quic_definition;
  nw_protocol_copy_quic_stream_definition::quic_definition = (uint64_t)named;

  nw_protocol_definition_set_options_allocator( (void *)nw_protocol_copy_quic_stream_definition::quic_definition,  (uint64_t)nw_quic_stream_allocate_options,  (uint64_t)nw_quic_stream_copy_options,  (uint64_t)nw_quic_stream_deallocate_options);
  nw_protocol_definition_set_options_comparator( (void *)nw_protocol_copy_quic_stream_definition::quic_definition,  (uint64_t)nw_quic_stream_option_compare);
  nw_protocol_definition_set_options_serializer( (void *)nw_protocol_copy_quic_stream_definition::quic_definition,  0,  (uint64_t)nw_quic_stream_serialize_options,  (uint64_t)nw_quic_stream_deserialize_options);
  nw_protocol_definition_set_metadata_initializer( (void *)nw_protocol_copy_quic_stream_definition::quic_definition,  0x30u,  nw_quic_stream_initialize_metadata,  nw_quic_stream_finalize_metadata);
  id v2 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
  id v3 = v2;
  if (v2)
  {
    *((_BYTE *)v2 + 184) |= 8u;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_protocol_definition_set_receive_single_message";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_definition_set_receive_single_message";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null definition", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_protocol_definition_set_receive_single_message";
          __int16 v19 = 2082;
          os_log_type_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null definition, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_definition_set_receive_single_message";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_definition_set_receive_single_message";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null definition, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182316738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_quic_stream_allocate_options(void *a1)
{
  id v1 = a1;
  id v2 = calloc(1uLL, 0x20uLL);
  if (!v2)
  {
    __nwlog_obj();
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    uint64_t v7 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v7);
    if (result)
    {
      __break(1u);
      return result;
    }

    free(v7);
  }

  if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55123);
  }
  options = nw_protocol_create_options((void *)nw_protocol_copy_quic_connection_definition::quic_definition);
  id v4 = (void *)v2[2];
  v2[2] = options;

  return (BOOL)v2;
}

void sub_1823168B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_quic_stream_copy_options(void *a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v22 = "nw_quic_stream_copy_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        time_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_quic_stream_copy_options";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null existing_handle", buf, 0xCu);
        }
      }

      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        time_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        BOOL v17 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v22 = "nw_quic_stream_copy_options";
            __int16 v23 = 2082;
            uint64_t v24 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }

        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_quic_stream_copy_options";
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null existing_handle, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        time_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v22 = "nw_quic_stream_copy_options";
          _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s called with null existing_handle, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182316C58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_stream_deallocate_options(uint64_t a1, void *a2)
{
  id v3 = (void *)a2[2];
  a2[2] = 0LL;

  free(a2);
}

uint64_t nw_quic_stream_option_compare(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return nw_protocol_option_is_equal(*(void **)(a2 + 16), *(void **)(a3 + 16));
}

uint64_t nw_quic_stream_serialize_options(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  if (a2)
  {
    if (a3)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      uint64_t v26 = 0LL;
      id v6 = *(void **)(a2 + 16);
      v22[0] = MEMORY[0x1895F87A8];
      v22[1] = 3221225472LL;
      v22[2] = ___ZL32nw_quic_stream_serialize_optionsPU36objcproto25OS_nw_protocol_definition8NSObjectPvPm_block_invoke;
      v22[3] = &unk_189BC6778;
      v22[4] = buf;
      v22[5] = a3;
      v22[6] = a2;
      nw_protocol_options_access_handle(v6, v22);
      uint64_t v7 = *(void *)(*(void *)&buf[8] + 24LL);
      _Block_object_dispose(buf, 8);
      goto LABEL_4;
    }

    __nwlog_obj();
    BOOL v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_quic_stream_serialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        time_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_serialize_options";
          _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null out_length", buf, 0xCu);
        }

void sub_1823171B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  _Unwind_Resume(a1);
}

BOOL nw_quic_stream_deserialize_options(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  if (!a2)
  {
    __nwlog_obj();
    time_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v30 = "nw_quic_stream_deserialize_options";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (__nwlog_fault(v12, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v30 = "nw_quic_stream_deserialize_options";
          _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null serialized_bytes", buf, 0xCu);
        }

        goto LABEL_41;
      }

      if (!v27)
      {
        __nwlog_obj();
        BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v30 = "nw_quic_stream_deserialize_options";
          _os_log_impl( &dword_181A5C000,  v13,  v24,  "%{public}s called with null serialized_bytes, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v30 = "nw_quic_stream_deserialize_options";
          _os_log_impl( &dword_181A5C000,  v13,  v20,  "%{public}s called with null serialized_bytes, no backtrace",  buf,  0xCu);
        }

        goto LABEL_41;
      }

      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v30 = "nw_quic_stream_deserialize_options";
        __int16 v31 = 2082;
        uint64_t v32 = (uint64_t)backtrace_string;
        _os_log_impl( &dword_181A5C000,  v13,  v20,  "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s",  buf,  0x16u);
      }

void sub_1823177C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double nw_quic_stream_initialize_metadata(uint64_t a1, _OWORD *a2)
{
  double result = 0.0;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  *((void *)a2 + 2) = -1LL;
  return result;
}

void nw_quic_stream_finalize_metadata(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(void *)a2 = -1LL;
    id v3 = *(void **)(a2 + 24);
    *(void *)(a2 + 24) = 0LL;

    id v4 = *(void **)(a2 + 32);
    *(void *)(a2 + 32) = 0LL;
  }
}

uint64_t nw_quic_stream_should_serialize_options(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a2) {
    return nw_protocol_options_access_handle(*(void **)(a2 + 16), &__block_literal_global_57_55301);
  }
  __nwlog_obj();
  id v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v14 = "nw_quic_stream_should_serialize_options";
  id v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v14 = "nw_quic_stream_should_serialize_options";
        _os_log_impl(&dword_181A5C000, v5, v6, "%{public}s called with null existing_handle", buf, 0xCu);
      }
    }

    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v14 = "nw_quic_stream_should_serialize_options";
          __int16 v15 = 2082;
          os_log_type_t v16 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v8,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_19;
      }

      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v14 = "nw_quic_stream_should_serialize_options";
        _os_log_impl(&dword_181A5C000, v5, v8, "%{public}s called with null existing_handle, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v14 = "nw_quic_stream_should_serialize_options";
        _os_log_impl( &dword_181A5C000,  v5,  v10,  "%{public}s called with null existing_handle, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL ___ZL39nw_quic_stream_should_serialize_optionsPU36objcproto25OS_nw_protocol_definition8NSObjectPv_block_invoke( uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 128) != 0LL;
}

uint64_t ___ZL34nw_quic_stream_deserialize_optionsPU36objcproto25OS_nw_protocol_definition8NSObjectPKvm_block_invoke( void *a1, uint64_t a2)
{
  uint64_t v58 = *MEMORY[0x1895F89C0];
  uint64_t v4 = a1[4];
  int v5 = *(unsigned __int16 *)(a2 + 215);
  *(_DWORD *)(a2 + 192) = *(_DWORD *)v4;
  *(void *)(a2 + 204) = *(void *)(v4 + 4);
  int v6 = v5 | (*(unsigned __int8 *)(a2 + 217) << 16);
  LODWORD(v4) = v6 & 0xFFFFFFFB | (4 * (*(_WORD *)(v4 + 16) & 1));
  unsigned int v7 = (v6 & 0xFFFFFFFB) >> 16;
  *(_BYTE *)(a2 + 217) = v7;
  *(_WORD *)(a2 + 215) = v4;
  LODWORD(v4) = v4 & 0xFFFF7FFF | (((*(unsigned __int16 *)(a1[4] + 16LL) >> 7) & 1) << 15);
  *(_BYTE *)(a2 + 217) = v7;
  *(_WORD *)(a2 + 215) = v4;
  LODWORD(v4) = v4 & 0xFFFFFFDF | (32 * ((*(unsigned __int16 *)(a1[4] + 16LL) >> 1) & 1));
  *(_BYTE *)(a2 + 217) = v7;
  *(_WORD *)(a2 + 215) = v4;
  LODWORD(v4) = v4 & 0xFFFFFFBF | (((*(unsigned __int16 *)(a1[4] + 16LL) >> 2) & 1) << 6);
  *(_BYTE *)(a2 + 217) = v7;
  *(_WORD *)(a2 + 215) = v4;
  LODWORD(v4) = v4 & 0xFFFFFF7F | (((*(unsigned __int16 *)(a1[4] + 16LL) >> 3) & 1) << 7);
  *(_BYTE *)(a2 + 217) = v7;
  *(_WORD *)(a2 + 215) = v4;
  int v8 = *(unsigned __int16 *)(a1[4] + 16LL) >> 10;
  *(_WORD *)(a2 + 215) = v4;
  LODWORD(v4) = v4 & 0xFFEFFFFF | ((v8 & 1) << 20);
  unsigned int v9 = WORD1(v4);
  *(_BYTE *)(a2 + 217) = BYTE2(v4);
  int v10 = v4 & 0xFFFFDFFF | (((*(unsigned __int16 *)(a1[4] + 16LL) >> 13) & 1) << 13);
  *(_BYTE *)(a2 + 217) = v9;
  *(_WORD *)(a2 + 215) = v10;
  uint64_t v11 = a1[4];
  *(_DWORD *)(a2 + 200) = *(unsigned __int8 *)(v11 + 14);
  __int16 v12 = *(_WORD *)(v11 + 16);
  if (((((v6 & 0x1000) == 0) ^ ((v12 & 0x40) >> 6)) & 1) == 0)
  {
    *(_BYTE *)(a2 + 217) = BYTE2(v10);
    *(_WORD *)(a2 + 215) = v10 & 0xEFFF | ((v12 & 0x40) << 6);
    if ((v12 & 0x40) != 0)
    {
      options = nw_protocol_create_options(0LL);
      os_log_type_t v14 = 0LL;
    }

    else
    {
      os_log_type_t v14 = (void *)nw_protocol_boringssl_copy_definition();
      options = nw_protocol_create_options(v14);
    }

    objc_storeStrong((id *)(a2 + 96), options);
    __int16 v12 = *(_WORD *)(a1[4] + 16LL);
    int v10 = *(unsigned __int16 *)(a2 + 215) | (*(unsigned __int8 *)(a2 + 217) << 16);
  }

  unsigned int v15 = v12 & 0x1000;
  if (((((v10 & 0x4000) == 0) ^ (v15 >> 12)) & 1) == 0)
  {
    *(_BYTE *)(a2 + 217) = BYTE2(v10);
    *(_WORD *)(a2 + 215) = v10 & 0xBFFF | (4 * v15);
    if (v15) {
      sec_protocol_options_add_tls_key_exchange_group();
    }
  }

  nw_quic_connection_set_trust_certs_internal(a2, (*(unsigned __int16 *)(a1[4] + 16LL) >> 4) & 1);
  if ((*(_WORD *)(a1[4] + 16LL) & 0x20) != 0)
  {
    sec_protocol_options_add_transport_specific_application_protocol();
    int v16 = *(unsigned __int16 *)(a2 + 215) | (*(unsigned __int8 *)(a2 + 217) << 16) | 0x800;
  }

  else
  {
    int v16 = *(_WORD *)(a2 + 215) & 0xF7FF | (*(unsigned __int8 *)(a2 + 217) << 16);
  }

  *(_WORD *)(a2 + 215) = v16;
  *(_BYTE *)(a2 + 217) = BYTE2(v16);
  uint64_t v17 = a1[4];
  unsigned int v18 = *(unsigned __int8 *)(v17 + 12);
  if (*(_BYTE *)(v17 + 12))
  {
    memset(buffer, 0, 20);
    if (v18 >= 0x14) {
      size_t v19 = 20LL;
    }
    else {
      size_t v19 = v18;
    }
    dispatch_data_t v20 = dispatch_data_create(buffer, v19, 0LL, 0LL);
    BOOL v21 = *(void **)(a2 + 152);
    *(void *)(a2 + 152) = v20;

    uint64_t v17 = a1[4];
  }

  os_log_type_t v22 = (const UInt8 *)(v17 + 18);
  if (*(_BYTE *)(v17 + 13))
  {
    BOOL v23 = (const UInt8 *)(v17 + 20);
    unint64_t v24 = a1[5] + a1[6];
    if ((unint64_t)v23 < v24)
    {
      CFIndex v25 = *(unsigned __int16 *)v22;
      os_log_type_t v22 = &v23[v25];
      if ((unint64_t)&v23[v25] <= v24)
      {
        uint64_t v26 = (const __CFAllocator *)*MEMORY[0x189604DB0];
        CFDataRef v27 = CFDataCreate((CFAllocatorRef)*MEMORY[0x189604DB0], v23, v25);
        __int16 v28 = v22 + 2;
        unint64_t v29 = a1[5] + a1[6];
        if ((unint64_t)(v22 + 2) >= v29)
        {
          Mutable = 0LL;
        }

        else
        {
          Mutable = 0LL;
          unsigned int v31 = 1;
          uint64_t v32 = (const CFArrayCallBacks *)MEMORY[0x189605228];
          while (v31 < *(unsigned __int8 *)(a1[4] + 13LL))
          {
            CFIndex v33 = *(unsigned __int16 *)v22;
            os_log_type_t v22 = &v28[v33];
            if ((unint64_t)&v28[v33] > v29)
            {
              os_log_type_t v22 = v28;
              if (v27) {
                goto LABEL_32;
              }
              goto LABEL_33;
            }

            CFDataRef v34 = CFDataCreate(v26, v28, v33);
            if (!Mutable) {
              Mutable = CFArrayCreateMutable(v26, 0LL, v32);
            }
            CFArrayAppendValue(Mutable, v34);
            if (v34) {
              CFRelease(v34);
            }
            ++v31;
            __int16 v28 = v22 + 2;
            unint64_t v29 = a1[5] + a1[6];
          }
        }

        if (v27)
        {
LABEL_32:
          nw_quic_connection_set_client_identity_reference_internal(a2, v27, Mutable, 0);
          CFRelease(v27);
        }

void sub_182318270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_trust_certs_internal(uint64_t a1, int a2)
{
  if (a2)
  {
    if (os_variant_allows_internal_security_policies())
    {
      id v3 = *(sec_protocol_options **)(a1 + 96);
      if (nw_context_copy_implicit_context::onceToken != -1) {
        dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
      }
      id v4 = (id)nw_context_copy_implicit_context::implicit_context;
      BOOL v5 = nw_context_copy_workloop(v4);
      sec_protocol_options_set_verify_block(v3, &__block_literal_global_58_55326, (dispatch_queue_t)v5);

      *(_WORD *)(a1 + 215) |= 0x400u;
    }
  }

  else
  {
    int v6 = *(unsigned __int16 *)(a1 + 215);
    int v7 = *(unsigned __int8 *)(a1 + 217);
    *(_WORD *)(a1 + 215) = v6 & 0xFBFF;
    *(_BYTE *)(a1 + 217) = (v6 & 0xFFFFFBFF | (v7 << 16)) >> 16;
  }

void sub_182318354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_client_identity_reference_internal( uint64_t a1, const void *a2, CFTypeRef cf, int a4)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  int v8 = *(const void **)(a1 + 112);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 112) = 0LL;
  }

  unsigned int v9 = *(const void **)(a1 + 120);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 120) = 0LL;
  }

  uint64_t v32 = a1;
  if (!cf)
  {
    int v30 = a4;
    CFTypeRef cfa = a2;
    __int16 v12 = 0LL;
    goto LABEL_26;
  }

  *(void *)(a1 + 120) = CFRetain(cf);
  if (a4)
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
    if (Count < 1)
    {
      if (!a2) {
        return;
      }
      BOOL v23 = a2;
      __int16 v12 = 0LL;
      *(void *)(a1 + 112) = CFRetain(a2);
      goto LABEL_28;
    }

    CFIndex v11 = Count;
    int v30 = a4;
    CFTypeRef cfa = a2;
    __int16 v12 = 0LL;
    CFIndex v13 = 0LL;
    os_log_type_t v14 = (const __CFAllocator *)*MEMORY[0x189604DB0];
    CFDataRef v34 = (const void *)*MEMORY[0x18960BE30];
    CFIndex v33 = (const void *)*MEMORY[0x189604DE8];
    unsigned int v15 = (const void *)*MEMORY[0x18960BB38];
    int v16 = (const void *)*MEMORY[0x18960BB40];
    uint64_t v17 = (const void *)*MEMORY[0x18960BE80];
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, v13);
      Mutable = CFDictionaryCreateMutable(v14, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
      CFDictionaryAddValue(Mutable, v34, v33);
      CFDictionaryAddValue(Mutable, v15, v16);
      CFDictionaryAddValue(Mutable, v17, ValueAtIndex);
      CFTypeRef result = 0LL;
      OSStatus v20 = SecItemCopyMatching(Mutable, &result);
      if (Mutable) {
        CFRelease(Mutable);
      }
      if (v20) {
        break;
      }
      CFTypeRef v21 = result;
      if (result)
      {
        os_log_type_t v22 = v12;
        if (!v12)
        {
          os_log_type_t v22 = CFArrayCreateMutable(v14, 0LL, MEMORY[0x189605228]);
          CFTypeRef v21 = result;
        }

        __int16 v12 = v22;
        CFArrayAppendValue(v22, v21);
        if (result) {
          CFRelease(result);
        }
      }

      if (v11 == ++v13) {
        goto LABEL_26;
      }
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v24 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      CFIndex v37 = "nw_quic_connection_set_client_identity_reference_internal";
      __int16 v38 = 1024;
      OSStatus v39 = v20;
      _os_log_impl( &dword_181A5C000,  v24,  OS_LOG_TYPE_DEBUG,  "%{public}s Failed to retrieve certificate (%d)",  buf,  0x12u);
    }

LABEL_26:
    if (!cfa || (BOOL v23 = cfa, *(void *)(v32 + 112) = CFRetain(cfa), !v30))
    {
LABEL_40:
      if (v12) {
        CFRelease(v12);
      }
      return;
    }

void sub_1823187D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL43nw_quic_connection_set_trust_certs_internalP35nw_protocol_quic_connection_optionsb_block_invoke( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a4, 1LL);
}

BOOL ___ZL32nw_quic_stream_serialize_optionsPU36objcproto25OS_nw_protocol_definition8NSObjectPvPm_block_invoke( uint64_t a1, uint64_t a2)
{
  id v4 = *(const __CFArray **)(a2 + 104);
  if (!v4)
  {
    uint64_t v7 = 0LL;
    goto LABEL_8;
  }

  CFIndex Count = CFArrayGetCount(v4);
  if (Count)
  {
    CFIndex v6 = Count;
    uint64_t v7 = 0LL;
    for (CFIndex i = 0LL; i != v6; ++i)
    {
      ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 104), i);
      if (ValueAtIndex) {
        v7 += CFDataGetLength(ValueAtIndex) + 2;
      }
    }

nw_protocol_definition_t nw_protocol_copy_quic_definition(void)
{
  if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55294);
  }
  return (nw_protocol_definition_t)(id)nw_protocol_copy_quic_stream_definition::quic_definition;
}

BOOL nw_protocol_options_is_quic_stream(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = (id *)v1;
    id v4 = v3[1];

    if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55294);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v4,  nw_protocol_copy_quic_stream_definition::quic_definition);

    goto LABEL_5;
  }

  __nwlog_obj();
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  unsigned int v18 = "nw_protocol_options_is_quic_stream";
  int v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unsigned int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v18 = "nw_protocol_options_is_quic_stream";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unsigned int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v18 = "nw_protocol_options_is_quic_stream";
          __int16 v19 = 2082;
          CFIndex v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v18 = "nw_protocol_options_is_quic_stream";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      unsigned int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v18 = "nw_protocol_options_is_quic_stream";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182319214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_protocol_options *nw_quic_create_connection_options()
{
  if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55123);
  }
  return nw_protocol_create_options((void *)nw_protocol_copy_quic_connection_definition::quic_definition);
}

NWConcrete_nw_protocol_options *nw_quic_create_stream_options()
{
  if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55294);
  }
  return nw_protocol_create_options((void *)nw_protocol_copy_quic_stream_definition::quic_definition);
}

nw_protocol_options_t nw_quic_create_options(void)
{
  if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55294);
  }
  return (nw_protocol_options_t)nw_protocol_create_options((void *)nw_protocol_copy_quic_stream_definition::quic_definition);
}

void nw_quic_add_tls_application_protocol(nw_protocol_options_t options, const char *application_protocol)
{
  id v3 = nw_quic_copy_sec_protocol_options(options);
  sec_protocol_options_add_tls_application_protocol(v3, application_protocol);
}

void sub_182319324( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

sec_protocol_options_t nw_quic_copy_sec_protocol_options(nw_protocol_options_t options)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = options;
  if (nw_protocol_options_is_quic(v1))
  {
    if (nw_protocol_options_is_quic_stream(v1))
    {
      id v2 = (nw_protocol_options *)nw_quic_stream_copy_shared_connection_options(v1);

      id v1 = v2;
    }

    id v3 = (sec_protocol_options *)nw_quic_connection_copy_sec_protocol_options(v1);
    goto LABEL_5;
  }

  __nwlog_obj();
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  unsigned __int8 v16 = "nw_quic_copy_sec_protocol_options";
  CFIndex v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unsigned __int8 v16 = "nw_quic_copy_sec_protocol_options";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_quic(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          unsigned __int8 v16 = "nw_quic_copy_sec_protocol_options";
          __int16 v17 = 2082;
          unsigned int v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_quic(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        unsigned __int8 v16 = "nw_quic_copy_sec_protocol_options";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_quic(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unsigned __int8 v16 = "nw_quic_copy_sec_protocol_options";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_options_is_quic(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823195F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_quic_stream_copy_shared_connection_options(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_stream(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    unsigned __int8 v16 = __Block_byref_object_copy__55130;
    __int16 v17 = __Block_byref_object_dispose__55131;
    id v18 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_stream_copy_shared_connection_options_block_invoke;
    v12[3] = &unk_189BC60A8;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    id v2 = *(id *)(*(void *)&buf[8] + 40LL);
    _Block_object_dispose(buf, 8);

    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_stream_copy_shared_connection_options";
  BOOL v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      CFIndex v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_copy_shared_connection_options";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_stream(stream_options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      CFIndex v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_copy_shared_connection_options";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_stream(stream_options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_copy_shared_connection_options";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_stream(stream_options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      CFIndex v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_copy_shared_connection_options";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_stream(stream_options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182319924( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id a24)
{
  _Unwind_Resume(a1);
}

id nw_quic_connection_copy_sec_protocol_options(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    unsigned __int8 v16 = __Block_byref_object_copy__55130;
    __int16 v17 = __Block_byref_object_dispose__55131;
    id v18 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_copy_sec_protocol_options_block_invoke;
    v12[3] = &unk_189BC60A8;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    id v2 = *(id *)(*(void *)&buf[8] + 40LL);
    _Block_object_dispose(buf, 8);

    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_copy_sec_protocol_options";
  BOOL v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      CFIndex v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_copy_sec_protocol_options";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      CFIndex v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_copy_sec_protocol_options";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_copy_sec_protocol_options";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      CFIndex v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_copy_sec_protocol_options";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182319C74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id a24)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_copy_sec_protocol_options_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

uint64_t __nw_quic_stream_copy_shared_connection_options_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

void nw_quic_connection_set_override_trust_certs_for_tests(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_override_trust_certs_for_tests_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_quic_connection_set_override_trust_certs_for_tests";
  BOOL v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      CFIndex v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_override_trust_certs_for_tests";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      CFIndex v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_quic_connection_set_override_trust_certs_for_tests";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_override_trust_certs_for_tests";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      CFIndex v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_override_trust_certs_for_tests";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182319FC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_override_trust_certs_for_tests_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

void nw_quic_connection_add_h3_alpn(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_add_h3_alpn_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_quic_connection_add_h3_alpn";
  BOOL v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      CFIndex v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_add_h3_alpn";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      CFIndex v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_quic_connection_add_h3_alpn";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_add_h3_alpn";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      CFIndex v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_add_h3_alpn";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18231A2C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_add_h3_alpn_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 32))
  {
    sec_protocol_options_add_transport_specific_application_protocol();
    *(_WORD *)(a2 + 215) |= 0x800u;
  }

  else
  {
    int v3 = *(unsigned __int16 *)(a2 + 215);
    int v4 = *(unsigned __int8 *)(a2 + 217);
    *(_WORD *)(a2 + 215) = v3 & 0xF7FF;
    *(_BYTE *)(a2 + 217) = (v3 & 0xFFFFF7FF | (v4 << 16)) >> 16;
  }

  return 1LL;
}

void nw_quic_connection_set_server_raw_public_keys(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_server_raw_public_keys_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  unsigned __int8 v16 = "nw_quic_connection_set_server_raw_public_keys";
  BOOL v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      CFIndex v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        unsigned __int8 v16 = "nw_quic_connection_set_server_raw_public_keys";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      CFIndex v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          unsigned __int8 v16 = "nw_quic_connection_set_server_raw_public_keys";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        unsigned __int8 v16 = "nw_quic_connection_set_server_raw_public_keys";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      CFIndex v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        unsigned __int8 v16 = "nw_quic_connection_set_server_raw_public_keys";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18231A608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_server_raw_public_keys_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = *(const void **)(a1 + 32);
  int v4 = *(const void **)(a2 + 104);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a2 + 104) = 0LL;
  }

  if (v3 && CFArrayGetCount((CFArrayRef)v3) >= 1)
  {
    *(void *)(a2 + 104) = CFRetain(v3);
    sec_protocol_options_set_server_raw_public_key_certificates();
  }

  return 1LL;
}

void nw_quic_connection_set_client_identity_reference(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  if (nw_protocol_options_is_quic_connection(v5))
  {
    v14[0] = MEMORY[0x1895F87A8];
    v14[1] = 3221225472LL;
    v14[2] = __nw_quic_connection_set_client_identity_reference_block_invoke;
    v14[3] = &__block_descriptor_48_e9_B16__0_v8l;
    v14[4] = a2;
    v14[5] = a3;
    nw_protocol_options_access_handle(v5, v14);
    goto LABEL_3;
  }

  __nwlog_obj();
  CFIndex v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_connection_set_client_identity_reference";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v16 = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v7, &v16, &v15))
  {
    if (v16 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_client_identity_reference";
        _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = v16;
      BOOL v12 = os_log_type_enabled(v8, v16);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_connection_set_client_identity_reference";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_client_identity_reference";
        _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_client_identity_reference";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18231A948(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_client_identity_reference_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

BOOL nw_quic_connection_fetch_client_identity_reference(void *a1, const unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  if (nw_protocol_options_is_quic_connection(v5))
  {
    if (!uuid_is_null(a2))
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      char v25 = 1;
      v21[0] = MEMORY[0x1895F87A8];
      v21[1] = 3221225472LL;
      v21[2] = __nw_quic_connection_fetch_client_identity_reference_block_invoke;
      v21[3] = &unk_189BC6778;
      v21[4] = buf;
      v21[5] = a2;
      v21[6] = a3;
      nw_protocol_options_access_handle(v5, v21);
      BOOL v6 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
      _Block_object_dispose(buf, 8);
      goto LABEL_4;
    }

    __nwlog_obj();
    BOOL v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_quic_connection_fetch_client_identity_reference";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_fetch_client_identity_reference";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null !uuid_is_null(proxy_uuid)", buf, 0xCu);
        }

void sub_18231AEA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_fetch_client_identity_reference_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  if (*(void *)(a2 + 112))
  {
    uint64_t v31 = 0LL;
    uint64_t v32 = &v31;
    uint64_t v33 = 0x2020000000LL;
    char v34 = 0;
    v30[1] = (id)MEMORY[0x1895F87A8];
    v30[2] = (id)3221225472LL;
    v30[3] = __nw_quic_connection_fetch_client_identity_reference_block_invoke_2;
    v30[4] = &unk_189BC60A8;
    v30[5] = &v31;
    sec_protocol_options_access_handle();
    if (!*((_BYTE *)v32 + 24))
    {
      int v4 = *(const __CFArray **)(a2 + 120);
      if (v4 && (CFIndex Count = CFArrayGetCount(v4), Count >= 1))
      {
        Mutable = 0LL;
        CFIndex v7 = 0LL;
        os_log_type_t v8 = (const __CFAllocator *)*MEMORY[0x189604DB0];
        while (1)
        {
          ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 120), v7);
          CFDataGetBytePtr(ValueAtIndex);
          CFDataGetLength(ValueAtIndex);
          BOOL v10 = (void *)NEHelperCopyDataForCertificate();
          os_log_type_t v11 = v10;
          if (!v10) {
            break;
          }
          xpc_data_get_bytes_ptr(v10);
          xpc_data_get_length(v11);
          BOOL v12 = (__SecIdentity *)SecCertificateCreateWithBytes();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v13 = (os_log_s *)(id)gLogObj;
          char v14 = v13;
          if (!v12)
          {
            if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_quic_connection_fetch_client_identity_reference_block_invoke";
              _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_ERROR,  "%{public}s Failed to create certificate from data",  buf,  0xCu);
            }

            goto LABEL_20;
          }

          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_quic_connection_fetch_client_identity_reference_block_invoke";
            __int16 v36 = 2112;
            uint64_t v37 = v12;
            _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_DEBUG,  "%{public}s Fetched certificate %@ from NEHelper",  buf,  0x16u);
          }

          if (!Mutable) {
            Mutable = CFArrayCreateMutable(v8, 0LL, MEMORY[0x189605228]);
          }
          CFArrayAppendValue(Mutable, v12);
          CFRelease(v12);

          if (Count == ++v7) {
            goto LABEL_21;
          }
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v14 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_fetch_client_identity_reference_block_invoke";
          _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_ERROR,  "%{public}s Failed to fetch certificate from NEHelper",  buf,  0xCu);
        }

        os_log_type_t v11 = 0LL;
LABEL_20:

        *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0;
      }

      else
      {
        Mutable = 0LL;
      }

void sub_18231B504( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_fetch_client_identity_reference_block_invoke_2(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 56)) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  }
  return 1LL;
}

uint64_t nw_quic_connection_get_selected_key_index(void *a1)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic((nw_protocol_options_t)v1))
  {
    if (nw_protocol_options_is_quic_stream(v1))
    {
      id v2 = nw_quic_stream_copy_shared_connection_options(v1);

      id v1 = v2;
    }

    *(void *)uint64_t v21 = 0LL;
    *(void *)&v21[8] = v21;
    *(void *)&v21[16] = 0x2020000000LL;
    char v22 = -1;
    v15[0] = MEMORY[0x1895F87A8];
    v15[1] = 3221225472LL;
    v15[2] = __nw_quic_connection_get_selected_key_index_block_invoke;
    v15[3] = &unk_189BC60A8;
    v15[4] = v21;
    nw_protocol_options_access_handle(v1, v15);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      int v4 = *(unsigned __int8 *)(*(void *)&v21[8] + 24LL);
      *(_DWORD *)buf = 136446466;
      BOOL v18 = "nw_quic_connection_get_selected_key_index";
      __int16 v19 = 1024;
      int v20 = v4;
      _os_log_impl(&dword_181A5C000, v3, OS_LOG_TYPE_DEBUG, "%{public}s Getting key index=%d", buf, 0x12u);
    }

    uint64_t v5 = *(unsigned __int8 *)(*(void *)&v21[8] + 24LL);
    _Block_object_dispose(v21, 8);
    goto LABEL_7;
  }

  __nwlog_obj();
  CFIndex v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)uint64_t v21 = 136446210;
  *(void *)&v21[4] = "nw_quic_connection_get_selected_key_index";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  char v16 = 0;
  if (__nwlog_fault(v8, buf, &v16))
  {
    if (buf[0] == 17)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = buf[0];
      if (os_log_type_enabled(v9, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)uint64_t v21 = 136446210;
        *(void *)&v21[4] = "nw_quic_connection_get_selected_key_index";
        _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null nw_protocol_options_is_quic(options)",  v21,  0xCu);
      }
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = buf[0];
      BOOL v13 = os_log_type_enabled(v9, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)uint64_t v21 = 136446466;
          *(void *)&v21[4] = "nw_quic_connection_get_selected_key_index";
          *(_WORD *)&v21[12] = 2082;
          *(void *)&v21[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null nw_protocol_options_is_quic(options), dumping backtrace:%{public}s",  v21,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }

      if (v13)
      {
        *(_DWORD *)uint64_t v21 = 136446210;
        *(void *)&v21[4] = "nw_quic_connection_get_selected_key_index";
        _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null nw_protocol_options_is_quic(options), no backtrace",  v21,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = buf[0];
      if (os_log_type_enabled(v9, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)uint64_t v21 = 136446210;
        *(void *)&v21[4] = "nw_quic_connection_get_selected_key_index";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null nw_protocol_options_is_quic(options), backtrace limit exceeded",  v21,  0xCu);
      }
    }
  }

void sub_18231B954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_selected_key_index_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_BYTE *)(a2 + 214);
  return 1LL;
}

void nw_quic_connection_set_local_identity(void *a1, void *a2)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    uint64_t v5 = nw_utilities_public_key_info_for_sec_identity(v4);
    if (v5)
    {
      BOOL v6 = nw_quic_copy_sec_protocol_options(v3);
      CFIndex v7 = v6;
      if (v6)
      {
        sec_protocol_options_set_local_identity(v6, (sec_identity_t)v4);
        v32[0] = MEMORY[0x1895F87A8];
        v32[1] = 3221225472LL;
        v32[2] = __nw_quic_connection_set_local_identity_block_invoke;
        v32[3] = &unk_189BC6260;
        id v33 = v5;
        nw_protocol_options_access_handle(v3, v32);

LABEL_5:
LABEL_6:

        goto LABEL_7;
      }

      __nwlog_obj();
      char v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      uint64_t v37 = "nw_quic_connection_set_local_identity";
      id v17 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v34 = 0;
      if (__nwlog_fault(v17, &type, &v34))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          BOOL v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v19 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v37 = "nw_quic_connection_set_local_identity";
            _os_log_impl(&dword_181A5C000, v18, v19, "%{public}s called with null sec_options", buf, 0xCu);
          }
        }

        else if (v34)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          BOOL v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v27 = type;
          BOOL v28 = os_log_type_enabled(v18, type);
          if (backtrace_string)
          {
            if (v28)
            {
              *(_DWORD *)buf = 136446466;
              uint64_t v37 = "nw_quic_connection_set_local_identity";
              __int16 v38 = 2082;
              OSStatus v39 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v18,  v27,  "%{public}s called with null sec_options, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(backtrace_string);
            goto LABEL_60;
          }

          if (v28)
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v37 = "nw_quic_connection_set_local_identity";
            _os_log_impl(&dword_181A5C000, v18, v27, "%{public}s called with null sec_options, no backtrace", buf, 0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          BOOL v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v31 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v37 = "nw_quic_connection_set_local_identity";
            _os_log_impl( &dword_181A5C000,  v18,  v31,  "%{public}s called with null sec_options, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

void sub_18231C0C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_local_identity_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = *(const void **)(a2 + 128);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a2 + 12_Block_object_dispose((const void *)(v2 - 96), 8) = 0LL;
  }

  *(void *)(a2 + 12_Block_object_dispose((const void *)(v2 - 96), 8) = *(id *)(a1 + 32);
  return 1LL;
}

id nw_quic_connection_copy_local_public_key(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    char v16 = __Block_byref_object_copy__55130;
    id v17 = __Block_byref_object_dispose__55131;
    id v18 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_copy_local_public_key_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    id v2 = *(id *)(*(void *)&buf[8] + 40LL);
    _Block_object_dispose(buf, 8);

    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_copy_local_public_key";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_copy_local_public_key";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_copy_local_public_key";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_copy_local_public_key";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_copy_local_public_key";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18231C468( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id a24)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_copy_local_public_key_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

void nw_quic_connection_set_trusted_peer_keys(void *a1, void *a2, void *a3)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a2;
  os_log_type_t v7 = a3;
  if (nw_protocol_options_is_quic((nw_protocol_options_t)v5))
  {
    if (nw_protocol_options_is_quic_stream(v5))
    {
      id v8 = nw_quic_stream_copy_shared_connection_options(v5);

      id v5 = v8;
    }

    if (nw_protocol_options_access_handle(v5, &__block_literal_global_17_55474))
    {
      os_log_type_t v9 = nw_quic_copy_sec_protocol_options((nw_protocol_options_t)v5);
      objc_initWeak((id *)location, v5);
      verify_block[0] = MEMORY[0x1895F87A8];
      verify_block[1] = 3221225472LL;
      verify_block[2] = __nw_quic_connection_set_trusted_peer_keys_block_invoke_18;
      verify_block[3] = &unk_189BC0F38;
      id v19 = v6;
      objc_copyWeak(&v20, (id *)location);
      sec_protocol_options_set_verify_block(v9, verify_block, v7);
      objc_destroyWeak(&v20);

      objc_destroyWeak((id *)location);
    }

    goto LABEL_6;
  }

  __nwlog_obj();
  BOOL v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)location = 136446210;
  *(void *)&location[4] = "nw_quic_connection_set_trusted_peer_keys";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (__nwlog_fault(v11, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_quic_connection_set_trusted_peer_keys";
        _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s called with null nw_protocol_options_is_quic(options)",  location,  0xCu);
      }
    }

    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)location = 136446466;
          *(void *)&location[4] = "nw_quic_connection_set_trusted_peer_keys";
          __int16 v24 = 2082;
          BOOL v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null nw_protocol_options_is_quic(options), dumping backtrace:%{public}s",  location,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v16)
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_quic_connection_set_trusted_peer_keys";
        _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null nw_protocol_options_is_quic(options), no backtrace",  location,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_quic_connection_set_trusted_peer_keys";
        _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null nw_protocol_options_is_quic(options), backtrace limit exceeded",  location,  0xCu);
      }
    }
  }

void sub_18231C838( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void __nw_quic_connection_set_trusted_peer_keys_block_invoke_18(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v6 = a3;
  os_log_type_t v7 = a4;
  unsigned __int8 v25 = -1;
  uint64_t v8 = nw_utilities_trust_ref_matches_public_key(v6, *(void **)(a1 + 32), &v25);
  v7[2](v7, v8);
  if (v25 != 255)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    BOOL v10 = WeakRetained;
    if (!WeakRetained)
    {
LABEL_12:

      goto LABEL_13;
    }

    int v11 = v25;
    id v12 = WeakRetained;
    if (nw_protocol_options_is_quic_connection(v12))
    {

LABEL_6:
      os_log_type_t v14 = v12;
      if (nw_protocol_options_is_quic_stream(v12))
      {
        id v15 = nw_quic_stream_copy_shared_connection_options(v12);

        os_log_type_t v14 = v15;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v16 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_set_selected_key_index";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v11;
        _os_log_impl(&dword_181A5C000, v16, OS_LOG_TYPE_DEBUG, "%{public}s Setting key index=%d", buf, 0x12u);
      }

      *(void *)buf = MEMORY[0x1895F87A8];
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&buf[16] = ___ZL41nw_quic_connection_set_selected_key_indexPU33objcproto22OS_nw_protocol_options8NSObjecth_block_invoke;
      os_log_type_t v29 = &__block_descriptor_33_e9_B16__0_v8l;
      char v30 = v11;
      nw_protocol_options_access_handle(v14, buf);
LABEL_11:

      goto LABEL_12;
    }

    BOOL is_quic_stream = nw_protocol_options_is_quic_stream(v12);

    if (is_quic_stream) {
      goto LABEL_6;
    }
    __nwlog_obj();
    os_log_type_t v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_quic_connection_set_selected_key_index";
    id v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (__nwlog_fault(v18, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_set_selected_key_index";
          _os_log_impl( &dword_181A5C000,  v19,  v20,  "%{public}s called with null nw_protocol_options_is_quic(options)",  buf,  0xCu);
        }
      }

      else if (v26)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v22 = type;
        BOOL v23 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_quic_connection_set_selected_key_index";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v19,  v22,  "%{public}s called with null nw_protocol_options_is_quic(options), dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_30;
        }

        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_set_selected_key_index";
          _os_log_impl( &dword_181A5C000,  v19,  v22,  "%{public}s called with null nw_protocol_options_is_quic(options), no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_set_selected_key_index";
          _os_log_impl( &dword_181A5C000,  v19,  v24,  "%{public}s called with null nw_protocol_options_is_quic(options), backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_18231CC90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL41nw_quic_connection_set_selected_key_indexPU33objcproto22OS_nw_protocol_options8NSObjecth_block_invoke( uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 214) = *(_BYTE *)(a1 + 32);
  return 1LL;
}

BOOL __nw_quic_connection_set_trusted_peer_keys_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a2 + 128);
  if (v2)
  {
    CFRelease(*(CFTypeRef *)(a2 + 128));
    *(void *)(a2 + 12_Block_object_dispose((const void *)(v2 - 96), 8) = 0LL;
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136446210;
      os_log_type_t v7 = "nw_quic_connection_set_trusted_peer_keys_block_invoke";
      _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_ERROR,  "%{public}s Not setting verify block, local_public_key is NULL",  (uint8_t *)&v6,  0xCu);
    }
  }

  return v2 != 0;
}

void nw_quic_connection_set_use_swift_tls(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_use_swift_tls_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v17 = "nw_quic_connection_set_use_swift_tls";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_quic_connection_set_use_swift_tls";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v17 = "nw_quic_connection_set_use_swift_tls";
          __int16 v18 = 2082;
          id v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_quic_connection_set_use_swift_tls";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_quic_connection_set_use_swift_tls";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18231D08C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_use_swift_tls_block_invoke(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 32);
  int v3 = *(unsigned __int16 *)(a2 + 215);
  if ((*(_BYTE *)(a1 + 32) != 0) == ((v3 & 0x1000) == 0))
  {
    unsigned int v5 = v3 & 0xFFFFEFFF | (*(unsigned __int8 *)(a2 + 217) << 16);
    *(_BYTE *)(a2 + 217) = BYTE2(v5);
    *(_WORD *)(a2 + 215) = v5 | ((v2 != 0) << 12);
    if (v2)
    {
      options = nw_protocol_create_options(0LL);
      os_log_type_t v7 = 0LL;
    }

    else
    {
      os_log_type_t v7 = (void *)nw_protocol_boringssl_copy_definition();
      options = nw_protocol_create_options(v7);
    }

    objc_storeStrong((id *)(a2 + 96), options);
  }

  return 1LL;
}

void sub_18231D144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_quic_connection_get_use_swift_tls(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_use_swift_tls_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_use_swift_tls";
  unsigned int v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_use_swift_tls";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_use_swift_tls";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_use_swift_tls";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_use_swift_tls";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18231D460( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_use_swift_tls_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(_WORD *)(a2 + 215) & 0x1000) != 0;
  return 1LL;
}

void nw_quic_connection_set_use_x25519(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_use_x25519_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_use_x25519";
  unsigned int v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_use_x25519";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_use_x25519";
          __int16 v18 = 2082;
          id v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_use_x25519";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_use_x25519";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18231D774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_use_x25519_block_invoke(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 32);
  int v3 = *(unsigned __int16 *)(a2 + 215);
  if ((*(_BYTE *)(a1 + 32) != 0) == ((v3 & 0x4000) == 0))
  {
    unsigned int v4 = v3 & 0xFFFFBFFF | (*(unsigned __int8 *)(a2 + 217) << 16);
    *(_BYTE *)(a2 + 217) = BYTE2(v4);
    *(_WORD *)(a2 + 215) = v4 | ((v2 != 0) << 14);
    if (v2) {
      sec_protocol_options_add_tls_key_exchange_group();
    }
  }

  return 1LL;
}

void nw_quic_connection_set_client_identity_is_raw_public_Key(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_client_identity_is_raw_public_Key_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_client_identity_is_raw_public_Key";
  unsigned int v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_client_identity_is_raw_public_Key";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_client_identity_is_raw_public_Key";
          __int16 v18 = 2082;
          id v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_client_identity_is_raw_public_Key";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_client_identity_is_raw_public_Key";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18231DAB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_clear_tls_application_protocols(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic((nw_protocol_options_t)v1))
  {
    if (nw_protocol_options_is_quic_stream(v1))
    {
      id v2 = nw_quic_stream_copy_shared_connection_options(v1);

      id v1 = v2;
    }

    nw_protocol_options_access_handle(v1, &__block_literal_global_20);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v14 = "nw_quic_clear_tls_application_protocols";
  unsigned int v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unsigned int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_quic_clear_tls_application_protocols";
        _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null nw_protocol_options_is_quic(options)",  buf,  0xCu);
      }
    }

    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unsigned int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          char v14 = "nw_quic_clear_tls_application_protocols";
          __int16 v15 = 2082;
          char v16 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v8,  "%{public}s called with null nw_protocol_options_is_quic(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_quic_clear_tls_application_protocols";
        _os_log_impl( &dword_181A5C000,  v5,  v8,  "%{public}s called with null nw_protocol_options_is_quic(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      unsigned int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_quic_clear_tls_application_protocols";
        _os_log_impl( &dword_181A5C000,  v5,  v10,  "%{public}s called with null nw_protocol_options_is_quic(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18231DDB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_clear_tls_application_protocols_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 96)) {
    sec_protocol_options_clear_tls_application_protocols();
  }
  return 1LL;
}

void nw_quic_iterate_tls_application_protocols(void *a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_options_is_quic(v3))
  {
    sec_protocol_options_t v5 = nw_quic_copy_sec_protocol_options(v3);
    os_log_type_t v6 = (void *)sec_protocol_options_copy_transport_specific_application_protocol();
    os_log_type_t v7 = v6;
    if (v6 && object_getClass(v6) == (Class)MEMORY[0x1895F9220])
    {
      applier[0] = MEMORY[0x1895F87A8];
      applier[1] = 3221225472LL;
      applier[2] = __nw_quic_iterate_tls_application_protocols_block_invoke;
      applier[3] = &unk_189BC0F80;
      id v17 = v4;
      xpc_array_apply(v7, applier);
    }

    goto LABEL_6;
  }

  __nwlog_obj();
  os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v21 = "nw_quic_iterate_tls_application_protocols";
  BOOL v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v9, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        char v21 = "nw_quic_iterate_tls_application_protocols";
        _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s called with null nw_protocol_options_is_quic(options)",  buf,  0xCu);
      }
    }

    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          char v21 = "nw_quic_iterate_tls_application_protocols";
          __int16 v22 = 2082;
          BOOL v23 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null nw_protocol_options_is_quic(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        char v21 = "nw_quic_iterate_tls_application_protocols";
        _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null nw_protocol_options_is_quic(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        char v21 = "nw_quic_iterate_tls_application_protocols";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null nw_protocol_options_is_quic(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18231E100( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_iterate_tls_application_protocols_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1895F92E8])
  {
    xpc_string_get_string_ptr(v4);
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    uint64_t v5 = 1LL;
  }

  return v5;
}

void sub_18231E1A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double ___ZL44nw_protocol_dummy_quic_connection_identifierv_block_invoke()
{
  *(void *)&double result = 0x200000003LL;
  qword_18C5A4188 = 0x200000003LL;
  return result;
}

double ___ZL40nw_protocol_dummy_quic_stream_identifierv_block_invoke()
{
  *(void *)&double result = 0x200000003LL;
  qword_18C5A41B8 = 0x200000003LL;
  return result;
}

void nw_quic_connection_set_initial_max_data(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_initial_max_data_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_quic_connection_set_initial_max_data";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_quic_connection_set_initial_max_data";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_quic_connection_set_initial_max_data";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_quic_connection_set_initial_max_data";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_quic_connection_set_initial_max_data";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18231E4D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_initial_max_data_block_invoke(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 32);
  return 1LL;
}

uint64_t nw_quic_connection_get_initial_max_data(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    uint64_t v16 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_initial_max_data_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_data";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_data";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_data";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_data";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_data";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18231E7F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_initial_max_data_block_invoke(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *a2;
  return 1LL;
}

void nw_quic_set_initial_max_data(nw_protocol_options_t options, uint64_t initial_max_data)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(options);
  nw_quic_connection_set_initial_max_data(v3, initial_max_data);
}

void sub_18231E86C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t nw_quic_get_initial_max_data(nw_protocol_options_t options)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(options);
  uint64_t initial_max_data = nw_quic_connection_get_initial_max_data(v1);

  return initial_max_data;
}

void sub_18231E8B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_connection_get_initial_max_streams_bidirectional(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    uint64_t v16 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_initial_max_streams_bidirectional_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_streams_bidirectional";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_streams_bidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_streams_bidirectional";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_streams_bidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_streams_bidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18231EBB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_initial_max_streams_bidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(void *)(a2 + 32);
  return 1LL;
}

void nw_quic_set_initial_max_streams_bidirectional( nw_protocol_options_t options, uint64_t initial_max_streams_bidirectional)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(options);
  nw_quic_connection_set_initial_max_streams_bidirectional(v3, initial_max_streams_bidirectional);
}

void sub_18231EC34( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t nw_quic_get_initial_max_streams_bidirectional(nw_protocol_options_t options)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(options);
  uint64_t initial_max_streams_bidirectional = nw_quic_connection_get_initial_max_streams_bidirectional(v1);

  return initial_max_streams_bidirectional;
}

void sub_18231EC78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_connection_get_initial_max_streams_unidirectional(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    uint64_t v16 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_initial_max_streams_unidirectional_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_streams_unidirectional";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_streams_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_streams_unidirectional";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_streams_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_streams_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18231EF80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_initial_max_streams_unidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(void *)(a2 + 40);
  return 1LL;
}

void nw_quic_set_initial_max_streams_unidirectional( nw_protocol_options_t options, uint64_t initial_max_streams_unidirectional)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(options);
  nw_quic_connection_set_initial_max_streams_unidirectional(v3, initial_max_streams_unidirectional);
}

void sub_18231EFFC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t nw_quic_get_initial_max_streams_unidirectional(nw_protocol_options_t options)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(options);
  uint64_t initial_max_streams_unidirectional = nw_quic_connection_get_initial_max_streams_unidirectional(v1);

  return initial_max_streams_unidirectional;
}

void sub_18231F040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_initial_max_stream_data_bidirectional_local(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_initial_max_stream_data_bidirectional_local_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v16 = "nw_quic_connection_set_initial_max_stream_data_bidirectional_local";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_quic_connection_set_initial_max_stream_data_bidirectional_local";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v16 = "nw_quic_connection_set_initial_max_stream_data_bidirectional_local";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_quic_connection_set_initial_max_stream_data_bidirectional_local";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_quic_connection_set_initial_max_stream_data_bidirectional_local";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18231F31C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_initial_max_stream_data_bidirectional_local_block_invoke( uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + _Block_object_dispose(va, 8) = *(void *)(a1 + 32);
  return 1LL;
}

uint64_t nw_quic_connection_get_initial_max_stream_data_bidirectional_local(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    uint64_t v16 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_initial_max_stream_data_bidirectional_local_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_stream_data_bidirectional_local";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_stream_data_bidirectional_local";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_stream_data_bidirectional_local";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_stream_data_bidirectional_local";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_stream_data_bidirectional_local";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18231F634( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_initial_max_stream_data_bidirectional_local_block_invoke( uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(void *)(a2 + 8);
  return 1LL;
}

void nw_quic_set_initial_max_stream_data_bidirectional_local( nw_protocol_options_t options, uint64_t initial_max_stream_data_bidirectional_local)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(options);
  nw_quic_connection_set_initial_max_stream_data_bidirectional_local(v3, initial_max_stream_data_bidirectional_local);
}

void sub_18231F6B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t nw_quic_get_initial_max_stream_data_bidirectional_local(nw_protocol_options_t options)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(options);
  uint64_t initial_max_stream_data_bidirectional_local = nw_quic_connection_get_initial_max_stream_data_bidirectional_local(v1);

  return initial_max_stream_data_bidirectional_local;
}

void sub_18231F6F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_initial_max_stream_data_bidirectional_remote(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_initial_max_stream_data_bidirectional_remote_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v16 = "nw_quic_connection_set_initial_max_stream_data_bidirectional_remote";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_quic_connection_set_initial_max_stream_data_bidirectional_remote";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v16 = "nw_quic_connection_set_initial_max_stream_data_bidirectional_remote";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_quic_connection_set_initial_max_stream_data_bidirectional_remote";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_quic_connection_set_initial_max_stream_data_bidirectional_remote";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18231F9D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_initial_max_stream_data_bidirectional_remote_block_invoke( uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 16) = *(void *)(a1 + 32);
  return 1LL;
}

uint64_t nw_quic_connection_get_initial_max_stream_data_bidirectional_remote(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    uint64_t v16 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_initial_max_stream_data_bidirectional_remote_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_stream_data_bidirectional_remote";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_stream_data_bidirectional_remote";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_stream_data_bidirectional_remote";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_stream_data_bidirectional_remote";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_stream_data_bidirectional_remote";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18231FCE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_initial_max_stream_data_bidirectional_remote_block_invoke( uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(void *)(a2 + 16);
  return 1LL;
}

void nw_quic_set_initial_max_stream_data_bidirectional_remote( nw_protocol_options_t options, uint64_t initial_max_stream_data_bidirectional_remote)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(options);
  nw_quic_connection_set_initial_max_stream_data_bidirectional_remote(v3, initial_max_stream_data_bidirectional_remote);
}

void sub_18231FD64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t nw_quic_get_initial_max_stream_data_bidirectional_remote(nw_protocol_options_t options)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(options);
  uint64_t initial_max_stream_data_bidirectional_remote = nw_quic_connection_get_initial_max_stream_data_bidirectional_remote(v1);

  return initial_max_stream_data_bidirectional_remote;
}

void sub_18231FDA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_initial_max_stream_data_unidirectional(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_initial_max_stream_data_unidirectional_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v16 = "nw_quic_connection_set_initial_max_stream_data_unidirectional";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_quic_connection_set_initial_max_stream_data_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v16 = "nw_quic_connection_set_initial_max_stream_data_unidirectional";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_quic_connection_set_initial_max_stream_data_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_quic_connection_set_initial_max_stream_data_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182320084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_initial_max_stream_data_unidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 24) = *(void *)(a1 + 32);
  return 1LL;
}

uint64_t nw_quic_connection_get_initial_max_stream_data_unidirectional(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    uint64_t v16 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_initial_max_stream_data_unidirectional_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_stream_data_unidirectional";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_stream_data_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_stream_data_unidirectional";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_stream_data_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_max_stream_data_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232039C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_initial_max_stream_data_unidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(void *)(a2 + 24);
  return 1LL;
}

void nw_quic_set_initial_max_stream_data_unidirectional( nw_protocol_options_t options, uint64_t initial_max_stream_data_unidirectional)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(options);
  nw_quic_connection_set_initial_max_stream_data_unidirectional(v3, initial_max_stream_data_unidirectional);
}

void sub_182320418( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t nw_quic_get_initial_max_stream_data_unidirectional(nw_protocol_options_t options)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(options);
  uint64_t initial_max_stream_data_unidirectional = nw_quic_connection_get_initial_max_stream_data_unidirectional(v1);

  return initial_max_stream_data_unidirectional;
}

void sub_18232045C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_connection_get_idle_timeout(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    int v16 = 0;
    *(void *)&buf[16] = 0x2020000000LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_idle_timeout_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(unsigned int *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_idle_timeout";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_idle_timeout";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_idle_timeout";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_idle_timeout";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_idle_timeout";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182320764( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_idle_timeout_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_DWORD *)(a2 + 192);
  return 1LL;
}

void nw_quic_set_idle_timeout(nw_protocol_options_t options, uint32_t idle_timeout)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(options);
  nw_quic_connection_set_idle_timeout(v3, idle_timeout);
}

void sub_1823207E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint32_t nw_quic_get_idle_timeout(nw_protocol_options_t options)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(options);
  uint32_t idle_timeout = nw_quic_connection_get_idle_timeout(v1);

  return idle_timeout;
}

void sub_182320824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_stream_path_affinity(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_stream_path_affinity_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_stream_path_affinity";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_stream_path_affinity";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_stream_path_affinity";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_stream_path_affinity";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_stream_path_affinity";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182320B00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_stream_path_affinity_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 196) = *(_DWORD *)(a1 + 32);
  return 1LL;
}

uint64_t nw_quic_connection_get_stream_path_affinity(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    int v16 = 0;
    *(void *)&buf[16] = 0x2020000000LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_stream_path_affinity_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(unsigned int *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_stream_path_affinity";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_stream_path_affinity";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_stream_path_affinity";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_stream_path_affinity";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_stream_path_affinity";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182320E18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_stream_path_affinity_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_DWORD *)(a2 + 196);
  return 1LL;
}

void nw_quic_set_stream_path_affinity(void *a1, int a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_stream_path_affinity(v3, a2);
}

void sub_182320E94( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t nw_quic_get_stream_path_affinity(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  uint64_t stream_path_affinity = nw_quic_connection_get_stream_path_affinity(v1);

  return stream_path_affinity;
}

void sub_182320ED8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_max_udp_payload_size(void *a1, __int16 a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_max_udp_payload_size_block_invoke;
    v12[3] = &__block_descriptor_34_e9_B16__0_v8l;
    __int16 v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_max_udp_payload_size";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_max_udp_payload_size";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_max_udp_payload_size";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_max_udp_payload_size";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_max_udp_payload_size";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823211B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_max_udp_payload_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a2 + 204) = *(_WORD *)(a1 + 32);
  return 1LL;
}

uint64_t nw_quic_connection_get_max_udp_payload_size(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    __int16 v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_max_udp_payload_size_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(unsigned __int16 *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_max_udp_payload_size";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_max_udp_payload_size";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_max_udp_payload_size";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_max_udp_payload_size";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_max_udp_payload_size";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823214CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_max_udp_payload_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_WORD *)(a2 + 204);
  return 1LL;
}

void nw_quic_set_max_udp_payload_size(nw_protocol_options_t options, uint16_t max_udp_payload_size)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(options);
  nw_quic_connection_set_max_udp_payload_size(v3, max_udp_payload_size);
}

void sub_182321548( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint16_t nw_quic_get_max_udp_payload_size(nw_protocol_options_t options)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(options);
  max_udp_payload_size_t size = nw_quic_connection_get_max_udp_payload_size(v1);

  return max_udp_payload_size;
}

void sub_18232158C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_max_datagram_frame_size(void *a1, __int16 a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_max_datagram_frame_size_block_invoke;
    v12[3] = &__block_descriptor_34_e9_B16__0_v8l;
    __int16 v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_max_datagram_frame_size";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_max_datagram_frame_size";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_max_datagram_frame_size";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_max_datagram_frame_size";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_max_datagram_frame_size";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182321868(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_max_datagram_frame_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a2 + 206) = *(_WORD *)(a1 + 32);
  return 1LL;
}

uint64_t nw_quic_connection_get_max_datagram_frame_size(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    __int16 v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_max_datagram_frame_size_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(unsigned __int16 *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_max_datagram_frame_size";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_max_datagram_frame_size";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_max_datagram_frame_size";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_max_datagram_frame_size";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_max_datagram_frame_size";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182321B80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_max_datagram_frame_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_WORD *)(a2 + 206);
  return 1LL;
}

void nw_quic_set_max_datagram_frame_size(nw_protocol_options_t options, uint16_t max_datagram_frame_size)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(options);
  nw_quic_connection_set_max_datagram_frame_size(v3, max_datagram_frame_size);
}

void sub_182321BFC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint16_t nw_quic_get_max_datagram_frame_size(nw_protocol_options_t options)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(options);
  max_datagram_frame_size_t size = nw_quic_connection_get_max_datagram_frame_size(v1);

  return max_datagram_frame_size;
}

void sub_182321C40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_initial_packet_size(void *a1, __int16 a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_initial_packet_size_block_invoke;
    v12[3] = &__block_descriptor_34_e9_B16__0_v8l;
    __int16 v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_initial_packet_size";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_initial_packet_size";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_initial_packet_size";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_initial_packet_size";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_initial_packet_size";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182321F1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_initial_packet_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a2 + 20_Block_object_dispose(va, 8) = *(_WORD *)(a1 + 32);
  return 1LL;
}

uint64_t nw_quic_connection_get_initial_packet_size(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    __int16 v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_initial_packet_size_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(unsigned __int16 *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_packet_size";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_packet_size";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_packet_size";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_packet_size";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_initial_packet_size";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182322234( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_initial_packet_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_WORD *)(a2 + 208);
  return 1LL;
}

void nw_quic_set_initial_packet_size(void *a1, __int16 a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_initial_packet_size(v3, a2);
}

void sub_1823222B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t nw_quic_get_initial_packet_size(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  initial_packet_size_t size = nw_quic_connection_get_initial_packet_size(v1);

  return initial_packet_size;
}

void sub_1823222F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_connection_get_keepalive_count(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    __int16 v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_keepalive_count_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(unsigned __int16 *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_keepalive_count";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_keepalive_count";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_keepalive_count";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_keepalive_count";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_keepalive_count";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823225FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_keepalive_count_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_WORD *)(a2 + 210);
  return 1LL;
}

void nw_quic_set_keepalive_count(void *a1, __int16 a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_keepalive_count(v3, a2);
}

void sub_182322678( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t nw_quic_get_keepalive_count(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  uint64_t keepalive_count = nw_quic_connection_get_keepalive_count(v1);

  return keepalive_count;
}

void sub_1823226BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_ack_delay_size(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_ack_delay_size_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_ack_delay_size";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_ack_delay_size";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_ack_delay_size";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_ack_delay_size";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_ack_delay_size";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182322998(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_ack_delay_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 212) = *(_BYTE *)(a1 + 32);
  return 1LL;
}

uint64_t nw_quic_connection_get_ack_delay_size(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_ack_delay_size_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(unsigned __int8 *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_ack_delay_size";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_ack_delay_size";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_ack_delay_size";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_ack_delay_size";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_ack_delay_size";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182322CB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_ack_delay_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_BYTE *)(a2 + 212);
  return 1LL;
}

void nw_quic_set_ack_delay_size(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_ack_delay_size(v3, a2);
}

void sub_182322D2C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t nw_quic_get_ack_delay_size(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  ack_delay_size_t size = nw_quic_connection_get_ack_delay_size(v1);

  return ack_delay_size;
}

void sub_182322D70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_source_connection_id(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_quic_connection_set_source_connection_id_block_invoke;
    v13[3] = &unk_189BC6260;
    id v14 = v4;
    nw_protocol_options_access_handle(v3, v13);

    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_connection_set_source_connection_id";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_source_connection_id";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_connection_set_source_connection_id";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_source_connection_id";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_source_connection_id";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182323064( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_source_connection_id_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

id nw_quic_connection_get_source_connection_id(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    char v16 = __Block_byref_object_copy__55130;
    uint64_t v17 = __Block_byref_object_dispose__55131;
    id v18 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_source_connection_id_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    id v2 = *(id *)(*(void *)&buf[8] + 40LL);
    _Block_object_dispose(buf, 8);

    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_source_connection_id";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_source_connection_id";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_source_connection_id";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_source_connection_id";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_source_connection_id";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823233CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id a24)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_source_connection_id_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

void nw_quic_set_source_connection_id(void *a1, void *a2)
{
  id v4 = a2;
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_source_connection_id(v3, v4);
}

void sub_182323470( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id nw_quic_get_source_connection_id(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  id source_connection_id = nw_quic_connection_get_source_connection_id(v1);

  return source_connection_id;
}

void sub_1823234C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_max_paths_per_interface(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_max_paths_per_interface_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_max_paths_per_interface";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_max_paths_per_interface";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_max_paths_per_interface";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_max_paths_per_interface";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_max_paths_per_interface";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232379C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_max_paths_per_interface_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 213) = *(_BYTE *)(a1 + 32);
  return 1LL;
}

uint64_t nw_quic_connection_get_max_paths_per_interface(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_max_paths_per_interface_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(unsigned __int8 *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_max_paths_per_interface";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_max_paths_per_interface";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_max_paths_per_interface";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_max_paths_per_interface";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_max_paths_per_interface";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182323AB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_max_paths_per_interface_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_BYTE *)(a2 + 213);
  return 1LL;
}

void nw_quic_set_max_paths_per_interface(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_max_paths_per_interface(v3, a2);
}

void sub_182323B30( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t nw_quic_get_max_paths_per_interface(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  uint64_t max_paths_per_interface = nw_quic_connection_get_max_paths_per_interface(v1);

  return max_paths_per_interface;
}

void sub_182323B74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_pmtud(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_pmtud_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_pmtud";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_pmtud";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_pmtud";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_pmtud";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_pmtud";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182323E50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_pmtud_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a2 + 215) = *(_WORD *)(a2 + 215) & 0xFFFE | *(unsigned __int8 *)(a1 + 32);
  return 1LL;
}

BOOL nw_quic_connection_get_pmtud(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_pmtud_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_pmtud";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_pmtud";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_pmtud";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_pmtud";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_pmtud";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232417C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_pmtud_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_BYTE *)(a2 + 215) & 1;
  return 1LL;
}

void nw_quic_set_pmtud(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_pmtud(v3, a2);
}

void sub_1823241FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

BOOL nw_quic_get_pmtud(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL pmtud = nw_quic_connection_get_pmtud(v1);

  return pmtud;
}

void sub_182324240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_pmtud_ignore_cost(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_pmtud_ignore_cost_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_pmtud_ignore_cost";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_pmtud_ignore_cost";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_pmtud_ignore_cost";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_pmtud_ignore_cost";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_pmtud_ignore_cost";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232451C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_pmtud_ignore_cost_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  unsigned int v4 = v3 & 0xFFFFFFFD | (*(unsigned __int8 *)(v2 + 2) << 16);
  *(_WORD *)uint64_t v2 = v3 & 0xFFFD | (2 * (*(_BYTE *)(a1 + 32) & 0x7F));
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1LL;
}

BOOL nw_quic_connection_get_pmtud_ignore_cost(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_pmtud_ignore_cost_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_pmtud_ignore_cost";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_pmtud_ignore_cost";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_pmtud_ignore_cost";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_pmtud_ignore_cost";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_pmtud_ignore_cost";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232485C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_pmtud_ignore_cost_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(_BYTE *)(a2 + 215) & 2) != 0;
  return 1LL;
}

void nw_quic_set_pmtud_ignore_cost(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_pmtud_ignore_cost(v3, a2);
}

void sub_1823248DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

BOOL nw_quic_get_pmtud_ignore_cost(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL pmtud_ignore_cost = nw_quic_connection_get_pmtud_ignore_cost(v1);

  return pmtud_ignore_cost;
}

void sub_182324920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_pmtud_for_non_transport(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_pmtud_for_non_transport_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_pmtud_for_non_transport";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_pmtud_for_non_transport";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_pmtud_for_non_transport";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_pmtud_for_non_transport";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_pmtud_for_non_transport";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182324BFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_pmtud_for_non_transport_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  unsigned int v4 = v3 & 0xFFFFFFFB | (*(unsigned __int8 *)(v2 + 2) << 16);
  *(_WORD *)uint64_t v2 = v3 & 0xFFFB | (4 * (*(_BYTE *)(a1 + 32) & 0x3F));
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1LL;
}

BOOL nw_quic_connection_get_pmtud_for_non_transport(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_pmtud_for_non_transport_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_pmtud_for_non_transport";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_pmtud_for_non_transport";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_pmtud_for_non_transport";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_pmtud_for_non_transport";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_pmtud_for_non_transport";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182324F3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_pmtud_for_non_transport_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(_BYTE *)(a2 + 215) & 4) != 0;
  return 1LL;
}

void nw_quic_set_pmtud_for_non_transport(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_pmtud_for_non_transport(v3, a2);
}

void sub_182324FBC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

BOOL nw_quic_get_pmtud_for_non_transport(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL pmtud_for_non_transport = nw_quic_connection_get_pmtud_for_non_transport(v1);

  return pmtud_for_non_transport;
}

void sub_182325000(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_migration_for_non_transport(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_migration_for_non_transport_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_migration_for_non_transport";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_migration_for_non_transport";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_migration_for_non_transport";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_migration_for_non_transport";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_migration_for_non_transport";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823252DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_migration_for_non_transport_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  unsigned int v4 = v3 & 0xFFFF7FFF | (*(unsigned __int8 *)(v2 + 2) << 16) | (*(unsigned __int8 *)(a1 + 32) << 15);
  *(_WORD *)uint64_t v2 = v3 & 0x7FFF | (*(unsigned __int8 *)(a1 + 32) << 15);
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1LL;
}

BOOL nw_quic_connection_get_migration_for_non_transport(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_migration_for_non_transport_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_migration_for_non_transport";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_migration_for_non_transport";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_migration_for_non_transport";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_migration_for_non_transport";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_migration_for_non_transport";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182325618( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_migration_for_non_transport_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(unsigned __int16 *)(a2 + 215) >> 15;
  return 1LL;
}

void nw_quic_set_migration_for_non_transport(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_migration_for_non_transport(v3, a2);
}

void sub_182325698( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

BOOL nw_quic_get_migration_for_non_transport(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL migration_for_non_transport = nw_quic_connection_get_migration_for_non_transport(v1);

  return migration_for_non_transport;
}

void sub_1823256DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_retry(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_retry_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_retry";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_retry";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_retry";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_retry";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_retry";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823259B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_retry_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  unsigned int v4 = v3 & 0xFFFFFFF7 | (*(unsigned __int8 *)(v2 + 2) << 16);
  *(_WORD *)uint64_t v2 = v3 & 0xFFF7 | (8 * (*(_BYTE *)(a1 + 32) & 0x1F));
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1LL;
}

BOOL nw_quic_connection_get_retry(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_retry_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_retry";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_retry";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_retry";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_retry";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_retry";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182325CF8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_retry_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(_BYTE *)(a2 + 215) & 8) != 0;
  return 1LL;
}

void nw_quic_set_retry(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_retry(v3, a2);
}

void sub_182325D78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

BOOL nw_quic_get_retry(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL retry = nw_quic_connection_get_retry(v1);

  return retry;
}

void sub_182325DBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_force_version_negotiation(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_force_version_negotiation_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_force_version_negotiation";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_force_version_negotiation";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_force_version_negotiation";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_force_version_negotiation";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_force_version_negotiation";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182326098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_force_version_negotiation_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  unsigned int v4 = v3 & 0xFFFFFFEF | (*(unsigned __int8 *)(v2 + 2) << 16);
  *(_WORD *)uint64_t v2 = v3 & 0xFFEF | (16 * (*(_BYTE *)(a1 + 32) & 0xF));
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1LL;
}

BOOL nw_quic_connection_get_force_version_negotiation(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_force_version_negotiation_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_force_version_negotiation";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_force_version_negotiation";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_force_version_negotiation";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_force_version_negotiation";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_force_version_negotiation";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823263D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_force_version_negotiation_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(_BYTE *)(a2 + 215) & 0x10) != 0;
  return 1LL;
}

void nw_quic_set_force_version_negotiation(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_force_version_negotiation(v3, a2);
}

void sub_182326458( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

BOOL nw_quic_get_force_version_negotiation(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL force_version_negotiation = nw_quic_connection_get_force_version_negotiation(v1);

  return force_version_negotiation;
}

void sub_18232649C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_datagram_variant_flow_id_enabled(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_datagram_variant_flow_id_enabled_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_datagram_variant_flow_id_enabled";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_datagram_variant_flow_id_enabled";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_datagram_variant_flow_id_enabled";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_datagram_variant_flow_id_enabled";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_datagram_variant_flow_id_enabled";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182326778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_datagram_variant_flow_id_enabled_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  unsigned int v4 = v3 & 0xFFFFFFDF | (*(unsigned __int8 *)(v2 + 2) << 16);
  *(_WORD *)uint64_t v2 = v3 & 0xFFDF | (32 * (*(_BYTE *)(a1 + 32) & 7));
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1LL;
}

BOOL nw_quic_connection_get_datagram_variant_flow_id_enabled(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_datagram_variant_flow_id_enabled_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_datagram_variant_flow_id_enabled";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_datagram_variant_flow_id_enabled";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_datagram_variant_flow_id_enabled";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_datagram_variant_flow_id_enabled";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_datagram_variant_flow_id_enabled";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182326AB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_datagram_variant_flow_id_enabled_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(_BYTE *)(a2 + 215) & 0x20) != 0;
  return 1LL;
}

void nw_quic_set_datagram_variant_flow_id_enabled(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_datagram_variant_flow_id_enabled(v3, a2);
}

void sub_182326B38( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

BOOL nw_quic_get_datagram_variant_flow_id_enabled(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL datagram_variant_flow_id_enabled = nw_quic_connection_get_datagram_variant_flow_id_enabled(v1);

  return datagram_variant_flow_id_enabled;
}

void sub_182326B7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_datagram_quarter_stream_id(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_datagram_quarter_stream_id_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_datagram_quarter_stream_id";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_datagram_quarter_stream_id";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_datagram_quarter_stream_id";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_datagram_quarter_stream_id";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_datagram_quarter_stream_id";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182326E58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_datagram_quarter_stream_id_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  unsigned int v4 = v3 & 0xFFFFFFBF | (*(unsigned __int8 *)(v2 + 2) << 16);
  *(_WORD *)uint64_t v2 = v3 & 0xFFBF | ((*(_BYTE *)(a1 + 32) & 3) << 6);
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1LL;
}

BOOL nw_quic_connection_get_datagram_quarter_stream_id(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_datagram_quarter_stream_id_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_datagram_quarter_stream_id";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_datagram_quarter_stream_id";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_datagram_quarter_stream_id";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_datagram_quarter_stream_id";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_datagram_quarter_stream_id";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182327198( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_datagram_quarter_stream_id_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(_BYTE *)(a2 + 215) & 0x40) != 0;
  return 1LL;
}

void nw_quic_set_datagram_quarter_stream_id(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_datagram_quarter_stream_id(v3, a2);
}

void sub_182327218( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

BOOL nw_quic_get_datagram_quarter_stream_id(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL datagram_quarter_stream_id = nw_quic_connection_get_datagram_quarter_stream_id(v1);

  return datagram_quarter_stream_id;
}

void sub_18232725C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_datagram_context_id(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_datagram_context_id_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_datagram_context_id";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_datagram_context_id";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_datagram_context_id";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_datagram_context_id";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_datagram_context_id";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182327538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_datagram_context_id_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  unsigned int v4 = v3 & 0xFFFFFF7F | (*(unsigned __int8 *)(v2 + 2) << 16);
  *(_WORD *)uint64_t v2 = v3 & 0xFF7F | ((*(_BYTE *)(a1 + 32) & 1) << 7);
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1LL;
}

BOOL nw_quic_connection_get_datagram_context_id(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_datagram_context_id_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_datagram_context_id";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_datagram_context_id";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_datagram_context_id";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_datagram_context_id";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_datagram_context_id";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182327878( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_datagram_context_id_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(_WORD *)(a2 + 215) & 0x80) != 0;
  return 1LL;
}

void nw_quic_set_datagram_context_id(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_datagram_context_id(v3, a2);
}

void sub_1823278F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

BOOL nw_quic_get_datagram_context_id(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL datagram_context_id = nw_quic_connection_get_datagram_context_id(v1);

  return datagram_context_id;
}

void sub_18232793C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_disable_ecn_echo(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_disable_ecn_echo_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_disable_ecn_echo";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_disable_ecn_echo";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_disable_ecn_echo";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_disable_ecn_echo";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_disable_ecn_echo";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182327C18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_disable_ecn_echo_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  unsigned int v4 = v3 & 0xFFFFFEFF | (*(unsigned __int8 *)(v2 + 2) << 16);
  *(_WORD *)uint64_t v2 = v3 & 0xFEFF | (*(unsigned __int8 *)(a1 + 32) << 8);
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1LL;
}

BOOL nw_quic_connection_get_disable_ecn_echo(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_disable_ecn_echo_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_disable_ecn_echo";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_disable_ecn_echo";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_disable_ecn_echo";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_disable_ecn_echo";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_disable_ecn_echo";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182327F54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_disable_ecn_echo_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_BYTE *)(a2 + 216) & 1;
  return 1LL;
}

void nw_quic_set_disable_ecn_echo(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_disable_ecn_echo(v3, a2);
}

void sub_182327FD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

BOOL nw_quic_get_disable_ecn_echo(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL disable_ecn_echo = nw_quic_connection_get_disable_ecn_echo(v1);

  return disable_ecn_echo;
}

void sub_182328018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_disable_ecn(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_disable_ecn_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_disable_ecn";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_disable_ecn";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_disable_ecn";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_disable_ecn";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_disable_ecn";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823282F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_disable_ecn_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  unsigned int v4 = v3 & 0xFFFFFDFF | (*(unsigned __int8 *)(v2 + 2) << 16) | (*(unsigned __int8 *)(a1 + 32) << 9);
  *(_WORD *)uint64_t v2 = v3 & 0xFDFF | (*(unsigned __int8 *)(a1 + 32) << 9);
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1LL;
}

BOOL nw_quic_connection_get_disable_ecn(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_disable_ecn_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_disable_ecn";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_disable_ecn";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_disable_ecn";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_disable_ecn";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_disable_ecn";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182328630( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_disable_ecn_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(_WORD *)(a2 + 215) & 0x200) != 0;
  return 1LL;
}

void nw_quic_set_disable_ecn(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_disable_ecn(v3, a2);
}

void sub_1823286B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

BOOL nw_quic_get_disable_ecn(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL disable_ecn = nw_quic_connection_get_disable_ecn(v1);

  return disable_ecn;
}

void sub_1823286F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_enable_l4s(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_enable_l4s_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_enable_l4s";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_enable_l4s";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_enable_l4s";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_enable_l4s";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_enable_l4s";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823289D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_enable_l4s_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 200) = *(_DWORD *)(a1 + 32);
  return 1LL;
}

uint64_t nw_quic_connection_get_enable_l4s(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    int v16 = 0;
    *(void *)&buf[16] = 0x2020000000LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_enable_l4s_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(unsigned int *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_enable_l4s";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_enable_l4s";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_enable_l4s";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_enable_l4s";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_enable_l4s";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182328CE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_enable_l4s_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_DWORD *)(a2 + 200);
  return 1LL;
}

void nw_quic_set_enable_l4s(void *a1, int a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_enable_l4s(v3, a2);
}

void sub_182328D64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t nw_quic_get_enable_l4s(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  uint64_t enable_l4s = nw_quic_connection_get_enable_l4s(v1);

  return enable_l4s;
}

void sub_182328DA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_quic_connection_get_is_speculative_attempt(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_is_speculative_attempt_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_is_speculative_attempt";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_is_speculative_attempt";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_is_speculative_attempt";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_is_speculative_attempt";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_is_speculative_attempt";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823290B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_is_speculative_attempt_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_BYTE *)(a2 + 217) & 1;
  return 1LL;
}

void nw_quic_set_is_speculative_attempt(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_is_speculative_attempt(v3, a2);
}

void sub_182329138( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

BOOL nw_quic_get_is_speculative_attempt(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL is_speculative_attempt = nw_quic_connection_get_is_speculative_attempt(v1);

  return is_speculative_attempt;
}

void sub_18232917C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_disable_spin_bit(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_disable_spin_bit_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_disable_spin_bit";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_disable_spin_bit";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_disable_spin_bit";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_disable_spin_bit";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_disable_spin_bit";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182329458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_disable_spin_bit_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  unsigned int v4 = (v3 | (*(unsigned __int8 *)(v2 + 2) << 16)) & 0xFFFDFFFF | (*(unsigned __int8 *)(a1 + 32) << 17);
  *(_WORD *)uint64_t v2 = v3;
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1LL;
}

BOOL nw_quic_connection_get_disable_spin_bit(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_disable_spin_bit_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_disable_spin_bit";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_disable_spin_bit";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_disable_spin_bit";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_disable_spin_bit";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_disable_spin_bit";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182329794( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_disable_spin_bit_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(_BYTE *)(a2 + 217) & 2) != 0;
  return 1LL;
}

void nw_quic_set_disable_spin_bit(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_disable_spin_bit(v3, a2);
}

void sub_182329814( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

BOOL nw_quic_get_disable_spin_bit(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL disable_spin_bit = nw_quic_connection_get_disable_spin_bit(v1);

  return disable_spin_bit;
}

void sub_182329858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_spin_bit_value(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_spin_bit_value_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_spin_bit_value";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_spin_bit_value";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_spin_bit_value";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_spin_bit_value";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_spin_bit_value";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182329B34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_spin_bit_value_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  unsigned int v4 = (v3 | (*(unsigned __int8 *)(v2 + 2) << 16)) & 0xFFFBFFFF | (*(unsigned __int8 *)(a1 + 32) << 18);
  *(_WORD *)uint64_t v2 = v3;
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1LL;
}

BOOL nw_quic_connection_get_spin_bit_value(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_spin_bit_value_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_spin_bit_value";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_spin_bit_value";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_spin_bit_value";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_spin_bit_value";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_spin_bit_value";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182329E70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_spin_bit_value_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(_BYTE *)(a2 + 217) & 4) != 0;
  return 1LL;
}

void nw_quic_set_spin_bit_value(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_spin_bit_value(v3, a2);
}

void sub_182329EF0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

BOOL nw_quic_get_spin_bit_value(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL spin_bit_value = nw_quic_connection_get_spin_bit_value(v1);

  return spin_bit_value;
}

void sub_182329F34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_enable_multipath(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_enable_multipath_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_enable_multipath";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_enable_multipath";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_enable_multipath";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_enable_multipath";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_enable_multipath";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232A210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_enable_multipath_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  unsigned int v4 = (v3 | (*(unsigned __int8 *)(v2 + 2) << 16)) & 0xFFEFFFFF | (*(unsigned __int8 *)(a1 + 32) << 20);
  *(_WORD *)uint64_t v2 = v3;
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1LL;
}

BOOL nw_quic_connection_get_enable_multipath(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_enable_multipath_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_enable_multipath";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_enable_multipath";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_enable_multipath";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_enable_multipath";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_enable_multipath";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232A54C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_enable_multipath_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(_BYTE *)(a2 + 217) & 0x10) != 0;
  return 1LL;
}

void nw_quic_set_enable_multipath(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_enable_multipath(v3, a2);
}

void sub_18232A5CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

BOOL nw_quic_get_enable_multipath(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL enable_multipath = nw_quic_connection_get_enable_multipath(v1);

  return enable_multipath;
}

void sub_18232A610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_probe_simultaneously(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_probe_simultaneously_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_probe_simultaneously";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_probe_simultaneously";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_probe_simultaneously";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_probe_simultaneously";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_probe_simultaneously";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232A8EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_probe_simultaneously_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  unsigned int v4 = (v3 | (*(unsigned __int8 *)(v2 + 2) << 16)) & 0xFFDFFFFF | (*(unsigned __int8 *)(a1 + 32) << 21);
  *(_WORD *)uint64_t v2 = v3;
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1LL;
}

BOOL nw_quic_connection_get_probe_simultaneously(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_probe_simultaneously_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_probe_simultaneously";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_probe_simultaneously";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_probe_simultaneously";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_probe_simultaneously";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_probe_simultaneously";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232AC28( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_probe_simultaneously_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(_BYTE *)(a2 + 217) & 0x20) != 0;
  return 1LL;
}

void nw_quic_set_probe_simultaneously(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_probe_simultaneously(v3, a2);
}

void sub_18232ACA8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

BOOL nw_quic_get_probe_simultaneously(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  BOOL probe_simultaneously = nw_quic_connection_get_probe_simultaneously(v1);

  return probe_simultaneously;
}

void sub_18232ACEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_source_connection_id_length(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_source_connection_id_length_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_connection_set_source_connection_id_length";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_source_connection_id_length";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_connection_set_source_connection_id_length";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_source_connection_id_length";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_connection_set_source_connection_id_length";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232AFC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_source_connection_id_length_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
    if (*(_BYTE *)(a1 + 32))
    {
      memset(buffer, 0, 20);
      if (v3 >= 0x14) {
        size_t v4 = 20LL;
      }
      else {
        size_t v4 = v3;
      }
      dispatch_data_t v5 = dispatch_data_create(buffer, v4, 0LL, 0LL);
      os_log_type_t v6 = *(void **)(a2 + 152);
      *(void *)(a2 + 152) = v5;
    }

    else
    {
      os_log_type_t v6 = *(void **)(a2 + 152);
      *(void *)(a2 + 152) = 0LL;
    }

    return 1LL;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v8 = (id)gLogObj;
  *(_DWORD *)buffer = 136446210;
  *(void *)&buffer[4] = "nw_quic_connection_set_source_connection_id_length_internal";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v9, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v10 = (os_log_s *)(id)gLogObj;
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buffer = 136446210;
        *(void *)&buffer[4] = "nw_quic_connection_set_source_connection_id_length_internal";
        os_log_type_t v12 = "%{public}s called with null quic_options";
LABEL_21:
        char v16 = v10;
        os_log_type_t v17 = v11;
LABEL_22:
        _os_log_impl(&dword_181A5C000, v16, v17, v12, buffer, 0xCu);
      }
    }

    else
    {
      if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v10 = (os_log_s *)(id)gLogObj;
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buffer = 136446466;
            *(void *)&buffer[4] = "nw_quic_connection_set_source_connection_id_length_internal";
            *(_WORD *)&buffer[12] = 2082;
            *(void *)&buffer[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v14,  "%{public}s called with null quic_options, dumping backtrace:%{public}s",  buffer,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }

        if (!v15) {
          goto LABEL_23;
        }
        *(_DWORD *)buffer = 136446210;
        *(void *)&buffer[4] = "nw_quic_connection_set_source_connection_id_length_internal";
        os_log_type_t v12 = "%{public}s called with null quic_options, no backtrace";
        char v16 = v10;
        os_log_type_t v17 = v14;
        goto LABEL_22;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v10 = (os_log_s *)(id)gLogObj;
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buffer = 136446210;
        *(void *)&buffer[4] = "nw_quic_connection_set_source_connection_id_length_internal";
        os_log_type_t v12 = "%{public}s called with null quic_options, backtrace limit exceeded";
        goto LABEL_21;
      }
    }

uint64_t nw_quic_connection_get_source_connection_id_length(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v16 = 8;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_source_connection_id_length_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(unsigned __int8 *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  size_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_source_connection_id_length";
  dispatch_data_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_source_connection_id_length";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_source_connection_id_length";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_source_connection_id_length";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_source_connection_id_length";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232B5D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_source_connection_id_length_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(dispatch_data_s **)(a2 + 152);
  if (v3) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = dispatch_data_get_size(v3);
  }
  return 1LL;
}

void nw_quic_set_source_connection_id_length(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_shared_connection_options(a1);
  nw_quic_connection_set_source_connection_id_length(v3, a2);
}

void sub_18232B674( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t nw_quic_get_source_connection_id_length(void *a1)
{
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  uint64_t source_connection_id_length = nw_quic_connection_get_source_connection_id_length(v1);

  return source_connection_id_length;
}

void sub_18232B6B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_session_state(void *a1, void *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (nw_protocol_options_is_quic_connection(v5))
  {
    v16[0] = MEMORY[0x1895F87A8];
    v16[1] = 3221225472LL;
    v16[2] = __nw_quic_connection_set_session_state_block_invoke;
    v16[3] = &unk_189BC6650;
    id v17 = v6;
    id v18 = v7;
    nw_protocol_options_access_handle(v5, v16);

    goto LABEL_3;
  }

  __nwlog_obj();
  id v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v22 = "nw_quic_connection_set_session_state";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v9, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v22 = "nw_quic_connection_set_session_state";
        _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v22 = "nw_quic_connection_set_session_state";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v22 = "nw_quic_connection_set_session_state";
        _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v22 = "nw_quic_connection_set_session_state";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232B9D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_session_state_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

id nw_quic_connection_get_quic_state(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    char v16 = __Block_byref_object_copy__55130;
    id v17 = __Block_byref_object_dispose__55131;
    id v18 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_quic_state_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    id v2 = *(id *)(*(void *)&buf[8] + 40LL);
    _Block_object_dispose(buf, 8);

    goto LABEL_3;
  }

  __nwlog_obj();
  size_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_quic_state";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_quic_state";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_quic_state";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_quic_state";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_quic_state";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232BD60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id a24)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_quic_state_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

id nw_quic_connection_get_tls_state(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    char v16 = __Block_byref_object_copy__55130;
    id v17 = __Block_byref_object_dispose__55131;
    id v18 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_tls_state_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    id v2 = *(id *)(*(void *)&buf[8] + 40LL);
    _Block_object_dispose(buf, 8);

    goto LABEL_3;
  }

  __nwlog_obj();
  size_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_tls_state";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_tls_state";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_tls_state";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_tls_state";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_tls_state";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232C0D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id a24)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_tls_state_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

void nw_quic_connection_set_session_state_update_block(void *a1, void *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (nw_protocol_options_is_quic_connection(v5))
  {
    v16[0] = MEMORY[0x1895F87A8];
    v16[1] = 3221225472LL;
    v16[2] = __nw_quic_connection_set_session_state_update_block_block_invoke;
    v16[3] = &unk_189BC6710;
    id v18 = v6;
    id v17 = v7;
    nw_protocol_options_access_handle(v5, v16);

    goto LABEL_3;
  }

  __nwlog_obj();
  id v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v22 = "nw_quic_connection_set_session_state_update_block";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v9, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v22 = "nw_quic_connection_set_session_state_update_block";
        _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v22 = "nw_quic_connection_set_session_state_update_block";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v22 = "nw_quic_connection_set_session_state_update_block";
        _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v22 = "nw_quic_connection_set_session_state_update_block";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232C440( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_session_state_update_block_block_invoke(uint64_t a1, uint64_t a2)
{
  size_t v4 = _Block_copy(*(const void **)(a1 + 40));
  id v5 = *(void **)(a2 + 160);
  *(void *)(a2 + 160) = v4;

  objc_storeStrong((id *)(a2 + 168), *(id *)(a1 + 32));
  return 1LL;
}

uint64_t nw_quic_connection_execute_session_state_update_block(void *a1, void *a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (nw_protocol_options_is_quic_connection(v5))
  {
    v18[0] = MEMORY[0x1895F87A8];
    v18[1] = 3221225472LL;
    v18[2] = __nw_quic_connection_execute_session_state_update_block_block_invoke;
    v18[3] = &unk_189BC6650;
    id v19 = v6;
    id v20 = v7;
    uint64_t v8 = nw_protocol_options_access_handle(v5, v18);

    goto LABEL_3;
  }

  __nwlog_obj();
  BOOL v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v24 = "nw_quic_connection_execute_session_state_update_block";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (__nwlog_fault(v11, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v24 = "nw_quic_connection_execute_session_state_update_block";
        _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v24 = "nw_quic_connection_execute_session_state_update_block";
          __int16 v25 = 2082;
          char v26 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v24 = "nw_quic_connection_execute_session_state_update_block";
        _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v24 = "nw_quic_connection_execute_session_state_update_block";
        _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232C7D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

BOOL __nw_quic_connection_execute_session_state_update_block_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 168);
  if (v2)
  {
    id v5 = _Block_copy(*(const void **)(a2 + 160));
    id v6 = *(dispatch_queue_s **)(a2 + 168);
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 3221225472LL;
    block[2] = __nw_quic_connection_execute_session_state_update_block_block_invoke_2;
    block[3] = &unk_189BC50A8;
    id v12 = v5;
    id v10 = *(id *)(a1 + 32);
    id v11 = *(id *)(a1 + 40);
    id v7 = v5;
    dispatch_async(v6, block);
  }

  return v2 != 0;
}

uint64_t __nw_quic_connection_execute_session_state_update_block_block_invoke_2(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

void nw_quic_connection_execute_max_streams_update_block(void *a1, int a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  if (nw_protocol_options_is_quic_connection(v5))
  {
    v14[0] = MEMORY[0x1895F87A8];
    v14[1] = 3221225472LL;
    v14[2] = __nw_quic_connection_execute_max_streams_update_block_block_invoke;
    v14[3] = &__block_descriptor_44_e9_B16__0_v8l;
    int v15 = a2;
    v14[4] = a3;
    nw_protocol_options_access_handle(v5, v14);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v19 = "nw_quic_connection_execute_max_streams_update_block";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v7, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        id v19 = "nw_quic_connection_execute_max_streams_update_block";
        _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          id v19 = "nw_quic_connection_execute_max_streams_update_block";
          __int16 v20 = 2082;
          char v21 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        id v19 = "nw_quic_connection_execute_max_streams_update_block";
        _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        id v19 = "nw_quic_connection_execute_max_streams_update_block";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232CBB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_execute_max_streams_update_block_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = *(const void **)(a2 + 176);
  if (v3)
  {
    id v5 = _Block_copy(v3);
    id v6 = *(dispatch_queue_s **)(a2 + 184);
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 3221225472LL;
    block[2] = __nw_quic_connection_execute_max_streams_update_block_block_invoke_2;
    block[3] = &unk_189BC0FC8;
    int v13 = *(_DWORD *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 32);
    id v11 = v5;
    uint64_t v12 = v7;
    id v8 = v5;
    dispatch_async(v6, block);
  }

  return 1LL;
}

uint64_t __nw_quic_connection_execute_max_streams_update_block_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(unsigned int *)(a1 + 48),  *(void *)(a1 + 40));
}

void nw_quic_stream_set_is_unidirectional(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_stream(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_stream_set_is_unidirectional_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  size_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v17 = "nw_quic_stream_set_is_unidirectional";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_quic_stream_set_is_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_stream(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v17 = "nw_quic_stream_set_is_unidirectional";
          __int16 v18 = 2082;
          id v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_stream(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_quic_stream_set_is_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_stream(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_quic_stream_set_is_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_stream(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232CF3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_set_is_unidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(a2 + 24) & 0xFE | *(_BYTE *)(a1 + 32);
  return 1LL;
}

BOOL nw_quic_stream_get_is_unidirectional(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_stream(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_stream_get_is_unidirectional_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  size_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_stream_get_is_unidirectional";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_is_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_stream(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_get_is_unidirectional";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_stream(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_is_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_stream(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_is_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_stream(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232D268( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_get_is_unidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_BYTE *)(a2 + 24) & 1;
  return 1LL;
}

void nw_quic_stream_set_is_datagram(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_stream(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_stream_set_is_datagram_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  size_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_quic_stream_set_is_datagram";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_stream_set_is_datagram";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_stream(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_quic_stream_set_is_datagram";
          __int16 v18 = 2082;
          id v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_stream(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_stream_set_is_datagram";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_stream(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_quic_stream_set_is_datagram";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_stream(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232D584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_set_is_datagram_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(a2 + 24) & 0xFD | (2 * *(_BYTE *)(a1 + 32));
  return 1LL;
}

BOOL nw_quic_stream_get_is_datagram(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_stream(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_stream_get_is_datagram_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  size_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_stream_get_is_datagram";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_is_datagram";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_stream(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_get_is_datagram";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_stream(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_is_datagram";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_stream(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_is_datagram";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_stream(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232D8B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_get_is_datagram_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(_BYTE *)(a2 + 24) & 2) != 0;
  return 1LL;
}

void nw_quic_stream_set_associated_stream_id(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_stream(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_stream_set_associated_stream_id_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  size_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_quic_stream_set_associated_stream_id";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_quic_stream_set_associated_stream_id";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_stream(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_quic_stream_set_associated_stream_id";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_stream(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_quic_stream_set_associated_stream_id";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_stream(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_quic_stream_set_associated_stream_id";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_stream(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232DBCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_set_associated_stream_id_block_invoke(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 32);
  return 1LL;
}

uint64_t nw_quic_stream_get_associated_stream_id(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_stream(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    uint64_t v16 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_stream_get_associated_stream_id_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  size_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_stream_get_associated_stream_id";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_associated_stream_id";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_stream(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_get_associated_stream_id";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_stream(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_associated_stream_id";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_stream(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_associated_stream_id";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_stream(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232DEE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_get_associated_stream_id_block_invoke(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *a2;
  return 1LL;
}

void nw_quic_stream_set_datagram_context_id(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_quic_stream(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_stream_set_datagram_context_id_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  size_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v16 = "nw_quic_stream_set_datagram_context_id";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_quic_stream_set_datagram_context_id";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_stream(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v16 = "nw_quic_stream_set_datagram_context_id";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_stream(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_quic_stream_set_datagram_context_id";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_stream(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_quic_stream_set_datagram_context_id";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_stream(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232E1FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_set_datagram_context_id_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + _Block_object_dispose(va, 8) = *(void *)(a1 + 32);
  return 1LL;
}

uint64_t nw_quic_stream_get_datagram_context_id(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_quic_stream(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    uint64_t v16 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_stream_get_datagram_context_id_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  size_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_stream_get_datagram_context_id";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_datagram_context_id";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_quic_stream(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_get_datagram_context_id";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_stream(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_datagram_context_id";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_quic_stream(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_datagram_context_id";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_quic_stream(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232E514( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_get_datagram_context_id_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(void *)(a2 + 8);
  return 1LL;
}

id nw_quic_options_copy_local_public_key(void *a1)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v26 = "nw_quic_options_copy_local_public_key";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v8, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          char v26 = "nw_quic_options_copy_local_public_key";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
      }

      else if (v23)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        BOOL v17 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            char v26 = "nw_quic_options_copy_local_public_key";
            __int16 v27 = 2082;
            BOOL v28 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_38;
        }

        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          char v26 = "nw_quic_options_copy_local_public_key";
          _os_log_impl(&dword_181A5C000, v9, v16, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          char v26 = "nw_quic_options_copy_local_public_key";
          _os_log_impl( &dword_181A5C000,  v9,  v21,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_18232EA50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id *nw_quic_create_connection_metadata()
{
  uint64_t v2 = *MEMORY[0x1895F89C0];
  os_unfair_lock_lock((os_unfair_lock_t)&nw_uuid_generate_insecure(unsigned char *)::uuid_lock);
  if ((void)nw_uuid_generate_insecure(unsigned char *)::last_used_uuid != -1LL)
  {
    *(void *)&nw_uuid_generate_insecure(unsigned char *)::last_used_uuid = nw_uuid_generate_insecure(unsigned char *)::last_used_uuid
                                                                           + 1;
    goto LABEL_7;
  }

  if (*((void *)&nw_uuid_generate_insecure(unsigned char *)::last_used_uuid + 1) == -1LL)
  {
LABEL_6:
    uuid_generate_random((unsigned __int8 *)&nw_uuid_generate_insecure(unsigned char *)::last_used_uuid);
    BYTE9(nw_uuid_generate_insecure(unsigned char *)::last_used_uuid) = -1;
  }

  else
  {
    ++*((void *)&nw_uuid_generate_insecure(unsigned char *)::last_used_uuid + 1);
  }

id *nw_quic_create_stream_metadata()
{
  if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55294);
  }
  return nw_protocol_metadata_create_singleton((void *)nw_protocol_copy_quic_stream_definition::quic_definition);
}

BOOL nw_protocol_metadata_is_quic(nw_protocol_metadata_t metadata)
{
  __int128 v1 = metadata;
  BOOL v2 = nw_protocol_metadata_is_quic_connection(v1) || nw_protocol_metadata_is_quic_stream(v1);

  return v2;
}

void sub_18232EC00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_protocol_metadata_is_quic_stream(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    id v3 = (id *)v1;
    id v4 = v3[1];

    if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55294);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v4,  nw_protocol_copy_quic_stream_definition::quic_definition);

    goto LABEL_5;
  }

  __nwlog_obj();
  os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_protocol_metadata_is_quic_stream";
  id v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_protocol_metadata_is_quic_stream";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_protocol_metadata_is_quic_stream";
          __int16 v19 = 2082;
          BOOL v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_protocol_metadata_is_quic_stream";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_protocol_metadata_is_quic_stream";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232EEF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_metadata_set_stream_options(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_quic_connection_metadata_set_stream_options_block_invoke;
    v13[3] = &unk_189BC6260;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_connection_metadata_set_stream_options";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_metadata_set_stream_options";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_connection_metadata_set_stream_options";
          __int16 v19 = 2082;
          BOOL v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_metadata_set_stream_options";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_metadata_set_stream_options";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232F1F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_metadata_set_stream_options_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

id nw_quic_connection_copy_sec_protocol_metadata(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    os_log_type_t v16 = __Block_byref_object_copy__55130;
    BOOL v17 = __Block_byref_object_dispose__55131;
    id v18 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_copy_sec_protocol_metadata_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    id v2 = *(id *)(*(void *)&buf[8] + 40LL);
    _Block_object_dispose(buf, 8);

    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_copy_sec_protocol_metadata";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_copy_sec_protocol_metadata";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_copy_sec_protocol_metadata";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_copy_sec_protocol_metadata";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_copy_sec_protocol_metadata";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232F558( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id a24)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_copy_sec_protocol_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

sec_protocol_metadata_t nw_quic_copy_sec_protocol_metadata(nw_protocol_metadata_t metadata)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = metadata;
  if (v1)
  {
    id v2 = v1;
    if (nw_protocol_metadata_is_quic_stream(v1))
    {
      id v3 = (nw_protocol_metadata *)nw_quic_stream_copy_connection_metadata(v2);

      id v2 = v3;
    }

    id v4 = (sec_protocol_metadata *)nw_quic_connection_copy_sec_protocol_metadata(v2);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_quic_copy_sec_protocol_metadata";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_quic_copy_sec_protocol_metadata";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_quic_copy_sec_protocol_metadata";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_quic_copy_sec_protocol_metadata";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_quic_copy_sec_protocol_metadata";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232F868(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_quic_stream_copy_connection_metadata(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_stream(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    os_log_type_t v16 = __Block_byref_object_copy__55130;
    BOOL v17 = __Block_byref_object_dispose__55131;
    id v18 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_stream_copy_connection_metadata_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    id v2 = *(id *)(*(void *)&buf[8] + 40LL);
    _Block_object_dispose(buf, 8);

    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_stream_copy_connection_metadata";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_copy_connection_metadata";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(stream_metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_copy_connection_metadata";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(stream_metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_copy_connection_metadata";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(stream_metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_copy_connection_metadata";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(stream_metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232FB94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id a24)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_copy_connection_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 40));
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), *(id *)(a2 + 32));
  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_connection_set_sec_protocol_metadata(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_quic_connection_set_sec_protocol_metadata_block_invoke;
    v13[3] = &unk_189BC6260;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v18 = "nw_quic_connection_set_sec_protocol_metadata";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v18 = "nw_quic_connection_set_sec_protocol_metadata";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v18 = "nw_quic_connection_set_sec_protocol_metadata";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v18 = "nw_quic_connection_set_sec_protocol_metadata";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v18 = "nw_quic_connection_set_sec_protocol_metadata";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18232FF00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_sec_protocol_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

id nw_quic_connection_copy_stream_metadata(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    os_log_type_t v16 = __Block_byref_object_copy__55130;
    BOOL v17 = __Block_byref_object_dispose__55131;
    id v18 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_copy_stream_metadata_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    id v2 = *(id *)(*(void *)&buf[8] + 40LL);
    _Block_object_dispose(buf, 8);

    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_copy_stream_metadata";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_copy_stream_metadata";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_copy_stream_metadata";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_copy_stream_metadata";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_copy_stream_metadata";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182330268( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id a24)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_copy_stream_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), *(id *)(a2 + 40));
  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_connection_set_stream_metadata(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_quic_connection_set_stream_metadata_block_invoke;
    v13[3] = &unk_189BC6260;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v18 = "nw_quic_connection_set_stream_metadata";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v18 = "nw_quic_connection_set_stream_metadata";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v18 = "nw_quic_connection_set_stream_metadata";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v18 = "nw_quic_connection_set_stream_metadata";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v18 = "nw_quic_connection_set_stream_metadata";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(connection_metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823305D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_stream_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  objc_storeStrong((id *)(a2 + 40), *(id *)(a1 + 32));
  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_stream_set_connection_metadata(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_stream(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_quic_stream_set_connection_metadata_block_invoke;
    v13[3] = &unk_189BC6260;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v18 = "nw_quic_stream_set_connection_metadata";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v18 = "nw_quic_stream_set_connection_metadata";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(stream_metadata)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v18 = "nw_quic_stream_set_connection_metadata";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(stream_metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v18 = "nw_quic_stream_set_connection_metadata";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(stream_metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v18 = "nw_quic_stream_set_connection_metadata";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(stream_metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18233092C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_set_connection_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 40));
  objc_storeStrong((id *)(a2 + 32), *(id *)(a1 + 32));
  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_set_remote_transport_parameters( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v13 = a1;
  if (nw_protocol_options_is_quic_connection(v13))
  {
    v22[0] = MEMORY[0x1895F87A8];
    v22[1] = 3221225472LL;
    v22[2] = __nw_quic_set_remote_transport_parameters_block_invoke;
    v22[3] = &__block_descriptor_80_e9_B16__0_v8l;
    v22[4] = a2;
    v22[5] = a3;
    v22[6] = a4;
    void v22[7] = a5;
    v22[8] = a6;
    v22[9] = a7;
    nw_protocol_options_access_handle(v13, v22);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v26 = "nw_quic_set_remote_transport_parameters";
  char v15 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v24 = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (__nwlog_fault(v15, &v24, &v23))
  {
    if (v24 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = v24;
      if (os_log_type_enabled(v16, v24))
      {
        *(_DWORD *)buf = 136446210;
        char v26 = "nw_quic_set_remote_transport_parameters";
        _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = v24;
      BOOL v20 = os_log_type_enabled(v16, v24);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          char v26 = "nw_quic_set_remote_transport_parameters";
          __int16 v27 = 2082;
          BOOL v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v16,  v19,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        char v26 = "nw_quic_set_remote_transport_parameters";
        _os_log_impl( &dword_181A5C000,  v16,  v19,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = v24;
      if (os_log_type_enabled(v16, v24))
      {
        *(_DWORD *)buf = 136446210;
        char v26 = "nw_quic_set_remote_transport_parameters";
        _os_log_impl( &dword_181A5C000,  v16,  v21,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182330C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_set_remote_transport_parameters_block_invoke(void *a1, uint64_t a2)
{
  __int16 v3 = *(_WORD *)(a2 + 215);
  uint64_t v2 = a2 + 215;
  *(void *)(v2 - 167) = a1[4];
  *(void *)(v2 - 159) = a1[5];
  *(void *)(v2 - 151) = a1[6];
  *(void *)(v2 - 143) = a1[7];
  *(void *)(v2 - 135) = a1[8];
  *(void *)(v2 - 127) = a1[9];
  *(_BYTE *)(v2 + 2) |= 8u;
  *(_WORD *)uint64_t v2 = v3;
  return 1LL;
}

uint64_t nw_quic_get_remote_transport_parameters( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v61 = *MEMORY[0x1895F89C0];
  id v13 = a1;
  if (!nw_protocol_options_is_quic_connection(v13))
  {
    __nwlog_obj();
    os_log_type_t v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v58 = "nw_quic_get_remote_transport_parameters";
    os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v56 = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (v56 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = v56;
      if (os_log_type_enabled(v18, v56))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v58 = "nw_quic_get_remote_transport_parameters";
        _os_log_impl( &dword_181A5C000,  v18,  v19,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }

      goto LABEL_124;
    }

    if (!v55)
    {
      __nwlog_obj();
      id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v47 = v56;
      if (os_log_type_enabled(v18, v56))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v58 = "nw_quic_get_remote_transport_parameters";
        _os_log_impl( &dword_181A5C000,  v18,  v47,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_124;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v33 = v56;
    BOOL v34 = os_log_type_enabled(v18, v56);
    if (!backtrace_string)
    {
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v58 = "nw_quic_get_remote_transport_parameters";
        _os_log_impl( &dword_181A5C000,  v18,  v33,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }

      goto LABEL_124;
    }

    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v58 = "nw_quic_get_remote_transport_parameters";
      __int16 v59 = 2082;
      unsigned __int16 v60 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v18,  v33,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
    }

void sub_182331B98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_get_remote_transport_parameters_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a2 + 215) | (*(unsigned __int8 *)(a2 + 217) << 16);
  if ((v2 & 0x80000) != 0)
  {
    __int16 v3 = *(void **)(a1 + 40);
    **(void **)(a1 + 32) = *(void *)(a2 + 48);
    void *v3 = *(void *)(a2 + 56);
    id v4 = *(void **)(a1 + 56);
    **(void **)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 64);
    *id v4 = *(void *)(a2 + 72);
    id v5 = *(void **)(a1 + 72);
    **(void **)(a1 + 64) = *(void *)(a2 + 80);
    void *v5 = *(void *)(a2 + 88);
  }

  return (v2 >> 19) & 1;
}

void nw_quic_connection_set_max_data(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_max_data_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_quic_connection_set_max_data";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_max_data";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_quic_connection_set_max_data";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_max_data";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_max_data";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182331EC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_max_data_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 48);
  if (v5) {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, *(void *)(a1 + 32));
  }
  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_set_max_data(void *a1, uint64_t a2)
{
  id v3 = nw_quic_stream_copy_connection_metadata(a1);
  nw_quic_connection_set_max_data(v3, a2);
}

void sub_182331F64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void nw_quic_connection_set_max_stream_data_bidirectional_local(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_max_stream_data_bidirectional_local_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_quic_connection_set_max_stream_data_bidirectional_local";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_max_stream_data_bidirectional_local";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_quic_connection_set_max_stream_data_bidirectional_local";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_max_stream_data_bidirectional_local";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_max_stream_data_bidirectional_local";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182332244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_max_stream_data_bidirectional_local_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 56);
  if (v5) {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, *(void *)(a1 + 32));
  }
  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_set_max_stream_data_bidirectional_local(void *a1, uint64_t a2)
{
  id v3 = nw_quic_stream_copy_connection_metadata(a1);
  nw_quic_connection_set_max_stream_data_bidirectional_local(v3, a2);
}

void sub_1823322E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void nw_quic_connection_set_max_stream_data_bidirectional_remote(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_max_stream_data_bidirectional_remote_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_quic_connection_set_max_stream_data_bidirectional_remote";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_max_stream_data_bidirectional_remote";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_quic_connection_set_max_stream_data_bidirectional_remote";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_max_stream_data_bidirectional_remote";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_max_stream_data_bidirectional_remote";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823325C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_max_stream_data_bidirectional_remote_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 64);
  if (v5) {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, *(void *)(a1 + 32));
  }
  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_set_max_stream_data_bidirectional_remote(void *a1, uint64_t a2)
{
  id v3 = nw_quic_stream_copy_connection_metadata(a1);
  nw_quic_connection_set_max_stream_data_bidirectional_remote(v3, a2);
}

void sub_18233265C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void nw_quic_connection_set_max_stream_data_unidirectional(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_max_stream_data_unidirectional_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_quic_connection_set_max_stream_data_unidirectional";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_max_stream_data_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_quic_connection_set_max_stream_data_unidirectional";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_max_stream_data_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_max_stream_data_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18233293C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_max_stream_data_unidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 72);
  if (v5) {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, *(void *)(a1 + 32));
  }
  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_set_max_stream_data_unidirectional(void *a1, uint64_t a2)
{
  id v3 = nw_quic_stream_copy_connection_metadata(a1);
  nw_quic_connection_set_max_stream_data_unidirectional(v3, a2);
}

void sub_1823329D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void nw_quic_connection_set_local_max_streams_unidirectional(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_local_max_streams_unidirectional_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_quic_connection_set_local_max_streams_unidirectional";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_local_max_streams_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_quic_connection_set_local_max_streams_unidirectional";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_local_max_streams_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_local_max_streams_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182332CB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_local_max_streams_unidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 88);
  if (v5) {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, *(void *)(a1 + 32));
  }
  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_set_local_max_streams_unidirectional( nw_protocol_metadata_t metadata, uint64_t max_streams_unidirectional)
{
  id v3 = nw_quic_stream_copy_connection_metadata(metadata);
  nw_quic_connection_set_local_max_streams_unidirectional(v3, max_streams_unidirectional);
}

void sub_182332D54( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void nw_quic_connection_set_local_max_streams_bidirectional(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_local_max_streams_bidirectional_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_quic_connection_set_local_max_streams_bidirectional";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_local_max_streams_bidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_quic_connection_set_local_max_streams_bidirectional";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_local_max_streams_bidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_local_max_streams_bidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182333034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_local_max_streams_bidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 80);
  if (v5) {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, *(void *)(a1 + 32));
  }
  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_set_local_max_streams_bidirectional( nw_protocol_metadata_t metadata, uint64_t max_streams_bidirectional)
{
  id v3 = nw_quic_stream_copy_connection_metadata(metadata);
  nw_quic_connection_set_local_max_streams_bidirectional(v3, max_streams_bidirectional);
}

void sub_1823330D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void nw_quic_connection_set_remote_max_streams_unidirectional(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_remote_max_streams_unidirectional_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_quic_connection_set_remote_max_streams_unidirectional";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_remote_max_streams_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_quic_connection_set_remote_max_streams_unidirectional";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_remote_max_streams_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_remote_max_streams_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823333B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_remote_max_streams_unidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 120);
  if (v5) {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, *(void *)(a1 + 32));
  }
  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_connection_set_remote_max_streams_bidirectional(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_remote_max_streams_bidirectional_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_quic_connection_set_remote_max_streams_bidirectional";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_remote_max_streams_bidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_quic_connection_set_remote_max_streams_bidirectional";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_remote_max_streams_bidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_remote_max_streams_bidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823336E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_remote_max_streams_bidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 112);
  if (v5) {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, *(void *)(a1 + 32));
  }
  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_stream_set_application_error(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_stream(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_stream_set_application_error_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_quic_stream_set_application_error";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_stream_set_application_error";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_quic_stream_set_application_error";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_stream_set_application_error";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_stream_set_application_error";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182333A10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_set_application_error_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 40));
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5) {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, *(void *)(a1 + 32));
  }
  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_connection_set_keepalive(void *a1, __int16 a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_keepalive_block_invoke;
    v12[3] = &__block_descriptor_34_e9_B16__0_v8l;
    __int16 v13 = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_quic_connection_set_keepalive";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_keepalive";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_quic_connection_set_keepalive";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_keepalive";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_keepalive";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182333D44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_keepalive_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 160);
  if (v5) {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, *(unsigned __int16 *)(a1 + 32));
  }
  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_set_keepalive(void *a1, __int16 a2)
{
  id v3 = nw_quic_stream_copy_connection_metadata(a1);
  nw_quic_connection_set_keepalive(v3, a2);
}

void sub_182333DE0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void nw_quic_connection_set_link_flow_controlled(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_link_flow_controlled_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_quic_connection_set_link_flow_controlled";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_link_flow_controlled";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_quic_connection_set_link_flow_controlled";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_link_flow_controlled";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_link_flow_controlled";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823340C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_link_flow_controlled_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 200);
  if (v5) {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, *(unsigned __int8 *)(a1 + 32));
  }
  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_set_link_flow_controlled(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_connection_metadata(a1);
  nw_quic_connection_set_link_flow_controlled(v3, a2);
}

void sub_18233415C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void nw_quic_connection_close_with_error(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_close_with_error_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_quic_connection_close_with_error";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_close_with_error";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_quic_connection_close_with_error";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_close_with_error";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_close_with_error";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18233443C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_close_with_error_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 208);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 208));
  uint64_t v5 = *(void *)(a2 + 144);
  if (v5) {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, *(void *)(a1 + 32));
  }
  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_connection_inject_packet(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  if (nw_protocol_metadata_is_quic_connection(v5))
  {
    v14[0] = MEMORY[0x1895F87A8];
    v14[1] = 3221225472LL;
    v14[2] = __nw_quic_connection_inject_packet_block_invoke;
    v14[3] = &__block_descriptor_48_e9_B16__0_v8l;
    v14[4] = a2;
    void v14[5] = a3;
    nw_protocol_metadata_access_handle((uint64_t)v5, (uint64_t)v14);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_connection_inject_packet";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v16 = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v7, &v16, &v15))
  {
    if (v16 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_inject_packet";
        _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = v16;
      BOOL v12 = os_log_type_enabled(v8, v16);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_connection_inject_packet";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_inject_packet";
        _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_inject_packet";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182334770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_inject_packet_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 176);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(v5 + 16))(v5, *(void *)(a1 + 32), *(void *)(a1 + 40));
  }
  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_connection_report_application_result(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_report_application_result_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_quic_connection_report_application_result";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_report_application_result";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_quic_connection_report_application_result";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_report_application_result";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_report_application_result";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182334AA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_report_application_result_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 184);
  if (v5) {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, *(unsigned __int8 *)(a1 + 32));
  }
  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_connection_get_application_result(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_quic_connection_get_application_result_block_invoke;
    v13[3] = &unk_189BC6110;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_connection_get_application_result";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_get_application_result";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_connection_get_application_result";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_get_application_result";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_get_application_result";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182334DE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_application_result_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 192);
  if (v5) {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, *(void *)(a1 + 32));
  }
  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_connection_set_max_data_handler(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_quic_connection_set_max_data_handler_block_invoke;
    v13[3] = &unk_189BC6110;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_connection_set_max_data_handler";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_max_data_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_connection_set_max_data_handler";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_max_data_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_max_data_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182335148( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_max_data_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = _Block_copy(*(const void **)(a1 + 32));
  id v6 = *(void **)(a2 + 48);
  *(void *)(a2 + 4_Block_object_dispose(va, 8) = v5;

  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_connection_set_max_stream_data_bidirectional_local_handler(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_quic_connection_set_max_stream_data_bidirectional_local_handler_block_invoke;
    v13[3] = &unk_189BC6110;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_connection_set_max_stream_data_bidirectional_local_handler";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_max_stream_data_bidirectional_local_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_connection_set_max_stream_data_bidirectional_local_handler";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_max_stream_data_bidirectional_local_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_max_stream_data_bidirectional_local_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823354A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_max_stream_data_bidirectional_local_handler_block_invoke( uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = _Block_copy(*(const void **)(a1 + 32));
  id v6 = *(void **)(a2 + 56);
  *(void *)(a2 + 56) = v5;

  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_connection_set_max_stream_data_bidirectional_remote_handler(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_quic_connection_set_max_stream_data_bidirectional_remote_handler_block_invoke;
    v13[3] = &unk_189BC6110;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_connection_set_max_stream_data_bidirectional_remote_handler";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_max_stream_data_bidirectional_remote_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_connection_set_max_stream_data_bidirectional_remote_handler";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_max_stream_data_bidirectional_remote_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_max_stream_data_bidirectional_remote_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182335808( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_max_stream_data_bidirectional_remote_handler_block_invoke( uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = _Block_copy(*(const void **)(a1 + 32));
  id v6 = *(void **)(a2 + 64);
  *(void *)(a2 + 64) = v5;

  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_connection_set_max_stream_data_unidirectional_handler(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_quic_connection_set_max_stream_data_unidirectional_handler_block_invoke;
    v13[3] = &unk_189BC6110;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_connection_set_max_stream_data_unidirectional_handler";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_max_stream_data_unidirectional_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_connection_set_max_stream_data_unidirectional_handler";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_max_stream_data_unidirectional_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_max_stream_data_unidirectional_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182335B68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_max_stream_data_unidirectional_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = _Block_copy(*(const void **)(a1 + 32));
  id v6 = *(void **)(a2 + 72);
  *(void *)(a2 + 72) = v5;

  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_connection_set_local_max_streams_unidirectional_handler(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_quic_connection_set_local_max_streams_unidirectional_handler_block_invoke;
    v13[3] = &unk_189BC6110;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_connection_set_local_max_streams_unidirectional_handler";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_local_max_streams_unidirectional_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_connection_set_local_max_streams_unidirectional_handler";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_local_max_streams_unidirectional_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_local_max_streams_unidirectional_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182335EC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_local_max_streams_unidirectional_handler_block_invoke( uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = _Block_copy(*(const void **)(a1 + 32));
  id v6 = *(void **)(a2 + 88);
  *(void *)(a2 + 8_Block_object_dispose(va, 8) = v5;

  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_connection_set_local_max_streams_bidirectional_handler(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_quic_connection_set_local_max_streams_bidirectional_handler_block_invoke;
    v13[3] = &unk_189BC6110;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_connection_set_local_max_streams_bidirectional_handler";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_local_max_streams_bidirectional_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_connection_set_local_max_streams_bidirectional_handler";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_local_max_streams_bidirectional_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_local_max_streams_bidirectional_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182336228( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_local_max_streams_bidirectional_handler_block_invoke( uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = _Block_copy(*(const void **)(a1 + 32));
  id v6 = *(void **)(a2 + 80);
  *(void *)(a2 + 80) = v5;

  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_stream_set_application_error_handler(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_stream(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_quic_stream_set_application_error_handler_block_invoke;
    v13[3] = &unk_189BC6110;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_stream_set_application_error_handler";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_stream_set_application_error_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_stream_set_application_error_handler";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_stream_set_application_error_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_stream_set_application_error_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182336588( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_set_application_error_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 40));
  uint64_t v5 = _Block_copy(*(const void **)(a1 + 32));
  id v6 = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v5;

  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_connection_set_keepalive_handler(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_quic_connection_set_keepalive_handler_block_invoke;
    v13[3] = &unk_189BC6110;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_connection_set_keepalive_handler";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_keepalive_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_connection_set_keepalive_handler";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_keepalive_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_keepalive_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823368E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_keepalive_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = _Block_copy(*(const void **)(a1 + 32));
  id v6 = *(void **)(a2 + 160);
  *(void *)(a2 + 160) = v5;

  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_connection_set_application_result_handler(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_quic_connection_set_application_result_handler_block_invoke;
    v13[3] = &unk_189BC6110;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_connection_set_application_result_handler";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_application_result_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_connection_set_application_result_handler";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_application_result_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_application_result_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182336C48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_application_result_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = _Block_copy(*(const void **)(a1 + 32));
  id v6 = *(void **)(a2 + 184);
  *(void *)(a2 + 184) = v5;

  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_connection_set_link_flow_controlled_handler(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_quic_connection_set_link_flow_controlled_handler_block_invoke;
    v13[3] = &unk_189BC6110;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_connection_set_link_flow_controlled_handler";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_link_flow_controlled_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_connection_set_link_flow_controlled_handler";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_link_flow_controlled_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_link_flow_controlled_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182336FA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_link_flow_controlled_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = _Block_copy(*(const void **)(a1 + 32));
  id v6 = *(void **)(a2 + 200);
  *(void *)(a2 + 200) = v5;

  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_set_keepalive_interval(nw_protocol_metadata_t metadata, uint16_t keepalive_interval)
{
  id v3 = nw_quic_stream_copy_connection_metadata(metadata);
  nw_quic_connection_set_keepalive(v3, keepalive_interval);
}

void sub_18233705C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void nw_quic_connection_set_close_with_error_handler(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_quic_connection_set_close_with_error_handler_block_invoke;
    v13[3] = &unk_189BC6110;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_connection_set_close_with_error_handler";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_close_with_error_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_connection_set_close_with_error_handler";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_close_with_error_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_close_with_error_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182337354( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_close_with_error_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = _Block_copy(*(const void **)(a1 + 32));
  id v6 = *(void **)(a2 + 144);
  *(void *)(a2 + 144) = v5;

  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_connection_inject_packet_handler(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_quic_connection_inject_packet_handler_block_invoke;
    v13[3] = &unk_189BC6110;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_connection_inject_packet_handler";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_inject_packet_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_connection_inject_packet_handler";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_inject_packet_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_inject_packet_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823376B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_inject_packet_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = _Block_copy(*(const void **)(a1 + 32));
  id v6 = *(void **)(a2 + 176);
  *(void *)(a2 + 176) = v5;

  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_stream_set_id(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_stream(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_stream_set_id_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_quic_stream_set_id";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_stream_set_id";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_quic_stream_set_id";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_stream_set_id";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_stream_set_id";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823379FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_set_id_block_invoke(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 32);
  return 1LL;
}

void nw_quic_stream_set_usable_datagram_frame_size(void *a1, __int16 a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_stream(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_stream_set_usable_datagram_frame_size_block_invoke;
    v12[3] = &__block_descriptor_34_e9_B16__0_v8l;
    __int16 v13 = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_quic_stream_set_usable_datagram_frame_size";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_stream_set_usable_datagram_frame_size";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_quic_stream_set_usable_datagram_frame_size";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_stream_set_usable_datagram_frame_size";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_stream_set_usable_datagram_frame_size";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182337CEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_set_usable_datagram_frame_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a2 + 44) = *(_WORD *)(a1 + 32);
  return 1LL;
}

void nw_quic_stream_set_datagram_variant_flow_id(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_stream(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_stream_set_datagram_variant_flow_id_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_quic_stream_set_datagram_variant_flow_id";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_stream_set_datagram_variant_flow_id";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_quic_stream_set_datagram_variant_flow_id";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_stream_set_datagram_variant_flow_id";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_stream_set_datagram_variant_flow_id";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182337FDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_set_datagram_variant_flow_id_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + _Block_object_dispose(va, 8) = *(void *)(a1 + 32);
  return 1LL;
}

void nw_quic_stream_set_has_datagram_variant_flow_id(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_stream(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_stream_set_has_datagram_variant_flow_id_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_quic_stream_set_has_datagram_variant_flow_id";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_stream_set_has_datagram_variant_flow_id";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_quic_stream_set_has_datagram_variant_flow_id";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_stream_set_has_datagram_variant_flow_id";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_stream_set_has_datagram_variant_flow_id";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823382CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_set_has_datagram_variant_flow_id_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 47) = *(_BYTE *)(a2 + 47) & 0xFE | *(_BYTE *)(a1 + 32);
  return 1LL;
}

void nw_quic_stream_set_application_error_internal(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_stream(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_stream_set_application_error_internal_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_quic_stream_set_application_error_internal";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_stream_set_application_error_internal";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_quic_stream_set_application_error_internal";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_stream_set_application_error_internal";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_stream_set_application_error_internal";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823385C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_set_application_error_internal_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 16) = *(void *)(a1 + 32);
  return 1LL;
}

void nw_quic_connection_set_application_error_internal(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_application_error_internal_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_quic_connection_set_application_error_internal";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_application_error_internal";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_quic_connection_set_application_error_internal";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_application_error_internal";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_quic_connection_set_application_error_internal";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823388B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_application_error_internal_block_invoke(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 32);
  return 1LL;
}

void nw_quic_set_application_error_internal(void *a1, uint64_t a2)
{
  id v3 = nw_quic_stream_copy_connection_metadata(a1);
  nw_quic_connection_set_application_error_internal(v3, a2);
}

void sub_182338910( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void nw_quic_stream_set_type(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_stream(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_stream_set_type_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_quic_stream_set_type";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_stream_set_type";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_quic_stream_set_type";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_stream_set_type";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_stream_set_type";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182338BF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_set_type_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 46) = *(_BYTE *)(a1 + 32);
  return 1LL;
}

void nw_quic_connection_set_is_early_data_accepted(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_set_is_early_data_accepted_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_quic_connection_set_is_early_data_accepted";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_is_early_data_accepted";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_quic_connection_set_is_early_data_accepted";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_is_early_data_accepted";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_quic_connection_set_is_early_data_accepted";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182338EDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_is_early_data_accepted_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 216) = *(_BYTE *)(a2 + 216) & 0xFE | *(_BYTE *)(a1 + 32);
  return 1LL;
}

void nw_quic_set_is_early_data_accepted(void *a1, char a2)
{
  id v3 = nw_quic_stream_copy_connection_metadata(a1);
  nw_quic_connection_set_is_early_data_accepted(v3, a2);
}

void sub_182338F40( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t nw_quic_connection_get_local_max_streams_unidirectional(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    uint64_t v16 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_local_max_streams_unidirectional_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_local_max_streams_unidirectional";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_local_max_streams_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_local_max_streams_unidirectional";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_local_max_streams_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_local_max_streams_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18233924C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_local_max_streams_unidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 104);
  if (v5) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(uint64_t (**)(void))(v5 + 16))();
  }
  os_unfair_lock_unlock(v4);
  return 1LL;
}

uint64_t nw_quic_get_local_max_streams_unidirectional(nw_protocol_metadata_t metadata)
{
  id v1 = nw_quic_stream_copy_connection_metadata(metadata);
  uint64_t local_max_streams_unidirectional = nw_quic_connection_get_local_max_streams_unidirectional(v1);

  return local_max_streams_unidirectional;
}

void sub_182339304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_connection_get_local_max_streams_bidirectional(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    uint64_t v16 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_local_max_streams_bidirectional_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_local_max_streams_bidirectional";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_local_max_streams_bidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_local_max_streams_bidirectional";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_local_max_streams_bidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_local_max_streams_bidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18233960C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_local_max_streams_bidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 96);
  if (v5) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(uint64_t (**)(void))(v5 + 16))();
  }
  os_unfair_lock_unlock(v4);
  return 1LL;
}

uint64_t nw_quic_get_local_max_streams_bidirectional(nw_protocol_metadata_t metadata)
{
  id v1 = nw_quic_stream_copy_connection_metadata(metadata);
  uint64_t local_max_streams_bidirectional = nw_quic_connection_get_local_max_streams_bidirectional(v1);

  return local_max_streams_bidirectional;
}

void sub_1823396C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_connection_get_remote_max_streams_unidirectional(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    uint64_t v16 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_remote_max_streams_unidirectional_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_remote_max_streams_unidirectional";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_remote_max_streams_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_remote_max_streams_unidirectional";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_remote_max_streams_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_remote_max_streams_unidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823399CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_remote_max_streams_unidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 136);
  if (v5) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(uint64_t (**)(void))(v5 + 16))();
  }
  os_unfair_lock_unlock(v4);
  return 1LL;
}

uint64_t nw_quic_get_remote_max_streams_unidirectional(nw_protocol_metadata_t metadata)
{
  id v1 = nw_quic_stream_copy_connection_metadata(metadata);
  uint64_t remote_max_streams_unidirectional = nw_quic_connection_get_remote_max_streams_unidirectional(v1);

  return remote_max_streams_unidirectional;
}

void sub_182339A84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_connection_get_remote_max_streams_bidirectional(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    uint64_t v16 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_remote_max_streams_bidirectional_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_remote_max_streams_bidirectional";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_remote_max_streams_bidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_remote_max_streams_bidirectional";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_remote_max_streams_bidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_remote_max_streams_bidirectional";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182339D8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_remote_max_streams_bidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 128);
  if (v5) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(uint64_t (**)(void))(v5 + 16))();
  }
  os_unfair_lock_unlock(v4);
  return 1LL;
}

uint64_t nw_quic_get_remote_max_streams_bidirectional(nw_protocol_metadata_t metadata)
{
  id v1 = nw_quic_stream_copy_connection_metadata(metadata);
  uint64_t remote_max_streams_bidirectional = nw_quic_connection_get_remote_max_streams_bidirectional(v1);

  return remote_max_streams_bidirectional;
}

void sub_182339E44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_connection_get_peer_idle_timeout(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    uint64_t v16 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_peer_idle_timeout_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_peer_idle_timeout";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_peer_idle_timeout";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_peer_idle_timeout";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_peer_idle_timeout";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_peer_idle_timeout";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18233A14C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_peer_idle_timeout_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 152);
  if (v5) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(uint64_t (**)(void))(v5 + 16))();
  }
  os_unfair_lock_unlock(v4);
  return 1LL;
}

uint64_t nw_quic_get_peer_idle_timeout(void *a1)
{
  id v1 = nw_quic_stream_copy_connection_metadata(a1);
  peer_uint32_t idle_timeout = nw_quic_connection_get_peer_idle_timeout(v1);

  return peer_idle_timeout;
}

void sub_18233A204(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_connection_get_keepalive(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    __int16 v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_keepalive_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    uint64_t v2 = *(unsigned __int16 *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_keepalive";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_keepalive";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_keepalive";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_keepalive";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_keepalive";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18233A50C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_keepalive_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = *(void *)(a2 + 168);
  if (v5) {
    *(_WORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(uint64_t (**)(void))(v5 + 16))();
  }
  os_unfair_lock_unlock(v4);
  return 1LL;
}

uint64_t nw_quic_get_keepalive(void *a1)
{
  id v1 = nw_quic_stream_copy_connection_metadata(a1);
  uint64_t keepalive = nw_quic_connection_get_keepalive(v1);

  return keepalive;
}

void sub_18233A5C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint16_t nw_quic_get_keepalive_interval(nw_protocol_metadata_t metadata)
{
  id v1 = nw_quic_stream_copy_connection_metadata(metadata);
  uint16_t keepalive = nw_quic_connection_get_keepalive(v1);

  return keepalive;
}

void sub_18233A604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_get_remote_idle_timeout(nw_protocol_metadata_t metadata)
{
  id v1 = nw_quic_stream_copy_connection_metadata(metadata);
  peer_uint32_t idle_timeout = nw_quic_connection_get_peer_idle_timeout(v1);

  return peer_idle_timeout;
}

void sub_18233A644(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_stream_get_id(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_stream(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    uint64_t v16 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_stream_get_id_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_stream_get_id";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_id";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_get_id";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_id";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_id";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18233A94C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_get_id_block_invoke(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *a2;
  return 1LL;
}

uint64_t nw_quic_stream_get_usable_datagram_frame_size(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_stream(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    __int16 v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_stream_get_usable_datagram_frame_size_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    uint64_t v2 = *(unsigned __int16 *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_stream_get_usable_datagram_frame_size";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_usable_datagram_frame_size";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_get_usable_datagram_frame_size";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_usable_datagram_frame_size";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_usable_datagram_frame_size";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18233AC8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_get_usable_datagram_frame_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_WORD *)(a2 + 44);
  return 1LL;
}

uint64_t nw_quic_stream_get_datagram_variant_flow_id(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_stream(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    uint64_t v16 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_stream_get_datagram_variant_flow_id_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_stream_get_datagram_variant_flow_id";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_datagram_variant_flow_id";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_get_datagram_variant_flow_id";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_datagram_variant_flow_id";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_datagram_variant_flow_id";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18233AFCC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_get_datagram_variant_flow_id_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(void *)(a2 + 8);
  return 1LL;
}

BOOL nw_quic_stream_get_has_datagram_variant_flow_id(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_stream(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_stream_get_has_datagram_variant_flow_id_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    BOOL v2 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_stream_get_has_datagram_variant_flow_id";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_has_datagram_variant_flow_id";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_get_has_datagram_variant_flow_id";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_has_datagram_variant_flow_id";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_has_datagram_variant_flow_id";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18233B314( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_get_has_datagram_variant_flow_id_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_BYTE *)(a2 + 47) & 1;
  return 1LL;
}

uint64_t nw_quic_connection_get_application_error(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    uint64_t v16 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_application_error_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_application_error";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_application_error";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_application_error";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_application_error";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_application_error";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18233B658( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_application_error_block_invoke(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *a2;
  return 1LL;
}

uint64_t nw_quic_get_application_error(nw_protocol_metadata_t metadata)
{
  id v1 = nw_quic_stream_copy_connection_metadata(metadata);
  uint64_t application_error = nw_quic_connection_get_application_error(v1);

  return application_error;
}

void sub_18233B6CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_quic_stream_get_application_error(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_stream(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    uint64_t v16 = 0LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_stream_get_application_error_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_stream_get_application_error";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_application_error";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_get_application_error";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_application_error";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_application_error";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18233B9D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_get_application_error_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(void *)(a2 + 16);
  return 1LL;
}

uint64_t nw_quic_stream_get_type(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_stream(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_stream_get_type_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    uint64_t v2 = *(unsigned __int8 *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_stream_get_type";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_type";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_get_type";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_type";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_get_type";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18233BD14( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_get_type_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_BYTE *)(a2 + 46);
  return 1LL;
}

BOOL nw_quic_connection_get_is_early_data_accepted(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_metadata_is_quic_connection(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_quic_connection_get_is_early_data_accepted_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    BOOL v2 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_connection_get_is_early_data_accepted";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_is_early_data_accepted";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_get_is_early_data_accepted";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_is_early_data_accepted";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_get_is_early_data_accepted";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18233C05C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_is_early_data_accepted_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_BYTE *)(a2 + 216) & 1;
  return 1LL;
}

BOOL nw_quic_get_is_early_data_accepted(void *a1)
{
  id v1 = nw_quic_stream_copy_connection_metadata(a1);
  BOOL is_early_data_accepted = nw_quic_connection_get_is_early_data_accepted(v1);

  return is_early_data_accepted;
}

void sub_18233C0D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_get_local_max_streams_unidirectional_handler(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_quic_connection_get_local_max_streams_unidirectional_handler_block_invoke;
    v13[3] = &unk_189BC6110;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_connection_get_local_max_streams_unidirectional_handler";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_get_local_max_streams_unidirectional_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_connection_get_local_max_streams_unidirectional_handler";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_get_local_max_streams_unidirectional_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_get_local_max_streams_unidirectional_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18233C3C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_local_max_streams_unidirectional_handler_block_invoke( uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = _Block_copy(*(const void **)(a1 + 32));
  id v6 = *(void **)(a2 + 104);
  *(void *)(a2 + 104) = v5;

  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_connection_get_local_max_streams_bidirectional_handler(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_quic_connection_get_local_max_streams_bidirectional_handler_block_invoke;
    v13[3] = &unk_189BC6110;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_connection_get_local_max_streams_bidirectional_handler";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_get_local_max_streams_bidirectional_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_connection_get_local_max_streams_bidirectional_handler";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_get_local_max_streams_bidirectional_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_get_local_max_streams_bidirectional_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18233C728( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_local_max_streams_bidirectional_handler_block_invoke( uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = _Block_copy(*(const void **)(a1 + 32));
  id v6 = *(void **)(a2 + 96);
  *(void *)(a2 + 96) = v5;

  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_connection_get_remote_max_streams_unidirectional_handler(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_quic_connection_get_remote_max_streams_unidirectional_handler_block_invoke;
    v13[3] = &unk_189BC6110;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_connection_get_remote_max_streams_unidirectional_handler";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_get_remote_max_streams_unidirectional_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_connection_get_remote_max_streams_unidirectional_handler";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_get_remote_max_streams_unidirectional_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_get_remote_max_streams_unidirectional_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18233CA88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_remote_max_streams_unidirectional_handler_block_invoke( uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = _Block_copy(*(const void **)(a1 + 32));
  id v6 = *(void **)(a2 + 136);
  *(void *)(a2 + 136) = v5;

  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_connection_get_remote_max_streams_bidirectional_handler(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_quic_connection_get_remote_max_streams_bidirectional_handler_block_invoke;
    v13[3] = &unk_189BC6110;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_connection_get_remote_max_streams_bidirectional_handler";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_get_remote_max_streams_bidirectional_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_connection_get_remote_max_streams_bidirectional_handler";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_get_remote_max_streams_bidirectional_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_get_remote_max_streams_bidirectional_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18233CDE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_remote_max_streams_bidirectional_handler_block_invoke( uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = _Block_copy(*(const void **)(a1 + 32));
  id v6 = *(void **)(a2 + 128);
  *(void *)(a2 + 12_Block_object_dispose(va, 8) = v5;

  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_connection_get_peer_idle_timeout_handler(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_quic_connection_get_peer_idle_timeout_handler_block_invoke;
    v13[3] = &unk_189BC6110;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_connection_get_peer_idle_timeout_handler";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_get_peer_idle_timeout_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_connection_get_peer_idle_timeout_handler";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_get_peer_idle_timeout_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_get_peer_idle_timeout_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18233D148( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_peer_idle_timeout_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = _Block_copy(*(const void **)(a1 + 32));
  id v6 = *(void **)(a2 + 152);
  *(void *)(a2 + 152) = v5;

  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_connection_get_keepalive_handler(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_quic_connection_get_keepalive_handler_block_invoke;
    v13[3] = &unk_189BC6110;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_connection_get_keepalive_handler";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_get_keepalive_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_connection_get_keepalive_handler";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_get_keepalive_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_get_keepalive_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18233D4A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_keepalive_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = _Block_copy(*(const void **)(a1 + 32));
  id v6 = *(void **)(a2 + 168);
  *(void *)(a2 + 16_Block_object_dispose(va, 8) = v5;

  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_connection_get_application_result_handler(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_quic_connection_get_application_result_handler_block_invoke;
    v13[3] = &unk_189BC6110;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_connection_get_application_result_handler";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_get_application_result_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_connection_get_application_result_handler";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_get_application_result_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_get_application_result_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18233D808( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_get_application_result_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a2 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 212));
  uint64_t v5 = _Block_copy(*(const void **)(a1 + 32));
  id v6 = *(void **)(a2 + 192);
  *(void *)(a2 + 192) = v5;

  os_unfair_lock_unlock(v4);
  return 1LL;
}

void nw_quic_connection_execute_locked(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_quic_connection_execute_locked_block_invoke;
    v13[3] = &unk_189BC6110;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_connection_execute_locked";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_execute_locked";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_connection_execute_locked";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_execute_locked";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_execute_locked";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18233DB68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_execute_locked_block_invoke(uint64_t a1, os_unfair_lock_s *a2)
{
  id v3 = a2 + 53;
  os_unfair_lock_lock(a2 + 53);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  os_unfair_lock_unlock(v3);
  return 1LL;
}

void nw_quic_stream_execute_locked(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_metadata_is_quic_stream(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_quic_stream_execute_locked_block_invoke;
    v13[3] = &unk_189BC6110;
    id v14 = v4;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v13);

    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_stream_execute_locked";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_stream_execute_locked";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_stream_execute_locked";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_stream_execute_locked";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_stream_execute_locked";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_metadata_is_quic_stream(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18233DEB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_stream_execute_locked_block_invoke(uint64_t a1, os_unfair_lock_s *a2)
{
  id v3 = a2 + 10;
  os_unfair_lock_lock(a2 + 10);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  os_unfair_lock_unlock(v3);
  return 1LL;
}

void nw_quic_set_application_error( nw_protocol_metadata_t metadata, uint64_t application_error, const char *reason)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v5 = nw_quic_stream_copy_connection_metadata(metadata);
  id v6 = v5;
  if (v5)
  {
    nw_quic_connection_set_application_error_internal(v5, application_error);
    nw_quic_connection_set_application_error_reason(v6, (uint64_t)reason);
    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_set_application_error";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_set_application_error";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null connection_metadata", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_set_application_error";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null connection_metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_set_application_error";
        _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null connection_metadata, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_set_application_error";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null connection_metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18233E1D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_quic_connection_set_application_error_reason(void *a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (v3)
  {
    id v4 = v3;
    if (nw_protocol_metadata_is_quic_stream(v3))
    {
      id v5 = nw_quic_stream_copy_connection_metadata(v4);

      id v4 = v5;
    }

    v14[0] = MEMORY[0x1895F87A8];
    v14[1] = 3221225472LL;
    v14[2] = __nw_quic_connection_set_application_error_reason_block_invoke;
    v14[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v14[4] = a2;
    nw_protocol_metadata_access_handle((uint64_t)v4, (uint64_t)v14);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_quic_connection_set_application_error_reason";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v16 = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v7, &v16, &v15))
  {
    if (v16 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_application_error_reason";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = v16;
      BOOL v12 = os_log_type_enabled(v8, v16);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_quic_connection_set_application_error_reason";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_application_error_reason";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_quic_connection_set_application_error_reason";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18233E4C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_connection_set_application_error_reason_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = *(const char **)(a1 + 32);
  if (v3)
  {
    xpc_object_t v4 = xpc_string_create(v3);
    id v5 = *(void **)(a2 + 8);
    *(void *)(a2 + _Block_object_dispose(va, 8) = v4;
  }

  else
  {
    id v5 = *(void **)(a2 + 8);
    *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  }

  return 1LL;
}

const char *__cdecl nw_quic_get_application_error_reason(nw_protocol_metadata_t metadata)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = (uint64_t *)nw_quic_stream_copy_connection_metadata(metadata);
  BOOL v2 = v1;
  if (v1)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    uint64_t v18 = 0LL;
    v14[0] = MEMORY[0x1895F87A8];
    v14[1] = 3221225472LL;
    v14[2] = __nw_quic_get_application_error_reason_block_invoke;
    v14[3] = &unk_189BC60A8;
    v14[4] = buf;
    uint64_t v3 = v1[4];
    if (v3)
    {
      __nw_quic_get_application_error_reason_block_invoke((uint64_t)v14, v3);
      xpc_object_t v4 = *(const char **)(*(void *)&buf[8] + 24LL);
    }

    else
    {
      xpc_object_t v4 = 0LL;
    }

    _Block_object_dispose(buf, 8);
    goto LABEL_6;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_quic_get_application_error_reason";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v7, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_get_application_error_reason";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null connection_metadata", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_quic_get_application_error_reason";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null connection_metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_get_application_error_reason";
        _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null connection_metadata, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_quic_get_application_error_reason";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null connection_metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18233E818( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_quic_get_application_error_reason_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 8);
  if (v3) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = xpc_string_get_string_ptr(v3);
  }
  return 1LL;
}

uint64_t nw_qpod_set_secrets(void *a1, uint64_t a2, void *a3, void *a4, char a5)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v8 = a1;
  id v9 = a3;
  id v10 = a4;
  if (nw_protocol_options_is_qpod(v8))
  {
    v21[0] = MEMORY[0x1895F87A8];
    v21[1] = 3221225472LL;
    v21[2] = __nw_qpod_set_secrets_block_invoke;
    v21[3] = &unk_189BC1030;
    id v22 = v9;
    id v23 = v10;
    char v24 = a5;
    uint64_t v11 = nw_protocol_options_access_handle(v8, v21);

    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v28 = "nw_qpod_set_secrets";
  os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (__nwlog_fault(v14, &type, &v25))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v28 = "nw_qpod_set_secrets";
        _os_log_impl( &dword_181A5C000,  v15,  v16,  "%{public}s called with null nw_protocol_options_is_qpod(options)",  buf,  0xCu);
      }
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v28 = "nw_qpod_set_secrets";
          __int16 v29 = 2082;
          char v30 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v15,  v18,  "%{public}s called with null nw_protocol_options_is_qpod(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v28 = "nw_qpod_set_secrets";
        _os_log_impl( &dword_181A5C000,  v15,  v18,  "%{public}s called with null nw_protocol_options_is_qpod(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v28 = "nw_qpod_set_secrets";
        _os_log_impl( &dword_181A5C000,  v15,  v20,  "%{public}s called with null nw_protocol_options_is_qpod(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18233EB94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

BOOL nw_protocol_options_is_qpod(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = (id *)v1;
    id v4 = v3[1];

    if (nw_protocol_copy_qpod_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_qpod_definition::onceToken, &__block_literal_global_28_56380);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, nw_protocol_copy_qpod_definition::definition);

    goto LABEL_5;
  }

  __nwlog_obj();
  os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_protocol_options_is_qpod";
  id v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_options_is_qpod";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_protocol_options_is_qpod";
          __int16 v19 = 2082;
          os_log_type_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_options_is_qpod";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_options_is_qpod";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18233EEAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_qpod_set_secrets_block_invoke(uint64_t a1, id *location)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  if (gLogDatapath)
  {
    __nwlog_obj();
    os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      int v8 = 136446466;
      id v9 = "nw_qpod_set_secrets_block_invoke";
      __int16 v10 = 2048;
      uint64_t v11 = location;
      _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_DEBUG,  "%{public}s setting secrets for options %p",  (uint8_t *)&v8,  0x16u);
    }
  }

  objc_storeStrong(location, *(id *)(a1 + 32));
  if (*location)
  {
    objc_storeStrong(location + 1, *(id *)(a1 + 40));
    if (location[1])
    {
      *((_BYTE *)location + 32) = *(_BYTE *)(a1 + 48);
      return 1LL;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136446210;
      id v9 = "nw_qpod_set_secrets_block_invoke";
      id v6 = "%{public}s failed to create server secret";
      goto LABEL_9;
    }
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136446210;
      id v9 = "nw_qpod_set_secrets_block_invoke";
      id v6 = "%{public}s failed to create client secret";
LABEL_9:
      _os_log_impl(&dword_181A5C000, v5, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v8, 0xCu);
    }
  }

  return 0LL;
}

BOOL __nw_protocol_copy_qpod_definition_block_invoke()
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  if (gLogDatapath)
  {
    __nwlog_obj();
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      int v4 = 136446210;
      id v5 = "nw_protocol_copy_qpod_definition_block_invoke";
      _os_log_impl(&dword_181A5C000, v3, OS_LOG_TYPE_DEBUG, "%{public}s creating definition", (uint8_t *)&v4, 0xCu);
    }
  }

  nw_protocol_definition_t definition = nw_framer_create_definition("qpod", 0, &__block_literal_global_32);
  id v1 = (void *)nw_protocol_copy_qpod_definition::definition;
  nw_protocol_copy_qpod_definition::nw_protocol_definition_t definition = (uint64_t)definition;

  nw_protocol_definition_set_options_allocator( (void *)nw_protocol_copy_qpod_definition::definition,  (uint64_t)qpod_options_allocate,  (uint64_t)qpod_options_copy,  (uint64_t)qpod_options_deallocate);
  nw_protocol_definition_set_options_equality_check( (void *)nw_protocol_copy_qpod_definition::definition,  (uint64_t)qpod_options_is_equal);
  nw_protocol_definition_set_options_serializer( (void *)nw_protocol_copy_qpod_definition::definition,  1,  (uint64_t)qpod_options_serialize,  (uint64_t)qpod_options_deserialize);
  return nw_protocol_definition_register((void *)nw_protocol_copy_qpod_definition::definition);
}

BOOL qpod_options_allocate(void *a1)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = calloc(1uLL, 0x28uLL);
  if (!v2)
  {
    __nwlog_obj();
    int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    int v8 = "strict_calloc";
    __int16 v9 = 2048;
    uint64_t v10 = 1LL;
    __int16 v11 = 2048;
    uint64_t v12 = 40LL;
    id v5 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v5);
    if (result)
    {
      __break(1u);
      return result;
    }

    free(v5);
  }

  if (gLogDatapath)
  {
    __nwlog_obj();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      int v8 = "qpod_options_allocate";
      __int16 v9 = 2048;
      uint64_t v10 = (uint64_t)v2;
      _os_log_impl(&dword_181A5C000, v6, OS_LOG_TYPE_DEBUG, "%{public}s allocating options %p", buf, 0x16u);
    }
  }

  return (BOOL)v2;
}

void sub_18233F370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL qpod_options_copy(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v20 = "qpod_options_copy";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v7, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v20 = "qpod_options_copy";
          _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null existing_handle", buf, 0xCu);
        }
      }

      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v20 = "qpod_options_copy";
            __int16 v21 = 2082;
            uint64_t v22 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v14,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_26;
        }

        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v20 = "qpod_options_copy";
          _os_log_impl( &dword_181A5C000,  v8,  v14,  "%{public}s called with null existing_handle, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v20 = "qpod_options_copy";
          _os_log_impl( &dword_181A5C000,  v8,  v16,  "%{public}s called with null existing_handle, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_18233F78C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void qpod_options_deallocate(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  if (gLogDatapath)
  {
    __nwlog_obj();
    os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      int v8 = 136446466;
      os_log_type_t v9 = "qpod_options_deallocate";
      __int16 v10 = 2048;
      __int16 v11 = a2;
      _os_log_impl(&dword_181A5C000, v7, OS_LOG_TYPE_DEBUG, "%{public}s deallocating options %p", (uint8_t *)&v8, 0x16u);
    }
  }

  id v3 = (void *)*a2;
  *a2 = 0LL;

  int v4 = (void *)a2[1];
  a2[1] = 0LL;

  id v5 = (void *)a2[2];
  a2[2] = 0LL;

  uint64_t v6 = (void *)a2[3];
  a2[3] = 0LL;

  free(a2);
}

BOOL qpod_options_is_equal(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  if (a2 && a3)
  {
    BOOL v6 = nw_dispatch_data_is_equal(*(dispatch_data_t *)a2, *(dispatch_data_s **)a3)
      && nw_dispatch_data_is_equal(*(dispatch_data_t *)(a2 + 8), *(dispatch_data_s **)(a3 + 8))
      && nw_dispatch_data_is_equal(*(dispatch_data_t *)(a2 + 16), *(dispatch_data_s **)(a3 + 16))
      && nw_dispatch_data_is_equal(*(dispatch_data_t *)(a2 + 24), *(dispatch_data_s **)(a3 + 24))
      && *(unsigned __int8 *)(a2 + 32) == *(unsigned __int8 *)(a3 + 32);
    if (gLogDatapath)
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        int v9 = 136446978;
        __int16 v10 = "qpod_options_is_equal";
        __int16 v11 = 2048;
        uint64_t v12 = a2;
        __int16 v13 = 2048;
        uint64_t v14 = a3;
        __int16 v15 = 1024;
        BOOL v16 = v6;
        _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_DEBUG,  "%{public}s comparing options %p and %p -> %i",  (uint8_t *)&v9,  0x26u);
      }
    }
  }

  else
  {
    BOOL v6 = a2 == a3;
  }

  return v6;
}

BOOL qpod_options_serialize(void *a1, uint64_t a2, void *a3)
{
  uint64_t v64 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  if (!a2)
  {
    __nwlog_obj();
    os_log_type_t v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "qpod_options_serialize";
    __int16 v15 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v51) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v37 = type[0];
      if (os_log_type_enabled(v36, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&void applier[4] = "qpod_options_serialize";
        _os_log_impl(&dword_181A5C000, v36, v37, "%{public}s called with null existing_handle", applier, 0xCu);
      }

      goto LABEL_83;
    }

    if (!(_BYTE)v51)
    {
      __nwlog_obj();
      BOOL v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v49 = type[0];
      if (os_log_type_enabled(v36, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&void applier[4] = "qpod_options_serialize";
        _os_log_impl( &dword_181A5C000,  v36,  v49,  "%{public}s called with null existing_handle, backtrace limit exceeded",  applier,  0xCu);
      }

      goto LABEL_83;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v45 = type[0];
    BOOL v46 = os_log_type_enabled(v36, type[0]);
    if (!backtrace_string)
    {
      if (v46)
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&void applier[4] = "qpod_options_serialize";
        _os_log_impl( &dword_181A5C000,  v36,  v45,  "%{public}s called with null existing_handle, no backtrace",  applier,  0xCu);
      }

      goto LABEL_83;
    }

    if (v46)
    {
      *(_DWORD *)applier = 136446466;
      *(void *)&void applier[4] = "qpod_options_serialize";
      *(_WORD *)&applier[12] = 2082;
      *(void *)&applier[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v36,  v45,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  applier,  0x16u);
    }

    goto LABEL_71;
  }

  if (!a3)
  {
    __nwlog_obj();
    BOOL v38 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "qpod_options_serialize";
    __int16 v15 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v51) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v39 = type[0];
      if (os_log_type_enabled(v36, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&void applier[4] = "qpod_options_serialize";
        _os_log_impl(&dword_181A5C000, v36, v39, "%{public}s called with null out_length", applier, 0xCu);
      }

void sub_1823404BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL qpod_options_deserialize(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  if (!a2)
  {
    __nwlog_obj();
    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v35 = "qpod_options_deserialize";
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v22, type, &v33))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = type[0];
        if (os_log_type_enabled(v23, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v35 = "qpod_options_deserialize";
          _os_log_impl(&dword_181A5C000, v23, v24, "%{public}s called with null serialized_buffer", buf, 0xCu);
        }
      }

      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v28 = type[0];
        BOOL v29 = os_log_type_enabled(v23, type[0]);
        if (backtrace_string)
        {
          if (v29)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v35 = "qpod_options_deserialize";
            __int16 v36 = 2082;
            uint64_t v37 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v23,  v28,  "%{public}s called with null serialized_buffer, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_43;
        }

        if (v29)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v35 = "qpod_options_deserialize";
          _os_log_impl( &dword_181A5C000,  v23,  v28,  "%{public}s called with null serialized_buffer, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v30 = type[0];
        if (os_log_type_enabled(v23, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v35 = "qpod_options_deserialize";
          _os_log_impl( &dword_181A5C000,  v23,  v30,  "%{public}s called with null serialized_buffer, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182340BA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

dispatch_data_t ___ZL24qpod_options_deserializePU36objcproto25OS_nw_protocol_definition8NSObjectPKvm_block_invoke( uint64_t a1, void *a2)
{
  id v3 = (const void *)(*a2 + 1LL);
  if ((unint64_t)v3 <= *(void *)(a1 + 32)
    && (size_t v5 = *(unsigned __int8 *)*a2, *a2 = v3, (unint64_t)v3 + v5 <= *(void *)(a1 + 32)))
  {
    dispatch_data_t v6 = dispatch_data_create(v3, v5, 0LL, 0LL);
    *a2 += v5;
  }

  else
  {
    dispatch_data_t v6 = (dispatch_data_t)MEMORY[0x1895F8AA8];
    id v7 = MEMORY[0x1895F8AA8];
  }

  return v6;
}

uint64_t __nw_protocol_copy_qpod_definition_block_invoke_30(uint64_t a1, void *a2)
{
  BOOL v2 = a2;
  v19[0] = 0LL;
  v19[1] = v19;
  v19[2] = 0x2020000000LL;
  nw_protocol_options_t v3 = nw_framer_copy_options(v2);
  uint64_t v4 = MEMORY[0x1895F87A8];
  v16[0] = MEMORY[0x1895F87A8];
  v16[1] = 3221225472LL;
  v16[2] = __nw_protocol_copy_qpod_definition_block_invoke_2;
  v16[3] = &unk_189BC10E0;
  size_t v5 = v2;
  uint64_t v17 = v5;
  uint64_t v18 = v19;
  nw_protocol_options_access_handle(v3, v16);
  input_handler[0] = v4;
  input_handler[1] = 3221225472LL;
  input_handler[2] = __nw_protocol_copy_qpod_definition_block_invoke_35;
  input_handler[3] = &unk_189BC1158;
  dispatch_data_t v6 = v5;
  size_t v14 = v6;
  uint64_t v15 = v19;
  nw_framer_set_input_handler(v6, input_handler);
  output_handler[0] = v4;
  output_handler[1] = 3221225472LL;
  output_handler[2] = __nw_protocol_copy_qpod_definition_block_invoke_4;
  output_handler[3] = &unk_189BC11A8;
  id v7 = v6;
  uint64_t v11 = v7;
  size_t v12 = v19;
  nw_framer_set_output_handler(v7, output_handler);
  cleanup_handler[0] = v4;
  cleanup_handler[1] = 3221225472LL;
  cleanup_handler[2] = __nw_protocol_copy_qpod_definition_block_invoke_3_44;
  cleanup_handler[3] = &unk_189BC11D0;
  cleanup_handler[4] = v19;
  nw_framer_set_cleanup_handler(v7, cleanup_handler);
  nw_framer_set_stop_handler(v7, &__block_literal_global_48_56418);

  _Block_object_dispose(v19, 8);
  return 1LL;
}

void sub_182340DC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31)
{
  _Block_object_dispose((const void *)(v33 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_copy_qpod_definition_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if (gLogDatapath)
  {
    __nwlog_obj();
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      if (*(_BYTE *)(a2 + 32)) {
        uint64_t v17 = "server";
      }
      else {
        uint64_t v17 = "client";
      }
      int v18 = 136446978;
      __int16 v19 = "nw_protocol_copy_qpod_definition_block_invoke_2";
      __int16 v20 = 2048;
      uint64_t v21 = v16;
      __int16 v22 = 2080;
      uint64_t v23 = v17;
      __int16 v24 = 2048;
      uint64_t v25 = a2;
      _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_DEBUG,  "%{public}s created framer %p for %s with options %p",  (uint8_t *)&v18,  0x2Au);
    }
  }

  uint64_t v4 = *(void **)(a2 + 24);
  size_t v5 = *(void **)a2;
  dispatch_data_t v6 = *(void **)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 32);
  id v8 = *(id *)(a2 + 16);
  id v9 = v4;
  id v10 = v5;
  id v11 = v6;
  if (qpod_conn_create_override)
  {
    uint64_t override = qpod_conn_create_override(v8, v9, v10, v11, v7 != 0);
  }

  else
  {
    if (!MEMORY[0x189617028])
    {
      uint64_t v13 = 0LL;
      goto LABEL_7;
    }

    uint64_t override = qpod_conn_create();
  }

  uint64_t v13 = override;
LABEL_7:

  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v13;
  return 1LL;
}

void sub_182340FA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_copy_qpod_definition_block_invoke_35(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  nw_protocol_options_t v3 = a2;
  if (gLogDatapath)
  {
    __nwlog_obj();
    dispatch_data_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      size_t v12 = "nw_protocol_copy_qpod_definition_block_invoke";
      __int16 v13 = 2048;
      uint64_t v14 = v7;
      _os_log_impl(&dword_181A5C000, v6, OS_LOG_TYPE_DEBUG, "%{public}s handling input for framer %p", buf, 0x16u);
    }
  }

  parse[0] = MEMORY[0x1895F87A8];
  parse[1] = 3221225472LL;
  parse[2] = __nw_protocol_copy_qpod_definition_block_invoke_36;
  parse[3] = &unk_189BC1130;
  __int128 v8 = *(_OWORD *)(a1 + 32);
  id v4 = (id)v8;
  __int128 v10 = v8;
  nw_framer_parse_input(v3, 0LL, 0x7D0uLL, 0LL, parse);

  return 0LL;
}

void sub_182341110( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void __nw_protocol_copy_qpod_definition_block_invoke_4(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  nw_protocol_options_t v3 = a2;
  if (gLogDatapath)
  {
    __nwlog_obj();
    size_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      id v11 = "nw_protocol_copy_qpod_definition_block_invoke_4";
      __int16 v12 = 2048;
      uint64_t v13 = v6;
      _os_log_impl(&dword_181A5C000, v5, OS_LOG_TYPE_DEBUG, "%{public}s handling output for framer %p", buf, 0x16u);
    }
  }

  parse[0] = MEMORY[0x1895F87A8];
  parse[1] = 3221225472LL;
  parse[2] = __nw_protocol_copy_qpod_definition_block_invoke_41;
  parse[3] = &unk_189BC1130;
  __int128 v7 = *(_OWORD *)(a1 + 32);
  id v4 = (id)v7;
  __int128 v9 = v7;
  nw_framer_parse_output(v3, 0LL, 0x7D0uLL, 0LL, parse);
}

void sub_182341270( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void __nw_protocol_copy_qpod_definition_block_invoke_3_44(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  if (gLogDatapath)
  {
    __nwlog_obj();
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      int v5 = 136446466;
      uint64_t v6 = "nw_protocol_copy_qpod_definition_block_invoke_3";
      __int16 v7 = 2048;
      id v8 = v3;
      _os_log_impl(&dword_181A5C000, v4, OS_LOG_TYPE_DEBUG, "%{public}s cleaning up framer %p", (uint8_t *)&v5, 0x16u);
    }
  }

  if (qpod_conn_free_override)
  {
    qpod_conn_free_override(*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
  }

  else if (MEMORY[0x189617040])
  {
    qpod_conn_free();
  }
}

void sub_182341398(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_copy_qpod_definition_block_invoke_46(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  id v2 = a2;
  if (gLogDatapath)
  {
    __nwlog_obj();
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      int v5 = 136446466;
      uint64_t v6 = "nw_protocol_copy_qpod_definition_block_invoke";
      __int16 v7 = 2048;
      id v8 = v2;
      _os_log_impl(&dword_181A5C000, v4, OS_LOG_TYPE_DEBUG, "%{public}s stopping framer %p", (uint8_t *)&v5, 0x16u);
    }
  }

  return 1LL;
}

uint64_t __nw_protocol_copy_qpod_definition_block_invoke_41(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  v9[0] = MEMORY[0x1895F87A8];
  v9[1] = 3221225472LL;
  v9[2] = __nw_protocol_copy_qpod_definition_block_invoke_2_42;
  v9[3] = &unk_189BC1180;
  id v10 = v5;
  __int16 v7 = v9;
  if (qpod_conn_encode_datagram_override)
  {
    qpod_conn_encode_datagram_override(v6, a2, (unsigned __int16)a3, v7);
  }

  else if (MEMORY[0x189617038])
  {
    qpod_conn_encode_datagram();
  }

  return a3;
}

void sub_182341554( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void __nw_protocol_copy_qpod_definition_block_invoke_2_42( uint64_t a1, const uint8_t *a2, size_t output_length)
{
}

uint64_t __nw_protocol_copy_qpod_definition_block_invoke_36(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = 0LL;
  __int16 v19 = &v18;
  uint64_t v20 = 0x2020000000LL;
  char v21 = 0;
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  v14[2] = __nw_protocol_copy_qpod_definition_block_invoke_2_37;
  v14[3] = &unk_189BC1108;
  uint64_t v8 = MEMORY[0x1895F87A8];
  v14[0] = MEMORY[0x1895F87A8];
  v14[1] = 3221225472LL;
  uint64_t v17 = a2;
  id v15 = v6;
  uint64_t v16 = &v18;
  uint64_t v9 = v14;
  if (qpod_conn_decode_datagram_override)
  {
    qpod_conn_decode_datagram_override(v7, a2, (unsigned __int16)a3, v9);
  }

  else if (MEMORY[0x189617030])
  {
    qpod_conn_decode_datagram();
  }

  if (!*((_BYTE *)v19 + 24))
  {
    id v10 = *(void **)(a1 + 32);
    v12[0] = v8;
    v12[1] = 3221225472LL;
    v12[2] = __nw_protocol_copy_qpod_definition_block_invoke_3;
    v12[3] = &unk_189BC93A0;
    uint64_t v13 = v10;
    nw_framer_async(v13, v12);
  }

  _Block_object_dispose(&v18, 8);
  return a3;
}

void sub_1823416C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_protocol_copy_qpod_definition_block_invoke_2_37(uint64_t a1, const uint8_t *a2, unsigned int a3)
{
  id v3 = *(nw_framer **)(a1 + 32);
  if (a3 == 0xFFFF && *(void *)(a1 + 48) == (void)a2)
  {
    nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 54);
  }

  else
  {
    size_t v7 = a3;
    uint64_t v8 = nw_framer_message_create(*(nw_framer_t *)(a1 + 32));
    nw_framer_deliver_input(v3, a2, v7, v8, 1);

    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }

void sub_182341798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_protocol_copy_qpod_definition_block_invoke_3(uint64_t a1)
{
}

uint64_t nw_qpod_setup_secrets(void *a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  id v7 = a1;
  id v8 = a2;
  if (!nw_protocol_options_is_qpod(v7))
  {
    __nwlog_obj();
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v34 = "nw_qpod_setup_secrets";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v32 = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (v32 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = v32;
      if (os_log_type_enabled(v15, v32))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v34 = "nw_qpod_setup_secrets";
        _os_log_impl( &dword_181A5C000,  v15,  v16,  "%{public}s called with null nw_protocol_options_is_qpod(options)",  buf,  0xCu);
      }
    }

    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = v32;
      BOOL v21 = os_log_type_enabled(v15, v32);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v34 = "nw_qpod_setup_secrets";
          __int16 v35 = 2082;
          __int16 v36 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v15,  v20,  "%{public}s called with null nw_protocol_options_is_qpod(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v14) {
          goto LABEL_42;
        }
        goto LABEL_41;
      }

      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v34 = "nw_qpod_setup_secrets";
        _os_log_impl( &dword_181A5C000,  v15,  v20,  "%{public}s called with null nw_protocol_options_is_qpod(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = v32;
      if (os_log_type_enabled(v15, v32))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v34 = "nw_qpod_setup_secrets";
        _os_log_impl( &dword_181A5C000,  v15,  v25,  "%{public}s called with null nw_protocol_options_is_qpod(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_39;
  }

  id v9 = v8;
  if (!nw_protocol_metadata_is_quic_connection(v9))
  {
    BOOL is_quic_stream = nw_protocol_metadata_is_quic_stream(v9);

    if (is_quic_stream) {
      goto LABEL_5;
    }
    __nwlog_obj();
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v34 = "nw_qpod_setup_secrets";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v32 = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (__nwlog_fault(v14, &v32, &v31))
    {
      if (v32 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = v32;
        if (os_log_type_enabled(v15, v32))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v34 = "nw_qpod_setup_secrets";
          _os_log_impl( &dword_181A5C000,  v15,  v18,  "%{public}s called with null nw_protocol_metadata_is_quic(quic_metadata)",  buf,  0xCu);
        }

void sub_182341CEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_qpod_setup_secrets_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (gLogDatapath)
  {
    __nwlog_obj();
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      BOOL v21 = "nw_qpod_setup_secrets_block_invoke";
      __int16 v22 = 2048;
      uint64_t v23 = a2;
      _os_log_impl(&dword_181A5C000, v17, OS_LOG_TYPE_DEBUG, "%{public}s setting up secrets for options %p", buf, 0x16u);
    }
  }

  if (*(void *)(a1 + 40))
  {
    unsigned int v4 = snprintf(__str, 0x10uLL, "%s client", *(const char **)(a1 + 40));
    int v5 = snprintf(label, 0x10uLL, "%s server", *(const char **)(a1 + 40));
    if ((v5 | v4) >= 0x10)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v7 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 136446466;
        BOOL v21 = "nw_qpod_setup_secrets_block_invoke";
        __int16 v22 = 2080;
        uint64_t v23 = v14;
        _os_log_impl(&dword_181A5C000, v7, OS_LOG_TYPE_ERROR, "%{public}s identifier %s is too long", buf, 0x16u);
      }
    }

    else
    {
      unsigned int v6 = v5;
      id v7 = nw_quic_copy_sec_protocol_metadata(*(nw_protocol_metadata_t *)(a1 + 32));
      dispatch_data_t secret = sec_protocol_metadata_create_secret(v7, v4, __str, 0x20uLL);
      id v9 = *(void **)a2;
      *(void *)a2 = secret;

      if (*(void *)a2)
      {
        dispatch_data_t v10 = sec_protocol_metadata_create_secret(v7, v6, label, 0x20uLL);
        uint64_t v11 = *(void **)(a2 + 8);
        *(void *)(a2 + _Block_object_dispose(va, 8) = v10;

        if (*(void *)(a2 + 8))
        {
          *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 48);
          uint64_t v12 = 1LL;
LABEL_19:

          return v12;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v15 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v21 = "nw_qpod_setup_secrets_block_invoke";
          _os_log_impl(&dword_181A5C000, v15, OS_LOG_TYPE_ERROR, "%{public}s failed to create server secret", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v15 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v21 = "nw_qpod_setup_secrets_block_invoke";
          _os_log_impl(&dword_181A5C000, v15, OS_LOG_TYPE_ERROR, "%{public}s failed to create client secret", buf, 0xCu);
        }
      }
    }

    uint64_t v12 = 0LL;
    goto LABEL_19;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v13 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446210;
    BOOL v21 = "nw_qpod_setup_secrets_block_invoke";
    _os_log_impl(&dword_181A5C000, v13, OS_LOG_TYPE_ERROR, "%{public}s missing identifier", buf, 0xCu);
  }

  return 0LL;
}

void sub_1823420AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_qpod_set_scid(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_options_is_qpod(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_qpod_set_scid_block_invoke;
    v13[3] = &unk_189BC6260;
    id v14 = v4;
    nw_protocol_options_access_handle(v3, v13);

    goto LABEL_3;
  }

  __nwlog_obj();
  int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_qpod_set_scid";
  unsigned int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_qpod_set_scid";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_qpod(options)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_qpod_set_scid";
          __int16 v19 = 2082;
          os_log_type_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_qpod(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_qpod_set_scid";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_qpod(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_qpod_set_scid";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_options_is_qpod(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823423A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_qpod_set_scid_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

void nw_qpod_set_dcid(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_options_is_qpod(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_qpod_set_dcid_block_invoke;
    v13[3] = &unk_189BC6260;
    id v14 = v4;
    nw_protocol_options_access_handle(v3, v13);

    goto LABEL_3;
  }

  __nwlog_obj();
  int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_qpod_set_dcid";
  unsigned int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_qpod_set_dcid";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_qpod(options)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_qpod_set_dcid";
          __int16 v19 = 2082;
          os_log_type_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_qpod(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_qpod_set_dcid";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_qpod(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_qpod_set_dcid";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_options_is_qpod(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823426D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_qpod_set_dcid_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

id nw_protocol_copy_qpod_definition()
{
  if (nw_protocol_copy_qpod_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_qpod_definition::onceToken, &__block_literal_global_28_56380);
  }
  return (id)nw_protocol_copy_qpod_definition::definition;
}

nw_protocol_options_t nw_qpod_create_options()
{
  if (nw_protocol_copy_qpod_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_qpod_definition::onceToken, &__block_literal_global_28_56380);
  }
  return nw_framer_create_options((nw_protocol_definition_t)nw_protocol_copy_qpod_definition::definition);
}

id *nw_parameters_create_qpod(void *a1)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    nw_parameters_t v2 = nw_parameters_create();
    nw_parameters_t v3 = v2;
    if (v2)
    {
      nw_parameters_set_data_mode(v2, 1u);
      if (nw_protocol_copy_qpod_definition::onceToken != -1) {
        dispatch_once(&nw_protocol_copy_qpod_definition::onceToken, &__block_literal_global_28_56380);
      }
      nw_protocol_options_t options = nw_framer_create_options((nw_protocol_definition_t)nw_protocol_copy_qpod_definition::definition);
      if (options)
      {
        int v5 = v3;
        id v6 = v5[19];

        nw_protocol_stack_append_application_protocol(v6, options);
        id v7 = v5;

        goto LABEL_49;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      __int16 v36 = "nw_parameters_create_qpod";
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v33 = 0;
      if (__nwlog_fault(v13, &type, &v33))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v14 = (os_log_s *)(id)gLogObj;
          os_log_type_t v15 = type;
          if (os_log_type_enabled(v14, type))
          {
            *(_DWORD *)buf = 136446210;
            __int16 v36 = "nw_parameters_create_qpod";
            _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s nw_framer_create_options failed", buf, 0xCu);
          }
        }

        else if (v33)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v14 = (os_log_s *)(id)gLogObj;
          os_log_type_t v20 = type;
          BOOL v21 = os_log_type_enabled(v14, type);
          if (backtrace_string)
          {
            if (v21)
            {
              *(_DWORD *)buf = 136446466;
              __int16 v36 = "nw_parameters_create_qpod";
              __int16 v37 = 2082;
              __int16 v38 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v14,  v20,  "%{public}s nw_framer_create_options failed, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(backtrace_string);
            if (!v13) {
              goto LABEL_48;
            }
            goto LABEL_47;
          }

          if (v21)
          {
            *(_DWORD *)buf = 136446210;
            __int16 v36 = "nw_parameters_create_qpod";
            _os_log_impl( &dword_181A5C000,  v14,  v20,  "%{public}s nw_framer_create_options failed, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v14 = (os_log_s *)(id)gLogObj;
          os_log_type_t v23 = type;
          if (os_log_type_enabled(v14, type))
          {
            *(_DWORD *)buf = 136446210;
            __int16 v36 = "nw_parameters_create_qpod";
            _os_log_impl( &dword_181A5C000,  v14,  v23,  "%{public}s nw_framer_create_options failed, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

      if (!v13)
      {
LABEL_48:
        id v7 = 0LL;
LABEL_49:

        goto LABEL_50;
      }

void sub_182342FBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_browser_get_description(void *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    int v3 = BYTE2(v1[49]._os_unfair_lock_opaque);
    os_unfair_lock_lock(v1 + 2);
    if (v3)
    {
      id v4 = v2 + 44;
      if (!*(void *)&v2[44]._os_unfair_lock_opaque)
      {
        int v5 = nw_parameters_copy_description_internal(*(NWConcrete_nw_parameters **)&v2[10]._os_unfair_lock_opaque, 0);
        uint32_t os_unfair_lock_opaque = v2[48]._os_unfair_lock_opaque;
        description = nw_browse_descriptor_get_description(*(void **)&v2[8]._os_unfair_lock_opaque, 1);
        asprintf((char **)&v2[44], "[B%u %s, %s]", os_unfair_lock_opaque, description, v5);
        goto LABEL_7;
      }
    }

    else
    {
      id v4 = v2 + 46;
      if (!*(void *)&v2[46]._os_unfair_lock_opaque)
      {
        int v5 = nw_parameters_copy_description_internal(*(NWConcrete_nw_parameters **)&v2[10]._os_unfair_lock_opaque, 0);
        uint32_t v8 = v2[48]._os_unfair_lock_opaque;
        id v9 = nw_browse_descriptor_get_description(*(void **)&v2[8]._os_unfair_lock_opaque, 0);
        asprintf((char **)&v2[46], "[B%u %s, %s]", v8, v9, v5);
LABEL_7:
        if (v5) {
          free(v5);
        }
      }
    }

    os_unfair_lock_unlock(v2 + 2);
    uint64_t v10 = *(void *)&v4->_os_unfair_lock_opaque;
    goto LABEL_10;
  }

  __nwlog_obj();
  id v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v23 = "nw_browser_get_description";
  uint64_t v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v13, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_browser_get_description";
        _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null browser", buf, 0xCu);
      }
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v23 = "nw_browser_get_description";
          __int16 v24 = 2082;
          os_log_type_t v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v17,  "%{public}s called with null browser, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_browser_get_description";
        _os_log_impl(&dword_181A5C000, v14, v17, "%{public}s called with null browser, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_browser_get_description";
        _os_log_impl( &dword_181A5C000,  v14,  v19,  "%{public}s called with null browser, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182343BA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_browser_get_next_log_id(void)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  do
  {
    unsigned int v0 = __ldaxr(nw_browser_get_next_log_id(void)::s_last_top_level_id);
    uint64_t result = v0 + 1;
  }

  while (__stlxr(result, nw_browser_get_next_log_id(void)::s_last_top_level_id));
  if (v0 == -2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    nw_parameters_t v2 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136446466;
      id v4 = "nw_browser_get_next_log_id";
      __int16 v5 = 1024;
      int v6 = -1;
      _os_log_impl( &dword_181A5C000,  v2,  OS_LOG_TYPE_ERROR,  "%{public}s reached %u browser logging ids, wrapping",  (uint8_t *)&v3,  0x12u);
    }

    return nw_browser_get_next_log_id();
  }

  return result;
}

nw_browser_t nw_browser_create(nw_browse_descriptor_t descriptor, nw_parameters_t parameters)
{
  uint64_t v63 = *MEMORY[0x1895F89C0];
  id v4 = descriptor;
  __int16 v5 = parameters;
  int v6 = v5;
  if (v4)
  {
    uint64_t v53 = v5;
    uint64_t v7 = objc_alloc(&OBJC_CLASS___NWConcrete_nw_browser);
    uint32_t v8 = v4;
    id v9 = v6;
    if (!v7)
    {
LABEL_21:
      os_log_type_t v17 = 0LL;
LABEL_51:

      int v6 = v53;
      goto LABEL_52;
    }

    *((_DWORD *)v7 + 4_Block_object_dispose(va, 8) = nw_browser_get_next_log_id();
    if (v9)
    {
      *((_BYTE *)v7 + 19_Block_object_dispose(va, 8) = nw_parameters_get_sensitive_redacted(v9);
    }

    else
    {
      if (nw_context_copy_implicit_context::onceToken != -1) {
        dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
      }
      id v10 = (id)nw_context_copy_implicit_context::implicit_context;
      os_log_type_t v11 = v10;
      if (v10 && (int v12 = *((_DWORD *)v10 + 31), (v12 - 2) >= 2))
      {
        BOOL v13 = v12 != 1;
      }

      else
      {
        if (nwlog_get_sensitive_redacted::onceToken != -1) {
          dispatch_once(&nwlog_get_sensitive_redacted::onceToken, &__block_literal_global_59);
        }
        BOOL v13 = nwlog_get_sensitive_redacted::sensitiveRedacted != 0;
      }

      *((_BYTE *)v7 + 19_Block_object_dispose(va, 8) = v13;
    }

    int v14 = nw_browse_descriptor_get_type(v8);
    if (v14 == 1)
    {
      int v18 = 3;
    }

    else
    {
      if (!v14)
      {
        if (!nw_parameters_get_logging_disabled(*((void *)v7 + 5)))
        {
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
          }
          os_log_type_t v15 = (os_log_s *)(id)gbrowserLogObj;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            int v16 = *((_DWORD *)v7 + 48);
            *(_DWORD *)buf = 136446466;
            uint64_t v58 = "-[NWConcrete_nw_browser initWithDescriptor:parameters:]";
            __int16 v59 = 1024;
            *(_DWORD *)unsigned __int16 v60 = v16;
            _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_ERROR,  "%{public}s [B%u] failed due to invalid descriptor type",  buf,  0x12u);
          }
        }

        goto LABEL_21;
      }

      if (nw_browse_descriptor_is_custom_type(v8))
      {
        os_log_type_t v19 = nw_browse_descriptor_copy_custom_browse_block(v8);

        if (v19) {
          int v18 = 1;
        }
        else {
          int v18 = 2;
        }
      }

      else
      {
        int v18 = 2;
      }
    }

    v56.os_log_type_t receiver = v7;
    v56.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_browser;
    char v20 = -[nw_browse_descriptor init](&v56, sel_init);
    uint64_t v7 = (NWConcrete_nw_browser *)v20;
    if (v20)
    {
      objc_storeStrong(v20 + 4, descriptor);
      *((_DWORD *)v7 + 6) = v18;
      *((_DWORD *)v7 + 1_Block_object_dispose(va, 8) = 0;
      if (v9) {
        nw_parameters_t v21 = v9;
      }
      else {
        nw_parameters_t v21 = nw_parameters_create();
      }
      os_log_type_t v22 = (void *)*((void *)v7 + 5);
      *((void *)v7 + 5) = v21;

      id v23 = nw_parameters_copy_context(*((void **)v7 + 5));
      if (!nw_context_is_inline(v23))
      {
        *((_BYTE *)v7 + 196) = nw_browse_descriptor_get_include_txt_record(*((nw_browse_descriptor_t *)v7 + 4));
        *((_BYTE *)v7 + 197) = nw_browse_descriptor_get_sign_results(*((void **)v7 + 4));
        os_log_type_t v28 = nw_parameters_copy_description_internal(*((NWConcrete_nw_parameters **)v7 + 5), 1);
        if (!nw_parameters_get_logging_disabled(*((void *)v7 + 5)))
        {
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
          }
          uint64_t v29 = (os_log_s *)(id)gbrowserLogObj;
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            int v30 = *((_DWORD *)v7 + 48);
            uint64_t v31 = *((void *)v7 + 4);
            *(_DWORD *)buf = 136446978;
            uint64_t v58 = "-[NWConcrete_nw_browser initWithDescriptor:parameters:]";
            __int16 v59 = 1024;
            *(_DWORD *)unsigned __int16 v60 = v30;
            *(_WORD *)&v60[4] = 2112;
            *(void *)&v60[6] = v31;
            __int16 v61 = 2080;
            os_log_type_t v62 = v28;
            _os_log_impl( &dword_181A5C000,  v29,  OS_LOG_TYPE_DEFAULT,  "%{public}s [B%u] create with %@, parameters: %s",  buf,  0x26u);
          }
        }

        if (v28) {
          free(v28);
        }
        os_log_type_t v17 = v7;
        goto LABEL_50;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v24 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      uint64_t v58 = "-[NWConcrete_nw_browser initWithDescriptor:parameters:]";
      os_log_type_t v25 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v54 = 0;
      if ((__nwlog_fault(v25, &type, &v54) & 1) != 0)
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v26 = (os_log_s *)(id)gLogObj;
          os_log_type_t v27 = type;
          if (os_log_type_enabled(v26, type))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v58 = "-[NWConcrete_nw_browser initWithDescriptor:parameters:]";
            _os_log_impl(&dword_181A5C000, v26, v27, "%{public}s Cannot use nw_browser on inline contexts", buf, 0xCu);
          }
        }

        else if (v54)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v26 = (os_log_s *)(id)gLogObj;
          os_log_type_t v34 = type;
          BOOL v35 = os_log_type_enabled(v26, type);
          if (backtrace_string)
          {
            if (v35)
            {
              *(_DWORD *)buf = 136446466;
              uint64_t v58 = "-[NWConcrete_nw_browser initWithDescriptor:parameters:]";
              __int16 v59 = 2082;
              *(void *)unsigned __int16 v60 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v26,  v34,  "%{public}s Cannot use nw_browser on inline contexts, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(backtrace_string);
            if (!v25) {
              goto LABEL_40;
            }
            goto LABEL_39;
          }

          if (v35)
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v58 = "-[NWConcrete_nw_browser initWithDescriptor:parameters:]";
            _os_log_impl( &dword_181A5C000,  v26,  v34,  "%{public}s Cannot use nw_browser on inline contexts, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v26 = (os_log_s *)(id)gLogObj;
          os_log_type_t v36 = type;
          if (os_log_type_enabled(v26, type))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v58 = "-[NWConcrete_nw_browser initWithDescriptor:parameters:]";
            _os_log_impl( &dword_181A5C000,  v26,  v36,  "%{public}s Cannot use nw_browser on inline contexts, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

      if (!v25)
      {
LABEL_40:
        os_log_type_t v17 = 0LL;
LABEL_50:

        goto LABEL_51;
      }

void sub_182344734( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void nw_browser_set_browse_results_changed_handler( nw_browser_t browser, nw_browser_browse_results_changed_handler_t handler)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  nw_browser_t v3 = browser;
  nw_browser_browse_results_changed_handler_t v4 = handler;
  if (v3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 2);
    __int16 v5 = _Block_copy(v4);
    int v6 = (void *)*((void *)v3 + 7);
    *((void *)v3 + 7) = v5;

    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 2);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v18 = "nw_browser_set_browse_results_changed_handler";
  uint32_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        int v18 = "nw_browser_set_browse_results_changed_handler";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null browser", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          int v18 = "nw_browser_set_browse_results_changed_handler";
          __int16 v19 = 2082;
          char v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null browser, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        int v18 = "nw_browser_set_browse_results_changed_handler";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null browser, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        int v18 = "nw_browser_set_browse_results_changed_handler";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null browser, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_browser_set_state_changed_handler( nw_browser_t browser, nw_browser_state_changed_handler_t state_changed_handler)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  nw_browser_t v3 = browser;
  nw_browser_state_changed_handler_t v4 = state_changed_handler;
  if (v3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 2);
    __int16 v5 = _Block_copy(v4);
    int v6 = (void *)*((void *)v3 + 8);
    *((void *)v3 + _Block_object_dispose(va, 8) = v5;

    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 2);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v18 = "nw_browser_set_state_changed_handler";
  uint32_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        int v18 = "nw_browser_set_state_changed_handler";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null browser", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          int v18 = "nw_browser_set_state_changed_handler";
          __int16 v19 = 2082;
          char v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null browser, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        int v18 = "nw_browser_set_state_changed_handler";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null browser, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        int v18 = "nw_browser_set_state_changed_handler";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null browser, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_browser_set_queue(nw_browser_t browser, dispatch_queue_t queue)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  nw_browser_t v3 = browser;
  nw_browser_state_changed_handler_t v4 = queue;
  __int16 v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    int v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v23 = "nw_browser_set_queue";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint32_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        id v23 = "nw_browser_set_queue";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null browser", buf, 0xCu);
      }
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint32_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          id v23 = "nw_browser_set_queue";
          __int16 v24 = 2082;
          os_log_type_t v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null browser, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7) {
          goto LABEL_4;
        }
LABEL_39:
        free(v7);
        goto LABEL_4;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        id v23 = "nw_browser_set_queue";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null browser, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint32_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        id v23 = "nw_browser_set_queue";
        _os_log_impl( &dword_181A5C000,  v8,  v18,  "%{public}s called with null browser, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void nw_browser_start(nw_browser_t browser)
{
  uint64_t v149 = *MEMORY[0x1895F89C0];
  nw_parameters_t v2 = browser;
  nw_browser_t v3 = v2;
  if (!v2)
  {
    __nwlog_obj();
    v121 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_browser_start";
    v122 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    v145[0] = 0;
    if (__nwlog_fault(v122, type, v145))
    {
      if (type[0] == 17)
      {
        __nwlog_obj();
        v123 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v124 = type[0];
        if (os_log_type_enabled(v123, (os_log_type_t)type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_start";
          _os_log_impl(&dword_181A5C000, v123, v124, "%{public}s called with null browser", buf, 0xCu);
        }
      }

      else if (v145[0])
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v123 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v127 = type[0];
        BOOL v128 = os_log_type_enabled(v123, (os_log_type_t)type[0]);
        if (backtrace_string)
        {
          if (v128)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_browser_start";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v123,  v127,  "%{public}s called with null browser, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_227;
        }

        if (v128)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_start";
          _os_log_impl(&dword_181A5C000, v123, v127, "%{public}s called with null browser, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v123 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v129 = type[0];
        if (os_log_type_enabled(v123, (os_log_type_t)type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_start";
          _os_log_impl( &dword_181A5C000,  v123,  v129,  "%{public}s called with null browser, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182346D88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL38nw_browser_start_custom_browser_lockedP21NWConcrete_nw_browser_block_invoke(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = v1[4];
  v4[0] = MEMORY[0x1895F87A8];
  v4[1] = 3221225472LL;
  v4[2] = ___ZL38nw_browser_start_custom_browser_lockedP21NWConcrete_nw_browser_block_invoke_2;
  v4[3] = &unk_189BC12D8;
  __int16 v5 = v1;
  (*(void (**)(uint64_t, uint64_t, void *))(v2 + 16))(v2, v3, v4);
}

void sub_182346EC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

BOOL nw_browser_fail_on_dns_error_locked(NWConcrete_nw_browser *a1, int a2, const char *a3)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  __int16 v5 = a1;
  int v6 = v5;
  if (a2)
  {
    if (!nw_parameters_get_logging_disabled(*((void *)v5 + 5)))
    {
      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
      }
      uint32_t v7 = (os_log_s *)(id)gbrowserLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        int v8 = *((_DWORD *)v6 + 48);
        int v12 = 136447234;
        os_log_type_t v13 = "nw_browser_fail_on_dns_error_locked";
        __int16 v14 = 1024;
        int v15 = v8;
        __int16 v16 = 2082;
        BOOL v17 = a3;
        __int16 v18 = 2082;
        string_for_dns_service_error = nwlog_get_string_for_dns_service_error(a2);
        __int16 v20 = 1024;
        int v21 = a2;
        _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_ERROR,  "%{public}s [B%u] %{public}s failed: %{public}s(%d)",  (uint8_t *)&v12,  0x2Cu);
      }
    }

    dns_error = nw_error_create_dns_error(a2);
    if (a2 == -65570)
    {
      signed int v10 = 4;
    }

    else
    {
      nw_browser_cancel_dns_browser_locked(v6);
      signed int v10 = 2;
    }

    nw_browser_set_state_locked(v6, v10, dns_error);
  }

  return a2 != 0;
}

void sub_182347058(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_browser_derive_endpoint_flags(NWConcrete_nw_browser *a1)
{
  id v1 = a1;
  int traffic_class = nw_parameters_get_traffic_class(*((void **)v1 + 5));
  BOOL prohibit_cellular = nw_parameters_get_prohibit_cellular(*((void **)v1 + 5));
  BOOL prohibit_expensive = nw_parameters_get_prohibit_expensive(*((nw_parameters_t *)v1 + 5));
  BOOL prohibit_constrained = nw_parameters_get_prohibit_constrained(*((nw_parameters_t *)v1 + 5));
  int use_awdl = nw_parameters_get_use_awdl(*((void **)v1 + 5));
  int use_p2p = nw_parameters_get_use_p2p(*((void **)v1 + 5));
  if (traffic_class == 100) {
    unsigned int v8 = 1074282496;
  }
  else {
    unsigned int v8 = 1073758208;
  }
  if (prohibit_cellular) {
    v8 |= 0x8000000u;
  }
  if (prohibit_expensive) {
    v8 |= 0x20000000u;
  }
  if (prohibit_constrained) {
    v8 |= 0x2000u;
  }
  if (use_awdl) {
    v8 |= 0x100000u;
  }
  if (use_p2p) {
    uint64_t v9 = v8 | 0x20000;
  }
  else {
    uint64_t v9 = v8;
  }

  return v9;
}

void sub_182347144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_browser_dns_service_browse_callback( _DNSServiceRef_t *a1, int a2, unsigned int a3, int a4, const char *a5, const char *a6, const char *a7, void *a8)
{
  uint64_t v106 = *MEMORY[0x1895F89C0];
  os_log_type_t v13 = a8;
  __int16 v14 = v13;
  if (v13)
  {
    lock = v13 + 2;
    os_unfair_lock_lock(v13 + 2);
    uint32_t os_unfair_lock_opaque = v14[18]._os_unfair_lock_opaque;
    if (os_unfair_lock_opaque != 1 && os_unfair_lock_opaque != 4)
    {
      if (!nw_parameters_get_logging_disabled(*(void *)&v14[10]._os_unfair_lock_opaque))
      {
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
        }
        int v21 = (os_log_s *)(id)gbrowserLogObj;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          uint32_t v22 = v14[48]._os_unfair_lock_opaque;
          *(_DWORD *)buf = 136446466;
          uint64_t v93 = "nw_browser_dns_service_browse_callback";
          __int16 v94 = 1024;
          *(_DWORD *)uint64_t v95 = v22;
          _os_log_impl( &dword_181A5C000,  v21,  OS_LOG_TYPE_ERROR,  "%{public}s [B%u] not in ready or waiting state",  buf,  0x12u);
        }
      }

      goto LABEL_48;
    }

    if (!BYTE2(v14[49]._os_unfair_lock_opaque))
    {
      if (!nw_parameters_get_logging_disabled(*(void *)&v14[10]._os_unfair_lock_opaque))
      {
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
        }
        id v23 = (os_log_s *)(id)gbrowserLogObj;
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          uint32_t v24 = v14[48]._os_unfair_lock_opaque;
          *(_DWORD *)buf = 136448002;
          uint64_t v93 = "nw_browser_dns_service_browse_callback";
          __int16 v94 = 1024;
          *(_DWORD *)uint64_t v95 = v24;
          *(_WORD *)&v95[4] = 2082;
          *(void *)&v95[6] = a5;
          *(_WORD *)&v95[14] = 2082;
          *(void *)&v95[16] = a6;
          __int16 v96 = 2082;
          uint32_t v97 = a7;
          __int16 v98 = 1024;
          int v99 = a2;
          __int16 v100 = 1024;
          unsigned int v101 = a3;
          __int16 v102 = 1024;
          int v103 = a4;
          _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_DEBUG,  "%{public}s [B%u] dns: (%{public}s %{public}s %{public}s), flags: %d, if_index: %d, error: %d",  buf,  0x42u);
        }
      }

void sub_182348104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_browser_set_state_locked(void *a1, signed int a2, void *a3)
{
  uint64_t v62 = *MEMORY[0x1895F89C0];
  __int16 v5 = a1;
  id v6 = a3;
  unsigned int v7 = v5[18];
  if (v7 == a2) {
    goto LABEL_53;
  }
  if ((a2 - 1) <= 2 && v7 == 4
    || (a2 == 4 ? (BOOL v8 = v7 >= 2) : (BOOL v8 = 1), v8 ? (v9 = 0) : (v9 = 1), (int)v7 < a2 || (v9 & 1) != 0))
  {
    if (!nw_parameters_get_logging_disabled(*((void *)v5 + 5)))
    {
      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
      }
      __int16 v14 = (os_log_s *)(id)gbrowserLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v15 = v5[48];
        uint64_t v16 = v5[18];
        else {
          size_t v17 = off_189BC1500[v16];
        }
        __int16 v18 = off_189BC1500[a2];
        *(_DWORD *)buf = 136446978;
        pid_t v53 = "nw_browser_set_state_locked";
        __int16 v54 = 1024;
        unsigned int v55 = v15;
        __int16 v56 = 2082;
        os_log_type_t v57 = v17;
        __int16 v58 = 2082;
        os_log_type_t v59 = v18;
        _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_DEFAULT,  "%{public}s [B%u] state changed: %{public}s -> %{public}s",  buf,  0x26u);
      }
    }

    v5[18] = a2;
    objc_storeStrong((id *)v5 + 10, a3);
    size_t v19 = (const void *)*((void *)v5 + 8);
    if (v19)
    {
      __int16 v20 = _Block_copy(v19);
      int v21 = (dispatch_queue_s *)*((void *)v5 + 2);
      block[0] = MEMORY[0x1895F87A8];
      block[1] = 3221225472LL;
      block[2] = ___ZL27nw_browser_set_state_lockedP21NWConcrete_nw_browser18nw_browser_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke;
      block[3] = &unk_189BC16F8;
      id v48 = v20;
      signed int v49 = a2;
      id v46 = v6;
      uint32_t v47 = v5;
      id v22 = v20;
      dispatch_async(v21, block);
    }

    goto LABEL_53;
  }

  if (nw_parameters_get_logging_disabled(*((void *)v5 + 5))) {
    goto LABEL_53;
  }
  if (__nwlog_browser_log::onceToken[0] != -1) {
    dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
  }
  id v10 = (id)gbrowserLogObj;
  unsigned int v11 = v5[48];
  uint64_t v12 = v5[18];
  else {
    os_log_type_t v13 = off_189BC1500[v12];
  }
  id v23 = off_189BC1500[a2];
  *(_DWORD *)buf = 136446978;
  pid_t v53 = "nw_browser_set_state_locked";
  __int16 v54 = 1024;
  unsigned int v55 = v11;
  __int16 v56 = 2082;
  os_log_type_t v57 = v13;
  __int16 v58 = 2082;
  os_log_type_t v59 = v23;
  uint32_t v24 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v50 = 0;
  if (__nwlog_fault(v24, &type, &v50))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
      }
      uint32_t v25 = (os_log_s *)(id)gbrowserLogObj;
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        unsigned int v27 = v5[48];
        uint64_t v28 = v5[18];
        else {
          uint64_t v29 = off_189BC1500[v28];
        }
        *(_DWORD *)buf = 136446978;
        pid_t v53 = "nw_browser_set_state_locked";
        __int16 v54 = 1024;
        unsigned int v55 = v27;
        __int16 v56 = 2082;
        os_log_type_t v57 = v29;
        __int16 v58 = 2082;
        os_log_type_t v59 = v23;
        _os_log_impl( &dword_181A5C000,  v25,  v26,  "%{public}s [B%u] state changed: invalid transition %{public}s -> %{public}s",  buf,  0x26u);
      }
    }

    else if (v50)
    {
      backtrace_string = __nw_create_backtrace_string();
      if (backtrace_string)
      {
        uint32_t v31 = (char *)backtrace_string;
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
        }
        DNSServiceErrorType v32 = (os_log_s *)(id)gbrowserLogObj;
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v32, type))
        {
          unsigned int v34 = v5[48];
          uint64_t v35 = v5[18];
          else {
            os_log_type_t v36 = off_189BC1500[v35];
          }
          *(_DWORD *)buf = 136447234;
          pid_t v53 = "nw_browser_set_state_locked";
          __int16 v54 = 1024;
          unsigned int v55 = v34;
          __int16 v56 = 2082;
          os_log_type_t v57 = v36;
          __int16 v58 = 2082;
          os_log_type_t v59 = v23;
          __int16 v60 = 2082;
          uint32_t v61 = v31;
          _os_log_impl( &dword_181A5C000,  v32,  v33,  "%{public}s [B%u] state changed: invalid transition %{public}s -> %{public}s, dumping backtrace:%{public}s",  buf,  0x30u);
        }

        free(v31);
        if (v24) {
          goto LABEL_52;
        }
        goto LABEL_53;
      }

      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
      }
      uint32_t v25 = (os_log_s *)(id)gbrowserLogObj;
      os_log_type_t v41 = type;
      if (os_log_type_enabled(v25, type))
      {
        unsigned int v42 = v5[48];
        uint64_t v43 = v5[18];
        else {
          os_log_type_t v44 = off_189BC1500[v43];
        }
        *(_DWORD *)buf = 136446978;
        pid_t v53 = "nw_browser_set_state_locked";
        __int16 v54 = 1024;
        unsigned int v55 = v42;
        __int16 v56 = 2082;
        os_log_type_t v57 = v44;
        __int16 v58 = 2082;
        os_log_type_t v59 = v23;
        _os_log_impl( &dword_181A5C000,  v25,  v41,  "%{public}s [B%u] state changed: invalid transition %{public}s -> %{public}s, no backtrace",  buf,  0x26u);
      }
    }

    else
    {
      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
      }
      uint32_t v25 = (os_log_s *)(id)gbrowserLogObj;
      os_log_type_t v37 = type;
      if (os_log_type_enabled(v25, type))
      {
        unsigned int v38 = v5[48];
        uint64_t v39 = v5[18];
        else {
          id v40 = off_189BC1500[v39];
        }
        *(_DWORD *)buf = 136446978;
        pid_t v53 = "nw_browser_set_state_locked";
        __int16 v54 = 1024;
        unsigned int v55 = v38;
        __int16 v56 = 2082;
        os_log_type_t v57 = v40;
        __int16 v58 = 2082;
        os_log_type_t v59 = v23;
        _os_log_impl( &dword_181A5C000,  v25,  v37,  "%{public}s [B%u] state changed: invalid transition %{public}s -> %{public}s, backtrace limit exceeded",  buf,  0x26u);
      }
    }
  }

  if (v24) {
LABEL_52:
  }
    free(v24);
LABEL_53:
}

uint64_t ___ZL27nw_browser_set_state_lockedP21NWConcrete_nw_browser18nw_browser_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke( uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  *(unsigned int *)(a1 + 56),  *(void *)(a1 + 32));
}

void ___ZL36nw_browser_start_path_browser_lockedP21NWConcrete_nw_browser_block_invoke(uint64_t a1, void *a2)
{
  id v5 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8LL));
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v4 + 72) == 1)
  {
    objc_storeStrong((id *)(v4 + 96), a2);
    nw_browser_update_path_browser_locked(*(NWConcrete_nw_browser **)(a1 + 32));
    uint64_t v4 = *(void *)(a1 + 32);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 8));
}

void sub_182348860( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void ___ZL36nw_browser_start_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 72) == 1)
  {
    nw_browser_update_path_browser_locked((NWConcrete_nw_browser *)v2);
    uint64_t v2 = *(void *)(a1 + 32);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 8));
}

void nw_browser_update_path_browser_locked(NWConcrete_nw_browser *a1)
{
  uint64_t v93 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = nw_dictionary_create();
    uint64_t v3 = nw_dictionary_create();
    uint64_t v4 = *((void *)v1 + 13);
    uint64_t v5 = MEMORY[0x1895F87A8];
    if (v4)
    {
      v65[0] = MEMORY[0x1895F87A8];
      v65[1] = 3221225472LL;
      v65[2] = ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke;
      v65[3] = &unk_189BC1300;
      os_log_type_t v66 = v1;
      uint32_t v67 = v3;
      nw_dictionary_apply(v4, (uint64_t)v65);
    }

    v63[0] = v5;
    v63[1] = 3221225472LL;
    v63[2] = ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_2;
    v63[3] = &unk_189BC5058;
    id v6 = v1;
    os_log_type_t v64 = v6;
    __int16 v54 = v3;
    nw_dictionary_apply((uint64_t)v3, (uint64_t)v63);
    unsigned int v7 = v6[12];
    v60[0] = v5;
    v60[1] = 3221225472LL;
    v60[2] = ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_105;
    v60[3] = &unk_189BC1328;
    BOOL v8 = v6;
    uint32_t v61 = v8;
    char v9 = v2;
    id v62 = v9;
    nw_path_enumerate_browse_options(v7, v60);
    objc_storeStrong((id *)v1 + 13, v2);
    id v10 = nw_path_copy_discovered_endpoints(v6[12]);
    if (nw_browse_descriptor_get_type(v8[4]) == 2)
    {
      unsigned int v11 = v8;
      object = (unsigned __int8 *)v10;
      uint64_t v12 = _Block_copy(v11[7]);
      if (v12)
      {
        BOOL v13 = nw_array_create();
        v79[0] = v5;
        v79[1] = 3221225472LL;
        v79[2] = ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke;
        v79[3] = &unk_189BC85B0;
        __int16 v14 = (id)v13;
        id v80 = v14;
        nw_array_apply(object, (uint64_t)v79);
        if (!nw_parameters_get_logging_disabled((uint64_t)v11[5]))
        {
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
          }
          unsigned int v15 = (os_log_s *)(id)gbrowserLogObj;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
          {
            if (v14) {
              uint64_t v16 = (uint64_t)(v14[3] - v14[2]) >> 3;
            }
            else {
              uint64_t v16 = 0LL;
            }
            int v20 = *((_DWORD *)v11 + 48);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_browser_app_svc_update_browse_result_locked";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = v20;
            *(_WORD *)&buf[18] = 2048;
            *(void *)&buf[20] = v16;
            *(_WORD *)&buf[28] = 2112;
            *(void *)&buf[30] = v14;
            _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_DEBUG,  "%{public}s [B%u] discovered %zu endpoints: %@",  buf,  0x26u);
          }
        }

        BOOL v21 = nw_array_create();
        BOOL v22 = nw_parallel_array_create();
        id v23 = (unsigned __int8 *)v11[17];
        *(void *)buf = v5;
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&buf[16] = ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke_112;
        *(void *)&_BYTE buf[24] = &unk_189BC13F0;
        id v52 = v10;
        uint32_t v24 = v1;
        uint32_t v25 = v9;
        os_log_type_t v26 = v12;
        unsigned int v27 = v14;
        *(void *)&buf[32] = v27;
        id v28 = (id)v21;
        id v90 = v28;
        id v29 = (id)v22;
        id v91 = v29;
        int v30 = v11;
        uint64_t v92 = v30;
        nw_array_apply(v23, (uint64_t)buf);
        *(void *)os_log_type_t type = v5;
        uint64_t v73 = 3221225472LL;
        uint32_t v74 = ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke_115;
        uint32_t v75 = &unk_189BC6DB0;
        id v31 = v29;
        id v76 = v31;
        DNSServiceErrorType v32 = v28;
        id v77 = v32;
        os_log_type_t v33 = v30;
        char v78 = v33;
        char v50 = v27;
        unsigned int v34 = (unsigned __int8 *)v27;
        uint64_t v12 = v26;
        char v9 = v25;
        id v1 = v24;
        id v10 = v52;
        nw_array_apply(v34, (uint64_t)type);
        uint64_t v35 = (dispatch_queue_s *)v33[2];
        block[0] = v5;
        block[1] = 3221225472LL;
        block[2] = ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke_116;
        block[3] = &unk_189BC50A8;
        id v51 = v31;
        id v69 = v51;
        os_log_type_t v36 = v33;
        uint32_t v70 = v36;
        id v71 = v12;
        dispatch_async(v35, block);
        if (!nw_parameters_get_logging_disabled((uint64_t)v11[5]))
        {
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
          }
          os_log_type_t v37 = (os_log_s *)(id)gbrowserLogObj;
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
          {
            if (v32) {
              uint64_t v38 = (uint64_t)(v32[3] - v32[2]) >> 3;
            }
            else {
              uint64_t v38 = 0LL;
            }
            int v39 = *((_DWORD *)v36 + 48);
            *(_DWORD *)uint32_t v81 = 136446978;
            __int16 v82 = "nw_browser_app_svc_update_browse_result_locked";
            __int16 v83 = 1024;
            int v84 = v39;
            __int16 v85 = 2048;
            uint64_t v86 = v38;
            __int16 v87 = 2112;
            __int16 v88 = v32;
            _os_log_impl( &dword_181A5C000,  v37,  OS_LOG_TYPE_DEBUG,  "%{public}s [B%u] new_results %zu endpoints: %@",  v81,  0x26u);
          }
        }

        id v40 = v11[17];
        v11[17] = v32;
        os_log_type_t v41 = v32;
      }
    }

    else
    {
      v58[0] = v5;
      v58[1] = 3221225472LL;
      v58[2] = ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_2_107;
      v58[3] = &unk_189BC85B0;
      size_t v17 = v8;
      os_log_type_t v59 = v17;
      nw_array_apply((unsigned __int8 *)v10, (uint64_t)v58);
      __int16 v18 = (unsigned __int8 *)v17[17];
      v55[0] = v5;
      v55[1] = 3221225472LL;
      v55[2] = ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_110;
      v55[3] = &unk_189BC5030;
      size_t v19 = v17;
      __int16 v56 = v19;
      id v57 = v10;
      nw_array_apply(v18, (uint64_t)v55);
      nw_browser_notify_browse_result_changes_locked(v19);
    }

    goto LABEL_28;
  }

  __nwlog_obj();
  unsigned int v42 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_browser_update_path_browser_locked";
  uint64_t v43 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(block[0]) = 0;
  if (__nwlog_fault(v43, type, block))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v45 = type[0];
      if (os_log_type_enabled(v44, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_browser_update_path_browser_locked";
        _os_log_impl(&dword_181A5C000, v44, v45, "%{public}s called with null browser", buf, 0xCu);
      }
    }

    else if (LOBYTE(block[0]))
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v47 = type[0];
      BOOL v48 = os_log_type_enabled(v44, type[0]);
      if (backtrace_string)
      {
        if (v48)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_browser_update_path_browser_locked";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v44,  v47,  "%{public}s called with null browser, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_45;
      }

      if (v48)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_browser_update_path_browser_locked";
        _os_log_impl(&dword_181A5C000, v44, v47, "%{public}s called with null browser, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v49 = type[0];
      if (os_log_type_enabled(v44, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_browser_update_path_browser_locked";
        _os_log_impl( &dword_181A5C000,  v44,  v49,  "%{public}s called with null browser, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823490E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, void *a33, void *a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, void *a39)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke( uint64_t a1, const char *a2, void *a3)
{
  uint64_t v5 = a3;
  id v6 = nw_path_copy_flow_for_registration(*(NWConcrete_nw_path **)(*(void *)(a1 + 32) + 96LL), v5);
  if (v6)
  {
    char v7 = v6[186];

    if ((v7 & 4) != 0) {
      nw_dictionary_set_value(*(void *)(a1 + 40), a2, v5);
    }
  }

  return 1LL;
}

uint64_t ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_2( uint64_t a1, const char *a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  id v5 = a3;
  if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 40LL)))
  {
    if (__nwlog_browser_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
    }
    id v6 = (os_log_s *)(id)gbrowserLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *(_DWORD *)(*(void *)(a1 + 32) + 192LL);
      int v9 = 136446722;
      id v10 = "nw_browser_update_path_browser_locked_block_invoke_2";
      __int16 v11 = 1024;
      int v12 = v7;
      __int16 v13 = 2114;
      id v14 = v5;
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEBUG,  "%{public}s [B%u] Removing defunct flow registration %{public}@",  (uint8_t *)&v9,  0x1Cu);
    }
  }

  nw_path_flow_registration_close(v5);
  nw_dictionary_set_value(*(void *)(*(void *)(a1 + 32) + 104LL), a2, 0LL);

  return 1LL;
}

void sub_1823492EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_105( uint64_t a1, unsigned __int8 *uu)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  uuid_unparse(uu, out);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 104);
  if (!v5) {
    goto LABEL_4;
  }
  flow_inner = nw_dictionary_copy_value(v5, (uint64_t)out);
  if (!flow_inner)
  {
    uint64_t v4 = *(void *)(a1 + 32);
LABEL_4:
    flow_inner = nw_path_evaluator_create_flow_inner(*(void **)(v4 + 88), 0, 0, 1, 0, uu, 0LL, 0, 0LL);
  }

  int v7 = flow_inner;
  nw_dictionary_set_value(*(void *)(a1 + 40), out, flow_inner);
}

uint64_t ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = *(unsigned __int8 **)(a1 + 32);
  v8[0] = MEMORY[0x1895F87A8];
  v8[1] = 3221225472LL;
  v8[2] = ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke_2;
  v8[3] = &unk_189BC85B0;
  id v6 = v4;
  id v9 = v6;

  return 1LL;
}

uint64_t ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke_112( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  id v4 = a3;
  id endpoint = nw_browse_result_get_endpoint(v4);
  __int128 v38 = 0uLL;
  nw_endpoint_get_service_identifier(endpoint, &v38);
  id v6 = (void *)[objc_alloc(MEMORY[0x189607AB8]) initWithUUIDBytes:&v38];
  uint64_t v26 = 0LL;
  unsigned int v27 = &v26;
  uint64_t v28 = 0x2020000000LL;
  uint64_t v29 = 0LL;
  int v7 = *(unsigned __int8 **)(a1 + 32);
  v18[0] = MEMORY[0x1895F87A8];
  v18[1] = 3221225472LL;
  v18[2] = ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke_2_114;
  v18[3] = &unk_189BC13C8;
  id v8 = v6;
  id v19 = v8;
  uint32_t v25 = &v26;
  id v20 = *(id *)(a1 + 40);
  id v9 = endpoint;
  id v21 = v9;
  id v22 = *(id *)(a1 + 48);
  id v10 = v4;
  id v23 = v10;
  id v24 = *(id *)(a1 + 56);
  if (nw_array_apply(v7, (uint64_t)v18))
  {
    nw_parallel_array_append(*(void *)(a1 + 48), v10, 0LL);
    if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 56) + 40LL)))
    {
      nw_browse_result_change_t changes = nw_browse_result_get_changes((nw_browse_result_t)v10, 0LL);
      BOOL v12 = nw_browse_result_get_change_description(changes);
      if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 56) + 40LL)))
      {
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
        }
        __int16 v13 = (os_log_s *)(id)gbrowserLogObj;
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          int v14 = *(_DWORD *)(*(void *)(a1 + 56) + 192LL);
          *(_DWORD *)buf = 136446978;
          id v31 = "nw_browser_app_svc_update_browse_result_locked_block_invoke";
          __int16 v32 = 1024;
          int v33 = v14;
          __int16 v34 = 2112;
          id v35 = v10;
          __int16 v36 = 2082;
          BOOL v37 = v12;
          _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_INFO,  "%{public}s [B%u] browse_result_removed: (%@), %{public}s",  buf,  0x26u);
        }
      }

      if (v12) {
        free((void *)v12);
      }
    }
  }

  else
  {
    if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 56) + 40LL)))
    {
      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
      }
      uint64_t v15 = (os_log_s *)(id)gbrowserLogObj;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        int v16 = *(_DWORD *)(*(void *)(a1 + 56) + 192LL);
        *(_DWORD *)buf = 136446722;
        id v31 = "nw_browser_app_svc_update_browse_result_locked_block_invoke";
        __int16 v32 = 1024;
        int v33 = v16;
        __int16 v34 = 2112;
        id v35 = v9;
        _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_DEBUG,  "%{public}s [B%u] browse_result_matched existing endpoint: %@",  buf,  0x1Cu);
      }
    }
  }

  _Block_object_dispose(&v26, 8);
  return 1LL;
}

void sub_1823497D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke_115( uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v4 = a3;
  uint64_t v5 = nw_browse_result_create(v4);
  nw_parallel_array_append(a1[4], 0LL, v5);
  nw_array_append(a1[5], v5);
  if (!nw_parameters_get_logging_disabled(*(void *)(a1[6] + 40)))
  {
    nw_browse_result_change_t changes = nw_browse_result_get_changes(0LL, (nw_browse_result_t)v5);
    BOOL v7 = nw_browse_result_get_change_description(changes);
    if (!nw_parameters_get_logging_disabled(*(void *)(a1[6] + 40)))
    {
      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
      }
      id v8 = (os_log_s *)(id)gbrowserLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        int v9 = *(_DWORD *)(a1[6] + 192);
        int v11 = 136446978;
        BOOL v12 = "nw_browser_app_svc_update_browse_result_locked_block_invoke";
        __int16 v13 = 1024;
        int v14 = v9;
        __int16 v15 = 2112;
        int v16 = v5;
        __int16 v17 = 2082;
        BOOL v18 = v7;
        _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_INFO,  "%{public}s [B%u] browse_result_added: (%@), %{public}s",  (uint8_t *)&v11,  0x26u);
      }
    }

    if (v7) {
      free((void *)v7);
    }
  }

  return 1LL;
}

void sub_1823499D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke_116( uint64_t a1)
{
  uint64_t count = nw_parallel_array_get_count(*(void **)(a1 + 32));
  v4[0] = MEMORY[0x1895F87A8];
  v4[1] = 3221225472LL;
  v4[2] = ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke_2_117;
  v4[3] = &unk_189BC1440;
  uint64_t v3 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  uint64_t v7 = count;
  nw_parallel_array_apply(v3, (uint64_t)v4);
}

uint64_t ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_2_107( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  id v4 = a3;
  id v5 = nw_endpoint_copy_interface(v4);
  uint64_t v20 = 0LL;
  id v21 = &v20;
  uint64_t v22 = 0x2020000000LL;
  char v23 = 1;
  id v6 = *(unsigned __int8 **)(*(void *)(a1 + 32) + 136LL);
  v16[0] = MEMORY[0x1895F87A8];
  v16[1] = 3221225472LL;
  v16[2] = ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_3;
  v16[3] = &unk_189BC1378;
  id v7 = v4;
  id v17 = v7;
  id v8 = v5;
  id v18 = v8;
  uint64_t v19 = &v20;
  nw_array_apply(v6, (uint64_t)v16);
  if (*((_BYTE *)v21 + 24))
  {
    int v9 = nw_endpoint_copy(v7);
    nw_endpoint_set_interface(v9, 0LL);
    bzero(__s, 0x3F1uLL);
    uint64_t domain_for_policy = nw_endpoint_get_domain_for_policy(v9);
    if (domain_for_policy)
    {
      uint64_t v11 = 0LL;
      while (1)
      {
        int v12 = *(unsigned __int8 *)(domain_for_policy + v11);
        __s[v11] = v12;
        if (!v12) {
          break;
        }
        if (++v11 == 1008)
        {
          __s[1008] = 0;
          break;
        }
      }

      for (size_t i = 0LL; i < strlen(__s); ++i)
        __s[i] = __tolower(__s[i]);
    }

    else
    {
      nw_browser_copy_key_for_application_service_endpoint(v9, __s);
    }

    if ((nw_browser_add_result_locked(*(void **)(a1 + 32), __s, v9, v8, 1) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v14 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        uint32_t v25 = "nw_browser_update_path_browser_locked_block_invoke_2";
        __int16 v26 = 2080;
        unsigned int v27 = __s;
        __int16 v28 = 2112;
        uint64_t v29 = v9;
        __int16 v30 = 2112;
        id v31 = v8;
        _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_ERROR,  "%{public}s Failed to add result for %s/%@ (%@)",  buf,  0x2Au);
      }
    }
  }

  _Block_object_dispose(&v20, 8);
  return 1LL;
}

void sub_182349CF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_110( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (nw_browse_result_get_discovered_from_path(v4))
  {
    id endpoint = nw_browse_result_get_endpoint(v4);
    if (nw_browse_result_get_interfaces_count((nw_browse_result_t)v4))
    {
      enumerator[0] = MEMORY[0x1895F87A8];
      enumerator[1] = 3221225472LL;
      enumerator[2] = ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_2_111;
      enumerator[3] = &unk_189BC13A0;
      id v8 = *(id *)(a1 + 32);
      id v9 = *(id *)(a1 + 40);
      id v10 = endpoint;
      nw_browse_result_enumerate_interfaces((nw_browse_result_t)v4, enumerator);
    }

    else
    {
      nw_browser_check_and_remove_endpoints_locked(*(void **)(a1 + 32), *(void **)(a1 + 40), endpoint, 0LL);
    }
  }

  return 1LL;
}

void sub_182349E2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_browser_notify_browse_result_changes_locked(NWConcrete_nw_browser *a1)
{
  uint64_t v64 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!*((void *)v1 + 2))
  {
    __nwlog_obj();
    uint32_t v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_browser_notify_browse_result_changes_locked";
    __int16 v26 = (char *)_os_log_send_and_compose_impl();

    v61[0] = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v26, v61, type))
    {
      if (v61[0] == 17)
      {
        __nwlog_obj();
        unsigned int v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v28 = v61[0];
        if (os_log_type_enabled(v27, (os_log_type_t)v61[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_notify_browse_result_changes_locked";
          _os_log_impl(&dword_181A5C000, v27, v28, "%{public}s called with null browser->client_queue", buf, 0xCu);
        }
      }

      else if (type[0])
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        unsigned int v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v30 = v61[0];
        BOOL v31 = os_log_type_enabled(v27, (os_log_type_t)v61[0]);
        if (backtrace_string)
        {
          if (v31)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_browser_notify_browse_result_changes_locked";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v27,  v30,  "%{public}s called with null browser->client_queue, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_45;
        }

        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_notify_browse_result_changes_locked";
          _os_log_impl( &dword_181A5C000,  v27,  v30,  "%{public}s called with null browser->client_queue, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        unsigned int v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v36 = v61[0];
        if (os_log_type_enabled(v27, (os_log_type_t)v61[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_notify_browse_result_changes_locked";
          _os_log_impl( &dword_181A5C000,  v27,  v36,  "%{public}s called with null browser->client_queue, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_18234A5F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *a28, void *a29)
{
  _Block_object_dispose((const void *)(v31 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__56735(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__56736(uint64_t a1)
{
}

uint64_t ___ZL46nw_browser_notify_browse_result_changes_lockedP21NWConcrete_nw_browser_block_invoke( uint64_t a1, const char *a2, void *a3)
{
  uint64_t v100 = *MEMORY[0x1895F89C0];
  id v5 = a3;
  uint64_t value = xpc_uint64_get_value(v5);
  uint64_t v7 = value;
  if (value)
  {
    if ((value & 4) == 0)
    {
      xpc_dictionary_set_uint64(*(xpc_object_t *)(a1 + 32), a2, 1uLL);
      if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 40) + 40LL)))
      {
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
        }
        id v8 = (os_log_s *)(id)gbrowserLogObj;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          int v9 = *(_DWORD *)(*(void *)(a1 + 40) + 192LL);
          *(_DWORD *)buf = 136446978;
          uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
          __int16 v94 = 1024;
          *(_DWORD *)uint64_t v95 = v9;
          *(_WORD *)&v95[4] = 2080;
          *(void *)&v95[6] = a2;
          __int16 v96 = 1024;
          LODWORD(v97) = 1;
          _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_DEBUG,  "%{public}s [B%u] changes_map: %s = identical(%d)",  buf,  0x22u);
        }
      }

      if (v7 == 1)
      {
        uint64_t v10 = 1LL;
        goto LABEL_82;
      }
    }

    uint64_t v11 = (nw_browse_result *)nw_browser_copy_old_result_locked(*(NWConcrete_nw_browser **)(a1 + 40), a2);
    BOOL v12 = (nw_browse_result *)nw_browser_copy_new_result_locked(*(NWConcrete_nw_browser **)(a1 + 40), a2);
    id v13 = v12;
    uint64_t v14 = *(void *)(a1 + 40);
    if (*(_BYTE *)(v14 + 196)) {
      BOOL v15 = (v7 & 2) == 0;
    }
    else {
      BOOL v15 = 1;
    }
    if (!v15 && (v7 & 0x20) == 0)
    {
      xpc_dictionary_set_uint64(*(xpc_object_t *)(a1 + 32), a2, v7);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v18 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
        __int16 v94 = 2080;
        *(void *)uint64_t v95 = a2;
        _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_DEBUG,  "%{public}s changes_map: %s was added but delaying notify until TXT record is found",  buf,  0x16u);
      }

      goto LABEL_80;
    }

    if ((~(_BYTE)v7 & 6) == 0)
    {
      __nwlog_obj();
      pid_t v53 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
      __int16 v54 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v90 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v56 = type;
        if (os_log_type_enabled(v55, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
          _os_log_impl( &dword_181A5C000,  v55,  v56,  "%{public}s Cannot have both add and remove at the same time",  buf,  0xCu);
        }

        goto LABEL_197;
      }

      if (!v90)
      {
        __nwlog_obj();
        id v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v79 = type;
        if (os_log_type_enabled(v55, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
          _os_log_impl( &dword_181A5C000,  v55,  v79,  "%{public}s Cannot have both add and remove at the same time, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_197;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v63 = type;
      BOOL v64 = os_log_type_enabled(v55, type);
      if (!backtrace_string)
      {
        if (v64)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
          _os_log_impl( &dword_181A5C000,  v55,  v63,  "%{public}s Cannot have both add and remove at the same time, no backtrace",  buf,  0xCu);
        }

        goto LABEL_197;
      }

      if (v64)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
        __int16 v94 = 2082;
        *(void *)uint64_t v95 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v55,  v63,  "%{public}s Cannot have both add and remove at the same time, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_162;
    }

    if ((v7 & 2) != 0)
    {
      if (!v11 && v12)
      {
        uint64_t v17 = *(void *)(v14 + 136);
        goto LABEL_51;
      }

      __nwlog_obj();
      BOOL v60 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
      __int16 v54 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v90 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v61 = type;
        if (os_log_type_enabled(v55, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
          _os_log_impl(&dword_181A5C000, v55, v61, "%{public}s Unexpected result pair for add", buf, 0xCu);
        }

        goto LABEL_197;
      }

      if (!v90)
      {
        __nwlog_obj();
        id v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v86 = type;
        if (os_log_type_enabled(v55, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
          _os_log_impl( &dword_181A5C000,  v55,  v86,  "%{public}s Unexpected result pair for add, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_197;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v75 = type;
      BOOL v76 = os_log_type_enabled(v55, type);
      if (!backtrace_string)
      {
        if (v76)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
          _os_log_impl(&dword_181A5C000, v55, v75, "%{public}s Unexpected result pair for add, no backtrace", buf, 0xCu);
        }

        goto LABEL_197;
      }

      if (v76)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
        __int16 v94 = 2082;
        *(void *)uint64_t v95 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v55,  v75,  "%{public}s Unexpected result pair for add, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_162;
    }

    if ((v7 & 4) == 0)
    {
      if (!v11 || !v12)
      {
        __nwlog_obj();
        id v69 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
        __int16 v54 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v90 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          id v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v70 = type;
          if (os_log_type_enabled(v55, type))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
            _os_log_impl(&dword_181A5C000, v55, v70, "%{public}s Unexpected result pair for change", buf, 0xCu);
          }

          goto LABEL_197;
        }

        if (!v90)
        {
          __nwlog_obj();
          id v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v88 = type;
          if (os_log_type_enabled(v55, type))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
            _os_log_impl( &dword_181A5C000,  v55,  v88,  "%{public}s Unexpected result pair for change, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_197;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v81 = type;
        BOOL v82 = os_log_type_enabled(v55, type);
        if (!backtrace_string)
        {
          if (v82)
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
            _os_log_impl( &dword_181A5C000,  v55,  v81,  "%{public}s Unexpected result pair for change, no backtrace",  buf,  0xCu);
          }

          goto LABEL_197;
        }

        if (v82)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
          __int16 v94 = 2082;
          *(void *)uint64_t v95 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v55,  v81,  "%{public}s Unexpected result pair for change, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        goto LABEL_162;
      }

      uint64_t v19 = *(void *)(v14 + 136);
      if (v19)
      {
LABEL_30:
        uint64_t v20 = *(void *)(v19 + 24) - *(void *)(v19 + 16);
        uint64_t v21 = v20 >> 3;
        if (v20)
        {
          BOOL v22 = nw_array_create();
          std::vector<nw_object_wrapper_t>::reserve( v22 + 16,  ((uint64_t)(*(void *)(v19 + 24) - *(void *)(v19 + 16)) >> 3) - 1);
          id v24 = *(void ***)(v19 + 16);
          char v23 = *(void ***)(v19 + 24);
          while (v24 != v23)
          {
            if (*v24 != v11) {
              nw_array_append(v22, *v24);
            }
            ++v24;
          }

          goto LABEL_40;
        }

void sub_18234BACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL31nw_browser_create_ordered_arrayP21NWConcrete_nw_browserPU31objcproto20OS_nw_parallel_array8NSObject_block_invoke( uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = v6;
  id v9 = v7;
  if ((nw_browse_result_get_changes((nw_browse_result_t)v8, (nw_browse_result_t)v9) & 4) != 0) {
    nw_parallel_array_append(*(void *)(a1 + 32), v8, v9);
  }

  return 1LL;
}

void sub_18234BB74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL31nw_browser_create_ordered_arrayP21NWConcrete_nw_browserPU31objcproto20OS_nw_parallel_array8NSObject_block_invoke_2( uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = v6;
  id v9 = v7;
  if ((nw_browse_result_get_changes((nw_browse_result_t)v8, (nw_browse_result_t)v9) & 4) == 0) {
    nw_parallel_array_append(*(void *)(a1 + 32), v8, v9);
  }

  return 1LL;
}

void sub_18234BC0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL46nw_browser_notify_browse_result_changes_lockedP21NWConcrete_nw_browser_block_invoke_121( uint64_t a1)
{
  v6[0] = MEMORY[0x1895F87A8];
  v6[1] = 3221225472LL;
  v6[2] = ___ZL46nw_browser_notify_browse_result_changes_lockedP21NWConcrete_nw_browser_block_invoke_2;
  v6[3] = &unk_189BC1440;
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  id v5 = *(void **)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  id v7 = v3;
  uint64_t v9 = v4;
  id v8 = v5;
  nw_parallel_array_apply(v2, (uint64_t)v6);
}

uint64_t ___ZL46nw_browser_notify_browse_result_changes_lockedP21NWConcrete_nw_browser_block_invoke_2( void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = (nw_browse_result *)v7;
  uint64_t v10 = (NWConcrete_nw_browse_result *)v8;
  uint64_t v11 = v10;
  BOOL v12 = v9;
  if (nw_browse_descriptor_get_type(*(void **)(a1[4] + 32LL)) == 2)
  {
    if (v9 && (mutable_copy = nw_browse_result_create_mutable_copy(v9), v9, mutable_copy))
    {
      *((_BYTE *)mutable_copy + 52) |= 1u;
      BOOL v12 = (nw_browse_result *)mutable_copy;
      if (!v10)
      {
LABEL_5:
        uint64_t v11 = 0LL;
        uint64_t v14 = a1[6];
        goto LABEL_10;
      }
    }

    else
    {
      BOOL v12 = 0LL;
      if (!v10) {
        goto LABEL_5;
      }
    }

    uint64_t v11 = nw_browse_result_create_mutable_copy(v10);
  }

  uint64_t v14 = a1[6];
  if (v11) {
    *((_BYTE *)v11 + 52) |= 1u;
  }
LABEL_10:
  BOOL v15 = v14 - 1 == a2;
  if (!nw_parameters_get_logging_disabled(*(void *)(a1[4] + 40LL)))
  {
    nw_browse_result_change_t changes = nw_browse_result_get_changes(v12, (nw_browse_result_t)v11);
    BOOL v17 = nw_browse_result_get_change_description(changes);
    if (!nw_parameters_get_logging_disabled(*(void *)(a1[4] + 40LL)))
    {
      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
      }
      int v18 = (os_log_s *)(id)gbrowserLogObj;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        int v19 = *(_DWORD *)(a1[4] + 192LL);
        *(_DWORD *)buf = 136447234;
        uint64_t v31 = "nw_browser_notify_browse_result_changes_locked_block_invoke_2";
        __int16 v32 = 1024;
        int v33 = v19;
        __int16 v34 = 2112;
        os_log_type_t v35 = v12;
        __int16 v36 = 2112;
        BOOL v37 = v11;
        __int16 v38 = 2082;
        BOOL v39 = v17;
        _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_INFO,  "%{public}s [B%u] browse_result_changed: (%@ -> %@), %{public}s",  buf,  0x30u);
      }
    }

    if (v17) {
      free((void *)v17);
    }
  }

  uint64_t v20 = (void *)a1[5];
  uint64_t v21 = *(void **)(a1[4] + 40LL);
  v25[0] = MEMORY[0x1895F87A8];
  v25[1] = 3221225472LL;
  v25[2] = ___ZL46nw_browser_notify_browse_result_changes_lockedP21NWConcrete_nw_browser_block_invoke_122;
  v25[3] = &unk_189BC55B0;
  id v28 = v20;
  BOOL v22 = v12;
  __int16 v26 = v22;
  char v23 = v11;
  unsigned int v27 = v23;
  BOOL v29 = v15;
  nw_utilities_execute_block_as_persona_from_parameters(v21, v25);

  return 1LL;
}

void sub_18234BF54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL46nw_browser_notify_browse_result_changes_lockedP21NWConcrete_nw_browser_block_invoke_122( uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(unsigned __int8 *)(a1 + 56));
}

id nw_browser_copy_old_result_locked(NWConcrete_nw_browser *a1, const char *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    if (a2)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      id v28 = __Block_byref_object_copy__56735;
      BOOL v29 = __Block_byref_object_dispose__56736;
      id v30 = 0LL;
      id v5 = (unsigned __int8 *)*((void *)v3 + 17);
      v21[0] = MEMORY[0x1895F87A8];
      v21[1] = 3221225472LL;
      v21[2] = ___ZL33nw_browser_copy_old_result_lockedP21NWConcrete_nw_browserPKc_block_invoke;
      v21[3] = &unk_189BC7338;
      char v23 = buf;
      id v24 = a2;
      BOOL v22 = v3;
      nw_array_apply(v5, (uint64_t)v21);
      id v6 = *(id *)(*(void *)&buf[8] + 40LL);

      _Block_object_dispose(buf, 8);
      goto LABEL_4;
    }

    __nwlog_obj();
    BOOL v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_browser_copy_old_result_locked";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v9, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_copy_old_result_locked";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null key_name", buf, 0xCu);
        }

id nw_browser_copy_new_result_locked(NWConcrete_nw_browser *a1, const char *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    if (a2)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      id v28 = __Block_byref_object_copy__56735;
      BOOL v29 = __Block_byref_object_dispose__56736;
      id v30 = 0LL;
      id v5 = (unsigned __int8 *)*((void *)v3 + 18);
      v21[0] = MEMORY[0x1895F87A8];
      v21[1] = 3221225472LL;
      v21[2] = ___ZL33nw_browser_copy_new_result_lockedP21NWConcrete_nw_browserPKc_block_invoke;
      v21[3] = &unk_189BC7338;
      char v23 = buf;
      id v24 = a2;
      BOOL v22 = v3;
      nw_array_apply(v5, (uint64_t)v21);
      id v6 = *(id *)(*(void *)&buf[8] + 40LL);

      _Block_object_dispose(buf, 8);
      goto LABEL_4;
    }

    __nwlog_obj();
    BOOL v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_browser_copy_new_result_locked";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v9, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_copy_new_result_locked";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null key_name", buf, 0xCu);
        }

uint64_t ___ZL33nw_browser_copy_new_result_lockedP21NWConcrete_nw_browserPKc_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  id v5 = a3;
  id endpoint = nw_browse_result_get_endpoint(v5);
  id v7 = endpoint;
  if (endpoint)
  {
    int v8 = *(_DWORD *)(*(void *)(a1 + 32) + 24LL);
    if (v8 == 2)
    {
      bzero(v12, 0x3F1uLL);
      if (nw_browser_copy_key_for_application_service_endpoint(v7, v12)
        && !strcasecmp(v12, *(const char **)(a1 + 48)))
      {
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
        goto LABEL_12;
      }
    }

    else if (v8 == 3)
    {
      bonjour_fullname = (const char *)nw_endpoint_get_bonjour_fullname(endpoint);
      if (bonjour_fullname)
      {
        if (!strcasecmp(bonjour_fullname, *(const char **)(a1 + 48)))
        {
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
LABEL_12:
          uint64_t v10 = 0LL;
          goto LABEL_10;
        }
      }
    }
  }

  uint64_t v10 = 1LL;
LABEL_10:

  return v10;
}

void sub_18234CB54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_browser_copy_key_for_application_service_endpoint(void *a1, char *a2)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    int v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v25 = "nw_browser_copy_key_for_application_service_endpoint";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        char v25 = "nw_browser_copy_key_for_application_service_endpoint";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null endpoint", buf, 0xCu);
      }

      goto LABEL_36;
    }

    if (!v22)
    {
      __nwlog_obj();
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        char v25 = "nw_browser_copy_key_for_application_service_endpoint";
        _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_36;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v15 = type;
    BOOL v16 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        char v25 = "nw_browser_copy_key_for_application_service_endpoint";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }

      goto LABEL_36;
    }

    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      char v25 = "nw_browser_copy_key_for_application_service_endpoint";
      __int16 v26 = 2082;
      unsigned int v27 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_24;
  }

  if (!a2)
  {
    __nwlog_obj();
    BOOL v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v25 = "nw_browser_copy_key_for_application_service_endpoint";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        char v25 = "nw_browser_copy_key_for_application_service_endpoint";
        _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null key_buffer", buf, 0xCu);
      }

void sub_18234D04C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL33nw_browser_copy_old_result_lockedP21NWConcrete_nw_browserPKc_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  id v5 = a3;
  id endpoint = nw_browse_result_get_endpoint(v5);
  uint64_t v7 = endpoint;
  if (endpoint)
  {
    int v8 = *(_DWORD *)(*(void *)(a1 + 32) + 24LL);
    if (v8 == 2)
    {
      bzero(v12, 0x3F1uLL);
      if (nw_browser_copy_key_for_application_service_endpoint(v7, v12)
        && !strcasecmp(v12, *(const char **)(a1 + 48)))
      {
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
        goto LABEL_12;
      }
    }

    else if (v8 == 3)
    {
      bonjour_fullname = (const char *)nw_endpoint_get_bonjour_fullname(endpoint);
      if (bonjour_fullname)
      {
        if (!strcasecmp(bonjour_fullname, *(const char **)(a1 + 48)))
        {
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
LABEL_12:
          uint64_t v10 = 0LL;
          goto LABEL_10;
        }
      }
    }
  }

  uint64_t v10 = 1LL;
LABEL_10:

  return v10;
}

void sub_18234D184(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_browser_check_and_remove_endpoints_locked(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  id v7 = a1;
  int v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (!v7)
  {
    __nwlog_obj();
    os_log_type_t v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__s = 136446210;
    BOOL v42 = "nw_browser_check_and_remove_endpoints_locked";
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    char v36 = 0;
    if (__nwlog_fault(v21, buf, &v36))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        char v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v23 = buf[0];
        if (os_log_type_enabled(v22, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)__s = 136446210;
          BOOL v42 = "nw_browser_check_and_remove_endpoints_locked";
          _os_log_impl(&dword_181A5C000, v22, v23, "%{public}s called with null browser", (uint8_t *)__s, 0xCu);
        }

        goto LABEL_50;
      }

      if (!v36)
      {
        __nwlog_obj();
        char v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v31 = buf[0];
        if (os_log_type_enabled(v22, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)__s = 136446210;
          BOOL v42 = "nw_browser_check_and_remove_endpoints_locked";
          _os_log_impl( &dword_181A5C000,  v22,  v31,  "%{public}s called with null browser, backtrace limit exceeded",  (uint8_t *)__s,  0xCu);
        }

        goto LABEL_50;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = buf[0];
      BOOL v28 = os_log_type_enabled(v22, (os_log_type_t)buf[0]);
      if (!backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)__s = 136446210;
          BOOL v42 = "nw_browser_check_and_remove_endpoints_locked";
          _os_log_impl( &dword_181A5C000,  v22,  v27,  "%{public}s called with null browser, no backtrace",  (uint8_t *)__s,  0xCu);
        }

        goto LABEL_50;
      }

      if (v28)
      {
        *(_DWORD *)__s = 136446466;
        BOOL v42 = "nw_browser_check_and_remove_endpoints_locked";
        __int16 v43 = 2082;
        int v44 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v22,  v27,  "%{public}s called with null browser, dumping backtrace:%{public}s",  (uint8_t *)__s,  0x16u);
      }

void sub_18234D7EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_2_111( void **a1, void *a2)
{
  return nw_browser_check_and_remove_endpoints_locked(a1[4], a1[5], a1[6], a2);
}

BOOL ___ZL44nw_browser_check_and_remove_endpoints_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObjectPU25objcproto14OS_nw_endpointS1_PU26objcproto15OS_nw_interfaceS1__block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = nw_endpoint_copy_interface(v4);
  BOOL v7 = 1;
  if (nw_endpoint_is_equal(*(void **)(a1 + 32), v4, 0LL))
  {
  }

  return v7;
}

void sub_18234D8B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_browser_remove_result_locked(void *a1, const char *a2, void *a3)
{
  uint64_t v112 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a3;
  uint64_t uint64 = xpc_dictionary_get_uint64(*((xpc_object_t *)v5 + 20), a2);
  BOOL v8 = nw_browser_copy_result_to_modify_locked((NWConcrete_nw_browser *)v5, a2, uint64);
  BOOL v107 = v8;
  if (!uint64)
  {
    BOOL logging_disabled = nw_parameters_get_logging_disabled(*((void *)v5 + 5));
    if (!v8)
    {
      if (!logging_disabled)
      {
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
        }
        os_log_type_t v25 = (os_log_s *)(id)gbrowserLogObj;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          int v26 = *((_DWORD *)v5 + 48);
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_browser_remove_result_locked";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = v26;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = a2;
          _os_log_impl( &dword_181A5C000,  v25,  OS_LOG_TYPE_ERROR,  "%{public}s [B%u] Trying to remove %s with invalid changes",  buf,  0x1Cu);
        }

        goto LABEL_181;
      }

      goto LABEL_184;
    }

    if (logging_disabled) {
      goto LABEL_184;
    }
    if (__nwlog_browser_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
    }
    id v19 = (id)gbrowserLogObj;
    int v20 = *((_DWORD *)v5 + 48);
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_browser_remove_result_locked";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = v20;
    *(_WORD *)&buf[18] = 2080;
    *(void *)&buf[20] = a2;
    uint64_t v21 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v108 = 0;
    if (__nwlog_fault(v21, &type, &v108))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
        }
        char v22 = (os_log_s *)(id)gbrowserLogObj;
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          int v24 = *((_DWORD *)v5 + 48);
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_browser_remove_result_locked";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = v24;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = a2;
          _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s [B%u] Trying to remove %s with invalid changes",  buf,  0x1Cu);
        }
      }

      else if (v108)
      {
        backtrace_string = __nw_create_backtrace_string();
        if (backtrace_string)
        {
          char v36 = (char *)backtrace_string;
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
          }
          BOOL v37 = (os_log_s *)(id)gbrowserLogObj;
          os_log_type_t v38 = type;
          if (os_log_type_enabled(v37, type))
          {
            int v39 = *((_DWORD *)v5 + 48);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_browser_remove_result_locked";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = v39;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = a2;
            *(_WORD *)&buf[28] = 2082;
            *(void *)&buf[30] = v36;
            _os_log_impl( &dword_181A5C000,  v37,  v38,  "%{public}s [B%u] Trying to remove %s with invalid changes, dumping backtrace:%{public}s",  buf,  0x26u);
          }

          free(v36);
          if (!v21) {
            goto LABEL_181;
          }
          goto LABEL_76;
        }

        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
        }
        char v22 = (os_log_s *)(id)gbrowserLogObj;
        os_log_type_t v47 = type;
        if (os_log_type_enabled(v22, type))
        {
          int v48 = *((_DWORD *)v5 + 48);
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_browser_remove_result_locked";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = v48;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = a2;
          _os_log_impl( &dword_181A5C000,  v22,  v47,  "%{public}s [B%u] Trying to remove %s with invalid changes, no backtrace",  buf,  0x1Cu);
        }
      }

      else
      {
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
        }
        char v22 = (os_log_s *)(id)gbrowserLogObj;
        os_log_type_t v45 = type;
        if (os_log_type_enabled(v22, type))
        {
          int v46 = *((_DWORD *)v5 + 48);
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_browser_remove_result_locked";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = v46;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = a2;
          _os_log_impl( &dword_181A5C000,  v22,  v45,  "%{public}s [B%u] Trying to remove %s with invalid changes, backtrace limit exceeded",  buf,  0x1Cu);
        }
      }
    }

    if (!v21) {
      goto LABEL_181;
    }
LABEL_76:
    os_log_type_t v49 = (char *)v21;
LABEL_180:
    free(v49);
    goto LABEL_181;
  }

  if (v6 && *((_BYTE *)v5 + 196))
  {
    id v9 = v5;
    id v10 = v6;
    if (a2)
    {
      if (!nw_parameters_get_logging_disabled(*((void *)v9 + 5)))
      {
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
        }
        id v11 = (os_log_s *)(id)gbrowserLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          int v12 = *((_DWORD *)v9 + 48);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_browser_cancel_query_record_for_endpoint_locked";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = v12;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = a2;
          *(_WORD *)&buf[28] = 2112;
          *(void *)&buf[30] = v10;
          _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_DEFAULT,  "%{public}s [B%u] cancel query record for %s on %@",  buf,  0x26u);
        }
      }

      uint64_t browser_key_for = nw_create_browser_key_for (a2, v10);
      uint64_t pointer = xpc_dictionary_get_pointer();
      if (pointer)
      {
        xpc_dictionary_set_pointer();
        if (!nw_parameters_get_logging_disabled(*((void *)v9 + 5)))
        {
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
          }
          int v15 = (os_log_s *)(id)gbrowserLogObj;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
          {
            int v16 = *((_DWORD *)v9 + 48);
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_browser_cancel_query_record_for_endpoint_locked";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = v16;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = browser_key_for;
            _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_DEBUG,  "%{public}s [B%u] dns_ref_map: set %s to NULL",  buf,  0x1Cu);
          }
        }

        if (browser_key_for) {
          free((void *)browser_key_for);
        }
        id v17 = nw_parameters_copy_context(*((void **)v9 + 5));
        *(void *)buf = MEMORY[0x1895F87A8];
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&buf[16] = ___ZL50nw_browser_cancel_query_record_for_endpoint_lockedP21NWConcrete_nw_browserPKcPU26objcproto15OS_nw_interface8NSObject_block_invoke;
        *(void *)&_BYTE buf[24] = &unk_189BC66E8;
        uint64_t v111 = pointer;
        *(void *)&buf[32] = v9;
        nw_queue_context_async(v17, buf);

        goto LABEL_92;
      }

      if (!nw_parameters_get_logging_disabled(*((void *)v9 + 5)))
      {
        id v27 = v10;
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
        }
        id v28 = (id)gbrowserLogObj;
        int v29 = *((_DWORD *)v9 + 48);
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_browser_cancel_query_record_for_endpoint_locked";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v29;
        uint64_t v106 = (const char *)_os_log_send_and_compose_impl();

        id v10 = v27;
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v108 = 0;
        BOOL v30 = (char *)v106;
        if (type == OS_LOG_TYPE_FAULT)
        {
          id v31 = v10;
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
          }
          os_log_type_t v32 = (os_log_s *)(id)gbrowserLogObj;
          os_log_type_t v33 = type;
          if (os_log_type_enabled(v32, type))
          {
            int v34 = *((_DWORD *)v9 + 48);
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_browser_cancel_query_record_for_endpoint_locked";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = v34;
            _os_log_impl(&dword_181A5C000, v32, v33, "%{public}s [B%u] Could not find dns_ref for service", buf, 0x12u);
          }
        }

        else if (v108)
        {
          uint64_t v40 = __nw_create_backtrace_string();
          if (v40)
          {
            os_log_type_t v41 = (char *)v40;
            if (__nwlog_browser_log::onceToken[0] != -1) {
              dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
            }
            BOOL v42 = (os_log_s *)(id)gbrowserLogObj;
            os_log_type_t v43 = type;
            if (os_log_type_enabled(v42, type))
            {
              int v44 = *((_DWORD *)v9 + 48);
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_browser_cancel_query_record_for_endpoint_locked";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = v44;
              *(_WORD *)&buf[18] = 2082;
              *(void *)&buf[20] = v41;
              _os_log_impl( &dword_181A5C000,  v42,  v43,  "%{public}s [B%u] Could not find dns_ref for service, dumping backtrace:%{public}s",  buf,  0x1Cu);
            }

            free(v41);
            goto LABEL_87;
          }

          id v31 = v10;
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
          }
          os_log_type_t v32 = (os_log_s *)(id)gbrowserLogObj;
          os_log_type_t v52 = type;
          if (os_log_type_enabled(v32, type))
          {
            int v53 = *((_DWORD *)v9 + 48);
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_browser_cancel_query_record_for_endpoint_locked";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = v53;
            _os_log_impl( &dword_181A5C000,  v32,  v52,  "%{public}s [B%u] Could not find dns_ref for service, no backtrace",  buf,  0x12u);
          }
        }

        else
        {
          id v31 = v10;
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
          }
          os_log_type_t v32 = (os_log_s *)(id)gbrowserLogObj;
          os_log_type_t v50 = type;
          if (os_log_type_enabled(v32, type))
          {
            int v51 = *((_DWORD *)v9 + 48);
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_browser_cancel_query_record_for_endpoint_locked";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = v51;
            _os_log_impl( &dword_181A5C000,  v32,  v50,  "%{public}s [B%u] Could not find dns_ref for service, backtrace limit exceeded",  buf,  0x12u);
          }
        }

        id v10 = v31;
LABEL_87:
        BOOL v30 = (char *)v106;
LABEL_88:
        if (v30) {
          free(v30);
        }
      }
    }

    else
    {
      __nwlog_obj();
      id v97 = v10;
      __int16 v98 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_browser_cancel_query_record_for_endpoint_locked";
      uint64_t browser_key_for = _os_log_send_and_compose_impl();

      id v10 = v97;
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v108 = 0;
      if (__nwlog_fault((const char *)browser_key_for, &type, &v108))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          BOOL v99 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v100 = type;
          if (os_log_type_enabled(v99, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_browser_cancel_query_record_for_endpoint_locked";
            _os_log_impl(&dword_181A5C000, v99, v100, "%{public}s called with null fullname", buf, 0xCu);
          }
        }

        else if (v108)
        {
          unsigned int v101 = __nw_create_backtrace_string();
          __nwlog_obj();
          BOOL v99 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v105 = type;
          BOOL v102 = os_log_type_enabled(v99, type);
          if (v101)
          {
            int v103 = (char *)v101;
            if (v102)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_browser_cancel_query_record_for_endpoint_locked";
              *(_WORD *)&_BYTE buf[12] = 2082;
              *(void *)&buf[14] = v101;
              _os_log_impl( &dword_181A5C000,  v99,  v105,  "%{public}s called with null fullname, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            id v10 = v97;
            free(v103);
            if (!browser_key_for) {
              goto LABEL_92;
            }
            goto LABEL_91;
          }

          if (v102)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_browser_cancel_query_record_for_endpoint_locked";
            _os_log_impl(&dword_181A5C000, v99, v105, "%{public}s called with null fullname, no backtrace", buf, 0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          BOOL v99 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v104 = type;
          if (os_log_type_enabled(v99, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_browser_cancel_query_record_for_endpoint_locked";
            _os_log_impl( &dword_181A5C000,  v99,  v104,  "%{public}s called with null fullname, backtrace limit exceeded",  buf,  0xCu);
          }
        }

        id v10 = v97;
      }
    }

    if (!browser_key_for)
    {
LABEL_92:

      BOOL v8 = v107;
      goto LABEL_93;
    }

void sub_18234EF08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

BOOL nw_browser_copy_result_to_modify_locked(NWConcrete_nw_browser *a1, const char *a2, uint64_t a3)
{
  *(void *)&v33[13] = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = v5;
  if (!a2)
  {
    __nwlog_obj();
    int v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v31 = "nw_browser_copy_result_to_modify_locked";
    int v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (__nwlog_fault(v16, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          id v31 = "nw_browser_copy_result_to_modify_locked";
          _os_log_impl(&dword_181A5C000, v17, v18, "%{public}s called with null key_name", buf, 0xCu);
        }
      }

      else if (v28)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        BOOL v21 = os_log_type_enabled(v17, type);
        if (backtrace_string)
        {
          if (v21)
          {
            *(_DWORD *)buf = 136446466;
            id v31 = "nw_browser_copy_result_to_modify_locked";
            __int16 v32 = 2082;
            *(void *)os_log_type_t v33 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v17,  v20,  "%{public}s called with null key_name, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_41;
        }

        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          id v31 = "nw_browser_copy_result_to_modify_locked";
          _os_log_impl(&dword_181A5C000, v17, v20, "%{public}s called with null key_name, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          id v31 = "nw_browser_copy_result_to_modify_locked";
          _os_log_impl( &dword_181A5C000,  v17,  v27,  "%{public}s called with null key_name, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_18234F4BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_create_browser_key_for (const char *a1, void *a2)
{
  id v3 = a2;
  id v4 = (char *)v3;
  if (v3) {
    id v5 = v3 + 104;
  }
  else {
    id v5 = 0LL;
  }
  size_t v6 = strlen(a1);
  if (v4) {
    size_t v7 = strlen(v5);
  }
  else {
    size_t v7 = 0LL;
  }
  if (v6 + v7 == -1LL)
  {
    __nwlog_obj();
    BOOL v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
    char v22 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v22);
    if (result) {
      goto LABEL_32;
    }
    free(v22);
  }

  BOOL v8 = malloc(v6 + v7 + 1);
  id v9 = v8;
  if (v8)
  {
    *BOOL v8 = 0;
    if (v6 + v7 != -1LL)
    {
LABEL_10:
      id v10 = v9;
      if (v6 + v7)
      {
        uint64_t v11 = v6 + v7 + 1;
        id v10 = v9;
        while (1)
        {
          int v12 = *(unsigned __int8 *)a1;
          *id v10 = v12;
          if (!v12) {
            break;
          }
          ++v10;
          ++a1;
        }
      }

      else
      {
LABEL_14:
        *id v10 = 0;
      }

      if (v4)
      {
        uint64_t v13 = 0LL;
        uint64_t v14 = 1LL;
        while (1)
        {
          int v15 = &v9[v13];
          if (!v9[v13]) {
            break;
          }
          ++v13;
          --v14;
          if (v6 + v7 + 1 == v13) {
            goto LABEL_26;
          }
        }

        if (v6 + v7 + v14 < 2)
        {
LABEL_25:
          *int v15 = 0;
        }

        else
        {
          uint64_t v16 = 0LL;
          uint64_t v17 = 0LL;
          while (1)
          {
            int v18 = v5[v16];
            v9[v16 + v13] = v18;
            if (!v18) {
              break;
            }
            unint64_t v19 = v6 + v7 - v13 + v17--;
            ++v16;
            if (v19 <= 1)
            {
              int v15 = &v9[v13 + v16];
              goto LABEL_25;
            }
          }
        }
      }
    }

void ___ZL50nw_browser_cancel_query_record_for_endpoint_lockedP21NWConcrete_nw_browserPKcPU26objcproto15OS_nw_interface8NSObject_block_invoke( uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  DNSServiceRefDeallocate(*(DNSServiceRef *)(a1 + 40));
  if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 40LL)))
  {
    if (__nwlog_browser_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
    }
    uint64_t v2 = (os_log_s *)(id)gbrowserLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = *(void *)(a1 + 40);
      int v4 = *(_DWORD *)(*(void *)(a1 + 32) + 192LL);
      int v5 = 136446722;
      size_t v6 = "nw_browser_cancel_query_record_for_endpoint_locked_block_invoke";
      __int16 v7 = 1024;
      int v8 = v4;
      __int16 v9 = 2048;
      uint64_t v10 = v3;
      _os_log_impl( &dword_181A5C000,  v2,  OS_LOG_TYPE_DEBUG,  "%{public}s [B%u] deallocate dns_ref %p",  (uint8_t *)&v5,  0x1Cu);
    }
  }

uint64_t ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_3( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id endpoint = nw_browse_result_get_endpoint(v4);
  int is_equal = nw_endpoint_is_equal(endpoint, *(void **)(a1 + 32), 0LL);
  if (is_equal)
  {
    __int16 v7 = *(void **)(a1 + 40);
    if (v7)
    {
      v11[0] = MEMORY[0x1895F87A8];
      v11[1] = 3221225472LL;
      v11[2] = ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_4;
      v11[3] = &unk_189BC1350;
      id v8 = v7;
      uint64_t v9 = *(void *)(a1 + 48);
      id v12 = v8;
      uint64_t v13 = v9;
      nw_browse_result_enumerate_interfaces((nw_browse_result_t)v4, v11);
    }

    else
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
    }
  }

  return is_equal ^ 1u;
}

void sub_18234F974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_browser_add_result_locked(void *a1, const char *a2, void *a3, void *a4, int a5)
{
  uint64_t v71 = *MEMORY[0x1895F89C0];
  id v9 = a1;
  id v10 = a3;
  uint64_t v11 = a4;
  if (v9)
  {
    uint64_t uint64 = xpc_dictionary_get_uint64(*((xpc_object_t *)v9 + 20), a2);
    BOOL v13 = nw_browser_copy_result_to_modify_locked((NWConcrete_nw_browser *)v9, a2, uint64);
    uint64_t v14 = (void *)v13;
    if (uint64)
    {
      if (!v11) {
        goto LABEL_26;
      }
      nw_browse_result_set_discovered_from_path((void *)v13, a5);
      if (nw_browse_result_insert_interface(v14, v11))
      {
        xpc_dictionary_set_uint64(*((xpc_object_t *)v9 + 20), a2, uint64 | 8);
        if (!nw_parameters_get_logging_disabled(*((void *)v9 + 5)))
        {
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
          }
          int v15 = (NWConcrete_nw_browse_result *)(id)gbrowserLogObj;
          if (os_log_type_enabled((os_log_t)v15, OS_LOG_TYPE_DEBUG))
          {
            int v16 = *((_DWORD *)v9 + 48);
            *(_DWORD *)buf = 136446978;
            uint64_t v64 = "nw_browser_add_result_locked";
            __int16 v65 = 1024;
            *(_DWORD *)os_log_type_t v66 = v16;
            *(_WORD *)&v66[4] = 2080;
            *(void *)&v66[6] = a2;
            __int16 v67 = 2112;
            os_log_type_t v68 = v11;
            _os_log_impl( &dword_181A5C000,  (os_log_t)v15,  OS_LOG_TYPE_DEBUG,  "%{public}s [B%u] changes_map: %s interface_added(%@)",  buf,  0x26u);
          }

void sub_1823506C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL37nw_browser_update_path_browser_lockedP21NWConcrete_nw_browser_block_invoke_4( uint64_t a1, void *a2)
{
  BOOL v3 = nw_interface_shallow_compare(*(void **)(a1 + 32), a2);
  if (v3) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
  }
  return !v3;
}

uint64_t ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke_2_117( void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  id v9 = v7;
  id v10 = v8;
  uint64_t v11 = v10;
  if (v9) {
    v9[52] |= 1u;
  }
  if (v10) {
    *((_BYTE *)v10 + 52) |= 1u;
  }
  id v12 = (void *)a1[5];
  BOOL v13 = *(void **)(a1[4] + 40LL);
  v18[0] = MEMORY[0x1895F87A8];
  v18[1] = 3221225472LL;
  v18[2] = ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke_3;
  v18[3] = &unk_189BC1418;
  id v21 = v12;
  uint64_t v14 = v9;
  id v19 = v14;
  id v15 = v11;
  id v20 = v15;
  uint64_t v16 = a1[6];
  uint64_t v22 = a2;
  uint64_t v23 = v16;
  nw_utilities_execute_block_as_persona_from_parameters(v13, v18);

  return 1LL;
}

void sub_182350848( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke_3( void *a1)
{
  return (*(uint64_t (**)(void, void, void, BOOL))(a1[6] + 16LL))( a1[6],  a1[4],  a1[5],  a1[7] >= (unint64_t)(a1[8] - 1LL));
}

uint64_t ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke_2_114( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v5 = a3;
  __int128 v25 = 0uLL;
  nw_endpoint_get_service_identifier(v5, &v25);
  size_t v6 = (void *)[objc_alloc(MEMORY[0x189607AB8]) initWithUUIDBytes:&v25];
  int v7 = [*(id *)(a1 + 32) isEqual:v6];
  if (v7)
  {
    *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = a2;
    id v8 = nw_browse_result_create(v5);
    nw_array_append(*(void *)(a1 + 40), v8);
    if ((nw_endpoint_is_equal(*(void **)(a1 + 48), v5, 30LL) & 1) == 0)
    {
      nw_parallel_array_append(*(void *)(a1 + 56), *(void **)(a1 + 64), v8);
      if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 72) + 40LL)))
      {
        nw_browse_result_change_t changes = nw_browse_result_get_changes(*(nw_browse_result_t *)(a1 + 64), (nw_browse_result_t)v8);
        BOOL v10 = nw_browse_result_get_change_description(changes);
        if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 72) + 40LL)))
        {
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
          }
          uint64_t v11 = (os_log_s *)(id)gbrowserLogObj;
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            uint64_t v12 = *(void *)(a1 + 64);
            int v13 = *(_DWORD *)(*(void *)(a1 + 72) + 192LL);
            int v15 = 136447234;
            uint64_t v16 = "nw_browser_app_svc_update_browse_result_locked_block_invoke_2";
            __int16 v17 = 1024;
            int v18 = v13;
            __int16 v19 = 2112;
            uint64_t v20 = v12;
            __int16 v21 = 2112;
            uint64_t v22 = v8;
            __int16 v23 = 2082;
            BOOL v24 = v10;
            _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_INFO,  "%{public}s [B%u] browse_result_changed: (%@ -> %@), %{public}s",  (uint8_t *)&v15,  0x30u);
          }
        }

        if (v10) {
          free((void *)v10);
        }
      }
    }
  }

  return v7 ^ 1u;
}

void sub_182350AA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL46nw_browser_app_svc_update_browse_result_lockedP21NWConcrete_nw_browserPU22objcproto11OS_nw_array8NSObject_block_invoke_2( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  id v4 = a3;
  __int128 uu1 = 0uLL;
  __int128 uu2 = 0uLL;
  nw_endpoint_get_service_identifier(v4, &uu1);
  nw_endpoint_get_service_identifier(*(void **)(a1 + 32), &uu2);
  BOOL v5 = uuid_compare((const unsigned __int8 *)&uu1, (const unsigned __int8 *)&uu2) != 0;

  return v5;
}

void sub_182350B78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_browser_start_query_record_for_endpoint_locked(void *a1, void *a2, const char *a3, void *a4)
{
  uint64_t v53 = *MEMORY[0x1895F89C0];
  id context = a1;
  id v8 = a2;
  uint64_t v9 = a4;
  if (v8)
  {
    if (a3)
    {
      int v10 = *((_DWORD *)context + 18);
      BOOL logging_disabled = nw_parameters_get_logging_disabled(*((void *)context + 5));
      if (v10 == 1)
      {
        if (!logging_disabled)
        {
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
          }
          uint64_t v12 = (os_log_s *)(id)gbrowserLogObj;
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            int v13 = *((_DWORD *)context + 48);
            *(_DWORD *)buf = 136446978;
            os_log_type_t v48 = "nw_browser_start_query_record_for_endpoint_locked";
            __int16 v49 = 1024;
            *(_DWORD *)os_log_type_t v50 = v13;
            *(_WORD *)&v50[4] = 2080;
            *(void *)&v50[6] = a3;
            __int16 v51 = 2112;
            os_log_type_t v52 = v9;
            _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_DEFAULT,  "%{public}s [B%u] start query record for %s on %@",  buf,  0x26u);
          }
        }

        *(void *)os_log_type_t type = *((void *)context + 15);
        DNSServiceFlags v14 = nw_browser_derive_endpoint_flags((NWConcrete_nw_browser *)context);
        size_t out_signature_length = 0LL;
        int v15 = 0LL;
        if (nw_endpoint_get_signature(v8, &out_signature_length) && out_signature_length)
        {
          int v15 = DNSServiceAttributeCreate();
          DNSServiceAttrSetValidationData();
        }

        if (v9) {
          uint32_t v16 = v9[2];
        }
        else {
          uint32_t v16 = 0;
        }
        DNSServiceErrorType RecordWithAttribute = DNSServiceQueryRecordWithAttribute( (DNSServiceRef *)type,  v14,  v16,  a3,  0x10u,  1u,  v15,  (DNSServiceQueryRecordReply)nw_browser_dns_service_query_record_callback,  context);
        if (v15) {
          DNSServiceAttributeDeallocate(v15);
        }
        if (nw_browser_fail_on_dns_error_locked( (NWConcrete_nw_browser *)context,  RecordWithAttribute,  "DNSServiceQueryRecord"))
        {
          goto LABEL_55;
        }

        uint64_t browser_key_for = nw_create_browser_key_for (a3, v9);
        xpc_dictionary_set_pointer();
        if (nw_parameters_get_logging_disabled(*((void *)context + 5))) {
          goto LABEL_53;
        }
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
        }
        uint64_t v20 = (os_log_s *)(id)gbrowserLogObj;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          int v29 = *((_DWORD *)context + 48);
          *(_DWORD *)buf = 136446978;
          os_log_type_t v48 = "nw_browser_start_query_record_for_endpoint_locked";
          __int16 v49 = 1024;
          *(_DWORD *)os_log_type_t v50 = v29;
          *(_WORD *)&v50[4] = 2080;
          *(void *)&v50[6] = browser_key_for;
          __int16 v51 = 2048;
          os_log_type_t v52 = *(_DWORD **)type;
          _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_DEBUG,  "%{public}s [B%u] dns_ref_map: set %s -> %p",  buf,  0x26u);
        }
      }

      else
      {
        if (logging_disabled) {
          goto LABEL_55;
        }
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
        }
        id v17 = (id)gbrowserLogObj;
        int v18 = *((_DWORD *)context + 48);
        *(_DWORD *)buf = 136446466;
        os_log_type_t v48 = "nw_browser_start_query_record_for_endpoint_locked";
        __int16 v49 = 1024;
        *(_DWORD *)os_log_type_t v50 = v18;
        uint64_t browser_key_for = _os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(out_signature_length) = 0;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
          }
          uint64_t v20 = (os_log_s *)(id)gbrowserLogObj;
          os_log_type_t v21 = type[0];
          if (os_log_type_enabled(v20, type[0]))
          {
            int v22 = *((_DWORD *)context + 48);
            *(_DWORD *)buf = 136446466;
            os_log_type_t v48 = "nw_browser_start_query_record_for_endpoint_locked";
            __int16 v49 = 1024;
            *(_DWORD *)os_log_type_t v50 = v22;
            _os_log_impl(&dword_181A5C000, v20, v21, "%{public}s [B%u] not in ready state", buf, 0x12u);
          }
        }

        else if ((_BYTE)out_signature_length)
        {
          backtrace_string = __nw_create_backtrace_string();
          if (backtrace_string)
          {
            BOOL v24 = (char *)backtrace_string;
            if (__nwlog_browser_log::onceToken[0] != -1) {
              dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
            }
            __int128 v25 = (os_log_s *)(id)gbrowserLogObj;
            os_log_type_t v26 = type[0];
            if (os_log_type_enabled(v25, type[0]))
            {
              int v27 = *((_DWORD *)context + 48);
              *(_DWORD *)buf = 136446722;
              os_log_type_t v48 = "nw_browser_start_query_record_for_endpoint_locked";
              __int16 v49 = 1024;
              *(_DWORD *)os_log_type_t v50 = v27;
              *(_WORD *)&v50[4] = 2082;
              *(void *)&v50[6] = v24;
              _os_log_impl( &dword_181A5C000,  v25,  v26,  "%{public}s [B%u] not in ready state, dumping backtrace:%{public}s",  buf,  0x1Cu);
            }

            free(v24);
            if (browser_key_for) {
              goto LABEL_54;
            }
            goto LABEL_55;
          }

          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
          }
          uint64_t v20 = (os_log_s *)(id)gbrowserLogObj;
          os_log_type_t v32 = type[0];
          if (os_log_type_enabled(v20, type[0]))
          {
            int v33 = *((_DWORD *)context + 48);
            *(_DWORD *)buf = 136446466;
            os_log_type_t v48 = "nw_browser_start_query_record_for_endpoint_locked";
            __int16 v49 = 1024;
            *(_DWORD *)os_log_type_t v50 = v33;
            _os_log_impl(&dword_181A5C000, v20, v32, "%{public}s [B%u] not in ready state, no backtrace", buf, 0x12u);
          }
        }

        else
        {
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
          }
          uint64_t v20 = (os_log_s *)(id)gbrowserLogObj;
          os_log_type_t v30 = type[0];
          if (os_log_type_enabled(v20, type[0]))
          {
            int v31 = *((_DWORD *)context + 48);
            *(_DWORD *)buf = 136446466;
            os_log_type_t v48 = "nw_browser_start_query_record_for_endpoint_locked";
            __int16 v49 = 1024;
            *(_DWORD *)os_log_type_t v50 = v31;
            _os_log_impl( &dword_181A5C000,  v20,  v30,  "%{public}s [B%u] not in ready state, backtrace limit exceeded",  buf,  0x12u);
          }
        }
      }

      goto LABEL_52;
    }

    __nwlog_obj();
    char v36 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v48 = "nw_browser_start_query_record_for_endpoint_locked";
    uint64_t browser_key_for = _os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(out_signature_length) = 0;
    if (__nwlog_fault((const char *)browser_key_for, type, &out_signature_length))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v37 = type[0];
        if (os_log_type_enabled(v20, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v48 = "nw_browser_start_query_record_for_endpoint_locked";
          _os_log_impl(&dword_181A5C000, v20, v37, "%{public}s called with null fullname", buf, 0xCu);
        }

void sub_1823515A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_browser_dns_service_query_record_callback( _DNSServiceRef_t *a1, char a2, unsigned int a3, int a4, const char *a5, unsigned __int16 a6, unsigned __int16 a7, unsigned int a8, const uint8_t *a9, unsigned int a10, void *a11)
{
  uint64_t v128 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    int v15 = a11;
    uint32_t v16 = v15;
    if (v15)
    {
      os_unfair_lock_lock(v15 + 2);
      if (!nw_browser_fail_on_dns_error_locked( (NWConcrete_nw_browser *)v16,  a4,  "nw_browser_dns_service_query_record_callback")
        && v16[18]._os_unfair_lock_opaque == 1)
      {
        char v104 = a2;
        bzero(key, 0x3F1uLL);
        for (size_t i = 0LL; i < strlen(a5); ++i)
          key[i] = __tolower(a5[i]);
        if (xpc_dictionary_get_uint64(*(xpc_object_t *)&v16[40]._os_unfair_lock_opaque, key))
        {
          os_log_type_t v105 = v16;
          uint64_t v18 = (uint64_t)nw_dictionary_copy_value(*(void *)&v105[42]._os_unfair_lock_opaque, (uint64_t)key);
          nw_txt_record_t v19 = nw_txt_record_create_with_bytes(a9, a8);
          nw_txt_record_t v20 = v19;
          if (!v19) {
            goto LABEL_53;
          }
          os_log_type_t v21 = v19;
          BOOL v22 = (*((_BYTE *)v21 + 36) & 1) == 0;

          if (v22)
          {
            __nwlog_obj();
            BOOL v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v123 = 136446210;
              *(void *)&v123[4] = "nw_browser_copy_txt_array_locked";
              _os_log_impl( &dword_181A5C000,  v24,  OS_LOG_TYPE_ERROR,  "%{public}s txt: discovered non-key/value TXT record",  v123,  0xCu);
            }

            goto LABEL_52;
          }

          if ((v104 & 2) != 0)
          {
            if (!v18)
            {
              uint64_t v18 = nw_array_create();
              nw_dictionary_set_value(*(void *)&v105[42]._os_unfair_lock_opaque, key, (void *)v18);
              if (!nw_parameters_get_logging_disabled(*(void *)&v105[10]._os_unfair_lock_opaque))
              {
                if (__nwlog_browser_log::onceToken[0] != -1) {
                  dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
                }
                os_log_type_t v30 = (os_log_s *)(id)gbrowserLogObj;
                if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
                {
                  uint32_t os_unfair_lock_opaque = v105[48]._os_unfair_lock_opaque;
                  *(_DWORD *)v123 = 136446722;
                  *(void *)&v123[4] = "nw_browser_copy_txt_array_locked";
                  __int16 v124 = 1024;
                  *(_DWORD *)os_log_type_t v125 = os_unfair_lock_opaque;
                  *(_WORD *)&v125[4] = 2080;
                  *(void *)&v125[6] = key;
                  _os_log_impl( &dword_181A5C000,  v30,  OS_LOG_TYPE_DEBUG,  "%{public}s [B%u] txt: create new txt_array for %s",  v123,  0x1Cu);
                }
              }
            }

            v111[0] = MEMORY[0x1895F87A8];
            v111[1] = 3221225472LL;
            v111[2] = ___ZL32nw_browser_copy_txt_array_lockedP21NWConcrete_nw_browserPKcPKvtj_block_invoke;
            v111[3] = &unk_189BC85B0;
            os_log_type_t v32 = v21;
            uint64_t v112 = v32;
            if (nw_array_apply((unsigned __int8 *)v18, (uint64_t)v111))
            {
              nw_array_append(v18, v32);
              if (!nw_parameters_get_logging_disabled(*(void *)&v105[10]._os_unfair_lock_opaque))
              {
                if (__nwlog_browser_log::onceToken[0] != -1) {
                  dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
                }
                int v33 = (os_log_s *)(id)gbrowserLogObj;
                if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
                {
                  uint32_t v34 = v105[48]._os_unfair_lock_opaque;
                  *(_DWORD *)v123 = 136447234;
                  *(void *)&v123[4] = "nw_browser_copy_txt_array_locked";
                  __int16 v124 = 1024;
                  *(_DWORD *)os_log_type_t v125 = v34;
                  *(_WORD *)&v125[4] = 1040;
                  *(_DWORD *)&v125[6] = a8;
                  *(_WORD *)&v125[10] = 2080;
                  *(void *)&v125[12] = a9;
                  __int16 v126 = 2080;
                  os_log_type_t v127 = key;
                  _os_log_impl( &dword_181A5C000,  v33,  OS_LOG_TYPE_DEBUG,  "%{public}s [B%u] txt: add %.*s to %s",  v123,  0x2Cu);
                }
              }
            }

            BOOL v24 = v112;
            goto LABEL_52;
          }

          if (v18)
          {
            BOOL v23 = nw_array_create();
            *(void *)os_log_type_t type = 0LL;
            BOOL v107 = type;
            uint64_t v108 = 0x2020000000LL;
            char v109 = 0;
            *(void *)buf = MEMORY[0x1895F87A8];
            *(void *)&buf[8] = 3221225472LL;
            *(void *)&buf[16] = ___ZL32nw_browser_copy_txt_array_lockedP21NWConcrete_nw_browserPKcPKvtj_block_invoke_131;
            *(void *)&_BYTE buf[24] = &unk_189BC14E0;
            os_log_type_t v119 = type;
            *(void *)&buf[32] = v21;
            BOOL v24 = (os_log_s *)(id)v23;
            *(void *)&__int128 v118 = v24;
            __int128 v25 = v105;
            os_log_type_t v26 = v105;
            __int16 v122 = a8;
            *((void *)&v118 + 1) = v26;
            BOOL v120 = a9;
            v121 = key;
            nw_array_apply((unsigned __int8 *)v18, (uint64_t)buf);
            if (v24) {
              uint64_t v27 = (uint64_t)(*((void *)v24 + 3) - *((void *)v24 + 2)) >> 3;
            }
            else {
              uint64_t v27 = 0LL;
            }
            if (v27 != ((uint64_t)(*(void *)(v18 + 24) - *(void *)(v18 + 16)) >> 3) - 1
              && !nw_parameters_get_logging_disabled(*(void *)&v26[10]._os_unfair_lock_opaque))
            {
              if (__nwlog_browser_log::onceToken[0] != -1) {
                dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
              }
              os_log_type_t v35 = (os_log_s *)(id)gbrowserLogObj;
              if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
              {
                uint32_t v36 = v26[48]._os_unfair_lock_opaque;
                *(_DWORD *)v123 = 136447234;
                *(void *)&v123[4] = "nw_browser_copy_txt_array_locked";
                __int16 v124 = 1024;
                *(_DWORD *)os_log_type_t v125 = v36;
                *(_WORD *)&v125[4] = 1040;
                *(_DWORD *)&v125[6] = a8;
                *(_WORD *)&v125[10] = 2080;
                *(void *)&v125[12] = a9;
                __int16 v126 = 2080;
                os_log_type_t v127 = key;
                _os_log_impl( &dword_181A5C000,  v35,  OS_LOG_TYPE_ERROR,  "%{public}s [B%u] txt: failed to remove %.*s from %s",  v123,  0x2Cu);
              }

              __int128 v25 = v105;
            }

            nw_dictionary_set_value(*(void *)&v25[42]._os_unfair_lock_opaque, key, v24);
            if (!v24 || *((void *)v24 + 3) == *((void *)v24 + 2)) {
              os_log_type_t v37 = 0LL;
            }
            else {
              os_log_type_t v37 = v24;
            }

            _Block_object_dispose(type, 8);
            uint64_t v18 = (uint64_t)v37;
LABEL_52:

LABEL_53:
            if (v18)
            {
              unint64_t v38 = *(void *)(v18 + 24) - *(void *)(v18 + 16);
              if (v38 >= 9)
              {
                os_unfair_lock_unlock(v16 + 2);
LABEL_172:

                goto LABEL_22;
              }

              os_log_type_t v39 = v105;
              if (v38 == 8)
              {
                nw_array_get_object_at_index(v18, 0LL);
                BOOL v40 = (nw_txt_record *)objc_claimAutoreleasedReturnValue();
              }

              else
              {
                BOOL v40 = 0LL;
              }

void sub_182352AD0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL32nw_browser_copy_txt_array_lockedP21NWConcrete_nw_browserPKcPKvtj_block_invoke( uint64_t a1, int a2, nw_txt_record_t right)
{
  return !nw_txt_record_is_equal(*(nw_txt_record_t *)(a1 + 32), right);
}

uint64_t ___ZL32nw_browser_copy_txt_array_lockedP21NWConcrete_nw_browserPKcPKvtj_block_invoke_131( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v4 = a3;
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL)
    || !nw_txt_record_is_equal(*(nw_txt_record_t *)(a1 + 32), (nw_txt_record_t)v4))
  {
    nw_array_append(*(void *)(a1 + 40), v4);
  }

  else
  {
    if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 48) + 40LL)))
    {
      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
      }
      BOOL v5 = (os_log_s *)(id)gbrowserLogObj;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        int v6 = *(_DWORD *)(*(void *)(a1 + 48) + 192LL);
        int v7 = *(unsigned __int16 *)(a1 + 80);
        uint64_t v8 = *(void *)(a1 + 64);
        uint64_t v9 = *(void *)(a1 + 72);
        int v11 = 136447234;
        uint64_t v12 = "nw_browser_copy_txt_array_locked_block_invoke";
        __int16 v13 = 1024;
        int v14 = v6;
        __int16 v15 = 1040;
        int v16 = v7;
        __int16 v17 = 2080;
        uint64_t v18 = v8;
        __int16 v19 = 2080;
        uint64_t v20 = v9;
        _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_DEBUG,  "%{public}s [B%u] txt: remove %.*s from %s",  (uint8_t *)&v11,  0x2Cu);
      }
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 1;
  }

  return 1LL;
}

void sub_182352CE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_browser_cancel_dns_browser_locked(NWConcrete_nw_browser *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)*((void *)v1 + 19);
  *((void *)v1 + 19) = 0LL;

  BOOL v3 = (void *)*((void *)v1 + 21);
  *((void *)v1 + 21) = 0LL;

  id v4 = (void *)*((void *)v1 + 20);
  *((void *)v1 + 20) = 0LL;

  uint64_t v5 = *((void *)v1 + 15);
  if (v5)
  {
    *((void *)v1 + 15) = 0LL;
    *((void *)v1 + 16) = 0LL;
    id v6 = nw_parameters_copy_context(*((void **)v1 + 5));
    v7[0] = MEMORY[0x1895F87A8];
    v7[1] = 3221225472LL;
    v7[2] = ___ZL36nw_browser_cancel_dns_browser_lockedP21NWConcrete_nw_browser_block_invoke;
    v7[3] = &unk_189BC66E8;
    uint64_t v9 = v5;
    uint64_t v8 = v1;
    nw_queue_context_async(v6, v7);
  }
}

void sub_182352DC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void ___ZL36nw_browser_cancel_dns_browser_lockedP21NWConcrete_nw_browser_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  DNSServiceRefDeallocate(*(DNSServiceRef *)(a1 + 40));
  if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 40LL)))
  {
    if (__nwlog_browser_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
    }
    uint64_t v2 = (os_log_s *)(id)gbrowserLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      int v3 = *(_DWORD *)(*(void *)(a1 + 32) + 192LL);
      int v4 = 136446466;
      uint64_t v5 = "nw_browser_cancel_dns_browser_locked_block_invoke";
      __int16 v6 = 1024;
      int v7 = v3;
      _os_log_impl( &dword_181A5C000,  v2,  OS_LOG_TYPE_DEBUG,  "%{public}s [B%u] deallocate primary DNS ref",  (uint8_t *)&v4,  0x12u);
    }
  }

void ___ZL38nw_browser_start_custom_browser_lockedP21NWConcrete_nw_browser_block_invoke_2(uint64_t a1)
{
}

void nw_browser_cancel(nw_browser_t browser)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  id v1 = browser;
  uint64_t v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 2);
    if (v2[18]._os_unfair_lock_opaque == 3)
    {
      os_unfair_lock_unlock(v2 + 2);
      if (!nw_parameters_get_logging_disabled(*(void *)&v2[10]._os_unfair_lock_opaque))
      {
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
        }
        int v3 = (os_log_s *)(id)gbrowserLogObj;
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          uint32_t os_unfair_lock_opaque = v2[48]._os_unfair_lock_opaque;
          *(_DWORD *)buf = 136446466;
          os_log_type_t v30 = "nw_browser_cancel";
          __int16 v31 = 1024;
          LODWORD(v32) = os_unfair_lock_opaque;
          _os_log_impl( &dword_181A5C000,  v3,  OS_LOG_TYPE_ERROR,  "%{public}s [B%u] The browser has already been cancelled, ignoring nw_browser_cancel().",  buf,  0x12u);
        }
      }
    }

    else
    {
      uint64_t v5 = v2;
      if (!nw_parameters_get_logging_disabled(*(void *)&v2[10]._os_unfair_lock_opaque))
      {
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
        }
        __int16 v6 = (os_log_s *)(id)gbrowserLogObj;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          uint32_t v7 = v5[48]._os_unfair_lock_opaque;
          *(_DWORD *)buf = 136446466;
          os_log_type_t v30 = "nw_browser_cancel_path_browser_locked";
          __int16 v31 = 1024;
          LODWORD(v32) = v7;
          _os_log_impl(&dword_181A5C000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s [B%u] path: cancel browse", buf, 0x12u);
        }
      }

      uint64_t v8 = *(void **)&v5[24]._os_unfair_lock_opaque;
      *(void *)&v5[24]._uint32_t os_unfair_lock_opaque = 0LL;

      uint64_t v9 = *(void **)&v5[26]._os_unfair_lock_opaque;
      *(void *)&v5[26]._uint32_t os_unfair_lock_opaque = 0LL;

      int v10 = *(void **)&v5[22]._os_unfair_lock_opaque;
      if (v10)
      {
        nw_path_evaluator_cancel(v10);
        int v11 = *(void **)&v5[22]._os_unfair_lock_opaque;
        *(void *)&v5[22]._uint32_t os_unfair_lock_opaque = 0LL;
      }

      nw_browser_cancel_dns_browser_locked((NWConcrete_nw_browser *)v5);
      uint64_t v12 = *(void **)&v5[34]._os_unfair_lock_opaque;
      *(void *)&v5[34]._uint32_t os_unfair_lock_opaque = 0LL;

      __int16 v13 = *(void **)&v5[36]._os_unfair_lock_opaque;
      *(void *)&v5[36]._uint32_t os_unfair_lock_opaque = 0LL;

      int v14 = *(void **)&v5[28]._os_unfair_lock_opaque;
      *(void *)&v5[28]._uint32_t os_unfair_lock_opaque = 0LL;

      nw_browser_set_state_locked(v5, 3, 0LL);
      __int16 v15 = *(void **)&v5[14]._os_unfair_lock_opaque;
      *(void *)&v5[14]._uint32_t os_unfair_lock_opaque = 0LL;

      int v16 = *(void **)&v5[16]._os_unfair_lock_opaque;
      *(void *)&v5[16]._uint32_t os_unfair_lock_opaque = 0LL;

      __int16 v17 = *(void **)&v5[4]._os_unfair_lock_opaque;
      *(void *)&v5[4]._uint32_t os_unfair_lock_opaque = 0LL;

      uint64_t v18 = *(void **)&v5[12]._os_unfair_lock_opaque;
      *(void *)&v5[12]._uint32_t os_unfair_lock_opaque = 0LL;

      os_unfair_lock_unlock(v2 + 2);
    }

    goto LABEL_18;
  }

  __nwlog_obj();
  __int16 v19 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v30 = "nw_browser_cancel";
  uint64_t v20 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v27 = 0;
  if (__nwlog_fault(v20, &type, &v27))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_browser_cancel";
        _os_log_impl(&dword_181A5C000, v21, v22, "%{public}s called with null browser", buf, 0xCu);
      }
    }

    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v21, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v30 = "nw_browser_cancel";
          __int16 v31 = 2082;
          os_log_type_t v32 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v21,  v24,  "%{public}s called with null browser, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_35;
      }

      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_browser_cancel";
        _os_log_impl(&dword_181A5C000, v21, v24, "%{public}s called with null browser, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_browser_cancel";
        _os_log_impl( &dword_181A5C000,  v21,  v26,  "%{public}s called with null browser, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823533A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_parameters_t nw_browser_copy_parameters(nw_browser_t browser)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = browser;
  uint64_t v2 = v1;
  if (v1)
  {
    int v3 = (nw_parameters *)v1[5];
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v16 = "nw_browser_copy_parameters";
  __int16 v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint32_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_browser_copy_parameters";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null browser", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint32_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          int v16 = "nw_browser_copy_parameters";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null browser, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_browser_copy_parameters";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null browser, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint32_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_browser_copy_parameters";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null browser, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

nw_browse_descriptor_t nw_browser_copy_browse_descriptor(nw_browser_t browser)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = browser;
  uint64_t v2 = v1;
  if (v1)
  {
    int v3 = (nw_browse_descriptor *)v1[4];
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v16 = "nw_browser_copy_browse_descriptor";
  __int16 v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint32_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_browser_copy_browse_descriptor";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null browser", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint32_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          int v16 = "nw_browser_copy_browse_descriptor";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null browser, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_browser_copy_browse_descriptor";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null browser, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint32_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_browser_copy_browse_descriptor";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null browser, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

id nw_browser_copy_browse_results(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 2);
    id v3 = *(id *)&v2[34]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v2 + 2);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v16 = "nw_browser_copy_browse_results";
  __int16 v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint32_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_browser_copy_browse_results";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null browser", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint32_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          int v16 = "nw_browser_copy_browse_results";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null browser, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_browser_copy_browse_results";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null browser, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint32_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_browser_copy_browse_results";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null browser, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_browser_get_state(void *a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  int v4 = v3;
  if (v3)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    int v23 = 0;
    *(void *)&buf[16] = 0x2020000000LL;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_browser_get_state_block_invoke;
    aBlock[3] = &unk_189BC93F0;
    uint64_t v18 = buf;
    __int16 v17 = v3;
    uint64_t v19 = a2;
    uint64_t v5 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v4 + 2);
    v5[2](v5);
    os_unfair_lock_unlock(v4 + 2);

    uint64_t v6 = *(unsigned int *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_browser_get_state";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v9, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_browser_get_state";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null browser", buf, 0xCu);
      }
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_browser_get_state";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null browser, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_browser_get_state";
        _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null browser, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_browser_get_state";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null browser, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182353EE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_browser_get_state_block_invoke(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = *(_DWORD *)(*(void *)(a1 + 32) + 72LL);
  if (*(void *)(a1 + 48)) {
    objc_storeStrong(*(id **)(a1 + 48), *(id *)(*(void *)(a1 + 32) + 80LL));
  }
}

nw_txt_record_t nw_txt_record_create_with_bytes(const uint8_t *txt_bytes, size_t txt_len)
{
  uint64_t v51 = *MEMORY[0x1895F89C0];
  if (!txt_bytes)
  {
    __nwlog_obj();
    BOOL v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v48 = "nw_txt_record_create_with_bytes";
    os_log_type_t v26 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v48 = "nw_txt_record_create_with_bytes";
        _os_log_impl(&dword_181A5C000, v27, v28, "%{public}s called with null (txt_bytes != __null)", buf, 0xCu);
      }

      goto LABEL_93;
    }

    if (!v45)
    {
      __nwlog_obj();
      char v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v42 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v48 = "nw_txt_record_create_with_bytes";
        _os_log_impl( &dword_181A5C000,  v27,  v42,  "%{public}s called with null (txt_bytes != __null), backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_93;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    char v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v36 = type;
    BOOL v37 = os_log_type_enabled(v27, type);
    if (!backtrace_string)
    {
      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v48 = "nw_txt_record_create_with_bytes";
        _os_log_impl( &dword_181A5C000,  v27,  v36,  "%{public}s called with null (txt_bytes != __null), no backtrace",  buf,  0xCu);
      }

      goto LABEL_93;
    }

    if (v37)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v48 = "nw_txt_record_create_with_bytes";
      __int16 v49 = 2082;
      size_t v50 = (size_t)backtrace_string;
      _os_log_impl( &dword_181A5C000,  v27,  v36,  "%{public}s called with null (txt_bytes != __null), dumping backtrace:%{public}s",  buf,  0x16u);
    }

BOOL nw_txt_record_conforms_to_rfc_1464(_BYTE *a1, uint64_t a2)
{
  BOOL result = 0LL;
  if (a1 && (unint64_t)(a2 - 8901) >= 0xFFFFFFFFFFFFDD3CLL)
  {
    size_t v4 = *a1;
    if (a2 == 1 && !*a1 || v4 + 1 == a2)
    {
      return 1LL;
    }

    else
    {
      uint64_t v5 = &a1[a2];
      unint64_t v6 = (unint64_t)&a1[v4 + 1];
      do
      {
        BOOL result = v6 <= (unint64_t)v5;
        unint64_t v7 = (unint64_t)a1;
        a1 = (_BYTE *)v6;
        os_log_type_t v8 = (unsigned __int8 *)(v7 + 1);
        uint64_t v9 = (unsigned __int8 *)memchr((const void *)(v7 + 1), 61, v4);
        os_log_type_t v10 = (unsigned __int8 *)(v7 + v4);
        if (v9) {
          os_log_type_t v10 = v9;
        }
        if (v8 < v10)
        {
          size_t v11 = (char *)&v10[~v7];
          while (*v8 - 127 > 0xFFFFFFA0)
          {
            ++v8;
            if (!--v11) {
              goto LABEL_8;
            }
          }

          return 0LL;
        }

BOOL nw_txt_record_is_dictionary(nw_txt_record_t txt_record)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_txt_record_t v1 = txt_record;
  nw_txt_record_t v2 = v1;
  if (v1)
  {
    BOOL v3 = *((_BYTE *)v1 + 36) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v16 = "nw_txt_record_is_dictionary";
  unint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_txt_record_is_dictionary";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null txt_record", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          int v16 = "nw_txt_record_is_dictionary";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null txt_record, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_txt_record_is_dictionary";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null txt_record, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_txt_record_is_dictionary";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null txt_record, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

nw_txt_record_t nw_txt_record_create_dictionary(void)
{
  return (nw_txt_record_t)nw_txt_record_create_dictionary_with_initial_length(0x100uLL);
}

BOOL nw_txt_record_create_dictionary_with_initial_length(size_t a1)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v32 = "nw_txt_record_create_dictionary_with_initial_length";
    BOOL v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (__nwlog_fault(v15, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v32 = "nw_txt_record_create_dictionary_with_initial_length";
          _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s txt_record cannot have length 0", buf, 0xCu);
        }

        goto LABEL_60;
      }

      if (!v29)
      {
        __nwlog_obj();
        int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v32 = "nw_txt_record_create_dictionary_with_initial_length";
          _os_log_impl( &dword_181A5C000,  v16,  v27,  "%{public}s txt_record cannot have length 0, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_60;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type;
      BOOL v24 = os_log_type_enabled(v16, type);
      if (!backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v32 = "nw_txt_record_create_dictionary_with_initial_length";
          _os_log_impl( &dword_181A5C000,  v16,  v23,  "%{public}s txt_record cannot have length 0, no backtrace",  buf,  0xCu);
        }

        goto LABEL_60;
      }

      if (v24)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v32 = "nw_txt_record_create_dictionary_with_initial_length";
        __int16 v33 = 2082;
        size_t v34 = (size_t)backtrace_string;
        _os_log_impl( &dword_181A5C000,  v16,  v23,  "%{public}s txt_record cannot have length 0, dumping backtrace:%{public}s",  buf,  0x16u);
      }

nw_txt_record_find_key_t nw_txt_record_find_key(nw_txt_record_t txt_record, const char *key)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  nw_txt_record_t v3 = txt_record;
  size_t v4 = (os_unfair_lock_s *)v3;
  if (!v3)
  {
    __nwlog_obj();
    unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v19 = "nw_txt_record_find_key";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v8, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v19 = "nw_txt_record_find_key";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null txt_record", buf, 0xCu);
        }
      }

      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v19 = "nw_txt_record_find_key";
            __int16 v20 = 2082;
            uint64_t v21 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v13,  "%{public}s called with null txt_record, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_28;
        }

        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v19 = "nw_txt_record_find_key";
          _os_log_impl(&dword_181A5C000, v9, v13, "%{public}s called with null txt_record, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v19 = "nw_txt_record_find_key";
          _os_log_impl( &dword_181A5C000,  v9,  v15,  "%{public}s called with null txt_record, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182356178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_txt_record_key_is_valid(uint64_t result)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  if (result)
  {
    nw_txt_record_t v1 = (_BYTE *)result;
    if (strnlen((const char *)result, 0x100uLL) - 256 >= 0xFFFFFFFFFFFFFF01LL)
    {
      int v4 = *v1;
      if (!*v1) {
        return 1LL;
      }
      id v5 = v1 + 1;
      while (v4 != 61 && (v4 - 32) < 0x5F)
      {
        int v6 = *v5++;
        int v4 = v6;
        if (!v6) {
          return 1LL;
        }
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      nw_txt_record_t v2 = (os_log_s *)(id)gLogObj;
      if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        goto LABEL_14;
      }
      int v7 = 136446210;
      os_log_type_t v8 = "nw_txt_record_key_is_valid";
      nw_txt_record_t v3 = "%{public}s An invalid key was provided. The characters of \t\t\t\t\t  a key MUST be printable US-ASCII values"
           " (0x20-0x7E)\t\t\t\t\t  [RFC20], excluding '=' (0x3D).";
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      nw_txt_record_t v2 = (os_log_s *)(id)gLogObj;
      if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
LABEL_14:

        return 0LL;
      }

      int v7 = 136446210;
      os_log_type_t v8 = "nw_txt_record_key_is_valid";
      nw_txt_record_t v3 = "%{public}s An invalid key was provided. An invalid key was provided. \t\t\t\t  The key must be a non-empty st"
           "ring of length less than or equal\t\t\t\t  to UINT8_MAX.";
    }

    _os_log_impl(&dword_181A5C000, v2, OS_LOG_TYPE_ERROR, v3, (uint8_t *)&v7, 0xCu);
    goto LABEL_14;
  }

  return result;
}

uint64_t nw_txt_record_find_start_of_key_locked( void *a1, const char *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a1;
  if (a3) {
    *a3 = 0LL;
  }
  if (a4) {
    *a4 = 0LL;
  }
  if (a5) {
    *a5 = 0LL;
  }
  if (a6) {
    *a6 = 0LL;
  }
  size_t v12 = strnlen(a2, 0xFFuLL);
  uint64_t v17 = 0LL;
  uint64_t v18 = &v17;
  int v20 = 1;
  uint64_t v19 = 0x2020000000LL;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 3221225472LL;
  aBlock[2] = __nw_txt_record_find_start_of_key_locked_block_invoke;
  aBlock[3] = &unk_189BC15C0;
  void aBlock[4] = &v17;
  void aBlock[5] = v12;
  aBlock[6] = a2;
  aBlock[7] = a3;
  aBlock[8] = a4;
  aBlock[9] = a5;
  aBlock[10] = a6;
  os_log_type_t v13 = _Block_copy(aBlock);
  nw_txt_record_apply_internal_locked(v11, v13, 0LL);
  uint64_t v14 = *((unsigned int *)v18 + 6);

  _Block_object_dispose(&v17, 8);
  return v14;
}

void sub_182356408(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v3 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_txt_record_find_start_of_key_locked_block_invoke( uint64_t a1, const char *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a7;
  uint64_t v14 = *(void **)(a1 + 56);
  if (v14) {
    *uint64_t v14 = a6;
  }
  os_log_type_t v15 = *(const char ***)(a1 + 64);
  if (v15) {
    *os_log_type_t v15 = a2;
  }
  char v16 = *(void **)(a1 + 72);
  if (v16) {
    void *v16 = a4;
  }
  uint64_t v17 = *(void **)(a1 + 80);
  uint64_t result = 0LL;
  if (v17) {
    *uint64_t v17 = a5;
  }
  return result;
}

uint64_t nw_txt_record_apply_internal_locked(void *a1, void *a2, void *a3)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  int v6 = a2;
  id v7 = a3;
  if (!v5)
  {
    __nwlog_obj();
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    size_t v34 = "nw_txt_record_apply_internal_locked";
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v34 = "nw_txt_record_apply_internal_locked";
        _os_log_impl(&dword_181A5C000, v19, v20, "%{public}s called with null txt_record", buf, 0xCu);
      }

      goto LABEL_53;
    }

    if (!v31)
    {
      __nwlog_obj();
      uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v34 = "nw_txt_record_apply_internal_locked";
        _os_log_impl( &dword_181A5C000,  v19,  v29,  "%{public}s called with null txt_record, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_53;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v25 = type;
    BOOL v26 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        size_t v34 = "nw_txt_record_apply_internal_locked";
        _os_log_impl(&dword_181A5C000, v19, v25, "%{public}s called with null txt_record, no backtrace", buf, 0xCu);
      }

      goto LABEL_53;
    }

    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      size_t v34 = "nw_txt_record_apply_internal_locked";
      __int16 v35 = 2082;
      os_log_type_t v36 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v19,  v25,  "%{public}s called with null txt_record, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_41;
  }

  if (!v6)
  {
    __nwlog_obj();
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    size_t v34 = "nw_txt_record_apply_internal_locked";
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        size_t v34 = "nw_txt_record_apply_internal_locked";
        _os_log_impl(&dword_181A5C000, v19, v22, "%{public}s called with null applier_internal", buf, 0xCu);
      }

void sub_182356B04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_txt_record_access_key( nw_txt_record_t txt_record, const char *key, nw_txt_record_access_key_t access_value)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  nw_txt_record_t v5 = txt_record;
  nw_txt_record_access_key_t v6 = access_value;
  id v7 = (uint64_t (**)(void, void, void, void, void))v6;
  if (!v5)
  {
    __nwlog_obj();
    unint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_txt_record_access_key";
    size_t v12 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_access_key";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null txt_record", buf, 0xCu);
      }

      goto LABEL_44;
    }

    if (!v26)
    {
      __nwlog_obj();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_access_key";
        _os_log_impl( &dword_181A5C000,  v13,  v23,  "%{public}s called with null txt_record, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_44;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v19 = type[0];
    BOOL v20 = os_log_type_enabled(v13, type[0]);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_access_key";
        _os_log_impl(&dword_181A5C000, v13, v19, "%{public}s called with null txt_record, no backtrace", buf, 0xCu);
      }

      goto LABEL_44;
    }

    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_txt_record_access_key";
      __int16 v28 = 2082;
      os_log_type_t v29 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v13,  v19,  "%{public}s called with null txt_record, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_32;
  }

  if (!v6)
  {
    __nwlog_obj();
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_txt_record_access_key";
    size_t v12 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_access_key";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null access_value", buf, 0xCu);
      }

void sub_1823570F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_txt_record_set_key(nw_txt_record_t txt_record, const char *key, const uint8_t *value, size_t value_len)
{
  uint64_t v51 = *MEMORY[0x1895F89C0];
  nw_txt_record_t v7 = txt_record;
  nw_txt_record_t v8 = v7;
  if (v7)
  {
    if ((*((_BYTE *)v7 + 36) & 1) == 0)
    {
      __nwlog_obj();
      os_log_type_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v48 = "nw_txt_record_set_key";
        _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_ERROR,  "%{public}s txt_record is not of type dictionary",  buf,  0xCu);
      }

      goto LABEL_58;
    }

    if ((nw_txt_record_key_is_valid((uint64_t)key) & 1) == 0)
    {
      __nwlog_obj();
      os_log_type_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v48 = "nw_txt_record_set_key";
        _os_log_impl(&dword_181A5C000, v19, OS_LOG_TYPE_ERROR, "%{public}s invalid key", buf, 0xCu);
      }

      goto LABEL_58;
    }

    if (!value && value_len)
    {
      __nwlog_obj();
      os_log_type_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v48 = "nw_txt_record_set_key";
        _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_ERROR,  "%{public}s value_len must be 0 if value is NULL",  buf,  0xCu);
      }

      goto LABEL_58;
    }

    size_t v9 = strlen(key);
    size_t v10 = value_len + 2;
    if (!value) {
      size_t v10 = 1LL;
    }
    size_t v11 = v10 + v9;
    if (v10 + v9 >= 0x100)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v48 = "nw_txt_record_set_key";
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v45 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = (os_log_s *)(id)gLogObj;
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v48 = "nw_txt_record_set_key";
          _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s Unable to set key-value pair. The length of the 'key=pair' must be less than or equal to UINT8_MAX.",  buf,  0xCu);
        }
      }

      else if (v45)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = (os_log_s *)(id)gLogObj;
        os_log_type_t v21 = type;
        BOOL v22 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v48 = "nw_txt_record_set_key";
            __int16 v49 = 2082;
            size_t v50 = (size_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v14,  v21,  "%{public}s Unable to set key-value pair. The length of the 'key=pair' must be less than or equal to UINT8_ MAX., dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          if (!v13) {
            goto LABEL_43;
          }
          goto LABEL_42;
        }

        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v48 = "nw_txt_record_set_key";
          _os_log_impl( &dword_181A5C000,  v14,  v21,  "%{public}s Unable to set key-value pair. The length of the 'key=pair' must be less than or equal to UINT8_MA X., no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = (os_log_s *)(id)gLogObj;
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v48 = "nw_txt_record_set_key";
          _os_log_impl( &dword_181A5C000,  v14,  v30,  "%{public}s Unable to set key-value pair. The length of the 'key=pair' must be less than or equal to UINT8_MA X., backtrace limit exceeded",  buf,  0xCu);
        }
      }

      goto LABEL_40;
    }

    size_t v16 = v9;
    os_unfair_lock_lock((os_unfair_lock_t)v8 + 8);
    nw_txt_record_remove_key_locked(v8, key);
    size_t v17 = *((void *)v8 + 2);
    if (v17 + v11 <= *((void *)v8 + 3))
    {
LABEL_30:
      if (v17 == 1)
      {
        size_t v17 = 0LL;
        *((void *)v8 + 2) = 0LL;
      }

      char v26 = (_BYTE *)(*((void *)v8 + 1) + v17);
      memcpy(v26 + 1, key, v16);
      os_log_type_t v27 = &v26[v16 + 1];
      if (value)
      {
        *os_log_type_t v27 = 61;
        __int16 v28 = v27 + 1;
        memcpy(v28, value, value_len);
        os_log_type_t v27 = &v28[value_len];
      }

      *char v26 = (_BYTE)v27 - (_BYTE)v26 - 1;
      *((void *)v8 + 2) += v27 - v26;
      os_unfair_lock_unlock((os_unfair_lock_t)v8 + 8);
      char v29 = 1;
      goto LABEL_44;
    }

    size_t v18 = v17 + 256;
    if (v17 + 256 >= 0x22C5)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)v8 + 8);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v19 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v48 = "nw_txt_record_set_key";
        _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_ERROR,  "%{public}s nw_txt_record reallocate failed: max buffer length reached",  buf,  0xCu);
      }

void sub_182357A98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_txt_record_remove_key_locked(void *a1, const char *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  int v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    size_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__dst = 136446210;
    *(void *)&__dst[4] = "nw_txt_record_remove_key_locked";
    size_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v10, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        size_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)__dst = 136446210;
          *(void *)&__dst[4] = "nw_txt_record_remove_key_locked";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null txt_record", __dst, 0xCu);
        }
      }

      else if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        size_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)__dst = 136446466;
            *(void *)&__dst[4] = "nw_txt_record_remove_key_locked";
            __int16 v21 = 2082;
            BOOL v22 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v11,  v15,  "%{public}s called with null txt_record, dumping backtrace:%{public}s",  __dst,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_29;
        }

        if (v16)
        {
          *(_DWORD *)__dst = 136446210;
          *(void *)&__dst[4] = "nw_txt_record_remove_key_locked";
          _os_log_impl(&dword_181A5C000, v11, v15, "%{public}s called with null txt_record, no backtrace", __dst, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        size_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)__dst = 136446210;
          *(void *)&__dst[4] = "nw_txt_record_remove_key_locked";
          _os_log_impl( &dword_181A5C000,  v11,  v17,  "%{public}s called with null txt_record, backtrace limit exceeded",  __dst,  0xCu);
        }
      }
    }

void sub_182357E60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_txt_record_remove_key(nw_txt_record_t txt_record, const char *key)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  nw_txt_record_t v3 = txt_record;
  nw_txt_record_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    size_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__dst = 136446210;
    *(void *)&__dst[4] = "nw_txt_record_remove_key";
    size_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v11, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)__dst = 136446210;
          *(void *)&__dst[4] = "nw_txt_record_remove_key";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null txt_record", __dst, 0xCu);
        }
      }

      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        BOOL v17 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)__dst = 136446466;
            *(void *)&__dst[4] = "nw_txt_record_remove_key";
            __int16 v22 = 2082;
            uint64_t v23 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v16,  "%{public}s called with null txt_record, dumping backtrace:%{public}s",  __dst,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_33;
        }

        if (v17)
        {
          *(_DWORD *)__dst = 136446210;
          *(void *)&__dst[4] = "nw_txt_record_remove_key";
          _os_log_impl(&dword_181A5C000, v12, v16, "%{public}s called with null txt_record, no backtrace", __dst, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)__dst = 136446210;
          *(void *)&__dst[4] = "nw_txt_record_remove_key";
          _os_log_impl( &dword_181A5C000,  v12,  v18,  "%{public}s called with null txt_record, backtrace limit exceeded",  __dst,  0xCu);
        }
      }
    }

void sub_182358270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

size_t nw_txt_record_get_key_count(nw_txt_record_t txt_record)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  nw_txt_record_t v1 = txt_record;
  nw_txt_record_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v20 = "nw_txt_record_get_key_count";
    size_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v9, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        size_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v20 = "nw_txt_record_get_key_count";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null txt_record", buf, 0xCu);
        }
      }

      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        size_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v20 = "nw_txt_record_get_key_count";
            __int16 v21 = 2082;
            __int16 v22 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v14,  "%{public}s called with null txt_record, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_33;
        }

        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v20 = "nw_txt_record_get_key_count";
          _os_log_impl(&dword_181A5C000, v10, v14, "%{public}s called with null txt_record, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        size_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v20 = "nw_txt_record_get_key_count";
          _os_log_impl( &dword_181A5C000,  v10,  v16,  "%{public}s called with null txt_record, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

BOOL nw_txt_record_access_bytes(nw_txt_record_t txt_record, nw_txt_record_access_bytes_t access_bytes)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  nw_txt_record_t v3 = txt_record;
  nw_txt_record_access_bytes_t v4 = access_bytes;
  BOOL v5 = (uint64_t (**)(void, void, void))v4;
  if (v3)
  {
    if (v4)
    {
      os_unfair_lock_lock((os_unfair_lock_t)v3 + 8);
      char v6 = v5[2](v5, *((void *)v3 + 1), *((void *)v3 + 2));
      os_unfair_lock_unlock((os_unfair_lock_t)v3 + 8);
      goto LABEL_4;
    }

    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v24 = "nw_txt_record_access_bytes";
    size_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        size_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v24 = "nw_txt_record_access_bytes";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null access_bytes", buf, 0xCu);
        }

void sub_182358AAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_txt_record_apply(nw_txt_record_t txt_record, nw_txt_record_applier_t applier)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  nw_txt_record_t v3 = txt_record;
  nw_txt_record_applier_t v4 = applier;
  BOOL v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v25 = "nw_txt_record_apply";
    size_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      size_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_txt_record_apply";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null txt_record", buf, 0xCu);
      }

      goto LABEL_40;
    }

    if (!v22)
    {
      __nwlog_obj();
      size_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_txt_record_apply";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null txt_record, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_40;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    size_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v16 = type;
    BOOL v17 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_txt_record_apply";
        _os_log_impl(&dword_181A5C000, v10, v16, "%{public}s called with null txt_record, no backtrace", buf, 0xCu);
      }

      goto LABEL_40;
    }

    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v25 = "nw_txt_record_apply";
      __int16 v26 = 2082;
      uint64_t v27 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v10,  v16,  "%{public}s called with null txt_record, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_28;
  }

  if (!v4)
  {
    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v25 = "nw_txt_record_apply";
    size_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      size_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_txt_record_apply";
        _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null applier", buf, 0xCu);
      }

void sub_182358FF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_txt_record_apply_block_invoke( uint64_t a1, const void *a2, size_t a3, const void *a4, size_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v13 = a8;
  if (a3 <= 0xFF) {
    size_t v14 = 256 - a3;
  }
  else {
    size_t v14 = 0LL;
  }
  bzero(&__dst[a3], v14);
  memcpy(__dst, a2, a3);
  __dst[a3] = 0;
  memset(v17, 0, 255);
  if (a5 && (_DWORD)a7 != 2) {
    memcpy(v17, a4, a5);
  }
  uint64_t v15 = (*((uint64_t (**)(id, _BYTE *, uint64_t, _OWORD *, size_t))v13 + 2))(v13, __dst, a7, v17, a5);

  return v15;
}

void sub_182359130(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL __nw_txt_record_is_equal_block_invoke( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v14 = 0LL;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000LL;
  char v17 = 0;
  v12[0] = MEMORY[0x1895F87A8];
  v12[1] = 3221225472LL;
  v12[2] = __nw_txt_record_is_equal_block_invoke_2;
  v12[3] = &unk_189BC1570;
  int v13 = a7;
  v12[6] = a2;
  v12[7] = a5;
  v12[8] = a4;
  void v12[4] = &v14;
  void v12[5] = a3;
  uint64_t v8 = _Block_copy(v12);
  nw_txt_record_apply_internal_locked(*(void **)(a1 + 32), v8, 0LL);
  int v9 = *((unsigned __int8 *)v15 + 24);
  if (!*((_BYTE *)v15 + 24)) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
  }
  BOOL v10 = v9 != 0;

  _Block_object_dispose(&v14, 8);
  return v10;
}

void sub_182359210(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_txt_record_is_equal_block_invoke_2( uint64_t a1, const char *a2, size_t a3, const void *a4, size_t a5, uint64_t a6, int a7)
{
  if (*(_DWORD *)(a1 + 72) != a7
    || *(void *)(a1 + 40) != a3
    || strncasecmp(*(const char **)(a1 + 48), a2, a3)
    || a7 == 4 && (*(void *)(a1 + 56) != a5 || memcmp(*(const void **)(a1 + 64), a4, a5)))
  {
    return 1LL;
  }

  uint64_t result = 0LL;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  return result;
}

uint64_t nw_txt_record_get_key(void *a1, const char *a2, void *a3, int *a4)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  uint64_t v7 = a1;
  uint64_t v8 = v7;
  if (!v7)
  {
    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
    int v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
        _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null txt_record", buf, 0xCu);
      }

      goto LABEL_76;
    }

    if (!v35)
    {
      __nwlog_obj();
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
        _os_log_impl( &dword_181A5C000,  v14,  v31,  "%{public}s called with null txt_record, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_76;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v23 = type;
    BOOL v24 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
        _os_log_impl(&dword_181A5C000, v14, v23, "%{public}s called with null txt_record, no backtrace", buf, 0xCu);
      }

      goto LABEL_76;
    }

    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
      __int16 v38 = 2082;
      BOOL v39 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v14,  v23,  "%{public}s called with null txt_record, dumping backtrace:%{public}s",  buf,  0x16u);
    }

void sub_182359BD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_txt_record_get_key_value_result(unsigned __int8 *a1, uint64_t a2)
{
  if (!a1) {
    return 1LL;
  }
  unint64_t v2 = *a1;
  if (v2 == a2) {
    return 2LL;
  }
  if (a2 + 1 == v2) {
    return 3LL;
  }
  if (a2 + 1 >= v2) {
    __assert_rtn("nw_txt_record_get_key_value_result", "txt_record.cpp", 758, "false");
  }
  return 4LL;
}

nw_txt_record_t nw_txt_record_copy(nw_txt_record_t txt_record)
{
  if (txt_record) {
    return nw_txt_record_create_with_bytes(*((const uint8_t **)txt_record + 1), *((void *)txt_record + 2));
  }
  return txt_record;
}

uint64_t nw_txt_record_get_bytes(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t nw_txt_record_get_length(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

BOOL nw_activity_is_global_parent(void *a1)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  unint64_t v2 = v1;
  if (v1)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v21 = 0;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_activity_is_global_parent_block_invoke;
    aBlock[3] = &unk_189BC9210;
    uint64_t v16 = buf;
    id v15 = v1;
    nw_txt_record_t v3 = _Block_copy(aBlock);
    os_log_type_t v17 = v3;
    nw_synchronize<nw::unfair_mutex,void({block_pointer} {__strong})(void)>( (os_unfair_lock_s *)&global_parent_lock,  (uint64_t)&v17);

    BOOL v4 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  char v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_activity_is_global_parent";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v7, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_activity_is_global_parent";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null activity", buf, 0xCu);
      }
    }

    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_activity_is_global_parent";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_activity_is_global_parent";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_activity_is_global_parent";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18235A7DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_activity_is_global_parent_block_invoke(uint64_t a1)
{
  uint64_t result = nw_activity_is_equal(*(void **)(a1 + 32), (void *)global_parent);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

uint64_t nw_activity_is_equal(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3 && v4 && !uuid_is_null((const unsigned __int8 *)v3 + 8) && !uuid_is_null((const unsigned __int8 *)v5 + 8))
  {
    if (*((void *)v3 + 1) != *((void *)v5 + 1))
    {
      uint64_t v7 = 0LL;
      goto LABEL_9;
    }

    BOOL v6 = *((void *)v3 + 2) == *((void *)v5 + 2);
  }

  else
  {
    BOOL v6 = v3 == v5;
  }

  uint64_t v7 = v6;
LABEL_9:

  return v7;
}

void sub_18235A8DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *nw_activity_reporting_strategy_to_string(unsigned int a1)
{
  if (a1 > 3) {
    return "invalid";
  }
  else {
    return off_189BC1740[a1];
  }
}

const char *nw_activity_completion_reason_to_string(int a1)
{
  else {
    return off_189BC2D88[a1 - 1];
  }
}

const char *nw_activity_domain_and_label_to_string(int a1, int a2)
{
  switch(a1)
  {
    case 11:
      else {
        return off_189BC1C28[a2 - 1];
      }
    case 12:
      else {
        return off_189BC1C70[a2 - 1];
      }
    case 13:
      else {
        return off_189BC1C90[a2 - 1];
      }
    case 14:
      else {
        return off_189BC1CA8[a2 - 1];
      }
    case 15:
      else {
        return off_189BC1D10[a2 - 1];
      }
    case 16:
      else {
        return off_189BC1D60[a2 - 1];
      }
    case 17:
      else {
        return off_189BC1D78[a2 - 1];
      }
    case 18:
      else {
        return off_189BC1DA0[a2 - 1];
      }
    case 19:
      id v3 = "cloudkit:invalid";
      id v4 = "cloudkit:invalid_max";
      goto LABEL_97;
    case 20:
      id v3 = "mmcs:invalid";
      id v4 = "mmcs:invalid_max";
      goto LABEL_97;
    case 21:
      else {
        return off_189BC1E30[a2 - 1];
      }
    case 22:
      else {
        return off_189BC1EF0[a2 - 1];
      }
    case 23:
      else {
        return off_189BC1F28[a2 - 1];
      }
    case 24:
      else {
        return off_189BC1FF0[a2 - 1];
      }
    case 25:
      else {
        return off_189BC2008[a2 - 1];
      }
    case 26:
      else {
        return off_189BC2020[a2 - 1];
      }
    case 27:
      else {
        return off_189BC2038[a2 - 1];
      }
    case 28:
      else {
        return off_189BC2250[a2 - 1];
      }
    case 29:
      else {
        return off_189BC2468[a2 - 1];
      }
    case 30:
      else {
        return off_189BC2680[a2 - 1];
      }
    case 31:
      id v5 = "captive:invalid";
      if (a2 == 1) {
        id v5 = "captive:captive_probe";
      }
      BOOL v6 = "captive:invalid_max";
      goto LABEL_75;
    case 32:
      else {
        return off_189BC26A8[a2 - 1];
      }
    case 33:
      else {
        return off_189BC2710[a2 - 1];
      }
    case 34:
      else {
        return off_189BC2730[a2 - 1];
      }
    case 35:
      else {
        return off_189BC2790[a2 - 1];
      }
    case 36:
      else {
        return off_189BC27A8[a2 - 1];
      }
    case 37:
      else {
        return off_189BC2800[a2 - 1];
      }
    case 38:
      else {
        return off_189BC2870[a2 - 1];
      }
    case 39:
      id v5 = "telephony_service:invalid";
      if (a2 == 1) {
        id v5 = "telephony_service:session";
      }
      BOOL v6 = "telephony_service:invalid_max";
      goto LABEL_75;
    case 40:
      else {
        return off_189BC2890[a2 - 1];
      }
    case 41:
      else {
        return off_189BC28D0[a2 - 1];
      }
    case 42:
      else {
        return off_189BC2908[a2 - 1];
      }
    case 43:
      else {
        return off_189BC2928[a2 - 1];
      }
    case 44:
      else {
        return off_189BC29B0[a2 - 1];
      }
    case 45:
      else {
        return off_189BC29F0[a2 - 1];
      }
    case 46:
      id v5 = "soundboard:invalid";
      if (a2 == 1) {
        id v5 = "soundboard:stereo_pair_volume_sync";
      }
      BOOL v6 = "soundboard:invalid_max";
LABEL_75:
      if (a2 == 2) {
        uint64_t result = v6;
      }
      else {
        uint64_t result = v5;
      }
      break;
    case 47:
      else {
        uint64_t result = off_189BC2A40[a2 - 1];
      }
      break;
    case 48:
      else {
        uint64_t result = off_189BC2AB0[a2 - 1];
      }
      break;
    case 49:
      else {
        uint64_t result = off_189BC2AD0[a2 - 1];
      }
      break;
    case 50:
      else {
        uint64_t result = off_189BC2B28[a2 - 1];
      }
      break;
    case 51:
      else {
        uint64_t result = off_189BC2B40[a2 - 1];
      }
      break;
    case 52:
      else {
        uint64_t result = off_189BC2B58[a2 - 1];
      }
      break;
    case 53:
      else {
        uint64_t result = off_189BC2B98[a2 - 1];
      }
      break;
    case 54:
      else {
        uint64_t result = off_189BC2BC8[a2 - 1];
      }
      break;
    case 55:
      else {
        uint64_t result = off_189BC2BF0[a2 - 1];
      }
      break;
    case 56:
      id v3 = "push:invalid";
      id v4 = "push:invalid_max";
LABEL_97:
      if (a2 == 1) {
        uint64_t result = v4;
      }
      else {
        uint64_t result = v3;
      }
      break;
    case 57:
      else {
        uint64_t result = off_189BC2C18[a2 - 1];
      }
      break;
    case 58:
      else {
        uint64_t result = off_189BC2C30[a2 - 1];
      }
      break;
    case 59:
      else {
        uint64_t result = off_189BC2CE0[a2 - 1];
      }
      break;
    case 60:
      else {
        uint64_t result = off_189BC2D08[a2 - 1];
      }
      break;
    case 61:
      else {
        uint64_t result = off_189BC2D68[a2 - 1];
      }
      break;
    default:
      else {
        uint64_t v7 = "reserved:reserved";
      }
      else {
        uint64_t result = "experimental:experimental";
      }
      break;
  }

  return result;
}

void sub_18235B578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_activity_is_activated(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  unint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[140] >> 2) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v16 = "nw_activity_is_activated";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_activity_is_activated";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v16 = "nw_activity_is_activated";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_activity_is_activated";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_activity_is_activated";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

char *nw_activity_create_from_token(_OWORD *a1)
{
  return -[NWConcrete_nw_activity initWithToken:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_activity), a1);
}

char *nw_activity_create_from_xpc_token(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  unint64_t v2 = v1;
  if (v1)
  {
    if (object_getClass(v1) == (Class)MEMORY[0x1895F92F8])
    {
      *(_OWORD *)buf = *(_OWORD *)xpc_uuid_get_bytes(v2);
      uint64_t v3 = -[NWConcrete_nw_activity initWithToken:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_activity), buf);
      goto LABEL_4;
    }

    __nwlog_obj();
    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_activity_create_from_xpc_token";
    BOOL v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_activity_create_from_xpc_token";
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null (xpc_get_type(token) == (&_xpc_type_uuid))",  buf,  0xCu);
        }

void sub_18235BD24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_activity_create_from_xpc_object(void *a1)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  unint64_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    BOOL v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v43 = "nw_activity_create_from_xpc_object";
    os_log_type_t v16 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v41.receiver) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (LOBYTE(v41.receiver) == 17)
    {
      __nwlog_obj();
      os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t receiver = (os_log_type_t)v41.receiver;
      if (os_log_type_enabled(v17, (os_log_type_t)v41.receiver))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v43 = "nw_activity_create_from_xpc_object";
        _os_log_impl(&dword_181A5C000, v17, receiver, "%{public}s called with null object", buf, 0xCu);
      }
    }

    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = (os_log_type_t)v41.receiver;
      BOOL v29 = os_log_type_enabled(v17, (os_log_type_t)v41.receiver);
      if (backtrace_string)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v43 = "nw_activity_create_from_xpc_object";
          __int16 v44 = 2082;
          char v45 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v17,  v28,  "%{public}s called with null object, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v16) {
          goto LABEL_81;
        }
        goto LABEL_80;
      }

      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v43 = "nw_activity_create_from_xpc_object";
        _os_log_impl(&dword_181A5C000, v17, v28, "%{public}s called with null object, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v36 = (os_log_type_t)v41.receiver;
      if (os_log_type_enabled(v17, (os_log_type_t)v41.receiver))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v43 = "nw_activity_create_from_xpc_object";
        _os_log_impl( &dword_181A5C000,  v17,  v36,  "%{public}s called with null object, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_78;
  }

  if (object_getClass(v1) != (Class)MEMORY[0x1895F9250])
  {
    __nwlog_obj();
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v43 = "nw_activity_create_from_xpc_object";
    os_log_type_t v16 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v41.receiver) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (LOBYTE(v41.receiver) == 17)
    {
      __nwlog_obj();
      os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = (os_log_type_t)v41.receiver;
      if (os_log_type_enabled(v17, (os_log_type_t)v41.receiver))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v43 = "nw_activity_create_from_xpc_object";
        _os_log_impl( &dword_181A5C000,  v17,  v20,  "%{public}s called with null (xpc_get_type(object) == (&_xpc_type_dictionary))",  buf,  0xCu);
      }
    }

    else if (type)
    {
      BOOL v30 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v31 = (os_log_type_t)v41.receiver;
      BOOL v32 = os_log_type_enabled(v17, (os_log_type_t)v41.receiver);
      if (v30)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v43 = "nw_activity_create_from_xpc_object";
          __int16 v44 = 2082;
          char v45 = v30;
          _os_log_impl( &dword_181A5C000,  v17,  v31,  "%{public}s called with null (xpc_get_type(object) == (&_xpc_type_dictionary)), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v30);
LABEL_79:
        if (!v16)
        {
LABEL_81:
          uint64_t v3 = 0LL;
          goto LABEL_30;
        }

void sub_18235C7B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *nw_activity_create_retry(void *a1)
{
  uint64_t v58 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    unint64_t v2 = objc_alloc(&OBJC_CLASS___NWConcrete_nw_activity);
    id v3 = v1;
    if (!v2)
    {
LABEL_89:
      BOOL v29 = 0LL;
LABEL_44:

      goto LABEL_45;
    }

    v52.os_log_type_t receiver = v2;
    v52.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_activity;
    id v4 = objc_msgSendSuper2(&v52, sel_init);
    id v5 = v4;
    if (v4)
    {
      v4[29] = *((_DWORD *)v3 + 29);
      v4[28] = *((_DWORD *)v3 + 28);
      v4[33] = *((_DWORD *)v3 + 33);
      char v6 = *((_BYTE *)v4 + 140) | 1;
      *((_BYTE *)v4 + 140) = v6;
      *((_BYTE *)v4 + 140) = *((_BYTE *)v3 + 140) & 2 | v6 & 0xFD;
      id v7 = v3;
      char v8 = (void *)v5[7];
      if ((v5[8] & 1) != 0 && v8)
      {
        v5[7] = 0LL;

        char v8 = (void *)v5[7];
      }

      v5[7] = 0LL;

      char v9 = (void *)v5[7];
      v5[7] = v7;

      *((_BYTE *)v5 + 64) |= 1u;
      id v10 = v7;
      BOOL v11 = (*((_BYTE *)v3 + 140) & 4) == 0;

      if (v11)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v12 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        BOOL v54 = "-[NWConcrete_nw_activity initWithOriginal:]";
        BOOL v13 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v50 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v14 = (os_log_s *)(id)gLogObj;
          os_log_type_t v15 = type;
          if (os_log_type_enabled(v14, type))
          {
            *(_DWORD *)buf = 136446210;
            BOOL v54 = "-[NWConcrete_nw_activity initWithOriginal:]";
            _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s BUG IN CLIENT OF LIBNETWORK: Cannot create retry of a non-activated activity",  buf,  0xCu);
          }

void sub_18235D214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_activity_deep_is_equal(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3 && v4 && !uuid_is_null((const unsigned __int8 *)v3 + 8) && !uuid_is_null((const unsigned __int8 *)v5 + 8))
  {
    if (*((_DWORD *)v3 + 29) != *((_DWORD *)v5 + 29)
      || *((_DWORD *)v3 + 28) != *((_DWORD *)v5 + 28)
      || *((void *)v3 + 3) != *((void *)v5 + 3)
      || *((_DWORD *)v3 + 33) != *((_DWORD *)v5 + 33)
      || *((_DWORD *)v3 + 34) != *((_DWORD *)v5 + 34)
      || ((*((_BYTE *)v5 + 140) ^ *((_BYTE *)v3 + 140)) & 0xD) != 0
      || (char v9 = (void *)*((void *)v5 + 7),
          id v10 = *((id *)v3 + 7),
          LOBYTE(v9) = nw_activity_is_equal(v10, v9),
          v10,
          (v9 & 1) == 0)
      || *((void *)v3 + 1) != *((void *)v5 + 1)
      || *((void *)v3 + 2) != *((void *)v5 + 2))
    {
      uint64_t v7 = 0LL;
      goto LABEL_9;
    }

    BOOL v6 = *((void *)v3 + 4) == *((void *)v5 + 4);
  }

  else
  {
    BOOL v6 = v3 == v5;
  }

  uint64_t v7 = v6;
LABEL_9:

  return v7;
}

void sub_18235D384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_activity_has_global_investigation_identifier()
{
  return nw_activity_get_investigation_id_from_defaults() != 0;
}

int64_t nw_activity_get_investigation_id_from_defaults(void)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int64_t int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_activity_investigation_id, 0LL);
  id v1 = (const char *)nw_setting_activity_investigation_id_start_time;
  networkd_settings_init();
  if (!sCachedSettings)
  {
LABEL_11:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v7 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      int v12 = 136446210;
      BOOL v13 = "nw_activity_get_investigation_id_from_defaults";
      char v8 = "%{public}s Investigation ID missing start time, allowing use";
      char v9 = v7;
      uint32_t v10 = 12;
LABEL_13:
      _os_log_impl(&dword_181A5C000, v9, OS_LOG_TYPE_DEBUG, v8, (uint8_t *)&v12, v10);
    }

BOOL nw_activity_should_write_metric_stream_to_log()
{
  return networkd_settings_get_BOOL((const char *)nw_setting_activity_write_metric_stream_to_log);
}

uint64_t nw_activity_should_report_to_destination(int a1)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    unint64_t v19 = "nw_activity_should_report_to_destination";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v19 = "nw_activity_should_report_to_destination";
        uint32_t v10 = "%{public}s called with null destination";
LABEL_37:
        _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
      }
    }

    else
    {
      if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v9 = type;
        BOOL v14 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            unint64_t v19 = "nw_activity_should_report_to_destination";
            __int16 v20 = 2082;
            uint32_t v21 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null destination, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_39;
        }

        if (!v14) {
          goto LABEL_38;
        }
        *(_DWORD *)buf = 136446210;
        unint64_t v19 = "nw_activity_should_report_to_destination";
        uint32_t v10 = "%{public}s called with null destination, no backtrace";
        goto LABEL_37;
      }

      __nwlog_obj();
      char v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v19 = "nw_activity_should_report_to_destination";
        uint32_t v10 = "%{public}s called with null destination, backtrace limit exceeded";
        goto LABEL_37;
      }
    }

const char *nw_activity_domain_to_string(int a1)
{
  else {
    unint64_t v2 = "reserved";
  }
  else {
    return "experimental";
  }
}

BOOL nw_activity_domain_is_valid(int a1)
{
  return (a1 - 900) < 0x64 || (a1 - 11) < 0x33;
}

os_signpost_id_t nw_activity_signpost_id_fallback(void)
{
  if (__nwlog_activity_log::onceToken != -1) {
    dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
  }
  unsigned int v0 = (os_log_s *)(id)gactivityLogObj;
  os_signpost_id_t v1 = os_signpost_id_generate(v0);

  return v1;
}

void __nw_activity_activate_block_invoke_51(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  os_signpost_id_t v1 = (NWConcrete_nw_activity *)*(id *)(a1 + 32);
  unint64_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    BOOL v14 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v31.investigation_identifier) = 136446210;
    *(unint64_t *)((char *)&v31.investigation_identifier + 4) = (unint64_t)"nw_activity_report_if_selected";
    unint64_t v15 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(buf) = 16;
    LOBYTE(v30) = 0;
    if (buf == 17)
    {
      __nwlog_obj();
      char v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = buf;
      if (os_log_type_enabled(v16, (os_log_type_t)buf))
      {
        LODWORD(v31.investigation_identifier) = 136446210;
        *(unint64_t *)((char *)&v31.investigation_identifier + 4) = (unint64_t)"nw_activity_report_if_selected";
        _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null activity", (uint8_t *)&v31, 0xCu);
      }
    }

    else if ((_BYTE)v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = buf;
      BOOL v22 = os_log_type_enabled(v16, (os_log_type_t)buf);
      if (backtrace_string)
      {
        if (v22)
        {
          LODWORD(v31.investigation_identifier) = 136446466;
          *(unint64_t *)((char *)&v31.investigation_identifier + 4) = (unint64_t)"nw_activity_report_if_selected";
          LOWORD(v31.label) = 2082;
          *(void *)((char *)&v31.label + 2) = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v16,  v21,  "%{public}s called with null activity, dumping backtrace:%{public}s",  (uint8_t *)&v31,  0x16u);
        }

        free(backtrace_string);
LABEL_73:
        if (!v15) {
          goto LABEL_39;
        }
        goto LABEL_74;
      }

      if (v22)
      {
        LODWORD(v31.investigation_identifier) = 136446210;
        *(unint64_t *)((char *)&v31.investigation_identifier + 4) = (unint64_t)"nw_activity_report_if_selected";
        _os_log_impl( &dword_181A5C000,  v16,  v21,  "%{public}s called with null activity, no backtrace",  (uint8_t *)&v31,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = buf;
      if (os_log_type_enabled(v16, (os_log_type_t)buf))
      {
        LODWORD(v31.investigation_identifier) = 136446210;
        *(unint64_t *)((char *)&v31.investigation_identifier + 4) = (unint64_t)"nw_activity_report_if_selected";
        _os_log_impl( &dword_181A5C000,  v16,  v26,  "%{public}s called with null activity, backtrace limit exceeded",  (uint8_t *)&v31,  0xCu);
      }
    }

void sub_18235E3C4(_Unwind_Exception *a1)
{
  if (v3) {

  }
  _Unwind_Resume(a1);
}

void nw_activity_fill_out_activity_report(NWConcrete_nw_activity *a1, nw_activity_report_s *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int64_t v3 = a1;
  char v4 = v3;
  if (!a2)
  {
    __nwlog_obj();
    uint32_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v21 = "nw_activity_fill_out_activity_report";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v11, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v21 = "nw_activity_fill_out_activity_report";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null report", buf, 0xCu);
        }
      }

      else if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v21 = "nw_activity_fill_out_activity_report";
            __int16 v22 = 2082;
            os_log_type_t v23 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null report, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_29;
        }

        if (v16)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v21 = "nw_activity_fill_out_activity_report";
          _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null report, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v21 = "nw_activity_fill_out_activity_report";
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null report, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_18235E734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *nw_activity_create_activity_dictionary(NWConcrete_nw_activity *a1, nw_activity_report_s *a2)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  int64_t v3 = a1;
  if (a2)
  {
    xpc_object_t v4 = xpc_dictionary_create(0LL, 0LL, 0LL);
    __uint64_t v5 = v4;
    *(void *)os_log_type_t type = v4;
    char v25 = -1;
    if (v4)
    {
      xpc_dictionary_set_uint64(v4, "activityDomain", a2->domain);
      xpc_dictionary_set_uint64(v5, "activityLabel", a2->label);
      if (!uuid_is_null(a2->activity_uuid))
      {
        memset(out, 0, sizeof(out));
        uuid_unparse(a2->activity_uuid, out);
        xpc_dictionary_set_string(v5, "activityUUID", out);
      }

      if (!uuid_is_null(a2->parent_activity_uuid))
      {
        memset(out, 0, sizeof(out));
        uuid_unparse(a2->parent_activity_uuid, out);
        xpc_dictionary_set_string(v5, "parentActivityUUID", out);
      }

      xpc_dictionary_set_BOOL(v5, "isRetry", *((_BYTE *)a2 + 304) & 1);
      if (a2->bundle_id[0]) {
        xpc_dictionary_set_string(v5, "bundleID", a2->bundle_id);
      }
      xpc_dictionary_set_uint64(v5, "investigationID", a2->investigation_identifier);
      goto LABEL_10;
    }

    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)uuid_string_t out = 136446210;
    *(void *)&out[4] = "nw_activity_create_activity_dictionary";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v26 = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (v26 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = v26;
      if (os_log_type_enabled(v13, v26))
      {
        *(_DWORD *)uuid_string_t out = 136446210;
        *(void *)&out[4] = "nw_activity_create_activity_dictionary";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s failed to allocate dictionary", (uint8_t *)out, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = v26;
      BOOL v20 = os_log_type_enabled(v13, v26);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)uuid_string_t out = 136446466;
          *(void *)&out[4] = "nw_activity_create_activity_dictionary";
          *(_WORD *)&out[12] = 2082;
          *(void *)&out[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v19,  "%{public}s failed to allocate dictionary, dumping backtrace:%{public}s",  (uint8_t *)out,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_46;
      }

      if (v20)
      {
        *(_DWORD *)uuid_string_t out = 136446210;
        *(void *)&out[4] = "nw_activity_create_activity_dictionary";
        _os_log_impl( &dword_181A5C000,  v13,  v19,  "%{public}s failed to allocate dictionary, no backtrace",  (uint8_t *)out,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = v26;
      if (os_log_type_enabled(v13, v26))
      {
        *(_DWORD *)uuid_string_t out = 136446210;
        *(void *)&out[4] = "nw_activity_create_activity_dictionary";
        _os_log_impl( &dword_181A5C000,  v13,  v22,  "%{public}s failed to allocate dictionary, backtrace limit exceeded",  (uint8_t *)out,  0xCu);
      }
    }

LABEL_46:
    if (v12) {
      free(v12);
    }
    goto LABEL_10;
  }

  __nwlog_obj();
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)uuid_string_t out = 136446210;
  *(void *)&out[4] = "nw_activity_create_activity_dictionary";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t v26 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v8, type, &v26))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)uuid_string_t out = 136446210;
        *(void *)&out[4] = "nw_activity_create_activity_dictionary";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null activity_report", (uint8_t *)out, 0xCu);
      }
    }

    else if (v26)
    {
      os_log_type_t v15 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type[0];
      BOOL v17 = os_log_type_enabled(v9, type[0]);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)uuid_string_t out = 136446466;
          *(void *)&out[4] = "nw_activity_create_activity_dictionary";
          *(_WORD *)&out[12] = 2082;
          *(void *)&out[14] = v15;
          _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null activity_report, dumping backtrace:%{public}s",  (uint8_t *)out,  0x16u);
        }

        free(v15);
        goto LABEL_40;
      }

      if (v17)
      {
        *(_DWORD *)uuid_string_t out = 136446210;
        *(void *)&out[4] = "nw_activity_create_activity_dictionary";
        _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null activity_report, no backtrace",  (uint8_t *)out,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)uuid_string_t out = 136446210;
        *(void *)&out[4] = "nw_activity_create_activity_dictionary";
        _os_log_impl( &dword_181A5C000,  v9,  v21,  "%{public}s called with null activity_report, backtrace limit exceeded",  (uint8_t *)out,  0xCu);
      }
    }
  }

void sub_18235ECEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _Unwind_Resume(a1);
}

BOOL nw_activity_metric_object_is_valid(void *a1, unsigned int a2, const char **a3)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  if (v5)
  {
    if (__nwlog_activity_log::onceToken != -1) {
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
    }
    id v6 = (os_log_s *)(id)gactivityLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      Class Class = object_getClass(v5);
      uint64_t v8 = "";
      *(_DWORD *)int buf = 136315906;
      if (!a2) {
        uint64_t v8 = "top level ";
      }
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&_BYTE buf[12] = 2112;
      *(void *)&buf[14] = Class;
      *(_WORD *)&_BYTE buf[22] = 1024;
      unsigned int v35 = a2;
      __int16 v36 = 2112;
      id v37 = v5;
      _os_log_impl(&dword_181A5C000, v6, OS_LOG_TYPE_DEBUG, "Inspecting %s%@ at depth %u: %@", buf, 0x26u);
    }

    *(void *)int buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    LOBYTE(v35) = 1;
    if (a2 < 0xB)
    {
      os_log_type_t v11 = (objc_class *)MEMORY[0x1895F9250];
      if (a2 || object_getClass(v5) == v11)
      {
        if (object_getClass(v5) == v11)
        {
          nw_append_format(a3, "{");
          *(void *)BOOL v32 = 0LL;
          *(void *)&v32[8] = v32;
          *(void *)&v32[16] = 0x2020000000LL;
          char v33 = 1;
          applier[0] = MEMORY[0x1895F87A8];
          applier[1] = 3221225472LL;
          applier[2] = __nw_activity_metric_object_is_valid_block_invoke;
          applier[3] = &unk_189BC1658;
          unsigned int v30 = a2;
          void applier[4] = v32;
          applier[5] = buf;
          applier[6] = a3;
          xpc_dictionary_apply(v5, applier);
          nw_append_format(a3, "}");
          _Block_object_dispose(v32, 8);
        }

        else if (object_getClass(v5) == (Class)MEMORY[0x1895F9220])
        {
          nw_append_format(a3, "[");
          v27[0] = MEMORY[0x1895F87A8];
          v27[1] = 3221225472LL;
          v27[2] = __nw_activity_metric_object_is_valid_block_invoke_70;
          v27[3] = &unk_189BC1680;
          unsigned int v28 = a2;
          void v27[4] = buf;
          v27[5] = a3;
          xpc_array_apply(v5, v27);
          nw_append_format(a3, "]");
        }

        else if (object_getClass(v5) == (Class)MEMORY[0x1895F92E8])
        {
          if (gLogDatapath)
          {
            if (__nwlog_activity_log::onceToken != -1) {
              dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
            }
            os_log_type_t v22 = (os_log_s *)(id)gactivityLogObj;
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)BOOL v32 = 136446466;
              *(void *)&void v32[4] = "nw_activity_metric_object_is_valid";
              *(_WORD *)&v32[12] = 2112;
              *(void *)&v32[14] = object_getClass(v5);
              _os_log_impl(&dword_181A5C000, v22, OS_LOG_TYPE_DEBUG, "%{public}s %@ is allowed", v32, 0x16u);
            }
          }

          xpc_string_get_string_ptr(v5);
          nw_append_format(a3, "%s");
        }

        else if (object_getClass(v5) == (Class)MEMORY[0x1895F9280])
        {
          if (gLogDatapath)
          {
            if (__nwlog_activity_log::onceToken != -1) {
              dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
            }
            char v23 = (os_log_s *)(id)gactivityLogObj;
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)BOOL v32 = 136446466;
              *(void *)&void v32[4] = "nw_activity_metric_object_is_valid";
              *(_WORD *)&v32[12] = 2112;
              *(void *)&v32[14] = object_getClass(v5);
              _os_log_impl(&dword_181A5C000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %@ is allowed", v32, 0x16u);
            }
          }

          xpc_int64_get_value(v5);
          nw_append_format(a3, "%lld");
        }

        else if (object_getClass(v5) == (Class)MEMORY[0x1895F92F0])
        {
          if (gLogDatapath)
          {
            if (__nwlog_activity_log::onceToken != -1) {
              dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
            }
            uint64_t v24 = (os_log_s *)(id)gactivityLogObj;
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)BOOL v32 = 136446466;
              *(void *)&void v32[4] = "nw_activity_metric_object_is_valid";
              *(_WORD *)&v32[12] = 2112;
              *(void *)&v32[14] = object_getClass(v5);
              _os_log_impl(&dword_181A5C000, v24, OS_LOG_TYPE_DEBUG, "%{public}s %@ is allowed", v32, 0x16u);
            }
          }

          xpc_uint64_get_value(v5);
          nw_append_format(a3, "%llu");
        }

        else if (object_getClass(v5) == (Class)MEMORY[0x1895F9258])
        {
          if (gLogDatapath)
          {
            if (__nwlog_activity_log::onceToken != -1) {
              dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
            }
            char v25 = (os_log_s *)(id)gactivityLogObj;
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)BOOL v32 = 136446466;
              *(void *)&void v32[4] = "nw_activity_metric_object_is_valid";
              *(_WORD *)&v32[12] = 2112;
              *(void *)&v32[14] = object_getClass(v5);
              _os_log_impl(&dword_181A5C000, v25, OS_LOG_TYPE_DEBUG, "%{public}s %@ is allowed", v32, 0x16u);
            }
          }

          xpc_double_get_value(v5);
          nw_append_format(a3, "%f");
        }

        else if (object_getClass(v5) == (Class)MEMORY[0x1895F9228])
        {
          if (gLogDatapath)
          {
            if (__nwlog_activity_log::onceToken != -1) {
              dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
            }
            os_log_type_t v26 = (os_log_s *)(id)gactivityLogObj;
            if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)BOOL v32 = 136446466;
              *(void *)&void v32[4] = "nw_activity_metric_object_is_valid";
              *(_WORD *)&v32[12] = 2112;
              *(void *)&v32[14] = object_getClass(v5);
              _os_log_impl(&dword_181A5C000, v26, OS_LOG_TYPE_DEBUG, "%{public}s %@ is allowed", v32, 0x16u);
            }
          }

          xpc_BOOL_get_value(v5);
          nw_append_format(a3, "%s");
        }

        else
        {
          if (__nwlog_activity_log::onceToken != -1) {
            dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
          }
          BOOL v12 = (os_log_s *)(id)gactivityLogObj;
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)BOOL v32 = 138412546;
            *(void *)&void v32[4] = v5;
            *(_WORD *)&v32[12] = 2112;
            *(void *)&v32[14] = object_getClass(v5);
            _os_log_impl(&dword_181A5C000, v12, OS_LOG_TYPE_INFO, "Invalid type in metric object: %@ (%@)", v32, 0x16u);
          }

          *(_BYTE *)(*(void *)&buf[8] + 24LL) = 0;
        }

        BOOL v10 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
        goto LABEL_46;
      }

      if (__nwlog_activity_log::onceToken != -1) {
        dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
      }
      int v9 = (os_log_s *)(id)gactivityLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)BOOL v32 = 138412290;
        *(void *)&void v32[4] = v5;
        _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_INFO,  "Top level metrics object is not a dictionary: %@",  v32,  0xCu);
      }
    }

    else
    {
      if (__nwlog_activity_log::onceToken != -1) {
        dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
      }
      int v9 = (os_log_s *)(id)gactivityLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)BOOL v32 = 138412290;
        *(void *)&void v32[4] = v5;
        _os_log_impl(&dword_181A5C000, v9, OS_LOG_TYPE_INFO, "Exceeded max depth with object: %@", v32, 0xCu);
      }
    }

    BOOL v10 = 0LL;
LABEL_46:
    _Block_object_dispose(buf, 8);
    goto LABEL_47;
  }

  __nwlog_obj();
  os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_activity_metric_object_is_valid";
  os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

  v32[0] = 16;
  char v31 = 0;
  if (__nwlog_fault(v15, v32, &v31))
  {
    if (v32[0] == 17)
    {
      __nwlog_obj();
      os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = v32[0];
      if (os_log_type_enabled(v16, (os_log_type_t)v32[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_activity_metric_object_is_valid";
        _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null metrics", buf, 0xCu);
      }
    }

    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = v32[0];
      BOOL v20 = os_log_type_enabled(v16, (os_log_type_t)v32[0]);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_activity_metric_object_is_valid";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v16,  v19,  "%{public}s called with null metrics, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_64;
      }

      if (v20)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_activity_metric_object_is_valid";
        _os_log_impl(&dword_181A5C000, v16, v19, "%{public}s called with null metrics, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = v32[0];
      if (os_log_type_enabled(v16, (os_log_type_t)v32[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_activity_metric_object_is_valid";
        _os_log_impl( &dword_181A5C000,  v16,  v21,  "%{public}s called with null metrics, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18235F7B0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v3 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_activity_metric_object_is_valid_block_invoke(uint64_t a1, const char *a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  id v5 = a3;
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
  if (!*(_BYTE *)(v6 + 24))
  {
    nw_append_format(*(const char ***)(a1 + 48), ",");
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
  }

  *(_BYTE *)(v6 + 24) = 0;
  if (__nwlog_activity_log::onceToken != -1) {
    dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
  }
  uint64_t v7 = (os_log_s *)(id)gactivityLogObj;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 136315138;
    os_log_type_t v11 = a2;
    _os_log_impl(&dword_181A5C000, v7, OS_LOG_TYPE_DEBUG, "Inspecting dictionary key: %s", buf, 0xCu);
  }

  nw_append_format(*(const char ***)(a1 + 48), "%s:", a2);
  uint64_t is_valid = nw_activity_metric_object_is_valid(v5, (*(_DWORD *)(a1 + 56) + 1), *(void *)(a1 + 48));
  if ((is_valid & 1) == 0) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
  }

  return is_valid;
}

void sub_18235F98C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_activity_metric_object_is_valid_block_invoke_70(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  id v5 = a3;
  if (a2) {
    nw_append_format(*(const char ***)(a1 + 40), ",");
  }
  if (__nwlog_activity_log::onceToken != -1) {
    dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
  }
  uint64_t v6 = (os_log_s *)(id)gactivityLogObj;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v9 = 134217984;
    uint64_t v10 = a2;
    _os_log_impl(&dword_181A5C000, v6, OS_LOG_TYPE_DEBUG, "Inspecting array index: %zu", (uint8_t *)&v9, 0xCu);
  }

  uint64_t is_valid = nw_activity_metric_object_is_valid(v5, (*(_DWORD *)(a1 + 48) + 1), *(void *)(a1 + 40));
  if ((is_valid & 1) == 0) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0;
  }

  return is_valid;
}

void sub_18235FAC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL51nw_activity_inherit_from_global_parent_if_necessaryP22NWConcrete_nw_activity_block_invoke( uint64_t a1)
{
  if (global_parent)
  {
  }

void nw_activity_set_parent_activity(void *a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    int v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    char v31 = "nw_activity_set_parent_activity";
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v31 = "nw_activity_set_parent_activity";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null activity", buf, 0xCu);
      }
    }

    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)int buf = 136446466;
          char v31 = "nw_activity_set_parent_activity";
          __int16 v32 = 2082;
          char v33 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_58:
        if (!v10) {
          goto LABEL_8;
        }
LABEL_59:
        free(v10);
        goto LABEL_8;
      }

      if (v19)
      {
        *(_DWORD *)int buf = 136446210;
        char v31 = "nw_activity_set_parent_activity";
        _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v31 = "nw_activity_set_parent_activity";
        _os_log_impl( &dword_181A5C000,  v11,  v25,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t nw_activity_uuid_is_selected_for_reporting(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (a1) {
    return *(_BYTE *)(a1 + 9) & 1;
  }
  __nwlog_obj();
  unint64_t v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v12 = "nw_activity_uuid_is_selected_for_reporting";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v12 = "nw_activity_uuid_is_selected_for_reporting";
        id v6 = "%{public}s called with null uuid";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
      }
    }

    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v5 = type;
        BOOL v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v12 = "nw_activity_uuid_is_selected_for_reporting";
            __int16 v13 = 2082;
            os_log_type_t v14 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null uuid, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v8) {
          goto LABEL_18;
        }
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v12 = "nw_activity_uuid_is_selected_for_reporting";
        id v6 = "%{public}s called with null uuid, no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v12 = "nw_activity_uuid_is_selected_for_reporting";
        id v6 = "%{public}s called with null uuid, backtrace limit exceeded";
        goto LABEL_17;
      }
    }

uint64_t nw_activity_get_domain(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  os_signpost_id_t v1 = a1;
  unint64_t v2 = v1;
  if (v1)
  {
    if ((v1[35] & 2) == 0)
    {
      uint64_t v3 = v1[29];
      goto LABEL_4;
    }

    __nwlog_obj();
    char v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446466;
    BOOL v22 = "nw_activity_get_domain";
    __int16 v23 = 2082;
    BOOL v24 = "Cannot get domain from lightweight representation of an activity";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v6, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v22 = "nw_activity_get_domain";
          __int16 v23 = 2082;
          BOOL v24 = "Cannot get domain from lightweight representation of an activity";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s", buf, 0x16u);
        }
      }

      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)int buf = 136446722;
            BOOL v22 = "nw_activity_get_domain";
            __int16 v23 = 2082;
            BOOL v24 = "Cannot get domain from lightweight representation of an activity";
            __int16 v25 = 2082;
            os_log_type_t v26 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(backtrace_string);
          goto LABEL_37;
        }

        if (v16)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v22 = "nw_activity_get_domain";
          __int16 v23 = 2082;
          BOOL v24 = "Cannot get domain from lightweight representation of an activity";
          _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace",  buf,  0x16u);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v22 = "nw_activity_get_domain";
          __int16 v23 = 2082;
          BOOL v24 = "Cannot get domain from lightweight representation of an activity";
          _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded",  buf,  0x16u);
        }
      }

      goto LABEL_36;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    BOOL v22 = "nw_activity_get_domain";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v6, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v22 = "nw_activity_get_domain";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
        }
      }

      else if (v19)
      {
        uint64_t v11 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v7, type);
        if (v11)
        {
          if (v13)
          {
            *(_DWORD *)int buf = 136446466;
            BOOL v22 = "nw_activity_get_domain";
            __int16 v23 = 2082;
            BOOL v24 = v11;
            _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v11);
          goto LABEL_37;
        }

        if (v13)
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v22 = "nw_activity_get_domain";
          _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null activity, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v22 = "nw_activity_get_domain";
          _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
        }
      }

uint64_t nw_activity_get_label(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  os_signpost_id_t v1 = a1;
  unint64_t v2 = v1;
  if (v1)
  {
    if ((v1[35] & 2) == 0)
    {
      uint64_t v3 = v1[28];
      goto LABEL_4;
    }

    __nwlog_obj();
    char v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446466;
    BOOL v22 = "nw_activity_get_label";
    __int16 v23 = 2082;
    BOOL v24 = "Cannot get label from lightweight representation of an activity";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v6, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v22 = "nw_activity_get_label";
          __int16 v23 = 2082;
          BOOL v24 = "Cannot get label from lightweight representation of an activity";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s", buf, 0x16u);
        }
      }

      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)int buf = 136446722;
            BOOL v22 = "nw_activity_get_label";
            __int16 v23 = 2082;
            BOOL v24 = "Cannot get label from lightweight representation of an activity";
            __int16 v25 = 2082;
            os_log_type_t v26 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(backtrace_string);
          goto LABEL_37;
        }

        if (v16)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v22 = "nw_activity_get_label";
          __int16 v23 = 2082;
          BOOL v24 = "Cannot get label from lightweight representation of an activity";
          _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace",  buf,  0x16u);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v22 = "nw_activity_get_label";
          __int16 v23 = 2082;
          BOOL v24 = "Cannot get label from lightweight representation of an activity";
          _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded",  buf,  0x16u);
        }
      }

      goto LABEL_36;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    BOOL v22 = "nw_activity_get_label";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v6, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v22 = "nw_activity_get_label";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
        }
      }

      else if (v19)
      {
        uint64_t v11 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v7, type);
        if (v11)
        {
          if (v13)
          {
            *(_DWORD *)int buf = 136446466;
            BOOL v22 = "nw_activity_get_label";
            __int16 v23 = 2082;
            BOOL v24 = v11;
            _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v11);
          goto LABEL_37;
        }

        if (v13)
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v22 = "nw_activity_get_label";
          _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null activity, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v22 = "nw_activity_get_label";
          _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
        }
      }

void nw_activity_set_reporting_strategy(void *a1, int a2)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    char v33 = "nw_activity_set_reporting_strategy";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v33 = "nw_activity_set_reporting_strategy";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
      }
    }

    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)int buf = 136446466;
          char v33 = "nw_activity_set_reporting_strategy";
          __int16 v34 = 2082;
          unsigned int v35 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v16,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_73:
        if (!v6) {
          goto LABEL_6;
        }
LABEL_74:
        free(v6);
        goto LABEL_6;
      }

      if (v17)
      {
        *(_DWORD *)int buf = 136446210;
        char v33 = "nw_activity_set_reporting_strategy";
        _os_log_impl(&dword_181A5C000, v7, v16, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v33 = "nw_activity_set_reporting_strategy";
        _os_log_impl( &dword_181A5C000,  v7,  v26,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t nw_activity_get_reporting_strategy(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  os_signpost_id_t v1 = a1;
  unint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[33];
    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_activity_get_reporting_strategy";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_activity_get_reporting_strategy";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_activity_get_reporting_strategy";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_activity_get_reporting_strategy";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_activity_get_reporting_strategy";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_activity_get_token(void *a1, _OWORD *a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    BOOL v22 = "nw_activity_get_token";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v22 = "nw_activity_get_token";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v22 = "nw_activity_get_token";
          __int16 v23 = 2082;
          os_log_type_t v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }

      if (v13)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v22 = "nw_activity_get_token";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v22 = "nw_activity_get_token";
        _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t nw_activity_get_is_retry(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  unint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((_BYTE *)v1 + 140) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  BOOL v16 = "nw_activity_get_is_retry";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_activity_get_is_retry";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v16 = "nw_activity_get_is_retry";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_activity_get_is_retry";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_activity_get_is_retry";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

id nw_activity_copy_parent_activity(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  unint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[7];
    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  BOOL v16 = "nw_activity_copy_parent_activity";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_activity_copy_parent_activity";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v16 = "nw_activity_copy_parent_activity";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_activity_copy_parent_activity";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_activity_copy_parent_activity";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_activity_set_global_parent(void *a1)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  unint64_t v2 = v1;
  if (v1)
  {
    if ((v1[140] & 8) == 0)
    {
      *(void *)id v37 = 0LL;
      *(void *)&v37[8] = v37;
      *(void *)&v37[16] = 0x2020000000LL;
      char v38 = 0;
      aBlock[0] = MEMORY[0x1895F87A8];
      aBlock[1] = 3221225472LL;
      aBlock[2] = __nw_activity_set_global_parent_block_invoke_57;
      aBlock[3] = &unk_189BC9210;
      id v3 = v1;
      id v26 = v3;
      uint64_t v27 = v37;
      id v4 = _Block_copy(aBlock);
      os_log_type_t v28 = v4;
      nw_synchronize<nw::unfair_mutex,void({block_pointer} {__strong})(void)>( (os_unfair_lock_s *)&global_parent_lock,  (uint64_t)&v28);

      if (!*(_BYTE *)(*(void *)&v37[8] + 24LL))
      {
        if (__nwlog_activity_log::onceToken != -1) {
          dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
        }
        os_log_type_t v5 = (os_log_s *)(id)gactivityLogObj;
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 138543362;
          __int16 v32 = v3;
          _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_DEFAULT,  "Set activity %{public}@ as the global parent",  buf,  0xCu);
        }

LABEL_9:
        _Block_object_dispose(v37, 8);
        goto LABEL_19;
      }

      __nwlog_obj();
      os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)int buf = 136446466;
      __int16 v32 = "nw_activity_set_global_parent";
      __int16 v33 = 2082;
      __int16 v34 = "Global parent activity is immutable and cannot be set to a different activity";
      char v13 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v24 = 0;
      if (__nwlog_fault(v13, &type, &v24))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v15 = type;
          if (os_log_type_enabled(v14, type))
          {
            *(_DWORD *)int buf = 136446466;
            __int16 v32 = "nw_activity_set_global_parent";
            __int16 v33 = 2082;
            __int16 v34 = "Global parent activity is immutable and cannot be set to a different activity";
            _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s", buf, 0x16u);
          }
        }

        else if (v24)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v20 = type;
          BOOL v21 = os_log_type_enabled(v14, type);
          if (backtrace_string)
          {
            if (v21)
            {
              *(_DWORD *)int buf = 136446722;
              __int16 v32 = "nw_activity_set_global_parent";
              __int16 v33 = 2082;
              __int16 v34 = "Global parent activity is immutable and cannot be set to a different activity";
              __int16 v35 = 2082;
              __int16 v36 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v14,  v20,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
            }

            free(backtrace_string);
            goto LABEL_54;
          }

          if (v21)
          {
            *(_DWORD *)int buf = 136446466;
            __int16 v32 = "nw_activity_set_global_parent";
            __int16 v33 = 2082;
            __int16 v34 = "Global parent activity is immutable and cannot be set to a different activity";
            _os_log_impl( &dword_181A5C000,  v14,  v20,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace",  buf,  0x16u);
          }
        }

        else
        {
          __nwlog_obj();
          os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v23 = type;
          if (os_log_type_enabled(v14, type))
          {
            *(_DWORD *)int buf = 136446466;
            __int16 v32 = "nw_activity_set_global_parent";
            __int16 v33 = 2082;
            __int16 v34 = "Global parent activity is immutable and cannot be set to a different activity";
            _os_log_impl( &dword_181A5C000,  v14,  v23,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded",  buf,  0x16u);
          }
        }
      }

void sub_182362AF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_activity_set_global_parent_block_invoke_57(uint64_t a1)
{
  else {
    objc_storeStrong((id *)&global_parent, *(id *)(a1 + 32));
  }
}

void __nw_activity_set_global_parent_block_invoke()
{
  unsigned int v0 = (void *)global_parent;
  global_parent = 0LL;
}

uint64_t nw_activity_has_global_parent()
{
  uint64_t v5 = 0LL;
  id v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  char v8 = 0;
  v3[0] = MEMORY[0x1895F87A8];
  v3[1] = 3221225472LL;
  v3[2] = __nw_activity_has_global_parent_block_invoke;
  v3[3] = &unk_189BC1630;
  v3[4] = &v5;
  unsigned int v0 = _Block_copy(v3);
  id v4 = v0;
  nw_synchronize<nw::unfair_mutex,void({block_pointer} {__strong})(void)>( (os_unfair_lock_s *)&global_parent_lock,  (uint64_t)&v4);

  uint64_t v1 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v1;
}

void sub_182362C44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_activity_has_global_parent_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = global_parent != 0;
  return result;
}

void nw_activity_set_investigation_identifier(void *a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    uint64_t v27 = "nw_activity_set_investigation_identifier";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v27 = "nw_activity_set_investigation_identifier";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v27 = "nw_activity_set_investigation_identifier";
          __int16 v28 = 2082;
          os_log_type_t v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v14,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v6) {
          goto LABEL_5;
        }
LABEL_56:
        free(v6);
        goto LABEL_5;
      }

      if (v15)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v27 = "nw_activity_set_investigation_identifier";
        _os_log_impl(&dword_181A5C000, v7, v14, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v27 = "nw_activity_set_investigation_identifier";
        _os_log_impl( &dword_181A5C000,  v7,  v21,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t nw_activity_get_investigation_identifier(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  unint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 3);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  BOOL v16 = "nw_activity_get_investigation_identifier";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_activity_get_investigation_identifier";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v16 = "nw_activity_get_investigation_identifier";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_activity_get_investigation_identifier";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_activity_get_investigation_identifier";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_activity_has_investigation_identifier(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  unint64_t v2 = v1;
  if (v1)
  {
    BOOL v3 = *((void *)v1 + 3) != 0LL;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  BOOL v16 = "nw_activity_has_investigation_identifier";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_activity_has_investigation_identifier";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v16 = "nw_activity_has_investigation_identifier";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_activity_has_investigation_identifier";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_activity_has_investigation_identifier";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

xpc_object_t nw_activity_copy_xpc_token(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  unint64_t v2 = (unsigned __int8 *)v1;
  if (v1)
  {
    if ((v1[140] & 4) != 0)
    {
      xpc_object_t v3 = xpc_uuid_create(v1 + 8);
      goto LABEL_4;
    }

    __nwlog_obj();
    char v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446466;
    os_log_type_t v22 = "nw_activity_copy_xpc_token";
    __int16 v23 = 2082;
    char v24 = "Cannot copy xpc token before activation";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v6, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v22 = "nw_activity_copy_xpc_token";
          __int16 v23 = 2082;
          char v24 = "Cannot copy xpc token before activation";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s", buf, 0x16u);
        }
      }

      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)int buf = 136446722;
            os_log_type_t v22 = "nw_activity_copy_xpc_token";
            __int16 v23 = 2082;
            char v24 = "Cannot copy xpc token before activation";
            __int16 v25 = 2082;
            id v26 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(backtrace_string);
          goto LABEL_37;
        }

        if (v16)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v22 = "nw_activity_copy_xpc_token";
          __int16 v23 = 2082;
          char v24 = "Cannot copy xpc token before activation";
          _os_log_impl( &dword_181A5C000,  v7,  v15,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace",  buf,  0x16u);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v22 = "nw_activity_copy_xpc_token";
          __int16 v23 = 2082;
          char v24 = "Cannot copy xpc token before activation";
          _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded",  buf,  0x16u);
        }
      }

      goto LABEL_36;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v22 = "nw_activity_copy_xpc_token";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v6, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v22 = "nw_activity_copy_xpc_token";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
        }
      }

      else if (v19)
      {
        BOOL v11 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v7, type);
        if (v11)
        {
          if (v13)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v22 = "nw_activity_copy_xpc_token";
            __int16 v23 = 2082;
            char v24 = v11;
            _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v11);
          goto LABEL_37;
        }

        if (v13)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v22 = "nw_activity_copy_xpc_token";
          _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null activity, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v22 = "nw_activity_copy_xpc_token";
          _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
        }
      }

void sub_182363D44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *nw_activity_copy_xpc_object(void *a1)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    xpc_object_t v2 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_object_t v3 = v2;
    *(void *)os_log_type_t type = v2;
    char v24 = -1;
    if (v2)
    {
      xpc_dictionary_set_uuid(v2, "token", (const unsigned __int8 *)v1 + 8);
      xpc_dictionary_set_uint64(v3, "investigation_identifier", *((void *)v1 + 3));
      xpc_dictionary_set_uint64(v3, "start_time", *((void *)v1 + 4));
      xpc_dictionary_set_uint64(v3, "end_time", *((void *)v1 + 5));
      xpc_dictionary_set_uint64(v3, "fragments_quenched", v1[12]);
      xpc_dictionary_set_uint64(v3, "label", v1[28]);
      xpc_dictionary_set_uint64(v3, "domain", v1[29]);
      xpc_dictionary_set_int64(v3, "underlying_error_domain", (int)v1[31]);
      xpc_dictionary_set_int64(v3, "underlying_error_code", (int)v1[32]);
      xpc_dictionary_set_uint64(v3, "reporting_strategy", v1[33]);
      xpc_dictionary_set_uint64(v3, "completion_reason", v1[34]);
      xpc_dictionary_set_BOOL(v3, "is_retry", v1[35] & 1);
      xpc_dictionary_set_BOOL(v3, "is_lightweight", (v1[35] & 2) != 0);
      xpc_dictionary_set_BOOL(v3, "activated", (v1[35] & 4) != 0);
      xpc_dictionary_set_BOOL(v3, "completed", (v1[35] & 8) != 0);
      id v4 = (const char *)*((void *)v1 + 9);
      if (v4) {
        xpc_dictionary_set_string(v3, "underlying_error_domain_string", v4);
      }
      goto LABEL_5;
    }

    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    uint64_t v27 = "nw_activity_copy_xpc_object";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v25 = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (v25 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = v25;
      if (os_log_type_enabled(v12, v25))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v27 = "nw_activity_copy_xpc_object";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s failed to allocate dictionary", buf, 0xCu);
      }
    }

    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = v25;
      BOOL v19 = os_log_type_enabled(v12, v25);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v27 = "nw_activity_copy_xpc_object";
          __int16 v28 = 2082;
          os_log_type_t v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v18,  "%{public}s failed to allocate dictionary, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_41;
      }

      if (v19)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v27 = "nw_activity_copy_xpc_object";
        _os_log_impl(&dword_181A5C000, v12, v18, "%{public}s failed to allocate dictionary, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = v25;
      if (os_log_type_enabled(v12, v25))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v27 = "nw_activity_copy_xpc_object";
        _os_log_impl( &dword_181A5C000,  v12,  v21,  "%{public}s failed to allocate dictionary, backtrace limit exceeded",  buf,  0xCu);
      }
    }

LABEL_41:
    if (v11) {
      free(v11);
    }
    goto LABEL_5;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  uint64_t v27 = "nw_activity_copy_xpc_object";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t v25 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v7, type, &v25))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v27 = "nw_activity_copy_xpc_object";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null activity", buf, 0xCu);
      }
    }

    else if (v25)
    {
      os_log_type_t v14 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type[0];
      BOOL v16 = os_log_type_enabled(v8, type[0]);
      if (v14)
      {
        if (v16)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v27 = "nw_activity_copy_xpc_object";
          __int16 v28 = 2082;
          os_log_type_t v29 = v14;
          _os_log_impl( &dword_181A5C000,  v8,  v15,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v14);
        goto LABEL_35;
      }

      if (v16)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v27 = "nw_activity_copy_xpc_object";
        _os_log_impl(&dword_181A5C000, v8, v15, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v27 = "nw_activity_copy_xpc_object";
        _os_log_impl( &dword_181A5C000,  v8,  v20,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182364360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _Unwind_Resume(a1);
}

uint64_t nw_activity_get_activation_time(void *a1)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    if ((*((_BYTE *)v1 + 140) & 4) != 0)
    {
      if ((*((_BYTE *)v1 + 140) & 2) == 0)
      {
        uint64_t v3 = *((void *)v1 + 4);
        goto LABEL_5;
      }

      __nwlog_obj();
      BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)int buf = 136446466;
      uint64_t v27 = "nw_activity_get_activation_time";
      __int16 v28 = 2082;
      os_log_type_t v29 = "Cannot get activation time from lightweight representation of an activity";
      id v6 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v24 = 0;
      if (__nwlog_fault(v6, &type, &v24))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v12 = type;
          if (os_log_type_enabled(v7, type))
          {
            *(_DWORD *)int buf = 136446466;
            uint64_t v27 = "nw_activity_get_activation_time";
            __int16 v28 = 2082;
            os_log_type_t v29 = "Cannot get activation time from lightweight representation of an activity";
            _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s", buf, 0x16u);
          }

void nw_activity_complete_with_reason_and_underlying_error_string_internal( void *a1, uint32_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v129 = *MEMORY[0x1895F89C0];
  os_log_type_t v9 = a1;
  uint64_t v106 = 0LL;
  BOOL v107 = &v106;
  uint64_t v108 = 0x2020000000LL;
  char v109 = 1;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 3221225472LL;
  aBlock[2] = ___ZL69nw_activity_complete_with_reason_and_underlying_error_string_internalP22NWConcrete_nw_activity31nw_activity_completion_reason_tPKcii_block_invoke;
  aBlock[3] = &unk_189BC1720;
  os_log_type_t v10 = v9;
  os_log_type_t v100 = v10;
  uint32_t v101 = &v106;
  uint64_t v102 = a3;
  int v103 = a4;
  int v104 = a5;
  BOOL v11 = _Block_copy(aBlock);
  os_log_type_t v105 = v11;
  nw_synchronize<nw::unfair_mutex,void({block_pointer} {__strong})(void)>(v9 + 20, (uint64_t)&v105);

  if (!*((_BYTE *)v107 + 24)) {
    goto LABEL_102;
  }
  os_log_type_t v12 = v10;
  os_log_type_t v13 = v12;
  if ((~LOBYTE(v12[35]._os_unfair_lock_opaque) & 0xC) == 0)
  {
    os_log_type_t v14 = v12 + 2;
    if (!uuid_is_null((const unsigned __int8 *)&v12[2]))
    {
      if (nw_activity_should_log(v13))
      {
        BOOL v15 = v13;
        else {
          os_signpost_id_t v16 = *((void *)v15 + 2) ^ *(void *)&v14->_os_unfair_lock_opaque;
        }

        if (__nwlog_activity_log::onceToken != -1) {
          dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
        }
        os_log_type_t v17 = (os_log_s *)(id)gactivityLogObj;
        BOOL v18 = v17;
        if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v17))
        {
          int v20 = *((_DWORD *)v15 + 28);
          int v19 = *((_DWORD *)v15 + 29);
          *(_DWORD *)int buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v19;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v20;
          *(_WORD *)os_log_type_t v119 = 1040;
          *(_DWORD *)&v119[2] = 16;
          *(_WORD *)&v119[6] = 2096;
          *(void *)&v119[8] = v14;
          _os_signpost_emit_with_name_impl( &dword_181A5C000,  v18,  OS_SIGNPOST_INTERVAL_END,  v16,  "nw_activity",  "<%u:%u [%{uuid_t}.16P]>",  buf,  0x1Eu);
        }
      }
    }
  }

  if (a2 <= 4u)
  {
    os_unfair_lock_lock(v13 + 26);
    os_log_type_t v21 = *(void **)&v13[22]._os_unfair_lock_opaque;
    if ((v13[24]._os_unfair_lock_opaque & 1) != 0 && v21)
    {
      *(void *)&v13[22]._uint32_t os_unfair_lock_opaque = 0LL;

      os_log_type_t v21 = *(void **)&v13[22]._os_unfair_lock_opaque;
    }

    *(void *)&v13[22]._uint32_t os_unfair_lock_opaque = 0LL;

    os_unfair_lock_unlock(v13 + 26);
    uint64_t v22 = mach_continuous_time();
    if (v22 <= 1) {
      uint64_t v23 = 1LL;
    }
    else {
      uint64_t v23 = v22;
    }
    *(void *)&v13[10]._uint32_t os_unfair_lock_opaque = v23;
    v13[34]._uint32_t os_unfair_lock_opaque = a2;
    if (!nw_activity_should_log(v13))
    {
LABEL_38:
      __int16 v34 = v13;
      if (nw_activity_duration_exceeds_threshold(v34))
      {
        *(void *)__int16 v126 = 0LL;
        int domain = nw_activity_get_domain(v34);
        asprintf((char **)v126, "%u", domain);
        id v116 = 0LL;
        int label = nw_activity_get_label(v34);
        asprintf(&v116, "%u", label);
        if (__nwlog_activity_log::onceToken != -1) {
          dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
        }
        id v37 = (os_log_s *)(id)gactivityLogObj;
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 138543362;
          *(void *)&uint8_t buf[4] = v34;
          _os_log_impl( &dword_181A5C000,  v37,  OS_LOG_TYPE_DEFAULT,  "%{public}@ over threshold, emitting signpost event",  buf,  0xCu);
        }

        if (__nwlog_activity_log::onceToken != -1) {
          dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
        }
        char v38 = (os_log_s *)(id)gactivityLogObj;
        os_signpost_id_t v39 = os_signpost_id_generate(v38);

        if (__nwlog_activity_log::onceToken != -1) {
          dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
        }
        uint64_t v40 = (os_log_s *)(id)gactivityLogObj;
        os_log_type_t v41 = v40;
        if (v39 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v40))
        {
          uint64_t v42 = *(void *)v126;
          os_log_type_t v43 = v116;
          uint64_t duration = nw_activity_get_duration(v34);
          uint64_t v45 = nw_activity_duration_threshold_for_label(v34[29], v34[28]);
          *(_DWORD *)int buf = 136446978;
          *(void *)&uint8_t buf[4] = v42;
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)os_log_type_t v119 = v43;
          *(_WORD *)&v119[8] = 2050;
          *(void *)&v119[10] = duration;
          *(_WORD *)&v119[18] = 2050;
          *(void *)&v119[20] = v45;
          _os_signpost_emit_with_name_impl( &dword_181A5C000,  v41,  OS_SIGNPOST_EVENT,  v39,  "nw_activity over threshold",  " enableTelemetry=YES Activity <nw_activity %{public, signpost.telemetry:string1, name=ActivityDomain}s:%{pub lic, signpost.telemetry:string2, name=ActivityLabel}s> over threshold (duration %{public, signpost.telemetry :number1, name=Duration}llums exceeds threshold %{public, signpost.telemetry:number2, name=Threshold}llums)",  buf,  0x2Au);
        }

        if (*(void *)v126)
        {
          free(*(void **)v126);
          *(void *)__int16 v126 = 0LL;
        }

        if (v116) {
          free(v116);
        }
      }

      os_log_type_t v46 = v34;
      BOOL v47 = v46;
      if ((~LOBYTE(v13[35]._os_unfair_lock_opaque) & 0xC) == 0)
      {
        if ((*((_BYTE *)v46 + 17) & 1) == 0)
        {
LABEL_101:

          goto LABEL_102;
        }

        bzero(buf, 0x250uLL);
        os_log_type_t v48 = v47;
        nw_activity_fill_out_activity_report(v48, (nw_activity_report_s *)&buf[8]);
        *(void *)int buf = nw_activity_get_duration(v48);
        unsigned int value = nw_activity_get_fragments_quenched(v48);
        int value_4 = nw_activity_get_underlying_error_domain(v48);
        int underlying_error_code = nw_activity_get_underlying_error_code(v48);
        int completion_reason = nw_activity_get_completion_reason(v48);
        uint64_t underlying_error_domain_string = nw_activity_get_underlying_error_domain_string(v48);
        if (underlying_error_domain_string)
        {
          uint64_t v50 = 0LL;
          while (1)
          {
            int v51 = *(unsigned __int8 *)(underlying_error_domain_string + v50);
            v125[v50] = v51;
            if (!v51) {
              break;
            }
            if (++v50 == 255)
            {
              v125[255] = 0;
              break;
            }
          }
        }

        if (!os_variant_has_internal_diagnostics()
          || !networkd_settings_get_BOOL((const char *)nw_setting_activity_write_metric_stream_to_log))
        {
          if (nw_connection_get_symptom_reporter_handle::once != -1) {
            dispatch_once(&nw_connection_get_symptom_reporter_handle::once, &__block_literal_global_78285);
          }
          symptom_new();
          symptom_set_qualifier();
          symptom_set_additional_qualifier();
          symptom_send();
          goto LABEL_101;
        }

        objc_super v52 = v48;
        os_log_type_t v53 = (char *)xpc_dictionary_create(0LL, 0LL, 0LL);
        id v116 = v53;
        char v117 = -1;
        if (v53)
        {
          activity_dictionary = nw_activity_create_activity_dictionary(v52, (nw_activity_report_s *)&buf[8]);
          *(void *)os_log_type_t type = activity_dictionary;
          char v114 = -1;
          if (activity_dictionary)
          {
            xpc_dictionary_set_value(v53, "activity", activity_dictionary);
            xpc_dictionary_set_uint64(v53, "durationMsecs", *(uint64_t *)buf);
            xpc_dictionary_set_uint64(v53, "fragmentsQuenched", value);
            __int16 v55 = v53;
            os_log_type_t v56 = v55;
            else {
              int v57 = off_189BC2D88[completion_reason - 1];
            }
            xpc_dictionary_set_string(v55, "completionReason", v57);

            xpc_dictionary_set_string(v56, "underlyingErrorDomainString", v125);
            xpc_dictionary_set_int64(v56, "underlyingErrorDomain", value_4);
            xpc_dictionary_set_int64(v56, "underlyingErrorCode", underlying_error_code);

LABEL_72:
            char v110 = v56;
            char v111 = -1;
            id v116 = 0LL;
            if (nw_activity_metric_object_is_valid(v56, 0, (const char **)&v116))
            {
              if (__nwlog_metricstream_log::onceToken != -1) {
                dispatch_once(&__nwlog_metricstream_log::onceToken, &__block_literal_global_51_44361);
              }
              uint64_t v58 = (os_log_s *)(id)gmetricstreamLogObj;
              if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__int16 v126 = 136446210;
                *(void *)&v126[4] = v116;
                _os_log_impl(&dword_181A5C000, v58, OS_LOG_TYPE_DEFAULT, "%{public}s", v126, 0xCu);
              }

LABEL_96:
              if (v116) {
                free(v116);
              }
              if (v56) {

              }
              goto LABEL_101;
            }

            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v59 = (id)gLogObj;
            *(_DWORD *)__int16 v126 = 136446210;
            *(void *)&v126[4] = "nw_activity_write_epilogue_report_to_log";
            os_log_type_t v60 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            os_log_type_t v115 = OS_LOG_TYPE_DEFAULT;
            if (__nwlog_fault(v60, type, &v115))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                char v61 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v62 = type[0];
                if (os_log_type_enabled(v61, type[0]))
                {
                  *(_DWORD *)__int16 v126 = 136446210;
                  *(void *)&v126[4] = "nw_activity_write_epilogue_report_to_log";
                  _os_log_impl( &dword_181A5C000,  v61,  v62,  "%{public}s generated activity epilogue dictionary is not valid",  v126,  0xCu);
                }
              }

              else if (v115)
              {
                backtrace_string = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                char v61 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v64 = type[0];
                BOOL v65 = os_log_type_enabled(v61, type[0]);
                if (backtrace_string)
                {
                  if (v65)
                  {
                    *(_DWORD *)__int16 v126 = 136446466;
                    *(void *)&v126[4] = "nw_activity_write_epilogue_report_to_log";
                    __int16 v127 = 2082;
                    uint64_t v128 = backtrace_string;
                    _os_log_impl( &dword_181A5C000,  v61,  v64,  "%{public}s generated activity epilogue dictionary is not valid, dumping backtrace:%{public}s",  v126,  0x16u);
                  }

                  free(backtrace_string);
                  goto LABEL_94;
                }

                if (v65)
                {
                  *(_DWORD *)__int16 v126 = 136446210;
                  *(void *)&v126[4] = "nw_activity_write_epilogue_report_to_log";
                  _os_log_impl( &dword_181A5C000,  v61,  v64,  "%{public}s generated activity epilogue dictionary is not valid, no backtrace",  v126,  0xCu);
                }
              }

              else
              {
                __nwlog_obj();
                char v61 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v66 = type[0];
                if (os_log_type_enabled(v61, type[0]))
                {
                  *(_DWORD *)__int16 v126 = 136446210;
                  *(void *)&v126[4] = "nw_activity_write_epilogue_report_to_log";
                  _os_log_impl( &dword_181A5C000,  v61,  v66,  "%{public}s generated activity epilogue dictionary is not valid, backtrace limit exceeded",  v126,  0xCu);
                }
              }
            }

void sub_182365EFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZL69nw_activity_complete_with_reason_and_underlying_error_string_internalP22NWConcrete_nw_activity31nw_activity_completion_reason_tPKcii_block_invoke( uint64_t a1)
{
  v30[2] = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 32);
  if ((*(_BYTE *)(v2 + 140) & 4) == 0)
  {
    __nwlog_obj();
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446466;
    id v26 = "nw_activity_complete_with_reason_and_underlying_error_string_internal_block_invoke";
    __int16 v27 = 2082;
    __int16 v28 = "Cannot complete activity before activation";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)int buf = 136446466;
        id v26 = "nw_activity_complete_with_reason_and_underlying_error_string_internal_block_invoke";
        __int16 v27 = 2082;
        __int16 v28 = "Cannot complete activity before activation";
        BOOL v15 = "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s";
LABEL_43:
        _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0x16u);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v20 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)int buf = 136446722;
          id v26 = "nw_activity_complete_with_reason_and_underlying_error_string_internal_block_invoke";
          __int16 v27 = 2082;
          __int16 v28 = "Cannot complete activity before activation";
          __int16 v29 = 2082;
          v30[0] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(backtrace_string);
LABEL_45:
        if (!v12)
        {
LABEL_47:
          *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
          return;
        }

uint64_t nw_activity_get_fragments_quenched(void *a1)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)int buf = 0LL;
    *(void *)&buf[8] = buf;
    int v21 = 0;
    *(void *)&buf[16] = 0x2020000000LL;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_activity_get_fragments_quenched_block_invoke;
    aBlock[3] = &unk_189BC9210;
    os_signpost_id_t v16 = buf;
    BOOL v15 = v1;
    uint64_t v3 = _Block_copy(aBlock);
    os_log_type_t v17 = v3;
    nw_synchronize<nw::unfair_mutex,void({block_pointer} {__strong})(void)>(v2 + 20, (uint64_t)&v17);

    uint64_t v4 = *(unsigned int *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_activity_get_fragments_quenched";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v7, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_activity_get_fragments_quenched";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null activity", buf, 0xCu);
      }
    }

    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_activity_get_fragments_quenched";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_activity_get_fragments_quenched";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_activity_get_fragments_quenched";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18236696C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t nw_activity_get_underlying_error_domain(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = (char *)v1;
  if (!v1)
  {
    __nwlog_obj();
    id v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v17 = "nw_activity_get_underlying_error_domain";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v7, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v17 = "nw_activity_get_underlying_error_domain";
          _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null activity", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v17 = "nw_activity_get_underlying_error_domain";
            __int16 v18 = 2082;
            int v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_27;
        }

        if (v12)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v17 = "nw_activity_get_underlying_error_domain";
          _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null activity, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v17 = "nw_activity_get_underlying_error_domain";
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

uint64_t nw_activity_get_underlying_error_code(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = (char *)v1;
  if (!v1)
  {
    __nwlog_obj();
    id v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v17 = "nw_activity_get_underlying_error_code";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v7, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v17 = "nw_activity_get_underlying_error_code";
          _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null activity", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v17 = "nw_activity_get_underlying_error_code";
            __int16 v18 = 2082;
            int v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_27;
        }

        if (v12)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v17 = "nw_activity_get_underlying_error_code";
          _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null activity, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v17 = "nw_activity_get_underlying_error_code";
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

uint64_t nw_activity_get_completion_reason(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = (char *)v1;
  if (!v1)
  {
    __nwlog_obj();
    id v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v17 = "nw_activity_get_completion_reason";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v7, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v17 = "nw_activity_get_completion_reason";
          _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null activity", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v17 = "nw_activity_get_completion_reason";
            __int16 v18 = 2082;
            int v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_27;
        }

        if (v12)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v17 = "nw_activity_get_completion_reason";
          _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null activity, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v17 = "nw_activity_get_completion_reason";
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

uint64_t nw_activity_get_underlying_error_domain_string(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    id v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v17 = "nw_activity_get_underlying_error_domain_string";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v7, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v17 = "nw_activity_get_underlying_error_domain_string";
          _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null activity", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v17 = "nw_activity_get_underlying_error_domain_string";
            __int16 v18 = 2082;
            int v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_27;
        }

        if (v12)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v17 = "nw_activity_get_underlying_error_domain_string";
          _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null activity, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v17 = "nw_activity_get_underlying_error_domain_string";
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

uint64_t __nw_activity_get_fragments_quenched_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_DWORD *)(*(void *)(result + 32) + 48LL);
  return result;
}

void nw_activity_complete_with_reason_and_underlying_error_string(void *a1, uint32_t a2, uint64_t a3, int a4)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v7 = a1;
  os_log_type_t v8 = v7;
  if (!v7)
  {
    __nwlog_obj();
    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    id v26 = "nw_activity_complete_with_reason_and_underlying_error_string";
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        id v26 = "nw_activity_complete_with_reason_and_underlying_error_string";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null activity", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)int buf = 136446466;
          id v26 = "nw_activity_complete_with_reason_and_underlying_error_string";
          __int16 v27 = 2082;
          __int16 v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v10) {
          goto LABEL_4;
        }
LABEL_39:
        free(v10);
        goto LABEL_4;
      }

      if (v17)
      {
        *(_DWORD *)int buf = 136446210;
        id v26 = "nw_activity_complete_with_reason_and_underlying_error_string";
        _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        id v26 = "nw_activity_complete_with_reason_and_underlying_error_string";
        _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_182367B14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_activity_submit_metrics(uint64_t a1)
{
  id v1 = (void *)MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v91 = *MEMORY[0x1895F89C0];
  id v6 = v1;
  id v7 = v3;
  os_log_type_t v8 = v7;
  if (!v6)
  {
    __nwlog_obj();
    id v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
    __int16 v27 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v72) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type[0];
      if (os_log_type_enabled(v28, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
        _os_log_impl(&dword_181A5C000, v28, v29, "%{public}s called with null activity", buf, 0xCu);
      }
    }

    else if ((_BYTE)v72)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v35 = type[0];
      BOOL v36 = os_log_type_enabled(v28, type[0]);
      if (backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v28,  v35,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_105:
        if (!v27) {
          goto LABEL_40;
        }
LABEL_106:
        free(v27);
        goto LABEL_40;
      }

      if (v36)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
        _os_log_impl(&dword_181A5C000, v28, v35, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v46 = type[0];
      if (os_log_type_enabled(v28, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
        _os_log_impl( &dword_181A5C000,  v28,  v46,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_182368AE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, char a34)
{
  _Block_object_dispose((const void *)(v37 - 144), 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a34, 8);

  _Unwind_Resume(a1);
}

void __nw_activity_submit_metrics_block_invoke(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  uint64_t v2 = a1[4];
  if ((*(_BYTE *)(v2 + 140) & 4) == 0)
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446466;
    uint64_t v20 = "nw_activity_submit_metrics_block_invoke";
    __int16 v21 = 2082;
    os_log_type_t v22 = "Cannot submit metrics before activation";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v20 = "nw_activity_submit_metrics_block_invoke";
        __int16 v21 = 2082;
        os_log_type_t v22 = "Cannot submit metrics before activation";
        uint64_t v9 = "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s";
LABEL_38:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0x16u);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      BOOL v12 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446722;
          uint64_t v20 = "nw_activity_submit_metrics_block_invoke";
          __int16 v21 = 2082;
          os_log_type_t v22 = "Cannot submit metrics before activation";
          __int16 v23 = 2082;
          uint64_t v24 = (uint64_t)backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v6)
        {
LABEL_42:
          *(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL) = 0;
          return;
        }

void __nw_activity_submit_metrics_block_invoke_82(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(v2 + 48) + 1LL;
  uint64_t v4 = v3 << 31 >> 31;
  *(_DWORD *)(v2 + 4_Block_object_dispose(va, 8) = v3;
  if (v4 != v3 || v4 < 0)
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 32) + 48LL);
        int v7 = 136446978;
        os_log_type_t v8 = "nw_activity_submit_metrics_block_invoke";
        __int16 v9 = 2082;
        uint64_t v10 = "activity->fragments_quenched";
        __int16 v11 = 2048;
        uint64_t v12 = 1LL;
        __int16 v13 = 2048;
        uint64_t v14 = v6;
        _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_DEBUG,  "%{public}s Overflow: %{public}s, increment %llu, result %llu",  (uint8_t *)&v7,  0x2Au);
      }
    }

    *(_DWORD *)(*(void *)(a1 + 32) + 48LL) = -1;
  }

  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = *(_DWORD *)(*(void *)(a1 + 32) + 48LL);
}

void nw_activity_retrieve_metrics(void *a1, void *a2, void *a3)
{
  uint64_t v70 = *MEMORY[0x1895F89C0];
  uint64_t v5 = a1;
  id v6 = a2;
  id v7 = a3;
  os_log_type_t v8 = v7;
  if (!v5)
  {
    __nwlog_obj();
    __int16 v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    BOOL v65 = "nw_activity_retrieve_metrics";
    os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v63 = OS_LOG_TYPE_ERROR;
    char v62 = 0;
    if (v63 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = v63;
      if (os_log_type_enabled(v20, v63))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v65 = "nw_activity_retrieve_metrics";
        _os_log_impl(&dword_181A5C000, v20, v21, "%{public}s called with null activity", buf, 0xCu);
      }
    }

    else if (v62)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = v63;
      BOOL v28 = os_log_type_enabled(v20, v63);
      if (backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v65 = "nw_activity_retrieve_metrics";
          __int16 v66 = 2082;
          uint32_t v67 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v20,  v27,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_87:
        if (!v19) {
          goto LABEL_22;
        }
LABEL_88:
        free(v19);
        goto LABEL_22;
      }

      if (v28)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v65 = "nw_activity_retrieve_metrics";
        _os_log_impl(&dword_181A5C000, v20, v27, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v44 = v63;
      if (os_log_type_enabled(v20, v63))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v65 = "nw_activity_retrieve_metrics";
        _os_log_impl( &dword_181A5C000,  v20,  v44,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_18236A034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_activity_retrieve_metrics_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = -[NWConcrete_nw_error initWithDomain:code:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_error), 1, 22);
  (*(void (**)(uint64_t, void))(v1 + 16))(v1, 0LL);
}

void sub_18236A0B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void __nw_activity_retrieve_metrics_block_invoke_87(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = -[NWConcrete_nw_error initWithDomain:code:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_error), 1, 22);
  (*(void (**)(uint64_t, void))(v1 + 16))(v1, 0LL);
}

void sub_18236A120( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void __nw_activity_retrieve_metrics_block_invoke_2(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v12 = 0LL;
  __int16 v13 = &v12;
  uint64_t v14 = 0x3032000000LL;
  uint64_t v15 = __Block_byref_object_copy__58116;
  BOOL v16 = __Block_byref_object_dispose__58117;
  id v17 = 0LL;
  gotLoadHelper_x20__OBJC_CLASS___NWActivityXPC(COERCE_DOUBLE(0x3032000000LL));
  if (objc_opt_class())
  {
    uint64_t v3 = [objc_alloc(*(Class *)(v1 + 2704)) initWithQueue:*(void *)(a1 + 32) qosClass:*(unsigned int *)(a1 + 56)];
    uint64_t v4 = (void *)v13[5];
    v13[5] = v3;
  }

  if (v13[5])
  {
    __int128 v18 = 0uLL;
    nw_activity_get_token(*(void **)(a1 + 40), &v18);
    uint64_t v5 = (void *)v13[5];
    v8[0] = MEMORY[0x1895F87A8];
    v8[1] = 3221225472LL;
    v8[2] = __nw_activity_retrieve_metrics_block_invoke_89;
    v8[3] = &unk_189BC16D0;
    id v9 = *(id *)(a1 + 40);
    id v10 = *(id *)(a1 + 48);
    __int16 v11 = &v12;
    [v5 retrieveMetricsForActivity:&v18 completion:v8];
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 48);
    id v7 = -[NWConcrete_nw_error initWithDomain:code:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_error), 1, 20);
    (*(void (**)(uint64_t, void, _DWORD *, uint64_t))(v6 + 16))(v6, 0LL, v7, 1LL);
  }

  _Block_object_dispose(&v12, 8);
}

void sub_18236A2C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id a21)
{
  _Block_object_dispose(&a16, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__58116(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__58117(uint64_t a1)
{
}

void __nw_activity_retrieve_metrics_block_invoke_89(void *a1, void *a2, int a3)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v5 = a2;
  uint64_t v6 = v5;
  if (v5 && !a3 && [v5 count])
  {
    if (__nwlog_activity_log::onceToken != -1) {
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
    }
    id v7 = (os_log_s *)(id)gactivityLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = a1[4];
      int v21 = 138412546;
      uint64_t v22 = v8;
      __int16 v23 = 2112;
      uint64_t v24 = v6;
      _os_log_impl(&dword_181A5C000, v7, OS_LOG_TYPE_DEBUG, "%@ got results: %@", (uint8_t *)&v21, 0x16u);
    }

    for (unint64_t i = 0; i < [v6 count]; ++i)
    {
      [v6 count];
      [v6 objectAtIndex:i];
      id v10 = (void *)objc_claimAutoreleasedReturnValue();
      __int16 v11 = (void *)_CFXPCCreateXPCObjectFromCFObject();
      (*(void (**)(void))(a1[5] + 16LL))();
    }

    uint64_t v18 = a1[6];
    BOOL v16 = a1 + 6;
    [*(id *)(*(void *)(v18 + 8) + 40) cancel];
  }

  else
  {
    if (__nwlog_activity_log::onceToken != -1) {
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
    }
    uint64_t v12 = (os_log_s *)(id)gactivityLogObj;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = a1[4];
      int v21 = 138412802;
      uint64_t v22 = v13;
      __int16 v23 = 2112;
      uint64_t v24 = v6;
      __int16 v25 = 1024;
      int v26 = a3;
      _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_DEBUG,  "%@ failed lookup, results: %@, error: %{errno}d",  (uint8_t *)&v21,  0x1Cu);
    }

    uint64_t v14 = a1[5];
    posix_error = nw_error_create_posix_error(a3);
    (*(void (**)(uint64_t, void, _DWORD *, uint64_t))(v14 + 16))(v14, 0LL, posix_error, 1LL);

    uint64_t v17 = a1[6];
    BOOL v16 = a1 + 6;
    [*(id *)(*(void *)(v17 + 8) + 40) cancel];
  }

  uint64_t v19 = *(void *)(*v16 + 8LL);
  uint64_t v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = 0LL;
}

void sub_18236A5A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_activity_is_complete(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[140] >> 3) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  BOOL v16 = "nw_activity_is_complete";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_activity_is_complete";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v16 = "nw_activity_is_complete";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_activity_is_complete";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_activity_is_complete";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

const char *nw_activity_label_to_string(int a1, int a2)
{
  switch(a1)
  {
    case 11:
      return off_189BC2DA8[a2 - 1];
    case 12:
      return off_189BC2DF0[a2 - 1];
    case 13:
      return off_189BC2E10[a2 - 1];
    case 14:
      return off_189BC2E28[a2 - 1];
    case 15:
      return off_189BC2E90[a2 - 1];
    case 16:
      return off_189BC2EE0[a2 - 1];
    case 17:
      return off_189BC2EF8[a2 - 1];
    case 18:
      return off_189BC2F20[a2 - 1];
    case 19:
    case 20:
    case 56:
      if (a2 == 1) {
        return "invalid_max";
      }
      else {
        return "invalid";
      }
    case 21:
      return off_189BC2FB0[a2 - 1];
    case 22:
      return off_189BC3070[a2 - 1];
    case 23:
      return off_189BC30A8[a2 - 1];
    case 24:
      return off_189BC3170[a2 - 1];
    case 25:
    case 26:
      return off_189BC3188[a2 - 1];
    case 27:
    case 28:
    case 29:
      return off_189BC31A0[a2 - 1];
    case 30:
      return off_189BC33B8[a2 - 1];
    case 31:
      uint64_t v3 = "invalid";
      uint64_t v4 = "captive_probe";
      goto LABEL_64;
    case 32:
      return off_189BC33E0[a2 - 1];
    case 33:
      return off_189BC3448[a2 - 1];
    case 34:
      return off_189BC3468[a2 - 1];
    case 35:
      return off_189BC34C8[a2 - 1];
    case 36:
      return off_189BC34E0[a2 - 1];
    case 37:
      return off_189BC3538[a2 - 1];
    case 38:
      return off_189BC35A8[a2 - 1];
    case 39:
      uint64_t v3 = "invalid";
      uint64_t v4 = "session";
      goto LABEL_64;
    case 40:
      return off_189BC35C8[a2 - 1];
    case 41:
      return off_189BC3608[a2 - 1];
    case 42:
      return off_189BC3640[a2 - 1];
    case 43:
      return off_189BC3660[a2 - 1];
    case 44:
      return off_189BC36E8[a2 - 1];
    case 45:
      return off_189BC3728[a2 - 1];
    case 46:
      uint64_t v3 = "invalid";
      uint64_t v4 = "stereo_pair_volume_sync";
LABEL_64:
      if (a2 == 1) {
        uint64_t v3 = v4;
      }
      if (a2 == 2) {
        return "invalid_max";
      }
      else {
        return v3;
      }
    case 47:
      BOOL result = off_189BC3778[a2 - 1];
      break;
    case 48:
      BOOL result = off_189BC37E8[a2 - 1];
      break;
    case 49:
      BOOL result = off_189BC3808[a2 - 1];
      break;
    case 50:
      BOOL result = off_189BC3860[a2 - 1];
      break;
    case 51:
      BOOL result = off_189BC3878[a2 - 1];
      break;
    case 52:
      BOOL result = off_189BC3890[a2 - 1];
      break;
    case 53:
      BOOL result = off_189BC38D0[a2 - 1];
      break;
    case 54:
      BOOL result = off_189BC3900[a2 - 1];
      break;
    case 55:
      BOOL result = off_189BC3928[a2 - 1];
      break;
    case 57:
      BOOL result = off_189BC3950[a2 - 1];
      break;
    case 58:
      BOOL result = off_189BC3968[a2 - 1];
      break;
    case 59:
      BOOL result = off_189BC3A18[a2 - 1];
      break;
    case 60:
      BOOL result = off_189BC3A40[a2 - 1];
      break;
    case 61:
      if ((a2 - 1) >= 4) {
LABEL_103:
      }
        BOOL result = "invalid";
      else {
        BOOL result = off_189BC3AA0[a2 - 1];
      }
      break;
    default:
      else {
        id v5 = "reserved";
      }
      else {
        BOOL result = "experimental";
      }
      break;
  }

  return result;
}

BOOL nw_activity_copy_redacted_description(void *a1)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    uint64_t v27 = "nw_activity_copy_redacted_description";
    id v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v9, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v27 = "nw_activity_copy_redacted_description";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null activity", buf, 0xCu);
        }
      }

      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)int buf = 136446466;
            uint64_t v27 = "nw_activity_copy_redacted_description";
            __int16 v28 = 2082;
            uint64_t v29 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_29;
        }

        if (v20)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v27 = "nw_activity_copy_redacted_description";
          _os_log_impl(&dword_181A5C000, v10, v19, "%{public}s called with null activity, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v27 = "nw_activity_copy_redacted_description";
          _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_18236B294(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__int128 *nw_path_ipv6_default_address()
{
  return &xmmword_1826671F0;
}

__int128 *nw_path_ipv4_default_address()
{
  return &xmmword_18272D6E8;
}

uint64_t nw_path_is_endpoint_localhost(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1) {
    goto LABEL_20;
  }
  id v3 = v1;
  int v4 = [v3 type];

  if (v4 == 1)
  {
    address = nw_endpoint_get_address((nw_endpoint_t)v3);
    int sa_family = address->sa_family;
    if (sa_family == 2)
    {
      if (address->sa_len < 0x10u) {
        goto LABEL_20;
      }
      int v10 = *(_DWORD *)&address->sa_data[2];
      int v11 = 16777343;
    }

    else
    {
      if (sa_family != 30
        || address->sa_len < 0x1Cu
        || *(_DWORD *)&address->sa_data[6]
        || *(_DWORD *)&address->sa_data[10]
        || *(_DWORD *)&address[1].sa_len)
      {
        goto LABEL_20;
      }

      int v10 = *(_DWORD *)&address[1].sa_data[2];
      int v11 = 0x1000000;
    }

    BOOL v7 = v10 == v11;
    goto LABEL_17;
  }

  if (v4 != 2)
  {
LABEL_20:
    uint64_t v12 = 0LL;
    goto LABEL_21;
  }

  id v5 = v3;
  uint64_t v6 = (const char *)[v5 hostname];

  if (!strcasecmp("localhost", v6))
  {
    uint64_t v12 = 1LL;
    goto LABEL_21;
  }

  BOOL v7 = strcasecmp("localhost.", v6) == 0;
LABEL_17:
  uint64_t v12 = v7;
LABEL_21:

  return v12;
}

void sub_18236B3EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_path_evaluator_add_endpoint_to_necp_message_block_invoke( uint64_t a1, int a2, uint64_t a3, void *__src, size_t a5)
{
  size_t v5 = *(unsigned __int8 *)(a1 + 40) - a3 - 8;
  BOOL v6 = v5 > a5;
  if (v5 >= a5) {
    size_t v5 = a5;
  }
  BOOL v7 = (void *)(*(void *)(a1 + 32) + a3 + 8);
  uint64_t v8 = !v6;
  memcpy(v7, __src, v5);
  return v8;
}

uint64_t __Block_byref_object_copy__58475(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__58476(uint64_t a1)
{
}

uint64_t nw_path_struct_size_for_browse_descriptor(void *a1, unint64_t *a2)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  int v4 = nw_browse_descriptor_get_type(v3);
  if (v4 == 2)
  {
    application_service_name = nw_browse_descriptor_get_application_service_name((nw_browse_descriptor_t)v3);
    uint64_t bundle_id = nw_browse_descriptor_get_bundle_id(v3);
    char v13 = (const char *)bundle_id;
    if (application_service_name)
    {
      size_t v14 = strlen(application_service_name) + 23;
      if (v13)
      {
LABEL_12:
        size_t v15 = strlen(v13) + 1;
LABEL_26:
        *(void *)int buf = 0LL;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x2020000000LL;
        *(void *)&_BYTE buf[24] = 0LL;
        v33[0] = MEMORY[0x1895F87A8];
        v33[1] = 3221225472LL;
        v33[2] = ___ZL41nw_path_struct_size_for_browse_descriptorPU34objcproto23OS_nw_browse_descriptor8NSObjectPm_block_invoke;
        v33[3] = &unk_189BC3B88;
        void v33[4] = buf;
        nw_browse_descriptor_enumerate_device_filters(v3, v33);
        unint64_t v23 = v14 + v15 + *(void *)(*(void *)&buf[8] + 24LL);
        if (a2) {
          *a2 = v23;
        }
        if (v23 <= 0x1C) {
          uint64_t v10 = 28LL;
        }
        else {
          uint64_t v10 = v23;
        }
        _Block_object_dispose(buf, 8);
        goto LABEL_55;
      }
    }

    else
    {
      size_t v14 = 23LL;
      if (bundle_id) {
        goto LABEL_12;
      }
    }

    size_t v15 = 1LL;
    goto LABEL_26;
  }

  if (v4 == 1)
  {
    bonjour_service_os_log_type_t type = nw_browse_descriptor_get_bonjour_service_type((nw_browse_descriptor_t)v3);
    bonjour_service_int domain = nw_browse_descriptor_get_bonjour_service_domain((nw_browse_descriptor_t)v3);
    BOOL v7 = bonjour_service_domain;
    if (bonjour_service_type)
    {
      size_t v8 = strlen(bonjour_service_type) + 9;
      if (v7) {
        goto LABEL_5;
      }
    }

    else
    {
      size_t v8 = 9LL;
      if (bonjour_service_domain)
      {
LABEL_5:
        unint64_t v9 = strlen(v7) + 1 + v8;
        if (!a2) {
          goto LABEL_7;
        }
        goto LABEL_6;
      }
    }

    unint64_t v9 = v8 + 1;
    if (!a2)
    {
LABEL_7:
      if (v9 <= 0x1C) {
        uint64_t v10 = 28LL;
      }
      else {
        uint64_t v10 = v9;
      }
      goto LABEL_55;
    }

uint64_t nw_path_struct_size_for_advertise_descriptor(void *a1, unint64_t *a2)
{
  id v3 = a1;
  int type = nw_advertise_descriptor_get_type(v3);
  if (type != 2)
  {
    if (type != 1)
    {
      uint64_t v16 = 28LL;
      goto LABEL_22;
    }

    bonjour_name = (const char *)nw_advertise_descriptor_get_bonjour_name(v3);
    bonjour_int type = (const char *)nw_advertise_descriptor_get_bonjour_type(v3);
    bonjour_int domain = (const char *)nw_advertise_descriptor_get_bonjour_domain(v3);
    if (bonjour_name)
    {
      size_t v8 = strlen(bonjour_name) + 9;
      if (bonjour_type) {
        goto LABEL_5;
      }
    }

    else
    {
      size_t v8 = 9LL;
      if (bonjour_type)
      {
LABEL_5:
        size_t v9 = strlen(bonjour_type) + 1;
        if (bonjour_domain)
        {
LABEL_6:
          size_t v10 = strlen(bonjour_domain) + 1;
          goto LABEL_15;
        }

uint64_t __nw_path_create_necp_parameters_block_invoke_2(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += 73LL;
  return 1LL;
}

uint64_t __nw_path_create_necp_parameters_block_invoke_4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v63 = *MEMORY[0x1895F89C0];
  id v4 = a3;
  unsigned int length = xpc_data_get_length(v4);
  bytes_ptr = xpc_data_get_bytes_ptr(v4);
  unint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (!v7)
  {
    uint64_t v20 = a1;
    id v21 = v4;
    __nwlog_obj();
    os_log_type_t v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v55 = "nw_necp_append_tlv";
    unint64_t v23 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v52 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v55 = "nw_necp_append_tlv";
        _os_log_impl(&dword_181A5C000, v24, v25, "%{public}s called with null tlv_start", buf, 0xCu);
      }
    }

    else if (v52)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v33 = type;
      BOOL v34 = os_log_type_enabled(v24, type);
      if (backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v55 = "nw_necp_append_tlv";
          __int16 v56 = 2082;
          *(void *)qos_class_t v57 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v24,  v33,  "%{public}s called with null tlv_start, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_86:
        if (!v23)
        {
LABEL_88:
          unint64_t v14 = 0LL;
          id v4 = v21;
          a1 = v20;
          goto LABEL_29;
        }

void sub_18236C8CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL55nw_path_evaluator_add_browse_descriptor_to_necp_messagePU34objcproto23OS_nw_browse_descriptor8NSObjecthPhPKh_block_invoke( uint64_t a1, char *__s)
{
  size_t v4 = strlen(__s) + 1;
  memcpy((void *)(*(void *)(a1 + 40) + *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) + 8LL), __s, v4);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += v4;
  return 1LL;
}

uint64_t ___ZL55nw_path_evaluator_add_browse_descriptor_to_necp_messagePU34objcproto23OS_nw_browse_descriptor8NSObjecthPhPKh_block_invoke_27( uint64_t a1, int a2, uint64_t a3, void *__src, size_t a5)
{
  size_t v5 = *(unsigned __int8 *)(a1 + 40) - a3 - 8;
  BOOL v6 = v5 > a5;
  if (v5 >= a5) {
    size_t v5 = a5;
  }
  unint64_t v7 = (void *)(*(void *)(a1 + 32) + a3 + 8);
  uint64_t v8 = !v6;
  memcpy(v7, __src, v5);
  return v8;
}

BOOL __nw_path_create_necp_parameters_block_invoke_5( uint64_t a1, size_t __n, __int16 a3, void *__src, const void *a5)
{
  __int16 v7 = __n;
  uint64_t v56 = *MEMORY[0x1895F89C0];
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 __dst = 0u;
  __int128 v42 = 0u;
  size_t v9 = __n;
  memcpy(&v43, __src, __n);
  memcpy(&__dst, a5, v9);
  unint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (!v10)
  {
    __nwlog_obj();
    os_log_type_t v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v46 = "nw_necp_append_tlv";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v46 = "nw_necp_append_tlv";
      os_log_type_t v29 = "%{public}s called with null tlv_start";
LABEL_62:
      os_log_type_t v36 = v14;
      os_log_type_t v37 = v28;
      uint32_t v38 = 12;
LABEL_66:
      _os_log_impl(&dword_181A5C000, v36, v37, v29, buf, v38);
      goto LABEL_67;
    }

    if (!v39)
    {
      __nwlog_obj();
      unint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v46 = "nw_necp_append_tlv";
      os_log_type_t v29 = "%{public}s called with null tlv_start, backtrace limit exceeded";
      goto LABEL_62;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    unint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v28 = type;
    BOOL v33 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (!v33) {
        goto LABEL_67;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v46 = "nw_necp_append_tlv";
      os_log_type_t v29 = "%{public}s called with null tlv_start, no backtrace";
      goto LABEL_62;
    }

    if (!v33) {
      goto LABEL_15;
    }
    *(_DWORD *)int buf = 136446466;
    os_log_type_t v46 = "nw_necp_append_tlv";
    __int16 v47 = 2082;
    os_log_type_t v48 = backtrace_string;
    os_log_type_t v22 = "%{public}s called with null tlv_start, dumping backtrace:%{public}s";
LABEL_47:
    unint64_t v23 = v14;
    os_log_type_t v24 = v28;
    uint32_t v25 = 22;
LABEL_14:
    _os_log_impl(&dword_181A5C000, v23, v24, v22, buf, v25);
LABEL_15:

    free(backtrace_string);
    goto LABEL_16;
  }

  unint64_t v11 = *(void *)(a1 + 40);
  if (!v11)
  {
    __nwlog_obj();
    __int16 v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v46 = "nw_necp_append_tlv";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v46 = "nw_necp_append_tlv";
      os_log_type_t v29 = "%{public}s called with null beyond";
      goto LABEL_62;
    }

    if (!v39)
    {
      __nwlog_obj();
      unint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v46 = "nw_necp_append_tlv";
      os_log_type_t v29 = "%{public}s called with null beyond, backtrace limit exceeded";
      goto LABEL_62;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    unint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v28 = type;
    BOOL v34 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (!v34) {
        goto LABEL_67;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v46 = "nw_necp_append_tlv";
      os_log_type_t v29 = "%{public}s called with null beyond, no backtrace";
      goto LABEL_62;
    }

    if (!v34) {
      goto LABEL_15;
    }
    *(_DWORD *)int buf = 136446466;
    os_log_type_t v46 = "nw_necp_append_tlv";
    __int16 v47 = 2082;
    os_log_type_t v48 = backtrace_string;
    os_log_type_t v22 = "%{public}s called with null beyond, dumping backtrace:%{public}s";
    goto LABEL_47;
  }

  if (v10 >= v11)
  {
    __nwlog_obj();
    os_log_type_t v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136447234;
    os_log_type_t v46 = "nw_necp_append_tlv";
    __int16 v47 = 2048;
    os_log_type_t v48 = (char *)v10;
    __int16 v49 = 2048;
    uint64_t v50 = v11;
    __int16 v51 = 1024;
    *(_DWORD *)char v52 = 251;
    *(_WORD *)&v52[4] = 1024;
    *(_DWORD *)&v52[6] = 68;
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)int buf = 136447234;
        os_log_type_t v46 = "nw_necp_append_tlv";
        __int16 v47 = 2048;
        os_log_type_t v48 = (char *)v10;
        __int16 v49 = 2048;
        uint64_t v50 = v11;
        __int16 v51 = 1024;
        *(_DWORD *)char v52 = 251;
        *(_WORD *)&v52[4] = 1024;
        *(_DWORD *)&v52[6] = 68;
        os_log_type_t v29 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u";
LABEL_65:
        os_log_type_t v36 = v14;
        os_log_type_t v37 = v32;
        uint32_t v38 = 44;
        goto LABEL_66;
      }
    }

    else
    {
      if (v39)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        unint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v32 = type;
        BOOL v35 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (!v35) {
            goto LABEL_15;
          }
          *(_DWORD *)int buf = 136447490;
          os_log_type_t v46 = "nw_necp_append_tlv";
          __int16 v47 = 2048;
          os_log_type_t v48 = (char *)v10;
          __int16 v49 = 2048;
          uint64_t v50 = v11;
          __int16 v51 = 1024;
          *(_DWORD *)char v52 = 251;
          *(_WORD *)&v52[4] = 1024;
          *(_DWORD *)&v52[6] = 68;
          *(_WORD *)os_log_type_t v53 = 2082;
          *(void *)&v53[2] = backtrace_string;
          os_log_type_t v22 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s";
          unint64_t v23 = v14;
          os_log_type_t v24 = v32;
          uint32_t v25 = 54;
          goto LABEL_14;
        }

        if (!v35) {
          goto LABEL_67;
        }
        *(_DWORD *)int buf = 136447234;
        os_log_type_t v46 = "nw_necp_append_tlv";
        __int16 v47 = 2048;
        os_log_type_t v48 = (char *)v10;
        __int16 v49 = 2048;
        uint64_t v50 = v11;
        __int16 v51 = 1024;
        *(_DWORD *)char v52 = 251;
        *(_WORD *)&v52[4] = 1024;
        *(_DWORD *)&v52[6] = 68;
        os_log_type_t v29 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace";
        goto LABEL_65;
      }

      __nwlog_obj();
      unint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)int buf = 136447234;
        os_log_type_t v46 = "nw_necp_append_tlv";
        __int16 v47 = 2048;
        os_log_type_t v48 = (char *)v10;
        __int16 v49 = 2048;
        uint64_t v50 = v11;
        __int16 v51 = 1024;
        *(_DWORD *)char v52 = 251;
        *(_WORD *)&v52[4] = 1024;
        *(_DWORD *)&v52[6] = 68;
        os_log_type_t v29 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded";
        goto LABEL_65;
      }
    }

uint64_t ___ZL41nw_path_struct_size_for_browse_descriptorPU34objcproto23OS_nw_browse_descriptor8NSObjectPm_block_invoke( uint64_t a1, char *__s)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += strlen(__s) + 1;
  return 1LL;
}

BOOL nw_path_create_flow_result_from_tlv( NWConcrete_nw_path *a1, const unsigned __int8 *a2, unint64_t a3)
{
  uint64_t v183 = *MEMORY[0x1895F89C0];
  size_t v4 = a1;
  if (a3 <= 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
    *(_WORD *)&_BYTE buf[12] = 2048;
    *(void *)&_BYTE buf[14] = a3;
    BOOL v6 = (char *)_os_log_send_and_compose_impl();

    v178[0] = 16;
    LOBYTE(v175) = 0;
    if (v178[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v7 = (os_log_s *)(id)gLogObj;
      os_log_type_t v8 = v178[0];
      if (os_log_type_enabled(v7, (os_log_type_t)v178[0]))
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
        *(_WORD *)&_BYTE buf[12] = 2048;
        *(void *)&_BYTE buf[14] = a3;
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s NECP buffer too short %zu", buf, 0x16u);
      }
    }

    else
    {
      if ((_BYTE)v175)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v13 = (os_log_s *)(id)gLogObj;
        os_log_type_t v14 = v178[0];
        BOOL v15 = os_log_type_enabled(v13, (os_log_type_t)v178[0]);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)int buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
            *(_WORD *)&_BYTE buf[12] = 2048;
            *(void *)&_BYTE buf[14] = a3;
            *(_WORD *)&uint8_t buf[22] = 2082;
            *(void *)&_BYTE buf[24] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s NECP buffer too short %zu, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(backtrace_string);
          if (!v6) {
            goto LABEL_319;
          }
          goto LABEL_318;
        }

        if (v15)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
          *(_WORD *)&_BYTE buf[12] = 2048;
          *(void *)&_BYTE buf[14] = a3;
          _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s NECP buffer too short %zu, no backtrace", buf, 0x16u);
        }

LABEL_317:
        if (!v6)
        {
LABEL_319:
          unint64_t v10 = 0LL;
LABEL_346:

          return (BOOL)v10;
        }

void sub_18236FF20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, void *a32)
{
  _Unwind_Resume(a1);
}

void ___ZL27nw_path_flow_load_protocolsv_block_invoke(double a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  Helper_x8__nwrapport_copy_protocol_nw_protocol_definition_t definition = gotLoadHelper_x8__nwrapport_copy_protocol_definition(a1);
  if (*(void *)(v2 + 3552))
  {
    inited = (void *)nwrapport_copy_protocol_definition_delayInitStub(Helper_x8__nwrapport_copy_protocol_definition);
    if (inited)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v4 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        int v6 = 136446210;
        __int16 v7 = "nw_path_flow_load_protocols_block_invoke";
        _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_DEBUG,  "%{public}s registering rapport protocol",  (uint8_t *)&v6,  0xCu);
      }

      id v5 = inited;
      nw_protocol_register_handle( (uint64_t)v5 + 8,  v5,  (uint64_t)nw_protocol_implementation_create,  (uint64_t)nw_protocol_implementation_accept);
    }
  }

uint64_t nw_path_parse_necp_parameters( void *a1, void **a2, id *a3, id *a4, id *a5, _BYTE *a6, _WORD *a7, char *a8, _BYTE *a9, uint64_t a10, unint64_t a11)
{
  uint64_t v568 = *MEMORY[0x1895F89C0];
  nw_parameters_t parameters = a1;
  if (!parameters)
  {
    __nwlog_obj();
    v514 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
    int v17 = (char *)_os_log_send_and_compose_impl();

    uu[0] = 16;
    LOBYTE(v559) = 0;
    if (__nwlog_fault(v17, uu, &v559))
    {
      if (uu[0] == 17)
      {
        __nwlog_obj();
        size_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v515 = uu[0];
        if (os_log_type_enabled(v18, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          _os_log_impl(&dword_181A5C000, v18, v515, "%{public}s called with null parameters", buf, 0xCu);
        }

        goto LABEL_24;
      }

      if (!(_BYTE)v559)
      {
        __nwlog_obj();
        size_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v534 = uu[0];
        if (os_log_type_enabled(v18, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          _os_log_impl( &dword_181A5C000,  v18,  v534,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_24;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      size_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v521 = uu[0];
      BOOL v522 = os_log_type_enabled(v18, (os_log_type_t)uu[0]);
      if (!backtrace_string)
      {
        if (v522)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          _os_log_impl(&dword_181A5C000, v18, v521, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }

        goto LABEL_24;
      }

      if (v522)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&_BYTE buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v18,  v521,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
    }

    goto LABEL_25;
  }

  if (!a10)
  {
    __nwlog_obj();
    v516 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
    int v17 = (char *)_os_log_send_and_compose_impl();

    uu[0] = 16;
    LOBYTE(v559) = 0;
    if (__nwlog_fault(v17, uu, &v559))
    {
      if (uu[0] == 17)
      {
        __nwlog_obj();
        size_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v517 = uu[0];
        if (os_log_type_enabled(v18, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          _os_log_impl(&dword_181A5C000, v18, v517, "%{public}s called with null buffer", buf, 0xCu);
        }

        goto LABEL_24;
      }

      if (!(_BYTE)v559)
      {
        __nwlog_obj();
        size_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v535 = uu[0];
        if (os_log_type_enabled(v18, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          _os_log_impl( &dword_181A5C000,  v18,  v535,  "%{public}s called with null buffer, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_24;
      }

      BOOL v21 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      size_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v523 = uu[0];
      BOOL v524 = os_log_type_enabled(v18, (os_log_type_t)uu[0]);
      if (!v21)
      {
        if (v524)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          _os_log_impl(&dword_181A5C000, v18, v523, "%{public}s called with null buffer, no backtrace", buf, 0xCu);
        }

        goto LABEL_24;
      }

      if (v524)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&_BYTE buf[14] = v21;
        _os_log_impl( &dword_181A5C000,  v18,  v523,  "%{public}s called with null buffer, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_16;
    }

    goto LABEL_25;
  }

  if (!a11)
  {
    __nwlog_obj();
    v518 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
    int v17 = (char *)_os_log_send_and_compose_impl();

    uu[0] = 16;
    LOBYTE(v559) = 0;
    if (__nwlog_fault(v17, uu, &v559))
    {
      if (uu[0] == 17)
      {
        __nwlog_obj();
        size_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v519 = uu[0];
        if (os_log_type_enabled(v18, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          _os_log_impl(&dword_181A5C000, v18, v519, "%{public}s called with null buffer_length", buf, 0xCu);
        }

        goto LABEL_24;
      }

      if (!(_BYTE)v559)
      {
        __nwlog_obj();
        size_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v536 = uu[0];
        if (os_log_type_enabled(v18, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          _os_log_impl( &dword_181A5C000,  v18,  v536,  "%{public}s called with null buffer_length, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_24;
      }

      BOOL v21 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      size_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v525 = uu[0];
      BOOL v526 = os_log_type_enabled(v18, (os_log_type_t)uu[0]);
      if (!v21)
      {
        if (v526)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          _os_log_impl( &dword_181A5C000,  v18,  v525,  "%{public}s called with null buffer_length, no backtrace",  buf,  0xCu);
        }

        goto LABEL_24;
      }

      if (v526)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&_BYTE buf[14] = v21;
        _os_log_impl( &dword_181A5C000,  v18,  v525,  "%{public}s called with null buffer_length, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_16;
    }

LABEL_468:
LABEL_469:
            if (!v57) {
              goto LABEL_471;
            }
LABEL_470:
            free(v57);
            goto LABEL_471;
          }

          v281 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v58 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v538 = uu[0];
          BOOL v282 = os_log_type_enabled(v58, (os_log_type_t)uu[0]);
          if (!v281)
          {
            if (v282)
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl( &dword_181A5C000,  v58,  v538,  "%{public}s NECP_CLIENT_PARAMETER_DOMAIN_OWNER came before NECP_CLIENT_PARAMETER_REMOTE_ENDPOINT, no backtrace",  buf,  0xCu);
            }

            goto LABEL_468;
          }

          if (v282)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&_BYTE buf[14] = v281;
            _os_log_impl( &dword_181A5C000,  v58,  v538,  "%{public}s NECP_CLIENT_PARAMETER_DOMAIN_OWNER came before NECP_CLIENT_PARAMETER_REMOTE_ENDPOINT, dumping b acktrace:%{public}s",  buf,  0x16u);
          }

          free(v281);
          if (v57) {
            goto LABEL_470;
          }
LABEL_471:
          if (!v36[v55])
          {
            nw_parameters_set_attributed_bundle_identifier(parameters, v36);
            goto LABEL_492;
          }

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v223 = (id)gLogObj;
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = v27;
          v224 = (char *)_os_log_send_and_compose_impl();

          uu[0] = 16;
          os_log_type_t v561 = OS_LOG_TYPE_DEFAULT;
          if (uu[0] == 17)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v225 = (os_log_s *)(id)gLogObj;
            os_log_type_t v226 = uu[0];
            if (os_log_type_enabled(v225, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = v27;
              _os_log_impl( &dword_181A5C000,  v225,  v226,  "%{public}s NECP_CLIENT_PARAMETER_ATTRIBUTED_BUNDLE_IDENTIFIER of length %u not NULL-terminated",  buf,  0x12u);
            }
          }

          else if (v561)
          {
            v227 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v225 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v228 = uu[0];
            BOOL v229 = os_log_type_enabled(v225, (os_log_type_t)uu[0]);
            if (v227)
            {
              if (v229)
              {
                *(_DWORD *)int buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&_BYTE buf[14] = v27;
                *(_WORD *)&buf[18] = 2082;
                *(void *)&buf[20] = v227;
                _os_log_impl( &dword_181A5C000,  v225,  v228,  "%{public}s NECP_CLIENT_PARAMETER_ATTRIBUTED_BUNDLE_IDENTIFIER of length %u not NULL-terminated, dumpin g backtrace:%{public}s",  buf,  0x1Cu);
              }

              free(v227);
              if (v224) {
                goto LABEL_491;
              }
              goto LABEL_492;
            }

            if (v229)
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = v27;
              _os_log_impl( &dword_181A5C000,  v225,  v228,  "%{public}s NECP_CLIENT_PARAMETER_ATTRIBUTED_BUNDLE_IDENTIFIER of length %u not NULL-terminated, no backtrace",  buf,  0x12u);
            }
          }

          else
          {
            __nwlog_obj();
            v225 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v230 = uu[0];
            if (os_log_type_enabled(v225, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = v27;
              _os_log_impl( &dword_181A5C000,  v225,  v230,  "%{public}s NECP_CLIENT_PARAMETER_ATTRIBUTED_BUNDLE_IDENTIFIER of length %u not NULL-terminated, backtrac e limit exceeded",  buf,  0x12u);
            }
          }

LABEL_490:
          if (v224) {
LABEL_491:
          }
            free(v224);
LABEL_492:
          if (v553)
          {
            if ((_DWORD)v27 != 16)
            {
              __nwlog_obj();
              v433 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v433, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)int buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&_BYTE buf[14] = v26;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v27;
                *(_WORD *)&_BYTE buf[24] = 1024;
                *(_DWORD *)&buf[26] = 16;
                _os_log_impl( &dword_181A5C000,  v433,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
              }
            }

            v231 = v553;
            *(_OWORD *)((char *)v231 + 2_Block_object_dispose(va, 8) = *(_OWORD *)v36;
            v553 = v231;

            v232 = parameters;
            v233 = v232;
            uint64_t v234 = *(void *)(*((void *)parameters + 13) + 176LL);
            if (v234)
            {
              xpc_object_t v161 = *(id *)(v234 + 72);

              if (v161) {
                goto LABEL_502;
              }
            }

            else
            {
            }

            xpc_object_t v161 = xpc_array_create(0LL, 0LL);
            if (v161)
            {
LABEL_502:
              xpc_array_set_uuid(v161, 0xFFFFFFFFFFFFFFFFLL, (const unsigned __int8 *)v36);
              nw_parameters_set_required_netagent_uuids(v233, v161);
              goto LABEL_315;
            }

            __nwlog_obj();
            v235 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            v236 = (char *)_os_log_send_and_compose_impl();

            uu[0] = 16;
            os_log_type_t v561 = OS_LOG_TYPE_DEFAULT;
            if (uu[0] == 17)
            {
              __nwlog_obj();
              v237 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v238 = uu[0];
              if (os_log_type_enabled(v237, (os_log_type_t)uu[0]))
              {
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                _os_log_impl(&dword_181A5C000, v237, v238, "%{public}s xpc_array_create failed", buf, 0xCu);
              }

              goto LABEL_596;
            }

            if (v561)
            {
              v239 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v237 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v240 = uu[0];
              BOOL v241 = os_log_type_enabled(v237, (os_log_type_t)uu[0]);
              if (v239)
              {
                if (v241)
                {
                  *(_DWORD *)int buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                  *(_WORD *)&_BYTE buf[12] = 2082;
                  *(void *)&_BYTE buf[14] = v239;
                  _os_log_impl( &dword_181A5C000,  v237,  v240,  "%{public}s xpc_array_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v239);
                goto LABEL_597;
              }

              if (v241)
              {
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                _os_log_impl( &dword_181A5C000,  v237,  v240,  "%{public}s xpc_array_create failed, no backtrace",  buf,  0xCu);
              }
            }

            else
            {
              __nwlog_obj();
              v237 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v242 = uu[0];
              if (os_log_type_enabled(v237, (os_log_type_t)uu[0]))
              {
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                _os_log_impl( &dword_181A5C000,  v237,  v242,  "%{public}s xpc_array_create failed, backtrace limit exceeded",  buf,  0xCu);
              }
            }

LABEL_499:
          v553 = 0LL;
          break;
        case 34:
          if (!v36[(v27 - 1)])
          {
            nw_parameters_set_attribution_context(parameters, v36);
            break;
          }

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v103 = (id)gLogObj;
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = v27;
          uint64_t v91 = (const char *)_os_log_send_and_compose_impl();

          uu[0] = 16;
          os_log_type_t v561 = OS_LOG_TYPE_DEFAULT;
          if (uu[0] == 17)
          {
            __nwlog_obj();
            os_log_type_t v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v104 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = v27;
              _os_log_impl( &dword_181A5C000,  v92,  v104,  "%{public}s NECP_CLIENT_PARAMETER_DOMAIN_CONTEXT of length %u not NULL-terminated",  buf,  0x12u);
            }

            goto LABEL_897;
          }

          if (v561)
          {
            v192 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            os_log_type_t v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v193 = uu[0];
            BOOL v194 = os_log_type_enabled(v92, (os_log_type_t)uu[0]);
            if (v192)
            {
              if (v194)
              {
                *(_DWORD *)int buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&_BYTE buf[14] = v27;
                *(_WORD *)&buf[18] = 2082;
                *(void *)&buf[20] = v192;
                _os_log_impl( &dword_181A5C000,  v92,  v193,  "%{public}s NECP_CLIENT_PARAMETER_DOMAIN_CONTEXT of length %u not NULL-terminated, dumping backtrace:%{public}s",  buf,  0x1Cu);
              }

              goto LABEL_422;
            }

            if (v194)
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = v27;
              _os_log_impl( &dword_181A5C000,  v92,  v193,  "%{public}s NECP_CLIENT_PARAMETER_DOMAIN_CONTEXT of length %u not NULL-terminated, no backtrace",  buf,  0x12u);
            }
          }

          else
          {
            __nwlog_obj();
            os_log_type_t v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v211 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = v27;
              _os_log_impl( &dword_181A5C000,  v92,  v211,  "%{public}s NECP_CLIENT_PARAMETER_DOMAIN_CONTEXT of length %u not NULL-terminated, backtrace limit exceeded",  buf,  0x12u);
            }
          }

          goto LABEL_897;
        case 35:
          if (v36[(v27 - 1)])
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v105 = (id)gLogObj;
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_BYTE buf[14] = v27;
            uint64_t v91 = (const char *)_os_log_send_and_compose_impl();

            uu[0] = 16;
            os_log_type_t v561 = OS_LOG_TYPE_DEFAULT;
            if (uu[0] == 17)
            {
              __nwlog_obj();
              os_log_type_t v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v106 = uu[0];
              if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&_BYTE buf[14] = v27;
                _os_log_impl( &dword_181A5C000,  v92,  v106,  "%{public}s NECP_CLIENT_PARAMETER_TRACKER_DOMAIN of length %u not NULL-terminated",  buf,  0x12u);
              }

              goto LABEL_897;
            }

            if (v561)
            {
              v192 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              os_log_type_t v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v195 = uu[0];
              BOOL v196 = os_log_type_enabled(v92, (os_log_type_t)uu[0]);
              if (v192)
              {
                if (v196)
                {
                  *(_DWORD *)int buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                  *(_WORD *)&_BYTE buf[12] = 1024;
                  *(_DWORD *)&_BYTE buf[14] = v27;
                  *(_WORD *)&buf[18] = 2082;
                  *(void *)&buf[20] = v192;
                  _os_log_impl( &dword_181A5C000,  v92,  v195,  "%{public}s NECP_CLIENT_PARAMETER_TRACKER_DOMAIN of length %u not NULL-terminated, dumping backtrace:%{public}s",  buf,  0x1Cu);
                }

                goto LABEL_422;
              }

              if (v196)
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&_BYTE buf[14] = v27;
                _os_log_impl( &dword_181A5C000,  v92,  v195,  "%{public}s NECP_CLIENT_PARAMETER_TRACKER_DOMAIN of length %u not NULL-terminated, no backtrace",  buf,  0x12u);
              }
            }

            else
            {
              __nwlog_obj();
              os_log_type_t v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v212 = uu[0];
              if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&_BYTE buf[14] = v27;
                _os_log_impl( &dword_181A5C000,  v92,  v212,  "%{public}s NECP_CLIENT_PARAMETER_TRACKER_DOMAIN of length %u not NULL-terminated, backtrace limit exceeded",  buf,  0x12u);
              }
            }

            goto LABEL_897;
          }

          if (!v552) {
            break;
          }
          if (*v552)
          {
            nw_endpoint_set_known_tracker_name(*v552, v36);
            break;
          }

          __nwlog_obj();
          v220 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          uint64_t v91 = (const char *)_os_log_send_and_compose_impl();

          uu[0] = 16;
          os_log_type_t v561 = OS_LOG_TYPE_DEFAULT;
          if (uu[0] == 17)
          {
            __nwlog_obj();
            os_log_type_t v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v221 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl( &dword_181A5C000,  v92,  v221,  "%{public}s NECP_CLIENT_PARAMETER_TRACKER_DOMAIN came before NECP_CLIENT_PARAMETER_REMOTE_ENDPOINT",  buf,  0xCu);
            }

            goto LABEL_897;
          }

          if (v561 == OS_LOG_TYPE_DEFAULT)
          {
            __nwlog_obj();
            os_log_type_t v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v317 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl( &dword_181A5C000,  v92,  v317,  "%{public}s NECP_CLIENT_PARAMETER_TRACKER_DOMAIN came before NECP_CLIENT_PARAMETER_REMOTE_ENDPOINT, backt race limit exceeded",  buf,  0xCu);
            }

            goto LABEL_897;
          }

          v283 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v284 = uu[0];
          BOOL v285 = os_log_type_enabled(v92, (os_log_type_t)uu[0]);
          if (!v283)
          {
            if (v285)
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl( &dword_181A5C000,  v92,  v284,  "%{public}s NECP_CLIENT_PARAMETER_TRACKER_DOMAIN came before NECP_CLIENT_PARAMETER_REMOTE_ENDPOINT, no backtrace",  buf,  0xCu);
            }

            goto LABEL_897;
          }

          if (v285)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&_BYTE buf[14] = v283;
            _os_log_impl( &dword_181A5C000,  v92,  v284,  "%{public}s NECP_CLIENT_PARAMETER_TRACKER_DOMAIN came before NECP_CLIENT_PARAMETER_REMOTE_ENDPOINT, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v283);
          if (v91) {
            goto LABEL_899;
          }
          break;
        case 36:
          uint64_t v55 = (v27 - 1);
          goto LABEL_471;
        case 42:
          if (!v36[(v27 - 1)])
          {
            nw_parameters_set_url(parameters, v36);
            break;
          }

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v107 = (id)gLogObj;
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = v27;
          uint64_t v91 = (const char *)_os_log_send_and_compose_impl();

          uu[0] = 16;
          os_log_type_t v561 = OS_LOG_TYPE_DEFAULT;
          if (uu[0] == 17)
          {
            __nwlog_obj();
            os_log_type_t v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v108 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = v27;
              _os_log_impl( &dword_181A5C000,  v92,  v108,  "%{public}s NECP_CLIENT_PARAMETER_URL of length %u not NULL-terminated",  buf,  0x12u);
            }

            goto LABEL_897;
          }

          if (v561)
          {
            v192 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            os_log_type_t v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v197 = uu[0];
            BOOL v198 = os_log_type_enabled(v92, (os_log_type_t)uu[0]);
            if (v192)
            {
              if (v198)
              {
                *(_DWORD *)int buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&_BYTE buf[14] = v27;
                *(_WORD *)&buf[18] = 2082;
                *(void *)&buf[20] = v192;
                _os_log_impl( &dword_181A5C000,  v92,  v197,  "%{public}s NECP_CLIENT_PARAMETER_URL of length %u not NULL-terminated, dumping backtrace:%{public}s",  buf,  0x1Cu);
              }

              goto LABEL_422;
            }

            if (v198)
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = v27;
              _os_log_impl( &dword_181A5C000,  v92,  v197,  "%{public}s NECP_CLIENT_PARAMETER_URL of length %u not NULL-terminated, no backtrace",  buf,  0x12u);
            }
          }

          else
          {
            __nwlog_obj();
            os_log_type_t v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v213 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = v27;
              _os_log_impl( &dword_181A5C000,  v92,  v213,  "%{public}s NECP_CLIENT_PARAMETER_URL of length %u not NULL-terminated, backtrace limit exceeded",  buf,  0x12u);
            }
          }

          goto LABEL_897;
        case 100:
          if (v27 <= 0x18)
          {
            bzero(&buf[v27], 24 - v27);
            memcpy(buf, v36, v27);
            os_log_type_t v60 = nw_interface_create_with_name((char *)buf);
            xpc_object_t v61 = v60;
            if (!v60) {
              goto LABEL_117;
            }
            char v62 = nw_interface_copy_dictionary(v60);
            if (v62)
            {
              id v63 = nw_parameters_copy_prohibited_interfaces(parameters);
              if (v63 || (id v63 = xpc_array_create(0LL, 0LL)) != 0LL)
              {
                xpc_array_append_value(v63, v62);
                nw_parameters_set_prohibited_interfaces(parameters, v63);
                goto LABEL_115;
              }

              __nwlog_obj();
              v292 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)uu = 136446210;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              v293 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t v561 = OS_LOG_TYPE_ERROR;
              char v556 = 0;
              if (__nwlog_fault(v293, &v561, &v556))
              {
                if (v561 == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v294 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v295 = v561;
                  if (os_log_type_enabled(v294, v561))
                  {
                    *(_DWORD *)uu = 136446210;
                    *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_181A5C000, v294, v295, "%{public}s xpc_array_create failed", uu, 0xCu);
                  }

                  goto LABEL_957;
                }

                if (v556)
                {
                  v419 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v294 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v420 = v561;
                  BOOL v421 = os_log_type_enabled(v294, v561);
                  if (v419)
                  {
                    if (v421)
                    {
                      *(_DWORD *)uu = 136446466;
                      *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                      *(_WORD *)&uu[12] = 2082;
                      *(void *)&uu[14] = v419;
                      _os_log_impl( &dword_181A5C000,  v294,  v420,  "%{public}s xpc_array_create failed, dumping backtrace:%{public}s",  uu,  0x16u);
                    }

                    free(v419);
                    goto LABEL_958;
                  }

                  if (v421)
                  {
                    *(_DWORD *)uu = 136446210;
                    *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl( &dword_181A5C000,  v294,  v420,  "%{public}s xpc_array_create failed, no backtrace",  uu,  0xCu);
                  }
                }

                else
                {
                  __nwlog_obj();
                  v294 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v431 = v561;
                  if (os_log_type_enabled(v294, v561))
                  {
                    *(_DWORD *)uu = 136446210;
                    *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl( &dword_181A5C000,  v294,  v431,  "%{public}s xpc_array_create failed, backtrace limit exceeded",  uu,  0xCu);
                  }
                }

LABEL_957:
              }

LABEL_958:
              if (v293) {
                free(v293);
              }
              id v63 = 0LL;
LABEL_115:
            }

            goto LABEL_117;
          }

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v157 = (id)gLogObj;
          *(_DWORD *)int buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = 100;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v27;
          *(_WORD *)&_BYTE buf[24] = 2080;
          *(void *)&buf[26] = "nw_path_parse_necp_parameters";
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = 3248;
          uint64_t v91 = (const char *)_os_log_send_and_compose_impl();

          uu[0] = 16;
          os_log_type_t v561 = OS_LOG_TYPE_DEFAULT;
          if (uu[0] == 17)
          {
            __nwlog_obj();
            os_log_type_t v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v158 = uu[0];
            if (os_log_type_enabled(v92, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = 100;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&_BYTE buf[24] = 2080;
              *(void *)&buf[26] = "nw_path_parse_necp_parameters";
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = 3248;
              _os_log_impl( &dword_181A5C000,  v92,  v158,  "%{public}s TLV of type %d has invalid length %u (%s:%d)",  buf,  0x28u);
            }
          }

          else if (v561)
          {
            v192 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            os_log_type_t v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v203 = uu[0];
            BOOL v204 = os_log_type_enabled(v92, (os_log_type_t)uu[0]);
            if (v192)
            {
              if (v204)
              {
                *(_DWORD *)int buf = 136447490;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&_BYTE buf[14] = 100;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v27;
                *(_WORD *)&_BYTE buf[24] = 2080;
                *(void *)&buf[26] = "nw_path_parse_necp_parameters";
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = 3248;
                *(_WORD *)&_BYTE buf[40] = 2082;
                *(void *)&buf[42] = v192;
                _os_log_impl( &dword_181A5C000,  v92,  v203,  "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s",  buf,  0x32u);
              }

LABEL_897:
LABEL_898:
          if (v91)
          {
LABEL_899:
            os_log_type_t v82 = (char *)v91;
LABEL_900:
            free(v82);
            break;
          }

          break;
        case 101:
          if ((_DWORD)v27 != 1)
          {
            __nwlog_obj();
            v452 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v452, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = 101;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&_BYTE buf[24] = 1024;
              *(_DWORD *)&buf[26] = 1;
              _os_log_impl( &dword_181A5C000,  v452,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
            }
          }

          int v109 = *v36;
          else {
            uint64_t v110 = dword_18272D740[v109 - 1];
          }
          unsigned int v159 = v109 - 3;
          if (v159 <= 4)
          {
            uint64_t v160 = dword_18272D758[v159];
            if ((_DWORD)v160)
            {
              if ((_DWORD)v160 == 1002)
              {
                ++HIDWORD(v549);
                break;
              }

              BOOL v40 = (nw_interface *)nw_parameters_copy_prohibited_interface_subtypes(parameters);
              if (v40 || (BOOL v40 = (nw_interface *)xpc_array_create(0LL, 0LL)) != 0LL)
              {
                xpc_array_set_uint64(v40, 0xFFFFFFFFFFFFFFFFLL, v160);
                nw_parameters_set_prohibited_interface_subtypes(parameters, v40);
                goto LABEL_417;
              }

              __nwlog_obj();
              v312 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              v313 = (char *)_os_log_send_and_compose_impl();

              uu[0] = 16;
              os_log_type_t v561 = OS_LOG_TYPE_DEFAULT;
              if (uu[0] == 17)
              {
                __nwlog_obj();
                v314 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v315 = uu[0];
                if (os_log_type_enabled(v314, (os_log_type_t)uu[0]))
                {
                  *(_DWORD *)int buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                  _os_log_impl(&dword_181A5C000, v314, v315, "%{public}s xpc_array_create failed", buf, 0xCu);
                }

                goto LABEL_963;
              }

              if (v561)
              {
                v422 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v314 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v423 = uu[0];
                BOOL v424 = os_log_type_enabled(v314, (os_log_type_t)uu[0]);
                if (v422)
                {
                  if (v424)
                  {
                    *(_DWORD *)int buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                    *(_WORD *)&_BYTE buf[12] = 2082;
                    *(void *)&_BYTE buf[14] = v422;
                    _os_log_impl( &dword_181A5C000,  v314,  v423,  "%{public}s xpc_array_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(v422);
                  goto LABEL_964;
                }

                if (v424)
                {
                  *(_DWORD *)int buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                  _os_log_impl( &dword_181A5C000,  v314,  v423,  "%{public}s xpc_array_create failed, no backtrace",  buf,  0xCu);
                }
              }

              else
              {
                __nwlog_obj();
                v314 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v432 = uu[0];
                if (os_log_type_enabled(v314, (os_log_type_t)uu[0]))
                {
                  *(_DWORD *)int buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
                  _os_log_impl( &dword_181A5C000,  v314,  v432,  "%{public}s xpc_array_create failed, backtrace limit exceeded",  buf,  0xCu);
                }
              }

LABEL_963:
LABEL_964:
              if (v313) {
                free(v313);
              }
              BOOL v40 = 0LL;
              goto LABEL_417;
            }
          }

          if (!v110) {
            break;
          }
          xpc_object_t v161 = nw_parameters_copy_prohibited_interface_types(parameters);
          if (v161 || (xpc_object_t v161 = xpc_array_create(0LL, 0LL)) != 0LL)
          {
            xpc_array_set_uint64(v161, 0xFFFFFFFFFFFFFFFFLL, v110);
            nw_parameters_set_prohibited_interface_types(parameters, v161);
            goto LABEL_315;
          }

          __nwlog_obj();
          v256 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          v257 = (char *)_os_log_send_and_compose_impl();

          uu[0] = 16;
          os_log_type_t v561 = OS_LOG_TYPE_DEFAULT;
          if (uu[0] == 17)
          {
            __nwlog_obj();
            v258 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v259 = uu[0];
            if (os_log_type_enabled(v258, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_181A5C000, v258, v259, "%{public}s xpc_array_create failed", buf, 0xCu);
            }

LABEL_915:
            goto LABEL_916;
          }

          if (v561 == OS_LOG_TYPE_DEFAULT)
          {
            __nwlog_obj();
            v258 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v425 = uu[0];
            if (os_log_type_enabled(v258, (os_log_type_t)uu[0]))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl( &dword_181A5C000,  v258,  v425,  "%{public}s xpc_array_create failed, backtrace limit exceeded",  buf,  0xCu);
            }

            goto LABEL_915;
          }

          v286 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v258 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v287 = uu[0];
          BOOL v288 = os_log_type_enabled(v258, (os_log_type_t)uu[0]);
          if (!v286)
          {
            if (v288)
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_181A5C000, v258, v287, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
            }

            goto LABEL_915;
          }

          if (v288)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&_BYTE buf[14] = v286;
            _os_log_impl( &dword_181A5C000,  v258,  v287,  "%{public}s xpc_array_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v286);
LABEL_916:
          if (v257) {
            free(v257);
          }
          xpc_object_t v161 = 0LL;
LABEL_315:

          break;
        case 102:
          if ((_DWORD)v27 == 16) {
            goto LABEL_244;
          }
          __nwlog_obj();
          v460 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v460, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_BYTE buf[14] = 102;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v27;
            *(_WORD *)&_BYTE buf[24] = 1024;
            *(_DWORD *)&buf[26] = 16;
            _os_log_impl( &dword_181A5C000,  v460,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
          }

LABEL_244:
          *(_OWORD *)uu = *(_OWORD *)v36;
          if (uuid_is_null(uu)) {
            break;
          }
          BOOL v40 = (nw_interface *)nw_parameters_copy_prohibited_netagent_uuids(parameters);
          if (v40 || (BOOL v40 = (nw_interface *)xpc_array_create(0LL, 0LL)) != 0LL)
          {
            xpc_array_set_uuid(v40, 0xFFFFFFFFFFFFFFFFLL, uu);
            nw_parameters_set_prohibited_netagent_uuids(parameters, v40);
            goto LABEL_417;
          }

          __nwlog_obj();
          v276 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          v277 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v561 = OS_LOG_TYPE_ERROR;
          char v556 = 0;
          if (v561 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v278 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v279 = v561;
            if (os_log_type_enabled(v278, v561))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_181A5C000, v278, v279, "%{public}s xpc_array_create failed", buf, 0xCu);
            }

LABEL_945:
            goto LABEL_946;
          }

          if (!v556)
          {
            __nwlog_obj();
            v278 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v430 = v561;
            if (os_log_type_enabled(v278, v561))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl( &dword_181A5C000,  v278,  v430,  "%{public}s xpc_array_create failed, backtrace limit exceeded",  buf,  0xCu);
            }

            goto LABEL_945;
          }

          v305 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v278 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v306 = v561;
          BOOL v307 = os_log_type_enabled(v278, v561);
          if (!v305)
          {
            if (v307)
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_181A5C000, v278, v306, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
            }

            goto LABEL_945;
          }

          if (v307)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&_BYTE buf[14] = v305;
            _os_log_impl( &dword_181A5C000,  v278,  v306,  "%{public}s xpc_array_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v305);
LABEL_946:
          if (v277) {
            free(v277);
          }
          BOOL v40 = 0LL;
LABEL_417:

          break;
        case 103:
          memset(buf, 0, sizeof(buf));
          if ((_DWORD)v27 == 64) {
            goto LABEL_119;
          }
          __nwlog_obj();
          v442 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v442, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uu = 136446978;
            *(void *)&uu[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&uu[12] = 1024;
            *(_DWORD *)&uu[14] = 103;
            *(_WORD *)&uu[18] = 1024;
            *(_DWORD *)&uu[20] = v27;
            LOWORD(v565) = 1024;
            *(_DWORD *)((char *)&v565 + 2) = 64;
            _os_log_impl( &dword_181A5C000,  v442,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  uu,  0x1Eu);
          }

LABEL_119:
          __int128 v64 = *((_OWORD *)v36 + 1);
          *(_OWORD *)int buf = *(_OWORD *)v36;
          *(_OWORD *)&buf[16] = v64;
          __int128 v65 = *((_OWORD *)v36 + 3);
          *(_OWORD *)&_BYTE buf[32] = *((_OWORD *)v36 + 2);
          *(_OWORD *)&buf[48] = v65;
          os_log_type_t v66 = parameters;
          uint64_t v67 = *(void *)(*((void *)parameters + 13) + 176LL);
          if (v67) {
            xpc_object_t v68 = *(id *)(v67 + 32);
          }
          else {
            xpc_object_t v68 = 0LL;
          }

          int v175 = v66;
          uint64_t v176 = *(void *)(*((void *)parameters + 13) + 176LL);
          if (v176) {
            xpc_object_t v71 = *(id *)(v176 + 40);
          }
          else {
            xpc_object_t v71 = 0LL;
          }

          if (v68) {
            goto LABEL_768;
          }
          xpc_object_t v68 = xpc_array_create(0LL, 0LL);
          if (v68) {
            goto LABEL_768;
          }
          __nwlog_obj();
          v179 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)uu = 136446210;
          *(void *)&uu[4] = "nw_path_parse_necp_parameters";
          __int16 v180 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v561 = OS_LOG_TYPE_ERROR;
          char v556 = 0;
          if (v561 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v181 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v182 = v561;
            if (os_log_type_enabled(v181, v561))
            {
              *(_DWORD *)uu = 136446210;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_181A5C000, v181, v182, "%{public}s xpc_array_create failed", uu, 0xCu);
            }

LABEL_864:
              }

LABEL_865:
              if (v382) {
                free(v382);
              }
              xpc_object_t v71 = 0LL;
              goto LABEL_875;
            }
          }

          if (!v68) {
            goto LABEL_875;
          }
          if (strnlen((const char *)buf, 0x20uLL) <= 0x1F && strnlen((const char *)&buf[32], 0x20uLL) <= 0x1F)
          {
            xpc_array_set_string(v68, 0xFFFFFFFFFFFFFFFFLL, (const char *)buf);
            xpc_array_set_string(v71, 0xFFFFFFFFFFFFFFFFLL, (const char *)&buf[32]);
            nw_parameters_set_prohibited_netagent_classes(v175, v68, v71);
            goto LABEL_875;
          }

          __nwlog_obj();
          v369 = (void *)objc_claimAutoreleasedReturnValue();
          size_t v370 = strnlen((const char *)buf, 0x20uLL);
          size_t v371 = strnlen((const char *)&buf[32], 0x20uLL);
          *(_DWORD *)uu = 136446722;
          *(void *)&uu[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&uu[12] = 2048;
          *(void *)&uu[14] = v370;
          *(_WORD *)&uu[22] = 2048;
          size_t v565 = v371;
          v321 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v561 = OS_LOG_TYPE_ERROR;
          char v556 = 0;
          if (v561 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v372 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v373 = v561;
            if (os_log_type_enabled(v372, v561))
            {
              size_t v374 = strnlen((const char *)buf, 0x20uLL);
              size_t v375 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)uu = 136446722;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(void *)&uu[14] = v374;
              *(_WORD *)&uu[22] = 2048;
              size_t v565 = v375;
              _os_log_impl( &dword_181A5C000,  v372,  v373,  "%{public}s invalid prohibited netagent string lengths %zu %zu",  uu,  0x20u);
            }

LABEL_799:
            goto LABEL_800;
          }

          if (!v556)
          {
            __nwlog_obj();
            v372 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v385 = v561;
            if (os_log_type_enabled(v372, v561))
            {
              size_t v386 = strnlen((const char *)buf, 0x20uLL);
              size_t v387 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)uu = 136446722;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(void *)&uu[14] = v386;
              *(_WORD *)&uu[22] = 2048;
              size_t v565 = v387;
              _os_log_impl( &dword_181A5C000,  v372,  v385,  "%{public}s invalid prohibited netagent string lengths %zu %zu, backtrace limit exceeded",  uu,  0x20u);
            }

            goto LABEL_799;
          }

          v376 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v372 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v377 = v561;
          BOOL v378 = os_log_type_enabled(v372, v561);
          if (!v376)
          {
            if (v378)
            {
              size_t v391 = strnlen((const char *)buf, 0x20uLL);
              size_t v392 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)uu = 136446722;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(void *)&uu[14] = v391;
              *(_WORD *)&uu[22] = 2048;
              size_t v565 = v392;
              _os_log_impl( &dword_181A5C000,  v372,  v377,  "%{public}s invalid prohibited netagent string lengths %zu %zu, no backtrace",  uu,  0x20u);
            }

            goto LABEL_799;
          }

          if (v378)
          {
            size_t v379 = strnlen((const char *)buf, 0x20uLL);
            size_t v380 = strnlen((const char *)&buf[32], 0x20uLL);
            *(_DWORD *)uu = 136446978;
            *(void *)&uu[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&uu[12] = 2048;
            *(void *)&uu[14] = v379;
            *(_WORD *)&uu[22] = 2048;
            size_t v565 = v380;
            __int16 v566 = 2082;
            v567 = v376;
            _os_log_impl( &dword_181A5C000,  v372,  v377,  "%{public}s invalid prohibited netagent string lengths %zu %zu, dumping backtrace:%{public}s",  uu,  0x2Au);
          }

          free(v376);
LABEL_800:
          if (v321) {
LABEL_844:
          }
            free(v321);
LABEL_875:

          break;
        case 111:
          if ((_DWORD)v27 != 1)
          {
            __nwlog_obj();
            v453 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v453, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = 111;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v27;
              *(_WORD *)&_BYTE buf[24] = 1024;
              *(_DWORD *)&buf[26] = 1;
              _os_log_impl( &dword_181A5C000,  v453,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
            }
          }

          unsigned int v111 = *v36 - 1;
          if (v111 > 5) {
            unsigned int v112 = 0;
          }
          else {
            unsigned int v112 = dword_18272D740[v111];
          }
          os_log_type_t v162 = parameters;
          BOOL v163 = v162;
          uint64_t v164 = *((void *)parameters + 13);
          uint64_t v165 = 92LL;
          if ((*(_WORD *)(v164 + 100) & 0x100) == 0) {
            uint64_t v165 = 76LL;
          }
          *(_DWORD *)(v164 + v165) = v112;

          unsigned int v166 = *v36 - 3;
          if (v166 > 4) {
            unsigned int v167 = 0;
          }
          else {
            unsigned int v167 = dword_18272D758[v166];
          }
          v171 = v163;
          uint64_t v172 = *((void *)parameters + 13);
          uint64_t v173 = 96LL;
          if ((*(_WORD *)(v172 + 100) & 0x100) == 0) {
            uint64_t v173 = 80LL;
          }
          *(_DWORD *)(v172 + v173) = v167;

          break;
        case 112:
          if ((_DWORD)v27 == 16) {
            goto LABEL_122;
          }
          __nwlog_obj();
          v443 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v443, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_BYTE buf[14] = 112;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v27;
            *(_WORD *)&_BYTE buf[24] = 1024;
            *(_DWORD *)&buf[26] = 16;
            _os_log_impl( &dword_181A5C000,  v443,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
          }

LABEL_122:
          *(_OWORD *)uu = *(_OWORD *)v36;
          if (uuid_is_null(uu)) {
            break;
          }
          BOOL v40 = (nw_interface *)nw_parameters_copy_required_netagent_uuids(parameters);
          if (v40 || (BOOL v40 = (nw_interface *)xpc_array_create(0LL, 0LL)) != 0LL)
          {
            xpc_array_set_uuid(v40, 0xFFFFFFFFFFFFFFFFLL, uu);
            nw_parameters_set_required_netagent_uuids(parameters, v40);
            goto LABEL_417;
          }

          __nwlog_obj();
          v268 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          v269 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v561 = OS_LOG_TYPE_ERROR;
          char v556 = 0;
          if (v561 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v270 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v271 = v561;
            if (os_log_type_enabled(v270, v561))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_181A5C000, v270, v271, "%{public}s xpc_array_create failed", buf, 0xCu);
            }

LABEL_933:
            goto LABEL_934;
          }

          if (!v556)
          {
            __nwlog_obj();
            v270 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v428 = v561;
            if (os_log_type_enabled(v270, v561))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl( &dword_181A5C000,  v270,  v428,  "%{public}s xpc_array_create failed, backtrace limit exceeded",  buf,  0xCu);
            }

            goto LABEL_933;
          }

          v299 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v270 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v300 = v561;
          BOOL v301 = os_log_type_enabled(v270, v561);
          if (!v299)
          {
            if (v301)
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_181A5C000, v270, v300, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
            }

            goto LABEL_933;
          }

          if (v301)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&_BYTE buf[14] = v299;
            _os_log_impl( &dword_181A5C000,  v270,  v300,  "%{public}s xpc_array_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v299);
LABEL_934:
          if (v269) {
            free(v269);
          }
          BOOL v40 = 0LL;
          goto LABEL_417;
        case 113:
          memset(buf, 0, sizeof(buf));
          if ((_DWORD)v27 == 64) {
            goto LABEL_214;
          }
          __nwlog_obj();
          v454 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v454, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uu = 136446978;
            *(void *)&uu[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&uu[12] = 1024;
            *(_DWORD *)&uu[14] = 113;
            *(_WORD *)&uu[18] = 1024;
            *(_DWORD *)&uu[20] = v27;
            LOWORD(v565) = 1024;
            *(_DWORD *)((char *)&v565 + 2) = 64;
            _os_log_impl( &dword_181A5C000,  v454,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  uu,  0x1Eu);
          }

LABEL_214:
          __int128 v113 = *((_OWORD *)v36 + 1);
          *(_OWORD *)int buf = *(_OWORD *)v36;
          *(_OWORD *)&buf[16] = v113;
          __int128 v114 = *((_OWORD *)v36 + 3);
          *(_OWORD *)&_BYTE buf[32] = *((_OWORD *)v36 + 2);
          *(_OWORD *)&buf[48] = v114;
          os_log_type_t v115 = parameters;
          uint64_t v116 = *(void *)(*((void *)parameters + 13) + 176LL);
          if (v116) {
            xpc_object_t v68 = *(id *)(v116 + 56);
          }
          else {
            xpc_object_t v68 = 0LL;
          }

          char v177 = v115;
          uint64_t v178 = *(void *)(*((void *)parameters + 13) + 176LL);
          if (v178) {
            xpc_object_t v71 = *(id *)(v178 + 64);
          }
          else {
            xpc_object_t v71 = 0LL;
          }

          if (v68) {
            goto LABEL_811;
          }
          xpc_object_t v68 = xpc_array_create(0LL, 0LL);
          if (v68) {
            goto LABEL_811;
          }
          __nwlog_obj();
          uint64_t v183 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)uu = 136446210;
          *(void *)&uu[4] = "nw_path_parse_necp_parameters";
          v184 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v561 = OS_LOG_TYPE_ERROR;
          char v556 = 0;
          if (v561 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v185 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v186 = v561;
            if (os_log_type_enabled(v185, v561))
            {
              *(_DWORD *)uu = 136446210;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_181A5C000, v185, v186, "%{public}s xpc_array_create failed", uu, 0xCu);
            }

LABEL_807:
            goto LABEL_808;
          }

          if (!v556)
          {
            __nwlog_obj();
            v185 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v311 = v561;
            if (os_log_type_enabled(v185, v561))
            {
              *(_DWORD *)uu = 136446210;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl( &dword_181A5C000,  v185,  v311,  "%{public}s xpc_array_create failed, backtrace limit exceeded",  uu,  0xCu);
            }

            goto LABEL_807;
          }

          v252 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v185 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v253 = v561;
          BOOL v254 = os_log_type_enabled(v185, v561);
          if (!v252)
          {
            if (v254)
            {
              *(_DWORD *)uu = 136446210;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_181A5C000, v185, v253, "%{public}s xpc_array_create failed, no backtrace", uu, 0xCu);
            }

            goto LABEL_807;
          }

          if (v254)
          {
            *(_DWORD *)uu = 136446466;
            *(void *)&uu[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&uu[12] = 2082;
            *(void *)&uu[14] = v252;
            _os_log_impl( &dword_181A5C000,  v185,  v253,  "%{public}s xpc_array_create failed, dumping backtrace:%{public}s",  uu,  0x16u);
          }

          free(v252);
LABEL_808:
          if (v184) {
            free(v184);
          }
          xpc_object_t v68 = 0LL;
LABEL_811:
          if (!v71)
          {
            xpc_object_t v71 = xpc_array_create(0LL, 0LL);
            if (!v71)
            {
              __nwlog_obj();
              v406 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)uu = 136446210;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              v407 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t v561 = OS_LOG_TYPE_ERROR;
              char v556 = 0;
              if (__nwlog_fault(v407, &v561, &v556))
              {
                if (v561 == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v408 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v409 = v561;
                  if (os_log_type_enabled(v408, v561))
                  {
                    *(_DWORD *)uu = 136446210;
                    *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_181A5C000, v408, v409, "%{public}s xpc_array_create failed", uu, 0xCu);
                  }

                  goto LABEL_871;
                }

                if (v556)
                {
                  v413 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v408 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v414 = v561;
                  BOOL v415 = os_log_type_enabled(v408, v561);
                  if (v413)
                  {
                    if (v415)
                    {
                      *(_DWORD *)uu = 136446466;
                      *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                      *(_WORD *)&uu[12] = 2082;
                      *(void *)&uu[14] = v413;
                      _os_log_impl( &dword_181A5C000,  v408,  v414,  "%{public}s xpc_array_create failed, dumping backtrace:%{public}s",  uu,  0x16u);
                    }

                    free(v413);
                    goto LABEL_872;
                  }

                  if (v415)
                  {
                    *(_DWORD *)uu = 136446210;
                    *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl( &dword_181A5C000,  v408,  v414,  "%{public}s xpc_array_create failed, no backtrace",  uu,  0xCu);
                  }
                }

                else
                {
                  __nwlog_obj();
                  v408 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v418 = v561;
                  if (os_log_type_enabled(v408, v561))
                  {
                    *(_DWORD *)uu = 136446210;
                    *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl( &dword_181A5C000,  v408,  v418,  "%{public}s xpc_array_create failed, backtrace limit exceeded",  uu,  0xCu);
                  }
                }

LABEL_871:
              }

LABEL_872:
              if (v407) {
                free(v407);
              }
              xpc_object_t v71 = 0LL;
              goto LABEL_875;
            }
          }

          if (!v68) {
            goto LABEL_875;
          }
          if (strnlen((const char *)buf, 0x20uLL) <= 0x1F && strnlen((const char *)&buf[32], 0x20uLL) <= 0x1F)
          {
            xpc_array_set_string(v68, 0xFFFFFFFFFFFFFFFFLL, (const char *)buf);
            xpc_array_set_string(v71, 0xFFFFFFFFFFFFFFFFLL, (const char *)&buf[32]);
            nw_parameters_set_required_netagent_classes(v177, v68, v71);
            goto LABEL_875;
          }

          __nwlog_obj();
          v394 = (void *)objc_claimAutoreleasedReturnValue();
          size_t v395 = strnlen((const char *)buf, 0x20uLL);
          size_t v396 = strnlen((const char *)&buf[32], 0x20uLL);
          *(_DWORD *)uu = 136446722;
          *(void *)&uu[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&uu[12] = 2048;
          *(void *)&uu[14] = v395;
          *(_WORD *)&uu[22] = 2048;
          size_t v565 = v396;
          v321 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v561 = OS_LOG_TYPE_ERROR;
          char v556 = 0;
          if (v561 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v397 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v398 = v561;
            if (os_log_type_enabled(v397, v561))
            {
              size_t v399 = strnlen((const char *)buf, 0x20uLL);
              size_t v400 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)uu = 136446722;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(void *)&uu[14] = v399;
              *(_WORD *)&uu[22] = 2048;
              size_t v565 = v400;
              _os_log_impl( &dword_181A5C000,  v397,  v398,  "%{public}s invalid required netagent string lengths %zu %zu",  uu,  0x20u);
            }

LABEL_842:
            goto LABEL_843;
          }

          if (!v556)
          {
            __nwlog_obj();
            v397 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v410 = v561;
            if (os_log_type_enabled(v397, v561))
            {
              size_t v411 = strnlen((const char *)buf, 0x20uLL);
              size_t v412 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)uu = 136446722;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(void *)&uu[14] = v411;
              *(_WORD *)&uu[22] = 2048;
              size_t v565 = v412;
              _os_log_impl( &dword_181A5C000,  v397,  v410,  "%{public}s invalid required netagent string lengths %zu %zu, backtrace limit exceeded",  uu,  0x20u);
            }

            goto LABEL_842;
          }

          v401 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v397 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v402 = v561;
          BOOL v403 = os_log_type_enabled(v397, v561);
          if (!v401)
          {
            if (v403)
            {
              size_t v416 = strnlen((const char *)buf, 0x20uLL);
              size_t v417 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)uu = 136446722;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(void *)&uu[14] = v416;
              *(_WORD *)&uu[22] = 2048;
              size_t v565 = v417;
              _os_log_impl( &dword_181A5C000,  v397,  v402,  "%{public}s invalid required netagent string lengths %zu %zu, no backtrace",  uu,  0x20u);
            }

            goto LABEL_842;
          }

          if (v403)
          {
            size_t v404 = strnlen((const char *)buf, 0x20uLL);
            size_t v405 = strnlen((const char *)&buf[32], 0x20uLL);
            *(_DWORD *)uu = 136446978;
            *(void *)&uu[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&uu[12] = 2048;
            *(void *)&uu[14] = v404;
            *(_WORD *)&uu[22] = 2048;
            size_t v565 = v405;
            __int16 v566 = 2082;
            v567 = v401;
            _os_log_impl( &dword_181A5C000,  v397,  v402,  "%{public}s invalid required netagent string lengths %zu %zu, dumping backtrace:%{public}s",  uu,  0x2Au);
          }

          free(v401);
LABEL_843:
          if (!v321) {
            goto LABEL_875;
          }
          goto LABEL_844;
        case 122:
          if ((_DWORD)v27 == 16) {
            goto LABEL_127;
          }
          __nwlog_obj();
          v444 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v444, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_BYTE buf[14] = 122;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v27;
            *(_WORD *)&_BYTE buf[24] = 1024;
            *(_DWORD *)&buf[26] = 16;
            _os_log_impl( &dword_181A5C000,  v444,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
          }

LABEL_127:
          *(_OWORD *)uu = *(_OWORD *)v36;
          if (uuid_is_null(uu)) {
            break;
          }
          BOOL v40 = (nw_interface *)nw_parameters_copy_preferred_netagent_uuids(parameters);
          if (v40 || (BOOL v40 = (nw_interface *)xpc_array_create(0LL, 0LL)) != 0LL)
          {
            xpc_array_set_uuid(v40, 0xFFFFFFFFFFFFFFFFLL, uu);
            nw_parameters_set_preferred_netagent_uuids(parameters, v40);
            goto LABEL_417;
          }

          __nwlog_obj();
          v272 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          v273 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v561 = OS_LOG_TYPE_ERROR;
          char v556 = 0;
          if (v561 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v274 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v275 = v561;
            if (os_log_type_enabled(v274, v561))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_181A5C000, v274, v275, "%{public}s xpc_array_create failed", buf, 0xCu);
            }

LABEL_939:
            goto LABEL_940;
          }

          if (!v556)
          {
            __nwlog_obj();
            v274 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v429 = v561;
            if (os_log_type_enabled(v274, v561))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl( &dword_181A5C000,  v274,  v429,  "%{public}s xpc_array_create failed, backtrace limit exceeded",  buf,  0xCu);
            }

            goto LABEL_939;
          }

          v302 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v274 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v303 = v561;
          BOOL v304 = os_log_type_enabled(v274, v561);
          if (!v302)
          {
            if (v304)
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_181A5C000, v274, v303, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
            }

            goto LABEL_939;
          }

          if (v304)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&_BYTE buf[14] = v302;
            _os_log_impl( &dword_181A5C000,  v274,  v303,  "%{public}s xpc_array_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v302);
LABEL_940:
          if (v273) {
            free(v273);
          }
          BOOL v40 = 0LL;
          goto LABEL_417;
        case 123:
          memset(buf, 0, sizeof(buf));
          if ((_DWORD)v27 == 64) {
            goto LABEL_132;
          }
          __nwlog_obj();
          v445 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v445, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uu = 136446978;
            *(void *)&uu[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&uu[12] = 1024;
            *(_DWORD *)&uu[14] = 123;
            *(_WORD *)&uu[18] = 1024;
            *(_DWORD *)&uu[20] = v27;
            LOWORD(v565) = 1024;
            *(_DWORD *)((char *)&v565 + 2) = 64;
            _os_log_impl( &dword_181A5C000,  v445,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  uu,  0x1Eu);
          }

LABEL_132:
          __int128 v69 = *((_OWORD *)v36 + 1);
          *(_OWORD *)int buf = *(_OWORD *)v36;
          *(_OWORD *)&buf[16] = v69;
          __int128 v70 = *((_OWORD *)v36 + 3);
          *(_OWORD *)&_BYTE buf[32] = *((_OWORD *)v36 + 2);
          *(_OWORD *)&buf[48] = v70;
          xpc_object_t v68 = nw_parameters_copy_preferred_netagent_domains(parameters);
          xpc_object_t v71 = nw_parameters_copy_preferred_netagent_types(parameters);
          if (v68) {
            goto LABEL_682;
          }
          xpc_object_t v68 = xpc_array_create(0LL, 0LL);
          if (v68) {
            goto LABEL_682;
          }
          __nwlog_obj();
          uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)uu = 136446210;
          *(void *)&uu[4] = "nw_path_parse_necp_parameters";
          uint64_t v73 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v561 = OS_LOG_TYPE_ERROR;
          char v556 = 0;
          if (v561 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            uint64_t v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v75 = v561;
            if (os_log_type_enabled(v74, v561))
            {
              *(_DWORD *)uu = 136446210;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_181A5C000, v74, v75, "%{public}s xpc_array_create failed", uu, 0xCu);
            }

LABEL_851:
              if (v332) {
                free(v332);
              }
              xpc_object_t v71 = 0LL;
              goto LABEL_875;
            }
          }

          if (!v68) {
            goto LABEL_875;
          }
          if (strnlen((const char *)buf, 0x20uLL) <= 0x1F && strnlen((const char *)&buf[32], 0x20uLL) <= 0x1F)
          {
            xpc_array_set_string(v68, 0xFFFFFFFFFFFFFFFFLL, (const char *)buf);
            xpc_array_set_string(v71, 0xFFFFFFFFFFFFFFFFLL, (const char *)&buf[32]);
            nw_parameters_set_preferred_netagent_classes(parameters, v68, v71);
            goto LABEL_875;
          }

          __nwlog_obj();
          v318 = (void *)objc_claimAutoreleasedReturnValue();
          size_t v319 = strnlen((const char *)buf, 0x20uLL);
          size_t v320 = strnlen((const char *)&buf[32], 0x20uLL);
          *(_DWORD *)uu = 136446722;
          *(void *)&uu[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&uu[12] = 2048;
          *(void *)&uu[14] = v319;
          *(_WORD *)&uu[22] = 2048;
          size_t v565 = v320;
          v321 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v561 = OS_LOG_TYPE_ERROR;
          char v556 = 0;
          if (v561 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v322 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v323 = v561;
            if (os_log_type_enabled(v322, v561))
            {
              size_t v324 = strnlen((const char *)buf, 0x20uLL);
              size_t v325 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)uu = 136446722;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(void *)&uu[14] = v324;
              *(_WORD *)&uu[22] = 2048;
              size_t v565 = v325;
              _os_log_impl( &dword_181A5C000,  v322,  v323,  "%{public}s invalid preferred netagent string lengths %zu %zu",  uu,  0x20u);
            }

LABEL_713:
            goto LABEL_714;
          }

          if (!v556)
          {
            __nwlog_obj();
            v322 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v335 = v561;
            if (os_log_type_enabled(v322, v561))
            {
              size_t v336 = strnlen((const char *)buf, 0x20uLL);
              size_t v337 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)uu = 136446722;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(void *)&uu[14] = v336;
              *(_WORD *)&uu[22] = 2048;
              size_t v565 = v337;
              _os_log_impl( &dword_181A5C000,  v322,  v335,  "%{public}s invalid preferred netagent string lengths %zu %zu, backtrace limit exceeded",  uu,  0x20u);
            }

            goto LABEL_713;
          }

          v326 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v322 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v327 = v561;
          BOOL v328 = os_log_type_enabled(v322, v561);
          if (!v326)
          {
            if (v328)
            {
              size_t v341 = strnlen((const char *)buf, 0x20uLL);
              size_t v342 = strnlen((const char *)&buf[32], 0x20uLL);
              *(_DWORD *)uu = 136446722;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              *(_WORD *)&uu[12] = 2048;
              *(void *)&uu[14] = v341;
              *(_WORD *)&uu[22] = 2048;
              size_t v565 = v342;
              _os_log_impl( &dword_181A5C000,  v322,  v327,  "%{public}s invalid preferred netagent string lengths %zu %zu, no backtrace",  uu,  0x20u);
            }

            goto LABEL_713;
          }

          if (v328)
          {
            size_t v329 = strnlen((const char *)buf, 0x20uLL);
            size_t v330 = strnlen((const char *)&buf[32], 0x20uLL);
            *(_DWORD *)uu = 136446978;
            *(void *)&uu[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&uu[12] = 2048;
            *(void *)&uu[14] = v329;
            *(_WORD *)&uu[22] = 2048;
            size_t v565 = v330;
            __int16 v566 = 2082;
            v567 = v326;
            _os_log_impl( &dword_181A5C000,  v322,  v327,  "%{public}s invalid preferred netagent string lengths %zu %zu, dumping backtrace:%{public}s",  uu,  0x2Au);
          }

          free(v326);
LABEL_714:
          if (!v321) {
            goto LABEL_875;
          }
          goto LABEL_844;
        case 124:
          if ((_DWORD)v27 == 16) {
            goto LABEL_66;
          }
          __nwlog_obj();
          v435 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v435, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_BYTE buf[14] = 124;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v27;
            *(_WORD *)&_BYTE buf[24] = 1024;
            *(_DWORD *)&buf[26] = 16;
            _os_log_impl( &dword_181A5C000,  v435,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
          }

LABEL_66:
          *(_OWORD *)uu = *(_OWORD *)v36;
          if (uuid_is_null(uu)) {
            break;
          }
          BOOL v40 = (nw_interface *)nw_parameters_copy_avoided_netagent_uuids(parameters);
          if (v40 || (BOOL v40 = (nw_interface *)xpc_array_create(0LL, 0LL)) != 0LL)
          {
            xpc_array_set_uuid(v40, 0xFFFFFFFFFFFFFFFFLL, uu);
            nw_parameters_set_avoided_netagent_uuids(parameters, v40);
            goto LABEL_417;
          }

          __nwlog_obj();
          v264 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          v265 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v561 = OS_LOG_TYPE_ERROR;
          char v556 = 0;
          if (v561 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v266 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v267 = v561;
            if (os_log_type_enabled(v266, v561))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_181A5C000, v266, v267, "%{public}s xpc_array_create failed", buf, 0xCu);
            }

LABEL_927:
            goto LABEL_928;
          }

          if (!v556)
          {
            __nwlog_obj();
            v266 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v427 = v561;
            if (os_log_type_enabled(v266, v561))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl( &dword_181A5C000,  v266,  v427,  "%{public}s xpc_array_create failed, backtrace limit exceeded",  buf,  0xCu);
            }

            goto LABEL_927;
          }

          v296 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v266 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v297 = v561;
          BOOL v298 = os_log_type_enabled(v266, v561);
          if (!v296)
          {
            if (v298)
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_181A5C000, v266, v297, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
            }

            goto LABEL_927;
          }

          if (v298)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&_BYTE buf[14] = v296;
            _os_log_impl( &dword_181A5C000,  v266,  v297,  "%{public}s xpc_array_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v296);
LABEL_928:
          if (v265) {
            free(v265);
          }
          BOOL v40 = 0LL;
          goto LABEL_417;
        case 125:
          memset(buf, 0, sizeof(buf));
          if ((_DWORD)v27 == 64) {
            goto LABEL_140;
          }
          __nwlog_obj();
          v446 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v446, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uu = 136446978;
            *(void *)&uu[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&uu[12] = 1024;
            *(_DWORD *)&uu[14] = 125;
            *(_WORD *)&uu[18] = 1024;
            *(_DWORD *)&uu[20] = v27;
            LOWORD(v565) = 1024;
            *(_DWORD *)((char *)&v565 + 2) = 64;
            _os_log_impl( &dword_181A5C000,  v446,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  uu,  0x1Eu);
          }

LABEL_140:
          __int128 v76 = *((_OWORD *)v36 + 1);
          *(_OWORD *)int buf = *(_OWORD *)v36;
          *(_OWORD *)&buf[16] = v76;
          __int128 v77 = *((_OWORD *)v36 + 3);
          *(_OWORD *)&_BYTE buf[32] = *((_OWORD *)v36 + 2);
          *(_OWORD *)&buf[48] = v77;
          xpc_object_t v68 = nw_parameters_copy_avoided_netagent_domains(parameters);
          xpc_object_t v71 = nw_parameters_copy_avoided_netagent_types(parameters);
          if (v68) {
            goto LABEL_725;
          }
          xpc_object_t v68 = xpc_array_create(0LL, 0LL);
          if (v68) {
            goto LABEL_725;
          }
          __nwlog_obj();
          uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)uu = 136446210;
          *(void *)&uu[4] = "nw_path_parse_necp_parameters";
          char v79 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v561 = OS_LOG_TYPE_ERROR;
          char v556 = 0;
          if (v561 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            char v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v81 = v561;
            if (os_log_type_enabled(v80, v561))
            {
              *(_DWORD *)uu = 136446210;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_181A5C000, v80, v81, "%{public}s xpc_array_create failed", uu, 0xCu);
            }

LABEL_721:
            goto LABEL_722;
          }

          if (!v556)
          {
            __nwlog_obj();
            char v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v309 = v561;
            if (os_log_type_enabled(v80, v561))
            {
              *(_DWORD *)uu = 136446210;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl( &dword_181A5C000,  v80,  v309,  "%{public}s xpc_array_create failed, backtrace limit exceeded",  uu,  0xCu);
            }

            goto LABEL_721;
          }

          v246 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          char v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v247 = v561;
          BOOL v248 = os_log_type_enabled(v80, v561);
          if (!v246)
          {
            if (v248)
            {
              *(_DWORD *)uu = 136446210;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              _os_log_impl(&dword_181A5C000, v80, v247, "%{public}s xpc_array_create failed, no backtrace", uu, 0xCu);
            }

            goto LABEL_721;
          }

          if (v248)
          {
            *(_DWORD *)uu = 136446466;
            *(void *)&uu[4] = "nw_path_parse_necp_parameters";
            *(_WORD *)&uu[12] = 2082;
            *(void *)&uu[14] = v246;
            _os_log_impl( &dword_181A5C000,  v80,  v247,  "%{public}s xpc_array_create failed, dumping backtrace:%{public}s",  uu,  0x16u);
          }

          free(v246);
LABEL_722:
          if (v79) {
            free(v79);
          }
          xpc_object_t v68 = 0LL;
LABEL_725:
          if (!v71)
          {
            xpc_object_t v71 = xpc_array_create(0LL, 0LL);
            if (!v71)
            {
              __nwlog_obj();
              v356 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)uu = 136446210;
              *(void *)&uu[4] = "nw_path_parse_necp_parameters";
              v357 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t v561 = OS_LOG_TYPE_ERROR;
              char v556 = 0;
              if (__nwlog_fault(v357, &v561, &v556))
              {
                if (v561 == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v358 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v359 = v561;
                  if (os_log_type_enabled(v358, v561))
                  {
                    *(_DWORD *)uu = 136446210;
                    *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl(&dword_181A5C000, v358, v359, "%{public}s xpc_array_create failed", uu, 0xCu);
                  }

                  goto LABEL_857;
                }

                if (v556)
                {
                  v363 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v358 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v364 = v561;
                  BOOL v365 = os_log_type_enabled(v358, v561);
                  if (v363)
                  {
                    if (v365)
                    {
                      *(_DWORD *)uu = 136446466;
                      *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                      *(_WORD *)&uu[12] = 2082;
                      *(void *)&uu[14] = v363;
                      _os_log_impl( &dword_181A5C000,  v358,  v364,  "%{public}s xpc_array_create failed, dumping backtrace:%{public}s",  uu,  0x16u);
                    }

                    free(v363);
                    goto LABEL_858;
                  }

                  if (v365)
                  {
                    *(_DWORD *)uu = 136446210;
                    *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl( &dword_181A5C000,  v358,  v364,  "%{public}s xpc_array_create failed, no backtrace",  uu,  0xCu);
                  }
                }

                else
                {
                  __nwlog_obj();
                  v358 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v368 = v561;
                  if (os_log_type_enabled(v358, v561))
                  {
                    *(_DWORD *)uu = 136446210;
                    *(void *)&uu[4] = "nw_path_parse_necp_parameters";
                    _os_log_impl( &dword_181A5C000,  v358,  v368,  "%{public}s xpc_array_create failed, backtrace limit exceeded",  uu,  0xCu);
                  }
                }

LABEL_857:
              }

LABEL_1121:
LABEL_1122:
    if (!v471) {
      goto LABEL_1124;
    }
    goto LABEL_1123;
  }

  v475 = (char *)v474;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v476 = (os_log_s *)(id)gLogObj;
  os_log_type_t v477 = uu[0];
  if (os_log_type_enabled(v476, (os_log_type_t)uu[0]))
  {
    *(_DWORD *)int buf = 136447234;
    *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_BYTE buf[14] = v27;
    *(_WORD *)&buf[18] = 2048;
    *(void *)&buf[20] = v20;
    *(_WORD *)&buf[28] = 2048;
    *(void *)&buf[30] = a11;
    *(_WORD *)&buf[38] = 2082;
    *(void *)&_BYTE buf[40] = v475;
    _os_log_impl( &dword_181A5C000,  v476,  v477,  "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), dumping backtrace:%{public}s",  buf,  0x30u);
  }

  free(v475);
  if (v471) {
LABEL_1123:
  }
    free(v471);
LABEL_1124:
  if (v20 == a11) {
    goto LABEL_1125;
  }
  __nwlog_obj();
  v527 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446722;
  *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
  *(_WORD *)&_BYTE buf[12] = 2048;
  *(void *)&_BYTE buf[14] = v20;
  *(_WORD *)&uint8_t buf[22] = 2048;
  *(void *)&_BYTE buf[24] = a11;
  v528 = (char *)_os_log_send_and_compose_impl();

  uu[0] = 16;
  os_log_type_t v561 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v528, uu, &v561))
  {
    if (uu[0] == 17)
    {
      __nwlog_obj();
      v529 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v530 = uu[0];
      if (os_log_type_enabled(v529, (os_log_type_t)uu[0]))
      {
        *(_DWORD *)int buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
        *(_WORD *)&_BYTE buf[12] = 2048;
        *(void *)&_BYTE buf[14] = v20;
        *(_WORD *)&uint8_t buf[22] = 2048;
        *(void *)&_BYTE buf[24] = a11;
        _os_log_impl(&dword_181A5C000, v529, v530, "%{public}s cursor has unexpected value %zu != %zu", buf, 0x20u);
      }

      goto LABEL_1248;
    }

    if (v561)
    {
      v531 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v529 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v532 = uu[0];
      BOOL v533 = os_log_type_enabled(v529, (os_log_type_t)uu[0]);
      if (v531)
      {
        if (v533)
        {
          *(_DWORD *)int buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
          *(_WORD *)&_BYTE buf[12] = 2048;
          *(void *)&_BYTE buf[14] = v20;
          *(_WORD *)&uint8_t buf[22] = 2048;
          *(void *)&_BYTE buf[24] = a11;
          *(_WORD *)&_BYTE buf[32] = 2082;
          *(void *)&buf[34] = v531;
          _os_log_impl( &dword_181A5C000,  v529,  v532,  "%{public}s cursor has unexpected value %zu != %zu, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v531);
        goto LABEL_1249;
      }

      if (v533)
      {
        *(_DWORD *)int buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
        *(_WORD *)&_BYTE buf[12] = 2048;
        *(void *)&_BYTE buf[14] = v20;
        *(_WORD *)&uint8_t buf[22] = 2048;
        *(void *)&_BYTE buf[24] = a11;
        _os_log_impl( &dword_181A5C000,  v529,  v532,  "%{public}s cursor has unexpected value %zu != %zu, no backtrace",  buf,  0x20u);
      }
    }

    else
    {
      __nwlog_obj();
      v529 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v537 = uu[0];
      if (os_log_type_enabled(v529, (os_log_type_t)uu[0]))
      {
        *(_DWORD *)int buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
        *(_WORD *)&_BYTE buf[12] = 2048;
        *(void *)&_BYTE buf[14] = v20;
        *(_WORD *)&uint8_t buf[22] = 2048;
        *(void *)&_BYTE buf[24] = a11;
        _os_log_impl( &dword_181A5C000,  v529,  v537,  "%{public}s cursor has unexpected value %zu != %zu, backtrace limit exceeded",  buf,  0x20u);
      }
    }

LABEL_1248:
  }

LABEL_1249:
  if (v528) {
    free(v528);
  }
LABEL_1125:
  nw_parameters_t v480 = parameters;
  if (((v542 != 0LL) & BYTE4(v548)) == 1) {
    _WORD *v542 = 0;
  }
  if ((v549 & 1) != 0)
  {
    if (v543) {
      char *v543 = v541;
    }
    v481 = parameters;
    v482 = (nw_protocol_stack *)v481[19];

    v483 = nw_custom_ip_create_options(v541);
    nw_protocol_stack_set_transport_protocol(v482, (nw_protocol_options_t)v483);

    nw_parameters_t v480 = parameters;
  }

  if ((v548 & 1) != 0)
  {
    v484 = v480;
    id v485 = v484[19];

    if (v485)
    {
      v486 = (id *)v485;
      id v487 = v486[3];

      if (v487)
      {
        id v488 = v487;
        BOOL v489 = nw_protocol_options_matches_definition(v488, (void *)g_udp_definition);

        if (v489) {
          nw_udp_options_set_no_metadata(v488, 1);
        }
      }
    }

    nw_parameters_t v480 = parameters;
  }

  if ((v544 & 0x100000000LL) != 0)
  {
    v490 = v480;
    v491 = (nw_endpoint *)*(id *)(*((void *)v490 + 13) + 160LL);

    if (v491)
    {
      v491 = v491;
      int v492 = -[nw_endpoint type](v491, "type");

      if (v492 == 1)
      {
        address = nw_endpoint_get_address(v491);
        v494 = nw_endpoint_create_address_with_ethernet(address, &v559);

        v491 = v494;
        nw_parameters_set_local_endpoint(v490, v494);
      }
    }

    nw_parameters_t v480 = parameters;
  }

  v495 = v552;
  if (v552 != 0LL && (v544 & 1) != 0)
  {
    if (*v552)
    {
      id v496 = *v552;
      int v497 = [v496 type];

      nw_parameters_t v480 = parameters;
      v495 = v552;
      if (v497 == 1)
      {
        v498 = nw_endpoint_get_address((nw_endpoint_t)*v552);
        nw_endpoint_t v499 = nw_endpoint_create_address_with_ethernet(v498, &v557);
        v500 = *v552;
        *v552 = v499;

        nw_parameters_t v480 = parameters;
        v495 = v552;
      }
    }
  }

  if (v495 && v551 && v550) {
    nw_endpoint_set_signature(*v495, v551, v550);
  }
  if (SHIDWORD(v549) < 1) {
    goto LABEL_1181;
  }
  v501 = v480;
  v502 = v501;
  uint64_t v503 = *(void *)(*((void *)v501 + 13) + 176LL);
  if (!v503)
  {

    goto LABEL_1158;
  }

  xpc_object_t v504 = *(id *)(v503 + 8);

  if (v504)
  {
LABEL_1159:
    xpc_array_set_uint64(v504, 0xFFFFFFFFFFFFFFFFLL, 0x3EAuLL);
    nw_parameters_set_prohibited_interface_subtypes(v502, v504);
    goto LABEL_1180;
  }

LABEL_1158:
  xpc_object_t v504 = xpc_array_create(0LL, 0LL);
  if (v504) {
    goto LABEL_1159;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v505 = (id)gLogObj;
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
  v506 = (char *)_os_log_send_and_compose_impl();

  uu[0] = 16;
  os_log_type_t v561 = OS_LOG_TYPE_DEFAULT;
  if (uu[0] == 17)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v507 = (os_log_s *)(id)gLogObj;
    os_log_type_t v508 = uu[0];
    if (os_log_type_enabled(v507, (os_log_type_t)uu[0]))
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
      _os_log_impl(&dword_181A5C000, v507, v508, "%{public}s xpc_array_create failed", buf, 0xCu);
    }

    goto LABEL_1176;
  }

  if (v561 == OS_LOG_TYPE_DEFAULT)
  {
    __nwlog_obj();
    v507 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v512 = uu[0];
    if (os_log_type_enabled(v507, (os_log_type_t)uu[0]))
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
      _os_log_impl( &dword_181A5C000,  v507,  v512,  "%{public}s xpc_array_create failed, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_1176;
  }

  v509 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v507 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v510 = uu[0];
  BOOL v511 = os_log_type_enabled(v507, (os_log_type_t)uu[0]);
  if (!v509)
  {
    if (v511)
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
      _os_log_impl(&dword_181A5C000, v507, v510, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
    }

LABEL_1176:
LABEL_1177:
    if (!v506) {
      goto LABEL_1179;
    }
    goto LABEL_1178;
  }

  if (v511)
  {
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_path_parse_necp_parameters";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&_BYTE buf[14] = v509;
    _os_log_impl( &dword_181A5C000,  v507,  v510,  "%{public}s xpc_array_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v509);
  if (v506) {
LABEL_1178:
  }
    free(v506);
LABEL_1179:
  xpc_object_t v504 = 0LL;
LABEL_1180:

  nw_parameters_t v480 = parameters;
LABEL_1181:
  if (v554) {
    nw_parameters_set_channel_demux_options(v480, v554);
  }

  uint64_t v25 = 1LL;
LABEL_1184:

  return v25;
}

void sub_182379458( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, void *a39, void *a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47)
{
  _Unwind_Resume(a1);
}

uint64_t *nw_path_copy_group_descriptor_from_tlv(unsigned int a1, uint64_t a2, const unsigned __int8 *a3)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (a1 >= 0x14)
  {
    *(_OWORD *)int buf = *(_OWORD *)a2;
    *(_DWORD *)&buf[16] = *(_DWORD *)(a2 + 16);
    return nw_group_descriptor_create_with_type(*(int *)buf, &buf[4]);
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v5 = (id)gLogObj;
  *(_DWORD *)int buf = 136447234;
  *(void *)&uint8_t buf[4] = "nw_path_copy_group_descriptor_from_tlv";
  *(_WORD *)&_BYTE buf[12] = 1024;
  *(_DWORD *)&_BYTE buf[14] = 205;
  *(_WORD *)&buf[18] = 1024;
  unsigned int v16 = a1;
  __int16 v17 = 2080;
  size_t v18 = "nw_path_copy_group_descriptor_from_tlv";
  __int16 v19 = 1024;
  int v20 = 2094;
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v7 = (os_log_s *)(id)gLogObj;
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_path_copy_group_descriptor_from_tlv";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = 205;
        *(_WORD *)&buf[18] = 1024;
        unsigned int v16 = a1;
        __int16 v17 = 2080;
        size_t v18 = "nw_path_copy_group_descriptor_from_tlv";
        __int16 v19 = 1024;
        int v20 = 2094;
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s TLV of type %d has invalid length %u (%s:%d)", buf, 0x28u);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v7 = (os_log_s *)(id)gLogObj;
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_path_copy_group_descriptor_from_tlv";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = 205;
          *(_WORD *)&buf[18] = 1024;
          unsigned int v16 = a1;
          __int16 v17 = 2080;
          size_t v18 = "nw_path_copy_group_descriptor_from_tlv";
          __int16 v19 = 1024;
          int v20 = 2094;
          __int16 v21 = 2082;
          os_log_type_t v22 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s",  buf,  0x32u);
        }

        free(backtrace_string);
        if (!v6) {
          return 0LL;
        }
        goto LABEL_9;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_path_copy_group_descriptor_from_tlv";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = 205;
        *(_WORD *)&buf[18] = 1024;
        unsigned int v16 = a1;
        __int16 v17 = 2080;
        size_t v18 = "nw_path_copy_group_descriptor_from_tlv";
        __int16 v19 = 1024;
        int v20 = 2094;
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace",  buf,  0x28u);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v7 = (os_log_s *)(id)gLogObj;
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_path_copy_group_descriptor_from_tlv";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = 205;
        *(_WORD *)&buf[18] = 1024;
        unsigned int v16 = a1;
        __int16 v17 = 2080;
        size_t v18 = "nw_path_copy_group_descriptor_from_tlv";
        __int16 v19 = 1024;
        int v20 = 2094;
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded",  buf,  0x28u);
      }
    }
  }

  if (v6) {
LABEL_9:
  }
    free(v6);
  return 0LL;
}

nw_browse_descriptor_t nw_path_copy_browse_descriptor_from_tlv( unsigned int a1, unsigned __int8 *a2, const unsigned __int8 *a3)
{
  uint64_t v92 = *MEMORY[0x1895F89C0];
  if (a1 < 0x1C)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    *(_DWORD *)int buf = 136447234;
    os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
    __int16 v82 = 1024;
    int v83 = 202;
    __int16 v84 = 1024;
    unsigned int v85 = a1;
    __int16 v86 = 2080;
    uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
    __int16 v88 = 1024;
    int v89 = 1997;
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v78 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = (os_log_s *)(id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136447234;
        os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
        __int16 v82 = 1024;
        int v83 = 202;
        __int16 v84 = 1024;
        unsigned int v85 = a1;
        __int16 v86 = 2080;
        uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
        __int16 v88 = 1024;
        int v89 = 1997;
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s TLV of type %d has invalid length %u (%s:%d)", buf, 0x28u);
      }
    }

    else if (v78)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = (os_log_s *)(id)gLogObj;
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)int buf = 136447490;
          os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v82 = 1024;
          int v83 = 202;
          __int16 v84 = 1024;
          unsigned int v85 = a1;
          __int16 v86 = 2080;
          uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v88 = 1024;
          int v89 = 1997;
          __int16 v90 = 2082;
          uint64_t v91 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s",  buf,  0x32u);
        }

        free(backtrace_string);
        if (!v11) {
          return 0LL;
        }
        goto LABEL_27;
      }

      if (v16)
      {
        *(_DWORD *)int buf = 136447234;
        os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
        __int16 v82 = 1024;
        int v83 = 202;
        __int16 v84 = 1024;
        unsigned int v85 = a1;
        __int16 v86 = 2080;
        uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
        __int16 v88 = 1024;
        int v89 = 1997;
        _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace",  buf,  0x28u);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = (os_log_s *)(id)gLogObj;
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136447234;
        os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
        __int16 v82 = 1024;
        int v83 = 202;
        __int16 v84 = 1024;
        unsigned int v85 = a1;
        __int16 v86 = 2080;
        uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
        __int16 v88 = 1024;
        int v89 = 1997;
        _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded",  buf,  0x28u);
      }
    }

    goto LABEL_25;
  }

  if (a2[1]) {
    return 0LL;
  }
  unsigned int v4 = *((_DWORD *)a2 + 1);
  if (!v4) {
    return 0LL;
  }
  id v5 = (const char *)(a2 + 8);
  size_t v6 = a1 - 8;
  if (v4 == 2)
  {
    int v20 = *((_DWORD *)a2 + 2);
    int v19 = *((_DWORD *)a2 + 3);
    __int16 v21 = (const char *)(a2 + 16);
    size_t v22 = strnlen((const char *)a2 + 16, v6 - 8);
    if (v22 + 8 >= v6)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v33 = (id)gLogObj;
      *(_DWORD *)int buf = 136447234;
      os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
      __int16 v82 = 1024;
      int v83 = 202;
      __int16 v84 = 1024;
      unsigned int v85 = a1;
      __int16 v86 = 2080;
      uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
      __int16 v88 = 1024;
      int v89 = 1926;
      BOOL v11 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v78 = 0;
      if (__nwlog_fault(v11, &type, &v78))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v34 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)int buf = 136447234;
            os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v82 = 1024;
            int v83 = 202;
            __int16 v84 = 1024;
            unsigned int v85 = a1;
            __int16 v86 = 2080;
            uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v88 = 1024;
            int v89 = 1926;
            _os_log_impl( &dword_181A5C000,  v12,  v34,  "%{public}s TLV of type %d has invalid length %u (%s:%d)",  buf,  0x28u);
          }

          goto LABEL_25;
        }

        if (!v78)
        {
          __nwlog_obj();
          os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v56 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)int buf = 136447234;
            os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v82 = 1024;
            int v83 = 202;
            __int16 v84 = 1024;
            unsigned int v85 = a1;
            __int16 v86 = 2080;
            uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v88 = 1024;
            int v89 = 1926;
            _os_log_impl( &dword_181A5C000,  v12,  v56,  "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded",  buf,  0x28u);
          }

          goto LABEL_25;
        }

        char v39 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v42 = type;
        BOOL v43 = os_log_type_enabled(v12, type);
        if (!v39)
        {
          if (v43)
          {
            *(_DWORD *)int buf = 136447234;
            os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v82 = 1024;
            int v83 = 202;
            __int16 v84 = 1024;
            unsigned int v85 = a1;
            __int16 v86 = 2080;
            uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v88 = 1024;
            int v89 = 1926;
            _os_log_impl( &dword_181A5C000,  v12,  v42,  "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace",  buf,  0x28u);
          }

          goto LABEL_25;
        }

        if (v43)
        {
          *(_DWORD *)int buf = 136447490;
          os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v82 = 1024;
          int v83 = 202;
          __int16 v84 = 1024;
          unsigned int v85 = a1;
          __int16 v86 = 2080;
          uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v88 = 1024;
          int v89 = 1926;
          __int16 v90 = 2082;
          uint64_t v91 = v39;
          _os_log_impl( &dword_181A5C000,  v12,  v42,  "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s",  buf,  0x32u);
        }

        goto LABEL_110;
      }

      goto LABEL_26;
    }

    uint64_t v23 = &v5[v22 + 9];
    size_t v24 = strnlen(v23, v6 - (v22 + 9)) + v22 + 9;
    if (v24 >= v6)
    {
      __nwlog_obj();
      os_log_type_t v37 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)int buf = 136447234;
      os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
      __int16 v82 = 1024;
      int v83 = 202;
      __int16 v84 = 1024;
      unsigned int v85 = a1;
      __int16 v86 = 2080;
      uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
      __int16 v88 = 1024;
      int v89 = 1933;
      BOOL v11 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v78 = 0;
      if (__nwlog_fault(v11, &type, &v78))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v38 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)int buf = 136447234;
            os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v82 = 1024;
            int v83 = 202;
            __int16 v84 = 1024;
            unsigned int v85 = a1;
            __int16 v86 = 2080;
            uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v88 = 1024;
            int v89 = 1933;
            _os_log_impl( &dword_181A5C000,  v12,  v38,  "%{public}s TLV of type %d has invalid length %u (%s:%d)",  buf,  0x28u);
          }

          goto LABEL_25;
        }

        if (!v78)
        {
          __nwlog_obj();
          os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v66 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)int buf = 136447234;
            os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v82 = 1024;
            int v83 = 202;
            __int16 v84 = 1024;
            unsigned int v85 = a1;
            __int16 v86 = 2080;
            uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v88 = 1024;
            int v89 = 1933;
            _os_log_impl( &dword_181A5C000,  v12,  v66,  "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded",  buf,  0x28u);
          }

          goto LABEL_25;
        }

        char v39 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v53 = type;
        BOOL v54 = os_log_type_enabled(v12, type);
        if (!v39)
        {
          if (v54)
          {
            *(_DWORD *)int buf = 136447234;
            os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v82 = 1024;
            int v83 = 202;
            __int16 v84 = 1024;
            unsigned int v85 = a1;
            __int16 v86 = 2080;
            uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v88 = 1024;
            int v89 = 1933;
            _os_log_impl( &dword_181A5C000,  v12,  v53,  "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace",  buf,  0x28u);
          }

          goto LABEL_25;
        }

        if (v54)
        {
          *(_DWORD *)int buf = 136447490;
          os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v82 = 1024;
          int v83 = 202;
          __int16 v84 = 1024;
          unsigned int v85 = a1;
          __int16 v86 = 2080;
          uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v88 = 1024;
          int v89 = 1933;
          __int16 v90 = 2082;
          uint64_t v91 = v39;
          _os_log_impl( &dword_181A5C000,  v12,  v53,  "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s",  buf,  0x32u);
        }

        goto LABEL_110;
      }

      goto LABEL_26;
    }

    size_t v25 = v24 + 2;
    if (v24 + 2 > v6)
    {
      __nwlog_obj();
      int v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)int buf = 136447234;
      os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
      __int16 v82 = 1024;
      int v83 = 202;
      __int16 v84 = 1024;
      unsigned int v85 = a1;
      __int16 v86 = 2080;
      uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
      __int16 v88 = 1024;
      int v89 = 1941;
      BOOL v11 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v78 = 0;
      if (__nwlog_fault(v11, &type, &v78))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v27 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)int buf = 136447234;
            os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v82 = 1024;
            int v83 = 202;
            __int16 v84 = 1024;
            unsigned int v85 = a1;
            __int16 v86 = 2080;
            uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v88 = 1024;
            int v89 = 1941;
            _os_log_impl( &dword_181A5C000,  v12,  v27,  "%{public}s TLV of type %d has invalid length %u (%s:%d)",  buf,  0x28u);
          }

          goto LABEL_25;
        }

        if (!v78)
        {
          __nwlog_obj();
          os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v70 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)int buf = 136447234;
            os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v82 = 1024;
            int v83 = 202;
            __int16 v84 = 1024;
            unsigned int v85 = a1;
            __int16 v86 = 2080;
            uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v88 = 1024;
            int v89 = 1941;
            _os_log_impl( &dword_181A5C000,  v12,  v70,  "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded",  buf,  0x28u);
          }

          goto LABEL_25;
        }

        char v39 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v63 = type;
        BOOL v64 = os_log_type_enabled(v12, type);
        if (!v39)
        {
          if (v64)
          {
            *(_DWORD *)int buf = 136447234;
            os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v82 = 1024;
            int v83 = 202;
            __int16 v84 = 1024;
            unsigned int v85 = a1;
            __int16 v86 = 2080;
            uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v88 = 1024;
            int v89 = 1941;
            _os_log_impl( &dword_181A5C000,  v12,  v63,  "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace",  buf,  0x28u);
          }

          goto LABEL_25;
        }

        if (v64)
        {
          *(_DWORD *)int buf = 136447490;
          os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v82 = 1024;
          int v83 = 202;
          __int16 v84 = 1024;
          unsigned int v85 = a1;
          __int16 v86 = 2080;
          uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
          __int16 v88 = 1024;
          int v89 = 1941;
          __int16 v90 = 2082;
          uint64_t v91 = v39;
          _os_log_impl( &dword_181A5C000,  v12,  v63,  "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s",  buf,  0x32u);
        }

        goto LABEL_110;
      }

      goto LABEL_26;
    }

    int v44 = v5[v24 + 1];
    application_service_with_uint64_t bundle_id = nw_browse_descriptor_create_application_service_with_bundle_id(v21, v23);
    custom = (NWConcrete_nw_browse_descriptor *)application_service_with_bundle_id;
    size_t v46 = v24 + 3;
    if (v46 > v6)
    {
      __nwlog_obj();
      nw_endpoint_t v47 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)int buf = 136447234;
      os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
      __int16 v82 = 1024;
      int v83 = 202;
      __int16 v84 = 1024;
      unsigned int v85 = a1;
      __int16 v86 = 2080;
      uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
      __int16 v88 = 1024;
      int v89 = 1951;
      necp_client_result_interface v48 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v78 = 0;
      if (__nwlog_fault(v48, &type, &v78))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          __int16 v49 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v50 = type;
          if (os_log_type_enabled(v49, type))
          {
            *(_DWORD *)int buf = 136447234;
            os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v82 = 1024;
            int v83 = 202;
            __int16 v84 = 1024;
            unsigned int v85 = a1;
            __int16 v86 = 2080;
            uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v88 = 1024;
            int v89 = 1951;
            _os_log_impl( &dword_181A5C000,  v49,  v50,  "%{public}s TLV of type %d has invalid length %u (%s:%d)",  buf,  0x28u);
          }
        }

        else if (v78)
        {
          uint64_t v67 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          __int16 v49 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v68 = type;
          BOOL v69 = os_log_type_enabled(v49, type);
          if (v67)
          {
            if (v69)
            {
              *(_DWORD *)int buf = 136447490;
              os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
              __int16 v82 = 1024;
              int v83 = 202;
              __int16 v84 = 1024;
              unsigned int v85 = a1;
              __int16 v86 = 2080;
              uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
              __int16 v88 = 1024;
              int v89 = 1951;
              __int16 v90 = 2082;
              uint64_t v91 = v67;
              _os_log_impl( &dword_181A5C000,  v49,  v68,  "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s",  buf,  0x32u);
            }

            free(v67);
            goto LABEL_152;
          }

          if (v69)
          {
            *(_DWORD *)int buf = 136447234;
            os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v82 = 1024;
            int v83 = 202;
            __int16 v84 = 1024;
            unsigned int v85 = a1;
            __int16 v86 = 2080;
            uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v88 = 1024;
            int v89 = 1951;
            _os_log_impl( &dword_181A5C000,  v49,  v68,  "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace",  buf,  0x28u);
          }
        }

        else
        {
          __nwlog_obj();
          __int16 v49 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v71 = type;
          if (os_log_type_enabled(v49, type))
          {
            *(_DWORD *)int buf = 136447234;
            os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v82 = 1024;
            int v83 = 202;
            __int16 v84 = 1024;
            unsigned int v85 = a1;
            __int16 v86 = 2080;
            uint64_t v87 = "nw_path_copy_browse_descriptor_from_tlv";
            __int16 v88 = 1024;
            int v89 = 1951;
            _os_log_impl( &dword_181A5C000,  v49,  v71,  "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded",  buf,  0x28u);
          }
        }
      }

void sub_18237B938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *nw_path_copy_advertise_descriptor_from_tlv(unsigned int a1, uint64_t a2, const unsigned __int8 *a3)
{
  uint64_t v69 = *MEMORY[0x1895F89C0];
  if (a1 < 0x1C)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v14 = (id)gLogObj;
    *(_DWORD *)int buf = 136447234;
    uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
    __int16 v59 = 1024;
    int v60 = 204;
    __int16 v61 = 1024;
    unsigned int v62 = a1;
    __int16 v63 = 2080;
    BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
    __int16 v65 = 1024;
    int v66 = 2080;
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v16 = (os_log_s *)(id)gLogObj;
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)int buf = 136447234;
        uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v59 = 1024;
        int v60 = 204;
        __int16 v61 = 1024;
        unsigned int v62 = a1;
        __int16 v63 = 2080;
        BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v65 = 1024;
        int v66 = 2080;
        _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s TLV of type %d has invalid length %u (%s:%d)", buf, 0x28u);
      }
    }

    else if (v55)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v16 = (os_log_s *)(id)gLogObj;
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v16, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)int buf = 136447490;
          uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
          __int16 v59 = 1024;
          int v60 = 204;
          __int16 v61 = 1024;
          unsigned int v62 = a1;
          __int16 v63 = 2080;
          BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
          __int16 v65 = 1024;
          int v66 = 2080;
          __int16 v67 = 2082;
          os_log_type_t v68 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v16,  v19,  "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s",  buf,  0x32u);
        }

        free(backtrace_string);
        if (!v15) {
          return 0LL;
        }
        goto LABEL_112;
      }

      if (v20)
      {
        *(_DWORD *)int buf = 136447234;
        uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v59 = 1024;
        int v60 = 204;
        __int16 v61 = 1024;
        unsigned int v62 = a1;
        __int16 v63 = 2080;
        BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v65 = 1024;
        int v66 = 2080;
        _os_log_impl( &dword_181A5C000,  v16,  v19,  "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace",  buf,  0x28u);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v16 = (os_log_s *)(id)gLogObj;
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)int buf = 136447234;
        uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v59 = 1024;
        int v60 = 204;
        __int16 v61 = 1024;
        unsigned int v62 = a1;
        __int16 v63 = 2080;
        BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v65 = 1024;
        int v66 = 2080;
        _os_log_impl( &dword_181A5C000,  v16,  v21,  "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded",  buf,  0x28u);
      }
    }

    goto LABEL_110;
  }

  if (*(_BYTE *)(a2 + 1)) {
    return 0LL;
  }
  unsigned int v4 = (const char *)(a2 + 8);
  int v5 = *(_DWORD *)(a2 + 4);
  unint64_t v6 = a1 - 8;
  if (v5 == 2)
  {
    size_t v22 = strnlen((const char *)(a2 + 8), a1 - 8);
    if (v22 >= v6)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v30 = (id)gLogObj;
      *(_DWORD *)int buf = 136447234;
      uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
      __int16 v59 = 1024;
      int v60 = 204;
      __int16 v61 = 1024;
      unsigned int v62 = a1;
      __int16 v63 = 2080;
      BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
      __int16 v65 = 1024;
      int v66 = 2049;
      os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v55 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)int buf = 136447234;
          uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
          __int16 v59 = 1024;
          int v60 = 204;
          __int16 v61 = 1024;
          unsigned int v62 = a1;
          __int16 v63 = 2080;
          BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
          __int16 v65 = 1024;
          int v66 = 2049;
          _os_log_impl( &dword_181A5C000,  v16,  v31,  "%{public}s TLV of type %d has invalid length %u (%s:%d)",  buf,  0x28u);
        }

        goto LABEL_110;
      }

      if (!v55)
      {
        __nwlog_obj();
        BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v48 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)int buf = 136447234;
          uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
          __int16 v59 = 1024;
          int v60 = 204;
          __int16 v61 = 1024;
          unsigned int v62 = a1;
          __int16 v63 = 2080;
          BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
          __int16 v65 = 1024;
          int v66 = 2049;
          _os_log_impl( &dword_181A5C000,  v16,  v48,  "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded",  buf,  0x28u);
        }

        goto LABEL_110;
      }

      os_log_type_t v36 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v39 = type;
      BOOL v40 = os_log_type_enabled(v16, type);
      if (!v36)
      {
        if (v40)
        {
          *(_DWORD *)int buf = 136447234;
          uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
          __int16 v59 = 1024;
          int v60 = 204;
          __int16 v61 = 1024;
          unsigned int v62 = a1;
          __int16 v63 = 2080;
          BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
          __int16 v65 = 1024;
          int v66 = 2049;
          _os_log_impl( &dword_181A5C000,  v16,  v39,  "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace",  buf,  0x28u);
        }

        goto LABEL_110;
      }

      if (v40)
      {
        *(_DWORD *)int buf = 136447490;
        uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v59 = 1024;
        int v60 = 204;
        __int16 v61 = 1024;
        unsigned int v62 = a1;
        __int16 v63 = 2080;
        BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v65 = 1024;
        int v66 = 2049;
        __int16 v67 = 2082;
        os_log_type_t v68 = v36;
        _os_log_impl( &dword_181A5C000,  v16,  v39,  "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s",  buf,  0x32u);
      }
    }

    else
    {
      uint64_t v23 = &v4[v22 + 1];
      size_t v24 = strnlen(v23, v6 - (v22 + 1)) + v22 + 1;
      if (v24 < v6)
      {
        size_t v25 = &v4[v24];
        int v26 = *(_DWORD *)(v25 + 1);
        int v27 = *(_DWORD *)(v25 + 5);
        nw_advertise_descriptor_create_application_service_with_bundle_id(v4, v23);
        os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
        nw_advertise_descriptor_set_invitation(v13, v26, v27);
        return v13;
      }

      __nwlog_obj();
      os_log_type_t v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)int buf = 136447234;
      uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
      __int16 v59 = 1024;
      int v60 = 204;
      __int16 v61 = 1024;
      unsigned int v62 = a1;
      __int16 v63 = 2080;
      BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
      __int16 v65 = 1024;
      int v66 = 2056;
      os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v55 = 0;
      if (!__nwlog_fault(v15, &type, &v55))
      {
LABEL_111:
        if (v15) {
LABEL_112:
        }
          free(v15);
        return 0LL;
      }

      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v35 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)int buf = 136447234;
          uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
          __int16 v59 = 1024;
          int v60 = 204;
          __int16 v61 = 1024;
          unsigned int v62 = a1;
          __int16 v63 = 2080;
          BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
          __int16 v65 = 1024;
          int v66 = 2056;
          _os_log_impl( &dword_181A5C000,  v16,  v35,  "%{public}s TLV of type %d has invalid length %u (%s:%d)",  buf,  0x28u);
        }

        goto LABEL_110;
      }

      if (!v55)
      {
        __nwlog_obj();
        BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v52 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)int buf = 136447234;
          uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
          __int16 v59 = 1024;
          int v60 = 204;
          __int16 v61 = 1024;
          unsigned int v62 = a1;
          __int16 v63 = 2080;
          BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
          __int16 v65 = 1024;
          int v66 = 2056;
          _os_log_impl( &dword_181A5C000,  v16,  v52,  "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded",  buf,  0x28u);
        }

        goto LABEL_110;
      }

      os_log_type_t v36 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v45 = type;
      BOOL v46 = os_log_type_enabled(v16, type);
      if (!v36)
      {
        if (v46)
        {
          *(_DWORD *)int buf = 136447234;
          uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
          __int16 v59 = 1024;
          int v60 = 204;
          __int16 v61 = 1024;
          unsigned int v62 = a1;
          __int16 v63 = 2080;
          BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
          __int16 v65 = 1024;
          int v66 = 2056;
          _os_log_impl( &dword_181A5C000,  v16,  v45,  "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace",  buf,  0x28u);
        }

        goto LABEL_110;
      }

      if (v46)
      {
        *(_DWORD *)int buf = 136447490;
        uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v59 = 1024;
        int v60 = 204;
        __int16 v61 = 1024;
        unsigned int v62 = a1;
        __int16 v63 = 2080;
        BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v65 = 1024;
        int v66 = 2056;
        __int16 v67 = 2082;
        os_log_type_t v68 = v36;
        _os_log_impl( &dword_181A5C000,  v16,  v45,  "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s",  buf,  0x32u);
      }
    }

    goto LABEL_85;
  }

  if (v5 != 1) {
    return 0LL;
  }
  size_t v7 = strnlen((const char *)(a2 + 8), a1 - 8);
  if (v7 >= v6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v28 = (id)gLogObj;
    *(_DWORD *)int buf = 136447234;
    uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
    __int16 v59 = 1024;
    int v60 = 204;
    __int16 v61 = 1024;
    unsigned int v62 = a1;
    __int16 v63 = 2080;
    BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
    __int16 v65 = 1024;
    int v66 = 2017;
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)int buf = 136447234;
        uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v59 = 1024;
        int v60 = 204;
        __int16 v61 = 1024;
        unsigned int v62 = a1;
        __int16 v63 = 2080;
        BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v65 = 1024;
        int v66 = 2017;
        _os_log_impl(&dword_181A5C000, v16, v29, "%{public}s TLV of type %d has invalid length %u (%s:%d)", buf, 0x28u);
      }

      goto LABEL_110;
    }

    if (!v55)
    {
      __nwlog_obj();
      BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v47 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)int buf = 136447234;
        uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v59 = 1024;
        int v60 = 204;
        __int16 v61 = 1024;
        unsigned int v62 = a1;
        __int16 v63 = 2080;
        BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v65 = 1024;
        int v66 = 2017;
        _os_log_impl( &dword_181A5C000,  v16,  v47,  "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded",  buf,  0x28u);
      }

      goto LABEL_110;
    }

    os_log_type_t v36 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v37 = type;
    BOOL v38 = os_log_type_enabled(v16, type);
    if (!v36)
    {
      if (v38)
      {
        *(_DWORD *)int buf = 136447234;
        uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v59 = 1024;
        int v60 = 204;
        __int16 v61 = 1024;
        unsigned int v62 = a1;
        __int16 v63 = 2080;
        BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v65 = 1024;
        int v66 = 2017;
        _os_log_impl( &dword_181A5C000,  v16,  v37,  "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace",  buf,  0x28u);
      }

      goto LABEL_110;
    }

    if (v38)
    {
      *(_DWORD *)int buf = 136447490;
      uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
      __int16 v59 = 1024;
      int v60 = 204;
      __int16 v61 = 1024;
      unsigned int v62 = a1;
      __int16 v63 = 2080;
      BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
      __int16 v65 = 1024;
      int v66 = 2017;
      __int16 v67 = 2082;
      os_log_type_t v68 = v36;
      _os_log_impl( &dword_181A5C000,  v16,  v37,  "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s",  buf,  0x32u);
    }

    goto LABEL_85;
  }

  os_log_type_t v8 = &v4[v7 + 1];
  size_t v9 = strnlen(v8, v6 - (v7 + 1)) + v7 + 1;
  if (v9 >= v6)
  {
    __nwlog_obj();
    os_log_type_t v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136447234;
    uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
    __int16 v59 = 1024;
    int v60 = 204;
    __int16 v61 = 1024;
    unsigned int v62 = a1;
    __int16 v63 = 2080;
    BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
    __int16 v65 = 1024;
    int v66 = 2024;
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v33 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)int buf = 136447234;
        uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v59 = 1024;
        int v60 = 204;
        __int16 v61 = 1024;
        unsigned int v62 = a1;
        __int16 v63 = 2080;
        BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v65 = 1024;
        int v66 = 2024;
        _os_log_impl(&dword_181A5C000, v16, v33, "%{public}s TLV of type %d has invalid length %u (%s:%d)", buf, 0x28u);
      }

      goto LABEL_110;
    }

    if (!v55)
    {
      __nwlog_obj();
      BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v51 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)int buf = 136447234;
        uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v59 = 1024;
        int v60 = 204;
        __int16 v61 = 1024;
        unsigned int v62 = a1;
        __int16 v63 = 2080;
        BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v65 = 1024;
        int v66 = 2024;
        _os_log_impl( &dword_181A5C000,  v16,  v51,  "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded",  buf,  0x28u);
      }

      goto LABEL_110;
    }

    os_log_type_t v36 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v43 = type;
    BOOL v44 = os_log_type_enabled(v16, type);
    if (!v36)
    {
      if (v44)
      {
        *(_DWORD *)int buf = 136447234;
        uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v59 = 1024;
        int v60 = 204;
        __int16 v61 = 1024;
        unsigned int v62 = a1;
        __int16 v63 = 2080;
        BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v65 = 1024;
        int v66 = 2024;
        _os_log_impl( &dword_181A5C000,  v16,  v43,  "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace",  buf,  0x28u);
      }

      goto LABEL_110;
    }

    if (v44)
    {
      *(_DWORD *)int buf = 136447490;
      uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
      __int16 v59 = 1024;
      int v60 = 204;
      __int16 v61 = 1024;
      unsigned int v62 = a1;
      __int16 v63 = 2080;
      BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
      __int16 v65 = 1024;
      int v66 = 2024;
      __int16 v67 = 2082;
      os_log_type_t v68 = v36;
      _os_log_impl( &dword_181A5C000,  v16,  v43,  "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s",  buf,  0x32u);
    }

    goto LABEL_85;
  }

  id v10 = &v4[v9 + 1];
  size_t v11 = strnlen(v10, v6 - (v9 + 1)) + v9 + 1;
  if (v11 >= v6)
  {
    __nwlog_obj();
    BOOL v41 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136447234;
    uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
    __int16 v59 = 1024;
    int v60 = 204;
    __int16 v61 = 1024;
    unsigned int v62 = a1;
    __int16 v63 = 2080;
    BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
    __int16 v65 = 1024;
    int v66 = 2031;
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v42 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)int buf = 136447234;
        uint64_t v58 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v59 = 1024;
        int v60 = 204;
        __int16 v61 = 1024;
        unsigned int v62 = a1;
        __int16 v63 = 2080;
        BOOL v64 = "nw_path_copy_advertise_descriptor_from_tlv";
        __int16 v65 = 1024;
        int v66 = 2031;
        _os_log_impl(&dword_181A5C000, v16, v42, "%{public}s TLV of type %d has invalid length %u (%s:%d)", buf, 0x28u);
      }

void sub_18237CCEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_create_assign_message_internal( size_t *a1, _OWORD *a2, unsigned int a3, const void *a4, unsigned int a5, void *a6, void *a7, void *a8)
{
  uint64_t v178 = *MEMORY[0x1895F89C0];
  id v164 = a6;
  id v15 = a7;
  id v16 = a8;
  id v163 = v16;
  if (a3 >= 0x10000)
  {
    __nwlog_obj();
    char v78 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446466;
    v171 = "nw_path_create_assign_message_internal";
    __int16 v172 = 1024;
    *(_DWORD *)uint64_t v173 = a3;
    char v79 = (char *)_os_log_send_and_compose_impl();

    v167[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v79, v167, &type))
    {
      if (v167[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v81 = v167[0];
        if (os_log_type_enabled(v80, v167[0]))
        {
          *(_DWORD *)int buf = 136446466;
          v171 = "nw_path_create_assign_message_internal";
          __int16 v172 = 1024;
          *(_DWORD *)uint64_t v173 = a3;
          _os_log_impl(&dword_181A5C000, v80, v81, "%{public}s nexus_port %u > NEXUS_PORT_MAX", buf, 0x12u);
        }
      }

      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v101 = v167[0];
        BOOL v102 = os_log_type_enabled(v80, v167[0]);
        if (backtrace_string)
        {
          if (v102)
          {
            *(_DWORD *)int buf = 136446722;
            v171 = "nw_path_create_assign_message_internal";
            __int16 v172 = 1024;
            *(_DWORD *)uint64_t v173 = a3;
            *(_WORD *)&v173[4] = 2082;
            *(void *)&v173[6] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v80,  v101,  "%{public}s nexus_port %u > NEXUS_PORT_MAX, dumping backtrace:%{public}s",  buf,  0x1Cu);
          }

          free(backtrace_string);
          goto LABEL_270;
        }

        if (v102)
        {
          *(_DWORD *)int buf = 136446466;
          v171 = "nw_path_create_assign_message_internal";
          __int16 v172 = 1024;
          *(_DWORD *)uint64_t v173 = a3;
          _os_log_impl( &dword_181A5C000,  v80,  v101,  "%{public}s nexus_port %u > NEXUS_PORT_MAX, no backtrace",  buf,  0x12u);
        }
      }

      else
      {
        __nwlog_obj();
        char v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v148 = v167[0];
        if (os_log_type_enabled(v80, v167[0]))
        {
          *(_DWORD *)int buf = 136446466;
          v171 = "nw_path_create_assign_message_internal";
          __int16 v172 = 1024;
          *(_DWORD *)uint64_t v173 = a3;
          _os_log_impl( &dword_181A5C000,  v80,  v148,  "%{public}s nexus_port %u > NEXUS_PORT_MAX, backtrace limit exceeded",  buf,  0x12u);
        }
      }
    }

void sub_18237FD30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20, void *a21)
{
}

BOOL nw_path_create_assign_message( size_t *a1, _OWORD *a2, unsigned int a3, const void *a4, unsigned int a5, void *a6, void *a7)
{
  return nw_path_create_assign_message_internal(a1, a2, a3, a4, a5, a6, a7, 0LL);
}

BOOL nw_path_create_browse_result(void *a1, void *a2)
{
  return nw_path_create_endpoint_array_result(a1, a2, 202);
}

BOOL nw_path_create_endpoint_array_result(void *a1, void *a2, char a3)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  int v5 = a2;
  unint64_t v6 = v5;
  uint64_t v24 = 0LL;
  size_t v25 = &v24;
  uint64_t v26 = 0x2020000000LL;
  uint64_t v27 = 0LL;
  uint64_t v20 = 0LL;
  os_log_type_t v21 = &v20;
  uint64_t v22 = 0x2020000000LL;
  uint64_t v23 = 0LL;
  if (a1) {
    *a1 = 0LL;
  }
  uint64_t v7 = MEMORY[0x1895F87A8];
  v19[0] = MEMORY[0x1895F87A8];
  v19[1] = 3221225472LL;
  v19[2] = ___ZL36nw_path_create_endpoint_array_resultPmPU22objcproto11OS_nw_array8NSObjecth_block_invoke;
  v19[3] = &unk_189BC50D0;
  void v19[4] = &v20;
  nw_array_apply(v5, (uint64_t)v19);
  unint64_t v8 = v21[3];
  if (!v8) {
    goto LABEL_14;
  }
  if (v8 >= 0x6000)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    size_t v9 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if (v6) {
        uint64_t v10 = (uint64_t)(*((void *)v6 + 3) - *((void *)v6 + 2)) >> 3;
      }
      else {
        uint64_t v10 = 0LL;
      }
      unint64_t v13 = v21[3];
      *(_DWORD *)int buf = 136446722;
      os_log_type_t v29 = "nw_path_create_endpoint_array_result";
      __int16 v30 = 2048;
      uint64_t v31 = v10;
      __int16 v32 = 2048;
      unint64_t v33 = v13;
      _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_ERROR,  "%{public}s Endpoint array too large; number of endpoints: %zu, total size: %zu",
        buf,
        0x20u);
    }

LABEL_14:
    size_t v11 = 0LL;
LABEL_15:
    _Block_object_dispose(&v20, 8);
    _Block_object_dispose(&v24, 8);

    return (BOOL)v11;
  }

  size_t v11 = (char *)calloc(1uLL, v21[3]);
  if (v11)
  {
LABEL_9:
    os_log_type_t v12 = &v11[v21[3]];
    v25[3] = (uint64_t)v11;
    v17[0] = v7;
    v17[1] = 3221225472LL;
    v17[2] = ___ZL36nw_path_create_endpoint_array_resultPmPU22objcproto11OS_nw_array8NSObjecth_block_invoke_29;
    v17[3] = &unk_189BC3BD0;
    char v18 = a3;
    v17[4] = &v24;
    v17[5] = v12;
    nw_array_apply(v6, (uint64_t)v17);
    if (a1) {
      *a1 = v21[3];
    }
    goto LABEL_15;
  }

  __nwlog_obj();
  id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
  *(_DWORD *)int buf = 136446722;
  os_log_type_t v29 = "strict_calloc";
  __int16 v30 = 2048;
  uint64_t v31 = 1LL;
  __int16 v32 = 2048;
  unint64_t v33 = v8;
  id v16 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v16);
  if (!result)
  {
    free(v16);
    goto LABEL_9;
  }

  __break(1u);
  return result;
}

void sub_182380060( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL36nw_path_create_endpoint_array_resultPmPU22objcproto11OS_nw_array8NSObjecth_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += nw_path_struct_size_for_endpoint_and_metadata( v4,  0LL,  7);

  return 1LL;
}

void sub_1823800DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL36nw_path_create_endpoint_array_resultPmPU22objcproto11OS_nw_array8NSObjecth_block_invoke_29( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = nw_path_evaluator_add_endpoint_to_necp_message( v4,  *(unsigned __int8 *)(a1 + 48),  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL)
                                                                            + 24LL),
                                                                  *(void *)(a1 + 40),
                                                                  7);

  return 1LL;
}

void sub_18238013C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_create_resolve_result(void *a1, void *a2)
{
  return nw_path_create_endpoint_array_result(a1, a2, 203);
}

BOOL nw_path_create_group_members_result(void *a1, void *a2)
{
  return nw_path_create_endpoint_array_result(a1, a2, 213);
}

uint64_t __nw_path_create_necp_agent_group_action_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += nw_path_struct_size_for_endpoint_and_metadata( v4,  0LL,  7);
  ++*(_WORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);

  return 1LL;
}

void sub_1823801BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_path_create_necp_agent_group_action_block_invoke_2(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  *(void *)(*(void *)(a1[4] + 8LL) + 24LL) = nw_path_evaluator_add_endpoint_to_necp_message( v4,  213,  *(void *)(*(void *)(a1[4] + 8LL) + 24LL),  a1[6] + *(void *)(*(void *)(a1[5] + 8LL) + 24LL) + 18LL,  7);

  return 1LL;
}

void sub_182380230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sa_dst_compare_init_once(void)
{
  mach_timebase_info info = 0LL;
  uint64_t result = mach_timebase_info(&info);
  cache_timeuuid_string_t out = 1000000000 * (unint64_t)info.denom / info.numer;
  return result;
}

uint64_t sa_dst_compare(unsigned __int8 *a1, unsigned __int8 *a2, int a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (a2) {
      return sa_dst_compare_internal(a1, a3, a2, a3, 1);
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    id v15 = "sa_dst_compare";
    id v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (__nwlog_fault(v4, &type, &v12))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v5 = (os_log_s *)__nwlog_obj();
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_32;
        }
        *(_DWORD *)int buf = 136446210;
        id v15 = "sa_dst_compare";
        uint64_t v7 = "%{public}s called with null dst2";
        goto LABEL_31;
      }

      if (!v12)
      {
        int v5 = (os_log_s *)__nwlog_obj();
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_32;
        }
        *(_DWORD *)int buf = 136446210;
        id v15 = "sa_dst_compare";
        uint64_t v7 = "%{public}s called with null dst2, backtrace limit exceeded";
        goto LABEL_31;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v11 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          id v15 = "sa_dst_compare";
          __int16 v16 = 2082;
          id v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null dst2, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v4) {
          return 0LL;
        }
        goto LABEL_33;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        id v15 = "sa_dst_compare";
        uint64_t v7 = "%{public}s called with null dst2, no backtrace";
LABEL_31:
        _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
      }
    }
  }

  else
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    id v15 = "sa_dst_compare";
    id v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)int buf = 136446210;
      id v15 = "sa_dst_compare";
      uint64_t v7 = "%{public}s called with null dst1";
      goto LABEL_31;
    }

    if (!v12)
    {
      int v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)int buf = 136446210;
      id v15 = "sa_dst_compare";
      uint64_t v7 = "%{public}s called with null dst1, backtrace limit exceeded";
      goto LABEL_31;
    }

    unint64_t v8 = (char *)__nw_create_backtrace_string();
    int v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (!v8)
    {
      if (!v9) {
        goto LABEL_32;
      }
      *(_DWORD *)int buf = 136446210;
      id v15 = "sa_dst_compare";
      uint64_t v7 = "%{public}s called with null dst1, no backtrace";
      goto LABEL_31;
    }

    if (v9)
    {
      *(_DWORD *)int buf = 136446466;
      id v15 = "sa_dst_compare";
      __int16 v16 = 2082;
      id v17 = v8;
      _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null dst1, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v8);
  }

uint64_t sa_dst_compare_no_stats(unsigned __int8 *a1, unsigned __int8 *a2, int a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (a2) {
      return sa_dst_compare_internal(a1, a3, a2, a3, 0);
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    id v15 = "sa_dst_compare_no_stats";
    id v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (__nwlog_fault(v4, &type, &v12))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v5 = (os_log_s *)__nwlog_obj();
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_32;
        }
        *(_DWORD *)int buf = 136446210;
        id v15 = "sa_dst_compare_no_stats";
        uint64_t v7 = "%{public}s called with null dst2";
        goto LABEL_31;
      }

      if (!v12)
      {
        int v5 = (os_log_s *)__nwlog_obj();
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_32;
        }
        *(_DWORD *)int buf = 136446210;
        id v15 = "sa_dst_compare_no_stats";
        uint64_t v7 = "%{public}s called with null dst2, backtrace limit exceeded";
        goto LABEL_31;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v11 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          id v15 = "sa_dst_compare_no_stats";
          __int16 v16 = 2082;
          id v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null dst2, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v4) {
          return 0LL;
        }
        goto LABEL_33;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        id v15 = "sa_dst_compare_no_stats";
        uint64_t v7 = "%{public}s called with null dst2, no backtrace";
LABEL_31:
        _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
      }
    }
  }

  else
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    id v15 = "sa_dst_compare_no_stats";
    id v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)int buf = 136446210;
      id v15 = "sa_dst_compare_no_stats";
      uint64_t v7 = "%{public}s called with null dst1";
      goto LABEL_31;
    }

    if (!v12)
    {
      int v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)int buf = 136446210;
      id v15 = "sa_dst_compare_no_stats";
      uint64_t v7 = "%{public}s called with null dst1, backtrace limit exceeded";
      goto LABEL_31;
    }

    unint64_t v8 = (char *)__nw_create_backtrace_string();
    int v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (!v8)
    {
      if (!v9) {
        goto LABEL_32;
      }
      *(_DWORD *)int buf = 136446210;
      id v15 = "sa_dst_compare_no_stats";
      uint64_t v7 = "%{public}s called with null dst1, no backtrace";
      goto LABEL_31;
    }

    if (v9)
    {
      *(_DWORD *)int buf = 136446466;
      id v15 = "sa_dst_compare_no_stats";
      __int16 v16 = 2082;
      id v17 = v8;
      _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null dst1, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v8);
  }

uint64_t sa_dst_compare_no_dependencies(uint64_t a1, uint64_t a2)
{
  *(void *)&v49[5] = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v47 = "sa_dst_compare_no_dependencies";
    os_log_type_t v36 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v44)
      {
        os_log_type_t v37 = (os_log_s *)__nwlog_obj();
        os_log_type_t v38 = type;
        if (!os_log_type_enabled(v37, type)) {
          goto LABEL_143;
        }
        *(_DWORD *)int buf = 136446210;
        BOOL v47 = "sa_dst_compare_no_dependencies";
        BOOL v39 = "%{public}s called with null dst1, backtrace limit exceeded";
        goto LABEL_142;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v37 = (os_log_s *)__nwlog_obj();
      os_log_type_t v38 = type;
      BOOL v41 = os_log_type_enabled(v37, type);
      if (!backtrace_string)
      {
        if (!v41) {
          goto LABEL_143;
        }
        *(_DWORD *)int buf = 136446210;
        BOOL v47 = "sa_dst_compare_no_dependencies";
        BOOL v39 = "%{public}s called with null dst1, no backtrace";
        goto LABEL_142;
      }

      if (v41)
      {
        *(_DWORD *)int buf = 136446466;
        BOOL v47 = "sa_dst_compare_no_dependencies";
        __int16 v48 = 2082;
        *(void *)os_log_type_t v49 = backtrace_string;
        os_log_type_t v42 = "%{public}s called with null dst1, dumping backtrace:%{public}s";
LABEL_132:
        _os_log_impl(&dword_181A5C000, v37, v38, v42, buf, 0x16u);
      }

NWConcrete_nw_hsts_storage *nw_hsts_storage_create_ns(void *a1)
{
  id v1 = a1;
  int v2 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_hsts_storage);
  HSTSStorage = v2->HSTSStorage;
  v2->HSTSStorage = v1;

  return v2;
}

NWConcrete_nw_protocol_transform *nw_protocol_transform_create()
{
  return objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_protocol_transform);
}

void nw_protocol_transform_replace_endpoint(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  unsigned int v3 = a1;
  id v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 4, a2);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  int v16 = "nw_protocol_transform_replace_endpoint";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v16 = "nw_protocol_transform_replace_endpoint";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          int v16 = "nw_protocol_transform_replace_endpoint";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        int v16 = "nw_protocol_transform_replace_endpoint";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v16 = "nw_protocol_transform_replace_endpoint";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t __nw_protocol_transform_modify_parameters_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  bytes_ptr = xpc_data_get_bytes_ptr(v4);
  nw_parameters_remove_from_protocol_stack(*(void **)(a1 + 32), 5, bytes_ptr);
  nw_parameters_remove_from_protocol_stack(*(void **)(a1 + 32), 4, bytes_ptr);
  nw_parameters_remove_from_protocol_stack(*(void **)(a1 + 32), 3, bytes_ptr);
  nw_parameters_remove_from_protocol_stack(*(void **)(a1 + 32), 2, bytes_ptr);

  return 1LL;
}

void sub_182385B74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_transform_disable_protocol(void *a1, const void *a2)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  unsigned int v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    int v25 = "nw_protocol_transform_disable_protocol";
    unsigned int v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v25 = "nw_protocol_transform_disable_protocol";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null transform", buf, 0xCu);
      }
    }

    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)int buf = 136446466;
          int v25 = "nw_protocol_transform_disable_protocol";
          __int16 v26 = 2082;
          unsigned int v27 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }

      if (v16)
      {
        *(_DWORD *)int buf = 136446210;
        int v25 = "nw_protocol_transform_disable_protocol";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v25 = "nw_protocol_transform_disable_protocol";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_182386054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_transform_clear_protocols_at_level(void *a1, int a2)
{
  *(void *)&v35[13] = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    switch(a2)
    {
      case 0:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (id)gLogObj;
        *(_DWORD *)int buf = 136446210;
        unint64_t v33 = "nw_protocol_transform_clear_protocols_at_level";
        xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v30 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v7 = (os_log_s *)(id)gLogObj;
          os_log_type_t v8 = type;
          if (os_log_type_enabled(v7, type))
          {
            *(_DWORD *)int buf = 136446210;
            unint64_t v33 = "nw_protocol_transform_clear_protocols_at_level";
            _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s Undefined protocol level", buf, 0xCu);
          }

          goto LABEL_65;
        }

        if (!v30)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v7 = (os_log_s *)(id)gLogObj;
          os_log_type_t v21 = type;
          if (os_log_type_enabled(v7, type))
          {
            *(_DWORD *)int buf = 136446210;
            unint64_t v33 = "nw_protocol_transform_clear_protocols_at_level";
            _os_log_impl( &dword_181A5C000,  v7,  v21,  "%{public}s Undefined protocol level, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_65;
        }

        backtrace_string = __nw_create_backtrace_string();
        if (!backtrace_string)
        {
          __nwlog_obj();
          int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v23 = type;
          if (os_log_type_enabled(v7, type))
          {
            *(_DWORD *)int buf = 136446210;
            unint64_t v33 = "nw_protocol_transform_clear_protocols_at_level";
            _os_log_impl(&dword_181A5C000, v7, v23, "%{public}s Undefined protocol level, no backtrace", buf, 0xCu);
          }

          goto LABEL_65;
        }

        int v14 = (char *)backtrace_string;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v15 = (os_log_s *)(id)gLogObj;
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)int buf = 136446466;
          unint64_t v33 = "nw_protocol_transform_clear_protocols_at_level";
          __int16 v34 = 2082;
          *(void *)unsigned int v35 = v14;
          _os_log_impl( &dword_181A5C000,  v15,  v16,  "%{public}s Undefined protocol level, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v14);
        if (v6) {
          goto LABEL_48;
        }
        goto LABEL_49;
      case 1:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136446210;
          unint64_t v33 = "nw_protocol_transform_clear_protocols_at_level";
          _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_ERROR,  "%{public}s Link level protocols are currently unsupported",  buf,  0xCu);
        }

        goto LABEL_15;
      case 2:
        *((_BYTE *)v3 + 8) |= 4u;
        goto LABEL_49;
      case 3:
        *((_BYTE *)v3 + 8) |= 2u;
        goto LABEL_49;
      case 4:
        *((_BYTE *)v3 + 8) |= 1u;
        goto LABEL_49;
      case 5:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136446210;
          unint64_t v33 = "nw_protocol_transform_clear_protocols_at_level";
          _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_ERROR,  "%{public}s Persistent protocols are currently unsupported",  buf,  0xCu);
        }

void nw_protocol_transform_set_multipath_service(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *((_BYTE *)v3 + 9) |= 2u;
    *((_DWORD *)v3 + 5) = a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_protocol_transform_set_multipath_service";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_set_multipath_service";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_protocol_transform_set_multipath_service";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_set_multipath_service";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_set_multipath_service";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_protocol_transform_get_multipath_service(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[5];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_protocol_transform_get_multipath_service";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_get_multipath_service";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_protocol_transform_get_multipath_service";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_get_multipath_service";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_get_multipath_service";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_protocol_transform_set_no_proxy(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 8;
    }
    else {
      char v5 = 0;
    }
    *((_BYTE *)v3 + _Block_object_dispose(va, 8) = *((_BYTE *)v3 + 8) & 0xF7 | v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  xpc_object_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  __int16 v17 = "nw_protocol_transform_set_no_proxy";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_protocol_transform_set_no_proxy";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null transform", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v17 = "nw_protocol_transform_set_no_proxy";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_protocol_transform_set_no_proxy";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_protocol_transform_set_no_proxy";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_protocol_transform_get_no_proxy(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[8] >> 3) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_protocol_transform_get_no_proxy";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_get_no_proxy";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_protocol_transform_get_no_proxy";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_get_no_proxy";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_get_no_proxy";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_protocol_transform_set_no_path_fallback(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 0x80;
    }
    else {
      char v5 = 0;
    }
    *((_BYTE *)v3 + _Block_object_dispose(va, 8) = v5 & 0x80 | *((_BYTE *)v3 + 8) & 0x7F;
    goto LABEL_6;
  }

  __nwlog_obj();
  xpc_object_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  __int16 v17 = "nw_protocol_transform_set_no_path_fallback";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_protocol_transform_set_no_path_fallback";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null transform", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v17 = "nw_protocol_transform_set_no_path_fallback";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_protocol_transform_set_no_path_fallback";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_protocol_transform_set_no_path_fallback";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_protocol_transform_get_no_path_fallback(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    BOOL v3 = v1[8] < 0;
    goto LABEL_3;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_protocol_transform_get_no_path_fallback";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_get_no_path_fallback";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_protocol_transform_get_no_path_fallback";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_get_no_path_fallback";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_get_no_path_fallback";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_protocol_transform_set_tfo(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 32;
    }
    else {
      char v5 = 0;
    }
    *((_BYTE *)v3 + _Block_object_dispose(va, 8) = *((_BYTE *)v3 + 8) & 0xDF | v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  xpc_object_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  __int16 v17 = "nw_protocol_transform_set_tfo";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_protocol_transform_set_tfo";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null transform", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v17 = "nw_protocol_transform_set_tfo";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_protocol_transform_set_tfo";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_protocol_transform_set_tfo";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_protocol_transform_get_tfo(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[8] >> 5) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_protocol_transform_get_tfo";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_get_tfo";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_protocol_transform_get_tfo";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_get_tfo";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_get_tfo";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_protocol_transform_set_tfo_no_cookie(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 64;
    }
    else {
      char v5 = 0;
    }
    *((_BYTE *)v3 + _Block_object_dispose(va, 8) = *((_BYTE *)v3 + 8) & 0xBF | v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  xpc_object_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  __int16 v17 = "nw_protocol_transform_set_tfo_no_cookie";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_protocol_transform_set_tfo_no_cookie";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null transform", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v17 = "nw_protocol_transform_set_tfo_no_cookie";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_protocol_transform_set_tfo_no_cookie";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_protocol_transform_set_tfo_no_cookie";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_protocol_transform_get_tfo_no_cookie(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[8] >> 6) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_protocol_transform_get_tfo_no_cookie";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_get_tfo_no_cookie";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_protocol_transform_get_tfo_no_cookie";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_get_tfo_no_cookie";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_protocol_transform_get_tfo_no_cookie";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_protocol_transform_set_use_tfo_heuristics(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v2 = (os_log_s *)(id)gLogObj;
  uint64_t v3 = v2;
  if (a1)
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      char v14 = "nw_protocol_transform_set_use_tfo_heuristics";
      _os_log_impl( &dword_181A5C000,  v3,  OS_LOG_TYPE_INFO,  "%{public}s nw_protocol_transform_set_use_tfo_heuristics is deprecated",  buf,  0xCu);
    }

    return;
  }

  *(_DWORD *)int buf = 136446210;
  char v14 = "nw_protocol_transform_set_use_tfo_heuristics";
  id v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v14 = "nw_protocol_transform_set_use_tfo_heuristics";
        _os_log_impl(&dword_181A5C000, v5, v6, "%{public}s called with null transform", buf, 0xCu);
      }
    }

    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)int buf = 136446466;
          char v14 = "nw_protocol_transform_set_use_tfo_heuristics";
          __int16 v15 = 2082;
          os_log_type_t v16 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v8,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v9)
      {
        *(_DWORD *)int buf = 136446210;
        char v14 = "nw_protocol_transform_set_use_tfo_heuristics";
        _os_log_impl(&dword_181A5C000, v5, v8, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v14 = "nw_protocol_transform_set_use_tfo_heuristics";
        _os_log_impl( &dword_181A5C000,  v5,  v10,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_protocol_transform_get_use_tfo_heuristics(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v2 = (os_log_s *)(id)gLogObj;
  uint64_t v3 = v2;
  if (a1)
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      __int16 v15 = "nw_protocol_transform_get_use_tfo_heuristics";
      _os_log_impl( &dword_181A5C000,  v3,  OS_LOG_TYPE_INFO,  "%{public}s nw_protocol_transform_set_use_tfo_heuristics is deprecated",  buf,  0xCu);
    }

    return 0LL;
  }

  *(_DWORD *)int buf = 136446210;
  __int16 v15 = "nw_protocol_transform_get_use_tfo_heuristics";
  char v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v15 = "nw_protocol_transform_get_use_tfo_heuristics";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null transform", buf, 0xCu);
      }
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v15 = "nw_protocol_transform_get_use_tfo_heuristics";
          __int16 v16 = 2082;
          uint64_t v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v10)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v15 = "nw_protocol_transform_get_use_tfo_heuristics";
        _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v15 = "nw_protocol_transform_get_use_tfo_heuristics";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_protocol_transform_set_fast_open_force_enable(void *a1, char a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *((_BYTE *)v3 + 9) = *((_BYTE *)v3 + 9) & 0xFE | a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  __int16 v16 = "nw_protocol_transform_set_fast_open_force_enable";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_protocol_transform_set_fast_open_force_enable";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v16 = "nw_protocol_transform_set_fast_open_force_enable";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_protocol_transform_set_fast_open_force_enable";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_protocol_transform_set_fast_open_force_enable";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_protocol_transform_get_fast_open_force_enable(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((_BYTE *)v1 + 9) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  __int16 v16 = "nw_protocol_transform_get_fast_open_force_enable";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_protocol_transform_get_fast_open_force_enable";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v16 = "nw_protocol_transform_get_fast_open_force_enable";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_protocol_transform_get_fast_open_force_enable";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_protocol_transform_get_fast_open_force_enable";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_protocol_transform_set_traffic_class(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *((_BYTE *)v3 + 9) |= 4u;
    *((_DWORD *)v3 + 3) = a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  __int16 v16 = "nw_protocol_transform_set_traffic_class";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_protocol_transform_set_traffic_class";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v16 = "nw_protocol_transform_set_traffic_class";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_protocol_transform_set_traffic_class";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_protocol_transform_set_traffic_class";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_protocol_transform_get_traffic_class(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[3];
    goto LABEL_3;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  __int16 v16 = "nw_protocol_transform_get_traffic_class";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_protocol_transform_get_traffic_class";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v16 = "nw_protocol_transform_get_traffic_class";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_protocol_transform_get_traffic_class";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_protocol_transform_get_traffic_class";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_protocol_transform_set_data_mode(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *((_DWORD *)v3 + 6) = a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  __int16 v16 = "nw_protocol_transform_set_data_mode";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_protocol_transform_set_data_mode";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v16 = "nw_protocol_transform_set_data_mode";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_protocol_transform_set_data_mode";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_protocol_transform_set_data_mode";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_protocol_transform_get_data_mode(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[6];
    goto LABEL_3;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  __int16 v16 = "nw_protocol_transform_get_data_mode";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_protocol_transform_get_data_mode";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v16 = "nw_protocol_transform_get_data_mode";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_protocol_transform_get_data_mode";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_protocol_transform_get_data_mode";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_protocol_transform_set_fallback_mode(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *((_DWORD *)v3 + 4) = a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  __int16 v16 = "nw_protocol_transform_set_fallback_mode";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_protocol_transform_set_fallback_mode";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v16 = "nw_protocol_transform_set_fallback_mode";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_protocol_transform_set_fallback_mode";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_protocol_transform_set_fallback_mode";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_protocol_transform_set_prohibit_direct(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 16;
    }
    else {
      char v5 = 0;
    }
    *((_BYTE *)v3 + _Block_object_dispose(va, 8) = *((_BYTE *)v3 + 8) & 0xEF | v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  os_log_type_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  __int16 v17 = "nw_protocol_transform_set_prohibit_direct";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_protocol_transform_set_prohibit_direct";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null transform", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v17 = "nw_protocol_transform_set_prohibit_direct";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_protocol_transform_set_prohibit_direct";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_protocol_transform_set_prohibit_direct";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_protocol_transform_add_match_url_scheme(void *a1, const char *a2)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    int v25 = "nw_protocol_transform_add_match_url_scheme";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v25 = "nw_protocol_transform_add_match_url_scheme";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null transform", buf, 0xCu);
      }
    }

    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)int buf = 136446466;
          int v25 = "nw_protocol_transform_add_match_url_scheme";
          __int16 v26 = 2082;
          os_log_type_t v27 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }

      if (v16)
      {
        *(_DWORD *)int buf = 136446210;
        int v25 = "nw_protocol_transform_add_match_url_scheme";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v25 = "nw_protocol_transform_add_match_url_scheme";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_18238A2DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_transform_clear_match_url_schemes(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    id v3 = (void *)v1[6];
    if (v3)
    {
      xpc_release(v3);
      id v4 = (void *)v2[6];
      v2[6] = 0LL;
    }

    goto LABEL_4;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  BOOL v16 = "nw_protocol_transform_clear_match_url_schemes";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_protocol_transform_clear_match_url_schemes";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v16 = "nw_protocol_transform_clear_match_url_schemes";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_protocol_transform_clear_match_url_schemes";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_protocol_transform_clear_match_url_schemes";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18238A588(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_transform_supports_endpoint_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1895F92E8])
  {
    string_ptr = xpc_string_get_string_ptr(v4);
    uint64_t v5 = 1LL;
    if (!strcasecmp(string_ptr, *(const char **)(a1 + 40)))
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
      uint64_t v5 = 0LL;
    }
  }

  else
  {
    uint64_t v5 = 1LL;
  }

  return v5;
}

void sub_18238A614(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_transform_compare(void *a1, void *a2, int a3)
{
  unint64_t v5 = a1;
  id v6 = a2;
  os_log_type_t v7 = (void **)v6;
  if (!(v5 | (unint64_t)v6))
  {
    uint64_t is_equal = 1LL;
    goto LABEL_9;
  }

  uint64_t is_equal = 0LL;
  if (v5 && v6)
  {
    if (*(_DWORD *)(v5 + 16) != *((_DWORD *)v6 + 4)
      || *((unsigned __int8 *)v6 + 8) != *(unsigned __int8 *)(v5 + 8)
      || ((*((_BYTE *)v6 + 9) ^ *(_BYTE *)(v5 + 9)) & 3) != 0)
    {
LABEL_8:
      uint64_t is_equal = 0LL;
      goto LABEL_9;
    }

    uint64_t is_equal = 0LL;
    if (((*((_BYTE *)v6 + 9) ^ *(_BYTE *)(v5 + 9)) & 4) == 0 && *(_DWORD *)(v5 + 20) == *((_DWORD *)v6 + 5))
    {
      if (*(_DWORD *)(v5 + 12) == *((_DWORD *)v6 + 3)
        && *(_DWORD *)(v5 + 24) == *((_DWORD *)v6 + 6)
        && (nw_endpoint_is_equal(*(void **)(v5 + 32), *((void **)v6 + 4), 0LL) & 1) != 0
        && nw_xpc_objects_equal(*(void **)(v5 + 40), v7[5])
        && nw_xpc_objects_equal(*(void **)(v5 + 48), v7[6]))
      {
        uint64_t is_equal = nw_protocol_stack_is_equal(*(void **)(v5 + 56), v7[7], a3);
        goto LABEL_9;
      }

      goto LABEL_8;
    }
  }

void sub_18238A744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18238A7BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_transform_is_equal(void *a1, void *a2)
{
  return nw_protocol_transform_compare(a1, a2, 0);
}

uint64_t nw_protocol_transform_get_hash(void *a1)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    memset(&c, 0, sizeof(c));
    CC_SHA256_Init(&c);
    __int128 v6 = *(_OWORD *)(v1 + 12);
    __int16 v7 = ((((v1[9] & 2) != 0) << 9) | ((v1[9] & 1) << 8)) & 0xFBFF | (((v1[9] & 4) != 0) << 10) | v1[8];
    __int16 v8 = 0;
    CC_SHA256_Update(&c, &v6, 0x14u);
    CC_SHA256_Final(md, &c);
    uint64_t v2 = [*((id *)v1 + 4) getHash];
    id v3 = (void *)*((void *)v1 + 6);
    if (v3) {
      v2 ^= xpc_hash(v3);
    }
    uint64_t v4 = nw_protocol_stack_get_hash(*((void **)v1 + 7)) ^ v2;
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  return v4;
}

void sub_18238A8D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_connection_multipath_get_subflow_count(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)int buf = 0LL;
    *(void *)&buf[8] = buf;
    int v19 = 0;
    *(void *)&buf[16] = 0x2020000000LL;
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_connection_multipath_get_subflow_count_block_invoke;
    v13[3] = &unk_189BC9210;
    char v14 = v1;
    os_log_type_t v15 = buf;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_multipath_get_subflow_count_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    uint64_t v3 = *(unsigned int *)(*(void *)&buf[8] + 24LL);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_multipath_get_subflow_count";
  __int128 v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_multipath_get_subflow_count";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_multipath_get_subflow_count";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_multipath_get_subflow_count";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_multipath_get_subflow_count";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void __nw_connection_multipath_get_subflow_count_block_invoke(uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 32);
  if ((*(_BYTE *)(v2 + 109) & 0x40) != 0)
  {
    __int128 v6 = (os_unfair_lock_s *)*(id *)(v2 + 144);
    __int16 v7 = v6;
    if (v6)
    {
      os_unfair_lock_lock(v6 + 28);
      if (v7[29]._os_unfair_lock_opaque != 2)
      {
        int v19 = 0;
LABEL_34:
        os_unfair_lock_unlock(v7 + 28);
LABEL_35:

        *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v19;
        return;
      }

      os_log_type_t v8 = *(id *)&v7[62]._os_unfair_lock_opaque;
      os_log_type_t v9 = v8;
      if (v8)
      {
        *(void *)os_log_type_t type = 0LL;
        BOOL v39 = type;
        int v41 = 0;
        uint64_t v40 = 0x2020000000LL;
        if (!nw_endpoint_flow_is_multipath(v8))
        {
LABEL_32:
          int v19 = *((_DWORD *)v39 + 6);
          _Block_object_dispose(type, 8);
LABEL_33:

          goto LABEL_34;
        }

        id v10 = nw_endpoint_flow_copy_connected_socket_wrapper(v9);
        BOOL v11 = (void *)v9[117];
        if (v11)
        {
          os_log_type_t v12 = v11;
          id v13 = v12[4];

          if (v13 && nw_parameters_get_upper_transport_protocol(v13) == 253)
          {
            if (gLogDatapath)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v37 = (os_log_s *)(id)gLogObj;
              if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_endpoint_flow_get_multipath_subflow_count";
                _os_log_impl( &dword_181A5C000,  v37,  OS_LOG_TYPE_DEBUG,  "%{public}s Querying QUIC for subflow count",  buf,  0xCu);
              }
            }

            uint64_t v14 = v9[51];
            if (v14)
            {
              uint64_t v15 = *(void *)(v14 + 24);
              if (v15)
              {
                char v16 = *(uint64_t (**)(void))(v15 + 224);
                if (v16)
                {
                  uint64_t v17 = v16();
                  os_log_type_t v18 = (void **)v17;
                  if (v17)
                  {
                    *((_DWORD *)v39 + 6) = *(_DWORD *)(v17 + 8);
                    nw_array_remove_all_objects(*(void *)v17);
                    if (*v18) {
                      os_release(*v18);
                    }
                    free(v18);
                  }
                }
              }
            }

void sub_18238B49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t nw_connection_multipath_get_primary_subflow_interface_index(void *a1)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = nw_connection_copy_connected_path(v1);
    uint64_t v4 = v3;
    if (v3)
    {
      int v5 = (NWConcrete_nw_path *)v3;
      if (nw_path_network_is_satisfied_update_reason(v5, 0LL)) {
        uint64_t routed_interface_index = v5->policy_result.routed_interface_index;
      }
      else {
        uint64_t routed_interface_index = 0LL;
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v7 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v20 = "nw_connection_multipath_get_primary_subflow_interface_index";
        _os_log_impl(&dword_181A5C000, v7, OS_LOG_TYPE_ERROR, "%{public}s No connected path", buf, 0xCu);
      }

      uint64_t routed_interface_index = 0LL;
    }

    goto LABEL_11;
  }

  __nwlog_obj();
  os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  uint64_t v20 = "nw_connection_multipath_get_primary_subflow_interface_index";
  id v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v20 = "nw_connection_multipath_get_primary_subflow_interface_index";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null connection", buf, 0xCu);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v20 = "nw_connection_multipath_get_primary_subflow_interface_index";
          __int16 v21 = 2082;
          char v22 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_28;
      }

      if (v15)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v20 = "nw_connection_multipath_get_primary_subflow_interface_index";
        _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v20 = "nw_connection_multipath_get_primary_subflow_interface_index";
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18238B81C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_connection_multipath_copy_subflow_counts(void *a1)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)int buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    int v19 = __Block_byref_object_copy__60050;
    uint64_t v20 = __Block_byref_object_dispose__60051;
    id v21 = 0LL;
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_connection_multipath_copy_subflow_counts_block_invoke;
    v13[3] = &unk_189BC9210;
    os_log_type_t v14 = v1;
    BOOL v15 = buf;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_multipath_copy_subflow_counts_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    id v3 = *(id *)(*(void *)&buf[8] + 40LL);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_multipath_copy_subflow_counts";
  __int128 v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_multipath_copy_subflow_counts";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_multipath_copy_subflow_counts";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_multipath_copy_subflow_counts";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_multipath_copy_subflow_counts";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t __Block_byref_object_copy__60050(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__60051(uint64_t a1)
{
}

void __nw_connection_multipath_copy_subflow_counts_block_invoke(uint64_t a1)
{
  uint64_t v81 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 32);
  if ((*(_BYTE *)(v2 + 109) & 0x40) == 0)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v4 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        int v5 = *(_DWORD *)(*(void *)(a1 + 32) + 448LL);
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_multipath_copy_subflow_counts_block_invoke";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = v5;
        _os_log_impl(&dword_181A5C000, v4, OS_LOG_TYPE_INFO, "%{public}s [C%u]  has no connected handler", buf, 0x12u);
      }
    }

    return;
  }

  __int128 v6 = (os_unfair_lock_s *)*(id *)(v2 + 144);
  __int16 v7 = v6;
  if (!v6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v46 = (id)gLogObj;
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_multipath_subflow_counts";
    BOOL v47 = (char *)_os_log_send_and_compose_impl();

    v67[0] = OS_LOG_TYPE_ERROR;
    v71[0] = 0;
    if (__nwlog_fault(v47, v67, v71))
    {
      if (v67[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v48 = (os_log_s *)(id)gLogObj;
        os_log_type_t v49 = v67[0];
        if (os_log_type_enabled(v48, v67[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_multipath_subflow_counts";
          _os_log_impl(&dword_181A5C000, v48, v49, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v71[0])
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v48 = (os_log_s *)(id)gLogObj;
        os_log_type_t v55 = v67[0];
        BOOL v56 = os_log_type_enabled(v48, v67[0]);
        if (backtrace_string)
        {
          if (v56)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_multipath_subflow_counts";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&_BYTE buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v48,  v55,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_111;
        }

        if (v56)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_multipath_subflow_counts";
          _os_log_impl(&dword_181A5C000, v48, v55, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v48 = (os_log_s *)(id)gLogObj;
        os_log_type_t v60 = v67[0];
        if (os_log_type_enabled(v48, v67[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_multipath_subflow_counts";
          _os_log_impl( &dword_181A5C000,  v48,  v60,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_18238CAE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

NWConcrete_nw_protocol_options *nw_webtransport_create_options()
{
  if (nw_protocol_copy_webtransport_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_webtransport_definition::onceToken, &__block_literal_global_60063);
  }
  return nw_protocol_create_options((void *)nw_protocol_copy_webtransport_definition::definition);
}

BOOL __nw_protocol_copy_webtransport_definition_block_invoke()
{
  if (nw_protocol_webtransport_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_webtransport_identifier::onceToken, &__block_literal_global_33473);
  }
  unsigned int v0 = nw_protocol_definition_create_with_identifier((__int128 *)nw_protocol_webtransport_identifier::protocol_identifier);
  id v1 = (void *)nw_protocol_copy_webtransport_definition::definition;
  nw_protocol_copy_webtransport_definition::nw_protocol_definition_t definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator( (void *)nw_protocol_copy_webtransport_definition::definition,  (uint64_t)nw_webtransport_allocate_options,  (uint64_t)nw_webtransport_copy_options,  (uint64_t)nw_webtransport_deallocate_options);
  nw_protocol_definition_set_options_comparator( (void *)nw_protocol_copy_webtransport_definition::definition,  (uint64_t)nw_webtransport_compare_options);
  nw_protocol_definition_set_metadata_allocator( (void *)nw_protocol_copy_webtransport_definition::definition,  (uint64_t)nw_webtransport_allocate_stream_metadata,  (uint64_t)nw_webtransport_deallocate_stream_metadata);
  nw_protocol_definition_set_metadata_comparator( (void *)nw_protocol_copy_webtransport_definition::definition,  (uint64_t)nw_webtransport_compare_stream_metadata);
  return nw_protocol_register_handle( (uint64_t)nw_protocol_webtransport_identifier::protocol_identifier,  (void *)nw_protocol_copy_webtransport_definition::definition,  (uint64_t)nw_protocol_webtransport_create,  (uint64_t)nw_protocol_webtransport_accept);
}

BOOL nw_webtransport_allocate_options(void *a1)
{
  id v1 = a1;
  uint64_t v2 = calloc(1uLL, 0x14uLL);
  if (v2) {
    goto LABEL_2;
  }
  __nwlog_obj();
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  int v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    void *v2 = 0LL;
    v2[1] = 0LL;
    *((_DWORD *)v2 + 4) = 0;

    return (BOOL)v2;
  }

  __break(1u);
  return result;
}

void sub_18238CD70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_webtransport_copy_options(void *a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (a2)
  {
    uint64_t options = nw_webtransport_allocate_options(v3);
    *(_OWORD *)uint64_t options = *(_OWORD *)a2;
    char v6 = *(_BYTE *)(options + 16) & 0xFE | *(_BYTE *)(a2 + 16) & 1;
    *(_BYTE *)(options + 16) = v6;
    *(_BYTE *)(options + 16) = v6 & 0xFD | *(_BYTE *)(a2 + 16) & 2;
    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  int v19 = "nw_webtransport_copy_options";
  id v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v19 = "nw_webtransport_copy_options";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null existing_handle", buf, 0xCu);
      }
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)int buf = 136446466;
          int v19 = "nw_webtransport_copy_options";
          __int16 v20 = 2082;
          id v21 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v14)
      {
        *(_DWORD *)int buf = 136446210;
        int v19 = "nw_webtransport_copy_options";
        _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null existing_handle, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v19 = "nw_webtransport_copy_options";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null existing_handle, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18238D04C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_webtransport_deallocate_options(int a1, void *a2)
{
  if (a2) {
    free(a2);
  }
}

uint64_t nw_webtransport_compare_options(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v7 = a1;
  if (!a2)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    __int16 v26 = "nw_webtransport_compare_options";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v26 = "nw_webtransport_compare_options";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null handle1", buf, 0xCu);
      }

      goto LABEL_43;
    }

    if (!v23)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v26 = "nw_webtransport_compare_options";
        _os_log_impl( &dword_181A5C000,  v12,  v21,  "%{public}s called with null handle1, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_43;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v17 = type;
    BOOL v18 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v26 = "nw_webtransport_compare_options";
        _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null handle1, no backtrace", buf, 0xCu);
      }

      goto LABEL_43;
    }

    if (v18)
    {
      *(_DWORD *)int buf = 136446466;
      __int16 v26 = "nw_webtransport_compare_options";
      __int16 v27 = 2082;
      BOOL v28 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null handle1, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_31;
  }

  if (!a3)
  {
    __nwlog_obj();
    BOOL v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    __int16 v26 = "nw_webtransport_compare_options";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v26 = "nw_webtransport_compare_options";
        _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null handle2", buf, 0xCu);
      }

BOOL nw_webtransport_allocate_stream_metadata(void *a1)
{
  id v1 = a1;
  uint64_t v2 = calloc(1uLL, 0x18uLL);
  if (v2) {
    goto LABEL_2;
  }
  __nwlog_obj();
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  int v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    void *v2 = 0LL;
    v2[1] = 0LL;
    v2[2] = 0LL;

    return (BOOL)v2;
  }

  __break(1u);
  return result;
}

void sub_18238D6A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_webtransport_deallocate_stream_metadata(int a1, void *a2)
{
  if (a2) {
    free(a2);
  }
}

uint64_t nw_webtransport_compare_stream_metadata(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v7 = a1;
  if (!a2)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    __int16 v26 = "nw_webtransport_compare_stream_metadata";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v26 = "nw_webtransport_compare_stream_metadata";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null handle1", buf, 0xCu);
      }

      goto LABEL_41;
    }

    if (!v23)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v26 = "nw_webtransport_compare_stream_metadata";
        _os_log_impl( &dword_181A5C000,  v12,  v21,  "%{public}s called with null handle1, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_41;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v17 = type;
    BOOL v18 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v26 = "nw_webtransport_compare_stream_metadata";
        _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null handle1, no backtrace", buf, 0xCu);
      }

      goto LABEL_41;
    }

    if (v18)
    {
      *(_DWORD *)int buf = 136446466;
      __int16 v26 = "nw_webtransport_compare_stream_metadata";
      __int16 v27 = 2082;
      BOOL v28 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null handle1, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_29;
  }

  if (!a3)
  {
    __nwlog_obj();
    BOOL v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    __int16 v26 = "nw_webtransport_compare_stream_metadata";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v26 = "nw_webtransport_compare_stream_metadata";
        _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null handle2", buf, 0xCu);
      }

id nw_protocol_copy_webtransport_definition()
{
  if (nw_protocol_copy_webtransport_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_webtransport_definition::onceToken, &__block_literal_global_60063);
  }
  return (id)nw_protocol_copy_webtransport_definition::definition;
}

BOOL nw_protocol_options_is_webtransport(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = (id *)v1;
    id v4 = v3[1];

    if (nw_protocol_copy_webtransport_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_webtransport_definition::onceToken, &__block_literal_global_60063);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v4,  nw_protocol_copy_webtransport_definition::definition);

    goto LABEL_5;
  }

  __nwlog_obj();
  id v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  BOOL v18 = "nw_protocol_options_is_webtransport";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v18 = "nw_protocol_options_is_webtransport";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v18 = "nw_protocol_options_is_webtransport";
          __int16 v19 = 2082;
          BOOL v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v13)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v18 = "nw_protocol_options_is_webtransport";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v18 = "nw_protocol_options_is_webtransport";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18238DED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_webtransport_options_get_is_unidirectional(void *a1)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if (nw_protocol_options_is_webtransport(v1))
    {
      *(void *)int buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      v18[0] = MEMORY[0x1895F87A8];
      v18[1] = 3221225472LL;
      v18[2] = __nw_webtransport_options_get_is_unidirectional_block_invoke;
      v18[3] = &unk_189BC60A8;
      void v18[4] = buf;
      nw_protocol_options_access_handle(v2, v18);
      BOOL v3 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
      _Block_object_dispose(buf, 8);
      goto LABEL_4;
    }

    __nwlog_obj();
    id v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_unidirectional";
    char v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v6, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_unidirectional";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s protocol options are not webtransport", buf, 0xCu);
        }

void sub_18238E3F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_webtransport_options_get_is_unidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_BYTE *)(a2 + 16) & 1;
  return 1LL;
}

void nw_webtransport_options_set_is_unidirectional(void *a1, char a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    int v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v24 = "nw_webtransport_options_set_is_unidirectional";
    char v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v24 = "nw_webtransport_options_set_is_unidirectional";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v24 = "nw_webtransport_options_set_is_unidirectional";
          __int16 v25 = 2082;
          __int16 v26 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }

      if (v13)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v24 = "nw_webtransport_options_set_is_unidirectional";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v24 = "nw_webtransport_options_set_is_unidirectional";
        _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_18238E91C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_webtransport_options_set_is_unidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a2 + 16) & 0xFE | *(_BYTE *)(a1 + 32);
  return 1LL;
}

BOOL nw_webtransport_options_get_is_datagram(void *a1)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if (nw_protocol_options_is_webtransport(v1))
    {
      *(void *)int buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      v18[0] = MEMORY[0x1895F87A8];
      v18[1] = 3221225472LL;
      v18[2] = __nw_webtransport_options_get_is_datagram_block_invoke;
      v18[3] = &unk_189BC60A8;
      void v18[4] = buf;
      nw_protocol_options_access_handle(v2, v18);
      BOOL v3 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
      _Block_object_dispose(buf, 8);
      goto LABEL_4;
    }

    __nwlog_obj();
    id v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_datagram";
    char v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v6, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_datagram";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s protocol options are not webtransport", buf, 0xCu);
        }

void sub_18238EE50( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_webtransport_options_get_is_datagram_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(_BYTE *)(a2 + 16) & 2) != 0;
  return 1LL;
}

void nw_webtransport_options_set_is_datagram(void *a1, char a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    int v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v24 = "nw_webtransport_options_set_is_datagram";
    char v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v24 = "nw_webtransport_options_set_is_datagram";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v24 = "nw_webtransport_options_set_is_datagram";
          __int16 v25 = 2082;
          __int16 v26 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }

      if (v13)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v24 = "nw_webtransport_options_set_is_datagram";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v24 = "nw_webtransport_options_set_is_datagram";
        _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_18238F37C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_webtransport_options_set_is_datagram_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a2 + 16) & 0xFD | (2 * *(_BYTE *)(a1 + 32));
  return 1LL;
}

id *nw_webtransport_create_metadata()
{
  if (nw_protocol_copy_webtransport_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_webtransport_definition::onceToken, &__block_literal_global_60063);
  }
  return nw_protocol_metadata_create_singleton((void *)nw_protocol_copy_webtransport_definition::definition);
}

BOOL nw_protocol_metadata_is_webtransport(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = (id *)v1;
    id v4 = v3[1];

    if (nw_protocol_copy_webtransport_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_webtransport_definition::onceToken, &__block_literal_global_60063);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v4,  nw_protocol_copy_webtransport_definition::definition);

    goto LABEL_5;
  }

  __nwlog_obj();
  id v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v18 = "nw_protocol_metadata_is_webtransport";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v18 = "nw_protocol_metadata_is_webtransport";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v18 = "nw_protocol_metadata_is_webtransport";
          __int16 v19 = 2082;
          char v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v13)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v18 = "nw_protocol_metadata_is_webtransport";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v18 = "nw_protocol_metadata_is_webtransport";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18238F6CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_webtransport_metadata_get_stream_id(void *a1)
{
  v24[2] = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if (nw_protocol_metadata_is_webtransport(v1))
    {
      *(void *)int buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      v20[0] = MEMORY[0x1895F87A8];
      v20[1] = 3221225472LL;
      v20[2] = __nw_webtransport_metadata_get_stream_id_block_invoke;
      v20[3] = &unk_189BC60A8;
      v20[4] = buf;
      uint64_t v3 = v2[4];
      if (v3)
      {
        __nw_webtransport_metadata_get_stream_id_block_invoke((uint64_t)v20, v3);
        id v4 = (uint64_t *)(*(void *)&buf[8] + 24LL);
      }

      else
      {
        id v4 = v24;
      }

      uint64_t v5 = *v4;
      _Block_object_dispose(buf, 8);
      goto LABEL_7;
    }

    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_stream_id";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_stream_id";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s protocol metadata is not webtransport", buf, 0xCu);
        }

void sub_18238FBF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_webtransport_metadata_get_stream_id_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(void *)(a2 + 8);
  return 1LL;
}

void nw_webtransport_metadata_set_stream_id(void *a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    char v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v24 = "nw_webtransport_metadata_set_stream_id";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v24 = "nw_webtransport_metadata_set_stream_id";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v24 = "nw_webtransport_metadata_set_stream_id";
          __int16 v25 = 2082;
          __int16 v26 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v7) {
          goto LABEL_5;
        }
LABEL_40:
        free(v7);
        goto LABEL_5;
      }

      if (v14)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v24 = "nw_webtransport_metadata_set_stream_id";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v24 = "nw_webtransport_metadata_set_stream_id";
        _os_log_impl( &dword_181A5C000,  v8,  v18,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_182390108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_webtransport_metadata_set_stream_id_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + _Block_object_dispose(va, 8) = *(void *)(a1 + 32);
  return 1LL;
}

BOOL nw_webtransport_metadata_get_is_unidirectional(void *a1)
{
  v24[2] = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if (nw_protocol_metadata_is_webtransport(v1))
    {
      *(void *)int buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      v20[0] = MEMORY[0x1895F87A8];
      v20[1] = 3221225472LL;
      v20[2] = __nw_webtransport_metadata_get_is_unidirectional_block_invoke;
      v20[3] = &unk_189BC60A8;
      v20[4] = buf;
      uint64_t v3 = v2[4];
      if (v3)
      {
        __nw_webtransport_metadata_get_is_unidirectional_block_invoke((uint64_t)v20, v3);
        id v4 = (unsigned __int8 *)(*(void *)&buf[8] + 24LL);
      }

      else
      {
        id v4 = (unsigned __int8 *)v24;
      }

      BOOL v5 = *v4 != 0;
      _Block_object_dispose(buf, 8);
      goto LABEL_7;
    }

    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_unidirectional";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_unidirectional";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s protocol metadata is not webtransport", buf, 0xCu);
        }

void sub_182390648(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_webtransport_metadata_get_is_unidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_BYTE *)(a2 + 16) & 1;
  return 1LL;
}

void nw_webtransport_metadata_set_is_unidirectional(void *a1, char a2)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    char v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    __int16 v25 = "nw_webtransport_metadata_set_is_unidirectional";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v25 = "nw_webtransport_metadata_set_is_unidirectional";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v25 = "nw_webtransport_metadata_set_is_unidirectional";
          __int16 v26 = 2082;
          uint64_t v27 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v7) {
          goto LABEL_5;
        }
LABEL_40:
        free(v7);
        goto LABEL_5;
      }

      if (v14)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v25 = "nw_webtransport_metadata_set_is_unidirectional";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v25 = "nw_webtransport_metadata_set_is_unidirectional";
        _os_log_impl( &dword_181A5C000,  v8,  v18,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_182390B60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_webtransport_metadata_set_is_unidirectional_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a2 + 16) & 0xFE | *(_BYTE *)(a1 + 32);
  return 1LL;
}

BOOL nw_webtransport_metadata_get_is_datagram(void *a1)
{
  v24[2] = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if (nw_protocol_metadata_is_webtransport(v1))
    {
      *(void *)int buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      v20[0] = MEMORY[0x1895F87A8];
      v20[1] = 3221225472LL;
      v20[2] = __nw_webtransport_metadata_get_is_datagram_block_invoke;
      v20[3] = &unk_189BC60A8;
      void v20[4] = buf;
      uint64_t v3 = v2[4];
      if (v3)
      {
        __nw_webtransport_metadata_get_is_datagram_block_invoke((uint64_t)v20, v3);
        id v4 = (unsigned __int8 *)(*(void *)&buf[8] + 24LL);
      }

      else
      {
        id v4 = (unsigned __int8 *)v24;
      }

      BOOL v5 = *v4 != 0;
      _Block_object_dispose(buf, 8);
      goto LABEL_7;
    }

    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_datagram";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_datagram";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s protocol metadata is not webtransport", buf, 0xCu);
        }

void sub_1823910AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_webtransport_metadata_get_is_datagram_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(_BYTE *)(a2 + 16) & 2) != 0;
  return 1LL;
}

void nw_webtransport_metadata_set_is_datagram(void *a1, char a2)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    char v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    __int16 v25 = "nw_webtransport_metadata_set_is_datagram";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v25 = "nw_webtransport_metadata_set_is_datagram";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v25 = "nw_webtransport_metadata_set_is_datagram";
          __int16 v26 = 2082;
          uint64_t v27 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v7) {
          goto LABEL_5;
        }
LABEL_40:
        free(v7);
        goto LABEL_5;
      }

      if (v14)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v25 = "nw_webtransport_metadata_set_is_datagram";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v25 = "nw_webtransport_metadata_set_is_datagram";
        _os_log_impl( &dword_181A5C000,  v8,  v18,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_1823915C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_webtransport_metadata_set_is_datagram_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a2 + 16) & 0xFD | (2 * *(_BYTE *)(a1 + 32));
  return 1LL;
}

BOOL nw_webtransport_metadata_get_is_peer_initiated(void *a1)
{
  v24[2] = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if (nw_protocol_metadata_is_webtransport(v1))
    {
      *(void *)int buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      v20[0] = MEMORY[0x1895F87A8];
      v20[1] = 3221225472LL;
      v20[2] = __nw_webtransport_metadata_get_is_peer_initiated_block_invoke;
      v20[3] = &unk_189BC60A8;
      void v20[4] = buf;
      uint64_t v3 = v2[4];
      if (v3)
      {
        __nw_webtransport_metadata_get_is_peer_initiated_block_invoke((uint64_t)v20, v3);
        id v4 = (unsigned __int8 *)(*(void *)&buf[8] + 24LL);
      }

      else
      {
        id v4 = (unsigned __int8 *)v24;
      }

      BOOL v5 = *v4 != 0;
      _Block_object_dispose(buf, 8);
      goto LABEL_7;
    }

    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_peer_initiated";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_peer_initiated";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s protocol metadata is not webtransport", buf, 0xCu);
        }

void sub_182391B10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_webtransport_metadata_get_is_peer_initiated_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(_BYTE *)(a2 + 16) & 4) != 0;
  return 1LL;
}

void nw_webtransport_metadata_set_is_peer_initiated(void *a1, char a2)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    char v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    __int16 v25 = "nw_webtransport_metadata_set_is_peer_initiated";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v25 = "nw_webtransport_metadata_set_is_peer_initiated";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v25 = "nw_webtransport_metadata_set_is_peer_initiated";
          __int16 v26 = 2082;
          uint64_t v27 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v7) {
          goto LABEL_5;
        }
LABEL_40:
        free(v7);
        goto LABEL_5;
      }

      if (v14)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v25 = "nw_webtransport_metadata_set_is_peer_initiated";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v25 = "nw_webtransport_metadata_set_is_peer_initiated";
        _os_log_impl( &dword_181A5C000,  v8,  v18,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_182392028(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_webtransport_metadata_set_is_peer_initiated_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a2 + 16) & 0xFB | (4 * *(_BYTE *)(a1 + 32));
  return 1LL;
}

BOOL nw_protocol_http3_create(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v58 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http3_create";
    uint64_t v28 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v52 = 0;
    if (__nwlog_fault(v28, &type, &v52))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v29 = (os_log_s *)__nwlog_obj();
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v29, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http3_create";
          BOOL v31 = "%{public}s called with null identifier";
LABEL_73:
          _os_log_impl(&dword_181A5C000, v29, v30, v31, buf, 0xCu);
        }
      }

      else if (v52)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v29 = (os_log_s *)__nwlog_obj();
        os_log_type_t v30 = type;
        BOOL v41 = os_log_type_enabled(v29, type);
        if (backtrace_string)
        {
          if (v41)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_http3_create";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&_BYTE buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v29,  v30,  "%{public}s called with null identifier, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_74;
        }

        if (v41)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http3_create";
          BOOL v31 = "%{public}s called with null identifier, no backtrace";
          goto LABEL_73;
        }
      }

      else
      {
        uint64_t v29 = (os_log_s *)__nwlog_obj();
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v29, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http3_create";
          BOOL v31 = "%{public}s called with null identifier, backtrace limit exceeded";
          goto LABEL_73;
        }
      }
    }

uint64_t __nw_protocol_http3_create_block_invoke(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0LL;
  }
  return *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
}

void __nw_protocol_http3_create_block_invoke_2(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    if (((*(unsigned __int16 *)(v1 + 1373) | (*(unsigned __int8 *)(v1 + 1375) << 16)) & 0x400000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v2 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
      {
        int v3 = *(_DWORD *)(v1 + 1280);
        *(_DWORD *)int buf = 136446978;
        os_log_type_t v16 = "nw_http3_cancel";
        __int16 v17 = 2082;
        id v18 = (char *)(v1 + 1289);
        __int16 v19 = 2080;
        char v20 = " ";
        __int16 v21 = 1024;
        int v22 = v3;
        _os_log_impl(&dword_181A5C000, v2, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%s<i%u> cancelling", buf, 0x26u);
      }
    }

    id v4 = *(nw_protocol **)(v1 + 880);
    if (v4)
    {
      do
      {
        output_handler = v4[8].output_handler;
        nw_protocol_http3_stream_error(v4, (nw_protocol *)v1, 89);
        id v4 = output_handler;
      }

      while (output_handler);
    }

    char v6 = *(void **)(v1 + 1240);
    if (v6) {
      nw_quic_connection_close_with_error(v6, 256LL);
    }
    nw_http3_async_close_connection_if_no_stream(v1);
    return;
  }

  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_http3_cancel";
  id v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v7, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v16 = "nw_http3_cancel";
      int v10 = "%{public}s called with null http3";
      goto LABEL_24;
    }

    if (!v13)
    {
      uint64_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v16 = "nw_http3_cancel";
      int v10 = "%{public}s called with null http3, backtrace limit exceeded";
      goto LABEL_24;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v8 = (os_log_s *)__nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v12 = os_log_type_enabled(v8, type);
    if (backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v16 = "nw_http3_cancel";
        __int16 v17 = 2082;
        id v18 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null http3, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_25;
    }

    if (v12)
    {
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v16 = "nw_http3_cancel";
      int v10 = "%{public}s called with null http3, no backtrace";
LABEL_24:
      _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
    }
  }

void __nw_protocol_http3_create_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    id v5 = nw_quic_connection_copy_sec_protocol_metadata(*(void **)(a2 + 1240));
    if (v5)
    {
      char v6 = v5;
      if (!*(void *)(a2 + 1192))
      {
        uint64_t v11 = sec_protocol_metadata_copy_authenticator();
        *(void *)(a2 + 1192) = v11;
        if (v11)
        {
          uint64_t v12 = *(void *)(a2 + 1040);
          char v13 = *(void **)(a2 + 1256);
          *(void *)int buf = MEMORY[0x1895F87A8];
          *(void *)&buf[8] = 0x40000000LL;
          *(void *)&buf[16] = ___ZL34nw_protocol_http3_send_certificatePvP12sec_identity_block_invoke;
          uint64_t v29 = (const char *)&unk_189BC3DA8;
          uint64_t v30 = v12;
          nw_queue_context_async(v13, buf);
        }

        else if (((*(unsigned __int16 *)(a2 + 1373) | (*(unsigned __int8 *)(a2 + 1375) << 16)) & 0x400000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v16 = (os_log_s *)gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            int v17 = *(_DWORD *)(a2 + 1280);
            *(_DWORD *)int buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_protocol_http3_send_certificate";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&_BYTE buf[14] = a2 + 1289;
            *(_WORD *)&uint8_t buf[22] = 2080;
            uint64_t v29 = " ";
            LOWORD(v30) = 1024;
            *(_DWORD *)((char *)&v30 + 2) = v17;
            HIWORD(v30) = 2112;
            uint64_t v31 = a3;
            _os_log_impl( &dword_181A5C000,  v16,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> Failed to generate authenticator for identity %@",  buf,  0x30u);
          }
        }

        goto LABEL_25;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_send_certificate";
      id v7 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v26 = 0;
      if (__nwlog_fault(v7, &type, &v26))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v8 = (os_log_s *)gLogObj;
          os_log_type_t v9 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_23;
          }
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http3_send_certificate";
          int v10 = "%{public}s HTTP3 got request to send certificate while one is already being sent, ignoring";
          goto LABEL_22;
        }

        if (!v26)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v8 = (os_log_s *)gLogObj;
          os_log_type_t v9 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_23;
          }
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http3_send_certificate";
          int v10 = "%{public}s HTTP3 got request to send certificate while one is already being sent, ignoring, backtrace limit exceeded";
          goto LABEL_22;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v8 = (os_log_s *)gLogObj;
        os_log_type_t v9 = type;
        BOOL v15 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_http3_send_certificate";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&_BYTE buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s HTTP3 got request to send certificate while one is already being sent, ignoring, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }

        if (v15)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http3_send_certificate";
          int v10 = "%{public}s HTTP3 got request to send certificate while one is already being sent, ignoring, no backtrace";
LABEL_22:
          _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
        }
      }

void ___ZL34nw_protocol_http3_send_certificatePvP12sec_identity_block_invoke(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if (v1)
  {
    if (*(_DWORD *)(v1 + 1272) == 3 && !*(void *)(v1 + 912))
    {
      *(_DWORD *)(v1 + 1272) = 2;
      nw_http3_control_stream_process_output(v1, v2);
    }

    else
    {
      *(_BYTE *)(v1 + 1375) = (*(unsigned __int16 *)(v1 + 1373) | (*(unsigned __int8 *)(v1 + 1375) << 16) | 0x40000u) >> 16;
    }
  }

void nw_http3_control_stream_process_output(uint64_t a1, uint64_t a2)
{
  buf[9] = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1 + 168;
  id v4 = (unsigned __int16 *)(a1 + 1373);
  while (2)
  {
    uint64_t v95 = 0LL;
    int v96 = &v95;
    uint64_t v97 = 0x3802000000LL;
    char v98 = __Block_byref_object_copy__60284;
    os_log_type_t v99 = __Block_byref_object_dispose__60285;
    v100[0] = 0LL;
    v100[1] = v100;
    switch(*(_DWORD *)(a1 + 1272))
    {
      case 0:
        memset((char *)&buf[4] + 6, 0, 25);
        memset((char *)buf + 6, 0, 32);
        LOBYTE(buf[0]) = 1;
        *(_WORD *)((char *)buf + 1) = -129;
        BYTE3(buf[0]) = 7;
        WORD2(buf[0]) = 25664;
        if ((*v4 & 2) != 0)
        {
          uint64_t v21 = 30274LL;
          if ((*v4 & 4) != 0)
          {
            size_t v22 = 2LL;
          }

          else
          {
            uint64_t v21 = 51LL;
            size_t v22 = 1LL;
          }

          __srCC_SHA256_CTX c = v21;
          memcpy((char *)buf + 6, &__src, v22);
          *((_BYTE *)buf + v22 + 6) = 1;
          uint64_t v5 = v22 + 7;
        }

        else
        {
          uint64_t v5 = 6LL;
        }

        uint32_t v23 = arc4random();
        if (v23)
        {
          if (v23 > 0x20F)
          {
            if (v23 > 0x210841F)
            {
              __srCC_SHA256_CTX c = bswap64((31LL * v23 + 33) | 0xC000000000000000LL);
              size_t v24 = 8LL;
            }

            else
            {
              __srCC_SHA256_CTX c = bswap32((31 * v23 + 33) | 0x80000000);
              size_t v24 = 4LL;
            }
          }

          else
          {
            __srCC_SHA256_CTX c = bswap32((31 * v23 + 33) | 0x4000) >> 16;
            size_t v24 = 2LL;
          }
        }

        else
        {
          __srCC_SHA256_CTX c = 33LL;
          size_t v24 = 1LL;
        }

        memcpy((char *)buf + v5, &__src, v24);
        uint32_t v25 = arc4random();
        if (v25 > 0x3F)
        {
          if (v25 >> 14)
          {
            if (v25 >> 30)
            {
              __srCC_SHA256_CTX c = bswap64(v25 | 0xC000000000000000LL);
              size_t v26 = 8LL;
            }

            else
            {
              __srCC_SHA256_CTX c = bswap32(v25 | 0x80000000);
              size_t v26 = 4LL;
            }
          }

          else
          {
            __srCC_SHA256_CTX c = bswap32(v25 | 0x4000) >> 16;
            size_t v26 = 2LL;
          }
        }

        else
        {
          __srCC_SHA256_CTX c = v25;
          size_t v26 = 1LL;
        }

        size_t v27 = v24 + v5;
        memcpy((char *)buf + v27, &__src, v26);
        size_t v28 = v26 + v27;
        *(void *)os_log_type_t type = 0LL;
        os_log_type_t v91 = type;
        uint64_t v92 = 0x2000000000LL;
        uint64_t v93 = 0LL;
        v83[0] = MEMORY[0x1895F87A8];
        v83[1] = 0x40000000LL;
        __int16 v84 = (uint64_t (*)(void *))___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_30;
        unsigned int v85 = &unk_189BC3E10;
        __int16 v86 = type;
        size_t v87 = v28;
        __int16 v88 = buf;
        uint64_t v89 = a1;
        uint64_t v29 = v96[5];
        do
        {
          if (!v29) {
            break;
          }
          uint64_t v30 = *(void *)(v29 + 32);
          char v31 = v84(v83);
          uint64_t v29 = v30;
        }

        while ((v31 & 1) != 0);
        v82[0] = MEMORY[0x1895F87A8];
        v82[1] = 0x40000000LL;
        v82[2] = ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_2;
        v82[3] = &unk_189BC3EE0;
        v82[5] = a1;
        v82[6] = v28;
        v82[4] = &v95;
        _Block_object_dispose(type, 8);
        BOOL v14 = v82;
        goto LABEL_63;
      case 1:
        unint64_t v6 = *(void *)(a1 + 984);
        if (v6 >= 0x40)
        {
          if (v6 >= 0x4000)
          {
            if (v6 >> 30)
            {
              if (v6 >> 62)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
                LODWORD(buf[0]) = 136446466;
                *(void *)((char *)buf + 4) = "_http_vle_encode";
                WORD2(buf[1]) = 2048;
                *(void *)((char *)&buf[1] + 6) = v6;
                uint64_t v32 = (void *)_os_log_send_and_compose_impl();
                if (__nwlog_abort((uint64_t)v32))
                {
                  __break(1u);
                  return;
                }

                free(v32);
                unsigned int v7 = 0;
                uint64_t v8 = (_DWORD **)(v96 + 5);
              }

              else
              {
                unsigned int v7 = 8;
                uint64_t v8 = v100;
              }
            }

            else
            {
              unsigned int v7 = 4;
              uint64_t v8 = v100;
            }
          }

          else
          {
            unsigned int v7 = 2;
            uint64_t v8 = v100;
          }
        }

        else
        {
          unsigned int v7 = 1;
          uint64_t v8 = v100;
        }

        buf[0] = 0LL;
        buf[1] = buf;
        buf[2] = 0x2000000000LL;
        buf[3] = 0LL;
        v76[0] = MEMORY[0x1895F87A8];
        v76[1] = 0x40000000LL;
        char v77 = ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_46;
        char v78 = &unk_189BC3F08;
        char v81 = v7;
        char v79 = buf;
        uint64_t v80 = a1;
        uint64_t v33 = v96[5];
        do
        {
          if (!v33) {
            break;
          }
          uint64_t v34 = *(void *)(v33 + 32);
          char v35 = ((uint64_t (*)(void *))v77)(v76);
          uint64_t v33 = v34;
        }

        while ((v35 & 1) != 0);
        v74[0] = MEMORY[0x1895F87A8];
        v74[1] = 0x40000000LL;
        v74[2] = ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_2_48;
        void v74[3] = &unk_189BC3F30;
        char v75 = v7;
        v74[4] = &v95;
        v74[5] = a1;
        _Block_object_dispose(buf, 8);
        BOOL v14 = v74;
        goto LABEL_63;
      case 2:
        os_log_type_t v9 = *(dispatch_data_s **)(a1 + 1192);
        if (v9)
        {
          unsigned int size = dispatch_data_get_size(v9);
          buf[0] = 0LL;
          buf[1] = buf;
          buf[2] = 0x2000000000LL;
          buf[3] = 0LL;
          v68[0] = MEMORY[0x1895F87A8];
          v68[1] = 0x40000000LL;
          uint64_t v69 = ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_50;
          uint64_t v70 = &unk_189BC3F58;
          unsigned int v73 = size;
          os_log_type_t v71 = buf;
          uint64_t v72 = a1;
          uint64_t v11 = v96[5];
          do
          {
            if (!v11) {
              break;
            }
            uint64_t v12 = *(void *)(v11 + 32);
            char v13 = ((uint64_t (*)(void *))v69)(v68);
            uint64_t v11 = v12;
          }

          while ((v13 & 1) != 0);
          v66[0] = MEMORY[0x1895F87A8];
          v66[1] = 0x40000000LL;
          v66[2] = ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_2_52;
          v66[3] = &unk_189BC3F80;
          unsigned int v67 = size;
          v66[4] = &v95;
          v66[5] = a1;
          _Block_object_dispose(buf, 8);
          BOOL v14 = v66;
LABEL_63:
          int v36 = *v4 | (*((unsigned __int8 *)v4 + 2) << 16);
          if ((v36 & 0x40000) != 0)
          {
            *(_DWORD *)(a1 + 1272) = 2;
            unsigned int v37 = v36 & 0xFFFBFFFF;
          }

          else
          {
            if ((v36 & 0x20000) == 0)
            {
              *(_DWORD *)(a1 + 1272) = 3;
              goto LABEL_3;
            }

            *(_DWORD *)(a1 + 1272) = 1;
            unsigned int v37 = v36 & 0xFFFDFFFF;
          }

          *id v4 = v37;
          *((_BYTE *)v4 + 2) = BYTE2(v37);
LABEL_3:
          ((void (*)(void *, uint64_t))v14[2])(v14, a2);
          _Block_object_dispose(&v95, 8);
          continue;
        }

        __nwlog_obj();
        LODWORD(buf[0]) = 136446210;
        *(void *)((char *)buf + 4) = "nw_http3_control_stream_process_output";
        BOOL v54 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(__src) = 0;
        if (type[0] != OS_LOG_TYPE_FAULT)
        {
          if ((_BYTE)__src)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            uint64_t v55 = (os_log_s *)__nwlog_obj();
            os_log_type_t v56 = type[0];
            BOOL v59 = os_log_type_enabled(v55, type[0]);
            if (backtrace_string)
            {
              if (v59)
              {
                LODWORD(buf[0]) = 136446466;
                *(void *)((char *)buf + 4) = "nw_http3_control_stream_process_output";
                WORD2(buf[1]) = 2082;
                *(void *)((char *)&buf[1] + 6) = backtrace_string;
                _os_log_impl( &dword_181A5C000,  v55,  v56,  "%{public}s called with null http3->authenticator_data, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x16u);
              }

              free(backtrace_string);
              goto LABEL_124;
            }

            if (!v59) {
              goto LABEL_124;
            }
            LODWORD(buf[0]) = 136446210;
            *(void *)((char *)buf + 4) = "nw_http3_control_stream_process_output";
            __int128 v57 = "%{public}s called with null http3->authenticator_data, no backtrace";
          }

          else
          {
            uint64_t v55 = (os_log_s *)__nwlog_obj();
            os_log_type_t v56 = type[0];
            if (!os_log_type_enabled(v55, type[0])) {
              goto LABEL_124;
            }
            LODWORD(buf[0]) = 136446210;
            *(void *)((char *)buf + 4) = "nw_http3_control_stream_process_output";
            __int128 v57 = "%{public}s called with null http3->authenticator_data, backtrace limit exceeded";
          }

__n128 __Block_byref_object_copy__60284(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t nw_http3_framer_get_output_frames_for_single_http3_frame( uint64_t a1, unint64_t a2, unsigned int a3, _DWORD **a4)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v34 = "nw_http3_framer_get_output_frames_for_single_http3_frame";
    uint32_t v25 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = type;
      if (!os_log_type_enabled(v26, type)) {
        goto LABEL_60;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v34 = "nw_http3_framer_get_output_frames_for_single_http3_frame";
      size_t v28 = "%{public}s called with null http3_framer";
    }

    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = type;
      BOOL v30 = os_log_type_enabled(v26, type);
      if (backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v34 = "nw_http3_framer_get_output_frames_for_single_http3_frame";
          __int16 v35 = 2082;
          int v36 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v26,  v27,  "%{public}s called with null http3_framer, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_60;
      }

      if (!v30)
      {
LABEL_60:
        if (v25) {
          free(v25);
        }
        return 0LL;
      }

      *(_DWORD *)int buf = 136446210;
      uint64_t v34 = "nw_http3_framer_get_output_frames_for_single_http3_frame";
      size_t v28 = "%{public}s called with null http3_framer, no backtrace";
    }

    else
    {
      size_t v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = type;
      if (!os_log_type_enabled(v26, type)) {
        goto LABEL_60;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v34 = "nw_http3_framer_get_output_frames_for_single_http3_frame";
      size_t v28 = "%{public}s called with null http3_framer, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v26, v27, v28, buf, 0xCu);
    goto LABEL_60;
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (!v5
    || (uint64_t v6 = *(void *)(v5 + 24)) == 0
    || (unsigned int v7 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, _DWORD **))(v6 + 88)) == 0LL)
  {
    size_t v24 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v34 = "nw_http3_framer_get_output_frames_for_single_http3_frame";
      __int16 v35 = 2048;
      int v36 = (const char *)v5;
      _os_log_impl( &dword_181A5C000,  v24,  OS_LOG_TYPE_ERROR,  "%{public}s Output handler (%p)'s get_output_frames callback is not properly set",  buf,  0x16u);
    }

    return 0LL;
  }

  if (a2 >> 30) {
    int v9 = 8;
  }
  else {
    int v9 = 4;
  }
  if (a2 >= 0x4000) {
    int v10 = v9;
  }
  else {
    int v10 = 2;
  }
  if (a2 >= 0x40) {
    int v11 = v10;
  }
  else {
    int v11 = 1;
  }
  if (a3 >> 30) {
    int v12 = 8;
  }
  else {
    int v12 = 4;
  }
  if (a3 < 0x4000) {
    int v12 = 2;
  }
  if (a3 >= 0x40) {
    int v13 = v12;
  }
  else {
    int v13 = 1;
  }
  uint64_t v14 = (v13 + v11);
  uint64_t v15 = a3 + v14;
  if (!__CFADD__(a3, (_DWORD)v14)) {
    goto LABEL_41;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)int buf = 136446978;
  uint64_t v34 = "nw_http3_framer_get_output_frames_for_single_http3_frame";
  __int16 v35 = 2082;
  int v36 = "bytes";
  __int16 v37 = 2048;
  uint64_t v38 = v14;
  __int16 v39 = 2048;
  uint64_t v40 = v15;
  int v16 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v31 = 0;
  if (__nwlog_fault(v16, &type, &v31))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned int v17 = (os_log_s *)gLogObj;
      os_log_type_t v18 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)int buf = 136446978;
        uint64_t v34 = "nw_http3_framer_get_output_frames_for_single_http3_frame";
        __int16 v35 = 2082;
        int v36 = "bytes";
        __int16 v37 = 2048;
        uint64_t v38 = v14;
        __int16 v39 = 2048;
        uint64_t v40 = v15;
        uint64_t v19 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_37:
        _os_log_impl(&dword_181A5C000, v17, v18, v19, buf, 0x2Au);
      }
    }

    else if (v31)
    {
      os_log_type_t v20 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned int v17 = (os_log_s *)gLogObj;
      os_log_type_t v18 = type;
      BOOL v21 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v20)
      {
        if (v21)
        {
          *(_DWORD *)int buf = 136447234;
          uint64_t v34 = "nw_http3_framer_get_output_frames_for_single_http3_frame";
          __int16 v35 = 2082;
          int v36 = "bytes";
          __int16 v37 = 2048;
          uint64_t v38 = v14;
          __int16 v39 = 2048;
          uint64_t v40 = v15;
          __int16 v41 = 2082;
          char v42 = v20;
          _os_log_impl( &dword_181A5C000,  v17,  v18,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
        }

        free(v20);
        goto LABEL_38;
      }

      if (v21)
      {
        *(_DWORD *)int buf = 136446978;
        uint64_t v34 = "nw_http3_framer_get_output_frames_for_single_http3_frame";
        __int16 v35 = 2082;
        int v36 = "bytes";
        __int16 v37 = 2048;
        uint64_t v38 = v14;
        __int16 v39 = 2048;
        uint64_t v40 = v15;
        uint64_t v19 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
        goto LABEL_37;
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned int v17 = (os_log_s *)gLogObj;
      os_log_type_t v18 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)int buf = 136446978;
        uint64_t v34 = "nw_http3_framer_get_output_frames_for_single_http3_frame";
        __int16 v35 = 2082;
        int v36 = "bytes";
        __int16 v37 = 2048;
        uint64_t v38 = v14;
        __int16 v39 = 2048;
        uint64_t v40 = v15;
        uint64_t v19 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
        goto LABEL_37;
      }
    }
  }

uint64_t ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_30( void *a1, uint64_t a2)
{
  LODWORD(__n) = 0;
  id v4 = (void *)nw_frame_unclaimed_bytes(a2, &__n);
  uint64_t v5 = *(void *)(*(void *)(a1[4] + 8LL) + 24LL);
  unint64_t v6 = a1[5] - v5;
  unsigned int v7 = (const void *)(a1[6] + v5);
  if (v6 >= __n)
  {
    memcpy(v4, v7, __n);
  }

  else
  {
    memcpy(v4, v7, a1[5] - v5);
    nw_frame_claim(a2, v8, 0, __n - v6);
  }

  *(void *)(*(void *)(a1[4] + 8LL) + 24LL) += __n;
  return 1LL;
}

void ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_2(uint64_t a1)
{
  uint64_t v61 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(v2 + 200);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 24);
    if (v4)
    {
      if (*(void *)(v4 + 96))
      {
        unsigned int v5 = *(_DWORD *)(a1 + 48);
        unint64_t v6 = (uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
        if (v5 >> 30) {
          int v7 = 9;
        }
        else {
          int v7 = 5;
        }
        if (v5 >= 0x4000) {
          int v8 = v7;
        }
        else {
          int v8 = 3;
        }
        if (v5 >= 0x40) {
          unsigned int v9 = v8;
        }
        else {
          unsigned int v9 = 2;
        }
        nw_http3_framer_write_http3_frame_header(v2 + 168, 4uLL, v5, v9, *v6);
        (*(void (**)(uint64_t, uint64_t *))(*(void *)(v3 + 24) + 96LL))(v3, v6);
        uint64_t v2 = *(void *)(a1 + 40);
      }
    }
  }

  uint64_t v10 = *(void *)(v2 + 880);
  if (v10)
  {
    char v11 = 0;
    uint64_t v12 = MEMORY[0x1895F87A8];
    while (1)
    {
      uint64_t v13 = v10;
      uint64_t v10 = *(void *)(v10 + 544);
      if ((*(_WORD *)(v13 + 736) & 0x80) == 0) {
        goto LABEL_18;
      }
      if ((*(_WORD *)(v13 + 736) & 0x800) == 0)
      {
        if (gLogDatapath)
        {
          size_t v28 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
          {
            int v29 = *(_DWORD *)(*(void *)(v13 + 336) + 1280LL);
            uint64_t v30 = *(void *)(v13 + 240);
            *(_DWORD *)int buf = 136447490;
            id v50 = "nw_http3_control_stream_process_output_block_invoke_2";
            __int16 v51 = 2082;
            os_log_type_t v52 = (const char *)(v13 + 636);
            __int16 v53 = 2080;
            BOOL v54 = " ";
            __int16 v55 = 1024;
            int v56 = v29;
            __int16 v57 = 2048;
            uint64_t v58 = v30;
            __int16 v59 = 2048;
            uint64_t v60 = v30;
            _os_log_impl( &dword_181A5C000,  v28,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> Marking stream %llu connected after sending SETTINGS",  buf,  0x3Au);
          }
        }
      }

      *(_BYTE *)(v13 + 738) |= 8u;
      uint64_t v14 = *(void **)(v13 + 392);
      v48[0] = v12;
      v48[1] = 0x40000000LL;
      v48[2] = ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_32;
      v48[3] = &__block_descriptor_tmp_44_60326;
      v48[4] = v13;
      nw_http_transaction_metadata_set_event_handler(v14, v48);
      *(_WORD *)(v13 + 736) |= 0x40u;
      nw_http3_signal_output_pending(*(void *)(a1 + 40), 1);
      uint64_t v15 = *(void *)(v13 + 48);
      if (!v15) {
        break;
      }
      uint64_t v16 = *(void *)(v15 + 24);
      if (!v16) {
        break;
      }
      unsigned int v17 = *(void (**)(uint64_t, uint64_t))(v16 + 40);
      if (!v17) {
        break;
      }
      v17(v15, v13);
LABEL_17:
      char v11 = 1;
LABEL_18:
      if (!v10)
      {
        if ((v11 & 1) != 0) {
          nw_http3_signal_output_pending(*(void *)(a1 + 40), 0);
        }
        return;
      }
    }

    __nwlog_obj();
    uint64_t v18 = *(void *)(v13 + 48);
    if (v18)
    {
      uint64_t v19 = *(const char **)(v18 + 16);
      if (!v19) {
        uint64_t v19 = "invalid";
      }
    }

    else
    {
      uint64_t v19 = "invalid";
    }

    *(_DWORD *)int buf = 136446466;
    id v50 = "nw_http3_control_stream_process_output_block_invoke_2";
    __int16 v51 = 2082;
    os_log_type_t v52 = v19;
    os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (__nwlog_fault(v20, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v43 = (os_log_s *)__nwlog_obj();
        os_log_type_t log = type;
        if (!os_log_type_enabled(v43, type)) {
          goto LABEL_66;
        }
        uint64_t v21 = *(void *)(v13 + 48);
        if (v21)
        {
          uint64_t v22 = *(const char **)(v21 + 16);
          if (!v22) {
            uint64_t v22 = "invalid";
          }
        }

        else
        {
          uint64_t v22 = "invalid";
        }

        __int16 v35 = v43;
        os_log_type_t v36 = log;
        *(_DWORD *)int buf = 136446466;
        id v50 = "nw_http3_control_stream_process_output_block_invoke";
        __int16 v51 = 2082;
        os_log_type_t v52 = v22;
        __int16 v37 = "%{public}s protocol %{public}s has invalid connected callback";
        goto LABEL_65;
      }

      if (!v46)
      {
        uint64_t v45 = (os_log_s *)__nwlog_obj();
        os_log_type_t logb = type;
        if (!os_log_type_enabled(v45, type)) {
          goto LABEL_66;
        }
        uint64_t v31 = *(void *)(v13 + 48);
        if (v31)
        {
          uint64_t v32 = *(const char **)(v31 + 16);
          if (!v32) {
            uint64_t v32 = "invalid";
          }
        }

        else
        {
          uint64_t v32 = "invalid";
        }

        *(_DWORD *)int buf = 136446466;
        id v50 = "nw_http3_control_stream_process_output_block_invoke";
        __int16 v51 = 2082;
        os_log_type_t v52 = v32;
        __int16 v35 = v45;
        os_log_type_t v36 = logb;
        __int16 v37 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
        goto LABEL_65;
      }

      BOOL v44 = v20;
      backtrace_string = __nw_create_backtrace_string();
      loga = (os_log_s *)__nwlog_obj();
      os_log_type_t v39 = type;
      BOOL v24 = os_log_type_enabled(loga, type);
      if (backtrace_string)
      {
        uint32_t v25 = (char *)backtrace_string;
        os_log_type_t v20 = v44;
        if (v24)
        {
          uint64_t v26 = *(void *)(v13 + 48);
          if (v26)
          {
            os_log_type_t v27 = *(const char **)(v26 + 16);
            if (!v27) {
              os_log_type_t v27 = "invalid";
            }
          }

          else
          {
            os_log_type_t v27 = "invalid";
          }

          *(_DWORD *)int buf = 136446722;
          id v50 = "nw_http3_control_stream_process_output_block_invoke";
          __int16 v51 = 2082;
          os_log_type_t v52 = v27;
          __int16 v53 = 2082;
          BOOL v54 = v25;
          uint64_t v38 = v25;
          _os_log_impl( &dword_181A5C000,  loga,  v39,  "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s",  buf,  0x20u);
          uint32_t v25 = v38;
          os_log_type_t v20 = v44;
        }

        free(v25);
        goto LABEL_66;
      }

      os_log_type_t v20 = v44;
      if (v24)
      {
        uint64_t v33 = *(void *)(v13 + 48);
        if (v33)
        {
          uint64_t v34 = *(const char **)(v33 + 16);
          if (!v34) {
            uint64_t v34 = "invalid";
          }
        }

        else
        {
          uint64_t v34 = "invalid";
        }

        *(_DWORD *)int buf = 136446466;
        id v50 = "nw_http3_control_stream_process_output_block_invoke";
        __int16 v51 = 2082;
        os_log_type_t v52 = v34;
        __int16 v35 = loga;
        os_log_type_t v36 = v39;
        __int16 v37 = "%{public}s protocol %{public}s has invalid connected callback, no backtrace";
LABEL_65:
        _os_log_impl(&dword_181A5C000, v35, v36, v37, buf, 0x16u);
      }
    }

uint64_t ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_46( uint64_t a1, uint64_t a2)
{
  LODWORD(__n) = 0;
  uint64_t v4 = (void *)nw_frame_unclaimed_bytes(a2, &__n);
  unsigned int v5 = (const void *)(a1 + 48);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 48);
  unint64_t v7 = v6 - *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (v7 >= __n)
  {
    memcpy(v4, v5, __n);
  }

  else
  {
    memcpy(v4, v5, v6 - *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
    nw_frame_claim(a2, v8, 0, __n - v7);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += __n;
  return 1LL;
}

uint64_t ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_2_48(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  uint64_t v2 = *(void *)(v1 + 200);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 24);
    if (v3)
    {
      if (*(void *)(v3 + 96))
      {
        uint64_t v4 = v1 + 168;
        unsigned int v5 = *(unsigned __int8 *)(result + 48);
        uint64_t v6 = (uint64_t *)(*(void *)(*(void *)(result + 32) + 8LL) + 40LL);
        if (v5 < 0x40) {
          unsigned int v7 = 2;
        }
        else {
          unsigned int v7 = 3;
        }
        nw_http3_framer_write_http3_frame_header(v4, 7uLL, v5, v7, *v6);
        return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)(v2 + 24) + 96LL))(v2, v6);
      }
    }
  }

  return result;
}

uint64_t ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_50( uint64_t a1, uint64_t a2)
{
  unsigned int v9 = 0;
  uint64_t v4 = nw_frame_unclaimed_bytes(a2, &v9);
  unint64_t v5 = *(unsigned int *)(a1 + 48) - *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  uint64_t v6 = *(dispatch_data_s **)(*(void *)(a1 + 40) + 1192LL);
  if (v5 >= v9)
  {
    uint64_t v21 = 0LL;
    uint64_t v22 = &v21;
    uint64_t v23 = 0x2000000000LL;
    uint64_t v24 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = &v17;
    uint64_t v19 = 0x2000000000LL;
    uint64_t v20 = v4;
    if (v6)
    {
      uint64_t applier = MEMORY[0x1895F87A8];
      uint64_t v11 = 0x40000000LL;
      uint64_t v12 = __nw_dispatch_data_copyout_block_invoke;
      uint64_t v13 = &unk_189BBF598;
      uint64_t v15 = &v17;
      unint64_t v16 = v9;
      uint64_t v14 = &v21;
      dispatch_data_apply(v6, &applier);
    }

    _Block_object_dispose(&v17, 8);
    _Block_object_dispose(&v21, 8);
  }

  else
  {
    uint64_t v21 = 0LL;
    uint64_t v22 = &v21;
    uint64_t v23 = 0x2000000000LL;
    uint64_t v24 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = &v17;
    uint64_t v19 = 0x2000000000LL;
    uint64_t v20 = v4;
    if (v6)
    {
      uint64_t applier = MEMORY[0x1895F87A8];
      uint64_t v11 = 0x40000000LL;
      uint64_t v12 = __nw_dispatch_data_copyout_block_invoke;
      uint64_t v13 = &unk_189BBF598;
      uint64_t v15 = &v17;
      unint64_t v16 = v5;
      uint64_t v14 = &v21;
      dispatch_data_apply(v6, &applier);
    }

    _Block_object_dispose(&v17, 8);
    _Block_object_dispose(&v21, 8);
    nw_frame_claim(a2, v7, 0, v9 - v5);
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += v9;
  return 1LL;
}

void ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_2_52(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(v2 + 200);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 24);
    if (v4)
    {
      if (*(void *)(v4 + 96))
      {
        unsigned int v5 = *(_DWORD *)(a1 + 48);
        uint64_t v6 = (uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
        if (v5 >> 30) {
          int v7 = 16;
        }
        else {
          int v7 = 12;
        }
        if (v5 >= 0x4000) {
          int v8 = v7;
        }
        else {
          int v8 = 10;
        }
        if (v5 >= 0x40) {
          unsigned int v9 = v8;
        }
        else {
          unsigned int v9 = 9;
        }
        nw_http3_framer_write_http3_frame_header(v2 + 168, 0xFF8E1EB5uLL, v5, v9, *v6);
        (*(void (**)(uint64_t, uint64_t *))(*(void *)(v3 + 24) + 96LL))(v3, v6);
        uint64_t v2 = *(void *)(a1 + 40);
      }
    }
  }

  uint64_t v10 = *(void **)(v2 + 1192);
  if (v10)
  {
    os_release(v10);
    *(void *)(*(void *)(a1 + 40) + 1192LL) = 0LL;
  }

BOOL nw_http3_framer_write_http3_frame_header( uint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v61 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v56 = "nw_http3_framer_write_http3_frame_header";
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(__src) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type[0];
      if (!os_log_type_enabled(v18, type[0])) {
        goto LABEL_54;
      }
      *(_DWORD *)int buf = 136446210;
      int v56 = "nw_http3_framer_write_http3_frame_header";
      uint64_t v20 = "%{public}s called with null http3_framer";
    }

    else if ((_BYTE)__src)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type[0];
      BOOL v47 = os_log_type_enabled(v18, type[0]);
      if (backtrace_string)
      {
        if (v47)
        {
          *(_DWORD *)int buf = 136446466;
          int v56 = "nw_http3_framer_write_http3_frame_header";
          __int16 v57 = 2082;
          *(void *)uint64_t v58 = backtrace_string;
          uint64_t v23 = "%{public}s called with null http3_framer, dumping backtrace:%{public}s";
          goto LABEL_29;
        }

void ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_32( uint64_t a1, void *a2, int a3)
{
  uint64_t v79 = *MEMORY[0x1895F89C0];
  switch(a3)
  {
    case 0:
      id outbound_message = nw_http_transaction_metadata_get_outbound_message(a2);
      id v6 = nw_http_metadata_copy_request(outbound_message);
      id v7 = nw_http_metadata_copy_response(outbound_message);
      if (v6)
      {
        v66[0] = MEMORY[0x1895F87A8];
        v66[1] = 0x40000000LL;
        v66[2] = ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_2_33;
        v66[3] = &__block_descriptor_tmp_35_60340;
        v66[4] = *(void *)(a1 + 32);
        id v8 = v6;
        uint64_t v9 = v66;
        _nw_http_request_access_method((uint64_t)v8, v9);
      }

      if (!v7) {
        goto LABEL_40;
      }
      id v10 = v7;
      int status_code = _nw_http_response_get_status_code();

      uint64_t v12 = *(void *)(a1 + 32);
      if (v12 && (*(_WORD *)(v12 + 736) & 0x800) != 0) {
        goto LABEL_39;
      }
      if (__nwlog_http_log::onceToken != -1) {
        dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
      }
      unsigned int v13 = (os_log_s *)ghttpLogObj;
      if (!os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO)) {
        goto LABEL_39;
      }
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = (const char *)(v14 + 636);
      unsigned int v16 = "";
      BOOL v17 = v14 == 0;
      if (!v14) {
        uint64_t v15 = "";
      }
      int v18 = *(_DWORD *)(*(void *)(v14 + 336) + 1280LL);
      uint64_t v19 = *(void *)(v14 + 240);
      if (!v17) {
        unsigned int v16 = " ";
      }
      *(_DWORD *)int buf = 136447490;
      id v68 = "nw_http3_control_stream_process_output_block_invoke";
      __int16 v69 = 2082;
      uint64_t v70 = v15;
      __int16 v71 = 2080;
      uint64_t v72 = v16;
      __int16 v73 = 1024;
      int v74 = v18;
      __int16 v75 = 2048;
      uint64_t v76 = v19;
      __int16 v77 = 1024;
      LODWORD(v7_Block_object_dispose(va, 8) = status_code;
      uint64_t v20 = "%{public}s %{public}s%s<i%u:s%llu> sending response header {status=%hu}";
      goto LABEL_38;
    case 1:
      outbound_body_unsigned int size = nw_http_transaction_metadata_get_outbound_body_size(a2);
      uint64_t v22 = *(void *)(a1 + 32);
      if (v22 && (*(_WORD *)(v22 + 736) & 0x800) != 0) {
        return;
      }
      if (__nwlog_http_log::onceToken != -1) {
        dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
      }
      uint64_t v23 = (os_log_s *)ghttpLogObj;
      if (!os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO)) {
        return;
      }
      uint64_t v24 = *(void *)(a1 + 32);
      BOOL v25 = (const char *)(v24 + 636);
      uint64_t v26 = "";
      BOOL v27 = v24 == 0;
      if (!v24) {
        BOOL v25 = "";
      }
      int v28 = *(_DWORD *)(*(void *)(v24 + 336) + 1280LL);
      uint64_t v29 = *(void *)(v24 + 240);
      if (!v27) {
        uint64_t v26 = " ";
      }
      *(_DWORD *)int buf = 136447490;
      id v68 = "nw_http3_control_stream_process_output_block_invoke";
      __int16 v69 = 2082;
      uint64_t v70 = v25;
      __int16 v71 = 2080;
      uint64_t v72 = v26;
      __int16 v73 = 1024;
      int v74 = v28;
      __int16 v75 = 2048;
      uint64_t v76 = v29;
      __int16 v77 = 2048;
      uint64_t v78 = outbound_body_size;
      unsigned int v30 = "%{public}s %{public}s%s<i%u:s%llu> finished sending {body_bytes=%llu}";
      goto LABEL_54;
    case 2:
      id outbound_message = nw_http_transaction_metadata_get_inbound_message(a2);
      id v6 = nw_http_metadata_copy_request(outbound_message);
      id v31 = nw_http_metadata_copy_response(outbound_message);
      if (v6)
      {
        v65[0] = MEMORY[0x1895F87A8];
        v65[1] = 0x40000000LL;
        v65[2] = ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_36;
        v65[3] = &__block_descriptor_tmp_37_60343;
        void v65[4] = *(void *)(a1 + 32);
        id v32 = v6;
        uint64_t v33 = v65;
        _nw_http_request_access_method((uint64_t)v32, v33);
      }

      if (v31)
      {
        id v10 = v31;
        int v34 = _nw_http_response_get_status_code();

        uint64_t v35 = *(void *)(a1 + 32);
        if (!v35 || (*(_WORD *)(v35 + 736) & 0x800) == 0)
        {
          if (__nwlog_http_log::onceToken != -1) {
            dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
          }
          unsigned int v13 = (os_log_s *)ghttpLogObj;
          if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
          {
            uint64_t v36 = *(void *)(a1 + 32);
            __int16 v37 = (const char *)(v36 + 636);
            uint64_t v38 = "";
            BOOL v39 = v36 == 0;
            if (!v36) {
              __int16 v37 = "";
            }
            int v40 = *(_DWORD *)(*(void *)(v36 + 336) + 1280LL);
            uint64_t v41 = *(void *)(v36 + 240);
            if (!v39) {
              uint64_t v38 = " ";
            }
            *(_DWORD *)int buf = 136447490;
            id v68 = "nw_http3_control_stream_process_output_block_invoke";
            __int16 v69 = 2082;
            uint64_t v70 = v37;
            __int16 v71 = 2080;
            uint64_t v72 = v38;
            __int16 v73 = 1024;
            int v74 = v40;
            __int16 v75 = 2048;
            uint64_t v76 = v41;
            __int16 v77 = 1024;
            LODWORD(v7_Block_object_dispose(va, 8) = v34;
            uint64_t v20 = "%{public}s %{public}s%s<i%u:s%llu> receiving response header {status=%hu}";
LABEL_38:
            _os_log_impl(&dword_181A5C000, v13, OS_LOG_TYPE_INFO, v20, buf, 0x36u);
          }
        }

void nw_http3_signal_output_pending(uint64_t a1, int a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    int v4 = *(unsigned __int16 *)(a1 + 1373);
    int v5 = v4 | (*(unsigned __int8 *)(a1 + 1375) << 16);
    if (((((v4 & 0x80) == 0) ^ a2) & 1) == 0)
    {
      if (a2) {
        __int16 v6 = 128;
      }
      else {
        __int16 v6 = 0;
      }
      *(_BYTE *)(a1 + 1375) = (v5 & 0xFFFFFF7F) >> 16;
      *(_WORD *)(a1 + 1373) = v5 & 0xFF7F | v6;
      if ((v5 & 0x400000) == 0)
      {
        if (gLogDatapath)
        {
          unsigned int v16 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
          {
            int v17 = *(_DWORD *)(a1 + 1280);
            int v18 = "no longer ";
            *(_DWORD *)int buf = 136447234;
            uint64_t v22 = "nw_http3_signal_output_pending";
            __int16 v23 = 2082;
            if (a2) {
              int v18 = "";
            }
            uint64_t v24 = (char *)(a1 + 1289);
            __int16 v25 = 2080;
            uint64_t v26 = " ";
            __int16 v27 = 1024;
            int v28 = v17;
            __int16 v29 = 2082;
            unsigned int v30 = v18;
            _os_log_impl( &dword_181A5C000,  v16,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> signalling output %{public}spending",  buf,  0x30u);
          }
        }
      }

      uint64_t v7 = *(void *)(a1 + 32);
      buf[0] = a2;
      if (v7)
      {
        uint64_t v8 = *(void *)(v7 + 24);
        if (v8)
        {
          uint64_t v9 = *(void (**)(void))(v8 + 160);
          if (v9) {
            v9();
          }
        }
      }
    }

    return;
  }

  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v22 = "nw_http3_signal_output_pending";
  id v10 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v10, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_31;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v22 = "nw_http3_signal_output_pending";
      unsigned int v13 = "%{public}s called with null http3";
      goto LABEL_30;
    }

    if (!v19)
    {
      uint64_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_31;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v22 = "nw_http3_signal_output_pending";
      unsigned int v13 = "%{public}s called with null http3, backtrace limit exceeded";
      goto LABEL_30;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v15 = os_log_type_enabled(v11, type);
    if (backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v22 = "nw_http3_signal_output_pending";
        __int16 v23 = 2082;
        uint64_t v24 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s called with null http3, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_31;
    }

    if (v15)
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v22 = "nw_http3_signal_output_pending";
      unsigned int v13 = "%{public}s called with null http3, no backtrace";
LABEL_30:
      _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
    }
  }

void ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_2_33( uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4 || (*(_WORD *)(v4 + 736) & 0x800) == 0)
  {
    if (__nwlog_http_log::onceToken != -1) {
      dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
    }
    int v5 = (os_log_s *)ghttpLogObj;
    if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = (const char *)(v6 + 636);
      uint64_t v8 = "";
      BOOL v9 = v6 == 0;
      if (!v6) {
        uint64_t v7 = "";
      }
      int v10 = *(_DWORD *)(*(void *)(v6 + 336) + 1280LL);
      uint64_t v11 = *(void *)(v6 + 240);
      if (!v9) {
        uint64_t v8 = " ";
      }
      int v12 = 136447490;
      unsigned int v13 = "nw_http3_control_stream_process_output_block_invoke_2";
      __int16 v14 = 2082;
      BOOL v15 = v7;
      __int16 v16 = 2080;
      int v17 = v8;
      __int16 v18 = 1024;
      int v19 = v10;
      __int16 v20 = 2048;
      uint64_t v21 = v11;
      __int16 v22 = 2082;
      uint64_t v23 = a2;
      _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:s%llu> sending request header {method=%{public}s}",  (uint8_t *)&v12,  0x3Au);
    }
  }

void ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_36( uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4 || (*(_WORD *)(v4 + 736) & 0x800) == 0)
  {
    if (__nwlog_http_log::onceToken != -1) {
      dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
    }
    int v5 = (os_log_s *)ghttpLogObj;
    if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = (const char *)(v6 + 636);
      uint64_t v8 = "";
      BOOL v9 = v6 == 0;
      if (!v6) {
        uint64_t v7 = "";
      }
      int v10 = *(_DWORD *)(*(void *)(v6 + 336) + 1280LL);
      uint64_t v11 = *(void *)(v6 + 240);
      if (!v9) {
        uint64_t v8 = " ";
      }
      int v12 = 136447490;
      unsigned int v13 = "nw_http3_control_stream_process_output_block_invoke";
      __int16 v14 = 2082;
      BOOL v15 = v7;
      __int16 v16 = 2080;
      int v17 = v8;
      __int16 v18 = 1024;
      int v19 = v10;
      __int16 v20 = 2048;
      uint64_t v21 = v11;
      __int16 v22 = 2082;
      uint64_t v23 = a2;
      _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:s%llu> receiving request header {method=%{public}s}",  (uint8_t *)&v12,  0x3Au);
    }
  }

void ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_38( uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v66 = *MEMORY[0x1895F89C0];
  int start_reason = nw_http_transaction_metadata_get_start_reason(*(void **)(a1 + 32));
  uint64_t start_time = nw_http_transaction_metadata_get_start_time(*(void **)(a1 + 32));
  uint64_t end_time = nw_http_transaction_metadata_get_end_time(*(void **)(a1 + 32));
  outbound_message_uint64_t start_time = nw_http_transaction_metadata_get_outbound_message_start_time(*(void **)(a1 + 32));
  outbound_message_uint64_t end_time = nw_http_transaction_metadata_get_outbound_message_end_time(*(void **)(a1 + 32));
  inbound_message_uint64_t start_time = nw_http_transaction_metadata_get_inbound_message_start_time(*(void **)(a1 + 32));
  inbound_message_uint64_t end_time = nw_http_transaction_metadata_get_inbound_message_end_time(*(void **)(a1 + 32));
  outbound_body_unsigned int size = nw_http_transaction_metadata_get_outbound_body_size(*(void **)(a1 + 32));
  inbound_body_unsigned int size = nw_http_transaction_metadata_get_inbound_body_size(*(void **)(a1 + 32));
  uint64_t v12 = *(void *)(a1 + 40);
  if (!v12 || (*(_WORD *)(v12 + 736) & 0x800) == 0)
  {
    if (__nwlog_http_log::onceToken != -1) {
      dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
    }
    unsigned int v13 = (os_log_s *)ghttpLogObj;
    if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 40);
      if (v14) {
        BOOL v15 = (const char *)(v14 + 636);
      }
      else {
        BOOL v15 = "";
      }
      if (v14) {
        __int16 v16 = " ";
      }
      else {
        __int16 v16 = "";
      }
      uint64_t v31 = v15;
      id v32 = v16;
      else {
        int v17 = off_189BC6838[start_reason - 1];
      }
      int v28 = v17;
      int v29 = *(_DWORD *)(*(void *)(v14 + 336) + 1280LL);
      uint64_t v30 = *(void *)(v14 + 240);
      int v18 = -1;
      if (start_time && end_time)
      {
        unint64_t v19 = nw_delta_nanos(start_time, end_time);
        if (v19 > 0xF423FFFFFFFFFLL) {
          int v18 = -1;
        }
        else {
          int v18 = v19 / 0xF4240;
        }
      }

      int v20 = -1;
      if (start_time && outbound_message_start_time)
      {
        unint64_t v21 = nw_delta_nanos(start_time, outbound_message_start_time);
        if (v21 > 0xF423FFFFFFFFFLL) {
          int v20 = -1;
        }
        else {
          int v20 = v21 / 0xF4240;
        }
      }

      int v22 = -1;
      if (outbound_message_start_time && outbound_message_end_time)
      {
        unint64_t v23 = nw_delta_nanos(outbound_message_start_time, outbound_message_end_time);
        if (v23 > 0xF423FFFFFFFFFLL) {
          int v22 = -1;
        }
        else {
          int v22 = v23 / 0xF4240;
        }
      }

      int v24 = -1;
      if (start_time && inbound_message_start_time)
      {
        unint64_t v25 = nw_delta_nanos(start_time, inbound_message_start_time);
        if (v25 > 0xF423FFFFFFFFFLL) {
          int v24 = -1;
        }
        else {
          int v24 = v25 / 0xF4240;
        }
      }

      LODWORD(v26) = -1;
      if (inbound_message_start_time && inbound_message_end_time)
      {
        unint64_t v27 = nw_delta_nanos(inbound_message_start_time, inbound_message_end_time);
        unint64_t v26 = v27 / 0xF4240;
        if (v27 > 0xF423FFFFFFFFFLL) {
          LODWORD(v26) = -1;
        }
      }

      *(_DWORD *)int buf = 136449794;
      __int16 v37 = "nw_http3_control_stream_process_output_block_invoke";
      __int16 v38 = 2082;
      BOOL v39 = v31;
      __int16 v40 = 2080;
      uint64_t v41 = v32;
      __int16 v42 = 1024;
      int v43 = v29;
      __int16 v44 = 2048;
      uint64_t v45 = v30;
      __int16 v46 = 2080;
      BOOL v47 = v28;
      __int16 v48 = 1024;
      int v49 = v18;
      __int16 v50 = 2082;
      uint64_t v51 = a2;
      __int16 v52 = 1024;
      int v53 = a3;
      __int16 v54 = 1024;
      int v55 = v20;
      __int16 v56 = 1024;
      int v57 = v22;
      __int16 v58 = 1024;
      int v59 = v24;
      __int16 v60 = 1024;
      int v61 = v26;
      __int16 v62 = 2048;
      uint64_t v63 = outbound_body_size;
      __int16 v64 = 2048;
      uint64_t v65 = inbound_body_size;
      _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s%s<i%u:s%llu> transaction summary {start_reason=%s, duration_ms=%d, request_method=%{ public}s, response_status=%hu, outbound_start_ms=%d, outbound_duration_ms=%d, inbound_start_ms=%d, inbound_dur ation_ms=%d, outbound_body_bytes=%llu, inbound_body_bytes=%llu}",  buf,  0x7Cu);
    }
  }

uint64_t ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_41( uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  a2,  *(unsigned __int16 *)(a1 + 40));
}

void nw_http3_framer_claim_http3_frame_header(unsigned int a1, _DWORD *a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  unsigned int v4 = nw_frame_unclaimed_length(a2);
  if (v4 < a1)
  {
    unsigned int v5 = v4;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)int buf = 136446722;
    unint64_t v19 = "nw_http3_framer_claim_http3_frame_header";
    __int16 v20 = 1024;
    unsigned int v21 = v5;
    __int16 v22 = 1024;
    unsigned int v23 = a1;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = (os_log_s *)gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)int buf = 136446722;
      unint64_t v19 = "nw_http3_framer_claim_http3_frame_header";
      __int16 v20 = 1024;
      unsigned int v21 = v5;
      __int16 v22 = 1024;
      unsigned int v23 = a1;
      BOOL v9 = "%{public}s Expected unclaimed_frame_length (%u) to be >= to length_to_claim (%u)";
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = (os_log_s *)gLogObj;
      os_log_type_t v8 = type;
      BOOL v15 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)int buf = 136446978;
          unint64_t v19 = "nw_http3_framer_claim_http3_frame_header";
          __int16 v20 = 1024;
          unsigned int v21 = v5;
          __int16 v22 = 1024;
          unsigned int v23 = a1;
          __int16 v24 = 2082;
          unint64_t v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s Expected unclaimed_frame_length (%u) to be >= to length_to_claim (%u), dumping backtrace:%{public}s",  buf,  0x22u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (!v15)
      {
LABEL_20:
        if (v6) {
          free(v6);
        }
        return;
      }

      *(_DWORD *)int buf = 136446722;
      unint64_t v19 = "nw_http3_framer_claim_http3_frame_header";
      __int16 v20 = 1024;
      unsigned int v21 = v5;
      __int16 v22 = 1024;
      unsigned int v23 = a1;
      BOOL v9 = "%{public}s Expected unclaimed_frame_length (%u) to be >= to length_to_claim (%u), no backtrace";
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = (os_log_s *)gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)int buf = 136446722;
      unint64_t v19 = "nw_http3_framer_claim_http3_frame_header";
      __int16 v20 = 1024;
      unsigned int v21 = v5;
      __int16 v22 = 1024;
      unsigned int v23 = a1;
      BOOL v9 = "%{public}s Expected unclaimed_frame_length (%u) to be >= to length_to_claim (%u), backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0x18u);
    goto LABEL_20;
  }

  if (nw_frame_uses_external_data((uint64_t)a2))
  {
    uint64_t v11 = (uint64_t)a2;
    int v12 = 0;
    int v13 = a1;
  }

  else
  {
    uint64_t v11 = (uint64_t)a2;
    int v12 = a1;
    int v13 = 0;
  }

  nw_frame_claim(v11, v10, v12, v13);
}

void nw_protocol_http3_stream_error(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v60 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v51 = "nw_protocol_http3_stream_error";
    unsigned int v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_94;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v51 = "nw_protocol_http3_stream_error";
      __int16 v24 = "%{public}s called with null protocol";
    }

    else if (v48)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v34 = os_log_type_enabled(v22, type);
      if (backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v51 = "nw_protocol_http3_stream_error";
          __int16 v52 = 2082;
          int v53 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_94:
        if (!v21) {
          return;
        }
        goto LABEL_95;
      }

      if (!v34) {
        goto LABEL_94;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v51 = "nw_protocol_http3_stream_error";
      __int16 v24 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      __int16 v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_94;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v51 = "nw_protocol_http3_stream_error";
      __int16 v24 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_93;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v51 = "nw_protocol_http3_stream_error";
    unsigned int v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v48)
      {
        __int16 v22 = (os_log_s *)__nwlog_obj();
        os_log_type_t v23 = type;
        if (!os_log_type_enabled(v22, type)) {
          goto LABEL_94;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v51 = "nw_protocol_http3_stream_error";
        __int16 v24 = "%{public}s called with null http3_stream, backtrace limit exceeded";
        goto LABEL_93;
      }

      uint64_t v35 = (char *)__nw_create_backtrace_string();
      __int16 v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v36 = os_log_type_enabled(v22, type);
      if (!v35)
      {
        if (!v36) {
          goto LABEL_94;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v51 = "nw_protocol_http3_stream_error";
        __int16 v24 = "%{public}s called with null http3_stream, no backtrace";
        goto LABEL_93;
      }

      if (v36)
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v51 = "nw_protocol_http3_stream_error";
        __int16 v52 = 2082;
        int v53 = v35;
        __int16 v37 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
LABEL_63:
        _os_log_impl(&dword_181A5C000, v22, v23, v37, buf, 0x16u);
      }

void nw_http3_async_close_connection_if_no_stream(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  uint64_t v2 = (_WORD *)(a1 + 1373);
  if (((*(unsigned __int16 *)(a1 + 1373) | (*(unsigned __int8 *)(a1 + 1375) << 16)) & 0x400000) == 0)
  {
    if (gLogDatapath)
    {
      unsigned int v5 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        int v6 = *(_DWORD *)(a1 + 1280);
        *(_DWORD *)int buf = 136446978;
        BOOL v9 = "nw_http3_async_close_connection_if_no_stream";
        __int16 v10 = 2082;
        uint64_t v11 = a1 + 1289;
        __int16 v12 = 2080;
        int v13 = " ";
        __int16 v14 = 1024;
        int v15 = v6;
        _os_log_impl(&dword_181A5C000, v5, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
      }
    }
  }

  *v2 |= 8u;
  nw_protocol_remove_instance(a1);
  if (!*(void *)(a1 + 880))
  {
    uint64_t v3 = *(void *)(a1 + 1040);
    unsigned int v4 = *(void **)(a1 + 1256);
    v7[0] = MEMORY[0x1895F87A8];
    v7[1] = 0x40000000LL;
    v7[2] = ___ZL44nw_http3_async_close_connection_if_no_streamP17nw_protocol_http3_block_invoke;
    v7[3] = &unk_189BC3D60;
    void v7[4] = v3;
    nw_queue_context_async(v4, v7);
  }

void ___ZL44nw_http3_async_close_connection_if_no_streamP17nw_protocol_http3_block_invoke(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if (v1) {
    nw_http3_connection_destroy(v1, v2);
  }
}

void nw_http3_connection_destroy(uint64_t a1, uint64_t a2)
{
  uint64_t v312 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v2 = a1;
    uint64_t v3 = (unsigned __int16 *)(a1 + 1373);
    unsigned int v4 = &qword_18C45F000;
    if (((*(unsigned __int16 *)(a1 + 1373) | (*(unsigned __int8 *)(a1 + 1375) << 16)) & 0x400000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned int v5 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        int v6 = *(_DWORD *)(v2 + 1280);
        *(_DWORD *)int buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_http3_connection_destroy";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&_BYTE buf[14] = v2 + 1289;
        *(_WORD *)&uint8_t buf[22] = 2080;
        os_log_type_t v309 = " ";
        LOWORD(v310) = 1024;
        *(_DWORD *)((char *)&v310 + 2) = v6;
        HIWORD(v310) = 2048;
        uint64_t v311 = v2;
        _os_log_impl(&dword_181A5C000, v5, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> destroying %p", buf, 0x30u);
      }
    }

    uint64_t v7 = *(void *)(v2 + 1264);
    if (v7)
    {
      nw_queue_cancel_source(v7, a2);
      *(void *)(v2 + 1264) = 0LL;
    }

    uint64_t v8 = *(void *)(v2 + 1088);
    if (v8) {
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v8 + 8LL))(v8, v2, 0LL);
    }
    nw_http_connection_metadata_closed(*(void **)(v2 + 1248));
    BOOL v9 = *(void **)(v2 + 1240);
    if (v9)
    {
      nw_quic_connection_close_with_error(v9, 256LL);
      __int16 v10 = *(void **)(v2 + 1240);
      if (v10)
      {
        os_release(v10);
        *(void *)(v2 + 1240) = 0LL;
      }
    }

    uint64_t v11 = *(void **)(v2 + 1248);
    if (v11)
    {
      os_release(v11);
      *(void *)(v2 + 124_Block_object_dispose(va, 8) = 0LL;
    }

    uint64_t v305 = v2;
    uint64_t v12 = *(void *)(v2 + 880);
    if (v12)
    {
      do
      {
        uint64_t v13 = *(void *)(v12 + 544);
        if (((*v3 | (*((unsigned __int8 *)v3 + 2) << 16)) & 0x400000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v14 = (os_log_s *)v4[131];
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            int v15 = *(_DWORD *)(v2 + 1280);
            *(_DWORD *)int buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_http3_connection_destroy";
            *(_WORD *)&void buf[12] = 2082;
            *(void *)&_BYTE buf[14] = v2 + 1289;
            *(_WORD *)&uint8_t buf[22] = 2080;
            os_log_type_t v309 = " ";
            LOWORD(v310) = 1024;
            *(_DWORD *)((char *)&v310 + 2) = v15;
            HIWORD(v310) = 2048;
            uint64_t v311 = v12;
            _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> should not have stream %p left, destroying anyways",  buf,  0x30u);
          }
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_connection_destroy";
        uint64_t v16 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v306 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v17 = (os_log_s *)v4[131];
          os_log_type_t v18 = type;
          if (os_log_type_enabled(v17, type))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http3_connection_destroy";
            unint64_t v19 = v17;
            os_log_type_t v20 = v18;
            unsigned int v21 = "%{public}s should not have streams left when destroying";
LABEL_33:
            _os_log_impl(&dword_181A5C000, v19, v20, v21, buf, 0xCu);
          }
        }

        else if (v306)
        {
          __int16 v22 = v4;
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v24 = (os_log_s *)v22[131];
          os_log_type_t v25 = type;
          BOOL v26 = os_log_type_enabled(v24, type);
          if (backtrace_string)
          {
            if (v26)
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http3_connection_destroy";
              *(_WORD *)&void buf[12] = 2082;
              *(void *)&_BYTE buf[14] = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v24,  v25,  "%{public}s should not have streams left when destroying, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(backtrace_string);
            unsigned int v4 = &qword_18C45F000;
            goto LABEL_34;
          }

          unsigned int v4 = &qword_18C45F000;
          if (v26)
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http3_connection_destroy";
            unint64_t v19 = v24;
            os_log_type_t v20 = v25;
            unsigned int v21 = "%{public}s should not have streams left when destroying, no backtrace";
            goto LABEL_33;
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v27 = (os_log_s *)v4[131];
          os_log_type_t v28 = type;
          if (os_log_type_enabled(v27, type))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http3_connection_destroy";
            unint64_t v19 = v27;
            os_log_type_t v20 = v28;
            unsigned int v21 = "%{public}s should not have streams left when destroying, backtrace limit exceeded";
            goto LABEL_33;
          }
        }

LABEL_392:
                  if (v157) {
                    free(v157);
                  }
                  uint64_t v2 = v305;
                  goto LABEL_86;
                }
              }
            }

            __nwlog_obj();
            uint64_t v144 = *(void *)(*(void *)(v2 + 1056) + 32LL);
            v145 = "invalid";
            if (v144)
            {
              os_log_type_t v146 = *(const char **)(v144 + 16);
              if (v146) {
                v145 = v146;
              }
            }

            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
            *(_WORD *)&void buf[12] = 2082;
            *(void *)&_BYTE buf[14] = v145;
            BOOL v147 = (char *)_os_log_send_and_compose_impl();
            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v306 = 0;
            if (__nwlog_fault(v147, &type, &v306))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                os_log_type_t v148 = (os_log_s *)__nwlog_obj();
                os_log_type_t v149 = type;
                if (os_log_type_enabled(v148, type))
                {
                  uint64_t v150 = *(void *)(*(void *)(v305 + 1056) + 32LL);
                  os_log_type_t v151 = "invalid";
                  if (v150)
                  {
                    os_log_type_t v152 = *(const char **)(v150 + 16);
                    if (v152) {
                      os_log_type_t v151 = v152;
                    }
                  }

                  *(_DWORD *)int buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                  *(_WORD *)&void buf[12] = 2082;
                  *(void *)&_BYTE buf[14] = v151;
                  os_log_type_t v153 = "%{public}s protocol %{public}s has invalid remove_input_handler callback";
LABEL_382:
                  _os_log_impl(&dword_181A5C000, v148, v149, v153, buf, 0x16u);
                }
              }

              else if (v306)
              {
                BOOL v206 = (char *)__nw_create_backtrace_string();
                os_log_type_t v148 = (os_log_s *)__nwlog_obj();
                os_log_type_t v149 = type;
                BOOL v207 = os_log_type_enabled(v148, type);
                if (v206)
                {
                  if (v207)
                  {
                    uint64_t v208 = *(void *)(*(void *)(v305 + 1056) + 32LL);
                    os_log_type_t v209 = "invalid";
                    if (v208)
                    {
                      os_log_type_t v210 = *(const char **)(v208 + 16);
                      if (v210) {
                        os_log_type_t v209 = v210;
                      }
                    }

                    *(_DWORD *)int buf = 136446722;
                    *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                    *(_WORD *)&void buf[12] = 2082;
                    *(void *)&_BYTE buf[14] = v209;
                    *(_WORD *)&uint8_t buf[22] = 2082;
                    os_log_type_t v309 = v206;
                    _os_log_impl( &dword_181A5C000,  v148,  v149,  "%{public}s protocol %{public}s has invalid remove_input_handler callback, dumping backtrace:%{public}s",  buf,  0x20u);
                  }

                  free(v206);
                  goto LABEL_383;
                }

                if (v207)
                {
                  uint64_t v261 = *(void *)(*(void *)(v305 + 1056) + 32LL);
                  v262 = "invalid";
                  if (v261)
                  {
                    os_log_type_t v263 = *(const char **)(v261 + 16);
                    if (v263) {
                      v262 = v263;
                    }
                  }

                  *(_DWORD *)int buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                  *(_WORD *)&void buf[12] = 2082;
                  *(void *)&_BYTE buf[14] = v262;
                  os_log_type_t v153 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, no backtrace";
                  goto LABEL_382;
                }
              }

              else
              {
                os_log_type_t v148 = (os_log_s *)__nwlog_obj();
                os_log_type_t v149 = type;
                if (os_log_type_enabled(v148, type))
                {
                  uint64_t v243 = *(void *)(*(void *)(v305 + 1056) + 32LL);
                  os_log_type_t v244 = "invalid";
                  if (v243)
                  {
                    BOOL v245 = *(const char **)(v243 + 16);
                    if (v245) {
                      os_log_type_t v244 = v245;
                    }
                  }

                  *(_DWORD *)int buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                  *(_WORD *)&void buf[12] = 2082;
                  *(void *)&_BYTE buf[14] = v244;
                  os_log_type_t v153 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, backtrace limit exceeded";
                  goto LABEL_382;
                }
              }
            }

  if (v178) {
    free(v178);
  }
  p_output_handler = v177;
  uint64_t v150 = v176;
  uint64_t v72 = v175;
LABEL_395:
  BOOL v188 = v169;
  os_log_type_t v189 = (nw_protocol_stack *)v188[19];

  v540 = (uint64_t)p_output_handler;
  uint64_t v190 = nw_protocol_stack_copy_internet_protocol(v189);
  BOOL v191 = nw_protocol_stack_copy_transport_protocol(v189);
  if (v189) {
    os_release(v189);
  }
  v192 = identifier_low;
  os_log_type_t v534 = v188;
  if (v190)
  {
    os_log_type_t v537 = v72;
    if (!nw_ip_options_get_calculate_receive_time(v190)
      || !setsockopt(*(_DWORD *)&a1[4].flow_id[12], 0xFFFF, 0x40000, &v551, 4u))
    {
      goto LABEL_430;
    }

    os_log_type_t v193 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    BOOL v194 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136446722;
      v553 = "nw_socket_set_common_sockopts";
      v554 = 2080;
      *(void *)v555 = (char *)a1 + 404;
      *(_WORD *)&v555[8] = 1024;
      *(_DWORD *)&v555[10] = v193;
      _os_log_impl( &dword_181A5C000,  v194,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt SO_TIMESTAMP_CONTINUOUS failed %{darwin.errno}d",  buf,  0x1Cu);
    }

    os_log_type_t v195 = (os_log_s *)__nwlog_obj();
    BOOL v196 = v195;
    if (v193 == 22)
    {
      if (os_log_type_enabled(v195, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136446466;
        v553 = "nw_socket_set_common_sockopts";
        v554 = 1024;
        *(_DWORD *)v555 = 22;
        _os_log_impl( &dword_181A5C000,  v196,  OS_LOG_TYPE_ERROR,  "%{public}s setsockopt SO_TIMESTAMP_CONTINUOUS failed %{darwin.errno}d",  buf,  0x12u);
      }

      goto LABEL_430;
    }

    os_log_type_t v197 = v150;
    *(_DWORD *)int buf = 136446466;
    v553 = "nw_socket_set_common_sockopts";
    v554 = 1024;
    *(_DWORD *)v555 = v193;
    int v198 = (char *)_os_log_send_and_compose_impl();
    v548[0] = OS_LOG_TYPE_ERROR;
    v547[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v198, v548, v547))
    {
      if (v548[0] == OS_LOG_TYPE_FAULT)
      {
        v199 = (os_log_s *)__nwlog_obj();
        os_log_type_t v200 = v548[0];
        if (os_log_type_enabled(v199, v548[0]))
        {
          *(_DWORD *)int buf = 136446466;
          v553 = "nw_socket_set_common_sockopts";
          v554 = 1024;
          *(_DWORD *)v555 = v193;
          os_log_type_t v201 = "%{public}s setsockopt SO_TIMESTAMP_CONTINUOUS failed %{darwin.errno}d";
LABEL_426:
          _os_log_impl(&dword_181A5C000, v199, v200, v201, buf, 0x12u);
        }
      }

      else if (v547[0])
      {
        BOOL v202 = (char *)__nw_create_backtrace_string();
        v199 = (os_log_s *)__nwlog_obj();
        os_log_type_t v200 = v548[0];
        uint64_t v203 = os_log_type_enabled(v199, v548[0]);
        if (v202)
        {
          if (v203)
          {
            *(_DWORD *)int buf = 136446722;
            v553 = "nw_socket_set_common_sockopts";
            v554 = 1024;
            *(_DWORD *)v555 = v193;
            *(_WORD *)&v555[4] = 2082;
            *(void *)&v555[6] = v202;
            _os_log_impl( &dword_181A5C000,  v199,  v200,  "%{public}s setsockopt SO_TIMESTAMP_CONTINUOUS failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
          }

          free(v202);
          v192 = identifier_low;
          goto LABEL_427;
        }

        v192 = identifier_low;
        if (v203)
        {
          *(_DWORD *)int buf = 136446466;
          v553 = "nw_socket_set_common_sockopts";
          v554 = 1024;
          *(_DWORD *)v555 = v193;
          os_log_type_t v201 = "%{public}s setsockopt SO_TIMESTAMP_CONTINUOUS failed %{darwin.errno}d, no backtrace";
          goto LABEL_426;
        }
      }

      else
      {
        v199 = (os_log_s *)__nwlog_obj();
        os_log_type_t v200 = v548[0];
        if (os_log_type_enabled(v199, v548[0]))
        {
          *(_DWORD *)int buf = 136446466;
          v553 = "nw_socket_set_common_sockopts";
          v554 = 1024;
          *(_DWORD *)v555 = v193;
          os_log_type_t v201 = "%{public}s setsockopt SO_TIMESTAMP_CONTINUOUS failed %{darwin.errno}d, backtrace limit exceeded";
          goto LABEL_426;
        }
      }
    }

LABEL_453:
          if (v279) {
            free(v279);
          }
          uint64_t v2 = v305;
          goto LABEL_52;
        }
      }
    }

    __nwlog_obj();
    uint64_t v184 = *(void *)(v2 + 32);
    v185 = "invalid";
    if (v184)
    {
      os_log_type_t v186 = *(const char **)(v184 + 16);
      if (v186) {
        v185 = v186;
      }
    }

    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
    *(_WORD *)&void buf[12] = 2082;
    *(void *)&_BYTE buf[14] = v185;
    v187 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v306 = 0;
    if (__nwlog_fault(v187, &type, &v306))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v188 = (os_log_s *)__nwlog_obj();
        os_log_type_t v189 = type;
        if (!os_log_type_enabled(v188, type)) {
          goto LABEL_421;
        }
        uint64_t v190 = *(void *)(v305 + 32);
        BOOL v191 = "invalid";
        if (v190)
        {
          v192 = *(const char **)(v190 + 16);
          if (v192) {
            BOOL v191 = v192;
          }
        }

        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&_BYTE buf[14] = v191;
        os_log_type_t v193 = "%{public}s protocol %{public}s has invalid remove_listen_handler callback";
LABEL_420:
        _os_log_impl(&dword_181A5C000, v188, v189, v193, buf, 0x16u);
        goto LABEL_421;
      }

      if (!v306)
      {
        BOOL v188 = (os_log_s *)__nwlog_obj();
        os_log_type_t v189 = type;
        if (!os_log_type_enabled(v188, type)) {
          goto LABEL_421;
        }
        uint64_t v255 = *(void *)(v305 + 32);
        v256 = "invalid";
        if (v255)
        {
          v257 = *(const char **)(v255 + 16);
          if (v257) {
            v256 = v257;
          }
        }

        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&_BYTE buf[14] = v256;
        os_log_type_t v193 = "%{public}s protocol %{public}s has invalid remove_listen_handler callback, backtrace limit exceeded";
        goto LABEL_420;
      }

      os_log_type_t v226 = (char *)__nw_create_backtrace_string();
      BOOL v188 = (os_log_s *)__nwlog_obj();
      os_log_type_t v189 = type;
      BOOL v227 = os_log_type_enabled(v188, type);
      if (!v226)
      {
        if (!v227) {
          goto LABEL_421;
        }
        uint64_t v273 = *(void *)(v305 + 32);
        v274 = "invalid";
        if (v273)
        {
          os_log_type_t v275 = *(const char **)(v273 + 16);
          if (v275) {
            v274 = v275;
          }
        }

        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&_BYTE buf[14] = v274;
        os_log_type_t v193 = "%{public}s protocol %{public}s has invalid remove_listen_handler callback, no backtrace";
        goto LABEL_420;
      }

      if (v227)
      {
        uint64_t v228 = *(void *)(v305 + 32);
        BOOL v229 = "invalid";
        if (v228)
        {
          os_log_type_t v230 = *(const char **)(v228 + 16);
          if (v230) {
            BOOL v229 = v230;
          }
        }

        *(_DWORD *)int buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&_BYTE buf[14] = v229;
        *(_WORD *)&uint8_t buf[22] = 2082;
        os_log_type_t v309 = v226;
        _os_log_impl( &dword_181A5C000,  v188,  v189,  "%{public}s protocol %{public}s has invalid remove_listen_handler callback, dumping backtrace:%{public}s",  buf,  0x20u);
      }

      free(v226);
    }

              if (v223) {
                free(v223);
              }
              __nwlog_obj();
              *(_DWORD *)os_log_type_t v323 = 136446210;
              *(void *)&v323[4] = "__nw_protocol_disconnected";
              uint64_t v261 = (char *)_os_log_send_and_compose_impl();
              v330[0] = 16;
              v321[0] = OS_LOG_TYPE_DEFAULT;
              if (v330[0] == 17)
              {
                v262 = (os_log_s *)__nwlog_obj();
                os_log_type_t v263 = v330[0];
                if (os_log_type_enabled(v262, (os_log_type_t)v330[0]))
                {
                  *(_DWORD *)os_log_type_t v323 = 136446210;
                  *(void *)&v323[4] = "__nw_protocol_disconnected";
                  uint64_t v264 = "%{public}s called with null protocol";
LABEL_475:
                  _os_log_impl(&dword_181A5C000, v262, v263, v264, v323, 0xCu);
                }
              }

              else if (v321[0])
              {
                v265 = (char *)__nw_create_backtrace_string();
                v262 = (os_log_s *)__nwlog_obj();
                os_log_type_t v263 = v330[0];
                v266 = os_log_type_enabled(v262, (os_log_type_t)v330[0]);
                if (v265)
                {
                  if (v266)
                  {
                    *(_DWORD *)os_log_type_t v323 = 136446466;
                    *(void *)&v323[4] = "__nw_protocol_disconnected";
                    *(_WORD *)&v323[12] = 2082;
                    *(void *)&v323[14] = v265;
                    _os_log_impl( &dword_181A5C000,  v262,  v263,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  v323,  0x16u);
                  }

                  free(v265);
                  goto LABEL_476;
                }

                if (v266)
                {
                  *(_DWORD *)os_log_type_t v323 = 136446210;
                  *(void *)&v323[4] = "__nw_protocol_disconnected";
                  uint64_t v264 = "%{public}s called with null protocol, no backtrace";
                  goto LABEL_475;
                }
              }

              else
              {
                v262 = (os_log_s *)__nwlog_obj();
                os_log_type_t v263 = v330[0];
                if (os_log_type_enabled(v262, (os_log_type_t)v330[0]))
                {
                  *(_DWORD *)os_log_type_t v323 = 136446210;
                  *(void *)&v323[4] = "__nw_protocol_disconnected";
                  uint64_t v264 = "%{public}s called with null protocol, backtrace limit exceeded";
                  goto LABEL_475;
                }
              }

void nw_protocol_http3_stream_destroy(uint64_t a1)
{
  uint64_t v55 = *MEMORY[0x1895F89C0];
  uint64_t v2 = (unsigned __int16 *)(a1 + 736);
  if ((*(_WORD *)(a1 + 736) & 0x800) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v3 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      int v4 = *(_DWORD *)(*(void *)(a1 + 336) + 1280LL);
      uint64_t v5 = *(void *)(a1 + 240);
      *(_DWORD *)int buf = 136447490;
      uint64_t v44 = "nw_protocol_http3_stream_destroy";
      __int16 v45 = 2082;
      __int16 v46 = (char *)(a1 + 636);
      __int16 v47 = 2080;
      uint64_t v48 = " ";
      __int16 v49 = 1024;
      int v50 = v4;
      __int16 v51 = 2048;
      uint64_t v52 = v5;
      __int16 v53 = 2048;
      uint64_t v54 = a1;
      _os_log_impl( &dword_181A5C000,  v3,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:s%llu> destroying stream %p",  buf,  0x3Au);
    }
  }

  if (*(void *)(a1 + 216))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)int buf = 136446210;
    uint64_t v44 = "nw_protocol_http3_stream_destroy";
    int v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = (os_log_s *)gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_21;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v44 = "nw_protocol_http3_stream_destroy";
      BOOL v9 = "%{public}s should not have unprocessed input frames left when destroying";
    }

    else if (v41)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = (os_log_s *)gLogObj;
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v44 = "nw_protocol_http3_stream_destroy";
          __int16 v45 = 2082;
          __int16 v46 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s should not have unprocessed input frames left when destroying, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (!v11)
      {
LABEL_21:
        if (v6) {
          free(v6);
        }
        goto LABEL_23;
      }

      *(_DWORD *)int buf = 136446210;
      uint64_t v44 = "nw_protocol_http3_stream_destroy";
      BOOL v9 = "%{public}s should not have unprocessed input frames left when destroying, no backtrace";
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = (os_log_s *)gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_21;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v44 = "nw_protocol_http3_stream_destroy";
      BOOL v9 = "%{public}s should not have unprocessed input frames left when destroying, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
    goto LABEL_21;
  }

uint64_t ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_60412( uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = *(void **)(a2 + 40);
  if (v2)
  {
    *(void *)(v2 + 40) = v3;
    uint64_t v3 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(*(void *)(a1 + 32) + 8LL) = v3;
  }

  void *v3 = v2;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  nw_frame_finalize(a2);
  return 1LL;
}

void nw_protocol_http3_uni_stream_destroy(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v1 = a1;
    if (gLogDatapath)
    {
      uint64_t v12 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v18 = "nw_protocol_http3_uni_stream_destroy";
        __int16 v19 = 2048;
        uint64_t v20 = v1;
        _os_log_impl(&dword_181A5C000, v12, OS_LOG_TYPE_DEBUG, "%{public}s called on http3_uni_stream %p", buf, 0x16u);
      }
    }

    if (!*(void *)(v1 + 104)) {
      goto LABEL_20;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)int buf = 136446466;
    os_log_type_t v18 = "nw_protocol_http3_uni_stream_destroy";
    __int16 v19 = 2048;
    uint64_t v20 = v1;
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v2, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v3 = (os_log_s *)gLogObj;
        os_log_type_t v4 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_18;
        }
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v18 = "nw_protocol_http3_uni_stream_destroy";
        __int16 v19 = 2048;
        uint64_t v20 = v1;
        uint64_t v5 = "%{public}s unistream %p input_frames_unprocessed is not empty";
        goto LABEL_17;
      }

      if (!v15)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v3 = (os_log_s *)gLogObj;
        os_log_type_t v4 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_18;
        }
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v18 = "nw_protocol_http3_uni_stream_destroy";
        __int16 v19 = 2048;
        uint64_t v20 = v1;
        uint64_t v5 = "%{public}s unistream %p input_frames_unprocessed is not empty, backtrace limit exceeded";
        goto LABEL_17;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v3 = (os_log_s *)gLogObj;
      os_log_type_t v4 = type;
      BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)int buf = 136446722;
          os_log_type_t v18 = "nw_protocol_http3_uni_stream_destroy";
          __int16 v19 = 2048;
          uint64_t v20 = v1;
          __int16 v21 = 2082;
          __int16 v22 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v3,  v4,  "%{public}s unistream %p input_frames_unprocessed is not empty, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(backtrace_string);
        goto LABEL_18;
      }

      if (v7)
      {
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v18 = "nw_protocol_http3_uni_stream_destroy";
        __int16 v19 = 2048;
        uint64_t v20 = v1;
        uint64_t v5 = "%{public}s unistream %p input_frames_unprocessed is not empty, no backtrace";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v3, v4, v5, buf, 0x16u);
      }
    }

uint64_t nw_http3_stream_get_application_error(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v8 = 0LL;
  BOOL v9 = &v8;
  uint64_t v10 = 0x2000000000LL;
  uint64_t v11 = 0LL;
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 24);
    if (v2)
    {
      uint64_t v3 = *(uint64_t (**)(void))(v2 + 224);
      if (v3)
      {
        os_log_type_t v4 = (unsigned __int8 *)v3();
        v7[0] = MEMORY[0x1895F87A8];
        v7[1] = 0x40000000LL;
        v7[2] = ___ZL37nw_http3_stream_get_application_errorP24nw_protocol_http3_stream_block_invoke;
        v7[3] = &unk_189BC3D38;
        void v7[4] = &v8;
        nw_array_apply(v4, (uint64_t)v7);
        if (v4) {
          os_release(v4);
        }
      }
    }
  }

  uint64_t v5 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v5;
}

BOOL ___ZL37nw_http3_stream_get_application_errorP24nw_protocol_http3_stream_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  BOOL is_quic_stream = nw_protocol_metadata_is_quic_stream(a3);
  if (is_quic_stream) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = nw_quic_stream_get_application_error(a3);
  }
  return !is_quic_stream;
}

void nw_http3_stream_fields_unblocked(void *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (!a1 || (a1[92] & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v4 = (char *)a1 + 636;
        uint64_t v5 = " ";
        int v6 = *(_DWORD *)(a1[42] + 1280LL);
        uint64_t v7 = a1[30];
        if (!a1)
        {
          uint64_t v5 = "";
          os_log_type_t v4 = "";
        }

        int v8 = 136447234;
        BOOL v9 = "nw_http3_stream_fields_unblocked";
        __int16 v10 = 2082;
        uint64_t v11 = v4;
        __int16 v12 = 2080;
        uint64_t v13 = v5;
        __int16 v14 = 1024;
        int v15 = v6;
        __int16 v16 = 2048;
        uint64_t v17 = v7;
        _os_log_impl( &dword_181A5C000,  v3,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> qpack unblocked",  (uint8_t *)&v8,  0x30u);
      }
    }
  }

  a1[76] = 0LL;
  uint64_t v2 = *(void **)(a1[42] + 968LL);
  a1[77] = v2;
  void *v2 = a1;
  *(void *)(a1[42] + 968LL) = a1 + 76;
}

uint64_t nw_http3_stream_fields_prepare_decode(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = *(void *)(a1 + 496);
  if (v5 >= a3)
  {
    BOOL v9 = *(void **)(a1 + 488);
    if (!a2) {
      goto LABEL_10;
    }
    goto LABEL_12;
  }

  unint64_t v6 = 2 * v5;
  if (v6 <= a3) {
    unint64_t v6 = a3;
  }
  if (v6 <= 0x200) {
    size_t v7 = 512LL;
  }
  else {
    size_t v7 = v6;
  }
  *(void *)(a1 + 496) = v7;
  int v8 = *(void **)(a1 + 488);
  if (v8)
  {
    BOOL v9 = (void *)nw_reallocf_type<char *>(v8, v7);
    goto LABEL_14;
  }

  BOOL v9 = malloc(v7);
  if (v9)
  {
LABEL_14:
    *(void *)(a1 + 48_Block_object_dispose(va, 8) = v9;
    unint64_t v5 = *(void *)(a1 + 496);
    if (!a2)
    {
LABEL_10:
      *(_OWORD *)(a1 + 472) = 0u;
      *(_OWORD *)(a1 + 456) = 0u;
      if (v5 >= 0xFFFF) {
        LOWORD(v5) = -1;
      }
    }

uint64_t nw_http3_stream_fields_process_field(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  unint64_t v3 = *(void *)a2 + *(int *)(a2 + 16);
  uint64_t v4 = *(unsigned __int16 *)(a2 + 24);
  unint64_t v5 = (const char *)(*(void *)a2 + *(int *)(a2 + 20));
  int64_t v6 = *(unsigned __int16 *)(a2 + 26);
  if (!a1 || (*(_WORD *)(a1 + 736) & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      int v8 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        BOOL v9 = " ";
        __int16 v10 = (const char *)(a1 + 636);
        int v11 = *(_DWORD *)(*(void *)(a1 + 336) + 1280LL);
        uint64_t v12 = *(void *)(a1 + 240);
        if (!a1)
        {
          BOOL v9 = "";
          __int16 v10 = "";
        }

        int v13 = 136448259;
        __int16 v14 = "nw_http3_stream_fields_process_field";
        __int16 v15 = 2082;
        __int16 v16 = v10;
        __int16 v17 = 2080;
        uint64_t v18 = v9;
        __int16 v19 = 1024;
        int v20 = v11;
        __int16 v21 = 2048;
        uint64_t v22 = v12;
        __int16 v23 = 1040;
        int v24 = v4;
        __int16 v25 = 2080;
        unint64_t v26 = v3;
        __int16 v27 = 1040;
        int v28 = v6;
        __int16 v29 = 2085;
        uint64_t v30 = v5;
        _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> received header field %.*s: %{sensitive}.*s",  (uint8_t *)&v13,  0x50u);
      }
    }
  }

  return (nw_http_parsed_fields_add(*(void **)(a1 + 504), v3, v4, v5, v6, 1) - 1);
}

void ___ZL38nw_protocol_http3_get_listen_callbacksv_block_invoke()
{
  nw_protocol_http3_get_listen_callbacks(void)::listen_protocol_callbacks = (uint64_t)nw_protocol_http3_listen_protocol_new_flow;
  unk_18C593920 = nw_protocol_http3_listen_protocol_disconnected;
}

BOOL nw_protocol_http3_listen_protocol_new_flow(nw_listen_protocol *a1, nw_endpoint *a2, nw_parameters *a3)
{
  uint64_t v133 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)aBlock = 136446210;
    *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
    __int16 v51 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v119) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v52 = (os_log_s *)__nwlog_obj();
      os_log_type_t v53 = type[0];
      if (os_log_type_enabled(v52, type[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&void aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
        uint64_t v54 = "%{public}s called with null listener";
LABEL_126:
        _os_log_impl(&dword_181A5C000, v52, v53, v54, aBlock, 0xCu);
      }

void nw_protocol_http3_listen_protocol_disconnected(nw_listen_protocol *a1, nw_protocol *a2)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v30 = "nw_protocol_http3_listen_protocol_disconnected";
    size_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v30 = "nw_protocol_http3_listen_protocol_disconnected";
      uint64_t v10 = "%{public}s called with null listener";
    }

    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v23 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v30 = "nw_protocol_http3_listen_protocol_disconnected";
          __int16 v31 = 2082;
          int v32 = (nw_protocol_identifier *)backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null listener, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_74:
        if (!v7) {
          return;
        }
LABEL_75:
        free(v7);
        return;
      }

      if (!v23) {
        goto LABEL_74;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v30 = "nw_protocol_http3_listen_protocol_disconnected";
      uint64_t v10 = "%{public}s called with null listener, no backtrace";
    }

    else
    {
      uint64_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v30 = "nw_protocol_http3_listen_protocol_disconnected";
      uint64_t v10 = "%{public}s called with null listener, backtrace limit exceeded";
    }

uint64_t ___ZL42nw_protocol_http3_listen_protocol_new_flowP18nw_listen_protocolP11nw_endpointP13nw_parameters_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  if (nw_protocol_metadata_is_quic_stream(a3)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a3;
  }
  return 1LL;
}

uint64_t ___ZL34nw_http3_uni_stream_create_inboundP17nw_protocol_http3_block_invoke(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0LL;
  }
  return *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
}

void ___ZL42nw_protocol_http3_listen_protocol_new_flowP18nw_listen_protocolP11nw_endpointP13nw_parameters_block_invoke_171( uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)(v1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        unint64_t v5 = *(void (**)(void))(v4 + 24);
        if (v5)
        {
          v5();
          return;
        }
      }
    }

    __nwlog_obj();
    uint64_t v6 = *(void *)(v2 + 32);
    size_t v7 = "invalid";
    if (v6)
    {
      uint64_t v8 = *(const char **)(v6 + 16);
      if (v8) {
        size_t v7 = v8;
      }
    }

    *(_DWORD *)int buf = 136446466;
    uint64_t v30 = "nw_protocol_http3_listen_protocol_new_flow_block_invoke";
    __int16 v31 = 2082;
    int v32 = v7;
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_35;
      }
      uint64_t v12 = *(void *)(v2 + 32);
      os_log_type_t v13 = "invalid";
      if (v12)
      {
        __int16 v14 = *(const char **)(v12 + 16);
        if (v14) {
          os_log_type_t v13 = v14;
        }
      }

      *(_DWORD *)int buf = 136446466;
      uint64_t v30 = "nw_protocol_http3_listen_protocol_new_flow_block_invoke";
      __int16 v31 = 2082;
      int v32 = v13;
      __int16 v15 = "%{public}s protocol %{public}s has invalid connect callback";
    }

    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v17 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v17)
        {
          uint64_t v18 = *(void *)(v2 + 32);
          int v19 = "invalid";
          if (v18)
          {
            int v20 = *(const char **)(v18 + 16);
            if (v20) {
              int v19 = v20;
            }
          }

          *(_DWORD *)int buf = 136446722;
          uint64_t v30 = "nw_protocol_http3_listen_protocol_new_flow_block_invoke";
          __int16 v31 = 2082;
          int v32 = v19;
          __int16 v33 = 2082;
          int v34 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s protocol %{public}s has invalid connect callback, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(backtrace_string);
        goto LABEL_35;
      }

      if (!v17)
      {
LABEL_35:
        if (v9) {
          free(v9);
        }
        return;
      }

      uint64_t v24 = *(void *)(v2 + 32);
      BOOL v25 = "invalid";
      if (v24)
      {
        unint64_t v26 = *(const char **)(v24 + 16);
        if (v26) {
          BOOL v25 = v26;
        }
      }

      *(_DWORD *)int buf = 136446466;
      uint64_t v30 = "nw_protocol_http3_listen_protocol_new_flow_block_invoke";
      __int16 v31 = 2082;
      int v32 = v25;
      __int16 v15 = "%{public}s protocol %{public}s has invalid connect callback, no backtrace";
    }

    else
    {
      uint64_t v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_35;
      }
      uint64_t v21 = *(void *)(v2 + 32);
      uint32_t v22 = "invalid";
      if (v21)
      {
        BOOL v23 = *(const char **)(v21 + 16);
        if (v23) {
          uint32_t v22 = v23;
        }
      }

      *(_DWORD *)int buf = 136446466;
      uint64_t v30 = "nw_protocol_http3_listen_protocol_new_flow_block_invoke";
      __int16 v31 = 2082;
      int v32 = v22;
      __int16 v15 = "%{public}s protocol %{public}s has invalid connect callback, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v10, v11, v15, buf, 0x16u);
    goto LABEL_35;
  }

double ___ZL42nw_protocol_http3_uni_stream_get_callbacksv_block_invoke()
{
  qword_18C593658 = 0LL;
  *(void *)algn_18C593651 = 0LL;
  strcpy((char *)&g_http3_uni_stream_protocol_identifier, "http3-uni-stream");
  *(void *)&double result = 0x100000004LL;
  qword_18C593660 = 0x100000004LL;
  nw_protocol_http3_uni_stream_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_default_add_input_handler;
  unk_18C593A50 = nw_protocol_default_remove_input_handler;
  qword_18C593AC8 = (uint64_t)nw_protocol_default_get_local;
  unk_18C593AD0 = nw_protocol_default_get_remote;
  qword_18C593AB8 = (uint64_t)nw_protocol_default_get_parameters;
  unk_18C593AC0 = nw_protocol_default_get_path;
  qword_18C593B08 = (uint64_t)nw_protocol_default_output_finished;
  unk_18C593B10 = nw_protocol_default_get_output_local;
  qword_18C593A58 = (uint64_t)nw_protocol_default_replace_input_handler;
  unk_18C593A60 = nw_protocol_default_connect;
  qword_18C593B48 = (uint64_t)nw_protocol_default_reset;
  unk_18C593B50 = nw_protocol_default_input_flush;
  qword_18C593B18 = (uint64_t)nw_protocol_default_get_output_interface;
  unk_18C593B20 = nw_protocol_default_waiting_for_output;
  qword_18C593AD8 = (uint64_t)nw_protocol_default_register_notification;
  unk_18C593AE0 = nw_protocol_default_unregister_notification;
  qword_18C593AE8 = (uint64_t)nw_protocol_default_notify;
  unk_18C593AF0 = nw_protocol_default_updated_path;
  qword_18C593B28 = (uint64_t)nw_protocol_default_copy_info;
  unk_18C593B30 = nw_protocol_default_add_listen_handler;
  qword_18C593B38 = (uint64_t)nw_protocol_default_remove_listen_handler;
  unk_18C593B40 = nw_protocol_default_get_message_properties;
  qword_18C593A68 = (uint64_t)nw_protocol_default_disconnect;
  unk_18C593A70 = nw_protocol_http3_uni_stream_connected;
  qword_18C593A78 = (uint64_t)nw_protocol_http3_uni_stream_disconnected;
  unk_18C593A80 = nw_protocol_http3_uni_stream_error;
  qword_18C593A88 = (uint64_t)nw_protocol_http3_uni_stream_input_available;
  unk_18C593A90 = nw_protocol_default_output_available;
  qword_18C593A98 = (uint64_t)nw_protocol_http3_uni_stream_get_input_frames;
  unk_18C593AA0 = nw_protocol_http3_uni_stream_get_output_frames;
  qword_18C593AA8 = (uint64_t)nw_protocol_http3_uni_stream_finalize_output_frames;
  unk_18C593AB0 = nw_protocol_default_link_state;
  qword_18C593AF8 = (uint64_t)nw_protocol_http3_uni_stream_supports_external_data;
  unk_18C593B00 = nw_protocol_http3_uni_stream_input_finished;
  return result;
}

void nw_protocol_http3_uni_stream_connected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    char v41 = "nw_protocol_http3_uni_stream_connected";
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_75;
      }
      *(_DWORD *)int buf = 136446210;
      char v41 = "nw_protocol_http3_uni_stream_connected";
      uint64_t v21 = "%{public}s called with null protocol";
      goto LABEL_74;
    }

    if (!v38)
    {
      int v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_75;
      }
      *(_DWORD *)int buf = 136446210;
      char v41 = "nw_protocol_http3_uni_stream_connected";
      uint64_t v21 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_74;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v19 = (os_log_s *)__nwlog_obj();
    os_log_type_t v20 = type;
    BOOL v29 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (!v29) {
        goto LABEL_75;
      }
      *(_DWORD *)int buf = 136446210;
      char v41 = "nw_protocol_http3_uni_stream_connected";
      uint64_t v21 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_74;
    }

    if (v29)
    {
      *(_DWORD *)int buf = 136446466;
      char v41 = "nw_protocol_http3_uni_stream_connected";
      __int16 v42 = 2082;
      uint64_t v43 = (nw_protocol *)backtrace_string;
      _os_log_impl( &dword_181A5C000,  v19,  v20,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_75:
    if (!v18) {
      return;
    }
    goto LABEL_76;
  }

  handle = (nw_protocol *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    char v41 = "nw_protocol_http3_uni_stream_connected";
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_75;
      }
      *(_DWORD *)int buf = 136446210;
      char v41 = "nw_protocol_http3_uni_stream_connected";
      uint64_t v21 = "%{public}s called with null http3_stream";
      goto LABEL_74;
    }

    if (!v38)
    {
      int v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_75;
      }
      *(_DWORD *)int buf = 136446210;
      char v41 = "nw_protocol_http3_uni_stream_connected";
      uint64_t v21 = "%{public}s called with null http3_stream, backtrace limit exceeded";
      goto LABEL_74;
    }

    uint64_t v30 = (char *)__nw_create_backtrace_string();
    int v19 = (os_log_s *)__nwlog_obj();
    os_log_type_t v20 = type;
    BOOL v31 = os_log_type_enabled(v19, type);
    if (v30)
    {
      if (v31)
      {
        *(_DWORD *)int buf = 136446466;
        char v41 = "nw_protocol_http3_uni_stream_connected";
        __int16 v42 = 2082;
        uint64_t v43 = (nw_protocol *)v30;
        _os_log_impl( &dword_181A5C000,  v19,  v20,  "%{public}s called with null http3_stream, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v30);
      if (!v18) {
        return;
      }
LABEL_76:
      free(v18);
      return;
    }

    if (v31)
    {
      *(_DWORD *)int buf = 136446210;
      char v41 = "nw_protocol_http3_uni_stream_connected";
      uint64_t v21 = "%{public}s called with null http3_stream, no backtrace";
LABEL_74:
      _os_log_impl(&dword_181A5C000, v19, v20, v21, buf, 0xCu);
      goto LABEL_75;
    }

    goto LABEL_75;
  }

  if (gLogDatapath)
  {
    uint32_t v22 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136446466;
      char v41 = "nw_protocol_http3_uni_stream_connected";
      __int16 v42 = 2048;
      uint64_t v43 = handle;
      _os_log_impl(&dword_181A5C000, v22, OS_LOG_TYPE_DEBUG, "%{public}s called on http3_uni_stream %p", buf, 0x16u);
    }
  }

  if (handle->output_handler == a2)
  {
    if ((handle[2].flow_id[3] & 1) == 0) {
      handle[2].flow_id[3] |= 2u;
    }
    default_input_handler = handle->default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        connected = (void (*)(void))callbacks->connected;
        if (connected)
        {
          connected();
LABEL_11:
          if ((handle[2].flow_id[3] & 1) == 0) {
            nw_protocol_http3_uni_stream_get_input_frames(handle, v7, 0, 0, 0xFFFFFFFF, 0LL);
          }
          return;
        }
      }
    }

    __nwlog_obj();
    uint64_t v8 = handle->default_input_handler;
    os_log_type_t v9 = "invalid";
    if (v8)
    {
      name = v8->identifier->name;
      if (name) {
        os_log_type_t v9 = name;
      }
    }

    *(_DWORD *)int buf = 136446466;
    char v41 = "nw_protocol_http3_uni_stream_connected";
    __int16 v42 = 2082;
    uint64_t v43 = (nw_protocol *)v9;
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (__nwlog_fault(v11, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v12 = (os_log_s *)__nwlog_obj();
        os_log_type_t v13 = type;
        if (!os_log_type_enabled(v12, type)) {
          goto LABEL_68;
        }
        __int16 v14 = handle->default_input_handler;
        __int16 v15 = "invalid";
        if (v14)
        {
          __int16 v16 = v14->identifier->name;
          if (v16) {
            __int16 v15 = v16;
          }
        }

        *(_DWORD *)int buf = 136446466;
        char v41 = "nw_protocol_http3_uni_stream_connected";
        __int16 v42 = 2082;
        uint64_t v43 = (nw_protocol *)v15;
        BOOL v17 = "%{public}s protocol %{public}s has invalid connected callback";
        goto LABEL_67;
      }

      if (!v38)
      {
        uint64_t v12 = (os_log_s *)__nwlog_obj();
        os_log_type_t v13 = type;
        if (!os_log_type_enabled(v12, type)) {
          goto LABEL_68;
        }
        int v32 = handle->default_input_handler;
        __int16 v33 = "invalid";
        if (v32)
        {
          int v34 = v32->identifier->name;
          if (v34) {
            __int16 v33 = v34;
          }
        }

        *(_DWORD *)int buf = 136446466;
        char v41 = "nw_protocol_http3_uni_stream_connected";
        __int16 v42 = 2082;
        uint64_t v43 = (nw_protocol *)v33;
        BOOL v17 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
        goto LABEL_67;
      }

      BOOL v23 = (char *)__nw_create_backtrace_string();
      uint64_t v12 = (os_log_s *)__nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v24 = os_log_type_enabled(v12, type);
      if (v23)
      {
        if (v24)
        {
          BOOL v25 = handle->default_input_handler;
          unint64_t v26 = "invalid";
          if (v25)
          {
            char v27 = v25->identifier->name;
            if (v27) {
              unint64_t v26 = v27;
            }
          }

          *(_DWORD *)int buf = 136446722;
          char v41 = "nw_protocol_http3_uni_stream_connected";
          __int16 v42 = 2082;
          uint64_t v43 = (nw_protocol *)v26;
          __int16 v44 = 2082;
          __int16 v45 = v23;
          _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v23);
        goto LABEL_68;
      }

      if (v24)
      {
        uint64_t v35 = handle->default_input_handler;
        int v36 = "invalid";
        if (v35)
        {
          uint64_t v37 = v35->identifier->name;
          if (v37) {
            int v36 = v37;
          }
        }

        *(_DWORD *)int buf = 136446466;
        char v41 = "nw_protocol_http3_uni_stream_connected";
        __int16 v42 = 2082;
        uint64_t v43 = (nw_protocol *)v36;
        BOOL v17 = "%{public}s protocol %{public}s has invalid connected callback, no backtrace";
LABEL_67:
        _os_log_impl(&dword_181A5C000, v12, v13, v17, buf, 0x16u);
      }
    }

void nw_protocol_http3_uni_stream_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v53 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v48 = "nw_protocol_http3_uni_stream_disconnected";
    uint64_t v21 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint32_t v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_94;
      }
      *(_DWORD *)int buf = 136446210;
      int v48 = "nw_protocol_http3_uni_stream_disconnected";
      BOOL v24 = "%{public}s called with null protocol";
    }

    else if (v45)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint32_t v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v32 = os_log_type_enabled(v22, type);
      if (backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)int buf = 136446466;
          int v48 = "nw_protocol_http3_uni_stream_disconnected";
          __int16 v49 = 2082;
          int v50 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_94:
        if (!v21) {
          return;
        }
        goto LABEL_95;
      }

      if (!v32) {
        goto LABEL_94;
      }
      *(_DWORD *)int buf = 136446210;
      int v48 = "nw_protocol_http3_uni_stream_disconnected";
      BOOL v24 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      uint32_t v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_94;
      }
      *(_DWORD *)int buf = 136446210;
      int v48 = "nw_protocol_http3_uni_stream_disconnected";
      BOOL v24 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_93;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v48 = "nw_protocol_http3_uni_stream_disconnected";
    uint64_t v21 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v45)
      {
        uint32_t v22 = (os_log_s *)__nwlog_obj();
        os_log_type_t v23 = type;
        if (!os_log_type_enabled(v22, type)) {
          goto LABEL_94;
        }
        *(_DWORD *)int buf = 136446210;
        int v48 = "nw_protocol_http3_uni_stream_disconnected";
        BOOL v24 = "%{public}s called with null http3_stream, backtrace limit exceeded";
        goto LABEL_93;
      }

      __int16 v33 = (char *)__nw_create_backtrace_string();
      uint32_t v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v34 = os_log_type_enabled(v22, type);
      if (!v33)
      {
        if (!v34) {
          goto LABEL_94;
        }
        *(_DWORD *)int buf = 136446210;
        int v48 = "nw_protocol_http3_uni_stream_disconnected";
        BOOL v24 = "%{public}s called with null http3_stream, no backtrace";
        goto LABEL_93;
      }

      if (v34)
      {
        *(_DWORD *)int buf = 136446466;
        int v48 = "nw_protocol_http3_uni_stream_disconnected";
        __int16 v49 = 2082;
        int v50 = v33;
        uint64_t v35 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
LABEL_65:
        _os_log_impl(&dword_181A5C000, v22, v23, v35, buf, 0x16u);
      }

void nw_protocol_http3_uni_stream_error(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    char v41 = "nw_protocol_http3_uni_stream_error";
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)int buf = 136446210;
      char v41 = "nw_protocol_http3_uni_stream_error";
      os_log_type_t v16 = "%{public}s called with null protocol";
LABEL_72:
      uint64_t v35 = v17;
      os_log_type_t v36 = v18;
      uint32_t v37 = 12;
      goto LABEL_73;
    }

    if (!v38)
    {
      uint64_t v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)int buf = 136446210;
      char v41 = "nw_protocol_http3_uni_stream_error";
      os_log_type_t v16 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_72;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v17 = (os_log_s *)__nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v26 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (!v26) {
        goto LABEL_74;
      }
      *(_DWORD *)int buf = 136446210;
      char v41 = "nw_protocol_http3_uni_stream_error";
      os_log_type_t v16 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_72;
    }

    if (v26)
    {
      *(_DWORD *)int buf = 136446466;
      char v41 = "nw_protocol_http3_uni_stream_error";
      __int16 v42 = 2082;
      uint64_t v43 = backtrace_string;
      BOOL v27 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_50:
      _os_log_impl(&dword_181A5C000, v17, v18, v27, buf, 0x16u);
    }

void nw_protocol_http3_uni_stream_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v60 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      if (gLogDatapath)
      {
        os_log_type_t v20 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v55 = "nw_protocol_http3_uni_stream_input_finished";
          __int16 v56 = 2048;
          int v57 = (nw_protocol_identifier *)handle;
          _os_log_impl(&dword_181A5C000, v20, OS_LOG_TYPE_DEBUG, "%{public}s called on http3_uni_stream %p", buf, 0x16u);
        }
      }

      if ((*((_BYTE *)handle + 131) & 2) == 0) {
        return;
      }
      if ((*((_BYTE *)handle + 131) & 8) == 0)
      {
        uint64_t v4 = (nw_protocol *)*((void *)handle + 6);
        if (!v4
          || (callbacks = v4->callbacks) == 0LL
          || (input_finished = (void (*)(nw_protocol *, nw_protocol *))callbacks->input_finished) == 0LL)
        {
          __nwlog_obj();
          uint64_t v7 = *((void *)handle + 6);
          uint64_t v8 = "invalid";
          if (v7)
          {
            uint64_t v9 = *(const char **)(v7 + 16);
            if (v9) {
              uint64_t v8 = v9;
            }
          }

          *(_DWORD *)int buf = 136446466;
          uint64_t v55 = "nw_protocol_http3_uni_stream_input_finished";
          __int16 v56 = 2082;
          int v57 = (nw_protocol_identifier *)v8;
          uint64_t v10 = (const char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v52 = 0;
          if (__nwlog_fault(v10, &type, &v52))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              uint64_t v11 = (os_log_s *)__nwlog_obj();
              os_log_type_t v12 = type;
              if (!os_log_type_enabled(v11, type)) {
                goto LABEL_93;
              }
              uint64_t v13 = *((void *)handle + 6);
              __int16 v14 = "invalid";
              if (v13)
              {
                __int16 v15 = *(const char **)(v13 + 16);
                if (v15) {
                  __int16 v14 = v15;
                }
              }

              *(_DWORD *)int buf = 136446466;
              uint64_t v55 = "nw_protocol_http3_uni_stream_input_finished";
              __int16 v56 = 2082;
              int v57 = (nw_protocol_identifier *)v14;
              os_log_type_t v16 = "%{public}s protocol %{public}s has invalid input_finished callback";
LABEL_91:
              __int16 v42 = v11;
              os_log_type_t v43 = v12;
              uint32_t v44 = 22;
              goto LABEL_92;
            }

            if (!v52)
            {
              uint64_t v11 = (os_log_s *)__nwlog_obj();
              os_log_type_t v12 = type;
              if (!os_log_type_enabled(v11, type)) {
                goto LABEL_93;
              }
              uint64_t v39 = *((void *)handle + 6);
              uint64_t v40 = "invalid";
              if (v39)
              {
                char v41 = *(const char **)(v39 + 16);
                if (v41) {
                  uint64_t v40 = v41;
                }
              }

              *(_DWORD *)int buf = 136446466;
              uint64_t v55 = "nw_protocol_http3_uni_stream_input_finished";
              __int16 v56 = 2082;
              int v57 = (nw_protocol_identifier *)v40;
              os_log_type_t v16 = "%{public}s protocol %{public}s has invalid input_finished callback, backtrace limit exceeded";
              goto LABEL_91;
            }

            backtrace_string = (char *)__nw_create_backtrace_string();
            uint64_t v11 = (os_log_s *)__nwlog_obj();
            os_log_type_t v12 = type;
            BOOL v32 = os_log_type_enabled(v11, type);
            if (!backtrace_string)
            {
              if (!v32) {
                goto LABEL_93;
              }
              uint64_t v47 = *((void *)handle + 6);
              int v48 = "invalid";
              if (v47)
              {
                __int16 v49 = *(const char **)(v47 + 16);
                if (v49) {
                  int v48 = v49;
                }
              }

              *(_DWORD *)int buf = 136446466;
              uint64_t v55 = "nw_protocol_http3_uni_stream_input_finished";
              __int16 v56 = 2082;
              int v57 = (nw_protocol_identifier *)v48;
              os_log_type_t v16 = "%{public}s protocol %{public}s has invalid input_finished callback, no backtrace";
              goto LABEL_91;
            }

            if (v32)
            {
              uint64_t v33 = *((void *)handle + 6);
              BOOL v34 = "invalid";
              if (v33)
              {
                uint64_t v35 = *(const char **)(v33 + 16);
                if (v35) {
                  BOOL v34 = v35;
                }
              }

              *(_DWORD *)int buf = 136446722;
              uint64_t v55 = "nw_protocol_http3_uni_stream_input_finished";
              __int16 v56 = 2082;
              int v57 = (nw_protocol_identifier *)v34;
              __int16 v58 = 2082;
              uint64_t v59 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s protocol %{public}s has invalid input_finished callback, dumping backtrace:%{public}s",  buf,  0x20u);
            }

            free(backtrace_string);
          }

void nw_protocol_http3_uni_stream_input_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = (nw_protocol *)a1->handle;
    if (handle)
    {
      if (gLogDatapath)
      {
        uint64_t v10 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v40 = "nw_protocol_http3_uni_stream_input_available";
          __int16 v41 = 2048;
          __int16 v42 = handle;
          _os_log_impl(&dword_181A5C000, v10, OS_LOG_TYPE_DEBUG, "%{public}s called on http3_uni_stream %p", buf, 0x16u);
        }
      }

      if ((handle[2].flow_id[3] & 2) == 0) {
        return;
      }
      if ((handle[2].flow_id[3] & 4) == 0)
      {
        nw_protocol_http3_uni_stream_get_input_frames(handle, a2, 0, 0, 0xFFFFFFFF, 0LL);
        return;
      }

      default_input_handler = handle->default_input_handler;
      if (default_input_handler)
      {
        callbacks = default_input_handler->callbacks;
        if (callbacks)
        {
          input_available = (void (*)(void))callbacks->input_available;
          if (input_available)
          {
            input_available();
            return;
          }
        }
      }

      __nwlog_obj();
      uint64_t v11 = handle->default_input_handler;
      os_log_type_t v12 = "invalid";
      if (v11)
      {
        name = v11->identifier->name;
        if (name) {
          os_log_type_t v12 = name;
        }
      }

      *(_DWORD *)int buf = 136446466;
      uint64_t v40 = "nw_protocol_http3_uni_stream_input_available";
      __int16 v41 = 2082;
      __int16 v42 = (nw_protocol *)v12;
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v37 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v14 = (os_log_s *)__nwlog_obj();
        os_log_type_t v15 = type;
        if (!os_log_type_enabled(v14, type)) {
          goto LABEL_72;
        }
        os_log_type_t v16 = handle->default_input_handler;
        uint64_t v17 = "invalid";
        if (v16)
        {
          os_log_type_t v18 = v16->identifier->name;
          if (v18) {
            uint64_t v17 = v18;
          }
        }

        *(_DWORD *)int buf = 136446466;
        uint64_t v40 = "nw_protocol_http3_uni_stream_input_available";
        __int16 v41 = 2082;
        __int16 v42 = (nw_protocol *)v17;
        uint64_t v9 = "%{public}s protocol %{public}s has invalid input_available callback";
      }

      else if (v37)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __int16 v14 = (os_log_s *)__nwlog_obj();
        os_log_type_t v15 = type;
        BOOL v24 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v24)
          {
            BOOL v25 = handle->default_input_handler;
            BOOL v26 = "invalid";
            if (v25)
            {
              BOOL v27 = v25->identifier->name;
              if (v27) {
                BOOL v26 = v27;
              }
            }

            *(_DWORD *)int buf = 136446722;
            uint64_t v40 = "nw_protocol_http3_uni_stream_input_available";
            __int16 v41 = 2082;
            __int16 v42 = (nw_protocol *)v26;
            __int16 v43 = 2082;
            uint32_t v44 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s protocol %{public}s has invalid input_available callback, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(backtrace_string);
LABEL_72:
          if (v6) {
            goto LABEL_73;
          }
          return;
        }

        if (!v24) {
          goto LABEL_72;
        }
        BOOL v34 = handle->default_input_handler;
        uint64_t v35 = "invalid";
        if (v34)
        {
          os_log_type_t v36 = v34->identifier->name;
          if (v36) {
            uint64_t v35 = v36;
          }
        }

        *(_DWORD *)int buf = 136446466;
        uint64_t v40 = "nw_protocol_http3_uni_stream_input_available";
        __int16 v41 = 2082;
        __int16 v42 = (nw_protocol *)v35;
        uint64_t v9 = "%{public}s protocol %{public}s has invalid input_available callback, no backtrace";
      }

      else
      {
        __int16 v14 = (os_log_s *)__nwlog_obj();
        os_log_type_t v15 = type;
        if (!os_log_type_enabled(v14, type)) {
          goto LABEL_72;
        }
        os_log_type_t v28 = handle->default_input_handler;
        uint64_t v29 = "invalid";
        if (v28)
        {
          uint64_t v30 = v28->identifier->name;
          if (v30) {
            uint64_t v29 = v30;
          }
        }

        *(_DWORD *)int buf = 136446466;
        uint64_t v40 = "nw_protocol_http3_uni_stream_input_available";
        __int16 v41 = 2082;
        __int16 v42 = (nw_protocol *)v29;
        uint64_t v9 = "%{public}s protocol %{public}s has invalid input_available callback, backtrace limit exceeded";
      }

      BOOL v31 = v14;
      os_log_type_t v32 = v15;
      uint32_t v33 = 22;
LABEL_71:
      _os_log_impl(&dword_181A5C000, v31, v32, v9, buf, v33);
      goto LABEL_72;
    }

    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v40 = "nw_protocol_http3_uni_stream_input_available";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_72;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v40 = "nw_protocol_http3_uni_stream_input_available";
      uint64_t v9 = "%{public}s called with null http3_stream";
      goto LABEL_64;
    }

    if (!v37)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_72;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v40 = "nw_protocol_http3_uni_stream_input_available";
      uint64_t v9 = "%{public}s called with null http3_stream, backtrace limit exceeded";
      goto LABEL_64;
    }

    os_log_type_t v19 = (char *)__nw_create_backtrace_string();
    uint64_t v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v22 = os_log_type_enabled(v7, type);
    if (!v19)
    {
      if (!v22) {
        goto LABEL_72;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v40 = "nw_protocol_http3_uni_stream_input_available";
      uint64_t v9 = "%{public}s called with null http3_stream, no backtrace";
      goto LABEL_64;
    }

    if (v22)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v40 = "nw_protocol_http3_uni_stream_input_available";
      __int16 v41 = 2082;
      __int16 v42 = (nw_protocol *)v19;
      BOOL v21 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
      goto LABEL_40;
    }
  }

  else
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v40 = "nw_protocol_http3_uni_stream_input_available";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_72;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v40 = "nw_protocol_http3_uni_stream_input_available";
      uint64_t v9 = "%{public}s called with null protocol";
LABEL_64:
      BOOL v31 = v7;
      os_log_type_t v32 = v8;
      uint32_t v33 = 12;
      goto LABEL_71;
    }

    if (!v37)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_72;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v40 = "nw_protocol_http3_uni_stream_input_available";
      uint64_t v9 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_64;
    }

    os_log_type_t v19 = (char *)__nw_create_backtrace_string();
    uint64_t v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v20 = os_log_type_enabled(v7, type);
    if (!v19)
    {
      if (!v20) {
        goto LABEL_72;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v40 = "nw_protocol_http3_uni_stream_input_available";
      uint64_t v9 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_64;
    }

    if (v20)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v40 = "nw_protocol_http3_uni_stream_input_available";
      __int16 v41 = 2082;
      __int16 v42 = (nw_protocol *)v19;
      BOOL v21 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_40:
      _os_log_impl(&dword_181A5C000, v7, v8, v21, buf, 0x16u);
    }
  }

  free(v19);
  if (v6) {
LABEL_73:
  }
    free(v6);
}

uint64_t nw_protocol_http3_uni_stream_get_input_frames( nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v76 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http3_uni_stream_get_input_frames";
    char v37 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v73 = OS_LOG_TYPE_DEFAULT;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (v73 == OS_LOG_TYPE_DEFAULT)
      {
        char v38 = (os_log_s *)__nwlog_obj();
        os_log_type_t v39 = type[0];
        if (!os_log_type_enabled(v38, type[0])) {
          goto LABEL_83;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http3_uni_stream_get_input_frames";
        uint64_t v40 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_82;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      char v38 = (os_log_s *)__nwlog_obj();
      os_log_type_t v39 = type[0];
      BOOL v43 = os_log_type_enabled(v38, type[0]);
      if (!backtrace_string)
      {
        if (!v43) {
          goto LABEL_83;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http3_uni_stream_get_input_frames";
        uint64_t v40 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_82;
      }

      if (v43)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http3_uni_stream_get_input_frames";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&_BYTE buf[14] = backtrace_string;
        uint32_t v44 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_72:
        _os_log_impl(&dword_181A5C000, v38, v39, v44, buf, 0x16u);
      }

BOOL nw_protocol_http3_uni_stream_get_output_frames( nw_protocol *a1, nw_protocol *a2, int a3, int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v58 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v53 = "nw_protocol_http3_uni_stream_get_output_frames";
    char v37 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v38 = (os_log_s *)__nwlog_obj();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v53 = "nw_protocol_http3_uni_stream_get_output_frames";
        uint64_t v40 = "%{public}s called with null protocol";
LABEL_93:
        _os_log_impl(&dword_181A5C000, v38, v39, v40, buf, 0xCu);
      }

uint64_t nw_protocol_http3_uni_stream_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
    BOOL v27 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__src) = 16;
    BYTE4(offset) = 0;
    if (__src != 17)
    {
      if (!BYTE4(offset))
      {
        os_log_type_t v28 = (os_log_s *)__nwlog_obj();
        os_log_type_t v29 = __src;
        if (os_log_type_enabled(v28, (os_log_type_t)__src))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
          uint64_t v30 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_106;
        }

        goto LABEL_107;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v28 = (os_log_s *)__nwlog_obj();
      os_log_type_t v29 = __src;
      BOOL v32 = os_log_type_enabled(v28, (os_log_type_t)__src);
      if (!backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
          uint64_t v30 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_106;
        }

        goto LABEL_107;
      }

      if (!v32) {
        goto LABEL_93;
      }
      *(_DWORD *)int buf = 136446466;
      BOOL v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
      __int16 v44 = 2082;
      *(void *)BOOL v45 = backtrace_string;
      int v33 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_92;
    }

    os_log_type_t v28 = (os_log_s *)__nwlog_obj();
    os_log_type_t v29 = __src;
    if (!os_log_type_enabled(v28, (os_log_type_t)__src)) {
      goto LABEL_107;
    }
    *(_DWORD *)int buf = 136446210;
    BOOL v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
    uint64_t v30 = "%{public}s called with null protocol";
LABEL_106:
    _os_log_impl(&dword_181A5C000, v28, v29, v30, buf, 0xCu);
    goto LABEL_107;
  }

  handle = (unsigned __int8 *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
    BOOL v27 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__src) = 16;
    BYTE4(offset) = 0;
    if (__src != 17)
    {
      if (!BYTE4(offset))
      {
        os_log_type_t v28 = (os_log_s *)__nwlog_obj();
        os_log_type_t v29 = __src;
        if (os_log_type_enabled(v28, (os_log_type_t)__src))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
          uint64_t v30 = "%{public}s called with null http3_stream, backtrace limit exceeded";
          goto LABEL_106;
        }

        goto LABEL_107;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v28 = (os_log_s *)__nwlog_obj();
      os_log_type_t v29 = __src;
      BOOL v34 = os_log_type_enabled(v28, (os_log_type_t)__src);
      if (!backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
          uint64_t v30 = "%{public}s called with null http3_stream, no backtrace";
          goto LABEL_106;
        }

        goto LABEL_107;
      }

      if (!v34) {
        goto LABEL_93;
      }
      *(_DWORD *)int buf = 136446466;
      BOOL v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
      __int16 v44 = 2082;
      *(void *)BOOL v45 = backtrace_string;
      int v33 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
      goto LABEL_92;
    }

    os_log_type_t v28 = (os_log_s *)__nwlog_obj();
    os_log_type_t v29 = __src;
    if (!os_log_type_enabled(v28, (os_log_type_t)__src)) {
      goto LABEL_107;
    }
    *(_DWORD *)int buf = 136446210;
    BOOL v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
    uint64_t v30 = "%{public}s called with null http3_stream";
    goto LABEL_106;
  }

  if (!handle[130]) {
    return ((uint64_t (*)(nw_protocol *, nw_frame_array_s *))a1->output_handler->callbacks->finalize_output_frames)( a1->output_handler,  a2);
  }
  tqh_first = a2->tqh_first;
  if (!nw_frame_uses_external_data((uint64_t)a2->tqh_first))
  {
    nw_frame_unclaim((uint64_t)tqh_first, v6, handle[130], 0);
    HIDWORD(offset) = 0;
    uint64_t v10 = nw_frame_unclaimed_bytes((uint64_t)tqh_first, (_DWORD *)&offset + 1);
    if (v10)
    {
      unint64_t v11 = (void *)v10;
      __srCC_SHA256_CTX c = 0LL;
      unint64_t v12 = *((void *)handle + 8);
      if (v12 > 0x3F)
      {
        if (v12 >> 14)
        {
          if (v12 >> 30)
          {
            if (v12 >> 62)
            {
              uint64_t v14 = (os_log_s *)__nwlog_obj();
              os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
              *(_DWORD *)int buf = 136446466;
              BOOL v43 = "_http_vle_encode";
              __int16 v44 = 2048;
              *(void *)BOOL v45 = v12;
              uint64_t v15 = (void *)_os_log_send_and_compose_impl();
              uint64_t result = __nwlog_abort((uint64_t)v15);
              if ((_DWORD)result) {
                goto LABEL_110;
              }
              free(v15);
            }

            else
            {
              __srCC_SHA256_CTX c = bswap64(v12 | 0xC000000000000000LL);
            }
          }

          else
          {
            __srCC_SHA256_CTX c = bswap32(v12 | 0x80000000);
          }
        }

        else
        {
          __srCC_SHA256_CTX c = bswap32(v12 | 0x4000) >> 16;
        }
      }

      else
      {
        __srCC_SHA256_CTX c = *((void *)handle + 8);
      }

      memcpy(v11, &__src, handle[130]);
LABEL_53:
      *((void *)handle + _Block_object_dispose(va, 8) = -1LL;
      handle[130] = 0;
      return ((uint64_t (*)(nw_protocol *, nw_frame_array_s *))a1->output_handler->callbacks->finalize_output_frames)( a1->output_handler,  a2);
    }

    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
    BOOL v27 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__src) = 16;
    LOBYTE(offset) = 0;
    if (__src == 17)
    {
      os_log_type_t v28 = (os_log_s *)__nwlog_obj();
      os_log_type_t v29 = __src;
      if (!os_log_type_enabled(v28, (os_log_type_t)__src)) {
        goto LABEL_107;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
      uint64_t v30 = "%{public}s called with null unclaimed_bytes";
      goto LABEL_106;
    }

    if (!(_BYTE)offset)
    {
      os_log_type_t v28 = (os_log_s *)__nwlog_obj();
      os_log_type_t v29 = __src;
      if (os_log_type_enabled(v28, (os_log_type_t)__src))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
        uint64_t v30 = "%{public}s called with null unclaimed_bytes, backtrace limit exceeded";
        goto LABEL_106;
      }

      goto LABEL_107;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v28 = (os_log_s *)__nwlog_obj();
    os_log_type_t v29 = __src;
    BOOL v35 = os_log_type_enabled(v28, (os_log_type_t)__src);
    if (!backtrace_string)
    {
      if (v35)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
        uint64_t v30 = "%{public}s called with null unclaimed_bytes, no backtrace";
        goto LABEL_106;
      }

      goto LABEL_107;
    }

    if (!v35) {
      goto LABEL_93;
    }
    *(_DWORD *)int buf = 136446466;
    BOOL v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
    __int16 v44 = 2082;
    *(void *)BOOL v45 = backtrace_string;
    int v33 = "%{public}s called with null unclaimed_bytes, dumping backtrace:%{public}s";
LABEL_92:
    _os_log_impl(&dword_181A5C000, v28, v29, v33, buf, 0x16u);
    goto LABEL_93;
  }

  nw_frame_unclaim((uint64_t)tqh_first, v6, 0, handle[130]);
  size_t offset = 0LL;
  uint64_t v7 = (dispatch_data_s *)nw_frame_copy_external_data((uint64_t)tqh_first, (_DWORD *)&offset + 1, &offset);
  os_log_type_t v8 = v7;
  if (HIDWORD(offset))
  {
    subrange = dispatch_data_create_subrange(v7, HIDWORD(offset), 0xFFFFFFFFFFFFFFFFLL);
    if (v8) {
      dispatch_release(v8);
    }
  }

  else
  {
    subrange = v7;
  }

  if (subrange)
  {
    __srCC_SHA256_CTX c = 0LL;
    unint64_t v13 = *((void *)handle + 8);
    if (v13 <= 0x3F)
    {
      __srCC_SHA256_CTX c = *((void *)handle + 8);
      goto LABEL_32;
    }

    if (!(v13 >> 14))
    {
      __srCC_SHA256_CTX c = bswap32(v13 | 0x4000) >> 16;
      goto LABEL_32;
    }

    if (!(v13 >> 30))
    {
      __srCC_SHA256_CTX c = bswap32(v13 | 0x80000000);
      goto LABEL_32;
    }

    if (!(v13 >> 62))
    {
      __srCC_SHA256_CTX c = bswap64(v13 | 0xC000000000000000LL);
      goto LABEL_32;
    }

    BOOL v17 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int buf = 136446466;
    BOOL v43 = "_http_vle_encode";
    __int16 v44 = 2048;
    *(void *)BOOL v45 = v13;
    uint64_t v18 = (void *)_os_log_send_and_compose_impl();
    uint64_t result = __nwlog_abort((uint64_t)v18);
    if (!(_DWORD)result)
    {
      free(v18);
LABEL_32:
      uint64_t v19 = dispatch_data_create(&__src, handle[130], 0LL, 0LL);
      concat = dispatch_data_create_concat(v19, subrange);
      if (v19) {
        dispatch_release(v19);
      }
      dispatch_release(subrange);
      unsigned int v39 = 0;
      nw_frame_set_external_data((uint64_t)tqh_first, concat, &v39);
      if (concat) {
        dispatch_release(concat);
      }
      if (v39 == (_DWORD)offset) {
        goto LABEL_53;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)int buf = 136446722;
      BOOL v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
      __int16 v44 = 1024;
      *(_DWORD *)BOOL v45 = v39;
      *(_WORD *)&v45[4] = 1024;
      *(_DWORD *)&v45[6] = offset;
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v37 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v22 = (os_log_s *)gLogObj;
        os_log_type_t v23 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_51;
        }
        *(_DWORD *)int buf = 136446722;
        BOOL v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
        __int16 v44 = 1024;
        *(_DWORD *)BOOL v45 = v39;
        *(_WORD *)&v45[4] = 1024;
        *(_DWORD *)&v45[6] = offset;
        unsigned int v24 = "%{public}s Incorrect frame length set: %u != %u";
      }

      else if (v37)
      {
        unsigned int v25 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v22 = (os_log_s *)gLogObj;
        os_log_type_t v23 = type;
        BOOL v26 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v25)
        {
          if (v26)
          {
            *(_DWORD *)int buf = 136446978;
            BOOL v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
            __int16 v44 = 1024;
            *(_DWORD *)BOOL v45 = v39;
            *(_WORD *)&v45[4] = 1024;
            *(_DWORD *)&v45[6] = offset;
            __int16 v46 = 2082;
            uint64_t v47 = v25;
            _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s Incorrect frame length set: %u != %u, dumping backtrace:%{public}s",  buf,  0x22u);
          }

          free(v25);
          goto LABEL_51;
        }

        if (!v26)
        {
LABEL_51:
          if (v21) {
            free(v21);
          }
          goto LABEL_53;
        }

        *(_DWORD *)int buf = 136446722;
        BOOL v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
        __int16 v44 = 1024;
        *(_DWORD *)BOOL v45 = v39;
        *(_WORD *)&v45[4] = 1024;
        *(_DWORD *)&v45[6] = offset;
        unsigned int v24 = "%{public}s Incorrect frame length set: %u != %u, no backtrace";
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v22 = (os_log_s *)gLogObj;
        os_log_type_t v23 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_51;
        }
        *(_DWORD *)int buf = 136446722;
        BOOL v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
        __int16 v44 = 1024;
        *(_DWORD *)BOOL v45 = v39;
        *(_WORD *)&v45[4] = 1024;
        *(_DWORD *)&v45[6] = offset;
        unsigned int v24 = "%{public}s Incorrect frame length set: %u != %u, backtrace limit exceeded";
      }

      _os_log_impl(&dword_181A5C000, v22, v23, v24, buf, 0x18u);
      goto LABEL_51;
    }

uint64_t nw_protocol_http3_uni_stream_supports_external_data(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = (unsigned __int8 *)a1->handle;
    if (handle) {
      return (handle[131] >> 4) & 1;
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v14 = "nw_protocol_http3_uni_stream_supports_external_data";
    char v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v14 = "nw_protocol_http3_uni_stream_supports_external_data";
        uint64_t v6 = "%{public}s called with null http3_stream";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (!v11)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v14 = "nw_protocol_http3_uni_stream_supports_external_data";
        uint64_t v6 = "%{public}s called with null http3_stream, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v14 = "nw_protocol_http3_uni_stream_supports_external_data";
        uint64_t v6 = "%{public}s called with null http3_stream, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v10)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v14 = "nw_protocol_http3_uni_stream_supports_external_data";
      __int16 v15 = 2082;
      char v16 = backtrace_string;
      uint64_t v9 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
      goto LABEL_21;
    }

    goto LABEL_22;
  }

  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v14 = "nw_protocol_http3_uni_stream_supports_external_data";
  char v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v14 = "nw_protocol_http3_uni_stream_supports_external_data";
        uint64_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v14 = "nw_protocol_http3_uni_stream_supports_external_data";
        uint64_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v8)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v14 = "nw_protocol_http3_uni_stream_supports_external_data";
      __int16 v15 = 2082;
      char v16 = backtrace_string;
      uint64_t v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v4, v5, v9, buf, 0x16u);
    }

BOOL ___ZL45nw_protocol_http3_uni_stream_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke( uint64_t a1, uint64_t a2)
{
  unsigned int v19 = 0;
  uint64_t v4 = (const void *)nw_frame_unclaimed_bytes(a2, &v19);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(unsigned __int16 *)(v5 + 128);
  else {
    size_t v7 = 8 - v6;
  }
  memcpy((void *)(v5 + v6 + 120), v4, v7);
  uint64_t v9 = *(void *)(a1 + 40);
  unsigned __int16 v10 = *(_WORD *)(v9 + 128) + v7;
  *(_WORD *)(v9 + 12_Block_object_dispose(va, 8) = v10;
  if (!v10)
  {
    unsigned __int16 v10 = 0;
LABEL_9:
    int v12 = 0;
    char v13 = 0;
    goto LABEL_10;
  }

  unint64_t v11 = *(unsigned __int8 *)(v9 + 120);
  if (v11 <= 0x3F)
  {
    int v12 = 1;
LABEL_7:
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v11;
    v10 -= v12;
    char v13 = 4;
    goto LABEL_10;
  }

  if (v11 >> 6 == 2)
  {
    if (v10 >= 4u)
    {
      unint64_t v11 = bswap32(*(_DWORD *)(v9 + 120) & 0xFFFFFF7F);
      int v12 = 4;
      goto LABEL_7;
    }

    goto LABEL_9;
  }

  if (v11 >> 6 != 1)
  {
    if (v10 >= 8u)
    {
      unint64_t v11 = bswap64(*(void *)(v9 + 120) & 0xFFFFFFFFFFFFFF3FLL);
      int v12 = 8;
      goto LABEL_7;
    }

    goto LABEL_9;
  }

  if (v10 >= 2u)
  {
    unint64_t v11 = bswap32(*(_WORD *)(v9 + 120) & 0xFFBF) >> 16;
    int v12 = 2;
    goto LABEL_7;
  }

  int v12 = 0;
  char v13 = 0;
  unsigned __int16 v10 = 1;
LABEL_10:
  *(_BYTE *)(v9 + 131) = *(_BYTE *)(v9 + 131) & 0xFB | v13;
  uint64_t v14 = *(void *)(a1 + 40);
  *(_WORD *)(v14 + 12_Block_object_dispose(va, 8) = v10;
  char v15 = *(_BYTE *)(v14 + 131);
  if ((v15 & 4) != 0)
  {
    nw_frame_claim(a2, v8, v12 - v6, 0);
  }

  else
  {
    uint64_t v16 = *(void *)(a2 + 32);
    uint64_t v17 = *(void **)(a2 + 40);
    if (v16)
    {
      *(void *)(v16 + 40) = v17;
      uint64_t v17 = *(void **)(a2 + 40);
    }

    else
    {
      *(void *)(v14 + 112) = v17;
    }

    *uint64_t v17 = v16;
    *(void *)(a2 + 32) = 0LL;
    *(void *)(a2 + 40) = 0LL;
    nw_frame_finalize(a2);
  }

  return (v15 & 4) == 0;
}

void nw_http3_fail_all_streams(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (((*(unsigned __int16 *)(a1 + 1373) | (*(unsigned __int8 *)(a1 + 1375) << 16)) & 0x400000) == 0)
    {
      if (gLogDatapath)
      {
        unint64_t v11 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          int v12 = *(_DWORD *)(a1 + 1280);
          *(_DWORD *)int buf = 136446978;
          uint64_t v18 = "nw_http3_fail_all_streams";
          __int16 v19 = 2082;
          BOOL v20 = (char *)(a1 + 1289);
          __int16 v21 = 2080;
          uint64_t v22 = " ";
          __int16 v23 = 1024;
          int v24 = v12;
          _os_log_impl(&dword_181A5C000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
        }
      }
    }

    nw_http3_async_close_connection_if_no_stream(a1);
    uint64_t v4 = *(nw_protocol **)(a1 + 880);
    if (v4)
    {
      do
      {
        output_handler = v4[8].output_handler;
        nw_protocol_http3_stream_error(v4, (nw_protocol *)a1, 100);
        uint64_t v4 = output_handler;
      }

      while (output_handler);
    }

    uint64_t v6 = *(void **)(a1 + 1240);
    if (v6) {
      nw_quic_connection_close_with_error(v6, a2);
    }
    return;
  }

  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v18 = "nw_http3_fail_all_streams";
  size_t v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v7, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v18 = "nw_http3_fail_all_streams";
      unsigned __int16 v10 = "%{public}s called with null http3";
      goto LABEL_24;
    }

    if (!v15)
    {
      uint64_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v18 = "nw_http3_fail_all_streams";
      unsigned __int16 v10 = "%{public}s called with null http3, backtrace limit exceeded";
      goto LABEL_24;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v8 = (os_log_s *)__nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v14 = os_log_type_enabled(v8, type);
    if (backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v18 = "nw_http3_fail_all_streams";
        __int16 v19 = 2082;
        BOOL v20 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null http3, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_25;
    }

    if (v14)
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v18 = "nw_http3_fail_all_streams";
      unsigned __int16 v10 = "%{public}s called with null http3, no backtrace";
LABEL_24:
      _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
    }
  }

void nw_http3_control_stream_process_input(uint64_t a1)
{
  uint64_t v289 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http3_control_stream_process_input";
    int v198 = (char *)_os_log_send_and_compose_impl();
    v271[0] = OS_LOG_TYPE_ERROR;
    v279[0] = 0;
    if (v271[0] == OS_LOG_TYPE_FAULT)
    {
      v199 = (os_log_s *)__nwlog_obj();
      os_log_type_t v200 = v271[0];
      if (!os_log_type_enabled(v199, v271[0])) {
        goto LABEL_361;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http3_control_stream_process_input";
      os_log_type_t v201 = "%{public}s called with null http3";
    }

    else if (v279[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v199 = (os_log_s *)__nwlog_obj();
      os_log_type_t v200 = v271[0];
      BOOL v207 = os_log_type_enabled(v199, v271[0]);
      if (backtrace_string)
      {
        if (v207)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_control_stream_process_input";
          *(_WORD *)&void buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v199,  v200,  "%{public}s called with null http3, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_361;
      }

      if (!v207)
      {
LABEL_361:
        if (v198) {
          free(v198);
        }
        return;
      }

      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http3_control_stream_process_input";
      os_log_type_t v201 = "%{public}s called with null http3, no backtrace";
    }

    else
    {
      v199 = (os_log_s *)__nwlog_obj();
      os_log_type_t v200 = v271[0];
      if (!os_log_type_enabled(v199, v271[0])) {
        goto LABEL_361;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http3_control_stream_process_input";
      os_log_type_t v201 = "%{public}s called with null http3, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v199, v200, v201, buf, 0xCu);
    goto LABEL_361;
  }

  uint64_t v234 = (void *)(a1 + 168);
  uint64_t v2 = (unsigned __int16 *)(a1 + 1373);
  uint64_t v3 = a1 + 1289;
  while (1)
  {
    *(void *)os_log_type_t v271 = 0LL;
    v272 = v271;
    uint64_t v273 = 0x3802000000LL;
    v274 = __Block_byref_object_copy__60284;
    os_log_type_t v275 = __Block_byref_object_dispose__60285;
    v276[0] = 0LL;
    v276[1] = v276;
    v269 = 0LL;
    uint64_t v270 = -1LL;
    char v268 = 0;
    if (!nw_http3_framer_get_input_frames( (uint64_t)v234,  0xFFFFu,  0xFFFFu,  0xFFFFFFFF,  &v270,  &v269,  &v268,  0LL,  (uint64_t)v276)) {
      goto LABEL_334;
    }
    int v4 = *v2;
    int v5 = v4 | (*((unsigned __int8 *)v2 + 2) << 16);
    if ((v4 & 0x1000) != 0)
    {
      uint64_t v16 = (void *)*((void *)v272 + 5);
      if (!v16)
      {
LABEL_35:
        if (v268)
        {
          int v33 = *v2;
          unsigned int v34 = v33 & 0xFFFFEFFF | (*((unsigned __int8 *)v2 + 2) << 16);
          unsigned __int16 *v2 = v33 & 0xEFFF;
          *((_BYTE *)v2 + 2) = BYTE2(v34);
        }

        goto LABEL_3;
      }

      while (1)
      {
        while (1)
        {
          uint64_t v17 = (void (*)(void *, uint64_t, uint64_t))v16[10];
          uint64_t v18 = (void *)v16[4];
          if (!v17) {
            break;
          }
          uint64_t v19 = v16[11];
          v16[10] = 0LL;
          v16[11] = 0LL;
          v17(v16, 1LL, v19);
          uint64_t v16 = v18;
          if (!v18) {
            goto LABEL_35;
          }
        }

        uint64_t v20 = v3;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
        __int16 v21 = (char *)_os_log_send_and_compose_impl();
        v279[0] = 16;
        LOBYTE(error) = 0;
        if (v279[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v22 = gLogObj;
          os_log_type_t v23 = v279[0];
          if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v279[0]))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
            int v24 = (os_log_s *)v22;
            os_log_type_t v25 = v23;
            BOOL v26 = "%{public}s called with null frame->finalizer";
LABEL_31:
            _os_log_impl(&dword_181A5C000, v24, v25, v26, buf, 0xCu);
          }
        }

        else if ((_BYTE)error)
        {
          BOOL v27 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v28 = (os_log_s *)gLogObj;
          os_log_type_t v29 = v279[0];
          BOOL v30 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v279[0]);
          if (v27)
          {
            if (v30)
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
              *(_WORD *)&void buf[12] = 2082;
              *(void *)&_BYTE buf[14] = v27;
              _os_log_impl( &dword_181A5C000,  v28,  v29,  "%{public}s called with null frame->finalizer, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v27);
            goto LABEL_32;
          }

          if (v30)
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
            int v24 = v28;
            os_log_type_t v25 = v29;
            BOOL v26 = "%{public}s called with null frame->finalizer, no backtrace";
            goto LABEL_31;
          }
        }

        else
        {
          uint64_t v31 = (os_log_s *)__nwlog_obj();
          os_log_type_t v32 = v279[0];
          if (os_log_type_enabled(v31, (os_log_type_t)v279[0]))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
            int v24 = v31;
            os_log_type_t v25 = v32;
            BOOL v26 = "%{public}s called with null frame->finalizer, backtrace limit exceeded";
            goto LABEL_31;
          }
        }

void nw_http3_encoder_stream_process_input(uint64_t a1)
{
  uint64_t v76 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    while (1)
    {
      *(void *)uint64_t v69 = 0LL;
      *(void *)&v69[8] = v69;
      *(void *)&v69[16] = 0x3802000000LL;
      uint64_t v70 = __Block_byref_object_copy__60284;
      int v71 = __Block_byref_object_dispose__60285;
      v72[0] = 0LL;
      v72[1] = v72;
      if (!(*(unsigned int (**)(void, uint64_t))(*(void *)(*(void *)(a1 + 1064) + 24LL) + 80LL))( *(void *)(a1 + 1064),  a1))
      {
        _Block_object_dispose(v69, 8);
        return;
      }

      v54[0] = MEMORY[0x1895F87A8];
      v54[1] = 0x40000000LL;
      int v55 = ___ZL37nw_http3_encoder_stream_process_inputP17nw_protocol_http3_block_invoke;
      uint64_t v56 = &unk_189BC4210;
      uint64_t v57 = v69;
      uint64_t v58 = a1;
      uint64_t v2 = *(void *)(*(void *)&v69[8] + 40LL);
      do
      {
        if (!v2) {
          break;
        }
        uint64_t v3 = *(void *)(v2 + 32);
        char v4 = ((uint64_t (*)(void *))v55)(v54);
        uint64_t v2 = v3;
      }

      while ((v4 & 1) != 0);
      int v5 = *(void **)(*(void *)&v69[8] + 40LL);
      if (v5)
      {
        while (1)
        {
          uint64_t v6 = (void (*)(void *, void, uint64_t))v5[10];
          uint64_t v7 = (void *)v5[4];
          if (!v6) {
            break;
          }
          uint64_t v8 = v5[11];
          v5[10] = 0LL;
          v5[11] = 0LL;
          v6(v5, 0LL, v8);
LABEL_11:
          int v5 = v7;
          if (!v7) {
            goto LABEL_30;
          }
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
        unsigned int v9 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v65) = 0;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v10 = gLogObj;
          os_log_type_t v11 = type[0];
          if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
            uint64_t v12 = (os_log_s *)v10;
            os_log_type_t v13 = v11;
            char v14 = "%{public}s called with null frame->finalizer";
            goto LABEL_26;
          }

          goto LABEL_27;
        }

        if ((_BYTE)v65)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v16 = (os_log_s *)gLogObj;
          os_log_type_t v17 = type[0];
          BOOL v18 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
          if (backtrace_string)
          {
            if (v18)
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
              *(_WORD *)&void buf[12] = 2082;
              *(void *)&_BYTE buf[14] = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s called with null frame->finalizer, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(backtrace_string);
            goto LABEL_27;
          }

          if (!v18)
          {
LABEL_27:
            if (v9) {
              free(v9);
            }
            goto LABEL_11;
          }

          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
          uint64_t v12 = v16;
          os_log_type_t v13 = v17;
          char v14 = "%{public}s called with null frame->finalizer, no backtrace";
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v19 = gLogObj;
          os_log_type_t v20 = type[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
            goto LABEL_27;
          }
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
          uint64_t v12 = (os_log_s *)v19;
          os_log_type_t v13 = v20;
          char v14 = "%{public}s called with null frame->finalizer, backtrace limit exceeded";
        }

void nw_http3_decoder_stream_process_input(uint64_t a1)
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)BOOL v36 = 136446210;
    *(void *)&v36[4] = "nw_http3_decoder_stream_process_input";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (buf[0] == 17)
    {
      uint64_t v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = buf[0];
      if (!os_log_type_enabled(v19, (os_log_type_t)buf[0])) {
        goto LABEL_46;
      }
      *(_DWORD *)BOOL v36 = 136446210;
      *(void *)&v36[4] = "nw_http3_decoder_stream_process_input";
      uint64_t v21 = "%{public}s called with null http3";
    }

    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = buf[0];
      BOOL v23 = os_log_type_enabled(v19, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)BOOL v36 = 136446466;
          *(void *)&v36[4] = "nw_http3_decoder_stream_process_input";
          *(_WORD *)&v36[12] = 2082;
          *(void *)&v36[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v19,  v20,  "%{public}s called with null http3, dumping backtrace:%{public}s",  v36,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_46;
      }

      if (!v23)
      {
LABEL_46:
        if (v18) {
          free(v18);
        }
        return;
      }

      *(_DWORD *)BOOL v36 = 136446210;
      *(void *)&v36[4] = "nw_http3_decoder_stream_process_input";
      uint64_t v21 = "%{public}s called with null http3, no backtrace";
    }

    else
    {
      uint64_t v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = buf[0];
      if (!os_log_type_enabled(v19, (os_log_type_t)buf[0])) {
        goto LABEL_46;
      }
      *(_DWORD *)BOOL v36 = 136446210;
      *(void *)&v36[4] = "nw_http3_decoder_stream_process_input";
      uint64_t v21 = "%{public}s called with null http3, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v19, v20, v21, v36, 0xCu);
    goto LABEL_46;
  }

  uint64_t v2 = MEMORY[0x1895F87A8];
  while (1)
  {
    *(void *)BOOL v36 = 0LL;
    *(void *)&v36[8] = v36;
    *(void *)&v36[16] = 0x3802000000LL;
    int v37 = __Block_byref_object_copy__60284;
    uint64_t v38 = __Block_byref_object_dispose__60285;
    v39[0] = 0LL;
    v39[1] = v39;
    if (!(*(unsigned int (**)(void, uint64_t))(*(void *)(*(void *)(a1 + 1080) + 24LL) + 80LL))( *(void *)(a1 + 1080),  a1)) {
      break;
    }
    v29[0] = v2;
    v29[1] = 0x40000000LL;
    BOOL v30 = ___ZL37nw_http3_decoder_stream_process_inputP17nw_protocol_http3_block_invoke;
    os_log_type_t v31 = &unk_189BC43A0;
    os_log_type_t v32 = v36;
    uint64_t v33 = a1;
    uint64_t v3 = *(void *)(*(void *)&v36[8] + 40LL);
    do
    {
      if (!v3) {
        break;
      }
      uint64_t v4 = *(void *)(v3 + 32);
      char v5 = ((uint64_t (*)(void *))v30)(v29);
      uint64_t v3 = v4;
    }

    while ((v5 & 1) != 0);
    uint64_t v6 = *(void **)(*(void *)&v36[8] + 40LL);
    if (v6)
    {
      do
      {
        while (1)
        {
          uint64_t v7 = (void (*)(void *, void, uint64_t))v6[10];
          uint64_t v8 = (void *)v6[4];
          if (!v7) {
            break;
          }
          uint64_t v9 = v6[11];
          v6[10] = 0LL;
          v6[11] = 0LL;
          v7(v6, 0LL, v9);
          uint64_t v6 = v8;
          if (!v8) {
            goto LABEL_3;
          }
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)int buf = 136446210;
        int v41 = "__nw_frame_finalize";
        uint64_t v10 = (const char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v34 = 0;
        os_log_type_t v28 = (char *)v10;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v11 = type;
          os_log_t log = (os_log_t)gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            *(_DWORD *)int buf = 136446210;
            int v41 = "__nw_frame_finalize";
            uint64_t v12 = log;
            os_log_type_t v13 = v11;
            char v14 = "%{public}s called with null frame->finalizer";
LABEL_25:
            _os_log_impl(&dword_181A5C000, v12, v13, v14, buf, 0xCu);
          }
        }

        else if (v34)
        {
          char v15 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          loga = (os_log_s *)gLogObj;
          os_log_type_t v24 = type;
          BOOL v16 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v15)
          {
            if (v16)
            {
              *(_DWORD *)int buf = 136446466;
              int v41 = "__nw_frame_finalize";
              __int16 v42 = 2082;
              BOOL v43 = v15;
              _os_log_impl( &dword_181A5C000,  loga,  v24,  "%{public}s called with null frame->finalizer, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v15);
            goto LABEL_26;
          }

          if (v16)
          {
            *(_DWORD *)int buf = 136446210;
            int v41 = "__nw_frame_finalize";
            uint64_t v12 = loga;
            os_log_type_t v13 = v24;
            char v14 = "%{public}s called with null frame->finalizer, no backtrace";
            goto LABEL_25;
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v17 = type;
          os_log_t logb = (os_log_t)gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            *(_DWORD *)int buf = 136446210;
            int v41 = "__nw_frame_finalize";
            uint64_t v12 = logb;
            os_log_type_t v13 = v17;
            char v14 = "%{public}s called with null frame->finalizer, backtrace limit exceeded";
            goto LABEL_25;
          }
        }

uint64_t ___ZL45nw_protocol_http3_uni_stream_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_2( uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += nw_frame_unclaimed_length(a2);
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  return 1LL;
}

BOOL ___ZL33nw_http3_uni_stream_type_receivedP17nw_protocol_http3P28nw_protocol_http3_uni_streamy_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  BOOL is_quic_stream = nw_protocol_metadata_is_quic_stream(a3);
  if (is_quic_stream) {
    nw_quic_stream_set_application_error(a3, 259LL);
  }
  return !is_quic_stream;
}

uint64_t ___ZL37nw_http3_decoder_stream_process_inputP17nw_protocol_http3_block_invoke( uint64_t a1, uint64_t a2)
{
  unsigned int v29 = 0;
  uint64_t v4 = (unsigned __int8 *)nw_frame_unclaimed_bytes(a2, &v29);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = v29;
  uint64_t v7 = *(FILE **)(v5 + 456);
  if (v7)
  {
    fwrite("qenc: debug: ", 0xDuLL, 1uLL, v7);
    fprintf(*(FILE **)(v5 + 456), "got %zu bytes of decoder stream", v6);
    fputc(10, *(FILE **)(v5 + 456));
  }

  if ((_DWORD)v6)
  {
    uint64_t v8 = (char *)&v4[v6];
    int v9 = *(_DWORD *)(v5 + 416);
    do
    {
      while (v9 == 1)
      {
        char v14 = 0;
        uint64_t v15 = *(void *)(v5 + 432);
        unsigned int v16 = *(_DWORD *)(v5 + 420);
        os_log_type_t v17 = v4;
        while (1)
        {
          unsigned int v21 = *v17++;
          unsigned int v20 = v21;
          v15 += (unint64_t)(v21 & 0x7F) << v16;
          v16 += 7;
          if ((v21 & 0x80) == 0) {
            break;
          }
LABEL_17:
          if (v17 >= (unsigned __int8 *)v8)
          {
            if ((v14 & 1) != 0) {
              int v26 = 0;
            }
            else {
              int v26 = *(_DWORD *)(v5 + 424);
            }
            unsigned int v27 = v26 + (_DWORD)v17 - (_DWORD)v4;
            if (v27 < 0xB)
            {
              *(void *)(v5 + 432) = v15;
              *(_DWORD *)(v5 + 420) = v16;
              *(_DWORD *)(v5 + 424) = v27;
              *(_DWORD *)(v5 + 416) = 1;
              goto LABEL_28;
            }

            goto LABEL_37;
          }
        }

        if (v16 >= 0x40)
        {
          BOOL v22 = v16 != 70 || v20 > 1;
          if (v22 || (v15 & 0x8000000000000000LL) == 0) {
            goto LABEL_37;
          }
        }

uint64_t ___ZL37nw_http3_encoder_stream_process_inputP17nw_protocol_http3_block_invoke( uint64_t a1, uint64_t a2)
{
  unsigned int v145 = 0;
  uint64_t v3 = (unsigned __int8 *)nw_frame_unclaimed_bytes(a2, &v145);
  uint64_t v4 = v145;
  uint64_t v142 = a1;
  uint64_t v5 = *(void *)(a1 + 40);
  *(void *)(v5 + 1032) += v145;
  uint64_t v6 = *(FILE **)(v5 + 544);
  if (v6)
  {
    fwrite("qdec: debug: ", 0xDuLL, 1uLL, v6);
    fprintf(*(FILE **)(v5 + 544), "got %zu bytes of encoder stream", v4);
    fputc(10, *(FILE **)(v5 + 544));
  }

  *(_DWORD *)(v5 + 520) += v4;
  if (!(_DWORD)v4) {
    goto LABEL_215;
  }
  uint64_t v7 = &v3[v4];
  uint64_t v8 = (void *)(v5 + 788);
  int v9 = (const char **)(v5 + 776);
  uint64_t v143 = (_DWORD *)(v5 + 760);
  uint64_t v144 = v5 + 496;
  char v10 = -1;
LABEL_8:
  switch(*(_DWORD *)(v5 + 728))
  {
    case 0:
      char v12 = *v3;
      if (((char)*v3 & 0x80000000) == 0)
      {
        if ((*v3 & 0x40) == 0)
        {
          *(_DWORD *)(v5 + 736) = 0;
          if ((v12 & 0x20) != 0)
          {
            *(_DWORD *)(v5 + 72_Block_object_dispose(va, 8) = 7;
            char v10 = 5;
LABEL_98:
            unsigned int v16 = v3 + 1;
            uint64_t v79 = *v3;
            unint64_t v80 = ~(-1 << v10);
            unint64_t v14 = v79 & v80;
            if ((v79 & v80) < v80) {
              goto LABEL_239;
            }
            unsigned int v15 = 0;
            char v17 = 1;
            do
            {
              if (v16 >= v7) {
                goto LABEL_210;
              }
LABEL_163:
              unsigned int v116 = *v16++;
              unsigned int v115 = v116;
              v14 += (unint64_t)(v116 & 0x7F) << v15;
              v15 += 7;
            }

            while ((v116 & 0x80) != 0);
            if (v15 < 0x40 || v15 == 70 && v115 <= 1 && (v14 & 0x8000000000000000LL) != 0)
            {
LABEL_239:
              *(void *)(v5 + 760) = v14;
              if (v14 <= *(unsigned int *)(v5 + 500))
              {
                *(_DWORD *)(v5 + 72_Block_object_dispose(va, 8) = 0;
                uint64_t v117 = *(FILE **)(v5 + 544);
                if (v117)
                {
                  fwrite("qdec: debug: ", 0xDuLL, 1uLL, v117);
                  fprintf(*(FILE **)(v5 + 544), "got TSU=%llu", *(void *)(v5 + 760));
                  fputc(10, *(FILE **)(v5 + 544));
                  unint64_t v14 = *(void *)(v5 + 760);
                }

                *(_DWORD *)(v5 + 504) = v14;
                int v118 = *(_DWORD *)(v5 + 516);
                *(_DWORD *)(v5 + 516) = v14 >> 5;
                if (v118 != v14 >> 5)
                {
                  int v119 = *(_DWORD *)(v5 + 528);
                  if (v119 == *(_DWORD *)(v5 + 532) && v119 == 2 * v118 - 1)
                  {
                    unsigned int v120 = 2 * (v14 >> 5) - 1;
                    *(_DWORD *)(v5 + 52_Block_object_dispose(va, 8) = v120;
                    *(_DWORD *)(v5 + 532) = v120;
                  }
                }

                qdec_remove_overflow_entries(v144);
                goto LABEL_7;
              }
            }
          }

          else
          {
            *(_DWORD *)(v5 + 72_Block_object_dispose(va, 8) = 6;
            char v10 = 5;
LABEL_78:
            unsigned int v16 = v3 + 1;
            uint64_t v65 = *v3;
            unint64_t v66 = ~(-1 << v10);
            unint64_t v14 = v65 & v66;
            if ((v65 & v66) < v66) {
              goto LABEL_240;
            }
            unsigned int v15 = 0;
            char v17 = 1;
            do
            {
              if (v16 >= v7) {
                goto LABEL_210;
              }
LABEL_101:
              char v81 = *v16++;
              v14 += (unint64_t)(v81 & 0x7F) << v15;
              v15 += 7;
            }

            while (v81 < 0);
            if (v15 <= 0x3F && v14 >> 24 == 0)
            {
LABEL_240:
              *(_DWORD *)(v5 + 760) = v14;
              unsigned int v83 = *(_DWORD *)(v5 + 552);
              if (v83)
              {
                unsigned int v84 = *(_DWORD *)(v5 + 556);
                unsigned int v85 = *(_DWORD *)(v5 + 560);
                int v86 = v84 >= v85 ? 0 : *(_DWORD *)(v5 + 552);
                if (v84 + v86 - v85 > v14)
                {
                  BOOL v87 = *(unsigned int **)(*(void *)(v5 + 568) + 8LL * ((v83 + v84 + ~(_DWORD)v14) % v83));
                  if (v87)
                  {
                    size_t v88 = *v87 + (unint64_t)v87[1] + 28;
                    uint64_t v89 = (char *)malloc(v88);
                    if (v89)
                    {
                      uint64_t v90 = v89;
                      memcpy(v89, v87, v88);
                      *((_DWORD *)v90 + 2) = 1;
                      if (!lsqpack_dec_push_entry(v144, v90))
                      {
                        *(_DWORD *)(v5 + 72_Block_object_dispose(va, 8) = 0;
                        goto LABEL_7;
                      }

                      int v139 = *((_DWORD *)v90 + 2) - 1;
                      *((_DWORD *)v90 + 2) = v139;
                      if (!v139) {
                        free(v90);
                      }
                    }
                  }
                }
              }
            }
          }

          goto LABEL_231;
        }

        *(_BYTE *)(v5 + 796) = (v12 & 0x20) != 0;
        *(_DWORD *)(v5 + 736) = 0;
        *(void *)(v5 + 776) = 0LL;
        *(_DWORD *)(v5 + 72_Block_object_dispose(va, 8) = 8;
        char v10 = 5;
LABEL_95:
        unsigned int v16 = v3 + 1;
        uint64_t v77 = *v3;
        unint64_t v78 = ~(-1 << v10);
        unint64_t v14 = v77 & v78;
        if ((v77 & v78) < v78) {
          goto LABEL_241;
        }
        unsigned int v15 = 0;
        char v17 = 1;
        do
        {
          if (v16 >= v7) {
            goto LABEL_210;
          }
LABEL_178:
          char v121 = *v16++;
          v14 += (unint64_t)(v121 & 0x7F) << v15;
          v15 += 7;
        }

        while (v121 < 0);
        if (v15 <= 0x3F && v14 >> 24 == 0)
        {
LABEL_241:
          *(_DWORD *)(v5 + 76_Block_object_dispose(va, 8) = v14;
          char v123 = *(_BYTE *)(v5 + 796);
          if (*(_DWORD *)(v5 + 504) << (2 * v123) >= v14)
          {
            LODWORD(v124) = v14 + (v14 >> 1);
            uint64_t v124 = (_DWORD)v14 ? v124 : 16LL;
            *(_DWORD *)(v5 + 784) = v124;
            uint64_t v125 = malloc(v124 + 28);
            *(void *)(v5 + 776) = v125;
            if (v125)
            {
              v125[6] = 0;
              *uint64_t v8 = 0LL;
              if (!v123)
              {
                int v11 = 10;
                goto LABEL_6;
              }

              int v112 = 9;
LABEL_191:
              *(_DWORD *)(v5 + 72_Block_object_dispose(va, 8) = v112;
              *(_DWORD *)(v5 + 760) = 0;
              goto LABEL_7;
            }
          }
        }

        goto LABEL_231;
      }

      *(_BYTE *)(v5 + 817) = (v12 & 0x40) != 0;
      *(_DWORD *)(v5 + 736) = 0;
      *int v9 = 0LL;
      *(void *)(v5 + 784) = 0LL;
      char v10 = 6;
      *(_DWORD *)(v5 + 72_Block_object_dispose(va, 8) = 1;
LABEL_81:
      unsigned int v16 = v3 + 1;
      uint64_t v67 = *v3;
      unint64_t v68 = ~(-1 << v10);
      unint64_t v14 = v67 & v68;
      if ((v67 & v68) < v68) {
        goto LABEL_122;
      }
      unsigned int v15 = 0;
      char v13 = 1;
      while (v16 < v7)
      {
LABEL_116:
        char v91 = *v16++;
        v14 += (unint64_t)(v91 & 0x7F) << v15;
        v15 += 7;
        if ((v91 & 0x80) == 0)
        {
          if (v15 > 0x3F || v14 >> 24 != 0) {
            goto LABEL_231;
          }
LABEL_122:
          *(_DWORD *)(v5 + 76_Block_object_dispose(va, 8) = v14;
          if (*(_BYTE *)(v5 + 817))
          {
            *int v9 = 0LL;
            int v11 = 2;
            goto LABEL_6;
          }

          unsigned int v93 = *(_DWORD *)(v5 + 552);
          if (!v93) {
            goto LABEL_223;
          }
          unsigned int v94 = *(_DWORD *)(v5 + 556);
          unsigned int v95 = *(_DWORD *)(v5 + 560);
          int v96 = v94 >= v95 ? 0 : *(_DWORD *)(v5 + 552);
          uint64_t v97 = *(void *)(*(void *)(v5 + 568) + 8LL * ((v93 + v94 + ~(_DWORD)v14) % v93));
          *(void *)(v5 + 776) = v97;
          if (!v97) {
            goto LABEL_231;
          }
          ++*(_DWORD *)(v97 + 8);
          int v11 = 2;
LABEL_6:
          *(_DWORD *)(v5 + 72_Block_object_dispose(va, 8) = v11;
LABEL_7:
          uint64_t v3 = v16;
          if (v16 >= v7) {
            goto LABEL_215;
          }
          goto LABEL_8;
        }
      }

      if ((v13 & 1) != 0) {
        int v134 = 0;
      }
      else {
        int v134 = *(_DWORD *)(v5 + 744);
      }
      unsigned int v130 = v134 + (_DWORD)v16 - (_DWORD)v3;
      if (v130 >= 0xB) {
        goto LABEL_231;
      }
LABEL_214:
      *(void *)(v5 + 752) = v14;
      *(_DWORD *)(v5 + 740) = v15;
      *(_DWORD *)(v5 + 744) = v130;
      *(_DWORD *)(v5 + 736) = 1;
LABEL_215:
      uint64_t v131 = *(void *)(a2 + 32);
      uint64_t v132 = *(void **)(a2 + 40);
      if (v131)
      {
        *(void *)(v131 + 40) = v132;
        uint64_t v132 = *(void **)(a2 + 40);
      }

      else
      {
        *(void *)(*(void *)(*(void *)(v142 + 32) + 8LL) + 48LL) = v132;
      }

      void *v132 = v131;
      *(void *)(a2 + 32) = 0LL;
      *(void *)(a2 + 40) = 0LL;
      uint64_t v133 = 1LL;
      nw_frame_finalize(a2);
      return v133;
    case 1:
      if (!*(_DWORD *)(v5 + 736)) {
        goto LABEL_81;
      }
      char v13 = 0;
      unint64_t v14 = *(void *)(v5 + 752);
      unsigned int v15 = *(_DWORD *)(v5 + 740);
      unsigned int v16 = v3;
      goto LABEL_116;
    case 2:
      *(_BYTE *)(v5 + 816) = *v3 >> 7;
      *(_DWORD *)(v5 + 736) = 0;
      *(_DWORD *)(v5 + 72_Block_object_dispose(va, 8) = 3;
      char v10 = 7;
      goto LABEL_18;
    case 3:
      if (*(_DWORD *)(v5 + 736))
      {
        char v17 = 0;
        unint64_t v14 = *(void *)(v5 + 752);
        unsigned int v15 = *(_DWORD *)(v5 + 740);
        unsigned int v16 = v3;
        while (1)
        {
          char v98 = *v16++;
          v14 += (unint64_t)(v98 & 0x7F) << v15;
          v15 += 7;
          if ((v98 & 0x80) == 0) {
            break;
          }
LABEL_142:
          if (v16 >= v7) {
            goto LABEL_210;
          }
        }

        if (v15 > 0x3F || v14 >> 24 != 0) {
          goto LABEL_231;
        }
      }

      else
      {
LABEL_18:
        unsigned int v16 = v3 + 1;
        uint64_t v18 = *v3;
        unint64_t v19 = ~(-1 << v10);
        unint64_t v14 = v18 & v19;
        if ((v18 & v19) >= v19)
        {
          unsigned int v15 = 0;
          char v17 = 1;
          goto LABEL_142;
        }
      }

      *(_DWORD *)(v5 + 772) = v14;
      int v100 = *(unsigned __int8 *)(v5 + 817);
      if (*(_BYTE *)(v5 + 817))
      {
        os_log_type_t v101 = &(&static_table)[3 * *(unsigned int *)(v5 + 768)];
        uint64_t v104 = *v101;
        os_log_type_t v102 = (const char *)(v101 + 2);
        uint64_t v103 = (uint64_t)v104;
      }

      else
      {
        os_log_type_t v102 = *v9;
        uint64_t v103 = (uint64_t)(*v9 + 28);
      }

      uint64_t v105 = *(unsigned int *)v102;
      *(_DWORD *)(v5 + 812) = v105;
      *(void *)(v5 + 792) = v103;
      int v106 = *(unsigned __int8 *)(v5 + 816);
      unsigned int v107 = v14 >> 1;
      if (!*(_BYTE *)(v5 + 816)) {
        unsigned int v107 = 0;
      }
      uint64_t v108 = v107 + v14;
      *(_DWORD *)(v5 + 800) = v108;
      uint64_t v25 = malloc(v105 + v108 + 28);
      *(void *)(v5 + 784) = v25;
      if (!v25) {
        goto LABEL_231;
      }
      if (v100)
      {
        uint64_t v109 = *(unsigned int *)(v5 + 768);
        os_log_type_t v110 = (_DWORD *)((char *)&name_hashes + 4 * v109);
        int v111 = 5;
      }

      else
      {
        LODWORD(v109) = *((_DWORD *)*v9 + 5);
        int v111 = *((_DWORD *)*v9 + 6) & 5;
        os_log_type_t v110 = *v9 + 12;
      }

      v25[3] = *v110;
      v25[5] = v109;
      v25[6] = v111;
      _DWORD *v25 = v105;
      *(void *)(v5 + 804) = 0LL;
      if ((_DWORD)v14)
      {
        if (!v106)
        {
          int v11 = 4;
          goto LABEL_6;
        }

        int v112 = 5;
        goto LABEL_191;
      }

      int v24 = 0;
LABEL_156:
      v25[1] = v24;
      *(_DWORD *)(*(void *)(v5 + 784) + 8LL) = 1;
      memcpy((void *)(*(void *)(v5 + 784) + 28LL), *(const void **)(v5 + 792), *(unsigned int *)(v5 + 812));
      os_log_type_t v113 = *(_DWORD **)(v5 + 776);
      if (v113)
      {
        int v114 = v113[2] - 1;
        v113[2] = v114;
        if (!v114) {
          free(v113);
        }
        *int v9 = 0LL;
      }

      goto LABEL_224;
    case 4:
      unsigned int v20 = *(_DWORD *)(v5 + 772);
      if (*(_DWORD *)(v5 + 800) < v20) {
        __assert_rtn("lsqpack_dec_enc_in", "lsqpack.c", 4714, "WINR.alloced_val_len >= WINR.val_len");
      }
      uint64_t v21 = *(unsigned int *)(v5 + 804);
      unsigned int v22 = v20 - v21;
      else {
        size_t v23 = v22;
      }
      memcpy((void *)(*(void *)(v5 + 784) + v21 + **(unsigned int **)(v5 + 784) + 28), v3, v23);
      int v24 = *(_DWORD *)(v5 + 804) + v23;
      *(_DWORD *)(v5 + 804) = v24;
      unsigned int v16 = &v3[v23];
      if (v24 != *(_DWORD *)(v5 + 772)) {
        goto LABEL_7;
      }
      uint64_t v25 = *(_DWORD **)(v5 + 784);
      goto LABEL_156;
    case 5:
      uint64_t v26 = *(unsigned int *)(v5 + 772);
      uint64_t v27 = *(unsigned int *)(v5 + 808);
      else {
        uint64_t v28 = (v26 - v27);
      }
      uint64_t v29 = lsqpack_huff_decode( v3,  v28,  (char *)(*(void *)(v5 + 784) + *(unsigned int *)(v5 + 804) + **(unsigned int **)(v5 + 784) + 28LL),  (*(_DWORD *)(v5 + 800) - *(_DWORD *)(v5 + 804)),  v143,  v28 + v27 == v26);
      int v30 = HIDWORD(v29);
      int v32 = v31;
      if ((_DWORD)v29 == 2)
      {
        uint64_t v69 = (2 * *(_DWORD *)(v5 + 800));
        *(_DWORD *)(v5 + 800) = v69;
        uint64_t v70 = realloc(*(void **)(v5 + 784), v69 + *(unsigned int *)(v5 + 812) + 28);
        if (!v70) {
          goto LABEL_231;
        }
        *(void *)(v5 + 784) = v70;
      }

      else if ((_DWORD)v29 != 1)
      {
        if ((_DWORD)v29) {
          goto LABEL_231;
        }
        *(_DWORD *)(*(void *)(v5 + 784) + 4LL) = *(_DWORD *)(v5 + 804) + HIDWORD(v29);
        *(_DWORD *)(*(void *)(v5 + 784) + 8LL) = 1;
        memcpy((void *)(*(void *)(v5 + 784) + 28LL), *(const void **)(v5 + 792), *(unsigned int *)(v5 + 812));
        uint64_t v33 = *(_DWORD **)(v5 + 776);
        if (v33)
        {
          int v34 = v33[2] - 1;
          v33[2] = v34;
          if (!v34) {
            free(v33);
          }
          *int v9 = 0LL;
        }

        if (!lsqpack_dec_push_entry(v144, *(const char **)(v5 + 784)))
        {
          unsigned int v16 = &v3[v32];
LABEL_161:
          *(_DWORD *)(v5 + 72_Block_object_dispose(va, 8) = 0;
          *(void *)(v5 + 784) = 0LL;
          goto LABEL_7;
        }

uint64_t nw_http3_encoder_stream_get_and_reset_received_size(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t result = *(void *)(a1 + 1032);
    *(void *)(a1 + 1032) = 0LL;
    return result;
  }

  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  char v12 = "nw_http3_encoder_stream_get_and_reset_received_size";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v12 = "nw_http3_encoder_stream_get_and_reset_received_size";
        uint64_t v6 = "%{public}s called with null http3";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
      }
    }

    else if (v9)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)int buf = 136446466;
          char v12 = "nw_http3_encoder_stream_get_and_reset_received_size";
          __int16 v13 = 2082;
          unint64_t v14 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null http3, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_18;
      }

      if (v8)
      {
        *(_DWORD *)int buf = 136446210;
        char v12 = "nw_http3_encoder_stream_get_and_reset_received_size";
        uint64_t v6 = "%{public}s called with null http3, no backtrace";
        goto LABEL_17;
      }
    }

    else
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v12 = "nw_http3_encoder_stream_get_and_reset_received_size";
        uint64_t v6 = "%{public}s called with null http3, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }

BOOL ___ZL40nw_http3_stream_fields_process_unblockedP24nw_protocol_http3_stream_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *(void **)(a2 + 40);
  if (v3)
  {
    *(void *)(v3 + 40) = v4;
    uint64_t v4 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(*(void *)(a1 + 40) + 224LL) = v4;
  }

  *uint64_t v4 = v3;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  nw_http3_stream_handle_fields( *(void *)(a1 + 40),  0LL,  a2,  (*(unsigned __int16 *)(*(void *)(a1 + 40) + 736LL) >> 3) & 1);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v5;
  return *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
}

void nw_protocol_http3_stream_input_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      if ((handle[92] & 0x800) == 0)
      {
        if (gLogDatapath)
        {
          int v24 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
          {
            int v25 = *(_DWORD *)(handle[42] + 1280LL);
            uint64_t v26 = handle[30];
            *(_DWORD *)int buf = 136447234;
            uint64_t v43 = "nw_protocol_http3_stream_input_available";
            __int16 v44 = 2082;
            size_t v45 = (char *)handle + 636;
            __int16 v46 = 2080;
            uint64_t v47 = " ";
            __int16 v48 = 1024;
            int v49 = v25;
            __int16 v50 = 2048;
            uint64_t v51 = v26;
            _os_log_impl( &dword_181A5C000,  v24,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> called",  buf,  0x30u);
          }
        }
      }

      uint64_t v4 = handle[6];
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 24);
        if (v5)
        {
          uint64_t v6 = *(void (**)(nw_protocol *, void *))(v5 + 64);
          if (v6)
          {
            v6(a1->default_input_handler, handle);
            return;
          }
        }
      }

      __nwlog_obj();
      uint64_t v7 = handle[6];
      BOOL v8 = "invalid";
      if (v7)
      {
        char v9 = *(const char **)(v7 + 16);
        if (v9) {
          BOOL v8 = v9;
        }
      }

      *(_DWORD *)int buf = 136446466;
      uint64_t v43 = "nw_protocol_http3_stream_input_available";
      __int16 v44 = 2082;
      size_t v45 = (char *)v8;
      char v10 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v40 = 0;
      if (__nwlog_fault(v10, &type, &v40))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          int v11 = (os_log_s *)__nwlog_obj();
          os_log_type_t v12 = type;
          if (!os_log_type_enabled(v11, type)) {
            goto LABEL_70;
          }
          uint64_t v13 = handle[6];
          unint64_t v14 = "invalid";
          if (v13)
          {
            uint64_t v15 = *(const char **)(v13 + 16);
            if (v15) {
              unint64_t v14 = v15;
            }
          }

          *(_DWORD *)int buf = 136446466;
          uint64_t v43 = "nw_protocol_http3_stream_input_available";
          __int16 v44 = 2082;
          size_t v45 = (char *)v14;
          unsigned int v16 = "%{public}s protocol %{public}s has invalid input_available callback";
LABEL_59:
          uint64_t v37 = v11;
          os_log_type_t v38 = v12;
          uint32_t v39 = 22;
LABEL_69:
          _os_log_impl(&dword_181A5C000, v37, v38, v16, buf, v39);
          goto LABEL_70;
        }

        if (!v40)
        {
          int v11 = (os_log_s *)__nwlog_obj();
          os_log_type_t v12 = type;
          if (!os_log_type_enabled(v11, type)) {
            goto LABEL_70;
          }
          uint64_t v27 = handle[6];
          uint64_t v28 = "invalid";
          if (v27)
          {
            uint64_t v29 = *(const char **)(v27 + 16);
            if (v29) {
              uint64_t v28 = v29;
            }
          }

          *(_DWORD *)int buf = 136446466;
          uint64_t v43 = "nw_protocol_http3_stream_input_available";
          __int16 v44 = 2082;
          size_t v45 = (char *)v28;
          unsigned int v16 = "%{public}s protocol %{public}s has invalid input_available callback, backtrace limit exceeded";
          goto LABEL_59;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        int v11 = (os_log_s *)__nwlog_obj();
        os_log_type_t v12 = type;
        BOOL v18 = os_log_type_enabled(v11, type);
        if (!backtrace_string)
        {
          if (!v18) {
            goto LABEL_70;
          }
          uint64_t v34 = handle[6];
          uint64_t v35 = "invalid";
          if (v34)
          {
            uint64_t v36 = *(const char **)(v34 + 16);
            if (v36) {
              uint64_t v35 = v36;
            }
          }

          *(_DWORD *)int buf = 136446466;
          uint64_t v43 = "nw_protocol_http3_stream_input_available";
          __int16 v44 = 2082;
          size_t v45 = (char *)v35;
          unsigned int v16 = "%{public}s protocol %{public}s has invalid input_available callback, no backtrace";
          goto LABEL_59;
        }

        if (v18)
        {
          uint64_t v19 = handle[6];
          unsigned int v20 = "invalid";
          if (v19)
          {
            uint64_t v21 = *(const char **)(v19 + 16);
            if (v21) {
              unsigned int v20 = v21;
            }
          }

          *(_DWORD *)int buf = 136446722;
          uint64_t v43 = "nw_protocol_http3_stream_input_available";
          __int16 v44 = 2082;
          size_t v45 = (char *)v20;
          __int16 v46 = 2082;
          uint64_t v47 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s protocol %{public}s has invalid input_available callback, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(backtrace_string);
      }

void ___ZL40nw_http3_stream_fields_process_unblockedP24nw_protocol_http3_stream_block_invoke_2(uint64_t a1)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  if ((*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))())
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if ((*(_WORD *)(v2 + 736) & 0x100) != 0)
    {
      if ((*(_WORD *)(v2 + 736) & 0x800) == 0)
      {
        if (gLogDatapath)
        {
          os_log_type_t v23 = (os_log_s *)__nwlog_obj();
          BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG);
          uint64_t v2 = *(void *)(a1 + 40);
          if (v24)
          {
            int v25 = (const char *)(v2 + 636);
            uint64_t v26 = "";
            int v27 = *(_DWORD *)(*(void *)(v2 + 336) + 1280LL);
            BOOL v28 = v2 == 0;
            uint64_t v29 = *(void *)(v2 + 240);
            if (v28) {
              int v25 = "";
            }
            else {
              uint64_t v26 = " ";
            }
            *(_DWORD *)int buf = 136447234;
            uint32_t v39 = "nw_http3_stream_fields_process_unblocked_block_invoke_2";
            __int16 v40 = 2082;
            int v41 = v25;
            __int16 v42 = 2080;
            uint64_t v43 = (void *)v26;
            __int16 v44 = 1024;
            int v45 = v27;
            __int16 v46 = 2048;
            uint64_t v47 = v29;
            _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> delivering deferred input finished",  buf,  0x30u);
            uint64_t v2 = *(void *)(a1 + 40);
          }
        }
      }

      int v3 = *(unsigned __int16 *)(v2 + 736);
      unsigned int v4 = v3 & 0xFFFFFEFF | (*(unsigned __int8 *)(v2 + 738) << 16);
      *(_WORD *)(v2 + 736) = v3 & 0xFEFF;
      *(_BYTE *)(v2 + 73_Block_object_dispose(va, 8) = BYTE2(v4);
      uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 48LL);
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 24);
        if (v6)
        {
          uint64_t v7 = *(void (**)(void))(v6 + 184);
          if (v7)
          {
            v7();
            return;
          }
        }
      }

      __nwlog_obj();
      uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 48LL);
      char v9 = "invalid";
      if (v8)
      {
        char v10 = *(const char **)(v8 + 16);
        if (v10) {
          char v9 = v10;
        }
      }

      *(_DWORD *)int buf = 136446466;
      uint32_t v39 = "nw_http3_stream_fields_process_unblocked_block_invoke";
      __int16 v40 = 2082;
      int v41 = v9;
      int v11 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v36 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v12 = (os_log_s *)__nwlog_obj();
        os_log_type_t v13 = type;
        if (!os_log_type_enabled(v12, type)) {
          goto LABEL_44;
        }
        uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 48LL);
        uint64_t v15 = "invalid";
        if (v14)
        {
          unsigned int v16 = *(const char **)(v14 + 16);
          if (v16) {
            uint64_t v15 = v16;
          }
        }

        *(_DWORD *)int buf = 136446466;
        uint32_t v39 = "nw_http3_stream_fields_process_unblocked_block_invoke";
        __int16 v40 = 2082;
        int v41 = v15;
        char v17 = "%{public}s protocol %{public}s has invalid input_finished callback";
      }

      else if (v36)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v12 = (os_log_s *)__nwlog_obj();
        os_log_type_t v13 = type;
        BOOL v19 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v19)
          {
            uint64_t v20 = *(void *)(*(void *)(a1 + 40) + 48LL);
            uint64_t v21 = "invalid";
            if (v20)
            {
              unsigned int v22 = *(const char **)(v20 + 16);
              if (v22) {
                uint64_t v21 = v22;
              }
            }

            *(_DWORD *)int buf = 136446722;
            uint32_t v39 = "nw_http3_stream_fields_process_unblocked_block_invoke";
            __int16 v40 = 2082;
            int v41 = v21;
            __int16 v42 = 2082;
            uint64_t v43 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s protocol %{public}s has invalid input_finished callback, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(backtrace_string);
          goto LABEL_44;
        }

        if (!v19)
        {
LABEL_44:
          if (v11) {
            free(v11);
          }
          return;
        }

        uint64_t v33 = *(void *)(*(void *)(a1 + 40) + 48LL);
        uint64_t v34 = "invalid";
        if (v33)
        {
          uint64_t v35 = *(const char **)(v33 + 16);
          if (v35) {
            uint64_t v34 = v35;
          }
        }

        *(_DWORD *)int buf = 136446466;
        uint32_t v39 = "nw_http3_stream_fields_process_unblocked_block_invoke";
        __int16 v40 = 2082;
        int v41 = v34;
        char v17 = "%{public}s protocol %{public}s has invalid input_finished callback, no backtrace";
      }

      else
      {
        os_log_type_t v12 = (os_log_s *)__nwlog_obj();
        os_log_type_t v13 = type;
        if (!os_log_type_enabled(v12, type)) {
          goto LABEL_44;
        }
        uint64_t v30 = *(void *)(*(void *)(a1 + 40) + 48LL);
        BOOL v31 = "invalid";
        if (v30)
        {
          int v32 = *(const char **)(v30 + 16);
          if (v32) {
            BOOL v31 = v32;
          }
        }

        *(_DWORD *)int buf = 136446466;
        uint32_t v39 = "nw_http3_stream_fields_process_unblocked_block_invoke";
        __int16 v40 = 2082;
        int v41 = v31;
        char v17 = "%{public}s protocol %{public}s has invalid input_finished callback, backtrace limit exceeded";
      }

      _os_log_impl(&dword_181A5C000, v12, v13, v17, buf, 0x16u);
      goto LABEL_44;
    }
  }

void nw_http3_start_decoder_stream_if_needed(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  if (!*(void *)(a1 + 1072))
  {
    outbound = (_OWORD *)nw_http3_uni_stream_create_outbound(a1, 3LL, 0);
    *(void *)(a1 + 1072) = outbound;
    _OWORD *outbound = *(_OWORD *)a1;
    nw_protocol_set_input_handler(*(void *)(a1 + 1072), a1);
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      unsigned int v4 = *(void (***)(void, void))(v3 + 24);
      if (v4)
      {
        uint64_t v5 = *v4;
        if (v5)
        {
          v5(*(void *)(a1 + 32), *(void *)(a1 + 1072));
          goto LABEL_6;
        }
      }

      __nwlog_obj();
      uint64_t v8 = *(const char **)(v3 + 16);
      if (!v8) {
        uint64_t v8 = "invalid";
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v8 = "invalid";
    }

    *(_DWORD *)int buf = 136446466;
    uint64_t v33 = "nw_http3_start_decoder_stream_if_needed";
    __int16 v34 = 2082;
    uint64_t v35 = v8;
    char v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (__nwlog_fault(v10, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v11 = (os_log_s *)__nwlog_obj();
        os_log_type_t v12 = type;
        if (!os_log_type_enabled(v11, type)) {
          goto LABEL_43;
        }
        os_log_type_t v13 = "invalid";
        if (v3 && *(void *)(v3 + 16)) {
          os_log_type_t v13 = *(const char **)(v3 + 16);
        }
        *(_DWORD *)int buf = 136446466;
        uint64_t v33 = "nw_http3_start_decoder_stream_if_needed";
        __int16 v34 = 2082;
        uint64_t v35 = v13;
        uint64_t v14 = "%{public}s protocol %{public}s has invalid add_input_handler callback";
LABEL_42:
        _os_log_impl(&dword_181A5C000, v11, v12, v14, buf, 0x16u);
        goto LABEL_43;
      }

      if (!v30)
      {
        int v11 = (os_log_s *)__nwlog_obj();
        os_log_type_t v12 = type;
        if (!os_log_type_enabled(v11, type)) {
          goto LABEL_43;
        }
        BOOL v18 = "invalid";
        if (v3 && *(void *)(v3 + 16)) {
          BOOL v18 = *(const char **)(v3 + 16);
        }
        *(_DWORD *)int buf = 136446466;
        uint64_t v33 = "nw_http3_start_decoder_stream_if_needed";
        __int16 v34 = 2082;
        uint64_t v35 = v18;
        uint64_t v14 = "%{public}s protocol %{public}s has invalid add_input_handler callback, backtrace limit exceeded";
        goto LABEL_42;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (!v16) {
          goto LABEL_43;
        }
        BOOL v19 = "invalid";
        if (v3 && *(void *)(v3 + 16)) {
          BOOL v19 = *(const char **)(v3 + 16);
        }
        *(_DWORD *)int buf = 136446466;
        uint64_t v33 = "nw_http3_start_decoder_stream_if_needed";
        __int16 v34 = 2082;
        uint64_t v35 = v19;
        uint64_t v14 = "%{public}s protocol %{public}s has invalid add_input_handler callback, no backtrace";
        goto LABEL_42;
      }

      if (v16)
      {
        char v17 = "invalid";
        if (v3 && *(void *)(v3 + 16)) {
          char v17 = *(const char **)(v3 + 16);
        }
        *(_DWORD *)int buf = 136446722;
        uint64_t v33 = "nw_http3_start_decoder_stream_if_needed";
        __int16 v34 = 2082;
        uint64_t v35 = v17;
        __int16 v36 = 2082;
        uint64_t v37 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s protocol %{public}s has invalid add_input_handler callback, dumping backtrace:%{public}s",  buf,  0x20u);
      }

      free(backtrace_string);
    }

void nw_http3_decoder_stream_process_output(uint64_t a1)
{
  uint64_t v2 = (_WORD *)(a1 + 1373);
  uint64_t v3 = &v101;
  uint64_t v108 = *MEMORY[0x1895F89C0];
  unsigned int v4 = "nw_http3_decoder_stream_process_output";
  while ((*v2 & 0x4000) == 0)
  {
    if (*(_DWORD *)(a1 + 528) == *(_DWORD *)(a1 + 532)) {
      goto LABEL_53;
    }
    v105[0] = 0LL;
    v105[1] = v105;
    uint64_t v5 = *(void *)(a1 + 1072);
    if (!v5) {
      return;
    }
    uint64_t v6 = *(void *)(v5 + 24);
    if (!v6) {
      return;
    }
    uint64_t v7 = *(unsigned int (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, void *))(v6 + 88);
    if (!v7 || !v7(*(void *)(a1 + 1072), a1, 6LL, 6LL, 0xFFFFFFFFLL, v105)) {
      return;
    }
    int v8 = *(_DWORD *)(a1 + 528);
    int v9 = v8 - *(_DWORD *)(a1 + 532);
    if (!v9)
    {
      char v10 = *(FILE **)(a1 + 544);
      if (v10)
      {
        fwrite("qdec: debug: ", 0xDuLL, 1uLL, v10);
        fwrite("no ICI instruction necessary: emitting zero bytes", 0x31uLL, 1uLL, *(FILE **)(a1 + 544));
        fputc(10, *(FILE **)(a1 + 544));
      }

      goto LABEL_34;
    }

    int v11 = *(_DWORD *)(a1 + 516);
    if (v11)
    {
      uint64_t v12 = (v9 + 2 * v11) % (2 * v11);
      if (v12 > 0x3E)
      {
        char v100 = 63;
        unint64_t v13 = v12 - 63;
        if ((unint64_t)(v12 - 63) < 0x80)
        {
          uint64_t v15 = &v100;
          uint64_t v14 = 1LL;
        }

        else
        {
          char v101 = v13 | 0x80;
          if (v13 < 0x4000)
          {
            v13 >>= 7;
            uint64_t v14 = 2LL;
            uint64_t v15 = v3;
          }

          else
          {
            char v102 = (v13 >> 7) | 0x80;
            if (v13 < 0x200000)
            {
              v13 >>= 14;
              uint64_t v14 = 3LL;
              uint64_t v15 = &v102;
            }

            else
            {
              char v103 = (v13 >> 14) | 0x80;
              if (v13 >> 28)
              {
                char v104 = (v13 >> 21) | 0x80;
                uint64_t v14 = 5LL;
                uint64_t v15 = &v104;
                v13 >>= 28;
              }

              else
              {
                v13 >>= 21;
                uint64_t v14 = 4LL;
                uint64_t v15 = &v103;
              }
            }
          }
        }

        BOOL v16 = v15 + 2;
        *(&v100 + v14) = v13;
        if (v15 + 2 <= &v100) {
          goto LABEL_34;
        }
        goto LABEL_22;
      }
    }

    else
    {
      LODWORD(v12) = 0;
    }

    char v100 = v12;
    BOOL v16 = v3;
LABEL_22:
    char v17 = *(FILE **)(a1 + 544);
    if (v17)
    {
      fwrite("qdec: debug: ", 0xDuLL, 1uLL, v17);
      fprintf(*(FILE **)(a1 + 544), "wrote ICI: count=%u", v12);
      fputc(10, *(FILE **)(a1 + 544));
      int v8 = *(_DWORD *)(a1 + 528);
    }

    *(_DWORD *)(a1 + 532) = v8;
    *(_DWORD *)(a1 + 520) += (_DWORD)v16 - &v100;
    if (v16 - &v100 >= 1)
    {
      *(void *)int buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2000000000LL;
      unsigned int v107 = 0LL;
      v93[0] = MEMORY[0x1895F87A8];
      v93[1] = 0x40000000LL;
      unsigned int v94 = (uint64_t (*)(void *))___ZL38nw_http3_decoder_stream_process_outputP17nw_protocol_http3_block_invoke;
      unsigned int v95 = &unk_189BC4378;
      int v96 = buf;
      int64_t v97 = v16 - &v100;
      char v98 = &v100;
      uint64_t v99 = a1;
      uint64_t v18 = v105[0];
      do
      {
        if (!v18) {
          break;
        }
        uint64_t v19 = *(void *)(v18 + 32);
        char v20 = v94(v93);
        uint64_t v18 = v19;
      }

      while ((v20 & 1) != 0);
      _Block_object_dispose(buf, 8);
      goto LABEL_50;
    }

uint64_t ___ZL38nw_http3_decoder_stream_process_outputP17nw_protocol_http3_block_invoke( void *a1, uint64_t a2)
{
  LODWORD(__n) = 0;
  unsigned int v4 = (void *)nw_frame_unclaimed_bytes(a2, &__n);
  uint64_t v5 = *(void *)(*(void *)(a1[4] + 8LL) + 24LL);
  unint64_t v6 = a1[5] - v5;
  uint64_t v7 = (const void *)(a1[6] + v5);
  if (v6 >= __n)
  {
    memcpy(v4, v7, __n);
  }

  else
  {
    memcpy(v4, v7, a1[5] - v5);
    nw_frame_claim(a2, v8, 0, __n - v6);
  }

  *(void *)(*(void *)(a1[4] + 8LL) + 24LL) += __n;
  return 1LL;
}

uint64_t nw_http3_stream_send_section_ack(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (*(_BYTE *)(a1 + 634))
    {
      *(void *)os_log_type_t type = 0LL;
      BOOL v26 = type;
      int output_frames = nw_http3_decoder_stream_get_output_frames(*(void *)(a1 + 336), a1);
      BOOL v3 = output_frames != 0;
      if (output_frames)
      {
        *(void *)int buf = 0LL;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x2000000000LL;
        uint64_t v29 = 0LL;
        v20[0] = MEMORY[0x1895F87A8];
        v20[1] = 0x40000000LL;
        uint64_t v21 = ___ZL32nw_http3_stream_send_section_ackP24nw_protocol_http3_stream_block_invoke;
        os_log_type_t v22 = &unk_189BC4288;
        os_log_type_t v23 = buf;
        uint64_t v24 = a1;
        uint64_t v4 = *(void *)type;
        do
        {
          if (!v4) {
            break;
          }
          uint64_t v5 = *(void *)(v4 + 32);
          char v6 = ((uint64_t (*)(void *))v21)(v20);
          uint64_t v4 = v5;
        }

        while ((v6 & 1) != 0);
        nw_http3_decoder_stream_finalize_output_frames(*(void *)(a1 + 336), a1, (uint64_t)type);
        *(_BYTE *)(a1 + 634) = 0;
        _Block_object_dispose(buf, 8);
      }

      return v3;
    }

    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http3_stream_send_section_ack";
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      unint64_t v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_stream_send_section_ack";
        uint64_t v15 = "%{public}s No section ack to send";
LABEL_39:
        _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0xCu);
      }
    }

    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type[0];
      BOOL v19 = os_log_type_enabled(v13, type[0]);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_stream_send_section_ack";
          *(_WORD *)&void buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s No section ack to send, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_40;
      }

      if (v19)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_stream_send_section_ack";
        uint64_t v15 = "%{public}s No section ack to send, no backtrace";
        goto LABEL_39;
      }
    }

    else
    {
      unint64_t v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_stream_send_section_ack";
        uint64_t v15 = "%{public}s No section ack to send, backtrace limit exceeded";
        goto LABEL_39;
      }
    }

uint64_t nw_http3_stream_received_fields_done(uint64_t a1)
{
  uint64_t v61 = *MEMORY[0x1895F89C0];
  unsigned int v1 = *(_DWORD *)(a1 + 372);
  if (v1 > 8) {
    return 0LL;
  }
  int v3 = 1 << v1;
  if ((v3 & 0x155) != 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v4 = *(_DWORD *)(a1 + 372);
    *(_DWORD *)int buf = 136446466;
    BOOL v56 = "nw_http3_stream_received_fields_done";
    __int16 v57 = 1024;
    *(_DWORD *)int v58 = v4;
    uint64_t v5 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v53 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v6 = (os_log_s *)gLogObj;
      os_log_type_t v7 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_48;
      }
      int v8 = *(_DWORD *)(a1 + 372);
      *(_DWORD *)int buf = 136446466;
      BOOL v56 = "nw_http3_stream_received_fields_done";
      __int16 v57 = 1024;
      *(_DWORD *)int v58 = v8;
      int v9 = "%{public}s Unexpected input state %d";
    }

    else if (v53)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v6 = (os_log_s *)gLogObj;
      os_log_type_t v7 = type;
      BOOL v25 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v25)
        {
          int v26 = *(_DWORD *)(a1 + 372);
          *(_DWORD *)int buf = 136446722;
          BOOL v56 = "nw_http3_stream_received_fields_done";
          __int16 v57 = 1024;
          *(_DWORD *)int v58 = v26;
          *(_WORD *)&void v58[4] = 2082;
          *(void *)&v58[6] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s Unexpected input state %d, dumping backtrace:%{public}s",  buf,  0x1Cu);
        }

        free(backtrace_string);
LABEL_48:
        if (v5)
        {
          uint64_t v42 = (char *)v5;
LABEL_50:
          free(v42);
        }

        return 2LL;
      }

      if (!v25) {
        goto LABEL_48;
      }
      int v41 = *(_DWORD *)(a1 + 372);
      *(_DWORD *)int buf = 136446466;
      BOOL v56 = "nw_http3_stream_received_fields_done";
      __int16 v57 = 1024;
      *(_DWORD *)int v58 = v41;
      int v9 = "%{public}s Unexpected input state %d, no backtrace";
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v6 = (os_log_s *)gLogObj;
      os_log_type_t v7 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_48;
      }
      int v33 = *(_DWORD *)(a1 + 372);
      *(_DWORD *)int buf = 136446466;
      BOOL v56 = "nw_http3_stream_received_fields_done";
      __int16 v57 = 1024;
      *(_DWORD *)int v58 = v33;
      int v9 = "%{public}s Unexpected input state %d, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v6, v7, v9, buf, 0x12u);
    goto LABEL_48;
  }

  if ((v3 & 0xA) == 0)
  {
    BOOL v27 = nw_http_parsed_fields_copy_trailer_fields(*(void **)(a1 + 504));
    if (v27)
    {
      BOOL v28 = (void *)v27;
      nw_http_metadata_set_trailer_fields(*(void **)(a1 + 400), (void *)v27);
      uint64_t v29 = *(_DWORD **)(a1 + 376);
      int v30 = nw_frame_unclaimed_length(v29);
      nw_frame_claim((uint64_t)v29, v31, v30, 0);
      nw_frame_set_metadata(*(void *)(a1 + 376), *(nw_protocol_metadata **)(a1 + 400), 1, 1);
      goto LABEL_33;
    }

void nw_http3_stream_send_stream_cancellation(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 635))
  {
    v11[0] = 0LL;
    v11[1] = v11;
    if (nw_http3_decoder_stream_get_output_frames(*(void *)(a1 + 336), a1))
    {
      v10[0] = 0LL;
      v10[1] = v10;
      v10[2] = 0x2000000000LL;
      v10[3] = 0LL;
      v5[0] = MEMORY[0x1895F87A8];
      v5[1] = 0x40000000LL;
      char v6 = ___ZL40nw_http3_stream_send_stream_cancellationP24nw_protocol_http3_stream_block_invoke;
      os_log_type_t v7 = &unk_189BC4350;
      int v8 = v10;
      uint64_t v9 = a1;
      uint64_t v2 = v11[0];
      do
      {
        if (!v2) {
          break;
        }
        uint64_t v3 = *(void *)(v2 + 32);
        char v4 = ((uint64_t (*)(void *))v6)(v5);
        uint64_t v2 = v3;
      }

      while ((v4 & 1) != 0);
      nw_http3_decoder_stream_finalize_output_frames(*(void *)(a1 + 336), a1, (uint64_t)v11);
      *(_BYTE *)(a1 + 635) = 0;
      _Block_object_dispose(v10, 8);
    }
  }

uint64_t nw_http3_decoder_stream_get_output_frames(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v18 = "nw_http3_decoder_stream_get_output_frames";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)int buf = 136446210;
      int v18 = "nw_http3_decoder_stream_get_output_frames";
      uint64_t v12 = "%{public}s called with null http3";
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)int buf = 136446466;
          int v18 = "nw_http3_decoder_stream_get_output_frames";
          __int16 v19 = 2082;
          unsigned int v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s called with null http3, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }

      if (!v14)
      {
LABEL_26:
        if (v9) {
          free(v9);
        }
        return 0LL;
      }

      *(_DWORD *)int buf = 136446210;
      int v18 = "nw_http3_decoder_stream_get_output_frames";
      uint64_t v12 = "%{public}s called with null http3, no backtrace";
    }

    else
    {
      uint64_t v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)int buf = 136446210;
      int v18 = "nw_http3_decoder_stream_get_output_frames";
      uint64_t v12 = "%{public}s called with null http3, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v10, v11, v12, buf, 0xCu);
    goto LABEL_26;
  }

  uint64_t v3 = *(void *)(a1 + 944);
  if (v3)
  {
    if (v3 != a2)
    {
      uint64_t result = 0LL;
      *(void *)(a2 + 592) = 0LL;
      uint64_t v5 = *(void **)(a1 + 952);
      *(void *)(a2 + 600) = v5;
      void *v5 = a2;
      *(void *)(a1 + 952) = a2 + 592;
      return result;
    }
  }

  else
  {
    *(void *)(a2 + 592) = 0LL;
    char v6 = *(void **)(a1 + 952);
    *(void *)(a2 + 600) = v6;
    void *v6 = a2;
    *(void *)(a1 + 952) = a2 + 592;
  }

  nw_http3_start_decoder_stream_if_needed(a1);
  uint64_t result = *(void *)(a1 + 1072);
  if (result)
  {
    uint64_t v7 = *(void *)(result + 24);
    if (v7)
    {
      int v8 = *(uint64_t (**)(void))(v7 + 88);
      if (v8)
      {
        uint64_t result = v8();
        if ((_DWORD)result) {
          *(_WORD *)(a1 + 1373) |= 0x4000u;
        }
        return result;
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t ___ZL40nw_http3_stream_send_stream_cancellationP24nw_protocol_http3_stream_block_invoke( uint64_t a1, uint64_t a2)
{
  LODWORD(__n) = 0;
  uint64_t v3 = (void *)nw_frame_unclaimed_bytes(a2, &__n);
  memcpy( v3,  (const void *)(*(void *)(a1 + 40) + *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) + 730LL),  __n);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += __n;
  return 1LL;
}

void nw_http3_decoder_stream_finalize_output_frames(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (*(void *)(a1 + 944) != a2)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)int buf = 136446210;
      int v33 = "nw_http3_decoder_stream_finalize_output_frames";
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v30 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v4 = (os_log_s *)gLogObj;
        os_log_type_t v5 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_27;
        }
        *(_DWORD *)int buf = 136446210;
        int v33 = "nw_http3_decoder_stream_finalize_output_frames";
        char v6 = "%{public}s Decoder stream is not being used by current stream";
        goto LABEL_25;
      }

      if (!v30)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v4 = (os_log_s *)gLogObj;
        os_log_type_t v5 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_27;
        }
        *(_DWORD *)int buf = 136446210;
        int v33 = "nw_http3_decoder_stream_finalize_output_frames";
        char v6 = "%{public}s Decoder stream is not being used by current stream, backtrace limit exceeded";
        goto LABEL_25;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v4 = (os_log_s *)gLogObj;
      os_log_type_t v5 = type;
      BOOL v10 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!backtrace_string)
      {
        if (!v10) {
          goto LABEL_27;
        }
        *(_DWORD *)int buf = 136446210;
        int v33 = "nw_http3_decoder_stream_finalize_output_frames";
        char v6 = "%{public}s Decoder stream is not being used by current stream, no backtrace";
        goto LABEL_25;
      }

      if (v10)
      {
        *(_DWORD *)int buf = 136446466;
        int v33 = "nw_http3_decoder_stream_finalize_output_frames";
        __int16 v34 = 2082;
        int v35 = backtrace_string;
        os_log_type_t v11 = "%{public}s Decoder stream is not being used by current stream, dumping backtrace:%{public}s";
LABEL_13:
        _os_log_impl(&dword_181A5C000, v4, v5, v11, buf, 0x16u);
        goto LABEL_14;
      }

      goto LABEL_14;
    }

    uint64_t v7 = *(void *)(a2 + 592);
    int v8 = *(void **)(a2 + 600);
    if (v7)
    {
      *(void *)(v7 + 600) = v8;
      int v8 = *(void **)(a2 + 600);
    }

    else
    {
      *(void *)(a1 + 952) = v8;
    }

    *int v8 = v7;
    *(void *)(a2 + 592) = 0LL;
    *(void *)(a2 + 600) = 0LL;
    int v12 = *(unsigned __int16 *)(a1 + 1373);
    unsigned int v13 = v12 & 0xFFFFBFFF | (*(unsigned __int8 *)(a1 + 1375) << 16);
    *(_WORD *)(a1 + 1373) = v12 & 0xBFFF;
    *(_BYTE *)(a1 + 1375) = BYTE2(v13);
    uint64_t v14 = *(void *)(a1 + 1072);
    if (v14)
    {
      uint64_t v15 = *(void *)(v14 + 24);
      if (v15)
      {
        int v16 = *(void (**)(void, uint64_t))(v15 + 96);
        if (v16)
        {
          v16(*(void *)(a1 + 1072), a3);
          return;
        }
      }

      __nwlog_obj();
      unsigned int v20 = *(const char **)(v14 + 16);
      if (!v20) {
        unsigned int v20 = "invalid";
      }
    }

    else
    {
      __nwlog_obj();
      unsigned int v20 = "invalid";
    }

    *(_DWORD *)int buf = 136446466;
    int v33 = "nw_http3_decoder_stream_finalize_output_frames";
    __int16 v34 = 2082;
    int v35 = (void *)v20;
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (__nwlog_fault(v3, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v22 = (os_log_s *)__nwlog_obj();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          uint64_t v24 = "invalid";
          if (v14)
          {
            if (*(void *)(v14 + 16)) {
              uint64_t v24 = *(const char **)(v14 + 16);
            }
          }

          *(_DWORD *)int buf = 136446466;
          int v33 = "nw_http3_decoder_stream_finalize_output_frames";
          __int16 v34 = 2082;
          int v35 = (void *)v24;
          char v6 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback";
LABEL_69:
          BOOL v17 = v22;
          os_log_type_t v18 = v23;
          uint32_t v19 = 22;
          goto LABEL_26;
        }
      }

      else if (v30)
      {
        BOOL v25 = (char *)__nw_create_backtrace_string();
        id v22 = (os_log_s *)__nwlog_obj();
        os_log_type_t v23 = type;
        BOOL v26 = os_log_type_enabled(v22, type);
        if (v25)
        {
          if (v26)
          {
            BOOL v27 = "invalid";
            if (v14 && *(void *)(v14 + 16)) {
              BOOL v27 = *(const char **)(v14 + 16);
            }
            *(_DWORD *)int buf = 136446722;
            int v33 = "nw_http3_decoder_stream_finalize_output_frames";
            __int16 v34 = 2082;
            int v35 = (void *)v27;
            __int16 v36 = 2082;
            uint64_t v37 = v25;
            _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s protocol %{public}s has invalid finalize_output_frames callback, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v25);
        }

        else if (v26)
        {
          uint64_t v29 = "invalid";
          if (v14 && *(void *)(v14 + 16)) {
            uint64_t v29 = *(const char **)(v14 + 16);
          }
          *(_DWORD *)int buf = 136446466;
          int v33 = "nw_http3_decoder_stream_finalize_output_frames";
          __int16 v34 = 2082;
          int v35 = (void *)v29;
          char v6 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback, no backtrace";
          goto LABEL_69;
        }
      }

      else
      {
        id v22 = (os_log_s *)__nwlog_obj();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          BOOL v28 = "invalid";
          if (v14 && *(void *)(v14 + 16)) {
            BOOL v28 = *(const char **)(v14 + 16);
          }
          *(_DWORD *)int buf = 136446466;
          int v33 = "nw_http3_decoder_stream_finalize_output_frames";
          __int16 v34 = 2082;
          int v35 = (void *)v28;
          char v6 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback, backtrace limit exceeded";
          goto LABEL_69;
        }
      }
    }

void nw_protocol_http3_stream_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v81 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v72 = "nw_protocol_http3_stream_disconnect";
    int v33 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v69 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = type;
      if (!os_log_type_enabled(v34, type)) {
        goto LABEL_143;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v72 = "nw_protocol_http3_stream_disconnect";
      __int16 v36 = "%{public}s called with null protocol";
    }

    else if (v69)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = type;
      BOOL v41 = os_log_type_enabled(v34, type);
      if (backtrace_string)
      {
        if (v41)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v72 = "nw_protocol_http3_stream_disconnect";
          __int16 v73 = 2082;
          uint64_t v74 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v34,  v35,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_143:
        if (!v33) {
          return;
        }
        goto LABEL_144;
      }

      if (!v41) {
        goto LABEL_143;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v72 = "nw_protocol_http3_stream_disconnect";
      __int16 v36 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      __int16 v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = type;
      if (!os_log_type_enabled(v34, type)) {
        goto LABEL_143;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v72 = "nw_protocol_http3_stream_disconnect";
      __int16 v36 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_142;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v72 = "nw_protocol_http3_stream_disconnect";
    int v33 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v69 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v69)
      {
        __int16 v34 = (os_log_s *)__nwlog_obj();
        os_log_type_t v35 = type;
        if (!os_log_type_enabled(v34, type)) {
          goto LABEL_143;
        }
        *(_DWORD *)int buf = 136446210;
        BOOL v72 = "nw_protocol_http3_stream_disconnect";
        __int16 v36 = "%{public}s called with null http3_stream, backtrace limit exceeded";
        goto LABEL_142;
      }

      uint64_t v42 = (char *)__nw_create_backtrace_string();
      __int16 v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = type;
      BOOL v43 = os_log_type_enabled(v34, type);
      if (!v42)
      {
        if (!v43) {
          goto LABEL_143;
        }
        *(_DWORD *)int buf = 136446210;
        BOOL v72 = "nw_protocol_http3_stream_disconnect";
        __int16 v36 = "%{public}s called with null http3_stream, no backtrace";
        goto LABEL_142;
      }

      if (!v43) {
        goto LABEL_113;
      }
      *(_DWORD *)int buf = 136446466;
      BOOL v72 = "nw_protocol_http3_stream_disconnect";
      __int16 v73 = 2082;
      uint64_t v74 = v42;
      uint64_t v44 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
      goto LABEL_112;
    }

    __int16 v34 = (os_log_s *)__nwlog_obj();
    os_log_type_t v35 = type;
    if (!os_log_type_enabled(v34, type)) {
      goto LABEL_143;
    }
    *(_DWORD *)int buf = 136446210;
    BOOL v72 = "nw_protocol_http3_stream_disconnect";
    __int16 v36 = "%{public}s called with null http3_stream";
LABEL_142:
    _os_log_impl(&dword_181A5C000, v34, v35, v36, buf, 0xCu);
    goto LABEL_143;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v72 = "nw_protocol_http3_stream_disconnect";
    int v33 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v69 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = type;
      if (!os_log_type_enabled(v34, type)) {
        goto LABEL_143;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v72 = "nw_protocol_http3_stream_disconnect";
      __int16 v36 = "%{public}s called with null other_protocol";
      goto LABEL_142;
    }

    if (!v69)
    {
      __int16 v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = type;
      if (!os_log_type_enabled(v34, type)) {
        goto LABEL_143;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v72 = "nw_protocol_http3_stream_disconnect";
      __int16 v36 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_142;
    }

    uint64_t v42 = (char *)__nw_create_backtrace_string();
    __int16 v34 = (os_log_s *)__nwlog_obj();
    os_log_type_t v35 = type;
    BOOL v45 = os_log_type_enabled(v34, type);
    if (!v42)
    {
      if (!v45) {
        goto LABEL_143;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v72 = "nw_protocol_http3_stream_disconnect";
      __int16 v36 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_142;
    }

    if (!v45) {
      goto LABEL_113;
    }
    *(_DWORD *)int buf = 136446466;
    BOOL v72 = "nw_protocol_http3_stream_disconnect";
    __int16 v73 = 2082;
    uint64_t v74 = v42;
    uint64_t v44 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
LABEL_112:
    _os_log_impl(&dword_181A5C000, v34, v35, v44, buf, 0x16u);
    goto LABEL_113;
  }

  if ((*((_WORD *)handle + 368) & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v37 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
      {
        int v38 = *(_DWORD *)(*((void *)handle + 42) + 1280LL);
        uint64_t v39 = *((void *)handle + 30);
        *(_DWORD *)int buf = 136447234;
        BOOL v72 = "nw_protocol_http3_stream_disconnect";
        __int16 v73 = 2082;
        uint64_t v74 = handle + 636;
        __int16 v75 = 2080;
        uint64_t v76 = " ";
        __int16 v77 = 1024;
        int v78 = v38;
        __int16 v79 = 2048;
        uint64_t v80 = v39;
        _os_log_impl(&dword_181A5C000, v37, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> called", buf, 0x30u);
      }
    }
  }

  uint64_t v3 = handle + 736;
  char v4 = (void *)*((void *)handle + 52);
  if (v4)
  {
    uint64_t v5 = *((void *)handle + 33);
    if (v5 == -1)
    {
      uint64_t v6 = *((void *)handle + 54);
      if (v6)
      {
        uint64_t v5 = (*(uint64_t (**)(void))(v6 + 16))(*((void *)handle + 54));
        char v4 = (void *)*((void *)handle + 52);
      }

      else if ((*v3 & 0x10) != 0)
      {
        uint64_t v5 = 256LL;
      }

      else
      {
        uint64_t v5 = 268LL;
      }
    }

    nw_quic_stream_set_application_error(v4, v5);
  }

  uint64_t v7 = *((void *)handle + 12);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 24);
    if (v8)
    {
      uint64_t v9 = *(void (**)(void))(v8 + 32);
      if (v9) {
        v9();
      }
    }
  }

  uint64_t v10 = *((void *)handle + 42);
  if (!v10)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v72 = "nw_protocol_http3_stream_disconnect";
    int v33 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v69 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = type;
      if (!os_log_type_enabled(v34, type)) {
        goto LABEL_143;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v72 = "nw_protocol_http3_stream_disconnect";
      __int16 v36 = "%{public}s called with null http3_stream->http3_connection";
      goto LABEL_142;
    }

    if (!v69)
    {
      __int16 v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = type;
      if (!os_log_type_enabled(v34, type)) {
        goto LABEL_143;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v72 = "nw_protocol_http3_stream_disconnect";
      __int16 v36 = "%{public}s called with null http3_stream->http3_connection, backtrace limit exceeded";
      goto LABEL_142;
    }

    uint64_t v42 = (char *)__nw_create_backtrace_string();
    __int16 v34 = (os_log_s *)__nwlog_obj();
    os_log_type_t v35 = type;
    BOOL v46 = os_log_type_enabled(v34, type);
    if (!v42)
    {
      if (!v46) {
        goto LABEL_143;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v72 = "nw_protocol_http3_stream_disconnect";
      __int16 v36 = "%{public}s called with null http3_stream->http3_connection, no backtrace";
      goto LABEL_142;
    }

    if (v46)
    {
      *(_DWORD *)int buf = 136446466;
      BOOL v72 = "nw_protocol_http3_stream_disconnect";
      __int16 v73 = 2082;
      uint64_t v74 = v42;
      uint64_t v44 = "%{public}s called with null http3_stream->http3_connection, dumping backtrace:%{public}s";
      goto LABEL_112;
    }

void nw::http::content_length_manager::set_inbound_message( nw::http::content_length_manager *this, nw_protocol_metadata *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v21 = "set_inbound_message";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v19 = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (v19 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = v19;
      if (!os_log_type_enabled(v9, v19)) {
        goto LABEL_42;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v21 = "set_inbound_message";
      os_log_type_t v11 = "%{public}s called with null metadata";
      goto LABEL_41;
    }

    if (!v18)
    {
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = v19;
      if (!os_log_type_enabled(v9, v19)) {
        goto LABEL_42;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v21 = "set_inbound_message";
      os_log_type_t v11 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_41;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = v19;
    BOOL v13 = os_log_type_enabled(v9, v19);
    if (!backtrace_string)
    {
      if (!v13) {
        goto LABEL_42;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v21 = "set_inbound_message";
      os_log_type_t v11 = "%{public}s called with null metadata, no backtrace";
      goto LABEL_41;
    }

    if (v13)
    {
      *(_DWORD *)int buf = 136446466;
      BOOL v21 = "set_inbound_message";
      __int16 v22 = 2082;
      os_log_type_t v23 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_42:
    if (!v8) {
      return;
    }
    goto LABEL_43;
  }

  if (!nw_protocol_metadata_is_http(a2))
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v21 = "set_inbound_message";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v19 = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (v19 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = v19;
      if (!os_log_type_enabled(v9, v19)) {
        goto LABEL_42;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v21 = "set_inbound_message";
      os_log_type_t v11 = "%{public}s called with null (nw_protocol_metadata_is_http(metadata))";
      goto LABEL_41;
    }

    if (!v18)
    {
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = v19;
      if (!os_log_type_enabled(v9, v19)) {
        goto LABEL_42;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v21 = "set_inbound_message";
      os_log_type_t v11 = "%{public}s called with null (nw_protocol_metadata_is_http(metadata)), backtrace limit exceeded";
      goto LABEL_41;
    }

    uint64_t v14 = (char *)__nw_create_backtrace_string();
    uint64_t v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = v19;
    BOOL v15 = os_log_type_enabled(v9, v19);
    if (v14)
    {
      if (v15)
      {
        *(_DWORD *)int buf = 136446466;
        BOOL v21 = "set_inbound_message";
        __int16 v22 = 2082;
        os_log_type_t v23 = v14;
        _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null (nw_protocol_metadata_is_http(metadata)), dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v14);
      if (!v8) {
        return;
      }
LABEL_43:
      free(v8);
      return;
    }

    if (v15)
    {
      *(_DWORD *)int buf = 136446210;
      BOOL v21 = "set_inbound_message";
      os_log_type_t v11 = "%{public}s called with null (nw_protocol_metadata_is_http(metadata)), no backtrace";
LABEL_41:
      _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
      goto LABEL_42;
    }

    goto LABEL_42;
  }

  if (*((_BYTE *)this + 48))
  {
    id v4 = nw_http_metadata_copy_request(a2);
    BOOL has_method = nw_http_request_has_method(v4, (uint64_t)"HEAD");
    uint64_t v6 = MEMORY[0x1895F87A8];
    *((_BYTE *)this + 49) = has_method;
    v17[0] = v6;
    v17[1] = 0x40000000LL;
    v17[2] = ___ZN2nw4http22content_length_manager19set_inbound_messageEP20nw_protocol_metadata_block_invoke;
    v17[3] = &__block_descriptor_tmp_88_60778;
    v17[4] = this;
    uint64_t v7 = v17;
    goto LABEL_5;
  }

  id v4 = nw_http_metadata_copy_response(a2);
  nw_http_response_get_status_code(v4);
  if (!*((_BYTE *)this + 49))
  {
    v16[0] = MEMORY[0x1895F87A8];
    v16[1] = 0x40000000LL;
    v16[2] = ___ZN2nw4http22content_length_manager19set_inbound_messageEP20nw_protocol_metadata_block_invoke_2;
    v16[3] = &__block_descriptor_tmp_89_60779;
    void v16[4] = this;
    uint64_t v7 = v16;
LABEL_5:
    nw_http_fields_access_value_by_name(v4, (unint64_t)"Content-Length", v7);
    if (!v4) {
      return;
    }
    goto LABEL_13;
  }

  if (!*((_BYTE *)this + 32))
  {
    *((_BYTE *)this + 32) = 1;
    *((void *)this + 3) = 0LL;
    if (!v4) {
      return;
    }
    goto LABEL_13;
  }

  *((void *)this + 3) = 0LL;
  if (v4) {
LABEL_13:
  }
    os_release(v4);
}

unint64_t ___ZL36nw_http3_stream_received_fields_doneP24nw_protocol_http3_stream_block_invoke( unint64_t result, char *__s)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  *(void *)os_log_type_t v23 = 0LL;
  if (__s)
  {
    uint64_t v3 = result;
    uint64_t result = strlen(__s);
    if (result <= 7)
    {
      v23[0] = *__s;
      if (v23[0])
      {
        v23[1] = __s[1];
        if (v23[1])
        {
          v23[2] = __s[2];
          if (v23[2])
          {
            v23[3] = __s[3];
            if (v23[3])
            {
              void v23[4] = __s[4];
              if (v23[4])
              {
                v23[5] = __s[5];
                if (v23[5])
                {
                  v23[6] = __s[6];
                  if (v23[6]) {
                    v23[7] = 0;
                  }
                }
              }
            }
          }
        }
      }

      uint64_t v4 = *(void *)(v3 + 32);
      if (!v4 || (*(_WORD *)(v4 + 736) & 0x800) == 0)
      {
        if (gLogDatapath)
        {
          uint64_t v5 = (os_log_s *)__nwlog_obj();
          BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG);
          uint64_t v4 = *(void *)(v3 + 32);
          if (v6)
          {
            uint64_t v7 = (const char *)(v4 + 636);
            uint64_t v8 = "";
            int v9 = *(_DWORD *)(*(void *)(v4 + 336) + 1280LL);
            if (!v4) {
              uint64_t v7 = "";
            }
            uint64_t v10 = *(void *)(v4 + 240);
            if (v4) {
              uint64_t v8 = " ";
            }
            int v11 = 136447490;
            int v12 = "nw_http3_stream_received_fields_done_block_invoke";
            __int16 v13 = 2082;
            uint64_t v14 = v7;
            __int16 v15 = 2080;
            unint64_t v16 = v8;
            __int16 v17 = 1024;
            int v18 = v9;
            __int16 v19 = 2048;
            uint64_t v20 = v10;
            __int16 v21 = 2082;
            __int16 v22 = v23;
            _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> received CONNECT-UDP for flow ID %{public}s",  (uint8_t *)&v11,  0x3Au);
            uint64_t v4 = *(void *)(v3 + 32);
          }
        }
      }

      uint64_t result = atoi(v23);
      *(void *)(v4 + 24_Block_object_dispose(va, 8) = (int)result;
      *(_WORD *)(v4 + 736) |= 0x20u;
      *(_DWORD *)(*(void *)(v3 + 32) + 372LL) = 8;
    }
  }

  return result;
}

void ___ZL36nw_http3_stream_received_fields_doneP24nw_protocol_http3_stream_block_invoke_84( uint64_t a1, char *__s1)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  if (!__s1 || strcmp(__s1, "connect-udp") && strcmp(__s1, "connect-ip")) {
    return;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  unint64_t v5 = *(void *)(v4 + 240);
  if ((v5 & 3) != 0)
  {
    if ((*(_WORD *)(v4 + 736) & 0x800) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v6 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = (const char *)(v7 + 636);
        int v9 = "";
        BOOL v10 = v7 == 0;
        if (!v7) {
          uint64_t v8 = "";
        }
        int v11 = *(_DWORD *)(*(void *)(v7 + 336) + 1280LL);
        uint64_t v12 = *(void *)(v7 + 240);
        if (!v10) {
          int v9 = " ";
        }
        int v24 = 136447490;
        BOOL v25 = "nw_http3_stream_received_fields_done_block_invoke";
        __int16 v26 = 2082;
        BOOL v27 = v8;
        __int16 v28 = 2080;
        BOOL v29 = v9;
        __int16 v30 = 1024;
        int v31 = v11;
        __int16 v32 = 2048;
        uint64_t v33 = v12;
        __int16 v34 = 2048;
        uint64_t v35 = v12;
        __int16 v13 = "%{public}s %{public}s%s<i%u:s%llu> received CONNECT(connect-udp/ip) for invalid stream ID %llu";
        uint64_t v14 = (os_log_s *)v6;
        os_log_type_t v15 = OS_LOG_TYPE_ERROR;
LABEL_12:
        _os_log_impl(&dword_181A5C000, v14, v15, v13, (uint8_t *)&v24, 0x3Au);
      }
    }
  }

  else
  {
    *(void *)(v4 + 24_Block_object_dispose(va, 8) = v5 >> 2;
    if ((*(_WORD *)(v4 + 736) & 0x800) == 0)
    {
      if (gLogDatapath)
      {
        __int16 v17 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v18 = *(void *)(a1 + 32);
          __int16 v19 = (const char *)(v18 + 636);
          uint64_t v20 = "";
          BOOL v21 = v18 == 0;
          if (!v18) {
            __int16 v19 = "";
          }
          int v22 = *(_DWORD *)(*(void *)(v18 + 336) + 1280LL);
          uint64_t v23 = *(void *)(v18 + 240);
          if (!v21) {
            uint64_t v20 = " ";
          }
          int v24 = 136447490;
          BOOL v25 = "nw_http3_stream_received_fields_done_block_invoke";
          __int16 v26 = 2082;
          BOOL v27 = v19;
          __int16 v28 = 2080;
          BOOL v29 = v20;
          __int16 v30 = 1024;
          int v31 = v22;
          __int16 v32 = 2048;
          uint64_t v33 = v23;
          __int16 v34 = 2048;
          uint64_t v35 = v23;
          __int16 v13 = "%{public}s %{public}s%s<i%u:s%llu> received CONNECT(connect-udp/ip) for stream ID %llu";
          uint64_t v14 = v17;
          os_log_type_t v15 = OS_LOG_TYPE_DEBUG;
          goto LABEL_12;
        }
      }
    }
  }

  uint64_t v16 = *(void *)(a1 + 32);
  if ((*(_WORD *)(*(void *)(a1 + 40) + 1373LL) & 4) != 0) {
    *(_WORD *)(v16 + 736) |= 0x20u;
  }
  else {
    nw_protocol_http3_stream_start_datagram_flow(v16);
  }
  *(_DWORD *)(*(void *)(a1 + 32) + 372LL) = 8;
}

void nw_protocol_http3_stream_start_datagram_flow(uint64_t a1)
{
  uint64_t v75 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v64 = "nw_protocol_http3_stream_start_datagram_flow";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v61 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_51;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v64 = "nw_protocol_http3_stream_start_datagram_flow";
      __int16 v17 = "%{public}s called with null http3_stream";
    }

    else if (v61)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v29 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v29)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v64 = "nw_protocol_http3_stream_start_datagram_flow";
          __int16 v65 = 2082;
          uint64_t v66 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v15,  v16,  "%{public}s called with null http3_stream, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_51;
      }

      if (!v29)
      {
LABEL_51:
        if (v14) {
          free(v14);
        }
        return;
      }

      *(_DWORD *)int buf = 136446210;
      os_log_type_t v64 = "nw_protocol_http3_stream_start_datagram_flow";
      __int16 v17 = "%{public}s called with null http3_stream, no backtrace";
    }

    else
    {
      os_log_type_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_51;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v64 = "nw_protocol_http3_stream_start_datagram_flow";
      __int16 v17 = "%{public}s called with null http3_stream, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v15, v16, v17, buf, 0xCu);
    goto LABEL_51;
  }

  uint64_t v2 = (unsigned __int16 *)(a1 + 736);
  if ((*(_WORD *)(a1 + 736) & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v18 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        int v19 = *(_DWORD *)(*(void *)(a1 + 336) + 1280LL);
        uint64_t v20 = *(void *)(a1 + 240);
        *(_DWORD *)int buf = 136447234;
        os_log_type_t v64 = "nw_protocol_http3_stream_start_datagram_flow";
        __int16 v65 = 2082;
        uint64_t v66 = (void *)(a1 + 636);
        __int16 v67 = 2080;
        unint64_t v68 = " ";
        __int16 v69 = 1024;
        int v70 = v19;
        __int16 v71 = 2048;
        uint64_t v72 = v20;
        _os_log_impl(&dword_181A5C000, v18, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> called", buf, 0x30u);
      }
    }
  }

  int v3 = *v2;
  int v4 = v3 | (*((unsigned __int8 *)v2 + 2) << 16);
  if ((v3 & 0x10) == 0)
  {
    *((_BYTE *)v2 + 2) = BYTE2(v4);
    unsigned __int16 *v2 = v4 | 0x10;
    nw_protocol_set_input_handler(a1 + 64, *(void *)(a1 + 48));
    *(_OWORD *)(a1 + 64) = *(_OWORD *)a1;
    uint64_t v5 = *(void *)(a1 + 336);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 32);
      if (v6)
      {
        uint64_t v7 = *(void (***)(uint64_t, uint64_t))(v6 + 24);
        if (v7)
        {
          uint64_t v8 = *v7;
          if (v8)
          {
            v8(v6, a1 + 64);
            nw_protocol_set_output_handler(a1 + 64, v6);
            goto LABEL_10;
          }
        }

        __nwlog_obj();
        char v21 = 0;
        int v22 = *(const char **)(v6 + 16);
        if (!v22) {
          int v22 = "invalid";
        }
LABEL_61:
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v64 = "nw_protocol_http3_stream_start_datagram_flow";
        __int16 v65 = 2082;
        uint64_t v66 = (void *)v22;
        uint64_t v36 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v61 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v37 = (os_log_s *)__nwlog_obj();
          os_log_type_t v38 = type;
          if (!os_log_type_enabled(v37, type)) {
            goto LABEL_87;
          }
          uint64_t v39 = "invalid";
          if (v6 && *(void *)(v6 + 16)) {
            uint64_t v39 = *(const char **)(v6 + 16);
          }
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v64 = "nw_protocol_http3_stream_start_datagram_flow";
          __int16 v65 = 2082;
          uint64_t v66 = (void *)v39;
          int v40 = "%{public}s protocol %{public}s has invalid add_input_handler callback";
        }

        else if (v61)
        {
          BOOL v41 = (char *)__nw_create_backtrace_string();
          uint64_t v37 = (os_log_s *)__nwlog_obj();
          os_log_type_t v38 = type;
          BOOL v42 = os_log_type_enabled(v37, type);
          if (v41)
          {
            if (v42)
            {
              BOOL v43 = "invalid";
              if (v6 && *(void *)(v6 + 16)) {
                BOOL v43 = *(const char **)(v6 + 16);
              }
              *(_DWORD *)int buf = 136446722;
              os_log_type_t v64 = "nw_protocol_http3_stream_start_datagram_flow";
              __int16 v65 = 2082;
              uint64_t v66 = (void *)v43;
              __int16 v67 = 2082;
              unint64_t v68 = v41;
              _os_log_impl( &dword_181A5C000,  v37,  v38,  "%{public}s protocol %{public}s has invalid add_input_handler callback, dumping backtrace:%{public}s",  buf,  0x20u);
            }

            free(v41);
LABEL_87:
            if (v36) {
              free(v36);
            }
            nw_protocol_set_output_handler(a1 + 64, v6);
            if ((v21 & 1) != 0)
            {
              __nwlog_obj();
              char v23 = 1;
              if (!v6)
              {
                BOOL v46 = "invalid";
                goto LABEL_93;
              }

uint64_t ___ZL44nw_protocol_http3_stream_start_datagram_flowP24nw_protocol_http3_stream_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(void *)(*(void *)(a1 + 32) + 424LL) && nw_protocol_metadata_is_quic_stream(a3))
  {
    if (a3) {
      uint64_t v5 = os_retain(a3);
    }
    else {
      uint64_t v5 = 0LL;
    }
    *(void *)(*(void *)(a1 + 32) + 424LL) = v5;
    if (nw_quic_stream_get_has_datagram_variant_flow_id(a3))
    {
      *(void *)(*(void *)(a1 + 32) + 248LL) = nw_quic_stream_get_datagram_variant_flow_id(a3);
      *(_DWORD *)(*(void *)(a1 + 32) + 628LL) = nw_quic_stream_get_usable_datagram_frame_size(a3);
    }
  }

  return 1LL;
}

void ___ZN2nw4http22content_length_manager19set_inbound_messageEP20nw_protocol_metadata_block_invoke( uint64_t a1, char *__s)
{
  if (__s)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    size_t v4 = strlen(__s);
    if (v4 >= 0x7FFFFFFFFFFFFFF8LL) {
      abort();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v7 = v4 | 7;
      }
      uint64_t v8 = v7 + 1;
      p_dst = (std::string *)operator new(v7 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__l.__cap_ = v8 | 0x8000000000000000LL;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }

    else
    {
      __dst.__r_.__value_.__s.__size_ = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_10:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        *(void *)(v3 + 24) = std::stoull(&__dst, 0LL, 10);
        *(_BYTE *)(v3 + 32) = 1;
        return;
      }
    }

    memcpy(p_dst, __s, v5);
    goto LABEL_10;
  }

void ___ZN2nw4http22content_length_manager19set_inbound_messageEP20nw_protocol_metadata_block_invoke_2( uint64_t a1, char *__s)
{
  if (__s)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    size_t v4 = strlen(__s);
    if (v4 >= 0x7FFFFFFFFFFFFFF8LL) {
      abort();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v7 = v4 | 7;
      }
      uint64_t v8 = v7 + 1;
      p_dst = (std::string *)operator new(v7 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__l.__cap_ = v8 | 0x8000000000000000LL;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }

    else
    {
      __dst.__r_.__value_.__s.__size_ = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_10:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        *(void *)(v3 + 24) = std::stoull(&__dst, 0LL, 10);
        *(_BYTE *)(v3 + 32) = 1;
        return;
      }
    }

    memcpy(p_dst, __s, v5);
    goto LABEL_10;
  }

uint64_t ___ZL32nw_http3_stream_send_section_ackP24nw_protocol_http3_stream_block_invoke( uint64_t a1, uint64_t a2)
{
  LODWORD(__n) = 0;
  uint64_t v3 = (void *)nw_frame_unclaimed_bytes(a2, &__n);
  memcpy( v3,  (const void *)(*(void *)(a1 + 40) + *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) + 720LL),  __n);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += __n;
  return 1LL;
}

BOOL nw_http3_uni_stream_create_outbound(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  uint64_t v6 = calloc(1uLL, 0x88uLL);
  if (!v6)
  {
    BOOL v10 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int buf = 136446722;
    *(void *)&uint8_t buf[4] = "strict_calloc";
    *(_WORD *)&void buf[12] = 2048;
    *(void *)&_BYTE buf[14] = 1LL;
    *(_WORD *)&uint8_t buf[22] = 2048;
    uint64_t v15 = 136LL;
    uint64_t v11 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v11);
    if (result)
    {
      __break(1u);
      return result;
    }

    free(v11);
  }

  v6[16] = 0LL;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 7) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *(_OWORD *)uint64_t v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  if (gLogDatapath)
  {
    uint64_t v12 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http3_uni_stream_create_outbound";
      *(_WORD *)&void buf[12] = 2048;
      *(void *)&_BYTE buf[14] = v6;
      _os_log_impl(&dword_181A5C000, v12, OS_LOG_TYPE_DEBUG, "%{public}s created uni_stream %p", buf, 0x16u);
    }
  }

  *(void *)int buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2000000000LL;
  uint64_t v15 = (uint64_t)v6;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 0x40000000LL;
  aBlock[2] = ___ZL35nw_http3_uni_stream_create_outboundP17nw_protocol_http3yb_block_invoke;
  aBlock[3] = &unk_189BC3FE8;
  void aBlock[4] = buf;
  v6[12] = _Block_copy(aBlock);
  _Block_object_dispose(buf, 8);
  v6[2] = &g_http3_uni_stream_protocol_identifier;
  v6[3] = &nw_protocol_http3_uni_stream_get_callbacks(void)::protocol_callbacks;
  v6[5] = v6;
  char v7 = *((_BYTE *)v6 + 131);
  v6[8] = a2;
  v6[9] = a1;
  *((_BYTE *)v6 + 130) = 0;
  if (a3) {
    char v8 = 16;
  }
  else {
    char v8 = 0;
  }
  *((_BYTE *)v6 + 131) = v7 & 0xEF | v8 | 1;
  return (BOOL)v6;
}

uint64_t ___ZL35nw_http3_uni_stream_create_outboundP17nw_protocol_http3yb_block_invoke(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0LL;
  }
  return *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
}

void nw_http3_stream_handle_fields(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = a3;
  uint64_t v86 = *MEMORY[0x1895F89C0];
  unsigned int v70 = 0;
  uint64_t v8 = nw_frame_unclaimed_bytes(a3, &v70);
  if (!v8)
  {
LABEL_44:
    nw_frame_finalize(v5);
    return;
  }

  int v10 = v8;
  uint64_t v68 = v8;
  uint64_t v69 = 10LL;
  uint64_t v11 = a1 + 736;
  uint64_t v12 = *(void *)(a1 + 336);
  if ((*(_WORD *)(a1 + 736) & 4) != 0)
  {
    uint64_t v17 = v5;
    int v18 = a4;
    uint64_t v19 = *(void *)(a1 + 240);
    if (a2 > 1)
    {
      uint64_t v23 = v70;
      __int128 v78 = 0u;
      uint64_t v80 = 0LL;
      __int128 v84 = 0u;
      __int128 v85 = 0u;
      __int128 v82 = 0u;
      __int128 v83 = 0u;
      __int128 v81 = 0u;
      __int128 v77 = 0u;
      memset(buf, 0, 32);
      *(void *)&_BYTE buf[32] = a1;
      uint64_t v74 = v19;
      unint64_t v75 = a2;
      unint64_t v76 = a2;
      __int16 v79 = parse_header_prefix;
      int v24 = *(FILE **)(v12 + 544);
      if (v24)
      {
        uint64_t v25 = v70;
        fwrite("qdec: debug: ", 0xDuLL, 1uLL, v24);
        fprintf(*(FILE **)(v12 + 544), "begin reading header block for stream %llu", v19);
        fputc(10, *(FILE **)(v12 + 544));
        uint64_t v23 = v25;
      }

      int v16 = qdec_header_process(v12 + 496, buf, &v68, v23, (_BYTE *)(a1 + 720), &v69);
    }

    else
    {
      uint64_t v20 = *(FILE **)(v12 + 544);
      if (v20)
      {
        fwrite("qdec: debug: ", 0xDuLL, 1uLL, v20);
        fprintf( *(FILE **)(v12 + 544),  "header block for stream %llu is too short (%zd byte%.*s)",  v19,  a2,  a2 != 1,  "s");
        fputc(10, *(FILE **)(v12 + 544));
      }

      *(void *)(v12 + 824) = 0x10AF00000000LL;
      *(void *)(v12 + 832) = 0LL;
      *(void *)(v12 + 840) = v19;
      int v16 = 3;
    }

    int v22 = *(_WORD *)(a1 + 736) & 0xFFFB | (*(unsigned __int8 *)(a1 + 738) << 16);
    *(_WORD *)v11 &= ~4u;
    *(_BYTE *)(a1 + 73_Block_object_dispose(va, 8) = BYTE2(v22);
    a4 = v18;
    uint64_t v5 = v17;
  }

  else
  {
    uint64_t v13 = v70;
    uint64_t v14 = (void *)(v12 + 576);
    while (1)
    {
      uint64_t v14 = (void *)*v14;
      if (!v14) {
        break;
      }
      if (v14[4] == a1)
      {
        uint64_t v15 = *(FILE **)(v12 + 544);
        if (v15)
        {
          fwrite("qdec: debug: ", 0xDuLL, 1uLL, v15);
          fprintf(*(FILE **)(v12 + 544), "continue reading header block for stream %llu", v14[5]);
          fputc(10, *(FILE **)(v12 + 544));
        }

        int v16 = qdec_header_process(v12 + 496, v14, &v68, v13, (_BYTE *)(a1 + 720), &v69);
        goto LABEL_16;
      }
    }

    char v21 = *(FILE **)(v12 + 544);
    if (v21)
    {
      fwrite("qdec: info: ", 0xCuLL, 1uLL, v21);
      fwrite("could not find header block to continue reading", 0x2FuLL, 1uLL, *(FILE **)(v12 + 544));
      fputc(10, *(FILE **)(v12 + 544));
    }

    int v16 = 3;
LABEL_16:
    LOWORD(v22) = *(_WORD *)v11;
  }

  unsigned int v26 = v68 - v10;
  if ((v22 & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      __int16 v65 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
      {
        int v66 = *(_DWORD *)(*(void *)(a1 + 336) + 1280LL);
        uint64_t v67 = *(void *)(a1 + 240);
        *(_DWORD *)int buf = 136447746;
        *(void *)&uint8_t buf[4] = "nw_http3_stream_handle_fields";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&_BYTE buf[14] = a1 + 636;
        *(_WORD *)&uint8_t buf[22] = 2080;
        *(void *)&_BYTE buf[24] = " ";
        *(_WORD *)&_BYTE buf[32] = 1024;
        *(_DWORD *)&buf[34] = v66;
        *(_WORD *)&buf[38] = 2048;
        uint64_t v74 = v67;
        LOWORD(v75) = 1024;
        *(_DWORD *)((char *)&v75 + 2) = v16;
        HIWORD(v75) = 1024;
        LODWORD(v76) = v26;
        _os_log_impl( &dword_181A5C000,  v65,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> qpack returned status %d, consumed %u bytes",  buf,  0x3Cu);
      }
    }
  }

  switch(v16)
  {
    case 0:
      BOOL v27 = *(void **)(a1 + 488);
      if (v27)
      {
        free(v27);
        *(void *)(a1 + 48_Block_object_dispose(va, 8) = 0LL;
      }

      *(void *)(a1 + 496) = 0LL;
      *(_WORD *)v11 |= 4u;
      if (!a4 || v70 > v26) {
        goto LABEL_43;
      }
      if (!v69)
      {
        *(void *)(a1 + 376) = v5;
LABEL_102:
        nw_http3_stream_received_fields_done(a1);
        return;
      }

      *(_BYTE *)(a1 + 634) = v69;
      unsigned int v28 = *(_DWORD *)(a1 + 372);
      if (v28 > 8) {
        goto LABEL_101;
      }
      if (((1 << v28) & 0x1DD) != 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v29 = *(_DWORD *)(a1 + 372);
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http3_stream_need_section_ack";
        *(_WORD *)&void buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = v29;
        __int16 v30 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v71 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          int v31 = (os_log_s *)__nwlog_obj();
          os_log_type_t v32 = type;
          if (!os_log_type_enabled(v31, type)) {
            goto LABEL_99;
          }
          int v33 = *(_DWORD *)(a1 + 372);
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_stream_need_section_ack";
          *(_WORD *)&void buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = v33;
          __int16 v34 = "%{public}s Unexpected input state %d";
        }

        else if (v71)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          int v31 = (os_log_s *)__nwlog_obj();
          os_log_type_t v32 = type;
          BOOL v53 = os_log_type_enabled(v31, type);
          if (backtrace_string)
          {
            if (v53)
            {
              int v54 = *(_DWORD *)(a1 + 372);
              *(_DWORD *)int buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_http3_stream_need_section_ack";
              *(_WORD *)&void buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = v54;
              *(_WORD *)&buf[18] = 2082;
              *(void *)&_BYTE buf[20] = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v31,  v32,  "%{public}s Unexpected input state %d, dumping backtrace:%{public}s",  buf,  0x1Cu);
            }

            free(backtrace_string);
            goto LABEL_99;
          }

          if (!v53)
          {
LABEL_99:
            if (v30) {
              free(v30);
            }
            goto LABEL_101;
          }

          int v63 = *(_DWORD *)(a1 + 372);
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_stream_need_section_ack";
          *(_WORD *)&void buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = v63;
          __int16 v34 = "%{public}s Unexpected input state %d, no backtrace";
        }

        else
        {
          int v31 = (os_log_s *)__nwlog_obj();
          os_log_type_t v32 = type;
          if (!os_log_type_enabled(v31, type)) {
            goto LABEL_99;
          }
          int v62 = *(_DWORD *)(a1 + 372);
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_stream_need_section_ack";
          *(_WORD *)&void buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = v62;
          __int16 v34 = "%{public}s Unexpected input state %d, backtrace limit exceeded";
        }

        _os_log_impl(&dword_181A5C000, v31, v32, v34, buf, 0x12u);
        goto LABEL_99;
      }

      if (v28 == 1) {
        *(_DWORD *)(a1 + 372) = 3;
      }
      else {
        *(_DWORD *)(a1 + 372) = 7;
      }
LABEL_101:
      char v64 = nw_http3_stream_send_section_ack(a1);
      *(void *)(a1 + 376) = v5;
      if ((v64 & 1) != 0) {
        goto LABEL_102;
      }
      return;
    case 1:
      nw_frame_claim(v5, v9, v26, 0);
      unsigned int v35 = *(_DWORD *)(a1 + 372);
      if (v35 > 8) {
        goto LABEL_78;
      }
      if (((1 << v35) & 0x1DD) == 0)
      {
        if (v35 == 1) {
          *(_DWORD *)(a1 + 372) = 2;
        }
        else {
          *(_DWORD *)(a1 + 372) = 6;
        }
        goto LABEL_78;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v36 = *(_DWORD *)(a1 + 372);
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http3_stream_received_fields_blocked";
      *(_WORD *)&void buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = v36;
      uint64_t v37 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v71 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v38 = (os_log_s *)gLogObj;
        os_log_type_t v39 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_76;
        }
        int v40 = *(_DWORD *)(a1 + 372);
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http3_stream_received_fields_blocked";
        *(_WORD *)&void buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = v40;
        BOOL v41 = "%{public}s Unexpected input state %d";
LABEL_75:
        _os_log_impl(&dword_181A5C000, v38, v39, v41, buf, 0x12u);
        goto LABEL_76;
      }

      if (!v71)
      {
        os_log_type_t v38 = (os_log_s *)__nwlog_obj();
        os_log_type_t v39 = type;
        if (!os_log_type_enabled(v38, type)) {
          goto LABEL_76;
        }
        int v51 = *(_DWORD *)(a1 + 372);
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http3_stream_received_fields_blocked";
        *(_WORD *)&void buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = v51;
        BOOL v41 = "%{public}s Unexpected input state %d, backtrace limit exceeded";
        goto LABEL_75;
      }

      BOOL v46 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v38 = (os_log_s *)gLogObj;
      os_log_type_t v39 = type;
      BOOL v47 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!v46)
      {
        if (!v47) {
          goto LABEL_76;
        }
        int v55 = *(_DWORD *)(a1 + 372);
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http3_stream_received_fields_blocked";
        *(_WORD *)&void buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = v55;
        BOOL v41 = "%{public}s Unexpected input state %d, no backtrace";
        goto LABEL_75;
      }

      if (v47)
      {
        int v48 = *(_DWORD *)(a1 + 372);
        *(_DWORD *)int buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http3_stream_received_fields_blocked";
        *(_WORD *)&void buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = v48;
        *(_WORD *)&buf[18] = 2082;
        *(void *)&_BYTE buf[20] = v46;
        _os_log_impl( &dword_181A5C000,  v38,  v39,  "%{public}s Unexpected input state %d, dumping backtrace:%{public}s",  buf,  0x1Cu);
      }

      free(v46);
LABEL_76:
      if (v37) {
        free(v37);
      }
LABEL_78:
      uint64_t v57 = *(void *)(a1 + 216);
      BOOL v56 = (uint64_t *)(a1 + 216);
      *(void *)(v5 + 32) = v57;
      int v58 = (void *)(v57 + 40);
      if (v57) {
        char v59 = v58;
      }
      else {
        char v59 = v56 + 1;
      }
      *char v59 = v5 + 32;
      *BOOL v56 = v5;
      *(void *)(v5 + 40) = v56;
      if (a4) {
        __int16 v60 = 8;
      }
      else {
        __int16 v60 = 0;
      }
      int v61 = *(_WORD *)v11 & 0xFFF7 | (*(unsigned __int8 *)(v11 + 2) << 16);
      *(_WORD *)uint64_t v11 = *(_WORD *)v11 & 0xFFF7 | v60;
      *(_BYTE *)(v11 + 2) = BYTE2(v61);
      return;
    case 2:
      if (v70 != v26)
      {
        nw_frame_finalize(v5);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)int buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http3_stream_handle_fields";
        *(_WORD *)&void buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = v26;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&_BYTE buf[20] = v70;
        BOOL v42 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v71 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v43 = (os_log_s *)gLogObj;
          os_log_type_t v44 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_90;
          }
          *(_DWORD *)int buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_http3_stream_handle_fields";
          *(_WORD *)&void buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = v26;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&_BYTE buf[20] = v70;
          BOOL v45 = "%{public}s Expected consumed_size (%u) to be equal to frame_size (%u)";
        }

        else if (v71)
        {
          os_log_type_t v49 = (char *)__nw_create_backtrace_string();
          BOOL v43 = (os_log_s *)__nwlog_obj();
          os_log_type_t v44 = type;
          BOOL v50 = os_log_type_enabled(v43, type);
          if (v49)
          {
            if (v50)
            {
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http3_stream_handle_fields";
              *(_WORD *)&void buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = v26;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&_BYTE buf[20] = v70;
              *(_WORD *)&_BYTE buf[24] = 2082;
              *(void *)&buf[26] = v49;
              _os_log_impl( &dword_181A5C000,  v43,  v44,  "%{public}s Expected consumed_size (%u) to be equal to frame_size (%u), dumping backtrace:%{public}s",  buf,  0x22u);
            }

            free(v49);
            goto LABEL_90;
          }

          if (!v50)
          {
LABEL_90:
            if (v42) {
              free(v42);
            }
            return;
          }

          *(_DWORD *)int buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_http3_stream_handle_fields";
          *(_WORD *)&void buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = v26;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&_BYTE buf[20] = v70;
          BOOL v45 = "%{public}s Expected consumed_size (%u) to be equal to frame_size (%u), no backtrace";
        }

        else
        {
          BOOL v43 = (os_log_s *)__nwlog_obj();
          os_log_type_t v44 = type;
          if (!os_log_type_enabled(v43, type)) {
            goto LABEL_90;
          }
          *(_DWORD *)int buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_http3_stream_handle_fields";
          *(_WORD *)&void buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = v26;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&_BYTE buf[20] = v70;
          BOOL v45 = "%{public}s Expected consumed_size (%u) to be equal to frame_size (%u), backtrace limit exceeded";
        }

        _os_log_impl(&dword_181A5C000, v43, v44, v45, buf, 0x18u);
        goto LABEL_90;
      }

      if (!a4) {
        goto LABEL_44;
      }
LABEL_43:
      nw_frame_finalize(v5);
      nw_http3_fail_all_streams(*(void *)(a1 + 336), 512LL);
      return;
    case 3:
      nw_frame_finalize(v5);
      *(void *)(a1 + 264) = 270LL;
      nw_protocol_http3_stream_error((nw_protocol *)a1, (nw_protocol *)a1, 94);
      nw_protocol_http3_stream_disconnect((nw_protocol *)a1, (nw_protocol *)a1);
      return;
    default:
      return;
  }

uint64_t nw_http3_framer_get_input_frames( uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, void *a5, void *a6, _BYTE *a7, uint64_t a8, uint64_t a9)
{
  if (*(void *)(a1 + 16)) {
    return nw_http3_framer_deliver_http3_frame_body(a1, a2, a3, a4, a5, a6, a7, a9);
  }
  uint64_t v15 = MEMORY[0x1895F87A8];
  uint64_t v16 = *(void *)(a1 + 48);
  if (v16) {
    goto LABEL_13;
  }
LABEL_6:
  uint64_t v17 = *(void *)(a1 + 40);
  if (!v17) {
    return 0LL;
  }
  uint64_t v18 = *(void *)(v17 + 24);
  if (!v18) {
    return 0LL;
  }
  uint64_t v19 = *(unsigned int (**)(void))(v18 + 80);
  if (!v19) {
    return 0LL;
  }
  uint64_t v33 = 0LL;
  __int16 v34 = &v33;
  if (!v19()) {
    return 0LL;
  }
  if (v33)
  {
    **(void **)(a1 + 56) = v33;
    uint64_t v20 = v34;
    *(void *)(v33 + 40) = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v20;
  }

  uint64_t v16 = *(void *)(a1 + 48);
LABEL_13:
  while (1)
  {
    uint64_t v33 = 0LL;
    __int16 v34 = &v33;
    uint64_t v35 = 0x2000000000LL;
    char v36 = 0;
    v27[0] = v15;
    v27[1] = 0x40000000LL;
    unsigned int v28 = (uint64_t (*)(void *))___ZL32nw_http3_framer_get_input_framesP15nw_http3_framerjjjPyS1_PbPjP16nw_frame_array_s_block_invoke;
    int v29 = &unk_189BC4158;
    __int16 v30 = &v33;
    uint64_t v31 = a1;
    uint64_t v32 = a8;
    do
    {
      if (!v16) {
        break;
      }
      uint64_t v21 = *(void *)(v16 + 32);
      char v22 = v28(v27);
      uint64_t v16 = v21;
    }

    while ((v22 & 1) != 0);
    if (*((_BYTE *)v34 + 24)) {
      break;
    }
    _Block_object_dispose(&v33, 8);
    uint64_t v16 = *(void *)(a1 + 48);
    if (!v16) {
      goto LABEL_6;
    }
  }

  uint64_t v23 = nw_http3_framer_deliver_http3_frame_body(a1, a2, a3, a4, a5, a6, a7, a9);
  _Block_object_dispose(&v33, 8);
  return v23;
}

uint64_t ___ZL37nw_http3_control_stream_process_inputP17nw_protocol_http3_block_invoke( void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void **)(a2 + 40);
  if (v4)
  {
    *(void *)(v4 + 40) = v5;
    uint64_t v5 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(*(void *)(a1[4] + 8LL) + 48LL) = v5;
  }

  void *v5 = v4;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  LODWORD(__n) = 0;
  uint64_t v6 = (const void *)nw_frame_unclaimed_bytes(a2, &__n);
  memcpy((void *)(a1[6] + *(unsigned int *)(*(void *)(a1[5] + 8LL) + 24LL)), v6, __n);
  *(_DWORD *)(*(void *)(a1[5] + 8LL) + 24LL) += __n;
  nw_frame_finalize(a2);
  return 1LL;
}

BOOL nw_http3_parse_settings(uint64_t a1, _DWORD *a2, unsigned int a3, __n128 a4)
{
  uint64_t v65 = *MEMORY[0x1895F89C0];
  if (a3)
  {
    char v5 = 0;
    char v6 = 0;
    unint64_t v7 = 0LL;
    unint64_t v8 = 0LL;
    char v9 = 0;
    unint64_t v10 = a3;
    uint64_t v11 = (unsigned __int16 *)(a1 + 1373);
    uint64_t v12 = a1 + 1289;
    unint64_t v13 = -1LL;
    uint64_t v14 = &qword_18C45F000;
    a4.n128_u64[0] = 136447490LL;
    while (2)
    {
      if (a2)
      {
        unint64_t v15 = *(unsigned __int8 *)a2;
        if (v15 > 0x3F)
        {
          if (v15 >> 6 == 2)
          {
            if (v10 < 4) {
              return 0LL;
            }
            unint64_t v15 = bswap32(*a2 & 0xFFFFFF7F);
            uint64_t v16 = 4LL;
            unint64_t v17 = v10 - 4;
            if (v10 == 4) {
              return 0LL;
            }
          }

          else if (v15 >> 6 == 1)
          {
            if (v10 < 2) {
              return 0LL;
            }
            unint64_t v15 = bswap32(*(_WORD *)a2 & 0xFFBF) >> 16;
            uint64_t v16 = 2LL;
            unint64_t v17 = v10 - 2;
            if (v10 == 2) {
              return 0LL;
            }
          }

          else
          {
            if (v10 < 8) {
              return 0LL;
            }
            unint64_t v15 = bswap64(*(void *)a2 & 0xFFFFFFFFFFFFFF3FLL);
            uint64_t v16 = 8LL;
            unint64_t v17 = v10 - 8;
            if (v10 == 8) {
              return 0LL;
            }
          }
        }

        else
        {
          uint64_t v16 = 1LL;
          unint64_t v17 = v10 - 1;
          if (v10 == 1) {
            return 0LL;
          }
        }

        uint64_t v18 = (_DWORD *)((char *)a2 + v16);
        unint64_t v19 = *((unsigned __int8 *)a2 + v16);
        if (v19 <= 0x3F)
        {
          uint64_t v20 = 1LL;
LABEL_28:
          if (((*v11 | (*(unsigned __int8 *)(a1 + 1375) << 16)) & 0x400000) == 0)
          {
            if (*((_BYTE *)v14 + 1537))
            {
              unint64_t v49 = v8;
              unint64_t v50 = v7;
              BOOL v47 = (char *)v12;
              unint64_t v48 = v13;
              __n128 v46 = a4;
              os_log_t log = (os_log_s *)__nwlog_obj();
              BOOL v22 = os_log_type_enabled(log, OS_LOG_TYPE_DEBUG);
              a4 = v46;
              uint64_t v14 = &qword_18C45F000;
              uint64_t v12 = (uint64_t)v47;
              unint64_t v13 = v48;
              unint64_t v8 = v49;
              unint64_t v7 = v50;
              if (v22)
              {
                int v23 = *(_DWORD *)(a1 + 1280);
                *(_DWORD *)int buf = v46.n128_u32[0];
                int v54 = "nw_http3_parse_settings";
                __int16 v55 = 2082;
                BOOL v56 = v47;
                __int16 v57 = 2080;
                int v58 = " ";
                __int16 v59 = 1024;
                int v60 = v23;
                __int16 v61 = 2048;
                unint64_t v62 = v15;
                __int16 v63 = 2048;
                unint64_t v64 = v19;
                _os_log_impl( &dword_181A5C000,  log,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> setting %llu = %llu",  buf,  0x3Au);
                a4 = v46;
                uint64_t v14 = &qword_18C45F000;
                uint64_t v12 = (uint64_t)v47;
                unint64_t v13 = v48;
                unint64_t v8 = v49;
                unint64_t v7 = v50;
              }
            }
          }

          BOOL result = 0LL;
          switch(v15)
          {
            case 1uLL:
              if ((v5 & 1) != 0) {
                return 0LL;
              }
              char v5 = 1;
              unint64_t v8 = v19;
              goto LABEL_3;
            case 2uLL:
            case 3uLL:
            case 4uLL:
            case 5uLL:
              return result;
            case 6uLL:
              if ((v6 & 1) != 0) {
                return 0LL;
              }
              char v6 = 1;
              unint64_t v13 = v19;
              goto LABEL_3;
            case 7uLL:
              if ((v9 & 1) != 0) {
                return 0LL;
              }
              char v9 = 1;
              unint64_t v7 = v19;
              goto LABEL_3;
            default:
LABEL_3:
              a2 = (_DWORD *)((char *)v18 + v20);
              unint64_t v10 = v17 - v20;
              if (v17 != v20) {
                continue;
              }
              goto LABEL_40;
          }
        }

        if (v19 >> 6 == 2)
        {
          if (v17 >= 4)
          {
            unint64_t v19 = bswap32(*v18 & 0xFFFFFF7F);
            uint64_t v20 = 4LL;
            goto LABEL_28;
          }
        }

        else if (v19 >> 6 == 1)
        {
          if (v17 >= 2)
          {
            unint64_t v19 = bswap32(*(_WORD *)v18 & 0xFFBF) >> 16;
            uint64_t v20 = 2LL;
            goto LABEL_28;
          }
        }

        else if (v17 >= 8)
        {
          unint64_t v19 = bswap64(*(void *)v18 & 0xFFFFFFFFFFFFFF3FLL);
          uint64_t v20 = 8LL;
          goto LABEL_28;
        }

        return 0LL;
      }

      break;
    }

    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v54 = "_http_vle_decode";
    os_log_type_t v39 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v51 = 0;
    if (__nwlog_fault(v39, &type, &v51))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v40 = (os_log_s *)__nwlog_obj();
        os_log_type_t v41 = type;
        if (!os_log_type_enabled(v40, type)) {
          goto LABEL_92;
        }
        *(_DWORD *)int buf = 136446210;
        int v54 = "_http_vle_decode";
        BOOL v42 = "%{public}s called with null *buffer";
        goto LABEL_91;
      }

      if (!v51)
      {
        int v40 = (os_log_s *)__nwlog_obj();
        os_log_type_t v41 = type;
        if (!os_log_type_enabled(v40, type)) {
          goto LABEL_92;
        }
        *(_DWORD *)int buf = 136446210;
        int v54 = "_http_vle_decode";
        BOOL v42 = "%{public}s called with null *buffer, backtrace limit exceeded";
        goto LABEL_91;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int v40 = (os_log_s *)__nwlog_obj();
      os_log_type_t v41 = type;
      BOOL v44 = os_log_type_enabled(v40, type);
      if (backtrace_string)
      {
        if (v44)
        {
          *(_DWORD *)int buf = 136446466;
          int v54 = "_http_vle_decode";
          __int16 v55 = 2082;
          BOOL v56 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v40,  v41,  "%{public}s called with null *buffer, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_92;
      }

      if (v44)
      {
        *(_DWORD *)int buf = 136446210;
        int v54 = "_http_vle_decode";
        BOOL v42 = "%{public}s called with null *buffer, no backtrace";
LABEL_91:
        _os_log_impl(&dword_181A5C000, v40, v41, v42, buf, 0xCu);
      }
    }

void nw_http3_try_persist_0rtt_state(uint64_t a1)
{
  if (uuid_is_null((const unsigned __int8 *)(a1 + 848))
    && *(void *)(a1 + 1160)
    && *(void *)(a1 + 1168)
    && *(void *)(a1 + 1176))
  {
    BOOL v2 = nw_array_create();
    nw_array_append(v2, *(void **)(a1 + 1176));
    nw_array_append(v2, *(void **)(a1 + 1160));
    nw_array_append(v2, *(void **)(a1 + 1168));
    BOOL v3 = nw_array_create();
    nw_array_append(v3, (void *)v2);
    if (nw_storage_copy_shared_token != -1) {
      dispatch_once(&nw_storage_copy_shared_token, &__block_literal_global_44978);
    }
    id v4 = (id)nw_storage_copy_shared_storage;
    char v5 = *(void **)(a1 + 1096);
    if (v5) {
      char v6 = os_retain(v5);
    }
    else {
      char v6 = 0LL;
    }
    while (1)
    {
      unint64_t v7 = v6;
      id v8 = nw_endpoint_copy_parent_endpoint(v6);
      if (!v8) {
        break;
      }
      char v6 = v8;
      if (v7) {
        os_release(v7);
      }
    }

    nw_storage_store_items( v4,  (uint64_t)"h3_0rtt",  (void *)v3,  v6,  *(void **)(a1 + 1256),  &__block_literal_global_76_60924);
    if (v6) {
      os_release(v6);
    }
    if (v4) {
      os_release(v4);
    }
    if (v2) {
      os_release((void *)v2);
    }
    if (v3) {
      os_release((void *)v3);
    }
  }

void nw_http3_notify_do_not_reuse(uint64_t a1)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  uint64_t v1 = *(void *)(a1 + 880);
  if (v1)
  {
    BOOL v3 = (unsigned __int16 *)(a1 + 1373);
    id v4 = (const char *)(a1 + 1289);
    do
    {
      uint64_t v5 = v1;
      uint64_t v1 = *(void *)(v1 + 544);
      if ((*(_WORD *)(v5 + 736) & 0x8000) != 0)
      {
        if (((*v3 | (*((unsigned __int8 *)v3 + 2) << 16)) & 0x400000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v6 = (os_log_s *)gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          {
            int v7 = *(_DWORD *)(a1 + 1280);
            uint64_t v8 = *(void *)(v5 + 240);
            *(_DWORD *)int buf = 136447234;
            unsigned int v34 = "nw_http3_notify_do_not_reuse";
            __int16 v35 = 2082;
            char v36 = v4;
            __int16 v37 = 2080;
            os_log_type_t v38 = " ";
            __int16 v39 = 1024;
            int v40 = v7;
            __int16 v41 = 2048;
            uint64_t v42 = v8;
            _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> Notifying stream %llu to not reuse the connection",  buf,  0x30u);
          }
        }

        uint64_t v9 = *(void *)(v5 + 24);
        if (!v9 || (unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v9 + 160)) == 0LL)
        {
          __nwlog_obj();
          uint64_t v11 = *(const char **)(v5 + 16);
          if (!v11) {
            uint64_t v11 = "invalid";
          }
          *(_DWORD *)int buf = 136446466;
          unsigned int v34 = "nw_http3_notify_do_not_reuse";
          __int16 v35 = 2082;
          char v36 = v11;
          uint64_t v12 = (const char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v31 = 0;
          unint64_t v30 = (char *)v12;
          if (type == OS_LOG_TYPE_FAULT)
          {
            unint64_t v13 = (os_log_s *)__nwlog_obj();
            os_log_type_t v14 = type;
            *(void *)BOOL v27 = v13;
            if (os_log_type_enabled(v13, type))
            {
              unint64_t v15 = *(const char **)(v5 + 16);
              if (!v15) {
                unint64_t v15 = "invalid";
              }
              *(_DWORD *)int buf = 136446466;
              unsigned int v34 = "nw_http3_notify_do_not_reuse";
              __int16 v35 = 2082;
              char v36 = v15;
              uint64_t v16 = *(os_log_s **)v27;
              os_log_type_t v17 = v14;
              uint64_t v18 = "%{public}s protocol %{public}s has invalid notify callback";
              goto LABEL_34;
            }

            goto LABEL_35;
          }

          if (v31)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            os_log_t log = (os_log_s *)__nwlog_obj();
            os_log_type_t v28 = type;
            BOOL v20 = os_log_type_enabled(log, type);
            if (backtrace_string)
            {
              if (v20)
              {
                uint64_t v21 = *(const char **)(v5 + 16);
                if (!v21) {
                  uint64_t v21 = "invalid";
                }
                *(_DWORD *)int buf = 136446722;
                unsigned int v34 = "nw_http3_notify_do_not_reuse";
                __int16 v35 = 2082;
                char v36 = v21;
                __int16 v37 = 2082;
                os_log_type_t v38 = backtrace_string;
                _os_log_impl( &dword_181A5C000,  log,  v28,  "%{public}s protocol %{public}s has invalid notify callback, dumping backtrace:%{public}s",  buf,  0x20u);
              }

              free(backtrace_string);
              goto LABEL_35;
            }

            if (!v20)
            {
LABEL_35:
              if (v30) {
                free(v30);
              }
              continue;
            }

            int v25 = *(const char **)(v5 + 16);
            if (!v25) {
              int v25 = "invalid";
            }
            *(_DWORD *)int buf = 136446466;
            unsigned int v34 = "nw_http3_notify_do_not_reuse";
            __int16 v35 = 2082;
            char v36 = v25;
            uint64_t v16 = log;
            os_log_type_t v17 = v28;
            uint64_t v18 = "%{public}s protocol %{public}s has invalid notify callback, no backtrace";
          }

          else
          {
            BOOL v22 = (os_log_s *)__nwlog_obj();
            os_log_type_t v23 = type;
            *(void *)int v29 = v22;
            if (!os_log_type_enabled(v22, type)) {
              goto LABEL_35;
            }
            uint64_t v24 = *(const char **)(v5 + 16);
            if (!v24) {
              uint64_t v24 = "invalid";
            }
            *(_DWORD *)int buf = 136446466;
            unsigned int v34 = "nw_http3_notify_do_not_reuse";
            __int16 v35 = 2082;
            char v36 = v24;
            uint64_t v16 = *(os_log_s **)v29;
            os_log_type_t v17 = v23;
            uint64_t v18 = "%{public}s protocol %{public}s has invalid notify callback, backtrace limit exceeded";
          }

uint64_t ___ZL37nw_http3_control_stream_process_inputP17nw_protocol_http3_block_invoke_68( void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void **)(a2 + 40);
  if (v4)
  {
    *(void *)(v4 + 40) = v5;
    uint64_t v5 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(*(void *)(a1[4] + 8LL) + 48LL) = v5;
  }

  void *v5 = v4;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  LODWORD(__n) = 0;
  char v6 = (const void *)nw_frame_unclaimed_bytes(a2, &__n);
  memcpy((void *)(a1[6] + *(unsigned int *)(*(void *)(a1[5] + 8LL) + 24LL)), v6, __n);
  *(_DWORD *)(*(void *)(a1[5] + 8LL) + 24LL) += __n;
  nw_frame_finalize(a2);
  return 1LL;
}

void nw_http3_start_encoder_stream_if_needed(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  if (!*(void *)(a1 + 1056))
  {
    outbound = (_OWORD *)nw_http3_uni_stream_create_outbound(a1, 2LL, 1);
    *(void *)(a1 + 1056) = outbound;
    _OWORD *outbound = *(_OWORD *)a1;
    nw_protocol_set_input_handler(*(void *)(a1 + 1056), a1);
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void (***)(void, void))(v3 + 24);
      if (v4)
      {
        uint64_t v5 = *v4;
        if (v5)
        {
          v5(*(void *)(a1 + 32), *(void *)(a1 + 1056));
          goto LABEL_6;
        }
      }

      __nwlog_obj();
      uint64_t v8 = *(const char **)(v3 + 16);
      if (!v8) {
        uint64_t v8 = "invalid";
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v8 = "invalid";
    }

    *(_DWORD *)int buf = 136446466;
    uint64_t v33 = "nw_http3_start_encoder_stream_if_needed";
    __int16 v34 = 2082;
    __int16 v35 = v8;
    unint64_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (__nwlog_fault(v10, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v11 = (os_log_s *)__nwlog_obj();
        os_log_type_t v12 = type;
        if (!os_log_type_enabled(v11, type)) {
          goto LABEL_43;
        }
        unint64_t v13 = "invalid";
        if (v3 && *(void *)(v3 + 16)) {
          unint64_t v13 = *(const char **)(v3 + 16);
        }
        *(_DWORD *)int buf = 136446466;
        uint64_t v33 = "nw_http3_start_encoder_stream_if_needed";
        __int16 v34 = 2082;
        __int16 v35 = v13;
        os_log_type_t v14 = "%{public}s protocol %{public}s has invalid add_input_handler callback";
LABEL_42:
        _os_log_impl(&dword_181A5C000, v11, v12, v14, buf, 0x16u);
        goto LABEL_43;
      }

      if (!v30)
      {
        uint64_t v11 = (os_log_s *)__nwlog_obj();
        os_log_type_t v12 = type;
        if (!os_log_type_enabled(v11, type)) {
          goto LABEL_43;
        }
        uint64_t v18 = "invalid";
        if (v3 && *(void *)(v3 + 16)) {
          uint64_t v18 = *(const char **)(v3 + 16);
        }
        *(_DWORD *)int buf = 136446466;
        uint64_t v33 = "nw_http3_start_encoder_stream_if_needed";
        __int16 v34 = 2082;
        __int16 v35 = v18;
        os_log_type_t v14 = "%{public}s protocol %{public}s has invalid add_input_handler callback, backtrace limit exceeded";
        goto LABEL_42;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (!v16) {
          goto LABEL_43;
        }
        unint64_t v19 = "invalid";
        if (v3 && *(void *)(v3 + 16)) {
          unint64_t v19 = *(const char **)(v3 + 16);
        }
        *(_DWORD *)int buf = 136446466;
        uint64_t v33 = "nw_http3_start_encoder_stream_if_needed";
        __int16 v34 = 2082;
        __int16 v35 = v19;
        os_log_type_t v14 = "%{public}s protocol %{public}s has invalid add_input_handler callback, no backtrace";
        goto LABEL_42;
      }

      if (v16)
      {
        os_log_type_t v17 = "invalid";
        if (v3 && *(void *)(v3 + 16)) {
          os_log_type_t v17 = *(const char **)(v3 + 16);
        }
        *(_DWORD *)int buf = 136446722;
        uint64_t v33 = "nw_http3_start_encoder_stream_if_needed";
        __int16 v34 = 2082;
        __int16 v35 = v17;
        __int16 v36 = 2082;
        __int16 v37 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s protocol %{public}s has invalid add_input_handler callback, dumping backtrace:%{public}s",  buf,  0x20u);
      }

      free(backtrace_string);
    }

void nw_http3_encoder_stream_process_output(uint64_t a1)
{
  v130[2] = *MEMORY[0x1895F89C0];
  BOOL v2 = (_WORD *)(a1 + 1373);
  if ((*(_WORD *)(a1 + 1373) & 0x2000) != 0) {
    goto LABEL_28;
  }
  uint64_t v3 = *(dispatch_data_s **)(a1 + 1200);
  if (v3)
  {
    *(void *)int v118 = 0LL;
    int v119 = v118;
    uint64_t v120 = 0x2000000000LL;
    size_t size = dispatch_data_get_size(v3);
    int v121 = size;
    *(void *)int buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3802000000LL;
    *(void *)&_BYTE buf[24] = __Block_byref_object_copy__60284;
    int v129 = __Block_byref_object_dispose__60285;
    v130[0] = 0LL;
    v130[1] = v130;
    uint64_t v5 = *(void *)(a1 + 1056);
    if (!v5) {
      goto LABEL_164;
    }
    uint64_t v6 = *(void *)(v5 + 24);
    if (!v6) {
      goto LABEL_164;
    }
    int v7 = *(unsigned int (**)(void, uint64_t, size_t, size_t, uint64_t))(v6 + 88);
    if (!v7 || !v7(*(void *)(a1 + 1056), a1, size, size, 0xFFFFFFFFLL)) {
      goto LABEL_164;
    }
    v112[0] = MEMORY[0x1895F87A8];
    v112[1] = 0x40000000LL;
    os_log_type_t v113 = (uint64_t (*)(void *))___ZL38nw_http3_encoder_stream_process_outputP17nw_protocol_http3_block_invoke;
    int v114 = &unk_189BC43C8;
    unsigned int v115 = v118;
    unsigned int v116 = buf;
    uint64_t v117 = a1;
    uint64_t v8 = *(void *)(*(void *)&buf[8] + 40LL);
    do
    {
      if (!v8) {
        break;
      }
      uint64_t v9 = *(void *)(v8 + 32);
      char v10 = v113(v112);
      uint64_t v8 = v9;
    }

    while ((v10 & 1) != 0);
    if (*(void *)(a1 + 1200))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)int v122 = 136446210;
      char v123 = "nw_http3_encoder_stream_process_output";
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v110 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (os_log_s *)gLogObj;
        os_log_type_t v13 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_162;
        }
        *(_DWORD *)int v122 = 136446210;
        char v123 = "nw_http3_encoder_stream_process_output";
        os_log_type_t v14 = "%{public}s Not enough space for sdtc";
      }

      else if (v110)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (os_log_s *)gLogObj;
        os_log_type_t v13 = type;
        BOOL v96 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (backtrace_string)
        {
          if (v96)
          {
            *(_DWORD *)int v122 = 136446466;
            char v123 = "nw_http3_encoder_stream_process_output";
            __int16 v124 = 2082;
            uint64_t v125 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s Not enough space for sdtc, dumping backtrace:%{public}s",  v122,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_162;
        }

        if (!v96)
        {
LABEL_162:
          if (v11) {
            free(v11);
          }
LABEL_164:
          _Block_object_dispose(buf, 8);
          _Block_object_dispose(v118, 8);
          return;
        }

        *(_DWORD *)int v122 = 136446210;
        char v123 = "nw_http3_encoder_stream_process_output";
        os_log_type_t v14 = "%{public}s Not enough space for sdtc, no backtrace";
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (os_log_s *)gLogObj;
        os_log_type_t v13 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_162;
        }
        *(_DWORD *)int v122 = 136446210;
        char v123 = "nw_http3_encoder_stream_process_output";
        os_log_type_t v14 = "%{public}s Not enough space for sdtc, backtrace limit exceeded";
      }

      _os_log_impl(&dword_181A5C000, v12, v13, v14, v122, 0xCu);
      goto LABEL_162;
    }

    uint64_t v21 = *(void *)(v5 + 24);
    if (v21)
    {
      os_log_type_t v22 = *(void (**)(uint64_t, uint64_t))(v21 + 96);
      if (v22)
      {
        v22(v5, *(void *)&buf[8] + 40LL);
LABEL_27:
        *v2 |= 0x2000u;
        _Block_object_dispose(buf, 8);
        _Block_object_dispose(v118, 8);
LABEL_28:
        uint64_t v23 = *(void *)(a1 + 928);
        while (1)
        {
          if (!v23) {
            return;
          }
          int v25 = *(_DWORD *)(v23 + 368);
          if (v25 != 2) {
            break;
          }
          int is_metadata_complete = nw_frame_is_metadata_complete(*(void *)(v23 + 384));
          if (nw_http3_stream_send_fields(v23, is_metadata_complete))
          {
            uint64_t v35 = *(void *)(v23 + 48);
            if (!v35
              || (uint64_t v36 = *(void *)(v35 + 24)) == 0
              || (__int16 v37 = *(void (**)(uint64_t, uint64_t))(v36 + 72)) == 0LL)
            {
              __nwlog_obj();
              uint64_t v55 = *(void *)(v23 + 48);
              if (v55)
              {
                BOOL v56 = *(const char **)(v55 + 16);
                if (!v56) {
                  BOOL v56 = "invalid";
                }
              }

              else
              {
                BOOL v56 = "invalid";
              }

              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http3_stream_encoder_stream_output_available";
              *(_WORD *)&void buf[12] = 2082;
              *(void *)&_BYTE buf[14] = v56;
              __int16 v57 = (const char *)_os_log_send_and_compose_impl();
              v118[0] = OS_LOG_TYPE_ERROR;
              v122[0] = 0;
              if (__nwlog_fault(v57, v118, v122))
              {
                if (v118[0] != OS_LOG_TYPE_FAULT)
                {
                  if (v122[0])
                  {
                    unint64_t v62 = (char *)__nw_create_backtrace_string();
                    __int16 v63 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v108 = v118[0];
                    BOOL v64 = os_log_type_enabled(v63, v118[0]);
                    if (v62)
                    {
                      if (v64)
                      {
                        uint64_t v65 = *(void *)(v23 + 48);
                        if (v65)
                        {
                          int v66 = *(const char **)(v65 + 16);
                          if (!v66) {
                            int v66 = "invalid";
                          }
                        }

                        else
                        {
                          int v66 = "invalid";
                        }

                        *(_DWORD *)int buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_http3_stream_encoder_stream_output_available";
                        *(_WORD *)&void buf[12] = 2082;
                        *(void *)&_BYTE buf[14] = v66;
                        *(_WORD *)&uint8_t buf[22] = 2082;
                        *(void *)&_BYTE buf[24] = v62;
                        _os_log_impl( &dword_181A5C000,  v63,  v108,  "%{public}s protocol %{public}s has invalid output_available callback, dumping backtrace:%{public}s",  buf,  0x20u);
                      }

                      free(v62);
                      goto LABEL_126;
                    }

                    if (!v64) {
                      goto LABEL_126;
                    }
                    uint64_t v71 = *(void *)(v23 + 48);
                    if (v71)
                    {
                      uint64_t v72 = *(const char **)(v71 + 16);
                      if (!v72) {
                        uint64_t v72 = "invalid";
                      }
                    }

                    else
                    {
                      uint64_t v72 = "invalid";
                    }

                    *(_DWORD *)int buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_http3_stream_encoder_stream_output_available";
                    *(_WORD *)&void buf[12] = 2082;
                    *(void *)&_BYTE buf[14] = v72;
                    __int16 v73 = v63;
                    os_log_type_t v74 = v108;
                    unint64_t v75 = "%{public}s protocol %{public}s has invalid output_available callback, no backtrace";
                  }

                  else
                  {
                    uint64_t v67 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v68 = v118[0];
                    if (!os_log_type_enabled(v67, v118[0])) {
                      goto LABEL_126;
                    }
                    uint64_t v69 = *(void *)(v23 + 48);
                    if (v69)
                    {
                      unsigned int v70 = *(const char **)(v69 + 16);
                      if (!v70) {
                        unsigned int v70 = "invalid";
                      }
                    }

                    else
                    {
                      unsigned int v70 = "invalid";
                    }

                    *(_DWORD *)int buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_http3_stream_encoder_stream_output_available";
                    *(_WORD *)&void buf[12] = 2082;
                    *(void *)&_BYTE buf[14] = v70;
                    __int16 v73 = v67;
                    os_log_type_t v74 = v68;
                    unint64_t v75 = "%{public}s protocol %{public}s has invalid output_available callback, backtrace limit exceeded";
                  }

BOOL ___ZL38nw_http3_encoder_stream_process_outputP17nw_protocol_http3_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  if ((nw_frame_uses_external_data(a2) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)int buf = 136446210;
    BOOL v24 = "nw_http3_encoder_stream_process_output_block_invoke";
    int v7 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(offset) = 16;
    os_log_type_t offset_7 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v7, &offset, &offset_7))
    {
      if (offset == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v8 = (os_log_s *)gLogObj;
        os_log_type_t v9 = offset;
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)offset))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v24 = "nw_http3_encoder_stream_process_output_block_invoke";
          char v10 = "%{public}s Encoder stream does not support external data";
LABEL_31:
          _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
        }
      }

      else if (offset_7)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v8 = (os_log_s *)gLogObj;
        os_log_type_t v9 = offset;
        BOOL v16 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)offset);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)int buf = 136446466;
            BOOL v24 = "nw_http3_encoder_stream_process_output_block_invoke";
            __int16 v25 = 2082;
            int v26 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s Encoder stream does not support external data, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }

        if (v16)
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v24 = "nw_http3_encoder_stream_process_output_block_invoke";
          char v10 = "%{public}s Encoder stream does not support external data, no backtrace";
          goto LABEL_31;
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v8 = (os_log_s *)gLogObj;
        os_log_type_t v9 = offset;
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)offset))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v24 = "nw_http3_encoder_stream_process_output_block_invoke";
          char v10 = "%{public}s Encoder stream does not support external data, backtrace limit exceeded";
          goto LABEL_31;
        }
      }
    }

BOOL nw_http3_stream_send_fields(uint64_t a1, int a2)
{
  uint64_t v438 = *MEMORY[0x1895F89C0];
  unsigned int v3 = *(unsigned __int16 *)(a1 + 736) | (*(unsigned __int8 *)(a1 + 738) << 16);
  int v4 = (v3 >> 11) & 1;
  if (!gLogDatapath) {
    LOBYTE(v4) = 1;
  }
  if ((v3 & 0x40000) == 0)
  {
    if ((v4 & 1) == 0)
    {
      os_log_type_t v189 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v189, OS_LOG_TYPE_DEBUG))
      {
        int v190 = *(_DWORD *)(*(void *)(a1 + 336) + 1280LL);
        BOOL v191 = *(void **)(a1 + 240);
        int v192 = *(_DWORD *)(a1 + 368);
        *(_DWORD *)int buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_http3_stream_send_fields";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&_BYTE buf[14] = a1 + 636;
        *(_WORD *)&uint8_t buf[22] = 2080;
        os_log_type_t v427 = (__n128 (*)(uint64_t, uint64_t))" ";
        LOWORD(v42_Block_object_dispose(va, 8) = 1024;
        *(_DWORD *)((char *)&v428 + 2) = v190;
        HIWORD(v42_Block_object_dispose(va, 8) = 2048;
        os_log_type_t v429 = v191;
        *(_WORD *)os_log_type_t v430 = 1024;
        *(_DWORD *)&v430[2] = v192;
        _os_log_impl( &dword_181A5C000,  v189,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> called, state %u",  buf,  0x36u);
      }
    }

    BOOL v6 = (unsigned __int16 *)(a1 + 736);
    if (*(void *)(a1 + 520)) {
      goto LABEL_6;
    }
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
    }
    id v17 = (id)nw_protocol_copy_http_definition_http_definition;
    BOOL v18 = nw_frame_copy_metadata_for_protocol(*(void *)(a1 + 384), (uint64_t)v17);
    unint64_t v19 = v18;
    if (!v18)
    {
LABEL_198:
      if ((*v6 & 0x800) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v128 = (os_log_s *)gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          int v129 = *(_DWORD *)(*(void *)(a1 + 336) + 1280LL);
          unsigned int v130 = *(void **)(a1 + 240);
          uint64_t v131 = *(void *)(a1 + 384);
          *(_DWORD *)int buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_http3_stream_send_fields";
          *(_WORD *)&void buf[12] = 2082;
          *(void *)&_BYTE buf[14] = a1 + 636;
          *(_WORD *)&uint8_t buf[22] = 2080;
          os_log_type_t v427 = (__n128 (*)(uint64_t, uint64_t))" ";
          LOWORD(v42_Block_object_dispose(va, 8) = 1024;
          *(_DWORD *)((char *)&v428 + 2) = v129;
          HIWORD(v42_Block_object_dispose(va, 8) = 2048;
          os_log_type_t v429 = v130;
          *(_WORD *)os_log_type_t v430 = 2048;
          *(void *)&v430[2] = v131;
          _os_log_impl( &dword_181A5C000,  v128,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:s%llu> Invalid http metadata found in frame %p",  buf,  0x3Au);
        }
      }

      uint64_t v132 = *(void *)(a1 + 48);
      if (v132)
      {
        uint64_t v133 = *(void *)(v132 + 24);
        if (v133)
        {
          int v134 = *(void (**)(uint64_t, uint64_t))(v133 + 56);
          if (v134)
          {
            v134(v132, a1);
            goto LABEL_205;
          }
        }
      }

      __nwlog_obj();
      uint64_t v193 = *(void *)(a1 + 48);
      BOOL v194 = "invalid";
      if (v193)
      {
        os_log_type_t v195 = *(const char **)(v193 + 16);
        if (v195) {
          BOOL v194 = v195;
        }
      }

      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http3_stream_send_fields";
      *(_WORD *)&void buf[12] = 2082;
      *(void *)&_BYTE buf[14] = v194;
      BOOL v196 = (void *)_os_log_send_and_compose_impl();
      type[0] = 16;
      LOBYTE(v413) = 0;
      if (!__nwlog_fault((const char *)v196, type, &v413))
      {
LABEL_431:
        if (v196) {
          free(v196);
        }
LABEL_205:
        uint64_t v135 = *(void *)(a1 + 48);
        if (v135)
        {
          uint64_t v136 = *(void *)(v135 + 24);
          if (v136)
          {
            os_log_type_t v137 = *(void (**)(uint64_t, uint64_t))(v136 + 48);
            if (v137)
            {
              v137(v135, a1);
              goto LABEL_209;
            }
          }
        }

        __nwlog_obj();
        uint64_t v202 = *(void *)(a1 + 48);
        uint64_t v203 = "invalid";
        if (v202)
        {
          os_log_type_t v204 = *(const char **)(v202 + 16);
          if (v204) {
            uint64_t v203 = v204;
          }
        }

        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http3_stream_send_fields";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&_BYTE buf[14] = v203;
        os_log_type_t v205 = (void *)_os_log_send_and_compose_impl();
        type[0] = 16;
        LOBYTE(v413) = 0;
        if (!__nwlog_fault((const char *)v205, type, &v413))
        {
LABEL_440:
          if (v205) {
            free(v205);
          }
LABEL_209:
          int v84 = 1;
          if (!v19)
          {
LABEL_314:
            if (v17) {
              os_release(v17);
            }
            if (v84) {
              return 0LL;
            }
LABEL_6:
            int v7 = *(dispatch_data_s **)(a1 + 528);
            if (!v7) {
              goto LABEL_224;
            }
            *(void *)int buf = 0LL;
            *(void *)&buf[8] = buf;
            *(void *)&buf[16] = 0x3802000000LL;
            os_log_type_t v427 = __Block_byref_object_copy__60284;
            os_log_type_t v428 = (os_log_type_t *)__Block_byref_object_dispose__60285;
            os_log_type_t v429 = 0LL;
            *(void *)os_log_type_t v430 = &v429;
            uint64_t v413 = 0LL;
            os_log_type_t v414 = &v413;
            uint64_t v415 = 0x2000000000LL;
            LODWORD(v416) = dispatch_data_get_size(v7);
            uint64_t v8 = *(void *)(a1 + 336);
            if (!v8)
            {
              __nwlog_obj();
              *(_DWORD *)os_log_type_t type = 136446210;
              *(void *)&type[4] = "nw_http3_encoder_stream_get_output_frames";
              os_log_type_t v32 = (char *)_os_log_send_and_compose_impl();
              v409[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(v408[0]) = 0;
              if (__nwlog_fault(v32, v409, v408))
              {
                if (v409[0] == OS_LOG_TYPE_FAULT)
                {
                  uint64_t v33 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v34 = v409[0];
                  if (os_log_type_enabled(v33, v409[0]))
                  {
                    *(_DWORD *)os_log_type_t type = 136446210;
                    *(void *)&type[4] = "nw_http3_encoder_stream_get_output_frames";
                    uint64_t v35 = "%{public}s called with null http3";
                    goto LABEL_179;
                  }
                }

                else if (LOBYTE(v408[0]))
                {
                  backtrace_string = (char *)__nw_create_backtrace_string();
                  uint64_t v33 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v34 = v409[0];
                  BOOL v230 = os_log_type_enabled(v33, v409[0]);
                  if (backtrace_string)
                  {
                    if (v230)
                    {
                      *(_DWORD *)os_log_type_t type = 136446466;
                      *(void *)&type[4] = "nw_http3_encoder_stream_get_output_frames";
                      *(_WORD *)&type[12] = 2082;
                      *(void *)&type[14] = backtrace_string;
                      _os_log_impl( &dword_181A5C000,  v33,  v34,  "%{public}s called with null http3, dumping backtrace:%{public}s",  type,  0x16u);
                    }

                    free(backtrace_string);
                  }

                  else if (v230)
                  {
                    *(_DWORD *)os_log_type_t type = 136446210;
                    *(void *)&type[4] = "nw_http3_encoder_stream_get_output_frames";
                    uint64_t v35 = "%{public}s called with null http3, no backtrace";
                    goto LABEL_179;
                  }
                }

                else
                {
                  uint64_t v33 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v34 = v409[0];
                  if (os_log_type_enabled(v33, v409[0]))
                  {
                    *(_DWORD *)os_log_type_t type = 136446210;
                    *(void *)&type[4] = "nw_http3_encoder_stream_get_output_frames";
                    uint64_t v35 = "%{public}s called with null http3, backtrace limit exceeded";
                    goto LABEL_179;
                  }
                }
              }

LABEL_530:
              if (v245) {
                free(v245);
              }
              uint64_t v150 = v6;
              goto LABEL_280;
            }

            __nwlog_obj();
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http3_stream_send_fields";
            v225 = (char *)_os_log_send_and_compose_impl();
            type[0] = 16;
            LOBYTE(v413) = 0;
            if (__nwlog_fault(v225, type, &v413))
            {
              if (type[0] == 17)
              {
                os_log_type_t v226 = (os_log_s *)__nwlog_obj();
                os_log_type_t v227 = type[0];
                if (!os_log_type_enabled(v226, (os_log_type_t)type[0])) {
                  goto LABEL_446;
                }
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http3_stream_send_fields";
                uint64_t v228 = "%{public}s called with null http3_stream->output_fields_frame_data";
LABEL_444:
                uint64_t v288 = v226;
LABEL_445:
                _os_log_impl(&dword_181A5C000, v288, v227, v228, buf, 0xCu);
                goto LABEL_446;
              }

              if (!(_BYTE)v413)
              {
                os_log_type_t v226 = (os_log_s *)__nwlog_obj();
                os_log_type_t v227 = type[0];
                if (!os_log_type_enabled(v226, (os_log_type_t)type[0])) {
                  goto LABEL_446;
                }
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http3_stream_send_fields";
                uint64_t v228 = "%{public}s called with null http3_stream->output_fields_frame_data, backtrace limit exceeded";
                goto LABEL_444;
              }

              v231 = (char *)__nw_create_backtrace_string();
              v232 = (os_log_s *)__nwlog_obj();
              os_log_type_t v227 = type[0];
              BOOL v233 = os_log_type_enabled(v232, (os_log_type_t)type[0]);
              if (v231)
              {
                if (v233)
                {
                  *(_DWORD *)int buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http3_stream_send_fields";
                  *(_WORD *)&void buf[12] = 2082;
                  *(void *)&_BYTE buf[14] = v231;
                  _os_log_impl( &dword_181A5C000,  v232,  v227,  "%{public}s called with null http3_stream->output_fields_frame_data, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v231);
                goto LABEL_446;
              }

              if (v233)
              {
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http3_stream_send_fields";
                uint64_t v228 = "%{public}s called with null http3_stream->output_fields_frame_data, no backtrace";
                uint64_t v288 = v232;
                goto LABEL_445;
              }
            }

  __nwlog_obj();
  size_t v319 = (const char *)a2[2];
  if (!v319) {
    size_t v319 = "invalid";
  }
  LODWORD(buf[0]) = 136446466;
  *(void *)((char *)buf + 4) = "nw_http2_stream_make_and_submit_headers";
  WORD2(buf[1]) = 2082;
  *(void *)((char *)&buf[1] + 6) = v319;
  uint64_t v40 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v374[0]) = 0;
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    size_t v320 = (os_log_s *)__nwlog_obj();
    uint64_t v321 = type[0];
    if (os_log_type_enabled(v320, type[0]))
    {
      v322 = (const char *)a2[2];
      if (!v322) {
        v322 = "invalid";
      }
      LODWORD(buf[0]) = 136446466;
      *(void *)((char *)buf + 4) = "nw_http2_stream_make_and_submit_headers";
      WORD2(buf[1]) = 2082;
      *(void *)((char *)&buf[1] + 6) = v322;
      uint64_t v45 = "%{public}s protocol %{public}s has invalid disconnected callback";
LABEL_554:
      os_log_type_t v113 = v320;
      int v114 = v321;
      BOOL v115 = 22;
      goto LABEL_146;
    }

    goto LABEL_147;
  }

  if (!LOBYTE(v374[0]))
  {
    size_t v320 = (os_log_s *)__nwlog_obj();
    uint64_t v321 = type[0];
    if (os_log_type_enabled(v320, type[0]))
    {
      BOOL v326 = (const char *)a2[2];
      if (!v326) {
        BOOL v326 = "invalid";
      }
      LODWORD(buf[0]) = 136446466;
      *(void *)((char *)buf + 4) = "nw_http2_stream_make_and_submit_headers";
      WORD2(buf[1]) = 2082;
      *(void *)((char *)&buf[1] + 6) = v326;
      uint64_t v45 = "%{public}s protocol %{public}s has invalid disconnected callback, backtrace limit exceeded";
      goto LABEL_554;
    }

    goto LABEL_147;
  }

  os_log_type_t v323 = (char *)__nw_create_backtrace_string();
  size_t v320 = (os_log_s *)__nwlog_obj();
  uint64_t v321 = type[0];
  size_t v324 = os_log_type_enabled(v320, type[0]);
  if (!v323)
  {
    if (v324)
    {
      uint64_t v327 = (const char *)a2[2];
      if (!v327) {
        uint64_t v327 = "invalid";
      }
      LODWORD(buf[0]) = 136446466;
      *(void *)((char *)buf + 4) = "nw_http2_stream_make_and_submit_headers";
      WORD2(buf[1]) = 2082;
      *(void *)((char *)&buf[1] + 6) = v327;
      uint64_t v45 = "%{public}s protocol %{public}s has invalid disconnected callback, no backtrace";
      goto LABEL_554;
    }

    goto LABEL_147;
  }

  if (v324)
  {
    size_t v325 = (const char *)a2[2];
    if (!v325) {
      size_t v325 = "invalid";
    }
    LODWORD(buf[0]) = 136446722;
    *(void *)((char *)buf + 4) = "nw_http2_stream_make_and_submit_headers";
    WORD2(buf[1]) = 2082;
    *(void *)((char *)&buf[1] + 6) = v325;
    HIWORD(buf[2]) = 2082;
    *(void *)&id v370 = v323;
    _os_log_impl( &dword_181A5C000,  v320,  v321,  "%{public}s protocol %{public}s has invalid disconnected callback, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x20u);
  }

  free(v323);
  if (v40) {
LABEL_148:
  }
    free(v40);
LABEL_149:
  BOOL result = 0LL;
  if (((*(unsigned __int16 *)(a3 + 188) | (*(unsigned __int8 *)(a3 + 190) << 16)) & 0x80000) == 0
    && *((_BYTE *)v8 + 1537))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    size_t v116 = gconnectionLogObj;
    BOOL result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
    if (result)
    {
      int v118 = *(_DWORD *)(a3 + 176);
      size_t v117 = *(_DWORD *)(a3 + 180);
      LODWORD(buf[0]) = 136447234;
      *(void *)((char *)buf + 4) = "nw_http2_submit_message";
      WORD2(buf[1]) = 2082;
      *(void *)((char *)&buf[1] + 6) = a3 + 191;
      HIWORD(buf[2]) = 2080;
      *(void *)&id v370 = " ";
      WORD4(v370) = 1024;
      *(_DWORD *)((char *)&v370 + 10) = v117;
      HIWORD(v370) = 1024;
      LODWORD(v371[0]) = v118;
      unint64_t v15 = "%{public}s %{public}s%s<i%u:s%d> failed to send headers";
      int v16 = (os_log_s *)v116;
      id v17 = OS_LOG_TYPE_DEBUG;
      BOOL v18 = 44;
      goto LABEL_9;
    }
  }

  return result;
}

LABEL_580:
            id v47 = v17;
            __nwlog_obj();
            uint64_t v348 = *(void *)(a1 + 48);
            size_t v349 = "invalid";
            if (v348)
            {
              size_t v350 = *(const char **)(v348 + 16);
              if (v350) {
                size_t v349 = v350;
              }
            }

            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http3_stream_send_fields";
            *(_WORD *)&void buf[12] = 2082;
            *(void *)&_BYTE buf[14] = v349;
            uint64_t v51 = (char *)_os_log_send_and_compose_impl();
            type[0] = 16;
            LOBYTE(v413) = 0;
            if (__nwlog_fault(v51, type, &v413))
            {
              if (type[0] == 17)
              {
                os_log_type_t v52 = (os_log_s *)__nwlog_obj();
                os_log_type_t v53 = type[0];
                if (!os_log_type_enabled(v52, (os_log_type_t)type[0])) {
                  goto LABEL_610;
                }
                uint64_t v351 = *(void *)(a1 + 48);
                uint64_t v55 = "invalid";
                if (v351)
                {
                  os_log_type_t v352 = *(const char **)(v351 + 16);
                  if (v352) {
                    uint64_t v55 = v352;
                  }
                }

                goto LABEL_60;
              }

              if (!(_BYTE)v413)
              {
                os_log_type_t v52 = (os_log_s *)__nwlog_obj();
                os_log_type_t v53 = type[0];
                if (!os_log_type_enabled(v52, (os_log_type_t)type[0])) {
                  goto LABEL_610;
                }
                uint64_t v358 = *(void *)(a1 + 48);
                os_log_type_t v316 = "invalid";
                if (v358)
                {
                  os_log_type_t v359 = *(const char **)(v358 + 16);
                  if (v359) {
                    os_log_type_t v316 = v359;
                  }
                }

                goto LABEL_508;
              }

              BOOL v353 = (char *)__nw_create_backtrace_string();
              os_log_type_t v52 = (os_log_s *)__nwlog_obj();
              os_log_type_t v53 = type[0];
              BOOL v354 = os_log_type_enabled(v52, (os_log_type_t)type[0]);
              if (v353)
              {
                if (v354)
                {
                  uint64_t v355 = *(void *)(a1 + 48);
                  v356 = "invalid";
                  if (v355)
                  {
                    v357 = *(const char **)(v355 + 16);
                    if (v357) {
                      v356 = v357;
                    }
                  }

                  *(_DWORD *)int buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_http3_stream_send_fields";
                  *(_WORD *)&void buf[12] = 2082;
                  *(void *)&_BYTE buf[14] = v356;
                  *(_WORD *)&uint8_t buf[22] = 2082;
                  os_log_type_t v427 = (__n128 (*)(uint64_t, uint64_t))v353;
                  _os_log_impl( &dword_181A5C000,  v52,  v53,  "%{public}s protocol %{public}s has invalid disconnected callback, dumping backtrace:%{public}s",  buf,  0x20u);
                }

                free(v353);
                if (!v51) {
                  goto LABEL_612;
                }
                goto LABEL_611;
              }

              if (v354)
              {
                uint64_t v360 = *(void *)(a1 + 48);
                BOOL v340 = "invalid";
                if (v360)
                {
                  size_t v361 = *(const char **)(v360 + 16);
                  if (v361) {
                    BOOL v340 = v361;
                  }
                }

                goto LABEL_608;
              }
            }

LABEL_610:
            if (!v51)
            {
LABEL_612:
              int v84 = 1;
              id v17 = v47;
              goto LABEL_313;
            }

LABEL_611:
            free(v51);
            goto LABEL_612;
          }
        }
      }

      id v271 = v17;
      __nwlog_obj();
      uint64_t v272 = *(void *)(a1 + 48);
      uint64_t v273 = "invalid";
      if (v272)
      {
        v274 = *(const char **)(v272 + 16);
        if (v274) {
          uint64_t v273 = v274;
        }
      }

      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http3_stream_send_fields";
      *(_WORD *)&void buf[12] = 2082;
      *(void *)&_BYTE buf[14] = v273;
      os_log_type_t v275 = (char *)_os_log_send_and_compose_impl();
      type[0] = 16;
      LOBYTE(v413) = 0;
      if (__nwlog_fault(v275, type, &v413))
      {
        if (type[0] == 17)
        {
          uint64_t v276 = (os_log_s *)__nwlog_obj();
          os_log_type_t v277 = type[0];
          if (!os_log_type_enabled(v276, (os_log_type_t)type[0])) {
            goto LABEL_577;
          }
          uint64_t v278 = *(void *)(a1 + 48);
          os_log_type_t v279 = "invalid";
          if (v278)
          {
            int v280 = *(const char **)(v278 + 16);
            if (v280) {
              os_log_type_t v279 = v280;
            }
          }

          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_stream_send_fields";
          *(_WORD *)&void buf[12] = 2082;
          *(void *)&_BYTE buf[14] = v279;
          os_log_type_t v281 = "%{public}s protocol %{public}s has invalid error callback";
LABEL_576:
          _os_log_impl(&dword_181A5C000, v276, v277, v281, buf, 0x16u);
          goto LABEL_577;
        }

        if (!(_BYTE)v413)
        {
          uint64_t v276 = (os_log_s *)__nwlog_obj();
          os_log_type_t v277 = type[0];
          if (!os_log_type_enabled(v276, (os_log_type_t)type[0])) {
            goto LABEL_577;
          }
          uint64_t v321 = *(void *)(a1 + 48);
          v322 = "invalid";
          if (v321)
          {
            os_log_type_t v323 = *(const char **)(v321 + 16);
            if (v323) {
              v322 = v323;
            }
          }

          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_stream_send_fields";
          *(_WORD *)&void buf[12] = 2082;
          *(void *)&_BYTE buf[14] = v322;
          os_log_type_t v281 = "%{public}s protocol %{public}s has invalid error callback, backtrace limit exceeded";
          goto LABEL_576;
        }

        char v306 = (char *)__nw_create_backtrace_string();
        uint64_t v276 = (os_log_s *)__nwlog_obj();
        os_log_type_t v277 = type[0];
        BOOL v307 = os_log_type_enabled(v276, (os_log_type_t)type[0]);
        if (!v306)
        {
          if (!v307) {
            goto LABEL_577;
          }
          uint64_t v345 = *(void *)(a1 + 48);
          size_t v346 = "invalid";
          if (v345)
          {
            v347 = *(const char **)(v345 + 16);
            if (v347) {
              size_t v346 = v347;
            }
          }

          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_stream_send_fields";
          *(_WORD *)&void buf[12] = 2082;
          *(void *)&_BYTE buf[14] = v346;
          os_log_type_t v281 = "%{public}s protocol %{public}s has invalid error callback, no backtrace";
          goto LABEL_576;
        }

        if (v307)
        {
          uint64_t v308 = *(void *)(a1 + 48);
          os_log_type_t v309 = "invalid";
          if (v308)
          {
            os_log_type_t v310 = *(const char **)(v308 + 16);
            if (v310) {
              os_log_type_t v309 = v310;
            }
          }

          *(_DWORD *)int buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_http3_stream_send_fields";
          *(_WORD *)&void buf[12] = 2082;
          *(void *)&_BYTE buf[14] = v309;
          *(_WORD *)&uint8_t buf[22] = 2082;
          os_log_type_t v427 = (__n128 (*)(uint64_t, uint64_t))v306;
          _os_log_impl( &dword_181A5C000,  v276,  v277,  "%{public}s protocol %{public}s has invalid error callback, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v306);
      }

LABEL_577:
      if (v275) {
        free(v275);
      }
      id v17 = v271;
      uint64_t v44 = *(void *)(a1 + 48);
      if (!v44) {
        goto LABEL_580;
      }
      goto LABEL_89;
    }

    id v20 = nw_http_metadata_copy_response(v18);
    if (v20) {
      goto LABEL_40;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http3_stream_send_fields";
    int v66 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    LOBYTE(v413) = 0;
    if (__nwlog_fault(v66, type, &v413))
    {
      if (type[0] == 17)
      {
        uint64_t v67 = (os_log_s *)__nwlog_obj();
        os_log_type_t v68 = type[0];
        if (os_log_type_enabled(v67, (os_log_type_t)type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http3_stream_send_fields";
          uint64_t v69 = "%{public}s did not find response on frame";
LABEL_194:
          _os_log_impl(&dword_181A5C000, v67, v68, v69, buf, 0xCu);
        }
      }

      else if ((_BYTE)v413)
      {
        id v89 = v17;
        uint64_t v90 = (char *)__nw_create_backtrace_string();
        uint64_t v67 = (os_log_s *)__nwlog_obj();
        os_log_type_t v68 = type[0];
        BOOL v91 = os_log_type_enabled(v67, (os_log_type_t)type[0]);
        if (v90)
        {
          if (v91)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http3_stream_send_fields";
            *(_WORD *)&void buf[12] = 2082;
            *(void *)&_BYTE buf[14] = v90;
            _os_log_impl( &dword_181A5C000,  v67,  v68,  "%{public}s did not find response on frame, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v90);
          id v17 = v89;
          goto LABEL_195;
        }

        id v17 = v89;
        if (v91)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http3_stream_send_fields";
          uint64_t v69 = "%{public}s did not find response on frame, no backtrace";
          goto LABEL_194;
        }
      }

      else
      {
        uint64_t v67 = (os_log_s *)__nwlog_obj();
        os_log_type_t v68 = type[0];
        if (os_log_type_enabled(v67, (os_log_type_t)type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http3_stream_send_fields";
          uint64_t v69 = "%{public}s did not find response on frame, backtrace limit exceeded";
          goto LABEL_194;
        }
      }
    }

uint64_t ___ZL27nw_http3_stream_send_fieldsP24nw_protocol_http3_streamb_block_invoke( uint64_t result, char *__s1)
{
  uint64_t v2 = result;
  if (__s1)
  {
    BOOL result = strcmp(__s1, "?1");
    __int16 v3 = ((_DWORD)result == 0) << 14;
  }

  else
  {
    __int16 v3 = 0;
  }

  uint64_t v4 = *(void *)(v2 + 32);
  int v5 = *(unsigned __int16 *)(v4 + 736);
  unsigned int v6 = v5 & 0xFFFFBFFF | (*(unsigned __int8 *)(v4 + 738) << 16);
  *(_WORD *)(v4 + 736) = v5 & 0xBFFF | v3;
  *(_BYTE *)(v4 + 73_Block_object_dispose(va, 8) = BYTE2(v6);
  return result;
}

uint64_t ___ZL27nw_http3_stream_send_fieldsP24nw_protocol_http3_streamb_block_invoke_2( uint64_t result, char *__s1)
{
  uint64_t v2 = result;
  if (__s1)
  {
    BOOL result = strcmp(__s1, "connect-udp");
    if ((_DWORD)result)
    {
      BOOL result = strcmp(__s1, "connect-ip");
      BOOL v4 = (_DWORD)result == 0;
    }

    else
    {
      BOOL v4 = 1;
    }
  }

  else
  {
    BOOL v4 = 0;
  }

  *(_BYTE *)(*(void *)(*(void *)(v2 + 32) + 8LL) + 24LL) = v4;
  return result;
}

void ___ZL32nw_http3_stream_serialize_fieldsP24nw_protocol_http3_streamP20nw_protocol_metadata_block_invoke( void *a1, char *a2, unint64_t a3, unint64_t a4, int a5)
{
  uint64_t v9 = a1;
  uint64_t v326 = *MEMORY[0x1895F89C0];
  uint64_t v10 = a1[14];
  if (!v10 || (*(_WORD *)(v10 + 736) & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      v256 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v256, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v257 = v9[14];
        int v258 = (const char *)(v257 + 636);
        os_log_type_t v259 = "";
        BOOL v260 = v257 == 0;
        if (!v257) {
          int v258 = "";
        }
        int v261 = *(_DWORD *)(*(void *)(v257 + 336) + 1280LL);
        uint64_t v262 = *(void *)(v257 + 240);
        if (!v260) {
          os_log_type_t v259 = " ";
        }
        *(_DWORD *)int buf = 136447746;
        *(void *)&uint8_t buf[4] = "nw_http3_stream_serialize_fields_block_invoke";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&_BYTE buf[14] = v258;
        __int16 v316 = 2080;
        os_log_type_t v317 = v259;
        __int16 v318 = 1024;
        int v319 = v261;
        __int16 v320 = 2048;
        uint64_t v321 = v262;
        __int16 v322 = 1040;
        int v323 = a3;
        __int16 v324 = 2080;
        size_t v325 = a2;
        _os_log_impl( &dword_181A5C000,  v256,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> encoding %.*s",  buf,  0x40u);
      }
    }
  }

  v299 = v9;
  if (a4 + a3 >= 0x10000)
  {
    uint64_t v11 = v9[14];
    if (!v11 || (*(_WORD *)(v11 + 736) & 0x800) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = v299[14];
        int v14 = (const char *)(v13 + 636);
        unint64_t v15 = "";
        BOOL v16 = v13 == 0;
        if (!v13) {
          int v14 = "";
        }
        int v17 = *(_DWORD *)(*(void *)(v13 + 336) + 1280LL);
        uint64_t v18 = *(void *)(v13 + 240);
        if (!v16) {
          unint64_t v15 = " ";
        }
        *(_DWORD *)int buf = 136447746;
        *(void *)&uint8_t buf[4] = "nw_http3_stream_serialize_fields_block_invoke";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&_BYTE buf[14] = v14;
        __int16 v316 = 2080;
        os_log_type_t v317 = v15;
        __int16 v318 = 1024;
        int v319 = v17;
        __int16 v320 = 2048;
        uint64_t v321 = v18;
        __int16 v322 = 1040;
        int v323 = a3;
        __int16 v324 = 2080;
        size_t v325 = a2;
        _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:s%llu> dropping oversized field %.*s",  buf,  0x40u);
      }
    }

    return;
  }

  if (a3 >= 0x10000) {
    __assert_rtn("lsxpack_header_set_offset2", "lsxpack_header.h", 120, "name_len <= LSXPACK_MAX_STRLEN");
  }
  if (a4 >= 0x10000) {
    __assert_rtn("lsxpack_header_set_offset2", "lsxpack_header.h", 124, "val_len <= LSXPACK_MAX_STRLEN");
  }
  if (a5 == 3) {
    unsigned int v19 = 2;
  }
  else {
    unsigned int v19 = a5 == 2;
  }
  id v20 = &a2[(int)a3];
  size_t __n = (unsigned __int16)a4;
  unint64_t v21 = (unint64_t)&v20[(unsigned __int16)a4];
  uint64_t v273 = (unsigned __int8 *)(v20 + 1);
  unint64_t v288 = v21;
  uint64_t v289 = v9 + 4;
  BOOL v290 = v9 + 6;
  uint64_t v285 = v9 + 7;
  CFErrorRef v286 = v9 + 9;
  int v284 = (unsigned __int16)a3 + 414139866;
  unint64_t v275 = a3 & 0xF;
  unint64_t v281 = v21 - (void)v20;
  BOOL v307 = &a2[(int)a3];
  unint64_t v277 = (v21 - (void)v20) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v272 = &v20[v277];
  char v268 = (16 * v19) | 0x50;
  char v264 = (16 * v19) | 0x5F;
  int v266 = (32 * ((v19 >> 1) & 1)) | 0x40;
  int v263 = (32 * ((v19 >> 1) & 1)) | 0x4F;
  unsigned int v278 = v19;
  char v269 = (4 * v19) & 8;
  char v265 = (4 * v19) | 7;
  int v267 = (16 * ((v19 >> 1) & 1)) | 0x20;
  if ((_WORD)a3) {
    os_log_type_t v22 = a2;
  }
  else {
    os_log_type_t v22 = 0LL;
  }
  size_t v309 = (unsigned __int16)a3;
  id v271 = (unsigned __int8 *)(v22 + 1);
  else {
    os_log_type_t v23 = &v22[(unsigned __int16)a3];
  }
  size_t v301 = (unsigned __int16)a4;
  int v283 = (unsigned __int16)a4 + (unsigned __int16)a3;
  unint64_t v282 = (v283 + 32);
  size_t v304 = (unsigned __int16)a3;
  unint64_t v274 = (unsigned __int16)a3 + 32;
  os_log_type_t v310 = &v22[(unsigned __int16)a3];
  unint64_t v280 = v23 - v22;
  v313 = v22;
  unint64_t v276 = (v23 - v22) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v270 = &v22[v276];
  while (2)
  {
    BOOL v24 = *(uint64_t **)(*(void *)(v9[4] + 8LL) + 24LL);
    uint64_t v25 = *(void *)(*(void *)(v9[5] + 8LL) + 24LL);
    uint64_t v26 = *(void *)(*(void *)(v9[6] + 8LL) + 24LL);
    uint64_t v27 = *(void *)(*(void *)(v9[7] + 8LL) + 24LL);
    uint64_t v28 = *(void *)(*(void *)(v9[8] + 8LL) + 24LL);
    uint64_t v29 = *(void *)(*(void *)(v9[9] + 8LL) + 24LL);
    uint64_t v30 = v9[15];
    uint64_t v31 = v9[11];
    uint64_t v32 = *(void *)(*(void *)(v9[10] + 8LL) + 24LL);
    uint64_t v33 = *(void *)(*(void *)(v31 + 8) + 24LL);
    os_log_type_t v34 = *(FILE **)(v30 + 200);
    if (v34)
    {
      fwrite("qenc: debug: ", 0xDuLL, 1uLL, v34);
      fputc(10, *(FILE **)(v30 + 200));
    }

    uint64_t v35 = (uint64_t)v24 + v25;
    if (v35 == v26) {
      goto LABEL_32;
    }
    uint64_t v302 = v30;
    unsigned int v42 = 414139866;
    if (v313)
    {
      unint64_t v43 = v309;
      unsigned int v42 = v284;
      uint64_t v44 = v313;
      if (v304 >= 0x10)
      {
        int v45 = 1679910008;
        int v46 = 39378473;
        int v47 = -2008766304;
        int v48 = 645669457;
        uint64_t v44 = v313;
        do
        {
          HIDWORD(v49) = v48 - 2048144777 * *(_DWORD *)v44;
          LODWORD(v49) = HIDWORD(v49);
          int v48 = -1640531535 * (v49 >> 19);
          HIDWORD(v49) = v47 - 2048144777 * *((_DWORD *)v44 + 1);
          LODWORD(v49) = HIDWORD(v49);
          int v47 = -1640531535 * (v49 >> 19);
          HIDWORD(v49) = v46 - 2048144777 * *((_DWORD *)v44 + 2);
          LODWORD(v49) = HIDWORD(v49);
          int v46 = -1640531535 * (v49 >> 19);
          HIDWORD(v49) = v45 - 2048144777 * *((_DWORD *)v44 + 3);
          LODWORD(v49) = HIDWORD(v49);
          int v45 = -1640531535 * (v49 >> 19);
          v44 += 16;
        }

        while (v44 < v310 - 15);
        HIDWORD(v51) = v48;
        LODWORD(v51) = v48;
        int v50 = v51 >> 31;
        HIDWORD(v51) = v47;
        LODWORD(v51) = v47;
        int v52 = v51 >> 25;
        HIDWORD(v51) = v46;
        LODWORD(v51) = v46;
        int v53 = v51 >> 20;
        HIDWORD(v51) = v45;
        LODWORD(v51) = v45;
        unsigned int v42 = v50 + v304 + v52 + v53 + (v51 >> 14);
        unint64_t v43 = v275;
      }

      if (v43 >= 4)
      {
        do
        {
          int v54 = *(_DWORD *)v44;
          v44 += 4;
          HIDWORD(v55) = v42 - 1028477379 * v54;
          LODWORD(v55) = HIDWORD(v55);
          unsigned int v42 = 668265263 * (v55 >> 15);
          v43 -= 4LL;
        }

        while (v43 > 3);
      }

      for (; v43; --v43)
      {
        int v56 = *v44++;
        HIDWORD(v57) = v42 + 374761393 * v56;
        LODWORD(v57) = HIDWORD(v57);
        unsigned int v42 = -1640531535 * (v57 >> 21);
      }
    }

    uint64_t v58 = v33;
    unsigned int v59 = -1028477379 * ((-2048144777 * (v42 ^ (v42 >> 15))) ^ ((-2048144777 * (v42 ^ (v42 >> 15))) >> 13));
    int v60 = v59 ^ HIWORD(v59);
    int v61 = XXH_INLINE_XXH32((int *)v307, __n, v60);
    unsigned int v62 = *(FILE **)(v302 + 200);
    if (v62)
    {
      fwrite("qenc: debug: ", 0xDuLL, 1uLL, v62);
      fprintf(*(FILE **)(v302 + 200), "name hash: 0x%X; nameval hash: 0x%X", v60, v61);
      fputc(10, *(FILE **)(v302 + 200));
    }

    int v312 = v60;
    v296 = (_BYTE *)(v32 + v29 - v27);
    int64_t v297 = v28 + v27 - v29;
    uint64_t v298 = &v296[v297];
    int64_t v292 = v35 - v26;
    v293 = (_BYTE *)(v58 + v26 - (void)v24);
    unint64_t v291 = v58 - (void)v24 + v35;
    size_t v63 = v304;
    size_t v64 = v301;
    if (nameval2id_plus_one[v61 & 0x1FF])
    {
      unsigned int v65 = nameval2id_plus_one[v61 & 0x1FF] - 1;
      int v66 = &(&static_table)[3 * v65];
      if (*((_DWORD *)v66 + 4) == (_DWORD)v304
        && *((_DWORD *)&static_table + 6 * v65 + 5) == (_DWORD)v301
        && !memcmp(*v66, v313, v309)
        && !memcmp((&static_table)[3 * v65 + 1], v307, __n))
      {
        uint64_t v306 = 0LL;
        BOOL v287 = 0;
        uint64_t v79 = 0LL;
        uint64_t v80 = 0LL;
        int v81 = 0;
        unsigned int v82 = v65;
        int v308 = v67;
        uint64_t v83 = 1LL;
        uint64_t v9 = v299;
        unint64_t v69 = v288;
        size_t v72 = v309;
        unint64_t v71 = (unint64_t)v310;
        uint64_t v68 = v302;
        goto LABEL_195;
      }
    }

    uint64_t v68 = v302;
    uint64_t v9 = v299;
    unint64_t v69 = v288;
    if (!*(_DWORD *)(v302 + 28))
    {
      BOOL v75 = 0;
      LODWORD(v26) = 0;
      size_t v72 = v309;
      unint64_t v71 = (unint64_t)v310;
      goto LABEL_62;
    }

    uint64_t v70 = *(void *)(v302 + 128);
    size_t v72 = v309;
    unint64_t v71 = (unint64_t)v310;
    if (!v70)
    {
      BOOL v75 = 0;
      LODWORD(v26) = 0;
      goto LABEL_62;
    }

    LODWORD(v26) = 0;
    unsigned int v73 = *(_DWORD *)(v70 + 52);
    unsigned int v74 = *(_DWORD *)(v302 + 20) >> 1;
    BOOL v75 = v73 < v74;
    if (v278)
    {
LABEL_62:
      int v76 = v60;
      goto LABEL_63;
    }

    int v76 = v60;
    if (v73 < v74)
    {
      LODWORD(v26) = *(_DWORD *)v302 != -1;
      BOOL v75 = 1;
    }

BOOL ___ZL27nw_http3_stream_send_fieldsP24nw_protocol_http3_streamb_block_invoke_3(void *a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  if ((nw_frame_uses_external_data(a2) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)int buf = 136446210;
    BOOL v24 = "nw_http3_stream_send_fields_block_invoke_3";
    int v7 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(offset) = 16;
    os_log_type_t offset_7 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v7, &offset, &offset_7))
    {
      if (offset == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v8 = (os_log_s *)gLogObj;
        os_log_type_t v9 = offset;
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)offset))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v24 = "nw_http3_stream_send_fields_block_invoke";
          uint64_t v10 = "%{public}s Encoder stream does not support external data";
LABEL_31:
          _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
        }
      }

      else if (offset_7)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v8 = (os_log_s *)gLogObj;
        os_log_type_t v9 = offset;
        BOOL v16 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)offset);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)int buf = 136446466;
            BOOL v24 = "nw_http3_stream_send_fields_block_invoke";
            __int16 v25 = 2082;
            uint64_t v26 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s Encoder stream does not support external data, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }

        if (v16)
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v24 = "nw_http3_stream_send_fields_block_invoke";
          uint64_t v10 = "%{public}s Encoder stream does not support external data, no backtrace";
          goto LABEL_31;
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v8 = (os_log_s *)gLogObj;
        os_log_type_t v9 = offset;
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)offset))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v24 = "nw_http3_stream_send_fields_block_invoke";
          uint64_t v10 = "%{public}s Encoder stream does not support external data, backtrace limit exceeded";
          goto LABEL_31;
        }
      }
    }

BOOL ___ZL27nw_http3_stream_send_fieldsP24nw_protocol_http3_streamb_block_invoke_101(void *a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  if ((nw_frame_uses_external_data(a2) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)int buf = 136446210;
    BOOL v24 = "nw_http3_stream_send_fields_block_invoke";
    int v7 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(offset) = 16;
    os_log_type_t offset_7 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v7, &offset, &offset_7))
    {
      if (offset == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v8 = (os_log_s *)gLogObj;
        os_log_type_t v9 = offset;
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)offset))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v24 = "nw_http3_stream_send_fields_block_invoke";
          uint64_t v10 = "%{public}s Fields frame does not support external data";
LABEL_31:
          _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
        }
      }

      else if (offset_7)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v8 = (os_log_s *)gLogObj;
        os_log_type_t v9 = offset;
        BOOL v16 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)offset);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)int buf = 136446466;
            BOOL v24 = "nw_http3_stream_send_fields_block_invoke";
            __int16 v25 = 2082;
            uint64_t v26 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s Fields frame does not support external data, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }

        if (v16)
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v24 = "nw_http3_stream_send_fields_block_invoke";
          uint64_t v10 = "%{public}s Fields frame does not support external data, no backtrace";
          goto LABEL_31;
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v8 = (os_log_s *)gLogObj;
        os_log_type_t v9 = offset;
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)offset))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v24 = "nw_http3_stream_send_fields_block_invoke";
          uint64_t v10 = "%{public}s Fields frame does not support external data, backtrace limit exceeded";
          goto LABEL_31;
        }
      }
    }

uint64_t ___ZL32nw_http3_framer_get_input_framesP15nw_http3_framerjjjPyS1_PbPjP16nw_frame_array_s_block_invoke( void *a1, uint64_t a2)
{
  unsigned int v24 = 0;
  unsigned int v4 = (const void *)nw_frame_unclaimed_bytes(a2, &v24);
  uint64_t v5 = a1[5];
  if (!v4) {
    goto LABEL_28;
  }
  uint64_t v6 = *(unsigned __int16 *)(v5 + 84);
  else {
    size_t v7 = 16 - v6;
  }
  memcpy((void *)(v5 + v6 + 68), v4, v7);
  uint64_t v5 = a1[5];
  unsigned __int16 v9 = *(_WORD *)(v5 + 84) + v7;
  *(_WORD *)(v5 + 84) = v9;
  if (!v9) {
    goto LABEL_23;
  }
  uint64_t v10 = (_DWORD *)(v5 + 68);
  unint64_t v11 = *(unsigned __int8 *)(v5 + 68);
  if (v11 <= 0x3F)
  {
    unsigned int v12 = 1;
    goto LABEL_8;
  }

  unsigned int v17 = v11 >> 6;
  if (v17 == 2)
  {
    if (v9 < 4u) {
      goto LABEL_23;
    }
    unint64_t v11 = bswap32(*v10 & 0xFFFFFF7F);
    unsigned int v12 = 4;
  }

  else
  {
    if (v17 == 1)
    {
      if (v9 >= 2u)
      {
        unint64_t v11 = bswap32(*(_WORD *)v10 & 0xFFBF) >> 16;
        unsigned int v12 = 2;
        goto LABEL_8;
      }

uint64_t nw_http3_framer_deliver_http3_frame_body( uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, void *a5, void *a6, _BYTE *a7, uint64_t a8)
{
  uint64_t v66 = *MEMORY[0x1895F89C0];
  uint64_t v58 = 0LL;
  unsigned int v59 = &v58;
  int v61 = 0;
  uint64_t v60 = 0x2000000000LL;
  uint64_t v54 = 0LL;
  unint64_t v55 = &v54;
  int v57 = 0;
  uint64_t v56 = 0x2000000000LL;
  uint64_t v16 = MEMORY[0x1895F87A8];
  v49[0] = MEMORY[0x1895F87A8];
  v49[1] = 0x40000000LL;
  int v50 = (uint64_t (*)(void *))___ZL40nw_http3_framer_deliver_http3_frame_bodyP15nw_http3_framerjjjPyS1_PbP16nw_frame_array_s_block_invoke;
  unint64_t v51 = &unk_189BC4180;
  int v52 = &v58;
  int v53 = &v54;
  uint64_t v17 = *(void *)(a1 + 48);
  do
  {
    if (!v17) {
      break;
    }
    uint64_t v18 = *(void *)(v17 + 32);
    char v19 = v50(v49);
    uint64_t v17 = v18;
  }

  while ((v19 & 1) != 0);
  unint64_t v20 = *((unsigned int *)v59 + 6);
  unint64_t v21 = *(void *)(a1 + 16);
  if (v20 < a3 && v21 > v20)
  {
    uint64_t v23 = *(void *)(a1 + 40);
    if (*((_DWORD *)v55 + 6) < a4 && v23 != 0)
    {
      uint64_t v25 = *(void *)(v23 + 24);
      if (v25)
      {
        if (*(void *)(v25 + 80))
        {
          uint64_t v45 = 0LL;
          int v46 = &v45;
          if (v21 >= a2) {
            LODWORD(v21) = a2;
          }
          uint64_t v26 = (v21 - v20);
          if (v21 < v20 && gLogDatapath)
          {
            uint64_t v35 = v23;
            uint64_t v33 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v34 = *((unsigned int *)v59 + 6);
              *(_DWORD *)int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http3_framer_deliver_http3_frame_body";
              *(_WORD *)&void buf[12] = 2082;
              *(void *)&_BYTE buf[14] = "final_minimum_bytes";
              *(_WORD *)&_BYTE buf[22] = 2048;
              uint64_t v63 = v34;
              __int16 v64 = 2048;
              uint64_t v65 = v26;
              _os_log_impl( &dword_181A5C000,  v33,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  buf,  0x2Au);
            }

            uint64_t v23 = v35;
            uint64_t v16 = MEMORY[0x1895F87A8];
          }

          if (!(*(unsigned int (**)(void))(*(void *)(v23 + 24) + 80LL))())
          {
            uint64_t v31 = 0LL;
            goto LABEL_26;
          }

          if (v45)
          {
            **(void **)(a1 + 56) = v45;
            uint64_t v27 = v46;
            *(void *)(v45 + 40) = *(void *)(a1 + 56);
            *(void *)(a1 + 56) = v27;
          }
        }
      }
    }
  }

  *a5 = *(void *)a1;
  *a6 = *(void *)(a1 + 8);
  *a7 = 0;
  *(void *)int buf = 0LL;
  *(void *)&buf[8] = buf;
  LODWORD(v63) = 0;
  *(void *)&buf[16] = 0x2000000000LL;
  uint64_t v45 = 0LL;
  int v46 = &v45;
  int v48 = 0;
  uint64_t v47 = 0x2000000000LL;
  v36[0] = v16;
  v36[1] = 0x40000000LL;
  __int16 v37 = ___ZL40nw_http3_framer_deliver_http3_frame_bodyP15nw_http3_framerjjjPyS1_PbP16nw_frame_array_s_block_invoke_73;
  int v38 = &unk_189BC41A8;
  unsigned int v44 = a3;
  uint64_t v41 = a1;
  uint64_t v42 = a8;
  __int16 v39 = buf;
  uint64_t v40 = &v45;
  unint64_t v43 = a7;
  uint64_t v28 = *(void *)(a1 + 48);
  do
  {
    if (!v28) {
      break;
    }
    uint64_t v29 = *(void *)(v28 + 32);
    char v30 = ((uint64_t (*)(void *))v37)(v36);
    uint64_t v28 = v29;
  }

  while ((v30 & 1) != 0);
  uint64_t v31 = *((unsigned int *)v46 + 6);
  _Block_object_dispose(&v45, 8);
  _Block_object_dispose(buf, 8);
LABEL_26:
  _Block_object_dispose(&v54, 8);
  _Block_object_dispose(&v58, 8);
  return v31;
}

uint64_t ___ZL40nw_http3_framer_deliver_http3_frame_bodyP15nw_http3_framerjjjPyS1_PbP16nw_frame_array_s_block_invoke( uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += nw_frame_unclaimed_length(a2);
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  return 1LL;
}

uint64_t ___ZL40nw_http3_framer_deliver_http3_frame_bodyP15nw_http3_framerjjjPyS1_PbP16nw_frame_array_s_block_invoke_73( uint64_t a1, uint64_t a2)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void **)(a2 + 40);
  uint64_t v6 = (void *)(a2 + 32);
  if (v4)
  {
    *(void *)(v4 + 40) = v5;
    uint64_t v5 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(*(void *)(a1 + 48) + 56LL) = v5;
  }

  void *v5 = v4;
  void *v6 = 0LL;
  *(void *)(a2 + 40) = 0LL;
  unsigned int v7 = nw_frame_unclaimed_length((_DWORD *)a2);
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8LL);
  unint64_t v9 = *(unsigned int *)(v8 + 24);
  unint64_t v10 = *(unsigned int *)(a1 + 72);
  unint64_t v11 = v10 - v9;
  if (v10 < v9) {
    unint64_t v11 = 0LL;
  }
  if (*(void *)(*(void *)(a1 + 48) + 16LL) + v9 <= v10) {
    unint64_t v12 = *(void *)(*(void *)(a1 + 48) + 16LL);
  }
  else {
    unint64_t v12 = v11;
  }
  uint64_t v13 = v7;
  if (v12 < v7)
  {
    uint64_t v40 = a2;
    uint64_t v14 = nw_frame_split(&v40, v12);
    uint64_t v15 = *(void *)(a1 + 48);
    unint64_t v16 = *(void *)(v15 + 16) - v12;
    *(void *)(v15 + 16) = v16;
    if (!v16) {
      **(_BYTE **)(a1 + 64) = 1;
    }
    if (v14)
    {
      uint64_t v17 = *(void *)(a1 + 56);
      *(void *)(v14 + 32) = 0LL;
      uint64_t v18 = *(uint64_t **)(v17 + 8);
      *(void *)(v14 + 40) = v18;
      uint64_t *v18 = v14;
      *(void *)(v17 + _Block_object_dispose(va, 8) = v14 + 32;
      ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
      uint64_t v19 = *(void *)(a1 + 48);
      uint64_t v20 = v40;
      uint64_t v22 = *(void *)(v19 + 48);
      unint64_t v21 = (uint64_t *)(v19 + 48);
      uint64_t v23 = v40;
      *(void *)(v40 + 32) = v22;
      uint64_t v24 = v23 + 32;
      uint64_t v25 = (uint64_t *)(v22 + 40);
      if (v22) {
        uint64_t v26 = v25;
      }
      else {
        uint64_t v26 = v21 + 1;
      }
      *uint64_t v26 = v24;
      *unint64_t v21 = v20;
      *(void *)(v20 + 40) = v21;
      return 0LL;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)int buf = 136446210;
    uint64_t v42 = "nw_http3_framer_deliver_http3_frame_body_block_invoke";
    uint64_t v32 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (__nwlog_fault(v32, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v33 = (os_log_s *)gLogObj;
        os_log_type_t v34 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v42 = "nw_http3_framer_deliver_http3_frame_body_block_invoke";
        uint64_t v35 = "%{public}s nw_frame_split returned NULL frame";
        goto LABEL_32;
      }

      if (!v38)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v33 = (os_log_s *)gLogObj;
        os_log_type_t v34 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v42 = "nw_http3_framer_deliver_http3_frame_body_block_invoke";
        uint64_t v35 = "%{public}s nw_frame_split returned NULL frame, backtrace limit exceeded";
        goto LABEL_32;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v33 = (os_log_s *)gLogObj;
      os_log_type_t v34 = type;
      BOOL v37 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v37)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v42 = "nw_http3_framer_deliver_http3_frame_body_block_invoke";
          __int16 v43 = 2082;
          unsigned int v44 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v33,  v34,  "%{public}s nw_frame_split returned NULL frame, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_33;
      }

      if (v37)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v42 = "nw_http3_framer_deliver_http3_frame_body_block_invoke";
        uint64_t v35 = "%{public}s nw_frame_split returned NULL frame, no backtrace";
LABEL_32:
        _os_log_impl(&dword_181A5C000, v33, v34, v35, buf, 0xCu);
      }
    }

void ___ZL41nw_protocol_http3_uni_stream_disconnectedP11nw_protocolS0__block_invoke(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if (v1)
  {
    uint64_t v2 = v1;
    __int16 v3 = (void *)(v1 + 104);
    if (gLogDatapath)
    {
      uint64_t v25 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_181A5C000, v25, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
      }
    }

    *(void *)int buf = MEMORY[0x1895F87A8];
    *(void *)&buf[8] = 0x40000000LL;
    *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_60412;
    uint64_t v35 = (char *)&__block_descriptor_tmp_26_60413;
    size_t v36 = v3;
    char v37 = 0;
    uint64_t v4 = *v3;
    do
    {
      if (!v4) {
        break;
      }
      uint64_t v5 = *(void *)(v4 + 32);
      char v6 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
      uint64_t v4 = v5;
    }

    while ((v6 & 1) != 0);
    uint64_t v7 = *(void *)(v2 + 32);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 24);
      if (v8)
      {
        unint64_t v9 = *(void (**)(void))(v8 + 8);
        if (v9)
        {
          v9();
LABEL_10:
          nw_protocol_http3_uni_stream_destroy(v2);
          return;
        }
      }
    }

    __nwlog_obj();
    uint64_t v10 = *(void *)(v2 + 32);
    unint64_t v11 = "invalid";
    if (v10)
    {
      unint64_t v12 = *(const char **)(v10 + 16);
      if (v12) {
        unint64_t v11 = v12;
      }
    }

    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http3_uni_stream_disconnected_block_invoke";
    *(_WORD *)&void buf[12] = 2082;
    *(void *)&_BYTE buf[14] = v11;
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (__nwlog_fault(v13, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v14 = (os_log_s *)__nwlog_obj();
        os_log_type_t v15 = type;
        if (!os_log_type_enabled(v14, type)) {
          goto LABEL_43;
        }
        uint64_t v16 = *(void *)(v2 + 32);
        uint64_t v17 = "invalid";
        if (v16)
        {
          uint64_t v18 = *(const char **)(v16 + 16);
          if (v18) {
            uint64_t v17 = v18;
          }
        }

        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http3_uni_stream_disconnected_block_invoke";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&_BYTE buf[14] = v17;
        uint64_t v19 = "%{public}s protocol %{public}s has invalid remove_input_handler callback";
        goto LABEL_42;
      }

      if (!v32)
      {
        uint64_t v14 = (os_log_s *)__nwlog_obj();
        os_log_type_t v15 = type;
        if (!os_log_type_enabled(v14, type)) {
          goto LABEL_43;
        }
        uint64_t v26 = *(void *)(v2 + 32);
        uint64_t v27 = "invalid";
        if (v26)
        {
          uint64_t v28 = *(const char **)(v26 + 16);
          if (v28) {
            uint64_t v27 = v28;
          }
        }

        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http3_uni_stream_disconnected_block_invoke";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&_BYTE buf[14] = v27;
        uint64_t v19 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, backtrace limit exceeded";
        goto LABEL_42;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v21 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v21)
        {
          uint64_t v22 = *(void *)(v2 + 32);
          uint64_t v23 = "invalid";
          if (v22)
          {
            uint64_t v24 = *(const char **)(v22 + 16);
            if (v24) {
              uint64_t v23 = v24;
            }
          }

          *(_DWORD *)int buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_protocol_http3_uni_stream_disconnected_block_invoke";
          *(_WORD *)&void buf[12] = 2082;
          *(void *)&_BYTE buf[14] = v23;
          *(_WORD *)&_BYTE buf[22] = 2082;
          uint64_t v35 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s protocol %{public}s has invalid remove_input_handler callback, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(backtrace_string);
        goto LABEL_43;
      }

      if (v21)
      {
        uint64_t v29 = *(void *)(v2 + 32);
        char v30 = "invalid";
        if (v29)
        {
          uint64_t v31 = *(const char **)(v29 + 16);
          if (v31) {
            char v30 = v31;
          }
        }

        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http3_uni_stream_disconnected_block_invoke";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&_BYTE buf[14] = v30;
        uint64_t v19 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, no backtrace";
LABEL_42:
        _os_log_impl(&dword_181A5C000, v14, v15, v19, buf, 0x16u);
      }
    }

void ___ZL31nw_protocol_http3_get_callbacksv_block_invoke()
{
  qword_18C593798 = (uint64_t)nw_protocol_default_get_output_interface;
  unk_18C5937A0 = nw_protocol_default_waiting_for_output;
  qword_18C593758 = (uint64_t)nw_protocol_default_register_notification;
  unk_18C593760 = nw_protocol_default_unregister_notification;
  qword_18C5936D8 = (uint64_t)nw_protocol_default_replace_input_handler;
  unk_18C5936E0 = nw_protocol_http3_connect;
  qword_18C5936E8 = (uint64_t)nw_protocol_http3_disconnect;
  unk_18C5936F0 = nw_protocol_http3_connected;
  qword_18C5936F8 = (uint64_t)nw_protocol_http3_disconnected;
  unk_18C593700 = nw_protocol_http3_error;
  nw_protocol_http3_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_http3_add_input_handler;
  unk_18C5936D0 = nw_protocol_http3_remove_input_handler;
  qword_18C593708 = (uint64_t)nw_protocol_http3_input_available;
  unk_18C593710 = nw_protocol_http3_output_available;
  qword_18C593718 = (uint64_t)nw_protocol_http3_get_input_frames;
  unk_18C593720 = nw_protocol_http3_uni_stream_get_output_frames;
  qword_18C5937A8 = (uint64_t)nw_protocol_default_copy_info;
  unk_18C5937B0 = nw_protocol_http3_add_listen_handler;
  qword_18C5937B8 = (uint64_t)nw_protocol_http3_remove_listen_handler;
  unk_18C5937C0 = nw_protocol_default_get_message_properties;
  qword_18C593748 = (uint64_t)nw_protocol_http3_get_local_endpoint;
  unk_18C593750 = nw_protocol_http3_get_remote_endpoint;
  qword_18C593738 = (uint64_t)nw_protocol_http3_get_parameters;
  unk_18C593740 = nw_protocol_http3_get_path;
  qword_18C593768 = (uint64_t)nw_protocol_http3_notify;
  unk_18C593770 = nw_protocol_default_updated_path;
  qword_18C593728 = (uint64_t)nw_protocol_http3_uni_stream_finalize_output_frames;
  unk_18C593730 = nw_protocol_http3_link_state;
  qword_18C593788 = (uint64_t)nw_protocol_http3_output_finished;
  unk_18C593790 = nw_protocol_http3_get_output_local_endpoint;
  qword_18C5937C8 = (uint64_t)nw_protocol_http3_reset;
  unk_18C5937D0 = nw_protocol_default_input_flush;
  qword_18C593778 = (uint64_t)nw_protocol_http3_supports_external_data;
  unk_18C593780 = nw_protocol_http3_input_finished;
}

uint64_t nw_protocol_http3_connect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v23 = "nw_protocol_http3_connect";
    unint64_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v12 = (os_log_s *)__nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v23 = "nw_protocol_http3_connect";
      uint64_t v14 = "%{public}s called with null protocol";
LABEL_60:
      _os_log_impl(&dword_181A5C000, v12, v13, v14, buf, 0xCu);
      goto LABEL_61;
    }

    if (!v20)
    {
      unint64_t v12 = (os_log_s *)__nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v23 = "nw_protocol_http3_connect";
        uint64_t v14 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_60;
      }

      goto LABEL_61;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    unint64_t v12 = (os_log_s *)__nwlog_obj();
    os_log_type_t v13 = type;
    BOOL v16 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v23 = "nw_protocol_http3_connect";
        uint64_t v14 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_60;
      }

      goto LABEL_61;
    }

    if (!v16) {
      goto LABEL_47;
    }
    *(_DWORD *)int buf = 136446466;
    uint64_t v23 = "nw_protocol_http3_connect";
    __int16 v24 = 2082;
    uint64_t v25 = backtrace_string;
    uint64_t v17 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_46:
    _os_log_impl(&dword_181A5C000, v12, v13, v17, buf, 0x16u);
    goto LABEL_47;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v23 = "nw_protocol_http3_connect";
    unint64_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v12 = (os_log_s *)__nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v23 = "nw_protocol_http3_connect";
      uint64_t v14 = "%{public}s called with null http3";
      goto LABEL_60;
    }

    if (!v20)
    {
      unint64_t v12 = (os_log_s *)__nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v23 = "nw_protocol_http3_connect";
        uint64_t v14 = "%{public}s called with null http3, backtrace limit exceeded";
        goto LABEL_60;
      }

      goto LABEL_61;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    unint64_t v12 = (os_log_s *)__nwlog_obj();
    os_log_type_t v13 = type;
    BOOL v18 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v23 = "nw_protocol_http3_connect";
        uint64_t v14 = "%{public}s called with null http3, no backtrace";
        goto LABEL_60;
      }

      goto LABEL_61;
    }

    if (!v18) {
      goto LABEL_47;
    }
    *(_DWORD *)int buf = 136446466;
    uint64_t v23 = "nw_protocol_http3_connect";
    __int16 v24 = 2082;
    uint64_t v25 = backtrace_string;
    uint64_t v17 = "%{public}s called with null http3, dumping backtrace:%{public}s";
    goto LABEL_46;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  if (a2)
  {
    *(_DWORD *)int buf = 136446466;
    uint64_t v23 = "nw_protocol_http3_connect";
    __int16 v24 = 2048;
    uint64_t v25 = handle;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v4, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v5 = (os_log_s *)gLogObj;
        os_log_type_t v6 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v23 = "nw_protocol_http3_connect";
          __int16 v24 = 2048;
          uint64_t v25 = handle;
          uint64_t v7 = "%{public}s http3 %p called";
LABEL_17:
          _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0x16u);
        }
      }

      else if (v20)
      {
        uint64_t v8 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v5 = (os_log_s *)gLogObj;
        os_log_type_t v6 = type;
        BOOL v9 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v8)
        {
          if (v9)
          {
            *(_DWORD *)int buf = 136446722;
            uint64_t v23 = "nw_protocol_http3_connect";
            __int16 v24 = 2048;
            uint64_t v25 = handle;
            __int16 v26 = 2082;
            uint64_t v27 = v8;
            _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s http3 %p called, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v8);
          goto LABEL_18;
        }

        if (v9)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v23 = "nw_protocol_http3_connect";
          __int16 v24 = 2048;
          uint64_t v25 = handle;
          uint64_t v7 = "%{public}s http3 %p called, no backtrace";
          goto LABEL_17;
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v5 = (os_log_s *)gLogObj;
        os_log_type_t v6 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v23 = "nw_protocol_http3_connect";
          __int16 v24 = 2048;
          uint64_t v25 = handle;
          uint64_t v7 = "%{public}s http3 %p called, backtrace limit exceeded";
          goto LABEL_17;
        }
      }
    }

void nw_protocol_http3_connected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v72 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v61 = "nw_protocol_http3_connected";
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buffer_ptr) = 16;
    LOBYTE(size_ptr) = 0;
    if (buffer_ptr == 17)
    {
      __int16 v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = buffer_ptr;
      if (!os_log_type_enabled(v26, (os_log_type_t)buffer_ptr)) {
        goto LABEL_52;
      }
      *(_DWORD *)int buf = 136446210;
      int v61 = "nw_protocol_http3_connected";
      uint64_t v28 = "%{public}s called with null protocol";
    }

    else
    {
      if ((_BYTE)size_ptr)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __int16 v26 = (os_log_s *)__nwlog_obj();
        os_log_type_t v27 = buffer_ptr;
        BOOL v46 = os_log_type_enabled(v26, (os_log_type_t)buffer_ptr);
        if (backtrace_string)
        {
          if (v46)
          {
            *(_DWORD *)int buf = 136446466;
            int v61 = "nw_protocol_http3_connected";
            __int16 v62 = 2082;
            uint64_t v63 = (nw_protocol *)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v26,  v27,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
        }

        else if (v46)
        {
          *(_DWORD *)int buf = 136446210;
          int v61 = "nw_protocol_http3_connected";
          uint64_t v28 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_51;
        }

        goto LABEL_52;
      }

      __int16 v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = buffer_ptr;
      if (!os_log_type_enabled(v26, (os_log_type_t)buffer_ptr)) {
        goto LABEL_52;
      }
      *(_DWORD *)int buf = 136446210;
      int v61 = "nw_protocol_http3_connected";
      uint64_t v28 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_51;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v61 = "nw_protocol_http3_connected";
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buffer_ptr) = 16;
    LOBYTE(size_ptr) = 0;
    if (buffer_ptr == 17)
    {
      __int16 v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = buffer_ptr;
      if (!os_log_type_enabled(v26, (os_log_type_t)buffer_ptr)) {
        goto LABEL_52;
      }
      *(_DWORD *)int buf = 136446210;
      int v61 = "nw_protocol_http3_connected";
      uint64_t v28 = "%{public}s called with null http3";
      goto LABEL_51;
    }

    if ((_BYTE)size_ptr)
    {
      uint64_t v29 = (char *)__nw_create_backtrace_string();
      __int16 v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = buffer_ptr;
      BOOL v47 = os_log_type_enabled(v26, (os_log_type_t)buffer_ptr);
      if (!v29)
      {
        if (v47)
        {
          *(_DWORD *)int buf = 136446210;
          int v61 = "nw_protocol_http3_connected";
          uint64_t v28 = "%{public}s called with null http3, no backtrace";
          goto LABEL_51;
        }

        goto LABEL_52;
      }

      if (!v47) {
        goto LABEL_45;
      }
      *(_DWORD *)int buf = 136446466;
      int v61 = "nw_protocol_http3_connected";
      __int16 v62 = 2082;
      uint64_t v63 = (nw_protocol *)v29;
      uint64_t v31 = "%{public}s called with null http3, dumping backtrace:%{public}s";
      goto LABEL_44;
    }

    __int16 v26 = (os_log_s *)__nwlog_obj();
    os_log_type_t v27 = buffer_ptr;
    if (!os_log_type_enabled(v26, (os_log_type_t)buffer_ptr)) {
      goto LABEL_52;
    }
    *(_DWORD *)int buf = 136446210;
    int v61 = "nw_protocol_http3_connected";
    uint64_t v28 = "%{public}s called with null http3, backtrace limit exceeded";
LABEL_51:
    _os_log_impl(&dword_181A5C000, v26, v27, v28, buf, 0xCu);
    goto LABEL_52;
  }

  uint64_t v5 = handle + 1373;
  if (((*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0x400000) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v38 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
      {
        int v39 = *((_DWORD *)handle + 320);
        *(_DWORD *)int buf = 136446978;
        int v61 = "nw_protocol_http3_connected";
        __int16 v62 = 2082;
        uint64_t v63 = (nw_protocol *)(handle + 1289);
        __int16 v64 = 2080;
        uint64_t v65 = " ";
        __int16 v66 = 1024;
        int v67 = v39;
        _os_log_impl( &dword_181A5C000,  v38,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> Got a connected event from the lower layer",  buf,  0x26u);
      }
    }
  }

  uint64_t v6 = *((void *)handle + 110);
  if (v6)
  {
    int v7 = 0;
    do
    {
      ++v7;
      uint64_t v6 = *(void *)(v6 + 544);
    }

    while (v6);
  }

  else
  {
    int v7 = 0;
  }

  if ((((unsigned __int16)*v5 | (handle[1375] << 16)) & 0x400000) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v40 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
      {
        int v41 = *((_DWORD *)handle + 320);
        *(_DWORD *)int buf = 136447234;
        int v61 = "nw_protocol_http3_connected";
        __int16 v62 = 2082;
        uint64_t v63 = (nw_protocol *)(handle + 1289);
        __int16 v64 = 2080;
        uint64_t v65 = " ";
        __int16 v66 = 1024;
        int v67 = v41;
        __int16 v68 = 1024;
        LODWORD(v69) = v7;
        _os_log_impl( &dword_181A5C000,  v40,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> http3 has %u streams",  buf,  0x2Cu);
      }
    }
  }

  int v8 = *(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16);
  if (a1->output_handler != a2)
  {
    if ((v8 & 0x400000) == 0 && gLogDatapath)
    {
      BOOL v9 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        int v10 = *((_DWORD *)handle + 320);
        identifier = a2->identifier;
        *(_DWORD *)int buf = 136447490;
        int v61 = "nw_protocol_http3_connected";
        __int16 v62 = 2082;
        uint64_t v63 = (nw_protocol *)(handle + 1289);
        __int16 v64 = 2080;
        uint64_t v65 = " ";
        __int16 v66 = 1024;
        int v67 = v10;
        __int16 v68 = 2048;
        unint64_t v69 = a2;
        __int16 v70 = 2080;
        unint64_t v71 = identifier;
        _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> connected protocol %p (%s) is not our output_handler, ignoring",  buf,  0x3Au);
      }
    }

    return;
  }

  handle[1375] = BYTE2(v8);
  _WORD *v5 = v8 | 0x10;
  output_handler = a1->output_handler;
  if (!output_handler
    || (callbacks = output_handler->callbacks) == 0LL
    || (waiting_for_output = (unsigned int (*)(void))callbacks->waiting_for_output) == 0LL)
  {
    __nwlog_obj();
    char v32 = a1->output_handler;
    *(_DWORD *)int buf = 136446466;
    int v61 = "nw_protocol_http3_connected";
    __int16 v62 = 2048;
    uint64_t v63 = v32;
    uint64_t v33 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buffer_ptr) = 16;
    LOBYTE(size_ptr) = 0;
    if (buffer_ptr == 17)
    {
      os_log_type_t v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = buffer_ptr;
      if (!os_log_type_enabled(v34, (os_log_type_t)buffer_ptr)) {
        goto LABEL_106;
      }
      size_t v36 = a1->output_handler;
      *(_DWORD *)int buf = 136446466;
      int v61 = "nw_protocol_http3_connected";
      __int16 v62 = 2048;
      uint64_t v63 = v36;
      char v37 = "%{public}s Output handler (%p)'s waiting_for_output callback is not properly set";
    }

    else if ((_BYTE)size_ptr)
    {
      uint64_t v42 = (char *)__nw_create_backtrace_string();
      os_log_type_t v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = buffer_ptr;
      BOOL v43 = os_log_type_enabled(v34, (os_log_type_t)buffer_ptr);
      if (v42)
      {
        if (v43)
        {
          unsigned int v44 = a1->output_handler;
          *(_DWORD *)int buf = 136446722;
          int v61 = "nw_protocol_http3_connected";
          __int16 v62 = 2048;
          uint64_t v63 = v44;
          __int16 v64 = 2082;
          uint64_t v65 = v42;
          _os_log_impl( &dword_181A5C000,  v34,  v35,  "%{public}s Output handler (%p)'s waiting_for_output callback is not properly set, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v42);
LABEL_106:
        if (v33) {
          free(v33);
        }
        if ((*v5 & 0x100) != 0) {
          goto LABEL_24;
        }
        goto LABEL_25;
      }

      if (!v43) {
        goto LABEL_106;
      }
      int v53 = a1->output_handler;
      *(_DWORD *)int buf = 136446466;
      int v61 = "nw_protocol_http3_connected";
      __int16 v62 = 2048;
      uint64_t v63 = v53;
      char v37 = "%{public}s Output handler (%p)'s waiting_for_output callback is not properly set, no backtrace";
    }

    else
    {
      os_log_type_t v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = buffer_ptr;
      if (!os_log_type_enabled(v34, (os_log_type_t)buffer_ptr)) {
        goto LABEL_106;
      }
      int v48 = a1->output_handler;
      *(_DWORD *)int buf = 136446466;
      int v61 = "nw_protocol_http3_connected";
      __int16 v62 = 2048;
      uint64_t v63 = v48;
      char v37 = "%{public}s Output handler (%p)'s waiting_for_output callback is not properly set, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v34, v35, v37, buf, 0x16u);
    goto LABEL_106;
  }

  if (waiting_for_output()) {
    __int16 v16 = 256;
  }
  else {
    __int16 v16 = 0;
  }
  __int16 v17 = *(_WORD *)(handle + 1373) & 0xFEFF | v16;
  _WORD *v5 = v17;
  if ((v17 & 0x100) != 0) {
LABEL_24:
  }
    nw_http3_signal_output_pending((uint64_t)handle, 1);
LABEL_25:
  nw_http3_control_stream_process_output((uint64_t)handle, v15);
  int v18 = (unsigned __int16)*v5;
  if ((v18 & 0x100) == 0)
  {
    if (((v18 | (handle[1375] << 16)) & 0x400000) == 0)
    {
      if (gLogDatapath)
      {
        unint64_t v49 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
        {
          int v50 = *((_DWORD *)handle + 320);
          *(_DWORD *)int buf = 136446978;
          int v61 = "nw_protocol_http3_connected";
          __int16 v62 = 2082;
          uint64_t v63 = (nw_protocol *)(handle + 1289);
          __int16 v64 = 2080;
          uint64_t v65 = " ";
          __int16 v66 = 1024;
          int v67 = v50;
          _os_log_impl( &dword_181A5C000,  v49,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> http3 connection is connected",  buf,  0x26u);
        }
      }
    }

    if ((((unsigned __int16)*v5 | (handle[1375] << 16)) & 0x400000) == 0)
    {
      if (gLogDatapath)
      {
        unint64_t v51 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
        {
          int v52 = *((_DWORD *)handle + 320);
          *(_DWORD *)int buf = 136446978;
          int v61 = "nw_http3_add_edges";
          __int16 v62 = 2082;
          uint64_t v63 = (nw_protocol *)(handle + 1289);
          __int16 v64 = 2080;
          uint64_t v65 = " ";
          __int16 v66 = 1024;
          int v67 = v52;
          _os_log_impl(&dword_181A5C000, v51, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
        }
      }
    }

    BOOL v19 = (void *)*((void *)handle + 137);
    if (v19)
    {
      char v20 = v19;
      BOOL v21 = (v20[231] & 4) == 0;

      if (!v21)
      {
        nw_endpoint_add_edges_for_instance(*((void **)handle + 137), (unsigned __int8 *)handle, 1);
        return;
      }

      __nwlog_obj();
      *(_DWORD *)int buf = 136446210;
      int v61 = "nw_http3_add_edges";
      uint64_t v25 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(buffer_ptr) = 16;
      LOBYTE(size_ptr) = 0;
      if (buffer_ptr == 17)
      {
        __int16 v26 = (os_log_s *)__nwlog_obj();
        os_log_type_t v27 = buffer_ptr;
        if (os_log_type_enabled(v26, (os_log_type_t)buffer_ptr))
        {
          *(_DWORD *)int buf = 136446210;
          int v61 = "nw_http3_add_edges";
          uint64_t v28 = "%{public}s http3->remote_endpoint is not registered when connected";
          goto LABEL_51;
        }

void nw_protocol_http3_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    dispatch_data_t v23 = "nw_protocol_http3_disconnect";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_19;
      }
      *(_DWORD *)int buf = 136446210;
      dispatch_data_t v23 = "nw_protocol_http3_disconnect";
      int v7 = "%{public}s called with null protocol";
      goto LABEL_61;
    }

    if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v16 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (!v16) {
          goto LABEL_47;
        }
        *(_DWORD *)int buf = 136446466;
        dispatch_data_t v23 = "nw_protocol_http3_disconnect";
        __int16 v24 = 2082;
        uint64_t v25 = backtrace_string;
        __int16 v17 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_46;
      }

      if (!v16) {
        goto LABEL_19;
      }
      *(_DWORD *)int buf = 136446210;
      dispatch_data_t v23 = "nw_protocol_http3_disconnect";
      int v7 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      os_log_type_t v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_19;
      }
      *(_DWORD *)int buf = 136446210;
      dispatch_data_t v23 = "nw_protocol_http3_disconnect";
      int v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

void nw_protocol_http3_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v122 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v115 = "nw_protocol_http3_disconnected";
    unint64_t v49 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v112 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v50 = (os_log_s *)__nwlog_obj();
      os_log_type_t v51 = type;
      if (!os_log_type_enabled(v50, type)) {
        goto LABEL_153;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v115 = "nw_protocol_http3_disconnected";
      int v52 = "%{public}s called with null protocol";
    }

    else if (v112)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v50 = (os_log_s *)__nwlog_obj();
      os_log_type_t v51 = type;
      BOOL v81 = os_log_type_enabled(v50, type);
      if (backtrace_string)
      {
        if (v81)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v115 = "nw_protocol_http3_disconnected";
          __int16 v116 = 2082;
          unint64_t v117 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v50,  v51,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_153:
        if (!v49) {
          return;
        }
LABEL_154:
        free(v49);
        return;
      }

      if (!v81) {
        goto LABEL_153;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v115 = "nw_protocol_http3_disconnected";
      int v52 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      int v50 = (os_log_s *)__nwlog_obj();
      os_log_type_t v51 = type;
      if (!os_log_type_enabled(v50, type)) {
        goto LABEL_153;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v115 = "nw_protocol_http3_disconnected";
      int v52 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

void nw_protocol_http3_error(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v62 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)block = 136446210;
    *(void *)&void block[4] = "nw_protocol_http3_error";
    __int16 v24 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v51 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      if (!os_log_type_enabled(v25, type)) {
        goto LABEL_92;
      }
      *(_DWORD *)block = 136446210;
      *(void *)&void block[4] = "nw_protocol_http3_error";
      os_log_type_t v27 = "%{public}s called with null protocol";
    }

    else if (v51)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      BOOL v31 = os_log_type_enabled(v25, type);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)block = 136446466;
          *(void *)&void block[4] = "nw_protocol_http3_error";
          *(_WORD *)&block[12] = 2082;
          *(void *)&block[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v25,  v26,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  block,  0x16u);
        }

        free(backtrace_string);
LABEL_92:
        if (!v24) {
          return;
        }
        goto LABEL_93;
      }

      if (!v31) {
        goto LABEL_92;
      }
      *(_DWORD *)block = 136446210;
      *(void *)&void block[4] = "nw_protocol_http3_error";
      os_log_type_t v27 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      uint64_t v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      if (!os_log_type_enabled(v25, type)) {
        goto LABEL_92;
      }
      *(_DWORD *)block = 136446210;
      *(void *)&void block[4] = "nw_protocol_http3_error";
      os_log_type_t v27 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_91;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)block = 136446210;
    *(void *)&void block[4] = "nw_protocol_http3_error";
    __int16 v24 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v51 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v51)
      {
        uint64_t v25 = (os_log_s *)__nwlog_obj();
        os_log_type_t v26 = type;
        if (!os_log_type_enabled(v25, type)) {
          goto LABEL_92;
        }
        *(_DWORD *)block = 136446210;
        *(void *)&void block[4] = "nw_protocol_http3_error";
        os_log_type_t v27 = "%{public}s called with null http3, backtrace limit exceeded";
        goto LABEL_91;
      }

      char v32 = (char *)__nw_create_backtrace_string();
      uint64_t v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      BOOL v33 = os_log_type_enabled(v25, type);
      if (!v32)
      {
        if (!v33) {
          goto LABEL_92;
        }
        *(_DWORD *)block = 136446210;
        *(void *)&void block[4] = "nw_protocol_http3_error";
        os_log_type_t v27 = "%{public}s called with null http3, no backtrace";
        goto LABEL_91;
      }

      if (v33)
      {
        *(_DWORD *)block = 136446466;
        *(void *)&void block[4] = "nw_protocol_http3_error";
        *(_WORD *)&block[12] = 2082;
        *(void *)&block[14] = v32;
        uint64_t v34 = "%{public}s called with null http3, dumping backtrace:%{public}s";
LABEL_62:
        _os_log_impl(&dword_181A5C000, v25, v26, v34, block, 0x16u);
      }

void nw_protocol_http3_output_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v17 = "nw_protocol_http3_output_finished";
    __int16 v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v17 = "nw_protocol_http3_output_finished";
      unsigned int v6 = "%{public}s called with null protocol";
      goto LABEL_17;
    }

    if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v10 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (!v10) {
          goto LABEL_46;
        }
        *(_DWORD *)int buf = 136446466;
        uint64_t v17 = "nw_protocol_http3_output_finished";
        __int16 v18 = 2082;
        id v19 = backtrace_string;
        uint64_t v11 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_45;
      }

      if (!v10) {
        goto LABEL_18;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v17 = "nw_protocol_http3_output_finished";
      unsigned int v6 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v17 = "nw_protocol_http3_output_finished";
      unsigned int v6 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

void nw_protocol_http3_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v18 = "nw_protocol_http3_input_finished";
    __int16 v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v18 = "nw_protocol_http3_input_finished";
      unsigned int v6 = "%{public}s called with null protocol";
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v10 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v18 = "nw_protocol_http3_input_finished";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_52:
        if (!v3) {
          return;
        }
        goto LABEL_53;
      }

      if (!v10) {
        goto LABEL_52;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v18 = "nw_protocol_http3_input_finished";
      unsigned int v6 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v18 = "nw_protocol_http3_input_finished";
      unsigned int v6 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_51;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v18 = "nw_protocol_http3_input_finished";
    __int16 v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v15)
      {
        uint64_t v4 = (os_log_s *)__nwlog_obj();
        os_log_type_t v5 = type;
        if (!os_log_type_enabled(v4, type)) {
          goto LABEL_52;
        }
        *(_DWORD *)int buf = 136446210;
        __int16 v18 = "nw_protocol_http3_input_finished";
        unsigned int v6 = "%{public}s called with null http3, backtrace limit exceeded";
        goto LABEL_51;
      }

      uint64_t v11 = (char *)__nw_create_backtrace_string();
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v12 = os_log_type_enabled(v4, type);
      if (!v11)
      {
        if (!v12) {
          goto LABEL_52;
        }
        *(_DWORD *)int buf = 136446210;
        __int16 v18 = "nw_protocol_http3_input_finished";
        unsigned int v6 = "%{public}s called with null http3, no backtrace";
        goto LABEL_51;
      }

      if (v12)
      {
        *(_DWORD *)int buf = 136446466;
        __int16 v18 = "nw_protocol_http3_input_finished";
        __int16 v19 = 2082;
        uint64_t v20 = v11;
        BOOL v13 = "%{public}s called with null http3, dumping backtrace:%{public}s";
LABEL_36:
        _os_log_impl(&dword_181A5C000, v4, v5, v13, buf, 0x16u);
      }

BOOL nw_protocol_http3_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v231 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http3_add_input_handler";
    int v163 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v228[0] = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v164 = (os_log_s *)__nwlog_obj();
      os_log_type_t v165 = type[0];
      if (!os_log_type_enabled(v164, type[0])) {
        goto LABEL_375;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_add_input_handler";
      unsigned int v166 = "%{public}s called with null protocol";
      goto LABEL_374;
    }

    if (!v228[0])
    {
      int v164 = (os_log_s *)__nwlog_obj();
      os_log_type_t v165 = type[0];
      if (!os_log_type_enabled(v164, type[0])) {
        goto LABEL_375;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_add_input_handler";
      unsigned int v166 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_374;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v164 = (os_log_s *)__nwlog_obj();
    os_log_type_t v165 = type[0];
    BOOL v168 = os_log_type_enabled(v164, type[0]);
    if (!backtrace_string)
    {
      if (!v168) {
        goto LABEL_375;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_add_input_handler";
      unsigned int v166 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_374;
    }

    if (!v168) {
      goto LABEL_300;
    }
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http3_add_input_handler";
    *(_WORD *)&void buf[12] = 2082;
    *(void *)&_BYTE buf[14] = backtrace_string;
    int v169 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_299:
    _os_log_impl(&dword_181A5C000, v164, v165, v169, buf, 0x16u);
    goto LABEL_300;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http3_add_input_handler";
    int v163 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v228[0] = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v164 = (os_log_s *)__nwlog_obj();
      os_log_type_t v165 = type[0];
      if (!os_log_type_enabled(v164, type[0])) {
        goto LABEL_375;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_add_input_handler";
      unsigned int v166 = "%{public}s called with null http3";
      goto LABEL_374;
    }

    if (!v228[0])
    {
      int v164 = (os_log_s *)__nwlog_obj();
      os_log_type_t v165 = type[0];
      if (!os_log_type_enabled(v164, type[0])) {
        goto LABEL_375;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_add_input_handler";
      unsigned int v166 = "%{public}s called with null http3, backtrace limit exceeded";
      goto LABEL_374;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v164 = (os_log_s *)__nwlog_obj();
    os_log_type_t v165 = type[0];
    BOOL v170 = os_log_type_enabled(v164, type[0]);
    if (!backtrace_string)
    {
      if (!v170) {
        goto LABEL_375;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_add_input_handler";
      unsigned int v166 = "%{public}s called with null http3, no backtrace";
      goto LABEL_374;
    }

    if (!v170) {
      goto LABEL_300;
    }
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http3_add_input_handler";
    *(_WORD *)&void buf[12] = 2082;
    *(void *)&_BYTE buf[14] = backtrace_string;
    int v169 = "%{public}s called with null http3, dumping backtrace:%{public}s";
    goto LABEL_299;
  }

  unsigned int v222 = handle + 1373;
  if ((*(_WORD *)(handle + 1373) & 8) == 0)
  {
    nw_parameters_t parameters = (void *)nw_protocol_get_parameters((uint64_t)a2);
    if (parameters)
    {
      unsigned int v219 = a1;
      unsigned int v6 = parameters;
      id v7 = *(id *)(v6[13] + 136LL);

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v8 = *((void *)handle + 157);
      *(_DWORD *)int buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_add_input_handler";
      *(_WORD *)&void buf[12] = 2048;
      *(void *)&_BYTE buf[14] = a2;
      *(_WORD *)&_BYTE buf[22] = 2112;
      *(void *)&_BYTE buf[24] = v7;
      *(_WORD *)&_BYTE buf[32] = 2112;
      *(void *)&buf[34] = v8;
      id v9 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      v228[0] = 0;
      if (__nwlog_fault(v9, type, v228))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v10 = gLogObj;
          os_log_type_t v11 = type[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
            goto LABEL_22;
          }
          uint64_t v12 = *((void *)handle + 157);
          *(_DWORD *)int buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_http3_add_input_handler";
          *(_WORD *)&void buf[12] = 2048;
          *(void *)&_BYTE buf[14] = a2;
          *(_WORD *)&_BYTE buf[22] = 2112;
          *(void *)&_BYTE buf[24] = v7;
          *(_WORD *)&_BYTE buf[32] = 2112;
          *(void *)&buf[34] = v12;
          BOOL v13 = "%{public}s Incoming stream %p has different workloop on context %@ than original one from protocol creat"
                "e, which had workloop %@";
LABEL_20:
          __int16 v23 = (os_log_s *)v10;
          os_log_type_t v24 = v11;
LABEL_21:
          _os_log_impl(&dword_181A5C000, v23, v24, v13, buf, 0x2Au);
          goto LABEL_22;
        }

        if (!v228[0])
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v10 = gLogObj;
          os_log_type_t v11 = type[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
            goto LABEL_22;
          }
          uint64_t v22 = *((void *)handle + 157);
          *(_DWORD *)int buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_http3_add_input_handler";
          *(_WORD *)&void buf[12] = 2048;
          *(void *)&_BYTE buf[14] = a2;
          *(_WORD *)&_BYTE buf[22] = 2112;
          *(void *)&_BYTE buf[24] = v7;
          *(_WORD *)&_BYTE buf[32] = 2112;
          *(void *)&buf[34] = v22;
          BOOL v13 = "%{public}s Incoming stream %p has different workloop on context %@ than original one from protocol creat"
                "e, which had workloop %@, backtrace limit exceeded";
          goto LABEL_20;
        }

        uint64_t v17 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v18 = (os_log_s *)gLogObj;
        os_log_type_t v19 = type[0];
        BOOL v20 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (v17)
        {
          if (v20)
          {
            uint64_t v21 = *((void *)handle + 157);
            *(_DWORD *)int buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_protocol_http3_add_input_handler";
            *(_WORD *)&void buf[12] = 2048;
            *(void *)&_BYTE buf[14] = a2;
            *(_WORD *)&_BYTE buf[22] = 2112;
            *(void *)&_BYTE buf[24] = v7;
            *(_WORD *)&_BYTE buf[32] = 2112;
            *(void *)&buf[34] = v21;
            *(_WORD *)&buf[42] = 2082;
            *(void *)&buf[44] = v17;
            _os_log_impl( &dword_181A5C000,  v18,  v19,  "%{public}s Incoming stream %p has different workloop on context %@ than original one from protocol create, which had workloop %@, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v17);
          goto LABEL_22;
        }

        if (v20)
        {
          uint64_t v144 = *((void *)handle + 157);
          *(_DWORD *)int buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_http3_add_input_handler";
          *(_WORD *)&void buf[12] = 2048;
          *(void *)&_BYTE buf[14] = a2;
          *(_WORD *)&_BYTE buf[22] = 2112;
          *(void *)&_BYTE buf[24] = v7;
          *(_WORD *)&_BYTE buf[32] = 2112;
          *(void *)&buf[34] = v144;
          BOOL v13 = "%{public}s Incoming stream %p has different workloop on context %@ than original one from protocol creat"
                "e, which had workloop %@, no backtrace";
          __int16 v23 = v18;
          os_log_type_t v24 = v19;
          goto LABEL_21;
        }
      }

void sub_1823BF544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_http3_remove_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v65 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    nw_protocol_stack_t v52 = "nw_protocol_http3_remove_input_handler";
    uint64_t v40 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v49)
      {
        id v41 = (os_log_s *)__nwlog_obj();
        os_log_type_t v42 = type;
        if (!os_log_type_enabled(v41, type)) {
          goto LABEL_83;
        }
        *(_DWORD *)int buf = 136446210;
        nw_protocol_stack_t v52 = "nw_protocol_http3_remove_input_handler";
        BOOL v43 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_82;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      id v41 = (os_log_s *)__nwlog_obj();
      os_log_type_t v42 = type;
      BOOL v45 = os_log_type_enabled(v41, type);
      if (!backtrace_string)
      {
        if (!v45) {
          goto LABEL_83;
        }
        *(_DWORD *)int buf = 136446210;
        nw_protocol_stack_t v52 = "nw_protocol_http3_remove_input_handler";
        BOOL v43 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_82;
      }

      if (v45)
      {
        *(_DWORD *)int buf = 136446466;
        nw_protocol_stack_t v52 = "nw_protocol_http3_remove_input_handler";
        __int16 v53 = 2082;
        int v54 = backtrace_string;
        BOOL v46 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_72:
        _os_log_impl(&dword_181A5C000, v41, v42, v46, buf, 0x16u);
      }

void nw_protocol_http3_input_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v19 = "nw_protocol_http3_input_available";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)int buf = 136446210;
      int v19 = "nw_protocol_http3_input_available";
      int v7 = "%{public}s called with null protocol";
      goto LABEL_24;
    }

    if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v13 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (!v13) {
          goto LABEL_47;
        }
        *(_DWORD *)int buf = 136446466;
        int v19 = "nw_protocol_http3_input_available";
        __int16 v20 = 2082;
        uint64_t v21 = backtrace_string;
        BOOL v14 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_46;
      }

      if (!v13) {
        goto LABEL_25;
      }
      *(_DWORD *)int buf = 136446210;
      int v19 = "nw_protocol_http3_input_available";
      int v7 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      os_log_type_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)int buf = 136446210;
      int v19 = "nw_protocol_http3_input_available";
      int v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

void nw_protocol_http3_output_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v19 = "nw_protocol_http3_output_available";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)int buf = 136446210;
      int v19 = "nw_protocol_http3_output_available";
      int v7 = "%{public}s called with null protocol";
      goto LABEL_24;
    }

    if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v13 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (!v13) {
          goto LABEL_47;
        }
        *(_DWORD *)int buf = 136446466;
        int v19 = "nw_protocol_http3_output_available";
        __int16 v20 = 2082;
        uint64_t v21 = backtrace_string;
        BOOL v14 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_46;
      }

      if (!v13) {
        goto LABEL_25;
      }
      *(_DWORD *)int buf = 136446210;
      int v19 = "nw_protocol_http3_output_available";
      int v7 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      os_log_type_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)int buf = 136446210;
      int v19 = "nw_protocol_http3_output_available";
      int v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

uint64_t nw_protocol_http3_get_input_frames( nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v26 = "nw_protocol_http3_get_input_frames";
    int v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v26 = "nw_protocol_http3_get_input_frames";
      int v10 = "%{public}s called with null protocol";
      goto LABEL_48;
    }

    if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v20 = os_log_type_enabled(v17, type);
      if (backtrace_string)
      {
        if (!v20) {
          goto LABEL_38;
        }
        *(_DWORD *)int buf = 136446466;
        uint64_t v26 = "nw_protocol_http3_get_input_frames";
        __int16 v27 = 2082;
        int v28 = backtrace_string;
        uint64_t v21 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_37;
      }

      if (!v20) {
        goto LABEL_18;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v26 = "nw_protocol_http3_get_input_frames";
      int v10 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      int v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v26 = "nw_protocol_http3_get_input_frames";
      int v10 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

BOOL nw_protocol_http3_add_listen_handler(nw_protocol *a1, nw_listen_protocol *a2, char a3)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v21 = "nw_protocol_http3_add_listen_handler";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v18)
      {
        os_log_type_t v9 = (os_log_s *)__nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_42;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v21 = "nw_protocol_http3_add_listen_handler";
        int v11 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_41;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (!v13) {
          goto LABEL_42;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v21 = "nw_protocol_http3_add_listen_handler";
        int v11 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_41;
      }

      if (v13)
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v21 = "nw_protocol_http3_add_listen_handler";
        __int16 v22 = 2082;
        char v23 = backtrace_string;
        os_log_type_t v14 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_28:
        _os_log_impl(&dword_181A5C000, v9, v10, v14, buf, 0x16u);
      }

uint64_t nw_protocol_http3_remove_listen_handler(nw_protocol *a1, nw_listen_protocol *a2)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v25 = "nw_protocol_http3_remove_listen_handler";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v25 = "nw_protocol_http3_remove_listen_handler";
        BOOL v15 = "%{public}s called with null protocol";
LABEL_47:
        _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0xCu);
      }

uint64_t nw_protocol_http3_get_parameters(nw_protocol *a1)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = (char *)a1->handle;
    if (handle)
    {
      if (((*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0x400000) == 0)
      {
        if (gLogDatapath)
        {
          int v8 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
          {
            int v9 = *((_DWORD *)handle + 320);
            *(_DWORD *)int buf = 136447490;
            BOOL v17 = "nw_protocol_http3_get_parameters";
            __int16 v18 = 2082;
            BOOL v19 = handle + 1289;
            __int16 v20 = 2080;
            int v21 = " ";
            __int16 v22 = 1024;
            int v23 = v9;
            __int16 v24 = 2048;
            int v25 = a1;
            __int16 v26 = 2048;
            int v27 = handle;
            _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> called with protocol %p (control_outbound_protocol is %p)",  buf,  0x3Au);
          }
        }
      }

      uint64_t result = *((void *)handle + 141);
      if (!result) {
        return *((void *)handle + 140);
      }
      return result;
    }

    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v17 = "nw_protocol_http3_get_parameters";
    int v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v17 = "nw_protocol_http3_get_parameters";
        int v7 = "%{public}s called with null http3";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    if (!v14)
    {
      os_log_type_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v17 = "nw_protocol_http3_get_parameters";
        int v7 = "%{public}s called with null http3, backtrace limit exceeded";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v13 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v17 = "nw_protocol_http3_get_parameters";
        int v7 = "%{public}s called with null http3, no backtrace";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    if (v13)
    {
      *(_DWORD *)int buf = 136446466;
      BOOL v17 = "nw_protocol_http3_get_parameters";
      __int16 v18 = 2082;
      BOOL v19 = backtrace_string;
      BOOL v12 = "%{public}s called with null http3, dumping backtrace:%{public}s";
      goto LABEL_26;
    }

    goto LABEL_27;
  }

  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  BOOL v17 = "nw_protocol_http3_get_parameters";
  int v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v14)
    {
      os_log_type_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v17 = "nw_protocol_http3_get_parameters";
        int v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v11 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v17 = "nw_protocol_http3_get_parameters";
        int v7 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    if (v11)
    {
      *(_DWORD *)int buf = 136446466;
      BOOL v17 = "nw_protocol_http3_get_parameters";
      __int16 v18 = 2082;
      BOOL v19 = backtrace_string;
      BOOL v12 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_26:
      _os_log_impl(&dword_181A5C000, v5, v6, v12, buf, 0x16u);
    }

uint64_t nw_protocol_http3_get_local_endpoint(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = a1->handle;
    if (handle) {
      return handle[138];
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    char v14 = "nw_protocol_http3_get_local_endpoint";
    __int16 v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v14 = "nw_protocol_http3_get_local_endpoint";
        os_log_type_t v6 = "%{public}s called with null http3";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (!v11)
    {
      int v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v14 = "nw_protocol_http3_get_local_endpoint";
        os_log_type_t v6 = "%{public}s called with null http3, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)int buf = 136446210;
        char v14 = "nw_protocol_http3_get_local_endpoint";
        os_log_type_t v6 = "%{public}s called with null http3, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v10)
    {
      *(_DWORD *)int buf = 136446466;
      char v14 = "nw_protocol_http3_get_local_endpoint";
      __int16 v15 = 2082;
      char v16 = backtrace_string;
      int v9 = "%{public}s called with null http3, dumping backtrace:%{public}s";
      goto LABEL_21;
    }

    goto LABEL_22;
  }

  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  char v14 = "nw_protocol_http3_get_local_endpoint";
  __int16 v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      int v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v14 = "nw_protocol_http3_get_local_endpoint";
        os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)int buf = 136446210;
        char v14 = "nw_protocol_http3_get_local_endpoint";
        os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v8)
    {
      *(_DWORD *)int buf = 136446466;
      char v14 = "nw_protocol_http3_get_local_endpoint";
      __int16 v15 = 2082;
      char v16 = backtrace_string;
      int v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v4, v5, v9, buf, 0x16u);
    }

uint64_t nw_protocol_http3_get_remote_endpoint(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = a1->handle;
    if (handle) {
      return handle[137];
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    char v14 = "nw_protocol_http3_get_remote_endpoint";
    __int16 v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v14 = "nw_protocol_http3_get_remote_endpoint";
        os_log_type_t v6 = "%{public}s called with null http3";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (!v11)
    {
      int v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v14 = "nw_protocol_http3_get_remote_endpoint";
        os_log_type_t v6 = "%{public}s called with null http3, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)int buf = 136446210;
        char v14 = "nw_protocol_http3_get_remote_endpoint";
        os_log_type_t v6 = "%{public}s called with null http3, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v10)
    {
      *(_DWORD *)int buf = 136446466;
      char v14 = "nw_protocol_http3_get_remote_endpoint";
      __int16 v15 = 2082;
      char v16 = backtrace_string;
      int v9 = "%{public}s called with null http3, dumping backtrace:%{public}s";
      goto LABEL_21;
    }

    goto LABEL_22;
  }

  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  char v14 = "nw_protocol_http3_get_remote_endpoint";
  __int16 v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      int v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v14 = "nw_protocol_http3_get_remote_endpoint";
        os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)int buf = 136446210;
        char v14 = "nw_protocol_http3_get_remote_endpoint";
        os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v8)
    {
      *(_DWORD *)int buf = 136446466;
      char v14 = "nw_protocol_http3_get_remote_endpoint";
      __int16 v15 = 2082;
      char v16 = backtrace_string;
      int v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v4, v5, v9, buf, 0x16u);
    }

uint64_t nw_protocol_http3_get_path(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = a1->handle;
    if (handle) {
      return handle[139];
    }
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    char v14 = "nw_protocol_http3_get_path";
    __int16 v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v14 = "nw_protocol_http3_get_path";
        os_log_type_t v6 = "%{public}s called with null http3";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (!v11)
    {
      int v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v14 = "nw_protocol_http3_get_path";
        os_log_type_t v6 = "%{public}s called with null http3, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)int buf = 136446210;
        char v14 = "nw_protocol_http3_get_path";
        os_log_type_t v6 = "%{public}s called with null http3, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v10)
    {
      *(_DWORD *)int buf = 136446466;
      char v14 = "nw_protocol_http3_get_path";
      __int16 v15 = 2082;
      char v16 = backtrace_string;
      int v9 = "%{public}s called with null http3, dumping backtrace:%{public}s";
      goto LABEL_21;
    }

    goto LABEL_22;
  }

  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  char v14 = "nw_protocol_http3_get_path";
  __int16 v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      int v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v14 = "nw_protocol_http3_get_path";
        os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)int buf = 136446210;
        char v14 = "nw_protocol_http3_get_path";
        os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v8)
    {
      *(_DWORD *)int buf = 136446466;
      char v14 = "nw_protocol_http3_get_path";
      __int16 v15 = 2082;
      char v16 = backtrace_string;
      int v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v4, v5, v9, buf, 0x16u);
    }

void nw_protocol_http3_notify(uint64_t a1, uint64_t a2, int a3, _BYTE *a4, uint64_t a5)
{
  uint64_t v57 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    id v50 = "nw_protocol_http3_notify";
    int v37 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v38 = (os_log_s *)__nwlog_obj();
      os_log_type_t v39 = type;
      if (!os_log_type_enabled(v38, type)) {
        goto LABEL_101;
      }
      *(_DWORD *)int buf = 136446210;
      id v50 = "nw_protocol_http3_notify";
      uint64_t v40 = "%{public}s called with null protocol";
    }

    else if (v47)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v38 = (os_log_s *)__nwlog_obj();
      os_log_type_t v39 = type;
      BOOL v42 = os_log_type_enabled(v38, type);
      if (backtrace_string)
      {
        if (v42)
        {
          *(_DWORD *)int buf = 136446466;
          id v50 = "nw_protocol_http3_notify";
          __int16 v51 = 2082;
          nw_protocol_stack_t v52 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v38,  v39,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_101:
        if (!v37) {
          return;
        }
        goto LABEL_102;
      }

      if (!v42) {
        goto LABEL_101;
      }
      *(_DWORD *)int buf = 136446210;
      id v50 = "nw_protocol_http3_notify";
      uint64_t v40 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      int v38 = (os_log_s *)__nwlog_obj();
      os_log_type_t v39 = type;
      if (!os_log_type_enabled(v38, type)) {
        goto LABEL_101;
      }
      *(_DWORD *)int buf = 136446210;
      id v50 = "nw_protocol_http3_notify";
      uint64_t v40 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_100;
  }

  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    id v50 = "nw_protocol_http3_notify";
    int v37 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v47)
      {
        int v38 = (os_log_s *)__nwlog_obj();
        os_log_type_t v39 = type;
        if (!os_log_type_enabled(v38, type)) {
          goto LABEL_101;
        }
        *(_DWORD *)int buf = 136446210;
        id v50 = "nw_protocol_http3_notify";
        uint64_t v40 = "%{public}s called with null http3, backtrace limit exceeded";
        goto LABEL_100;
      }

      BOOL v43 = (char *)__nw_create_backtrace_string();
      int v38 = (os_log_s *)__nwlog_obj();
      os_log_type_t v39 = type;
      BOOL v44 = os_log_type_enabled(v38, type);
      if (!v43)
      {
        if (!v44) {
          goto LABEL_101;
        }
        *(_DWORD *)int buf = 136446210;
        id v50 = "nw_protocol_http3_notify";
        uint64_t v40 = "%{public}s called with null http3, no backtrace";
        goto LABEL_100;
      }

      if (v44)
      {
        *(_DWORD *)int buf = 136446466;
        id v50 = "nw_protocol_http3_notify";
        __int16 v51 = 2082;
        nw_protocol_stack_t v52 = v43;
        BOOL v45 = "%{public}s called with null http3, dumping backtrace:%{public}s";
LABEL_85:
        _os_log_impl(&dword_181A5C000, v38, v39, v45, buf, 0x16u);
      }

uint64_t nw_protocol_http3_get_output_local_endpoint(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      uint64_t result = nw_protocol_get_output_local_endpoint((uint64_t)a1->output_handler);
      if (!result) {
        return handle[138];
      }
      return result;
    }

    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v14 = "nw_protocol_http3_get_output_local_endpoint";
    __int16 v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v14 = "nw_protocol_http3_get_output_local_endpoint";
        uint64_t v6 = "%{public}s called with null http3";
        goto LABEL_32;
      }

      goto LABEL_33;
    }

    if (!v11)
    {
      int v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v14 = "nw_protocol_http3_get_output_local_endpoint";
        uint64_t v6 = "%{public}s called with null http3, backtrace limit exceeded";
        goto LABEL_32;
      }

      goto LABEL_33;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)int buf = 136446210;
        int v14 = "nw_protocol_http3_get_output_local_endpoint";
        uint64_t v6 = "%{public}s called with null http3, no backtrace";
        goto LABEL_32;
      }

      goto LABEL_33;
    }

    if (v10)
    {
      *(_DWORD *)int buf = 136446466;
      int v14 = "nw_protocol_http3_get_output_local_endpoint";
      __int16 v15 = 2082;
      char v16 = backtrace_string;
      int v9 = "%{public}s called with null http3, dumping backtrace:%{public}s";
      goto LABEL_22;
    }

    goto LABEL_23;
  }

  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  int v14 = "nw_protocol_http3_get_output_local_endpoint";
  __int16 v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      int v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v14 = "nw_protocol_http3_get_output_local_endpoint";
        uint64_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_32;
      }

      goto LABEL_33;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)int buf = 136446210;
        int v14 = "nw_protocol_http3_get_output_local_endpoint";
        uint64_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_32;
      }

      goto LABEL_33;
    }

    if (v8)
    {
      *(_DWORD *)int buf = 136446466;
      int v14 = "nw_protocol_http3_get_output_local_endpoint";
      __int16 v15 = 2082;
      char v16 = backtrace_string;
      int v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_22:
      _os_log_impl(&dword_181A5C000, v4, v5, v9, buf, 0x16u);
    }

uint64_t nw_protocol_http3_reset(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v17 = "nw_protocol_http3_reset";
    __int16 v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_17;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v17 = "nw_protocol_http3_reset";
      uint64_t v6 = "%{public}s called with null protocol";
      goto LABEL_16;
    }

    if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v11 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (!v11) {
          goto LABEL_37;
        }
        *(_DWORD *)int buf = 136446466;
        uint64_t v17 = "nw_protocol_http3_reset";
        __int16 v18 = 2082;
        BOOL v19 = backtrace_string;
        BOOL v12 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_36;
      }

      if (!v11) {
        goto LABEL_17;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v17 = "nw_protocol_http3_reset";
      uint64_t v6 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      int v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_17;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v17 = "nw_protocol_http3_reset";
      uint64_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

uint64_t nw_protocol_http3_supports_external_data(nw_protocol *a1)
{
  return 0LL;
}

void ___ZL38nw_protocol_http3_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3 || ((*(unsigned __int16 *)(v3 + 1373) | (*(unsigned __int8 *)(v3 + 1375) << 16)) & 0x400000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v4 = (os_log_s *)gLogObj;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO);
    uint64_t v3 = *(void *)(a1 + 32);
    if (v5)
    {
      int v6 = *(_DWORD *)(v3 + 1280);
      BOOL v7 = v3 == 0;
      if (v3) {
        BOOL v8 = (const char *)(v3 + 1289);
      }
      else {
        BOOL v8 = "";
      }
      int v10 = 136446978;
      BOOL v11 = "nw_protocol_http3_remove_input_handler_block_invoke";
      __int16 v12 = 2082;
      BOOL v13 = v8;
      if (v7) {
        int v9 = "";
      }
      else {
        int v9 = " ";
      }
      __int16 v14 = 2080;
      __int16 v15 = v9;
      __int16 v16 = 1024;
      int v17 = v6;
      _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> tearing down http3 connection",  (uint8_t *)&v10,  0x26u);
      uint64_t v3 = *(void *)(a1 + 32);
    }
  }

  *(_WORD *)(v3 + 1373) |= 8u;
  nw_http3_connection_destroy(*(void *)(a1 + 32), a2);
}

BOOL nw_protocol_http3_accept(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v36 = "nw_protocol_http3_accept";
    int v25 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v33)
      {
        int v26 = (os_log_s *)__nwlog_obj();
        os_log_type_t v27 = type;
        if (!os_log_type_enabled(v26, type)) {
          goto LABEL_62;
        }
        *(_DWORD *)int buf = 136446210;
        int v36 = "nw_protocol_http3_accept";
        int v28 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_61;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = type;
      BOOL v30 = os_log_type_enabled(v26, type);
      if (!backtrace_string)
      {
        if (!v30) {
          goto LABEL_62;
        }
        *(_DWORD *)int buf = 136446210;
        int v36 = "nw_protocol_http3_accept";
        int v28 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_61;
      }

      if (v30)
      {
        *(_DWORD *)int buf = 136446466;
        int v36 = "nw_protocol_http3_accept";
        __int16 v37 = 2082;
        int v38 = backtrace_string;
        int v31 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_51:
        _os_log_impl(&dword_181A5C000, v26, v27, v31, buf, 0x16u);
      }

void ___ZL43nw_http3_set_prohibit_joining_on_parametersP11nw_protocolP13nw_parameters_block_invoke( uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(a2);
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    nw_protocol_definition_t v5 = nw_protocol_options_copy_definition((nw_protocol_options_t)a2);
    identifier = nw_protocol_definition_get_identifier(v5);
    if (gLogDatapath)
    {
      BOOL v7 = identifier;
      int64_t v8 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v9 = *(void *)(a1 + 40);
        int v10 = "invalid";
        if (v9 && *(void *)(v9 + 16)) {
          int v10 = *(const char **)(v9 + 16);
        }
        int v11 = 136446978;
        __int16 v12 = "nw_http3_set_prohibit_joining_on_parameters_block_invoke";
        __int16 v13 = 2080;
        uint32_t v14 = v10;
        __int16 v15 = 2048;
        uint64_t v16 = v9;
        __int16 v17 = 2080;
        int v18 = v7;
        _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_DEBUG,  "%{public}s %s (%p) setting prohibit joining on %s",  (uint8_t *)&v11,  0x2Au);
      }
    }

    if (v5) {
      os_release(v5);
    }
    nw_protocol_options_set_prohibit_joining(a2);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0;
  }

  if (*(void *)(a1 + 40) == protocol_handle) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  }
}

uint64_t ___ZL22nw_http3_stream_createPK22nw_protocol_identifierP17nw_protocol_http3P11nw_endpointP13nw_parametersb_block_invoke( uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0LL;
  }
  return *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
}

void nw_http3_stream_replace_protocol_instance(uint64_t a1, void *a2, nw_protocol *a3, uint64_t a4)
{
  uint64_t v47 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v28 = "nw_http3_stream_replace_protocol_instance";
    __int16 v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)int buf = 136446210;
      int v28 = "nw_http3_stream_replace_protocol_instance";
      __int16 v15 = "%{public}s called with null http3_stream";
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v20 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)int buf = 136446466;
          int v28 = "nw_http3_stream_replace_protocol_instance";
          __int16 v29 = 2082;
          BOOL v30 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s called with null http3_stream, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_56:
        if (!v12) {
          return;
        }
        goto LABEL_57;
      }

      if (!v20) {
        goto LABEL_56;
      }
      *(_DWORD *)int buf = 136446210;
      int v28 = "nw_http3_stream_replace_protocol_instance";
      __int16 v15 = "%{public}s called with null http3_stream, no backtrace";
    }

    else
    {
      __int16 v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)int buf = 136446210;
      int v28 = "nw_http3_stream_replace_protocol_instance";
      __int16 v15 = "%{public}s called with null http3_stream, backtrace limit exceeded";
    }

    goto LABEL_55;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v28 = "nw_http3_stream_replace_protocol_instance";
    __int16 v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v25)
      {
        __int16 v13 = (os_log_s *)__nwlog_obj();
        os_log_type_t v14 = type;
        if (!os_log_type_enabled(v13, type)) {
          goto LABEL_56;
        }
        *(_DWORD *)int buf = 136446210;
        int v28 = "nw_http3_stream_replace_protocol_instance";
        __int16 v15 = "%{public}s called with null parameters, backtrace limit exceeded";
        goto LABEL_55;
      }

      int v21 = (char *)__nw_create_backtrace_string();
      __int16 v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v22 = os_log_type_enabled(v13, type);
      if (!v21)
      {
        if (!v22) {
          goto LABEL_56;
        }
        *(_DWORD *)int buf = 136446210;
        int v28 = "nw_http3_stream_replace_protocol_instance";
        __int16 v15 = "%{public}s called with null parameters, no backtrace";
        goto LABEL_55;
      }

      if (v22)
      {
        *(_DWORD *)int buf = 136446466;
        int v28 = "nw_http3_stream_replace_protocol_instance";
        __int16 v29 = 2082;
        BOOL v30 = v21;
        int v23 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
LABEL_40:
        _os_log_impl(&dword_181A5C000, v13, v14, v23, buf, 0x16u);
      }

void ___ZL36nw_protocol_http3_set_up_associationP17nw_protocol_http3P13nw_parameters_block_invoke( uint64_t a1, void *a2, void *a3)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  uint64_t handle = nw_protocol_instance_stub_get_handle(a2);
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v36 = "nw_protocol_http3_set_up_association_block_invoke";
    char v25 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = type;
      if (!os_log_type_enabled(v26, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v36 = "nw_protocol_http3_set_up_association_block_invoke";
      int v28 = "%{public}s called with null protocol_handle";
      goto LABEL_60;
    }

    if (!v33)
    {
      int v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = type;
      if (!os_log_type_enabled(v26, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v36 = "nw_protocol_http3_set_up_association_block_invoke";
      int v28 = "%{public}s called with null protocol_handle, backtrace limit exceeded";
      goto LABEL_60;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v26 = (os_log_s *)__nwlog_obj();
    os_log_type_t v27 = type;
    BOOL v30 = os_log_type_enabled(v26, type);
    if (!backtrace_string)
    {
      if (!v30) {
        goto LABEL_61;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v36 = "nw_protocol_http3_set_up_association_block_invoke";
      int v28 = "%{public}s called with null protocol_handle, no backtrace";
      goto LABEL_60;
    }

    if (v30)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v36 = "nw_protocol_http3_set_up_association_block_invoke";
      __int16 v37 = 2082;
      uint64_t v38 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v26,  v27,  "%{public}s called with null protocol_handle, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_61:
    if (!v25) {
      return;
    }
    goto LABEL_62;
  }

  uint64_t v5 = *(void *)(handle + 40);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v36 = "nw_protocol_http3_set_up_association_block_invoke";
    char v25 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = type;
      if (!os_log_type_enabled(v26, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v36 = "nw_protocol_http3_set_up_association_block_invoke";
      int v28 = "%{public}s called with null http3";
      goto LABEL_60;
    }

    if (!v33)
    {
      int v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = type;
      if (!os_log_type_enabled(v26, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v36 = "nw_protocol_http3_set_up_association_block_invoke";
      int v28 = "%{public}s called with null http3, backtrace limit exceeded";
      goto LABEL_60;
    }

    __int16 v31 = (char *)__nw_create_backtrace_string();
    int v26 = (os_log_s *)__nwlog_obj();
    os_log_type_t v27 = type;
    BOOL v32 = os_log_type_enabled(v26, type);
    if (v31)
    {
      if (v32)
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v36 = "nw_protocol_http3_set_up_association_block_invoke";
        __int16 v37 = 2082;
        uint64_t v38 = v31;
        _os_log_impl( &dword_181A5C000,  v26,  v27,  "%{public}s called with null http3, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v31);
      if (!v25) {
        return;
      }
LABEL_62:
      free(v25);
      return;
    }

    if (v32)
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v36 = "nw_protocol_http3_set_up_association_block_invoke";
      int v28 = "%{public}s called with null http3, no backtrace";
LABEL_60:
      _os_log_impl(&dword_181A5C000, v26, v27, v28, buf, 0xCu);
      goto LABEL_61;
    }

    goto LABEL_61;
  }

  unint64_t v6 = (_WORD *)(v5 + 1373);
  if (((*(unsigned __int16 *)(v5 + 1373) | (*(unsigned __int8 *)(v5 + 1375) << 16)) & 0x10008) == 0)
  {
    BOOL v7 = nw_path_copy_for_flow_registration(a3, *(void **)(v5 + 1208));
    if (v7)
    {
      int64_t v8 = (void *)v7;
      uint64_t v9 = *(void **)(v5 + 1112);
      if (v9 != v8)
      {
        if (v9)
        {
          os_release(v9);
          *(void *)(v5 + 1112) = 0LL;
        }

        *(void *)(v5 + 1112) = os_retain(v8);
      }

      id v10 = *(void **)(v5 + 1232);
      if (v10 && (nw_path_has_proxy_config(v8, v10) & 1) == 0)
      {
        if ((((unsigned __int16)*v6 | (*(unsigned __int8 *)(v5 + 1375) << 16)) & 0x400000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v19 = (os_log_s *)gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          {
            int v20 = *(_DWORD *)(v5 + 1280);
            *(_DWORD *)int buf = 136446978;
            uint64_t v36 = "nw_protocol_http3_set_up_association_block_invoke";
            __int16 v37 = 2082;
            uint64_t v38 = (char *)(v5 + 1289);
            __int16 v39 = 2080;
            uint64_t v40 = " ";
            __int16 v41 = 1024;
            int v42 = v20;
            _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> Effective proxy configuration lost, treating as a GOAWAY",  buf,  0x26u);
          }
        }

        nw_http3_async_close_connection_if_no_stream(v5);
        nw_http3_notify_do_not_reuse(v5);
        goto LABEL_31;
      }

      if (((unsigned __int16)*v6 | (*(char *)(v5 + 1375) << 16)) < 0)
      {
        BOOL is_viable = nw_path_is_viable(v8);
        int alternate_path_state = nw_path_get_alternate_path_state(v8, a3);
        int v13 = (unsigned __int16)*v6 | (*(unsigned __int8 *)(v5 + 1375) << 16);
        if (is_viable && alternate_path_state == 0)
        {
          if ((v13 & 0x80000) != 0)
          {
            if ((v13 & 0x400000) == 0)
            {
              int v21 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
              {
                int v22 = *(_DWORD *)(v5 + 1280);
                *(_DWORD *)int buf = 136446978;
                uint64_t v36 = "nw_protocol_http3_set_up_association_block_invoke";
                __int16 v37 = 2082;
                uint64_t v38 = (char *)(v5 + 1289);
                __int16 v39 = 2080;
                uint64_t v40 = " ";
                __int16 v41 = 1024;
                int v42 = v22;
                _os_log_impl( &dword_181A5C000,  v21,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> Path recovered, recommending that new flows join",  buf,  0x26u);
              }
            }

            int v23 = (unsigned __int16)*v6;
            unsigned int v24 = (v23 | (*(unsigned __int8 *)(v5 + 1375) << 16)) & 0xFFF7FFFF;
            _WORD *v6 = v23;
            *(_BYTE *)(v5 + 1375) = BYTE2(v24);
            uint64_t v17 = v5;
            int v18 = 1;
            goto LABEL_30;
          }
        }

        else if ((v13 & 0x80000) == 0)
        {
          if ((v13 & 0x400000) == 0)
          {
            __int16 v15 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
            {
              int v16 = *(_DWORD *)(v5 + 1280);
              *(_DWORD *)int buf = 136446978;
              uint64_t v36 = "nw_protocol_http3_set_up_association_block_invoke";
              __int16 v37 = 2082;
              uint64_t v38 = (char *)(v5 + 1289);
              __int16 v39 = 2080;
              uint64_t v40 = " ";
              __int16 v41 = 1024;
              int v42 = v16;
              _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> Bad path, recommending that new flows not join",  buf,  0x26u);
            }
          }

          *(_BYTE *)(v5 + 1375) = ((unsigned __int16)*v6 | (*(unsigned __int8 *)(v5 + 1375) << 16) | 0x80000u) >> 16;
          uint64_t v17 = v5;
          int v18 = 0;
LABEL_30:
          nw_http3_notify_viability_changed(v17, v18);
        }
      }

void nw_http3_notify_viability_changed(uint64_t a1, int a2)
{
  uint64_t v49 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 880);
  if (v2)
  {
    char v3 = a2;
    uint64_t v5 = (unsigned __int16 *)(a1 + 1373);
    unint64_t v6 = (const char *)(a1 + 1289);
    if (a2) {
      BOOL v7 = "";
    }
    else {
      BOOL v7 = "not ";
    }
    do
    {
      uint64_t v8 = *(void *)(v2 + 544);
      if ((*(_WORD *)(v2 + 736) & 0x8000) != 0)
      {
        if (((*v5 | (*((unsigned __int8 *)v5 + 2) << 16)) & 0x400000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v9 = (os_log_s *)gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          {
            int v10 = *(_DWORD *)(a1 + 1280);
            uint64_t v11 = *(void *)(v2 + 240);
            *(_DWORD *)int buf = 136447490;
            uint64_t v38 = "nw_http3_notify_viability_changed";
            __int16 v39 = 2082;
            uint64_t v40 = v6;
            __int16 v41 = 2080;
            int v42 = " ";
            __int16 v43 = 1024;
            int v44 = v10;
            __int16 v45 = 2048;
            uint64_t v46 = v11;
            __int16 v47 = 2082;
            BOOL v48 = v7;
            _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> Notifying stream %llu that the connection is %{public}sviable",  buf,  0x3Au);
          }
        }

        char v36 = v3;
        uint64_t v12 = *(void *)(v2 + 24);
        if (!v12 || (int v13 = *(void (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t))(v12 + 160)) == 0LL)
        {
          __nwlog_obj();
          os_log_type_t v14 = *(const char **)(v2 + 16);
          if (!v14) {
            os_log_type_t v14 = "invalid";
          }
          *(_DWORD *)int buf = 136446466;
          uint64_t v38 = "nw_http3_notify_viability_changed";
          __int16 v39 = 2082;
          uint64_t v40 = v14;
          __int16 v15 = (const char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v34 = 0;
          char v33 = (char *)v15;
          if (type == OS_LOG_TYPE_FAULT)
          {
            int v16 = (os_log_s *)__nwlog_obj();
            os_log_type_t v17 = type;
            *(void *)BOOL v30 = v16;
            if (os_log_type_enabled(v16, type))
            {
              int v18 = *(const char **)(v2 + 16);
              if (!v18) {
                int v18 = "invalid";
              }
              *(_DWORD *)int buf = 136446466;
              uint64_t v38 = "nw_http3_notify_viability_changed";
              __int16 v39 = 2082;
              uint64_t v40 = v18;
              uint64_t v19 = *(os_log_s **)v30;
              os_log_type_t v20 = v17;
              int v21 = "%{public}s protocol %{public}s has invalid notify callback";
              goto LABEL_36;
            }

            goto LABEL_37;
          }

          if (v34)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            id log = (os_log_s *)__nwlog_obj();
            os_log_type_t v31 = type;
            BOOL v23 = os_log_type_enabled(log, type);
            if (backtrace_string)
            {
              if (v23)
              {
                unsigned int v24 = *(const char **)(v2 + 16);
                if (!v24) {
                  unsigned int v24 = "invalid";
                }
                *(_DWORD *)int buf = 136446722;
                uint64_t v38 = "nw_http3_notify_viability_changed";
                __int16 v39 = 2082;
                uint64_t v40 = v24;
                __int16 v41 = 2082;
                int v42 = backtrace_string;
                _os_log_impl( &dword_181A5C000,  log,  v31,  "%{public}s protocol %{public}s has invalid notify callback, dumping backtrace:%{public}s",  buf,  0x20u);
              }

              free(backtrace_string);
              goto LABEL_37;
            }

            if (!v23)
            {
LABEL_37:
              if (v33) {
                free(v33);
              }
              goto LABEL_6;
            }

            int v28 = *(const char **)(v2 + 16);
            if (!v28) {
              int v28 = "invalid";
            }
            *(_DWORD *)int buf = 136446466;
            uint64_t v38 = "nw_http3_notify_viability_changed";
            __int16 v39 = 2082;
            uint64_t v40 = v28;
            uint64_t v19 = log;
            os_log_type_t v20 = v31;
            int v21 = "%{public}s protocol %{public}s has invalid notify callback, no backtrace";
          }

          else
          {
            char v25 = (os_log_s *)__nwlog_obj();
            os_log_type_t v26 = type;
            *(void *)BOOL v32 = v25;
            if (!os_log_type_enabled(v25, type)) {
              goto LABEL_37;
            }
            os_log_type_t v27 = *(const char **)(v2 + 16);
            if (!v27) {
              os_log_type_t v27 = "invalid";
            }
            *(_DWORD *)int buf = 136446466;
            uint64_t v38 = "nw_http3_notify_viability_changed";
            __int16 v39 = 2082;
            uint64_t v40 = v27;
            uint64_t v19 = *(os_log_s **)v32;
            os_log_type_t v20 = v26;
            int v21 = "%{public}s protocol %{public}s has invalid notify callback, backtrace limit exceeded";
          }

double __nw_protocol_http3_identifier_block_invoke()
{
  *(void *)&double result = 0x200000004LL;
  qword_18C594078 = 0x200000004LL;
  return result;
}

void ___ZL38nw_protocol_http3_stream_get_callbacksv_block_invoke()
{
  qword_18C593A30 = (uint64_t)nw_protocol_default_reset;
  unk_18C593A38 = nw_protocol_default_input_flush;
  qword_18C593A00 = (uint64_t)nw_protocol_default_get_output_interface;
  unk_18C593A08 = nw_protocol_default_waiting_for_output;
  qword_18C593950 = (uint64_t)nw_protocol_http3_stream_disconnect;
  unk_18C593958 = nw_protocol_http3_stream_connected;
  qword_18C593960 = (uint64_t)nw_protocol_http3_stream_disconnected;
  unk_18C593968 = nw_protocol_http3_stream_error;
  qword_18C5939F0 = (uint64_t)nw_protocol_http3_stream_output_finished;
  unk_18C5939F8 = nw_protocol_default_get_output_local;
  nw_protocol_http3_stream_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_http3_stream_add_input_handler;
  *(void *)algn_18C593938 = nw_protocol_http3_stream_remove_input_handler;
  qword_18C593940 = (uint64_t)nw_protocol_http3_stream_replace_input_handler;
  unk_18C593948 = nw_protocol_http3_stream_connect;
  qword_18C593970 = (uint64_t)nw_protocol_http3_stream_input_available;
  unk_18C593978 = nw_protocol_http3_stream_output_available;
  qword_18C593980 = (uint64_t)nw_protocol_http3_stream_get_input_frames;
  unk_18C593988 = nw_protocol_http3_stream_get_output_frames;
  qword_18C593990 = (uint64_t)nw_protocol_http3_stream_finalize_output_frames;
  unk_18C593998 = nw_protocol_default_link_state;
  qword_18C5939E0 = (uint64_t)nw_protocol_http3_stream_supports_external_data;
  unk_18C5939E8 = nw_protocol_http3_stream_input_finished;
  qword_18C5939B0 = (uint64_t)nw_protocol_default_get_local;
  unk_18C5939B8 = nw_protocol_http3_stream_get_remote_endpoint;
  qword_18C593A10 = (uint64_t)nw_protocol_http3_stream_copy_info;
  unk_18C593A18 = nw_protocol_http3_stream_add_listen_handler;
  qword_18C5939D0 = (uint64_t)nw_protocol_http3_stream_notify;
  unk_18C5939D8 = nw_protocol_default_updated_path;
  qword_18C5939A0 = (uint64_t)nw_protocol_http3_stream_get_parameters;
  unk_18C5939A8 = nw_protocol_default_get_path;
  qword_18C593A20 = (uint64_t)nw_protocol_http3_stream_remove_listen_handler;
  unk_18C593A28 = nw_protocol_http3_stream_get_message_properties;
  qword_18C5939C0 = (uint64_t)nw_protocol_http3_stream_register_notification;
  unk_18C5939C8 = nw_protocol_http3_stream_unregister_notification;
}

BOOL nw_protocol_http3_stream_connect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v109 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_connect";
    uint64_t v38 = (char *)_os_log_send_and_compose_impl();
    v101[0] = 16;
    LOBYTE(v91) = 0;
    if (v101[0] == 17)
    {
      __int16 v39 = (os_log_s *)__nwlog_obj();
      os_log_type_t v40 = v101[0];
      if (!os_log_type_enabled(v39, (os_log_type_t)v101[0])) {
        goto LABEL_148;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_connect";
      __int16 v41 = "%{public}s called with null protocol";
      goto LABEL_147;
    }

    if (!(_BYTE)v91)
    {
      __int16 v39 = (os_log_s *)__nwlog_obj();
      os_log_type_t v40 = v101[0];
      if (!os_log_type_enabled(v39, (os_log_type_t)v101[0])) {
        goto LABEL_148;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_connect";
      __int16 v41 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_147;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v39 = (os_log_s *)__nwlog_obj();
    os_log_type_t v40 = v101[0];
    BOOL v52 = os_log_type_enabled(v39, (os_log_type_t)v101[0]);
    if (!backtrace_string)
    {
      if (!v52) {
        goto LABEL_148;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_connect";
      __int16 v41 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_147;
    }

    if (!v52) {
      goto LABEL_97;
    }
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_connect";
    *(_WORD *)&void buf[12] = 2082;
    *(void *)&_BYTE buf[14] = backtrace_string;
    __int16 v53 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_96:
    _os_log_impl(&dword_181A5C000, v39, v40, v53, buf, 0x16u);
    goto LABEL_97;
  }

  uint64_t handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_connect";
    uint64_t v38 = (char *)_os_log_send_and_compose_impl();
    v101[0] = 16;
    LOBYTE(v91) = 0;
    if (v101[0] == 17)
    {
      __int16 v39 = (os_log_s *)__nwlog_obj();
      os_log_type_t v40 = v101[0];
      if (!os_log_type_enabled(v39, (os_log_type_t)v101[0])) {
        goto LABEL_148;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_connect";
      __int16 v41 = "%{public}s called with null http3_stream";
      goto LABEL_147;
    }

    if (!(_BYTE)v91)
    {
      __int16 v39 = (os_log_s *)__nwlog_obj();
      os_log_type_t v40 = v101[0];
      if (!os_log_type_enabled(v39, (os_log_type_t)v101[0])) {
        goto LABEL_148;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_connect";
      __int16 v41 = "%{public}s called with null http3_stream, backtrace limit exceeded";
      goto LABEL_147;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v39 = (os_log_s *)__nwlog_obj();
    os_log_type_t v40 = v101[0];
    BOOL v54 = os_log_type_enabled(v39, (os_log_type_t)v101[0]);
    if (!backtrace_string)
    {
      if (!v54) {
        goto LABEL_148;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_connect";
      __int16 v41 = "%{public}s called with null http3_stream, no backtrace";
      goto LABEL_147;
    }

    if (!v54) {
      goto LABEL_97;
    }
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_connect";
    *(_WORD *)&void buf[12] = 2082;
    *(void *)&_BYTE buf[14] = backtrace_string;
    __int16 v53 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
    goto LABEL_96;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_connect";
    uint64_t v38 = (char *)_os_log_send_and_compose_impl();
    v101[0] = 16;
    LOBYTE(v91) = 0;
    if (v101[0] == 17)
    {
      __int16 v39 = (os_log_s *)__nwlog_obj();
      os_log_type_t v40 = v101[0];
      if (!os_log_type_enabled(v39, (os_log_type_t)v101[0])) {
        goto LABEL_148;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_connect";
      __int16 v41 = "%{public}s called with null other_protocol";
      goto LABEL_147;
    }

    if (!(_BYTE)v91)
    {
      __int16 v39 = (os_log_s *)__nwlog_obj();
      os_log_type_t v40 = v101[0];
      if (!os_log_type_enabled(v39, (os_log_type_t)v101[0])) {
        goto LABEL_148;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_connect";
      __int16 v41 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_147;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v39 = (os_log_s *)__nwlog_obj();
    os_log_type_t v40 = v101[0];
    BOOL v55 = os_log_type_enabled(v39, (os_log_type_t)v101[0]);
    if (backtrace_string)
    {
      if (v55)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_connect";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&_BYTE buf[14] = backtrace_string;
        __int16 v53 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
        goto LABEL_96;
      }

void nw_protocol_http3_stream_connected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v106 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v93 = "nw_protocol_http3_stream_connected";
    __int16 v47 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v90 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v48 = (os_log_s *)__nwlog_obj();
      os_log_type_t v49 = type;
      if (!os_log_type_enabled(v48, type)) {
        goto LABEL_121;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v93 = "nw_protocol_http3_stream_connected";
      id v50 = "%{public}s called with null protocol";
      goto LABEL_120;
    }

    if (!v90)
    {
      os_log_type_t v48 = (os_log_s *)__nwlog_obj();
      os_log_type_t v49 = type;
      if (!os_log_type_enabled(v48, type)) {
        goto LABEL_121;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v93 = "nw_protocol_http3_stream_connected";
      id v50 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_120;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v48 = (os_log_s *)__nwlog_obj();
    os_log_type_t v49 = type;
    BOOL v68 = os_log_type_enabled(v48, type);
    if (!backtrace_string)
    {
      if (!v68) {
        goto LABEL_121;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v93 = "nw_protocol_http3_stream_connected";
      id v50 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_120;
    }

    if (v68)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v93 = "nw_protocol_http3_stream_connected";
      __int16 v94 = 2082;
      unsigned int v95 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v48,  v49,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_121:
    if (!v47) {
      return;
    }
    goto LABEL_122;
  }

  uint64_t handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v93 = "nw_protocol_http3_stream_connected";
    __int16 v47 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v90 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v48 = (os_log_s *)__nwlog_obj();
      os_log_type_t v49 = type;
      if (!os_log_type_enabled(v48, type)) {
        goto LABEL_121;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v93 = "nw_protocol_http3_stream_connected";
      id v50 = "%{public}s called with null http3_stream";
      goto LABEL_120;
    }

    if (!v90)
    {
      os_log_type_t v48 = (os_log_s *)__nwlog_obj();
      os_log_type_t v49 = type;
      if (!os_log_type_enabled(v48, type)) {
        goto LABEL_121;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v93 = "nw_protocol_http3_stream_connected";
      id v50 = "%{public}s called with null http3_stream, backtrace limit exceeded";
      goto LABEL_120;
    }

    unint64_t v69 = (char *)__nw_create_backtrace_string();
    os_log_type_t v48 = (os_log_s *)__nwlog_obj();
    os_log_type_t v49 = type;
    BOOL v70 = os_log_type_enabled(v48, type);
    if (v69)
    {
      if (v70)
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v93 = "nw_protocol_http3_stream_connected";
        __int16 v94 = 2082;
        unsigned int v95 = v69;
        _os_log_impl( &dword_181A5C000,  v48,  v49,  "%{public}s called with null http3_stream, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v69);
      if (!v47) {
        return;
      }
LABEL_122:
      free(v47);
      return;
    }

    if (v70)
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v93 = "nw_protocol_http3_stream_connected";
      id v50 = "%{public}s called with null http3_stream, no backtrace";
LABEL_120:
      _os_log_impl(&dword_181A5C000, v48, v49, v50, buf, 0xCu);
      goto LABEL_121;
    }

    goto LABEL_121;
  }

  if ((*((_WORD *)handle + 368) & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      __int16 v51 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
      {
        int v52 = *(_DWORD *)(*((void *)handle + 42) + 1280LL);
        __int16 v53 = (nw_protocol *)*((void *)handle + 30);
        *(_DWORD *)int buf = 136447234;
        uint64_t v93 = "nw_protocol_http3_stream_connected";
        __int16 v94 = 2082;
        unsigned int v95 = handle + 636;
        __int16 v96 = 2080;
        uint64_t v97 = " ";
        __int16 v98 = 1024;
        int v99 = v52;
        __int16 v100 = 2048;
        uint64_t v101 = v53;
        _os_log_impl( &dword_181A5C000,  v51,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> Got a connected event from the lower layer",  buf,  0x30u);
      }
    }
  }

  default_input_handler = a1->default_input_handler;
  if (default_input_handler)
  {
    callbacks = default_input_handler->callbacks;
    if (callbacks)
    {
      connected = (void (*)(void))callbacks->connected;
      if (connected)
      {
        connected();
        goto LABEL_9;
      }
    }
  }

  __nwlog_obj();
  BOOL v32 = a1->default_input_handler;
  char v33 = "invalid";
  if (v32)
  {
    identifier = v32->identifier;
    if (identifier) {
      char v33 = (const char *)identifier;
    }
  }

  *(_DWORD *)int buf = 136446466;
  uint64_t v93 = "nw_protocol_http3_stream_connected";
  __int16 v94 = 2082;
  unsigned int v95 = (char *)v33;
  uint64_t v35 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v90 = 0;
  if (__nwlog_fault(v35, &type, &v90))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v36 = (os_log_s *)__nwlog_obj();
      os_log_type_t v37 = type;
      if (!os_log_type_enabled(v36, type)) {
        goto LABEL_100;
      }
      uint64_t v38 = a1->default_input_handler;
      __int16 v39 = "invalid";
      if (v38)
      {
        os_log_type_t v40 = v38->identifier;
        if (v40) {
          __int16 v39 = (const char *)v40;
        }
      }

      *(_DWORD *)int buf = 136446466;
      uint64_t v93 = "nw_protocol_http3_stream_connected";
      __int16 v94 = 2082;
      unsigned int v95 = (char *)v39;
      __int16 v41 = "%{public}s protocol %{public}s has invalid connected callback";
      goto LABEL_99;
    }

    if (!v90)
    {
      char v36 = (os_log_s *)__nwlog_obj();
      os_log_type_t v37 = type;
      if (!os_log_type_enabled(v36, type)) {
        goto LABEL_100;
      }
      BOOL v54 = a1->default_input_handler;
      BOOL v55 = "invalid";
      if (v54)
      {
        int v56 = v54->identifier;
        if (v56) {
          BOOL v55 = (const char *)v56;
        }
      }

      *(_DWORD *)int buf = 136446466;
      uint64_t v93 = "nw_protocol_http3_stream_connected";
      __int16 v94 = 2082;
      unsigned int v95 = (char *)v55;
      __int16 v41 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
      goto LABEL_99;
    }

    int v42 = (char *)__nw_create_backtrace_string();
    char v36 = (os_log_s *)__nwlog_obj();
    os_log_type_t v37 = type;
    BOOL v43 = os_log_type_enabled(v36, type);
    if (v42)
    {
      if (v43)
      {
        uint64_t v44 = a1->default_input_handler;
        __int16 v45 = "invalid";
        if (v44)
        {
          uint64_t v46 = v44->identifier;
          if (v46) {
            __int16 v45 = (const char *)v46;
          }
        }

        *(_DWORD *)int buf = 136446722;
        uint64_t v93 = "nw_protocol_http3_stream_connected";
        __int16 v94 = 2082;
        unsigned int v95 = (char *)v45;
        __int16 v96 = 2082;
        uint64_t v97 = v42;
        _os_log_impl( &dword_181A5C000,  v36,  v37,  "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s",  buf,  0x20u);
      }

      free(v42);
      goto LABEL_100;
    }

    if (v43)
    {
      BOOL v71 = a1->default_input_handler;
      uint64_t v72 = "invalid";
      if (v71)
      {
        BOOL v73 = v71->identifier;
        if (v73) {
          uint64_t v72 = (const char *)v73;
        }
      }

      *(_DWORD *)int buf = 136446466;
      uint64_t v93 = "nw_protocol_http3_stream_connected";
      __int16 v94 = 2082;
      unsigned int v95 = (char *)v72;
      __int16 v41 = "%{public}s protocol %{public}s has invalid connected callback, no backtrace";
LABEL_99:
      _os_log_impl(&dword_181A5C000, v36, v37, v41, buf, 0x16u);
    }
  }

void nw_protocol_http3_stream_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v30 = "nw_protocol_http3_stream_disconnected";
    int v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_55;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v30 = "nw_protocol_http3_stream_disconnected";
      int v19 = "%{public}s called with null protocol";
      goto LABEL_54;
    }

    if (!v27)
    {
      id v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_55;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v30 = "nw_protocol_http3_stream_disconnected";
      int v19 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_54;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    id v17 = (os_log_s *)__nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v24 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (!v24) {
        goto LABEL_55;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v30 = "nw_protocol_http3_stream_disconnected";
      int v19 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_54;
    }

    if (v24)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v30 = "nw_protocol_http3_stream_disconnected";
      __int16 v31 = 2082;
      BOOL v32 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v17,  v18,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_55:
    if (!v16) {
      return;
    }
    goto LABEL_56;
  }

  uint64_t handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v30 = "nw_protocol_http3_stream_disconnected";
    int v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_55;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v30 = "nw_protocol_http3_stream_disconnected";
      int v19 = "%{public}s called with null http3_stream";
      goto LABEL_54;
    }

    if (!v27)
    {
      id v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_55;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v30 = "nw_protocol_http3_stream_disconnected";
      int v19 = "%{public}s called with null http3_stream, backtrace limit exceeded";
      goto LABEL_54;
    }

    int v25 = (char *)__nw_create_backtrace_string();
    id v17 = (os_log_s *)__nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v26 = os_log_type_enabled(v17, type);
    if (v25)
    {
      if (v26)
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v30 = "nw_protocol_http3_stream_disconnected";
        __int16 v31 = 2082;
        BOOL v32 = v25;
        _os_log_impl( &dword_181A5C000,  v17,  v18,  "%{public}s called with null http3_stream, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v25);
      if (!v16) {
        return;
      }
LABEL_56:
      free(v16);
      return;
    }

    if (v26)
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v30 = "nw_protocol_http3_stream_disconnected";
      int v19 = "%{public}s called with null http3_stream, no backtrace";
LABEL_54:
      _os_log_impl(&dword_181A5C000, v17, v18, v19, buf, 0xCu);
      goto LABEL_55;
    }

    goto LABEL_55;
  }

  if ((handle[92] & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      int v20 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        int v21 = *(_DWORD *)(handle[42] + 1280LL);
        uint64_t v22 = handle[30];
        *(_DWORD *)int buf = 136447234;
        uint64_t v30 = "nw_protocol_http3_stream_disconnected";
        __int16 v31 = 2082;
        BOOL v32 = (char *)handle + 636;
        __int16 v33 = 2080;
        int v34 = " ";
        __int16 v35 = 1024;
        int v36 = v21;
        __int16 v37 = 2048;
        uint64_t v38 = v22;
        _os_log_impl(&dword_181A5C000, v20, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> called", buf, 0x30u);
      }
    }
  }

  if (handle + 8 != (void *)a1)
  {
    uint64_t application_error = nw_http3_stream_get_application_error((uint64_t)handle);
    if (application_error == 272)
    {
      default_input_handler = a1->default_input_handler;
      if (default_input_handler)
      {
        callbacks = default_input_handler->callbacks;
        if (callbacks)
        {
          CFErrorRef error = (void (*)(void))callbacks->error;
          if (error) {
            goto LABEL_19;
          }
        }
      }
    }

    else if (application_error == 267)
    {
      uint64_t v5 = a1->default_input_handler;
      if (v5)
      {
        unint64_t v6 = v5->callbacks;
        if (v6)
        {
          CFErrorRef error = (void (*)(void))v6->error;
          if (error) {
LABEL_19:
          }
            error();
        }
      }
    }

    int v13 = a1->default_input_handler;
    if (v13)
    {
      BOOL v14 = v13->callbacks;
      if (v14)
      {
        disconnected = (void (*)(void))v14->disconnected;
        if (disconnected) {
          disconnected();
        }
      }
    }

    return;
  }

  if ((handle[92] & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v8 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        int v9 = *(_DWORD *)(handle[42] + 1280LL);
        uint64_t v10 = handle[30];
        *(_DWORD *)int buf = 136447234;
        uint64_t v30 = "nw_protocol_http3_stream_disconnected";
        __int16 v31 = 2082;
        BOOL v32 = (char *)handle + 636;
        __int16 v33 = 2080;
        int v34 = " ";
        __int16 v35 = 1024;
        int v36 = v9;
        __int16 v37 = 2048;
        uint64_t v38 = v10;
        _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> datagram flow disconnected",  buf,  0x30u);
      }
    }
  }

void nw_protocol_http3_stream_output_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v55 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v46 = "nw_protocol_http3_stream_output_finished";
    os_log_type_t v18 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_88;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v46 = "nw_protocol_http3_stream_output_finished";
      int v21 = "%{public}s called with null protocol";
    }

    else if (v43)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v31 = os_log_type_enabled(v19, type);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v46 = "nw_protocol_http3_stream_output_finished";
          __int16 v47 = 2082;
          os_log_type_t v48 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v19,  v20,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_88:
        if (!v18) {
          return;
        }
        goto LABEL_89;
      }

      if (!v31) {
        goto LABEL_88;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v46 = "nw_protocol_http3_stream_output_finished";
      int v21 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      int v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_88;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v46 = "nw_protocol_http3_stream_output_finished";
      int v21 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_87;
  }

  uint64_t handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v46 = "nw_protocol_http3_stream_output_finished";
    os_log_type_t v18 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v43)
      {
        int v19 = (os_log_s *)__nwlog_obj();
        os_log_type_t v20 = type;
        if (!os_log_type_enabled(v19, type)) {
          goto LABEL_88;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v46 = "nw_protocol_http3_stream_output_finished";
        int v21 = "%{public}s called with null http3_stream, backtrace limit exceeded";
        goto LABEL_87;
      }

      BOOL v32 = (char *)__nw_create_backtrace_string();
      int v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = type;
      BOOL v33 = os_log_type_enabled(v19, type);
      if (!v32)
      {
        if (!v33) {
          goto LABEL_88;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v46 = "nw_protocol_http3_stream_output_finished";
        int v21 = "%{public}s called with null http3_stream, no backtrace";
        goto LABEL_87;
      }

      if (v33)
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v46 = "nw_protocol_http3_stream_output_finished";
        __int16 v47 = 2082;
        os_log_type_t v48 = v32;
        int v34 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
LABEL_59:
        _os_log_impl(&dword_181A5C000, v19, v20, v34, buf, 0x16u);
      }

void nw_protocol_http3_stream_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v104 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    unsigned int v95 = "nw_protocol_http3_stream_input_finished";
    __int16 v41 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v92 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v42 = (os_log_s *)__nwlog_obj();
      os_log_type_t v43 = type;
      if (!os_log_type_enabled(v42, type)) {
        goto LABEL_152;
      }
      *(_DWORD *)int buf = 136446210;
      unsigned int v95 = "nw_protocol_http3_stream_input_finished";
      uint64_t v44 = "%{public}s called with null protocol";
    }

    else if (v92)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v42 = (os_log_s *)__nwlog_obj();
      os_log_type_t v43 = type;
      BOOL v56 = os_log_type_enabled(v42, type);
      if (backtrace_string)
      {
        if (v56)
        {
          *(_DWORD *)int buf = 136446466;
          unsigned int v95 = "nw_protocol_http3_stream_input_finished";
          __int16 v96 = 2082;
          uint64_t v97 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v42,  v43,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_152:
        if (!v41) {
          return;
        }
        goto LABEL_153;
      }

      if (!v56) {
        goto LABEL_152;
      }
      *(_DWORD *)int buf = 136446210;
      unsigned int v95 = "nw_protocol_http3_stream_input_finished";
      uint64_t v44 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      int v42 = (os_log_s *)__nwlog_obj();
      os_log_type_t v43 = type;
      if (!os_log_type_enabled(v42, type)) {
        goto LABEL_152;
      }
      *(_DWORD *)int buf = 136446210;
      unsigned int v95 = "nw_protocol_http3_stream_input_finished";
      uint64_t v44 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_151;
  }

  uint64_t handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    unsigned int v95 = "nw_protocol_http3_stream_input_finished";
    __int16 v41 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v92 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v92)
      {
        int v42 = (os_log_s *)__nwlog_obj();
        os_log_type_t v43 = type;
        if (!os_log_type_enabled(v42, type)) {
          goto LABEL_152;
        }
        *(_DWORD *)int buf = 136446210;
        unsigned int v95 = "nw_protocol_http3_stream_input_finished";
        uint64_t v44 = "%{public}s called with null http3_stream, backtrace limit exceeded";
        goto LABEL_151;
      }

      uint64_t v57 = (char *)__nw_create_backtrace_string();
      int v42 = (os_log_s *)__nwlog_obj();
      os_log_type_t v43 = type;
      BOOL v58 = os_log_type_enabled(v42, type);
      if (!v57)
      {
        if (!v58) {
          goto LABEL_152;
        }
        *(_DWORD *)int buf = 136446210;
        unsigned int v95 = "nw_protocol_http3_stream_input_finished";
        uint64_t v44 = "%{public}s called with null http3_stream, no backtrace";
        goto LABEL_151;
      }

      if (v58)
      {
        *(_DWORD *)int buf = 136446466;
        unsigned int v95 = "nw_protocol_http3_stream_input_finished";
        __int16 v96 = 2082;
        uint64_t v97 = v57;
        __int16 v59 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
LABEL_98:
        _os_log_impl(&dword_181A5C000, v42, v43, v59, buf, 0x16u);
      }

BOOL nw_protocol_http3_stream_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v53 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v42 = "nw_protocol_http3_stream_add_input_handler";
    int v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_62;
      }
      *(_DWORD *)int buf = 136446210;
      int v42 = "nw_protocol_http3_stream_add_input_handler";
      uint64_t v24 = "%{public}s called with null protocol";
      goto LABEL_61;
    }

    if (!v39)
    {
      uint64_t v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_62;
      }
      *(_DWORD *)int buf = 136446210;
      int v42 = "nw_protocol_http3_stream_add_input_handler";
      uint64_t v24 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_61;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v22 = (os_log_s *)__nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v29 = os_log_type_enabled(v22, type);
    if (!backtrace_string)
    {
      if (!v29) {
        goto LABEL_62;
      }
      *(_DWORD *)int buf = 136446210;
      int v42 = "nw_protocol_http3_stream_add_input_handler";
      uint64_t v24 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_61;
    }

    if (v29)
    {
      *(_DWORD *)int buf = 136446466;
      int v42 = "nw_protocol_http3_stream_add_input_handler";
      __int16 v43 = 2082;
      uint64_t v44 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_62:
    if (!v21) {
      return 0LL;
    }
LABEL_63:
    free(v21);
    return 0LL;
  }

  uint64_t handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v42 = "nw_protocol_http3_stream_add_input_handler";
    int v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_62;
      }
      *(_DWORD *)int buf = 136446210;
      int v42 = "nw_protocol_http3_stream_add_input_handler";
      uint64_t v24 = "%{public}s called with null http3_stream";
      goto LABEL_61;
    }

    if (!v39)
    {
      uint64_t v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_62;
      }
      *(_DWORD *)int buf = 136446210;
      int v42 = "nw_protocol_http3_stream_add_input_handler";
      uint64_t v24 = "%{public}s called with null http3_stream, backtrace limit exceeded";
      goto LABEL_61;
    }

    uint64_t v30 = (char *)__nw_create_backtrace_string();
    uint64_t v22 = (os_log_s *)__nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v31 = os_log_type_enabled(v22, type);
    if (v30)
    {
      if (v31)
      {
        *(_DWORD *)int buf = 136446466;
        int v42 = "nw_protocol_http3_stream_add_input_handler";
        __int16 v43 = 2082;
        uint64_t v44 = v30;
        _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s called with null http3_stream, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v30);
      if (!v21) {
        return 0LL;
      }
      goto LABEL_63;
    }

    if (v31)
    {
      *(_DWORD *)int buf = 136446210;
      int v42 = "nw_protocol_http3_stream_add_input_handler";
      uint64_t v24 = "%{public}s called with null http3_stream, no backtrace";
LABEL_61:
      _os_log_impl(&dword_181A5C000, v22, v23, v24, buf, 0xCu);
      goto LABEL_62;
    }

    goto LABEL_62;
  }

  if ((*((_WORD *)handle + 368) & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      int v25 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        int v26 = *(_DWORD *)(*((void *)handle + 42) + 1280LL);
        uint64_t v27 = *((void *)handle + 30);
        *(_DWORD *)int buf = 136447234;
        int v42 = "nw_protocol_http3_stream_add_input_handler";
        __int16 v43 = 2082;
        uint64_t v44 = handle + 636;
        __int16 v45 = 2080;
        BOOL v46 = " ";
        __int16 v47 = 1024;
        int v48 = v26;
        __int16 v49 = 2048;
        uint64_t v50 = v27;
        _os_log_impl(&dword_181A5C000, v25, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> called", buf, 0x30u);
      }
    }
  }

  uint64_t v5 = handle + 736;
  unint64_t v6 = (nw_protocol *)*((void *)handle + 42);
  if (v6) {
    BOOL v7 = a1->default_input_handler == a2;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if ((*v5 & 0x800) == 0)
    {
      if (gLogDatapath)
      {
        BOOL v32 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
          int v33 = *(_DWORD *)(*((void *)handle + 42) + 1280LL);
          uint64_t v34 = *((void *)handle + 30);
          *(_DWORD *)int buf = 136447490;
          int v42 = "nw_protocol_http3_stream_add_input_handler";
          __int16 v43 = 2082;
          uint64_t v44 = handle + 636;
          __int16 v45 = 2080;
          BOOL v46 = " ";
          __int16 v47 = 1024;
          int v48 = v33;
          __int16 v49 = 2048;
          uint64_t v50 = v34;
          __int16 v51 = 2048;
          int v52 = handle;
          _os_log_impl( &dword_181A5C000,  v32,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> Peeling off a new stream from %p",  buf,  0x3Au);
        }
      }
    }

    nw_parameters_t parameters = (char *)nw_protocol_get_parameters((uint64_t)a2);
    if (parameters)
    {
      int v16 = parameters;
      nw_http3_stream_replace_protocol_instance((uint64_t)handle, parameters, (nw_protocol *)handle, (uint64_t)v6);
      if ((*v5 & 0x800) == 0)
      {
        if (gLogDatapath)
        {
          BOOL v35 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
          {
            int v36 = *(_DWORD *)(*((void *)handle + 42) + 1280LL);
            uint64_t v37 = *((void *)handle + 30);
            *(_DWORD *)int buf = 136447490;
            int v42 = "nw_protocol_http3_stream_add_input_handler";
            __int16 v43 = 2082;
            uint64_t v44 = handle + 636;
            __int16 v45 = 2080;
            BOOL v46 = " ";
            __int16 v47 = 1024;
            int v48 = v36;
            __int16 v49 = 2048;
            uint64_t v50 = v37;
            __int16 v51 = 2048;
            int v52 = v16;
            _os_log_impl( &dword_181A5C000,  v35,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> Set connection protocol as instance in peeled off parameters %p",  buf,  0x3Au);
          }
        }
      }
    }

    uint64_t v17 = *((void *)handle + 42);
    if (v17)
    {
      *(_WORD *)(v17 + 1373) |= 0x8000u;
      BOOL result = nw_protocol_http3_add_input_handler(v6, a2);
      uint64_t v18 = *((void *)handle + 42);
      int v19 = *(unsigned __int16 *)(v18 + 1373);
      unsigned int v20 = v19 & 0xFFFF7FFF | (*(unsigned __int8 *)(v18 + 1375) << 16);
      *(_WORD *)(v18 + 1373) = v19 & 0x7FFF;
      *(_BYTE *)(v18 + 1375) = BYTE2(v20);
      return result;
    }

    return 0LL;
  }

  if (v6)
  {
    BOOL result = 0LL;
    if ((*v5 & 0x800) == 0)
    {
      if (gLogDatapath)
      {
        unsigned int v9 = (os_log_s *)__nwlog_obj();
        BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
        if (result)
        {
          int v10 = *(_DWORD *)(*((void *)handle + 42) + 1280LL);
          uint64_t v11 = *((void *)handle + 30);
          *(_DWORD *)int buf = 136447234;
          int v42 = "nw_protocol_http3_stream_add_input_handler";
          __int16 v43 = 2082;
          uint64_t v44 = handle + 636;
          __int16 v45 = 2080;
          BOOL v46 = " ";
          __int16 v47 = 1024;
          int v48 = v10;
          __int16 v49 = 2048;
          uint64_t v50 = v11;
          uint64_t v12 = "%{public}s %{public}s%s<i%u:s%llu> Rejecting duplicate request for a stream";
          os_log_type_t v13 = v9;
          uint32_t v14 = 48;
LABEL_52:
          _os_log_impl(&dword_181A5C000, v13, OS_LOG_TYPE_DEBUG, v12, buf, v14);
          return 0LL;
        }
      }
    }
  }

  else
  {
    if (!gLogDatapath) {
      return 0LL;
    }
    uint64_t v38 = (os_log_s *)__nwlog_obj();
    BOOL result = os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG);
    if (result)
    {
      *(_DWORD *)int buf = 136446210;
      int v42 = "nw_protocol_http3_stream_add_input_handler";
      uint64_t v12 = "%{public}s Rejecting duplicate request for a stream";
      os_log_type_t v13 = v38;
      uint32_t v14 = 12;
      goto LABEL_52;
    }
  }

  return result;
}

uint64_t nw_protocol_http3_stream_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v159 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_remove_input_handler";
    char v67 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v148 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v148)
      {
        BOOL v68 = (os_log_s *)__nwlog_obj();
        os_log_type_t v69 = type;
        if (!os_log_type_enabled(v68, type)) {
          goto LABEL_232;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_remove_input_handler";
        BOOL v70 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_231;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v68 = (os_log_s *)__nwlog_obj();
      os_log_type_t v69 = type;
      BOOL v90 = os_log_type_enabled(v68, type);
      if (!backtrace_string)
      {
        if (!v90) {
          goto LABEL_232;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_remove_input_handler";
        BOOL v70 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_231;
      }

      if (v90)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_remove_input_handler";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&_BYTE buf[14] = backtrace_string;
        uint64_t v91 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_152:
        _os_log_impl(&dword_181A5C000, v68, v69, v91, buf, 0x16u);
      }

uint64_t nw_protocol_http3_stream_replace_input_handler(nw_protocol *a1, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v34 = "nw_protocol_http3_stream_replace_input_handler";
    int v21 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v31)
      {
        uint64_t v22 = (os_log_s *)__nwlog_obj();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v34 = "nw_protocol_http3_stream_replace_input_handler";
          uint64_t v24 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_82;
        }

        goto LABEL_83;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v26 = os_log_type_enabled(v22, type);
      if (!backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v34 = "nw_protocol_http3_stream_replace_input_handler";
          uint64_t v24 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_82;
        }

        goto LABEL_83;
      }

      if (!v26) {
        goto LABEL_65;
      }
      *(_DWORD *)int buf = 136446466;
      uint64_t v34 = "nw_protocol_http3_stream_replace_input_handler";
      __int16 v35 = 2082;
      int v36 = (nw_protocol *)backtrace_string;
      uint64_t v27 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_64;
    }

    uint64_t v22 = (os_log_s *)__nwlog_obj();
    os_log_type_t v23 = type;
    if (!os_log_type_enabled(v22, type)) {
      goto LABEL_83;
    }
    *(_DWORD *)int buf = 136446210;
    uint64_t v34 = "nw_protocol_http3_stream_replace_input_handler";
    uint64_t v24 = "%{public}s called with null protocol";
LABEL_82:
    _os_log_impl(&dword_181A5C000, v22, v23, v24, buf, 0xCu);
    goto LABEL_83;
  }

  uint64_t handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v34 = "nw_protocol_http3_stream_replace_input_handler";
    int v21 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v31)
      {
        uint64_t v22 = (os_log_s *)__nwlog_obj();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v34 = "nw_protocol_http3_stream_replace_input_handler";
          uint64_t v24 = "%{public}s called with null http3_stream, backtrace limit exceeded";
          goto LABEL_82;
        }

        goto LABEL_83;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v28 = os_log_type_enabled(v22, type);
      if (!backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v34 = "nw_protocol_http3_stream_replace_input_handler";
          uint64_t v24 = "%{public}s called with null http3_stream, no backtrace";
          goto LABEL_82;
        }

        goto LABEL_83;
      }

      if (!v28) {
        goto LABEL_65;
      }
      *(_DWORD *)int buf = 136446466;
      uint64_t v34 = "nw_protocol_http3_stream_replace_input_handler";
      __int16 v35 = 2082;
      int v36 = (nw_protocol *)backtrace_string;
      uint64_t v27 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
      goto LABEL_64;
    }

    uint64_t v22 = (os_log_s *)__nwlog_obj();
    os_log_type_t v23 = type;
    if (!os_log_type_enabled(v22, type)) {
      goto LABEL_83;
    }
    *(_DWORD *)int buf = 136446210;
    uint64_t v34 = "nw_protocol_http3_stream_replace_input_handler";
    uint64_t v24 = "%{public}s called with null http3_stream";
    goto LABEL_82;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v34 = "nw_protocol_http3_stream_replace_input_handler";
    int v21 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_83;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v34 = "nw_protocol_http3_stream_replace_input_handler";
      uint64_t v24 = "%{public}s called with null old_input_handler";
      goto LABEL_82;
    }

    if (!v31)
    {
      uint64_t v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v34 = "nw_protocol_http3_stream_replace_input_handler";
        uint64_t v24 = "%{public}s called with null old_input_handler, backtrace limit exceeded";
        goto LABEL_82;
      }

      goto LABEL_83;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v22 = (os_log_s *)__nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v29 = os_log_type_enabled(v22, type);
    if (!backtrace_string)
    {
      if (v29)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v34 = "nw_protocol_http3_stream_replace_input_handler";
        uint64_t v24 = "%{public}s called with null old_input_handler, no backtrace";
        goto LABEL_82;
      }

      goto LABEL_83;
    }

    if (!v29) {
      goto LABEL_65;
    }
    *(_DWORD *)int buf = 136446466;
    uint64_t v34 = "nw_protocol_http3_stream_replace_input_handler";
    __int16 v35 = 2082;
    int v36 = (nw_protocol *)backtrace_string;
    uint64_t v27 = "%{public}s called with null old_input_handler, dumping backtrace:%{public}s";
LABEL_64:
    _os_log_impl(&dword_181A5C000, v22, v23, v27, buf, 0x16u);
    goto LABEL_65;
  }

  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v34 = "nw_protocol_http3_stream_replace_input_handler";
    int v21 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v34 = "nw_protocol_http3_stream_replace_input_handler";
        uint64_t v24 = "%{public}s called with null new_input_handler";
        goto LABEL_82;
      }

void nw_protocol_http3_stream_output_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v57 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v48 = "nw_protocol_http3_stream_output_available";
    int v21 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_66;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v48 = "nw_protocol_http3_stream_output_available";
      uint64_t v24 = "%{public}s called with null protocol";
      goto LABEL_65;
    }

    if (!v45)
    {
      uint64_t v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_66;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v48 = "nw_protocol_http3_stream_output_available";
      uint64_t v24 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_65;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v22 = (os_log_s *)__nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v29 = os_log_type_enabled(v22, type);
    if (!backtrace_string)
    {
      if (!v29) {
        goto LABEL_66;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v48 = "nw_protocol_http3_stream_output_available";
      uint64_t v24 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_65;
    }

    if (v29)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v48 = "nw_protocol_http3_stream_output_available";
      __int16 v49 = 2082;
      uint64_t v50 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_66:
    if (!v21) {
      return;
    }
    goto LABEL_67;
  }

  uint64_t handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v48 = "nw_protocol_http3_stream_output_available";
    int v21 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_66;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v48 = "nw_protocol_http3_stream_output_available";
      uint64_t v24 = "%{public}s called with null http3_stream";
      goto LABEL_65;
    }

    if (!v45)
    {
      uint64_t v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_66;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v48 = "nw_protocol_http3_stream_output_available";
      uint64_t v24 = "%{public}s called with null http3_stream, backtrace limit exceeded";
      goto LABEL_65;
    }

    BOOL v30 = (char *)__nw_create_backtrace_string();
    uint64_t v22 = (os_log_s *)__nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v31 = os_log_type_enabled(v22, type);
    if (v30)
    {
      if (v31)
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v48 = "nw_protocol_http3_stream_output_available";
        __int16 v49 = 2082;
        uint64_t v50 = v30;
        _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s called with null http3_stream, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v30);
      if (!v21) {
        return;
      }
LABEL_67:
      __int16 v37 = (char *)v21;
LABEL_68:
      free(v37);
      return;
    }

    if (v31)
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v48 = "nw_protocol_http3_stream_output_available";
      uint64_t v24 = "%{public}s called with null http3_stream, no backtrace";
LABEL_65:
      _os_log_impl(&dword_181A5C000, v22, v23, v24, buf, 0xCu);
      goto LABEL_66;
    }

    goto LABEL_66;
  }

  if ((handle[92] & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v25 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        int v26 = *(_DWORD *)(handle[42] + 1280LL);
        uint64_t v27 = handle[30];
        *(_DWORD *)int buf = 136447234;
        uint64_t v48 = "nw_protocol_http3_stream_output_available";
        __int16 v49 = 2082;
        uint64_t v50 = (char *)handle + 636;
        __int16 v51 = 2080;
        BOOL v52 = " ";
        __int16 v53 = 1024;
        int v54 = v26;
        __int16 v55 = 2048;
        uint64_t v56 = v27;
        _os_log_impl(&dword_181A5C000, v25, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> called", buf, 0x30u);
      }
    }
  }

  switch(*((_DWORD *)handle + 92))
  {
    case 0:
      if ((handle[92] & 0x800) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v6 = (os_log_s *)gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          int v7 = *(_DWORD *)(handle[42] + 1280LL);
          uint64_t v8 = handle[30];
          *(_DWORD *)int buf = 136447234;
          uint64_t v48 = "nw_protocol_http3_stream_output_available";
          __int16 v49 = 2082;
          uint64_t v50 = (char *)handle + 636;
          __int16 v51 = 2080;
          BOOL v52 = " ";
          __int16 v53 = 1024;
          int v54 = v7;
          __int16 v55 = 2048;
          uint64_t v56 = v8;
          _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:s%llu> output_available before get_output_frames",  buf,  0x30u);
        }
      }

      return;
    case 1:
    case 3:
    case 5:
      nw_http3_stream_send_pending_capsules((uint64_t)handle);
      uint64_t v3 = handle[6];
      if (v3)
      {
        uint64_t v4 = *(void *)(v3 + 24);
        if (v4)
        {
          uint64_t v5 = *(void (**)(void))(v4 + 72);
          if (v5) {
            goto LABEL_9;
          }
        }
      }

      return;
    case 2:
      int is_metadata_complete = nw_frame_is_metadata_complete(handle[48]);
      uint64_t v10 = handle[6];
      if (v10)
      {
        uint64_t v11 = *(void *)(v10 + 24);
        if (v11)
        {
          uint64_t v5 = *(void (**)(void))(v11 + 72);
          if (v5)
          {
LABEL_9:
            v5();
            return;
          }
        }
      }

      __nwlog_obj();
      uint64_t v12 = handle[6];
      uint64_t v13 = "invalid";
      if (v12)
      {
        uint64_t v14 = *(const char **)(v12 + 16);
        if (v14) {
          uint64_t v13 = v14;
        }
      }

      *(_DWORD *)int buf = 136446466;
      uint64_t v48 = "nw_protocol_http3_stream_output_available";
      __int16 v49 = 2082;
      uint64_t v50 = (char *)v13;
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v45 = 0;
      int v44 = (const char *)_os_log_send_and_compose_impl();
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v15 = (os_log_s *)__nwlog_obj();
        os_log_type_t v16 = type;
        if (!os_log_type_enabled(v15, type)) {
          goto LABEL_80;
        }
        uint64_t v17 = handle[6];
        uint64_t v18 = "invalid";
        if (v17)
        {
          uint64_t v19 = *(const char **)(v17 + 16);
          if (v19) {
            uint64_t v18 = v19;
          }
        }

        *(_DWORD *)int buf = 136446466;
        uint64_t v48 = "nw_protocol_http3_stream_output_available";
        __int16 v49 = 2082;
        uint64_t v50 = (char *)v18;
        unsigned int v20 = "%{public}s protocol %{public}s has invalid output_available callback";
LABEL_79:
        _os_log_impl(&dword_181A5C000, v15, v16, v20, buf, 0x16u);
        goto LABEL_80;
      }

      if (!v45)
      {
        uint64_t v15 = (os_log_s *)__nwlog_obj();
        os_log_type_t v16 = type;
        if (!os_log_type_enabled(v15, type)) {
          goto LABEL_80;
        }
        uint64_t v38 = handle[6];
        __int16 v39 = "invalid";
        if (v38)
        {
          uint64_t v40 = *(const char **)(v38 + 16);
          if (v40) {
            __int16 v39 = v40;
          }
        }

        *(_DWORD *)int buf = 136446466;
        uint64_t v48 = "nw_protocol_http3_stream_output_available";
        __int16 v49 = 2082;
        uint64_t v50 = (char *)v39;
        unsigned int v20 = "%{public}s protocol %{public}s has invalid output_available callback, backtrace limit exceeded";
        goto LABEL_79;
      }

      unint64_t v32 = (char *)__nw_create_backtrace_string();
      uint64_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v33 = os_log_type_enabled(v15, type);
      if (!v32)
      {
        if (!v33) {
          goto LABEL_80;
        }
        uint64_t v41 = handle[6];
        uint64_t v42 = "invalid";
        if (v41)
        {
          __int16 v43 = *(const char **)(v41 + 16);
          if (v43) {
            uint64_t v42 = v43;
          }
        }

        *(_DWORD *)int buf = 136446466;
        uint64_t v48 = "nw_protocol_http3_stream_output_available";
        __int16 v49 = 2082;
        uint64_t v50 = (char *)v42;
        unsigned int v20 = "%{public}s protocol %{public}s has invalid output_available callback, no backtrace";
        goto LABEL_79;
      }

      if (v33)
      {
        uint64_t v34 = handle[6];
        __int16 v35 = "invalid";
        if (v34)
        {
          int v36 = *(const char **)(v34 + 16);
          if (v36) {
            __int16 v35 = v36;
          }
        }

        *(_DWORD *)int buf = 136446722;
        uint64_t v48 = "nw_protocol_http3_stream_output_available";
        __int16 v49 = 2082;
        uint64_t v50 = (char *)v35;
        __int16 v51 = 2082;
        BOOL v52 = v32;
        _os_log_impl( &dword_181A5C000,  v15,  v16,  "%{public}s protocol %{public}s has invalid output_available callback, dumping backtrace:%{public}s",  buf,  0x20u);
      }

      free(v32);
LABEL_80:
      __int16 v37 = (char *)v44;
      if (v44) {
        goto LABEL_68;
      }
      break;
    default:
      return;
  }

uint64_t nw_protocol_http3_stream_get_input_frames( nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  v188[2] = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t handle = (char *)a1->handle;
    if (handle)
    {
      if ((*((_WORD *)handle + 368) & 0x800) == 0)
      {
        if (gLogDatapath)
        {
          BOOL v87 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
          {
            int v88 = *(_DWORD *)(*((void *)handle + 42) + 1280LL);
            uint64_t v89 = *((void *)handle + 30);
            *(_DWORD *)int buf = 136447234;
            os_log_type_t v175 = "nw_protocol_http3_stream_get_input_frames";
            __int16 v176 = 2082;
            unsigned int v177 = handle + 636;
            __int16 v178 = 2080;
            uint64_t v179 = " ";
            __int16 v180 = 1024;
            int v181 = v88;
            __int16 v182 = 2048;
            uint64_t v183 = v89;
            _os_log_impl( &dword_181A5C000,  v87,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> called",  buf,  0x30u);
          }
        }
      }

      uint64_t v8 = 0LL;
      uint64_t v9 = handle + 736;
      switch(*((_DWORD *)handle + 93))
      {
        case 0:
        case 1:
        case 5:
          uint64_t v10 = a3 + 1LL;
          uint64_t v11 = v10 << 31 >> 31;
          if (v11 >= 0 && v11 == v10) {
            int v13 = a3 + 1;
          }
          else {
            int v13 = -1;
          }
          uint64_t v14 = a4 + 0x20000LL;
          uint64_t v15 = v14 << 31 >> 31;
          if (v15 < 0 || v15 != v14) {
            LODWORD(v14) = -1;
          }
          a3 = v13;
          a4 = v14;
          goto LABEL_19;
        case 2:
        case 3:
        case 6:
        case 7:
          return v8;
        case 4:
          goto LABEL_19;
        case 8:
          uint64_t v29 = *((void *)handle + 47);
          if (v29)
          {
            *(void *)(v29 + 32) = 0LL;
            tqh_last = a6->tqh_last;
            *(void *)(v29 + 40) = tqh_last;
            *tqh_last = (nw_frame *)v29;
            a6->tqh_last = (nw_frame **)(v29 + 32);
            *((void *)handle + 47) = 0LL;
            return 1LL;
          }

          uint64_t v8 = 0LL;
          int v102 = (uint64_t *)(handle + 216);
          BOOL v31 = "nw_protocol_http3_stream_get_input_frames";
          break;
        default:
          a3 = 0;
          a4 = 0;
LABEL_19:
          *(void *)uint64_t v167 = 0LL;
          BOOL v168 = v167;
          LODWORD(v170) = 0;
          uint64_t v169 = 0x2000000000LL;
          uint64_t v17 = *((void *)handle + 47);
          if (v17)
          {
            *(void *)(v17 + 32) = 0LL;
            uint64_t v18 = a6->tqh_last;
            *(void *)(v17 + 40) = v18;
            const char *v18 = (nw_frame *)v17;
            a6->tqh_last = (nw_frame **)(v17 + 32);
            ++*((_DWORD *)v168 + 6);
            *((void *)handle + 47) = 0LL;
          }

          uint64_t v163 = 0LL;
          int v164 = &v163;
          int v166 = 0;
          uint64_t v165 = 0x2000000000LL;
          do
          {
            v162[0] = -1LL;
            v160[0] = 0LL;
            LOBYTE(v152) = 0;
            LODWORD(v156) = 0;
            int input_frames = nw_http3_framer_get_input_frames( (uint64_t)(handle + 128),  a3,  a4,  a5,  v162,  v160,  &v152,  (uint64_t)&v156,  (uint64_t)(handle + 216));
            if ((*v9 & 0x800) == 0)
            {
              if (gLogDatapath)
              {
                id log = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
                {
                  int v23 = *(_DWORD *)(*((void *)handle + 42) + 1280LL);
                  uint64_t v24 = *((void *)handle + 30);
                  int v25 = *((_DWORD *)handle + 93);
                  *(_DWORD *)int buf = 136448514;
                  os_log_type_t v175 = "nw_protocol_http3_stream_get_input_frames";
                  __int16 v176 = 2082;
                  unsigned int v177 = handle + 636;
                  __int16 v178 = 2080;
                  uint64_t v179 = " ";
                  __int16 v180 = 1024;
                  int v181 = v23;
                  __int16 v182 = 2048;
                  uint64_t v183 = v24;
                  __int16 v184 = 1024;
                  *(_DWORD *)BOOL v185 = input_frames;
                  *(_WORD *)&v185[4] = 1024;
                  *(_DWORD *)&v185[6] = v25;
                  *(_WORD *)&v185[10] = 2048;
                  *(void *)&v185[12] = v162[0];
                  *(_WORD *)&v185[20] = 2048;
                  *(void *)&v185[22] = v160[0];
                  __int16 v186 = 1024;
                  int v187 = v152;
                  _os_log_impl( &dword_181A5C000,  log,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> read %u input frames, state %u type %llx length %llu complete %u",  buf,  0x56u);
                }
              }
            }

            if (!input_frames) {
              break;
            }
            v108[0] = MEMORY[0x1895F87A8];
            v108[1] = 0x40000000LL;
            BOOL v109 = ___ZL41nw_protocol_http3_stream_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_148;
            int v110 = &unk_189BC47A0;
            os_log_type_t v113 = handle;
            uint64_t v114 = v162[0];
            char v118 = v152;
            int v117 = v156;
            uint64_t v115 = v160[0];
            __int16 v116 = a6;
            __int16 v111 = &v163;
            __int16 v112 = v167;
            uint64_t v20 = *((void *)handle + 27);
            do
            {
              if (!v20) {
                break;
              }
              uint64_t v21 = *(void *)(v20 + 32);
              char v22 = ((uint64_t (*)(void *))v109)(v108);
              uint64_t v20 = v21;
            }

            while ((v22 & 1) != 0);
          }

          while (!*((_DWORD *)v168 + 6) && !*((_DWORD *)v164 + 6));
          if ((*v9 & 0x800) == 0)
          {
            if (gLogDatapath)
            {
              os_log_type_t v94 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
              {
                int v95 = *(_DWORD *)(*((void *)handle + 42) + 1280LL);
                uint64_t v96 = *((void *)handle + 30);
                int v97 = *((_DWORD *)v168 + 6);
                *(_DWORD *)int buf = 136447490;
                os_log_type_t v175 = "nw_protocol_http3_stream_get_input_frames";
                __int16 v176 = 2082;
                unsigned int v177 = handle + 636;
                __int16 v178 = 2080;
                uint64_t v179 = " ";
                __int16 v180 = 1024;
                int v181 = v95;
                __int16 v182 = 2048;
                uint64_t v183 = v96;
                __int16 v184 = 1024;
                *(_DWORD *)BOOL v185 = v97;
                _os_log_impl( &dword_181A5C000,  v94,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> returning %u input frames",  buf,  0x36u);
              }
            }
          }

          if ((*v9 & 0x100) != 0 && (*((_DWORD *)handle + 93) | 4) != 6)
          {
            uint64_t v26 = *((void *)handle + 41);
            uint64_t v27 = *(void **)(*((void *)handle + 42) + 1256LL);
            v107[0] = MEMORY[0x1895F87A8];
            v107[1] = 0x40000000LL;
            v107[2] = ___ZL41nw_protocol_http3_stream_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_150;
            v107[3] = &unk_189BC47C8;
            v107[4] = v26;
            v107[5] = handle;
            nw_queue_context_async(v27, v107);
          }

          uint64_t v8 = *((unsigned int *)v168 + 6);
          _Block_object_dispose(&v163, 8);
          _Block_object_dispose(v167, 8);
          return v8;
      }

      while (1)
      {
        uint64_t v172 = 0LL;
        uint64_t v173 = -1LL;
        unsigned __int8 v171 = 0;
        int v32 = nw_http3_framer_get_input_frames( (uint64_t)(handle + 128),  1u,  0xFFFFFFFF,  0xFFFFFFFF,  &v173,  &v172,  &v171,  0LL,  (uint64_t)v102);
        if ((*v9 & 0x800) == 0)
        {
          if (gLogDatapath)
          {
            uint64_t v73 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
            {
              int v74 = *(_DWORD *)(*((void *)handle + 42) + 1280LL);
              uint64_t v75 = *((void *)handle + 30);
              *(_DWORD *)int buf = 136448258;
              os_log_type_t v175 = v31;
              __int16 v176 = 2082;
              unsigned int v177 = handle + 636;
              __int16 v178 = 2080;
              uint64_t v179 = " ";
              __int16 v180 = 1024;
              int v181 = v74;
              __int16 v182 = 2048;
              uint64_t v183 = v75;
              __int16 v184 = 1024;
              *(_DWORD *)BOOL v185 = v32;
              *(_WORD *)&v185[4] = 2048;
              *(void *)&v185[6] = v173;
              *(_WORD *)&v185[14] = 2048;
              *(void *)&v185[16] = v172;
              *(_WORD *)&v185[24] = 1024;
              *(_DWORD *)&v185[26] = v171;
              _os_log_impl( &dword_181A5C000,  v73,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> read %u input frames on capsule stream, type %llx length %llu complete %u",  buf,  0x50u);
            }
          }
        }

        if (!v32)
        {
          if (a5 > v8)
          {
            uint64_t v81 = *((void *)handle + 12);
            if (v81)
            {
              int v82 = (*(uint64_t (**)(void))(*(void *)(v81 + 24) + 80LL))();
              if ((*v9 & 0x800) == 0)
              {
                if (gLogDatapath)
                {
                  BOOL v98 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v98, OS_LOG_TYPE_DEBUG))
                  {
                    int v99 = *(_DWORD *)(*((void *)handle + 42) + 1280LL);
                    uint64_t v100 = *((void *)handle + 30);
                    *(_DWORD *)int buf = 136447490;
                    os_log_type_t v175 = v31;
                    __int16 v176 = 2082;
                    unsigned int v177 = handle + 636;
                    __int16 v178 = 2080;
                    uint64_t v179 = " ";
                    __int16 v180 = 1024;
                    int v181 = v99;
                    __int16 v182 = 2048;
                    uint64_t v183 = v100;
                    __int16 v184 = 1024;
                    *(_DWORD *)BOOL v185 = v82;
                    _os_log_impl( &dword_181A5C000,  v98,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> read %u input datagrams",  buf,  0x36u);
                  }
                }
              }

              return (v82 + v8);
            }
          }

          return v8;
        }

        if (v171) {
          break;
        }
LABEL_44:
      }

      *(void *)uint64_t v167 = 0LL;
      BOOL v168 = v167;
      uint64_t v169 = 0x2000000000LL;
      uint64_t v170 = 0LL;
      uint64_t v163 = 0LL;
      int v164 = &v163;
      uint64_t v165 = 0x2000000000LL;
      LOBYTE(v166) = 0;
      v188[0] = 0LL;
      v188[1] = 0LL;
      v162[0] = 0LL;
      v162[1] = v162;
      v162[2] = 0x2000000000LL;
      v162[3] = v188;
      v160[0] = 0LL;
      v160[1] = v160;
      v160[2] = 0x2000000000LL;
      __int16 v161 = 0;
      uint64_t v156 = 0LL;
      __int16 v157 = &v156;
      uint64_t v158 = 0x2000000000LL;
      __int16 v159 = 0;
      uint64_t v152 = 0LL;
      __int16 v153 = &v152;
      uint64_t v154 = 0x2000000000LL;
      uint64_t v155 = -1LL;
      uint64_t v148 = 0LL;
      char v149 = &v148;
      uint64_t v150 = 0x2000000000LL;
      uint64_t v151 = 0LL;
      v135[0] = MEMORY[0x1895F87A8];
      v135[1] = 0x40000000LL;
      BOOL v136 = ___ZL41nw_protocol_http3_stream_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
      os_log_type_t v137 = &unk_189BC4750;
      uint64_t v138 = &v163;
      uint64_t v144 = handle;
      uint64_t v145 = v173;
      uint64_t v146 = v172;
      char v147 = 1;
      int v139 = v160;
      id v140 = v162;
      int v141 = &v152;
      unsigned int v142 = &v156;
      size_t v143 = &v148;
      uint64_t v33 = *((void *)handle + 27);
      do
      {
        if (!v33) {
          break;
        }
        uint64_t v34 = *(void *)(v33 + 32);
        BOOL v35 = v136((uint64_t)v135, v33);
        uint64_t v33 = v34;
      }

      while (v35);
      if (!*((_BYTE *)v164 + 24))
      {
LABEL_88:
        if (*((void *)v168 + 3))
        {
          uint64_t v67 = nw_frame_create(0, 0LL, 0, (uint64_t)nw_protocol_http3_capsule_frame_finalizer, 0LL);
          metadata_for_capsule = nw_http_create_metadata_for_capsule(v153[3], *((void **)v168 + 3));
          nw_frame_set_metadata(v67, (nw_protocol_metadata *)metadata_for_capsule, 1, 1);
          if (metadata_for_capsule) {
            os_release(metadata_for_capsule);
          }
          *(void *)(v67 + 32) = 0LL;
          os_log_type_t v69 = a6->tqh_last;
          *(void *)(v67 + 40) = v69;
          nw_protocol *v69 = (nw_frame *)v67;
          a6->tqh_last = (nw_frame **)(v67 + 32);
          BOOL v70 = (dispatch_object_s *)*((void *)v168 + 3);
          if (v70)
          {
            dispatch_release(v70);
            *((void *)v168 + 3) = 0LL;
          }

          uint64_t v8 = (v8 + 1);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v71 = (os_log_s *)gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          {
            int v72 = (char *)v153[3];
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v175 = v31;
            __int16 v176 = 2048;
            unsigned int v177 = v72;
            _os_log_impl( &dword_181A5C000,  v71,  OS_LOG_TYPE_INFO,  "%{public}s Receiving capsule type 0x%llx",  buf,  0x16u);
          }
        }

        _Block_object_dispose(&v148, 8);
        _Block_object_dispose(&v152, 8);
        _Block_object_dispose(&v156, 8);
        _Block_object_dispose(v160, 8);
        _Block_object_dispose(v162, 8);
        _Block_object_dispose(&v163, 8);
        _Block_object_dispose(v167, 8);
        goto LABEL_44;
      }

      unsigned int v36 = 0;
      int v37 = *((unsigned __int16 *)v157 + 12);
      uint64_t v38 = v149[3];
      unsigned int v39 = v38 + v37;
      uint64_t v40 = *v102;
      while (v40)
      {
        int v44 = *(_DWORD *)(v40 + 52);
        if (v44) {
          v44 -= *(_DWORD *)(v40 + 56) + *(_DWORD *)(v40 + 60);
        }
        uint64_t v40 = *(void *)(v40 + 32);
        BOOL v41 = __CFADD__(v36, v44);
        unsigned int v42 = v36 + v44;
        v36 += v44;
        if (v41) {
          unsigned int v43 = -1;
        }
        else {
          unsigned int v43 = v42;
        }
        if (v43 >= v39) {
          goto LABEL_62;
        }
      }

      if (v36 < v39) {
        goto LABEL_88;
      }
LABEL_62:
      v133[0] = 0LL;
      v133[1] = v133;
      v133[2] = 0x2000000000LL;
      __int16 v134 = v37;
      uint64_t v129 = 0LL;
      id v130 = &v129;
      uint64_t v131 = 0x2000000000LL;
      uint64_t v132 = v38;
      if ((*v9 & 0x800) == 0)
      {
        if (gLogDatapath)
        {
          id v76 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
          {
            int v77 = *(_DWORD *)(*((void *)handle + 42) + 1280LL);
            uint64_t v78 = *((void *)handle + 30);
            uint64_t v79 = v153[3];
            uint64_t v80 = v149[3];
            *(_DWORD *)int buf = 136447746;
            os_log_type_t v175 = v31;
            __int16 v176 = 2082;
            unsigned int v177 = handle + 636;
            __int16 v178 = 2080;
            uint64_t v179 = " ";
            __int16 v180 = 1024;
            int v181 = v77;
            __int16 v182 = 2048;
            uint64_t v183 = v78;
            __int16 v184 = 2048;
            *(void *)BOOL v185 = v79;
            *(_WORD *)&v185[8] = 2048;
            *(void *)&v185[10] = v80;
            _os_log_impl( &dword_181A5C000,  v76,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> Receiving capsule type 0x%llx length %llu",  buf,  0x44u);
          }
        }
      }

      v121[0] = MEMORY[0x1895F87A8];
      v121[1] = 0x40000000LL;
      unint64_t v122 = (uint64_t (*)(void *))___ZL41nw_protocol_http3_stream_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_146;
      size_t v123 = &unk_189BC4778;
      id v127 = handle;
      uint64_t v128 = a1;
      int v124 = v133;
      int v125 = &v129;
      os_log_type_t v126 = v167;
      uint64_t v45 = *((void *)handle + 27);
      do
      {
        if (!v45) {
          break;
        }
        uint64_t v46 = *(void *)(v45 + 32);
        char v47 = v122(v121);
        uint64_t v45 = v46;
      }

      while ((v47 & 1) != 0);
      if (!*((void *)v168 + 3) || !v130[3])
      {
LABEL_87:
        _Block_object_dispose(&v129, 8);
        _Block_object_dispose(v133, 8);
        goto LABEL_88;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v48 = (char *)v130[3];
      *(_DWORD *)int buf = 136446466;
      __int16 v49 = v31;
      os_log_type_t v175 = v31;
      __int16 v176 = 2048;
      unsigned int v177 = v48;
      uint64_t v50 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v119 = 0;
      if (__nwlog_fault(v50, &type, &v119))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v51 = gLogObj;
          os_log_type_t v52 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            __int16 v53 = (char *)v130[3];
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v175 = v31;
            __int16 v176 = 2048;
            unsigned int v177 = v53;
            int v54 = (os_log_s *)v51;
            os_log_type_t v55 = v52;
            uint64_t v56 = "%{public}s Read capsule data, but still have remaining length %llu";
LABEL_82:
            _os_log_impl(&dword_181A5C000, v54, v55, v56, buf, 0x16u);
          }
        }

        else if (v119)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          BOOL v58 = (os_log_s *)__nwlog_obj();
          os_log_type_t v59 = type;
          BOOL v60 = os_log_type_enabled(v58, type);
          if (backtrace_string)
          {
            if (v60)
            {
              __int16 v61 = (char *)v130[3];
              *(_DWORD *)int buf = 136446722;
              os_log_type_t v175 = v49;
              __int16 v176 = 2048;
              unsigned int v177 = v61;
              __int16 v178 = 2082;
              uint64_t v179 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v58,  v59,  "%{public}s Read capsule data, but still have remaining length %llu, dumping backtrace:%{public}s",  buf,  0x20u);
            }

            free(backtrace_string);
            goto LABEL_83;
          }

          if (v60)
          {
            int v65 = (char *)v130[3];
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v175 = v49;
            __int16 v176 = 2048;
            unsigned int v177 = v65;
            int v54 = v58;
            os_log_type_t v55 = v59;
            uint64_t v56 = "%{public}s Read capsule data, but still have remaining length %llu, no backtrace";
            goto LABEL_82;
          }
        }

        else
        {
          int v62 = (os_log_s *)__nwlog_obj();
          os_log_type_t v63 = type;
          if (os_log_type_enabled(v62, type))
          {
            __int16 v64 = (char *)v130[3];
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v175 = v31;
            __int16 v176 = 2048;
            unsigned int v177 = v64;
            int v54 = v62;
            os_log_type_t v55 = v63;
            uint64_t v56 = "%{public}s Read capsule data, but still have remaining length %llu, backtrace limit exceeded";
            goto LABEL_82;
          }
        }
      }

uint64_t nw_protocol_http3_stream_get_output_frames( nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, uint64_t a5, nw_frame_array_s *a6)
{
  uint64_t v94 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_get_output_frames";
    int v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v88 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v72 = (os_log_s *)__nwlog_obj();
      os_log_type_t v73 = type;
      if (!os_log_type_enabled(v72, type)) {
        goto LABEL_83;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_get_output_frames";
      uint64_t v17 = "%{public}s called with null protocol";
      goto LABEL_127;
    }

    if (v88)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v72 = (os_log_s *)__nwlog_obj();
      os_log_type_t v73 = type;
      BOOL v79 = os_log_type_enabled(v72, type);
      if (backtrace_string)
      {
        if (v79)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_get_output_frames";
          *(_WORD *)&void buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          char v47 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
          goto LABEL_118;
        }

uint64_t nw_protocol_http3_stream_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v78 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    BYTE4(v69) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v12 = (os_log_s *)__nwlog_obj();
      os_log_type_t v13 = type[0];
      if (!os_log_type_enabled(v12, type[0])) {
        goto LABEL_74;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
      uint64_t v14 = "%{public}s called with null protocol";
      goto LABEL_73;
    }

    if (BYTE4(v69))
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v12 = (os_log_s *)__nwlog_obj();
      os_log_type_t v13 = type[0];
      BOOL v54 = os_log_type_enabled(v12, type[0]);
      if (backtrace_string)
      {
        if (!v54) {
          goto LABEL_63;
        }
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&_BYTE buf[14] = backtrace_string;
        BOOL v45 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_62:
        _os_log_impl(&dword_181A5C000, v12, v13, v45, buf, 0x16u);
LABEL_63:
        free(backtrace_string);
        goto LABEL_74;
      }

      if (!v54) {
        goto LABEL_74;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
      uint64_t v14 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      int v12 = (os_log_s *)__nwlog_obj();
      os_log_type_t v13 = type[0];
      if (!os_log_type_enabled(v12, type[0])) {
        goto LABEL_74;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_finalize_output_frames";
      uint64_t v14 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

uint64_t nw_protocol_http3_stream_supports_external_data(nw_protocol *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t handle = a1->handle;
    if (handle)
    {
      int v2 = handle[92];
      if (v2 == 3 || v2 == 5 && handle + 16 == (_DWORD *)a1) {
        return handle[184] & 1;
      }
      else {
        return 1LL;
      }
    }

    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v15 = "nw_protocol_http3_stream_supports_external_data";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v15 = "nw_protocol_http3_stream_supports_external_data";
        int v7 = "%{public}s called with null http3_stream";
        goto LABEL_35;
      }

      goto LABEL_36;
    }

    if (!v12)
    {
      int v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v15 = "nw_protocol_http3_stream_supports_external_data";
        int v7 = "%{public}s called with null http3_stream, backtrace limit exceeded";
        goto LABEL_35;
      }

      goto LABEL_36;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v11 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v15 = "nw_protocol_http3_stream_supports_external_data";
        int v7 = "%{public}s called with null http3_stream, no backtrace";
        goto LABEL_35;
      }

      goto LABEL_36;
    }

    if (v11)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v15 = "nw_protocol_http3_stream_supports_external_data";
      __int16 v16 = 2082;
      unsigned int v17 = backtrace_string;
      uint64_t v10 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
      goto LABEL_25;
    }

    goto LABEL_26;
  }

  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v15 = "nw_protocol_http3_stream_supports_external_data";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v12)
    {
      int v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v15 = "nw_protocol_http3_stream_supports_external_data";
        int v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_35;
      }

      goto LABEL_36;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v15 = "nw_protocol_http3_stream_supports_external_data";
        int v7 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_35;
      }

      goto LABEL_36;
    }

    if (v9)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v15 = "nw_protocol_http3_stream_supports_external_data";
      __int16 v16 = 2082;
      unsigned int v17 = backtrace_string;
      uint64_t v10 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_25:
      _os_log_impl(&dword_181A5C000, v5, v6, v10, buf, 0x16u);
    }

uint64_t nw_protocol_http3_stream_add_listen_handler(nw_protocol *a1, nw_listen_protocol *a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v21 = "nw_protocol_http3_stream_add_listen_handler";
    int v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_49;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v21 = "nw_protocol_http3_stream_add_listen_handler";
      os_log_type_t v8 = "%{public}s called with null protocol";
LABEL_48:
      _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0xCu);
      goto LABEL_49;
    }

    if (!v18)
    {
      os_log_type_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v21 = "nw_protocol_http3_stream_add_listen_handler";
        os_log_type_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v6 = (os_log_s *)__nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v14 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v21 = "nw_protocol_http3_stream_add_listen_handler";
        os_log_type_t v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    if (!v14) {
      goto LABEL_35;
    }
    *(_DWORD *)int buf = 136446466;
    uint64_t v21 = "nw_protocol_http3_stream_add_listen_handler";
    __int16 v22 = 2082;
    uint64_t v23 = backtrace_string;
    os_log_type_t v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_34:
    _os_log_impl(&dword_181A5C000, v6, v7, v15, buf, 0x16u);
    goto LABEL_35;
  }

  uint64_t handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v21 = "nw_protocol_http3_stream_add_listen_handler";
    int v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_49;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v21 = "nw_protocol_http3_stream_add_listen_handler";
      os_log_type_t v8 = "%{public}s called with null http3_stream";
      goto LABEL_48;
    }

    if (!v18)
    {
      os_log_type_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v21 = "nw_protocol_http3_stream_add_listen_handler";
        os_log_type_t v8 = "%{public}s called with null http3_stream, backtrace limit exceeded";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v6 = (os_log_s *)__nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v16 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v21 = "nw_protocol_http3_stream_add_listen_handler";
        os_log_type_t v8 = "%{public}s called with null http3_stream, no backtrace";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    if (!v16) {
      goto LABEL_35;
    }
    *(_DWORD *)int buf = 136446466;
    uint64_t v21 = "nw_protocol_http3_stream_add_listen_handler";
    __int16 v22 = 2082;
    uint64_t v23 = backtrace_string;
    os_log_type_t v15 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
    goto LABEL_34;
  }

  uint64_t v3 = handle[42];
  if (v3)
  {
    if ((handle[92] & 0x800) == 0 && gLogDatapath)
    {
      BOOL v9 = (os_log_s *)__nwlog_obj();
      BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
      uint64_t v3 = handle[42];
      if (v10)
      {
        int v11 = *(_DWORD *)(v3 + 1280);
        uint64_t v12 = handle[30];
        *(_DWORD *)int buf = 136447234;
        uint64_t v21 = "nw_protocol_http3_stream_add_listen_handler";
        __int16 v22 = 2082;
        uint64_t v23 = (char *)handle + 636;
        __int16 v24 = 2080;
        uint64_t v25 = " ";
        __int16 v26 = 1024;
        int v27 = v11;
        __int16 v28 = 2048;
        uint64_t v29 = v12;
        _os_log_impl(&dword_181A5C000, v9, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> called", buf, 0x30u);
        uint64_t v3 = handle[42];
      }
    }

    return (*(uint64_t (**)(void))(*(void *)(v3 + 24) + 232LL))();
  }

  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v21 = "nw_protocol_http3_stream_add_listen_handler";
  int v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v18)
    {
      os_log_type_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v21 = "nw_protocol_http3_stream_add_listen_handler";
        os_log_type_t v8 = "%{public}s called with null http3_stream->http3_connection, backtrace limit exceeded";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v6 = (os_log_s *)__nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v17 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v21 = "nw_protocol_http3_stream_add_listen_handler";
        os_log_type_t v8 = "%{public}s called with null http3_stream->http3_connection, no backtrace";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    if (v17)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v21 = "nw_protocol_http3_stream_add_listen_handler";
      __int16 v22 = 2082;
      uint64_t v23 = backtrace_string;
      os_log_type_t v15 = "%{public}s called with null http3_stream->http3_connection, dumping backtrace:%{public}s";
      goto LABEL_34;
    }

uint64_t nw_protocol_http3_stream_remove_listen_handler(nw_protocol *a1, nw_listen_protocol *a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v21 = "nw_protocol_http3_stream_remove_listen_handler";
    int v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_49;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v21 = "nw_protocol_http3_stream_remove_listen_handler";
      os_log_type_t v8 = "%{public}s called with null protocol";
LABEL_48:
      _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0xCu);
      goto LABEL_49;
    }

    if (!v18)
    {
      os_log_type_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v21 = "nw_protocol_http3_stream_remove_listen_handler";
        os_log_type_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v6 = (os_log_s *)__nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v14 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v21 = "nw_protocol_http3_stream_remove_listen_handler";
        os_log_type_t v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    if (!v14) {
      goto LABEL_35;
    }
    *(_DWORD *)int buf = 136446466;
    uint64_t v21 = "nw_protocol_http3_stream_remove_listen_handler";
    __int16 v22 = 2082;
    uint64_t v23 = backtrace_string;
    os_log_type_t v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_34:
    _os_log_impl(&dword_181A5C000, v6, v7, v15, buf, 0x16u);
    goto LABEL_35;
  }

  uint64_t handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v21 = "nw_protocol_http3_stream_remove_listen_handler";
    int v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_49;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v21 = "nw_protocol_http3_stream_remove_listen_handler";
      os_log_type_t v8 = "%{public}s called with null http3_stream";
      goto LABEL_48;
    }

    if (!v18)
    {
      os_log_type_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v21 = "nw_protocol_http3_stream_remove_listen_handler";
        os_log_type_t v8 = "%{public}s called with null http3_stream, backtrace limit exceeded";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v6 = (os_log_s *)__nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v16 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v21 = "nw_protocol_http3_stream_remove_listen_handler";
        os_log_type_t v8 = "%{public}s called with null http3_stream, no backtrace";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    if (!v16) {
      goto LABEL_35;
    }
    *(_DWORD *)int buf = 136446466;
    uint64_t v21 = "nw_protocol_http3_stream_remove_listen_handler";
    __int16 v22 = 2082;
    uint64_t v23 = backtrace_string;
    os_log_type_t v15 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
    goto LABEL_34;
  }

  uint64_t v3 = handle[42];
  if (v3)
  {
    if ((handle[92] & 0x800) == 0 && gLogDatapath)
    {
      BOOL v9 = (os_log_s *)__nwlog_obj();
      BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
      uint64_t v3 = handle[42];
      if (v10)
      {
        int v11 = *(_DWORD *)(v3 + 1280);
        uint64_t v12 = handle[30];
        *(_DWORD *)int buf = 136447234;
        uint64_t v21 = "nw_protocol_http3_stream_remove_listen_handler";
        __int16 v22 = 2082;
        uint64_t v23 = (char *)handle + 636;
        __int16 v24 = 2080;
        uint64_t v25 = " ";
        __int16 v26 = 1024;
        int v27 = v11;
        __int16 v28 = 2048;
        uint64_t v29 = v12;
        _os_log_impl(&dword_181A5C000, v9, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> called", buf, 0x30u);
        uint64_t v3 = handle[42];
      }
    }

    return (*(uint64_t (**)(void))(*(void *)(v3 + 24) + 240LL))();
  }

  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  uint64_t v21 = "nw_protocol_http3_stream_remove_listen_handler";
  int v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v18)
    {
      os_log_type_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v21 = "nw_protocol_http3_stream_remove_listen_handler";
        os_log_type_t v8 = "%{public}s called with null http3_stream->http3_connection, backtrace limit exceeded";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v6 = (os_log_s *)__nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v17 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v21 = "nw_protocol_http3_stream_remove_listen_handler";
        os_log_type_t v8 = "%{public}s called with null http3_stream->http3_connection, no backtrace";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    if (v17)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v21 = "nw_protocol_http3_stream_remove_listen_handler";
      __int16 v22 = 2082;
      uint64_t v23 = backtrace_string;
      os_log_type_t v15 = "%{public}s called with null http3_stream->http3_connection, dumping backtrace:%{public}s";
      goto LABEL_34;
    }

uint64_t nw_protocol_http3_stream_get_remote_endpoint(nw_protocol *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v17 = "nw_protocol_http3_stream_get_remote_endpoint";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v17 = "nw_protocol_http3_stream_get_remote_endpoint";
      BOOL v9 = "%{public}s called with null protocol";
      goto LABEL_34;
    }

    if (!v14)
    {
      os_log_type_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v17 = "nw_protocol_http3_stream_get_remote_endpoint";
      BOOL v9 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_34;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (!v11) {
        goto LABEL_35;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v17 = "nw_protocol_http3_stream_get_remote_endpoint";
      BOOL v9 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_34;
    }

    if (v11)
    {
      *(_DWORD *)int buf = 136446466;
      BOOL v17 = "nw_protocol_http3_stream_get_remote_endpoint";
      __int16 v18 = 2082;
      int v19 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_35:
    if (!v6) {
      return 0LL;
    }
LABEL_36:
    free(v6);
    return 0LL;
  }

  uint64_t handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v17 = "nw_protocol_http3_stream_get_remote_endpoint";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v17 = "nw_protocol_http3_stream_get_remote_endpoint";
      BOOL v9 = "%{public}s called with null http3_stream";
      goto LABEL_34;
    }

    if (!v14)
    {
      os_log_type_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v17 = "nw_protocol_http3_stream_get_remote_endpoint";
      BOOL v9 = "%{public}s called with null http3_stream, backtrace limit exceeded";
      goto LABEL_34;
    }

    uint64_t v12 = (char *)__nw_create_backtrace_string();
    os_log_type_t v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled(v7, type);
    if (v12)
    {
      if (v13)
      {
        *(_DWORD *)int buf = 136446466;
        BOOL v17 = "nw_protocol_http3_stream_get_remote_endpoint";
        __int16 v18 = 2082;
        int v19 = v12;
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null http3_stream, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v12);
      if (!v6) {
        return 0LL;
      }
      goto LABEL_36;
    }

    if (v13)
    {
      *(_DWORD *)int buf = 136446210;
      BOOL v17 = "nw_protocol_http3_stream_get_remote_endpoint";
      BOOL v9 = "%{public}s called with null http3_stream, no backtrace";
LABEL_34:
      _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      goto LABEL_35;
    }

    goto LABEL_35;
  }

  uint64_t v2 = handle[6];
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 24);
    if (v3)
    {
      uint64_t v4 = *(uint64_t (**)(nw_protocol *))(v3 + 136);
      if (v4) {
        return v4(a1->default_input_handler);
      }
    }
  }

  return 0LL;
}

uint64_t nw_protocol_http3_stream_copy_info(uint64_t a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v22 = "nw_protocol_http3_stream_copy_info";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_53;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v22 = "nw_protocol_http3_stream_copy_info";
      BOOL v13 = "%{public}s called with null protocol";
LABEL_52:
      _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
      goto LABEL_53;
    }

    if (!v19)
    {
      BOOL v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v22 = "nw_protocol_http3_stream_copy_info";
        BOOL v13 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_52;
      }

      goto LABEL_53;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v15 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v22 = "nw_protocol_http3_stream_copy_info";
        BOOL v13 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_52;
      }

      goto LABEL_53;
    }

    if (!v15) {
      goto LABEL_39;
    }
    *(_DWORD *)int buf = 136446466;
    __int16 v22 = "nw_protocol_http3_stream_copy_info";
    __int16 v23 = 2082;
    __int16 v24 = backtrace_string;
    BOOL v16 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_38:
    _os_log_impl(&dword_181A5C000, v11, v12, v16, buf, 0x16u);
    goto LABEL_39;
  }

  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v22 = "nw_protocol_http3_stream_copy_info";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_53;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v22 = "nw_protocol_http3_stream_copy_info";
      BOOL v13 = "%{public}s called with null http3_stream";
      goto LABEL_52;
    }

    if (!v19)
    {
      BOOL v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v22 = "nw_protocol_http3_stream_copy_info";
        BOOL v13 = "%{public}s called with null http3_stream, backtrace limit exceeded";
        goto LABEL_52;
      }

      goto LABEL_53;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v17 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v22 = "nw_protocol_http3_stream_copy_info";
        BOOL v13 = "%{public}s called with null http3_stream, no backtrace";
        goto LABEL_52;
      }

      goto LABEL_53;
    }

    if (!v17) {
      goto LABEL_39;
    }
    *(_DWORD *)int buf = 136446466;
    __int16 v22 = "nw_protocol_http3_stream_copy_info";
    __int16 v23 = 2082;
    __int16 v24 = backtrace_string;
    BOOL v16 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
    goto LABEL_38;
  }

  uint64_t v3 = *(void *)(v2 + 336);
  if (v3)
  {
    if (a2 == 253) {
      return *(void *)(v3 + 1088);
    }
    uint64_t v6 = nw_protocol_common_copy_info(a1, a2);
    BOOL v5 = v6;
    if (a2 == 255)
    {
      if (!v6) {
        BOOL v5 = nw_array_create();
      }
      os_log_type_t v7 = *(void **)(*(void *)(v2 + 336) + 1248LL);
      if (v7) {
        nw_array_append(v5, v7);
      }
      os_log_type_t v8 = *(void **)(v2 + 392);
      if (v8) {
        nw_array_append(v5, v8);
      }
    }

    return v5;
  }

  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  __int16 v22 = "nw_protocol_http3_stream_copy_info";
  BOOL v10 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v19)
    {
      BOOL v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v22 = "nw_protocol_http3_stream_copy_info";
        BOOL v13 = "%{public}s called with null http3_stream->http3_connection, backtrace limit exceeded";
        goto LABEL_52;
      }

      goto LABEL_53;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v18 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v22 = "nw_protocol_http3_stream_copy_info";
        BOOL v13 = "%{public}s called with null http3_stream->http3_connection, no backtrace";
        goto LABEL_52;
      }

      goto LABEL_53;
    }

    if (v18)
    {
      *(_DWORD *)int buf = 136446466;
      __int16 v22 = "nw_protocol_http3_stream_copy_info";
      __int16 v23 = 2082;
      __int16 v24 = backtrace_string;
      BOOL v16 = "%{public}s called with null http3_stream->http3_connection, dumping backtrace:%{public}s";
      goto LABEL_38;
    }

void nw_protocol_http3_stream_notify(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v73 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    int v64 = "nw_protocol_http3_stream_notify";
    BOOL v17 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v61 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v61)
      {
        BOOL v18 = (os_log_s *)__nwlog_obj();
        os_log_type_t v19 = type;
        if (!os_log_type_enabled(v18, type)) {
          goto LABEL_125;
        }
        *(_DWORD *)int buf = 136446210;
        int v64 = "nw_protocol_http3_stream_notify";
        uint64_t v20 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_109;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v33 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (!v33) {
          goto LABEL_125;
        }
        *(_DWORD *)int buf = 136446210;
        int v64 = "nw_protocol_http3_stream_notify";
        uint64_t v20 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_109;
      }

      if (v33)
      {
        *(_DWORD *)int buf = 136446466;
        int v64 = "nw_protocol_http3_stream_notify";
        __int16 v65 = 2082;
        id v66 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v18,  v19,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_125;
    }

    BOOL v18 = (os_log_s *)__nwlog_obj();
    os_log_type_t v19 = type;
    if (!os_log_type_enabled(v18, type)) {
      goto LABEL_125;
    }
    *(_DWORD *)int buf = 136446210;
    int v64 = "nw_protocol_http3_stream_notify";
    uint64_t v20 = "%{public}s called with null protocol";
LABEL_109:
    int v53 = v18;
    os_log_type_t v54 = v19;
    uint32_t v55 = 12;
LABEL_124:
    _os_log_impl(&dword_181A5C000, v53, v54, v20, buf, v55);
    goto LABEL_125;
  }

  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    if (a2)
    {
      switch((int)a3)
      {
        case 7:
        case 15:
        case 21:
          return;
        case 13:
          goto LABEL_8;
        case 16:
          if (a4 && a5 == 1)
          {
            int v7 = *(_WORD *)(v6 + 736) & 0xDFFF | (*(unsigned __int8 *)(v6 + 738) << 16) | (*a4 << 13);
            *(_WORD *)(v6 + 736) = *(_WORD *)(v6 + 736) & 0xDFFF | (*a4 << 13);
            *(_BYTE *)(v6 + 73_Block_object_dispose(va, 8) = BYTE2(v7);
          }

uint64_t nw_protocol_http3_stream_get_parameters(nw_protocol *a1)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v35 = "nw_protocol_http3_stream_get_parameters";
    os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v20 = (os_log_s *)__nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v35 = "nw_protocol_http3_stream_get_parameters";
      __int16 v22 = "%{public}s called with null protocol";
LABEL_73:
      _os_log_impl(&dword_181A5C000, v20, v21, v22, buf, 0xCu);
      goto LABEL_74;
    }

    if (!v32)
    {
      uint64_t v20 = (os_log_s *)__nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v35 = "nw_protocol_http3_stream_get_parameters";
      __int16 v22 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_73;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v20 = (os_log_s *)__nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v24 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v35 = "nw_protocol_http3_stream_get_parameters";
        __int16 v22 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_73;
      }

      goto LABEL_74;
    }

    if (v24)
    {
      *(_DWORD *)int buf = 136446466;
      BOOL v35 = "nw_protocol_http3_stream_get_parameters";
      __int16 v36 = 2082;
      BOOL v37 = backtrace_string;
      uint64_t v25 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_57:
      _os_log_impl(&dword_181A5C000, v20, v21, v25, buf, 0x16u);
    }

void sub_1823D2F68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_http3_stream_get_message_properties(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v21 = "nw_protocol_http3_stream_get_message_properties";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_42;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v21 = "nw_protocol_http3_stream_get_message_properties";
      uint64_t v11 = "%{public}s called with null protocol";
    }

    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v21 = "nw_protocol_http3_stream_get_message_properties";
          __int16 v22 = 2082;
          __int16 v23 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v8) {
          return;
        }
LABEL_43:
        free(v8);
        return;
      }

      if (!v15) {
        goto LABEL_42;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v21 = "nw_protocol_http3_stream_get_message_properties";
      uint64_t v11 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_42;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v21 = "nw_protocol_http3_stream_get_message_properties";
      uint64_t v11 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

uint64_t nw_protocol_http3_stream_register_notification(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if (v3)
    {
      if (a3 != 5) {
        return nw_protocol_common_register_notification(a1, a2, a3);
      }
      if ((*(_WORD *)(v3 + 736) & 0x800) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unsigned int v4 = (os_log_s *)gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          int v5 = *(_DWORD *)(*(void *)(v3 + 336) + 1280LL);
          uint64_t v6 = *(void *)(v3 + 240);
          *(_DWORD *)int buf = 136447234;
          os_log_type_t v19 = "nw_protocol_http3_stream_register_notification";
          __int16 v20 = 2082;
          os_log_type_t v21 = (char *)(v3 + 636);
          __int16 v22 = 2080;
          __int16 v23 = " ";
          __int16 v24 = 1024;
          int v25 = v5;
          __int16 v26 = 2048;
          uint64_t v27 = v6;
          _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:s%llu> registered metadata_changed notification",  buf,  0x30u);
        }
      }

      *(_BYTE *)(v3 + 738) |= 2u;
      return 1LL;
    }

    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v19 = "nw_protocol_http3_stream_register_notification";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v19 = "nw_protocol_http3_stream_register_notification";
        uint64_t v11 = "%{public}s called with null http3_stream";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    if (!v16)
    {
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v19 = "nw_protocol_http3_stream_register_notification";
        uint64_t v11 = "%{public}s called with null http3_stream, backtrace limit exceeded";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v15 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v19 = "nw_protocol_http3_stream_register_notification";
        uint64_t v11 = "%{public}s called with null http3_stream, no backtrace";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    if (v15)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v19 = "nw_protocol_http3_stream_register_notification";
      __int16 v20 = 2082;
      os_log_type_t v21 = backtrace_string;
      uint64_t v14 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
      goto LABEL_26;
    }

    goto LABEL_27;
  }

  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v19 = "nw_protocol_http3_stream_register_notification";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v16)
    {
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v19 = "nw_protocol_http3_stream_register_notification";
        uint64_t v11 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v13 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v19 = "nw_protocol_http3_stream_register_notification";
        uint64_t v11 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    if (v13)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v19 = "nw_protocol_http3_stream_register_notification";
      __int16 v20 = 2082;
      os_log_type_t v21 = backtrace_string;
      uint64_t v14 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_26:
      _os_log_impl(&dword_181A5C000, v9, v10, v14, buf, 0x16u);
    }

uint64_t nw_protocol_http3_stream_unregister_notification(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if (v3)
    {
      if (a3 != 5) {
        return nw_protocol_common_unregister_notification(a1, a2, a3);
      }
      unsigned int v4 = (_WORD *)(v3 + 736);
      if ((*(_WORD *)(v3 + 736) & 0x800) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v5 = (os_log_s *)gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          int v6 = *(_DWORD *)(*(void *)(v3 + 336) + 1280LL);
          uint64_t v7 = *(void *)(v3 + 240);
          *(_DWORD *)int buf = 136447234;
          __int16 v22 = "nw_protocol_http3_stream_unregister_notification";
          __int16 v23 = 2082;
          __int16 v24 = (char *)(v3 + 636);
          __int16 v25 = 2080;
          __int16 v26 = " ";
          __int16 v27 = 1024;
          int v28 = v6;
          __int16 v29 = 2048;
          uint64_t v30 = v7;
          _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:s%llu> unregistered metadata_changed notification",  buf,  0x30u);
        }
      }

      int v8 = (unsigned __int16)*v4;
      unsigned int v9 = (v8 | (*(unsigned __int8 *)(v3 + 738) << 16)) & 0xFFFDFFFF;
      *unsigned int v4 = v8;
      *(_BYTE *)(v3 + 73_Block_object_dispose(va, 8) = BYTE2(v9);
      return 1LL;
    }

    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v22 = "nw_protocol_http3_stream_unregister_notification";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v12 = (os_log_s *)__nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v22 = "nw_protocol_http3_stream_unregister_notification";
        uint64_t v14 = "%{public}s called with null http3_stream";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    if (!v19)
    {
      unsigned int v12 = (os_log_s *)__nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v22 = "nw_protocol_http3_stream_unregister_notification";
        uint64_t v14 = "%{public}s called with null http3_stream, backtrace limit exceeded";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    unsigned int v12 = (os_log_s *)__nwlog_obj();
    os_log_type_t v13 = type;
    BOOL v18 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v22 = "nw_protocol_http3_stream_unregister_notification";
        uint64_t v14 = "%{public}s called with null http3_stream, no backtrace";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    if (v18)
    {
      *(_DWORD *)int buf = 136446466;
      __int16 v22 = "nw_protocol_http3_stream_unregister_notification";
      __int16 v23 = 2082;
      __int16 v24 = backtrace_string;
      BOOL v17 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
      goto LABEL_26;
    }

    goto LABEL_27;
  }

  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  __int16 v22 = "nw_protocol_http3_stream_unregister_notification";
  uint64_t v11 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v19)
    {
      unsigned int v12 = (os_log_s *)__nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v22 = "nw_protocol_http3_stream_unregister_notification";
        uint64_t v14 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    unsigned int v12 = (os_log_s *)__nwlog_obj();
    os_log_type_t v13 = type;
    BOOL v16 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v22 = "nw_protocol_http3_stream_unregister_notification";
        uint64_t v14 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    if (v16)
    {
      *(_DWORD *)int buf = 136446466;
      __int16 v22 = "nw_protocol_http3_stream_unregister_notification";
      __int16 v23 = 2082;
      __int16 v24 = backtrace_string;
      BOOL v17 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_26:
      _os_log_impl(&dword_181A5C000, v12, v13, v17, buf, 0x16u);
    }

void nw_protocol_http3_add_alpn_to_quic_options(nw_protocol_options *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = nw_quic_stream_copy_shared_connection_options(a1);
  id v2 = nw_quic_connection_copy_sec_protocol_options(v1);
  uint64_t v3 = (void *)sec_protocol_options_copy_transport_specific_application_protocol();
  unsigned int v4 = v3;
  if (v3 && xpc_array_get_count(v3))
  {
LABEL_20:
    xpc_release(v4);
    goto LABEL_21;
  }

  sec_protocol_options_add_transport_specific_application_protocol();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)int buf = 136446210;
  uint64_t v14 = "nw_protocol_http3_add_alpn_to_quic_options";
  int v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v6 = (os_log_s *)gLogObj;
      os_log_type_t v7 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_17;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v14 = "nw_protocol_http3_add_alpn_to_quic_options";
      int v8 = "%{public}s Missing h3 alpn from quic options. Protocol http3 will stop adding it for you in the future si"
           "nce it prevents joining from working properly.";
LABEL_16:
      _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0xCu);
      goto LABEL_17;
    }

    if (!v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v6 = (os_log_s *)gLogObj;
      os_log_type_t v7 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_17;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v14 = "nw_protocol_http3_add_alpn_to_quic_options";
      int v8 = "%{public}s Missing h3 alpn from quic options. Protocol http3 will stop adding it for you in the future si"
           "nce it prevents joining from working properly., backtrace limit exceeded";
      goto LABEL_16;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v6 = (os_log_s *)gLogObj;
    os_log_type_t v7 = type;
    BOOL v10 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v10) {
        goto LABEL_17;
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v14 = "nw_protocol_http3_add_alpn_to_quic_options";
      int v8 = "%{public}s Missing h3 alpn from quic options. Protocol http3 will stop adding it for you in the future si"
           "nce it prevents joining from working properly., no backtrace";
      goto LABEL_16;
    }

    if (v10)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v14 = "nw_protocol_http3_add_alpn_to_quic_options";
      __int16 v15 = 2082;
      BOOL v16 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s Missing h3 alpn from quic options. Protocol http3 will stop adding it for you in the future since it prevents joining from working properly., dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

BOOL nw_http3_fix_quic_parameters(uint64_t a1, void *a2, char a3, int a4)
{
  uint64_t v51 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v44 = "nw_http3_fix_quic_parameters";
    uint64_t v31 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v41)
      {
        char v32 = (os_log_s *)__nwlog_obj();
        os_log_type_t v33 = type;
        if (!os_log_type_enabled(v32, type)) {
          goto LABEL_82;
        }
        *(_DWORD *)int buf = 136446210;
        __int16 v44 = "nw_http3_fix_quic_parameters";
        uint64_t v34 = "%{public}s called with null http3, backtrace limit exceeded";
        goto LABEL_81;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      char v32 = (os_log_s *)__nwlog_obj();
      os_log_type_t v33 = type;
      BOOL v36 = os_log_type_enabled(v32, type);
      if (!backtrace_string)
      {
        if (!v36) {
          goto LABEL_82;
        }
        *(_DWORD *)int buf = 136446210;
        __int16 v44 = "nw_http3_fix_quic_parameters";
        uint64_t v34 = "%{public}s called with null http3, no backtrace";
        goto LABEL_81;
      }

      if (v36)
      {
        *(_DWORD *)int buf = 136446466;
        __int16 v44 = "nw_http3_fix_quic_parameters";
        __int16 v45 = 2082;
        uint64_t v46 = backtrace_string;
        BOOL v37 = "%{public}s called with null http3, dumping backtrace:%{public}s";
LABEL_71:
        _os_log_impl(&dword_181A5C000, v32, v33, v37, buf, 0x16u);
      }

void sub_1823D4914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL28nw_http3_fix_quic_parametersP17nw_protocol_http3P13nw_parametersbb_block_invoke( uint64_t a1, dispatch_data_s *a2, dispatch_data_s *a3)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if (v5)
  {
    uint64_t v6 = v5;
    if (((*(unsigned __int16 *)(v5 + 1373) | (*(unsigned __int8 *)(v5 + 1375) << 16)) & 0x400000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        int v8 = *(_DWORD *)(v6 + 1280);
        *(_DWORD *)int buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http3_fix_quic_parameters_block_invoke";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&_BYTE buf[14] = v6 + 1289;
        *(_WORD *)&_BYTE buf[22] = 2080;
        os_log_type_t v25 = (void (*)(uint64_t, uint64_t))" ";
        LOWORD(v26) = 1024;
        *(_DWORD *)((char *)&v26 + 2) = v8;
        _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> received new TLS session ticket",  buf,  0x26u);
      }
    }

    uint64_t v9 = *(dispatch_object_s **)(v6 + 1160);
    if (v9)
    {
      dispatch_release(v9);
      *(void *)(v6 + 1160) = 0LL;
    }

    BOOL v10 = *(dispatch_object_s **)(v6 + 1168);
    if (v10)
    {
      dispatch_release(v10);
      *(void *)(v6 + 116_Block_object_dispose(va, 8) = 0LL;
    }

    dispatch_retain(a2);
    dispatch_retain(a3);
    *(void *)(v6 + 1160) = a2;
    *(void *)(v6 + 116_Block_object_dispose(va, 8) = a3;
    if (*(void *)(v6 + 864) && *(void *)(v6 + 872))
    {
      char v11 = &v23;
      unsigned int v12 = *(dispatch_data_s **)(v6 + 1176);
      if (!v12) {
        unsigned int v12 = *(dispatch_data_s **)(v6 + 1152);
      }
      dispatch_data_t v13 = 0LL;
      uint64_t v20 = 0LL;
      os_log_type_t v21 = &v20;
      uint64_t v22 = 0x2000000000LL;
      if (a3 && a2 && v12)
      {
        *(void *)int buf = 0LL;
        alloCC_SHA256_CTX c = (dispatch_data_s *)dispatch_data_create_alloc();
        __int16 v15 = *(_DWORD **)buf;
        **(_DWORD **)int buf = 9685181;
        v15[1] = dispatch_data_get_size(v12);
        v15[2] = dispatch_data_get_size(a2);
        v15[3] = dispatch_data_get_size(a3);
        concat = dispatch_data_create_concat(alloc, v12);
        if (alloc) {
          dispatch_release(alloc);
        }
        uint64_t v17 = dispatch_data_create_concat(concat, a2);
        if (concat) {
          dispatch_release(concat);
        }
        dispatch_data_t v13 = dispatch_data_create_concat(v17, a3);
        if (v17) {
          dispatch_release(v17);
        }
        char v11 = (dispatch_data_t *)(v21 + 3);
      }

      dispatch_data_t v23 = v13;
      if (*v11)
      {
        *(void *)int buf = 0LL;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x3002000000LL;
        os_log_type_t v25 = __Block_byref_object_copy__110_61606;
        __int16 v26 = __Block_byref_object_dispose__111_61607;
        __int16 v27 = _Block_copy(*(const void **)(v6 + 864));
        BOOL v18 = *(dispatch_queue_s **)(v6 + 872);
        v19[0] = MEMORY[0x1895F87A8];
        v19[1] = 0x40000000LL;
        v19[2] = ___ZL28nw_http3_fix_quic_parametersP17nw_protocol_http3P13nw_parametersbb_block_invoke_112;
        v19[3] = &unk_189BC44B0;
        void v19[4] = buf;
        void v19[5] = &v20;
        dispatch_async(v18, v19);
        _Block_object_dispose(buf, 8);
      }

      _Block_object_dispose(&v20, 8);
    }

    else
    {
      nw_http3_try_persist_0rtt_state(v6);
    }
  }

void __Block_byref_object_copy__110_61606(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__111_61607(uint64_t a1)
{
}

void ___ZL28nw_http3_fix_quic_parametersP17nw_protocol_http3P13nw_parametersbb_block_invoke_112(uint64_t a1)
{
  id v2 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  if (v2)
  {
    _Block_release(v2);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL) = 0LL;
  }

  uint64_t v3 = *(dispatch_object_s **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0LL;
  }

uint64_t ___ZL47nw_protocol_http3_stream_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke( uint64_t a1, void *a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = nw_protocol_metadata_is_http(a2);
  return 0LL;
}

BOOL ___ZL64nw_http3_framer_finalize_output_frames_for_multiple_http3_framesP15nw_http3_frameryP16nw_frame_array_sPjS3__block_invoke( void *a1, _DWORD *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  unsigned int v4 = nw_frame_unclaimed_length(a2);
  if (!v4 && !a1[4]) {
    return 1LL;
  }
  v15[0] = 0;
  nw_frame_get_buffer((uint64_t)a2, v15);
  unint64_t v5 = a1[4];
  if (v5 < 0x40)
  {
    int v6 = 1;
LABEL_13:
    if (v15[0] >> 30) {
      int v9 = 8;
    }
    else {
      int v9 = 4;
    }
    if (v15[0] >= 0x4000u) {
      int v10 = v9;
    }
    else {
      int v10 = 2;
    }
    if (v15[0] >= 0x40u) {
      int v11 = v10;
    }
    else {
      int v11 = 1;
    }
    BOOL v12 = nw_http3_framer_write_http3_frame_header(a1[5], a1[4], v4, v11 + v6, (uint64_t)a2);
    dispatch_data_t v13 = (_DWORD *)a1[6];
    if (v13) {
      *v13 += v4;
    }
    uint64_t v14 = (_DWORD *)a1[7];
    if (v14) {
      *v14 += v12 + v4;
    }
    return 1LL;
  }

  if (v5 < 0x4000)
  {
    int v6 = 2;
    goto LABEL_13;
  }

  if (!(v5 >> 30))
  {
    int v6 = 4;
    goto LABEL_13;
  }

  if (!(v5 >> 62))
  {
    int v6 = 8;
    goto LABEL_13;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  v15[1] = 136446466;
  uint64_t v16 = "_http_vle_length";
  __int16 v17 = 2048;
  unint64_t v18 = v5;
  os_log_type_t v7 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v7);
  if (!result)
  {
    free(v7);
    int v6 = 0;
    goto LABEL_13;
  }

  __break(1u);
  return result;
}

uint64_t ___ZL47nw_protocol_http3_stream_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_159( uint64_t *a1, uint64_t a2)
{
  unsigned int v4 = nw_frame_copy_metadata_for_protocol(a2, a1[4]);
  if (v4)
  {
    unint64_t v5 = v4;
    if (nw_http_metadata_is_capsule(v4))
    {
      uint64_t v6 = *(void *)(a1[5] + 536);
      if (!v6)
      {
        *(void *)(a1[5] + 536) = nw_array_create();
        uint64_t v6 = *(void *)(a1[5] + 536);
      }

      nw_array_append(v6, v5);
    }

    os_release(v5);
  }

  if (*(void (**)(nw_frame *, BOOL, void *))(a2 + 80) == nw_protocol_http3_capsule_frame_finalizer)
  {
    uint64_t v7 = *(void *)(a2 + 32);
    int v8 = *(void **)(a2 + 40);
    if (v7)
    {
      *(void *)(v7 + 40) = v8;
      int v8 = *(void **)(a2 + 40);
    }

    else
    {
      *(void *)(a1[6] + _Block_object_dispose(va, 8) = v8;
    }

    *int v8 = v7;
    *(void *)(a2 + 32) = 0LL;
    *(void *)(a2 + 40) = 0LL;
    nw_frame_finalize(a2);
  }

  return 1LL;
}

void nw_http3_stream_send_pending_capsules(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 536);
  if (v1 && *(void *)(v1 + 16) != *(void *)(v1 + 24))
  {
    BOOL v3 = nw_array_create();
    unsigned int v4 = *(unsigned __int8 **)(a1 + 536);
    uint64_t v5 = MEMORY[0x1895F87A8];
    v7[0] = MEMORY[0x1895F87A8];
    v7[1] = 0x40000000LL;
    v7[2] = ___ZL37nw_http3_stream_send_pending_capsulesP24nw_protocol_http3_stream_block_invoke;
    v7[3] = &__block_descriptor_tmp_141_61740;
    void v7[4] = a1;
    void v7[5] = v3;
    nw_array_apply(v4, (uint64_t)v7);
    v6[0] = v5;
    v6[1] = 0x40000000LL;
    v6[2] = ___ZL37nw_http3_stream_send_pending_capsulesP24nw_protocol_http3_stream_block_invoke_142;
    v6[3] = &__block_descriptor_tmp_143_61741;
    void v6[4] = a1;
    nw_array_apply((unsigned __int8 *)v3, (uint64_t)v6);
    if (v3) {
      os_release((void *)v3);
    }
  }

BOOL ___ZL37nw_http3_stream_send_pending_capsulesP24nw_protocol_http3_stream_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v95 = *MEMORY[0x1895F89C0];
  capsule_os_log_type_t type = nw_http_metadata_get_capsule_type(a3);
  uint64_t v79 = 0LL;
  BOOL v80 = &v79;
  uint64_t v81 = 0x2000000000LL;
  nw_endpoint_t object = a3;
  id v82 = nw_http_metadata_copy_capsule_data(a3);
  uint64_t v73 = 0LL;
  BOOL v74 = &v73;
  uint64_t v75 = 0x3802000000LL;
  __int128 v76 = __Block_byref_object_copy__60284;
  int v77 = __Block_byref_object_dispose__60285;
  v78[0] = 0LL;
  v78[1] = v78;
  size_t size = dispatch_data_get_size((dispatch_data_t)v80[3]);
  uint64_t v69 = 0LL;
  int v70 = &v69;
  uint64_t v71 = 0x2000000000LL;
  int v72 = size;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(v7 + 160);
  if (!v8 || (uint64_t v9 = *(void *)(v8 + 24)) == 0 || !*(void *)(v9 + 88))
  {
    uint64_t v58 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v86 = "nw_http3_framer_get_output_frames_for_capsule";
      __int16 v87 = 2048;
      char v88 = (const char *)v8;
      _os_log_impl( &dword_181A5C000,  v58,  OS_LOG_TYPE_ERROR,  "%{public}s Output handler (%p)'s get_output_frames callback is not properly set",  buf,  0x16u);
    }

    goto LABEL_82;
  }

  unint64_t v62 = capsule_type;
  if (capsule_type >= 0x40)
  {
    if (capsule_type >= 0x4000)
    {
      if (capsule_type >> 30)
      {
        if (capsule_type >> 62)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
          *(_DWORD *)int buf = 136446466;
          uint64_t v86 = "_http_vle_length";
          __int16 v87 = 2048;
          char v88 = (const char *)capsule_type;
          int v11 = (void *)_os_log_send_and_compose_impl();
          BOOL result = __nwlog_abort((uint64_t)v11);
          if (result) {
            goto LABEL_112;
          }
          free(v11);
          int v10 = 0;
        }

        else
        {
          int v10 = 8;
        }
      }

      else
      {
        int v10 = 4;
      }
    }

    else
    {
      int v10 = 2;
    }
  }

  else
  {
    int v10 = 1;
  }

  else {
    int v13 = 4;
  }
  else {
    int v14 = 2;
  }
  else {
    int v15 = 1;
  }
  int v16 = v15 + v10;
  unsigned int v17 = v15 + v10 + size;
  if (v17 >> 30) {
    int v18 = 9;
  }
  else {
    int v18 = 5;
  }
  if (v17 >= 0x4000) {
    unsigned int v19 = v18;
  }
  else {
    unsigned int v19 = 3;
  }
  if (v17 >= 0x40) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 2LL;
  }
  uint64_t v21 = v17 + v20;
  if (__CFADD__(v17, (_DWORD)v20))
  {
    uint64_t v60 = a1;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)int buf = 136446978;
    uint64_t v86 = "nw_http3_framer_get_output_frames_for_capsule";
    __int16 v87 = 2082;
    char v88 = "frame_length";
    __int16 v89 = 2048;
    size_t v90 = v20;
    __int16 v91 = 2048;
    uint64_t v92 = v21;
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v84 = OS_LOG_TYPE_ERROR;
    char v83 = 0;
    if (__nwlog_fault(v22, &v84, &v83))
    {
      if (v84 == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v23 = gLogObj;
        os_log_type_t v24 = v84;
        if (os_log_type_enabled((os_log_t)gLogObj, v84))
        {
          *(_DWORD *)int buf = 136446978;
          uint64_t v86 = "nw_http3_framer_get_output_frames_for_capsule";
          __int16 v87 = 2082;
          char v88 = "frame_length";
          __int16 v89 = 2048;
          size_t v90 = v20;
          __int16 v91 = 2048;
          uint64_t v92 = v21;
          os_log_type_t v25 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_45:
          uint64_t v28 = (os_log_s *)v23;
LABEL_46:
          _os_log_impl(&dword_181A5C000, v28, v24, v25, buf, 0x2Au);
        }
      }

      else if (v83)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v24 = v84;
        id log = (os_log_s *)gLogObj;
        BOOL v27 = os_log_type_enabled((os_log_t)gLogObj, v84);
        if (backtrace_string)
        {
          if (v27)
          {
            *(_DWORD *)int buf = 136447234;
            uint64_t v86 = "nw_http3_framer_get_output_frames_for_capsule";
            __int16 v87 = 2082;
            char v88 = "frame_length";
            __int16 v89 = 2048;
            size_t v90 = v20;
            __int16 v91 = 2048;
            uint64_t v92 = v21;
            __int16 v93 = 2082;
            uint64_t v94 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  log,  v24,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(backtrace_string);
          goto LABEL_47;
        }

        if (v27)
        {
          *(_DWORD *)int buf = 136446978;
          uint64_t v86 = "nw_http3_framer_get_output_frames_for_capsule";
          __int16 v87 = 2082;
          char v88 = "frame_length";
          __int16 v89 = 2048;
          size_t v90 = v20;
          __int16 v91 = 2048;
          uint64_t v92 = v21;
          os_log_type_t v25 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          uint64_t v28 = log;
          goto LABEL_46;
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v23 = gLogObj;
        os_log_type_t v24 = v84;
        if (os_log_type_enabled((os_log_t)gLogObj, v84))
        {
          *(_DWORD *)int buf = 136446978;
          uint64_t v86 = "nw_http3_framer_get_output_frames_for_capsule";
          __int16 v87 = 2082;
          char v88 = "frame_length";
          __int16 v89 = 2048;
          size_t v90 = v20;
          __int16 v91 = 2048;
          uint64_t v92 = v21;
          os_log_type_t v25 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_45;
        }
      }
    }

uint64_t ___ZL37nw_http3_stream_send_pending_capsulesP24nw_protocol_http3_stream_block_invoke_142( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 1LL;
}

BOOL ___ZL37nw_http3_stream_send_pending_capsulesP24nw_protocol_http3_stream_block_invoke_2( void *a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  if ((nw_frame_uses_external_data(a2) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v24 = "nw_http3_stream_send_pending_capsules_block_invoke_2";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(offset) = 16;
    os_log_type_t offset_7 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v7, &offset, &offset_7))
    {
      if (offset == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v8 = (os_log_s *)gLogObj;
        os_log_type_t v9 = offset;
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)offset))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v24 = "nw_http3_stream_send_pending_capsules_block_invoke";
          int v10 = "%{public}s Capsule frame does not support external data";
LABEL_32:
          _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
        }
      }

      else if (offset_7)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v8 = (os_log_s *)gLogObj;
        os_log_type_t v9 = offset;
        BOOL v16 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)offset);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v24 = "nw_http3_stream_send_pending_capsules_block_invoke";
            __int16 v25 = 2082;
            __int16 v26 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s Capsule frame does not support external data, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_33;
        }

        if (v16)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v24 = "nw_http3_stream_send_pending_capsules_block_invoke";
          int v10 = "%{public}s Capsule frame does not support external data, no backtrace";
          goto LABEL_32;
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v8 = (os_log_s *)gLogObj;
        os_log_type_t v9 = offset;
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)offset))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v24 = "nw_http3_stream_send_pending_capsules_block_invoke";
          int v10 = "%{public}s Capsule frame does not support external data, backtrace limit exceeded";
          goto LABEL_32;
        }
      }
    }

void nw_protocol_http3_capsule_frame_finalizer(nw_frame *a1, BOOL a2, void *a3)
{
  if (a1) {
    os_release(a1);
  }
}

BOOL ___ZL59nw_http3_framer_get_output_frames_for_multiple_http3_framesP15nw_http3_frameryjjjP16nw_frame_array_s_block_invoke( uint64_t a1, _DWORD *a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  v11[0] = 0;
  nw_frame_get_buffer((uint64_t)a2, v11);
  unint64_t v4 = *(void *)(a1 + 32);
  if (v4 >= 0x40)
  {
    if (v4 >= 0x4000)
    {
      if (v4 >> 30)
      {
        if (v4 >> 62)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
          v11[1] = 136446466;
          BOOL v12 = "_http_vle_length";
          __int16 v13 = 2048;
          unint64_t v14 = v4;
          BOOL v6 = (void *)_os_log_send_and_compose_impl();
          BOOL result = __nwlog_abort((uint64_t)v6);
          if (result)
          {
            __break(1u);
            return result;
          }

          free(v6);
          int v5 = 0;
        }

        else
        {
          int v5 = 8;
        }
      }

      else
      {
        int v5 = 4;
      }
    }

    else
    {
      int v5 = 2;
    }
  }

  else
  {
    int v5 = 1;
  }

  if (v11[0] >> 30) {
    int v8 = 8;
  }
  else {
    int v8 = 4;
  }
  if (v11[0] >= 0x4000u) {
    int v9 = v8;
  }
  else {
    int v9 = 2;
  }
  if (v11[0] >= 0x40u) {
    int v10 = v9;
  }
  else {
    int v10 = 1;
  }
  nw_http3_framer_claim_http3_frame_header(v10 + v5, a2);
  return 1LL;
}

BOOL ___ZL41nw_protocol_http3_stream_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t v60 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void *)(a1 + 80);
  if (*(_BYTE *)(a1 + 104)) {
    BOOL v5 = *(void *)(v4 + 216) == 0LL;
  }
  else {
    BOOL v5 = 0;
  }
  if (*(_DWORD *)(v4 + 372) != 8)
  {
    if ((*(_WORD *)(v4 + 736) & 0x800) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v8 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        int v9 = *(_DWORD *)(*(void *)(v4 + 336) + 1280LL);
        uint64_t v10 = *(void *)(v4 + 240);
        int v11 = *(_DWORD *)(v4 + 372);
        *(_DWORD *)int buf = 136447490;
        uint64_t v45 = "nw_http3_stream_frame_received_for_capsule";
        __int16 v46 = 2082;
        __int16 v47 = (char *)(v4 + 636);
        __int16 v48 = 2080;
        int v49 = " ";
        __int16 v50 = 1024;
        int v51 = v9;
        __int16 v52 = 2048;
        uint64_t v53 = v10;
        __int16 v54 = 1024;
        LODWORD(v55) = v11;
        _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:s%llu> processing capsule data in incorrect state %u",  buf,  0x36u);
      }
    }

    return 0LL;
  }

  unint64_t v6 = *(void *)(a1 + 88);
  if ((*(_WORD *)(v4 + 736) & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v28 = *(void *)(a1 + 96);
      uint64_t v29 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        int v30 = *(_DWORD *)(*(void *)(v4 + 336) + 1280LL);
        uint64_t v31 = *(void *)(v4 + 240);
        *(_DWORD *)int buf = 136448002;
        uint64_t v45 = "nw_http3_stream_frame_received_for_capsule";
        __int16 v46 = 2082;
        __int16 v47 = (char *)(v4 + 636);
        __int16 v48 = 2080;
        int v49 = " ";
        __int16 v50 = 1024;
        int v51 = v30;
        __int16 v52 = 2048;
        uint64_t v53 = v31;
        __int16 v54 = 2048;
        unint64_t v55 = v6;
        __int16 v56 = 2048;
        uint64_t v57 = v28;
        __int16 v58 = 1024;
        BOOL v59 = v5;
        _os_log_impl( &dword_181A5C000,  v29,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> received frame type %llu, length %llu, complete %{BOOL}d",  buf,  0x4Au);
      }
    }
  }

  if (v6 > 0xD) {
    goto LABEL_15;
  }
  if (((1LL << v6) & 0x2098) != 0)
  {
LABEL_16:
    nw_http3_fail_all_streams(*(void *)(v4 + 336), 261LL);
    return 0LL;
  }

  if (v6)
  {
    if (v6 == 1)
    {
      uint64_t v7 = 0LL;
      *(_DWORD *)(v4 + 372) = 5;
      return v7;
    }

BOOL ___ZL41nw_protocol_http3_stream_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_146( void *a1, uint64_t a2)
{
  LODWORD(size) = 0;
  uint64_t v4 = (const void *)nw_frame_unclaimed_bytes(a2, &size);
  uint64_t v6 = *(void *)(a1[4] + 8LL);
  unsigned int v7 = *(unsigned __int16 *)(v6 + 24);
  if (*(_WORD *)(v6 + 24))
  {
    if (size < v7)
    {
      *(_WORD *)(v6 + 24) = v7 - size;
      uint64_t v8 = *(void *)(a2 + 32);
      int v9 = *(void **)(a2 + 40);
      if (v8)
      {
        *(void *)(v8 + 40) = v9;
        int v9 = *(void **)(a2 + 40);
      }

      else
      {
        *(void *)(a1[7] + 224LL) = v9;
      }

      *int v9 = v8;
      *(void *)(a2 + 32) = 0LL;
      *(void *)(a2 + 40) = 0LL;
      uint64_t v19 = 1LL;
      nw_frame_finalize(a2);
      return v19;
    }

    nw_frame_claim(a2, v5, v7, 0);
    uint64_t v4 = (const void *)nw_frame_unclaimed_bytes(a2, &size);
    *(_WORD *)(*(void *)(a1[4] + 8LL) + 24LL) = 0;
  }

  uint64_t v10 = *(void *)(a1[5] + 8LL);
  size_t v11 = *(void *)(v10 + 24);
  if (!v11) {
    return 0LL;
  }
  size_t v12 = size;
  if (v11 <= size)
  {
    dispatch_data_t v20 = dispatch_data_create(v4, v11, 0LL, 0LL);
    if (v20)
    {
      uint64_t v22 = v20;
      uint64_t v23 = *(void *)(a1[6] + 8LL);
      unint64_t v24 = *(dispatch_data_s **)(v23 + 24);
      if (v24)
      {
        dispatch_data_t concat = dispatch_data_create_concat(v24, v22);
        unsigned int v26 = *(dispatch_object_s **)(*(void *)(a1[6] + 8LL) + 24LL);
        if (v26)
        {
          dispatch_release(v26);
          *(void *)(*(void *)(a1[6] + 8LL) + 24LL) = 0LL;
        }

        dispatch_release(v22);
        *(void *)(*(void *)(a1[6] + 8LL) + 24LL) = concat;
      }

      else
      {
        *(void *)(v23 + 24) = v22;
      }
    }

    nw_frame_claim(a2, v21, *(_DWORD *)(*(void *)(a1[5] + 8LL) + 24LL), 0);
    uint64_t v19 = 0LL;
    *(void *)(*(void *)(a1[5] + 8LL) + 24LL) = 0LL;
  }

  else
  {
    *(void *)(v10 + 24) = v11 - size;
    dispatch_data_t v13 = dispatch_data_create(v4, v12, 0LL, 0LL);
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = *(void *)(a1[6] + 8LL);
      uint64_t v16 = *(dispatch_data_s **)(v15 + 24);
      if (v16)
      {
        dispatch_data_t v17 = dispatch_data_create_concat(v16, v14);
        BOOL v18 = *(dispatch_object_s **)(*(void *)(a1[6] + 8LL) + 24LL);
        if (v18)
        {
          dispatch_release(v18);
          *(void *)(*(void *)(a1[6] + 8LL) + 24LL) = 0LL;
        }

        dispatch_release(v14);
        *(void *)(*(void *)(a1[6] + 8LL) + 24LL) = v17;
      }

      else
      {
        *(void *)(v15 + 24) = v14;
      }
    }

    uint64_t v27 = *(void *)(a2 + 32);
    uint64_t v28 = *(void **)(a2 + 40);
    if (v27)
    {
      *(void *)(v27 + 40) = v28;
      uint64_t v28 = *(void **)(a2 + 40);
    }

    else
    {
      *(void *)(a1[7] + 224LL) = v28;
    }

    *uint64_t v28 = v27;
    *(void *)(a2 + 32) = 0LL;
    *(void *)(a2 + 40) = 0LL;
    nw_frame_finalize(a2);
    return *(void *)(*(void *)(a1[5] + 8LL) + 24LL) != 0LL;
  }

  return v19;
}

BOOL ___ZL41nw_protocol_http3_stream_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_148( uint64_t a1, uint64_t a2)
{
  uint64_t v137 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void *)(a1 + 48);
  if (!v4 || (*(_WORD *)(v4 + 736) & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      BOOL v59 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v60 = *(void *)(a1 + 48);
        char v61 = (const char *)(v60 + 636);
        unint64_t v62 = "";
        BOOL v63 = v60 == 0;
        if (!v60) {
          char v61 = "";
        }
        int v64 = *(_DWORD *)(*(void *)(v60 + 336) + 1280LL);
        uint64_t v65 = *(void *)(v60 + 240);
        if (!v63) {
          unint64_t v62 = " ";
        }
        *(_DWORD *)int buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_get_input_frames_block_invoke";
        *(_WORD *)&void buf[12] = 2082;
        *(void *)&_BYTE buf[14] = v61;
        *(_WORD *)&_BYTE buf[22] = 2080;
        *(void *)&_BYTE buf[24] = v62;
        LOWORD(v130) = 1024;
        *(_DWORD *)((char *)&v130 + 2) = v64;
        HIWORD(v130) = 2048;
        uint64_t v131 = v65;
        __int16 v132 = 2048;
        *(void *)BOOL v133 = a2;
        _os_log_impl( &dword_181A5C000,  v59,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> processing frame %p",  buf,  0x3Au);
      }
    }
  }

  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(void **)(a2 + 40);
  unsigned int v7 = (void *)(a2 + 32);
  if (v5)
  {
    *(void *)(v5 + 40) = v6;
    uint64_t v6 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(*(void *)(a1 + 48) + 224LL) = v6;
  }

  void *v6 = v5;
  void *v7 = 0LL;
  *(void *)(a2 + 40) = 0LL;
  int is_metadata_complete = nw_frame_is_metadata_complete(a2);
  int v9 = is_metadata_complete;
  uint64_t v10 = *(void *)(a1 + 48);
  unint64_t v11 = *(void *)(a1 + 56);
  unint64_t v12 = *(void *)(a1 + 64);
  if (*(_BYTE *)(a1 + 84))
  {
    BOOL v13 = *(void *)(v10 + 216) == 0LL;
    uint64_t v14 = (void **)(a1 + 72);
    uint64_t v15 = *(void *)(a1 + 72);
    unsigned int v16 = *(_DWORD *)(a1 + 80);
    dispatch_data_t v17 = (_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    BOOL v18 = v10 == 0;
  }

  else
  {
    BOOL v18 = 0;
    uint64_t v14 = (void **)(a1 + 72);
    uint64_t v15 = *(void *)(a1 + 72);
    unsigned int v16 = *(_DWORD *)(a1 + 80);
    dispatch_data_t v17 = (_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    if (!v10)
    {
      int v19 = 1;
      goto LABEL_12;
    }

    BOOL v13 = 0;
  }

  int v19 = v18;
  BOOL v18 = v13;
  if ((*(_WORD *)(v10 + 736) & 0x800) != 0) {
    goto LABEL_13;
  }
LABEL_12:
  if (!gLogDatapath)
  {
LABEL_13:
    if (v11 > 0xD) {
      goto LABEL_87;
    }
    goto LABEL_14;
  }

  unsigned int v124 = v16;
  unint64_t v121 = *(void *)(a1 + 64);
  int v126 = is_metadata_complete;
  nw_endpoint_t object = (os_log_s *)__nwlog_obj();
  if (os_log_type_enabled(object, OS_LOG_TYPE_DEBUG))
  {
    id v66 = (const char *)(v10 + 636);
    __int16 v67 = "";
    int v68 = *(_DWORD *)(*(void *)(v10 + 336) + 1280LL);
    uint64_t v69 = *(void *)(v10 + 240);
    if (v19) {
      id v66 = "";
    }
    else {
      __int16 v67 = " ";
    }
    *(_DWORD *)int buf = 136448002;
    *(void *)&uint8_t buf[4] = "nw_http3_stream_frame_received";
    *(_WORD *)&void buf[12] = 2082;
    *(void *)&_BYTE buf[14] = v66;
    *(_WORD *)&_BYTE buf[22] = 2080;
    *(void *)&_BYTE buf[24] = v67;
    LOWORD(v130) = 1024;
    *(_DWORD *)((char *)&v130 + 2) = v68;
    HIWORD(v130) = 2048;
    uint64_t v131 = v69;
    __int16 v132 = 2048;
    *(void *)BOOL v133 = v11;
    *(_WORD *)&v133[8] = 2048;
    unint64_t v134 = v121;
    __int16 v135 = 1024;
    BOOL v136 = v18;
    _os_log_impl( &dword_181A5C000,  object,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> received frame type %llu, length %llu, complete %{BOOL}d",  buf,  0x4Au);
    unint64_t v12 = v121;
    int v9 = v126;
  }

  else
  {
    int v9 = v126;
    unint64_t v12 = v121;
  }

  unsigned int v16 = v124;
  if (v11 > 0xD) {
    goto LABEL_87;
  }
LABEL_14:
  if (((1LL << v11) & 0x2098) != 0)
  {
LABEL_88:
    int v70 = v9;
    nw_http3_fail_all_streams(*(void *)(v10 + 336), 261LL);
    int v9 = v70;
    int v47 = 2;
    dispatch_data_t v20 = &qword_18C45F000;
    goto LABEL_95;
  }

  if (v11)
  {
    if (v11 == 1)
    {
      dispatch_data_t v20 = &qword_18C45F000;
      int v125 = v9;
      switch(*(_DWORD *)(v10 + 372))
      {
        case 0:
          unsigned int v42 = v16;
          unint64_t v43 = v12;
          *(_DWORD *)(v10 + 372) = 1;
          uint64_t v44 = *(void *)(v10 + 336);
          if (v44 && *(_WORD *)(v44 + 1284)) {
            *(_WORD *)(v44 + 1284) = 0;
          }
          *(void *)int buf = _nw_http_parsed_fields_create();
          nw::retained_ptr<nw_endpoint *>::operator=(v10 + 504, buf);
          unint64_t v12 = v43;
          unsigned int v16 = v42;
          goto LABEL_47;
        case 1:
LABEL_47:
          unsigned int v122 = v16;
          unint64_t v45 = v12;
          nw_http3_stream_handle_fields(v10, v12, a2, v18);
          int v47 = v46;
          uint64_t v48 = *(void *)(v10 + 376);
          if (v48)
          {
            *(void *)(v48 + 32) = 0LL;
            int v49 = *(void **)(v15 + 8);
            *(void *)(v48 + 40) = v49;
            void *v49 = v48;
            *(void *)(v15 + _Block_object_dispose(va, 8) = v48 + 32;
            ++*v17;
            *(void *)(v10 + 376) = 0LL;
          }

          if (v18)
          {
            uint64_t v50 = nw_http3_encoder_stream_get_and_reset_received_size(*(void *)(v10 + 336));
            nw_http_transaction_metadata_increment_inbound_header_size(*(void **)(v10 + 392), v45 + v122 + v50);
          }

          goto LABEL_54;
        case 2:
        case 3:
        case 6:
        case 7:
        case 8:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v21 = *(_DWORD *)(v10 + 372);
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_stream_frame_received";
          *(_WORD *)&void buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = v21;
          uint64_t v22 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v127 = 0;
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v23 = (os_log_s *)gLogObj;
            os_log_type_t v24 = type;
            if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
              goto LABEL_71;
            }
            int v25 = *(_DWORD *)(v10 + 372);
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http3_stream_frame_received";
            *(_WORD *)&void buf[12] = 1024;
            *(_DWORD *)&_BYTE buf[14] = v25;
            unsigned int v26 = "%{public}s Unexpected input state %d";
LABEL_70:
            _os_log_impl(&dword_181A5C000, v23, v24, v26, buf, 0x12u);
            goto LABEL_71;
          }

          if (!v127)
          {
            uint64_t v23 = (os_log_s *)__nwlog_obj();
            os_log_type_t v24 = type;
            if (!os_log_type_enabled(v23, type)) {
              goto LABEL_71;
            }
            int v56 = *(_DWORD *)(v10 + 372);
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http3_stream_frame_received";
            *(_WORD *)&void buf[12] = 1024;
            *(_DWORD *)&_BYTE buf[14] = v56;
            unsigned int v26 = "%{public}s Unexpected input state %d, backtrace limit exceeded";
            goto LABEL_70;
          }

          backtrace_string = (char *)__nw_create_backtrace_string();
          uint64_t v23 = (os_log_s *)__nwlog_obj();
          os_log_type_t v24 = type;
          BOOL v39 = os_log_type_enabled(v23, type);
          if (!backtrace_string)
          {
            dispatch_data_t v20 = &qword_18C45F000;
            if (!v39) {
              goto LABEL_71;
            }
            int v58 = *(_DWORD *)(v10 + 372);
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http3_stream_frame_received";
            *(_WORD *)&void buf[12] = 1024;
            *(_DWORD *)&_BYTE buf[14] = v58;
            unsigned int v26 = "%{public}s Unexpected input state %d, no backtrace";
            goto LABEL_70;
          }

          if (v39)
          {
            int v40 = *(_DWORD *)(v10 + 372);
            *(_DWORD *)int buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_http3_stream_frame_received";
            *(_WORD *)&void buf[12] = 1024;
            *(_DWORD *)&_BYTE buf[14] = v40;
            *(_WORD *)&buf[18] = 2082;
            *(void *)&_BYTE buf[20] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v23,  v24,  "%{public}s Unexpected input state %d, dumping backtrace:%{public}s",  buf,  0x1Cu);
          }

          free(backtrace_string);
          dispatch_data_t v20 = &qword_18C45F000;
LABEL_71:
          if (v22) {
            free(v22);
          }
          break;
        case 4:
          *(_DWORD *)(v10 + 372) = 5;
          goto LABEL_52;
        case 5:
LABEL_52:
          nw_http3_stream_handle_fields(v10, v12, a2, v18);
          int v47 = v51;
          uint64_t v52 = *(void *)(v10 + 376);
          if (v52)
          {
            *(void *)(v52 + 32) = 0LL;
            uint64_t v53 = *(void **)(v15 + 8);
            *(void *)(v52 + 40) = v53;
            void *v53 = v52;
            *(void *)(v15 + _Block_object_dispose(va, 8) = v52 + 32;
            ++*v17;
            *(void *)(v10 + 376) = 0LL;
          }

void ___ZL41nw_protocol_http3_stream_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_150( uint64_t a1)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  if ((*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))())
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if ((*(_WORD *)(v2 + 736) & 0x100) != 0)
    {
      if ((*(_WORD *)(v2 + 736) & 0x800) == 0)
      {
        if (gLogDatapath)
        {
          uint64_t v23 = (os_log_s *)__nwlog_obj();
          BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG);
          uint64_t v2 = *(void *)(a1 + 40);
          if (v24)
          {
            int v25 = (const char *)(v2 + 636);
            unsigned int v26 = "";
            int v27 = *(_DWORD *)(*(void *)(v2 + 336) + 1280LL);
            BOOL v28 = v2 == 0;
            uint64_t v29 = *(void *)(v2 + 240);
            if (v28) {
              int v25 = "";
            }
            else {
              unsigned int v26 = " ";
            }
            *(_DWORD *)int buf = 136447234;
            BOOL v39 = "nw_protocol_http3_stream_get_input_frames_block_invoke";
            __int16 v40 = 2082;
            int v41 = v25;
            __int16 v42 = 2080;
            unint64_t v43 = (void *)v26;
            __int16 v44 = 1024;
            int v45 = v27;
            __int16 v46 = 2048;
            uint64_t v47 = v29;
            _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> delivering deferred input finished",  buf,  0x30u);
            uint64_t v2 = *(void *)(a1 + 40);
          }
        }
      }

      int v3 = *(unsigned __int16 *)(v2 + 736);
      unsigned int v4 = v3 & 0xFFFFFEFF | (*(unsigned __int8 *)(v2 + 738) << 16);
      *(_WORD *)(v2 + 736) = v3 & 0xFEFF;
      *(_BYTE *)(v2 + 73_Block_object_dispose(va, 8) = BYTE2(v4);
      uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 48LL);
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 24);
        if (v6)
        {
          unsigned int v7 = *(void (**)(void))(v6 + 184);
          if (v7)
          {
            v7();
            return;
          }
        }
      }

      __nwlog_obj();
      uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 48LL);
      int v9 = "invalid";
      if (v8)
      {
        uint64_t v10 = *(const char **)(v8 + 16);
        if (v10) {
          int v9 = v10;
        }
      }

      *(_DWORD *)int buf = 136446466;
      BOOL v39 = "nw_protocol_http3_stream_get_input_frames_block_invoke";
      __int16 v40 = 2082;
      int v41 = v9;
      unint64_t v11 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v36 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        unint64_t v12 = (os_log_s *)__nwlog_obj();
        os_log_type_t v13 = type;
        if (!os_log_type_enabled(v12, type)) {
          goto LABEL_44;
        }
        uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 48LL);
        uint64_t v15 = "invalid";
        if (v14)
        {
          unsigned int v16 = *(const char **)(v14 + 16);
          if (v16) {
            uint64_t v15 = v16;
          }
        }

        *(_DWORD *)int buf = 136446466;
        BOOL v39 = "nw_protocol_http3_stream_get_input_frames_block_invoke";
        __int16 v40 = 2082;
        int v41 = v15;
        dispatch_data_t v17 = "%{public}s protocol %{public}s has invalid input_finished callback";
      }

      else if (v36)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        unint64_t v12 = (os_log_s *)__nwlog_obj();
        os_log_type_t v13 = type;
        BOOL v19 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v19)
          {
            uint64_t v20 = *(void *)(*(void *)(a1 + 40) + 48LL);
            int v21 = "invalid";
            if (v20)
            {
              uint64_t v22 = *(const char **)(v20 + 16);
              if (v22) {
                int v21 = v22;
              }
            }

            *(_DWORD *)int buf = 136446722;
            BOOL v39 = "nw_protocol_http3_stream_get_input_frames_block_invoke";
            __int16 v40 = 2082;
            int v41 = v21;
            __int16 v42 = 2082;
            unint64_t v43 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s protocol %{public}s has invalid input_finished callback, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(backtrace_string);
          goto LABEL_44;
        }

        if (!v19)
        {
LABEL_44:
          if (v11) {
            free(v11);
          }
          return;
        }

        uint64_t v33 = *(void *)(*(void *)(a1 + 40) + 48LL);
        uint64_t v34 = "invalid";
        if (v33)
        {
          BOOL v35 = *(const char **)(v33 + 16);
          if (v35) {
            uint64_t v34 = v35;
          }
        }

        *(_DWORD *)int buf = 136446466;
        BOOL v39 = "nw_protocol_http3_stream_get_input_frames_block_invoke";
        __int16 v40 = 2082;
        int v41 = v34;
        dispatch_data_t v17 = "%{public}s protocol %{public}s has invalid input_finished callback, no backtrace";
      }

      else
      {
        unint64_t v12 = (os_log_s *)__nwlog_obj();
        os_log_type_t v13 = type;
        if (!os_log_type_enabled(v12, type)) {
          goto LABEL_44;
        }
        uint64_t v30 = *(void *)(*(void *)(a1 + 40) + 48LL);
        uint64_t v31 = "invalid";
        if (v30)
        {
          os_log_type_t v32 = *(const char **)(v30 + 16);
          if (v32) {
            uint64_t v31 = v32;
          }
        }

        *(_DWORD *)int buf = 136446466;
        BOOL v39 = "nw_protocol_http3_stream_get_input_frames_block_invoke";
        __int16 v40 = 2082;
        int v41 = v31;
        dispatch_data_t v17 = "%{public}s protocol %{public}s has invalid input_finished callback, backtrace limit exceeded";
      }

      _os_log_impl(&dword_181A5C000, v12, v13, v17, buf, 0x16u);
      goto LABEL_44;
    }
  }

void nw::http::content_length_manager::increment_inbound_body_size( nw::http::content_length_manager *this, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = v2 + a2;
  if (__CFADD__(v2, a2))
  {
    if (gLogDatapath)
    {
      uint64_t v5 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v6 = *((void *)this + 5);
        int v7 = 136446978;
        uint64_t v8 = "increment_inbound_body_size";
        __int16 v9 = 2082;
        uint64_t v10 = "inbound_body_size";
        __int16 v11 = 2048;
        uint64_t v12 = a2;
        __int16 v13 = 2048;
        uint64_t v14 = v6;
        _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_DEBUG,  "%{public}s Overflow: %{public}s, increment %llu, result %llu",  (uint8_t *)&v7,  0x2Au);
      }
    }

    *((void *)this + 5) = -1LL;
  }

BOOL ___ZL34nw_protocol_http3_stream_connectedP11nw_protocolS0__block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  BOOL is_quic_stream = nw_protocol_metadata_is_quic_stream(a3);
  if (is_quic_stream)
  {
    uint64_t v6 = a3 ? os_retain(a3) : 0LL;
    *(void *)(*(void *)(a1 + 32) + 416LL) = v6;
    uint64_t id = nw_quic_stream_get_id(a3);
    uint64_t v8 = *(void *)(a1 + 32);
    *(void *)(v8 + 240) = id;
    if ((*(_WORD *)(v8 + 736) & 0x800) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v9 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        uint64_t v10 = *(void *)(a1 + 32);
        __int16 v11 = (const char *)(v10 + 636);
        uint64_t v12 = "";
        if (!v10) {
          __int16 v11 = "";
        }
        int v13 = *(_DWORD *)(*(void *)(v10 + 336) + 1280LL);
        uint64_t v14 = *(void *)(v10 + 240);
        if (v10) {
          uint64_t v12 = " ";
        }
        int v16 = 136447746;
        dispatch_data_t v17 = "nw_protocol_http3_stream_connected_block_invoke";
        __int16 v18 = 2082;
        BOOL v19 = v11;
        __int16 v20 = 2080;
        int v21 = v12;
        __int16 v22 = 1024;
        int v23 = v13;
        __int16 v24 = 2048;
        uint64_t v25 = v14;
        __int16 v26 = 2048;
        uint64_t v27 = v10;
        __int16 v28 = 2048;
        uint64_t v29 = v14;
        _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:s%llu> http3 stream %p assigned ID %llu",  (uint8_t *)&v16,  0x44u);
      }
    }
  }

  return !is_quic_stream;
}

void ___ZL34nw_protocol_http3_stream_connectedP11nw_protocolS0__block_invoke_129( uint64_t a1, void *a2, int a3)
{
  uint64_t v79 = *MEMORY[0x1895F89C0];
  switch(a3)
  {
    case 0:
      id outbound_message = nw_http_transaction_metadata_get_outbound_message(a2);
      id v6 = nw_http_metadata_copy_request(outbound_message);
      id v7 = nw_http_metadata_copy_response(outbound_message);
      if (v6)
      {
        v66[0] = MEMORY[0x1895F87A8];
        v66[1] = 0x40000000LL;
        v66[2] = ___ZL34nw_protocol_http3_stream_connectedP11nw_protocolS0__block_invoke_2;
        v66[3] = &__block_descriptor_tmp_130_62035;
        v66[4] = *(void *)(a1 + 32);
        id v8 = v6;
        __int16 v9 = v66;
        _nw_http_request_access_method((uint64_t)v8, v9);
      }

      if (!v7) {
        goto LABEL_40;
      }
      id v10 = v7;
      int status_code = _nw_http_response_get_status_code();

      uint64_t v12 = *(void *)(a1 + 32);
      if (v12 && (*(_WORD *)(v12 + 736) & 0x800) != 0) {
        goto LABEL_39;
      }
      if (__nwlog_http_log::onceToken != -1) {
        dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
      }
      int v13 = (os_log_s *)ghttpLogObj;
      if (!os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO)) {
        goto LABEL_39;
      }
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = (const char *)(v14 + 636);
      int v16 = "";
      BOOL v17 = v14 == 0;
      if (!v14) {
        uint64_t v15 = "";
      }
      int v18 = *(_DWORD *)(*(void *)(v14 + 336) + 1280LL);
      uint64_t v19 = *(void *)(v14 + 240);
      if (!v17) {
        int v16 = " ";
      }
      *(_DWORD *)int buf = 136447490;
      int v68 = "nw_protocol_http3_stream_connected_block_invoke";
      __int16 v69 = 2082;
      int v70 = v15;
      __int16 v71 = 2080;
      uint64_t v72 = v16;
      __int16 v73 = 1024;
      int v74 = v18;
      __int16 v75 = 2048;
      uint64_t v76 = v19;
      __int16 v77 = 1024;
      LODWORD(v7_Block_object_dispose(va, 8) = status_code;
      __int16 v20 = "%{public}s %{public}s%s<i%u:s%llu> sending response header {status=%hu}";
      goto LABEL_38;
    case 1:
      outbound_body_size_t size = nw_http_transaction_metadata_get_outbound_body_size(a2);
      uint64_t v22 = *(void *)(a1 + 32);
      if (v22 && (*(_WORD *)(v22 + 736) & 0x800) != 0) {
        return;
      }
      if (__nwlog_http_log::onceToken != -1) {
        dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
      }
      int v23 = (os_log_s *)ghttpLogObj;
      if (!os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO)) {
        return;
      }
      uint64_t v24 = *(void *)(a1 + 32);
      uint64_t v25 = (const char *)(v24 + 636);
      __int16 v26 = "";
      BOOL v27 = v24 == 0;
      if (!v24) {
        uint64_t v25 = "";
      }
      int v28 = *(_DWORD *)(*(void *)(v24 + 336) + 1280LL);
      uint64_t v29 = *(void *)(v24 + 240);
      if (!v27) {
        __int16 v26 = " ";
      }
      *(_DWORD *)int buf = 136447490;
      int v68 = "nw_protocol_http3_stream_connected_block_invoke";
      __int16 v69 = 2082;
      int v70 = v25;
      __int16 v71 = 2080;
      uint64_t v72 = v26;
      __int16 v73 = 1024;
      int v74 = v28;
      __int16 v75 = 2048;
      uint64_t v76 = v29;
      __int16 v77 = 2048;
      uint64_t v78 = outbound_body_size;
      uint64_t v30 = "%{public}s %{public}s%s<i%u:s%llu> finished sending {body_bytes=%llu}";
      goto LABEL_54;
    case 2:
      id outbound_message = nw_http_transaction_metadata_get_inbound_message(a2);
      id v6 = nw_http_metadata_copy_request(outbound_message);
      id v31 = nw_http_metadata_copy_response(outbound_message);
      if (v6)
      {
        v65[0] = MEMORY[0x1895F87A8];
        v65[1] = 0x40000000LL;
        v65[2] = ___ZL34nw_protocol_http3_stream_connectedP11nw_protocolS0__block_invoke_131;
        v65[3] = &__block_descriptor_tmp_132_62038;
        void v65[4] = *(void *)(a1 + 32);
        id v32 = v6;
        uint64_t v33 = v65;
        _nw_http_request_access_method((uint64_t)v32, v33);
      }

      if (v31)
      {
        id v10 = v31;
        int v34 = _nw_http_response_get_status_code();

        uint64_t v35 = *(void *)(a1 + 32);
        if (!v35 || (*(_WORD *)(v35 + 736) & 0x800) == 0)
        {
          if (__nwlog_http_log::onceToken != -1) {
            dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
          }
          int v13 = (os_log_s *)ghttpLogObj;
          if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
          {
            uint64_t v36 = *(void *)(a1 + 32);
            int v37 = (const char *)(v36 + 636);
            uint64_t v38 = "";
            BOOL v39 = v36 == 0;
            if (!v36) {
              int v37 = "";
            }
            int v40 = *(_DWORD *)(*(void *)(v36 + 336) + 1280LL);
            uint64_t v41 = *(void *)(v36 + 240);
            if (!v39) {
              uint64_t v38 = " ";
            }
            *(_DWORD *)int buf = 136447490;
            int v68 = "nw_protocol_http3_stream_connected_block_invoke";
            __int16 v69 = 2082;
            int v70 = v37;
            __int16 v71 = 2080;
            uint64_t v72 = v38;
            __int16 v73 = 1024;
            int v74 = v40;
            __int16 v75 = 2048;
            uint64_t v76 = v41;
            __int16 v77 = 1024;
            LODWORD(v7_Block_object_dispose(va, 8) = v34;
            __int16 v20 = "%{public}s %{public}s%s<i%u:s%llu> receiving response header {status=%hu}";
LABEL_38:
            _os_log_impl(&dword_181A5C000, v13, OS_LOG_TYPE_INFO, v20, buf, 0x36u);
          }
        }

void ___ZL34nw_protocol_http3_stream_connectedP11nw_protocolS0__block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4 || (*(_WORD *)(v4 + 736) & 0x800) == 0)
  {
    if (__nwlog_http_log::onceToken != -1) {
      dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
    }
    uint64_t v5 = (os_log_s *)ghttpLogObj;
    if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      id v7 = (const char *)(v6 + 636);
      id v8 = "";
      BOOL v9 = v6 == 0;
      if (!v6) {
        id v7 = "";
      }
      int v10 = *(_DWORD *)(*(void *)(v6 + 336) + 1280LL);
      uint64_t v11 = *(void *)(v6 + 240);
      if (!v9) {
        id v8 = " ";
      }
      int v12 = 136447490;
      int v13 = "nw_protocol_http3_stream_connected_block_invoke_2";
      __int16 v14 = 2082;
      uint64_t v15 = v7;
      __int16 v16 = 2080;
      BOOL v17 = v8;
      __int16 v18 = 1024;
      int v19 = v10;
      __int16 v20 = 2048;
      uint64_t v21 = v11;
      __int16 v22 = 2082;
      uint64_t v23 = a2;
      _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:s%llu> sending request header {method=%{public}s}",  (uint8_t *)&v12,  0x3Au);
    }
  }