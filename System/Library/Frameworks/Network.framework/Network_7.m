LABEL_333:
                                    goto LABEL_334;
                                  }

                                  goto LABEL_334;
                                }

    goto LABEL_334;
  }

  dictionary_with_initial_length = nw_txt_record_create_dictionary_with_initial_length(0x100uLL);
  *(void *)v184 = 0LL;
  *(void *)&v184[8] = 0LL;
  if (!nw_path_evaluator_get_client_id(evaluator_for_endpoint, v184))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v73 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_candidate_endpoint_for_ids_connection";
    v74 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    LOBYTE(__str[0]) = 0;
    if (type[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v75 = (os_log_s *)(id)gLogObj;
      v76 = type[0];
      if (os_log_type_enabled(v75, (os_log_type_t)type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_181A5C000, v75, v76, "%{public}s nw_path_evaluator_get_client_id failed", buf, 0xCu);
      }
    }

    else if (LOBYTE(__str[0]))
    {
      v80 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v75 = (os_log_s *)(id)gLogObj;
      v81 = type[0];
      v82 = os_log_type_enabled(v75, (os_log_type_t)type[0]);
      if (v80)
      {
        if (v82)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&buf[4] = "nw_candidate_endpoint_for_ids_connection";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v80;
          _os_log_impl( &dword_181A5C000,  v75,  v81,  "%{public}s nw_path_evaluator_get_client_id failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

LABEL_101:
        free(v80);
        if (!v74) {
          goto LABEL_177;
        }
        goto LABEL_176;
      }

      if (v82)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl( &dword_181A5C000,  v75,  v81,  "%{public}s nw_path_evaluator_get_client_id failed, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v75 = (os_log_s *)(id)gLogObj;
      v87 = type[0];
      if (os_log_type_enabled(v75, (os_log_type_t)type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl( &dword_181A5C000,  v75,  v87,  "%{public}s nw_path_evaluator_get_client_id failed, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_175;
  }

  memset(buf, 0, 37);
  uuid_unparse(v184, (char *)buf);
  if (!nw_txt_record_set_key((nw_txt_record_t)dictionary_with_initial_length, "eval", buf, 0x24uLL))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v77 = (id)gLogObj;
    *(_DWORD *)type = 136446210;
    *(void *)&type[4] = "nw_candidate_endpoint_for_ids_connection";
    v74 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(__str[0]) = 16;
    v181 = OS_LOG_TYPE_DEFAULT;
    if (LOBYTE(__str[0]) == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v78 = (os_log_s *)(id)gLogObj;
      v79 = __str[0];
      if (os_log_type_enabled(v78, __str[0]))
      {
        *(_DWORD *)type = 136446210;
        *(void *)&type[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_181A5C000, v78, v79, "%{public}s failed to add kIDSKeyPathUUID", type, 0xCu);
      }

      goto LABEL_149;
    }

    if (v181 == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v78 = (os_log_s *)(id)gLogObj;
      v94 = __str[0];
      if (os_log_type_enabled(v78, __str[0]))
      {
        *(_DWORD *)type = 136446210;
        *(void *)&type[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl( &dword_181A5C000,  v78,  v94,  "%{public}s failed to add kIDSKeyPathUUID, backtrace limit exceeded",  type,  0xCu);
      }

      goto LABEL_149;
    }

    v80 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v78 = (os_log_s *)(id)gLogObj;
    v85 = __str[0];
    v86 = os_log_type_enabled(v78, __str[0]);
    if (!v80)
    {
      if (v86)
      {
        *(_DWORD *)type = 136446210;
        *(void *)&type[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_181A5C000, v78, v85, "%{public}s failed to add kIDSKeyPathUUID, no backtrace", type, 0xCu);
      }

      goto LABEL_149;
    }

    if (v86)
    {
      *(_DWORD *)type = 136446466;
      *(void *)&type[4] = "nw_candidate_endpoint_for_ids_connection";
      *(_WORD *)&type[12] = 2082;
      *(void *)&type[14] = v80;
      _os_log_impl( &dword_181A5C000,  v78,  v85,  "%{public}s failed to add kIDSKeyPathUUID, dumping backtrace:%{public}s",  type,  0x16u);
    }

    if (v151) {
      free(v151);
    }
    v29 = 0LL;
    goto LABEL_154;
  }

  v43 = v41[2];
  if (v43)
  {
    v44 = strlen(v43);
    v45 = v42[3];
    if (v45) {
      goto LABEL_42;
    }
LABEL_45:
    v46 = 0;
    v47 = (char *)v42[5];
    if (v47) {
      goto LABEL_43;
    }
    goto LABEL_46;
  }

  v44 = 0;
  v45 = v42[3];
  if (!v45) {
    goto LABEL_45;
  }
LABEL_42:
  v46 = strlen(v45);
  v47 = (char *)v42[5];
  if (v47)
  {
LABEL_43:
    count = xpc_array_get_count(v47);
    goto LABEL_47;
  }

    if (!v144) {
      goto LABEL_335;
    }
    goto LABEL_334;
  }

  v9 = *((void *)handle + 1);
  if (!v9)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_http1_get_http1_protocol";
    v144 = (char *)_os_log_send_and_compose_impl();
    v237[0] = 16;
    LOBYTE(v231) = 0;
    if (v237[0] == 17)
    {
      v145 = (os_log_s *)__nwlog_obj();
      v146 = v237[0];
      if (!os_log_type_enabled(v145, (os_log_type_t)v237[0])) {
        goto LABEL_333;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_http1_get_http1_protocol";
      v147 = "%{public}s called with null handle->http1_stream";
      goto LABEL_332;
    }

    if (!(_BYTE)v231)
    {
      v145 = (os_log_s *)__nwlog_obj();
      v146 = v237[0];
      if (!os_log_type_enabled(v145, (os_log_type_t)v237[0])) {
        goto LABEL_333;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_http1_get_http1_protocol";
      v147 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_332;
    }

    v154 = (char *)__nw_create_backtrace_string();
    v145 = (os_log_s *)__nwlog_obj();
    v146 = v237[0];
    v173 = os_log_type_enabled(v145, (os_log_type_t)v237[0]);
    if (!v154)
    {
      if (!v173) {
        goto LABEL_333;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_http1_get_http1_protocol";
      v147 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_332;
    }

    if (!v173) {
      goto LABEL_247;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&buf[4] = "nw_http1_get_http1_protocol";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v154;
    v156 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
LABEL_246:
    _os_log_impl(&dword_181A5C000, v145, v146, v156, buf, 0x16u);
    goto LABEL_247;
  }

  v7 = (void *)(v9 + 248);
LABEL_10:
  if (!*v7) {
    goto LABEL_335;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_protocol_http1_error";
    v148 = (char *)_os_log_send_and_compose_impl();
    v237[0] = 16;
    LOBYTE(v231) = 0;
    if (v237[0] == 17)
    {
      v149 = (os_log_s *)__nwlog_obj();
      v150 = v237[0];
      if (!os_log_type_enabled(v149, (os_log_type_t)v237[0])) {
        goto LABEL_371;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_protocol_http1_error";
      v151 = "%{public}s called with null other_protocol";
    }

    else if ((_BYTE)v231)
    {
      v161 = (char *)__nw_create_backtrace_string();
      v149 = (os_log_s *)__nwlog_obj();
      v150 = v237[0];
      v162 = os_log_type_enabled(v149, (os_log_type_t)v237[0]);
      if (v161)
      {
        if (!v162) {
          goto LABEL_364;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&buf[4] = "nw_protocol_http1_error";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v161;
        v163 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
        goto LABEL_363;
      }

      if (!v162) {
        goto LABEL_371;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_protocol_http1_error";
      v151 = "%{public}s called with null other_protocol, no backtrace";
    }

    else
    {
      v149 = (os_log_s *)__nwlog_obj();
      v150 = v237[0];
      if (!os_log_type_enabled(v149, (os_log_type_t)v237[0])) {
        goto LABEL_371;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_protocol_http1_error";
      v151 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    }

            free(v132);
            goto LABEL_334;
          }

          if (v138)
          {
            *(_DWORD *)buf = 136446978;
            *(void *)&buf[4] = "nw_path_create_flow_result_from_tlv";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v18;
            *(_WORD *)&buf[18] = 2048;
            *(void *)&buf[20] = v11;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = a3;
            _os_log_impl( &dword_181A5C000,  v136,  v137,  "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), no backtrace",  buf,  0x26u);
          }

LABEL_332:
          if (!v132) {
            goto LABEL_334;
          }
          goto LABEL_333;
        }

        __nwlog_obj();
        v133 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v139 = v178[0];
        if (os_log_type_enabled(v133, (os_log_type_t)v178[0]))
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&buf[4] = "nw_path_create_flow_result_from_tlv";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v18;
          *(_WORD *)&buf[18] = 2048;
          *(void *)&buf[20] = v11;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = a3;
          _os_log_impl( &dword_181A5C000,  v133,  v139,  "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), backtrace limit exceeded",  buf,  0x26u);
        }
      }

      goto LABEL_332;
    }

    if (!(_DWORD)v18 || !v29) {
      goto LABEL_21;
    }
    switch(v17)
    {
      case 6:
        if ((_DWORD)v18 == 20) {
          goto LABEL_51;
        }
        if (v18 >= 0x15)
        {
          __nwlog_obj();
          v100 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446978;
            *(void *)&buf[4] = "nw_path_verify_tlv_length";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 6;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v18;
            *(_WORD *)&buf[24] = 1024;
            *(_DWORD *)&buf[26] = 20;
            _os_log_impl( &dword_181A5C000,  v100,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
          }

LABEL_51:
          v31 = *(_OWORD *)v29;
          *(_DWORD *)&p_nexus_agent_struct->netagent_uuid[12] = *((_DWORD *)v29 + 4);
          *(_OWORD *)&p_nexus_agent_struct->generation = v31;
        }

        goto LABEL_21;
      case 7:
        if ((_DWORD)v18 == 4) {
          goto LABEL_71;
        }
        __nwlog_obj();
        v103 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v103, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&buf[4] = "nw_path_verify_tlv_length";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v18;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = 4;
          _os_log_impl( &dword_181A5C000,  v103,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
        }

LABEL_71:
        v35 = *(_DWORD *)v29;
        if ((*(_DWORD *)v29 & 0x80) != 0)
        {
          BYTE1(v10[1].super.isa) |= 1u;
          if ((v35 & 0x40) == 0)
          {
LABEL_73:
            if ((v35 & 0x200) == 0) {
              goto LABEL_74;
            }
            goto LABEL_134;
          }
        }

        else if ((v35 & 0x40) == 0)
        {
          goto LABEL_73;
        }

        BYTE1(v10[1].super.isa) |= 2u;
        if ((v35 & 0x200) == 0)
        {
LABEL_74:
          if ((v35 & 0x400) == 0) {
            goto LABEL_75;
          }
          goto LABEL_135;
        }

        LOBYTE(v206) = v205;
        v212 = v164;
LABEL_334:
        v170 = v212 + 2;
        *v204 = v206;
        if (v212 + 2 <= v164) {
          goto LABEL_32;
        }
      }

      else
      {
        *v293 = v268 | v82;
        v170 = v293 + 1;
        v173 = v291;
      }

          free(v201);
          v44 = (uint64_t)v221;
          v70 = v218;
          if (!v173) {
            goto LABEL_137;
          }
LABEL_386:
          free(v173);
          goto LABEL_137;
        }

        v174 = (os_log_s *)__nwlog_obj();
        v175 = type[0];
        if (!os_log_type_enabled(v174, type[0])) {
          goto LABEL_385;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_http3_stream_add_input_handler";
        v176 = "%{public}s called with null parameters";
      }

      else
      {
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_http3_stream_add_input_handler";
        v173 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        v228[0] = 0;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          v174 = (os_log_s *)__nwlog_obj();
          v175 = type[0];
          if (!os_log_type_enabled(v174, type[0])) {
            goto LABEL_385;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_http3_stream_add_input_handler";
          v176 = "%{public}s called with null input_protocol";
        }

        else if (v228[0])
        {
          v199 = (char *)__nw_create_backtrace_string();
          v174 = (os_log_s *)__nwlog_obj();
          v175 = type[0];
          v200 = os_log_type_enabled(v174, type[0]);
          if (v199)
          {
            if (v200)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&buf[4] = "nw_http3_stream_add_input_handler";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v199;
              _os_log_impl( &dword_181A5C000,  v174,  v175,  "%{public}s called with null input_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v199);
            v44 = (uint64_t)v221;
            v70 = v218;
LABEL_385:
            if (!v173) {
              goto LABEL_137;
            }
            goto LABEL_386;
          }

          v44 = (uint64_t)v221;
          v70 = v218;
          if (!v200) {
            goto LABEL_385;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_http3_stream_add_input_handler";
          v176 = "%{public}s called with null input_protocol, no backtrace";
        }

        else
        {
          v174 = (os_log_s *)__nwlog_obj();
          v175 = type[0];
          v70 = v218;
          if (!os_log_type_enabled(v174, type[0])) {
            goto LABEL_385;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_http3_stream_add_input_handler";
          v176 = "%{public}s called with null input_protocol, backtrace limit exceeded";
        }
      }

LABEL_314:
                                free(v146);
                                goto LABEL_315;
                              }

                              if (v152)
                              {
                                else {
                                  v156 = off_189BBBBC0[v128];
                                }
                                *(_DWORD *)buf = 136446722;
                                v379 = "nw_flow_replay_select_output_handler";
                                v380 = 2082;
                                v381 = (char *)v156;
                                v382 = 2082;
                                v383 = "flow";
                                _os_log_impl( &dword_181A5C000,  v147,  v151,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
                              }
                            }

                            else
                            {
                              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                              networkd_settings_init();
                              v147 = (os_log_s *)(id)gLogObj;
                              v154 = v373[0];
                              if (os_log_type_enabled(v147, v373[0]))
                              {
                                else {
                                  v155 = off_189BBBBC0[v128];
                                }
                                *(_DWORD *)buf = 136446722;
                                v379 = "nw_flow_replay_select_output_handler";
                                v380 = 2082;
                                v381 = (char *)v155;
                                v382 = 2082;
                                v383 = "flow";
                                _os_log_impl( &dword_181A5C000,  v147,  v154,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
                              }
                            }
                          }

                          if (!v146) {
                            goto LABEL_315;
                          }
                          goto LABEL_314;
                        }

                        __nwlog_obj();
                        v291 = (void *)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)buf = 136446210;
                        v379 = "nw_endpoint_flow_receive_report";
                        v292 = (char *)_os_log_send_and_compose_impl();

                        type[0] = OS_LOG_TYPE_ERROR;
                        v373[0] = OS_LOG_TYPE_DEFAULT;
                        if (__nwlog_fault(v292, type, v373))
                        {
                          if (type[0] == OS_LOG_TYPE_FAULT)
                          {
                            __nwlog_obj();
                            v293 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                            v294 = type[0];
                            if (os_log_type_enabled(v293, type[0]))
                            {
                              *(_DWORD *)buf = 136446210;
                              v379 = "nw_endpoint_flow_receive_report";
                              _os_log_impl( &dword_181A5C000,  v293,  v294,  "%{public}s called with null child_flow",  buf,  0xCu);
                            }

                      goto LABEL_315;
                    }

                    if (!v203)
                    {
                      __nwlog_obj();
                      v149 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      v168 = type;
                      if (os_log_type_enabled(v149, type))
                      {
                        v169 = (const char *)*((void *)v113 + 2);
                        if (!v169) {
                          v169 = "invalid";
                        }
                        *(_DWORD *)buf = 136446722;
                        *(void *)&buf[4] = "__nw_protocol_connect";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = v169;
                        *(_WORD *)&buf[22] = 2048;
                        v208 = v113;
                        _os_log_impl( &dword_181A5C000,  v149,  v168,  "%{public}s protocol %{public}s (%p) has invalid connect callback, backtrace limit exceeded",  buf,  0x20u);
                      }

                      goto LABEL_314;
                    }

                    v159 = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    v149 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    v160 = type;
                    v161 = os_log_type_enabled(v149, type);
                    if (!v159)
                    {
                      if (v161)
                      {
                        v171 = (const char *)*((void *)v113 + 2);
                        if (!v171) {
                          v171 = "invalid";
                        }
                        *(_DWORD *)buf = 136446722;
                        *(void *)&buf[4] = "__nw_protocol_connect";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = v171;
                        *(_WORD *)&buf[22] = 2048;
                        v208 = v113;
                        _os_log_impl( &dword_181A5C000,  v149,  v160,  "%{public}s protocol %{public}s (%p) has invalid connect callback, no backtrace",  buf,  0x20u);
                      }

                      goto LABEL_314;
                    }

                    if (v161)
                    {
                      v162 = (const char *)*((void *)v113 + 2);
                      if (!v162) {
                        v162 = "invalid";
                      }
                      *(_DWORD *)buf = 136446978;
                      *(void *)&buf[4] = "__nw_protocol_connect";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = v162;
                      *(_WORD *)&buf[22] = 2048;
                      v208 = v113;
                      v209 = 2082;
                      v210 = (uint64_t)v159;
                      _os_log_impl( &dword_181A5C000,  v149,  v160,  "%{public}s protocol %{public}s (%p) has invalid connect callback, dumping backtrace:%{public}s",  buf,  0x2Au);
                    }

                    free(v159);
                  }

    goto LABEL_315;
  }

  v13 = nw_parameters_create();
  v14 = v13;
  if (v13)
  {
    stack = *((id *)v13 + 19);
    if (stack)
    {
      if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72514);
      }
      options = nw_protocol_create_options((void *)nw_protocol_copy_http_messaging_definition_definition);
      v16 = nw_http_messaging_options_copy_http1_options(options);

      v17 = nw_http_messaging_options_copy_http2_options(options);
      v18 = nw_http_messaging_options_copy_http3_options(options);

      if (v9 == &__block_literal_global_18956)
      {
        v21 = 0LL;
        goto LABEL_30;
      }

      v19 = (void *)nw_protocol_boringssl_copy_definition();
      v20 = nw_protocol_create_options(v19);

      if (v20)
      {
        v21 = v20;
        if (v18) {
          sec_protocol_options_add_transport_specific_application_protocol();
        }
        if (v17) {
          sec_protocol_options_add_transport_specific_application_protocol();
        }
        if (v16) {
          sec_protocol_options_add_transport_specific_application_protocol();
        }
        if (v9 != &__block_literal_global_91) {
          (*((void (**)(id, NWConcrete_nw_protocol_options *))v9 + 2))(v9, v21);
        }

LABEL_30:
        v26 = 0LL;
        if (v156 == (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_18956
          || v158 == (void (**)(void))&__block_literal_global_18956
          || !v18)
        {
          goto LABEL_41;
        }

        if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
          dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55294);
        }
        v27 = nw_protocol_create_options((void *)nw_protocol_copy_quic_stream_definition::quic_definition);
        if (v27)
        {
          v26 = v27;
          v28 = (void *)stack[3];
          stack[3] = v26;
          v29 = stack;

          v30 = nw_quic_stream_copy_shared_connection_options(v26);
          v31 = v21;
          nw_quic_connection_set_sec_protocol_options(v30, v31);

LABEL_41:
          if (v16)
          {
            if (v159 == (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_18956)
            {
              v32 = 0LL;
              goto LABEL_84;
            }
          }

          else
          {
            v32 = 0LL;
            if (v159 == (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_18956
              || !v17)
            {
              goto LABEL_84;
            }
          }

          v41 = nw_protocol_create_options((void *)g_tcp_definition);
          if (v41)
          {
            if (v26)
            {
              v32 = v41;
            }

            else
            {
              v32 = v41;
              v55 = (void *)stack[3];
              stack[3] = v32;
              v56 = stack;
            }

        free(v108);
        goto LABEL_363;
      }

      if (!v87) {
        goto LABEL_303;
      }
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v73 = "%{public}s called with null (*remaining >= length), no backtrace";
    }

    else
    {
      v71 = (os_log_s *)__nwlog_obj();
      v72 = __src;
      if (!os_log_type_enabled(v71, (os_log_type_t)__src)) {
        goto LABEL_303;
      }
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v73 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v71, v72, v73, buf, 0xCu);
    goto LABEL_303;
  }

  v13 = v12 != 1;
  if (v12 == 1) {
    v14 = 2;
  }
  else {
    v14 = 3;
  }
  if (a2) {
    v13 = v14;
  }
  *a5 = v13;
  v197 = a6 - 1;
  v201 = a5 + 1;
  v15 = MEMORY[0x1895F87A8];
  if (v12 == 1)
  {
    v19 = nw_http_metadata_copy_request(a1);
    if (v19)
    {
      v193[0] = v15;
      v193[1] = 0x40000000LL;
      v193[2] = ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke;
      v193[3] = &unk_189BBF890;
      v193[4] = &v198;
      v193[5] = &v194;
      v20 = v19;
      v21 = v193;
      _nw_http_request_access_method((uint64_t)v20, v21);

      v192[0] = v15;
      v192[1] = 0x40000000LL;
      v192[2] = ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke_16;
      v192[3] = &unk_189BBF8B8;
      v192[4] = &v198;
      v192[5] = &v194;
      v22 = v20;
      v23 = v192;
      _nw_http_request_access_scheme((uint64_t)v22, v23);

      v191[0] = v15;
      v191[1] = 0x40000000LL;
      v191[2] = ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke_18;
      v191[3] = &unk_189BBF8E0;
      v191[4] = &v198;
      v191[5] = &v194;
      v24 = v22;
      v25 = v191;
      _nw_http_request_access_authority((uint64_t)v24, v25);

      v190[0] = v15;
      v190[1] = 0x40000000LL;
      v190[2] = ___ZL36nw_http_fillout_binary_message_innerP20nw_protocol_metadatabPKhmPhm_block_invoke_20;
      v190[3] = &unk_189BBF908;
      v190[4] = &v198;
      v190[5] = &v194;
      v16 = v24;
      v26 = v190;
      _nw_http_request_access_path((uint64_t)v16, v26);

LABEL_26:
      os_release(v16);
      goto LABEL_27;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v205 = "nw_http_fillout_binary_message_inner";
    v78 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(__src) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (__src == 17)
    {
      v79 = (os_log_s *)__nwlog_obj();
      v80 = __src;
      if (!os_log_type_enabled(v79, (os_log_type_t)__src)) {
        goto LABEL_363;
      }
      *(_DWORD *)buf = 136446210;
      v205 = "nw_http_fillout_binary_message_inner";
      v81 = "%{public}s called with null request";
      goto LABEL_362;
    }

    if (type[0] == OS_LOG_TYPE_DEFAULT)
    {
      v79 = (os_log_s *)__nwlog_obj();
      v80 = __src;
      if (!os_log_type_enabled(v79, (os_log_type_t)__src)) {
        goto LABEL_363;
      }
      *(_DWORD *)buf = 136446210;
      v205 = "nw_http_fillout_binary_message_inner";
      v81 = "%{public}s called with null request, backtrace limit exceeded";
      goto LABEL_362;
    }

    v108 = (char *)__nw_create_backtrace_string();
    v79 = (os_log_s *)__nwlog_obj();
    v80 = __src;
    v109 = os_log_type_enabled(v79, (os_log_type_t)__src);
    if (!v108)
    {
      if (!v109) {
        goto LABEL_363;
      }
      *(_DWORD *)buf = 136446210;
      v205 = "nw_http_fillout_binary_message_inner";
      v81 = "%{public}s called with null request, no backtrace";
LABEL_362:
      _os_log_impl(&dword_181A5C000, v79, v80, v81, buf, 0xCu);
LABEL_363:
      if (v78) {
        free(v78);
      }
      goto LABEL_390;
    }

    if (v109)
    {
      *(_DWORD *)buf = 136446466;
      v205 = "nw_http_fillout_binary_message_inner";
      v206 = 2082;
      v207 = v108;
      v110 = "%{public}s called with null request, dumping backtrace:%{public}s";
LABEL_313:
      _os_log_impl(&dword_181A5C000, v79, v80, v110, buf, 0x16u);
      goto LABEL_314;
    }

    goto LABEL_314;
  }

  v16 = nw_http_metadata_copy_response(a1);
  status_code = nw_http_response_get_status_code(v16);
  if (status_code > 0x3F)
  {
    if ((status_code & 0xC000) != 0)
    {
      __src = bswap32(status_code | 0x80000000);
      v18 = 4LL;
    }

    else
    {
      __src = __rev16(status_code | 0x4000);
      v18 = 2LL;
    }
  }

  else
  {
    __src = status_code;
    v18 = 1LL;
  }

  v27 = (char *)v199[3];
  if (!v27)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v205 = "_http_safe_append";
    v82 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v178[0] = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v83 = (os_log_s *)__nwlog_obj();
      v84 = type[0];
      if (!os_log_type_enabled(v83, type[0])) {
        goto LABEL_370;
      }
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v85 = "%{public}s called with null buffer";
      goto LABEL_369;
    }

    if (v178[0] == OS_LOG_TYPE_DEFAULT)
    {
      v83 = (os_log_s *)__nwlog_obj();
      v84 = type[0];
      if (!os_log_type_enabled(v83, type[0])) {
        goto LABEL_370;
      }
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v85 = "%{public}s called with null buffer, backtrace limit exceeded";
      goto LABEL_369;
    }

    v111 = (char *)__nw_create_backtrace_string();
    v83 = (os_log_s *)__nwlog_obj();
    v84 = type[0];
    v112 = os_log_type_enabled(v83, type[0]);
    if (!v111)
    {
      if (!v112) {
        goto LABEL_370;
      }
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v85 = "%{public}s called with null buffer, no backtrace";
      goto LABEL_369;
    }

    if (v112)
    {
      *(_DWORD *)buf = 136446466;
      v205 = "_http_safe_append";
      v206 = 2082;
      v207 = v111;
      _os_log_impl( &dword_181A5C000,  v83,  v84,  "%{public}s called with null buffer, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v111);
LABEL_370:
    if (!v82) {
      goto LABEL_372;
    }
    goto LABEL_371;
  }

  v28 = v195;
  if (v195[3] < v18)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v205 = "_http_safe_append";
    v82 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v178[0] = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v83 = (os_log_s *)__nwlog_obj();
      v84 = type[0];
      if (!os_log_type_enabled(v83, type[0])) {
        goto LABEL_370;
      }
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v85 = "%{public}s called with null (*remaining >= length)";
      goto LABEL_369;
    }

    if (v178[0] == OS_LOG_TYPE_DEFAULT)
    {
      v83 = (os_log_s *)__nwlog_obj();
      v84 = type[0];
      if (!os_log_type_enabled(v83, type[0])) {
        goto LABEL_370;
      }
      *(_DWORD *)buf = 136446210;
      v205 = "_http_safe_append";
      v85 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
      goto LABEL_369;
    }

    v114 = (char *)__nw_create_backtrace_string();
    v83 = (os_log_s *)__nwlog_obj();
    v84 = type[0];
    v115 = os_log_type_enabled(v83, type[0]);
    if (v114)
    {
      if (v115)
      {
        *(_DWORD *)buf = 136446466;
        v205 = "_http_safe_append";
        v206 = 2082;
        v207 = v114;
        _os_log_impl( &dword_181A5C000,  v83,  v84,  "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v114);
      if (!v82)
      {
LABEL_372:
        v199[3] = 0LL;
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v205 = "nw_http_fillout_binary_message_inner";
        v153 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        v178[0] = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v153, type, v178))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            v154 = (os_log_s *)__nwlog_obj();
            v155 = type[0];
            if (os_log_type_enabled(v154, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              v205 = "nw_http_fillout_binary_message_inner";
              v156 = "%{public}s called with null cursor";
LABEL_385:
              _os_log_impl(&dword_181A5C000, v154, v155, v156, buf, 0xCu);
            }
          }

          else if (v178[0])
          {
            v157 = (char *)__nw_create_backtrace_string();
            v154 = (os_log_s *)__nwlog_obj();
            v155 = type[0];
            v158 = os_log_type_enabled(v154, type[0]);
            if (v157)
            {
              if (v158)
              {
                *(_DWORD *)buf = 136446466;
                v205 = "nw_http_fillout_binary_message_inner";
                v206 = 2082;
                v207 = v157;
                _os_log_impl( &dword_181A5C000,  v154,  v155,  "%{public}s called with null cursor, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v157);
              goto LABEL_386;
            }

            if (v158)
            {
              *(_DWORD *)buf = 136446210;
              v205 = "nw_http_fillout_binary_message_inner";
              v156 = "%{public}s called with null cursor, no backtrace";
              goto LABEL_385;
            }
          }

          else
          {
            v154 = (os_log_s *)__nwlog_obj();
            v155 = type[0];
            if (os_log_type_enabled(v154, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              v205 = "nw_http_fillout_binary_message_inner";
              v156 = "%{public}s called with null cursor, backtrace limit exceeded";
              goto LABEL_385;
            }
          }
        }

LABEL_469:
                            goto LABEL_470;
                          }

                          if (v373[0] == OS_LOG_TYPE_DEFAULT)
                          {
                            __nwlog_obj();
                            v293 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                            v313 = type[0];
                            if (os_log_type_enabled(v293, type[0]))
                            {
                              *(_DWORD *)buf = 136446210;
                              v379 = "nw_endpoint_flow_receive_report";
                              _os_log_impl( &dword_181A5C000,  v293,  v313,  "%{public}s called with null child_flow, backtrace limit exceeded",  buf,  0xCu);
                            }

                            goto LABEL_469;
                          }

                          v302 = (char *)__nw_create_backtrace_string();
                          __nwlog_obj();
                          v293 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                          v303 = type[0];
                          v304 = os_log_type_enabled(v293, type[0]);
                          if (!v302)
                          {
                            if (v304)
                            {
                              *(_DWORD *)buf = 136446210;
                              v379 = "nw_endpoint_flow_receive_report";
                              _os_log_impl( &dword_181A5C000,  v293,  v303,  "%{public}s called with null child_flow, no backtrace",  buf,  0xCu);
                            }

                            goto LABEL_469;
                          }

                          if (v304)
                          {
                            *(_DWORD *)buf = 136446466;
                            v379 = "nw_endpoint_flow_receive_report";
                            v380 = 2082;
                            v381 = v302;
                            _os_log_impl( &dword_181A5C000,  v293,  v303,  "%{public}s called with null child_flow, dumping backtrace:%{public}s",  buf,  0x16u);
                          }

                          free(v302);
                        }

    if (v170) {
      free(v170);
    }
LABEL_471:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_protocol_http1_input_available";
    v116 = (char *)_os_log_send_and_compose_impl();
    v398[0] = 16;
    v394[0] = OS_LOG_TYPE_DEFAULT;
    if (v398[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v117 = (os_log_s *)gLogObj;
      v118 = v398[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v398[0])) {
        goto LABEL_487;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_protocol_http1_input_available";
      v119 = "%{public}s called with null http1_connection";
      goto LABEL_486;
    }

    if (v394[0] == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v117 = (os_log_s *)gLogObj;
      v118 = v398[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v398[0])) {
        goto LABEL_487;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_protocol_http1_input_available";
      v119 = "%{public}s called with null http1_connection, backtrace limit exceeded";
      goto LABEL_486;
    }

    v156 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v117 = (os_log_s *)gLogObj;
    v118 = v398[0];
    v251 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v398[0]);
    if (!v156)
    {
      if (!v251) {
        goto LABEL_487;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_protocol_http1_input_available";
      v119 = "%{public}s called with null http1_connection, no backtrace";
      goto LABEL_486;
    }

    if (v251)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&buf[4] = "nw_protocol_http1_input_available";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v156;
      v158 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
      goto LABEL_479;
    }

    goto LABEL_480;
  }

  if (v4 != 3) {
    goto LABEL_471;
  }
  v9 = (uint64_t *)(handle + 16);
LABEL_17:
  v11 = *v9;
  if (!*v9) {
    goto LABEL_471;
  }
  v12 = *(void *)(v11 + 488);
  if (!v12)
  {
    if ((*(_BYTE *)(v8 + 376) & 1) == 0)
    {
      if ((*(_BYTE *)(v11 + 158) & 1) != 0) {
        return;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v21 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG)) {
        return;
      }
      v22 = *(void *)(v11 + 488);
      v23 = *(_DWORD *)(*(void *)(v11 + 480) + 372LL);
      v24 = *(_DWORD *)(v11 + 860);
      if (v22) {
        LODWORD(v22) = *(_DWORD *)(v22 + 424);
      }
      identifier = (nw_protocol_identifier *)"invalid";
      if (a2->identifier) {
        identifier = a2->identifier;
      }
      goto LABEL_59;
    }

    if ((*(_BYTE *)(v11 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v189 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v189, OS_LOG_TYPE_DEBUG))
        {
          v190 = *(void *)(v11 + 488);
          v191 = *(_DWORD *)(*(void *)(v11 + 480) + 372LL);
          v192 = *(_DWORD *)(v11 + 860);
          if (v190) {
            LODWORD(v190) = *(_DWORD *)(v190 + 424);
          }
          *(_DWORD *)buf = 136447746;
          *(void *)&buf[4] = "nw_protocol_http1_input_available";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v11 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(void *)&buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v191;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v192;
          *(_WORD *)&buf[44] = 1024;
          *(_DWORD *)&buf[46] = v190;
          *(_WORD *)&buf[50] = 2048;
          *(void *)&buf[52] = v11;
          _os_log_impl( &dword_181A5C000,  v189,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> called on idle server connection %p, triggering new flow",  buf,  0x3Cu);
        }
      }
    }

    if ((*(_BYTE *)(v8 + 376) & 1) == 0)
    {
      if ((*(_BYTE *)(v8 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v26 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
          {
            v27 = *(_DWORD *)(v8 + 372);
            *(_DWORD *)buf = 136446978;
            *(void *)&buf[4] = "nw_http1_new_flow_valid";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v8 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(void *)&buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v27;
            _os_log_impl( &dword_181A5C000,  v26,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> called when not in server mode, ignoring",  buf,  0x26u);
          }
        }
      }

      goto LABEL_238;
    }

    v30 = *(void ***)(v8 + 328);
    if (!v30)
    {
      if ((*(_BYTE *)(v11 + 158) & 1) != 0) {
        goto LABEL_238;
      }
      v32 = (os_log_s *)__nwlog_obj();
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_238;
      }
      v37 = *(void *)(v11 + 488);
      v38 = *(_DWORD *)(*(void *)(v11 + 480) + 372LL);
      v39 = *(_DWORD *)(v11 + 860);
      if (v37) {
        LODWORD(v37) = *(_DWORD *)(v37 + 424);
      }
      *(_DWORD *)buf = 136447490;
      *(void *)&buf[4] = "nw_http1_new_flow_valid";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v11 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(void *)&buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v38;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v39;
      *(_WORD *)&buf[44] = 1024;
      *(_DWORD *)&buf[46] = v37;
      v36 = "%{public}s %{public}s%s<i%u:c%u:s%u> called without listen handler, ignoring";
      goto LABEL_78;
    }

    v31 = *v30;
    if (v31 && *v31)
    {
      if (((*(unsigned __int16 *)(v11 + 872) | (*(unsigned __int8 *)(v11 + 874) << 16)) & 0x20000) != 0
        || (*(_WORD *)(v11 + 872) & 0x14) != 0 && *(void *)(v11 + 616))
      {
        if ((*(_BYTE *)(v11 + 158) & 1) != 0) {
          goto LABEL_238;
        }
        if (!gLogDatapath) {
          goto LABEL_238;
        }
        v32 = (os_log_s *)__nwlog_obj();
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_238;
        }
        v33 = *(void *)(v11 + 488);
        v34 = *(_DWORD *)(*(void *)(v11 + 480) + 372LL);
        v35 = *(_DWORD *)(v11 + 860);
        if (v33) {
          LODWORD(v33) = *(_DWORD *)(v33 + 424);
        }
        *(_DWORD *)buf = 136447490;
        *(void *)&buf[4] = "nw_http1_detect_next_request";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v11 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v34;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v35;
        *(_WORD *)&buf[44] = 1024;
        *(_DWORD *)&buf[46] = v33;
        v36 = "%{public}s %{public}s%s<i%u:c%u:s%u> not attempting to read more on connection awaiting a new flow, awaiti"
              "ng disconnect or remove_input_handler";
        goto LABEL_78;
      }

      *(void *)v394 = 0LL;
      v395 = v394;
      if (nw_protocol_get_input_frames(*(void *)(v11 + 32), v11, 1LL, 0xFFFFFFFFLL, 1LL, (uint64_t)v394))
      {
        if (!(*(_BYTE *)(v11 + 158) & 1 | (gLogDatapath == 0)))
        {
          v260 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v260, OS_LOG_TYPE_DEBUG))
          {
            v261 = *(void *)(v11 + 488);
            v262 = *(_DWORD *)(*(void *)(v11 + 480) + 372LL);
            v263 = *(_DWORD *)(v11 + 860);
            if (v261) {
              LODWORD(v261) = *(_DWORD *)(v261 + 424);
            }
            *(_DWORD *)buf = 136447490;
            *(void *)&buf[4] = "nw_http1_detect_next_request";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v11 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(void *)&buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v262;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v263;
            *(_WORD *)&buf[44] = 1024;
            *(_DWORD *)&buf[46] = v261;
            _os_log_impl( &dword_181A5C000,  v260,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> received a frame for non-idle connection, deferring new flow",  buf,  0x32u);
          }
        }

        v41 = *(_DWORD **)v394;
        if (!*(void *)v394)
        {
          if ((*(_BYTE *)(v11 + 158) & 1) != 0) {
            goto LABEL_237;
          }
          if (!gLogDatapath) {
            goto LABEL_237;
          }
          v86 = (os_log_s *)__nwlog_obj();
          if (!os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_237;
          }
          v87 = *(void *)(v11 + 488);
          v88 = *(_DWORD *)(*(void *)(v11 + 480) + 372LL);
          v89 = *(_DWORD *)(v11 + 860);
          if (v87) {
            LODWORD(v87) = *(_DWORD *)(v87 + 424);
          }
          *(_DWORD *)buf = 136447490;
          *(void *)&buf[4] = "nw_http1_connection_move_frame_array_to_unprocessed_input_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v11 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(void *)&buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v88;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v89;
          *(_WORD *)&buf[44] = 1024;
          *(_DWORD *)&buf[46] = v87;
          v90 = "%{public}s %{public}s%s<i%u:c%u:s%u> no additional body frames to move";
          v91 = v86;
          v92 = 50;
          goto LABEL_527;
        }

        if (gLogDatapath)
        {
          v279 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v279, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136447746;
            *(void *)&buf[4] = "nw_http1_move_frame_array";
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v41;
            *(_WORD *)&buf[22] = 2048;
            *(void *)&buf[24] = v394;
            *(_WORD *)&buf[32] = 2048;
            *(void *)&buf[34] = v11 + 616;
            *(_WORD *)&buf[42] = 1024;
            *(_DWORD *)&buf[44] = 1;
            *(_WORD *)&buf[48] = 1024;
            *(_DWORD *)&buf[50] = 1;
            *(_WORD *)&buf[54] = 1024;
            *(_DWORD *)&buf[56] = 1;
            _os_log_impl( &dword_181A5C000,  v279,  OS_LOG_TYPE_DEBUG,  "%{public}s called: initial frame %p, source %p, destination %p, temp %u, forwards %u, append %u",  buf,  0x3Cu);
          }
        }

        v42 = 0;
        *(void *)v398 = 0LL;
        *(void *)&v398[8] = v398;
        *(void *)&v40 = 136447234LL;
        do
        {
          v45 = (_DWORD *)*((void *)v41 + 4);
          if (!v45 && !*((void *)v41 + 5)) {
            v45 = 0LL;
          }
          if (gLogDatapath)
          {
            v387 = v40;
            log = (os_log_s *)__nwlog_obj();
            v47 = os_log_type_enabled(log, OS_LOG_TYPE_DEBUG);
            v40 = v387;
            if (v47)
            {
              v48 = v41[13];
              if (v48) {
                v48 -= v41[14] + v41[15];
              }
              if (v45)
              {
                v49 = v45[13];
                if (v49) {
                  v49 -= v45[14] + v45[15];
                }
              }

              else
              {
                v49 = 0;
              }

              *(_DWORD *)buf = v387;
              *(void *)&buf[4] = "nw_http1_move_frame_array";
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v41;
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&buf[24] = v48;
              *(_WORD *)&buf[28] = 2048;
              *(void *)&buf[30] = v45;
              *(_WORD *)&buf[38] = 1024;
              *(_DWORD *)&buf[40] = v49;
              _os_log_impl( &dword_181A5C000,  log,  OS_LOG_TYPE_DEBUG,  "%{public}s current frame: (%p, %u bytes), next frame: (%p, %u bytes)",  buf,  0x2Cu);
              v40 = v387;
            }
          }

          v46 = *((void *)v41 + 4);
          v43 = (void *)*((void *)v41 + 5);
          if (v46)
          {
            *(void *)(v46 + 40) = v43;
            v43 = (void *)*((void *)v41 + 5);
          }

          else
          {
            v395 = (os_log_type_t *)*((void *)v41 + 5);
          }

          *v43 = v46;
          v44 = *(void **)&v398[8];
          *((void *)v41 + 4) = 0LL;
          *((void *)v41 + 5) = v44;
          *v44 = v41;
          *(void *)&v398[8] = v41 + 8;
          ++v42;
          v41 = v45;
        }

        while (v45);
        if (!v42) {
          goto LABEL_236;
        }
        if (gLogDatapath)
        {
          v391 = v40;
          v286 = (os_log_s *)__nwlog_obj();
          v287 = os_log_type_enabled(v286, OS_LOG_TYPE_DEBUG);
          v40 = v391;
          if (v287)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&buf[4] = "nw_http1_move_frame_array";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v42;
            _os_log_impl( &dword_181A5C000,  v286,  OS_LOG_TYPE_DEBUG,  "%{public}s moving %u frames from temp array to destination array",  buf,  0x12u);
            v40 = v391;
          }
        }

        v60 = *(_DWORD **)v398;
        v61 = v42;
        if (*(void *)v398)
        {
          v61 = v42;
          do
          {
            v64 = v60 + 8;
            v63 = (_DWORD *)*((void *)v60 + 4);
            if (!v63 && !*((void *)v60 + 5)) {
              v63 = 0LL;
            }
            if (gLogDatapath)
            {
              v389 = v40;
              logb = (os_log_s *)__nwlog_obj();
              v67 = os_log_type_enabled(logb, OS_LOG_TYPE_DEBUG);
              v40 = v389;
              if (v67)
              {
                v68 = v60[13];
                if (v68) {
                  v68 -= v60[14] + v60[15];
                }
                if (v63)
                {
                  v69 = v63[13];
                  if (v69) {
                    v69 -= v63[14] + v63[15];
                  }
                }

                else
                {
                  v69 = 0;
                }

                *(_DWORD *)buf = v389;
                *(void *)&buf[4] = "nw_http1_move_frame_array";
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v60;
                *(_WORD *)&buf[22] = 1024;
                *(_DWORD *)&buf[24] = v68;
                *(_WORD *)&buf[28] = 2048;
                *(void *)&buf[30] = v63;
                *(_WORD *)&buf[38] = 1024;
                *(_DWORD *)&buf[40] = v69;
                _os_log_impl( &dword_181A5C000,  logb,  OS_LOG_TYPE_DEBUG,  "%{public}s current frame: (%p, %u bytes), next frame: (%p, %u bytes)",  buf,  0x2Cu);
                v40 = v389;
              }
            }

            v65 = *((void *)v60 + 4);
            v66 = (void *)*((void *)v60 + 5);
            if (v65)
            {
              *(void *)(v65 + 40) = v66;
              v66 = (void *)*((void *)v60 + 5);
            }

            else
            {
              *(void *)&v398[8] = *((void *)v60 + 5);
            }

            *v66 = v65;
            *v64 = 0LL;
            *((void *)v60 + 5) = 0LL;
            v62 = *(void **)(v11 + 624);
            *((void *)v60 + 5) = v62;
            *v62 = v60;
            *(void *)(v11 + 624) = v64;
            --v61;
            v60 = v63;
          }

          while (v63);
          if (!v61)
          {
LABEL_236:
            if (!gLogDatapath) {
              goto LABEL_237;
            }
            v280 = (os_log_s *)__nwlog_obj();
            if (!os_log_type_enabled(v280, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_237;
            }
            *(_DWORD *)buf = 136446978;
            *(void *)&buf[4] = "nw_http1_move_frame_array";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v42;
            *(_WORD *)&buf[18] = 2048;
            *(void *)&buf[20] = v394;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = v11 + 616;
            v90 = "%{public}s moved %u frames from %p to %p";
            v91 = v280;
            v92 = 38;
LABEL_527:
            _os_log_impl(&dword_181A5C000, v91, OS_LOG_TYPE_DEBUG, v90, buf, v92);
LABEL_237:
            *(_BYTE *)(v11 + 874) = (*(unsigned __int16 *)(v11 + 872) | (*(unsigned __int8 *)(v11 + 874) << 16) | 0x20000u) >> 16;
            goto LABEL_238;
          }
        }

        __nwlog_obj();
        *(_DWORD *)buf = 136446466;
        *(void *)&buf[4] = "nw_http1_move_frame_array";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v61;
        v100 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v396 = 0;
        if (__nwlog_fault(v100, &type, &v396))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            v101 = (os_log_s *)__nwlog_obj();
            v102 = type;
            if (!os_log_type_enabled(v101, type)) {
              goto LABEL_234;
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&buf[4] = "nw_http1_move_frame_array";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v61;
            v103 = "%{public}s failed to deliver all temp frames, remaining %u frames";
            goto LABEL_233;
          }

          if (!v396)
          {
            v101 = (os_log_s *)__nwlog_obj();
            v102 = type;
            if (!os_log_type_enabled(v101, type)) {
              goto LABEL_234;
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&buf[4] = "nw_http1_move_frame_array";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v61;
            v103 = "%{public}s failed to deliver all temp frames, remaining %u frames, backtrace limit exceeded";
            goto LABEL_233;
          }

          v108 = (char *)__nw_create_backtrace_string();
          v101 = (os_log_s *)__nwlog_obj();
          v102 = type;
          v109 = os_log_type_enabled(v101, type);
          if (v108)
          {
            if (v109)
            {
              *(_DWORD *)buf = 136446722;
              *(void *)&buf[4] = "nw_http1_move_frame_array";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v61;
              *(_WORD *)&buf[18] = 2082;
              *(void *)&buf[20] = v108;
              _os_log_impl( &dword_181A5C000,  v101,  v102,  "%{public}s failed to deliver all temp frames, remaining %u frames, dumping backtrace:%{public}s",  buf,  0x1Cu);
            }

            free(v108);
            goto LABEL_234;
          }

          if (v109)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&buf[4] = "nw_http1_move_frame_array";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v61;
            v103 = "%{public}s failed to deliver all temp frames, remaining %u frames, no backtrace";
LABEL_233:
            _os_log_impl(&dword_181A5C000, v101, v102, v103, buf, 0x12u);
          }
        }

      if (v321) {
        free(v321);
      }
      LODWORD(v311) = 0;
LABEL_472:

      break;
    }

    used_timestamps = v309->used_timestamps;
    if (!used_timestamps) {
      goto LABEL_472;
    }
    v314 = 0LL;
    v315 = 0LL;
    LODWORD(v316) = -1;
    v317 = v311;
    while (1)
    {
      v319 = v309->timestamps;
      if (*(unsigned __int16 *)((char *)&v319->var1.event + v314) == 2
        && *(unsigned __int16 *)((char *)&v319->var1.domain + v314) == 6)
      {
        break;
      }

      v318 = v317;
LABEL_445:
      ++v315;
      v314 += 16LL;
      v317 = v318;
      if (v315 >= used_timestamps) {
        goto LABEL_451;
      }
    }

    v318 = (v317 - 1);
    v316 = nw_delta_nanos(v309->start_time, *(unint64_t *)((char *)&v319->var0 + v314)) / 0xF4240uLL;
    if ((_DWORD)v317 == -1)
    {
      used_timestamps = v309->used_timestamps;
      v318 = 0xFFFFFFFFLL;
      goto LABEL_445;
    }

              if (v228) {
                free(v228);
              }
              v36 = v227;
              v49 = MEMORY[0x1895F87A8];
              v86 = (nw_protocol *)*p_output_handler;
              if ((*p_output_handler & 0x40) == 0) {
                goto LABEL_162;
              }
LABEL_138:
              if ((BYTE5(a1[3].identifier) & 2) != 0)
              {
                v87 = v281;
                if (gLogDatapath)
                {
                  v182 = (os_log_s *)__nwlog_obj();
                  v183 = os_log_type_enabled(v182, OS_LOG_TYPE_DEBUG);
                  v87 = v281;
                  if (v183)
                  {
                    *(_DWORD *)v323 = 136446722;
                    *(void *)&v323[4] = "nw_protocol_test_get_input_frames";
                    *(_WORD *)&v323[12] = 2082;
                    *(void *)&v323[14] = a1 + 2;
                    *(_WORD *)&v323[22] = 1024;
                    *(_DWORD *)v324 = v279;
                    _os_log_impl( &dword_181A5C000,  v182,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s Seen disconnected, performing a final read with the original maximum bytes %u",  v323,  0x1Cu);
                    v87 = v281;
                  }
                }

                *(void *)v323 = 0LL;
                *(void *)&v323[8] = v323;
                *(void *)&v323[16] = 0x3802000000LL;
                *(void *)v324 = __Block_byref_object_copy__24;
                *(void *)&v324[8] = __Block_byref_object_dispose__25;
                *(void *)&v324[16] = 0LL;
                v325 = &v324[16];
                if (!v87) {
                  goto LABEL_161;
                }
                v88 = v281->callbacks;
                if (!v88 || !v88->get_output_frames) {
                  goto LABEL_161;
                }
                v89 = v49;
                v90 = v281->handle;
                if (v90 == &nw_protocol_ref_counted_handle)
                {
                  v91 = v281[1].callbacks;
                  if (v91) {
                    v281[1].callbacks = (nw_protocol_callbacks *)((char *)&v91->add_input_handler + 1);
                  }
                }

                v92 = a1->handle;
                if (v92 == &nw_protocol_ref_counted_handle)
                {
                  v93 = a1[1].callbacks;
                  if (v93) {
                    a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v93->add_input_handler + 1);
                  }
                }

                get_input_frames = (uint64_t (*)(nw_protocol *, nw_protocol *))v88->get_input_frames;
                if (get_input_frames)
                {
                  v95 = get_input_frames(v281, a1);
LABEL_151:
                  v96 = v92 == &nw_protocol_ref_counted_handle;
                  v49 = v89;
                  if (v96 && a1->handle == &nw_protocol_ref_counted_handle)
                  {
                    v132 = a1[1].callbacks;
                    if (v132)
                    {
                      v133 = (nw_protocol_callbacks *)((char *)v132 - 1);
                      a1[1].callbacks = v133;
                      if (!v133)
                      {
                        v134 = *(void (***)(void))a1[1].flow_id;
                        if (v134)
                        {
                          *(void *)a1[1].flow_id = 0LL;
                          v134[2](v134);
                          _Block_release(v134);
                        }

                        if ((a1[1].flow_id[8] & 1) != 0)
                        {
                          v135 = *(const void **)a1[1].flow_id;
                          if (v135) {
                            _Block_release(v135);
                          }
                        }

                        free(a1);
                      }
                    }
                  }

                  v97 = v281;
                  if (v90 == &nw_protocol_ref_counted_handle && v281->handle == &nw_protocol_ref_counted_handle)
                  {
                    v136 = v281[1].callbacks;
                    if (v136)
                    {
                      v137 = (nw_protocol_callbacks *)((char *)v136 - 1);
                      v281[1].callbacks = v137;
                      if (!v137)
                      {
                        v138 = *(void (***)(void))v281[1].flow_id;
                        if (v138)
                        {
                          *(void *)v281[1].flow_id = 0LL;
                          v138[2](v138);
                          _Block_release(v138);
                          v97 = v281;
                        }

                        if ((v97[1].flow_id[8] & 1) != 0)
                        {
                          v139 = *(const void **)v97[1].flow_id;
                          if (v139)
                          {
                            _Block_release(v139);
                            v97 = v281;
                          }
                        }

                        free(v97);
                      }
                    }
                  }

                  if (v95)
                  {
                    if (gLogDatapath)
                    {
                      v190 = (os_log_s *)__nwlog_obj();
                      if (os_log_type_enabled(v190, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)v330 = 136446722;
                        *(void *)&v330[4] = "nw_protocol_test_get_input_frames";
                        v331 = 2082;
                        v332 = a1 + 2;
                        v333 = 1024;
                        LODWORD(v334) = v95;
                        _os_log_impl( &dword_181A5C000,  v190,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s Got back %u final frames",  v330,  0x1Cu);
                      }
                    }

                    v289[0] = v89;
                    v289[1] = 0x40000000LL;
                    v290 = (uint64_t (*)(void *))___ZL33nw_protocol_test_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_32;
                    v291 = &unk_189BC8490;
                    v292 = v323;
                    v293 = &v315;
                    v294 = a6;
                    v98 = *(void *)(*(void *)&v323[8] + 40LL);
                    do
                    {
                      if (!v98) {
                        break;
                      }
                      v99 = *(void *)(v98 + 32);
                      v100 = v290(v289);
                      v98 = v99;
                    }

                    while ((v100 & 1) != 0);
                  }

LABEL_470:
                        if (!v292)
                        {
LABEL_472:
                          v126 = 0LL;
                          goto LABEL_334;
                        }

      if (v149) {
        free(v149);
      }
      goto LABEL_162;
    }

    __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "__nw_protocol_error";
    v75 = _os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v258[0]) = 0;
    if (__nwlog_fault((const char *)v75, type, v258))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v167 = (os_log_s *)__nwlog_obj();
        v168 = type[0];
        if (!os_log_type_enabled(v167, type[0])) {
          goto LABEL_498;
        }
        LODWORD(buf[0]) = 136446210;
        *(void *)((char *)buf + 4) = "__nw_protocol_error";
        v169 = "%{public}s called with null other_protocol";
        goto LABEL_497;
      }

      if (!LOBYTE(v258[0]))
      {
        v167 = (os_log_s *)__nwlog_obj();
        v168 = type[0];
        if (!os_log_type_enabled(v167, type[0])) {
          goto LABEL_498;
        }
        LODWORD(buf[0]) = 136446210;
        *(void *)((char *)buf + 4) = "__nw_protocol_error";
        v169 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_497;
      }

      v191 = (char *)__nw_create_backtrace_string();
      v167 = (os_log_s *)__nwlog_obj();
      v168 = type[0];
      v192 = os_log_type_enabled(v167, type[0]);
      if (v191)
      {
        if (v192)
        {
          LODWORD(buf[0]) = 136446466;
          *(void *)((char *)buf + 4) = "__nw_protocol_error";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = v191;
          _os_log_impl( &dword_181A5C000,  v167,  v168,  "%{public}s called with null other_protocol, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x16u);
        }

        free(v191);
        if (!v75) {
          goto LABEL_217;
        }
        goto LABEL_216;
      }

      if (v192)
      {
        LODWORD(buf[0]) = 136446210;
        *(void *)((char *)buf + 4) = "__nw_protocol_error";
        v169 = "%{public}s called with null other_protocol, no backtrace";
LABEL_497:
        _os_log_impl(&dword_181A5C000, v167, v168, v169, (uint8_t *)buf, 0xCu);
      }
    }

      free(v194);
      goto LABEL_471;
    }

    if (v231)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_http1_connection_create";
      v197 = "%{public}s called with null parameters, no backtrace";
LABEL_468:
      _os_log_impl(&dword_181A5C000, v195, v196, v197, buf, 0xCu);
      goto LABEL_469;
    }

    goto LABEL_469;
  }

  v16 = calloc(1uLL, 0x370uLL);
  if (!v16)
  {
    v198 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v198, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    *(void *)&buf[4] = "strict_calloc";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = 1LL;
    *(_WORD *)&buf[22] = 2048;
    v268 = 880LL;
    v199 = (void *)_os_log_send_and_compose_impl();
    if (__nwlog_abort((uint64_t)v199))
    {
      __break(1u);
      return;
    }

    free(v199);
    v13 = v257;
  }

  bzero(v16, 0x370uLL);
  if (nw_protocol_http1_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_39881);
  }
  *((void *)v16 + 2) = &nw_protocol_http1_identifier::http1_protocol_identifier;
  *((void *)v16 + 3) = &nw_protocol_http1_get_callbacks(void)::http1_protocol_callbacks;
  *((_DWORD *)v16 + 46) = 3;
  *((void *)v16 + 22) = v16;
  *((void *)v16 + 5) = v16 + 10;
  *((void *)v16 + 60) = v9;
  nw_protocol_set_output_handler((uint64_t)v16, (uint64_t)v13);
  v17 = os_retain(v14);
  v18 = *((_BYTE *)v16 + 760);
  if ((v18 & 1) != 0)
  {
    v19 = (void *)*((void *)v16 + 94);
    if (v19)
    {
      os_release(v19);
      v18 = *((_BYTE *)v16 + 760);
    }
  }

  *((void *)v16 + 94) = v17;
  *((_BYTE *)v16 + 760) = v18 | 1;
  v20 = os_retain(v15);
  v21 = *((_BYTE *)v16 + 744);
  v256 = v4;
  if ((v21 & 1) != 0)
  {
    v22 = (void *)*((void *)v16 + 92);
    if (v22)
    {
      os_release(v22);
      v21 = *((_BYTE *)v16 + 744);
    }
  }

  *((void *)v16 + 92) = v20;
  *((_BYTE *)v16 + 744) = v21 | 1;
  v23 = v15;
  v24 = *(id *)(v23[13] + 136LL);

  v25 = *((_BYTE *)v16 + 504);
  if ((v25 & 1) != 0)
  {
    v26 = (void *)*((void *)v16 + 62);
    if (v26)
    {
      os_release(v26);
      v25 = *((_BYTE *)v16 + 504);
    }
  }

  *((void *)v16 + 62) = v24;
  *((_BYTE *)v16 + 504) = v25 | 1;
  v27 = MEMORY[0x1895F87A8];
  *((void *)v16 + 24) = *(void *)(v9 + 192);
  *(void *)type = v27;
  v261 = 0x40000000LL;
  v262 = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke;
  v263 = &__block_descriptor_tmp_40_39882;
  v264 = v16;
  metadata = nw_http_connection_create_metadata(v24, type, 0LL);
  v29 = *((_BYTE *)v16 + 776);
  if ((v29 & 1) != 0)
  {
    v30 = (void *)*((void *)v16 + 96);
    if (v30)
    {
      os_release(v30);
      v29 = *((_BYTE *)v16 + 776);
    }
  }

  *((void *)v16 + 96) = metadata;
  *((_BYTE *)v16 + 776) = v29 | 1;
  nw_http_connection_metadata_set_version(metadata, 3);
  nw_http_connection_metadata_set_shared_connection_pool_metadata(*((void **)v16 + 96), *(void **)(v9 + 312));
  *((void *)v16 + 77) = 0LL;
  *((void *)v16 + 78) = (char *)v16 + 616;
  *((void *)v16 + 79) = 0LL;
  *((void *)v16 + 80) = (char *)v16 + 632;
  *((void *)v16 + 81) = 0LL;
  *((void *)v16 + 82) = (char *)v16 + 648;
  *((void *)v16 + 83) = 0LL;
  *((void *)v16 + 84) = (char *)v16 + 664;
  *((void *)v16 + 86) = (char *)v16 + 680;
  *((void *)v16 + 85) = 0LL;
  nw_frame_cache_init((uint64_t)v16 + 696, (uint64_t)v16, 256, 0x40000, 16);
  v31 = *((void *)v16 + 60);
  if (v31)
  {
    *(_OWORD *)((char *)v16 + 360) = 0u;
    *(_OWORD *)((char *)v16 + 376) = 0u;
    *(_OWORD *)((char *)v16 + 392) = 0u;
    *(_OWORD *)((char *)v16 + 408) = 0u;
    *(_OWORD *)((char *)v16 + 424) = 0u;
    *(_OWORD *)((char *)v16 + 440) = 0u;
    *(_OWORD *)((char *)v16 + 328) = 0u;
    *(_OWORD *)((char *)v16 + 344) = 0u;
    *((void *)v16 + 59) = nw_http1_on_reset;
    *((void *)v16 + 37) = nw_http1_on_message_begin;
    *((void *)v16 + 38) = nw_http1_on_url;
    *((void *)v16 + 48) = nw_http1_on_message_complete;
    *((void *)v16 + 49) = nw_http1_on_url_complete;
    *((void *)v16 + 39) = nw_http1_on_status;
    *((void *)v16 + 40) = nw_http1_on_method;
    *((void *)v16 + 50) = nw_http1_on_status_complete;
    *((void *)v16 + 51) = nw_http1_on_method_complete;
    *((void *)v16 + 42) = nw_http1_on_header_field;
    *((void *)v16 + 43) = nw_http1_on_header_value;
    *((void *)v16 + 53) = nw_http1_on_header_field_complete;
    *((void *)v16 + 54) = nw_http1_on_header_value_complete;
    *((void *)v16 + 46) = nw_http1_on_headers_complete;
    *((void *)v16 + 47) = nw_http1_on_body;
    *((void *)v16 + 57) = nw_http1_on_chunk_header;
    *((void *)v16 + 58) = nw_http1_on_chunk_complete;
    v32 = *(_BYTE *)(v31 + 376);
    *(_OWORD *)((char *)v16 + 248) = 0u;
    *(_OWORD *)((char *)v16 + 200) = 0u;
    *(_OWORD *)((char *)v16 + 264) = 0u;
    *(_OWORD *)((char *)v16 + 232) = 0u;
    *(_OWORD *)((char *)v16 + 216) = 0u;
    if ((v32 & 1) != 0) {
      v33 = 1;
    }
    else {
      v33 = 2;
    }
    *((_BYTE *)v16 + 272) = v33;
    *((void *)v16 + 35) = 0LL;
    *((void *)v16 + 36) = (char *)v16 + 296;
    *((_WORD *)v16 + 139) = 16131;
    *((void *)v16 + 31) = v16;
    *((void *)v16 + 32) = 238LL;
    if ((*((_BYTE *)v16 + 158) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v34 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        v35 = *((void *)v16 + 61);
        v36 = *(_DWORD *)(*((void *)v16 + 60) + 372LL);
        v37 = *((_DWORD *)v16 + 215);
        if (v35) {
          LODWORD(v35) = *(_DWORD *)(v35 + 424);
        }
        *(_DWORD *)buf = 136448258;
        *(void *)&buf[4] = "nw_http1_connection_log_parser_version";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = (char *)v16 + 74;
        *(_WORD *)&buf[22] = 2080;
        v268 = (uint64_t)" ";
        v269 = 1024;
        *(_DWORD *)v270 = v36;
        *(_WORD *)&v270[4] = 1024;
        *(_DWORD *)&v270[6] = v37;
        LOWORD(v271) = 1024;
        *(_DWORD *)((char *)&v271 + 2) = v35;
        HIWORD(v271) = 1024;
        *(_DWORD *)v272 = 9;
        *(_WORD *)&v272[4] = 1024;
        *(_DWORD *)&v272[6] = 2;
        *(_WORD *)v273 = 1024;
        *(_DWORD *)&v273[2] = 1;
        _os_log_impl( &dword_181A5C000,  v34,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> using http parser v%u.%u.%u",  buf,  0x44u);
      }
    }

    goto LABEL_54;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&buf[4] = "nw_http1_connection_parser_init";
  v200 = (char *)_os_log_send_and_compose_impl();
  v266 = OS_LOG_TYPE_ERROR;
  v265 = 0;
  if (__nwlog_fault(v200, &v266, &v265))
  {
    if (v266 == OS_LOG_TYPE_FAULT)
    {
      v201 = (os_log_s *)__nwlog_obj();
      v202 = v266;
      if (os_log_type_enabled(v201, v266))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_http1_connection_parser_init";
        v203 = "%{public}s called with null http1_connection->protocol_http1";
LABEL_506:
        _os_log_impl(&dword_181A5C000, v201, v202, v203, buf, 0xCu);
      }
    }

    else if (v265)
    {
      v232 = (char *)__nw_create_backtrace_string();
      v201 = (os_log_s *)__nwlog_obj();
      v202 = v266;
      v233 = os_log_type_enabled(v201, v266);
      if (v232)
      {
        if (v233)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&buf[4] = "nw_http1_connection_parser_init";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v232;
          _os_log_impl( &dword_181A5C000,  v201,  v202,  "%{public}s called with null http1_connection->protocol_http1, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v232);
        goto LABEL_507;
      }

      if (v233)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_http1_connection_parser_init";
        v203 = "%{public}s called with null http1_connection->protocol_http1, no backtrace";
        goto LABEL_506;
      }
    }

    else
    {
      v201 = (os_log_s *)__nwlog_obj();
      v202 = v266;
      if (os_log_type_enabled(v201, v266))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_http1_connection_parser_init";
        v203 = "%{public}s called with null http1_connection->protocol_http1, backtrace limit exceeded";
        goto LABEL_506;
      }
    }
  }

LABEL_471:
                        free(v292);
                        goto LABEL_472;
                      }

                      if ((v73 & 0x20) == 0)
                      {
                        if (__nwlog_connection_log::onceToken != -1) {
                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                        }
                        v98 = (os_log_s *)(id)gconnectionLogObj;
                        if (os_log_type_enabled(v98, OS_LOG_TYPE_DEBUG))
                        {
                          v99 = v72;

                          v100 = v99;
                          v101 = (v359[67] & 1) == 0;

                          if (v101) {
                            v102 = "";
                          }
                          else {
                            v102 = "dry-run ";
                          }
                          v103 = nw_endpoint_handler_copy_endpoint(v100);
                          v104 = nw_endpoint_get_logging_description(v103);
                          v105 = v100;
                          v106 = v105;
                          v107 = v105[30];
                          else {
                            v108 = off_189BBBBF0[v107];
                          }
                          v342 = (os_log_t)v108;

                          v112 = v106;
                          v113 = v112;
                          v114 = "path";
                          switch(v349[29])
                          {
                            case 0u:
                              break;
                            case 1u:
                              v114 = "resolver";
                              break;
                            case 2u:
                              v114 = nw_endpoint_flow_mode_string(v112[31]);
                              break;
                            case 3u:
                              v114 = "proxy";
                              break;
                            case 4u:
                              v114 = "fallback";
                              break;
                            case 5u:
                              v114 = "transform";
                              break;
                            default:
                              v114 = "unknown-mode";
                              break;
                          }

                          v157 = v72;
                          v158 = v113;
                          os_unfair_lock_lock((os_unfair_lock_t)v158 + 28);
                          v159 = v158[8];
                          os_unfair_lock_unlock((os_unfair_lock_t)v158 + 28);

                          v72 = v157;
                          v160 = v99 + 168;
                          v161 = v159;
                          v162 = v161;
                          v163 = (const char *)*((void *)v355 + 94);
                          if (v163)
                          {
                            v163 = (const char *)*((void *)v163 + 2);
                            if (!v163) {
                              v163 = "invalid";
                            }
                          }

                          *(_DWORD *)buf = 136448002;
                          v379 = "nw_endpoint_flow_receive_report";
                          v380 = 2082;
                          v381 = v160;
                          v382 = 2082;
                          v383 = v102;
                          v384 = 2082;
                          v385 = (void *)v104;
                          v386 = 2082;
                          v387 = v342;
                          v388 = 2082;
                          v389 = (void *)v114;
                          v390 = 2114;
                          v391 = v161;
                          v392 = 2082;
                          v393 = v163;
                          _os_log_impl( &dword_181A5C000,  v98,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] connecting %{public}s to child's shared protocol",  buf,  0x52u);
                        }
                      }

                      v164 = nw_endpoint_handler_copy_flow(loga);
                      v126 = v164;
                      if (v164)
                      {
                        v165 = *((void *)v355 + 94);
                        if (v165)
                        {
                          v166 = (char *)v164 + 376;
                          if ((NWConcrete_nw_endpoint_mode_handler *)((char *)v164 + 376) != (NWConcrete_nw_endpoint_mode_handler *)v165)
                          {
                            v167 = (void *)*((void *)v164 + 50);
                            if (v167 && *v167)
                            {
                              if ((nw_protocol_add_input_handler((uint64_t)v164 + 376, v165) & 1) != 0)
                              {
                                v168 = (void *)*((void *)v126 + 68);
                                *((void *)v126 + 68) = v126;

                                goto LABEL_345;
                              }
                            }

                            else
                            {
                              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                              networkd_settings_init();
                              v173 = (os_log_s *)(id)gLogObj;
                              if (os_log_type_enabled(v173, OS_LOG_TYPE_ERROR))
                              {
                                *(_DWORD *)buf = 136446466;
                                v379 = "nw_protocol_utilities_add_input_handler";
                                v380 = 2048;
                                v381 = v166;
                                _os_log_impl( &dword_181A5C000,  v173,  OS_LOG_TYPE_ERROR,  "%{public}s Unable to invoke add_input_handler on protocol %p because it is not valid",  buf,  0x16u);
                              }
                            }

    if (v169) {
      free(v169);
    }
    goto LABEL_91;
  }

  nw_frame_effective_length((uint64_t)a1);
  v8 = os_buflet_set_data_length();
  if (!v8) {
    goto LABEL_66;
  }
  v9 = v8;
  if (*((void *)a3 + 17))
  {
    if (os_channel_is_defunct())
    {
      nw_channel_handle_defunct((uint64_t)a3);
      goto LABEL_66;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446466;
    *(void *)&buf[4] = "nw_channel_finalize_output_frame";
    v221 = 1024;
    *(_DWORD *)v222 = v9;
    v165 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v223) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (v223 == 17)
    {
      v166 = (os_log_s *)__nwlog_obj();
      v167 = v223;
      if (!os_log_type_enabled(v166, (os_log_type_t)v223)) {
        goto LABEL_466;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&buf[4] = "nw_channel_finalize_output_frame";
      v221 = 1024;
      *(_DWORD *)v222 = v9;
      v168 = "%{public}s os_buflet_set_data_length failed %{darwin.errno}d";
    }

    else if (type[0])
    {
      v179 = (char *)__nw_create_backtrace_string();
      v166 = (os_log_s *)__nwlog_obj();
      v167 = v223;
      v180 = os_log_type_enabled(v166, (os_log_type_t)v223);
      if (v179)
      {
        if (v180)
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&buf[4] = "nw_channel_finalize_output_frame";
          v221 = 1024;
          *(_DWORD *)v222 = v9;
          *(_WORD *)&v222[4] = 2082;
          *(void *)&v222[6] = v179;
          _os_log_impl( &dword_181A5C000,  v166,  v167,  "%{public}s os_buflet_set_data_length failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
        }

        free(v179);
        goto LABEL_466;
      }

      if (!v180)
      {
LABEL_466:
        if (v165) {
          free(v165);
        }
        goto LABEL_66;
      }

      *(_DWORD *)buf = 136446466;
      *(void *)&buf[4] = "nw_channel_finalize_output_frame";
      v221 = 1024;
      *(_DWORD *)v222 = v9;
      v168 = "%{public}s os_buflet_set_data_length failed %{darwin.errno}d, no backtrace";
    }

    else
    {
      v166 = (os_log_s *)__nwlog_obj();
      v167 = v223;
      if (!os_log_type_enabled(v166, (os_log_type_t)v223)) {
        goto LABEL_466;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&buf[4] = "nw_channel_finalize_output_frame";
      v221 = 1024;
      *(_DWORD *)v222 = v9;
      v168 = "%{public}s os_buflet_set_data_length failed %{darwin.errno}d, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v166, v167, v168, buf, 0x12u);
    goto LABEL_466;
  }

  if (_nw_signposts_once != -1) {
    dispatch_once(&_nw_signposts_once, &__block_literal_global_65_86685);
  }
LABEL_66:
  if (!*((void *)a3 + 17))
  {
    v144 = (os_log_s *)__nwlog_obj();
    if (!os_log_type_enabled(v144, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_132;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_channel_finalize_output_frame";
    v36 = "%{public}s Channel is newly defunct, cannot write frame";
    v37 = v144;
    v38 = OS_LOG_TYPE_DEBUG;
    v39 = 12;
    goto LABEL_98;
  }

  if (a1) {
    goto LABEL_68;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&buf[4] = "__nw_frame_get_service_class";
  v149 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(v223) = 16;
  type[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v149, &v223, type))
  {
    if (v223 == 17)
    {
      v150 = (os_log_s *)__nwlog_obj();
      v151 = v223;
      if (!os_log_type_enabled(v150, (os_log_type_t)v223)) {
        goto LABEL_390;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "__nw_frame_get_service_class";
      v152 = "%{public}s called with null frame";
      goto LABEL_389;
    }

    if (type[0] == OS_LOG_TYPE_DEFAULT)
    {
      v150 = (os_log_s *)__nwlog_obj();
      v151 = v223;
      if (!os_log_type_enabled(v150, (os_log_type_t)v223)) {
        goto LABEL_390;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "__nw_frame_get_service_class";
      v152 = "%{public}s called with null frame, backtrace limit exceeded";
      goto LABEL_389;
    }

    v159 = (char *)__nw_create_backtrace_string();
    v150 = (os_log_s *)__nwlog_obj();
    v151 = v223;
    v160 = os_log_type_enabled(v150, (os_log_type_t)v223);
    if (v159)
    {
      if (v160)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&buf[4] = "__nw_frame_get_service_class";
        v221 = 2082;
        *(void *)v222 = v159;
        _os_log_impl( &dword_181A5C000,  v150,  v151,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v159);
      goto LABEL_390;
    }

    if (v160)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "__nw_frame_get_service_class";
      v152 = "%{public}s called with null frame, no backtrace";
LABEL_389:
      _os_log_impl(&dword_181A5C000, v150, v151, v152, buf, 0xCu);
    }
  }

LABEL_274:
                            v204 = v72;
                            v205 = (v359[67] & 0x20) == 0;

                            if (v205)
                            {
                              if (__nwlog_connection_log::onceToken != -1) {
                                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                              }
                              v187 = (os_log_s *)(id)gconnectionLogObj;
                              if (os_log_type_enabled(v187, OS_LOG_TYPE_ERROR))
                              {
                                v206 = v204;

                                v207 = v206;
                                v208 = (v359[67] & 1) == 0;

                                if (v208) {
                                  v209 = "";
                                }
                                else {
                                  v209 = "dry-run ";
                                }
                                v210 = nw_endpoint_handler_copy_endpoint(v207);
                                v211 = nw_endpoint_get_logging_description(v210);
                                v212 = v207;
                                v213 = v212;
                                v214 = v212[30];
                                else {
                                  v215 = off_189BBBBF0[v214];
                                }
                                v361 = v215;

                                v216 = v213;
                                v217 = v216;
                                v218 = "path";
                                switch(v349[29])
                                {
                                  case 0u:
                                    break;
                                  case 1u:
                                    v218 = "resolver";
                                    break;
                                  case 2u:
                                    v218 = nw_endpoint_flow_mode_string(v216[31]);
                                    break;
                                  case 3u:
                                    v218 = "proxy";
                                    break;
                                  case 4u:
                                    v218 = "fallback";
                                    break;
                                  case 5u:
                                    v218 = "transform";
                                    break;
                                  default:
                                    v218 = "unknown-mode";
                                    break;
                                }

                                v219 = v217;
                                os_unfair_lock_lock((os_unfair_lock_t)v219 + 28);
                                v220 = v219[8];
                                os_unfair_lock_unlock((os_unfair_lock_t)v219 + 28);

                                v221 = v206 + 168;
                                v222 = v220;
                                v223 = v222;
                                v224 = (const char *)*((void *)v355 + 94);
                                if (v224)
                                {
                                  v224 = (const char *)*((void *)v224 + 2);
                                  if (!v224) {
                                    v224 = "invalid";
                                  }
                                }

                                *(_DWORD *)buf = 136448002;
                                v379 = "nw_endpoint_flow_receive_report";
                                v380 = 2082;
                                v381 = v221;
                                v382 = 2082;
                                v383 = v209;
                                v384 = 2082;
                                v385 = (void *)v211;
                                v386 = 2082;
                                v387 = (void *)v361;
                                v388 = 2082;
                                v389 = (void *)v218;
                                v390 = 2114;
                                v391 = v222;
                                v392 = 2082;
                                v393 = v224;
                                _os_log_impl( &dword_181A5C000,  v187,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Faile d to attach protocol %{public}s to newly connected child flow",  buf,  0x52u);
                              }

                              goto LABEL_333;
                            }

          if (v164) {
            free(v164);
          }
        }

        v5 = 0;
        goto LABEL_277;
      }

      v109 = flags;
      srv_name = (const char *)nw_endpoint_get_srv_name(*((void **)v1 + 3));
      RecordWithAttribute = DNSServiceQueryRecordWithAttribute( v224,  v109,  scoped_interface_index,  srv_name,  0x21u,  1u,  attr,  (DNSServiceQueryRecordReply)nw_resolver_srv_resolve_callback,  v47);
      if (RecordWithAttribute != -65569)
      {
        v5 = RecordWithAttribute;
        v219 = "SRV";
        v221 = "DNSServiceQueryRecord";
        goto LABEL_277;
      }

      nw_resolver_cancel_query_locked(v47, 0);
      v112 = "SRV";
      goto LABEL_13;
    }

    address = nw_endpoint_get_address(*((nw_endpoint_t *)v1 + 3));
    v58 = address;
    sa_family = address->sa_family;
    if (sa_family == 2)
    {
      if (snprintf( buf,  0x100uLL,  "%u.%u.%u.%u.in-addr.arpa.",  HIBYTE(*(_DWORD *)&address->sa_data[2]),  BYTE2(*(_DWORD *)&address->sa_data[2]),  BYTE1(*(_DWORD *)&address->sa_data[2]),  *(_DWORD *)&address->sa_data[2]) >= 0x100) {
        goto LABEL_195;
      }
    }

    else
    {
      if (sa_family != 30) {
        goto LABEL_195;
      }
      v60 = snprintf(buf, 0x100uLL, "%x.%x.", address[1].sa_data[5] & 0xF, address[1].sa_data[5] >> 4);
      if (v60 >= 0x100) {
        goto LABEL_195;
      }
      v61 = v60;
      v62 = 256LL - v60;
      v63 = snprintf(&buf[v60], v62, "%x.%x.", v58[1].sa_data[4] & 0xF, v58[1].sa_data[4] >> 4);
      if ((v63 & 0x80000000) != 0) {
        goto LABEL_195;
      }
      v64 = v62 > v63;
      v65 = v62 - v63;
      if (!v64) {
        goto LABEL_195;
      }
      v66 = v63 + v61;
      v67 = snprintf(&buf[v66], v65, "%x.%x.", v58[1].sa_data[3] & 0xF, v58[1].sa_data[3] >> 4);
      if ((v67 & 0x80000000) != 0) {
        goto LABEL_195;
      }
      v64 = v65 > v67;
      v68 = v65 - v67;
      if (!v64) {
        goto LABEL_195;
      }
      v69 = v67 + v66;
      v70 = snprintf(&buf[v69], v68, "%x.%x.", v58[1].sa_data[2] & 0xF, v58[1].sa_data[2] >> 4);
      if ((v70 & 0x80000000) != 0) {
        goto LABEL_195;
      }
      v64 = v68 > v70;
      v71 = v68 - v70;
      if (!v64) {
        goto LABEL_195;
      }
      v72 = v70 + v69;
      v73 = snprintf(&buf[v72], v71, "%x.%x.", v58[1].sa_data[1] & 0xF, v58[1].sa_data[1] >> 4);
      if ((v73 & 0x80000000) != 0) {
        goto LABEL_195;
      }
      v64 = v71 > v73;
      v74 = v71 - v73;
      if (!v64) {
        goto LABEL_195;
      }
      v75 = v73 + v72;
      v76 = snprintf(&buf[v75], v74, "%x.%x.", v58[1].sa_data[0] & 0xF, v58[1].sa_data[0] >> 4);
      if ((v76 & 0x80000000) != 0) {
        goto LABEL_195;
      }
      v64 = v74 > v76;
      v77 = v74 - v76;
      if (!v64) {
        goto LABEL_195;
      }
      v78 = v76 + v75;
      v79 = snprintf(&buf[v78], v77, "%x.%x.", v58[1].sa_family & 0xF, v58[1].sa_family >> 4);
      if ((v79 & 0x80000000) != 0) {
        goto LABEL_195;
      }
      v64 = v77 > v79;
      v80 = v77 - v79;
      if (!v64) {
        goto LABEL_195;
      }
      v81 = v79 + v78;
      v82 = snprintf(&buf[v81], v80, "%x.%x.", v58[1].sa_len & 0xF, v58[1].sa_len >> 4);
      if ((v82 & 0x80000000) != 0) {
        goto LABEL_195;
      }
      v64 = v80 > v82;
      v83 = v80 - v82;
      if (!v64) {
        goto LABEL_195;
      }
      v84 = v82 + v81;
      v85 = snprintf(&buf[v84], v83, "%x.%x.", v58->sa_data[13] & 0xF, v58->sa_data[13] >> 4);
      if ((v85 & 0x80000000) != 0) {
        goto LABEL_195;
      }
      v64 = v83 > v85;
      v86 = v83 - v85;
      if (!v64) {
        goto LABEL_195;
      }
      v87 = v85 + v84;
      v88 = snprintf(&buf[v87], v86, "%x.%x.", v58->sa_data[12] & 0xF, v58->sa_data[12] >> 4);
      if ((v88 & 0x80000000) != 0) {
        goto LABEL_195;
      }
      v64 = v86 > v88;
      v89 = v86 - v88;
      if (!v64) {
        goto LABEL_195;
      }
      v90 = v88 + v87;
      v91 = snprintf(&buf[v90], v89, "%x.%x.", v58->sa_data[11] & 0xF, v58->sa_data[11] >> 4);
      if ((v91 & 0x80000000) != 0) {
        goto LABEL_195;
      }
      v64 = v89 > v91;
      v92 = v89 - v91;
      if (!v64) {
        goto LABEL_195;
      }
      v93 = v91 + v90;
      v94 = snprintf(&buf[v93], v92, "%x.%x.", v58->sa_data[10] & 0xF, v58->sa_data[10] >> 4);
      if ((v94 & 0x80000000) != 0) {
        goto LABEL_195;
      }
      v64 = v92 > v94;
      v95 = v92 - v94;
      if (!v64) {
        goto LABEL_195;
      }
      v96 = v94 + v93;
      v97 = snprintf(&buf[v96], v95, "%x.%x.", v58->sa_data[9] & 0xF, v58->sa_data[9] >> 4);
      if ((v97 & 0x80000000) != 0) {
        goto LABEL_195;
      }
      v64 = v95 > v97;
      v98 = v95 - v97;
      if (!v64) {
        goto LABEL_195;
      }
      v99 = v97 + v96;
      v100 = snprintf(&buf[v99], v98, "%x.%x.", v58->sa_data[8] & 0xF, v58->sa_data[8] >> 4);
      if ((v100 & 0x80000000) != 0) {
        goto LABEL_195;
      }
      v64 = v98 > v100;
      v101 = v98 - v100;
      if (!v64) {
        goto LABEL_195;
      }
      v102 = v100 + v99;
      v103 = snprintf(&buf[v102], v101, "%x.%x.", v58->sa_data[7] & 0xF, v58->sa_data[7] >> 4);
      if ((v103 & 0x80000000) != 0
        || (v64 = v101 > v103, v104 = v101 - v103, !v64)
        || (v105 = v103 + v102,
            v106 = snprintf(&buf[v105], v104, "%x.%x.", v58->sa_data[6] & 0xF, v58->sa_data[6] >> 4),
            (v106 & 0x80000000) != 0)
        || (v64 = v104 > v106, v107 = v104 - v106, !v64)
        || (v108 = snprintf(&buf[v106 + v105], v107, "ip6.arpa."), (v108 & 0x80000000) != 0)
        || v107 <= v108)
      {
LABEL_195:
        if ((*((_BYTE *)v1 + 346) & 0x20) == 0)
        {
          if (*v225)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            v151 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)handler = 136446466;
              *(void *)&handler[4] = "nw_resolver_create_dns_service_locked";
              *(_WORD *)&handler[12] = 2082;
              *(void *)&handler[14] = (char *)v1 + 256;
              v152 = "%{public}s [C%{public}s] failed to create PTR name";
              v153 = v151;
              v154 = 22;
              goto LABEL_205;
            }
          }

          else
          {
            __nwlog_obj();
            v151 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR))
            {
              v155 = *((_DWORD *)v1 + 85);
              *(_DWORD *)handler = 136446466;
              *(void *)&handler[4] = "nw_resolver_create_dns_service_locked";
              *(_WORD *)&handler[12] = 1024;
              *(_DWORD *)&handler[14] = v155;
              v152 = "%{public}s [R%u] failed to create PTR name";
              v153 = v151;
              v154 = 18;
LABEL_205:
              _os_log_impl(&dword_181A5C000, v153, OS_LOG_TYPE_ERROR, v152, handler, v154);
            }
          }
        }

        v150 = 0LL;
LABEL_208:
        v156 = v229;
LABEL_209:

        goto LABEL_297;
      }
    }

    v113 = DNSServiceQueryRecordWithAttribute( v224,  flags,  scoped_interface_index,  buf,  0xCu,  1u,  attr,  (DNSServiceQueryRecordReply)nw_resolver_ptr_resolve_callback,  v47);
    if (v113 != -65569)
    {
      v221 = "DNSServiceQueryRecord";
      v5 = v113;
      v168 = "PTR";
      goto LABEL_235;
    }

    nw_resolver_cancel_query_locked(v47, 0);
    v112 = "PTR";
LABEL_13:
    v219 = v112;
    v7 = "DNSServiceQueryRecord";
LABEL_14:
    v221 = v7;

LABEL_15:
    v6 = 0;
    if ((v8 & 1) == 0) {
      goto LABEL_278;
    }
  }

  if ((*((_BYTE *)v1 + 346) & 0x10) != 0
    || nw_endpoint_get_address_family(*((void **)v1 + 3)) != 2
    || (v157 = nw_endpoint_get_address(*((nw_endpoint_t *)v1 + 3)),
        !nw_nat64_can_v4_address_be_synthesized((unsigned int *)&v157->sa_data[2])))
  {
    nw_array_append(*((void *)v47 + 18), *((void **)v1 + 3));
    *((_DWORD *)v47 + 21) = 0;
    nw_resolver_update_status_locked(v47, 0LL);
    goto LABEL_233;
  }

  *((_DWORD *)v1 + 20) = 2;
  if ((*((_BYTE *)v1 + 346) & 0x20) == 0)
  {
    if (*v225)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v158 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v158, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&buf[4] = "nw_resolver_create_dns_service_locked";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = (char *)v1 + 256;
        v159 = "%{public}s [C%{public}s] Querying NAT64 prefixes";
        v160 = v158;
        v161 = 22;
        goto LABEL_268;
      }
    }

    else
    {
      __nwlog_obj();
      v158 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v158, OS_LOG_TYPE_DEBUG))
      {
        v192 = *((_DWORD *)v1 + 85);
        *(_DWORD *)buf = 136446466;
        *(void *)&buf[4] = "nw_resolver_create_dns_service_locked";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v192;
        v159 = "%{public}s [R%u] Querying NAT64 prefixes";
        v160 = v158;
        v161 = 18;
LABEL_268:
        _os_log_impl(&dword_181A5C000, v160, OS_LOG_TYPE_DEBUG, v159, buf, v161);
      }
    }
  }

  *(_DWORD *)buf = scoped_interface_index;
  dispatch_group_enter(*((dispatch_group_t *)v1 + 5));
  v193 = nw_context_copy_workloop(*((void **)v1 + 4));
  v226[0] = MEMORY[0x1895F87A8];
  v226[1] = 3221225472LL;
  v226[2] = ___ZL37nw_resolver_create_dns_service_lockedP22NWConcrete_nw_resolver_block_invoke_238;
  v226[3] = &unk_189BB6C40;
  v227 = v47;
  nw_nat64_copy_prefixes_async_override_dns((unsigned int *)buf, (void *)v193, v224, &flags, v226);

  v5 = 0;
  v221 = "nw_nat64_copy_prefixes_async_override_dns";
  v168 = "NAT64";
LABEL_235:
  v219 = v168;
LABEL_277:

LABEL_278:
  if (attr) {
    DNSServiceAttributeDeallocate(attr);
  }
  if (!v5)
  {
    v201 = (_DNSServiceRef_t *)*((void *)v1 + 8);
    v202 = nw_context_copy_workloop(*((void **)v1 + 4));
    v5 = DNSServiceSetDispatchQueue(v201, (dispatch_queue_t)v202);

    if (v5)
    {
      v221 = "DNSServiceSetDispatchQueue";
      goto LABEL_286;
    }

    if ((*((_BYTE *)v1 + 346) & 0x20) == 0)
    {
      if (*v225)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        v156 = (NWConcrete_nw_resolver *)(id)gconnectionLogObj;
        v150 = 1LL;
        if (os_log_type_enabled((os_log_t)v156, OS_LOG_TYPE_INFO))
        {
          v207 = nw_endpoint_get_logging_description(*((void **)v1 + 3));
          v208 = *((_DWORD *)v1 + 20);
          *(_DWORD *)buf = 136447490;
          *(void *)&buf[4] = "nw_resolver_create_dns_service_locked";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = (char *)v1 + 256;
          *(_WORD *)&buf[22] = 2082;
          *(void *)&buf[24] = v219;
          *(_WORD *)&buf[32] = 2082;
          *(void *)&buf[34] = v207;
          *(_WORD *)&buf[42] = 1024;
          *(_DWORD *)&buf[44] = flags;
          *(_WORD *)&buf[48] = 1024;
          v243 = v208;
          _os_log_impl( &dword_181A5C000,  (os_log_t)v156,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s] Starting %{public}s resolution %{public}s, flags %#x proto %u",  buf,  0x36u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v156 = (NWConcrete_nw_resolver *)(id)gLogObj;
        v150 = 1LL;
        if (os_log_type_enabled((os_log_t)v156, OS_LOG_TYPE_INFO))
        {
          v209 = *((_DWORD *)v1 + 85);
          v210 = nw_endpoint_get_logging_description(*((void **)v1 + 3));
          v211 = *((_DWORD *)v1 + 20);
          *(_DWORD *)buf = 136447490;
          *(void *)&buf[4] = "nw_resolver_create_dns_service_locked";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v209;
          *(_WORD *)&buf[18] = 2082;
          *(void *)&buf[20] = v219;
          *(_WORD *)&buf[28] = 2082;
          *(void *)&buf[30] = v210;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = flags;
          *(_WORD *)&buf[44] = 1024;
          *(_DWORD *)&buf[46] = v211;
          v150 = 1LL;
          _os_log_impl( &dword_181A5C000,  (os_log_t)v156,  OS_LOG_TYPE_INFO,  "%{public}s [R%u] Starting %{public}s resolution %{public}s, flags %#x proto %u",  buf,  0x32u);
        }
      }

      goto LABEL_209;
    }

    goto LABEL_194;
  }

  if (!v10)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v196 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v196, OS_LOG_TYPE_ERROR))
    {
      v197 = nwlog_get_string_for_dns_service_error(v5);
      *(_DWORD *)buf = 136446978;
      *(void *)&buf[4] = "nw_resolver_create_dns_service_locked";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v221;
      *(_WORD *)&buf[22] = 2082;
      *(void *)&buf[24] = v197;
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v5;
      v198 = "%{public}s %{public}s failed: %{public}s(%d)";
      v199 = v196;
      v200 = 38;
      goto LABEL_294;
    }

          free(v96);
          if (!v76) {
            goto LABEL_129;
          }
LABEL_308:
          v64 = (char *)v76;
          goto LABEL_140;
        }

          if (!v47) {
            return;
          }
          goto LABEL_275;
        }

        if (v5 != 3) {
          goto LABEL_205;
        }
        v9 = *(void *)(v3 + 16);
        if (v9)
        {
          v10 = (uint64_t *)(v9 + 488);
          goto LABEL_28;
        }

        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v95 = "nw_http1_get_stream_for_protocol";
        v62 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v92 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          v63 = (os_log_s *)__nwlog_obj();
          v64 = type;
          if (!os_log_type_enabled(v63, type)) {
            goto LABEL_203;
          }
          *(_DWORD *)buf = 136446210;
          v95 = "nw_http1_get_stream_for_protocol";
          v65 = "%{public}s called with null handle->http1_connection";
        }

        else if (v92)
        {
          v76 = (char *)__nw_create_backtrace_string();
          v63 = (os_log_s *)__nwlog_obj();
          v64 = type;
          v77 = os_log_type_enabled(v63, type);
          if (v76)
          {
            if (v77)
            {
              *(_DWORD *)buf = 136446466;
              v95 = "nw_http1_get_stream_for_protocol";
              v96 = 2082;
              v97 = v76;
              _os_log_impl( &dword_181A5C000,  v63,  v64,  "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v76);
            goto LABEL_203;
          }

          if (!v77)
          {
LABEL_203:
            if (v62) {
              free(v62);
            }
            goto LABEL_205;
          }

          *(_DWORD *)buf = 136446210;
          v95 = "nw_http1_get_stream_for_protocol";
          v65 = "%{public}s called with null handle->http1_connection, no backtrace";
        }

        else
        {
          v63 = (os_log_s *)__nwlog_obj();
          v64 = type;
          if (!os_log_type_enabled(v63, type)) {
            goto LABEL_203;
          }
          *(_DWORD *)buf = 136446210;
          v95 = "nw_http1_get_stream_for_protocol";
          v65 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        }

        _os_log_impl(&dword_181A5C000, v63, v64, v65, buf, 0xCu);
        goto LABEL_203;
      case 0x1Au:
        if (v5 != 2)
        {
          if (v5 != 3) {
            goto LABEL_222;
          }
          v11 = (uint64_t *)(v3 + 16);
LABEL_32:
          v17 = *v11;
          if (*v11)
          {
            v18 = *(void *)(v17 + 488);
            if (!v18) {
              return;
            }
            v19 = *(void *)(v18 + 32);
            if (!v19) {
              return;
            }
            v20 = *(void *)(v17 + 32);
            if (v20 == v19) {
              return;
            }
            nw_protocol_set_output_handler(*(void *)(v17 + 488), v20);
            if ((*(_BYTE *)(v18 + 158) & 1) != 0) {
              return;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v21 = gLogObj;
            if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG)) {
              return;
            }
            v22 = *(void *)(v18 + 256);
            v23 = *(_DWORD *)(*(void *)(v18 + 248) + 372LL);
            if (v22) {
              LODWORD(v22) = *(_DWORD *)(v22 + 860);
            }
            v24 = *(_DWORD *)(v18 + 424);
            v25 = *(void **)(v17 + 32);
            *(_DWORD *)buf = 136447746;
            v95 = "nw_protocol_http1_notify";
            v96 = 2082;
            v97 = (char *)(v18 + 74);
            v98 = 2080;
            v99 = " ";
            v100 = 1024;
            v101 = v23;
            v102 = 1024;
            v103 = v22;
            v104 = 1024;
            v105 = v24;
            v106 = 2048;
            v107 = v25;
            v26 = "%{public}s %{public}s%s<i%u:c%u:s%u> Output handler for stream replaced to: %p";
            v27 = (os_log_s *)v21;
            goto LABEL_65;
          }

        if (v123) {
          free(v123);
        }
        v9 = (char *)v165;
      }

      else if (LODWORD(v168.msg_name) && v117 > LODWORD(v168.msg_name) / 3)
      {
        if (LODWORD(v168.msg_name) < 3) {
          v128 = 1;
        }
        else {
          v128 = LODWORD(v168.msg_name) / 3;
        }
        *(_DWORD *)buf = v128;
      }
    }

    if (!setsockopt(*((_DWORD *)v9 + 43), 0xFFFF, 4100, buf, 4u))
    {
      *((_DWORD *)v9 + 38) = *(_DWORD *)buf;
      goto LABEL_302;
    }

    v134 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    v135 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
    {
      v136 = *((_DWORD *)v9 + 43);
      *(_DWORD *)v177 = 136447234;
      *(void *)&v177[4] = "nw_socket_set_receive_low_water_mark";
      *(_WORD *)&v177[12] = 2080;
      *(void *)&v177[14] = v9 + 308;
      *(_WORD *)&v177[22] = 1024;
      *(_DWORD *)&v177[24] = *(_DWORD *)buf;
      *(_WORD *)&v177[28] = 1024;
      *(_DWORD *)&v177[30] = v136;
      *(_WORD *)&v177[34] = 1024;
      *(_DWORD *)&v177[36] = v134;
      _os_log_impl( &dword_181A5C000,  v135,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt SO_RCVLOWAT %u fd %d failed %{darwin.errno}d",  v177,  0x28u);
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v137 = (os_log_s *)gLogObj;
    if (v134 == 22)
    {
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        v138 = *((_DWORD *)v9 + 43);
        *(_DWORD *)v177 = 136446978;
        *(void *)&v177[4] = "nw_socket_set_receive_low_water_mark";
        *(_WORD *)&v177[12] = 1024;
        *(_DWORD *)&v177[14] = *(_DWORD *)buf;
        *(_WORD *)&v177[18] = 1024;
        *(_DWORD *)&v177[20] = v138;
        *(_WORD *)&v177[24] = 1024;
        *(_DWORD *)&v177[26] = 22;
        _os_log_impl( &dword_181A5C000,  v137,  OS_LOG_TYPE_ERROR,  "%{public}s setsockopt SO_RCVLOWAT %u fd %d failed %{darwin.errno}d",  v177,  0x1Eu);
      }

      goto LABEL_302;
    }

    v139 = *((_DWORD *)v9 + 43);
    *(_DWORD *)v177 = 136446978;
    *(void *)&v177[4] = "nw_socket_set_receive_low_water_mark";
    *(_WORD *)&v177[12] = 1024;
    *(_DWORD *)&v177[14] = *(_DWORD *)buf;
    *(_WORD *)&v177[18] = 1024;
    *(_DWORD *)&v177[20] = v139;
    *(_WORD *)&v177[24] = 1024;
    *(_DWORD *)&v177[26] = v134;
    v140 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v168.msg_name) = 16;
    LOBYTE(v190) = 0;
    if (__nwlog_fault(v140, &v168, &v190))
    {
      if (LOBYTE(v168.msg_name) != 17)
      {
        if ((_BYTE)v190)
        {
          v145 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v141 = (os_log_s *)gLogObj;
          v142 = (os_log_type_t)v168.msg_name;
          v146 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v168.msg_name);
          if (v145)
          {
            if (v146)
            {
              v147 = *(_DWORD *)(v165 + 172);
              *(_DWORD *)v177 = 136447234;
              *(void *)&v177[4] = "nw_socket_set_receive_low_water_mark";
              *(_WORD *)&v177[12] = 1024;
              *(_DWORD *)&v177[14] = *(_DWORD *)buf;
              *(_WORD *)&v177[18] = 1024;
              *(_DWORD *)&v177[20] = v147;
              *(_WORD *)&v177[24] = 1024;
              *(_DWORD *)&v177[26] = v134;
              *(_WORD *)&v177[30] = 2082;
              *(void *)&v177[32] = v145;
              _os_log_impl( &dword_181A5C000,  v141,  v142,  "%{public}s setsockopt SO_RCVLOWAT %u fd %d failed %{darwin.errno}d, dumping backtrace:%{public}s",  v177,  0x28u);
            }

            free(v145);
            goto LABEL_300;
          }

          if (!v146) {
            goto LABEL_300;
          }
          v149 = *(_DWORD *)(v165 + 172);
          *(_DWORD *)v177 = 136446978;
          *(void *)&v177[4] = "nw_socket_set_receive_low_water_mark";
          *(_WORD *)&v177[12] = 1024;
          *(_DWORD *)&v177[14] = *(_DWORD *)buf;
          *(_WORD *)&v177[18] = 1024;
          *(_DWORD *)&v177[20] = v149;
          *(_WORD *)&v177[24] = 1024;
          *(_DWORD *)&v177[26] = v134;
          v144 = "%{public}s setsockopt SO_RCVLOWAT %u fd %d failed %{darwin.errno}d, no backtrace";
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v141 = (os_log_s *)gLogObj;
          v142 = (os_log_type_t)v168.msg_name;
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v168.msg_name)) {
            goto LABEL_300;
          }
          v148 = *(_DWORD *)(v165 + 172);
          *(_DWORD *)v177 = 136446978;
          *(void *)&v177[4] = "nw_socket_set_receive_low_water_mark";
          *(_WORD *)&v177[12] = 1024;
          *(_DWORD *)&v177[14] = *(_DWORD *)buf;
          *(_WORD *)&v177[18] = 1024;
          *(_DWORD *)&v177[20] = v148;
          *(_WORD *)&v177[24] = 1024;
          *(_DWORD *)&v177[26] = v134;
          v144 = "%{public}s setsockopt SO_RCVLOWAT %u fd %d failed %{darwin.errno}d, backtrace limit exceeded";
        }

      if (!v99) {
        return 4294966775LL;
      }
      v53 = (char *)v99;
      goto LABEL_90;
    }

    if (!(_BYTE)v220)
    {
      v100 = (os_log_s *)__nwlog_obj();
      v101 = v224;
      if (os_log_type_enabled(v100, (os_log_type_t)v224))
      {
        buf = 136446210;
        v231 = "send_data_callback";
        v102 = "%{public}s called with null frame, backtrace limit exceeded";
        goto LABEL_273;
      }

      goto LABEL_274;
    }

    v111 = (char *)__nw_create_backtrace_string();
    v100 = (os_log_s *)__nwlog_obj();
    v101 = v224;
    v114 = os_log_type_enabled(v100, (os_log_type_t)v224);
    if (!v111)
    {
      if (v114)
      {
        buf = 136446210;
        v231 = "send_data_callback";
        v102 = "%{public}s called with null frame, no backtrace";
        goto LABEL_273;
      }

      goto LABEL_274;
    }

    if (!v114) {
      goto LABEL_227;
    }
    buf = 136446466;
    v231 = "send_data_callback";
    v232 = 2082;
    v233 = (unint64_t)v111;
    v113 = "%{public}s called with null frame, dumping backtrace:%{public}s";
LABEL_226:
    _os_log_impl(&dword_181A5C000, v100, v101, v113, (uint8_t *)&buf, 0x16u);
    goto LABEL_227;
  }

  if (!a5)
  {
    __nwlog_obj();
    buf = 136446210;
    v231 = "send_data_callback";
    v99 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(v224) = 16;
    LOBYTE(v220) = 0;
    if (v224 == 17)
    {
      v100 = (os_log_s *)__nwlog_obj();
      v101 = v224;
      if (os_log_type_enabled(v100, (os_log_type_t)v224))
      {
        buf = 136446210;
        v231 = "send_data_callback";
        v102 = "%{public}s called with null source";
        goto LABEL_273;
      }

      goto LABEL_274;
    }

    if (!(_BYTE)v220)
    {
      v100 = (os_log_s *)__nwlog_obj();
      v101 = v224;
      if (os_log_type_enabled(v100, (os_log_type_t)v224))
      {
        buf = 136446210;
        v231 = "send_data_callback";
        v102 = "%{public}s called with null source, backtrace limit exceeded";
        goto LABEL_273;
      }

      goto LABEL_274;
    }

    v111 = (char *)__nw_create_backtrace_string();
    v100 = (os_log_s *)__nwlog_obj();
    v101 = v224;
    v115 = os_log_type_enabled(v100, (os_log_type_t)v224);
    if (!v111)
    {
      if (v115)
      {
        buf = 136446210;
        v231 = "send_data_callback";
        v102 = "%{public}s called with null source, no backtrace";
        goto LABEL_273;
      }

      goto LABEL_274;
    }

    if (v115)
    {
      buf = 136446466;
      v231 = "send_data_callback";
      v232 = 2082;
      v233 = (unint64_t)v111;
      v113 = "%{public}s called with null source, dumping backtrace:%{public}s";
      goto LABEL_226;
    }

LABEL_271:
                            goto LABEL_272;
                          }

                          if (v373[0] == OS_LOG_TYPE_DEFAULT)
                          {
                            __nwlog_obj();
                            v171 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                            v321 = type[0];
                            if (os_log_type_enabled(v171, type[0]))
                            {
                              *(_DWORD *)buf = 136446210;
                              v379 = "nw_protocol_utilities_add_input_handler";
                              _os_log_impl( &dword_181A5C000,  v171,  v321,  "%{public}s called with null input_protocol, backtrace limit exceeded",  buf,  0xCu);
                            }

                            goto LABEL_271;
                          }

                          v308 = (char *)__nw_create_backtrace_string();
                          __nwlog_obj();
                          v171 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                          v309 = type[0];
                          v310 = os_log_type_enabled(v171, type[0]);
                          if (!v308)
                          {
                            if (v310)
                            {
                              *(_DWORD *)buf = 136446210;
                              v379 = "nw_protocol_utilities_add_input_handler";
                              _os_log_impl( &dword_181A5C000,  v171,  v309,  "%{public}s called with null input_protocol, no backtrace",  buf,  0xCu);
                            }

                            goto LABEL_271;
                          }

                          if (v310)
                          {
                            *(_DWORD *)buf = 136446466;
                            v379 = "nw_protocol_utilities_add_input_handler";
                            v380 = 2082;
                            v381 = v308;
                            _os_log_impl( &dword_181A5C000,  v171,  v309,  "%{public}s called with null input_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
                          }

                          free(v308);
                        }
                }
              }

              else
              {
                if (!v203) {
                  goto LABEL_217;
                }
                v244 = nw_endpoint_handler_get_minimize_logging(v471);
                v245 = nw_endpoint_handler_get_logging_disabled(v471);
                if (v244)
                {
                  if ((v245 & 1) != 0) {
                    goto LABEL_272;
                  }
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                  }
                  v229 = (os_log_s *)(id)gconnectionLogObj;
                  if (os_log_type_enabled(v229, OS_LOG_TYPE_DEBUG))
                  {
                    v404 = nw_endpoint_handler_get_id_string(v471);
                    v405 = nw_endpoint_handler_dry_run_string(v471);
                    v406 = nw_endpoint_handler_copy_endpoint(v471);
                    v407 = nw_endpoint_get_logging_description(v406);
                    v408 = nw_endpoint_handler_state_string(v471);
                    v409 = nw_endpoint_handler_mode_string(v471);
                    v410 = nw_endpoint_handler_copy_current_path(v471);
                    *(_DWORD *)buf = 136447746;
                    v481 = "nw_endpoint_proxy_receive_report";
                    v482 = 2082;
                    v483 = (uint64_t)v404;
                    v484 = 2082;
                    v485 = (uint64_t)v405;
                    v486 = 2082;
                    v487 = v407;
                    v488 = 2082;
                    v489 = v408;
                    v490 = 2082;
                    v491 = v409;
                    v492 = 2114;
                    v493 = v410;
                    _os_log_impl( &dword_181A5C000,  v229,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] failing open, start next child.",  buf,  0x48u);
                  }

                  goto LABEL_271;
                }

                if ((v245 & 1) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                  }
                  v229 = (os_log_s *)(id)gconnectionLogObj;
                  if (os_log_type_enabled(v229, OS_LOG_TYPE_INFO))
                  {
                    v246 = nw_endpoint_handler_get_id_string(v471);
                    v247 = nw_endpoint_handler_dry_run_string(v471);
                    v248 = nw_endpoint_handler_copy_endpoint(v471);
                    v249 = nw_endpoint_get_logging_description(v248);
                    v250 = nw_endpoint_handler_state_string(v471);
                    v251 = nw_endpoint_handler_mode_string(v471);
                    v252 = nw_endpoint_handler_copy_current_path(v471);
                    *(_DWORD *)buf = 136447746;
                    v481 = "nw_endpoint_proxy_receive_report";
                    v482 = 2082;
                    v483 = (uint64_t)v246;
                    v484 = 2082;
                    v485 = (uint64_t)v247;
                    v486 = 2082;
                    v487 = v249;
                    v488 = 2082;
                    v489 = v250;
                    v490 = 2082;
                    v491 = v251;
                    v492 = 2114;
                    v493 = v252;
                    _os_log_impl( &dword_181A5C000,  v229,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] failing open, start next child.",  buf,  0x48u);
                  }

                  goto LABEL_271;
                }
              }

    if (v93) {
      free(v93);
    }
    goto LABEL_273;
  }

  v78 = v77;
  CFHTTPMessageSetHeaderFieldValue(Request, @"Host", v77);
  CFRelease(v78);
LABEL_149:
  CFHTTPMessageSetHeaderFieldValue(Request, @"Connection", @"keep-alive");
  CFHTTPMessageSetHeaderFieldValue(Request, @"Proxy-Connection", @"keep-alive");
  v79 = *(void **)(a1 + 184);
  if (v79)
  {
    v80 = v79;
    *(void *)type = 0LL;
    v157 = (uint64_t)type;
    v158 = 0x2020000000LL;
    v159 = 0LL;
    *(void *)buf = MEMORY[0x1895F87A8];
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&buf[16] = __nw_proxy_options_get_http_proxy_authorization_header_block_invoke;
    v171 = (const char *)&unk_189BC60A8;
    *(void *)&v172 = type;
    nw_protocol_options_access_handle(v80, buf);
    v81 = *(const char **)(v157 + 24);
    _Block_object_dispose(type, 8);

    if (v81)
    {
      v82 = CFStringCreateWithCString(v41, v81, 0x8000100u);
      if (v82)
      {
        v83 = v82;
        CFHTTPMessageSetHeaderFieldValue(Request, @"Proxy-Authorization", v82);
        CFRelease(v83);
        goto LABEL_234;
      }

      if ((*(_WORD *)(a1 + 368) & 0x80) == 0)
      {
        v154 = Request;
        __nwlog_obj();
        *(_DWORD *)buf = 136446722;
        *(void *)&buf[4] = "nw_http_connect_create_request";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&buf[22] = 2080;
        v171 = " ";
        v97 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        v161[0] = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v97, type, v161))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            v98 = (os_log_s *)__nwlog_obj();
            v99 = type[0];
            if (os_log_type_enabled(v98, type[0]))
            {
              *(_DWORD *)buf = 136446722;
              *(void *)&buf[4] = "nw_http_connect_create_request";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = a1 + 284;
              *(_WORD *)&buf[22] = 2080;
              v171 = " ";
              v100 = "%{public}s %{public}s%sCFStringCreateWithCString failed";
LABEL_229:
              v108 = v98;
LABEL_230:
              _os_log_impl(&dword_181A5C000, v108, v99, v100, buf, 0x20u);
            }
          }

          else if (v161[0])
          {
            v105 = (char *)__nw_create_backtrace_string();
            v106 = (os_log_s *)__nwlog_obj();
            v99 = type[0];
            log = v106;
            v107 = os_log_type_enabled(v106, type[0]);
            if (v105)
            {
              if (v107)
              {
                *(_DWORD *)buf = 136446978;
                *(void *)&buf[4] = "nw_http_connect_create_request";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = a1 + 284;
                *(_WORD *)&buf[22] = 2080;
                v171 = " ";
                LOWORD(v172) = 2082;
                *(void *)((char *)&v172 + 2) = v105;
                _os_log_impl( &dword_181A5C000,  log,  v99,  "%{public}s %{public}s%sCFStringCreateWithCString failed, dumping backtrace:%{public}s",  buf,  0x2Au);
              }

              free(v105);
              goto LABEL_231;
            }

            if (v107)
            {
              *(_DWORD *)buf = 136446722;
              *(void *)&buf[4] = "nw_http_connect_create_request";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = a1 + 284;
              *(_WORD *)&buf[22] = 2080;
              v171 = " ";
              v100 = "%{public}s %{public}s%sCFStringCreateWithCString failed, no backtrace";
              v108 = log;
              goto LABEL_230;
            }
          }

          else
          {
            v98 = (os_log_s *)__nwlog_obj();
            v99 = type[0];
            if (os_log_type_enabled(v98, type[0]))
            {
              *(_DWORD *)buf = 136446722;
              *(void *)&buf[4] = "nw_http_connect_create_request";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = a1 + 284;
              *(_WORD *)&buf[22] = 2080;
              v171 = " ";
              v100 = "%{public}s %{public}s%sCFStringCreateWithCString failed, backtrace limit exceeded";
              goto LABEL_229;
            }
          }
        }

        return 0LL;
      case 8u:
        *(_BYTE *)(a1 + 64) |= 4u;
        v95 = *v3;
        v96 = *(void *)(a2 + v95);
        if (v96 == -1LL || v96 >= *(void *)(a2 + *v6))
        {
          v99 = 0LL;
LABEL_159:
          *(_BYTE *)(a2 + *v8) = 1;
          goto LABEL_160;
        }

        v97 = v96 + 1;
        v98 = *(_BYTE *)(*(void *)(a2 + *v10) + v96);
        *(void *)(a2 + v95) = v97;
        v99 = v98 & 0x7F;
        if ((v98 & 0x80) == 0) {
          goto LABEL_160;
        }
        v100 = *v3;
        v101 = *(void *)(a2 + v100);
        if (v101 == -1LL || v101 >= *(void *)(a2 + *v6)) {
          goto LABEL_159;
        }
        v102 = v101 + 1;
        v103 = *(char *)(*(void *)(a2 + *v10) + v101);
        *(void *)(a2 + v100) = v102;
        v99 |= (unint64_t)(v103 & 0x7F) << 7;
        if ((v103 & 0x80000000) == 0) {
          goto LABEL_160;
        }
        v104 = *v3;
        v105 = *(void *)(a2 + v104);
        if (v105 == -1LL || v105 >= *(void *)(a2 + *v6)) {
          goto LABEL_159;
        }
        v106 = v105 + 1;
        v107 = *(char *)(*(void *)(a2 + *v10) + v105);
        *(void *)(a2 + v104) = v106;
        v99 |= (unint64_t)(v107 & 0x7F) << 14;
        if ((v107 & 0x80000000) == 0) {
          goto LABEL_160;
        }
        v108 = *v3;
        v109 = *(void *)(a2 + v108);
        if (v109 == -1LL || v109 >= *(void *)(a2 + *v6)) {
          goto LABEL_159;
        }
        v110 = v109 + 1;
        v111 = *(char *)(*(void *)(a2 + *v10) + v109);
        *(void *)(a2 + v108) = v110;
        v99 |= (unint64_t)(v111 & 0x7F) << 21;
        if ((v111 & 0x80000000) == 0) {
          goto LABEL_160;
        }
        v112 = *v3;
        v113 = *(void *)(a2 + v112);
        if (v113 == -1LL || v113 >= *(void *)(a2 + *v6)) {
          goto LABEL_159;
        }
        v114 = v113 + 1;
        v115 = *(char *)(*(void *)(a2 + *v10) + v113);
        *(void *)(a2 + v112) = v114;
        v99 |= (unint64_t)(v115 & 0x7F) << 28;
        if ((v115 & 0x80000000) == 0) {
          goto LABEL_160;
        }
        v186 = *v3;
        v187 = *(void *)(a2 + v186);
        if (v187 == -1LL || v187 >= *(void *)(a2 + *v6)) {
          goto LABEL_159;
        }
        v188 = v187 + 1;
        v189 = *(char *)(*(void *)(a2 + *v10) + v187);
        *(void *)(a2 + v186) = v188;
        v99 |= (unint64_t)(v189 & 0x7F) << 35;
        if (v189 < 0)
        {
          v214 = *v3;
          v215 = *(void *)(a2 + v214);
          if (v215 == -1LL || v215 >= *(void *)(a2 + *v6)) {
            goto LABEL_159;
          }
          v216 = v215 + 1;
          v217 = *(char *)(*(void *)(a2 + *v10) + v215);
          *(void *)(a2 + v214) = v216;
          v99 |= (unint64_t)(v217 & 0x7F) << 42;
          if (v217 < 0)
          {
            v218 = *v3;
            v219 = *(void *)(a2 + v218);
            if (v219 == -1LL || v219 >= *(void *)(a2 + *v6)) {
              goto LABEL_159;
            }
            v220 = v219 + 1;
            v221 = *(char *)(*(void *)(a2 + *v10) + v219);
            *(void *)(a2 + v218) = v220;
            v99 |= (unint64_t)(v221 & 0x7F) << 49;
            if (v221 < 0)
            {
              v222 = *v3;
              v223 = *(void *)(a2 + v222);
              if (v223 == -1LL || v223 >= *(void *)(a2 + *v6)) {
                goto LABEL_159;
              }
              v224 = v223 + 1;
              v225 = *(char *)(*(void *)(a2 + *v10) + v223);
              *(void *)(a2 + v222) = v224;
              v99 |= (unint64_t)(v225 & 0x7F) << 56;
              if (v225 < 0)
              {
                v226 = *v3;
                v227 = *(void *)(a2 + v226);
                if (v227 == -1LL || v227 >= *(void *)(a2 + *v6)) {
                  goto LABEL_159;
                }
                v228 = v227 + 1;
                v229 = *(unsigned __int8 *)(*(void *)(a2 + *v10) + v227);
                *(void *)(a2 + v226) = v228;
                if ((v229 & 0x80) != 0)
                {
                  v99 = 0LL;
                  goto LABEL_162;
                }

                v99 |= v229 << 63;
              }
            }
          }
        }

LABEL_272:
                        if (!v170) {
                          goto LABEL_274;
                        }
                        goto LABEL_273;
                      }

                      __nwlog_obj();
                      v296 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 136446210;
                      v379 = "nw_endpoint_flow_receive_report";
                      v292 = (char *)_os_log_send_and_compose_impl();

                      type[0] = OS_LOG_TYPE_ERROR;
                      v373[0] = OS_LOG_TYPE_DEFAULT;
                      if (type[0] == OS_LOG_TYPE_FAULT)
                      {
                        __nwlog_obj();
                        v293 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                        v297 = type[0];
                        if (os_log_type_enabled(v293, type[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          v379 = "nw_endpoint_flow_receive_report";
                          _os_log_impl( &dword_181A5C000,  v293,  v297,  "%{public}s called with null child_flow",  buf,  0xCu);
                        }

                        goto LABEL_469;
                      }

                      if (v373[0] == OS_LOG_TYPE_DEFAULT)
                      {
                        __nwlog_obj();
                        v293 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                        v320 = type[0];
                        if (os_log_type_enabled(v293, type[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          v379 = "nw_endpoint_flow_receive_report";
                          _os_log_impl( &dword_181A5C000,  v293,  v320,  "%{public}s called with null child_flow, backtrace limit exceeded",  buf,  0xCu);
                        }

                        goto LABEL_469;
                      }

                      v305 = (char *)__nw_create_backtrace_string();
                      __nwlog_obj();
                      v293 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      v306 = type[0];
                      v307 = os_log_type_enabled(v293, type[0]);
                      if (!v305)
                      {
                        if (v307)
                        {
                          *(_DWORD *)buf = 136446210;
                          v379 = "nw_endpoint_flow_receive_report";
                          _os_log_impl( &dword_181A5C000,  v293,  v306,  "%{public}s called with null child_flow, no backtrace",  buf,  0xCu);
                        }

                        goto LABEL_469;
                      }

                      if (v307)
                      {
                        *(_DWORD *)buf = 136446466;
                        v379 = "nw_endpoint_flow_receive_report";
                        v380 = 2082;
                        v381 = v305;
                        _os_log_impl( &dword_181A5C000,  v293,  v306,  "%{public}s called with null child_flow, dumping backtrace:%{public}s",  buf,  0x16u);
                      }

    if (v107) {
      free(v107);
    }
    v66 = 0LL;
    if (v62 != &nw_protocol_ref_counted_handle) {
      goto LABEL_156;
    }
    goto LABEL_155;
  }

  v66 = (id *)get_path(default_input_handler);
  if (v62 == &nw_protocol_ref_counted_handle)
  {
LABEL_155:
    if (default_input_handler->handle == &nw_protocol_ref_counted_handle)
    {
      v96 = default_input_handler[1].callbacks;
      if (v96)
      {
        v97 = (nw_protocol_callbacks *)((char *)v96 - 1);
        default_input_handler[1].callbacks = v97;
        if (!v97)
        {
          v98 = *(void (***)(void))default_input_handler[1].flow_id;
          if (v98)
          {
            *(void *)default_input_handler[1].flow_id = 0LL;
            v98[2](v98);
            _Block_release(v98);
          }

          if ((default_input_handler[1].flow_id[8] & 1) != 0)
          {
            v99 = *(const void **)default_input_handler[1].flow_id;
            if (v99) {
              _Block_release(v99);
            }
          }

          free(default_input_handler);
        }
      }
    }
  }

              nw_endpoint_proxy_start_next_child(v471);
              goto LABEL_217;
            }
          }

          else if ((_DWORD)v449)
          {
            goto LABEL_293;
          }

          v282 = nw_endpoint_handler_get_minimize_logging(v471);
          v283 = nw_endpoint_handler_get_logging_disabled(v471);
          if (v253)
          {
            if (v282)
            {
              if ((v283 & 1) != 0) {
                goto LABEL_319;
              }
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              v284 = (os_log_s *)(id)gconnectionLogObj;
              if (os_log_type_enabled(v284, OS_LOG_TYPE_DEBUG))
              {
                v413 = nw_endpoint_handler_get_id_string(v471);
                v414 = nw_endpoint_handler_dry_run_string(v471);
                v415 = nw_endpoint_handler_copy_endpoint(v471);
                v416 = nw_endpoint_get_logging_description(v415);
                v417 = nw_endpoint_handler_state_string(v471);
                v418 = nw_endpoint_handler_mode_string(v471);
                v419 = nw_endpoint_handler_copy_current_path(v471);
                v420 = *((_BYTE *)loga + 97);
                v421 = nw_endpoint_handler_get_id_string(v474);
                *(_DWORD *)buf = 136448770;
                v481 = "nw_endpoint_proxy_receive_report";
                v422 = "";
                v483 = (uint64_t)v413;
                v482 = 2082;
                if ((v420 & 4) == 0) {
                  v422 = " during establishment";
                }
                v484 = 2082;
                v485 = (uint64_t)v414;
                v486 = 2082;
                v487 = v416;
                v488 = 2082;
                v489 = v417;
                v490 = 2082;
                v491 = v418;
                v492 = 2114;
                v493 = v419;
                v494 = 1024;
                *(_DWORD *)v495 = error_code;
                *(_WORD *)&v495[4] = 2082;
                *(void *)&v495[6] = v422;
                *(_WORD *)&v495[14] = 2082;
                *(void *)&v495[16] = v421;
                *(_WORD *)&v495[24] = 2114;
                *(void *)&v495[26] = v461;
                _os_log_impl( &dword_181A5C000,  v284,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy detecte d origin server failure with error %d%{public}s ([C%{public}s] %{public}@)",  buf,  0x6Cu);
              }
            }

            else
            {
              if ((v283 & 1) != 0)
              {
LABEL_319:
                if ((v449 & 0x100000000LL) != 0)
                {
                  v203 = 0;
                  v204 = 1;
                  goto LABEL_305;
                }

                v310 = v471;
                v310->privacy_stance = 2;

                v203 = 0;
                v204 = 1;
LABEL_351:
                v9 = v474;
                v42 = loga;
                goto LABEL_305;
              }

              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              v284 = (os_log_s *)(id)gconnectionLogObj;
              if (os_log_type_enabled(v284, OS_LOG_TYPE_DEFAULT))
              {
                v285 = nw_endpoint_handler_get_id_string(v471);
                v286 = nw_endpoint_handler_dry_run_string(v471);
                v287 = nw_endpoint_handler_copy_endpoint(v471);
                v288 = nw_endpoint_get_logging_description(v287);
                v289 = nw_endpoint_handler_state_string(v471);
                v290 = nw_endpoint_handler_mode_string(v471);
                v291 = nw_endpoint_handler_copy_current_path(v471);
                v292 = *((_BYTE *)loga + 97);
                v293 = nw_endpoint_handler_get_id_string(v474);
                *(_DWORD *)buf = 136448770;
                v481 = "nw_endpoint_proxy_receive_report";
                v294 = "";
                v483 = (uint64_t)v285;
                v482 = 2082;
                if ((v292 & 4) == 0) {
                  v294 = " during establishment";
                }
                v484 = 2082;
                v485 = (uint64_t)v286;
                v486 = 2082;
                v487 = v288;
                v488 = 2082;
                v489 = v289;
                v490 = 2082;
                v491 = v290;
                v492 = 2114;
                v493 = v291;
                v494 = 1024;
                *(_DWORD *)v495 = error_code;
                *(_WORD *)&v495[4] = 2082;
                *(void *)&v495[6] = v294;
                *(_WORD *)&v495[14] = 2082;
                *(void *)&v495[16] = v293;
                *(_WORD *)&v495[24] = 2114;
                *(void *)&v495[26] = v461;
                _os_log_impl( &dword_181A5C000,  v284,  OS_LOG_TYPE_DEFAULT,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy detecte d origin server failure with error %d%{public}s ([C%{public}s] %{public}@)",  buf,  0x6Cu);
              }
            }

            v9 = v474;
            v42 = loga;
            goto LABEL_319;
          }

          if (v282)
          {
            if ((v283 & 1) != 0) {
              goto LABEL_330;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            v295 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v295, OS_LOG_TYPE_DEBUG))
            {
              v467 = nw_endpoint_handler_get_id_string(v471);
              v423 = nw_endpoint_handler_dry_run_string(v471);
              v424 = nw_endpoint_handler_copy_endpoint(v471);
              v425 = nw_endpoint_get_logging_description(v424);
              v426 = nw_endpoint_handler_state_string(v471);
              v427 = nw_endpoint_handler_mode_string(v471);
              v428 = nw_endpoint_handler_copy_current_path(v471);
              v429 = *((_BYTE *)loga + 97);
              v430 = nw_endpoint_handler_get_id_string(v474);
              *(_DWORD *)buf = 136448770;
              v481 = "nw_endpoint_proxy_receive_report";
              v431 = "";
              v483 = (uint64_t)v467;
              v482 = 2082;
              if ((v429 & 4) == 0) {
                v431 = " during establishment";
              }
              v484 = 2082;
              v485 = (uint64_t)v423;
              v486 = 2082;
              v487 = v425;
              v488 = 2082;
              v489 = v426;
              v490 = 2082;
              v491 = v427;
              v492 = 2114;
              v493 = v428;
              v494 = 1024;
              *(_DWORD *)v495 = error_code;
              *(_WORD *)&v495[4] = 2082;
              *(void *)&v495[6] = v431;
              *(_WORD *)&v495[14] = 2082;
              *(void *)&v495[16] = v430;
              *(_WORD *)&v495[24] = 2114;
              *(void *)&v495[26] = v461;
              _os_log_impl( &dword_181A5C000,  v295,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy failed wi th error %d%{public}s ([C%{public}s] %{public}@)",  buf,  0x6Cu);
            }
          }

          else
          {
            if ((v283 & 1) != 0)
            {
LABEL_330:
              if ((v449 & 0x100000000LL) != 0)
              {
                v203 = 0;
                v204 = 0;
                goto LABEL_305;
              }

              if (v180 && (*((_BYTE *)v42 + 96) & 4) != 0) {
                v311 = 5;
              }
              else {
                v311 = 3;
              }
              v316 = v471;
              v316->privacy_stance = v311;

              v203 = 0;
              v204 = 0;
              goto LABEL_351;
            }

            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            v295 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v295, OS_LOG_TYPE_DEFAULT))
            {
              v466 = v295;
              v296 = nw_endpoint_handler_get_id_string(v471);
              v297 = nw_endpoint_handler_dry_run_string(v471);
              v298 = nw_endpoint_handler_copy_endpoint(v471);
              v299 = nw_endpoint_get_logging_description(v298);
              v300 = nw_endpoint_handler_state_string(v471);
              v301 = nw_endpoint_handler_mode_string(v471);
              v302 = nw_endpoint_handler_copy_current_path(v471);
              v303 = *((_BYTE *)loga + 97);
              v304 = nw_endpoint_handler_get_id_string(v474);
              *(_DWORD *)buf = 136448770;
              v481 = "nw_endpoint_proxy_receive_report";
              v305 = "";
              v483 = (uint64_t)v296;
              v482 = 2082;
              if ((v303 & 4) == 0) {
                v305 = " during establishment";
              }
              v484 = 2082;
              v485 = (uint64_t)v297;
              v486 = 2082;
              v487 = v299;
              v488 = 2082;
              v489 = v300;
              v490 = 2082;
              v491 = v301;
              v492 = 2114;
              v493 = v302;
              v494 = 1024;
              *(_DWORD *)v495 = error_code;
              *(_WORD *)&v495[4] = 2082;
              *(void *)&v495[6] = v305;
              *(_WORD *)&v495[14] = 2082;
              *(void *)&v495[16] = v304;
              *(_WORD *)&v495[24] = 2114;
              *(void *)&v495[26] = v461;
              _os_log_impl( &dword_181A5C000,  v466,  OS_LOG_TYPE_DEFAULT,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy failed wi th error %d%{public}s ([C%{public}s] %{public}@)",  buf,  0x6Cu);

              v295 = v466;
            }
          }

          v9 = v474;
          v42 = loga;
          goto LABEL_330;
        }

        v192 = nw_endpoint_handler_get_minimize_logging(v471);
        v193 = nw_endpoint_handler_get_logging_disabled(v471);
        if (v192)
        {
          if ((v193 & 1) != 0)
          {
            v203 = 0;
            v204 = 0;
            goto LABEL_228;
          }

          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v194 = (id)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)v194, OS_LOG_TYPE_DEBUG))
          {
            v386 = nw_endpoint_handler_get_id_string(v471);
            v387 = nw_endpoint_handler_dry_run_string(v471);
            v388 = nw_endpoint_handler_copy_endpoint(v471);
            v389 = nw_endpoint_get_logging_description(v388);
            v390 = nw_endpoint_handler_state_string(v471);
            v391 = nw_endpoint_handler_mode_string(v471);
            v392 = nw_endpoint_handler_copy_current_path(v471);
            v393 = nw_endpoint_handler_get_id_string(v474);
            *(_DWORD *)buf = 136448258;
            v481 = "nw_endpoint_proxy_receive_report";
            v482 = 2082;
            v483 = (uint64_t)v386;
            v484 = 2082;
            v485 = (uint64_t)v387;
            v486 = 2082;
            v487 = v389;
            v488 = 2082;
            v489 = v390;
            v490 = 2082;
            v491 = v391;
            v492 = 2114;
            v493 = v392;
            v494 = 2082;
            *(void *)v495 = v393;
            *(_WORD *)&v495[8] = 2114;
            *(void *)&v495[10] = v461;
            _os_log_impl( &dword_181A5C000,  (os_log_t)v194,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy failed, not reporting error ([C%{public}s] %{public}@)",  buf,  0x5Cu);
          }

          goto LABEL_226;
        }

        if ((v193 & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v194 = (id)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)v194, OS_LOG_TYPE_DEFAULT))
          {
            v195 = nw_endpoint_handler_get_id_string(v471);
            v196 = nw_endpoint_handler_dry_run_string(v471);
            v197 = nw_endpoint_handler_copy_endpoint(v471);
            v198 = nw_endpoint_get_logging_description(v197);
            v199 = nw_endpoint_handler_state_string(v471);
            v200 = nw_endpoint_handler_mode_string(v471);
            v201 = nw_endpoint_handler_copy_current_path(v471);
            v202 = nw_endpoint_handler_get_id_string(v474);
            *(_DWORD *)buf = 136448258;
            v481 = "nw_endpoint_proxy_receive_report";
            v482 = 2082;
            v483 = (uint64_t)v195;
            v484 = 2082;
            v485 = (uint64_t)v196;
            v486 = 2082;
            v487 = v198;
            v488 = 2082;
            v489 = v199;
            v490 = 2082;
            v491 = v200;
            v492 = 2114;
            v493 = v201;
            v494 = 2082;
            *(void *)v495 = v202;
            *(_WORD *)&v495[8] = 2114;
            *(void *)&v495[10] = v461;
            _os_log_impl( &dword_181A5C000,  (os_log_t)v194,  OS_LOG_TYPE_DEFAULT,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy failed, not reporting error ([C%{public}s] %{public}@)",  buf,  0x5Cu);
          }

        v133 = *((void *)__dst[1] + 3);
        if (!v133) {
          goto LABEL_299;
        }
        v135 = *(void *)(*((void *)&uu + 1) + 24LL);
        if (!v135) {
          goto LABEL_299;
        }
        v139 = v128;
        v140 = *(void *)(*((void *)&uu + 1) + 24LL);
        while (*v139)
        {
          ++v139;
          if (!--v140) {
            goto LABEL_284;
          }
        }

        if (v140 >= 2) {
          *v139++ = 44;
        }
        *v139 = 0;
        v133 = *((void *)__dst[1] + 3);
        v135 = *(void *)(*((void *)&uu + 1) + 24LL);
LABEL_284:
        if (v133)
        {
          v134 = 0;
          if (v135)
          {
LABEL_286:
            v141 = v129;
            while (*v141)
            {
              ++v141;
              if (!--v135) {
                goto LABEL_289;
              }
            }

            if (!v134)
            {
              if (v135 >= 2) {
                goto LABEL_294;
              }
LABEL_298:
              *v141 = 0;
              goto LABEL_299;
            }

            v188 = (os_log_s *)__nwlog_obj();
            os_log_type_enabled(v188, OS_LOG_TYPE_ERROR);
            *(_DWORD *)v205 = 136446210;
            *(void *)&v205[4] = "_strict_strlcpy";
            v189 = (void *)_os_log_send_and_compose_impl();
            result = __nwlog_abort((uint64_t)v189);
            if (!(_DWORD)result)
            {
              free(v189);
              if (v135 >= 2)
              {
LABEL_294:
                v144 = 0LL;
                while (1)
                {
                  v145 = *(unsigned __int8 *)(v133 + v144);
                  v141[v144] = v145;
                  if (!v145) {
                    goto LABEL_299;
                  }
                  --v135;
                  ++v144;
                  if (v135 <= 1)
                  {
                    v141 += v144;
                    goto LABEL_298;
                  }
                }
              }

              goto LABEL_298;
            }

      v142 = v21 + v20;
      v278 = 0LL;
      v279 = &v278;
      v280 = 0x2000000000LL;
      LODWORD(v281) = v21 + v20;
      *(void *)buf = MEMORY[0x1895F87A8];
      *(void *)&buf[8] = 0x40000000LL;
      *(void *)&buf[16] = ___ZL45nw_protocol_finalize_partial_temp_frame_arrayP16nw_frame_array_sjP11nw_protocolb_block_invoke;
      v285 = (uint64_t)&unk_189BBB408;
      *(void *)v286 = &v278;
      v2 = (uint64_t *)(a1 + 328);
      *(void *)&v286[8] = a1 + 328;
      *(void *)&v286[16] = a1;
      v287 = 1;
      v143 = *(void *)(a1 + 328);
      do
      {
        if (!v143) {
          break;
        }
        v144 = *(void *)(v143 + 32);
        v145 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
        v143 = v144;
      }

      while ((v145 & 1) != 0);
      _Block_object_dispose(&v278, 8);
      v5 += v142;
      v3 -= v142;
      v17 = a1 + 64;
      if (!v3) {
        goto LABEL_457;
      }
    }
  }

    if (!v154) {
      return 0LL;
    }
    v94 = (char *)v154;
    goto LABEL_138;
  }

  if (*(void *)(a2 + 112))
  {
    if ((*(_WORD *)(a2 + 204) & 0x100) != 0
      && g_channel_check_validity
      && !g_channel_check_validity(a2, *(void *)(a2 + 88)))
    {
      v2 = 0;
      v7 = 0LL;
      v8 = *(void *)(a1 + 32);
      if (v8) {
        goto LABEL_16;
      }
    }

    else
    {
      v6 = *(_DWORD *)(a2 + 52);
      v5 = *(unsigned int *)(a2 + 56);
      if (v6) {
        v2 = v6 - (v5 + *(_DWORD *)(a2 + 60));
      }
      else {
        v2 = 0;
      }
      v7 = (const UInt8 *)(*(void *)(a2 + 112) + v5);
      v8 = *(void *)(a1 + 32);
      if (v8)
      {
LABEL_16:
        if ((*(_WORD *)(v8 + 368) & 0x80) != 0 || !gLogDatapath) {
          goto LABEL_18;
        }
        goto LABEL_244;
      }
    }
  }

  else
  {
    v7 = 0LL;
    v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_16;
    }
  }

  if (!gLogDatapath) {
    goto LABEL_10;
  }
LABEL_244:
  v158 = (os_log_s *)__nwlog_obj();
  v159 = os_log_type_enabled(v158, OS_LOG_TYPE_DEBUG);
  v8 = *(void *)(a1 + 32);
  if (v159)
  {
    v160 = "";
    *(_DWORD *)buf = 136447234;
    v168 = "nw_http_connect_process_inbound_data_block_invoke";
    v161 = (const char *)(v8 + 284);
    if (!v8) {
      v161 = "";
    }
    v169 = 2082;
    v170 = (void *)v161;
    v171 = 2080;
    if (v8) {
      v160 = " ";
    }
    v172 = v160;
    v173 = 2048;
    *(void *)v174 = a2;
    *(_WORD *)&v174[8] = 1024;
    *(_DWORD *)&v174[10] = v2;
    _os_log_impl( &dword_181A5C000,  v158,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sProcessing frame (%p, %u bytes)",  buf,  0x30u);
    v8 = *(void *)(a1 + 32);
  }

  if (!v8)
  {
LABEL_10:
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v168 = "nw_http_connect_append_bytes";
    v9 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v165 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v10 = (os_log_s *)__nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_95;
      }
      *(_DWORD *)buf = 136446210;
      v168 = "nw_http_connect_append_bytes";
      v12 = "%{public}s called with null http_connect";
      goto LABEL_93;
    }

    if (!v165)
    {
      v10 = (os_log_s *)__nwlog_obj();
      v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_95;
      }
      *(_DWORD *)buf = 136446210;
      v168 = "nw_http_connect_append_bytes";
      v12 = "%{public}s called with null http_connect, backtrace limit exceeded";
      goto LABEL_93;
    }

    v35 = (char *)__nw_create_backtrace_string();
    v10 = (os_log_s *)__nwlog_obj();
    v11 = type;
    v36 = os_log_type_enabled(v10, type);
    if (!v35)
    {
      if (!v36) {
        goto LABEL_95;
      }
      *(_DWORD *)buf = 136446210;
      v168 = "nw_http_connect_append_bytes";
      v12 = "%{public}s called with null http_connect, no backtrace";
      goto LABEL_93;
    }

    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      v168 = "nw_http_connect_append_bytes";
      v169 = 2082;
      v170 = v35;
      v37 = "%{public}s called with null http_connect, dumping backtrace:%{public}s";
LABEL_62:
      _os_log_impl(&dword_181A5C000, v10, v11, v37, buf, 0x16u);
    }

      free(v164);
      if (!v154)
      {
LABEL_398:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_protocol_http1_input_finished";
        v158 = (char *)_os_log_send_and_compose_impl();
        v265[0] = 16;
        v257[0] = OS_LOG_TYPE_DEFAULT;
        if (v265[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v159 = (os_log_s *)gLogObj;
          v160 = v265[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v265[0])) {
            goto LABEL_432;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_protocol_http1_input_finished";
          v161 = "%{public}s called with null http1";
        }

        else if (v257[0])
        {
          v216 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v159 = (os_log_s *)gLogObj;
          v160 = v265[0];
          v217 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v265[0]);
          if (v216)
          {
            if (v217)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&buf[4] = "nw_protocol_http1_input_finished";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v216;
              _os_log_impl( &dword_181A5C000,  v159,  v160,  "%{public}s called with null http1, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v216);
LABEL_432:
            if (!v158) {
              return;
            }
            goto LABEL_433;
          }

          if (!v217) {
            goto LABEL_432;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_protocol_http1_input_finished";
          v161 = "%{public}s called with null http1, no backtrace";
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v159 = (os_log_s *)gLogObj;
          v160 = v265[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v265[0])) {
            goto LABEL_432;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_protocol_http1_input_finished";
          v161 = "%{public}s called with null http1, backtrace limit exceeded";
        }

        goto LABEL_431;
      }

                                if (*(_BYTE *)(a2 + *v8)) {
                                  v134 = 0;
                                }
LABEL_274:
                                *(_DWORD *)(a1 + 16) = v134;
                                goto LABEL_4;
                              case 5u:
                                *(_BYTE *)(a1 + 44) |= 2u;
                                v92 = *v3;
                                v93 = *(void *)(a2 + v92);
                                if (v93 == -1LL || v93 >= *(void *)(a2 + *v6))
                                {
                                  v96 = 0;
LABEL_266:
                                  *(_BYTE *)(a2 + *v8) = 1;
                                  goto LABEL_267;
                                }

                                v94 = v93 + 1;
                                v95 = *(_BYTE *)(*(void *)(a2 + *v10) + v93);
                                *(void *)(a2 + v92) = v94;
                                v96 = v95 & 0x7F;
                                if ((v95 & 0x80) == 0) {
                                  goto LABEL_267;
                                }
                                v97 = *v3;
                                v98 = *(void *)(a2 + v97);
                                if (v98 == -1LL || v98 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_266;
                                }
                                v99 = *(char *)(*(void *)(a2 + *v10) + v98);
                                *(void *)(a2 + v97) = v98 + 1;
                                v96 = v96 & 0xFFFFC07F | ((v99 & 0x7F) << 7);
                                if ((v99 & 0x80000000) == 0) {
                                  goto LABEL_267;
                                }
                                v100 = *v3;
                                v101 = *(void *)(a2 + v100);
                                if (v101 == -1LL || v101 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_266;
                                }
                                v102 = *(char *)(*(void *)(a2 + *v10) + v101);
                                *(void *)(a2 + v100) = v101 + 1;
                                v96 = v96 & 0xFFE03FFF | ((v102 & 0x7F) << 14);
                                if ((v102 & 0x80000000) == 0) {
                                  goto LABEL_267;
                                }
                                v103 = *v3;
                                v104 = *(void *)(a2 + v103);
                                if (v104 == -1LL || v104 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_266;
                                }
                                v105 = *(char *)(*(void *)(a2 + *v10) + v104);
                                *(void *)(a2 + v103) = v104 + 1;
                                v96 = v96 & 0xF01FFFFF | ((v105 & 0x7F) << 21);
                                if ((v105 & 0x80000000) == 0) {
                                  goto LABEL_267;
                                }
                                v106 = *v3;
                                v107 = *(void *)(a2 + v106);
                                if (v107 == -1LL || v107 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_266;
                                }
                                v108 = v107 + 1;
                                v109 = *(char *)(*(void *)(a2 + *v10) + v107);
                                *(void *)(a2 + v106) = v108;
                                v96 |= v109 << 28;
                                if ((v109 & 0x80000000) == 0) {
                                  goto LABEL_267;
                                }
                                v110 = *v3;
                                v111 = *(void *)(a2 + v110);
                                if (v111 == -1LL || v111 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_266;
                                }
                                v112 = v111 + 1;
                                v113 = *(char *)(*(void *)(a2 + *v10) + v111);
                                *(void *)(a2 + v110) = v112;
                                if ((v113 & 0x80000000) == 0) {
                                  goto LABEL_267;
                                }
                                v114 = *v3;
                                v115 = *(void *)(a2 + v114);
                                if (v115 == -1LL || v115 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_266;
                                }
                                v116 = v115 + 1;
                                v117 = *(char *)(*(void *)(a2 + *v10) + v115);
                                *(void *)(a2 + v114) = v116;
                                if ((v117 & 0x80000000) == 0) {
                                  goto LABEL_267;
                                }
                                v118 = *v3;
                                v119 = *(void *)(a2 + v118);
                                if (v119 == -1LL || v119 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_266;
                                }
                                v120 = v119 + 1;
                                v121 = *(char *)(*(void *)(a2 + *v10) + v119);
                                *(void *)(a2 + v118) = v120;
                                if ((v121 & 0x80000000) == 0) {
                                  goto LABEL_267;
                                }
                                v122 = *v3;
                                v123 = *(void *)(a2 + v122);
                                if (v123 == -1LL || v123 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_266;
                                }
                                v124 = v123 + 1;
                                v125 = *(char *)(*(void *)(a2 + *v10) + v123);
                                *(void *)(a2 + v122) = v124;
                                if ((v125 & 0x80000000) == 0) {
                                  goto LABEL_267;
                                }
                                v126 = *v3;
                                v127 = *(void *)(a2 + v126);
                                if (v127 == -1LL || v127 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_266;
                                }
                                v128 = v127 + 1;
                                v129 = *(char *)(*(void *)(a2 + *v10) + v127);
                                *(void *)(a2 + v126) = v128;
                                if (v129 < 0)
                                {
                                  v96 = 0;
                                  goto LABEL_269;
                                }

      if (v384 && v386)
      {
        free(v386);
        v386 = 0LL;
      }

      goto LABEL_276;
    }

    if (v5)
    {
      if ((v3 & 1) != 0)
      {
        v65 = *((void *)&off_189BC7440 + nw_connection_get_tls_version(v1));
        if (v386)
        {
          if ((*((_BYTE *)v1 + 109) & 4) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            v57 = (os_log_s *)(id)gconnectionLogObj;
            if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_272;
            }
            v364 = v50;
            v66 = v1->top_id;
            v67 = nw_endpoint_get_logging_description(v1->endpoint);
            v68 = v1->parameters;
            v69 = nw_endpoint_handler_get_id_string(v48);
            v374 = nw_endpoint_get_description(v49);
            v70 = nw_endpoint_get_logging_description(v364);
            else {
              v71 = off_189BB70A8[privacy_stance - 1];
            }
            v326 = *((void *)v386 + 1);
            v327 = *((void *)v386 + 5);
            v328 = *((void *)v386 + 6);
            v329 = *((void *)v386 + 9);
            v331 = *((void *)v386 + 10);
            v330 = *((void *)v386 + 11);
            v332 = *((void *)v386 + 12);
            v333 = *((void *)v386 + 13);
            v335 = *((void *)v386 + 14);
            v334 = *((void *)v386 + 15);
            *(void *)&v405[142] = *((void *)v386 + 8);
            *(void *)&v405[152] = v330;
            *(void *)&v405[162] = v332;
            *(void *)&v405[182] = v335;
            *(_DWORD *)v388 = v66;
            *(void *)&v388[12] = v1->top_uuid;
            *(void *)&v388[22] = v67;
            *(void *)&v389[2] = v68;
            v391 = v69;
            *(_WORD *)&v388[4] = 1042;
            v392 = 1042;
            *(_DWORD *)&v388[6] = 16;
            v393 = 16;
            *(_WORD *)&v388[10] = 2098;
            v394 = 2098;
            v395 = v410;
            v397 = v374;
            v399 = v70;
            *(_WORD *)v389 = 2114;
            v400 = 2114;
            *(void *)v403 = v71;
            v404[0] = v362 / 0x3E8;
            *(_DWORD *)((char *)&v404[1] + 2) = v362 % 0x3E8;
            *(_DWORD *)v405 = v372 / 0x3E8;
            *(_DWORD *)&v405[6] = v372 % 0x3E8;
            *(_DWORD *)&v405[12] = v379 / 0x3E8;
            *(_DWORD *)&v405[18] = v379 % 0x3E8;
            *(void *)&v405[24] = v383;
            *(_DWORD *)&v405[34] = v382 / 0x3E8;
            *(_DWORD *)&v405[40] = v382 % 0x3E8;
            *(_DWORD *)&v405[46] = transport_connect_milliseconds / 0x3E8;
            *(_DWORD *)&v405[52] = transport_connect_milliseconds % 0x3E8;
            *(_WORD *)&v388[20] = 2082;
            v390 = 2082;
            v396 = 2082;
            v398 = 2082;
            v402 = 2082;
            *(_WORD *)&v405[22] = 2082;
            *(_WORD *)&v405[56] = 2082;
            *(void *)&v405[58] = v65;
            *(_DWORD *)&v405[68] = handshake_ms_for_protocol / 0x3E8;
            *(_DWORD *)&v405[74] = handshake_ms_for_protocol % 0x3E8;
            *(void *)&v405[80] = v328;
            *(void *)&v405[90] = v329;
            *(void *)&v405[100] = v326;
            *(void *)&v405[110] = v327;
            *(_DWORD *)&v405[120] = v334 / 0x3E8;
            *(_DWORD *)&v405[126] = v334 % 0x3E8;
            *(void *)&v405[132] = v331;
            *(void *)&v405[172] = v333;
            *(_WORD *)&v405[78] = 2048;
            *(_WORD *)&v405[88] = 2048;
            *(_WORD *)&v405[98] = 2048;
            *(_WORD *)&v405[108] = 2048;
            *(_WORD *)&v405[130] = 2048;
            *(_WORD *)&v405[140] = 2048;
            *(_WORD *)&v405[150] = 2048;
            *(_WORD *)&v405[160] = 2048;
            *(_WORD *)&v405[170] = 2048;
            *(_WORD *)&v405[180] = 2048;
            LOWORD(v404[1]) = 1024;
            HIWORD(v404[2]) = 1024;
            *(_WORD *)&v405[4] = 1024;
            *(_WORD *)&v405[10] = 1024;
            *(_WORD *)&v405[16] = 1024;
            *(_WORD *)&v405[32] = 1024;
            *(_WORD *)&v405[38] = 1024;
            *(_WORD *)&v405[44] = 1024;
            *(_WORD *)&v405[50] = 1024;
            *(_WORD *)&v405[66] = 1024;
            *(_WORD *)&v405[72] = 1024;
            *(_WORD *)&v405[118] = 1024;
            *(_WORD *)&v405[124] = 1024;
            *(_WORD *)&v403[8] = 1024;
            *(_DWORD *)buf = 67118594;
            v401 = v370;
            _os_log_impl( &dword_181A5C000,  v57,  OS_LOG_TYPE_DEFAULT,  "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n \t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n \tConnected Path: %{public}@\n \tPrivacy Stance: %{public}s\n \tDuration: %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03us took %u.%03us, %{public}s took %u. %03us\n \tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-of-ord er bytes: %llu\n \tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu",  buf,  0x13Au);
            goto LABEL_271;
          }

          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v57 = (os_log_s *)(id)gconnectionLogObj;
          if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_272;
          }
          v376 = v65;
          v364 = v50;
          v201 = v1->top_id;
          v202 = nw_endpoint_get_logging_description(v1->endpoint);
          v203 = v1->parameters;
          v204 = nw_endpoint_handler_get_id_string(v48);
          v205 = nw_endpoint_get_description(v49);
          v206 = nw_endpoint_get_logging_description(v364);
          v207 = *((void *)v386 + 1);
          v208 = *((void *)v386 + 5);
          v209 = *((void *)v386 + 6);
          v211 = *((void *)v386 + 8);
          v210 = *((void *)v386 + 9);
          v212 = *((void *)v386 + 10);
          v214 = *((void *)v386 + 12);
          v213 = *((void *)v386 + 13);
          v215 = *((void *)v386 + 14);
          v216 = *((void *)v386 + 15);
          *(void *)&v405[142] = *((void *)v386 + 11);
          *(void *)&v405[152] = v214;
          *(void *)&v405[162] = v213;
          *(_DWORD *)v388 = v201;
          *(void *)&v388[12] = v1->top_uuid;
          *(void *)&v388[22] = v202;
          *(void *)&v389[2] = v203;
          v391 = v204;
          *(_WORD *)&v388[4] = 1042;
          v392 = 1042;
          *(_DWORD *)&v388[6] = 16;
          v393 = 16;
          *(_WORD *)&v388[10] = 2098;
          v394 = 2098;
          v395 = v410;
          v397 = v205;
          v399 = v206;
          *(_WORD *)v389 = 2114;
          v400 = 2114;
          *(_DWORD *)v403 = v362 / 0x3E8;
          *(_DWORD *)((char *)v404 + 2) = v372 / 0x3E8;
          v404[2] = v372 % 0x3E8;
          *(_DWORD *)&v405[2] = v379 / 0x3E8;
          *(_DWORD *)&v405[8] = v379 % 0x3E8;
          *(void *)&v405[14] = v383;
          *(_DWORD *)&v405[24] = v382 / 0x3E8;
          *(_DWORD *)&v405[30] = v382 % 0x3E8;
          *(_DWORD *)&v405[36] = transport_connect_milliseconds / 0x3E8;
          *(_DWORD *)&v405[42] = transport_connect_milliseconds % 0x3E8;
          *(_WORD *)&v388[20] = 2082;
          v390 = 2082;
          v396 = 2082;
          v398 = 2082;
          *(_WORD *)&v405[12] = 2082;
          *(_WORD *)&v405[46] = 2082;
          *(void *)&v405[48] = v376;
          *(_DWORD *)&v405[58] = handshake_ms_for_protocol / 0x3E8;
          *(_DWORD *)&v405[64] = handshake_ms_for_protocol % 0x3E8;
          *(void *)&v405[70] = v209;
          *(void *)&v405[80] = v210;
          *(void *)&v405[90] = v207;
          *(void *)&v405[100] = v208;
          *(_DWORD *)&v405[110] = v216 / 0x3E8;
          *(_DWORD *)&v405[116] = v216 % 0x3E8;
          *(void *)&v405[122] = v212;
          *(void *)&v405[132] = v211;
          *(_WORD *)&v405[68] = 2048;
          *(_WORD *)&v405[78] = 2048;
          *(_WORD *)&v405[88] = 2048;
          *(_WORD *)&v405[98] = 2048;
          *(_WORD *)&v405[120] = 2048;
          *(_WORD *)&v405[130] = 2048;
          *(_WORD *)&v405[140] = 2048;
          *(_WORD *)&v405[150] = 2048;
          *(_WORD *)&v405[160] = 2048;
          *(_WORD *)&v405[170] = 2048;
          *(void *)&v405[172] = v215;
          LOWORD(v404[0]) = 1024;
          HIWORD(v404[1]) = 1024;
          *(_WORD *)v405 = 1024;
          *(_WORD *)&v405[6] = 1024;
          *(_WORD *)&v405[22] = 1024;
          *(_WORD *)&v405[28] = 1024;
          *(_WORD *)&v405[34] = 1024;
          *(_WORD *)&v405[40] = 1024;
          *(_WORD *)&v405[56] = 1024;
          *(_WORD *)&v405[62] = 1024;
          *(_WORD *)&v405[108] = 1024;
          *(_WORD *)&v405[114] = 1024;
          v402 = 1024;
          *(_WORD *)&v403[4] = 1024;
          *(_DWORD *)&v403[6] = v362 % 0x3E8;
          *(_DWORD *)buf = 67118338;
          v401 = v370;
          v217 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                 "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                 "\tConnected Path: %{public}@\n"
                 "\tDuration: %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03us took %u.%03us, %{public}s took "
                 "%u.%03us\n"
                 "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-of-"
                 "order bytes: %llu\n"
                 "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
          v218 = v57;
          v219 = 304;
        }

        else if ((*((_BYTE *)v1 + 109) & 4) != 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v57 = (os_log_s *)(id)gconnectionLogObj;
          if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_272;
          }
          v378 = v65;
          v364 = v50;
          v298 = v1->top_id;
          v299 = nw_endpoint_get_logging_description(v1->endpoint);
          v300 = v1->parameters;
          v301 = nw_endpoint_handler_get_id_string(v48);
          v302 = nw_endpoint_get_description(v49);
          v303 = nw_endpoint_get_logging_description(v364);
          *(_DWORD *)buf = 67115266;
          *(_DWORD *)v388 = v298;
          *(_WORD *)&v388[4] = 1042;
          *(_DWORD *)&v388[6] = 16;
          *(_WORD *)&v388[10] = 2098;
          *(void *)&v388[12] = v1->top_uuid;
          *(_WORD *)&v388[20] = 2082;
          *(void *)&v388[22] = v299;
          *(_WORD *)v389 = 2114;
          *(void *)&v389[2] = v300;
          v390 = 2082;
          v391 = v301;
          v392 = 1042;
          v393 = 16;
          v394 = 2098;
          v395 = v410;
          v396 = 2082;
          v397 = v302;
          v398 = 2082;
          v399 = v303;
          v400 = 2114;
          v401 = v370;
          v402 = 1024;
          *(_DWORD *)v403 = v362 / 0x3E8;
          *(_WORD *)&v403[4] = 1024;
          *(_DWORD *)&v403[6] = v362 % 0x3E8;
          LOWORD(v404[0]) = 1024;
          *(_DWORD *)((char *)v404 + 2) = v372 / 0x3E8;
          HIWORD(v404[1]) = 1024;
          v404[2] = v372 % 0x3E8;
          *(_WORD *)v405 = 1024;
          *(_DWORD *)&v405[2] = v379 / 0x3E8;
          *(_WORD *)&v405[6] = 1024;
          *(_DWORD *)&v405[8] = v379 % 0x3E8;
          *(_WORD *)&v405[12] = 2082;
          *(void *)&v405[14] = v383;
          *(_WORD *)&v405[22] = 1024;
          *(_DWORD *)&v405[24] = v382 / 0x3E8;
          *(_WORD *)&v405[28] = 1024;
          *(_DWORD *)&v405[30] = v382 % 0x3E8;
          *(_WORD *)&v405[34] = 1024;
          *(_DWORD *)&v405[36] = transport_connect_milliseconds / 0x3E8;
          *(_WORD *)&v405[40] = 1024;
          *(_DWORD *)&v405[42] = transport_connect_milliseconds % 0x3E8;
          *(_WORD *)&v405[46] = 2082;
          *(void *)&v405[48] = v378;
          *(_WORD *)&v405[56] = 1024;
          *(_DWORD *)&v405[58] = handshake_ms_for_protocol / 0x3E8;
          *(_WORD *)&v405[62] = 1024;
          *(_DWORD *)&v405[64] = handshake_ms_for_protocol % 0x3E8;
          v217 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                 "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                 "\tConnected Path: %{public}@\n"
                 "\tDuration: %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03us took %u.%03us, %{public}s took %u.%03us";
          v218 = v57;
          v219 = 192;
        }

        else
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v57 = (os_log_s *)(id)gconnectionLogObj;
          if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_272;
          }
          v364 = v50;
          v179 = v1->top_id;
          v375 = nw_endpoint_get_logging_description(v1->endpoint);
          v180 = v1->parameters;
          v181 = nw_endpoint_handler_get_id_string(v48);
          v182 = nw_endpoint_get_description(v49);
          v183 = nw_endpoint_get_logging_description(v364);
          else {
            v184 = off_189BB70A8[privacy_stance - 1];
          }
          *(_DWORD *)buf = 67115522;
          *(_DWORD *)v388 = v179;
          *(_WORD *)&v388[4] = 1042;
          *(_DWORD *)&v388[6] = 16;
          *(_WORD *)&v388[10] = 2098;
          *(void *)&v388[12] = v1->top_uuid;
          *(_WORD *)&v388[20] = 2082;
          *(void *)&v388[22] = v375;
          *(_WORD *)v389 = 2114;
          *(void *)&v389[2] = v180;
          v390 = 2082;
          v391 = v181;
          v392 = 1042;
          v393 = 16;
          v394 = 2098;
          v395 = v410;
          v396 = 2082;
          v397 = v182;
          v398 = 2082;
          v399 = v183;
          v400 = 2114;
          v401 = v370;
          v402 = 2082;
          *(void *)v403 = v184;
          *(_WORD *)&v403[8] = 1024;
          v404[0] = v362 / 0x3E8;
          LOWORD(v404[1]) = 1024;
          *(_DWORD *)((char *)&v404[1] + 2) = v362 % 0x3E8;
          HIWORD(v404[2]) = 1024;
          *(_DWORD *)v405 = v372 / 0x3E8;
          *(_WORD *)&v405[4] = 1024;
          *(_DWORD *)&v405[6] = v372 % 0x3E8;
          *(_WORD *)&v405[10] = 1024;
          *(_DWORD *)&v405[12] = v379 / 0x3E8;
          *(_WORD *)&v405[16] = 1024;
          *(_DWORD *)&v405[18] = v379 % 0x3E8;
          *(_WORD *)&v405[22] = 2082;
          *(void *)&v405[24] = v383;
          *(_WORD *)&v405[32] = 1024;
          *(_DWORD *)&v405[34] = v382 / 0x3E8;
          *(_WORD *)&v405[38] = 1024;
          *(_DWORD *)&v405[40] = v382 % 0x3E8;
          *(_WORD *)&v405[44] = 1024;
          *(_DWORD *)&v405[46] = transport_connect_milliseconds / 0x3E8;
          *(_WORD *)&v405[50] = 1024;
          *(_DWORD *)&v405[52] = transport_connect_milliseconds % 0x3E8;
          *(_WORD *)&v405[56] = 2082;
          *(void *)&v405[58] = v65;
          *(_WORD *)&v405[66] = 1024;
          *(_DWORD *)&v405[68] = handshake_ms_for_protocol / 0x3E8;
          *(_WORD *)&v405[72] = 1024;
          *(_DWORD *)&v405[74] = handshake_ms_for_protocol % 0x3E8;
          v217 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                 "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                 "\tConnected Path: %{public}@\n"
                 "\tPrivacy Stance: %{public}s\n"
                 "\tDuration: %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03us took %u.%03us, %{public}s took %u.%03us";
          v218 = v57;
          v219 = 202;
        }

        goto LABEL_264;
      }

      if (v386)
      {
        if ((*((_BYTE *)v1 + 109) & 4) != 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v57 = (os_log_s *)(id)gconnectionLogObj;
          if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_272;
          }
          v88 = v49;
          v365 = v50;
          v185 = v1->top_id;
          v186 = nw_endpoint_get_logging_description(v1->endpoint);
          v187 = v1->parameters;
          v188 = nw_endpoint_handler_get_id_string(v48);
          v189 = nw_endpoint_get_description(v88);
          v190 = nw_endpoint_get_logging_description(v365);
          v191 = *((void *)v386 + 1);
          v192 = *((void *)v386 + 5);
          v193 = *((void *)v386 + 6);
          v195 = *((void *)v386 + 8);
          v194 = *((void *)v386 + 9);
          v197 = *((void *)v386 + 10);
          v196 = *((void *)v386 + 11);
          v198 = *((void *)v386 + 12);
          v199 = *((void *)v386 + 13);
          v200 = *((void *)v386 + 15);
          *(void *)&v405[150] = *((void *)v386 + 14);
          *(_DWORD *)v388 = v185;
          *(void *)&v388[12] = v1->top_uuid;
          *(void *)&v388[22] = v186;
          *(void *)&v389[2] = v187;
          v391 = v188;
          *(_WORD *)&v388[4] = 1042;
          v392 = 1042;
          *(_DWORD *)&v388[6] = 16;
          v393 = 16;
          *(_WORD *)&v388[10] = 2098;
          v394 = 2098;
          v395 = v410;
          v397 = v189;
          v399 = v190;
          *(_WORD *)v389 = 2114;
          v400 = 2114;
          *(_DWORD *)v403 = v362 / 0x3E8;
          *(_DWORD *)((char *)v404 + 2) = v372 / 0x3E8;
          v404[2] = v372 % 0x3E8;
          *(_DWORD *)&v405[2] = v379 / 0x3E8;
          *(_DWORD *)&v405[8] = v379 % 0x3E8;
          *(_WORD *)&v388[20] = 2082;
          v390 = 2082;
          v396 = 2082;
          v398 = 2082;
          *(_WORD *)&v405[12] = 2082;
          *(void *)&v405[14] = v383;
          *(_DWORD *)&v405[24] = v382 / 0x3E8;
          *(_DWORD *)&v405[30] = v382 % 0x3E8;
          *(_DWORD *)&v405[36] = transport_connect_milliseconds / 0x3E8;
          *(_DWORD *)&v405[42] = transport_connect_milliseconds % 0x3E8;
          *(void *)&v405[48] = v193;
          *(void *)&v405[58] = v194;
          *(void *)&v405[68] = v191;
          *(void *)&v405[78] = v192;
          *(_DWORD *)&v405[88] = v200 / 0x3E8;
          *(_DWORD *)&v405[94] = v200 % 0x3E8;
          *(void *)&v405[100] = v197;
          *(void *)&v405[110] = v195;
          *(void *)&v405[120] = v196;
          *(void *)&v405[130] = v198;
          *(void *)&v405[140] = v199;
          *(_WORD *)&v405[46] = 2048;
          *(_WORD *)&v405[56] = 2048;
          *(_WORD *)&v405[66] = 2048;
          *(_WORD *)&v405[76] = 2048;
          *(_WORD *)&v405[98] = 2048;
          *(_WORD *)&v405[108] = 2048;
          *(_WORD *)&v405[118] = 2048;
          *(_WORD *)&v405[128] = 2048;
          *(_WORD *)&v405[138] = 2048;
          *(_WORD *)&v405[148] = 2048;
          LOWORD(v404[0]) = 1024;
          HIWORD(v404[1]) = 1024;
          *(_WORD *)v405 = 1024;
          *(_WORD *)&v405[6] = 1024;
          *(_WORD *)&v405[22] = 1024;
          *(_WORD *)&v405[28] = 1024;
          *(_WORD *)&v405[34] = 1024;
          *(_WORD *)&v405[40] = 1024;
          *(_WORD *)&v405[86] = 1024;
          *(_WORD *)&v405[92] = 1024;
          v402 = 1024;
          *(_WORD *)&v403[4] = 1024;
          *(_DWORD *)&v403[6] = v362 % 0x3E8;
          *(_DWORD *)buf = 67117570;
          v401 = v370;
          _os_log_impl( &dword_181A5C000,  v57,  OS_LOG_TYPE_DEFAULT,  "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n \t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n \tConnected Path: %{public}@\n \tDuration: %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03us took %u.%03us\n \tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-of-order bytes: %llu\n \tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu",  buf,  0x11Au);
        }

        else
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v57 = (os_log_s *)(id)gconnectionLogObj;
          if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_272;
          }
          v88 = v49;
          v365 = v50;
          v89 = v1->top_id;
          v90 = nw_endpoint_get_logging_description(v1->endpoint);
          v91 = v1->parameters;
          v92 = nw_endpoint_handler_get_id_string(v48);
          v93 = nw_endpoint_get_description(v88);
          v94 = nw_endpoint_get_logging_description(v365);
          else {
            v95 = off_189BB70A8[privacy_stance - 1];
          }
          v316 = *((void *)v386 + 1);
          v317 = *((void *)v386 + 5);
          v318 = *((void *)v386 + 6);
          v320 = *((void *)v386 + 8);
          v319 = *((void *)v386 + 9);
          v322 = *((void *)v386 + 10);
          v321 = *((void *)v386 + 11);
          v323 = *((void *)v386 + 12);
          v325 = *((void *)v386 + 14);
          v324 = *((void *)v386 + 15);
          *(void *)&v405[150] = *((void *)v386 + 13);
          *(void *)&v405[160] = v325;
          *(_DWORD *)v388 = v89;
          *(void *)&v388[12] = v1->top_uuid;
          *(void *)&v388[22] = v90;
          *(void *)&v389[2] = v91;
          v391 = v92;
          *(_WORD *)&v388[4] = 1042;
          v392 = 1042;
          *(_DWORD *)&v388[6] = 16;
          v393 = 16;
          *(_WORD *)&v388[10] = 2098;
          v394 = 2098;
          v395 = v410;
          v397 = v93;
          v399 = v94;
          *(_WORD *)v389 = 2114;
          v400 = 2114;
          *(void *)v403 = v95;
          v404[0] = v362 / 0x3E8;
          *(_DWORD *)((char *)&v404[1] + 2) = v362 % 0x3E8;
          *(_DWORD *)v405 = v372 / 0x3E8;
          *(_DWORD *)&v405[6] = v372 % 0x3E8;
          *(_DWORD *)&v405[12] = v379 / 0x3E8;
          *(_DWORD *)&v405[18] = v379 % 0x3E8;
          *(_WORD *)&v388[20] = 2082;
          v390 = 2082;
          v396 = 2082;
          v398 = 2082;
          v402 = 2082;
          *(_WORD *)&v405[22] = 2082;
          *(void *)&v405[24] = v383;
          *(_DWORD *)&v405[34] = v382 / 0x3E8;
          *(_DWORD *)&v405[40] = v382 % 0x3E8;
          *(_DWORD *)&v405[46] = transport_connect_milliseconds / 0x3E8;
          *(_DWORD *)&v405[52] = transport_connect_milliseconds % 0x3E8;
          *(void *)&v405[58] = v318;
          *(void *)&v405[68] = v319;
          *(void *)&v405[78] = v316;
          *(void *)&v405[88] = v317;
          *(_DWORD *)&v405[98] = v324 / 0x3E8;
          *(_DWORD *)&v405[104] = v324 % 0x3E8;
          *(void *)&v405[110] = v322;
          *(void *)&v405[120] = v320;
          *(void *)&v405[130] = v321;
          *(void *)&v405[140] = v323;
          *(_WORD *)&v405[56] = 2048;
          *(_WORD *)&v405[66] = 2048;
          *(_WORD *)&v405[76] = 2048;
          *(_WORD *)&v405[86] = 2048;
          *(_WORD *)&v405[108] = 2048;
          *(_WORD *)&v405[118] = 2048;
          *(_WORD *)&v405[128] = 2048;
          *(_WORD *)&v405[138] = 2048;
          *(_WORD *)&v405[148] = 2048;
          *(_WORD *)&v405[158] = 2048;
          LOWORD(v404[1]) = 1024;
          HIWORD(v404[2]) = 1024;
          *(_WORD *)&v405[4] = 1024;
          *(_WORD *)&v405[10] = 1024;
          *(_WORD *)&v405[16] = 1024;
          *(_WORD *)&v405[32] = 1024;
          *(_WORD *)&v405[38] = 1024;
          *(_WORD *)&v405[44] = 1024;
          *(_WORD *)&v405[50] = 1024;
          *(_WORD *)&v405[96] = 1024;
          *(_WORD *)&v405[102] = 1024;
          *(_WORD *)&v403[8] = 1024;
          *(_DWORD *)buf = 67117826;
          v401 = v370;
          _os_log_impl( &dword_181A5C000,  v57,  OS_LOG_TYPE_DEFAULT,  "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n \t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n \tConnected Path: %{public}@\n \tPrivacy Stance: %{public}s\n \tDuration: %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03us took %u.%03us\n \tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-of-order bytes: %llu\n \tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu",  buf,  0x124u);
        }

        v50 = v365;
        v49 = v88;
        goto LABEL_272;
      }

      if ((*((_BYTE *)v1 + 109) & 4) != 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        v57 = (os_log_s *)(id)gconnectionLogObj;
        if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_272;
        }
        v171 = v49;
        v368 = v50;
        v270 = v1->top_id;
        v271 = nw_endpoint_get_logging_description(v1->endpoint);
        v272 = v1->parameters;
        v273 = nw_endpoint_handler_get_id_string(v48);
        v274 = nw_endpoint_get_description(v171);
        v275 = nw_endpoint_get_logging_description(v368);
        *(_DWORD *)buf = 67114498;
        *(_DWORD *)v388 = v270;
        *(_WORD *)&v388[4] = 1042;
        *(_DWORD *)&v388[6] = 16;
        *(_WORD *)&v388[10] = 2098;
        *(void *)&v388[12] = v1->top_uuid;
        *(_WORD *)&v388[20] = 2082;
        *(void *)&v388[22] = v271;
        *(_WORD *)v389 = 2114;
        *(void *)&v389[2] = v272;
        v390 = 2082;
        v391 = v273;
        v392 = 1042;
        v393 = 16;
        v394 = 2098;
        v395 = v410;
        v396 = 2082;
        v397 = v274;
        v398 = 2082;
        v399 = v275;
        v400 = 2114;
        v401 = v370;
        v402 = 1024;
        *(_DWORD *)v403 = v362 / 0x3E8;
        *(_WORD *)&v403[4] = 1024;
        *(_DWORD *)&v403[6] = v362 % 0x3E8;
        LOWORD(v404[0]) = 1024;
        *(_DWORD *)((char *)v404 + 2) = v372 / 0x3E8;
        HIWORD(v404[1]) = 1024;
        v404[2] = v372 % 0x3E8;
        *(_WORD *)v405 = 1024;
        *(_DWORD *)&v405[2] = v379 / 0x3E8;
        *(_WORD *)&v405[6] = 1024;
        *(_DWORD *)&v405[8] = v379 % 0x3E8;
        *(_WORD *)&v405[12] = 2082;
        *(void *)&v405[14] = v383;
        *(_WORD *)&v405[22] = 1024;
        *(_DWORD *)&v405[24] = v382 / 0x3E8;
        *(_WORD *)&v405[28] = 1024;
        *(_DWORD *)&v405[30] = v382 % 0x3E8;
        *(_WORD *)&v405[34] = 1024;
        *(_DWORD *)&v405[36] = transport_connect_milliseconds / 0x3E8;
        *(_WORD *)&v405[40] = 1024;
        *(_DWORD *)&v405[42] = transport_connect_milliseconds % 0x3E8;
        v276 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
               "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
               "\tConnected Path: %{public}@\n"
               "\tDuration: %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03us took %u.%03us";
        v277 = v57;
        v278 = 170;
      }

      else
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        v57 = (os_log_s *)(id)gconnectionLogObj;
        if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_272;
        }
        v171 = v49;
        v368 = v50;
        v172 = v1->top_id;
        v173 = nw_endpoint_get_logging_description(v1->endpoint);
        v174 = v1->parameters;
        v175 = nw_endpoint_handler_get_id_string(v48);
        v176 = nw_endpoint_get_description(v171);
        v177 = nw_endpoint_get_logging_description(v368);
        else {
          v178 = off_189BB70A8[privacy_stance - 1];
        }
        *(_DWORD *)buf = 67114754;
        *(_DWORD *)v388 = v172;
        *(_WORD *)&v388[4] = 1042;
        *(_DWORD *)&v388[6] = 16;
        *(_WORD *)&v388[10] = 2098;
        *(void *)&v388[12] = v1->top_uuid;
        *(_WORD *)&v388[20] = 2082;
        *(void *)&v388[22] = v173;
        *(void *)&v389[2] = v174;
        *(_WORD *)v389 = 2114;
        v390 = 2082;
        v391 = v175;
        v392 = 1042;
        v393 = 16;
        v394 = 2098;
        v395 = v410;
        v396 = 2082;
        v397 = v176;
        v398 = 2082;
        v399 = v177;
        v400 = 2114;
        v401 = v370;
        v402 = 2082;
        *(void *)v403 = v178;
        *(_WORD *)&v403[8] = 1024;
        v404[0] = v362 / 0x3E8;
        LOWORD(v404[1]) = 1024;
        *(_DWORD *)((char *)&v404[1] + 2) = v362 % 0x3E8;
        HIWORD(v404[2]) = 1024;
        *(_DWORD *)v405 = v372 / 0x3E8;
        *(_WORD *)&v405[4] = 1024;
        *(_DWORD *)&v405[6] = v372 % 0x3E8;
        *(_WORD *)&v405[10] = 1024;
        *(_DWORD *)&v405[12] = v379 / 0x3E8;
        *(_WORD *)&v405[16] = 1024;
        *(_DWORD *)&v405[18] = v379 % 0x3E8;
        *(_WORD *)&v405[22] = 2082;
        *(void *)&v405[24] = v383;
        *(_WORD *)&v405[32] = 1024;
        *(_DWORD *)&v405[34] = v382 / 0x3E8;
        *(_WORD *)&v405[38] = 1024;
        *(_DWORD *)&v405[40] = v382 % 0x3E8;
        *(_WORD *)&v405[44] = 1024;
        *(_DWORD *)&v405[46] = transport_connect_milliseconds / 0x3E8;
        *(_WORD *)&v405[50] = 1024;
        *(_DWORD *)&v405[52] = transport_connect_milliseconds % 0x3E8;
        v276 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
               "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
               "\tConnected Path: %{public}@\n"
               "\tPrivacy Stance: %{public}s\n"
               "\tDuration: %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03us took %u.%03us";
        v277 = v57;
        v278 = 180;
      }

      if (v143) {
        free(v143);
      }
      return 0LL;
    }

    if (!v330[0])
    {
      v140 = (os_log_s *)__nwlog_obj();
      v141 = v323[0];
      if (os_log_type_enabled(v140, (os_log_type_t)v323[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_protocol_test_get_input_frames";
        v142 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_271;
      }

      goto LABEL_272;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    v140 = (os_log_s *)__nwlog_obj();
    v141 = v323[0];
    v146 = os_log_type_enabled(v140, (os_log_type_t)v323[0]);
    if (!backtrace_string)
    {
      if (v146)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_protocol_test_get_input_frames";
        v142 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_271;
      }

      goto LABEL_272;
    }

    if (v146)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&buf[4] = "nw_protocol_test_get_input_frames";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      v147 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_235:
      _os_log_impl(&dword_181A5C000, v140, v141, v147, buf, 0x16u);
    }

LABEL_119:
                v41 = a4;
                goto LABEL_120;
              }

              v58 = 0;
            }

            if (a2 != 2) {
              goto LABEL_97;
            }
            goto LABEL_81;
          }
        }

        loga = 0LL;
        goto LABEL_70;
      }
    }

    nw_endpoint_handler_report(v14, v10, a4, v363);
    goto LABEL_37;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v26 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    else {
      v27 = off_189BBBBC0[v13];
    }
    *(_DWORD *)buf = 136446722;
    v379 = "nw_endpoint_flow_receive_report";
    v380 = 2082;
    v381 = (char *)v27;
    v382 = 2082;
    v383 = "flow";
    _os_log_impl( &dword_181A5C000,  v26,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
  }

LABEL_18:
  v28 = 0LL;
LABEL_351:

  return v28;
}

    if (v94) {
      free(v94);
    }
    mode = 0;
    v2 = 0LL;
    goto LABEL_122;
  }

  mode = v1->mode;

  if (mode == 2)
  {
    v162 = v2;
    v4 = nw_endpoint_handler_copy_flow(v2);
    v5 = v2;
    v6 = *((_BYTE *)v5 + 268);

    if ((v6 & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v7 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        v8 = v5;

        v9 = v8;
        v10 = *((_BYTE *)v5 + 268);

        if ((v10 & 1) != 0) {
          v11 = "dry-run ";
        }
        else {
          v11 = "";
        }
        v12 = nw_endpoint_handler_copy_endpoint(v9);
        logging_description = nw_endpoint_get_logging_description(v12);
        v158 = v4;
        id_str = v8->id_str;
        v15 = v9;
        v16 = v15;
        v17 = v15[30];
        else {
          v18 = off_189BBBBF0[v17];
        }
        log = (os_log_t)v18;

        v19 = v16;
        v20 = v19;
        v21 = "path";
        switch(v162->mode)
        {
          case 0:
            break;
          case 1:
            v21 = "resolver";
            break;
          case 2:
            v21 = nw_endpoint_flow_mode_string(v19[31]);
            break;
          case 3:
            v21 = "proxy";
            break;
          case 4:
            v21 = "fallback";
            break;
          case 5:
            v21 = "transform";
            break;
          default:
            v21 = "unknown-mode";
            break;
        }

        v22 = v20;
        os_unfair_lock_lock((os_unfair_lock_t)v22 + 28);
        v23 = v22[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v22 + 28);

        *(_DWORD *)buf = 136447746;
        v166 = "nw_endpoint_flow_connected_path_change";
        v167 = 2082;
        v168 = id_str;
        v169 = 2082;
        v170 = v11;
        v171 = 2082;
        v172 = (void *)logging_description;
        v173 = 2082;
        v174 = log;
        v175 = 2082;
        v176 = v21;
        v177 = 2114;
        v178 = v23;
        _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ",  buf,  0x48u);

        v4 = v158;
      }
    }

    v24 = v5;
    state = v24->state;

    if ((state & 0xFFFFFFFE) == 4) {
      goto LABEL_102;
    }
    if (nw_endpoint_flow_should_not_use_path(v4))
    {
      v26 = (char *)v4 + 33;
      v27 = *((_BYTE *)v4 + 33);
      if ((v27 & 2) != 0)
      {
LABEL_82:
        v88 = 1;
        if ((v27 & 4) != 0)
        {
LABEL_100:
          if ((v88 & 1) == 0)
          {
            v24->event = (nw_endpoint_handler_event_s)524291;
            nw_endpoint_handler_report(v24, 0LL, &v24->event.domain, 0LL);
          }

  if (v21) {
LABEL_120:
  }
    free(v21);
  return 0LL;
}

            goto LABEL_85;
          }

          if (!v61)
          {
            __nwlog_obj();
            v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v58 = type;
            if (os_log_type_enabled(v34, type))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&buf[4] = "nw_endpoint_flow_fillout_data_transfer_snapshot";
              _os_log_impl( &dword_181A5C000,  v34,  v58,  "%{public}s called with null should_release_snapshot, backtrace limit exceeded",  buf,  0xCu);
            }

            goto LABEL_119;
          }

          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v52 = type;
          v53 = os_log_type_enabled(v34, type);
          if (!backtrace_string)
          {
            if (v53)
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&buf[4] = "nw_endpoint_flow_fillout_data_transfer_snapshot";
              _os_log_impl( &dword_181A5C000,  v34,  v52,  "%{public}s called with null should_release_snapshot, no backtrace",  buf,  0xCu);
            }

            goto LABEL_119;
          }

          if (v53)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&buf[4] = "nw_endpoint_flow_fillout_data_transfer_snapshot";
            v66 = 2082;
            v67 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v34,  v52,  "%{public}s called with null should_release_snapshot, dumping backtrace:%{public}s",  buf,  0x16u);
          }
        }

        else
        {
          __nwlog_obj();
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_endpoint_flow_fillout_data_transfer_snapshot";
          v33 = (void *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v61 = 0;
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v42 = type;
            if (os_log_type_enabled(v34, type))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&buf[4] = "nw_endpoint_flow_fillout_data_transfer_snapshot";
              _os_log_impl(&dword_181A5C000, v34, v42, "%{public}s called with null snapshot_length", buf, 0xCu);
            }

            goto LABEL_119;
          }

          if (!v61)
          {
            __nwlog_obj();
            v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v57 = type;
            if (os_log_type_enabled(v34, type))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&buf[4] = "nw_endpoint_flow_fillout_data_transfer_snapshot";
              _os_log_impl( &dword_181A5C000,  v34,  v57,  "%{public}s called with null snapshot_length, backtrace limit exceeded",  buf,  0xCu);
            }

            goto LABEL_119;
          }

          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v50 = type;
          v51 = os_log_type_enabled(v34, type);
          if (!backtrace_string)
          {
            if (v51)
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&buf[4] = "nw_endpoint_flow_fillout_data_transfer_snapshot";
              _os_log_impl( &dword_181A5C000,  v34,  v50,  "%{public}s called with null snapshot_length, no backtrace",  buf,  0xCu);
            }

            goto LABEL_119;
          }

          if (v51)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&buf[4] = "nw_endpoint_flow_fillout_data_transfer_snapshot";
            v66 = 2082;
            v67 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v34,  v50,  "%{public}s called with null snapshot_length, dumping backtrace:%{public}s",  buf,  0x16u);
          }
        }
      }

      else
      {
        __nwlog_obj();
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_endpoint_flow_fillout_data_transfer_snapshot";
        v33 = (void *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v61 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v40 = type;
          if (os_log_type_enabled(v34, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&buf[4] = "nw_endpoint_flow_fillout_data_transfer_snapshot";
            _os_log_impl(&dword_181A5C000, v34, v40, "%{public}s called with null snapshot", buf, 0xCu);
          }

          goto LABEL_119;
        }

        if (!v61)
        {
          __nwlog_obj();
          v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v56 = type;
          if (os_log_type_enabled(v34, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&buf[4] = "nw_endpoint_flow_fillout_data_transfer_snapshot";
            _os_log_impl( &dword_181A5C000,  v34,  v56,  "%{public}s called with null snapshot, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_119;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v48 = type;
        v49 = os_log_type_enabled(v34, type);
        if (!backtrace_string)
        {
          if (v49)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&buf[4] = "nw_endpoint_flow_fillout_data_transfer_snapshot";
            _os_log_impl(&dword_181A5C000, v34, v48, "%{public}s called with null snapshot, no backtrace", buf, 0xCu);
          }

          goto LABEL_119;
        }

        if (v49)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&buf[4] = "nw_endpoint_flow_fillout_data_transfer_snapshot";
          v66 = 2082;
          v67 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v34,  v48,  "%{public}s called with null snapshot, dumping backtrace:%{public}s",  buf,  0x16u);
        }
      }
    }

    else
    {
      __nwlog_obj();
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = "nw_endpoint_flow_fillout_data_transfer_snapshot";
      v33 = (void *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v61 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v35 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_endpoint_flow_fillout_data_transfer_snapshot";
          _os_log_impl(&dword_181A5C000, v34, v35, "%{public}s called with null endpoint_flow", buf, 0xCu);
        }

        goto LABEL_119;
      }

      if (!v61)
      {
        __nwlog_obj();
        v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v55 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_endpoint_flow_fillout_data_transfer_snapshot";
          _os_log_impl( &dword_181A5C000,  v34,  v55,  "%{public}s called with null endpoint_flow, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_119;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v46 = type;
      v47 = os_log_type_enabled(v34, type);
      if (!backtrace_string)
      {
        if (v47)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_endpoint_flow_fillout_data_transfer_snapshot";
          _os_log_impl(&dword_181A5C000, v34, v46, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
        }

        goto LABEL_119;
      }

      if (v47)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&buf[4] = "nw_endpoint_flow_fillout_data_transfer_snapshot";
        v66 = 2082;
        v67 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v34,  v46,  "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s",  buf,  0x16u);
      }
    }

    free(backtrace_string);
    goto LABEL_85;
  }

  __nwlog_obj();
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)v63 = 136446210;
  *(void *)&v63[4] = "nw_endpoint_handler_fillout_data_transfer_snapshot";
  v29 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v29, buf, &type))
  {
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v31 = buf[0];
      if (os_log_type_enabled(v30, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v63 = 136446210;
        *(void *)&v63[4] = "nw_endpoint_handler_fillout_data_transfer_snapshot";
        _os_log_impl(&dword_181A5C000, v30, v31, "%{public}s called with null handler", v63, 0xCu);
      }
    }

    else if (type)
    {
      v36 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v37 = buf[0];
      v38 = os_log_type_enabled(v30, (os_log_type_t)buf[0]);
      if (v36)
      {
        if (v38)
        {
          *(_DWORD *)v63 = 136446466;
          *(void *)&v63[4] = "nw_endpoint_handler_fillout_data_transfer_snapshot";
          *(_WORD *)&v63[12] = 2082;
          *(void *)&v63[14] = v36;
          _os_log_impl( &dword_181A5C000,  v30,  v37,  "%{public}s called with null handler, dumping backtrace:%{public}s",  v63,  0x16u);
        }

        free(v36);
        goto LABEL_93;
      }

      if (v38)
      {
        *(_DWORD *)v63 = 136446210;
        *(void *)&v63[4] = "nw_endpoint_handler_fillout_data_transfer_snapshot";
        _os_log_impl(&dword_181A5C000, v30, v37, "%{public}s called with null handler, no backtrace", v63, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v54 = buf[0];
      if (os_log_type_enabled(v30, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v63 = 136446210;
        *(void *)&v63[4] = "nw_endpoint_handler_fillout_data_transfer_snapshot";
        _os_log_impl( &dword_181A5C000,  v30,  v54,  "%{public}s called with null handler, backtrace limit exceeded",  v63,  0xCu);
      }
    }
  }

      goto LABEL_120;
    }

    if (!v81)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v39 = (os_log_s *)(id)gconnectionLogObj;
      v62 = type;
      if (os_log_type_enabled(v39, type))
      {
        v63 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)buf = 136446722;
        v84 = "nw_association_unregister";
        v85 = 2082;
        v86 = (void *)v63;
        v87 = 2048;
        v88 = (uint64_t)v5;
        _os_log_impl( &dword_181A5C000,  v39,  v62,  "%{public}s <nw_association %{public}s> does not have handle %p registered, backtrace limit exceeded",  buf,  0x20u);
      }

      goto LABEL_119;
    }

    v50 = __nw_create_backtrace_string();
    if (!v50)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v39 = (os_log_s *)(id)gconnectionLogObj;
      v66 = type;
      if (os_log_type_enabled(v39, type))
      {
        v67 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)buf = 136446722;
        v84 = "nw_association_unregister";
        v85 = 2082;
        v86 = (void *)v67;
        v87 = 2048;
        v88 = (uint64_t)v5;
        _os_log_impl( &dword_181A5C000,  v39,  v66,  "%{public}s <nw_association %{public}s> does not have handle %p registered, no backtrace",  buf,  0x20u);
      }

      goto LABEL_119;
    }

    v47 = (char *)v50;
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    v39 = (os_log_s *)(id)gconnectionLogObj;
    v51 = type;
    if (os_log_type_enabled(v39, type))
    {
      v52 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
      *(_DWORD *)buf = 136446978;
      v84 = "nw_association_unregister";
      v85 = 2082;
      v86 = (void *)v52;
      v87 = 2048;
      v88 = (uint64_t)v5;
      v89 = 2082;
      v90 = v47;
      _os_log_impl( &dword_181A5C000,  v39,  v51,  "%{public}s <nw_association %{public}s> does not have handle %p registered, dumping backtrace:%{public}s",  buf,  0x2Au);
    }

        goto LABEL_120;
      }

      if (!v69)
      {
        __nwlog_obj();
        v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v60 = type[0];
        if (os_log_type_enabled(v43, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_http_redirect_options_copy_handler_queue";
          _os_log_impl( &dword_181A5C000,  v43,  v60,  "%{public}s protocol options are not http redirect, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_119;
      }

      v51 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v55 = type[0];
      v56 = os_log_type_enabled(v43, type[0]);
      if (!v51)
      {
        if (v56)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_http_redirect_options_copy_handler_queue";
          _os_log_impl( &dword_181A5C000,  v43,  v55,  "%{public}s protocol options are not http redirect, no backtrace",  buf,  0xCu);
        }

        goto LABEL_119;
      }

      if (v56)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&buf[4] = "nw_http_redirect_options_copy_handler_queue";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v51;
        _os_log_impl( &dword_181A5C000,  v43,  v55,  "%{public}s protocol options are not http redirect, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_91;
    }

    goto LABEL_120;
  }

  *(void *)buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000LL;
  v71 = (uint64_t)__Block_byref_object_copy__4;
  v72 = __Block_byref_object_dispose__5;
  v73 = 0LL;
  *(void *)type = v18;
  v65 = 3221225472LL;
  v66 = __nw_http_redirect_options_copy_handler_queue_block_invoke;
  v67 = &unk_189BC60A8;
  v68 = buf;
  nw_protocol_options_access_handle(v25, type);
  v28 = (dispatch_object_s *)*(id *)(*(void *)&buf[8] + 40LL);
  _Block_object_dispose(buf, 8);

LABEL_36:
  v29 = *((_BYTE *)v6 + 616);
  if ((v29 & 1) != 0)
  {
    v30 = v6[76];
    if (v30)
    {
      dispatch_release(v30);
      v29 = *((_BYTE *)v6 + 616);
    }
  }

  v6[76] = v28;
  *((_BYTE *)v6 + 616) = v29 | 1;
  limit = nw_http_redirect_options_get_limit(v25);
  v6[25] = 0LL;
  *((_DWORD *)v6 + 172) = limit;
  v6[9] = (dispatch_object_s *)(v6 + 25);
  v6[26] = (dispatch_object_s *)(v6 + 25);
  v6[27] = 0LL;
  v6[28] = (dispatch_object_s *)(v6 + 27);
  v6[29] = 0LL;
  v6[30] = (dispatch_object_s *)(v6 + 29);
  *((_BYTE *)v6 + 340) = 2;
  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
  }
  v32 = (id)nw_protocol_copy_http_definition_http_definition;
  nw_protocol_plugin_metadata_set_callbacks( (uint64_t)v6,  v32,  (uint64_t)nw_protocol_http_redirect_create::$_0::__invoke,  (uint64_t)nw_protocol_http_redirect_create::$_1::__invoke);
  if (v32) {
    os_release(v32);
  }
  v6[11] = (dispatch_object_s *)(v6 + 43);
  nw_protocol_plugin_retry_set_callbacks( (uint64_t)v6,  (uint64_t)nw_protocol_http_redirect_create::$_2::__invoke,  (uint64_t)nw_protocol_http_redirect_create::$_3::__invoke,  (uint64_t)nw_protocol_http_redirect_create::$_4::__invoke,  (uint64_t)nw_protocol_http_redirect_create::$_5::__invoke);
  v6[8] = (dispatch_object_s *)(v6 + 13);
  nw_protocol_plugin_name_set_callbacks((uint64_t)v6, (uint64_t)nw_protocol_http_redirect_create::$_6::__invoke);
  if (v17) {
    os_release(v25);
  }
  if (v15) {
    os_release(v15);
  }
  return (BOOL)v6;
}

    if (v61) {
      free(v61);
    }
    v7 = 0LL;
    goto LABEL_76;
  }

  if (!a2)
  {
    __nwlog_obj(v8, v9);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v97 = "nw_context_reset_timer_block_with_time";
    v16 = (uint64_t *)_os_log_send_and_compose_impl();

    v95 = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    v67 = __nwlog_fault(v16, &v95, &type);
    if (!(_DWORD)v67) {
      goto LABEL_131;
    }
    if (v95 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj(v67, v68);
      v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v70 = v95;
      if (os_log_type_enabled(v69, v95))
      {
        *(_DWORD *)buf = 136446210;
        v97 = "nw_context_reset_timer_block_with_time";
        _os_log_impl(&dword_181A5C000, v69, v70, "%{public}s called with null handle", buf, 0xCu);
      }

      goto LABEL_130;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj(v67, v68);
      v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v89 = v95;
      if (os_log_type_enabled(v69, v95))
      {
        *(_DWORD *)buf = 136446210;
        v97 = "nw_context_reset_timer_block_with_time";
        _os_log_impl( &dword_181A5C000,  v69,  v89,  "%{public}s called with null handle, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_130;
    }

    v79 = (char *)__nw_create_backtrace_string();
    __nwlog_obj(v79, v80);
    v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v81 = v95;
    v82 = os_log_type_enabled(v69, v95);
    if (!v79)
    {
      if (v82)
      {
        *(_DWORD *)buf = 136446210;
        v97 = "nw_context_reset_timer_block_with_time";
        _os_log_impl(&dword_181A5C000, v69, v81, "%{public}s called with null handle, no backtrace", buf, 0xCu);
      }

      goto LABEL_130;
    }

    if (v82)
    {
      *(_DWORD *)buf = 136446466;
      v97 = "nw_context_reset_timer_block_with_time";
      v98 = 2082;
      v99 = (uint64_t)v79;
      _os_log_impl( &dword_181A5C000,  v69,  v81,  "%{public}s called with null handle, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_108;
  }

  v11 = v7;
  v12 = (NWConcrete_nw_context *)v11;
  if ((*((_BYTE *)v11 + 136) & 8) == 0) {
    dispatch_assert_queue_V2(*((dispatch_queue_t *)v11 + 1));
  }

  v7 = (id)nw_context_copy_globals_context(v12);
  if (a3 == -1)
  {
    v25 = *(void **)(*((void *)v7 + 4) + 8LL);
    if (v25)
    {
      do
      {
        v28 = (void *)*v25;
        if (v25[3] == a2)
        {
          v29 = v7;
          if ((v25[5] & 1) == 0)
          {
            v30 = (void *)*v25;
            v31 = (void *)v25[1];
            if (*v25)
            {
              v30[1] = v31;
              v31 = (void *)v25[1];
            }

            else
            {
              *(void *)(*((void *)v7 + 4) + 16LL) = v31;
            }

            *v31 = v30;
            *v25 = 0LL;
            v25[1] = 0LL;
            node = nw_hash_table_get_node(*(void *)(*((void *)v7 + 4) + 24LL), v25[3], 0LL);
            nw_hash_table_remove_node(*(void *)(*((void *)v7 + 4) + 24LL), node);
            v27 = (void *)v25[4];
            v25[4] = 0LL;

            free(v25);
          }
        }

        v25 = v28;
      }

      while (v28);
    }

    nw_context_cleanup_timer((NWConcrete_nw_context *)v7);
LABEL_76:

    return;
  }

  if (!v10)
  {
    __nwlog_obj(v13, v14);
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v97 = "nw_context_reset_timer_block_with_time";
    v16 = (uint64_t *)_os_log_send_and_compose_impl();

    v95 = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    v72 = __nwlog_fault(v16, &v95, &type);
    if (!(_DWORD)v72) {
      goto LABEL_131;
    }
    if (v95 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj(v72, v73);
      v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v74 = v95;
      if (os_log_type_enabled(v69, v95))
      {
        *(_DWORD *)buf = 136446210;
        v97 = "nw_context_reset_timer_block_with_time";
        _os_log_impl(&dword_181A5C000, v69, v74, "%{public}s called with null block", buf, 0xCu);
      }

  if (v25) {
    free(v25);
  }
LABEL_17:
  if (v8 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v4 + 40) == &nw_protocol_ref_counted_handle)
  {
    v12 = *(void *)(v4 + 88);
    if (v12)
    {
      v13 = v12 - 1;
      *(void *)(v4 + 88) = v13;
      if (!v13)
      {
        v14 = *(void (***)(void))(v4 + 64);
        if (v14)
        {
          *(void *)(v4 + 64) = 0LL;
          v14[2](v14);
          _Block_release(v14);
        }

        if ((*(_BYTE *)(v4 + 72) & 1) != 0)
        {
          v15 = *(const void **)(v4 + 64);
          if (v15) {
            _Block_release(v15);
          }
        }

        free((void *)v4);
      }
    }
  }

  if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v5 + 40) == &nw_protocol_ref_counted_handle)
  {
    v16 = *(void *)(v5 + 88);
    if (v16)
    {
      v17 = v16 - 1;
      *(void *)(v5 + 88) = v17;
      if (!v17)
      {
        v18 = *(void (***)(void))(v5 + 64);
        if (v18)
        {
          *(void *)(v5 + 64) = 0LL;
          v18[2](v18);
          _Block_release(v18);
        }

        if ((*(_BYTE *)(v5 + 72) & 1) != 0)
        {
          v19 = *(const void **)(v5 + 64);
          if (v19) {
            _Block_release(v19);
          }
        }

        goto LABEL_37;
      }
    }
  }

LABEL_120:
      if (v53) {
        free(v53);
      }
      goto LABEL_9;
    }

    if (!v74)
    {
      __nwlog_obj();
      v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v73 = type;
      if (os_log_type_enabled(v54, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_framer_protocol_remove_input_handler";
        _os_log_impl( &dword_181A5C000,  v54,  v73,  "%{public}s called with null framer->parent_definition, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_119;
    }

    v62 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v65 = type;
    v66 = os_log_type_enabled(v54, type);
    if (!v62)
    {
      if (v66)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_framer_protocol_remove_input_handler";
        _os_log_impl( &dword_181A5C000,  v54,  v65,  "%{public}s called with null framer->parent_definition, no backtrace",  buf,  0xCu);
      }

      goto LABEL_119;
    }

    if (v66)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&buf[4] = "nw_framer_protocol_remove_input_handler";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v62;
      _os_log_impl( &dword_181A5C000,  v54,  v65,  "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s",  buf,  0x16u);
    }

  if (v54) {
LABEL_120:
  }
    free(v54);
LABEL_121:
  v18 = 0LL;
LABEL_147:

  if (!nw_parameters_get_logging_disabled(*((void *)v5 + 7)) && gLogDatapath)
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
    }
    v95 = (os_log_s *)(id)gconnection_groupLogObj;
    if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
    {
      v96 = v13[42]._os_unfair_lock_opaque;
      *(_DWORD *)aBlock = 136447234;
      *(void *)&aBlock[4] = "nw_connection_group_extract_connection";
      *(_WORD *)&aBlock[12] = 1024;
      *(_DWORD *)&aBlock[14] = v96;
      *(_WORD *)&aBlock[18] = 2112;
      *(void *)&aBlock[20] = v14;
      *(_WORD *)&aBlock[28] = 2112;
      *(void *)&aBlock[30] = v15;
      *(_WORD *)&aBlock[38] = 2112;
      v132 = v18;
      _os_log_impl( &dword_181A5C000,  v95,  OS_LOG_TYPE_DEBUG,  "%{public}s [G%u] Got connection for endpoint (%@) and parameters (%@): %@",  aBlock,  0x30u);
    }
  }

  if (v18)
  {
    v88 = v18;
    *(void *)iterate_block = 0LL;
    *(void *)&iterate_block[8] = iterate_block;
    *(void *)&iterate_block[16] = 0x2020000000LL;
    iterate_block[24] = 0;
    v89 = v88 + 34;
    *(void *)aBlock = MEMORY[0x1895F87A8];
    *(void *)&aBlock[8] = 3221225472LL;
    *(void *)&aBlock[16] = __nw_connection_is_cancelled_or_failed_block_invoke;
    *(void *)&aBlock[24] = &unk_189BC9210;
    v132 = iterate_block;
    v78 = v88;
    *(void *)&aBlock[32] = v78;
    os_unfair_lock_lock(v89);
    (*(void (**)(_BYTE *))&aBlock[16])(aBlock);
    os_unfair_lock_unlock(v89);
    LODWORD(v89) = *(unsigned __int8 *)(*(void *)&iterate_block[8] + 24LL);

    _Block_object_dispose(iterate_block, 8);
    if (!(_DWORD)v89)
    {
      nw_connection_reset_client(v78);
      goto LABEL_160;
    }

    if (!nw_parameters_get_logging_disabled(*((void *)v5 + 7)))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
      }
      v90 = (os_log_s *)(id)gconnection_groupLogObj;
      if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      {
        v91 = v13[42]._os_unfair_lock_opaque;
        *(_DWORD *)aBlock = 136446722;
        *(void *)&aBlock[4] = "nw_connection_group_extract_connection";
        *(_WORD *)&aBlock[12] = 1024;
        *(_DWORD *)&aBlock[14] = v91;
        *(_WORD *)&aBlock[18] = 2112;
        *(void *)&aBlock[20] = v78;
        _os_log_impl( &dword_181A5C000,  v90,  OS_LOG_TYPE_ERROR,  "%{public}s [G%u] Connection %@ already cancelled or failed",  aBlock,  0x1Cu);
      }
    }
  }

  v78 = 0LL;
LABEL_160:
  if (!nw_parameters_get_logging_disabled(*((void *)v5 + 7)))
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
    }
    v92 = (os_log_s *)(id)gconnection_groupLogObj;
    if (os_log_type_enabled(v92, OS_LOG_TYPE_DEBUG))
    {
      v93 = v13[42]._os_unfair_lock_opaque;
      *(_DWORD *)aBlock = 136446722;
      *(void *)&aBlock[4] = "nw_connection_group_extract_connection";
      *(_WORD *)&aBlock[12] = 1024;
      *(_DWORD *)&aBlock[14] = v93;
      *(_WORD *)&aBlock[18] = 2112;
      *(void *)&aBlock[20] = v78;
      _os_log_impl(&dword_181A5C000, v92, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] returning connection %@", aBlock, 0x1Cu);
    }
  }

  v8 = v111;
LABEL_167:

  return (nw_connection_t)v78;
}

        v19 = 1LL;
        (*(void (**)(uint64_t, void, uint64_t, void))(a6 + 16))(a6, 0LL, 1LL, 0LL);
        return v19;
      }
    }
  }

            if (v73) {
              free(v73);
            }
LABEL_72:

            v52 = nw_connection_create((nw_endpoint_t)v39, (nw_parameters_t)v51);
            v53 = *(void *)(a1 + 32);
            if (v52)
            {
              v54 = *(void *)(v53 + 160);
              if (!v54)
              {
                v55 = nw_array_create();
                v56 = *(void *)(a1 + 32);
                v57 = *(void **)(v56 + 160);
                *(void *)(v56 + 160) = v55;

                v54 = *(void *)(*(void *)(a1 + 32) + 160LL);
              }

              nw_array_append(v54, v52);
              *(void *)buf = 0LL;
              *(void *)&buf[8] = buf;
              *(void *)&buf[16] = 0x3032000000LL;
              v96 = __Block_byref_object_copy__17859;
              v97 = __Block_byref_object_dispose__17860;
              v98 = 0LL;
              handler[0] = MEMORY[0x1895F87A8];
              handler[1] = 3221225472LL;
              handler[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_200;
              handler[3] = &unk_189BB8A88;
              v82 = *(id *)(a1 + 32);
              v58 = v52;
              v83 = v58;
              v84 = v51;
              v85 = buf;
              nw_connection_set_state_changed_handler(v58, handler);
              v59 = nw_queue_copy_current_workloop();
              nw_connection_set_queue(v58, (dispatch_queue_t)v59);

              nw_connection_start(v58);
              _Block_object_dispose(buf, 8);
            }

            else
            {
              v60 = *(void *)(v53 + 16);
              if (v60 && !nw_path_parameters_get_logging_disabled(*(void *)(v60 + 104)))
              {
                if (__nwlog_listener_log::onceToken != -1) {
                  dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
                }
                v61 = (os_log_s *)(id)glistenerLogObj;
                if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
                {
                  v62 = nw_listener_get_id_string(*(void **)(a1 + 32));
                  *(_DWORD *)buf = 136446722;
                  *(void *)&buf[4] = "nw_listener_reconcile_inboxes_on_queue_block_invoke_2";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v62;
                  *(_WORD *)&buf[22] = 2112;
                  v96 = (uint64_t (*)(uint64_t, uint64_t))v39;
                  _os_log_impl( &dword_181A5C000,  v61,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}s] Failed to create proxy connection to %@",  buf,  0x20u);
                }
              }
            }

            if (!v52) {
              goto LABEL_85;
            }
            goto LABEL_84;
          }

          __nwlog_obj();
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
          v22 = (char *)_os_log_send_and_compose_impl();

          LOBYTE(v90) = 16;
          v89 = OS_LOG_TYPE_DEFAULT;
          if (v90 == 17)
          {
            __nwlog_obj();
            v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v24 = v90;
            if (os_log_type_enabled(v23, (os_log_type_t)v90))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&buf[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
              _os_log_impl(&dword_181A5C000, v23, v24, "%{public}s called with null transport_identifier", buf, 0xCu);
            }
          }

          else if (v89)
          {
            v31 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v32 = v90;
            v33 = os_log_type_enabled(v23, (os_log_type_t)v90);
            if (v31)
            {
              if (v33)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&buf[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v31;
                _os_log_impl( &dword_181A5C000,  v23,  v32,  "%{public}s called with null transport_identifier, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v31);
              goto LABEL_109;
            }

            if (v33)
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&buf[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
              _os_log_impl( &dword_181A5C000,  v23,  v32,  "%{public}s called with null transport_identifier, no backtrace",  buf,  0xCu);
            }
          }

          else
          {
            __nwlog_obj();
            v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v70 = v90;
            if (os_log_type_enabled(v23, (os_log_type_t)v90))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&buf[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
              _os_log_impl( &dword_181A5C000,  v23,  v70,  "%{public}s called with null transport_identifier, backtrace limit exceeded",  buf,  0xCu);
            }
          }

LABEL_109:
          if (v22) {
            free(v22);
          }
          should_proxy_transport_at_level = 0;
LABEL_112:
          v78 = 0LL;
          goto LABEL_56;
        }

              xpc_dictionary_set_BOOL(v2, "receive_any_interface", 1);
              v31 = v1[93];
              if (!v1[93])
              {
LABEL_78:
                v32 = *(unsigned int *)(*((void *)v1 + 13) + 84LL);
                if ((_DWORD)v32) {
                  xpc_dictionary_set_uint64(v2, "companion_preference", v32);
                }
                v33 = (dispatch_data_s *)*((void *)v1 + 18);
                if (v33)
                {
                  v34 = xpc_data_create_with_dispatch_data(v33);
                  xpc_dictionary_set_value(v2, "initial_data_payload", v34);
                }

                if ((v1[98] & 8) != 0) {
                  xpc_dictionary_set_BOOL(v2, "allow_unusable_addresses", 1);
                }
                if ((*(_WORD *)(*((void *)v1 + 13) + 108LL) & 0x100) != 0)
                {
                  xpc_dictionary_set_BOOL(v2, "prefer_no_proxy", 1);
                  v35 = *((void *)v1 + 12);
                  if ((v35 & 0x100000) == 0)
                  {
LABEL_86:
                    if ((v35 & 0x200000) == 0) {
                      goto LABEL_87;
                    }
                    goto LABEL_123;
                  }
                }

                else
                {
                  v35 = *((void *)v1 + 12);
                  if ((v35 & 0x100000) == 0) {
                    goto LABEL_86;
                  }
                }

                xpc_dictionary_set_BOOL(v2, "https_proxy_is_opaque", 1);
                v35 = *((void *)v1 + 12);
                if ((v35 & 0x200000) == 0)
                {
LABEL_87:
                  if ((v35 & 0x400000) == 0) {
                    goto LABEL_88;
                  }
                  goto LABEL_124;
                }

      if (v108) {
        free(v108);
      }

      v51 = log;
      goto LABEL_39;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v56 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v114 = "nw_endpoint_handler_trigger_agents";
    v57 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v111 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v58 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v59 = type;
      if (os_log_type_enabled(v58, type))
      {
        *(_DWORD *)buf = 136446210;
        v114 = "nw_endpoint_handler_trigger_agents";
        _os_log_impl(&dword_181A5C000, v58, v59, "%{public}s xpc_array_create failed", buf, 0xCu);
      }
    }

    else if (v111)
    {
      v74 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v58 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v75 = type;
      v76 = os_log_type_enabled(v58, type);
      if (v74)
      {
        if (v76)
        {
          *(_DWORD *)buf = 136446466;
          v114 = "nw_endpoint_handler_trigger_agents";
          v115 = 2082;
          v116 = v74;
          _os_log_impl( &dword_181A5C000,  v58,  v75,  "%{public}s xpc_array_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v74);
        goto LABEL_96;
      }

      if (v76)
      {
        *(_DWORD *)buf = 136446210;
        v114 = "nw_endpoint_handler_trigger_agents";
        _os_log_impl(&dword_181A5C000, v58, v75, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v58 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v99 = type;
      if (os_log_type_enabled(v58, type))
      {
        *(_DWORD *)buf = 136446210;
        v114 = "nw_endpoint_handler_trigger_agents";
        _os_log_impl( &dword_181A5C000,  v58,  v99,  "%{public}s xpc_array_create failed, backtrace limit exceeded",  buf,  0xCu);
      }
    }

LABEL_96:
    if (v57) {
      free(v57);
    }
    v8 = 0LL;
    goto LABEL_99;
  }

  if ((a2 & 1) == 0)
  {
    v21 = v3;
    v22 = *((_BYTE *)v21 + 268);

    if ((v22 & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      xarray = v5;
      v8 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        log = v8;
        v23 = v21;

        v24 = v23;
        v25 = *((_BYTE *)v21 + 268);

        if ((v25 & 1) != 0) {
          v26 = "dry-run ";
        }
        else {
          v26 = "";
        }
        v27 = nw_endpoint_handler_copy_endpoint(v24);
        v28 = nw_endpoint_get_logging_description(v27);
        v29 = v23 + 168;
        v30 = v24;
        v31 = v30;
        v32 = v30[30];
        else {
          v33 = off_189BBBBF0[v32];
        }

        v36 = v31;
        v37 = v36;
        v38 = "path";
        switch(*((_DWORD *)v36 + 29))
        {
          case 0:
            break;
          case 1:
            v38 = "resolver";
            break;
          case 2:
            v38 = nw_endpoint_flow_mode_string(v36[31]);
            break;
          case 3:
            v38 = "proxy";
            break;
          case 4:
            v38 = "fallback";
            break;
          case 5:
            v38 = "transform";
            break;
          default:
            v38 = "unknown-mode";
            break;
        }

        v60 = v37;
        os_unfair_lock_lock(v60 + 28);
        v61 = v3[8];
        os_unfair_lock_unlock(v60 + 28);

        *(_DWORD *)buf = 136447746;
        v114 = "nw_endpoint_handler_trigger_agents";
        v115 = 2082;
        v116 = v29;
        v117 = 2082;
        v118 = v26;
        v119 = 2082;
        v120 = v28;
        v121 = 2082;
        v122 = v33;
        v123 = 2082;
        v124 = v38;
        v125 = 2114;
        v126 = v61;
        _os_log_impl( &dword_181A5C000,  log,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No inactive agents to trigger",  buf,  0x48u);

        goto LABEL_54;
      }

  v90 = calloc(1uLL, v77);
  if (v90) {
    goto LABEL_120;
  }
  __nwlog_obj();
  v154 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v154, OS_LOG_TYPE_ERROR);
  *(_DWORD *)v267 = 136446722;
  v268 = "strict_calloc";
  v269 = 2048;
  *(void *)v270 = 1LL;
  *(_WORD *)&v270[8] = 2048;
  *(void *)v271 = v77;
  v155 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v155);
  if (!result)
  {
    free(v155);
    v28 = (unint64_t)v222;
    count = v216;
LABEL_120:
    v257 = 0LL;
    v258 = &v257;
    v259 = 0x2020000000LL;
    v91 = *((_DWORD *)v42 + 2);
    v260 = v90 + 1;
    *v90 = v91;
    v92 = *((_DWORD *)v42 + 3);
    v93 = (_BYTE *)v258[3];
    v258[3] = (uint64_t)(v93 + 1);
    *v93 = v92;
    v94 = v258;
    if (*((_DWORD *)v42 + 2) != 1) {
      goto LABEL_126;
    }
    v95 = (_BYTE *)v258[3];
    if (v215)
    {
      memcpy(v95, v42[2], v215 + 1);
      v96 = v258;
      v97 = (_BYTE *)(v258[3] + v215 + 1);
      v258[3] = (uint64_t)v97;
      if (v218)
      {
LABEL_123:
        memcpy(v97, v42[3], v218 + 1);
        v94 = v258;
        v258[3] += v218 + 1;
        goto LABEL_126;
      }
    }

    else
    {
      v258[3] = (uint64_t)(v95 + 1);
      *v95 = 0;
      v96 = v258;
      v97 = (_BYTE *)v258[3];
      if (v218) {
        goto LABEL_123;
      }
    }

    v96[3] = (uint64_t)(v97 + 1);
    *v97 = 0;
    v94 = v258;
LABEL_126:
    *(_DWORD *)v94[3] = count;
    v258[3] += 4LL;
    if (count)
    {
      v98 = (char *)v42[5];
      *(void *)type = MEMORY[0x1895F87A8];
      v253 = 3221225472LL;
      v254 = __nw_authentication_credential_add_to_tlv_block_invoke;
      v255 = &unk_189BBC908;
      v256 = &v257;
      xpc_array_apply(v98, type);
    }

    if (v29 < v28)
    {
      v99 = v77 + 5;
      if (v28 - v29 >= v77 + 5)
      {
        *(_BYTE *)v29 = 16;
        *(_DWORD *)(v29 + 1) = v76;
        if ((_DWORD)v76) {
          memcpy((void *)(v29 + 5), v90, v77);
        }
        v29 += v99;
        goto LABEL_153;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v100 = (id)gLogObj;
      *(_DWORD *)v267 = 136447490;
      v268 = "nw_necp_append_tlv";
      v269 = 2048;
      *(void *)v270 = v29;
      *(_WORD *)&v270[8] = 2048;
      *(void *)v271 = v77 + 5;
      *(_WORD *)&v271[8] = 2048;
      *(void *)v272 = v28;
      *(_WORD *)&v272[8] = 1024;
      *(_DWORD *)v273 = 16;
      *(_WORD *)&v273[4] = 1024;
      *(_DWORD *)&v273[6] = v76;
      v101 = (char *)_os_log_send_and_compose_impl();

      v262 = OS_LOG_TYPE_ERROR;
      v261 = 0;
      if (__nwlog_fault(v101, &v262, &v261))
      {
        if (v262 == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v102 = (os_log_s *)(id)gLogObj;
          v103 = v262;
          if (os_log_type_enabled(v102, v262))
          {
            *(_DWORD *)v267 = 136447490;
            v268 = "nw_necp_append_tlv";
            v269 = 2048;
            *(void *)v270 = v29;
            *(_WORD *)&v270[8] = 2048;
            *(void *)v271 = v77 + 5;
            *(_WORD *)&v271[8] = 2048;
            *(void *)v272 = v222;
            *(_WORD *)&v272[8] = 1024;
            *(_DWORD *)v273 = 16;
            *(_WORD *)&v273[4] = 1024;
            *(_DWORD *)&v273[6] = v76;
            _os_log_impl( &dword_181A5C000,  v102,  v103,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u",  v267,  0x36u);
          }
        }

        else if (v261)
        {
          v104 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v102 = (os_log_s *)(id)gLogObj;
          v105 = v262;
          v106 = os_log_type_enabled(v102, v262);
          if (v104)
          {
            if (v106)
            {
              *(_DWORD *)v267 = 136447746;
              v268 = "nw_necp_append_tlv";
              v269 = 2048;
              *(void *)v270 = v29;
              *(_WORD *)&v270[8] = 2048;
              *(void *)v271 = v99;
              *(_WORD *)&v271[8] = 2048;
              *(void *)v272 = v222;
              *(_WORD *)&v272[8] = 1024;
              *(_DWORD *)v273 = 16;
              *(_WORD *)&v273[4] = 1024;
              *(_DWORD *)&v273[6] = v76;
              v274 = 2082;
              v275 = v104;
              _os_log_impl( &dword_181A5C000,  v102,  v105,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s",  v267,  0x40u);
            }

            free(v104);
            if (!v101) {
              goto LABEL_152;
            }
            goto LABEL_151;
          }

          if (v106)
          {
            *(_DWORD *)v267 = 136447490;
            v268 = "nw_necp_append_tlv";
            v269 = 2048;
            *(void *)v270 = v29;
            *(_WORD *)&v270[8] = 2048;
            *(void *)v271 = v99;
            *(_WORD *)&v271[8] = 2048;
            *(void *)v272 = v222;
            *(_WORD *)&v272[8] = 1024;
            *(_DWORD *)v273 = 16;
            *(_WORD *)&v273[4] = 1024;
            *(_DWORD *)&v273[6] = v76;
            _os_log_impl( &dword_181A5C000,  v102,  v105,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace",  v267,  0x36u);
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v102 = (os_log_s *)(id)gLogObj;
          v107 = v262;
          if (os_log_type_enabled(v102, v262))
          {
            *(_DWORD *)v267 = 136447490;
            v268 = "nw_necp_append_tlv";
            v269 = 2048;
            *(void *)v270 = v29;
            *(_WORD *)&v270[8] = 2048;
            *(void *)v271 = v77 + 5;
            *(_WORD *)&v271[8] = 2048;
            *(void *)v272 = v222;
            *(_WORD *)&v272[8] = 1024;
            *(_DWORD *)v273 = 16;
            *(_WORD *)&v273[4] = 1024;
            *(_DWORD *)&v273[6] = v76;
            _os_log_impl( &dword_181A5C000,  v102,  v107,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded",  v267,  0x36u);
          }
        }

        goto LABEL_149;
      }

    if (v60) {
      free(v60);
    }
    goto LABEL_77;
  }

  if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55123);
  }
  v6 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
  if (!v6)
  {
    __nwlog_obj();
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v86 = "nw_quic_report_race_result_on_queue";
    v64 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v83 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v65 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v66 = type;
      if (os_log_type_enabled(v65, type))
      {
        *(_DWORD *)buf = 136446210;
        v86 = "nw_quic_report_race_result_on_queue";
        _os_log_impl(&dword_181A5C000, v65, v66, "%{public}s called with null definition", buf, 0xCu);
      }
    }

    else if (v83)
    {
      v70 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v65 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v71 = type;
      v72 = os_log_type_enabled(v65, type);
      if (v70)
      {
        if (v72)
        {
          *(_DWORD *)buf = 136446466;
          v86 = "nw_quic_report_race_result_on_queue";
          v87 = 2082;
          v88 = v70;
          _os_log_impl( &dword_181A5C000,  v65,  v71,  "%{public}s called with null definition, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v70);
LABEL_130:
        if (!v64) {
          goto LABEL_76;
        }
LABEL_131:
        free(v64);
        goto LABEL_76;
      }

      if (v72)
      {
        *(_DWORD *)buf = 136446210;
        v86 = "nw_quic_report_race_result_on_queue";
        _os_log_impl(&dword_181A5C000, v65, v71, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v65 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v78 = type;
      if (os_log_type_enabled(v65, type))
      {
        *(_DWORD *)buf = 136446210;
        v86 = "nw_quic_report_race_result_on_queue";
        _os_log_impl( &dword_181A5C000,  v65,  v78,  "%{public}s called with null definition, backtrace limit exceeded",  buf,  0xCu);
      }
    }

  if (v53) {
    free(v53);
  }
LABEL_49:
}

    free(backtrace_string);
    goto LABEL_169;
  }

  *(void *)type = 0LL;
  v16 = nw_http_oblivious_config_select(a4, a5, type);
  if (!v16 || *(void *)type <= 0x28uLL)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v83 = "nw_http_encrypt_oblivious_request";
      v20 = "%{public}s Config parsing failed";
      goto LABEL_18;
    }

    return 0LL;
  }

  v17 = v16;
  v18 = strlen(a3);
  if (v18 >= 0x101)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v83 = "nw_http_encrypt_oblivious_request";
      v20 = "%{public}s Media type exceeds max length";
LABEL_18:
      _os_log_impl(&dword_181A5C000, v19, OS_LOG_TYPE_ERROR, v20, buf, 0xCu);
      return 0LL;
    }

    return 0LL;
  }

  v21 = v18;
  v75 = a7;
  cchpke_params_x25519_AESGCM128_HKDF_SHA256();
  v22 = cchpke_params_sizeof_aead_tag();
  v23 = cchpke_params_sizeof_kem_enc();
  v79 = (char *)calloc(1uLL, 0x60uLL);
  v78 = v22;
  if (!v79)
  {
    v60 = v23;
    v61 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v61, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v83 = "strict_calloc";
    v84 = 2048;
    v85 = 1LL;
    v86 = 2048;
    v87 = 96LL;
    v62 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v62);
    if (result) {
      goto LABEL_175;
    }
    free(v62);
    v23 = v60;
    v22 = v78;
  }

  v24 = a2 + v22 + v23;
  v25 = v24 + 7;
  v77 = v24 + 7;
  if (v24 == -7LL)
  {
    v63 = v23;
    v64 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v64, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v83 = "strict_calloc";
    v65 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v65);
    if (result) {
      goto LABEL_175;
    }
    free(v65);
    v23 = v63;
    v25 = v77;
  }

  v76 = a8;
  v26 = (char *)calloc(1uLL, v25);
  if (!v26)
  {
    v66 = v23;
    v67 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v67, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v83 = "strict_calloc";
    v84 = 2048;
    v85 = 1LL;
    v86 = 2048;
    v87 = v77;
    v68 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v68);
    if (result) {
      goto LABEL_175;
    }
    free(v68);
    v23 = v66;
  }

  *v26 = *(_BYTE *)v17;
  *(_WORD *)(v26 + 1) = *(unsigned __int16 *)((char *)v17 + 1);
  *(_DWORD *)(v26 + 3) = 16777472;
  v80 = 0;
  ccrng();
  memcpy(&v26[v23 + 7], a1, a2);
  v27 = v23;
  v28 = (char *)calloc(1uLL, v21 + 16);
  if (!v28)
  {
    v69 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v69, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v83 = "strict_calloc";
    v84 = 2048;
    v85 = 1LL;
    v86 = 2048;
    v87 = v21 + 16;
    v70 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v70);
    if (result) {
      goto LABEL_175;
    }
    free(v70);
  }

  v29 = v21 + 9;
  snprintf(v28, v29, "%s request", a3);
  v30 = &v28[v29];
  v31 = *(_DWORD *)(v26 + 3);
  *(_DWORD *)v30 = *(_DWORD *)v26;
  *(_DWORD *)(v30 + 3) = v31;
  v32 = cchpke_initiator_setup();
  free(v28);
  if (v32)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v33 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v83 = "nw_http_encrypt_oblivious_request";
      v84 = 1024;
      LODWORD(v85) = v32;
      v34 = "%{public}s Setup error: %d";
      v35 = (os_log_s *)v33;
LABEL_29:
      _os_log_impl(&dword_181A5C000, v35, OS_LOG_TYPE_ERROR, v34, buf, 0x12u);
      goto LABEL_30;
    }

    goto LABEL_30;
  }

  v36 = cchpke_initiator_encrypt();
  if (v36)
  {
    v37 = v36;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v38 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v83 = "nw_http_encrypt_oblivious_request";
      v84 = 1024;
      LODWORD(v85) = v37;
      v34 = "%{public}s Encrypt: %d";
      v35 = (os_log_s *)v38;
      goto LABEL_29;
    }

    v53 = 0LL;
LABEL_120:
    v29 += v52 + 5LL;
    if (v29 > v27) {
      break;
    }
    if (v43 <= 158)
    {
      if (v43 == 156)
      {
        if (v30)
        {
          if ((_DWORD)v52 == 16)
          {
            v30 = v30;
            *(_OWORD *)((char *)v30 + 28) = *(_OWORD *)v53;
          }

          goto LABEL_48;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v70 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)out = 136446210;
          *(void *)&out[4] = "nw_agent_copy_group_members_for_message";
          _os_log_impl( &dword_181A5C000,  v70,  OS_LOG_TYPE_ERROR,  "%{public}s No previous endpoint to apply endpoint agent to",  out,  0xCu);
        }
      }

      else
      {
        if (v43 != 158) {
          goto LABEL_132;
        }
        if (v30)
        {
          *(void *)out = 0LL;
          asprintf((char **)out, "%.*s", v52, v53);
          nw_endpoint_set_device_id(v30, *(const char **)out);
          if (*(void *)out) {
            free(*(void **)out);
          }
          goto LABEL_48;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v70 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)out = 136446210;
          *(void *)&out[4] = "nw_agent_copy_group_members_for_message";
          _os_log_impl( &dword_181A5C000,  v70,  OS_LOG_TYPE_ERROR,  "%{public}s No previous endpoint to apply endpoint device id to",  out,  0xCu);
        }
      }

      goto LABEL_147;
    }

    if (v43 != 159)
    {
      if (v43 == 213)
      {
        v67 = nw_path_copy_endpoint_from_tlv(213, v52, v53);

        v30 = v67;
        if (v30) {
          nw_array_append(v294, v30);
        }

        goto LABEL_48;
      }

    if (!v71)
    {
LABEL_121:
      registered_endpoint = 0LL;
      goto LABEL_122;
    }

    goto LABEL_120;
  }

  if (!(_BYTE)v89)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v76 = (os_log_s *)(id)gLogObj;
    v83 = type[0];
    if (os_log_type_enabled(v76, type[0]))
    {
      if (mode > 5) {
        v84 = "unknown-mode";
      }
      else {
        v84 = off_189BBBBC0[mode];
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&buf[4] = "nw_endpoint_handler_register_adaptive_read_handler";
      v93 = 2082;
      id_str = (void *)v84;
      v95 = 2082;
      v96 = "flow";
      _os_log_impl( &dword_181A5C000,  v76,  v83,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
    }

    goto LABEL_119;
  }

  v79 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v76 = (os_log_s *)(id)gLogObj;
  v80 = type[0];
  v81 = os_log_type_enabled(v76, type[0]);
  if (!v79)
  {
    if (v81)
    {
      if (mode > 5) {
        v85 = "unknown-mode";
      }
      else {
        v85 = off_189BBBBC0[mode];
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&buf[4] = "nw_endpoint_handler_register_adaptive_read_handler";
      v93 = 2082;
      id_str = (void *)v85;
      v95 = 2082;
      v96 = "flow";
      _os_log_impl( &dword_181A5C000,  v76,  v80,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
    }

    goto LABEL_119;
  }

  if (v81)
  {
    if (mode > 5) {
      v82 = "unknown-mode";
    }
    else {
      v82 = off_189BBBBC0[mode];
    }
    *(_DWORD *)buf = 136446978;
    *(void *)&buf[4] = "nw_endpoint_handler_register_adaptive_read_handler";
    v93 = 2082;
    id_str = (void *)v82;
    v95 = 2082;
    v96 = "flow";
    v97 = 2082;
    v98 = v79;
    _os_log_impl( &dword_181A5C000,  v76,  v80,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
  }

  free(v79);
  if (v75) {
    goto LABEL_121;
  }
LABEL_122:
}

    goto LABEL_120;
  }

  if (!(_BYTE)v89)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v76 = (os_log_s *)(id)gLogObj;
    v83 = type[0];
    if (os_log_type_enabled(v76, type[0]))
    {
      if (mode > 5) {
        v84 = "unknown-mode";
      }
      else {
        v84 = off_189BBBBC0[mode];
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&buf[4] = "nw_endpoint_handler_register_adaptive_write_handler";
      v93 = 2082;
      id_str = (void *)v84;
      v95 = 2082;
      v96 = "flow";
      _os_log_impl( &dword_181A5C000,  v76,  v83,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
    }

    goto LABEL_119;
  }

  v79 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v76 = (os_log_s *)(id)gLogObj;
  v80 = type[0];
  v81 = os_log_type_enabled(v76, type[0]);
  if (!v79)
  {
    if (v81)
    {
      if (mode > 5) {
        v85 = "unknown-mode";
      }
      else {
        v85 = off_189BBBBC0[mode];
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&buf[4] = "nw_endpoint_handler_register_adaptive_write_handler";
      v93 = 2082;
      id_str = (void *)v85;
      v95 = 2082;
      v96 = "flow";
      _os_log_impl( &dword_181A5C000,  v76,  v80,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
    }

    goto LABEL_119;
  }

  if (v81)
  {
    if (mode > 5) {
      v82 = "unknown-mode";
    }
    else {
      v82 = off_189BBBBC0[mode];
    }
    *(_DWORD *)buf = 136446978;
    *(void *)&buf[4] = "nw_endpoint_handler_register_adaptive_write_handler";
    v93 = 2082;
    id_str = (void *)v82;
    v95 = 2082;
    v96 = "flow";
    v97 = 2082;
    v98 = v79;
    _os_log_impl( &dword_181A5C000,  v76,  v80,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
  }

  free(v79);
  if (v75) {
    goto LABEL_121;
  }
LABEL_122:
}
}

void sub_181AFDFFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, void *a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, void *a27, uint64_t a28, uint64_t a29, void *a30, uint64_t a31, void *a32)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_is_equal(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = a1;
  unint64_t v6 = a2;
  v7 = (void *)v6;
  if (v5 | v6)
  {
    uint64_t v8 = 0LL;
    if (v5 && v6)
    {
      int v9 = [(id)v5 type];
      else {
        uint64_t v8 = 0LL;
      }
    }
  }

  else
  {
    uint64_t v8 = 1LL;
  }

  return v8;
}

void sub_181AFE2B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181AFE368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181AFE7A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_txt_record_is_equal(nw_txt_record_t left, nw_txt_record_t right)
{
  nw_txt_record_t v3 = left;
  v4 = right;
  unint64_t v5 = v4;
  if (v3 == v4) {
    goto LABEL_16;
  }
  BOOL v6 = 0;
  if (v3 && v4)
  {
    if (v3 <= v4) {
      v7 = (os_unfair_lock_s *)v4;
    }
    else {
      v7 = (os_unfair_lock_s *)v3;
    }
    if (v3 <= v4) {
      uint64_t v8 = (os_unfair_lock_s *)v3;
    }
    else {
      uint64_t v8 = (os_unfair_lock_s *)v4;
    }
    os_unfair_lock_lock(v7 + 8);
    os_unfair_lock_lock(v8 + 8);
    size_t v9 = *((void *)v3 + 2);
    if (v9 != *((void *)v5 + 2))
    {
LABEL_14:
      os_unfair_lock_unlock((os_unfair_lock_t)v5 + 8);
      os_unfair_lock_unlock((os_unfair_lock_t)v3 + 8);
      BOOL v6 = 0;
      goto LABEL_17;
    }

    if (memcmp(*((const void **)v3 + 1), *((const void **)v5 + 1), v9))
    {
      if ((*((_BYTE *)v3 + 36) & 1) != 0 && (*((_BYTE *)v5 + 36) & 1) != 0)
      {
        uint64_t v16 = 0LL;
        v17 = &v16;
        uint64_t v18 = 0x2020000000LL;
        char v19 = 1;
        v13[0] = MEMORY[0x1895F87A8];
        v13[1] = 3221225472LL;
        v13[2] = __nw_txt_record_is_equal_block_invoke;
        v13[3] = &unk_189BC1598;
        v11 = v5;
        v14 = v11;
        v15 = &v16;
        v12 = _Block_copy(v13);
        nw_txt_record_apply_internal_locked(v3, v12, 0LL);
        os_unfair_lock_unlock(v11 + 8);
        os_unfair_lock_unlock((os_unfair_lock_t)v3 + 8);
        BOOL v6 = *((_BYTE *)v17 + 24) != 0;

        _Block_object_dispose(&v16, 8);
        goto LABEL_17;
      }

      goto LABEL_14;
    }

    os_unfair_lock_unlock((os_unfair_lock_t)v5 + 8);
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 8);
LABEL_16:
    BOOL v6 = 1;
  }

void sub_181AFE954( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t nw_nsarray_is_equal(NSArray *a1, NSArray *a2)
{
  nw_txt_record_t v3 = a1;
  v4 = a2;
  unint64_t v5 = v4;
  uint64_t v6 = v3 == v4;
  if (v3 != v4 && v3 && v4) {
    uint64_t v6 = -[NSArray isEqual:](v3, "isEqual:", v4);
  }

  return v6;
}

void sub_181AFE9E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_endpoint_association_matches_key(void *a1, void *a2)
{
  nw_txt_record_t v3 = a2;
  id v4 = nw_association_copy_path_parameters(a1);
  BOOL v5 = nw_path_parameters_are_equal(v4, v3, 1u);

  return v5;
}

void sub_181AFEA4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_parameters_are_equal(void *a1, void *a2, unsigned int a3)
{
  BOOL v5 = a1;
  uint64_t v6 = a2;
  v7 = v6;
  BOOL v8 = v5 == v6;
  if (v5 != v6 && v5 && v6)
  {
    if (*((void *)v5 + 9) != *((void *)v6 + 9)
      || *((void *)v5 + 10) != *((void *)v6 + 10)
      || *((void *)v5 + 11) != *((void *)v6 + 11)
      || *(void *)(v5 + 94) != *(void *)(v6 + 94))
    {
      goto LABEL_14;
    }

    if (a3 != 3)
    {
      uint64_t v16 = *((void *)v6 + 1);
      uint64_t v17 = *((void *)v6 + 2);
      uint64_t v18 = *((void *)v6 + 3);
      uint64_t v19 = *((void *)v6 + 4);
      uint64_t v20 = *((void *)v6 + 5);
      BOOL v21 = *((void *)v5 + 1) == v16 && *((void *)v5 + 2) == v17;
      BOOL v22 = v21 && *((void *)v5 + 3) == v18;
      BOOL v23 = v22 && *((void *)v5 + 4) == v19;
      BOOL v24 = v23 && *((void *)v5 + 5) == v20;
      BOOL v25 = v24 && *((void *)v5 + 6) == v7[6];
      BOOL v26 = v25 && *((void *)v5 + 7) == v7[7];
      if (!v26 || *((void *)v5 + 8) != v7[8]) {
        goto LABEL_14;
      }
      if (a3 <= 1
        && (*(void *)(v5 + 102) != *(void *)((char *)v7 + 102)
         || v5[110] != (unint64_t)*((unsigned __int8 *)v7 + 110)))
      {
        goto LABEL_14;
      }
    }

    if (a3 - 5 < 0xFFFFFFFE
      || ((*((unsigned __int16 *)v5 + 54) | (v5[110] << 16)) & 0x20000) != 0
      || ((*((unsigned __int16 *)v7 + 54) | (*((unsigned __int8 *)v7 + 110) << 16)) & 0x20000) != 0)
    {
      v13 = (void *)*((void *)v5 + 17);
      if (v13 != (void *)v7[17]
        && (nw_context_get_isolate_protocol_cache(v13) || nw_context_get_isolate_protocol_cache((void *)v7[17])))
      {
        goto LABEL_14;
      }
    }

    v14 = (const char *)*((void *)v5 + 14);
    v15 = (const char *)v7[14];
    if (v14 != v15 && v14 && v15)
    {
      if (strcmp(v14, v15)) {
        goto LABEL_14;
      }
    }

    else if (v14 != v15)
    {
      goto LABEL_14;
    }

    if (a3 <= 2)
    {
      v29 = (const char *)*((void *)v5 + 15);
      v30 = (const char *)v7[15];
      if (v29 != v30 && v29 && v30)
      {
        if (strcmp(v29, v30)) {
          goto LABEL_14;
        }
      }

      else if (v29 != v30)
      {
        goto LABEL_14;
      }

      v31 = (const char *)*((void *)v5 + 16);
      v32 = (const char *)v7[16];
      if (v31 != v32 && v31 && v32)
      {
        if (strcmp(v31, v32)) {
          goto LABEL_14;
        }
      }

      else if (v31 != v32)
      {
        goto LABEL_14;
      }
    }

    if (nw_protocol_option_is_equal(*((void **)v5 + 18), (void *)v7[18])
      && nw_protocol_option_is_equal(*((void **)v5 + 19), (void *)v7[19]))
    {
      v33 = (void *)*((void *)v5 + 20);
      if (a3)
      {
        if (!v33 || (v34 = (void *)v7[20]) == 0LL || (nw_endpoint_is_equal(v33, v34, 0LL) & 1) != 0)
        {
LABEL_81:
          if (nw_interface_shallow_compare(*((void **)v5 + 21), (void *)v7[21]))
          {
            v35 = (xpc_object_t *)*((void *)v5 + 22);
            v36 = (xpc_object_t *)v7[22];
            if (v35)
            {
              if (v36
                && nw_unordered_xpc_array_is_equal(*v35, *v36)
                && nw_unordered_xpc_array_is_equal( *(xpc_object_t *)(*((void *)v5 + 22) + 8LL),  *(xpc_object_t *)(v7[22] + 8LL))
                && nw_unordered_xpc_array_is_equal( *(xpc_object_t *)(*((void *)v5 + 22) + 16LL),  *(xpc_object_t *)(v7[22] + 16LL))
                && nw_unordered_xpc_array_is_equal( *(xpc_object_t *)(*((void *)v5 + 22) + 24LL),  *(xpc_object_t *)(v7[22] + 24LL))
                && nw_unordered_xpc_array_is_equal( *(xpc_object_t *)(*((void *)v5 + 22) + 32LL),  *(xpc_object_t *)(v7[22] + 32LL))
                && nw_unordered_xpc_array_is_equal( *(xpc_object_t *)(*((void *)v5 + 22) + 40LL),  *(xpc_object_t *)(v7[22] + 40LL))
                && nw_unordered_xpc_array_is_equal( *(xpc_object_t *)(*((void *)v5 + 22) + 48LL),  *(xpc_object_t *)(v7[22] + 48LL))
                && nw_unordered_xpc_array_is_equal( *(xpc_object_t *)(*((void *)v5 + 22) + 56LL),  *(xpc_object_t *)(v7[22] + 56LL))
                && nw_unordered_xpc_array_is_equal( *(xpc_object_t *)(*((void *)v5 + 22) + 64LL),  *(xpc_object_t *)(v7[22] + 64LL))
                && nw_unordered_xpc_array_is_equal( *(xpc_object_t *)(*((void *)v5 + 22) + 72LL),  *(xpc_object_t *)(v7[22] + 72LL))
                && nw_unordered_xpc_array_is_equal( *(xpc_object_t *)(*((void *)v5 + 22) + 80LL),  *(xpc_object_t *)(v7[22] + 80LL))
                && nw_unordered_xpc_array_is_equal( *(xpc_object_t *)(*((void *)v5 + 22) + 88LL),  *(xpc_object_t *)(v7[22] + 88LL))
                && nw_unordered_xpc_array_is_equal( *(xpc_object_t *)(*((void *)v5 + 22) + 96LL),  *(xpc_object_t *)(v7[22] + 96LL))
                && nw_unordered_xpc_array_is_equal( *(xpc_object_t *)(*((void *)v5 + 22) + 104LL),  *(xpc_object_t *)(v7[22] + 104LL))
                && nw_unordered_xpc_array_is_equal( *(xpc_object_t *)(*((void *)v5 + 22) + 112LL),  *(xpc_object_t *)(v7[22] + 112LL))
                && nw_unordered_xpc_array_is_equal( *(xpc_object_t *)(*((void *)v5 + 22) + 120LL),  *(xpc_object_t *)(v7[22] + 120LL))
                && nw_unordered_xpc_array_is_equal( *(xpc_object_t *)(*((void *)v5 + 22) + 136LL),  *(xpc_object_t *)(v7[22] + 136LL))
                && nw_protocol_option_is_equal( *(void **)(*((void *)v5 + 22) + 128LL),  *(void **)(v7[22] + 128LL)))
              {
                goto LABEL_104;
              }
            }

            else if (!v36)
            {
LABEL_104:
              BOOL v8 = 1LL;
              goto LABEL_15;
            }
          }
        }
      }

      else if (nw_endpoint_is_equal(v33, (void *)v7[20], 0LL))
      {
        goto LABEL_81;
      }
    }

LABEL_14:
    BOOL v8 = 0LL;
  }

        uint64_t v17 = v15(v12, v13);
LABEL_15:
        v11 = v17;

        if (v11)
        {
          v85 = OS_LOG_TYPE_DEFAULT;
          uint64_t v18 = *(void *)&v3[4][13]._os_unfair_lock_opaque;
          uint64_t v19 = v12;
          uint64_t v20 = nw_hash_table_add_object(v18, (uint64_t)v19, (char *)&v85);
          if (v20)
          {
            BOOL v21 = v20;
            if (v85)
            {
LABEL_52:
              *(void *)(v21 + 32) = v11;
              goto LABEL_167;
            }

            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            BOOL v22 = (id)gLogObj;
            *(_DWORD *)buf = 136446722;
            v87 = "nw_context_get_globals_for_protocol";
            v88 = 2114;
            v89 = (char *)v13;
            v90 = 2048;
            v91 = v19;
            BOOL v23 = (char *)_os_log_send_and_compose_impl();

            type = OS_LOG_TYPE_ERROR;
            v83 = 0;
            if (__nwlog_fault(v23, &type, &v83))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                BOOL v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                BOOL v25 = type;
                if (os_log_type_enabled(v24, type))
                {
                  *(_DWORD *)buf = 136446722;
                  v87 = "nw_context_get_globals_for_protocol";
                  v88 = 2114;
                  v89 = (char *)v13;
                  v90 = 2048;
                  v91 = v19;
                  _os_log_impl( &dword_181A5C000,  v24,  v25,  "%{public}s %{public}@ failed to add globals for protocol %p",  buf,  0x20u);
                }
              }

              else if (v83)
              {
                v33 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                BOOL v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                v34 = type;
                v35 = os_log_type_enabled(v24, type);
                if (v33)
                {
                  if (v35)
                  {
                    *(_DWORD *)buf = 136446978;
                    v87 = "nw_context_get_globals_for_protocol";
                    v88 = 2114;
                    v89 = (char *)v13;
                    v90 = 2048;
                    v91 = v19;
                    v92 = 2082;
                    v93 = v33;
                    _os_log_impl( &dword_181A5C000,  v24,  v34,  "%{public}s %{public}@ failed to add globals for protocol %p, dumping backtrace:%{public}s",  buf,  0x2Au);
                  }

                  free(v33);
                  goto LABEL_50;
                }

                if (v35)
                {
                  *(_DWORD *)buf = 136446722;
                  v87 = "nw_context_get_globals_for_protocol";
                  v88 = 2114;
                  v89 = (char *)v13;
                  v90 = 2048;
                  v91 = v19;
                  _os_log_impl( &dword_181A5C000,  v24,  v34,  "%{public}s %{public}@ failed to add globals for protocol %p, no backtrace",  buf,  0x20u);
                }
              }

              else
              {
                __nwlog_obj();
                BOOL v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                v37 = type;
                if (os_log_type_enabled(v24, type))
                {
                  *(_DWORD *)buf = 136446722;
                  v87 = "nw_context_get_globals_for_protocol";
                  v88 = 2114;
                  v89 = (char *)v13;
                  v90 = 2048;
                  v91 = v19;
                  _os_log_impl( &dword_181A5C000,  v24,  v37,  "%{public}s %{public}@ failed to add globals for protocol %p, backtrace limit exceeded",  buf,  0x20u);
                }
              }
            }

        if ((*((_WORD *)v10 + 166) & 0x800) != 0)
        {
          v12 = v11;
          v13 = *((_BYTE *)v12 + 128);
          v293 = v12;

          if ((v13 & 4) == 0)
          {
            v232 = nw_endpoint_handler_get_minimize_logging(v291);
            v233 = nw_endpoint_handler_get_logging_disabled(v291);
            if (v232)
            {
              if ((v233 & 1) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                v234 = (os_log_s *)(id)gconnectionLogObj;
                if (os_log_type_enabled(v234, OS_LOG_TYPE_DEBUG))
                {
                  v271 = nw_endpoint_handler_get_id_string(v291);
                  v272 = nw_endpoint_handler_dry_run_string(v291);
                  v273 = nw_endpoint_handler_copy_endpoint(v291);
                  v274 = nw_endpoint_get_logging_description(v273);
                  v275 = nw_endpoint_handler_state_string(v291);
                  v276 = nw_endpoint_handler_mode_string(v291);
                  v277 = nw_endpoint_handler_copy_current_path(v291);
                  *(_DWORD *)buf = 136447746;
                  *(void *)&buf[4] = "nw_flow_service_writes";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v271;
                  *(_WORD *)&buf[22] = 2082;
                  v338 = v272;
                  *(_WORD *)v339 = 2082;
                  *(void *)&v339[2] = v274;
                  *(_WORD *)&v339[10] = 2082;
                  *(void *)&v339[12] = v275;
                  *(_WORD *)&v339[20] = 2082;
                  *(void *)&v339[22] = v276;
                  v340 = 2114;
                  v341 = v277;
                  _os_log_impl( &dword_181A5C000,  v234,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Write request is no t idempotent, stopping servicing writes",  buf,  0x48u);
                }

      if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        v10 = *(void *)(v3 + 88);
        if (v10)
        {
          v11 = v10 - 1;
          *(void *)(v3 + 88) = v11;
          if (!v11)
          {
            v12 = *(void (***)(void))(v3 + 64);
            if (v12)
            {
              *(void *)(v3 + 64) = 0LL;
              v12[2](v12);
              _Block_release(v12);
            }

            if ((*(_BYTE *)(v3 + 72) & 1) != 0)
            {
              v13 = *(const void **)(v3 + 64);
              if (v13) {
                _Block_release(v13);
              }
            }

            goto LABEL_24;
          }
        }
      }

      return;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v42 = "__nw_protocol_connected";
    v2 = _os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (__nwlog_fault((const char *)v2, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v27 = (os_log_s *)__nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_connected";
        v29 = "%{public}s called with null other_protocol";
        goto LABEL_90;
      }

      if (!v39)
      {
        v27 = (os_log_s *)__nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_connected";
        v29 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_90;
      }

      v35 = (char *)__nw_create_backtrace_string();
      v27 = (os_log_s *)__nwlog_obj();
      v28 = type;
      v36 = os_log_type_enabled(v27, type);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "__nw_protocol_connected";
          v43 = 2082;
          v44 = v35;
          _os_log_impl( &dword_181A5C000,  v27,  v28,  "%{public}s called with null other_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v35);
        if (v2) {
          goto LABEL_32;
        }
        goto LABEL_14;
      }

      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_connected";
        v29 = "%{public}s called with null other_protocol, no backtrace";
LABEL_90:
        _os_log_impl(&dword_181A5C000, v27, v28, v29, buf, 0xCu);
      }
    }

LABEL_15:
  return v9;
}

    goto LABEL_15;
  }

  if (!v32)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    size_t v9 = (os_log_s *)(id)gLogObj;
    v29 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v35 = "-[NWConcrete_nw_endpoint_flow dealloc]";
      _os_log_impl( &dword_181A5C000,  v9,  v29,  "%{public}s read requests not drained, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_14;
  }

  BOOL v22 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  size_t v9 = (os_log_s *)(id)gLogObj;
  BOOL v23 = type;
  BOOL v24 = os_log_type_enabled(v9, type);
  if (!v22)
  {
    if (v24)
    {
      *(_DWORD *)buf = 136446210;
      v35 = "-[NWConcrete_nw_endpoint_flow dealloc]";
      _os_log_impl(&dword_181A5C000, v9, v23, "%{public}s read requests not drained, no backtrace", buf, 0xCu);
    }

    goto LABEL_14;
  }

  if (v24)
  {
    *(_DWORD *)buf = 136446466;
    v35 = "-[NWConcrete_nw_endpoint_flow dealloc]";
    v36 = 2082;
    v37 = v22;
    _os_log_impl( &dword_181A5C000,  v9,  v23,  "%{public}s read requests not drained, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v22);
  if (v8) {
LABEL_16:
  }
    free(v8);
LABEL_17:
  if (!self->shared_protocol.write_requests) {
    goto LABEL_25;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v11 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v35 = "-[NWConcrete_nw_endpoint_flow dealloc]";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v32 = 0;
  if (!__nwlog_fault(v12, &type, &v32))
  {
LABEL_23:
    if (!v12) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }

  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = (os_log_s *)(id)gLogObj;
    v14 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      v35 = "-[NWConcrete_nw_endpoint_flow dealloc]";
      _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s write requests not drained", buf, 0xCu);
    }

    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    goto LABEL_15;
  }

  if (!v8)
  {
    swift_release();
    goto LABEL_14;
  }

  size_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  swift_retain();
  swift_release();
LABEL_15:
  v11 = *(void **)(a1 + 56);
  v12 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v12;
  v13 = v12;

  return a1;
}

    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    goto LABEL_15;
  }

  if (!v8)
  {
    swift_release();
    goto LABEL_14;
  }

  size_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  swift_release();
LABEL_15:
  v11 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);

  return a1;
}

    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 6);
    goto LABEL_15;
  }

  if (!v10)
  {
    swift_release();
    goto LABEL_14;
  }

  v11 = *((void *)a2 + 4);
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  swift_retain();
  swift_release();
LABEL_15:
  v13 = *(void **)(a1 + 40);
  v14 = (void *)*((void *)a2 + 5);
  *(void *)(a1 + 40) = v14;
  v15 = v14;

  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  return a1;
}

    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_15;
  }

  if (!v9)
  {
    swift_release();
    goto LABEL_14;
  }

  v10 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v10;
  swift_release();
LABEL_15:
  v12 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);

  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

    BOOL v24 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v16 >> 6) + 64) |= 1LL << v16;
    BOOL v25 = (uint64_t *)(v24[6] + 16 * v16);
    *BOOL v25 = v13;
    v25[1] = v12;
    sub_181C275FC(v47, (_OWORD *)(v24[7] + 32 * v16));
    BOOL v26 = v24[2];
    v27 = __OFADD__(v26, 1LL);
    v28 = v26 + 1;
    if (v27)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }

    v24[2] = v28;
LABEL_16:
    sub_181C27D30(&v48);
    for (i = *((void *)&v48 + 1); *((void *)&v48 + 1); i = *((void *)&v48 + 1))
    {
      v31 = v48;
      sub_181C275FC(v49, v47);
      v32 = *(void **)a5;
      v34 = sub_181C8C01C(v31, i);
      v35 = v32[2];
      v36 = (v33 & 1) == 0;
      v37 = v35 + v36;
      if (__OFADD__(v35, v36)) {
        goto LABEL_28;
      }
      v38 = v33;
      if (v32[3] < v37)
      {
        sub_181C8EC9C(v37, 1);
        v39 = sub_181C8C01C(v31, i);
        if ((v38 & 1) != (v40 & 1)) {
          goto LABEL_30;
        }
        v34 = v39;
      }

      if ((v38 & 1) != 0)
      {
        sub_181BF9894((uint64_t)v47, (uint64_t)v46);
        __swift_destroy_boxed_opaque_existential_2((uint64_t)v47);
        swift_bridgeObjectRelease();
        v30 = (_OWORD *)(*(void *)(*(void *)a5 + 56LL) + 32 * v34);
        __swift_destroy_boxed_opaque_existential_2((uint64_t)v30);
        sub_181C275FC(v46, v30);
      }

      else
      {
        v41 = *(void **)a5;
        *(void *)(*(void *)a5 + 8 * (v34 >> 6) + 64) |= 1LL << v34;
        v42 = (uint64_t *)(v41[6] + 16 * v34);
        *v42 = v31;
        v42[1] = i;
        sub_181C275FC(v47, (_OWORD *)(v41[7] + 32 * v34));
        v43 = v41[2];
        v27 = __OFADD__(v43, 1LL);
        v44 = v43 + 1;
        if (v27) {
          goto LABEL_29;
        }
        v41[2] = v44;
      }

      sub_181C27D30(&v48);
    }

  __break(1u);
  return result;
}

            __break(1u);
            return result;
          }
        }

        else
        {
          __break(1u);
        }

        __break(1u);
        goto LABEL_14;
      }
    }
  }

  return result;
}

    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_15;
  }

  if (!v9)
  {
    swift_release();
    goto LABEL_14;
  }

  v10 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v10;
  swift_retain();
  swift_release();
LABEL_15:
  v12 = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = v12;
  v13 = *(void **)(a1 + 48);
  v14 = *(void **)(a2 + 48);
  *(void *)(a1 + 48) = v14;
  v15 = v14;

  return a1;
}

    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_15;
  }

  if (!v9)
  {
    swift_release();
    goto LABEL_14;
  }

  v10 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v10;
  swift_release();
LABEL_15:
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  v12 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);

  return a1;
}

          BOOL v8 = __clz(__rbit64(v24)) + (v22 << 6);
        }

  return 1LL;
}

LABEL_15:
    BOOL v8 = 0LL;
    goto LABEL_16;
  }

  snprintf(__str, 0x10uLL, "%d", a2);
  v10 = nw_listener_create_with_port(__str, (nw_parameters_t)v4[10]);
  bonjour_service_name = nw_endpoint_get_bonjour_service_name((nw_endpoint_t)v4[5]);
  bonjour_service_type = nw_endpoint_get_bonjour_service_type((nw_endpoint_t)v4[5]);
  bonjour_service_domain = nw_endpoint_get_bonjour_service_domain((nw_endpoint_t)v4[5]);
  bonjour_service = nw_advertise_descriptor_create_bonjour_service( bonjour_service_name,  bonjour_service_type,  bonjour_service_domain);
  nw_listener_set_advertise_descriptor(v10, bonjour_service);
  v15 = MEMORY[0x1895F87A8];
  handler[0] = MEMORY[0x1895F87A8];
  handler[1] = 3221225472LL;
  handler[2] = __nw_candidate_manager_start_advertise_block_invoke;
  handler[3] = &unk_189BB7400;
  uint64_t v16 = v4;
  v62 = v16;
  nw_listener_set_new_connection_handler(v10, handler);
  v58[0] = v15;
  v58[1] = 3221225472LL;
  v58[2] = __nw_candidate_manager_start_advertise_block_invoke_134;
  v58[3] = &unk_189BC9490;
  uint64_t v17 = v10;
  v59 = v17;
  uint64_t v18 = v16;
  v60 = v18;
  nw_listener_set_state_changed_handler(v17, v58);
  objc_storeStrong(v4 + 9, v10);
  uint64_t v19 = v18;
  uint64_t v20 = v4[10];
  BOOL v21 = v20;
  if (!v20)
  {
    __nwlog_obj();
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v66 = "nw_candidate_manager_copy_workloop";
    v37 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v63 = 0;
    if (__nwlog_fault(v37, &type, &v63))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v39 = type;
        if (os_log_type_enabled(v38, type))
        {
          *(_DWORD *)buf = 136446210;
          v66 = "nw_candidate_manager_copy_workloop";
          _os_log_impl(&dword_181A5C000, v38, v39, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v63)
      {
        v46 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v47 = type;
        v48 = os_log_type_enabled(v38, type);
        if (v46)
        {
          if (v48)
          {
            *(_DWORD *)buf = 136446466;
            v66 = "nw_candidate_manager_copy_workloop";
            v67 = 2082;
            v68 = v46;
            _os_log_impl( &dword_181A5C000,  v38,  v47,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v46);
          goto LABEL_90;
        }

        if (v48)
        {
          *(_DWORD *)buf = 136446210;
          v66 = "nw_candidate_manager_copy_workloop";
          _os_log_impl(&dword_181A5C000, v38, v47, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v53 = type;
        if (os_log_type_enabled(v38, type))
        {
          *(_DWORD *)buf = 136446210;
          v66 = "nw_candidate_manager_copy_workloop";
          _os_log_impl( &dword_181A5C000,  v38,  v53,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    _Block_object_dispose(type, 8);
    uint64_t v20 = v55;
    goto LABEL_15;
  }

  if (gLogDatapath)
  {
    __nwlog_obj();
    v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136447490;
      v76 = "nw_protocol_instance_registrar_find_instance_to_join";
      v77 = 2112;
      v78 = v16;
      v79 = 2080;
      v80 = a2;
      v81 = 2112;
      v82 = v18;
      v83 = 2112;
      v84 = v20;
      v85 = 1024;
      LODWORD(v86) = a4;
      _os_log_impl( &dword_181A5C000,  v50,  OS_LOG_TYPE_DEBUG,  "%{public}s %@ no accept function for %s, cannot join for endpoint %@, parameters %@, (proxy: %u)",  buf,  0x3Au);
    }
  }
  }

  nw_framer_protocol_finalizer(v5, (uint64_t)(a3 + 464));
}
  }

  nw_framer_protocol_finalizer(v5, (uint64_t)(a3 + 480));
}

  if (a2 >= 1 && a3)
  {
    memset(&address[4], 0, 24);
    *(_WORD *)address = 7708;
    *(_WORD *)&address[2] = __rev16(nw_endpoint_get_port(*(nw_endpoint_t *)(v6 + 24)));
    v39 = *(_DWORD *)&nw_endpoint_get_address(*(nw_endpoint_t *)(*(void *)(a1 + 32) + 24LL))->sa_data[2];
    v13 = a2;
    while (1)
    {
      if (nw_nat64_synthesize_v6(a3, (__int16 *)&v39, &address[8]))
      {
        uint64_t v17 = nw_endpoint_create_address((const sockaddr *)address);
        uint64_t v18 = v17;
        if (v17)
        {
          nw_endpoint_set_parent_endpoint(v17, *(void **)(*(void *)(a1 + 32) + 24LL), 0);
          nw_array_append(*(void *)(*(void *)(a1 + 32) + 144LL), v18);
LABEL_37:

          goto LABEL_19;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v23 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_resolver_create_dns_service_locked_block_invoke";
        BOOL v24 = (char *)_os_log_send_and_compose_impl();

        v41[0] = 16;
        v38 = 0;
        if (__nwlog_fault(v24, v41, &v38))
        {
          if (v41[0] == 17)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            BOOL v25 = (os_log_s *)(id)gLogObj;
            BOOL v26 = v41[0];
            if (os_log_type_enabled(v25, (os_log_type_t)v41[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&buf[4] = "nw_resolver_create_dns_service_locked_block_invoke";
              _os_log_impl(&dword_181A5C000, v25, v26, "%{public}s nw_endpoint_create_address failed", buf, 0xCu);
            }

            goto LABEL_34;
          }

          if (v38)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v32 = (os_log_s *)(id)gLogObj;
            v33 = v41[0];
            v34 = os_log_type_enabled(v32, (os_log_type_t)v41[0]);
            if (backtrace_string)
            {
              if (v34)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&buf[4] = "nw_resolver_create_dns_service_locked_block_invoke";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = backtrace_string;
                _os_log_impl( &dword_181A5C000,  v32,  v33,  "%{public}s nw_endpoint_create_address failed, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(backtrace_string);
              if (!v24) {
                goto LABEL_37;
              }
              goto LABEL_36;
            }

            if (v34)
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&buf[4] = "nw_resolver_create_dns_service_locked_block_invoke";
              _os_log_impl( &dword_181A5C000,  v32,  v33,  "%{public}s nw_endpoint_create_address failed, no backtrace",  buf,  0xCu);
            }
          }

          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            BOOL v25 = (os_log_s *)(id)gLogObj;
            v35 = v41[0];
            if (os_log_type_enabled(v25, (os_log_type_t)v41[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&buf[4] = "nw_resolver_create_dns_service_locked_block_invoke";
              _os_log_impl( &dword_181A5C000,  v25,  v35,  "%{public}s nw_endpoint_create_address failed, backtrace limit exceeded",  buf,  0xCu);
            }

  nw_resolver_insert_endpoint_locked(v5, v4, &__block_literal_global_256);

  return 1LL;
}

    goto LABEL_15;
  }

  if ((*(_BYTE *)(v5 + 346) & 0x20) == 0)
  {
    if (*(_BYTE *)(v5 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v6 = (os_log_s *)(id)gconnectionLogObj;
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO)) {
        goto LABEL_14;
      }
      v7 = *(void *)(v278 + 32) + 256LL;
      *(_DWORD *)&buf[0].sa_len = 136446722;
      *(void *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
      *(_WORD *)&buf[0].sa_data[10] = 2082;
      *(void *)&buf[0].sa_data[12] = v7;
      *(_WORD *)&buf[1].sa_data[4] = 2048;
      *(void *)&buf[1].sa_data[6] = a3;
      BOOL v8 = "%{public}s [C%{public}s] Got %zu DNS results";
      size_t v9 = v6;
      v10 = 32;
      goto LABEL_13;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v6 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v11 = *(_DWORD *)(*(void *)(v278 + 32) + 340LL);
      *(_DWORD *)&buf[0].sa_len = 136446722;
      *(void *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
      *(_WORD *)&buf[0].sa_data[10] = 1024;
      *(_DWORD *)&buf[0].sa_data[12] = v11;
      *(_WORD *)buf[1].sa_data = 2048;
      *(void *)&buf[1].sa_data[2] = a3;
      BOOL v8 = "%{public}s [R%u] Got %zu DNS results";
      size_t v9 = v6;
      v10 = 28;
      goto LABEL_13;
    }

    goto LABEL_14;
  }

      v13 = v39;
      goto LABEL_15;
    }

    __nwlog_obj();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_endpoint_set_dnssd_cname_array";
    v32 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (__nwlog_fault(v32, type, &v44))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v34 = type[0];
        if (os_log_type_enabled(v33, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_endpoint_set_dnssd_cname_array";
          _os_log_impl(&dword_181A5C000, v33, v34, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }

      else if (v44)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v38 = type[0];
        v36 = os_log_type_enabled(v33, type[0]);
        if (backtrace_string)
        {
          if (v36)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&buf[4] = "nw_endpoint_set_dnssd_cname_array";
            v46 = 2082;
            v47 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v33,  v38,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_47;
        }

        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_endpoint_set_dnssd_cname_array";
          _os_log_impl(&dword_181A5C000, v33, v38, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v37 = type[0];
        if (os_log_type_enabled(v33, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_endpoint_set_dnssd_cname_array";
          _os_log_impl( &dword_181A5C000,  v33,  v37,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

  *(_DWORD *)(v2 + 84) = -65568;
  nw_resolver_update_status_locked(*(void *)(a1 + 32), 0LL);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12LL));
}

    free(v11);
    if (!v8) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }

  v26[0] = MEMORY[0x1895F87A8];
  v26[1] = 3221225472LL;
  v26[2] = __nw_endpoint_add_edge_block_invoke;
  v26[3] = &unk_189BC9238;
  v27 = v3;
  v28 = v5;
  nw_endpoint_locked(v27, v26);

LABEL_24:
}

          size_t v9 = 0LL;

          goto LABEL_38;
        }

        if (v3[8])
        {
          __nwlog_obj();
          uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
          uint64_t v19 = nw_group_descriptor_get_type(v3[8]);
          if (v19 > 4) {
            uint64_t v20 = "unknown";
          }
          else {
            uint64_t v20 = off_189BB74C8[v19];
          }
          *(_DWORD *)buf = 136446466;
          v56 = "nw_connection_group_copy_local_endpoint_for_message";
          v57 = 2080;
          v58 = (void *)v20;
          BOOL v22 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v53 = 0;
          if (__nwlog_fault(v22, &type, &v53))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              BOOL v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              v30 = type;
              if (os_log_type_enabled(v23, type))
              {
                v31 = nw_group_descriptor_get_type(v3[8]);
                if (v31 > 4) {
                  v32 = "unknown";
                }
                else {
                  v32 = off_189BB74C8[v31];
                }
                *(_DWORD *)buf = 136446466;
                v56 = "nw_connection_group_copy_local_endpoint_for_message";
                v57 = 2080;
                v58 = (void *)v32;
                _os_log_impl(&dword_181A5C000, v23, v30, "%{public}s Unsupported group descriptor type: %s", buf, 0x16u);
              }

            if (v8 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v16 = *(void *)(a1 + 88);
              if (v16)
              {
                uint64_t v17 = v16 - 1;
                *(void *)(a1 + 88) = v17;
                if (!v17)
                {
                  uint64_t v18 = *(void (***)(void))(a1 + 64);
                  if (v18)
                  {
                    *(void *)(a1 + 64) = 0LL;
                    v18[2](v18);
                    _Block_release(v18);
                  }

                  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                  {
                    uint64_t v19 = *(const void **)(a1 + 64);
                    if (v19) {
                      _Block_release(v19);
                    }
                  }

                  free((void *)a1);
                }
              }
            }

            return v14;
          }
        }

        __nwlog_obj();
        BOOL v24 = *(const char **)(a1 + 16);
        *(_DWORD *)buf = 136446722;
        v57 = "__nw_protocol_get_input_frames";
        if (!v24) {
          BOOL v24 = "invalid";
        }
        v58 = 2082;
        v59 = (void *)v24;
        v60 = 2048;
        v61 = a1;
        BOOL v25 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v54 = 0;
        if (__nwlog_fault(v25, &type, &v54))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            BOOL v26 = (os_log_s *)__nwlog_obj();
            v27 = type;
            if (!os_log_type_enabled(v26, type)) {
              goto LABEL_107;
            }
            v28 = *(const char **)(a1 + 16);
            if (!v28) {
              v28 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            v57 = "__nw_protocol_get_input_frames";
            v58 = 2082;
            v59 = (void *)v28;
            v60 = 2048;
            v61 = a1;
            v29 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback";
LABEL_84:
            v51 = v26;
            v52 = v27;
            v53 = 32;
LABEL_106:
            _os_log_impl(&dword_181A5C000, v51, v52, v29, buf, v53);
            goto LABEL_107;
          }

          if (!v54)
          {
            BOOL v26 = (os_log_s *)__nwlog_obj();
            v27 = type;
            if (!os_log_type_enabled(v26, type)) {
              goto LABEL_107;
            }
            v49 = *(const char **)(a1 + 16);
            if (!v49) {
              v49 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            v57 = "__nw_protocol_get_input_frames";
            v58 = 2082;
            v59 = (void *)v49;
            v60 = 2048;
            v61 = a1;
            v29 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, backtrace limit exceeded";
            goto LABEL_84;
          }

          backtrace_string = (char *)__nw_create_backtrace_string();
          BOOL v26 = (os_log_s *)__nwlog_obj();
          v27 = type;
          v41 = os_log_type_enabled(v26, type);
          if (!backtrace_string)
          {
            if (!v41) {
              goto LABEL_107;
            }
            v50 = *(const char **)(a1 + 16);
            if (!v50) {
              v50 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            v57 = "__nw_protocol_get_input_frames";
            v58 = 2082;
            v59 = (void *)v50;
            v60 = 2048;
            v61 = a1;
            v29 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, no backtrace";
            goto LABEL_84;
          }

          if (v41)
          {
            v42 = *(const char **)(a1 + 16);
            if (!v42) {
              v42 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            v57 = "__nw_protocol_get_input_frames";
            v58 = 2082;
            v59 = (void *)v42;
            v60 = 2048;
            v61 = a1;
            v62 = 2082;
            v63 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v26,  v27,  "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(backtrace_string);
        }

            if (v8 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v16 = *(void *)(a1 + 88);
              if (v16)
              {
                uint64_t v17 = v16 - 1;
                *(void *)(a1 + 88) = v17;
                if (!v17)
                {
                  uint64_t v18 = *(void (***)(void))(a1 + 64);
                  if (v18)
                  {
                    *(void *)(a1 + 64) = 0LL;
                    v18[2](v18);
                    _Block_release(v18);
                  }

                  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                  {
                    uint64_t v19 = *(const void **)(a1 + 64);
                    if (v19) {
                      _Block_release(v19);
                    }
                  }

                  free((void *)a1);
                }
              }
            }

            return v14;
          }
        }

        __nwlog_obj();
        BOOL v24 = *(const char **)(a1 + 16);
        *(_DWORD *)buf = 136446722;
        v57 = "__nw_protocol_get_output_frames";
        if (!v24) {
          BOOL v24 = "invalid";
        }
        v58 = 2082;
        v59 = (void *)v24;
        v60 = 2048;
        v61 = a1;
        BOOL v25 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v54 = 0;
        if (__nwlog_fault(v25, &type, &v54))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            BOOL v26 = (os_log_s *)__nwlog_obj();
            v27 = type;
            if (!os_log_type_enabled(v26, type)) {
              goto LABEL_107;
            }
            v28 = *(const char **)(a1 + 16);
            if (!v28) {
              v28 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            v57 = "__nw_protocol_get_output_frames";
            v58 = 2082;
            v59 = (void *)v28;
            v60 = 2048;
            v61 = a1;
            v29 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback";
LABEL_84:
            v51 = v26;
            v52 = v27;
            v53 = 32;
LABEL_106:
            _os_log_impl(&dword_181A5C000, v51, v52, v29, buf, v53);
            goto LABEL_107;
          }

          if (!v54)
          {
            BOOL v26 = (os_log_s *)__nwlog_obj();
            v27 = type;
            if (!os_log_type_enabled(v26, type)) {
              goto LABEL_107;
            }
            v49 = *(const char **)(a1 + 16);
            if (!v49) {
              v49 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            v57 = "__nw_protocol_get_output_frames";
            v58 = 2082;
            v59 = (void *)v49;
            v60 = 2048;
            v61 = a1;
            v29 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, backtrace limit exceeded";
            goto LABEL_84;
          }

          backtrace_string = (char *)__nw_create_backtrace_string();
          BOOL v26 = (os_log_s *)__nwlog_obj();
          v27 = type;
          v41 = os_log_type_enabled(v26, type);
          if (!backtrace_string)
          {
            if (!v41) {
              goto LABEL_107;
            }
            v50 = *(const char **)(a1 + 16);
            if (!v50) {
              v50 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            v57 = "__nw_protocol_get_output_frames";
            v58 = 2082;
            v59 = (void *)v50;
            v60 = 2048;
            v61 = a1;
            v29 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, no backtrace";
            goto LABEL_84;
          }

          if (v41)
          {
            v42 = *(const char **)(a1 + 16);
            if (!v42) {
              v42 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            v57 = "__nw_protocol_get_output_frames";
            v58 = 2082;
            v59 = (void *)v42;
            v60 = 2048;
            v61 = a1;
            v62 = 2082;
            v63 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v26,  v27,  "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(backtrace_string);
        }

      if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        v10 = *(void *)(v3 + 88);
        if (v10)
        {
          v11 = v10 - 1;
          *(void *)(v3 + 88) = v11;
          if (!v11)
          {
            v12 = *(void (***)(void))(v3 + 64);
            if (v12)
            {
              *(void *)(v3 + 64) = 0LL;
              v12[2](v12);
              _Block_release(v12);
            }

            if ((*(_BYTE *)(v3 + 72) & 1) != 0)
            {
              v13 = *(const void **)(v3 + 64);
              if (v13) {
                _Block_release(v13);
              }
            }

            goto LABEL_24;
          }
        }
      }

      return;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v42 = "__nw_protocol_disconnect";
    v2 = _os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (__nwlog_fault((const char *)v2, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v27 = (os_log_s *)__nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_disconnect";
        v29 = "%{public}s called with null other_protocol";
        goto LABEL_90;
      }

      if (!v39)
      {
        v27 = (os_log_s *)__nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_disconnect";
        v29 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_90;
      }

      v35 = (char *)__nw_create_backtrace_string();
      v27 = (os_log_s *)__nwlog_obj();
      v28 = type;
      v36 = os_log_type_enabled(v27, type);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "__nw_protocol_disconnect";
          v43 = 2082;
          v44 = v35;
          _os_log_impl( &dword_181A5C000,  v27,  v28,  "%{public}s called with null other_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v35);
        if (v2) {
          goto LABEL_32;
        }
        goto LABEL_14;
      }

      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_disconnect";
        v29 = "%{public}s called with null other_protocol, no backtrace";
LABEL_90:
        _os_log_impl(&dword_181A5C000, v27, v28, v29, buf, 0xCu);
      }
    }

      if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        v10 = *(void *)(v3 + 88);
        if (v10)
        {
          v11 = v10 - 1;
          *(void *)(v3 + 88) = v11;
          if (!v11)
          {
            v12 = *(void (***)(void))(v3 + 64);
            if (v12)
            {
              *(void *)(v3 + 64) = 0LL;
              v12[2](v12);
              _Block_release(v12);
            }

            if ((*(_BYTE *)(v3 + 72) & 1) != 0)
            {
              v13 = *(const void **)(v3 + 64);
              if (v13) {
                _Block_release(v13);
              }
            }

            goto LABEL_24;
          }
        }
      }

      return;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v42 = "__nw_protocol_disconnected";
    v2 = _os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (__nwlog_fault((const char *)v2, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v27 = (os_log_s *)__nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_disconnected";
        v29 = "%{public}s called with null other_protocol";
        goto LABEL_90;
      }

      if (!v39)
      {
        v27 = (os_log_s *)__nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_disconnected";
        v29 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_90;
      }

      v35 = (char *)__nw_create_backtrace_string();
      v27 = (os_log_s *)__nwlog_obj();
      v28 = type;
      v36 = os_log_type_enabled(v27, type);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "__nw_protocol_disconnected";
          v43 = 2082;
          v44 = v35;
          _os_log_impl( &dword_181A5C000,  v27,  v28,  "%{public}s called with null other_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v35);
        if (v2) {
          goto LABEL_32;
        }
        goto LABEL_14;
      }

      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_disconnected";
        v29 = "%{public}s called with null other_protocol, no backtrace";
LABEL_90:
        _os_log_impl(&dword_181A5C000, v27, v28, v29, buf, 0xCu);
      }
    }

      if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        v10 = *(void *)(v3 + 88);
        if (v10)
        {
          v11 = v10 - 1;
          *(void *)(v3 + 88) = v11;
          if (!v11)
          {
            v12 = *(void (***)(void))(v3 + 64);
            if (v12)
            {
              *(void *)(v3 + 64) = 0LL;
              v12[2](v12);
              _Block_release(v12);
            }

            if ((*(_BYTE *)(v3 + 72) & 1) != 0)
            {
              v13 = *(const void **)(v3 + 64);
              if (v13) {
                _Block_release(v13);
              }
            }

            goto LABEL_24;
          }
        }
      }

      return;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v42 = "__nw_protocol_input_available";
    v2 = _os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (__nwlog_fault((const char *)v2, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v27 = (os_log_s *)__nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_input_available";
        v29 = "%{public}s called with null other_protocol";
        goto LABEL_90;
      }

      if (!v39)
      {
        v27 = (os_log_s *)__nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_input_available";
        v29 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_90;
      }

      v35 = (char *)__nw_create_backtrace_string();
      v27 = (os_log_s *)__nwlog_obj();
      v28 = type;
      v36 = os_log_type_enabled(v27, type);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "__nw_protocol_input_available";
          v43 = 2082;
          v44 = v35;
          _os_log_impl( &dword_181A5C000,  v27,  v28,  "%{public}s called with null other_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v35);
        if (v2) {
          goto LABEL_32;
        }
        goto LABEL_14;
      }

      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_input_available";
        v29 = "%{public}s called with null other_protocol, no backtrace";
LABEL_90:
        _os_log_impl(&dword_181A5C000, v27, v28, v29, buf, 0xCu);
      }
    }

      if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        v10 = *(void *)(v3 + 88);
        if (v10)
        {
          v11 = v10 - 1;
          *(void *)(v3 + 88) = v11;
          if (!v11)
          {
            v12 = *(void (***)(void))(v3 + 64);
            if (v12)
            {
              *(void *)(v3 + 64) = 0LL;
              v12[2](v12);
              _Block_release(v12);
            }

            if ((*(_BYTE *)(v3 + 72) & 1) != 0)
            {
              v13 = *(const void **)(v3 + 64);
              if (v13) {
                _Block_release(v13);
              }
            }

            goto LABEL_24;
          }
        }
      }

      return;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v42 = "__nw_protocol_output_available";
    v2 = _os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (__nwlog_fault((const char *)v2, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v27 = (os_log_s *)__nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_output_available";
        v29 = "%{public}s called with null other_protocol";
        goto LABEL_90;
      }

      if (!v39)
      {
        v27 = (os_log_s *)__nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_output_available";
        v29 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_90;
      }

      v35 = (char *)__nw_create_backtrace_string();
      v27 = (os_log_s *)__nwlog_obj();
      v28 = type;
      v36 = os_log_type_enabled(v27, type);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "__nw_protocol_output_available";
          v43 = 2082;
          v44 = v35;
          _os_log_impl( &dword_181A5C000,  v27,  v28,  "%{public}s called with null other_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v35);
        if (v2) {
          goto LABEL_32;
        }
        goto LABEL_14;
      }

      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_output_available";
        v29 = "%{public}s called with null other_protocol, no backtrace";
LABEL_90:
        _os_log_impl(&dword_181A5C000, v27, v28, v29, buf, 0xCu);
      }
    }

      if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        v10 = *(void *)(v3 + 88);
        if (v10)
        {
          v11 = v10 - 1;
          *(void *)(v3 + 88) = v11;
          if (!v11)
          {
            v12 = *(void (***)(void))(v3 + 64);
            if (v12)
            {
              *(void *)(v3 + 64) = 0LL;
              v12[2](v12);
              _Block_release(v12);
            }

            if ((*(_BYTE *)(v3 + 72) & 1) != 0)
            {
              v13 = *(const void **)(v3 + 64);
              if (v13) {
                _Block_release(v13);
              }
            }

            goto LABEL_24;
          }
        }
      }

      return;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v42 = "__nw_protocol_input_finished";
    v2 = _os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (__nwlog_fault((const char *)v2, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v27 = (os_log_s *)__nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_input_finished";
        v29 = "%{public}s called with null other_protocol";
        goto LABEL_90;
      }

      if (!v39)
      {
        v27 = (os_log_s *)__nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_input_finished";
        v29 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_90;
      }

      v35 = (char *)__nw_create_backtrace_string();
      v27 = (os_log_s *)__nwlog_obj();
      v28 = type;
      v36 = os_log_type_enabled(v27, type);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "__nw_protocol_input_finished";
          v43 = 2082;
          v44 = v35;
          _os_log_impl( &dword_181A5C000,  v27,  v28,  "%{public}s called with null other_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v35);
        if (v2) {
          goto LABEL_32;
        }
        goto LABEL_14;
      }

      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_input_finished";
        v29 = "%{public}s called with null other_protocol, no backtrace";
LABEL_90:
        _os_log_impl(&dword_181A5C000, v27, v28, v29, buf, 0xCu);
      }
    }

      if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        v10 = *(void *)(v3 + 88);
        if (v10)
        {
          v11 = v10 - 1;
          *(void *)(v3 + 88) = v11;
          if (!v11)
          {
            v12 = *(void (***)(void))(v3 + 64);
            if (v12)
            {
              *(void *)(v3 + 64) = 0LL;
              v12[2](v12);
              _Block_release(v12);
            }

            if ((*(_BYTE *)(v3 + 72) & 1) != 0)
            {
              v13 = *(const void **)(v3 + 64);
              if (v13) {
                _Block_release(v13);
              }
            }

            goto LABEL_24;
          }
        }
      }

      return;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v42 = "__nw_protocol_output_finished";
    v2 = _os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (__nwlog_fault((const char *)v2, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v27 = (os_log_s *)__nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_output_finished";
        v29 = "%{public}s called with null other_protocol";
        goto LABEL_90;
      }

      if (!v39)
      {
        v27 = (os_log_s *)__nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_output_finished";
        v29 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_90;
      }

      v35 = (char *)__nw_create_backtrace_string();
      v27 = (os_log_s *)__nwlog_obj();
      v28 = type;
      v36 = os_log_type_enabled(v27, type);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "__nw_protocol_output_finished";
          v43 = 2082;
          v44 = v35;
          _os_log_impl( &dword_181A5C000,  v27,  v28,  "%{public}s called with null other_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v35);
        if (v2) {
          goto LABEL_32;
        }
        goto LABEL_14;
      }

      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_output_finished";
        v29 = "%{public}s called with null other_protocol, no backtrace";
LABEL_90:
        _os_log_impl(&dword_181A5C000, v27, v28, v29, buf, 0xCu);
      }
    }

      if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        v10 = *(void *)(v3 + 88);
        if (v10)
        {
          v11 = v10 - 1;
          *(void *)(v3 + 88) = v11;
          if (!v11)
          {
            v12 = *(void (***)(void))(v3 + 64);
            if (v12)
            {
              *(void *)(v3 + 64) = 0LL;
              v12[2](v12);
              _Block_release(v12);
            }

            if ((*(_BYTE *)(v3 + 72) & 1) != 0)
            {
              v13 = *(const void **)(v3 + 64);
              if (v13) {
                _Block_release(v13);
              }
            }

            goto LABEL_24;
          }
        }
      }

      return;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v42 = "__nw_protocol_input_flush";
    v2 = _os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (__nwlog_fault((const char *)v2, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v27 = (os_log_s *)__nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_input_flush";
        v29 = "%{public}s called with null other_protocol";
        goto LABEL_90;
      }

      if (!v39)
      {
        v27 = (os_log_s *)__nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_input_flush";
        v29 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_90;
      }

      v35 = (char *)__nw_create_backtrace_string();
      v27 = (os_log_s *)__nwlog_obj();
      v28 = type;
      v36 = os_log_type_enabled(v27, type);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "__nw_protocol_input_flush";
          v43 = 2082;
          v44 = v35;
          _os_log_impl( &dword_181A5C000,  v27,  v28,  "%{public}s called with null other_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v35);
        if (v2) {
          goto LABEL_32;
        }
        goto LABEL_14;
      }

      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_input_flush";
        v29 = "%{public}s called with null other_protocol, no backtrace";
LABEL_90:
        _os_log_impl(&dword_181A5C000, v27, v28, v29, buf, 0xCu);
      }
    }

      if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        v10 = *(void *)(v3 + 88);
        if (v10)
        {
          v11 = v10 - 1;
          *(void *)(v3 + 88) = v11;
          if (!v11)
          {
            v12 = *(void (***)(void))(v3 + 64);
            if (v12)
            {
              *(void *)(v3 + 64) = 0LL;
              v12[2](v12);
              _Block_release(v12);
            }

            if ((*(_BYTE *)(v3 + 72) & 1) != 0)
            {
              v13 = *(const void **)(v3 + 64);
              if (v13) {
                _Block_release(v13);
              }
            }

            goto LABEL_24;
          }
        }
      }

      return;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v42 = "__nw_protocol_error";
    v2 = _os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (__nwlog_fault((const char *)v2, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v27 = (os_log_s *)__nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_error";
        v29 = "%{public}s called with null other_protocol";
        goto LABEL_90;
      }

      if (!v39)
      {
        v27 = (os_log_s *)__nwlog_obj();
        v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_91;
        }
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_error";
        v29 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_90;
      }

      v35 = (char *)__nw_create_backtrace_string();
      v27 = (os_log_s *)__nwlog_obj();
      v28 = type;
      v36 = os_log_type_enabled(v27, type);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "__nw_protocol_error";
          v43 = 2082;
          v44 = v35;
          _os_log_impl( &dword_181A5C000,  v27,  v28,  "%{public}s called with null other_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v35);
        if (v2) {
          goto LABEL_32;
        }
        goto LABEL_14;
      }

      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "__nw_protocol_error";
        v29 = "%{public}s called with null other_protocol, no backtrace";
LABEL_90:
        _os_log_impl(&dword_181A5C000, v27, v28, v29, buf, 0xCu);
      }
    }

            if (v5 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
            {
              v13 = *(void *)(a1 + 88);
              if (v13)
              {
                v14 = v13 - 1;
                *(void *)(a1 + 88) = v14;
                if (!v14)
                {
                  v15 = *(void (***)(void))(a1 + 64);
                  if (v15)
                  {
                    *(void *)(a1 + 64) = 0LL;
                    v15[2](v15);
                    _Block_release(v15);
                  }

                  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                  {
                    uint64_t v16 = *(const void **)(a1 + 64);
                    if (v16) {
                      _Block_release(v16);
                    }
                  }

                  free((void *)a1);
                }
              }
            }

            return v11;
          }
        }

        __nwlog_obj();
        BOOL v21 = *(const char **)(a1 + 16);
        *(_DWORD *)buf = 136446722;
        v54 = "__nw_protocol_register_notification";
        if (!v21) {
          BOOL v21 = "invalid";
        }
        v55 = 2082;
        v56 = (void *)v21;
        v57 = 2048;
        v58 = a1;
        BOOL v22 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v51 = 0;
        if (__nwlog_fault(v22, &type, &v51))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            BOOL v23 = (os_log_s *)__nwlog_obj();
            BOOL v24 = type;
            if (!os_log_type_enabled(v23, type)) {
              goto LABEL_107;
            }
            BOOL v25 = *(const char **)(a1 + 16);
            if (!v25) {
              BOOL v25 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            v54 = "__nw_protocol_register_notification";
            v55 = 2082;
            v56 = (void *)v25;
            v57 = 2048;
            v58 = a1;
            BOOL v26 = "%{public}s protocol %{public}s (%p) has invalid register_notification callback";
LABEL_84:
            v48 = v23;
            v49 = v24;
            v50 = 32;
LABEL_106:
            _os_log_impl(&dword_181A5C000, v48, v49, v26, buf, v50);
            goto LABEL_107;
          }

          if (!v51)
          {
            BOOL v23 = (os_log_s *)__nwlog_obj();
            BOOL v24 = type;
            if (!os_log_type_enabled(v23, type)) {
              goto LABEL_107;
            }
            v46 = *(const char **)(a1 + 16);
            if (!v46) {
              v46 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            v54 = "__nw_protocol_register_notification";
            v55 = 2082;
            v56 = (void *)v46;
            v57 = 2048;
            v58 = a1;
            BOOL v26 = "%{public}s protocol %{public}s (%p) has invalid register_notification callback, backtrace limit exceeded";
            goto LABEL_84;
          }

          backtrace_string = (char *)__nw_create_backtrace_string();
          BOOL v23 = (os_log_s *)__nwlog_obj();
          BOOL v24 = type;
          v38 = os_log_type_enabled(v23, type);
          if (!backtrace_string)
          {
            if (!v38) {
              goto LABEL_107;
            }
            v47 = *(const char **)(a1 + 16);
            if (!v47) {
              v47 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            v54 = "__nw_protocol_register_notification";
            v55 = 2082;
            v56 = (void *)v47;
            v57 = 2048;
            v58 = a1;
            BOOL v26 = "%{public}s protocol %{public}s (%p) has invalid register_notification callback, no backtrace";
            goto LABEL_84;
          }

          if (v38)
          {
            v39 = *(const char **)(a1 + 16);
            if (!v39) {
              v39 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            v54 = "__nw_protocol_register_notification";
            v55 = 2082;
            v56 = (void *)v39;
            v57 = 2048;
            v58 = a1;
            v59 = 2082;
            v60 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v23,  v24,  "%{public}s protocol %{public}s (%p) has invalid register_notification callback, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(backtrace_string);
        }

            if (v5 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
            {
              v13 = *(void *)(a1 + 88);
              if (v13)
              {
                v14 = v13 - 1;
                *(void *)(a1 + 88) = v14;
                if (!v14)
                {
                  v15 = *(void (***)(void))(a1 + 64);
                  if (v15)
                  {
                    *(void *)(a1 + 64) = 0LL;
                    v15[2](v15);
                    _Block_release(v15);
                  }

                  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                  {
                    uint64_t v16 = *(const void **)(a1 + 64);
                    if (v16) {
                      _Block_release(v16);
                    }
                  }

                  free((void *)a1);
                }
              }
            }

            return v11;
          }
        }

        __nwlog_obj();
        BOOL v21 = *(const char **)(a1 + 16);
        *(_DWORD *)buf = 136446722;
        v54 = "__nw_protocol_unregister_notification";
        if (!v21) {
          BOOL v21 = "invalid";
        }
        v55 = 2082;
        v56 = (void *)v21;
        v57 = 2048;
        v58 = a1;
        BOOL v22 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v51 = 0;
        if (__nwlog_fault(v22, &type, &v51))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            BOOL v23 = (os_log_s *)__nwlog_obj();
            BOOL v24 = type;
            if (!os_log_type_enabled(v23, type)) {
              goto LABEL_107;
            }
            BOOL v25 = *(const char **)(a1 + 16);
            if (!v25) {
              BOOL v25 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            v54 = "__nw_protocol_unregister_notification";
            v55 = 2082;
            v56 = (void *)v25;
            v57 = 2048;
            v58 = a1;
            BOOL v26 = "%{public}s protocol %{public}s (%p) has invalid unregister_notification callback";
LABEL_84:
            v48 = v23;
            v49 = v24;
            v50 = 32;
LABEL_106:
            _os_log_impl(&dword_181A5C000, v48, v49, v26, buf, v50);
            goto LABEL_107;
          }

          if (!v51)
          {
            BOOL v23 = (os_log_s *)__nwlog_obj();
            BOOL v24 = type;
            if (!os_log_type_enabled(v23, type)) {
              goto LABEL_107;
            }
            v46 = *(const char **)(a1 + 16);
            if (!v46) {
              v46 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            v54 = "__nw_protocol_unregister_notification";
            v55 = 2082;
            v56 = (void *)v46;
            v57 = 2048;
            v58 = a1;
            BOOL v26 = "%{public}s protocol %{public}s (%p) has invalid unregister_notification callback, backtrace limit exceeded";
            goto LABEL_84;
          }

          backtrace_string = (char *)__nw_create_backtrace_string();
          BOOL v23 = (os_log_s *)__nwlog_obj();
          BOOL v24 = type;
          v38 = os_log_type_enabled(v23, type);
          if (!backtrace_string)
          {
            if (!v38) {
              goto LABEL_107;
            }
            v47 = *(const char **)(a1 + 16);
            if (!v47) {
              v47 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            v54 = "__nw_protocol_unregister_notification";
            v55 = 2082;
            v56 = (void *)v47;
            v57 = 2048;
            v58 = a1;
            BOOL v26 = "%{public}s protocol %{public}s (%p) has invalid unregister_notification callback, no backtrace";
            goto LABEL_84;
          }

          if (v38)
          {
            v39 = *(const char **)(a1 + 16);
            if (!v39) {
              v39 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            v54 = "__nw_protocol_unregister_notification";
            v55 = 2082;
            v56 = (void *)v39;
            v57 = 2048;
            v58 = a1;
            v59 = 2082;
            v60 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v23,  v24,  "%{public}s protocol %{public}s (%p) has invalid unregister_notification callback, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(backtrace_string);
        }

            if (v5 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
            {
              v13 = *(void *)(a1 + 88);
              if (v13)
              {
                v14 = v13 - 1;
                *(void *)(a1 + 88) = v14;
                if (!v14)
                {
                  v15 = *(void (***)(void))(a1 + 64);
                  if (v15)
                  {
                    *(void *)(a1 + 64) = 0LL;
                    v15[2](v15);
                    _Block_release(v15);
                  }

                  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                  {
                    uint64_t v16 = *(const void **)(a1 + 64);
                    if (v16) {
                      _Block_release(v16);
                    }
                  }

                  free((void *)a1);
                }
              }
            }

            return v11;
          }
        }

        __nwlog_obj();
        BOOL v21 = *(const char **)(a1 + 16);
        *(_DWORD *)buf = 136446722;
        v54 = "__nw_protocol_updated_path";
        if (!v21) {
          BOOL v21 = "invalid";
        }
        v55 = 2082;
        v56 = (void *)v21;
        v57 = 2048;
        v58 = a1;
        BOOL v22 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v51 = 0;
        if (__nwlog_fault(v22, &type, &v51))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            BOOL v23 = (os_log_s *)__nwlog_obj();
            BOOL v24 = type;
            if (!os_log_type_enabled(v23, type)) {
              goto LABEL_107;
            }
            BOOL v25 = *(const char **)(a1 + 16);
            if (!v25) {
              BOOL v25 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            v54 = "__nw_protocol_updated_path";
            v55 = 2082;
            v56 = (void *)v25;
            v57 = 2048;
            v58 = a1;
            BOOL v26 = "%{public}s protocol %{public}s (%p) has invalid updated_path callback";
LABEL_84:
            v48 = v23;
            v49 = v24;
            v50 = 32;
LABEL_106:
            _os_log_impl(&dword_181A5C000, v48, v49, v26, buf, v50);
            goto LABEL_107;
          }

          if (!v51)
          {
            BOOL v23 = (os_log_s *)__nwlog_obj();
            BOOL v24 = type;
            if (!os_log_type_enabled(v23, type)) {
              goto LABEL_107;
            }
            v46 = *(const char **)(a1 + 16);
            if (!v46) {
              v46 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            v54 = "__nw_protocol_updated_path";
            v55 = 2082;
            v56 = (void *)v46;
            v57 = 2048;
            v58 = a1;
            BOOL v26 = "%{public}s protocol %{public}s (%p) has invalid updated_path callback, backtrace limit exceeded";
            goto LABEL_84;
          }

          backtrace_string = (char *)__nw_create_backtrace_string();
          BOOL v23 = (os_log_s *)__nwlog_obj();
          BOOL v24 = type;
          v38 = os_log_type_enabled(v23, type);
          if (!backtrace_string)
          {
            if (!v38) {
              goto LABEL_107;
            }
            v47 = *(const char **)(a1 + 16);
            if (!v47) {
              v47 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            v54 = "__nw_protocol_updated_path";
            v55 = 2082;
            v56 = (void *)v47;
            v57 = 2048;
            v58 = a1;
            BOOL v26 = "%{public}s protocol %{public}s (%p) has invalid updated_path callback, no backtrace";
            goto LABEL_84;
          }

          if (v38)
          {
            v39 = *(const char **)(a1 + 16);
            if (!v39) {
              v39 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            v54 = "__nw_protocol_updated_path";
            v55 = 2082;
            v56 = (void *)v39;
            v57 = 2048;
            v58 = a1;
            v59 = 2082;
            v60 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v23,  v24,  "%{public}s protocol %{public}s (%p) has invalid updated_path callback, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(backtrace_string);
        }

        uint64_t v18 = 0;
        goto LABEL_15;
      }
    }

    else
    {

      if (v13 == v15) {
        goto LABEL_7;
      }
    }
  }

  uint64_t v18 = 0;
LABEL_16:

  return v18;
}

  outbound_data_requests = self->outbound_data_requests;
  if (outbound_data_requests)
  {
    _nw_hash_table_release((os_unfair_lock_s *)outbound_data_requests, (uint64_t)a2);
    self->outbound_data_requests = 0LL;
  }

  flow_registration = (char *)self->flow_registration;
  if (flow_registration)
  {
    v76[0] = MEMORY[0x1895F87A8];
    v76[1] = 3221225472LL;
    v76[2] = __42__NWConcrete_nw_protocol_instance_destroy__block_invoke_54;
    v76[3] = &unk_189BC86F0;
    v76[4] = self;
    nw_hash_table_apply(flow_registration, (uint64_t)v76);
    v14 = (os_unfair_lock_s *)self->flow_registration;
    if (v14)
    {
      _nw_hash_table_release(v14, v13);
      self->flow_registration = 0LL;
    }
  }

  v15 = *(void **)&self[-1].log_str[25];
  if (v15)
  {
    if (SBYTE5(self->flow_in_connected) < 0) {
      goto LABEL_35;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v16 = (id)gLogObj;
    uint64_t v17 = *(void *)&self[-1].log_str[25];
    uint64_t v18 = "invalid";
    if (v17 && *(void *)(v17 + 16)) {
      uint64_t v18 = *(const char **)(v17 + 16);
    }
    *(_DWORD *)buf = 136447490;
    v84 = "-[NWConcrete_nw_protocol_instance destroy]";
    v85 = 2082;
    *(void *)v86 = (char *)&self->flow_in_connected + 7;
    *(_WORD *)&v86[8] = 2080;
    *(void *)&v86[10] = " ";
    *(_WORD *)&v86[18] = 2080;
    *(void *)&v86[20] = v18;
    v87 = 2048;
    v88 = v17;
    v89 = 2048;
    v90 = self;
    uint64_t v19 = (void *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(p_paths_log_id_num) = 0;
    if (__nwlog_fault((const char *)v19, type, &p_paths_log_id_num))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v20 = (os_log_s *)(id)gLogObj;
        BOOL v21 = type[0];
        if (os_log_type_enabled(v20, type[0]))
        {
          BOOL v22 = *(void *)&self[-1].log_str[25];
          BOOL v23 = "invalid";
          if (v22 && *(void *)(v22 + 16)) {
            BOOL v23 = *(const char **)(v22 + 16);
          }
          *(_DWORD *)buf = 136447490;
          v84 = "-[NWConcrete_nw_protocol_instance destroy]";
          v85 = 2082;
          *(void *)v86 = (char *)&self->flow_in_connected + 7;
          *(_WORD *)&v86[8] = 2080;
          *(void *)&v86[10] = " ";
          *(_WORD *)&v86[18] = 2080;
          *(void *)&v86[20] = v23;
          v87 = 2048;
          v88 = v22;
          v89 = 2048;
          v90 = self;
          _os_log_impl( &dword_181A5C000,  v20,  v21,  "%{public}s %{public}s%sOutput handler %s:%p is not null when protocol instance %p is deallocated",  buf,  0x3Eu);
        }
      }

      else if ((_BYTE)p_paths_log_id_num)
      {
        BOOL v26 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v20 = (os_log_s *)(id)gLogObj;
        v27 = type[0];
        v28 = os_log_type_enabled(v20, type[0]);
        if (v26)
        {
          if (v28)
          {
            v29 = *(void *)&self[-1].log_str[25];
            v30 = "invalid";
            if (v29 && *(void *)(v29 + 16)) {
              v30 = *(const char **)(v29 + 16);
            }
            *(_DWORD *)buf = 136447746;
            v84 = "-[NWConcrete_nw_protocol_instance destroy]";
            v85 = 2082;
            *(void *)v86 = (char *)&self->flow_in_connected + 7;
            *(_WORD *)&v86[8] = 2080;
            *(void *)&v86[10] = " ";
            *(_WORD *)&v86[18] = 2080;
            *(void *)&v86[20] = v30;
            v87 = 2048;
            v88 = v29;
            v89 = 2048;
            v90 = self;
            v91 = 2082;
            v92 = v26;
            _os_log_impl( &dword_181A5C000,  v20,  v27,  "%{public}s %{public}s%sOutput handler %s:%p is not null when protocol instance %p is deallocated, dumping backtrace:%{public}s",  buf,  0x48u);
          }

          free(v26);
          if (!v19)
          {
LABEL_34:
            v15 = *(void **)&self[-1].log_str[25];
            if (v15)
            {
LABEL_35:
              BOOL v24 = (void *)v15[5];
              if (v24 == &nw_protocol_ref_counted_handle)
              {
                v31 = v15[11];
                if (v31) {
                  v15[11] = v31 + 1;
                }
                BOOL v25 = -1;
              }

              else
              {
                BOOL v25 = 0;
              }

              *(void *)type = v15;
              v82 = v25;
              v32 = *(void **)&self[-1].log_str[33];
              if (v32 == &nw_protocol_ref_counted_handle)
              {
                v34 = *(void *)&self[-1].log_str[81];
                if (v34) {
                  *(void *)&self[-1].log_str[81] = v34 + 1;
                }
                v33 = -1;
              }

              else
              {
                v33 = 0;
              }

              p_paths_log_id_num = &self[-1].paths_log_id_num;
              v80 = v33;
              v35 = v15[3];
              if (v35)
              {
                v36 = *(uint64_t (**)(void *, unsigned __int16 *, uint64_t))(v35 + 8);
                if (v36)
                {
                  v37 = v36(v15, &self[-1].paths_log_id_num, 1LL);
                  if (v32 != &nw_protocol_ref_counted_handle) {
                    goto LABEL_57;
                  }
                  goto LABEL_124;
                }
              }

              __nwlog_obj();
              v47 = (void *)objc_claimAutoreleasedReturnValue();
              v48 = (const char *)v15[2];
              if (!v48) {
                v48 = "invalid";
              }
              *(_DWORD *)buf = 136446722;
              v84 = "__nw_protocol_remove_input_handler";
              v85 = 2082;
              *(void *)v86 = v48;
              *(_WORD *)&v86[8] = 2048;
              *(void *)&v86[10] = v15;
              v49 = (const char *)_os_log_send_and_compose_impl();

              v78 = OS_LOG_TYPE_ERROR;
              v77 = 0;
              v50 = (char *)v49;
              if (!__nwlog_fault(v49, &v78, &v77))
              {
LABEL_121:
                if (v50) {
                  free(v50);
                }
                v37 = 0;
                if (v32 != &nw_protocol_ref_counted_handle)
                {
LABEL_57:
                  if (v24 != &nw_protocol_ref_counted_handle) {
                    goto LABEL_58;
                  }
                  goto LABEL_125;
                }

  BOOL v25 = 0LL;
LABEL_66:

  return v25;
}

    v2 = 0LL;
LABEL_11:

    return v2;
  }

      return;
    }

    __nwlog_obj();
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_flow_replay_output_available";
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (__nwlog_fault(v18, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_flow_replay_output_available";
          _os_log_impl(&dword_181A5C000, v19, v20, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v29)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v25 = type;
        BOOL v26 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136446466;
            v32 = "nw_flow_replay_output_available";
            v33 = 2082;
            v34 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v19,  v25,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_50;
        }

        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_flow_replay_output_available";
          _os_log_impl(&dword_181A5C000, v19, v25, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v28 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_flow_replay_output_available";
          _os_log_impl( &dword_181A5C000,  v19,  v28,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    goto LABEL_15;
  }

  if (!v24)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    size_t v9 = (os_log_s *)(id)gLogObj;
    uint64_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "-[NWConcrete_nw_listener dealloc]";
      _os_log_impl( &dword_181A5C000,  v9,  v20,  "%{public}s listener advertisers were not cleaned up prior to dealloc, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_14;
  }

  uint64_t v16 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  size_t v9 = (os_log_s *)(id)gLogObj;
  uint64_t v17 = type;
  uint64_t v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "-[NWConcrete_nw_listener dealloc]";
      _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s listener advertisers were not cleaned up prior to dealloc, no backtrace",  buf,  0xCu);
    }

    goto LABEL_14;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "-[NWConcrete_nw_listener dealloc]";
    v28 = 2082;
    v29 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s listener advertisers were not cleaned up prior to dealloc, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
LABEL_16:
  }
    free(v8);
LABEL_17:
  v11 = (void *)*((void *)self + 29);
  if (v11)
  {
    free(v11);
    *((void *)self + 29) = 0LL;
  }

  v12 = (void *)*((void *)self + 7);
  if (v12)
  {
    free(v12);
    *((void *)self + 7) = 0LL;
  }

  v23.receiver = self;
  v23.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_listener;
  -[NWConcrete_nw_listener dealloc](&v23, sel_dealloc, v21, v22);
}

    free(v6);
    goto LABEL_15;
  }

  v28[0] = *(void *)(a1 + 40);
  v10 = [MEMORY[0x189603F18] arrayWithObjects:v28 count:1];
  v11 = *(void *)(a1 + 32);
  v12 = *(void **)(v11 + 272);
  *(void *)(v11 + 272) = v10;
}
}

  *(_BYTE *)(v1 + 302) |= 4u;
}

  objc_storeStrong((id *)(v2 + 64), *(id *)(a1 + 40));
}

              uint64_t v17 = v8;
              nw_context_assert_queue(*((void **)v3 + 3));
              uint64_t v18 = nw_path_copy_inactive_agent_uuids(*((void **)v6 + 22), 0);
              uint64_t v19 = v18;
              if (!v18 || !xpc_array_get_count(v18)) {
                goto LABEL_119;
              }
              if (*v9 || (v27 = v17[23]) != 0LL && xpc_equal(v27, v19))
              {
                uint64_t v20 = v17[2];
                if (!v20 || nw_path_parameters_get_logging_disabled(v20[13])) {
                  goto LABEL_119;
                }
                if (__nwlog_listener_log::onceToken != -1) {
                  dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
                }
                BOOL v21 = (os_log_s *)(id)glistenerLogObj;
                if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
                {
                  id_string = nw_listener_get_id_string(v17);
                  *(_DWORD *)buf = 136446466;
                  *(void *)&buf[4] = "nw_listener_trigger_agents_on_queue";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = id_string;
                  _os_log_impl( &dword_181A5C000,  v21,  OS_LOG_TYPE_DEBUG,  "%{public}s [%{public}s] Already triggered agents",  buf,  0x16u);
                }

                goto LABEL_118;
              }

              nw_listener_clear_trigger_agents_on_queue((NWConcrete_nw_listener *)v17);
              BOOL v21 = (os_log_s *)xpc_array_create(0LL, 0LL);
              if (v21)
              {
                v28 = nw_path_evaluator_trigger_agents(v17[21], 0, 0, v21);
                v29 = v28;
                if (v28 == 1)
                {
                  v57 = v17[2];
                  if (!v57 || nw_path_parameters_get_logging_disabled(v57[13])) {
                    goto LABEL_118;
                  }
                  if (__nwlog_listener_log::onceToken != -1) {
                    dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
                  }
                  v53 = (os_log_s *)(id)glistenerLogObj;
                  if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
                  {
                    v58 = nw_listener_get_id_string(v17);
                    *(_DWORD *)buf = 136446978;
                    *(void *)&buf[4] = "nw_listener_trigger_agents_on_queue";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v58;
                    *(_WORD *)&buf[22] = 1024;
                    LODWORD(v76) = 1;
                    WORD2(v76) = 2082;
                    *(void *)((char *)&v76 + 6) = "cannot satisfy";
                    _os_log_impl( &dword_181A5C000,  v53,  OS_LOG_TYPE_DEBUG,  "%{public}s [%{public}s] Trigger failed: [%d] %{public}s",  buf,  0x26u);
                  }
                }

                else if (v28 || !xpc_array_get_count(v21))
                {
                  v52 = v17[2];
                  if (!v52 || nw_path_parameters_get_logging_disabled(v52[13])) {
                    goto LABEL_118;
                  }
                  if (__nwlog_listener_log::onceToken != -1) {
                    dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
                  }
                  v53 = (os_log_s *)(id)glistenerLogObj;
                  if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
                  {
                    v54 = nw_listener_get_id_string(v17);
                    v55 = off_189BC56A8[v29];
                    *(_DWORD *)buf = 136446978;
                    *(void *)&buf[4] = "nw_listener_trigger_agents_on_queue";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v54;
                    *(_WORD *)&buf[22] = 1024;
                    LODWORD(v76) = v29;
                    WORD2(v76) = 2082;
                    *(void *)((char *)&v76 + 6) = v55;
                    _os_log_impl( &dword_181A5C000,  v53,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}s] Trigger failed: [%d] %{public}s",  buf,  0x26u);
                  }
                }

                else
                {
                  objc_storeStrong(v17 + 23, v19);
                  v30 = *((void *)v6 + 22);
                  else {
                    v32 = 0LL;
                  }
                  v62 = v17[24];
                  v17[24] = v32;

                  objc_storeStrong(v9, v21);
                  v63 = v17[2];
                  if (!v63 || nw_path_parameters_get_logging_disabled(v63[13])) {
                    goto LABEL_118;
                  }
                  if (__nwlog_listener_log::onceToken != -1) {
                    dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
                  }
                  v53 = (os_log_s *)(id)glistenerLogObj;
                  if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
                  {
                    v64 = nw_listener_get_id_string(v17);
                    v65 = xpc_array_get_count(v19);
                    *(_DWORD *)buf = 136446722;
                    *(void *)&buf[4] = "nw_listener_trigger_agents_on_queue";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v64;
                    *(_WORD *)&buf[22] = 2048;
                    *(void *)&v76 = v65;
                    _os_log_impl( &dword_181A5C000,  v53,  OS_LOG_TYPE_DEBUG,  "%{public}s [%{public}s] Triggered %zu agents",  buf,  0x20u);
                  }
                }

LABEL_118:
LABEL_119:

LABEL_120:
                goto LABEL_121;
              }

              __nwlog_obj();
              v48 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 136446210;
              *(void *)&buf[4] = "nw_listener_trigger_agents_on_queue";
              v49 = (char *)_os_log_send_and_compose_impl();

              v80[0] = 16;
              type = OS_LOG_TYPE_DEFAULT;
              if (__nwlog_fault(v49, v80, &type))
              {
                if (v80[0] == 17)
                {
                  __nwlog_obj();
                  v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  v51 = v80[0];
                  if (os_log_type_enabled(v50, (os_log_type_t)v80[0]))
                  {
                    *(_DWORD *)buf = 136446210;
                    *(void *)&buf[4] = "nw_listener_trigger_agents_on_queue";
                    _os_log_impl(&dword_181A5C000, v50, v51, "%{public}s xpc_array_create failed", buf, 0xCu);
                  }
                }

                else if (type)
                {
                  backtrace_string = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  v60 = v80[0];
                  v61 = os_log_type_enabled(v50, (os_log_type_t)v80[0]);
                  if (backtrace_string)
                  {
                    if (v61)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(void *)&buf[4] = "nw_listener_trigger_agents_on_queue";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = backtrace_string;
                      _os_log_impl( &dword_181A5C000,  v50,  v60,  "%{public}s xpc_array_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
                    }

                    free(backtrace_string);
                    goto LABEL_115;
                  }

                  if (v61)
                  {
                    *(_DWORD *)buf = 136446210;
                    *(void *)&buf[4] = "nw_listener_trigger_agents_on_queue";
                    _os_log_impl( &dword_181A5C000,  v50,  v60,  "%{public}s xpc_array_create failed, no backtrace",  buf,  0xCu);
                  }
                }

                else
                {
                  __nwlog_obj();
                  v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  v66 = v80[0];
                  if (os_log_type_enabled(v50, (os_log_type_t)v80[0]))
                  {
                    *(_DWORD *)buf = 136446210;
                    *(void *)&buf[4] = "nw_listener_trigger_agents_on_queue";
                    _os_log_impl( &dword_181A5C000,  v50,  v66,  "%{public}s xpc_array_create failed, backtrace limit exceeded",  buf,  0xCu);
                  }
                }
              }

    v222[0] = 0;
    channel_teardown_delay = v3->value.channel_teardown_delay;
    if (channel_teardown_delay) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v7 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v215 = "nw_parameters_copy_description_internal";
  BOOL v8 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  __str[0] = 0;
  if (__nwlog_fault(v8, type, __str))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v9 = (os_log_s *)(id)gLogObj;
      v10 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v215 = "nw_parameters_copy_description_internal";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (__str[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v9 = (os_log_s *)(id)gLogObj;
      BOOL v22 = type[0];
      BOOL v23 = os_log_type_enabled(v9, type[0]);
      if (backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          v215 = "nw_parameters_copy_description_internal";
          v216 = 2082;
          v217 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v22,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v8) {
          goto LABEL_138;
        }
        goto LABEL_137;
      }

      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v215 = "nw_parameters_copy_description_internal";
        _os_log_impl(&dword_181A5C000, v9, v22, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v9 = (os_log_s *)(id)gLogObj;
      v116 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v215 = "nw_parameters_copy_description_internal";
        _os_log_impl( &dword_181A5C000,  v9,  v116,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  if (v8) {
LABEL_137:
  }
    free(v8);
LABEL_138:
  v117 = 0LL;
LABEL_217:

  return v117;
}
}

    v14 = *(void *)(v5[13] + 176LL);
    v15 = *(void **)(v14 + 32);
    *(void *)(v14 + 32) = 0LL;

    uint64_t v16 = *(void *)(v5[13] + 176LL);
    uint64_t v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = 0LL;

    goto LABEL_15;
  }

  if (!(v6 | v7))
  {
LABEL_15:

    return;
  }

  v13 = calloc(1uLL, 0x90uLL);
  if (v13)
  {
LABEL_13:
    *(void *)(v5[13] + 176LL) = v13;
    if (v6) {
      goto LABEL_4;
    }
    goto LABEL_14;
  }

  __nwlog_obj();
  v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(void *)&applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = 1LL;
  *(_WORD *)&applier[22] = 2048;
  v36 = 144LL;
  v31 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v31))
  {
    free(v31);
    goto LABEL_13;
  }

  __break(1u);
}

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446466;
  v29 = "nw_protocol_http_client_bottom_replace_input_handler";
  v30 = 2048;
  v31 = a2;
  size_t v9 = (const char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  BOOL v26 = 0;
  if (__nwlog_fault(v9, &type, &v26))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (os_log_s *)gLogObj;
      v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_28;
      }
      *(_DWORD *)buf = 136446466;
      v29 = "nw_protocol_http_client_bottom_replace_input_handler";
      v30 = 2048;
      v31 = a2;
      v12 = "%{public}s Protocol %p isn't an input handler of http client bottom";
LABEL_27:
      _os_log_impl(&dword_181A5C000, v10, v11, v12, buf, 0x16u);
      goto LABEL_28;
    }

    if (!v26)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (os_log_s *)gLogObj;
      v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_28;
      }
      *(_DWORD *)buf = 136446466;
      v29 = "nw_protocol_http_client_bottom_replace_input_handler";
      v30 = 2048;
      v31 = a2;
      v12 = "%{public}s Protocol %p isn't an input handler of http client bottom, backtrace limit exceeded";
      goto LABEL_27;
    }

    v13 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (os_log_s *)gLogObj;
    v11 = type;
    v14 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v13)
    {
      if (!v14) {
        goto LABEL_28;
      }
      *(_DWORD *)buf = 136446466;
      v29 = "nw_protocol_http_client_bottom_replace_input_handler";
      v30 = 2048;
      v31 = a2;
      v12 = "%{public}s Protocol %p isn't an input handler of http client bottom, no backtrace";
      goto LABEL_27;
    }

    if (v14)
    {
      *(_DWORD *)buf = 136446722;
      v29 = "nw_protocol_http_client_bottom_replace_input_handler";
      v30 = 2048;
      v31 = a2;
      v32 = 2082;
      v33 = v13;
      _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s Protocol %p isn't an input handler of http client bottom, dumping backtrace:%{public}s",  buf,  0x20u);
    }

    free(v13);
  }
    }
  }

      return;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v42 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_connection_stop_throughput_monitor_on_nw_queue";
    v43 = (char *)_os_log_send_and_compose_impl();

    v56[0] = OS_LOG_TYPE_ERROR;
    v61[0] = 0;
    if (__nwlog_fault(v43, v56, v61))
    {
      if (v56[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v44 = (os_log_s *)(id)gLogObj;
        v45 = v56[0];
        if (os_log_type_enabled(v44, v56[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_connection_stop_throughput_monitor_on_nw_queue";
          _os_log_impl(&dword_181A5C000, v44, v45, "%{public}s called with null connection", buf, 0xCu);
        }
      }

      else if (v61[0])
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v44 = (os_log_s *)(id)gLogObj;
        v50 = v56[0];
        v51 = os_log_type_enabled(v44, v56[0]);
        if (backtrace_string)
        {
          if (v51)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&buf[4] = "nw_connection_stop_throughput_monitor_on_nw_queue";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v44,  v50,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_91;
        }

        if (v51)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_connection_stop_throughput_monitor_on_nw_queue";
          _os_log_impl(&dword_181A5C000, v44, v50, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v44 = (os_log_s *)(id)gLogObj;
        v53 = v56[0];
        if (os_log_type_enabled(v44, v56[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_connection_stop_throughput_monitor_on_nw_queue";
          _os_log_impl( &dword_181A5C000,  v44,  v53,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    nw_frame_reset(a2, v4, v5, 0LL, v6);
    BOOL v8 = *(void *)a1;
    *(void *)(a2 + 16) = *(void *)a1;
    size_t v9 = a1 + 8;
    if (v8) {
      v10 = (void *)(v8 + 24);
    }
    else {
      v10 = (void *)(a1 + 8);
    }
    *v10 = a2 + 16;
    *(void *)a1 = a2;
    *(void *)(a2 + 24) = a1;
    v11 = *(unsigned int *)(a1 + 24) + 1LL;
    v12 = v11 << 31 >> 31;
    *(_DWORD *)(a1 + 24) = v11;
    if (v12 == v11 && (v12 & 0x8000000000000000LL) == 0) {
      goto LABEL_36;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = *(unsigned int *)(a1 + 24);
    *(_DWORD *)buf = 136446978;
    v76 = "frame_cache_add_to_cache";
    v77 = 2082;
    *(void *)v78 = "frame_cache->empty_frames_count";
    *(_WORD *)&v78[8] = 2048;
    *(void *)&v78[10] = 1LL;
    *(_WORD *)&v78[18] = 2048;
    *(void *)v79 = v13;
    v14 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v73 = 0;
    if (__nwlog_fault(v14, &type, &v73))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v15 = (os_log_s *)gLogObj;
        uint64_t v16 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          uint64_t v17 = *(unsigned int *)(a1 + 24);
          *(_DWORD *)buf = 136446978;
          v76 = "frame_cache_add_to_cache";
          v77 = 2082;
          *(void *)v78 = "frame_cache->empty_frames_count";
          *(_WORD *)&v78[8] = 2048;
          *(void *)&v78[10] = 1LL;
          *(_WORD *)&v78[18] = 2048;
          *(void *)v79 = v17;
          uint64_t v18 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_32:
          _os_log_impl(&dword_181A5C000, v15, v16, v18, buf, 0x2Au);
        }
      }

      else if (v73)
      {
        uint64_t v19 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v15 = (os_log_s *)gLogObj;
        uint64_t v16 = type;
        uint64_t v20 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v19)
        {
          if (v20)
          {
            BOOL v21 = *(unsigned int *)(a1 + 24);
            *(_DWORD *)buf = 136447234;
            v76 = "frame_cache_add_to_cache";
            v77 = 2082;
            *(void *)v78 = "frame_cache->empty_frames_count";
            *(_WORD *)&v78[8] = 2048;
            *(void *)&v78[10] = 1LL;
            *(_WORD *)&v78[18] = 2048;
            *(void *)v79 = v21;
            *(_WORD *)&v79[8] = 2082;
            *(void *)&v79[10] = v19;
            _os_log_impl( &dword_181A5C000,  v15,  v16,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v19);
          goto LABEL_33;
        }

        if (v20)
        {
          BOOL v23 = *(unsigned int *)(a1 + 24);
          *(_DWORD *)buf = 136446978;
          v76 = "frame_cache_add_to_cache";
          v77 = 2082;
          *(void *)v78 = "frame_cache->empty_frames_count";
          *(_WORD *)&v78[8] = 2048;
          *(void *)&v78[10] = 1LL;
          *(_WORD *)&v78[18] = 2048;
          *(void *)v79 = v23;
          uint64_t v18 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          goto LABEL_32;
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v15 = (os_log_s *)gLogObj;
        uint64_t v16 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          BOOL v22 = *(unsigned int *)(a1 + 24);
          *(_DWORD *)buf = 136446978;
          v76 = "frame_cache_add_to_cache";
          v77 = 2082;
          *(void *)v78 = "frame_cache->empty_frames_count";
          *(_WORD *)&v78[8] = 2048;
          *(void *)&v78[10] = 1LL;
          *(_WORD *)&v78[18] = 2048;
          *(void *)v79 = v22;
          uint64_t v18 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_32;
        }
      }
    }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v12 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446210;
    v52 = "nw_write_request_create_idempotent";
    _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_ERROR,  "%{public}s Cannot send a reply for a protocol that does not support replies",  buf,  0xCu);
  }

  v7 = v46;
LABEL_17:
  v13 = 0LL;
LABEL_62:

  return v13;
}

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v8 = (os_log_s *)gLogObj;
  result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136446978;
    v68 = "nw_protocol_http2_transport_remove_input_handler";
    v69 = 2082;
    v70 = (nw_protocol *)(handle + 205);
    v71 = 1042;
    *(_DWORD *)v72 = 16;
    *(_WORD *)&v72[4] = 2098;
    *(void *)&v72[6] = a2;
    _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s http2_transport does not have input handler registered for %{public,uuid_t}.16P",  buf,  0x26u);
    return 0LL;
  }

  return result;
}

      if (gLogDatapath)
      {
LABEL_32:
        size_t v9 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_http1_on_message_complete";
          _os_log_impl(&dword_181A5C000, v9, OS_LOG_TYPE_DEBUG, "%{public}s http should not keep alive", buf, 0xCu);
        }
      }

          os_release(v6);
          v10 = *(void **)(v3 + 576);
          if (v10)
          {
            if ((*(_BYTE *)(v3 + 198) & 1) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v11 = (os_log_s *)gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
              {
                v12 = *(_DWORD *)(v3 + 672);
                *(_DWORD *)buf = 136446978;
                *(void *)&buf[4] = "nw_http_retry_reissue";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v3 + 114;
                *(_WORD *)&buf[22] = 2080;
                v83 = (uint64_t)" ";
                *(_WORD *)v84 = 1024;
                *(_DWORD *)&v84[2] = v12;
                _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s%sretrying, remaining limit %u",  buf,  0x26u);
              }
            }

            v13 = *(_DWORD *)(v3 + 672);
            *(_DWORD *)(v3 + 672) = v13 - 1;
            if (v13)
            {
LABEL_49:
              *(_BYTE *)(v3 + 676) |= 8u;
              *(void *)buf = 0LL;
              *(void *)&buf[8] = buf;
              *(void *)&buf[16] = 0x3802000000LL;
              v83 = (uint64_t)__Block_byref_object_copy__41702;
              *(void *)v84 = __Block_byref_object_dispose__41703;
              parameters = (void *)nw_protocol_get_parameters(v3);
              if (parameters) {
                parameters = os_retain(parameters);
              }
              *(void *)&v84[8] = parameters;
              v84[16] |= 1u;
              if (*(_DWORD *)(v3 + 536) == 43)
              {
                v29 = *(void *)(v3 + 608);
                if (!v29
                  || (*(void *)type = MEMORY[0x1895F87A8],
                      v71 = 0x40000000LL,
                      v72 = (uint64_t)___ZL21nw_http_retry_reissueP22nw_protocol_http_retryP20nw_protocol_metadata_block_invoke,
                      v73 = (uint64_t (*)(uint64_t, uint64_t))&__block_descriptor_tmp_13_41704,
                      v74 = (void (*)(uint64_t))v3,
                      ((*(uint64_t (**)(uint64_t, void, os_log_type_t *))(v29 + 16))( v29,  *(void *)(*(void *)&buf[8] + 40LL),  type) & 1) == 0))
                {
                  nw_protocol_error(*(void **)(v3 + 48), v3);
                  nw_protocol_disconnected(*(void **)(v3 + 48), v3);
                }

    free(v12);
    goto LABEL_15;
  }

  __nwlog_obj();
  BOOL v22 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v33 = "-[NWPHContext initWithRequest:onConnection:]";
  BOOL v23 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v29 = 0;
  if (__nwlog_fault(v23, &type, &v29))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "-[NWPHContext initWithRequest:onConnection:]";
        BOOL v26 = "%{public}s [super init] failed";
LABEL_39:
        _os_log_impl(&dword_181A5C000, v24, v25, v26, buf, 0xCu);
      }
    }

    else
    {
      if (v29)
      {
        v27 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v25 = type;
        v28 = os_log_type_enabled(v24, type);
        if (v27)
        {
          if (v28)
          {
            *(_DWORD *)buf = 136446466;
            v33 = "-[NWPHContext initWithRequest:onConnection:]";
            v34 = 2082;
            v35 = v27;
            _os_log_impl( &dword_181A5C000,  v24,  v25,  "%{public}s [super init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v27);
          goto LABEL_41;
        }

        if (!v28) {
          goto LABEL_40;
        }
        *(_DWORD *)buf = 136446210;
        v33 = "-[NWPHContext initWithRequest:onConnection:]";
        BOOL v26 = "%{public}s [super init] failed, no backtrace";
        goto LABEL_39;
      }

      __nwlog_obj();
      BOOL v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "-[NWPHContext initWithRequest:onConnection:]";
        BOOL v26 = "%{public}s [super init] failed, backtrace limit exceeded";
        goto LABEL_39;
      }
    }

      v15 = 0;
      goto LABEL_15;
    }

    switch(v6->_command)
    {
      case 0:
        goto LABEL_10;
      case 1:
        __nwlog_obj();
        v11 = (id *)objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_ERROR)) {
          goto LABEL_14;
        }
        *(_DWORD *)buf = 136446210;
        v73 = "-[NWRemoteConnectionDirector receiveRemoteReply:]";
        v12 = "%{public}s Open connection command is not valid to send to connection director";
        goto LABEL_12;
      case 2:
        uint64_t v18 = objc_alloc(&OBJC_CLASS___NWPBUpdatePath);
        uint64_t v19 = v6->_messageData;
        v11 = -[PBCodable initWithData:](v18, "initWithData:", v19);

        if (v11)
        {
          uint64_t v20 = v11[1];

          if (v20)
          {
            BOOL v21 = v11;
            BOOL v22 = v7;
            BOOL v23 = v21;
            BOOL v24 = v21[1];
            [v24 data];
            BOOL v25 = (void *)objc_claimAutoreleasedReturnValue();
            +[NWPath pathWithProtocolBufferData:](&OBJC_CLASS___NWPath, "pathWithProtocolBufferData:", v25);
            BOOL v26 = (void *)objc_claimAutoreleasedReturnValue();

            v15 = v26 != 0LL;
            if (v26)
            {
              v7 = v22;
              if ([v26 status] == 1)
              {
                __nwlog_obj();
                v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
                {
                  [v26 clientID];
                  v28 = (char *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 136446466;
                  v73 = "-[NWRemoteConnectionDirector receiveRemoteReply:]";
                  v74 = 2114;
                  v75 = v28;
                  _os_log_impl( &dword_181A5C000,  v27,  OS_LOG_TYPE_DEBUG,  "%{public}s Updated path is satisfied, opening %{public}@",  buf,  0x16u);

                  v7 = v22;
                }

                [v26 clientID];
                v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                -[os_log_s openClient:](v7, "openClient:", v29);
              }

              else
              {
                if ([v26 status] != 2)
                {
                  v15 = 1;
                  v11 = v23;

LABEL_15:
LABEL_21:

                  goto LABEL_22;
                }

                __nwlog_obj();
                v53 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
                {
                  [v26 clientID];
                  v54 = (char *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 136446466;
                  v73 = "-[NWRemoteConnectionDirector receiveRemoteReply:]";
                  v74 = 2114;
                  v75 = v54;
                  _os_log_impl( &dword_181A5C000,  v53,  OS_LOG_TYPE_DEBUG,  "%{public}s Updated path is unsatisfied, closing %{public}@",  buf,  0x16u);

                  v7 = v22;
                }

                [v26 clientID];
                v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                -[os_log_s closeClient:](v7, "closeClient:", v29);
              }
            }

            else
            {
              __nwlog_obj();
              v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              v7 = v22;
              if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446210;
                v73 = "-[NWRemoteConnectionDirector receiveRemoteReply:]";
                _os_log_impl( &dword_181A5C000,  v29,  OS_LOG_TYPE_ERROR,  "%{public}s Update path could not parse path",  buf,  0xCu);
              }
            }

            v11 = v23;

            goto LABEL_15;
          }

          __nwlog_obj();
          v49 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v49, OS_LOG_TYPE_ERROR)) {
            goto LABEL_70;
          }
          *(_DWORD *)buf = 136446210;
          v73 = "-[NWRemoteConnectionDirector receiveRemoteReply:]";
          v50 = "%{public}s Update path message missing path";
        }

        else
        {
          __nwlog_obj();
          v49 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v49, OS_LOG_TYPE_ERROR)) {
            goto LABEL_70;
          }
          *(_DWORD *)buf = 136446210;
          v73 = "-[NWRemoteConnectionDirector receiveRemoteReply:]";
          v50 = "%{public}s Update path message could not be parsed";
        }

  if (CFStringGetLength(Mutable) <= 0) {
    BOOL v8 = "";
  }
  else {
    BOOL v8 = " ";
  }
  CFStringAppendFormat(Mutable, 0LL, @"%sNetwork/%s", v8, "4277.60.255");
  size_t v9 = (const void *)MGCopyAnswer();
  v10 = (const void *)MGCopyAnswer();
  if (v9)
  {
    if (CFStringGetLength(Mutable) <= 0) {
      v11 = "";
    }
    else {
      v11 = " ";
    }
    if (v10) {
      CFStringAppendFormat(Mutable, 0LL, @"%s%@/%@", v11, v9, v10);
    }
    else {
      CFStringAppendFormat(Mutable, 0LL, @"%s%@", v11, 0LL);
    }
    CFRelease(v9);
  }

  if (v10) {
    CFRelease(v10);
  }
  URLPathAllowedCharacterSet = (const __CFCharacterSet *)_CFURLComponentsGetURLPathAllowedCharacterSet();
  MutableCopy = CFCharacterSetCreateMutableCopy(v0, URLPathAllowedCharacterSet);
  CFCharacterSetAddCharactersInString(MutableCopy, @" ");
  v14 = (const __CFString *)_CFStringCreateByAddingPercentEncodingWithAllowedCharacters();
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (CFStringGetLength(v14) >= 1) {
    nw_utilities_get_user_agent::user_agent_string = nw_utilities_create_c_string_from_cfstring(v14);
  }
  if (v14) {
    CFRelease(v14);
  }
}

    free(v5);
    goto LABEL_15;
  }

    size_t v9 = 0LL;
    goto LABEL_9;
  }

  v7 = *(void *)(a1 + 40);
  if (!v7) {
    goto LABEL_14;
  }
LABEL_6:
  BOOL v8 = 248LL;
  if (!*(void *)(v7 + 248)) {
    BOOL v8 = 240LL;
  }
  size_t v9 = (void **)*(id *)(v7 + v8);
LABEL_9:
  v12[0] = MEMORY[0x1895F87A8];
  v12[1] = 3221225472LL;
  v12[2] = __62__NWURLSessionStreamTask_writeData_timeout_completionHandler___block_invoke_6;
  v12[3] = &unk_189BC91E8;
  v10 = *(id *)(a1 + 48);
  v12[4] = *(void *)(a1 + 40);
  v13 = v10;
  if (v9) {
    -[NWURLSessionDelegateQueue runDelegateBlock:](v9[6], v12);
  }

  -[NWURLSessionStreamTask checkForCompletion](*(void *)(a1 + 40));
}

  *a1 = v6;
  return a6;
}

  if (-[NWPath fallbackInterfaceIndex](self, "fallbackInterfaceIndex")) {
    objc_msgSend( v7,  "appendPrettyInt:withName:indent:",  -[NWPath fallbackInterfaceIndex](self, "fallbackInterfaceIndex"),  @"fallbackInterfaceIndex",  v5);
  }
  if (-[NWPath fallbackIsWeak](self, "fallbackIsWeak")) {
    [v7 appendPrettyBOOL:1 withName:@"fallbackIsWeak" indent:v5];
  }
  if (-[NWPath fallbackEligible](self, "fallbackEligible")) {
    objc_msgSend( v7,  "appendPrettyBOOL:withName:indent:",  -[NWPath fallbackEligible](self, "fallbackEligible"),  @"fallbackEligible",  v5);
  }
  if (-[NWPath fallbackIsPreferred](self, "fallbackIsPreferred")) {
    [v7 appendPrettyBOOL:1 withName:@"fallbackIsPreferred" indent:v5];
  }
  objc_msgSend(v7, "appendPrettyInt:withName:indent:", -[NWPath mtu](self, "mtu"), @"mtu", v5);
  objc_msgSend( v7,  "appendPrettyInt:withName:indent:",  -[NWPath maximumDatagramSize](self, "maximumDatagramSize"),  @"maximumDatagramSize",  v5);
  objc_msgSend( v7,  "appendPrettyInt:withName:indent:",  -[NWPath secondsSinceInterfaceChange](self, "secondsSinceInterfaceChange"),  @"secondsSinceInterfaceChange",  v5);
  v12 = -[NWPath flows](self, "flows");
  [v7 appendPrettyObject:v12 withName:@"flows" indent:v5 showFullContent:1];
  v13 = -[NWPath groupMembers](self, "groupMembers");
  [v7 appendPrettyObject:v13 withName:@"groupMembers" indent:v5 showFullContent:1];
  v14 = -[NWPath internalPath](self, "internalPath");
  v33 = MEMORY[0x1895F87A8];
  v34 = 3221225472LL;
  v35 = __48__NWPath_descriptionWithIndent_showFullContent___block_invoke;
  v36 = &unk_189BBF278;
  v15 = v7;
  v37 = v15;
  v38 = v5;
  v39 = v4;
  nw_path_enumerate_interface_options(v14, &v33);

  -[NWPath effectiveLocalEndpoint](self, "effectiveLocalEndpoint", v33, v34, v35, v36);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue();
  [v15 appendPrettyObject:v16 withName:@"effectiveLocalEndpoint" indent:v5 showFullContent:1];

  -[NWPath effectiveRemoteEndpoint](self, "effectiveRemoteEndpoint");
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();
  [v15 appendPrettyObject:v17 withName:@"effectiveRemoteEndpoint" indent:v5 showFullContent:1];

  -[NWPath interface](self, "interface");
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
  [v15 appendPrettyObject:v18 withName:@"interface" indent:v5 showFullContent:1];

  -[NWPath scopedInterface](self, "scopedInterface");
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
  [v15 appendPrettyObject:v19 withName:@"scopedInterface" indent:v5 showFullContent:1];

  -[NWPath dnsServers](self, "dnsServers");
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
  [v15 appendPrettyObject:v20 withName:@"dnsServers" indent:v5 showFullContent:1];

  -[NWPath internalPath](self, "internalPath");
  BOOL v21 = (void *)objc_claimAutoreleasedReturnValue();
  BOOL v22 = nw_path_copy_resolver_configs(v21);
  [v15 appendPrettyObject:v22 withName:@"resolvers" indent:v5 showFullContent:1];

  -[NWPath dnsSearchDomains](self, "dnsSearchDomains");
  BOOL v23 = (void *)objc_claimAutoreleasedReturnValue();
  [v15 appendPrettyObject:v23 withName:@"dnsSearchDomains" indent:v5 showFullContent:1];

  -[NWPath internalPath](self, "internalPath");
  BOOL v24 = (void *)objc_claimAutoreleasedReturnValue();
  BOOL v25 = nw_path_copy_override_resolver_configs(v24);
  [v15 appendPrettyObject:v25 withName:@"override-resolvers" indent:v5 showFullContent:1];

  -[NWPath overrideDNSSearchDomains](self, "overrideDNSSearchDomains");
  BOOL v26 = (void *)objc_claimAutoreleasedReturnValue();
  [v15 appendPrettyObject:v26 withName:@"override-dnsSearchDomains" indent:v5 showFullContent:1];
  v27 = -[NWPath gateways](self, "gateways");
  [v15 appendPrettyObject:v27 withName:@"gateways" indent:v5 showFullContent:1];
  v28 = -[NWPath proxySettings](self, "proxySettings");
  [v15 appendPrettyObject:v28 withName:@"proxySettings" indent:v5 showFullContent:1];
  v29 = -[NWPath genericNetworkAgentsWithDomain:type:](self, "genericNetworkAgentsWithDomain:type:", 0LL, 0LL);
  [v15 appendPrettyObject:v29 withName:@"agents" indent:v5 showFullContent:1];

  if (-[NWPath isFlowDivert](self, "isFlowDivert"))
  {
    objc_msgSend( v15,  "appendPrettyInt:withName:indent:",  -[NWPath flowDivertControlUnit](self, "flowDivertControlUnit"),  @"flowDivertControlUnit",  v5);
    objc_msgSend( v15,  "appendPrettyInt:withName:indent:",  -[NWPath flowDivertAggregateUnit](self, "flowDivertAggregateUnit"),  @"flowDivertAggregateUnit",  v5);
  }

  if (-[NWPath isFiltered](self, "isFiltered")) {
    objc_msgSend( v15,  "appendPrettyInt:withName:indent:",  -[NWPath filterControlUnit](self, "filterControlUnit"),  @"filterControlunit",  v5);
  }
  if (-[NWPath isListener](self, "isListener")) {
    [v15 appendPrettyBOOL:1 withName:@"isListener" indent:v5];
  }
  if (-[NWPath isDirect](self, "isDirect")) {
    [v15 appendPrettyBOOL:1 withName:@"isDirect" indent:v5];
  }
  if (-[NWPath isLocal](self, "isLocal")) {
    [v15 appendPrettyBOOL:1 withName:@"isLocal" indent:v5];
  }
  if (-[NWPath isRoaming](self, "isRoaming")) {
    [v15 appendPrettyBOOL:1 withName:@"isRoaming" indent:v5];
  }
  if (-[NWPath shouldProbeConnectivity](self, "shouldProbeConnectivity")) {
    [v15 appendPrettyBOOL:1 withName:@"shouldProbeConnectivity" indent:v5];
  }
  if (-[NWPath isLinkQualityAbort](self, "isLinkQualityAbort")) {
    [v15 appendPrettyBOOL:1 withName:@"isLinkQualityAbort" indent:v5];
  }
  if (-[NWPath isListenerInterfaceSpecific](self, "isListenerInterfaceSpecific")) {
    [v15 appendPrettyBOOL:1 withName:@"isListenerInterfaceSpecific" indent:v5];
  }
  objc_msgSend( v15,  "appendPrettyBOOL:withName:indent:",  -[NWPath supportsIPv4](self, "supportsIPv4"),  @"supportsIPv4",  v5);
  objc_msgSend( v15,  "appendPrettyBOOL:withName:indent:",  -[NWPath supportsIPv6](self, "supportsIPv6"),  @"supportsIPv6",  v5);
  objc_msgSend( v15,  "appendPrettyBOOL:withName:indent:",  -[NWPath supportsDNS](self, "supportsDNS"),  @"supportsDNS",  v5);
  v30 = -[NWPath internalPath](self, "internalPath");
  has_nat64_prefixes = nw_path_has_nat64_prefixes(v30);

  if (has_nat64_prefixes) {
    [v15 appendPrettyBOOL:1 withName:@"hasNAT64Prefixes" indent:v5];
  }
  objc_msgSend( v15,  "appendPrettyBOOL:withName:indent:",  -[NWPath hasProxySettings](self, "hasProxySettings"),  @"hasProxySettings",  v5);
  if (-[NWPath isPerAppVPN](self, "isPerAppVPN")) {
    objc_msgSend( v15,  "appendPrettyBOOL:withName:indent:",  -[NWPath isPerAppVPN](self, "isPerAppVPN"),  @"perAppVPN",  v5);
  }
  if (-[NWPath hasKernelExtensionFilter](self, "hasKernelExtensionFilter")) {
    objc_msgSend( v15,  "appendPrettyBOOL:withName:indent:",  -[NWPath hasKernelExtensionFilter](self, "hasKernelExtensionFilter"),  @"hasKernelExtensionFilter",  v5);
  }
  if (-[NWPath hasCustomPFRules](self, "hasCustomPFRules")) {
    objc_msgSend( v15,  "appendPrettyBOOL:withName:indent:",  -[NWPath hasCustomPFRules](self, "hasCustomPFRules"),  @"hasCustomPFRules",  v5);
  }
  if (-[NWPath hasApplicationLevelFirewall](self, "hasApplicationLevelFirewall")) {
    objc_msgSend( v15,  "appendPrettyBOOL:withName:indent:",  -[NWPath hasApplicationLevelFirewall](self, "hasApplicationLevelFirewall"),  @"hasApplicationLevelFirewall",  v5);
  }
  if (-[NWPath hasParentalControls](self, "hasParentalControls")) {
    objc_msgSend( v15,  "appendPrettyBOOL:withName:indent:",  -[NWPath hasParentalControls](self, "hasParentalControls"),  @"hasParentalControls",  v5);
  }

  return v7;
}

LABEL_18:
      goto LABEL_19;
    }

    if ([v11 connectionState] == 3) {
      -[NWRemoteConnectionActor scheduleReadsOnConnection:](self, "scheduleReadsOnConnection:", v12);
    }
    goto LABEL_17;
  }

  if ([v9 isEqualToString:@"currentPath"])
  {
    v11 = v10;
    v12 = a6;
    [v12 connection];
    uint64_t v17 = (id)objc_claimAutoreleasedReturnValue();

    if (v17 != v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v22 = (id)gLogObj;
  BOOL v24 = *(void **)(a1 + 48);
  BOOL v23 = *(void *)(a1 + 56);
  BOOL v26 = *(void *)(a1 + 32);
  BOOL v25 = *(void *)(a1 + 40);
  *(_DWORD *)buf = 136447234;
  *(void *)&buf[4] = "nw_service_connector_trigger_request_complete_block_inner_block_invoke";
  *(_WORD *)&buf[12] = 2114;
  *(void *)&buf[14] = v23;
  *(_WORD *)&buf[22] = 2114;
  v53 = v24;
  *(_WORD *)v54 = 2114;
  *(void *)&v54[2] = v25;
  v55 = 2114;
  v56 = v26;
  v27 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v50 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v28 = (os_log_s *)(id)gLogObj;
    v29 = type;
    if (os_log_type_enabled(v28, type))
    {
      v31 = *(void **)(a1 + 48);
      v30 = *(void *)(a1 + 56);
      v33 = *(void *)(a1 + 32);
      v32 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 136447234;
      *(void *)&buf[4] = "nw_service_connector_trigger_request_complete_block_inner_block_invoke";
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v30;
      *(_WORD *)&buf[22] = 2114;
      v53 = v31;
      *(_WORD *)v54 = 2114;
      *(void *)&v54[2] = v32;
      v55 = 2114;
      v56 = v33;
      _os_log_impl( &dword_181A5C000,  v28,  v29,  "%{public}s %{public}@ tried to call missing request completion block with connection %{public}@ error %{public}@ for %{public}@",  buf,  0x34u);
    }

  *(_BYTE *)(v15 + 35) = v13;
  uint64_t v17 = *v12;
  uint64_t v18 = v12[1];
  *(_WORD *)(v15 + 24) = v17;
  *(_WORD *)(v15 + 26) = v18;
  uint64_t v19 = (char *)(*(void *)v15 + *(int *)(v15 + 16));
  memcpy(v19, v12 + 7, v17);
  uint64_t v20 = *v12;
  BOOL v21 = &v19[v20];
  if ((_DWORD)v13)
  {
    *(_WORD *)BOOL v21 = 8250;
    v21 += 2;
    uint64_t v20 = *v12;
  }

  *(_DWORD *)(v15 + 20) = (unsigned __int16)((_WORD)v21 - *(_DWORD *)v15);
  memcpy(v21, (char *)v12 + v20 + 28, v12[1]);
  if ((_DWORD)v13) {
    *(_WORD *)&v21[v12[1]] = 2573;
  }
  result = (*(uint64_t (**)(void, uint64_t))(*((void *)a1 + 5) + 16LL))(*(void *)(a2 + 32), v15);
  if (!(_DWORD)result) {
    a1[7] += v12[1] + *v12;
  }
  return result;
}

        if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
        {
          BOOL v26 = *(void *)(a1 + 88);
          if (v26)
          {
            v27 = v26 - 1;
            *(void *)(a1 + 88) = v27;
            if (!v27)
            {
              v28 = *(void (***)(void))(a1 + 64);
              if (v28)
              {
                *(void *)(a1 + 64) = 0LL;
                v28[2](v28);
                _Block_release(v28);
              }

              if ((*(_BYTE *)(a1 + 72) & 1) != 0)
              {
                v29 = *(const void **)(a1 + 64);
                if (v29) {
                  _Block_release(v29);
                }
              }

              free((void *)a1);
            }
          }
        }

        goto LABEL_15;
      }
    }

    __nwlog_obj();
    v31 = *(const char **)(v7 + 16);
    *(_DWORD *)buf = 136446722;
    v48 = "__nw_protocol_get_input_frames";
    if (!v31) {
      v31 = "invalid";
    }
    v49 = 2082;
    v50 = (void *)v31;
    v51 = 2048;
    v52 = v7;
    v32 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v45 = 0;
    if (__nwlog_fault(v32, &type, &v45))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v33 = (os_log_s *)__nwlog_obj();
        v34 = type;
        if (!os_log_type_enabled(v33, type)) {
          goto LABEL_106;
        }
        v35 = *(const char **)(v7 + 16);
        if (!v35) {
          v35 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        v48 = "__nw_protocol_get_input_frames";
        v49 = 2082;
        v50 = (void *)v35;
        v51 = 2048;
        v52 = v7;
        v36 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback";
LABEL_105:
        _os_log_impl(&dword_181A5C000, v33, v34, v36, buf, 0x20u);
        goto LABEL_106;
      }

      if (!v45)
      {
        v33 = (os_log_s *)__nwlog_obj();
        v34 = type;
        if (!os_log_type_enabled(v33, type)) {
          goto LABEL_106;
        }
        v43 = *(const char **)(v7 + 16);
        if (!v43) {
          v43 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        v48 = "__nw_protocol_get_input_frames";
        v49 = 2082;
        v50 = (void *)v43;
        v51 = 2048;
        v52 = v7;
        v36 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, backtrace limit exceeded";
        goto LABEL_105;
      }

      v37 = (char *)__nw_create_backtrace_string();
      v33 = (os_log_s *)__nwlog_obj();
      v34 = type;
      v38 = os_log_type_enabled(v33, type);
      if (!v37)
      {
        if (!v38) {
          goto LABEL_106;
        }
        v44 = *(const char **)(v7 + 16);
        if (!v44) {
          v44 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        v48 = "__nw_protocol_get_input_frames";
        v49 = 2082;
        v50 = (void *)v44;
        v51 = 2048;
        v52 = v7;
        v36 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, no backtrace";
        goto LABEL_105;
      }

      if (v38)
      {
        v39 = *(const char **)(v7 + 16);
        if (!v39) {
          v39 = "invalid";
        }
        *(_DWORD *)buf = 136446978;
        v48 = "__nw_protocol_get_input_frames";
        v49 = 2082;
        v50 = (void *)v39;
        v51 = 2048;
        v52 = v7;
        v53 = 2082;
        v54 = v37;
        _os_log_impl( &dword_181A5C000,  v33,  v34,  "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, dumping backtrace:%{public}s",  buf,  0x2Au);
      }

      free(v37);
    }

        if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
        {
          BOOL v26 = *(void *)(a1 + 88);
          if (v26)
          {
            v27 = v26 - 1;
            *(void *)(a1 + 88) = v27;
            if (!v27)
            {
              v28 = *(void (***)(void))(a1 + 64);
              if (v28)
              {
                *(void *)(a1 + 64) = 0LL;
                v28[2](v28);
                _Block_release(v28);
              }

              if ((*(_BYTE *)(a1 + 72) & 1) != 0)
              {
                v29 = *(const void **)(a1 + 64);
                if (v29) {
                  _Block_release(v29);
                }
              }

              free((void *)a1);
            }
          }
        }

        goto LABEL_15;
      }
    }

    __nwlog_obj();
    v31 = *(const char **)(v7 + 16);
    *(_DWORD *)buf = 136446722;
    v48 = "__nw_protocol_get_output_frames";
    if (!v31) {
      v31 = "invalid";
    }
    v49 = 2082;
    v50 = (void *)v31;
    v51 = 2048;
    v52 = v7;
    v32 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v45 = 0;
    if (__nwlog_fault(v32, &type, &v45))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v33 = (os_log_s *)__nwlog_obj();
        v34 = type;
        if (!os_log_type_enabled(v33, type)) {
          goto LABEL_106;
        }
        v35 = *(const char **)(v7 + 16);
        if (!v35) {
          v35 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        v48 = "__nw_protocol_get_output_frames";
        v49 = 2082;
        v50 = (void *)v35;
        v51 = 2048;
        v52 = v7;
        v36 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback";
LABEL_105:
        _os_log_impl(&dword_181A5C000, v33, v34, v36, buf, 0x20u);
        goto LABEL_106;
      }

      if (!v45)
      {
        v33 = (os_log_s *)__nwlog_obj();
        v34 = type;
        if (!os_log_type_enabled(v33, type)) {
          goto LABEL_106;
        }
        v43 = *(const char **)(v7 + 16);
        if (!v43) {
          v43 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        v48 = "__nw_protocol_get_output_frames";
        v49 = 2082;
        v50 = (void *)v43;
        v51 = 2048;
        v52 = v7;
        v36 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, backtrace limit exceeded";
        goto LABEL_105;
      }

      v37 = (char *)__nw_create_backtrace_string();
      v33 = (os_log_s *)__nwlog_obj();
      v34 = type;
      v38 = os_log_type_enabled(v33, type);
      if (!v37)
      {
        if (!v38) {
          goto LABEL_106;
        }
        v44 = *(const char **)(v7 + 16);
        if (!v44) {
          v44 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        v48 = "__nw_protocol_get_output_frames";
        v49 = 2082;
        v50 = (void *)v44;
        v51 = 2048;
        v52 = v7;
        v36 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, no backtrace";
        goto LABEL_105;
      }

      if (v38)
      {
        v39 = *(const char **)(v7 + 16);
        if (!v39) {
          v39 = "invalid";
        }
        *(_DWORD *)buf = 136446978;
        v48 = "__nw_protocol_get_output_frames";
        v49 = 2082;
        v50 = (void *)v39;
        v51 = 2048;
        v52 = v7;
        v53 = 2082;
        v54 = v37;
        _os_log_impl( &dword_181A5C000,  v33,  v34,  "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, dumping backtrace:%{public}s",  buf,  0x2Au);
      }

      free(v37);
    }

        if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
        {
          BOOL v23 = *(void *)(a2 + 88);
          if (v23)
          {
            BOOL v24 = v23 - 1;
            *(void *)(a2 + 88) = v24;
            if (!v24)
            {
              BOOL v25 = *(void (***)(void))(a2 + 64);
              if (v25)
              {
                *(void *)(a2 + 64) = 0LL;
                v25[2](v25);
                _Block_release(v25);
              }

              if ((*(_BYTE *)(a2 + 72) & 1) != 0)
              {
                BOOL v26 = *(const void **)(a2 + 64);
                if (v26) {
                  _Block_release(v26);
                }
              }

              free((void *)a2);
            }
          }
        }

        goto LABEL_15;
      }
    }

    __nwlog_obj();
    v28 = *(const char **)(v4 + 16);
    *(_DWORD *)buf = 136446722;
    v45 = "__nw_protocol_register_notification";
    if (!v28) {
      v28 = "invalid";
    }
    v46 = 2082;
    v47 = (void *)v28;
    v48 = 2048;
    v49 = v4;
    v29 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (__nwlog_fault(v29, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v30 = (os_log_s *)__nwlog_obj();
        v31 = type;
        if (!os_log_type_enabled(v30, type)) {
          goto LABEL_106;
        }
        v32 = *(const char **)(v4 + 16);
        if (!v32) {
          v32 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        v45 = "__nw_protocol_register_notification";
        v46 = 2082;
        v47 = (void *)v32;
        v48 = 2048;
        v49 = v4;
        v33 = "%{public}s protocol %{public}s (%p) has invalid register_notification callback";
LABEL_105:
        _os_log_impl(&dword_181A5C000, v30, v31, v33, buf, 0x20u);
        goto LABEL_106;
      }

      if (!v42)
      {
        v30 = (os_log_s *)__nwlog_obj();
        v31 = type;
        if (!os_log_type_enabled(v30, type)) {
          goto LABEL_106;
        }
        v40 = *(const char **)(v4 + 16);
        if (!v40) {
          v40 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        v45 = "__nw_protocol_register_notification";
        v46 = 2082;
        v47 = (void *)v40;
        v48 = 2048;
        v49 = v4;
        v33 = "%{public}s protocol %{public}s (%p) has invalid register_notification callback, backtrace limit exceeded";
        goto LABEL_105;
      }

      v34 = (char *)__nw_create_backtrace_string();
      v30 = (os_log_s *)__nwlog_obj();
      v31 = type;
      v35 = os_log_type_enabled(v30, type);
      if (!v34)
      {
        if (!v35) {
          goto LABEL_106;
        }
        v41 = *(const char **)(v4 + 16);
        if (!v41) {
          v41 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        v45 = "__nw_protocol_register_notification";
        v46 = 2082;
        v47 = (void *)v41;
        v48 = 2048;
        v49 = v4;
        v33 = "%{public}s protocol %{public}s (%p) has invalid register_notification callback, no backtrace";
        goto LABEL_105;
      }

      if (v35)
      {
        v36 = *(const char **)(v4 + 16);
        if (!v36) {
          v36 = "invalid";
        }
        *(_DWORD *)buf = 136446978;
        v45 = "__nw_protocol_register_notification";
        v46 = 2082;
        v47 = (void *)v36;
        v48 = 2048;
        v49 = v4;
        v50 = 2082;
        v51 = v34;
        _os_log_impl( &dword_181A5C000,  v30,  v31,  "%{public}s protocol %{public}s (%p) has invalid register_notification callback, dumping backtrace:%{public}s",  buf,  0x2Au);
      }

      free(v34);
    }

        if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
        {
          BOOL v23 = *(void *)(a2 + 88);
          if (v23)
          {
            BOOL v24 = v23 - 1;
            *(void *)(a2 + 88) = v24;
            if (!v24)
            {
              BOOL v25 = *(void (***)(void))(a2 + 64);
              if (v25)
              {
                *(void *)(a2 + 64) = 0LL;
                v25[2](v25);
                _Block_release(v25);
              }

              if ((*(_BYTE *)(a2 + 72) & 1) != 0)
              {
                BOOL v26 = *(const void **)(a2 + 64);
                if (v26) {
                  _Block_release(v26);
                }
              }

              free((void *)a2);
            }
          }
        }

        goto LABEL_15;
      }
    }

    __nwlog_obj();
    v28 = *(const char **)(v4 + 16);
    *(_DWORD *)buf = 136446722;
    v45 = "__nw_protocol_unregister_notification";
    if (!v28) {
      v28 = "invalid";
    }
    v46 = 2082;
    v47 = (void *)v28;
    v48 = 2048;
    v49 = v4;
    v29 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (__nwlog_fault(v29, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v30 = (os_log_s *)__nwlog_obj();
        v31 = type;
        if (!os_log_type_enabled(v30, type)) {
          goto LABEL_106;
        }
        v32 = *(const char **)(v4 + 16);
        if (!v32) {
          v32 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        v45 = "__nw_protocol_unregister_notification";
        v46 = 2082;
        v47 = (void *)v32;
        v48 = 2048;
        v49 = v4;
        v33 = "%{public}s protocol %{public}s (%p) has invalid unregister_notification callback";
LABEL_105:
        _os_log_impl(&dword_181A5C000, v30, v31, v33, buf, 0x20u);
        goto LABEL_106;
      }

      if (!v42)
      {
        v30 = (os_log_s *)__nwlog_obj();
        v31 = type;
        if (!os_log_type_enabled(v30, type)) {
          goto LABEL_106;
        }
        v40 = *(const char **)(v4 + 16);
        if (!v40) {
          v40 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        v45 = "__nw_protocol_unregister_notification";
        v46 = 2082;
        v47 = (void *)v40;
        v48 = 2048;
        v49 = v4;
        v33 = "%{public}s protocol %{public}s (%p) has invalid unregister_notification callback, backtrace limit exceeded";
        goto LABEL_105;
      }

      v34 = (char *)__nw_create_backtrace_string();
      v30 = (os_log_s *)__nwlog_obj();
      v31 = type;
      v35 = os_log_type_enabled(v30, type);
      if (!v34)
      {
        if (!v35) {
          goto LABEL_106;
        }
        v41 = *(const char **)(v4 + 16);
        if (!v41) {
          v41 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        v45 = "__nw_protocol_unregister_notification";
        v46 = 2082;
        v47 = (void *)v41;
        v48 = 2048;
        v49 = v4;
        v33 = "%{public}s protocol %{public}s (%p) has invalid unregister_notification callback, no backtrace";
        goto LABEL_105;
      }

      if (v35)
      {
        v36 = *(const char **)(v4 + 16);
        if (!v36) {
          v36 = "invalid";
        }
        *(_DWORD *)buf = 136446978;
        v45 = "__nw_protocol_unregister_notification";
        v46 = 2082;
        v47 = (void *)v36;
        v48 = 2048;
        v49 = v4;
        v50 = 2082;
        v51 = v34;
        _os_log_impl( &dword_181A5C000,  v30,  v31,  "%{public}s protocol %{public}s (%p) has invalid unregister_notification callback, dumping backtrace:%{public}s",  buf,  0x2Au);
      }

      free(v34);
    }

LABEL_31:
    uint64_t v6 = 0LL;
    goto LABEL_6;
  }

  *(void *)__dst = 0LL;
  start_of_key_locked = nw_txt_record_find_start_of_key_locked(v4, a2, __dst, 0LL, 0LL, 0LL);
  uint64_t v6 = start_of_key_locked != 1;
  if (start_of_key_locked != 1)
  {
    v7 = **(_BYTE **)__dst + 1LL;
    memmove(*(void **)__dst, (const void *)(*(void *)__dst + v7), v4[1] + v4[2] - (*(void *)__dst + v7));
    v4[2] -= v7;
  }

    return int64_with_default;
  }

  pthread_mutex_lock(&sSettingsMutex);
  if (!sCachedSettings)
  {
    pthread_mutex_unlock(&sSettingsMutex);
    goto LABEL_11;
  }

  int64 = xpc_dictionary_get_int64((xpc_object_t)sCachedSettings, v1);
  pthread_mutex_unlock(&sSettingsMutex);
  nw_txt_record_t v3 = clock_gettime_nsec_np(_CLOCK_REALTIME);
  id v4 = v3 - int64;
  if (v3 >= int64)
  {
    BOOL v5 = v3;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v6 = (os_log_s *)(id)gLogObj;
    v7 = v6;
    if (v4 >= 0x2261034C3CA00LL)
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v12 = 136446978;
        v13 = "nw_activity_get_investigation_id_from_defaults";
        v14 = 2048;
        v15 = int64;
        uint64_t v16 = 2048;
        uint64_t v17 = v5;
        uint64_t v18 = 2048;
        uint64_t v19 = v4 / 0x3B9ACA00;
        _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_INFO,  "%{public}s Ignoring investigation ID that has expired (start: %llu, now: %llu, delta_sec: %llu)",  (uint8_t *)&v12,  0x2Au);
      }

      int64_with_default = 0LL;
      goto LABEL_14;
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      v12 = 136446978;
      v13 = "nw_activity_get_investigation_id_from_defaults";
      v14 = 2048;
      v15 = int64;
      uint64_t v16 = 2048;
      uint64_t v17 = v5;
      uint64_t v18 = 2048;
      uint64_t v19 = v4 / 0x3B9ACA00;
      BOOL v8 = "%{public}s Investigation ID has not expired (start: %llu, now: %llu, delta_sec: %llu)";
      size_t v9 = v7;
      v10 = 42;
      goto LABEL_13;
    }

    goto LABEL_14;
  }

  return int64_with_default;
}

        v10 = 1LL;
LABEL_15:
        uint64_t v20 = 0LL;
        txt_record = nw_advertise_descriptor_get_txt_record(v3, &v20);
        uint64_t v18 = v20;
        if (!txt_record) {
          uint64_t v18 = 0LL;
        }
        v15 = v9 + v8 + v10 + v18;
        if (!a2) {
          goto LABEL_19;
        }
        goto LABEL_18;
      }
    }

    size_t v9 = 1LL;
    if (bonjour_domain) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  application_service_name = nw_advertise_descriptor_get_application_service_name((nw_advertise_descriptor_t)v3);
  bundle_id = nw_advertise_descriptor_get_bundle_id(v3);
  v13 = (const char *)bundle_id;
  if (application_service_name)
  {
    v14 = strlen(application_service_name) + 17;
    if (v13) {
      goto LABEL_9;
    }
  }

  else
  {
    v14 = 17LL;
    if (bundle_id)
    {
LABEL_9:
      v15 = v14 + strlen(v13) + 1;
      if (!a2) {
        goto LABEL_19;
      }
LABEL_18:
      *a2 = v15;
      goto LABEL_19;
    }
  }

  v15 = v14 + 1;
  if (a2) {
    goto LABEL_18;
  }
LABEL_19:
  if (v15 <= 0x1C) {
    uint64_t v16 = 28LL;
  }
  else {
    uint64_t v16 = v15;
  }
LABEL_22:

  return v16;
}

  free(backtrace_string);
  if (!v3) {
    return;
  }
LABEL_28:
  free(v3);
}

    free(v8);
    goto LABEL_18;
  }

  __nwlog_obj();
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v31 = "nw_fd_wrapper_close";
  BOOL v21 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v28 = 0;
  if (__nwlog_fault(v21, &type, &v28))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_fd_wrapper_close";
        _os_log_impl(&dword_181A5C000, v22, v23, "%{public}s called with null wrapper", buf, 0xCu);
      }
    }

    else if (v28)
    {
      BOOL v24 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v25 = type;
      BOOL v26 = os_log_type_enabled(v22, type);
      if (v24)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          v31 = "nw_fd_wrapper_close";
          v32 = 2082;
          *(void *)v33 = v24;
          _os_log_impl( &dword_181A5C000,  v22,  v25,  "%{public}s called with null wrapper, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v24);
        goto LABEL_50;
      }

      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_fd_wrapper_close";
        _os_log_impl(&dword_181A5C000, v22, v25, "%{public}s called with null wrapper, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_fd_wrapper_close";
        _os_log_impl( &dword_181A5C000,  v22,  v27,  "%{public}s called with null wrapper, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  return v8;
}

  _Block_object_dispose(buf, 8);
LABEL_15:

  return v5;
}

  *(_DWORD *)(v6 + 8) = self->_delegateIndex;
  *(_BYTE *)(v6 + 44) |= 1u;
  v10 = (char)self->_has;
  if ((v10 & 8) != 0) {
    goto LABEL_15;
  }
LABEL_9:
  if ((v10 & 0x40) != 0)
  {
LABEL_10:
    *(_BYTE *)(v6 + 40) = self->_expensive;
    *(_BYTE *)(v6 + 44) |= 0x40u;
  }

  return (id)v6;
}

  BOOL v8 = 0LL;
  if ((*(_BYTE *)&self->_has & 8) == 0) {
    goto LABEL_15;
  }
LABEL_10:
  size_t v9 = 2654435761LL * self->_mtu;
  if ((*(_BYTE *)&self->_has & 0x40) == 0) {
    goto LABEL_16;
  }
LABEL_11:
  v10 = 2654435761LL * self->_expensive;
  return v4 ^ v3 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v5;
}

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446466;
  v29 = "nw_protocol_http_messaging_replace_input_handler";
  v30 = 2048;
  v31 = a2;
  size_t v9 = (const char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  BOOL v26 = 0;
  if (__nwlog_fault(v9, &type, &v26))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (os_log_s *)gLogObj;
      v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_28;
      }
      *(_DWORD *)buf = 136446466;
      v29 = "nw_protocol_http_messaging_replace_input_handler";
      v30 = 2048;
      v31 = a2;
      v12 = "%{public}s Protocol %p isn't an input handler of http messaging";
LABEL_27:
      _os_log_impl(&dword_181A5C000, v10, v11, v12, buf, 0x16u);
      goto LABEL_28;
    }

    if (!v26)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (os_log_s *)gLogObj;
      v11 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_28;
      }
      *(_DWORD *)buf = 136446466;
      v29 = "nw_protocol_http_messaging_replace_input_handler";
      v30 = 2048;
      v31 = a2;
      v12 = "%{public}s Protocol %p isn't an input handler of http messaging, backtrace limit exceeded";
      goto LABEL_27;
    }

    v13 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (os_log_s *)gLogObj;
    v11 = type;
    v14 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v13)
    {
      if (!v14) {
        goto LABEL_28;
      }
      *(_DWORD *)buf = 136446466;
      v29 = "nw_protocol_http_messaging_replace_input_handler";
      v30 = 2048;
      v31 = a2;
      v12 = "%{public}s Protocol %p isn't an input handler of http messaging, no backtrace";
      goto LABEL_27;
    }

    if (v14)
    {
      *(_DWORD *)buf = 136446722;
      v29 = "nw_protocol_http_messaging_replace_input_handler";
      v30 = 2048;
      v31 = a2;
      v32 = 2082;
      v33 = v13;
      _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s Protocol %p isn't an input handler of http messaging, dumping backtrace:%{public}s",  buf,  0x20u);
    }

    free(v13);
  }

  __break(1u);
}

  return v7;
}

  v12 = (char *)malloc(v10);
  if (!v12)
  {
    uint64_t v19 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446466;
    v27 = "strict_malloc";
    v28 = 2048;
    v29 = v10;
    uint64_t v20 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v20);
    if (!result)
    {
      free(v20);
      memcpy((void *)1, v9, v8);
      v15 = nw_frame_create(0, 0LL, v11, (uint64_t)__nw_frame_custom_finalizer, 0LL);
      if (v15) {
        goto LABEL_16;
      }
      goto LABEL_18;
    }
}

          if ((_UNKNOWN *)*(a3 - 7) == &nw_protocol_ref_counted_handle)
          {
            v39 = *(a3 - 1);
            if (v39)
            {
              v40 = v39 - 1;
              *(a3 - 1) = v40;
              if (!v40)
              {
                v41 = (void (**)(void))*(a3 - 4);
                if (v41)
                {
                  *(a3 - 4) = 0LL;
                  v41[2](v41);
                  _Block_release(v41);
                }

                if ((*(_BYTE *)(a3 - 3) & 1) != 0)
                {
                  v42 = (const void *)*(a3 - 4);
                  if (v42) {
                    _Block_release(v42);
                  }
                }

                free(a3 - 12);
              }
            }
          }

          goto LABEL_15;
        }

        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v115 = "__nw_protocol_get_output_frames";
        v57 = (char *)_os_log_send_and_compose_impl();
        v113 = OS_LOG_TYPE_ERROR;
        v112 = 0;
        if (__nwlog_fault(v57, &v113, &v112))
        {
          if (v113 == OS_LOG_TYPE_FAULT)
          {
            v58 = (os_log_s *)__nwlog_obj();
            v59 = v113;
            if (!os_log_type_enabled(v58, v113)) {
              goto LABEL_154;
            }
            *(_DWORD *)buf = 136446210;
            v115 = "__nw_protocol_get_output_frames";
            v60 = "%{public}s called with null protocol";
            goto LABEL_153;
          }

          if (!v112)
          {
            v58 = (os_log_s *)__nwlog_obj();
            v59 = v113;
            if (!os_log_type_enabled(v58, v113)) {
              goto LABEL_154;
            }
            *(_DWORD *)buf = 136446210;
            v115 = "__nw_protocol_get_output_frames";
            v60 = "%{public}s called with null protocol, backtrace limit exceeded";
            goto LABEL_153;
          }

          v70 = (char *)__nw_create_backtrace_string();
          v58 = (os_log_s *)__nwlog_obj();
          v59 = v113;
          v71 = os_log_type_enabled(v58, v113);
          if (v70)
          {
            if (v71)
            {
              *(_DWORD *)buf = 136446466;
              v115 = "__nw_protocol_get_output_frames";
              v116 = 2082;
              v117 = v70;
              _os_log_impl( &dword_181A5C000,  v58,  v59,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v70);
            goto LABEL_154;
          }

          if (v71)
          {
            *(_DWORD *)buf = 136446210;
            v115 = "__nw_protocol_get_output_frames";
            v60 = "%{public}s called with null protocol, no backtrace";
LABEL_153:
            _os_log_impl(&dword_181A5C000, v58, v59, v60, buf, 0xCu);
          }
        }

    free(v11);
    goto LABEL_15;
  }

  [v6 internalDescriptor];
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  [v9 internalParameters];
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue();
  evaluator_for_browse = nw_path_create_evaluator_for_browse(v15, v16);
  self =  -[NWPathEvaluator initWithEvaluator:parameters:]( self,  "initWithEvaluator:parameters:",  evaluator_for_browse,  v9);

  uint64_t v18 = self;
LABEL_16:

  return v18;
}

    free(v8);
    goto LABEL_15;
  }

  [v5 internalParameters];
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  evaluator_for_listener = nw_path_create_evaluator_for_listener(v12, 0LL);
  self =  -[NWPathEvaluator initWithEvaluator:parameters:]( self,  "initWithEvaluator:parameters:",  evaluator_for_listener,  v6);

  v14 = self;
LABEL_16:

  return v14;
}

void sub_181AFEE80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_context_shares_workloop(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  nw_txt_record_t v3 = a1;
  id v4 = a2;
  BOOL v5 = v4;
  if (v3)
  {
    if (v4)
    {
      uint64_t v6 = (void *)nw_context_copy_globals_context(v3);
      v7 = (void *)nw_context_copy_globals_context(v5);
      BOOL v8 = v6 == v7;

      goto LABEL_4;
    }

    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v26 = "nw_context_shares_workloop";
    v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v11, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v26 = "nw_context_shares_workloop";
          _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null other", buf, 0xCu);
        }

void sub_181AFF35C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_option_is_equal(void *a1, void *a2)
{
  nw_txt_record_t v3 = a1;
  id v4 = a2;
  BOOL v5 = v4;
  if (v3 == v4) {
    goto LABEL_17;
  }
  uint64_t v6 = 0LL;
  if (v3 && v4)
  {
    if (nw_endpoint_is_equal(v3[3], v4[3], 0LL)
      && *((unsigned __int8 *)v3 + 152) == *((unsigned __int8 *)v5 + 152)
      && nw_protocol_definition_is_equal_unsafe((uint64_t)v3[1], (uint64_t)v5[1]))
    {
      v7 = v5[5];
      id v8 = v3[5];
      id v9 = v7;
      v10 = v9;
      BOOL v11 = v8 == v9;
      if (v8 != v9 && v8 && v9) {
        BOOL v11 = xpc_equal(v8, v9);
      }

      if (v11)
      {
        v12 = v3[1];
        os_log_type_t v13 = (uint64_t (*)(void))*((void *)v12 + 15);
        if (v13 || (os_log_type_t v13 = (uint64_t (*)(void))*((void *)v12 + 14)) != 0LL)
        {
          uint64_t v6 = v13();
          goto LABEL_18;
        }

void sub_181AFF4A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_interface_shallow_compare(void *a1, void *a2)
{
  nw_txt_record_t v3 = a1;
  id v4 = a2;
  BOOL v5 = (char *)v4;
  BOOL v6 = v3 == v4;
  if (v3 != v4 && v3 && v4)
  {
    int v7 = *((_DWORD *)v4 + 24);
    BOOL v6 = (!v7 || (v8 = *((_DWORD *)v3 + 24)) == 0 || v8 == v7)
      && ((int v9 = *((_DWORD *)v4 + 25)) == 0 || (v10 = *((_DWORD *)v3 + 25)) == 0 || v10 == v9)
      && *((_DWORD *)v3 + 2) == *((_DWORD *)v4 + 2)
      && strncmp(v3 + 104, v4 + 104, 0x19uLL) == 0;
  }

  return v6;
}

void nw_path_evaluator_force_update(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 24);
    unsigned int v5 = *((_DWORD *)v3 + 25);
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 24);
    id v6 = nw_parameters_copy_context(*((void **)v3 + 1));
    nw_path_necp_check_for_updates(v6, (_OWORD *)v3 + 5, v5);

    goto LABEL_3;
  }

  __nwlog_obj();
  int v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v18 = "nw_path_evaluator_force_update";
  int v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_path_evaluator_force_update";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null evaluator", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v18 = "nw_path_evaluator_force_update";
          __int16 v19 = 2082;
          BOOL v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null evaluator, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_path_evaluator_force_update";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null evaluator, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_path_evaluator_force_update";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null evaluator, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181AFF84C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_has_persistent_application_protocols(uint64_t a1)
{
  uint64_t v5 = 0LL;
  id v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  char v8 = 0;
  v1 = *(void **)(a1 + 32);
  v4[0] = MEMORY[0x1895F87A8];
  v4[1] = 3221225472LL;
  v4[2] = __nw_endpoint_handler_has_persistent_application_protocols_block_invoke;
  v4[3] = &unk_189BBBAF8;
  v4[4] = &v5;
  nw_parameters_internal_iterate_protocol_stack(v1, 5, 0, v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_181AFF8FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

LABEL_55:
    goto LABEL_56;
  }

  if (!v53)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v25 = (os_log_s *)(id)gLogObj;
    v32 = type;
    if (os_log_type_enabled(v25, type))
    {
      else {
        v33 = off_189BBBBC0[v7];
      }
      *(_DWORD *)buf = 136446722;
      v56 = "-[NWConcrete_nw_endpoint_transform startWithHandler:]";
      v57 = 2082;
      v58 = (void *)v33;
      v59 = 2082;
      v60 = "transform";
      _os_log_impl( &dword_181A5C000,  v25,  v32,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
    }

    goto LABEL_55;
  }

  v28 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v25 = (os_log_s *)(id)gLogObj;
  uint64_t v29 = type;
  v30 = os_log_type_enabled(v25, type);
  if (!v28)
  {
    if (v30)
    {
      else {
        v38 = off_189BBBBC0[v7];
      }
      *(_DWORD *)buf = 136446722;
      v56 = "-[NWConcrete_nw_endpoint_transform startWithHandler:]";
      v57 = 2082;
      v58 = (void *)v38;
      v59 = 2082;
      v60 = "transform";
      _os_log_impl( &dword_181A5C000,  v25,  v29,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
    }

    goto LABEL_55;
  }

  if (v30)
  {
    else {
      v31 = off_189BBBBC0[v7];
    }
    *(_DWORD *)buf = 136446978;
    v56 = "-[NWConcrete_nw_endpoint_transform startWithHandler:]";
    v57 = 2082;
    v58 = (void *)v31;
    v59 = 2082;
    v60 = "transform";
    v61 = 2082;
    v62 = v28;
    _os_log_impl( &dword_181A5C000,  v25,  v29,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
  }

  free(v28);
  if (v24) {
    goto LABEL_57;
  }
LABEL_58:
}

        goto LABEL_56;
      }

      if (!v34)
      {
        __nwlog_obj();
        char v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)length = 136446210;
          *(void *)&length[4] = "nw_path_can_resolve_endpoint";
          _os_log_impl( &dword_181A5C000,  v23,  v33,  "%{public}s called with null endpoint, backtrace limit exceeded",  length,  0xCu);
        }

        goto LABEL_55;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v30 = type;
      v31 = os_log_type_enabled(v23, type);
      if (!backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)length = 136446210;
          *(void *)&length[4] = "nw_path_can_resolve_endpoint";
          _os_log_impl(&dword_181A5C000, v23, v30, "%{public}s called with null endpoint, no backtrace", length, 0xCu);
        }

        goto LABEL_55;
      }

      if (v31)
      {
        *(_DWORD *)length = 136446466;
        *(void *)&length[4] = "nw_path_can_resolve_endpoint";
        v37 = 2082;
        v38 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v23,  v30,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  length,  0x16u);
      }

      goto LABEL_43;
    }

    goto LABEL_56;
  }

  id v6 = v4;
  uint64_t v7 = [v6 type];

  if (v7 >= 0x3E8 && (char v8 = nw_endpoint_copy_custom_resolver_block(v6), v8, v8)
    || (int v9 = v6, v10 = [v9 type], v9, nw_path_uses_nexus_internal(v3, 0))
    && (nexus_agent = nw_path_get_nexus_agent(v3, 0), nw_agent_resolves_type(nexus_agent, v10)))
  {
    os_log_type_t v12 = 1LL;
  }

  else if (v10 > 5 || (os_log_type_t v12 = 1LL, ((1 << v10) & 0x2C) == 0))
  {
    BOOL v13 = v3;
    if (v13->policy_result.num_netagents)
    {
      os_log_type_t v14 = 0LL;
      char v15 = 4LL;
      while (1)
      {
        uint64_t v16 = nw_network_agent_copy_dictionary_for_uuid((const unsigned __int8 *)v13->policy_result.netagents + v15);
        os_log_type_t v17 = (void *)v16;
        if (v16)
        {
          *(void *)length = 0LL;
          data = (unsigned int *)xpc_dictionary_get_data((xpc_object_t)v16, "data", (size_t *)length);
          __int16 v19 = 0LL;
          if (data && *(void *)length >= 0xD8uLL)
          {
            if (*(void *)length == data[53] + 216LL) {
              __int16 v19 = (uint64_t)data;
            }
            else {
              __int16 v19 = 0LL;
            }
          }

          if (nw_agent_resolves_type(v19, v10)) {
            break;
          }
        }

        ++v14;
        v15 += 20LL;
        if (v14 >= v13->policy_result.num_netagents) {
          goto LABEL_20;
        }
      }

      os_log_type_t v12 = v19 != 0;
    }

    else
    {
LABEL_20:
      os_log_type_t v12 = 0LL;
    }
  }

    if (v30) {
      free(v30);
    }
    if (v17) {
      free((void *)v17);
    }
    os_log_type_t v12 = 0LL;
    goto LABEL_74;
  }

  if ((*(_BYTE *)(a1 + 136) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v61 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
      {
        v62 = *(unsigned __int16 *)(a1 + 132);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_append_reassembled_packets";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = a1 + 137;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&buf[24] = " ";
        LOWORD(v92) = 2048;
        *(void *)((char *)&v92 + 2) = a1;
        WORD5(v92) = 1024;
        HIDWORD(v92) = v62;
        _os_log_impl( &dword_181A5C000,  v61,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s%p Fragments for IP ID %u incomplete",  buf,  0x30u);
      }
    }
  }

  os_log_type_t v12 = 0LL;
  if (a5) {
    *a5 = 1;
  }
LABEL_74:
  _Block_object_dispose(&v83, 8);
  _Block_object_dispose(&v87, 8);
  if (!a4) {
    goto LABEL_85;
  }
LABEL_75:
  for (i = 0; ; ++i)
  {
    v48 = *(void *)(a1 + 64);
    if (!v48) {
      break;
    }
    v49 = *(void *)(v48 + 32);
    v50 = *(void **)(v48 + 40);
    if (v49)
    {
      *(void *)(v49 + 40) = v50;
      v50 = *(void **)(v48 + 40);
    }

    else
    {
      *(void *)(a1 + 72) = v50;
    }

    *v50 = v49;
    *(void *)(v48 + 32) = 0LL;
    *(void *)(v48 + 40) = 0LL;
    nw_frame_finalize(v48);
  }

  if (i)
  {
    if ((*(_BYTE *)(a1 + 136) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v51 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        v52 = *(unsigned __int16 *)(a1 + 132);
        *(_DWORD *)buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_process_reassembly";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = a1 + 137;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&buf[24] = " ";
        LOWORD(v92) = 2048;
        *(void *)((char *)&v92 + 2) = a1;
        WORD5(v92) = 1024;
        HIDWORD(v92) = v52;
        *(_WORD *)v93 = 1024;
        *(_DWORD *)&v93[2] = i;
        _os_log_impl( &dword_181A5C000,  v51,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s%p Failed to reassemble IP ID %u, dropping %u frames",  buf,  0x36u);
      }
    }
  }

  v50 = v126;
  if (!nw_hash_table_count(*(void *)(*((void *)v6 + 3) + 32LL), v34)
    && !nw_hash_table_count(*(void *)(*((void *)v6 + 3) + 40LL), v49)
    && !nw_hash_table_count(*(void *)(*((void *)v6 + 3) + 48LL), v51))
  {
    v53 = *(void *)(*((void *)v6 + 3) + 56LL);
    if (v53)
    {
      nw_queue_cancel_source(v53, v52);
      *(void *)(*((void *)v6 + 3) + 56LL) = 0LL;
    }
  }

    if (v21)
    {
      uint64_t v29 = (char *)v21;
      goto LABEL_57;
    }

      if (a2->handle == &nw_protocol_ref_counted_handle)
      {
        v64 = a2[1].callbacks;
        if (v64)
        {
          v65 = (nw_protocol_callbacks *)((char *)v64 - 1);
          a2[1].callbacks = v65;
          if (!v65)
          {
            v66 = *(void (***)(void))a2[1].flow_id;
            if (v66)
            {
              *(void *)a2[1].flow_id = 0LL;
              v66[2](v66);
              _Block_release(v66);
            }

            if ((a2[1].flow_id[8] & 1) != 0)
            {
              v67 = *(const void **)a2[1].flow_id;
              if (v67) {
                _Block_release(v67);
              }
            }

            free(a2);
          }
        }
      }

      goto LABEL_56;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_frames";
    v122 = (char *)_os_log_send_and_compose_impl();
    v165 = OS_LOG_TYPE_ERROR;
    v164 = 0;
    if (__nwlog_fault(v122, &v165, &v164))
    {
      if (v165 == OS_LOG_TYPE_FAULT)
      {
        v123 = (os_log_s *)__nwlog_obj();
        v124 = v165;
        if (!os_log_type_enabled(v123, v165)) {
          goto LABEL_313;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_frames";
        v125 = "%{public}s called with null protocol";
LABEL_312:
        _os_log_impl(&dword_181A5C000, v123, v124, v125, buf, 0xCu);
        goto LABEL_313;
      }

      if (!v164)
      {
        v123 = (os_log_s *)__nwlog_obj();
        v124 = v165;
        if (!os_log_type_enabled(v123, v165)) {
          goto LABEL_313;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_frames";
        v125 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_312;
      }

      v137 = (char *)__nw_create_backtrace_string();
      v123 = (os_log_s *)__nwlog_obj();
      v124 = v165;
      v138 = os_log_type_enabled(v123, v165);
      if (!v137)
      {
        if (!v138) {
          goto LABEL_313;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_frames";
        v125 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_312;
      }

      if (v138)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v137;
        _os_log_impl( &dword_181A5C000,  v123,  v124,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v137);
    }

    if (v27) {
      free(v27);
    }
LABEL_15:
    os_log_type_t v12 = 0LL;
    goto LABEL_16;
  }

  uint64_t v5 = v3[231];

  if ((v5 & 4) == 0) {
    goto LABEL_39;
  }
  id v6 = v4;
  uint64_t v7 = [v6 type];

  if (v7 != 1 || (v4[231] & 2) != 0) {
    goto LABEL_14;
  }
  char v8 = v6;
  int v9 = v8[14];

  if (!v9 || (v10 = v9, BOOL v11 = [v10 type], v10, v11 != 2))
  {

    goto LABEL_14;
  }

  os_log_type_t v12 = v10;
  BOOL v13 = v12[231];

  if ((v13 & 4) == 0)
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v38 = "nw_protocol_instance_registrar_copy_next_registered_endpoint";
        v39 = 2112;
        v40 = v12;
        _os_log_impl( &dword_181A5C000,  v34,  OS_LOG_TYPE_DEBUG,  "%{public}s next endpoint %@ is not registered, fetching registered copy",  buf,  0x16u);
      }
    }

    os_log_type_t v14 = v8[1];
    char v15 = nw_context_copy_registered_endpoint_internal(v14, v12, a2);

    os_log_type_t v12 = v15;
    if (!v15)
    {
LABEL_14:
      if (gLogDatapath)
      {
        __nwlog_obj();
        uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          v38 = "nw_protocol_instance_registrar_copy_next_registered_endpoint";
          v39 = 2112;
          v40 = v6;
          _os_log_impl( &dword_181A5C000,  v16,  OS_LOG_TYPE_DEBUG,  "%{public}s no next endpoint for endpoint %@",  buf,  0x16u);
        }

        os_log_type_t v12 = 0LL;
        goto LABEL_25;
      }

      goto LABEL_15;
    }
  }

  if (gLogDatapath)
  {
    __nwlog_obj();
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      v38 = "nw_protocol_instance_registrar_copy_next_registered_endpoint";
      v39 = 2112;
      v40 = v12;
      v41 = 2112;
      v42 = v8;
      _os_log_impl( &dword_181A5C000,  v16,  OS_LOG_TYPE_DEBUG,  "%{public}s found next endpoint %@ for endpoint %@",  buf,  0x20u);
    }

        BOOL v25 = *((void *)v71 + 3);
        goto LABEL_14;
      }

      BOOL v25 = 0LL;
    }

LABEL_70:
  v90 = *(void *)(*(void *)(a1[5] + 8LL) + 24LL) != 0LL;

  return v90;
}

  if (v11) {
    free(v11);
  }
  return 0LL;
}

      free(backtrace_string);
    }

      nw_array_append(*(void *)(*(void *)(a1 + 32) + 216LL), *(void **)(a1 + 40));
      return;
    }

    __nwlog_obj();
    char v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_endpoint_has_edge_locked";
    BOOL v24 = (char *)_os_log_send_and_compose_impl();

    v41[0] = OS_LOG_TYPE_ERROR;
    v45 = 0;
    if (__nwlog_fault(v24, v41, &v45))
    {
      if (v41[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v26 = v41[0];
        if (os_log_type_enabled(v25, v41[0]))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_endpoint_has_edge_locked";
          _os_log_impl(&dword_181A5C000, v25, v26, "%{public}s called with null edge", buf, 0xCu);
        }
      }

      else if (v45)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v32 = v41[0];
        v33 = os_log_type_enabled(v25, v41[0]);
        if (backtrace_string)
        {
          if (v33)
          {
            *(_DWORD *)buf = 136446466;
            v47 = "nw_endpoint_has_edge_locked";
            v48 = 2082;
            v49 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v25,  v32,  "%{public}s called with null edge, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_52;
        }

        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_endpoint_has_edge_locked";
          _os_log_impl(&dword_181A5C000, v25, v32, "%{public}s called with null edge, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v34 = v41[0];
        if (os_log_type_enabled(v25, v41[0]))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_endpoint_has_edge_locked";
          _os_log_impl( &dword_181A5C000,  v25,  v34,  "%{public}s called with null edge, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

            goto LABEL_56;
          }

          if (v137[0] == OS_LOG_TYPE_DEFAULT)
          {
            __nwlog_obj();
            v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v62 = type[0];
            if (os_log_type_enabled(v46, (os_log_type_t)type[0]))
            {
              v63 = nw_group_descriptor_get_type(v18[8]);
              if (v63 > 4) {
                v64 = "unknown";
              }
              else {
                v64 = off_189BB74C8[v63];
              }
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
              *(_WORD *)&buf[12] = 2080;
              *(void *)&buf[14] = v64;
              _os_log_impl( &dword_181A5C000,  v46,  v62,  "%{public}s Unsupported group descriptor type: %s, backtrace limit exceeded",  buf,  0x16u);
            }

            goto LABEL_55;
          }

          v57 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v58 = type[0];
          v59 = os_log_type_enabled(v46, (os_log_type_t)type[0]);
          if (!v57)
          {
            if (v59)
            {
              v65 = nw_group_descriptor_get_type(v18[8]);
              if (v65 > 4) {
                v66 = "unknown";
              }
              else {
                v66 = off_189BB74C8[v65];
              }
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
              *(_WORD *)&buf[12] = 2080;
              *(void *)&buf[14] = v66;
              _os_log_impl( &dword_181A5C000,  v46,  v58,  "%{public}s Unsupported group descriptor type: %s, no backtrace",  buf,  0x16u);
            }

            goto LABEL_55;
          }

          if (v59)
          {
            v60 = nw_group_descriptor_get_type(v18[8]);
            if (v60 > 4) {
              v61 = "unknown";
            }
            else {
              v61 = off_189BB74C8[v60];
            }
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = v61;
            *(_WORD *)&buf[22] = 2082;
            v147 = v57;
            _os_log_impl( &dword_181A5C000,  v46,  v58,  "%{public}s Unsupported group descriptor type: %s, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v57);
        }

    free(backtrace_string);
    goto LABEL_83;
  }

  __nwlog_obj();
  BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v40 = "nw_protocol_implementation_remove_listen_handler";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (__nwlog_fault(v12, &type, &v37))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_protocol_implementation_remove_listen_handler";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if (v37)
    {
      char v23 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v24 = type;
      BOOL v25 = os_log_type_enabled(v13, type);
      if (v23)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "nw_protocol_implementation_remove_listen_handler";
          v41 = 2082;
          v42 = v23;
          _os_log_impl( &dword_181A5C000,  v13,  v24,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v23);
        goto LABEL_71;
      }

      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_protocol_implementation_remove_listen_handler";
        _os_log_impl(&dword_181A5C000, v13, v24, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v33 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_protocol_implementation_remove_listen_handler";
        _os_log_impl( &dword_181A5C000,  v13,  v33,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

      free(backtrace_string);
      if (!v16) {
        goto LABEL_77;
      }
      goto LABEL_76;
    }
  }

  os_log_type_t v14 = malloc(a2);
  if (v14)
  {
    BOOL v13 = (uint64_t)v14;
    BOOL v11 = 0LL;
    goto LABEL_35;
  }

  __nwlog_obj();
  __int16 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v42 = "strict_malloc";
  v43 = 2048;
  v44 = a2;
  v28 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v28);
  if (!result)
  {
    free(v28);
LABEL_34:
    BOOL v11 = 0LL;
    BOOL v13 = 0LL;
    goto LABEL_35;
  }

  __break(1u);
  return result;
}

    goto LABEL_56;
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    os_log_type_t v17 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 136446722;
    v53 = "nw_socks5_connection_connect_outer_on_queue_block_invoke";
    v54 = 2114;
    v55 = v17;
    v56 = 2114;
    v57[0] = v5;
    _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}@ out connection event error %{public}@",  buf,  0x20u);
  }

  nw_socks5_connection_cancel_on_queue(*(void **)(a1 + 32), v5);
LABEL_56:
}

  if (v21) {
    free(v21);
  }
  return 0LL;
}

        should_proxy_transport_at_level = 0;
        v78 = 0LL;
        os_log_type_t v10 = v80;
        goto LABEL_56;
      }

      __nwlog_obj();
      os_log_type_t v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
      BOOL v18 = (char *)_os_log_send_and_compose_impl();

      LOBYTE(v90) = 16;
      v89 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v18, &v90, &v89))
      {
        if (v90 == 17)
        {
          __nwlog_obj();
          __int16 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v20 = v90;
          if (os_log_type_enabled(v19, (os_log_type_t)v90))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
            _os_log_impl(&dword_181A5C000, v19, v20, "%{public}s called with null transport_protocol", buf, 0xCu);
          }
        }

        else if (v89)
        {
          v28 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          __int16 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v29 = v90;
          v30 = os_log_type_enabled(v19, (os_log_type_t)v90);
          if (v28)
          {
            if (v30)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v28;
              _os_log_impl( &dword_181A5C000,  v19,  v29,  "%{public}s called with null transport_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v28);
            goto LABEL_100;
          }

          if (v30)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
            _os_log_impl( &dword_181A5C000,  v19,  v29,  "%{public}s called with null transport_protocol, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          __int16 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v35 = v90;
          if (os_log_type_enabled(v19, (os_log_type_t)v90))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_proxy_config_copy_protocol_stack_for_listener";
            _os_log_impl( &dword_181A5C000,  v19,  v35,  "%{public}s called with null transport_protocol, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

      free(v14);
      goto LABEL_56;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v9 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v53 = "nw_parameters_create_quic_connection";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v50 = 0;
    if (__nwlog_fault(v10, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v11 = (os_log_s *)(id)gLogObj;
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_parameters_create_quic_connection";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s nw_parameters_create failed", buf, 0xCu);
        }
      }

      else if (v50)
      {
        os_log_type_t v17 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v11 = (os_log_s *)(id)gLogObj;
        BOOL v18 = type;
        __int16 v19 = os_log_type_enabled(v11, type);
        if (v17)
        {
          if (v19)
          {
            *(_DWORD *)buf = 136446466;
            v53 = "nw_parameters_create_quic_connection";
            v54 = 2082;
            v55 = v17;
            _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v17);
          if (!v10) {
            goto LABEL_47;
          }
          goto LABEL_46;
        }

        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_parameters_create_quic_connection";
          _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v11 = (os_log_s *)(id)gLogObj;
        BOOL v24 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_parameters_create_quic_connection";
          _os_log_impl( &dword_181A5C000,  v11,  v24,  "%{public}s nw_parameters_create failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v10)
    {
LABEL_47:
      id v4 = 0LL;
LABEL_58:

      goto LABEL_59;
    }

    goto LABEL_56;
  }

  if (!v4)
  {
    char v15 = *(void *)(*((void *)v3 + 13) + 176LL);
    if (v15)
    {
      objc_storeStrong((id *)(v15 + 128), 0LL);
      uint64_t v16 = *(void *)(*((void *)v3 + 13) + 176LL);
      os_log_type_t v17 = *(void **)(v16 + 136);
      *(void *)(v16 + 136) = 0LL;
    }

    goto LABEL_19;
  }

  if (nw_protocol_demux_copy_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_5_25952);
  }
  if (!nw_protocol_demux_copy_definition::definition)
  {
    if (nw_protocol_options_matches_definition(v5, 0LL)) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

  id v6 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
  uint64_t v7 = nw_protocol_options_matches_definition(v5, v6);
  if (v6) {
    os_release(v6);
  }
  if (!v7)
  {
LABEL_21:
    __nwlog_obj();
    BOOL v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_parameters_set_channel_demux_options";
    __int16 v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_parameters_set_channel_demux_options";
        _os_log_impl( &dword_181A5C000,  v20,  v21,  "%{public}s called with null nw_protocol_options_is_demux(demux_options)",  buf,  0xCu);
      }
    }

    else if (v36)
    {
      __int16 v27 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v28 = type;
      uint64_t v29 = os_log_type_enabled(v20, type);
      if (v27)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446466;
          v39 = "nw_parameters_set_channel_demux_options";
          v40 = 2082;
          v41 = (uint64_t)v27;
          _os_log_impl( &dword_181A5C000,  v20,  v28,  "%{public}s called with null nw_protocol_options_is_demux(demux_options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v27);
        if (!v19) {
          goto LABEL_19;
        }
        goto LABEL_57;
      }

      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_parameters_set_channel_demux_options";
        _os_log_impl( &dword_181A5C000,  v20,  v28,  "%{public}s called with null nw_protocol_options_is_demux(demux_options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v33 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_parameters_set_channel_demux_options";
        _os_log_impl( &dword_181A5C000,  v20,  v33,  "%{public}s called with null nw_protocol_options_is_demux(demux_options), backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_55;
  }

    v30 = *((void *)v7 + 2);
    if (!v30 || nw_path_parameters_get_logging_disabled(*(void *)(v30 + 104)))
    {
      BOOL v13 = 0LL;
      goto LABEL_66;
    }

    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    __int16 v19 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v31 = *((_DWORD *)v7 + 112);
      if (a2 > 5) {
        v32 = "unknown";
      }
      else {
        v32 = off_189BB9C00[a2];
      }
      *(_DWORD *)buf = 136446722;
      v44 = "nw_connection_report_state_with_handler_on_nw_queue";
      v45 = 1024;
      *(_DWORD *)v46 = v31;
      *(_WORD *)&v46[4] = 2082;
      *(void *)&v46[6] = v32;
      _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_DEFAULT,  "%{public}s [C%u] reporting state %{public}s",  buf,  0x1Cu);
    }

    BOOL v13 = 0LL;
LABEL_65:

LABEL_66:
    v33 = *((_DWORD *)v7 + 48);
    v36[0] = MEMORY[0x1895F87A8];
    v36[1] = 3221225472LL;
    v36[2] = ___ZL51nw_connection_report_state_with_handler_on_nw_queueP24NWConcrete_nw_connection21nw_connection_state_tU13block_pointerFvS1_PU22objcproto11OS_nw_error8NSObjectEPU28objcproto17OS_dispatch_queueS2__block_invoke;
    v36[3] = &unk_189BC16F8;
    v34 = v10;
    v40 = a2;
    v39 = v34;
    v37 = v13;
    v38 = v7;
    v35 = v13;
    nw_connection_async_on_queue(v38, v9, v33, v36);

    goto LABEL_67;
  }

  os_log_type_t v14 = *((void *)v7 + 2);
  if (v14 && !nw_path_parameters_get_logging_disabled(*(void *)(v14 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    char v15 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *((_DWORD *)v7 + 112);
      if (a2 > 5) {
        os_log_type_t v17 = "unknown";
      }
      else {
        os_log_type_t v17 = off_189BB9C00[a2];
      }
      *(_DWORD *)buf = 136446722;
      v44 = "nw_connection_report_state_with_handler_on_nw_queue";
      v45 = 1024;
      *(_DWORD *)v46 = v16;
      *(_WORD *)&v46[4] = 2082;
      *(void *)&v46[6] = v17;
      _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_DEFAULT,  "%{public}s [C%u] not reporting state %{public}s",  buf,  0x1Cu);
    }
  }

      free(backtrace_string);
      goto LABEL_67;
    }

    __int16 v27 = (os_log_s *)__nwlog_obj();
    v28 = type;
    if (!os_log_type_enabled(v27, type)) {
      goto LABEL_67;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_demux_add_input_handler";
    uint64_t v29 = "%{public}s called with null protocol";
LABEL_66:
    _os_log_impl(&dword_181A5C000, v27, v28, v29, buf, 0xCu);
LABEL_67:
    if (v26) {
      free(v26);
    }
    return 0LL;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_demux_add_input_handler";
    BOOL v26 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v27 = (os_log_s *)__nwlog_obj();
      v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_demux_add_input_handler";
      uint64_t v29 = "%{public}s called with null demux";
      goto LABEL_66;
    }

    if (!v37)
    {
      __int16 v27 = (os_log_s *)__nwlog_obj();
      v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_demux_add_input_handler";
      uint64_t v29 = "%{public}s called with null demux, backtrace limit exceeded";
      goto LABEL_66;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v27 = (os_log_s *)__nwlog_obj();
    v28 = type;
    v33 = os_log_type_enabled(v27, type);
    if (backtrace_string)
    {
      if (v33)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_demux_add_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        v32 = "%{public}s called with null demux, dumping backtrace:%{public}s";
        goto LABEL_54;
      }

      goto LABEL_55;
    }

    if (!v33) {
      goto LABEL_67;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_demux_add_input_handler";
    uint64_t v29 = "%{public}s called with null demux, no backtrace";
    goto LABEL_66;
  }

  default_input_handler = a1->default_input_handler;
  if (default_input_handler)
  {
    if (default_input_handler != a2)
    {
      if (!a2
        || (callbacks = a2->callbacks) == 0LL
        || (get_parameters = (uint64_t (*)(nw_protocol *))callbacks->get_parameters) == 0LL)
      {
        os_log_type_t v22 = (os_log_s *)__nwlog_obj();
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
          return 0LL;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_demux_add_input_handler";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = handle + 90;
        char v23 = "%{public}s %s Input handler does not support parameters";
        goto LABEL_29;
      }

      char v8 = (void *)get_parameters(a2);
      int v9 = nw_parameters_copy_protocol_options_legacy(v8, (nw_protocol *)handle);
      if (v9)
      {
        os_log_type_t v10 = v9;
        internal = *((void *)handle + 10);
        if (!internal)
        {
          internal = nw_hash_table_create_internal( 5u,  112,  (const void *(*)(const void *, unsigned int *))nw_protocol_get_key,  (unsigned int (*)(const void *, unsigned int))nw_protocol_key_hash,  (BOOL (*)(const void *, const void *, unsigned int))nw_protocol_matches_key,  0LL);
          *((void *)handle + 10) = internal;
        }

        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_type_t v12 = nw_hash_table_add_object(internal, (uint64_t)a2, (char *)&type);
        BOOL v13 = type != OS_LOG_TYPE_DEFAULT;
        if (type)
        {
          os_log_type_t v14 = (void *)v12;
          extra = nw_hash_node_get_extra(v12);
          *(void *)extra = 0LL;
          *(void *)(extra + _Block_object_dispose(va, 8) = extra;
          *(void *)(extra + 16) = 0LL;
          *(void *)(extra + 24) = extra + 16;
          *(void *)buf = MEMORY[0x1895F87A8];
          *(void *)&buf[8] = 0x40000000LL;
          *(void *)&buf[16] = ___ZL35nw_demux_options_copy_pattern_chainP19nw_protocol_optionsP21nw_demux_pattern_headP16nw_demux_pattern_block_invoke;
          *(void *)&v40 = &__block_descriptor_tmp_17_25937;
          *((void *)&v40 + 1) = extra + 16;
          v41 = extra + 32;
          nw_protocol_options_access_handle(v10, buf);
          os_release(v10);
          if (gLogDatapath)
          {
            v34 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
            {
              v35 = *(unsigned __int16 *)(extra + 50);
              v36 = *(unsigned __int16 *)(extra + 48);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_protocol_demux_add_input_handler";
              *(_WORD *)&buf[12] = 2080;
              *(void *)&buf[14] = handle + 90;
              *(_WORD *)&buf[22] = 1024;
              LODWORD(v40) = v35;
              WORD2(v40) = 1024;
              *(_DWORD *)((char *)&v40 + 6) = v36;
              _os_log_impl( &dword_181A5C000,  v34,  OS_LOG_TYPE_DEBUG,  "%{public}s %s Received pattern of length %u at offset %u",  buf,  0x22u);
            }
          }

          a2->output_handler_context = v14;
          nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)a1);
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v24 = (os_log_s *)gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_protocol_demux_add_input_handler";
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = handle + 90;
            *(_WORD *)&buf[22] = 1042;
            LODWORD(v40) = 16;
            WORD2(v40) = 2098;
            *(void *)((char *)&v40 + 6) = a2;
            _os_log_impl( &dword_181A5C000,  v24,  OS_LOG_TYPE_ERROR,  "%{public}s %s Input handler already registered for %{public,uuid_t}.16P",  buf,  0x26u);
          }

          os_release(v10);
        }

        return v13;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v22 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_demux_add_input_handler";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = handle + 90;
        char v23 = "%{public}s %s Input handler did not provide options";
LABEL_29:
        _os_log_impl(&dword_181A5C000, v22, OS_LOG_TYPE_ERROR, v23, buf, 0x16u);
      }
    }

    return 0LL;
  }

  nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a2);
  if (!a2) {
    return 1LL;
  }
  *(_OWORD *)a1->flow_id = *(_OWORD *)a2->flow_id;
  if (!a2->output_handler) {
    nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)a1);
  }
  uint64_t v16 = a2->callbacks;
  if (!v16) {
    return 1LL;
  }
  os_log_type_t v17 = (uint64_t (*)(nw_protocol *))v16->get_parameters;
  if (v17)
  {
    BOOL v18 = (void *)v17(a2);
    if (v18)
    {
      __int16 v19 = nw_parameters_copy_protocol_options_legacy(v18, (nw_protocol *)handle);
      nw_protocol_options_get_log_id_str(v19, handle + 90, 84LL);
      if (v19) {
        os_release(v19);
      }
    }
  }

  BOOL v20 = a2->callbacks;
  if (!v20) {
    return 1LL;
  }
  supports_external_data = (uint64_t (*)(nw_protocol *))v20->supports_external_data;
  if (!supports_external_data) {
    return 1LL;
  }
  handle[88] = supports_external_data(a2);
  return 1LL;
}

  if (v15) {
    free(v15);
  }
  return 0LL;
}

      _Block_object_dispose(&v42, 8);
      _Block_object_dispose(&v46, 8);
    }
  }

  else if ((*(_BYTE *)(a1 + 348) & 1) == 0)
  {
    if (gLogDatapath)
    {
      id v6 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        v51 = "nw_protocol_ohttp_context_send_request";
        v52 = 2082;
        v53 = (char *)(a1 + 349);
        v54 = 2080;
        v55 = " ";
        uint64_t v7 = "%{public}s %{public}s%signoring write, pending finishing another context";
        goto LABEL_16;
      }
    }
  }

    free(v16);
    if (!v9) {
      return;
    }
LABEL_79:
    free(v9);
    return;
  }

  char v8 = nw_http_metadata_copy_response(a3);
  if ((*(_BYTE *)(v5 + 198) & 1) == 0)
  {
    if (gLogDatapath)
    {
      BOOL v13 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        BOOL v25 = "operator()";
        BOOL v26 = 2082;
        __int16 v27 = (char *)(v5 + 114);
        v28 = 2080;
        uint64_t v29 = " ";
        v30 = 1024;
        status_code = nw_http_response_get_status_code(v8);
        _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sReceived http response %d",  buf,  0x26u);
      }
    }
  }

  (*(void (**)(uint64_t, uint64_t, void *))(a5 + 16))(a5, 1LL, a3);
  if (v8) {
    os_release(v8);
  }
}

  if (v21) {
    free(v21);
  }
  BOOL v18 = 0LL;
LABEL_28:

  return v18;
}

  if (v25) {
    free(v25);
  }
LABEL_33:
}

    goto LABEL_56;
  }

  BOOL v20 = *((void *)v2 + 2);
  if (!v20 || *(_DWORD *)(v20 + 124) != 4)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v21 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      os_log_type_t v22 = " dry-run";
      char v23 = v2[159];
      *(CFIndex *)((char *)&clientContext.version + 4) = (CFIndex)"nw_pac_resolver_start";
      LODWORD(clientContext.version) = 136446722;
      WORD2(clientContext.info) = 2082;
      if ((v23 & 8) == 0) {
        os_log_type_t v22 = "";
      }
      *(void **)((char *)&clientContext.info + 6) = v2 + 84;
      HIWORD(clientContext.retain) = 2082;
      clientContext.release = (void (__cdecl *)(void *))v22;
      _os_log_impl( &dword_181A5C000,  v21,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s%{public}s proxy pac] Either pacURL or pacScript must be set",  (uint8_t *)&clientContext,  0x20u);
    }
  }

    if (v44) {
      free(v44);
    }
    mode = 0;
    goto LABEL_58;
  }

  mode = v3->mode;

  if (mode == 4)
  {
    id v6 = nw_endpoint_handler_copy_fallback(v4);
    uint64_t v7 = v6;
    if ((*((_BYTE *)v6 + 108) & 0x42) != 2 || !a2 || !*((void *)v6 + 9)) {
      goto LABEL_38;
    }
    int64_with_default = networkd_settings_get_int64_with_default( (const char *)nw_setting_progress_target_fallback_leeway,  2500LL);
    int v9 = *((void *)v7 + 12);
    os_log_type_t v10 = mach_continuous_time();
    if (v10 <= 1) {
      BOOL v11 = 1LL;
    }
    else {
      BOOL v11 = v10;
    }
    os_log_type_t v12 = nw_delta_nanos(v9, v11);
    BOOL v13 = *((void *)v7 + 3);
    os_log_type_t v14 = v13 >= v12;
    char v15 = v13 - v12;
    if (!v14) {
      char v15 = 0LL;
    }
    uint64_t v16 = v15 + 1000000 * int64_with_default;
    os_log_type_t v17 = dword_18C45F3A4;
    if (!dword_18C45F3A4)
    {
      mach_timebase_info((mach_timebase_info_t)&time_base);
      os_log_type_t v17 = dword_18C45F3A4;
    }

    BOOL v18 = time_base;
    if (mach_continuous_time() + v16 * v17 / v18 <= a2) {
      goto LABEL_38;
    }
    __int16 v19 = networkd_settings_get_int64_with_default(nw_setting_tcpconn_strong_fallback_delay, 100LL);
    if (1000000 * v19 >= v12) {
      BOOL v20 = 1000000 * v19 - v12;
    }
    else {
      BOOL v20 = 0LL;
    }
    if ((nw_endpoint_handler_get_minimize_logging(v4) & 1) != 0)
    {
      v64 = v20;
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      char v23 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(v4);
        v65 = nw_endpoint_handler_dry_run_string(v4);
        v66 = nw_endpoint_handler_copy_endpoint(v4);
        logging_description = nw_endpoint_get_logging_description(v66);
        v68 = nw_endpoint_handler_state_string(v4);
        v69 = nw_endpoint_handler_mode_string(v4);
        v70 = nw_endpoint_handler_copy_current_path(v4);
        *(_DWORD *)buf = 136448002;
        v77 = "nw_endpoint_fallback_reset_expected_progress_target";
        v78 = 2082;
        v79 = (void *)id_string;
        v80 = 2082;
        v81 = v65;
        v82 = 2082;
        v83 = (void *)logging_description;
        v84 = 2082;
        v85 = v68;
        v86 = 2082;
        v87 = v69;
        BOOL v20 = v64;
        v88 = 2114;
        v89 = v70;
        v90 = 2048;
        v91 = v64 / 0xF4240;
        _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] target time set, resetting fa llback timer to %llums",  buf,  0x52u);
      }
    }

    else
    {
      uint64_t v21 = v4;
      os_log_type_t v22 = *((_BYTE *)v21 + 268);

      if ((v22 & 0x20) != 0)
      {
LABEL_37:
        v41 = *((void *)v7 + 9);
        v42 = dispatch_time(0x8000000000000000LL, v20);
        nw_queue_set_timer_values(v41, v42, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
LABEL_38:

        goto LABEL_92;
      }

      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      char v23 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        BOOL v24 = v21;

        BOOL v25 = v24;
        BOOL v26 = *((_BYTE *)v21 + 268);

        if ((v26 & 1) != 0) {
          __int16 v27 = "dry-run ";
        }
        else {
          __int16 v27 = "";
        }
        v28 = nw_endpoint_handler_copy_endpoint(v25);
        uint64_t v29 = nw_endpoint_get_logging_description(v28);
        id_str = v24->id_str;
        v31 = v25;
        v32 = v31;
        v33 = v31[30];
        else {
          v34 = off_189BBBBF0[v33];
        }
        v71 = v34;

        v35 = v32;
        v36 = v35;
        log = v23;
        v37 = v20;
        v38 = "path";
        switch(v4->mode)
        {
          case 0:
            break;
          case 1:
            v38 = "resolver";
            break;
          case 2:
            v38 = nw_endpoint_flow_mode_string(v35[31]);
            break;
          case 3:
            v38 = "proxy";
            break;
          case 4:
            v38 = "fallback";
            break;
          case 5:
            v38 = "transform";
            break;
          default:
            v38 = "unknown-mode";
            break;
        }

        v39 = v36;
        os_unfair_lock_lock((os_unfair_lock_t)v39 + 28);
        v40 = v39[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v39 + 28);

        *(_DWORD *)buf = 136448002;
        v77 = "nw_endpoint_fallback_reset_expected_progress_target";
        v78 = 2082;
        v79 = id_str;
        v80 = 2082;
        v81 = v27;
        v82 = 2082;
        v83 = (void *)v29;
        v84 = 2082;
        v85 = v71;
        v86 = 2082;
        v87 = v38;
        BOOL v20 = v37;
        v88 = 2114;
        v89 = v40;
        v90 = 2048;
        v91 = v37 / 0xF4240;
        char v23 = log;
        _os_log_impl( &dword_181A5C000,  log,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] target time set, resetting fa llback timer to %llums",  buf,  0x52u);
      }
    }

    goto LABEL_37;
  }

        if (v22) {
          free(v22);
        }
        goto LABEL_57;
      }

      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v57 = "nw_protocol_http2_transport_frame_input_finalizer";
      id v6 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v54 = 0;
      if (__nwlog_fault(v6, &type, &v54))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v7 = (os_log_s *)__nwlog_obj();
          char v8 = type;
          if (os_log_type_enabled(v7, type))
          {
            *(_DWORD *)buf = 136446210;
            v57 = "nw_protocol_http2_transport_frame_input_finalizer";
            int v9 = "%{public}s called with null stream";
            goto LABEL_36;
          }
        }

        else if (v54)
        {
          char v15 = (char *)__nw_create_backtrace_string();
          uint64_t v7 = (os_log_s *)__nwlog_obj();
          char v8 = type;
          v50 = os_log_type_enabled(v7, type);
          if (v15)
          {
            if (v50)
            {
              *(_DWORD *)buf = 136446466;
              v57 = "nw_protocol_http2_transport_frame_input_finalizer";
              v58 = 2082;
              v59 = (uint64_t)v15;
              os_log_type_t v17 = "%{public}s called with null stream, dumping backtrace:%{public}s";
              goto LABEL_18;
            }

            goto LABEL_19;
          }

          if (v50)
          {
            *(_DWORD *)buf = 136446210;
            v57 = "nw_protocol_http2_transport_frame_input_finalizer";
            int v9 = "%{public}s called with null stream, no backtrace";
            goto LABEL_36;
          }
        }

        else
        {
          uint64_t v7 = (os_log_s *)__nwlog_obj();
          char v8 = type;
          if (os_log_type_enabled(v7, type))
          {
            *(_DWORD *)buf = 136446210;
            v57 = "nw_protocol_http2_transport_frame_input_finalizer";
            int v9 = "%{public}s called with null stream, backtrace limit exceeded";
            goto LABEL_36;
          }
        }
      }

    free(backtrace_string);
    goto LABEL_83;
  }

  os_log_type_t v12 = identifier;
  buf[0] = 0;
  *a3 = nw_proxy_config_should_proxy_transport_at_level((NWConcrete_nw_proxy_config *)v5, identifier, (BOOL *)buf);
  if (buf[0]) {
    BOOL v13 = "proxy-wildcard";
  }
  else {
    BOOL v13 = v12;
  }
  os_log_type_t v14 = nw_dictionary_copy_value(*((void *)v5 + 1), (uint64_t)v13);
LABEL_86:

  return v14;
}

      free(v29);
      if (!v23) {
        return;
      }
LABEL_73:
      free(v23);
      return;
    }

    BOOL v24 = (os_log_s *)__nwlog_obj();
    BOOL v25 = type;
    if (!os_log_type_enabled(v24, type)) {
      goto LABEL_72;
    }
    *(_DWORD *)buf = 136446210;
    v38 = "nw_http1_append_bytes";
    BOOL v26 = "%{public}s called with null value_length";
LABEL_71:
    _os_log_impl(&dword_181A5C000, v24, v25, v26, buf, 0xCu);
    goto LABEL_72;
  }

  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_http1_append_bytes";
    char v23 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v24 = (os_log_s *)__nwlog_obj();
      BOOL v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_72;
      }
      *(_DWORD *)buf = 136446210;
      v38 = "nw_http1_append_bytes";
      BOOL v26 = "%{public}s called with null at";
      goto LABEL_71;
    }

    if (!v35)
    {
      BOOL v24 = (os_log_s *)__nwlog_obj();
      BOOL v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_72;
      }
      *(_DWORD *)buf = 136446210;
      v38 = "nw_http1_append_bytes";
      BOOL v26 = "%{public}s called with null at, backtrace limit exceeded";
      goto LABEL_71;
    }

    uint64_t v29 = (char *)__nw_create_backtrace_string();
    BOOL v24 = (os_log_s *)__nwlog_obj();
    BOOL v25 = type;
    v32 = os_log_type_enabled(v24, type);
    if (!v29)
    {
      if (!v32) {
        goto LABEL_72;
      }
      *(_DWORD *)buf = 136446210;
      v38 = "nw_http1_append_bytes";
      BOOL v26 = "%{public}s called with null at, no backtrace";
      goto LABEL_71;
    }

    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      v38 = "nw_http1_append_bytes";
      v39 = 2082;
      v40 = v29;
      v31 = "%{public}s called with null at, dumping backtrace:%{public}s";
      goto LABEL_54;
    }

    goto LABEL_55;
  }

  if (a4)
  {
    char v8 = *a2;
    int v9 = v8 + a4;
    *a2 = v8 + a4;
    if (!__CFADD__(v8, a4) && !HIDWORD(v9))
    {
LABEL_27:
      os_log_type_t v22 = nw_reallocf_type<char *>(*a1, v9);
      *a1 = (char *)v22;
      memcpy((void *)(v22 + v8), a3, a4);
      return;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v10 = *a2;
    *(_DWORD *)buf = 136446978;
    v38 = "nw_http1_append_bytes";
    v39 = 2082;
    v40 = "*value_length";
    v41 = 2048;
    v42 = a4;
    v43 = 2048;
    v44 = v10;
    BOOL v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v11, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (os_log_s *)gLogObj;
        BOOL v13 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          os_log_type_t v14 = *a2;
          *(_DWORD *)buf = 136446978;
          v38 = "nw_http1_append_bytes";
          v39 = 2082;
          v40 = "*value_length";
          v41 = 2048;
          v42 = a4;
          v43 = 2048;
          v44 = v14;
          char v15 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_23:
          _os_log_impl(&dword_181A5C000, v12, v13, v15, buf, 0x2Au);
        }
      }

      else if (v35)
      {
        os_log_type_t v17 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (os_log_s *)gLogObj;
        BOOL v13 = type;
        BOOL v18 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v17)
        {
          if (v18)
          {
            __int16 v19 = *a2;
            *(_DWORD *)buf = 136447234;
            v38 = "nw_http1_append_bytes";
            v39 = 2082;
            v40 = "*value_length";
            v41 = 2048;
            v42 = a4;
            v43 = 2048;
            v44 = v19;
            v45 = 2082;
            v46 = v17;
            _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v17);
          goto LABEL_24;
        }

        if (v18)
        {
          uint64_t v21 = *a2;
          *(_DWORD *)buf = 136446978;
          v38 = "nw_http1_append_bytes";
          v39 = 2082;
          v40 = "*value_length";
          v41 = 2048;
          v42 = a4;
          v43 = 2048;
          v44 = v21;
          char v15 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          goto LABEL_23;
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (os_log_s *)gLogObj;
        BOOL v13 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          BOOL v20 = *a2;
          *(_DWORD *)buf = 136446978;
          v38 = "nw_http1_append_bytes";
          v39 = 2082;
          v40 = "*value_length";
          v41 = 2048;
          v42 = a4;
          v43 = 2048;
          v44 = v20;
          char v15 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_23;
        }
      }
    }

  if (v11) {
    free(v11);
  }
}

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v55 = (id)gLogObj;
  v56 = v5 - 2;
  else {
    v57 = off_189BB5C28[v56];
  }
  *(_DWORD *)buf = 136446722;
  v97 = "-[NWPrivilegedHelper registerHandlerFunction:type:allowedEntitlementGroup:]";
  v98 = 1024;
  *(_DWORD *)v99 = v5;
  *(_WORD *)&v99[4] = 2082;
  *(void *)&v99[6] = v57;
  v40 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v94 = 0;
  if (!__nwlog_fault(v40, &type, &v94))
  {
LABEL_138:
    if (!v40) {
      goto LABEL_140;
    }
    goto LABEL_139;
  }

  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v41 = (os_log_s *)(id)gLogObj;
    v42 = type;
    if (os_log_type_enabled(v41, type))
    {
      if (v56 > 0x14) {
        v70 = "unknown";
      }
      else {
        v70 = off_189BB5C28[v56];
      }
      *(_DWORD *)buf = 136446722;
      v97 = "-[NWPrivilegedHelper registerHandlerFunction:type:allowedEntitlementGroup:]";
      v98 = 1024;
      *(_DWORD *)v99 = v5;
      *(_WORD *)&v99[4] = 2082;
      *(void *)&v99[6] = v70;
      v68 = "%{public}s Refusing to register handler for type [%u] %{public}s without any entitlement";
      goto LABEL_136;
    }

    goto LABEL_137;
  }

  if (!v94)
  {
    __nwlog_obj();
    v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v42 = type;
    if (os_log_type_enabled(v41, type))
    {
      if (v56 > 0x14) {
        v77 = "unknown";
      }
      else {
        v77 = off_189BB5C28[v56];
      }
      *(_DWORD *)buf = 136446722;
      v97 = "-[NWPrivilegedHelper registerHandlerFunction:type:allowedEntitlementGroup:]";
      v98 = 1024;
      *(_DWORD *)v99 = v5;
      *(_WORD *)&v99[4] = 2082;
      *(void *)&v99[6] = v77;
      v68 = "%{public}s Refusing to register handler for type [%u] %{public}s without any entitlement, backtrace limit exceeded";
LABEL_136:
      _os_log_impl(&dword_181A5C000, v41, v42, v68, buf, 0x1Cu);
    }

      if (v20) {
        free(v20);
      }
      return 0LL;
    }

    if (!v30)
    {
      uint64_t v21 = (os_log_s *)__nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_copy_shared_connection_state";
        char v23 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_54;
      }

      goto LABEL_55;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v21 = (os_log_s *)__nwlog_obj();
    os_log_type_t v22 = type;
    BOOL v25 = os_log_type_enabled(v21, type);
    if (!backtrace_string)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_copy_shared_connection_state";
        char v23 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_54;
      }

      goto LABEL_55;
    }

    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_copy_shared_connection_state";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      BOOL v26 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_44:
      _os_log_impl(&dword_181A5C000, v21, v22, v26, buf, 0x16u);
    }

LABEL_56:
      if (!v6) {
        return 0LL;
      }
LABEL_57:
      free(v6);
      return 0LL;
    }

    if (!v27)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = (os_log_s *)(id)gLogObj;
      char v23 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_utilities_identity_for_key_pair";
        _os_log_impl( &dword_181A5C000,  v7,  v23,  "%{public}s SecIdentityCreate failed, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_55;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v7 = (os_log_s *)(id)gLogObj;
    uint64_t v16 = type;
    os_log_type_t v17 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_utilities_identity_for_key_pair";
        _os_log_impl(&dword_181A5C000, v7, v16, "%{public}s SecIdentityCreate failed, no backtrace", buf, 0xCu);
      }

      goto LABEL_55;
    }

    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      v30 = "nw_utilities_identity_for_key_pair";
      v31 = 2082;
      v32 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v7,  v16,  "%{public}s SecIdentityCreate failed, dumping backtrace:%{public}s",  buf,  0x16u);
    }

  if (v14) {
    free(v14);
  }
  return 0LL;
}

      goto LABEL_56;
    }

    if (!v31)
    {
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v29 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_ws_validate_server_response_with_protocol_options";
        _os_log_impl( &dword_181A5C000,  v14,  v29,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_55;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v25 = type;
    BOOL v26 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_ws_validate_server_response_with_protocol_options";
        _os_log_impl(&dword_181A5C000, v14, v25, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }

      goto LABEL_55;
    }

    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_ws_validate_server_response_with_protocol_options";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v14,  v25,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_37;
  }

    goto LABEL_56;
  }

  __nwlog_obj();
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v34 = "nw_storage_enqueue_flush_and_free_key";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v32.receiver) = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (LOBYTE(v32.receiver) == 17)
  {
    __nwlog_obj();
    BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    receiver = (os_log_type_t)v32.receiver;
    if (os_log_type_enabled(v13, (os_log_type_t)v32.receiver))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_storage_enqueue_flush_and_free_key";
      char v15 = "%{public}s called with null type";
      goto LABEL_48;
    }

    goto LABEL_49;
  }

  if (type == OS_LOG_TYPE_DEFAULT)
  {
    __nwlog_obj();
    BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    receiver = (os_log_type_t)v32.receiver;
    if (os_log_type_enabled(v13, (os_log_type_t)v32.receiver))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_storage_enqueue_flush_and_free_key";
      char v15 = "%{public}s called with null type, backtrace limit exceeded";
      goto LABEL_48;
    }

    goto LABEL_49;
  }

  BOOL v24 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  receiver = (os_log_type_t)v32.receiver;
  BOOL v25 = os_log_type_enabled(v13, (os_log_type_t)v32.receiver);
  if (!v24)
  {
    if (v25)
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_storage_enqueue_flush_and_free_key";
      char v15 = "%{public}s called with null type, no backtrace";
      goto LABEL_48;
    }

    goto LABEL_49;
  }

  if (v25)
  {
    *(_DWORD *)buf = 136446466;
    v34 = "nw_storage_enqueue_flush_and_free_key";
    v35 = 2082;
    v36 = v24;
    _os_log_impl( &dword_181A5C000,  v13,  receiver,  "%{public}s called with null type, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v24);
  if (v12) {
    goto LABEL_51;
  }
LABEL_9:
}

    if (v45) {
      free(v45);
    }
    os_log_type_t v17 = *(void *)(a1 + 32);
    goto LABEL_58;
  }

  if (a2 == 2 && v18 != 2)
  {
    *(_DWORD *)(v17 + 16) = 2;
    BOOL v24 = *(id *)(a1 + 32);
    BOOL v25 = v24;
    if (v24)
    {
      BOOL v26 = v24[12];
      if (v26)
      {
        *(void *)buf = 0LL;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x3032000000LL;
        v85 = __Block_byref_object_copy__49049;
        *(void *)v86 = __Block_byref_object_dispose__49050;
        *(void *)&v86[8] = 0LL;
        __int16 v27 = MEMORY[0x1895F87A8];
        *(void *)os_log_type_t type = MEMORY[0x1895F87A8];
        v79 = 3221225472LL;
        v80 = ___ZL49nwsc_start_outgoing_requests_waiting_for_listenerP31NWConcrete_nw_service_connector_block_invoke;
        v81 = &unk_189BC7820;
        v28 = v24;
        v82 = v28;
        v83 = buf;
        nw_dictionary_apply(v26, (uint64_t)type);
        uint64_t v29 = *(unsigned __int8 **)(*(void *)&buf[8] + 40LL);
        if (v29)
        {
          v76[0] = v27;
          v76[1] = 3221225472LL;
          v76[2] = ___ZL49nwsc_start_outgoing_requests_waiting_for_listenerP31NWConcrete_nw_service_connector_block_invoke_168;
          v76[3] = &unk_189BC85B0;
          v77 = v28;
          nw_array_apply(v29, (uint64_t)v76);
        }

        _Block_object_dispose(buf, 8);
        goto LABEL_30;
      }

      __nwlog_obj();
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nwsc_start_outgoing_requests_waiting_for_listener";
      v61 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v76[0]) = 0;
      if (__nwlog_fault(v61, type, v76))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v65 = type[0];
          if (os_log_type_enabled(v62, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nwsc_start_outgoing_requests_waiting_for_listener";
            _os_log_impl( &dword_181A5C000,  v62,  v65,  "%{public}s called with null serviceConnector->activeOutgoingRequests",  buf,  0xCu);
          }
        }

        else if (LOBYTE(v76[0]))
        {
          v69 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v70 = type[0];
          v71 = os_log_type_enabled(v62, type[0]);
          if (v69)
          {
            if (v71)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nwsc_start_outgoing_requests_waiting_for_listener";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v69;
              _os_log_impl( &dword_181A5C000,  v62,  v70,  "%{public}s called with null serviceConnector->activeOutgoingRequests, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v69);
            if (!v61) {
              goto LABEL_30;
            }
            goto LABEL_95;
          }

          if (v71)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nwsc_start_outgoing_requests_waiting_for_listener";
            _os_log_impl( &dword_181A5C000,  v62,  v70,  "%{public}s called with null serviceConnector->activeOutgoingRequests, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v73 = type[0];
          if (os_log_type_enabled(v62, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nwsc_start_outgoing_requests_waiting_for_listener";
            _os_log_impl( &dword_181A5C000,  v62,  v73,  "%{public}s called with null serviceConnector->activeOutgoingRequests, backtrace limit exceeded",  buf,  0xCu);
          }
        }

        goto LABEL_93;
      }

    free(v29);
    if (!v8) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }

  nwsc_request_stop_path_watcher(v4);
  *((_BYTE *)v5 + 616) &= 0xE7u;
  v73 = 0;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v48 = 0u;
  memset(v47, 0, sizeof(v47));
  if (nwsc_get_identifier(v5->endpoint, (uint64_t)v5->service, v47))
  {
    nw_dictionary_set_value((uint64_t)v3->activeOutgoingRequests, (const char *)v47, 0LL);
    goto LABEL_25;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v6 = (id)gLogObj;
  endpoint = v5->endpoint;
  *(_DWORD *)buf = 136446722;
  v40 = "nw_service_connector_remove_active_outgoing_request";
  v41 = 2114;
  v42 = endpoint;
  v43 = 2082;
  service = v5->service;
  char v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v9 = (os_log_s *)(id)gLogObj;
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v9, type))
    {
      BOOL v11 = v5->endpoint;
      *(_DWORD *)buf = 136446722;
      v40 = "nw_service_connector_remove_active_outgoing_request";
      v41 = 2114;
      v42 = v11;
      v43 = 2082;
      service = v5->service;
      _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s",  buf,  0x20u);
    }

    free(v29);
    if (!v8) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }

  nwsc_unique_connection_shutdown_socket(v3, v4);
  v73 = 0;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v48 = 0u;
  memset(v47, 0, sizeof(v47));
  if (nwsc_get_identifier(p_isa[1], (uint64_t)(p_isa + 2), v47))
  {
    nw_dictionary_set_value((uint64_t)v3->activeConnections, (const char *)v47, 0LL);
    goto LABEL_25;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v6 = (id)gLogObj;
  uint64_t v7 = p_isa[1];
  *(_DWORD *)buf = 136446722;
  v40 = "nw_service_connector_remove_active_connection";
  v41 = 2114;
  v42 = v7;
  v43 = 2082;
  v44 = p_isa + 2;
  char v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v9 = (os_log_s *)(id)gLogObj;
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v9, type))
    {
      BOOL v11 = p_isa[1];
      *(_DWORD *)buf = 136446722;
      v40 = "nw_service_connector_remove_active_connection";
      v41 = 2114;
      v42 = v11;
      v43 = 2082;
      v44 = p_isa + 2;
      _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s Could not get identifier for endpoint %{public}@, service %{public}s",  buf,  0x20u);
    }

    *v55 = 0;
    goto LABEL_56;
  }

      v66 = v46;
      if (!v47)
      {
LABEL_65:
        if ((_DWORD)result != (_DWORD)v66 - (_DWORD)a2) {
          __assert_rtn("lsqpack_enc_enc_str", "lsqpack.c", 823, "(unsigned) (p - dst) == len_size + enc_size_bytes");
        }
        return result;
      }

              v45 = (void *)v42[4];
              if (v45) {
                free(v45);
              }
              free(v42);
              goto LABEL_19;
            }

            if (!*((void *)v69 + 4))
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              *(_DWORD *)buf = 136446722;
              v72 = "copymptcpinfo";
              v73 = 1024;
              *(_DWORD *)v74 = v12;
              *(_WORD *)&v74[4] = 1024;
              *(_DWORD *)&v74[6] = a1;
              v28 = (char *)_os_log_send_and_compose_impl();
              os_log_type_t type = OS_LOG_TYPE_ERROR;
              v67 = 0;
              if (type == OS_LOG_TYPE_FAULT)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                uint64_t v29 = gLogObj;
                v30 = type;
                if (os_log_type_enabled((os_log_t)gLogObj, type))
                {
                  *(_DWORD *)buf = 136446722;
                  v72 = "copymptcpinfo";
                  v73 = 1024;
                  *(_DWORD *)v74 = v12;
                  *(_WORD *)&v74[4] = 1024;
                  *(_DWORD *)&v74[6] = a1;
                  v31 = (os_log_s *)v29;
                  v32 = v30;
                  v33 = "%{public}s NULL conninfo aux data for ifindex %u on fd %d";
                  goto LABEL_63;
                }

      free(v12);
      goto LABEL_56;
    }

    if (a3)
    {
      uint64_t v16 = cached_content_for_protocol[8] + 1LL;
      os_log_type_t v17 = v16 << 31 >> 31;
      cached_content_for_protocol[8] = v16;
      if (v17 == v16 && (v17 & 0x8000000000000000LL) == 0) {
        goto LABEL_75;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v18 = (id)gLogObj;
      __int16 v19 = cached_content_for_protocol[8];
      *(_DWORD *)buf = 136446978;
      v86 = "nw_quic_report_race_result_on_queue";
      v87 = 2082;
      v88 = "association_cache->cancelled_count";
      v89 = 2048;
      v90 = 1LL;
      v91 = 2048;
      v92 = v19;
      BOOL v20 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v83 = 0;
      if (__nwlog_fault(v20, &type, &v83))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v21 = (os_log_s *)(id)gLogObj;
          os_log_type_t v22 = type;
          if (os_log_type_enabled(v21, type))
          {
            char v23 = cached_content_for_protocol[8];
            *(_DWORD *)buf = 136446978;
            v86 = "nw_quic_report_race_result_on_queue";
            v87 = 2082;
            v88 = "association_cache->cancelled_count";
            v89 = 2048;
            v90 = 1LL;
            v91 = 2048;
            v92 = v23;
            _os_log_impl( &dword_181A5C000,  v21,  v22,  "%{public}s Overflow: %{public}s, increment %llu, result %llu",  buf,  0x2Au);
          }
        }

        else if (v83)
        {
          v36 = __nw_create_backtrace_string();
          if (v36)
          {
            v37 = (char *)v36;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v38 = (os_log_s *)(id)gLogObj;
            v39 = type;
            if (os_log_type_enabled(v38, type))
            {
              v40 = cached_content_for_protocol[8];
              *(_DWORD *)buf = 136447234;
              v86 = "nw_quic_report_race_result_on_queue";
              v87 = 2082;
              v88 = "association_cache->cancelled_count";
              v89 = 2048;
              v90 = 1LL;
              v91 = 2048;
              v92 = v40;
              v93 = 2082;
              v94 = v37;
              _os_log_impl( &dword_181A5C000,  v38,  v39,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
            }

            free(v37);
            if (!v20) {
              goto LABEL_68;
            }
            goto LABEL_67;
          }

          __nwlog_obj();
          uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v53 = type;
          if (os_log_type_enabled(v21, type))
          {
            v54 = cached_content_for_protocol[8];
            *(_DWORD *)buf = 136446978;
            v86 = "nw_quic_report_race_result_on_queue";
            v87 = 2082;
            v88 = "association_cache->cancelled_count";
            v89 = 2048;
            v90 = 1LL;
            v91 = 2048;
            v92 = v54;
            _os_log_impl( &dword_181A5C000,  v21,  v53,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace",  buf,  0x2Au);
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v21 = (os_log_s *)(id)gLogObj;
          v49 = type;
          if (os_log_type_enabled(v21, type))
          {
            v50 = cached_content_for_protocol[8];
            *(_DWORD *)buf = 136446978;
            v86 = "nw_quic_report_race_result_on_queue";
            v87 = 2082;
            v88 = "association_cache->cancelled_count";
            v89 = 2048;
            v90 = 1LL;
            v91 = 2048;
            v92 = v50;
            _os_log_impl( &dword_181A5C000,  v21,  v49,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded",  buf,  0x2Au);
          }
        }
      }

      if (!v20)
      {
LABEL_68:
        cached_content_for_protocol[8] = -1;
        goto LABEL_75;
      }

    if (v13) {
      free(v13);
    }
    goto LABEL_6;
  }

  __nwlog_obj();
  char v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v37 = "nw_quic_connection_set_local_identity";
  int v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v34 = 0;
  if (__nwlog_fault(v9, &type, &v34))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_quic_connection_set_local_identity";
        _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
      }
    }

    else if (v34)
    {
      BOOL v20 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v21 = type;
      os_log_type_t v22 = os_log_type_enabled(v10, type);
      if (v20)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          v37 = "nw_quic_connection_set_local_identity";
          v38 = 2082;
          v39 = v20;
          _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v20);
        goto LABEL_50;
      }

      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_quic_connection_set_local_identity";
        _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v29 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_quic_connection_set_local_identity";
        _os_log_impl( &dword_181A5C000,  v10,  v29,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  if (v18) {
LABEL_56:
  }
    free(v18);
}

  if (v18) {
    free(v18);
  }
LABEL_57:
  nw_frame_reset(*(void *)(a1 + 384), 0LL, 0, 0LL, 0LL);
  BOOL v24 = *(void **)(a1 + 384);
  if (v24)
  {
    os_release(v24);
    *(void *)(a1 + 384) = 0LL;
  }

  BOOL v25 = *(void *)(a1 + 608);
  BOOL v26 = *(void **)(a1 + 616);
  if (v25)
  {
    *(void *)(v25 + 616) = v26;
    BOOL v26 = *(void **)(a1 + 616);
  }

  else
  {
    if (!v26) {
      goto LABEL_64;
    }
    *(void *)(*(void *)(a1 + 336) + 968LL) = v26;
  }

  *BOOL v26 = v25;
  *(void *)(a1 + 60_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 616) = 0LL;
LABEL_64:
  __int16 v27 = *(void **)(a1 + 344);
  if (v27)
  {
    os_release(v27);
    *(void *)(a1 + 344) = 0LL;
  }

  v28 = *(void **)(a1 + 352);
  if (v28)
  {
    os_release(v28);
    *(void *)(a1 + 352) = 0LL;
  }

  uint64_t v29 = *(void **)(a1 + 360);
  if (v29)
  {
    os_release(v29);
    *(void *)(a1 + 360) = 0LL;
  }

  v30 = *(void **)(a1 + 392);
  if (v30)
  {
    os_release(v30);
    *(void *)(a1 + 392) = 0LL;
  }

  v31 = *(void **)(a1 + 536);
  if (v31)
  {
    os_release(v31);
    *(void *)(a1 + 536) = 0LL;
  }

  v32 = *(void **)(a1 + 416);
  if (v32)
  {
    os_release(v32);
    *(void *)(a1 + 416) = 0LL;
  }

  v33 = *(void **)(a1 + 424);
  if (v33)
  {
    os_release(v33);
    *(void *)(a1 + 424) = 0LL;
  }

  v34 = *(void **)(a1 + 488);
  if (v34)
  {
    free(v34);
    *(void *)(a1 + 48_Block_object_dispose(va, 8) = 0LL;
  }

  v35 = *(dispatch_object_s **)(a1 + 520);
  if (v35)
  {
    dispatch_release(v35);
    *(void *)(a1 + 520) = 0LL;
  }

  v36 = *(dispatch_object_s **)(a1 + 528);
  if (v36)
  {
    dispatch_release(v36);
    *(void *)(a1 + 52_Block_object_dispose(va, 8) = 0LL;
  }

  (*(void (**)(void, void))(*(void *)(a1 + 328) + 16LL))(*(void *)(a1 + 328), 0LL);
  v37 = *(const void **)(a1 + 328);
  if (v37)
  {
    _Block_release(v37);
    *(void *)(a1 + 32_Block_object_dispose(va, 8) = 0LL;
  }

  if ((*(_BYTE *)(a1 + 512) & 1) != 0)
  {
    v38 = *(void **)(a1 + 504);
    if (v38) {
      os_release(v38);
    }
  }

  *(void *)(a1 + 504) = 0LL;
  if ((*(_BYTE *)(a1 + 440) & 1) != 0)
  {
    v39 = *(const void **)(a1 + 432);
    if (v39) {
      _Block_release(v39);
    }
  }

  *(void *)(a1 + 432) = 0LL;
  if ((*(_BYTE *)(a1 + 408) & 1) != 0)
  {
    v40 = *(void **)(a1 + 400);
    if (v40) {
      os_release(v40);
    }
  }

  free((void *)a1);
}

      if (v40) {
        free(v40);
      }
      id v3 = v39;
      v35 = v37;
    }

    while (v37);
LABEL_58:
    uint64_t v5 = *v2 | (*((unsigned __int8 *)v2 + 2) << 16);
LABEL_59:
    *((_BYTE *)v2 + 2) = BYTE2(v5);
    void *v2 = v5 | 0x1000;
    if ((v5 & 0x400000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v52 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        v53 = *(_DWORD *)(a1 + 1280);
        *(_DWORD *)buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_http3_control_stream_process_input";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v3;
        *(_WORD *)&buf[22] = 2080;
        v282 = " ";
        v283 = 1024;
        v284 = v53;
        v285 = 2048;
        v286 = v269;
        v287 = 2048;
        v288 = v270;
        _os_log_impl( &dword_181A5C000,  v52,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> Dropping oversized frame %llu of type %llu on control stream",  buf,  0x3Au);
      }
    }

    if (v27) {
      free(v27);
    }
    *(_DWORD *)v69 = 0;
    goto LABEL_58;
  }

  os_log_type_t v12 = 0LL;
  if ((*(_WORD *)&a1[6].flow_id[13] & 0x80) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    os_log_type_t v14 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      v71 = "nw_socket_get_output_frames";
      v72 = 2082;
      *(void *)v73 = (char *)a1 + 404;
      _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s Ignoring write while waiting for TFO",  buf,  0x16u);
    }

    return 0LL;
  }

  return v12;
}

    free(backtrace_string);
    if (!v6) {
      return 0LL;
    }
    goto LABEL_34;
  }

  if (*(_UNKNOWN **)(a1 + 40) != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v29 = "nw_socket_unregister_notification";
    id v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v26 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v20 = (os_log_s *)__nwlog_obj();
      uint64_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v29 = "nw_socket_unregister_notification";
      int v9 = "%{public}s called with null socket_handler";
      goto LABEL_65;
    }

    if (!v26)
    {
      BOOL v20 = (os_log_s *)__nwlog_obj();
      uint64_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v29 = "nw_socket_unregister_notification";
      int v9 = "%{public}s called with null socket_handler, backtrace limit exceeded";
      goto LABEL_65;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v20 = (os_log_s *)__nwlog_obj();
    uint64_t v21 = type;
    BOOL v25 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (!v25) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v29 = "nw_socket_unregister_notification";
      int v9 = "%{public}s called with null socket_handler, no backtrace";
      goto LABEL_65;
    }

    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v29 = "nw_socket_unregister_notification";
      v30 = 2082;
      v31 = backtrace_string;
      BOOL v24 = "%{public}s called with null socket_handler, dumping backtrace:%{public}s";
      goto LABEL_54;
    }

    goto LABEL_55;
  }

  id v4 = a1 + 96;
  switch(a3)
  {
    case 0:
      if ((*(_WORD *)(a1 + 397) & 0x80) != 0) {
        return 0LL;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v5 = (char *)(a1 + 404);
      *(_DWORD *)buf = 136446722;
      uint64_t v29 = "nw_socket_unregister_notification";
      v30 = 2082;
      v31 = (char *)(a1 + 404);
      v32 = 2082;
      v33 = "undefined";
      id v6 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      BOOL v26 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v7 = gconnectionLogObj;
        char v8 = type;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
        {
          *(_DWORD *)buf = 136446722;
          uint64_t v29 = "nw_socket_unregister_notification";
          v30 = 2082;
          v31 = v5;
          v32 = 2082;
          v33 = "undefined";
          int v9 = "%{public}s %{public}s invalid registration notification: %{public}s";
LABEL_30:
          os_log_type_t v17 = (os_log_s *)v7;
          BOOL v18 = v8;
LABEL_31:
          __int16 v19 = 32;
          goto LABEL_32;
        }
      }

      else if (v26)
      {
        BOOL v13 = (char *)__nw_create_backtrace_string();
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v14 = (os_log_s *)gconnectionLogObj;
        char v15 = type;
        uint64_t v16 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
        if (v13)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446978;
            uint64_t v29 = "nw_socket_unregister_notification";
            v30 = 2082;
            v31 = v5;
            v32 = 2082;
            v33 = "undefined";
            v34 = 2082;
            v35 = v13;
            _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s %{public}s invalid registration notification: %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v13);
        }

        else if (v16)
        {
          *(_DWORD *)buf = 136446722;
          uint64_t v29 = "nw_socket_unregister_notification";
          v30 = 2082;
          v31 = v5;
          v32 = 2082;
          v33 = "undefined";
          int v9 = "%{public}s %{public}s invalid registration notification: %{public}s, no backtrace";
          os_log_type_t v17 = v14;
          BOOL v18 = v15;
          goto LABEL_31;
        }
      }

      else
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v7 = gconnectionLogObj;
        char v8 = type;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
        {
          *(_DWORD *)buf = 136446722;
          uint64_t v29 = "nw_socket_unregister_notification";
          v30 = 2082;
          v31 = v5;
          v32 = 2082;
          v33 = "undefined";
          int v9 = "%{public}s %{public}s invalid registration notification: %{public}s, backtrace limit exceeded";
          goto LABEL_30;
        }
      }

      break;
    case 1:
      os_log_type_t v10 = *(_DWORD *)(a1 + 288);
      *(_DWORD *)(a1 + 28_Block_object_dispose(va, 8) = 0;
      if ((nw_socket_add_socket_events(v4, 0, 1024, 0) & 1) != 0) {
        return 1LL;
      }
      result = 0LL;
      *(_DWORD *)(a1 + 28_Block_object_dispose(va, 8) = v10;
      return result;
    case 2:
      os_log_type_t v12 = *(_DWORD *)(a1 + 292);
      *(_DWORD *)(a1 + 292) = 0;
      if ((nw_socket_add_socket_events(v4, 0, 512, 0) & 1) != 0) {
        return 1LL;
      }
      result = 0LL;
      *(_DWORD *)(a1 + 292) = v12;
      return result;
    case 3:
      return nw_socket_add_socket_events(v4, 0, 256, 0);
    default:
      return 0LL;
  }

      _os_log_impl(&dword_181A5C000, v14, v15, v16, buf, 0x2Au);
      goto LABEL_56;
    }

    a1 = (unsigned __int16 *)((char *)v3 + v5);
    if (v4 <= 2) {
      return 0LL;
    }
  }

  uint64_t v7 = (unint64_t)a1 + v5 + 2;
  char v8 = (char *)a1 + 47;
  int v9 = (unsigned __int16 *)((char *)a1 + 43);
  while (1)
  {
    os_log_type_t v10 = v8;
    if (*v9 != 256)
    {
      goto LABEL_15;
    }

    BOOL v11 = (unsigned __int16)v9[1];
LABEL_15:
    char v8 = (char *)(v10 + 2);
    int v9 = v10;
  }

  if (v11 != 256) {
    goto LABEL_23;
  }
LABEL_51:
  if (a3) {
    *a3 = v5;
  }
  return v3;
}

        __int16 v19 = 0LL;
LABEL_66:

        goto LABEL_67;
      }

      BOOL v24 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v25 = (id)gLogObj;
      *(_DWORD *)buf = 136446466;
      v56 = "nw_path_create_observer";
      v57 = 1024;
      *(_DWORD *)v58 = v24;
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v53 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v22 = (os_log_s *)(id)gLogObj;
        BOOL v26 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446466;
          v56 = "nw_path_create_observer";
          v57 = 1024;
          *(_DWORD *)v58 = v24;
          _os_log_impl( &dword_181A5C000,  v22,  v26,  "%{public}s necp_open(NECP_OPEN_FLAG_OBSERVER | NECP_OPEN_FLAG_PUSH_OBSERVER) %{darwin.errno}d",  buf,  0x12u);
        }

  if (v11) {
    free(v11);
  }
  char v8 = 0LL;
LABEL_9:

  return v8;
}

      goto LABEL_56;
    }

    __nwlog_obj();
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v29 = "nw_http_messaging_options_find_or_create_client_metadata_in_parameters";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v26 = 0;
    if (__nwlog_fault(v10, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v29 = "nw_http_messaging_options_find_or_create_client_metadata_in_parameters";
          BOOL v13 = "%{public}s called with null below_protocol";
          goto LABEL_47;
        }

        goto LABEL_48;
      }

      if (!v26)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v29 = "nw_http_messaging_options_find_or_create_client_metadata_in_parameters";
          BOOL v13 = "%{public}s called with null below_protocol, backtrace limit exceeded";
          goto LABEL_47;
        }

        goto LABEL_48;
      }

      BOOL v20 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      char v23 = os_log_type_enabled(v11, type);
      if (!v20)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v29 = "nw_http_messaging_options_find_or_create_client_metadata_in_parameters";
          BOOL v13 = "%{public}s called with null below_protocol, no backtrace";
          goto LABEL_47;
        }

        goto LABEL_48;
      }

      if (!v23) {
        goto LABEL_31;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v29 = "nw_http_messaging_options_find_or_create_client_metadata_in_parameters";
      v30 = 2082;
      v31 = v20;
      os_log_type_t v22 = "%{public}s called with null below_protocol, dumping backtrace:%{public}s";
LABEL_30:
      _os_log_impl(&dword_181A5C000, v11, v12, v22, buf, 0x16u);
LABEL_31:

      free(v20);
    }
  }

  else
  {
    __nwlog_obj();
    int v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v29 = "nw_http_messaging_options_find_or_create_client_metadata_in_parameters";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v26 = 0;
    if (__nwlog_fault(v10, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v29 = "nw_http_messaging_options_find_or_create_client_metadata_in_parameters";
          BOOL v13 = "%{public}s called with null parameters";
LABEL_47:
          _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
        }

    free(v24);
    if (!v18) {
      return 0LL;
    }
    goto LABEL_75;
  }

  id v6 = *(void **)(v3 + 96);
  if (v6)
  {
    uint64_t v7 = nw_parameters_copy_protocol_options_legacy(v6, (nw_protocol *)v3);
    if (v7)
    {
      char v8 = v7;
      int v9 = a2;
      os_log_type_t v10 = a3;
      BOOL v11 = nw_protocol_options_copy_definition(v8);
      if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72514);
      }
      is_equal = nw_protocol_definition_is_equal( v11,  (nw_protocol_definition_t)nw_protocol_copy_http_messaging_definition_definition);

      if (is_equal)
      {
        *(void *)os_log_type_t type = 0LL;
        v31 = type;
        v32 = 0x2020000000LL;
        v33 = 1;
        *(void *)buf = MEMORY[0x1895F87A8];
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&buf[16] = __nw_http_messaging_options_can_accept_block_invoke;
        v35 = (const char *)&unk_189BC6608;
        v37 = type;
        BOOL v13 = v9;
        *(void *)&v36 = v13;
        os_log_type_t v14 = v10;
        *((void *)&v36 + 1) = v14;
        nw_protocol_options_access_handle(v8, buf);
        char v15 = *((_BYTE *)v31 + 24) == 0;

        _Block_object_dispose(type, 8);
        if (v15)
        {
          if ((*(_BYTE *)(v3 + 272) & 2) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v16 = (os_log_s *)gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_protocol_http_messaging_accept";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v3 + 188;
              *(_WORD *)&buf[22] = 2080;
              v35 = " ";
              LOWORD(v36) = 2112;
              *(void *)((char *)&v36 + 2) = v13;
              _os_log_impl( &dword_181A5C000,  v16,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%sOverrided accept handler for endpoint %@ rejected join attempt",  buf,  0x2Au);
            }
          }

          os_release(v8);
          return 0LL;
        }
      }

      else
      {
      }

      os_release(v8);
    }
  }

  result = 1LL;
  switch(*(_DWORD *)(v3 + 184))
  {
    case 0:
      return result;
    case 3:
      result = nw_protocol_http1_accept(*(void *)(v3 + 152), (uint64_t)a2, (uint64_t)a3);
      break;
    case 4:
      result = nw_protocol_http2_accept(*(void *)(v3 + 152));
      break;
    case 5:
      result = nw_protocol_http3_accept(*(void *)(v3 + 152));
      break;
    default:
      return 0LL;
  }

  return result;
}

      goto LABEL_56;
    }

    if (!v26)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v25 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_application_id_create_with_serialized_bytes";
        _os_log_impl( &dword_181A5C000,  v10,  v25,  "%{public}s called with null (length <= (sizeof(uuid_t) + sizeof(uuid_t) + sizeof(uint32_t) + 32)), backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_55;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v21 = type[0];
    os_log_type_t v22 = os_log_type_enabled(v10, type[0]);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_application_id_create_with_serialized_bytes";
        _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null (length <= (sizeof(uuid_t) + sizeof(uuid_t) + sizeof(uint32_t) + 32)), no backtrace",  buf,  0xCu);
      }

      goto LABEL_55;
    }

    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_application_id_create_with_serialized_bytes";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null (length <= (sizeof(uuid_t) + sizeof(uuid_t) + sizeof(uint32_t) + 32)), dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_37;
  }

    if (v39) {
      free(v39);
    }
    goto LABEL_8;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v12 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_resolver_details";
  BOOL v13 = (char *)_os_log_send_and_compose_impl();

  type[1] = OS_LOG_TYPE_ERROR;
  type[0] = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v13, &type[1], type))
  {
LABEL_26:
    if (!v13) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }

  if (type[1] == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v14 = (os_log_s *)(id)gLogObj;
    char v15 = type[1];
    if (os_log_type_enabled(v14, type[1]))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_resolver_details";
      _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s Endpoint handler is not a resolver", buf, 0xCu);
    }

    free(v28);
    if (!v16) {
      goto LABEL_15;
    }
    goto LABEL_82;
  }

  if (v7 == v8)
  {
    os_log_type_t v12 = v7[2];
    if (v12 && !nw_path_parameters_get_logging_disabled(*(void *)(v12 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      BOOL v13 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        os_log_type_t v14 = *((_DWORD *)v7 + 112);
        *(_DWORD *)buf = 136446466;
        v49 = "nw_connection_shares_protocol_stack";
        v50 = 1024;
        LODWORD(v51) = v14;
        _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_INFO,  "%{public}s [C%u] shares a protocol stack with itself",  buf,  0x12u);
      }
    }

    block[0] = MEMORY[0x1895F87A8];
    block[1] = 3221225472LL;
    block[2] = __nw_connection_shares_protocol_stack_block_invoke;
    block[3] = &unk_189BC8740;
    v45 = v11;
    dispatch_async(v9, block);
  }

  else
  {
    v39[0] = MEMORY[0x1895F87A8];
    v39[1] = 3221225472LL;
    v39[2] = __nw_connection_shares_protocol_stack_block_invoke_2;
    v39[3] = &unk_189BC7210;
    v40 = v7;
    v41 = v8;
    v42 = v9;
    v43 = v11;
    nw_connection_async_if_needed(v40, v39);
  }
  }

    goto LABEL_56;
  }

  BOOL v25 = *(void **)(a7 + 24);
  if (v25 && *v25)
  {
    if ((nw_protocol_add_input_handler(a7, a8) & 1) != 0)
    {
      BOOL v26 = nw_endpoint_handler_copy_flow(v17);
      __int16 v27 = nw_parameters_copy_context(v86);
      v28 = 0LL;
      v82 = v26;
      v83 = v27;
      do
      {
        a8 = *(void *)(a8 + 32);
      }

      while (a8);
      if (v28) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = a7;
      }
      v81 = nw_path_copy_flow_registration(v27, v29);
      objc_storeStrong((id *)v26 + 104, v81);
      minimize_logging = nw_endpoint_handler_get_minimize_logging(v17);
      logging_disabled = nw_endpoint_handler_get_logging_disabled(v17);
      if (minimize_logging)
      {
        if ((logging_disabled & 1) != 0) {
          goto LABEL_35;
        }
        v79 = v29;
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        log = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
        {
          id_string = nw_endpoint_handler_get_id_string(v17);
          v70 = nw_endpoint_handler_dry_run_string(v17);
          v71 = nw_endpoint_handler_copy_endpoint(v17);
          logging_description = nw_endpoint_get_logging_description(v71);
          v73 = nw_endpoint_handler_state_string(v17);
          v74 = nw_endpoint_handler_mode_string(v17);
          v75 = nw_endpoint_handler_copy_current_path(v17);
          v76 = v75;
          v77 = "invalid";
          if (a7 && *(void *)(a7 + 16)) {
            v77 = *(const char **)(a7 + 16);
          }
          *(_DWORD *)buf = 136448514;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_join_protocol";
          v91 = 2082;
          v92 = (uint64_t)id_string;
          v93 = 2082;
          v94 = (void *)v70;
          v95 = 2082;
          v96 = logging_description;
          v97 = 2082;
          v98 = v73;
          v99 = 2082;
          v100 = v74;
          v101 = 2114;
          v102 = v75;
          v103 = 2082;
          v104 = v77;
          v105 = 1042;
          v106 = 16;
          v107 = 2098;
          v108 = v79;
          _os_log_impl( &dword_181A5C000,  log,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Joined protocol %{public}s, using flow id %{public,uuid_t}.16P",  buf,  0x62u);
        }
      }

      else
      {
        if ((logging_disabled & 1) != 0)
        {
LABEL_35:

          BOOL v18 = v84;
          goto LABEL_68;
        }

        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        v32 = (os_log_s *)(id)gconnectionLogObj;
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
LABEL_34:

          goto LABEL_35;
        }

        v33 = nw_endpoint_handler_get_id_string(v17);
        v34 = nw_endpoint_handler_dry_run_string(v17);
        log = v32;
        v35 = nw_endpoint_handler_copy_endpoint(v17);
        v36 = nw_endpoint_get_logging_description(v35);
        v37 = nw_endpoint_handler_state_string(v17);
        v38 = nw_endpoint_handler_mode_string(v17);
        v39 = v29;
        v40 = nw_endpoint_handler_copy_current_path(v17);
        v41 = v40;
        v42 = "invalid";
        if (a7 && *(void *)(a7 + 16)) {
          v42 = *(const char **)(a7 + 16);
        }
        *(_DWORD *)buf = 136448514;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_join_protocol";
        v91 = 2082;
        v92 = (uint64_t)v33;
        v93 = 2082;
        v94 = (void *)v34;
        v95 = 2082;
        v96 = v36;
        v97 = 2082;
        v98 = v37;
        v99 = 2082;
        v100 = v38;
        v101 = 2114;
        v102 = v40;
        v103 = 2082;
        v104 = v42;
        v105 = 1042;
        v106 = 16;
        v107 = 2098;
        v108 = v39;
        _os_log_impl( &dword_181A5C000,  log,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Joined protocol %{public}s, u sing flow id %{public,uuid_t}.16P",  buf,  0x62u);
      }

      v32 = log;
      goto LABEL_34;
    }

    goto LABEL_59;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v47 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_utilities_add_input_handler";
    v91 = 2048;
    v92 = a7;
    _os_log_impl( &dword_181A5C000,  v47,  OS_LOG_TYPE_ERROR,  "%{public}s Unable to invoke add_input_handler on protocol %p because it is not valid",  buf,  0x16u);
  }

LABEL_58:
  BOOL v18 = v84;
LABEL_59:
  if ((nw_endpoint_handler_get_logging_disabled(v17) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    v53 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      v54 = nw_endpoint_handler_get_id_string(v17);
      v55 = nw_endpoint_handler_dry_run_string(v17);
      v56 = nw_endpoint_handler_copy_endpoint(v17);
      v57 = nw_endpoint_get_logging_description(v56);
      v58 = nw_endpoint_handler_state_string(v17);
      v59 = nw_endpoint_handler_mode_string(v17);
      v60 = nw_endpoint_handler_copy_current_path(v17);
      v61 = v60;
      v62 = *(const char **)(a7 + 16);
      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_join_protocol";
      *(_DWORD *)buf = 136448002;
      if (!v62) {
        v62 = "invalid";
      }
      v91 = 2082;
      v92 = (uint64_t)v54;
      v93 = 2082;
      v94 = (void *)v55;
      v95 = 2082;
      v96 = v57;
      v97 = 2082;
      v98 = v58;
      v99 = 2082;
      v100 = v59;
      v101 = 2114;
      v102 = v60;
      v103 = 2082;
      v104 = v62;
      _os_log_impl( &dword_181A5C000,  v53,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to join protocol %{public}s",  buf,  0x52u);
    }

    BOOL v18 = v84;
  }

  *a10 = 1;
LABEL_68:

  return v85;
}

    free(v13);
    goto LABEL_56;
  }

  uint64_t v5 = (NWConcrete_nw_endpoint_handler *)v3;
  mode = v5->mode;

  if ((_DWORD)mode != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v11 = (id)gLogObj;
    else {
      os_log_type_t v12 = off_189BBBBC0[mode];
    }
    *(_DWORD *)buf = 136446722;
    v53 = "nw_endpoint_flow_pre_attach_protocols";
    v54 = 2082;
    v55 = (void *)v12;
    v56 = 2082;
    v57 = "flow";
    BOOL v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v50 = 0;
    if (__nwlog_fault(v13, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = (os_log_s *)(id)gLogObj;
        char v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          else {
            uint64_t v16 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          v53 = "nw_endpoint_flow_pre_attach_protocols";
          v54 = 2082;
          v55 = (void *)v16;
          v56 = 2082;
          v57 = "flow";
          _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

      else if (v50)
      {
        os_log_type_t v17 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = (os_log_s *)(id)gLogObj;
        BOOL v18 = type;
        __int16 v19 = os_log_type_enabled(v14, type);
        if (v17)
        {
          if (v19)
          {
            else {
              BOOL v20 = off_189BBBBC0[mode];
            }
            *(_DWORD *)buf = 136446978;
            v53 = "nw_endpoint_flow_pre_attach_protocols";
            v54 = 2082;
            v55 = (void *)v20;
            v56 = 2082;
            v57 = "flow";
            v58 = 2082;
            v59 = v17;
            _os_log_impl( &dword_181A5C000,  v14,  v18,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v17);
          if (!v13) {
            goto LABEL_56;
          }
          goto LABEL_55;
        }

        if (v19)
        {
          else {
            v32 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          v53 = "nw_endpoint_flow_pre_attach_protocols";
          v54 = 2082;
          v55 = (void *)v32;
          v56 = 2082;
          v57 = "flow";
          _os_log_impl( &dword_181A5C000,  v14,  v18,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = (os_log_s *)(id)gLogObj;
        uint64_t v29 = type;
        if (os_log_type_enabled(v14, type))
        {
          else {
            v30 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          v53 = "nw_endpoint_flow_pre_attach_protocols";
          v54 = 2082;
          v55 = (void *)v30;
          v56 = 2082;
          v57 = "flow";
          _os_log_impl( &dword_181A5C000,  v14,  v29,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }
      }

    if (v31) {
      free(v31);
    }
    if (v17) {
      free((void *)v17);
    }
    os_log_type_t v12 = 0LL;
    goto LABEL_74;
  }

  __int16 v19 = v18;
  if ((*(_BYTE *)(a1 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      v55 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
      {
        v56 = *(_DWORD *)(a1 + 148);
        *(_DWORD *)buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_append_reassembled_packets";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = a1 + 159;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&buf[24] = " ";
        LOWORD(v93) = 2048;
        *(void *)((char *)&v93 + 2) = a1;
        WORD5(v93) = 1024;
        HIDWORD(v93) = v56;
        *(_WORD *)v94 = 1024;
        *(_DWORD *)&v94[2] = v16;
        _os_log_impl( &dword_181A5C000,  v55,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s%p Fragments for IPv6 Fragment ID %u are complete, aggregate length %u",  buf,  0x36u);
      }
    }
  }

  BOOL v20 = *(void *)(a1 + 88);
  v77 = 0;
  uint64_t v21 = nw_frame_unclaimed_bytes(v20, &v77);
  if (v21)
  {
    if (v77 > 0x27)
    {
      char v23 = *(void *)(v21 + 32);
      BOOL v24 = *(_OWORD *)(v21 + 16);
      *(_OWORD *)os_log_type_t v17 = *(_OWORD *)v21;
      *(_OWORD *)(v17 + 16) = v24;
      *(void *)(v17 + 32) = v23;
      *(_WORD *)(v17 + 4) = bswap32(*((unsigned __int16 *)v85 + 12)) >> 16;
      if ((*(_WORD *)(v19 + 204) & 8) == 0)
      {
        BOOL v25 = v19 + 120;
        BOOL v26 = *(void **)(v19 + 168);
        if (v26)
        {
          os_release(v26);
          BOOL v25 = v19 + 120;
          *(void *)(v19 + 16_Block_object_dispose(va, 8) = 0LL;
        }

        __int16 v27 = *(void *)(v19 + 64);
        *(_BYTE *)(v19 + 186) |= 0x40u;
        if (v27)
        {
          if (v27 != v25)
          {
            v28 = v25;
            __nwlog_obj();
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "__nw_frame_set_metadata";
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v27;
            *(_WORD *)&buf[22] = 2048;
            v68 = v28;
            *(void *)&buf[24] = v28;
            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(v75[0]) = 0;
            v69 = (char *)_os_log_send_and_compose_impl();
            if (__nwlog_fault(v69, type, v75))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                uint64_t v29 = (os_log_s *)__nwlog_obj();
                v67 = type[0];
                if (os_log_type_enabled(v29, type[0]))
                {
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "__nw_frame_set_metadata";
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v27;
                  *(_WORD *)&buf[22] = 2048;
                  *(void *)&buf[24] = v68;
                  v30 = "%{public}s Existing metadata %p doesn't match expected %p";
LABEL_62:
                  v39 = v29;
LABEL_63:
                  _os_log_impl(&dword_181A5C000, v39, v67, v30, buf, 0x20u);
                }
              }

              else if (LOBYTE(v75[0]))
              {
                v37 = (char *)__nw_create_backtrace_string();
                log = (os_log_s *)__nwlog_obj();
                v67 = type[0];
                v38 = os_log_type_enabled(log, type[0]);
                if (v37)
                {
                  if (v38)
                  {
                    *(_DWORD *)buf = 136446978;
                    *(void *)&uint8_t buf[4] = "__nw_frame_set_metadata";
                    *(_WORD *)&buf[12] = 2048;
                    *(void *)&buf[14] = v27;
                    *(_WORD *)&buf[22] = 2048;
                    *(void *)&buf[24] = v68;
                    LOWORD(v93) = 2082;
                    *(void *)((char *)&v93 + 2) = v37;
                    _os_log_impl( &dword_181A5C000,  log,  v67,  "%{public}s Existing metadata %p doesn't match expected %p, dumping backtrace:%{public}s",  buf,  0x2Au);
                  }

                  free(v37);
                  goto LABEL_64;
                }

                if (v38)
                {
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "__nw_frame_set_metadata";
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v27;
                  *(_WORD *)&buf[22] = 2048;
                  *(void *)&buf[24] = v68;
                  v30 = "%{public}s Existing metadata %p doesn't match expected %p, no backtrace";
                  v39 = log;
                  goto LABEL_63;
                }
              }

              else
              {
                uint64_t v29 = (os_log_s *)__nwlog_obj();
                v67 = type[0];
                if (os_log_type_enabled(v29, type[0]))
                {
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "__nw_frame_set_metadata";
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v27;
                  *(_WORD *)&buf[22] = 2048;
                  *(void *)&buf[24] = v68;
                  v30 = "%{public}s Existing metadata %p doesn't match expected %p, backtrace limit exceeded";
                  goto LABEL_62;
                }
              }
            }

      if (!v41)
      {
LABEL_57:
        v39 = 0LL;
LABEL_58:

        goto LABEL_59;
      }

          goto LABEL_68;
        }

        if (!LOBYTE(v73.receiver))
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v43 = (os_log_s *)(id)gLogObj;
          v49 = buf[0];
          if (os_log_type_enabled(v43, (os_log_type_t)buf[0]))
          {
            *(_DWORD *)label = 136446210;
            *(void *)&label[4] = "nw_masque_server_create";
            _os_log_impl( &dword_181A5C000,  v43,  v49,  "%{public}s [nw_masque_server initWithParameters:clientQueue:] failed, backtrace limit exceeded",  (uint8_t *)label,  0xCu);
          }

          goto LABEL_55;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v46 = (os_log_s *)(id)gLogObj;
        v47 = buf[0];
        v48 = os_log_type_enabled(v46, (os_log_type_t)buf[0]);
        if (backtrace_string)
        {
          if (v48)
          {
            *(_DWORD *)label = 136446466;
            *(void *)&label[4] = "nw_masque_server_create";
            *(_WORD *)&label[12] = 2082;
            *(void *)&label[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v46,  v47,  "%{public}s [nw_masque_server initWithParameters:clientQueue:] failed, dumping backtrace:%{public}s",  (uint8_t *)label,  0x16u);
          }

          free(backtrace_string);
          if (!v42) {
            goto LABEL_70;
          }
          goto LABEL_69;
        }

        if (v48)
        {
          *(_DWORD *)label = 136446210;
          *(void *)&label[4] = "nw_masque_server_create";
          _os_log_impl( &dword_181A5C000,  v46,  v47,  "%{public}s [nw_masque_server initWithParameters:clientQueue:] failed, no backtrace",  (uint8_t *)label,  0xCu);
        }
      }

void sub_181B00454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_transform_add_children(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v75 = *MEMORY[0x1895F89C0];
  v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
    v31 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v67) = 0;
    if (__nwlog_fault(v31, type, &v67))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v33 = type[0];
        if (os_log_type_enabled(v32, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_181A5C000, v32, v33, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if ((_BYTE)v67)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v35 = type[0];
        BOOL v36 = os_log_type_enabled(v32, type[0]);
        if (backtrace_string)
        {
          if (v36)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v32,  v35,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }

        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_181A5C000, v32, v35, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v37 = type[0];
        if (os_log_type_enabled(v32, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl( &dword_181A5C000,  v32,  v37,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181B00DAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, void *a23, void *a24, void *a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, id a34, char a35)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v40 - 176), 8);

  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

NWConcrete_nw_endpoint_mode_handler *nw_endpoint_handler_copy_transform(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  v1 = a1;
  uint64_t v2 = v1;
  if (v1->mode == 5)
  {
    id v3 = v1->mode_handler;
  }

  else
  {
    if ((*((_BYTE *)v1 + 268) & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      id v4 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        if ((*((_BYTE *)v2 + 268) & 1) != 0) {
          uint64_t v5 = "dry-run ";
        }
        else {
          uint64_t v5 = "";
        }
        nw_endpoint_t v6 = nw_endpoint_handler_copy_endpoint(v2);
        logging_description = nw_endpoint_get_logging_description(v6);
        uint64_t state = v2->state;
        int v9 = logging_description;
        else {
          id v10 = off_189BBBBF0[state];
        }
        os_log_type_t v22 = v10;
        BOOL v11 = v2;
        os_log_type_t v12 = (os_unfair_lock_s *)v11;
        BOOL v13 = "path";
        switch(v2->mode)
        {
          case 0:
            break;
          case 1:
            BOOL v13 = "resolver";
            break;
          case 2:
            BOOL v13 = nw_endpoint_flow_mode_string(v11->mode_handler);
            break;
          case 3:
            BOOL v13 = "proxy";
            break;
          case 4:
            BOOL v13 = "fallback";
            break;
          case 5:
            BOOL v13 = "transform";
            break;
          default:
            BOOL v13 = "unknown-mode";
            break;
        }

        id v14 = v12 + 28;
        id v15 = v12;
        os_unfair_lock_lock(v12 + 28);
        id v16 = v15[8];
        os_unfair_lock_unlock(v14);

        id v17 = v16;
        uint64_t v18 = v15;
        BOOL v19 = v18;
        BOOL v20 = "path";
        switch(v2->mode)
        {
          case 0:
            break;
          case 1:
            BOOL v20 = "resolver";
            break;
          case 2:
            BOOL v20 = nw_endpoint_flow_mode_string(v18[31]);
            break;
          case 3:
            BOOL v20 = "proxy";
            break;
          case 4:
            BOOL v20 = "fallback";
            break;
          case 5:
            BOOL v20 = "transform";
            break;
          default:
            BOOL v20 = "unknown-mode";
            break;
        }

        *(_DWORD *)buf = 136448002;
        uint64_t v24 = "nw_endpoint_handler_copy_transform";
        __int16 v25 = 2082;
        id_str = v2->id_str;
        __int16 v27 = 2082;
        v28 = v5;
        __int16 v29 = 2082;
        v30 = v9;
        __int16 v31 = 2082;
        v32 = v22;
        __int16 v33 = 2082;
        v34 = v13;
        __int16 v35 = 2114;
        id v36 = v17;
        __int16 v37 = 2082;
        id v38 = v20;
        _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Endpoint handler is %{public} s, not transform",  buf,  0x52u);
      }
    }

    id v3 = 0LL;
  }

  return v3;
}

void sub_181B01168(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_parameters_copy_transform_array(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[20];
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v16 = "nw_parameters_copy_transform_array";
  nw_endpoint_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_parameters_copy_transform_array";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v16 = "nw_parameters_copy_transform_array";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_parameters_copy_transform_array";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_parameters_copy_transform_array";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

id nw_protocol_transform_copy_endpoint(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[4];
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v16 = "nw_protocol_transform_copy_endpoint";
  nw_endpoint_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_protocol_transform_copy_endpoint";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v16 = "nw_protocol_transform_copy_endpoint";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_protocol_transform_copy_endpoint";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_protocol_transform_copy_endpoint";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_protocol_transform_supports_endpoint(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_transform_supports_endpoint";
    char v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_transform_supports_endpoint";
        _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null transform", buf, 0xCu);
      }

      goto LABEL_41;
    }

    if (!v27)
    {
      __nwlog_obj();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_transform_supports_endpoint";
        _os_log_impl( &dword_181A5C000,  v14,  v23,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_41;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v19 = type;
    BOOL v20 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_transform_supports_endpoint";
        _os_log_impl(&dword_181A5C000, v14, v19, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }

      goto LABEL_41;
    }

    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_transform_supports_endpoint";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v14,  v19,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_29;
  }

  if (!v4)
  {
    __nwlog_obj();
    id v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_transform_supports_endpoint";
    char v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_transform_supports_endpoint";
        _os_log_impl(&dword_181A5C000, v14, v17, "%{public}s called with null endpoint", buf, 0xCu);
      }

void sub_181B01C88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_transform_contains_protocol(void *a1, void *a2)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_transform_contains_protocol";
    os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_transform_contains_protocol";
        _os_log_impl(&dword_181A5C000, v20, v21, "%{public}s called with null transform", buf, 0xCu);
      }
    }

    else if (v37)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_transform_contains_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v20,  v25,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_67:
        if (!v19) {
          goto LABEL_69;
        }
LABEL_68:
        free(v19);
        goto LABEL_69;
      }

      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_transform_contains_protocol";
        _os_log_impl(&dword_181A5C000, v20, v25, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_transform_contains_protocol";
        _os_log_impl( &dword_181A5C000,  v20,  v30,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181B02388( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

nw_protocol_options_t nw_protocol_stack_copy_transport_protocol(nw_protocol_stack_t stack)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  v1 = stack;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = (nw_protocol_options *)v1[3];
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_protocol_stack_copy_transport_protocol";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_stack_copy_transport_protocol";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null stack", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_protocol_stack_copy_transport_protocol";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null stack, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_stack_copy_transport_protocol";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_stack_copy_transport_protocol";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null stack, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void __nw_protocol_transform_contains_protocol_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!*(_BYTE *)(a1 + 48))
  {
    goto LABEL_3;
  }

  if (nw_protocol_options_is_quic((nw_protocol_options_t)v3)) {
LABEL_3:
  }
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
LABEL_4:
}

void sub_181B026F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

nw_protocol_options_t nw_protocol_stack_copy_internet_protocol(nw_protocol_stack_t stack)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  v1 = stack;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = (nw_protocol_options *)v1[6];
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_protocol_stack_copy_internet_protocol";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_stack_copy_internet_protocol";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null stack", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_protocol_stack_copy_internet_protocol";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null stack, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_stack_copy_internet_protocol";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_stack_copy_internet_protocol";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null stack, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_protocol_transform_get_prohibit_direct(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[8] >> 4) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_protocol_transform_get_prohibit_direct";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_transform_get_prohibit_direct";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_protocol_transform_get_prohibit_direct";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_transform_get_prohibit_direct";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_protocol_transform_get_prohibit_direct";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_protocol_transform_modify_parameters(void *a1, void *a2)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v45 = "nw_protocol_transform_modify_parameters";
    os_log_type_t v25 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v43 = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (v43 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = v43;
      if (os_log_type_enabled(v26, v43))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v45 = "nw_protocol_transform_modify_parameters";
        _os_log_impl(&dword_181A5C000, v26, v27, "%{public}s called with null transform", buf, 0xCu);
      }
    }

    else if (v42)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v31 = v43;
      BOOL v32 = os_log_type_enabled(v26, v43);
      if (backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v45 = "nw_protocol_transform_modify_parameters";
          __int16 v46 = 2082;
          v47 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v26,  v31,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_69:
        if (!v25) {
          goto LABEL_30;
        }
LABEL_70:
        free(v25);
        goto LABEL_30;
      }

      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v45 = "nw_protocol_transform_modify_parameters";
        _os_log_impl(&dword_181A5C000, v26, v31, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v36 = v43;
      if (os_log_type_enabled(v26, v43))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v45 = "nw_protocol_transform_modify_parameters";
        _os_log_impl( &dword_181A5C000,  v26,  v36,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181B03328( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23)
{
  _Unwind_Resume(a1);
}

void __nw_protocol_transform_modify_parameters_block_invoke_2(uint64_t a1, void *a2)
{
}

void nw_protocol_stack_set_transport_protocol(nw_protocol_stack_t stack, nw_protocol_options_t protocol)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v3 = stack;
  id v4 = protocol;
  if (v3)
  {
    objc_storeStrong(v3 + 3, protocol);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v16 = "nw_protocol_stack_set_transport_protocol";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unsigned int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_protocol_stack_set_transport_protocol";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null stack", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unsigned int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v16 = "nw_protocol_stack_set_transport_protocol";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null stack, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_protocol_stack_set_transport_protocol";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      unsigned int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_protocol_stack_set_transport_protocol";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null stack, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_protocol_stack_set_internet_protocol(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 6, a2);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v16 = "nw_protocol_stack_set_internet_protocol";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unsigned int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_protocol_stack_set_internet_protocol";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null stack", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unsigned int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v16 = "nw_protocol_stack_set_internet_protocol";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null stack, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_protocol_stack_set_internet_protocol";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      unsigned int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_protocol_stack_set_internet_protocol";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null stack, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_protocol_transform_get_fallback_mode(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[4];
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v16 = "nw_protocol_transform_get_fallback_mode";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unsigned int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_protocol_transform_get_fallback_mode";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unsigned int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v16 = "nw_protocol_transform_get_fallback_mode";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null transform, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_protocol_transform_get_fallback_mode";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      unsigned int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_protocol_transform_get_fallback_mode";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null transform, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_endpoint_transform_start_next_child(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v256 = *MEMORY[0x1895F89C0];
  v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v239 = "nw_endpoint_transform_start_next_child";
    v85 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v237 = OS_LOG_TYPE_ERROR;
    char v236 = 0;
    if (__nwlog_fault(v85, &v237, &v236))
    {
      if (v237 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v86 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v87 = v237;
        if (os_log_type_enabled(v86, v237))
        {
          *(_DWORD *)buf = 136446210;
          v239 = "nw_endpoint_transform_start_next_child";
          _os_log_impl(&dword_181A5C000, v86, v87, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v236)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v86 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v92 = v237;
        BOOL v93 = os_log_type_enabled(v86, v237);
        if (backtrace_string)
        {
          if (v93)
          {
            *(_DWORD *)buf = 136446466;
            v239 = "nw_endpoint_transform_start_next_child";
            __int16 v240 = 2082;
            id_str = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v86,  v92,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_186;
        }

        if (v93)
        {
          *(_DWORD *)buf = 136446210;
          v239 = "nw_endpoint_transform_start_next_child";
          _os_log_impl(&dword_181A5C000, v86, v92, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v86 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v94 = v237;
        if (os_log_type_enabled(v86, v237))
        {
          *(_DWORD *)buf = 136446210;
          v239 = "nw_endpoint_transform_start_next_child";
          _os_log_impl( &dword_181A5C000,  v86,  v94,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

LABEL_186:
    if (v85) {
      free(v85);
    }
    goto LABEL_90;
  }

  uint64_t v3 = v1;
  uint64_t mode = v3->mode;

  if ((_DWORD)mode == 5)
  {
    uint64_t v5 = nw_endpoint_handler_copy_transform(v3);
    id v6 = v5;
    uint64_t v7 = *((void *)v5 + 1);
    if (!v7 || *(void *)(v7 + 24) == *(void *)(v7 + 16))
    {
      nw_endpoint_handler_handle_failure(v3);
      id v16 = -[NWConcrete_nw_error initWithDomain:code:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_error), 1, 22);
      v3->event = (nw_endpoint_handler_event_s)131079;
      nw_endpoint_handler_report(v3, 0LL, &v3->event.domain, v16);

LABEL_89:
      goto LABEL_90;
    }

    unint64_t v8 = *((unsigned int *)v5 + 10);
    int v9 = v3;
    uint64_t v10 = v3->mode;

    v229 = v6;
    size_t v227 = v8;
    if ((_DWORD)v10 != 5)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v17 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        else {
          id v18 = off_189BBBBC0[v10];
        }
        *(_DWORD *)buf = 136446722;
        v239 = "nw_endpoint_transform_get_child_at_index";
        __int16 v240 = 2082;
        id_str = (char *)v18;
        __int16 v242 = 2082;
        v243 = "transform";
        _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
      }

      goto LABEL_36;
    }

    BOOL v11 = nw_endpoint_handler_copy_transform(v9);
    uint64_t v12 = *((void *)v11 + 1);
    if (v12)
    {
      uint64_t v13 = *(void *)(v12 + 24) - *(void *)(v12 + 16);
      if (v13)
      {
        if (v8 < v13 >> 3)
        {
          nw_array_get_object_at_index(v12, v8);
          id v230 = (id)objc_claimAutoreleasedReturnValue();
          goto LABEL_25;
        }

        if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v9) & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v147 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v147, OS_LOG_TYPE_DEBUG))
          {
            id_string = nw_endpoint_handler_get_id_string(v9);
            v231 = nw_endpoint_handler_dry_run_string(v9);
            nw_endpoint_t v149 = nw_endpoint_handler_copy_endpoint(v9);
            logging_description = nw_endpoint_get_logging_description(v149);
            v150 = nw_endpoint_handler_state_string(v9);
            v151 = nw_endpoint_handler_mode_string(v9);
            id v152 = nw_endpoint_handler_copy_current_path(v9);
            *(_DWORD *)buf = 136448002;
            v239 = "nw_endpoint_transform_get_child_at_index";
            __int16 v240 = 2082;
            id_str = (char *)id_string;
            __int16 v242 = 2082;
            v243 = v231;
            __int16 v244 = 2082;
            v245 = logging_description;
            __int16 v246 = 2082;
            v247 = v150;
            __int16 v248 = 2082;
            v249 = v151;
            __int16 v250 = 2114;
            id v251 = v152;
            __int16 v252 = 1024;
            LODWORD(v253) = v227;
            _os_log_impl( &dword_181A5C000,  v147,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] no child at index %u",  buf,  0x4Eu);
          }
        }
      }
    }

    id v230 = 0LL;
LABEL_25:

    if (v230)
    {
      uint64_t v20 = *((void *)v229 + 8);
      if (v20)
      {
        nw_queue_cancel_source(v20, v19);
        *((void *)v229 + _Block_object_dispose(va, 8) = 0LL;
      }

      os_log_type_t v21 = (void *)*((void *)v229 + 3);
      if (v21 && xpc_array_get_count(v21) > v227)
      {
        int64_t int64 = xpc_array_get_int64(*((xpc_object_t *)v229 + 3), v227);
        else {
          int v23 = 1;
        }
        else {
          int v24 = v23;
        }
      }

      else
      {
        int v24 = 1;
      }

      ++*((_DWORD *)v229 + 10);
      if (!(_DWORD)v227)
      {
        id v38 = (id *)v230;
        id v39 = v38[4];

        if (v39)
        {
          int upper_transport_protocol = nw_parameters_get_upper_transport_protocol(v39);
          if (upper_transport_protocol != 253) {
            int upper_transport_protocol = nw_parameters_get_ip_protocol(v39);
          }
          *((_DWORD *)v229 + 20) = upper_transport_protocol;
        }
      }

      nw_endpoint_handler_start(v230);
      uint64_t v41 = v9;
      int state = v41->state;

      if ((state & 0xFFFFFFFE) == 4)
      {
        if (nw_endpoint_handler_get_minimize_logging(v41))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          os_log_type_t v27 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
          {
            v140 = nw_endpoint_handler_get_id_string(v41);
            v141 = nw_endpoint_handler_dry_run_string(v41);
            nw_endpoint_t v142 = nw_endpoint_handler_copy_endpoint(v41);
            v143 = nw_endpoint_get_logging_description(v142);
            v144 = nw_endpoint_handler_state_string(v41);
            v145 = nw_endpoint_handler_mode_string(v41);
            id v146 = nw_endpoint_handler_copy_current_path(v41);
            *(_DWORD *)buf = 136447746;
            v239 = "nw_endpoint_transform_start_next_child";
            __int16 v240 = 2082;
            id_str = (char *)v140;
            __int16 v242 = 2082;
            v243 = v141;
            __int16 v244 = 2082;
            v245 = v143;
            __int16 v246 = 2082;
            v247 = v144;
            __int16 v248 = 2082;
            v249 = v145;
            __int16 v250 = 2114;
            id v251 = v146;
            _os_log_impl( &dword_181A5C000,  v27,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Not starting next child t imer, handler cancelled or failed",  buf,  0x48u);
          }

          goto LABEL_86;
        }

        os_log_type_t v43 = v41;
        BOOL v44 = (*((_BYTE *)v43 + 268) & 0x20) == 0;

        if (v44)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          os_log_type_t v27 = (os_log_s *)(id)gconnectionLogObj;
          if (!os_log_type_enabled(v27, OS_LOG_TYPE_INFO)) {
            goto LABEL_86;
          }
          os_log_type_t v45 = nw_endpoint_handler_get_id_string(v43);
          __int16 v46 = nw_endpoint_handler_dry_run_string(v43);
          nw_endpoint_t v47 = nw_endpoint_handler_copy_endpoint(v43);
          uint64_t v48 = nw_endpoint_get_logging_description(v47);
          v49 = nw_endpoint_handler_state_string(v43);
          v50 = nw_endpoint_handler_mode_string(v43);
          id v51 = nw_endpoint_handler_copy_current_path(v43);
          *(_DWORD *)buf = 136447746;
          v239 = "nw_endpoint_transform_start_next_child";
          __int16 v240 = 2082;
          id_str = (char *)v45;
          __int16 v242 = 2082;
          v243 = v46;
          __int16 v244 = 2082;
          v245 = v48;
          __int16 v246 = 2082;
          v247 = v49;
          __int16 v248 = 2082;
          v249 = v50;
          __int16 v250 = 2114;
          id v251 = v51;
          v52 = v27;
          _os_log_impl( &dword_181A5C000,  v27,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Not starting next child tim er, handler cancelled or failed",  buf,  0x48u);

          goto LABEL_79;
        }

        goto LABEL_87;
      }

      v57 = v41;
      int v58 = v3->mode;

      if (v58 != 5)
      {
        int minimize_logging = nw_endpoint_handler_get_minimize_logging(v57);
        char logging_disabled = nw_endpoint_handler_get_logging_disabled(v57);
        if (minimize_logging)
        {
          if ((logging_disabled & 1) != 0) {
            goto LABEL_87;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          os_log_type_t v27 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
          {
            v153 = nw_endpoint_handler_get_id_string(v57);
            v154 = nw_endpoint_handler_dry_run_string(v57);
            nw_endpoint_t v155 = nw_endpoint_handler_copy_endpoint(v57);
            v156 = nw_endpoint_get_logging_description(v155);
            v157 = nw_endpoint_handler_state_string(v57);
            v158 = nw_endpoint_handler_mode_string(v57);
            id v159 = nw_endpoint_handler_copy_current_path(v57);
            *(_DWORD *)buf = 136447746;
            v239 = "nw_endpoint_transform_start_next_child";
            __int16 v240 = 2082;
            id_str = (char *)v153;
            __int16 v242 = 2082;
            v243 = v154;
            __int16 v244 = 2082;
            v245 = v156;
            __int16 v246 = 2082;
            v247 = v157;
            __int16 v248 = 2082;
            v249 = v158;
            __int16 v250 = 2114;
            id v251 = v159;
            _os_log_impl( &dword_181A5C000,  v27,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Not starting next child t imer, no longer transform mode",  buf,  0x48u);
          }

          goto LABEL_86;
        }

        if ((logging_disabled & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          os_log_type_t v27 = (os_log_s *)(id)gconnectionLogObj;
          if (!os_log_type_enabled(v27, OS_LOG_TYPE_INFO)) {
            goto LABEL_86;
          }
          v72 = nw_endpoint_handler_get_id_string(v57);
          v73 = nw_endpoint_handler_dry_run_string(v57);
          nw_endpoint_t v74 = nw_endpoint_handler_copy_endpoint(v57);
          uint64_t v75 = nw_endpoint_get_logging_description(v74);
          v76 = nw_endpoint_handler_state_string(v57);
          v77 = nw_endpoint_handler_mode_string(v57);
          id v78 = nw_endpoint_handler_copy_current_path(v57);
          *(_DWORD *)buf = 136447746;
          v239 = "nw_endpoint_transform_start_next_child";
          __int16 v240 = 2082;
          id_str = (char *)v72;
          __int16 v242 = 2082;
          v243 = v73;
          __int16 v244 = 2082;
          v245 = v75;
          __int16 v246 = 2082;
          v247 = v76;
          __int16 v248 = 2082;
          v249 = v77;
          __int16 v250 = 2114;
          id v251 = v78;
          v52 = v27;
          _os_log_impl( &dword_181A5C000,  v27,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Not starting next child tim er, no longer transform mode",  buf,  0x48u);

LABEL_79:
          os_log_type_t v27 = v52;
LABEL_86:
        }

                goto LABEL_187;
              }

              v122 = v111;
              nw_endpoint_t v123 = v2->mode;

              if (v123 != 1)
              {
                v125 = nw_endpoint_handler_get_minimize_logging(v122);
                v126 = nw_endpoint_handler_get_logging_disabled(v122);
                if (v125)
                {
                  if ((v126 & 1) != 0) {
                    goto LABEL_186;
                  }
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                  }
                  v99 = (id)gconnectionLogObj;
                  if (os_log_type_enabled((os_log_t)v99, OS_LOG_TYPE_DEBUG))
                  {
                    v210 = nw_endpoint_handler_get_id_string(v122);
                    v211 = nw_endpoint_handler_dry_run_string(v122);
                    v212 = nw_endpoint_handler_copy_endpoint(v122);
                    v213 = nw_endpoint_get_logging_description(v212);
                    v214 = nw_endpoint_handler_state_string(v122);
                    v215 = nw_endpoint_handler_mode_string(v122);
                    v216 = nw_endpoint_handler_copy_current_path(v122);
                    *(_DWORD *)buf = 136447746;
                    *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v210;
                    __int16 v250 = 2082;
                    id v251 = v211;
                    __int16 v252 = 2082;
                    unint64_t v253 = v213;
                    __int16 v254 = 2082;
                    v255 = v214;
                    uint64_t v256 = 2082;
                    v257 = v215;
                    v258 = 2114;
                    v259 = v216;
                    _os_log_impl( &dword_181A5C000,  (os_log_t)v99,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Not starting next child timer, no longer resolver mode",  buf,  0x48u);
                  }

                  goto LABEL_185;
                }

                if ((v126 & 1) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                  }
                  v99 = (id)gconnectionLogObj;
                  if (os_log_type_enabled((os_log_t)v99, OS_LOG_TYPE_INFO))
                  {
                    id v127 = nw_endpoint_handler_get_id_string(v122);
                    id v128 = nw_endpoint_handler_dry_run_string(v122);
                    uint64_t v129 = nw_endpoint_handler_copy_endpoint(v122);
                    dispatch_time_t v130 = nw_endpoint_get_logging_description(v129);
                    uint64_t v131 = nw_endpoint_handler_state_string(v122);
                    v132 = nw_endpoint_handler_mode_string(v122);
                    v133 = nw_endpoint_handler_copy_current_path(v122);
                    *(_DWORD *)buf = 136447746;
                    *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v127;
                    __int16 v250 = 2082;
                    id v251 = v128;
                    __int16 v252 = 2082;
                    unint64_t v253 = v130;
                    __int16 v254 = 2082;
                    v255 = v131;
                    uint64_t v256 = 2082;
                    v257 = v132;
                    v258 = 2114;
                    v259 = v133;
                    _os_log_impl( &dword_181A5C000,  (os_log_t)v99,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Not starting next child timer, no longer resolver mode",  buf,  0x48u);
                  }

                  goto LABEL_185;
                }

                goto LABEL_186;
              }

              if (*((void *)v243 + 4)) {
                goto LABEL_186;
              }
              v124 = v243;
              if ((*((_BYTE *)v243 + 24) & 1) != 0) {
                logb = 2000000000LL;
              }
              else {
                logb = nw_endpoint_handler_get_child_timeout_nanos(v242);
              }
              v134 = nw_endpoint_handler_get_minimize_logging(v122);
              os_log_type_t v135 = nw_endpoint_handler_get_logging_disabled(v122);
              if (v134)
              {
                if ((v135 & 1) != 0)
                {
LABEL_149:
                  v144 = nw_endpoint_handler_copy_context(v122);
                  v245[0] = MEMORY[0x1895F87A8];
                  v245[1] = 3221225472LL;
                  v245[2] = ___ZL37nw_endpoint_resolver_start_next_childP30NWConcrete_nw_endpoint_handler_block_invoke;
                  v245[3] = &unk_189BC93A0;
                  __int16 v246 = v122;
                  *((void *)v124 + 7) = nw_queue_context_create_source(v144, 2, 3, 0, v245, 0LL);

                  v145 = *((void *)v124 + 7);
                  if (v145)
                  {
                    id v146 = dispatch_time(0x8000000000000000LL, logb);
                    nw_queue_set_timer_values(v145, v146, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
                    nw_queue_activate_source(*((void *)v243 + 7), v147);
LABEL_184:
                    v99 = v246;
                    goto LABEL_185;
                  }

                  __nwlog_obj();
                  v148 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
                  nw_endpoint_t v149 = (char *)_os_log_send_and_compose_impl();

                  type[0] = OS_LOG_TYPE_ERROR;
                  v247 = 0;
                  if (__nwlog_fault(v149, type, &v247))
                  {
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      __nwlog_obj();
                      v150 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      v151 = type[0];
                      if (os_log_type_enabled(v150, type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
                        _os_log_impl( &dword_181A5C000,  v150,  v151,  "%{public}s nw_queue_context_create_source(timer) failed",  buf,  0xCu);
                      }
                    }

                    else if (v247)
                    {
                      backtrace_string = (char *)__nw_create_backtrace_string();
                      __nwlog_obj();
                      v150 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      v158 = type[0];
                      id v159 = os_log_type_enabled(v150, type[0]);
                      if (backtrace_string)
                      {
                        if (v159)
                        {
                          *(_DWORD *)buf = 136446466;
                          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = backtrace_string;
                          _os_log_impl( &dword_181A5C000,  v150,  v158,  "%{public}s nw_queue_context_create_source(timer) failed, dumping backtrace:%{public}s",  buf,  0x16u);
                        }

                        free(backtrace_string);
                        goto LABEL_182;
                      }

                      if (v159)
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
                        _os_log_impl( &dword_181A5C000,  v150,  v158,  "%{public}s nw_queue_context_create_source(timer) failed, no backtrace",  buf,  0xCu);
                      }
                    }

                    else
                    {
                      __nwlog_obj();
                      v150 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      v163 = type[0];
                      if (os_log_type_enabled(v150, type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
                        _os_log_impl( &dword_181A5C000,  v150,  v163,  "%{public}s nw_queue_context_create_source(timer) failed, backtrace limit exceeded",  buf,  0xCu);
                      }
                    }
                  }

      if (v145) {
        free(v145);
      }
      uint64_t v19 = 0;
      if (v15 != &nw_protocol_ref_counted_handle) {
        goto LABEL_26;
      }
      goto LABEL_25;
    }

    __int16 v17 = output_handler->callbacks;
    if (!v17
      || (get_input_frames = (uint64_t (*)(void, void, void, void, void, void))v17->get_input_frames) == 0LL)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      name = output_handler->identifier->name;
      if (!name) {
        name = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = name;
      *(_WORD *)&buf[22] = 2048;
      BOOL v199 = (const char *)output_handler;
      v89 = (const char *)_os_log_send_and_compose_impl();
      v188[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v186[0]) = 0;
      v145 = (char *)v89;
      if (__nwlog_fault(v89, v188, v186))
      {
        if (v188[0] == OS_LOG_TYPE_FAULT)
        {
          v90 = (os_log_s *)__nwlog_obj();
          v91 = v188[0];
          *(void *)typec = v90;
          if (!os_log_type_enabled(v90, v188[0])) {
            goto LABEL_186;
          }
          os_log_type_t v92 = output_handler->identifier->name;
          if (!v92) {
            os_log_type_t v92 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v92;
          *(_WORD *)&buf[22] = 2048;
          BOOL v199 = (const char *)output_handler;
          BOOL v93 = *(os_log_s **)typec;
          os_log_type_t v94 = v91;
          id v95 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback";
LABEL_184:
          v99 = 32;
LABEL_185:
          _os_log_impl(&dword_181A5C000, v93, v94, v95, buf, v99);
          goto LABEL_186;
        }

        if (!LOBYTE(v186[0]))
        {
          id v108 = (os_log_s *)__nwlog_obj();
          v109 = v188[0];
          *(void *)typeg = v108;
          if (!os_log_type_enabled(v108, v188[0])) {
            goto LABEL_186;
          }
          v110 = output_handler->identifier->name;
          if (!v110) {
            v110 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v110;
          *(_WORD *)&buf[22] = 2048;
          BOOL v199 = (const char *)output_handler;
          BOOL v93 = *(os_log_s **)typeg;
          os_log_type_t v94 = v109;
          id v95 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, backtrace limit exceeded";
          goto LABEL_184;
        }

        v100 = (char *)__nw_create_backtrace_string();
        loga = (os_log_s *)__nwlog_obj();
        typee = v188[0];
        v101 = os_log_type_enabled(loga, v188[0]);
        if (!v100)
        {
          if (!v101) {
            goto LABEL_186;
          }
          nw_endpoint_t v111 = output_handler->identifier->name;
          if (!v111) {
            nw_endpoint_t v111 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v111;
          *(_WORD *)&buf[22] = 2048;
          BOOL v199 = (const char *)output_handler;
          BOOL v93 = loga;
          os_log_type_t v94 = typee;
          id v95 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, no backtrace";
          goto LABEL_184;
        }

        if (v101)
        {
          v102 = output_handler->identifier->name;
          if (!v102) {
            v102 = "invalid";
          }
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v102;
          *(_WORD *)&buf[22] = 2048;
          BOOL v199 = (const char *)output_handler;
          os_log_type_t v200 = 2082;
          os_log_type_t v201 = v100;
          v103 = loga;
          id v104 = typee;
          v105 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, dumping backtrace:%{public}s";
          v106 = 42;
          goto LABEL_174;
        }

        goto LABEL_175;
      }

      goto LABEL_186;
    }

    uint64_t v19 = get_input_frames(output_handler, a1, v150, v149, a5, v12);
    if (v15 == &nw_protocol_ref_counted_handle)
    {
LABEL_25:
      if (a1->handle == &nw_protocol_ref_counted_handle)
      {
        v84 = a1[1].callbacks;
        if (v84)
        {
          v85 = (nw_protocol_callbacks *)((char *)v84 - 1);
          a1[1].callbacks = v85;
          if (!v85)
          {
            v86 = *(void (***)(void))a1[1].flow_id;
            if (v86)
            {
              *(void *)a1[1].flow_id = 0LL;
              v86[2](v86);
              _Block_release(v86);
            }

            if ((a1[1].flow_id[8] & 1) != 0)
            {
              os_log_type_t v87 = *(const void **)a1[1].flow_id;
              if (v87) {
                _Block_release(v87);
              }
            }

            free(a1);
          }
        }
      }
    }

      if (loga) {
        free(loga);
      }
LABEL_69:
      if (v49 == &nw_protocol_ref_counted_handle) {
        nw::release_if_needed<nw_protocol *>((uint64_t *)&p_shared_protocol);
      }
      if (v46 == &nw_protocol_ref_counted_handle) {
        nw::release_if_needed<nw_protocol *>((uint64_t *)type);
      }
      BOOL v11 = 0;
      if ((*((_BYTE *)self + 34) & 0x10) == 0) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }

    uint64_t v62 = self->shared_protocol.protocol.output_handler;
    if (v62)
    {
      nw_protocol_release(v62);
      self->shared_protocol.protocol.output_handler = 0LL;
    }

    unint64_t v63 = self->shared_protocol.protocol.default_input_handler;
    if (v63)
    {
      nw_protocol_release(v63);
      self->shared_protocol.protocol.default_input_handler = 0LL;
    }

    retained_flow = self->shared_protocol.retained_flow;
    self->shared_protocol.retained_flow = 0LL;

    unsigned int v65 = (NWConcrete_nw_endpoint_flow *)default_input_handler->protocol.output_handler;
    uint64_t v67 = v65 != (NWConcrete_nw_endpoint_flow *)&self->shared_protocol && v65 != 0LL;
    if (v65 != (NWConcrete_nw_endpoint_flow *)output_handler && !v67)
    {
      nw_protocol_release(v65);
      default_input_handler->protocol.output_handler = &output_handler->protocol;
      if (output_handler->protocol.handle == &nw_protocol_ref_counted_handle)
      {
        uint64_t v68 = (char *)output_handler->listen_protocol.handle;
        if (v68) {
          output_handler->listen_protocol.handle = v68 + 1;
        }
      }
    }

    uint64_t v69 = default_input_handler->protocol.handle;
    if (v69 == &nw_protocol_ref_counted_handle)
    {
      v79 = (char *)default_input_handler->listen_protocol.handle;
      if (v79) {
        default_input_handler->listen_protocol.handle = v79 + 1;
      }
      char v70 = -1;
    }

    else
    {
      char v70 = 0;
    }

    *(void *)os_log_type_t type = default_input_handler;
    os_log_type_t v135 = v70;
    id v80 = output_handler->protocol.handle;
    if (v80 == &nw_protocol_ref_counted_handle)
    {
      unsigned int v82 = (char *)output_handler->listen_protocol.handle;
      if (v82) {
        output_handler->listen_protocol.handle = v82 + 1;
      }
      id v81 = -1;
    }

    else
    {
      id v81 = 0;
    }

    p_shared_protocol = output_handler;
    v133 = v81;
    v83 = default_input_handler->protocol.callbacks;
    if (v83)
    {
      notify = (void (*)(void, void, void, void, void))v83->notify;
      if (notify)
      {
        notify(default_input_handler, output_handler, 26LL, 0LL, 0LL);
        if (v80 != &nw_protocol_ref_counted_handle) {
          goto LABEL_136;
        }
        goto LABEL_135;
      }
    }

    __nwlog_obj();
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    v106 = default_input_handler->protocol.identifier->name;
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "__nw_protocol_notify";
    if (!v106) {
      v106 = "invalid";
    }
    os_log_type_t v137 = 2082;
    BOOL v138 = (void *)v106;
    os_log_type_t v139 = 2048;
    v140 = (const char *)default_input_handler;
    nw_endpoint_t v107 = (char *)_os_log_send_and_compose_impl();

    uint64_t v131 = OS_LOG_TYPE_ERROR;
    dispatch_time_t v130 = 0;
    if (__nwlog_fault(v107, &v131, &v130))
    {
      if (v131 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v108 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v109 = v131;
        if (os_log_type_enabled(v108, v131))
        {
          v110 = default_input_handler->protocol.identifier->name;
          if (!v110) {
            v110 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_notify";
          os_log_type_t v137 = 2082;
          BOOL v138 = (void *)v110;
          os_log_type_t v139 = 2048;
          v140 = (const char *)default_input_handler;
          _os_log_impl( &dword_181A5C000,  v108,  v109,  "%{public}s protocol %{public}s (%p) has invalid notify callback",  buf,  0x20u);
        }

  if (v67) {
    free(v67);
  }
LABEL_36:

  os_log_type_t v28 = *(char **)(*((void *)v6 + 3) + 40LL);
  os_log_type_t v29 = v26;
  BOOL v30 = v29;
  if (v28)
  {
    *(void *)buf = v27;
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&buf[16] = ___ZL36nw_context_purge_endpoint_hash_tableP21NWConcrete_nw_contextP13nw_hash_tablePKc_block_invoke;
    *(void *)&os_log_type_t v135 = &unk_189BB6060;
    *((void *)&v135 + 1) = v29;
    v136 = (os_log_type_t *)v28;
    os_log_type_t v137 = "host";
    nw_hash_table_apply(v28, (uint64_t)buf);

    goto LABEL_38;
  }

  __nwlog_obj();
  char v70 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_context_purge_endpoint_hash_table";
  __int128 v71 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v133 = 0;
  if (__nwlog_fault(v71, type, &v133))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v72 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v73 = type[0];
      if (os_log_type_enabled(v72, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_purge_endpoint_hash_table";
        _os_log_impl(&dword_181A5C000, v72, v73, "%{public}s called with null hash_table", buf, 0xCu);
      }
    }

    else if (v133)
    {
      v99 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v72 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v100 = type[0];
      v101 = os_log_type_enabled(v72, type[0]);
      if (v99)
      {
        if (v101)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_context_purge_endpoint_hash_table";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v99;
          _os_log_impl( &dword_181A5C000,  v72,  v100,  "%{public}s called with null hash_table, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v99);
        goto LABEL_191;
      }

      if (v101)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_purge_endpoint_hash_table";
        _os_log_impl(&dword_181A5C000, v72, v100, "%{public}s called with null hash_table, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v72 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v114 = type[0];
      if (os_log_type_enabled(v72, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_purge_endpoint_hash_table";
        _os_log_impl( &dword_181A5C000,  v72,  v114,  "%{public}s called with null hash_table, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

      free(v86);
      if (!v71) {
        return;
      }
LABEL_266:
      os_log_type_t v27 = (nw_protocol *)v71;
LABEL_121:
      free(v27);
      return;
    }

    v72 = (os_log_s *)__nwlog_obj();
    v73 = type;
    if (!os_log_type_enabled(v72, type)) {
      goto LABEL_265;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v129 = "nw_protocol_plugins_disconnect";
    nw_endpoint_t v74 = "%{public}s called with null protocol->handle";
LABEL_264:
    _os_log_impl(&dword_181A5C000, v72, v73, v74, buf, 0xCu);
    goto LABEL_265;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v129 = "nw_protocol_plugins_handle_disconnect";
    __int128 v71 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v126 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v72 = (os_log_s *)__nwlog_obj();
      v73 = type;
      if (!os_log_type_enabled(v72, type)) {
        goto LABEL_265;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v129 = "nw_protocol_plugins_handle_disconnect";
      nw_endpoint_t v74 = "%{public}s called with null other_protocol";
      goto LABEL_264;
    }

    if (!v126)
    {
      v72 = (os_log_s *)__nwlog_obj();
      v73 = type;
      if (!os_log_type_enabled(v72, type)) {
        goto LABEL_265;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v129 = "nw_protocol_plugins_handle_disconnect";
      nw_endpoint_t v74 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_264;
    }

    v86 = (char *)__nw_create_backtrace_string();
    v72 = (os_log_s *)__nwlog_obj();
    v73 = type;
    v89 = os_log_type_enabled(v72, type);
    if (!v86)
    {
      if (!v89) {
        goto LABEL_265;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v129 = "nw_protocol_plugins_handle_disconnect";
      nw_endpoint_t v74 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_264;
    }

    if (v89)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v129 = "nw_protocol_plugins_handle_disconnect";
      dispatch_time_t v130 = 2082;
      uint64_t v131 = (nw_protocol *)v86;
      unsigned int v88 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_185;
    }

    goto LABEL_186;
  }

  if (gLogDatapath)
  {
    uint64_t v75 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
    {
      identifier = a1->identifier;
      if (!identifier) {
        identifier = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v129 = "nw_protocol_plugins_handle_disconnect";
      dispatch_time_t v130 = 2080;
      uint64_t v131 = (nw_protocol *)identifier;
      v132 = 2048;
      v133 = a1;
      _os_log_impl(&dword_181A5C000, v75, OS_LOG_TYPE_DEBUG, "%{public}s called for %s:%p", buf, 0x20u);
    }
  }

  uint64_t v5 = handle[11];
  if (v5)
  {
    if (gLogDatapath)
    {
      v83 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v129 = "nw_protocol_plugin_retry_disconnect";
        dispatch_time_t v130 = 2048;
        uint64_t v131 = a1;
        _os_log_impl(&dword_181A5C000, v83, OS_LOG_TYPE_DEBUG, "%{public}s called %p", buf, 0x16u);
      }
    }

    id v6 = *(_BYTE *)(v5 + 212);
    *(_BYTE *)(v5 + 212) = v6 | 0x80;
    if ((v6 & 0x20) != 0)
    {
      if (gLogDatapath)
      {
        v101 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v101, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          uint64_t v129 = "nw_protocol_plugin_retry_disconnect";
          dispatch_time_t v130 = 2048;
          uint64_t v131 = a1;
          v132 = 2048;
          v133 = a2;
          _os_log_impl( &dword_181A5C000,  v101,  OS_LOG_TYPE_DEBUG,  "%{public}s %p sending disconnected immediately to %p as async reissue is pending",  buf,  0x20u);
        }
      }

      os_log_type_t v28 = a2->handle;
      if (v28 == &nw_protocol_ref_counted_handle)
      {
        callbacks = a2[1].callbacks;
        if (callbacks) {
          a2[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
        }
      }

      BOOL v30 = a1->handle;
      if (v30 == &nw_protocol_ref_counted_handle)
      {
        os_log_type_t v31 = a1[1].callbacks;
        if (v31) {
          a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v31->add_input_handler + 1);
        }
      }

      nw_endpoint_t v32 = a2->callbacks;
      if (v32)
      {
        disconnected = (void (*)(nw_protocol *, nw_protocol *))v32->disconnected;
        if (disconnected) {
          goto LABEL_99;
        }
      }

      __nwlog_obj();
      os_log_type_t v34 = a2->identifier;
      *(_DWORD *)buf = 136446722;
      uint64_t v129 = "__nw_protocol_disconnected";
      if (!v34) {
        os_log_type_t v34 = (nw_protocol_identifier *)"invalid";
      }
      dispatch_time_t v130 = 2082;
      uint64_t v131 = (nw_protocol *)v34;
      v132 = 2048;
      v133 = a2;
      BOOL v35 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v126 = 0;
      if (type == OS_LOG_TYPE_FAULT) {
        goto LABEL_213;
      }
      if (v126)
      {
        uint64_t v36 = (char *)__nw_create_backtrace_string();
        os_log_type_t v37 = (os_log_s *)__nwlog_obj();
        id v38 = type;
        id v39 = os_log_type_enabled(v37, type);
        if (v36)
        {
          if (v39)
          {
            if (a2->identifier) {
              char v40 = a2->identifier;
            }
            else {
              char v40 = (nw_protocol_identifier *)"invalid";
            }
            *(_DWORD *)buf = 136446978;
            uint64_t v129 = "__nw_protocol_disconnected";
            dispatch_time_t v130 = 2082;
            uint64_t v131 = (nw_protocol *)v40;
            v132 = 2048;
            v133 = a2;
            v134 = 2082;
            os_log_type_t v135 = v36;
            _os_log_impl( &dword_181A5C000,  v37,  v38,  "%{public}s protocol %{public}s (%p) has invalid disconnected callback, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v36);
          goto LABEL_299;
        }

              uint64_t v36 = 0LL;
              goto LABEL_187;
            }

              if (v86) {
                free(v86);
              }
              goto LABEL_188;
            }

            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v89 = (id)gLogObj;
            *(_DWORD *)buf = 136446210;
            v125 = "nwsc_request_create_and_start_connection_inner";
            v90 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(error) = 0;
            if (__nwlog_fault(v90, type, &error))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v91 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v92 = type[0];
                if (os_log_type_enabled(v91, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  v125 = "nwsc_request_create_and_start_connection_inner";
                  _os_log_impl(&dword_181A5C000, v91, v92, "%{public}s nw_parameters_create failed", buf, 0xCu);
                }
              }

              else if ((_BYTE)error)
              {
                v96 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v91 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                id v97 = type[0];
                v98 = os_log_type_enabled(v91, type[0]);
                if (v96)
                {
                  if (v98)
                  {
                    *(_DWORD *)buf = 136446466;
                    v125 = "nwsc_request_create_and_start_connection_inner";
                    LOWORD(v126[0]) = 2082;
                    *(void *)((char *)v126 + 2) = v96;
                    _os_log_impl( &dword_181A5C000,  v91,  v97,  "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(v96);
                  goto LABEL_192;
                }

                if (v98)
                {
                  *(_DWORD *)buf = 136446210;
                  v125 = "nwsc_request_create_and_start_connection_inner";
                  _os_log_impl( &dword_181A5C000,  v91,  v97,  "%{public}s nw_parameters_create failed, no backtrace",  buf,  0xCu);
                }
              }

              else
              {
                __nwlog_obj();
                v91 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                v100 = type[0];
                if (os_log_type_enabled(v91, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  v125 = "nwsc_request_create_and_start_connection_inner";
                  _os_log_impl( &dword_181A5C000,  v91,  v100,  "%{public}s nw_parameters_create failed, backtrace limit exceeded",  buf,  0xCu);
                }
              }
            }
}

      if (!v35) {
        return 0LL;
      }
      id v18 = (char *)v35;
LABEL_63:
      free(v18);
      return 0LL;
    }

    if (!v76)
    {
      uint64_t v36 = (os_log_s *)__nwlog_obj();
      os_log_type_t v37 = buf;
      if (os_log_type_enabled(v36, (os_log_type_t)buf))
      {
        *(_DWORD *)__str = 136446210;
        *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
        id v38 = "%{public}s called with null out_encrypted_length, backtrace limit exceeded";
        goto LABEL_185;
      }

      goto LABEL_186;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v36 = (os_log_s *)__nwlog_obj();
    os_log_type_t v37 = buf;
    id v51 = os_log_type_enabled(v36, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (v51)
      {
        *(_DWORD *)__str = 136446210;
        *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
        id v38 = "%{public}s called with null out_encrypted_length, no backtrace";
        goto LABEL_185;
      }

      goto LABEL_186;
    }

    if (v51)
    {
      *(_DWORD *)__str = 136446466;
      *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
      *(_WORD *)&__str[12] = 2082;
      *(void *)&__str[14] = backtrace_string;
      BOOL v44 = "%{public}s called with null out_encrypted_length, dumping backtrace:%{public}s";
      goto LABEL_135;
    }
    }

      if (v145) {
        free(v145);
      }
      uint64_t v19 = 0;
      if (v15 != &nw_protocol_ref_counted_handle) {
        goto LABEL_26;
      }
      goto LABEL_25;
    }

    __int16 v17 = output_handler->callbacks;
    if (!v17
      || (get_input_frames = (uint64_t (*)(void, void, void, void, void, void))v17->get_input_frames) == 0LL)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      name = output_handler->identifier->name;
      if (!name) {
        name = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = name;
      *(_WORD *)&buf[22] = 2048;
      BOOL v199 = (const char *)output_handler;
      v89 = (const char *)_os_log_send_and_compose_impl();
      v188[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v186[0]) = 0;
      v145 = (char *)v89;
      if (__nwlog_fault(v89, v188, v186))
      {
        if (v188[0] == OS_LOG_TYPE_FAULT)
        {
          v90 = (os_log_s *)__nwlog_obj();
          v91 = v188[0];
          *(void *)typec = v90;
          if (!os_log_type_enabled(v90, v188[0])) {
            goto LABEL_186;
          }
          os_log_type_t v92 = output_handler->identifier->name;
          if (!v92) {
            os_log_type_t v92 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v92;
          *(_WORD *)&buf[22] = 2048;
          BOOL v199 = (const char *)output_handler;
          BOOL v93 = *(os_log_s **)typec;
          os_log_type_t v94 = v91;
          id v95 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback";
LABEL_184:
          v99 = 32;
LABEL_185:
          _os_log_impl(&dword_181A5C000, v93, v94, v95, buf, v99);
          goto LABEL_186;
        }

        if (!LOBYTE(v186[0]))
        {
          id v108 = (os_log_s *)__nwlog_obj();
          v109 = v188[0];
          *(void *)typeg = v108;
          if (!os_log_type_enabled(v108, v188[0])) {
            goto LABEL_186;
          }
          v110 = output_handler->identifier->name;
          if (!v110) {
            v110 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v110;
          *(_WORD *)&buf[22] = 2048;
          BOOL v199 = (const char *)output_handler;
          BOOL v93 = *(os_log_s **)typeg;
          os_log_type_t v94 = v109;
          id v95 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, backtrace limit exceeded";
          goto LABEL_184;
        }

        v100 = (char *)__nw_create_backtrace_string();
        loga = (os_log_s *)__nwlog_obj();
        typee = v188[0];
        v101 = os_log_type_enabled(loga, v188[0]);
        if (!v100)
        {
          if (!v101) {
            goto LABEL_186;
          }
          nw_endpoint_t v111 = output_handler->identifier->name;
          if (!v111) {
            nw_endpoint_t v111 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v111;
          *(_WORD *)&buf[22] = 2048;
          BOOL v199 = (const char *)output_handler;
          BOOL v93 = loga;
          os_log_type_t v94 = typee;
          id v95 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, no backtrace";
          goto LABEL_184;
        }

        if (v101)
        {
          v102 = output_handler->identifier->name;
          if (!v102) {
            v102 = "invalid";
          }
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v102;
          *(_WORD *)&buf[22] = 2048;
          BOOL v199 = (const char *)output_handler;
          os_log_type_t v200 = 2082;
          os_log_type_t v201 = v100;
          v103 = loga;
          id v104 = typee;
          v105 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, dumping backtrace:%{public}s";
          v106 = 42;
          goto LABEL_174;
        }

        goto LABEL_175;
      }

      goto LABEL_186;
    }

    uint64_t v19 = get_input_frames(output_handler, a1, v150, v149, a5, v12);
    if (v15 == &nw_protocol_ref_counted_handle)
    {
LABEL_25:
      if (a1->handle == &nw_protocol_ref_counted_handle)
      {
        v84 = a1[1].callbacks;
        if (v84)
        {
          v85 = (nw_protocol_callbacks *)((char *)v84 - 1);
          a1[1].callbacks = v85;
          if (!v85)
          {
            v86 = *(void (***)(void))a1[1].flow_id;
            if (v86)
            {
              *(void *)a1[1].flow_id = 0LL;
              v86[2](v86);
              _Block_release(v86);
            }

            if ((a1[1].flow_id[8] & 1) != 0)
            {
              os_log_type_t v87 = *(const void **)a1[1].flow_id;
              if (v87) {
                _Block_release(v87);
              }
            }

            free(a1);
          }
        }
      }
    }

LABEL_154:
        unint64_t v115 = nw_endpoint_handler_get_child_timeout_nanos(v230) * v60;
        v116 = v228;
        int v117 = nw_endpoint_handler_get_minimize_logging(v228);
        char v118 = nw_endpoint_handler_get_logging_disabled(v228);
        unint64_t v224 = v115 / 0x5F5E100;
        v119 = v229;
        unint64_t v218 = v115;
        if (v117)
        {
          if ((v118 & 1) != 0)
          {
LABEL_161:
            *((void *)v119 + 9) = v224;
            id v128 = nw_endpoint_handler_copy_context(v116);
            v234[0] = MEMORY[0x1895F87A8];
            v234[1] = 3221225472LL;
            v234[2] = ___ZL38nw_endpoint_transform_start_next_childP30NWConcrete_nw_endpoint_handler_block_invoke;
            v234[3] = &unk_189BC93A0;
            v235 = v116;
            *((void *)v119 + _Block_object_dispose(va, 8) = nw_queue_context_create_source(v128, 2, 3, 0, v234, 0LL);

            uint64_t v129 = *((void *)v119 + 8);
            if (v129)
            {
              dispatch_time_t v130 = dispatch_time(0x8000000000000000LL, v218 / 0x64);
              nw_queue_set_timer_values(v129, v130, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
              nw_queue_activate_source(*((void *)v229 + 8), v131);
LABEL_163:
              os_log_type_t v27 = v235;
              goto LABEL_86;
            }

            __nwlog_obj();
            v132 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            v239 = "nw_endpoint_transform_start_next_child";
            v133 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t v237 = OS_LOG_TYPE_ERROR;
            char v236 = 0;
            if (__nwlog_fault(v133, &v237, &v236))
            {
              if (v237 == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v134 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v135 = v237;
                if (os_log_type_enabled(v134, v237))
                {
                  *(_DWORD *)buf = 136446210;
                  v239 = "nw_endpoint_transform_start_next_child";
                  _os_log_impl( &dword_181A5C000,  v134,  v135,  "%{public}s nw_queue_context_create_source(timer) failed",  buf,  0xCu);
                }

          if (!v42)
          {
LABEL_156:
            os_log_type_t v21 = 0LL;
LABEL_24:
            if (a1->handle == &nw_protocol_ref_counted_handle)
            {
              os_log_type_t v25 = a1[1].callbacks;
              if (v25)
              {
                BOOL v26 = (nw_protocol_callbacks *)((char *)v25 - 1);
                a1[1].callbacks = v26;
                if (!v26)
                {
                  os_log_type_t v27 = *(void (***)(void))a1[1].flow_id;
                  if (v27)
                  {
                    *(void *)a1[1].flow_id = 0LL;
                    v27[2](v27);
                    _Block_release(v27);
                  }

                  if ((a1[1].flow_id[8] & 1) != 0)
                  {
                    os_log_type_t v28 = *(const void **)a1[1].flow_id;
                    if (v28) {
                      _Block_release(v28);
                    }
                  }

                  free(a1);
                }
              }
            }

            if (handle == &nw_protocol_ref_counted_handle && output_handler->handle == &nw_protocol_ref_counted_handle)
            {
              os_log_type_t v29 = output_handler[1].callbacks;
              if (v29)
              {
                BOOL v30 = (nw_protocol_callbacks *)((char *)v29 - 1);
                output_handler[1].callbacks = v30;
                if (!v30)
                {
                  os_log_type_t v31 = *(void (***)(void))output_handler[1].flow_id;
                  if (v31)
                  {
                    *(void *)output_handler[1].flow_id = 0LL;
                    v31[2](v31);
                    _Block_release(v31);
                  }

                  if ((output_handler[1].flow_id[8] & 1) != 0)
                  {
                    nw_endpoint_t v32 = *(const void **)output_handler[1].flow_id;
                    if (v32) {
                      _Block_release(v32);
                    }
                  }

                  free(output_handler);
                }
              }
            }

        free(backtrace_string);
        if (!v73) {
          goto LABEL_113;
        }
        goto LABEL_179;
      }

              if (v85) {
                free(v85);
              }
              __int16 v46 = 0LL;
              uint64_t v10 = v99;
              goto LABEL_36;
            }

            __nwlog_obj();
            BOOL v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
            {
              v96 = *((void *)a2 + 4);
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_copy_tls_metadata_for_protocol";
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v96;
              _os_log_impl( &dword_181A5C000,  v35,  OS_LOG_TYPE_DEBUG,  "%{public}s output handler %p does not have valid copy_info callback, cannot get TLS metadata",  buf,  0x16u);
            }

            uint64_t v10 = v99;
          }

          uint64_t v36 = *(void **)(v105 + 40);
          goto LABEL_33;
        }
      }

      else
      {
        registered_endpoint = (id *)nw_protocol_instance_registrar_copy_next_registered_endpoint(v101, 0);
        if (registered_endpoint)
        {
          __int16 v46 = nw_array_create();
          v50 = registered_endpoint[1];
          id v51 = nw_endpoint_copy_without_proxy_parent(registered_endpoint);

          object = nw_context_copy_registered_endpoint_internal(v50, v51, 0);
          nw_array_append(v46, object);

          goto LABEL_45;
        }
      }

      __int16 v46 = 0LL;
      goto LABEL_50;
    }

    __nwlog_obj();
    unsigned int v61 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
    uint64_t v62 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v110 = 0;
    if (__nwlog_fault(v62, type, &v110))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        unint64_t v63 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v64 = type[0];
        if (os_log_type_enabled(v63, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
          _os_log_impl(&dword_181A5C000, v63, v64, "%{public}s called with null protocol->identifier", buf, 0xCu);
        }
      }

      else if (v110)
      {
        __int128 v71 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        unint64_t v63 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v72 = type[0];
        v73 = os_log_type_enabled(v63, type[0]);
        if (v71)
        {
          if (v73)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v71;
            _os_log_impl( &dword_181A5C000,  v63,  v72,  "%{public}s called with null protocol->identifier, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v71);
          goto LABEL_112;
        }

        if (v73)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
          _os_log_impl( &dword_181A5C000,  v63,  v72,  "%{public}s called with null protocol->identifier, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        unint64_t v63 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v76 = type[0];
        if (os_log_type_enabled(v63, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
          _os_log_impl( &dword_181A5C000,  v63,  v76,  "%{public}s called with null protocol->identifier, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

              uint64_t v19 = (uint64_t)v237;
              if (v73) {
                free(v73);
              }
LABEL_156:
              nw_endpoint_flow_cleanup_protocol(v6, v19, 1);
              BOOL v177 = *(void **)(v19 + 184);
              *(void *)(v19 + 184) = 0LL;

LABEL_112:
              free(v237);
LABEL_120:
              int v22 = 0LL;
LABEL_121:
              uint64_t v20 = v236;
              goto LABEL_122;
            }
          }

          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v56 = (os_log_s *)(id)gLogObj;
            if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              v245 = "nw_protocol_utilities_add_input_handler";
              __int16 v246 = 2048;
              v247 = v10;
              _os_log_impl( &dword_181A5C000,  v56,  OS_LOG_TYPE_ERROR,  "%{public}s Unable to invoke add_input_handler on protocol %p because it is not valid",  buf,  0x16u);
            }
          }

      timeout_nanos = nw_endpoint_proxy_get_timeout_nanos(v63, 0);
      v136 = nw_endpoint_handler_get_minimize_logging(v471);
      os_log_type_t v137 = nw_endpoint_handler_get_logging_disabled(v471);
      if (v136)
      {
        if ((v137 & 1) != 0) {
          goto LABEL_161;
        }
        v443 = v63;
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        BOOL v138 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v138, OS_LOG_TYPE_DEBUG))
        {
          v445 = nw_endpoint_handler_get_id_string(v471);
          v366 = nw_endpoint_handler_dry_run_string(v471);
          v367 = nw_endpoint_handler_copy_endpoint(v471);
          v368 = nw_endpoint_get_logging_description(v367);
          v369 = nw_endpoint_handler_state_string(v471);
          v370 = nw_endpoint_handler_mode_string(v471);
          v371 = nw_endpoint_handler_copy_current_path(v471);
          *(_DWORD *)buf = 136448002;
          v481 = "nw_endpoint_proxy_receive_report";
          v482 = 2082;
          v483 = (uint64_t)v445;
          v484 = 2082;
          v485 = (uint64_t)v366;
          v486 = 2082;
          v487 = v368;
          v488 = 2082;
          v489 = v369;
          v490 = 2082;
          v491 = v370;
          v492 = 2114;
          v493 = v371;
          v494 = 2048;
          *(void *)v495 = timeout_nanos / 0xF4240;
          _os_log_impl( &dword_181A5C000,  v138,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] transport finished, pushing out endpoint race by %llums",  buf,  0x52u);

          unint64_t v63 = v443;
        }
      }

      else
      {
        if ((v137 & 1) != 0)
        {
LABEL_161:
          id v146 = *((void *)v42 + 11);
          v147 = dispatch_time(0x8000000000000000LL, timeout_nanos);
          nw_queue_set_timer_values(v146, v147, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);

LABEL_162:
          int v9 = v474;
          char v42 = loga;
          a3 = v464;
          goto LABEL_163;
        }

        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        BOOL v138 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v138, OS_LOG_TYPE_INFO))
        {
          os_log_type_t v139 = nw_endpoint_handler_get_id_string(v471);
          v140 = nw_endpoint_handler_dry_run_string(v471);
          v442 = v63;
          v444 = v138;
          v141 = nw_endpoint_handler_copy_endpoint(v471);
          nw_endpoint_t v142 = nw_endpoint_get_logging_description(v141);
          v143 = nw_endpoint_handler_state_string(v471);
          v144 = nw_endpoint_handler_mode_string(v471);
          v145 = nw_endpoint_handler_copy_current_path(v471);
          *(_DWORD *)buf = 136448002;
          v481 = "nw_endpoint_proxy_receive_report";
          v482 = 2082;
          v483 = (uint64_t)v139;
          v484 = 2082;
          v485 = (uint64_t)v140;
          v486 = 2082;
          v487 = v142;
          v488 = 2082;
          v489 = v143;
          v490 = 2082;
          v491 = v144;
          v492 = 2114;
          v493 = v145;
          v494 = 2048;
          *(void *)v495 = timeout_nanos / 0xF4240;
          _os_log_impl( &dword_181A5C000,  v444,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] transport finished, pushing out endpoint race by %llums",  buf,  0x52u);

          unint64_t v63 = v442;
          BOOL v138 = v444;
        }
      }

      char v42 = loga;
      goto LABEL_161;
    }

    v119 = nw_endpoint_handler_get_minimize_logging(v471);
    v120 = nw_endpoint_handler_get_logging_disabled(v471);
    if (!v119)
    {
      if ((v120 & 1) != 0) {
        goto LABEL_163;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v121 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v121, OS_LOG_TYPE_INFO))
      {
        v122 = nw_endpoint_handler_get_id_string(v471);
        nw_endpoint_t v123 = nw_endpoint_handler_dry_run_string(v471);
        v124 = nw_endpoint_handler_copy_endpoint(v471);
        v125 = nw_endpoint_get_logging_description(v124);
        v126 = nw_endpoint_handler_state_string(v471);
        id v127 = nw_endpoint_handler_mode_string(v471);
        id v128 = nw_endpoint_handler_copy_current_path(v471);
        *(_DWORD *)buf = 136447746;
        v481 = "nw_endpoint_proxy_receive_report";
        v482 = 2082;
        v483 = (uint64_t)v122;
        v484 = 2082;
        v485 = (uint64_t)v123;
        v486 = 2082;
        v487 = v125;
        v488 = 2082;
        v489 = v126;
        v490 = 2082;
        v491 = v127;
        v492 = 2114;
        v493 = v128;
        _os_log_impl( &dword_181A5C000,  v121,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] transport finished",  buf,  0x48u);
      }

      goto LABEL_403;
    }

    if ((v120 & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v121 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v121, OS_LOG_TYPE_DEBUG))
      {
        v359 = nw_endpoint_handler_get_id_string(v471);
        v360 = nw_endpoint_handler_dry_run_string(v471);
        v361 = nw_endpoint_handler_copy_endpoint(v471);
        v362 = nw_endpoint_get_logging_description(v361);
        v363 = nw_endpoint_handler_state_string(v471);
        v364 = nw_endpoint_handler_mode_string(v471);
        v365 = nw_endpoint_handler_copy_current_path(v471);
        *(_DWORD *)buf = 136447746;
        v481 = "nw_endpoint_proxy_receive_report";
        v482 = 2082;
        v483 = (uint64_t)v359;
        v484 = 2082;
        v485 = (uint64_t)v360;
        v486 = 2082;
        v487 = v362;
        v488 = 2082;
        v489 = v363;
        v490 = 2082;
        v491 = v364;
        v492 = 2114;
        v493 = v365;
        _os_log_impl( &dword_181A5C000,  v121,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] transport finished",  buf,  0x48u);
      }

    if (v25)
    {
      __int128 v71 = (char *)v25;
      goto LABEL_142;
    }

    return;
  }

  id v18 = a1->default_input_handler;
  if (v18)
  {
    uint64_t v19 = v18->callbacks;
    if (v19)
    {
      disconnected = (void (*)(void))v19->disconnected;
      if (disconnected) {
        goto LABEL_23;
      }
    }
  }

  __nwlog_obj();
  nw_endpoint_t v32 = a1->default_input_handler;
  __int16 v33 = "invalid";
  if (v32)
  {
    os_log_type_t v34 = v32->identifier;
    if (v34) {
      __int16 v33 = (const char *)v34;
    }
  }

  *(_DWORD *)buf = 136446466;
  v83 = "nw_protocol_http_connect_disconnected";
  v84 = 2082;
  v85 = (void *)v33;
  BOOL v11 = (const char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  id v80 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v12 = (os_log_s *)__nwlog_obj();
    uint64_t v13 = type;
    if (!os_log_type_enabled(v12, type)) {
      goto LABEL_140;
    }
    BOOL v35 = a1->default_input_handler;
    os_log_type_t v15 = "invalid";
    if (v35)
    {
      uint64_t v36 = v35->identifier;
      if (v36) {
        os_log_type_t v15 = (const char *)v36;
      }
    }

    goto LABEL_19;
  }

  if (!v80)
  {
    uint64_t v12 = (os_log_s *)__nwlog_obj();
    uint64_t v13 = type;
    if (!os_log_type_enabled(v12, type)) {
      goto LABEL_140;
    }
    int v58 = a1->default_input_handler;
    v59 = "invalid";
    if (v58)
    {
      int64_t v60 = v58->identifier;
      if (v60) {
        v59 = (const char *)v60;
      }
    }

    goto LABEL_100;
  }

  char v42 = (char *)__nw_create_backtrace_string();
  uint64_t v12 = (os_log_s *)__nwlog_obj();
  uint64_t v13 = type;
  os_log_type_t v43 = os_log_type_enabled(v12, type);
  if (!v42)
  {
    if (!v43) {
      goto LABEL_140;
    }
    unsigned int v61 = a1->default_input_handler;
    uint64_t v62 = "invalid";
    if (v61)
    {
      unint64_t v63 = v61->identifier;
      if (v63) {
        uint64_t v62 = (const char *)v63;
      }
    }

    goto LABEL_138;
  }

  if (v43)
  {
    BOOL v44 = a1->default_input_handler;
    os_log_type_t v45 = "invalid";
    if (v44)
    {
      __int16 v46 = v44->identifier;
      if (v46) {
        os_log_type_t v45 = (const char *)v46;
      }
    }

    *(_DWORD *)buf = 136446722;
    v83 = "nw_protocol_http_connect_disconnected";
    v84 = 2082;
    v85 = (void *)v45;
    v86 = 2082;
    os_log_type_t v87 = v42;
    _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s protocol %{public}s has invalid disconnected callback, dumping backtrace:%{public}s",  buf,  0x20u);
  }

  free(v42);
LABEL_140:
  if (v11)
  {
LABEL_141:
    __int128 v71 = (char *)v11;
    goto LABEL_142;
  }

    v105 = *(void *)(a2 + 32);
    v106 = *(void **)(a2 + 40);
    if (v105)
    {
      *(void *)(v105 + 40) = v106;
      v106 = *(void **)(a2 + 40);
    }

    else
    {
      *(void *)(*(void *)(a1 + 32) + 232LL) = v106;
    }

    const char *v106 = v105;
    *(void *)(a2 + 32) = 0LL;
    *(void *)(a2 + 40) = 0LL;
    nw_frame_finalize(a2);
    nw_endpoint_t v107 = *(void *)(a1 + 32);
    if ((*(_WORD *)(v107 + 368) & 2) == 0) {
      return (*(_WORD *)(*(void *)(a1 + 32) + 368LL) & 2) == 0;
    }
    if (v32 == 200) {
      return (*(_WORD *)(*(void *)(a1 + 32) + 368LL) & 2) == 0;
    }
    id v108 = *(void *)(v107 + 224);
    if (!v108) {
      return (*(_WORD *)(*(void *)(a1 + 32) + 368LL) & 2) == 0;
    }
    if (os_variant_has_internal_diagnostics()
      && *(void *)(v108 + 112)
      && ((*(_WORD *)(v108 + 204) & 0x100) == 0
       || !g_channel_check_validity
       || g_channel_check_validity(v108, *(void *)(v108 + 88))))
    {
      v109 = *(_DWORD *)(v108 + 52);
      if (v109)
      {
        v110 = *(void *)(v108 + 112);
        if (v110)
        {
          nw_endpoint_t v111 = *(unsigned int *)(v108 + 56);
          id v112 = v109 - (v111 + *(_DWORD *)(v108 + 60));
          if (v112)
          {
            v113 = *(void *)(a1 + 32);
            if (!v113 || (*(_WORD *)(v113 + 368) & 0x80) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v114 = (os_log_s *)gLogObj;
              unint64_t v115 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
              v116 = *(void *)(a1 + 32);
              if (v115)
              {
                int v117 = v116 == 0;
                if (v116) {
                  char v118 = (const char *)(v116 + 284);
                }
                else {
                  char v118 = "";
                }
                *(_DWORD *)buf = 136446722;
                v168 = "nw_http_connect_process_inbound_data_block_invoke";
                v119 = " ";
                if (v117) {
                  v119 = "";
                }
                os_log_type_t v169 = 2082;
                v170 = (void *)v118;
                v171 = 2080;
                v172 = v119;
                _os_log_impl( &dword_181A5C000,  v114,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sUnexpected data from server:",  buf,  0x20u);
                v116 = *(void *)(a1 + 32);
              }

              if (!v116 || (*(_WORD *)(v116 + 368) & 0x80) == 0)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v120 = (os_log_s *)gLogObj;
                if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
                {
                  v121 = *(void *)(a1 + 32);
                  v168 = "nw_http_connect_process_inbound_data_block_invoke";
                  *(_DWORD *)buf = 136447234;
                  v122 = v121 == 0;
                  if (v121) {
                    nw_endpoint_t v123 = (const char *)(v121 + 284);
                  }
                  else {
                    nw_endpoint_t v123 = "";
                  }
                  os_log_type_t v169 = 2082;
                  v170 = (void *)v123;
                  v124 = " ";
                  v171 = 2080;
                  if (v122) {
                    v124 = "";
                  }
                  v172 = v124;
                  os_log_type_t v173 = 1040;
                  *(_DWORD *)v174 = v112;
                  *(_WORD *)&v174[4] = 2096;
                  *(void *)&v174[6] = v110 + v111;
                  _os_log_impl( &dword_181A5C000,  v120,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s%{network:data}.*P",  buf,  0x30u);
                }
              }
            }
          }
        }
      }
    }

    v125 = *(void *)(a1 + 32);
    if (v125)
    {
      if ((*(_WORD *)(v125 + 368) & 0x80) != 0) {
        return (*(_WORD *)(*(void *)(a1 + 32) + 368LL) & 2) == 0;
      }
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v126 = *(void *)(a1 + 32);
    id v127 = v126 == 0;
    if (v126) {
      id v128 = (const char *)(v126 + 284);
    }
    else {
      id v128 = "";
    }
    *(_DWORD *)buf = 136446722;
    v168 = "nw_http_connect_process_inbound_data_block_invoke";
    if (v127) {
      uint64_t v129 = "";
    }
    else {
      uint64_t v129 = " ";
    }
    os_log_type_t v169 = 2082;
    v170 = (void *)v128;
    v171 = 2080;
    v172 = v129;
    dispatch_time_t v130 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    id v165 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v131 = (os_log_s *)gLogObj;
      v132 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_232;
      }
      v133 = *(void *)(a1 + 32);
      v134 = v133 == 0;
      if (v133) {
        os_log_type_t v135 = (const char *)(v133 + 284);
      }
      else {
        os_log_type_t v135 = "";
      }
      *(_DWORD *)buf = 136446722;
      if (v134) {
        v136 = "";
      }
      else {
        v136 = " ";
      }
      v168 = "nw_http_connect_process_inbound_data_block_invoke";
      os_log_type_t v169 = 2082;
      v170 = (void *)v135;
      v171 = 2080;
      v172 = v136;
      os_log_type_t v137 = "%{public}s %{public}s%sFrames remaining after response header is complete";
    }

    else if (v165)
    {
      BOOL v138 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v131 = (os_log_s *)gLogObj;
      v132 = type;
      os_log_type_t v139 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v138)
      {
        if (v139)
        {
          v140 = *(void *)(a1 + 32);
          v141 = v140 == 0;
          if (v140) {
            nw_endpoint_t v142 = (const char *)(v140 + 284);
          }
          else {
            nw_endpoint_t v142 = "";
          }
          if (v141) {
            v143 = "";
          }
          else {
            v143 = " ";
          }
          *(_DWORD *)buf = 136446978;
          v168 = "nw_http_connect_process_inbound_data_block_invoke";
          os_log_type_t v169 = 2082;
          v170 = (void *)v142;
          v171 = 2080;
          v172 = v143;
          os_log_type_t v173 = 2082;
          *(void *)v174 = v138;
          _os_log_impl( &dword_181A5C000,  v131,  v132,  "%{public}s %{public}s%sFrames remaining after response header is complete, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v138);
        goto LABEL_232;
      }

      if (!v139)
      {
LABEL_232:
        if (v130) {
          free(v130);
        }
        return (*(_WORD *)(*(void *)(a1 + 32) + 368LL) & 2) == 0;
      }

      v148 = *(void *)(a1 + 32);
      nw_endpoint_t v149 = v148 == 0;
      if (v148) {
        v150 = (const char *)(v148 + 284);
      }
      else {
        v150 = "";
      }
      *(_DWORD *)buf = 136446722;
      if (v149) {
        v151 = "";
      }
      else {
        v151 = " ";
      }
      v168 = "nw_http_connect_process_inbound_data_block_invoke";
      os_log_type_t v169 = 2082;
      v170 = (void *)v150;
      v171 = 2080;
      v172 = v151;
      os_log_type_t v137 = "%{public}s %{public}s%sFrames remaining after response header is complete, no backtrace";
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v131 = (os_log_s *)gLogObj;
      v132 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_232;
      }
      v144 = *(void *)(a1 + 32);
      v145 = v144 == 0;
      if (v144) {
        id v146 = (const char *)(v144 + 284);
      }
      else {
        id v146 = "";
      }
      *(_DWORD *)buf = 136446722;
      if (v145) {
        v147 = "";
      }
      else {
        v147 = " ";
      }
      v168 = "nw_http_connect_process_inbound_data_block_invoke";
      os_log_type_t v169 = 2082;
      v170 = (void *)v146;
      v171 = 2080;
      v172 = v147;
      os_log_type_t v137 = "%{public}s %{public}s%sFrames remaining after response header is complete, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v131, v132, v137, buf, 0x20u);
    goto LABEL_232;
  }

  nw_frame_claim(a2, v31, v2 - v34, 0);
  return (*(_WORD *)(*(void *)(a1 + 32) + 368LL) & 2) == 0;
}

    if (v85) {
      free(v85);
    }
    id v4 = v256;
    goto LABEL_157;
  }

  *(void *)(v11 + 256) = v16;
  *((void *)v16 + 61) = v11;
  nw_protocol_set_output_handler(v11, *((void *)v16 + 4));
  nw_protocol_set_input_handler((uint64_t)v16, *(void *)(v11 + 48));
  *(_OWORD *)BOOL v11 = *v16;
  v90 = *(_OWORD *)(v11 + 144);
  os_log_type_t v92 = *(_OWORD *)(v11 + 96);
  v91 = *(_OWORD *)(v11 + 112);
  v16[8] = *(_OWORD *)(v11 + 128);
  v16[9] = v90;
  v16[6] = v92;
  v16[7] = v91;
  BOOL v93 = *(_OWORD *)(v11 + 80);
  v16[4] = *(_OWORD *)(v11 + 64);
  v16[5] = v93;
  nw_http_transaction_metadata_set_connection_metadata(*(void **)(v11 + 352), *((void **)v16 + 96));
  *((_WORD *)v16 + 436) &= 0xFFD7u;
  *((_DWORD *)v16 + 216) = 1;
  id v4 = v256;
  if ((*((_BYTE *)v16 + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v94 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      id v95 = *((void *)v16 + 61);
      v96 = *(_DWORD *)(*((void *)v16 + 60) + 372LL);
      id v97 = *((_DWORD *)v16 + 215);
      if (v95) {
        LODWORD(v95) = *(_DWORD *)(v95 + 424);
      }
      *(_DWORD *)buf = 136447490;
      *(void *)&uint8_t buf[4] = "nw_http1_update_connection_input_state";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = (char *)v16 + 74;
      *(_WORD *)&buf[22] = 2080;
      v268 = (uint64_t)" ";
      v269 = 1024;
      *(_DWORD *)v270 = v96;
      *(_WORD *)&v270[4] = 1024;
      *(_DWORD *)&v270[6] = v97;
      LOWORD(v271) = 1024;
      *(_DWORD *)((char *)&v271 + 2) = v95;
      _os_log_impl( &dword_181A5C000,  v94,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading",  buf,  0x32u);
    }
  }

  if ((*(_BYTE *)(v11 + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v98 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      v99 = *(void *)(v11 + 256);
      v100 = *(_DWORD *)(*(void *)(v11 + 248) + 372LL);
      if (v99) {
        LODWORD(v99) = *(_DWORD *)(v99 + 860);
      }
      v101 = *(_DWORD *)(v11 + 424);
      *(_DWORD *)buf = 136448002;
      *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v11 + 74;
      *(_WORD *)&buf[22] = 2080;
      v268 = (uint64_t)" ";
      v269 = 1024;
      *(_DWORD *)v270 = v100;
      *(_WORD *)&v270[4] = 1024;
      *(_DWORD *)&v270[6] = v99;
      LOWORD(v271) = 1024;
      *(_DWORD *)((char *)&v271 + 2) = v101;
      HIWORD(v271) = 2048;
      *(void *)v272 = v11;
      *(_WORD *)&v272[8] = 2048;
      *(void *)v273 = v16;
      _os_log_impl( &dword_181A5C000,  v98,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p",  buf,  0x46u);
    }
  }

    if (v50) {
      free(v50);
    }
    goto LABEL_156;
  }

  uint64_t v13 = (uint64_t *)(handle + 8);
LABEL_18:
  uint64_t v14 = *v13;
  if (!*v13) {
    goto LABEL_156;
  }
  if ((*(_BYTE *)(v14 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      char v42 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v43 = *(void *)(v14 + 256);
        BOOL v44 = *(_DWORD *)(*(void *)(v14 + 248) + 372LL);
        if (v43) {
          LODWORD(v43) = *(_DWORD *)(v43 + 860);
        }
        os_log_type_t v45 = *(_DWORD *)(v14 + 424);
        *(_DWORD *)buf = 136448258;
        unint64_t v63 = "nw_protocol_http1_replace_input_handler";
        v64 = 2082;
        unsigned int v65 = (nw_protocol *)(v14 + 74);
        id v66 = 2080;
        uint64_t v67 = (nw_protocol *)" ";
        uint64_t v68 = 1024;
        *(_DWORD *)uint64_t v69 = v44;
        *(_WORD *)&v69[4] = 1024;
        *(_DWORD *)&v69[6] = v43;
        char v70 = 1024;
        __int128 v71 = v45;
        v72 = 2048;
        v73 = v14;
        nw_endpoint_t v74 = 2048;
        uint64_t v75 = a2;
        v76 = 2048;
        v77 = a3;
        _os_log_impl( &dword_181A5C000,  v42,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> called for stream %p with old protocol: %p and new protocol: %p",  buf,  0x50u);
      }
    }
  }

  if (a1->default_input_handler != a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    default_input_handler = a1->default_input_handler;
    *(_DWORD *)buf = 136446722;
    unint64_t v63 = "nw_protocol_http1_replace_input_handler";
    v64 = 2048;
    unsigned int v65 = default_input_handler;
    id v66 = 2048;
    uint64_t v67 = a2;
    id v16 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    int64_t v60 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v17 = (os_log_s *)gLogObj;
      id v18 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_43;
      }
      uint64_t v19 = a1->default_input_handler;
      *(_DWORD *)buf = 136446722;
      unint64_t v63 = "nw_protocol_http1_replace_input_handler";
      v64 = 2048;
      unsigned int v65 = v19;
      id v66 = 2048;
      uint64_t v67 = a2;
      uint64_t v20 = "%{public}s Old input handler does not match (%p != %p)";
    }

    else if (v60)
    {
      int v23 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v17 = (os_log_s *)gLogObj;
      id v18 = type;
      int v24 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v23)
      {
        if (v24)
        {
          os_log_type_t v25 = a1->default_input_handler;
          *(_DWORD *)buf = 136446978;
          unint64_t v63 = "nw_protocol_http1_replace_input_handler";
          v64 = 2048;
          unsigned int v65 = v25;
          id v66 = 2048;
          uint64_t v67 = a2;
          uint64_t v68 = 2082;
          *(void *)uint64_t v69 = v23;
          _os_log_impl( &dword_181A5C000,  v17,  v18,  "%{public}s Old input handler does not match (%p != %p), dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v23);
LABEL_43:
        if (v16)
        {
          os_log_type_t v28 = (char *)v16;
LABEL_173:
          free(v28);
          return 0LL;
        }

        return 0LL;
      }

      if (!v24) {
        goto LABEL_43;
      }
      os_log_type_t v27 = a1->default_input_handler;
      *(_DWORD *)buf = 136446722;
      unint64_t v63 = "nw_protocol_http1_replace_input_handler";
      v64 = 2048;
      unsigned int v65 = v27;
      id v66 = 2048;
      uint64_t v67 = a2;
      uint64_t v20 = "%{public}s Old input handler does not match (%p != %p), no backtrace";
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v17 = (os_log_s *)gLogObj;
      id v18 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_43;
      }
      BOOL v26 = a1->default_input_handler;
      *(_DWORD *)buf = 136446722;
      unint64_t v63 = "nw_protocol_http1_replace_input_handler";
      v64 = 2048;
      unsigned int v65 = v26;
      id v66 = 2048;
      uint64_t v67 = a2;
      uint64_t v20 = "%{public}s Old input handler does not match (%p != %p), backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v17, v18, v20, buf, 0x20u);
    goto LABEL_43;
  }

  nw_protocol_set_input_handler(v14, (uint64_t)a3);
  if (*(nw_protocol **)(v11 + 48) == a2) {
    nw_protocol_set_input_handler(v11, (uint64_t)a3);
  }
  os_log_type_t v21 = *(void *)(v14 + 256);
  if (v21) {
    nw_protocol_set_input_handler(v21, (uint64_t)a3);
  }
  if (!a3->output_handler) {
    nw_protocol_set_output_handler((uint64_t)a3, v14);
  }
  return 1LL;
}

          goto LABEL_63;
        }

        if (type == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          id v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v92 = v100[0];
          if (os_log_type_enabled(v80, (os_log_type_t)v100[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_service_connector_add_active_connection";
            _os_log_impl( &dword_181A5C000,  v80,  v92,  "%{public}s called with null serviceConnector->activeConnections, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_154;
        }

        unsigned int v88 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v85 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v89 = v100[0];
        v90 = os_log_type_enabled(v85, (os_log_type_t)v100[0]);
        if (v88)
        {
          if (v90)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_service_connector_add_active_connection";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v88;
            _os_log_impl( &dword_181A5C000,  v85,  v89,  "%{public}s called with null serviceConnector->activeConnections, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v88);
          if (!v42) {
            goto LABEL_75;
          }
          goto LABEL_64;
        }

        if (v90)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_service_connector_add_active_connection";
          _os_log_impl( &dword_181A5C000,  v85,  v89,  "%{public}s called with null serviceConnector->activeConnections, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v79 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_service_connector_add_active_connection";
        char v42 = (char *)_os_log_send_and_compose_impl();

        v100[0] = 16;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        if (v100[0] == 17)
        {
          __nwlog_obj();
          id v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          id v81 = v100[0];
          if (os_log_type_enabled(v80, (os_log_type_t)v100[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_service_connector_add_active_connection";
            _os_log_impl(&dword_181A5C000, v80, v81, "%{public}s called with null serviceConnector", buf, 0xCu);
          }

          goto LABEL_154;
        }

        if (type == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          id v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v91 = v100[0];
          if (os_log_type_enabled(v80, (os_log_type_t)v100[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_service_connector_add_active_connection";
            _os_log_impl( &dword_181A5C000,  v80,  v91,  "%{public}s called with null serviceConnector, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_154;
        }

        v84 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v85 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v86 = v100[0];
        os_log_type_t v87 = os_log_type_enabled(v85, (os_log_type_t)v100[0]);
        if (v84)
        {
          if (v87)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_service_connector_add_active_connection";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v84;
            _os_log_impl( &dword_181A5C000,  v85,  v86,  "%{public}s called with null serviceConnector, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v84);
          goto LABEL_63;
        }

        if (v87)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_service_connector_add_active_connection";
          _os_log_impl( &dword_181A5C000,  v85,  v86,  "%{public}s called with null serviceConnector, no backtrace",  buf,  0xCu);
        }
      }

      goto LABEL_63;
    }

    __nwlog_obj();
    uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_service_connector_accept_connection_for_request";
    uint64_t v68 = (char *)_os_log_send_and_compose_impl();

    v100[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v68, v100, &type))
    {
      if (v100[0] == 17)
      {
        __nwlog_obj();
        uint64_t v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v70 = v100[0];
        if (os_log_type_enabled(v69, (os_log_type_t)v100[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_service_connector_accept_connection_for_request";
          _os_log_impl(&dword_181A5C000, v69, v70, "%{public}s [nw_unique_connection init:] failed", buf, 0xCu);
        }
      }

      else if (type)
      {
        nw_endpoint_t v74 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v75 = v100[0];
        v76 = os_log_type_enabled(v69, (os_log_type_t)v100[0]);
        if (v74)
        {
          if (v76)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_service_connector_accept_connection_for_request";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v74;
            _os_log_impl( &dword_181A5C000,  v69,  v75,  "%{public}s [nw_unique_connection init:] failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v74);
          goto LABEL_125;
        }

        if (v76)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_service_connector_accept_connection_for_request";
          _os_log_impl( &dword_181A5C000,  v69,  v75,  "%{public}s [nw_unique_connection init:] failed, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v78 = v100[0];
        if (os_log_type_enabled(v69, (os_log_type_t)v100[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_service_connector_accept_connection_for_request";
          _os_log_impl( &dword_181A5C000,  v69,  v78,  "%{public}s [nw_unique_connection init:] failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

      *((_BYTE *)v11 + 475) |= 8u;
      override_flags = v201->override_flags;
      if ((override_flags & 0x10) == 0)
      {
LABEL_143:
        if ((override_flags & 8) == 0) {
          goto LABEL_144;
        }
        goto LABEL_156;
      }

        goto LABEL_224;
      }

      if (!v162)
      {
        __nwlog_obj();
        v120 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v150 = v163;
        if (os_log_type_enabled(v120, v163))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_unlisted_tracker";
          _os_log_impl( &dword_181A5C000,  v120,  v150,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_154;
      }

      os_log_type_t v137 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v138 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      HIDWORD(v159) = v163;
      os_log_type_t v139 = os_log_type_enabled(v138, v163);
      if (v137)
      {
        if (v139)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_unlisted_tracker";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v137;
          _os_log_impl( &dword_181A5C000,  v138,  BYTE4(v159),  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v137);
      }

      else
      {
        if (v139)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_unlisted_tracker";
          _os_log_impl( &dword_181A5C000,  v138,  BYTE4(v159),  "%{public}s metadata must be http_connection, no backtrace",  buf,  0xCu);
        }
      }

    goto LABEL_155;
  }

  if (!v24)
  {
    __nwlog_obj();
    char v70 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v105 = "nw_endpoint_flow_find_protocol_to_join";
    unsigned int v61 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v102 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int128 v71 = type;
      if (os_log_type_enabled(v62, type))
      {
        *(_DWORD *)buf = 136446210;
        v105 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v62, v71, "%{public}s called with null endpoint", buf, 0xCu);
      }

      goto LABEL_137;
    }

    if (!v102)
    {
      __nwlog_obj();
      uint64_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v83 = type;
      if (os_log_type_enabled(v62, type))
      {
        *(_DWORD *)buf = 136446210;
        v105 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl( &dword_181A5C000,  v62,  v83,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_137;
    }

    nw_endpoint_t v74 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v67 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v77 = type;
    id v78 = os_log_type_enabled(v67, type);
    if (v74)
    {
      if (v78)
      {
        *(_DWORD *)buf = 136446466;
        v105 = "nw_endpoint_flow_find_protocol_to_join";
        v106 = 2082;
        nw_endpoint_t v107 = v74;
        _os_log_impl( &dword_181A5C000,  v67,  v77,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_121;
    }

    if (v78)
    {
      *(_DWORD *)buf = 136446210;
      v105 = "nw_endpoint_flow_find_protocol_to_join";
      _os_log_impl(&dword_181A5C000, v67, v77, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
    }

    goto LABEL_154;
  }

  if (!v25)
  {
    __nwlog_obj();
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v105 = "nw_endpoint_flow_find_protocol_to_join";
    unsigned int v61 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v102 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v73 = type;
      if (os_log_type_enabled(v62, type))
      {
        *(_DWORD *)buf = 136446210;
        v105 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v62, v73, "%{public}s called with null parameters", buf, 0xCu);
      }

          if (v56) {
            free(v56);
          }
          BOOL v30 = 0;
LABEL_53:
          os_log_type_t v31 = v28 == &nw_protocol_ref_counted_handle;
          int v22 = v66;
          if (v31 && a1->handle == &nw_protocol_ref_counted_handle)
          {
            char v40 = a1[1].callbacks;
            if (v40)
            {
              uint64_t v41 = (nw_protocol_callbacks *)((char *)v40 - 1);
              a1[1].callbacks = v41;
              if (!v41)
              {
                char v42 = *(void (***)(void))a1[1].flow_id;
                if (v42)
                {
                  *(void *)a1[1].flow_id = 0LL;
                  v42[2](v42);
                  _Block_release(v42);
                }

                if ((a1[1].flow_id[8] & 1) != 0)
                {
                  os_log_type_t v43 = *(const void **)a1[1].flow_id;
                  if (v43) {
                    _Block_release(v43);
                  }
                }

                free(a1);
              }
            }
          }

          os_log_type_t v31 = handle == &nw_protocol_ref_counted_handle;
          int v24 = v67;
          if (v31 && v20->handle == &nw_protocol_ref_counted_handle)
          {
            BOOL v44 = v20[1].callbacks;
            if (v44)
            {
              os_log_type_t v45 = (nw_protocol_callbacks *)((char *)v44 - 1);
              v20[1].callbacks = v45;
              if (!v45)
              {
                __int16 v46 = *(void (***)(void))v20[1].flow_id;
                if (v46)
                {
                  *(void *)v20[1].flow_id = 0LL;
                  v46[2](v46);
                  _Block_release(v46);
                }

                if ((v20[1].flow_id[8] & 1) != 0)
                {
                  nw_endpoint_t v47 = *(const void **)v20[1].flow_id;
                  if (v47) {
                    _Block_release(v47);
                  }
                }

                free(v20);
              }
            }
          }

          uint64_t v19 = *(_BYTE **)&type[8];
          *(_DWORD *)(*(void *)&type[8] + 24LL) = v30;
          if ((*(_BYTE *)p_output_handler & 8) == 0) {
            goto LABEL_64;
          }
          goto LABEL_60;
        }

          if (!v42)
          {
LABEL_156:
            os_log_type_t v21 = 0LL;
LABEL_24:
            if (a1->handle == &nw_protocol_ref_counted_handle)
            {
              os_log_type_t v25 = a1[1].callbacks;
              if (v25)
              {
                BOOL v26 = (nw_protocol_callbacks *)((char *)v25 - 1);
                a1[1].callbacks = v26;
                if (!v26)
                {
                  os_log_type_t v27 = *(void (***)(void))a1[1].flow_id;
                  if (v27)
                  {
                    *(void *)a1[1].flow_id = 0LL;
                    v27[2](v27);
                    _Block_release(v27);
                  }

                  if ((a1[1].flow_id[8] & 1) != 0)
                  {
                    os_log_type_t v28 = *(const void **)a1[1].flow_id;
                    if (v28) {
                      _Block_release(v28);
                    }
                  }

                  free(a1);
                }
              }
            }

            if (handle == &nw_protocol_ref_counted_handle && v15->handle == &nw_protocol_ref_counted_handle)
            {
              os_log_type_t v29 = v15[1].callbacks;
              if (v29)
              {
                BOOL v30 = (nw_protocol_callbacks *)((char *)v29 - 1);
                v15[1].callbacks = v30;
                if (!v30)
                {
                  os_log_type_t v31 = *(void (***)(void))v15[1].flow_id;
                  if (v31)
                  {
                    *(void *)v15[1].flow_id = 0LL;
                    v31[2](v31);
                    _Block_release(v31);
                  }

                  if ((v15[1].flow_id[8] & 1) != 0)
                  {
                    nw_endpoint_t v32 = *(const void **)v15[1].flow_id;
                    if (v32) {
                      _Block_release(v32);
                    }
                  }

                  free(v15);
                }
              }
            }

        if (v57) {
          free(v57);
        }
        goto LABEL_27;
      }
    }
  }

LABEL_277:
                  goto LABEL_284;
                }

                if (!v236)
                {
                  __nwlog_obj();
                  v184 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v203 = v237;
                  if (os_log_type_enabled(v184, v237))
                  {
                    *(_DWORD *)buf = 136446210;
                    v239 = "nw_endpoint_transform_get_next_child_scale_percentage";
                    _os_log_impl( &dword_181A5C000,  v184,  v203,  "%{public}s called with null nw_protocol_options_is_quic(current_quic_options), backtrace limit exceeded",  buf,  0xCu);
                  }

                  goto LABEL_277;
                }

                v197 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v194 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v198 = v237;
                BOOL v199 = os_log_type_enabled(v194, v237);
                if (v197)
                {
                  if (v199)
                  {
                    *(_DWORD *)buf = 136446466;
                    v239 = "nw_endpoint_transform_get_next_child_scale_percentage";
                    __int16 v240 = 2082;
                    id_str = v197;
                    _os_log_impl( &dword_181A5C000,  v194,  v198,  "%{public}s called with null nw_protocol_options_is_quic(current_quic_options), dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(v197);
                  if (!v183) {
                    goto LABEL_286;
                  }
                  goto LABEL_285;
                }

                if (v199)
                {
                  *(_DWORD *)buf = 136446210;
                  v239 = "nw_endpoint_transform_get_next_child_scale_percentage";
                  _os_log_impl( &dword_181A5C000,  v194,  v198,  "%{public}s called with null nw_protocol_options_is_quic(current_quic_options), no backtrace",  buf,  0xCu);
                }

                goto LABEL_283;
              }
            }

            else
            {
              id v219 = v97;
              __nwlog_obj();
              v182 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 136446210;
              v239 = "nw_endpoint_transform_get_next_child_scale_percentage";
              v183 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t v237 = OS_LOG_TYPE_ERROR;
              char v236 = 0;
              if (v237 == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v184 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v185 = v237;
                if (os_log_type_enabled(v184, v237))
                {
                  *(_DWORD *)buf = 136446210;
                  v239 = "nw_endpoint_transform_get_next_child_scale_percentage";
                  _os_log_impl( &dword_181A5C000,  v184,  v185,  "%{public}s called with null current_quic_options",  buf,  0xCu);
                }

                goto LABEL_277;
              }

              if (!v236)
              {
                __nwlog_obj();
                v184 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v202 = v237;
                if (os_log_type_enabled(v184, v237))
                {
                  *(_DWORD *)buf = 136446210;
                  v239 = "nw_endpoint_transform_get_next_child_scale_percentage";
                  _os_log_impl( &dword_181A5C000,  v184,  v202,  "%{public}s called with null current_quic_options, backtrace limit exceeded",  buf,  0xCu);
                }

                goto LABEL_277;
              }

              v193 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v194 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v195 = v237;
              BOOL v196 = os_log_type_enabled(v194, v237);
              if (!v193)
              {
                if (v196)
                {
                  *(_DWORD *)buf = 136446210;
                  v239 = "nw_endpoint_transform_get_next_child_scale_percentage";
                  _os_log_impl( &dword_181A5C000,  v194,  v195,  "%{public}s called with null current_quic_options, no backtrace",  buf,  0xCu);
                }

      nw_authentication_credential_add_valid_authentication_type(v113, v114);
      --v112;
    }

    while (v112);
    if (!(_DWORD)v108) {
      goto LABEL_386;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v126 = (id)gLogObj;
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v108;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = 0;
    id v127 = (char *)_os_log_send_and_compose_impl();

    v245[0] = 16;
    __int16 v244 = 0;
    if (__nwlog_fault(v127, v245, &v244))
    {
      if (v245[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v128 = (os_log_s *)(id)gLogObj;
        uint64_t v129 = v245[0];
        if (os_log_type_enabled(v128, (os_log_type_t)v245[0]))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v108;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 0;
          _os_log_impl( &dword_181A5C000,  v128,  v129,  "%{public}s invalid result, result_length %u, types_count %u",  buf,  0x18u);
        }

        goto LABEL_283;
      }

      if (v244)
      {
        id v146 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v147 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v148 = v245[0];
        nw_endpoint_t v149 = os_log_type_enabled(v147, (os_log_type_t)v245[0]);
        if (v146)
        {
          if (v149)
          {
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v108;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 0;
            *(_WORD *)&_BYTE buf[24] = 2082;
            *(void *)&buf[26] = v146;
            _os_log_impl( &dword_181A5C000,  v147,  v148,  "%{public}s invalid result, result_length %u, types_count %u, dumping backtrace:%{public}s",  buf,  0x22u);
          }

          v113 = v221;
          free(v146);
        }

        else
        {
          if (v149)
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v108;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 0;
            _os_log_impl( &dword_181A5C000,  v147,  v148,  "%{public}s invalid result, result_length %u, types_count %u, no backtrace",  buf,  0x18u);
          }

          v113 = v221;
        }
      }

      else
      {
        __nwlog_obj();
        id v128 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v156 = v245[0];
        if (os_log_type_enabled(v128, (os_log_type_t)v245[0]))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_authentication_credential_create_from_tlv";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v108;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 0;
          _os_log_impl( &dword_181A5C000,  v128,  v156,  "%{public}s invalid result, result_length %u, types_count %u, backtrace limit exceeded",  buf,  0x18u);
        }

    if (v62) {
      free(v62);
    }
    uint64_t v129 = *(void *)a1[3].flow_id;
    if (v129)
    {
      nw_queue_cancel_source(v129, v63);
      *(void *)a1[3].flow_id = 0LL;
    }

    dispatch_time_t v130 = *(void *)&buf[8];
    uint64_t v131 = *(_BYTE *)(*(void *)&buf[8] + 48LL);
    if ((v131 & 1) != 0)
    {
      v132 = *(void **)(*(void *)&buf[8] + 40LL);
      p_output_handler = v154;
      if (v132)
      {
        os_release(v132);
        uint64_t v131 = *(_BYTE *)(v130 + 48);
      }
    }

    else
    {
      p_output_handler = v154;
    }

    *(void *)(v130 + 40) = 0LL;
    *(_BYTE *)(v130 + 4_Block_object_dispose(va, 8) = v131 | 1;
    v133 = v166[3];
    if (v133)
    {
      if (*(_UNKNOWN **)(v133 + 40) == &nw_protocol_ref_counted_handle)
      {
        v134 = *(void *)(v133 + 88);
        if (v134)
        {
          os_log_type_t v135 = v134 - 1;
          *(void *)(v133 + 8_Block_object_dispose(va, 8) = v135;
          if (!v135)
          {
            v136 = *(void (***)(void))(v133 + 64);
            if (v136)
            {
              *(void *)(v133 + 64) = 0LL;
              v136[2](v136);
              _Block_release(v136);
            }

            if ((*(_BYTE *)(v133 + 72) & 1) != 0)
            {
              os_log_type_t v137 = *(const void **)(v133 + 64);
              if (v137) {
                _Block_release(v137);
              }
            }

            free((void *)v133);
          }
        }
      }
    }

    goto LABEL_62;
  }

  os_log_type_t v37 = *(unsigned __int16 *)v5;
  id v38 = v37 & 0xFFFFF7FF | (a1[6].flow_id[15] << 16);
  *(_WORD *)uint64_t v5 = v37 & 0xF7FF;
  a1[6].flow_id[15] = BYTE2(v38);
LABEL_62:
  _Block_object_dispose(buf, 8);
  if ((object[8] & 1) != 0 && *(void *)object) {
    os_release(*(void **)object);
  }
  _Block_object_dispose(&v165, 8);
  id v6 = *(_WORD *)v5 | 1;
  *(_WORD *)v5 |= 1u;
LABEL_68:
  if ((v6 & 4) != 0)
  {
    if (!a2) {
      return 1LL;
    }
    id v51 = a2->callbacks;
    if (!v51) {
      return 1LL;
    }
    connected = (void (*)(nw_protocol *, nw_protocol *))v51->connected;
    if (!connected) {
      return 1LL;
    }
    connected(a2, a1);
    return 1LL;
  }

  if ((v6 & 2) != 0)
  {
    v53 = 1LL;
    if ((v6 & 0x80) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      id v54 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_socket_connect";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = (char *)a1 + 404;
        _os_log_impl( &dword_181A5C000,  v54,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s Suppressing duplicate connect call",  buf,  0x16u);
      }
    }

    return v53;
  }

  v153 = p_output_handler;
  remote = (nw_endpoint *)nw_socket_get_remote(a1);
  address = nw_endpoint_get_address(remote);
  if (!address)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_socket_connect";
    int v9 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(type.sae_srcif) = 16;
    LOBYTE(v160) = 0;
    if (LOBYTE(type.sae_srcif) == 17)
    {
      uint64_t v10 = (os_log_s *)__nwlog_obj();
      sae_srcif = type.sae_srcif;
      if (!os_log_type_enabled(v10, type.sae_srcif)) {
        goto LABEL_184;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_socket_connect";
      uint64_t v12 = "%{public}s called with null remote";
      goto LABEL_183;
    }

    if (!(_BYTE)v160)
    {
      uint64_t v10 = (os_log_s *)__nwlog_obj();
      sae_srcif = type.sae_srcif;
      if (!os_log_type_enabled(v10, type.sae_srcif)) {
        goto LABEL_184;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_socket_connect";
      uint64_t v12 = "%{public}s called with null remote, backtrace limit exceeded";
      goto LABEL_183;
    }

    uint64_t v13 = (char *)__nw_create_backtrace_string();
    uint64_t v10 = (os_log_s *)__nwlog_obj();
    sae_srcif = type.sae_srcif;
    unsigned int v61 = os_log_type_enabled(v10, type.sae_srcif);
    if (!v13)
    {
      if (!v61) {
        goto LABEL_184;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_socket_connect";
      uint64_t v12 = "%{public}s called with null remote, no backtrace";
      goto LABEL_183;
    }

    if (v61)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_socket_connect";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v13;
      os_log_type_t v15 = "%{public}s called with null remote, dumping backtrace:%{public}s";
LABEL_20:
      _os_log_impl(&dword_181A5C000, v10, sae_srcif, v15, buf, 0x16u);
      goto LABEL_21;
    }

    goto LABEL_21;
  }

  uint64_t v41 = address;
  char v42 = mach_continuous_time();
  if (v42 <= 1) {
    os_log_type_t v43 = 1LL;
  }
  else {
    os_log_type_t v43 = v42;
  }
  *(void *)a1[2].flow_id = v43;
  if (_nw_signposts_once != -1) {
    dispatch_once(&_nw_signposts_once, &__block_literal_global_18_64095);
  }
  sa_family = v41->sa_family;
  if (sa_family == 30 || sa_family == 2)
  {
    if ((*(_WORD *)v5 & 0x20) != 0)
    {
      nw_endpoint_t v149 = 0;
      address_with_port = 0LL;
      uint64_t v48 = 0;
      goto LABEL_120;
    }

    local = (nw_endpoint *)nw_socket_get_local(a1);
    address_with_port = (char *)local;
    nw_endpoint_t v47 = (*(unsigned __int16 *)v5 | ((char)a1[6].flow_id[15] << 16)) >= 0 || local == 0LL;
    uint64_t v48 = !v47;
    if (!v47)
    {
      if (nw_endpoint_get_type(local) != nw_endpoint_type_address)
      {
        uint64_t v48 = 0;
        goto LABEL_160;
      }

      v49 = (sockaddr *)nw_endpoint_get_address((nw_endpoint_t)address_with_port);
      if ((*(_WORD *)v5 & 0x80) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        v50 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_socket_connect";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = (char *)a1 + 404;
          *(_WORD *)&buf[22] = 2112;
          *(void *)&v170 = address_with_port;
          _os_log_impl( &dword_181A5C000,  v50,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s resetting local port for local endpoint %@",  buf,  0x20u);
        }
      }

      address_with_port = nw_endpoint_create_address_with_port(&v49->sa_len, "0");
    }

    if (!address_with_port)
    {
      nw_endpoint_t v149 = 0;
LABEL_120:
      int64_t v60 = 0LL;
LABEL_161:
      parameters = (nw_parameters *)nw_socket_get_parameters(a1);
      path = (void *)nw_socket_get_path(a1);
      id v80 = nw_path_copy_scoped_interface(path);
      v151 = address_with_port;
      if (v80
        || (id v80 = nw_parameters_copy_required_interface(parameters)) != 0LL
        || (id v80 = nw_endpoint_copy_interface(remote)) != 0LL)
      {
        v150 = 0;
        id v152 = v80;
        id v81 = v80[2];
      }

      else
      {
        id v152 = 0LL;
        id v81 = 0;
        v150 = 1;
      }

      unsigned int v82 = nw_parameters_copy_default_protocol_stack(parameters);
      v83 = nw_protocol_stack_copy_transport_protocol(v82);
      if (!v83)
      {
        v85 = 0;
        goto LABEL_190;
      }

      v148 = v48;
      v84 = v83;
      v85 = nw_protocol_options_matches_definition(v84, (void *)g_tcp_definition);

      if (v85)
      {
        if (nw_parameters_get_fast_open_enabled(parameters))
        {
          *(_WORD *)v5 |= 0x8000u;
LABEL_171:
          if (nw_tcp_options_get_no_fast_open_cookie(v84)) {
            v85 = 7;
          }
          else {
            v85 = 3;
          }
          goto LABEL_189;
        }

        if (nw_tcp_options_get_enable_fast_open(v84))
        {
          is_connection_flow = nw_protocol_input_handler_is_connection_flow((uint64_t)a2);
          v85 = 0;
          if (is_connection_flow) {
            os_log_type_t v87 = 0;
          }
          else {
            os_log_type_t v87 = 0x8000;
          }
          unsigned int v88 = *(_WORD *)&a1[6].flow_id[13] & 0x7FFF | (a1[6].flow_id[15] << 16);
          *(_WORD *)uint64_t v5 = *(_WORD *)&a1[6].flow_id[13] & 0x7FFF | v87;
          a1[6].flow_id[15] = BYTE2(v88);
          if (is_connection_flow) {
            goto LABEL_189;
          }
          goto LABEL_171;
        }

        v85 = 0;
        v90 = *(unsigned __int16 *)v5;
        v91 = v90 & 0xFFFF7FFF | (a1[6].flow_id[15] << 16);
        *(_WORD *)uint64_t v5 = v90 & 0x7FFF;
        a1[6].flow_id[15] = BYTE2(v91);
      }

LABEL_283:
                goto LABEL_284;
              }

              if (v196)
              {
                *(_DWORD *)buf = 136446466;
                v239 = "nw_endpoint_transform_get_next_child_scale_percentage";
                __int16 v240 = 2082;
                id_str = v193;
                _os_log_impl( &dword_181A5C000,  v194,  v195,  "%{public}s called with null current_quic_options, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v193);
            }

    if (!v102) {
      return;
    }
    unint64_t v63 = (nw_protocol *)v102;
LABEL_116:
    free(v63);
    return;
  }

  id v18 = v17->handle;
  if (v18 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v19 = v17[1].callbacks;
    if (v19) {
      v17[1].callbacks = (nw_protocol_callbacks *)((char *)&v19->add_input_handler + 1);
    }
  }

  uint64_t v20 = a2->handle;
  if (v20 == &nw_protocol_ref_counted_handle)
  {
    os_log_type_t v21 = a2[1].callbacks;
    if (v21) {
      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v21->add_input_handler + 1);
    }
  }

  int v22 = v17->callbacks;
  if (v22)
  {
    connected = (void (*)(nw_protocol *, nw_protocol *))v22->connected;
    if (connected)
    {
      connected(v17, a2);
      goto LABEL_39;
    }
  }

  __nwlog_obj();
  v89 = v17->identifier->name;
  *(_DWORD *)buf = 136446722;
  *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
  if (!v89) {
    v89 = "invalid";
  }
  *(_WORD *)&buf[12] = 2082;
  *(void *)&buf[14] = v89;
  *(_WORD *)&buf[22] = 2048;
  v167 = v17;
  v90 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  id v165 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v90, type, &v165))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v91 = (os_log_s *)__nwlog_obj();
      os_log_type_t v92 = type[0];
      if (!os_log_type_enabled(v91, type[0])) {
        goto LABEL_258;
      }
      BOOL v93 = v17->identifier->name;
      if (!v93) {
        BOOL v93 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v93;
      *(_WORD *)&buf[22] = 2048;
      v167 = v17;
      os_log_type_t v94 = "%{public}s protocol %{public}s (%p) has invalid connected callback";
      goto LABEL_257;
    }

    if (v165 == OS_LOG_TYPE_DEFAULT)
    {
      v91 = (os_log_s *)__nwlog_obj();
      os_log_type_t v92 = type[0];
      if (!os_log_type_enabled(v91, type[0])) {
        goto LABEL_258;
      }
      v121 = v17->identifier->name;
      if (!v121) {
        v121 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v121;
      *(_WORD *)&buf[22] = 2048;
      v167 = v17;
      os_log_type_t v94 = "%{public}s protocol %{public}s (%p) has invalid connected callback, backtrace limit exceeded";
      goto LABEL_257;
    }

    v106 = (char *)__nw_create_backtrace_string();
    v91 = (os_log_s *)__nwlog_obj();
    os_log_type_t v92 = type[0];
    nw_endpoint_t v107 = os_log_type_enabled(v91, type[0]);
    if (v106)
    {
      if (v107)
      {
        id v108 = v17->identifier->name;
        if (!v108) {
          id v108 = "invalid";
        }
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v108;
        *(_WORD *)&buf[22] = 2048;
        v167 = v17;
        *(_WORD *)v168 = 2082;
        *(void *)&v168[2] = v106;
        _os_log_impl( &dword_181A5C000,  v91,  v92,  "%{public}s protocol %{public}s (%p) has invalid connected callback, dumping backtrace:%{public}s",  buf,  0x2Au);
      }

      free(v106);
      goto LABEL_258;
    }

    if (v107)
    {
      v136 = v17->identifier->name;
      if (!v136) {
        v136 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v136;
      *(_WORD *)&buf[22] = 2048;
      v167 = v17;
      os_log_type_t v94 = "%{public}s protocol %{public}s (%p) has invalid connected callback, no backtrace";
LABEL_257:
      _os_log_impl(&dword_181A5C000, v91, v92, v94, buf, 0x20u);
    }
  }

    if (v419 == (uint64_t *)v15)
    {
      if (v16 != (char *)v18)
      {
        v232 = (char *)*v113;
        v231 = (void **)(v113 + 1);
        id v230 = v232;
        while (1)
        {
          v233 = (v230 - v114 + 4096) >> 4;
          else {
            v234 = (uint64_t)(v18 - (void)v16) >> 4;
          }
          if (v234) {
            memmove(v114, v16, 16 * v234);
          }
          v16 += 16 * v234;
          v235 = (char *)*v231++;
          id v230 = v235;
          v114 = v235;
        }
      }
    }

    else
    {
      v209 = *(void *)v15 + 4096LL;
      if ((char *)v209 != v16)
      {
        v210 = (char *)*v113;
        while (1)
        {
          v211 = (v210 - v114 + 4096) >> 4;
          else {
            v212 = (v209 - (uint64_t)v16) >> 4;
          }
          if (v212) {
            memmove(v114, v16, 16 * v212);
          }
          v16 += 16 * v212;
          v213 = (char *)v113[1];
          ++v113;
          v210 = v213;
          v114 = v213;
        }

        v114 += 16 * v212;
        if ((char *)(*v113 + 4096) == v114)
        {
          v214 = (char *)v113[1];
          ++v113;
          v114 = v214;
        }
      }

      v215 = (uint64_t *)(v15 + 8);
      if ((uint64_t *)(v15 + 8) != v419)
      {
        v216 = (char *)*v113;
        do
        {
          v217 = 0LL;
          unint64_t v218 = *v215;
          while (1)
          {
            id v219 = (v216 - v114 + 4096) >> 4;
            if ((4096 - 16 * v217) >> 4 >= v219) {
              v220 = v219;
            }
            else {
              v220 = (4096 - 16 * v217) >> 4;
            }
            if (v220) {
              memmove(v114, (const void *)(v218 + 16 * v217), 16 * v220);
            }
            v217 += v220;
            if (v217 == 256) {
              break;
            }
            v221 = (char *)v113[1];
            ++v113;
            v216 = v221;
            v114 = v221;
          }

          v114 += 16 * v220;
          v216 = (char *)*v113;
          if ((char *)(*v113 + 4096) == v114)
          {
            v222 = (char *)v113[1];
            ++v113;
            v216 = v222;
            v114 = v222;
          }

          ++v215;
        }

        while (v215 != v419);
      }

      nw_endpoint_t v223 = (char *)*v419;
      if (*v419 != v18)
      {
        nw_endpoint_t v226 = (char *)*v113;
        v225 = (void **)(v113 + 1);
        unint64_t v224 = v226;
        while (1)
        {
          size_t v227 = (v224 - v114 + 4096) >> 4;
          v228 = (uint64_t)(v18 - (void)v223) >> 4 >= v227 ? v227 : (uint64_t)(v18 - (void)v223) >> 4;
          if (v228) {
            memmove(v114, v223, 16 * v228);
          }
          v223 += 16 * v228;
          v229 = (char *)*v225++;
          unint64_t v224 = v229;
          v114 = v229;
        }
      }
    }

    return;
  }

  v114 = (char *)(*v113 + 16LL * v5);
  unint64_t v115 = j - v24;
  if (j > v24) {
    goto LABEL_143;
  }
LABEL_202:
  id v159 = v114;
  v160 = (char **)v113;
  if (j) {
    goto LABEL_220;
  }
}

        v113 = v221;
      }
    }

    if (v127) {
      free(v127);
    }

LABEL_385:
    v113 = 0LL;
LABEL_386:

    v232 = v113;
    int v9 = v239;
  }

  while (v6 >= 5 && v10 < v242);
  __int16 v240 = v9;
  if (!v234)
  {
    id v4 = (void *)&unk_182665000;
LABEL_388:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v158 = (id)gLogObj;
    v243 = v4[393];
    *(_DWORD *)buf = v243;
    *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
    id v159 = (char *)_os_log_send_and_compose_impl();

    v245[0] = 16;
    __int16 v244 = 0;
    if (__nwlog_fault(v159, v245, &v244))
    {
      if (v245[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v160 = (os_log_s *)(id)gLogObj;
        nw_endpoint_t v161 = v245[0];
        if (os_log_type_enabled(v160, (os_log_type_t)v245[0]))
        {
          *(_DWORD *)buf = v243;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
          _os_log_impl(&dword_181A5C000, v160, v161, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }

      else if (v244)
      {
        v166 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v160 = (os_log_s *)(id)gLogObj;
        v167 = v245[0];
        v168 = os_log_type_enabled(v160, (os_log_type_t)v245[0]);
        if (v166)
        {
          if (v168)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v166;
            _os_log_impl( &dword_181A5C000,  v160,  v167,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v166);
          if (!v159) {
            goto LABEL_418;
          }
          goto LABEL_417;
        }

        if (v168)
        {
          *(_DWORD *)buf = v243;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
          _os_log_impl(&dword_181A5C000, v160, v167, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v160 = (os_log_s *)(id)gLogObj;
        v172 = v245[0];
        if (os_log_type_enabled(v160, (os_log_type_t)v245[0]))
        {
          *(_DWORD *)buf = v243;
          *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
          _os_log_impl( &dword_181A5C000,  v160,  v172,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v159)
    {
LABEL_418:
      v234 = 0LL;
      os_log_type_t v173 = 0LL;
      goto LABEL_442;
    }

            free(v216);
            goto LABEL_284;
          }

          __nwlog_obj();
          v217 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          unint64_t v224 = type;
          if (os_log_type_enabled(v217, type))
          {
            buf[0] = 136446210;
            *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
            _os_log_impl( &dword_181A5C000,  v217,  v224,  "%{public}s nw_connection_fillout_data_transfer_snapshot_on_nw_queue failed, no backtrace",  (uint8_t *)buf,  0xCu);
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v217 = (os_log_s *)(id)gLogObj;
          nw_endpoint_t v223 = type;
          if (os_log_type_enabled(v217, type))
          {
            buf[0] = 136446210;
            *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
            _os_log_impl( &dword_181A5C000,  v217,  v223,  "%{public}s nw_connection_fillout_data_transfer_snapshot_on_nw_queue failed, backtrace limit exceeded",  (uint8_t *)buf,  0xCu);
          }
        }
      }

      if (!v216) {
        goto LABEL_284;
      }
      goto LABEL_283;
    }

    *(_DWORD *)((char *)v163 + 1706) |= 0x4000u;
    if (nw_path_uses_interface_type(v174, nw_interface_type_wifi))
    {
      v163->connected_interface_os_log_type_t type = 1;
    }

    else if (nw_path_uses_interface_type((nw_path_t)v175, nw_interface_type_cellular))
    {
      v163->connected_interface_os_log_type_t type = 2;
    }

    else if (nw_path_uses_interface_type((nw_path_t)v175, nw_interface_type_wired))
    {
      v163->connected_interface_os_log_type_t type = 3;
    }

    else if (nw_path_uses_interface_type((nw_path_t)v175, nw_interface_type_loopback))
    {
      v163->connected_interface_os_log_type_t type = 4;
    }

    else
    {
      v163->connected_interface_os_log_type_t type = 0;
    }

    if (nw_path_uses_interface_subtype(v175, 1001))
    {
      v163->connected_interface_subos_log_type_t type = 1001;
    }

    else if (nw_path_uses_interface_subtype(v175, 1002))
    {
      v163->connected_interface_subos_log_type_t type = 1002;
    }

    else if (nw_path_uses_interface_subtype(v175, 4001))
    {
      v163->connected_interface_subos_log_type_t type = 4001;
    }

    else if (nw_path_uses_interface_subtype(v175, 5001))
    {
      v163->connected_interface_subos_log_type_t type = 5001;
    }

    else
    {
      v163->connected_interface_subos_log_type_t type = 0;
    }

    if (nw_path_uses_nexus_internal(v175, 0))
    {
      nexus_protocol_level = nw_path_get_nexus_protocol_level(v175);
      if (nexus_protocol_level >= 6)
      {
LABEL_239:
        v178.i64[0] = v175->estimates.up;
        v178.i64[1] = v175->estimates.down;
        *(int8x16_t *)&v163->estimated_upload_throughput = vbicq_s8( vorrq_s8( (int8x16_t)vshlq_u64( (uint64x2_t)vdupq_n_s64(0x8000uLL),  v178),  (int8x16_t)vcgtq_u64( v178,  (uint64x2_t)vdupq_n_s64(0x30uLL))),  (int8x16_t)vceqzq_s64((int64x2_t)v178));
        goto LABEL_240;
      }

      BOOL v177 = *((_DWORD *)&unk_18272D6D0 + nexus_protocol_level);
    }

    else
    {
      BOOL v177 = 1;
    }

    v163->stack_level = v177;
    goto LABEL_239;
  }

LABEL_284:
            if (!v183)
            {
LABEL_286:

LABEL_287:
              id v97 = v219;
              goto LABEL_151;
            }

          goto LABEL_285;
        default:
LABEL_265:
          v189 = 0;
          v190 = 0;
          id v191 = 0;
          break;
      }

      else {
        os_log_type_t v195 = v190;
      }
      nw_resolver_update_flags_locked( *(NWConcrete_nw_resolver **)(v278 + 32),  *(NWConcrete_nw_resolver_service **)(v278 + 40),  v195,  v189,  v103,  0,  v191);
      if (v82 == 1 || v82 == 4)
      {
        *(void *)os_log_type_t type = 0LL;
        v292 = type;
        v293 = 0x2020000000LL;
        LOWORD(v294) = 0;
        *(void *)v299 = 0LL;
        *(void *)&v299[8] = v299;
        *(void *)&v299[16] = 0x3032000000LL;
        *(void *)&v299[24] = __Block_byref_object_copy__5627;
        *(void *)&v299[32] = __Block_byref_object_dispose__5628;
        v300 = 0LL;
        BOOL v196 = *(void **)(v278 + 40);
        if (v196)
        {
          v197 = v196;
          os_log_type_t v198 = v197[17];

          *((_WORD *)v292 + 12) = v198;
          BOOL v199 = nw_resolver_service_copy_ech_config(*(NWConcrete_nw_resolver_service **)(v278 + 40));
          os_log_type_t v200 = *(void **)(*(void *)&v299[8] + 40LL);
          *(void *)(*(void *)&v299[8] + 40LL) = v199;
        }

        else
        {
          os_log_type_t v202 = *(void **)(v278 + 32);
          os_log_type_t v203 = (unsigned __int8 *)v202[22];
          v281[0] = MEMORY[0x1895F87A8];
          v281[1] = 3221225472LL;
          v281[2] = ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_205;
          v281[3] = &unk_189BB6AC0;
          v284 = type;
          v285 = v299;
          v286 = buf;
          v282 = v202;
          v283 = v76;
          nw_array_apply(v203, (uint64_t)v281);

          os_log_type_t v200 = v282;
        }

        *(_WORD *)buf[0].sa_data = __rev16(nw_endpoint_get_port(*(nw_endpoint_t *)(v278 + 48)));
        nw_resolver_insert_address( *(void **)(v278 + 32),  v76,  buf,  *((unsigned __int16 *)v292 + 12),  *(void **)(*(void *)&v299[8] + 40LL));
        _Block_object_dispose(v299, 8);

        _Block_object_dispose(type, 8);
      }

      else
      {
        os_log_type_t v201 = *(void **)(v278 + 32);
        v279[0] = MEMORY[0x1895F87A8];
        v279[1] = 3221225472LL;
        v279[2] = ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_2_206;
        v279[3] = &__block_descriptor_44_e63_B24__0__NSObject_OS_nw_endpoint__8__NSObject_OS_nw_endpoint__16l;
        v279[4] = buf;
        v280 = v105;
        nw_resolver_remove_endpoint_locked(v201, v279);
      }

      goto LABEL_325;
    }

    if (v82 == 1 || v82 == 3) {
      goto LABEL_256;
    }
    if (v82 != 4) {
      goto LABEL_265;
    }
    v175 = *(void *)(v278 + 32);
    if (v175)
    {
      if ((*(_BYTE *)(v175 + 346) & 0x20) != 0) {
        goto LABEL_326;
      }
      if (*(_BYTE *)(v175 + 256))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v176 = (os_log_s *)(id)gconnectionLogObj;
        if (!os_log_type_enabled(v176, OS_LOG_TYPE_INFO)) {
          goto LABEL_338;
        }
        BOOL v177 = *(void *)(v278 + 32) + 256LL;
        *(_DWORD *)v299 = 136446466;
        *(void *)&v299[4] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
        *(_WORD *)&v299[12] = 2082;
        *(void *)&v299[14] = v177;
        v178 = v176;
        v179 = "%{public}s [C%{public}s] Received expired forged answer, ignoring";
        os_log_type_t v180 = 22;
        goto LABEL_337;
      }

      __nwlog_obj();
      os_log_type_t v176 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v176, OS_LOG_TYPE_INFO))
      {
        v214 = *(_DWORD *)(*(void *)(v278 + 32) + 340LL);
        *(_DWORD *)v299 = 136446466;
        *(void *)&v299[4] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
        *(_WORD *)&v299[12] = 1024;
        *(_DWORD *)&v299[14] = v214;
        v178 = v176;
        v179 = "%{public}s [R%u] Received expired forged answer, ignoring";
        os_log_type_t v180 = 18;
        goto LABEL_337;
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v176 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v176, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v299 = 136446210;
        *(void *)&v299[4] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
        v178 = v176;
        v179 = "%{public}s Received expired forged answer, ignoring";
        os_log_type_t v180 = 12;
LABEL_337:
        _os_log_impl(&dword_181A5C000, v178, OS_LOG_TYPE_INFO, v179, v299, v180);
      }
    }

              goto LABEL_199;
            }

            if (!(_BYTE)v146)
            {
              __nwlog_obj();
              id v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              v120 = type[0];
              if (os_log_type_enabled(v80, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                v151 = "nw_protocol_implementation_get_output_frames";
                _os_log_impl( &dword_181A5C000,  v80,  v120,  "%{public}s called with null return_array, backtrace limit exceeded",  buf,  0xCu);
              }

              goto LABEL_284;
            }

            BOOL v93 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            id v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v102 = type[0];
            v103 = os_log_type_enabled(v80, type[0]);
            if (!v93)
            {
              if (v103)
              {
                *(_DWORD *)buf = 136446210;
                v151 = "nw_protocol_implementation_get_output_frames";
                _os_log_impl( &dword_181A5C000,  v80,  v102,  "%{public}s called with null return_array, no backtrace",  buf,  0xCu);
              }

              goto LABEL_284;
            }

            if (v103)
            {
              *(_DWORD *)buf = 136446466;
              v151 = "nw_protocol_implementation_get_output_frames";
              id v152 = 2082;
              v153 = (nw_protocol_identifier *)v93;
              _os_log_impl( &dword_181A5C000,  v80,  v102,  "%{public}s called with null return_array, dumping backtrace:%{public}s",  buf,  0x16u);
            }
          }

          else
          {
            __nwlog_obj();
            v86 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            v151 = "nw_protocol_implementation_get_output_frames";
            v79 = (void *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(v146) = 0;
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              id v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v87 = type[0];
              if (os_log_type_enabled(v80, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                v151 = "nw_protocol_implementation_get_output_frames";
                _os_log_impl(&dword_181A5C000, v80, v87, "%{public}s called with null input_protocol", buf, 0xCu);
              }

              goto LABEL_284;
            }

            if (!(_BYTE)v146)
            {
              __nwlog_obj();
              id v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              v119 = type[0];
              if (os_log_type_enabled(v80, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                v151 = "nw_protocol_implementation_get_output_frames";
                _os_log_impl( &dword_181A5C000,  v80,  v119,  "%{public}s called with null input_protocol, backtrace limit exceeded",  buf,  0xCu);
              }

              goto LABEL_284;
            }

            BOOL v93 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            id v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v100 = type[0];
            v101 = os_log_type_enabled(v80, type[0]);
            if (!v93)
            {
              if (v101)
              {
                *(_DWORD *)buf = 136446210;
                v151 = "nw_protocol_implementation_get_output_frames";
                _os_log_impl( &dword_181A5C000,  v80,  v100,  "%{public}s called with null input_protocol, no backtrace",  buf,  0xCu);
              }

              goto LABEL_284;
            }

            if (v101)
            {
              *(_DWORD *)buf = 136446466;
              v151 = "nw_protocol_implementation_get_output_frames";
              id v152 = 2082;
              v153 = (nw_protocol_identifier *)v93;
              _os_log_impl( &dword_181A5C000,  v80,  v100,  "%{public}s called with null input_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
            }
          }
        }

        else
        {
          __nwlog_obj();
          v84 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          v151 = "nw_protocol_implementation_get_output_frames";
          v79 = (void *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v146) = 0;
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            id v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v85 = type[0];
            if (os_log_type_enabled(v80, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              v151 = "nw_protocol_implementation_get_output_frames";
              _os_log_impl( &dword_181A5C000,  v80,  v85,  "%{public}s called with null instance->parent_definition->extended_state",  buf,  0xCu);
            }

            goto LABEL_284;
          }

          if (!(_BYTE)v146)
          {
            __nwlog_obj();
            id v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            char v118 = type[0];
            if (os_log_type_enabled(v80, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              v151 = "nw_protocol_implementation_get_output_frames";
              _os_log_impl( &dword_181A5C000,  v80,  v118,  "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded",  buf,  0xCu);
            }

            goto LABEL_284;
          }

          BOOL v93 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          id v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v98 = type[0];
          v99 = os_log_type_enabled(v80, type[0]);
          if (!v93)
          {
            if (v99)
            {
              *(_DWORD *)buf = 136446210;
              v151 = "nw_protocol_implementation_get_output_frames";
              _os_log_impl( &dword_181A5C000,  v80,  v98,  "%{public}s called with null instance->parent_definition->extended_state, no backtrace",  buf,  0xCu);
            }

            goto LABEL_284;
          }

          if (v99)
          {
            *(_DWORD *)buf = 136446466;
            v151 = "nw_protocol_implementation_get_output_frames";
            id v152 = 2082;
            v153 = (nw_protocol_identifier *)v93;
            _os_log_impl( &dword_181A5C000,  v80,  v98,  "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s",  buf,  0x16u);
          }
        }
      }

      else
      {
        __nwlog_obj();
        unsigned int v82 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v151 = "nw_protocol_implementation_get_output_frames";
        v79 = (void *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v146) = 0;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          id v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v83 = type[0];
          if (os_log_type_enabled(v80, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v151 = "nw_protocol_implementation_get_output_frames";
            _os_log_impl( &dword_181A5C000,  v80,  v83,  "%{public}s called with null instance->parent_definition",  buf,  0xCu);
          }

          goto LABEL_284;
        }

        if (!(_BYTE)v146)
        {
          __nwlog_obj();
          id v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          int v117 = type[0];
          if (os_log_type_enabled(v80, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v151 = "nw_protocol_implementation_get_output_frames";
            _os_log_impl( &dword_181A5C000,  v80,  v117,  "%{public}s called with null instance->parent_definition, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_284;
        }

        BOOL v93 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v96 = type[0];
        id v97 = os_log_type_enabled(v80, type[0]);
        if (!v93)
        {
          if (v97)
          {
            *(_DWORD *)buf = 136446210;
            v151 = "nw_protocol_implementation_get_output_frames";
            _os_log_impl( &dword_181A5C000,  v80,  v96,  "%{public}s called with null instance->parent_definition, no backtrace",  buf,  0xCu);
          }

          goto LABEL_284;
        }

        if (v97)
        {
          *(_DWORD *)buf = 136446466;
          v151 = "nw_protocol_implementation_get_output_frames";
          id v152 = 2082;
          v153 = (nw_protocol_identifier *)v93;
          _os_log_impl( &dword_181A5C000,  v80,  v96,  "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s",  buf,  0x16u);
        }
      }
    }

    else
    {
      __nwlog_obj();
      id v78 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v151 = "nw_protocol_implementation_get_output_frames";
      v79 = (void *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v146) = 0;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v81 = type[0];
        if (os_log_type_enabled(v80, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v151 = "nw_protocol_implementation_get_output_frames";
          _os_log_impl(&dword_181A5C000, v80, v81, "%{public}s called with null instance", buf, 0xCu);
        }

        goto LABEL_284;
      }

      if (!(_BYTE)v146)
      {
        __nwlog_obj();
        id v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v116 = type[0];
        if (os_log_type_enabled(v80, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v151 = "nw_protocol_implementation_get_output_frames";
          _os_log_impl( &dword_181A5C000,  v80,  v116,  "%{public}s called with null instance, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_284;
      }

      BOOL v93 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v94 = type[0];
      id v95 = os_log_type_enabled(v80, type[0]);
      if (!v93)
      {
        if (v95)
        {
          *(_DWORD *)buf = 136446210;
          v151 = "nw_protocol_implementation_get_output_frames";
          _os_log_impl(&dword_181A5C000, v80, v94, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }

        goto LABEL_284;
      }

      if (v95)
      {
        *(_DWORD *)buf = 136446466;
        v151 = "nw_protocol_implementation_get_output_frames";
        id v152 = 2082;
        v153 = (nw_protocol_identifier *)v93;
        _os_log_impl( &dword_181A5C000,  v80,  v94,  "%{public}s called with null instance, dumping backtrace:%{public}s",  buf,  0x16u);
      }
    }

    free(v93);
    goto LABEL_199;
  }

  __nwlog_obj();
  nw_endpoint_t v74 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v151 = "nw_protocol_implementation_get_output_frames";
  uint64_t v75 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v146) = 0;
  if (__nwlog_fault(v75, type, &v146))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v76 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v77 = type[0];
      if (os_log_type_enabled(v76, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v151 = "nw_protocol_implementation_get_output_frames";
        _os_log_impl(&dword_181A5C000, v76, v77, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if ((_BYTE)v146)
    {
      v90 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v76 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v91 = type[0];
      os_log_type_t v92 = os_log_type_enabled(v76, type[0]);
      if (v90)
      {
        if (v92)
        {
          *(_DWORD *)buf = 136446466;
          v151 = "nw_protocol_implementation_get_output_frames";
          id v152 = 2082;
          v153 = (nw_protocol_identifier *)v90;
          _os_log_impl( &dword_181A5C000,  v76,  v91,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v90);
        goto LABEL_267;
      }

      if (v92)
      {
        *(_DWORD *)buf = 136446210;
        v151 = "nw_protocol_implementation_get_output_frames";
        _os_log_impl(&dword_181A5C000, v76, v91, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v76 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      unint64_t v115 = type[0];
      if (os_log_type_enabled(v76, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v151 = "nw_protocol_implementation_get_output_frames";
        _os_log_impl( &dword_181A5C000,  v76,  v115,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

    if (v202) {
      free(v202);
    }
    v59 = 0LL;
    goto LABEL_93;
  }

LABEL_285:
            free(v183);
            goto LABEL_286;
          }

          id v219 = 0LL;
          __nwlog_obj();
          v170 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          v239 = "nw_endpoint_transform_get_next_child_scale_percentage";
          v171 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v237 = OS_LOG_TYPE_ERROR;
          char v236 = 0;
          if (__nwlog_fault(v171, &v237, &v236))
          {
            if (v237 == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v172 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v173 = v237;
              if (os_log_type_enabled(v172, v237))
              {
                *(_DWORD *)buf = 136446210;
                v239 = "nw_endpoint_transform_get_next_child_scale_percentage";
                _os_log_impl(&dword_181A5C000, v172, v173, "%{public}s called with null next_parameters", buf, 0xCu);
              }
            }

            else
            {
              if (v236)
              {
                v178 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v179 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v180 = v237;
                BOOL v181 = os_log_type_enabled(v179, v237);
                if (v178)
                {
                  if (v181)
                  {
                    *(_DWORD *)buf = 136446466;
                    v239 = "nw_endpoint_transform_get_next_child_scale_percentage";
                    __int16 v240 = 2082;
                    id_str = v178;
                    _os_log_impl( &dword_181A5C000,  v179,  v180,  "%{public}s called with null next_parameters, dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(v178);
                }

                else
                {
                  if (v181)
                  {
                    *(_DWORD *)buf = 136446210;
                    v239 = "nw_endpoint_transform_get_next_child_scale_percentage";
                    _os_log_impl( &dword_181A5C000,  v179,  v180,  "%{public}s called with null next_parameters, no backtrace",  buf,  0xCu);
                  }
                }

                goto LABEL_270;
              }

              __nwlog_obj();
              v172 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v201 = v237;
              if (os_log_type_enabled(v172, v237))
              {
                *(_DWORD *)buf = 136446210;
                v239 = "nw_endpoint_transform_get_next_child_scale_percentage";
                _os_log_impl( &dword_181A5C000,  v172,  v201,  "%{public}s called with null next_parameters, backtrace limit exceeded",  buf,  0xCu);
              }
            }
          }

                          if (v124) {
                            free(v124);
                          }
                          goto LABEL_135;
                        }

                        id v81 = nw_http_messaging_options_find_or_create_client_metadata_in_parameters( *(void **)(v74 + 480),  a1[6]);
                        if (!v81)
                        {
LABEL_135:
                          char v42 = a1[6];
LABEL_136:
                          unsigned int v88 = *(_DWORD *)(v42 + 544);
                          v89 = *(_DWORD *)(a2 + 52);
                          if (v89) {
                            v89 -= *(_DWORD *)(a2 + 56) + *(_DWORD *)(a2 + 60);
                          }
                          *(_DWORD *)(v42 + 544) = v88 + v89;
                          if (__CFADD__(v88, v89))
                          {
                            if (gLogDatapath)
                            {
                              v102 = (os_log_s *)__nwlog_obj();
                              if (os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG))
                              {
                                v103 = *(_DWORD *)(a2 + 52);
                                if (v103) {
                                  id v104 = (__n128 (*)(uint64_t, uint64_t))(v103
                                }
                                                                                               - (*(_DWORD *)(a2 + 56)
                                                                                                + *(_DWORD *)(a2 + 60)));
                                else {
                                  id v104 = 0LL;
                                }
                                v134 = *(unsigned int *)(a1[6] + 544LL);
                                *(_DWORD *)buf = 136446978;
                                *(void *)&uint8_t buf[4] = "nw_protocol_http_sniffing_get_input_frames_block_invoke";
                                *(_WORD *)&buf[12] = 2082;
                                *(void *)&buf[14] = "http_sniffing->pending_input_frames_byte_count";
                                *(_WORD *)&buf[22] = 2048;
                                v160 = v104;
                                LOWORD(v161) = 2048;
                                *(void *)((char *)&v161 + 2) = v134;
                                _os_log_impl( &dword_181A5C000,  v102,  OS_LOG_TYPE_DEBUG,  "%{public}s Overflow: %{public}s, increment %llu, result %llu",  buf,  0x2Au);
                              }
                            }

                            *(_DWORD *)(a1[6] + 544LL) = -1;
                          }

                          v91 = *(void *)(a2 + 32);
                          os_log_type_t v92 = *(void **)(a2 + 40);
                          v90 = (void *)(a2 + 32);
                          if (v91)
                          {
                            *(void *)(v91 + 40) = v92;
                            os_log_type_t v92 = *(void **)(a2 + 40);
                          }

                          else
                          {
                            *(void *)(*(void *)(a1[5] + 8LL) + 48LL) = v92;
                          }

                          *os_log_type_t v92 = v91;
                          const char *v90 = 0LL;
                          *(void *)(a2 + 40) = 0LL;
                          BOOL v93 = a1[6];
                          os_log_type_t v94 = *(uint64_t **)(v93 + 440);
                          *(void *)(a2 + 40) = v94;
                          *os_log_type_t v94 = a2;
                          *(void *)(v93 + 440) = v90;
                          if (v5) {
                            os_release(v5);
                          }
                          return a2 != 0;
                        }

                        unsigned int v82 = v81;
                        v83 = v82[1];

                        if (nw_protocol_copy_http_client_definition_onceToken != -1) {
                          dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52);
                        }
                        BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v83,  nw_protocol_copy_http_client_definition_definition);

                        if (is_equal_unsafe)
                        {
                          v86 = v82[4];
                          if (v86)
                          {
                            os_log_type_t v87 = v86[6];
                            if (v87) {
                              (*(void (**)(uint64_t, uint64_t))(v87 + 16))(v87, v85);
                            }
                          }
                  }

              if (v213) {
                free((void *)v213);
              }
              goto LABEL_287;
            }

          goto LABEL_348;
        }

        if (!v295)
        {
          __nwlog_obj();
          v220 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v243 = v298;
          if (os_log_type_enabled(v220, v298))
          {
            __int16 v244 = (const char *)*((void *)v32 + 2);
            if (!v244) {
              __int16 v244 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
            v300 = 2082;
            v301 = (uint64_t)v244;
            v302 = 2048;
            v303 = v32;
            _os_log_impl( &dword_181A5C000,  v220,  v243,  "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, backtrace limit exceeded",  buf,  0x20u);
          }

          goto LABEL_285;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v228 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v229 = v298;
        id v230 = os_log_type_enabled(v228, v298);
        if (backtrace_string)
        {
          if (v230)
          {
            v231 = (const char *)*((void *)v32 + 2);
            if (!v231) {
              v231 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
            v300 = 2082;
            v301 = (uint64_t)v231;
            v302 = 2048;
            v303 = v32;
            v304 = 2082;
            v305 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v228,  v229,  "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(backtrace_string);
        }

        else
        {
          if (v230)
          {
            v258 = (const char *)*((void *)v32 + 2);
            if (!v258) {
              v258 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
            v300 = 2082;
            v301 = (uint64_t)v258;
            v302 = 2048;
            v303 = v32;
            _os_log_impl( &dword_181A5C000,  v228,  v229,  "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, no backtrace",  buf,  0x20u);
          }
        }
      }

LABEL_270:
          if (v171) {
            free(v171);
          }
          goto LABEL_287;
        }

        __nwlog_obj();
        v166 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v239 = "nw_endpoint_transform_get_next_child_scale_percentage";
        v167 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t v237 = OS_LOG_TYPE_ERROR;
        char v236 = 0;
        if (__nwlog_fault(v167, &v237, &v236))
        {
          if (v237 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v168 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v169 = v237;
            if (os_log_type_enabled(v168, v237))
            {
              *(_DWORD *)buf = 136446210;
              v239 = "nw_endpoint_transform_get_next_child_scale_percentage";
              _os_log_impl(&dword_181A5C000, v168, v169, "%{public}s called with null current_parameters", buf, 0xCu);
            }
          }

          else
          {
            if (v236)
            {
              v174 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v175 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v176 = v237;
              BOOL v177 = os_log_type_enabled(v175, v237);
              if (v174)
              {
                if (v177)
                {
                  *(_DWORD *)buf = 136446466;
                  v239 = "nw_endpoint_transform_get_next_child_scale_percentage";
                  __int16 v240 = 2082;
                  id_str = v174;
                  _os_log_impl( &dword_181A5C000,  v175,  v176,  "%{public}s called with null current_parameters, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v174);
              }

              else
              {
                if (v177)
                {
                  *(_DWORD *)buf = 136446210;
                  v239 = "nw_endpoint_transform_get_next_child_scale_percentage";
                  _os_log_impl( &dword_181A5C000,  v175,  v176,  "%{public}s called with null current_parameters, no backtrace",  buf,  0xCu);
                }
              }

              goto LABEL_265;
            }

            __nwlog_obj();
            v168 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v200 = v237;
            if (os_log_type_enabled(v168, v237))
            {
              *(_DWORD *)buf = 136446210;
              v239 = "nw_endpoint_transform_get_next_child_scale_percentage";
              _os_log_impl( &dword_181A5C000,  v168,  v200,  "%{public}s called with null current_parameters, backtrace limit exceeded",  buf,  0xCu);
            }
          }
        }

            goto LABEL_271;
          }

          os_log_type_t v15 = BYTE5(v6->flow_in_connected);
          if ((v15 & 2) == 0 || !v6->pending_inbound_frames.tqh_last) {
            goto LABEL_37;
          }
          if ((v6->flow_in_connected & 0x800000000000LL) == 0 && gLogDatapath)
          {
            __nwlog_obj();
            v100 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446722;
              v133 = "nw_protocol_implementation_output_available";
              v134 = 2082;
              os_log_type_t v135 = (char *)&v6->flow_in_connected + 7;
              v136 = 2080;
              os_log_type_t v137 = " ";
              _os_log_impl( &dword_181A5C000,  v100,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sFinalizing pending outbound frames",  buf,  0x20u);
            }

            os_log_type_t v15 = BYTE5(v6->flow_in_connected);
          }

          BYTE5(v6->flow_in_connected) = v15 & 0xFD;
          id v16 = *(void *)&v6[-1].log_str[25];
          if (!v16)
          {
            __nwlog_obj();
            v98 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            v133 = "__nw_protocol_finalize_output_frames";
            v83 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            v128[0] = OS_LOG_TYPE_DEFAULT;
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              v99 = type[0];
              if (os_log_type_enabled(v84, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                v133 = "__nw_protocol_finalize_output_frames";
                _os_log_impl(&dword_181A5C000, v84, v99, "%{public}s called with null protocol", buf, 0xCu);
              }
            }

            else if (v128[0])
            {
              id v112 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              v113 = type[0];
              v114 = os_log_type_enabled(v84, type[0]);
              if (v112)
              {
                if (v114)
                {
                  *(_DWORD *)buf = 136446466;
                  v133 = "__nw_protocol_finalize_output_frames";
                  v134 = 2082;
                  os_log_type_t v135 = v112;
                  _os_log_impl( &dword_181A5C000,  v84,  v113,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v112);
                if (!v83) {
                  goto LABEL_37;
                }
                goto LABEL_272;
              }

              if (v114)
              {
                *(_DWORD *)buf = 136446210;
                v133 = "__nw_protocol_finalize_output_frames";
                _os_log_impl( &dword_181A5C000,  v84,  v113,  "%{public}s called with null protocol, no backtrace",  buf,  0xCu);
              }
            }

            else
            {
              __nwlog_obj();
              v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              v122 = type[0];
              if (os_log_type_enabled(v84, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                v133 = "__nw_protocol_finalize_output_frames";
                _os_log_impl( &dword_181A5C000,  v84,  v122,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
              }
            }

            goto LABEL_270;
          }

          if (*(_UNKNOWN **)(v16 + 40) == &nw_protocol_ref_counted_handle)
          {
            os_log_type_t v21 = *(void *)(v16 + 88);
            if (v21) {
              *(void *)(v16 + 8_Block_object_dispose(va, 8) = v21 + 1;
            }
            __int16 v17 = -1;
          }

          else
          {
            __int16 v17 = 0;
          }

          *(void *)os_log_type_t type = v16;
          uint64_t v131 = v17;
          int v22 = *(void *)(v16 + 24);
          if (v22)
          {
            int v23 = *(void (**)(uint64_t, nw_frame ***))(v22 + 96);
            if (v23)
            {
              v23(v16, &v6->pending_inbound_frames.tqh_last);
              if ((v131 & 1) != 0) {
LABEL_36:
              }
                nw::release_if_needed<nw_protocol *>((uint64_t *)type);
LABEL_37:
              if (!v8)
              {
LABEL_58:

                return;
              }

              if (v6->parent_definition->variant == 3)
              {
                tqh_last = (char *)v6->pending_outbound_frames.tqh_last;
                v123[0] = MEMORY[0x1895F87A8];
                v123[1] = 3221225472LL;
                v123[2] = ___ZL43nw_protocol_implementation_output_availableP11nw_protocolS0__block_invoke;
                v123[3] = &unk_189BC86F0;
                v124 = v6;
                nw_hash_table_apply(tqh_last, (uint64_t)v123);

                goto LABEL_58;
              }

              os_log_type_t v25 = *(void *)&v6[-1].log_str[41];
              if (v25)
              {
                if (*(_UNKNOWN **)(v25 + 40) == &nw_protocol_ref_counted_handle)
                {
                  os_log_type_t v27 = *(void *)(v25 + 88);
                  if (v27) {
                    *(void *)(v25 + 8_Block_object_dispose(va, 8) = v27 + 1;
                  }
                  *(void *)os_log_type_t type = v25;
                  BOOL v26 = v131 | 1;
                }

                else
                {
                  *(void *)os_log_type_t type = *(void *)&v6[-1].log_str[41];
                  BOOL v26 = v131 & 0xFE;
                }

                uint64_t v131 = v26;
                if (*(_UNKNOWN **)&v6[-1].log_str[33] == &nw_protocol_ref_counted_handle)
                {
                  os_log_type_t v29 = *(void *)&v6[-1].log_str[81];
                  if (v29) {
                    *(void *)&v6[-1].log_str[81] = v29 + 1;
                  }
                  *(void *)id v128 = (char *)v6 - 96;
                  os_log_type_t v28 = v129 | 1;
                }

                else
                {
                  *(void *)id v128 = (char *)v6 - 96;
                  os_log_type_t v28 = v129 & 0xFE;
                }

                uint64_t v129 = v28;
                BOOL v30 = *(void *)(v25 + 24);
                if (v30)
                {
                  os_log_type_t v31 = *(void (**)(uint64_t, unsigned __int16 *))(v30 + 72);
                  if (v31)
                  {
                    v31(v25, &v6[-1].paths_log_id_num);
                    os_log_type_t v28 = v129;
LABEL_54:
                    if ((v28 & 1) != 0) {
                      nw::release_if_needed<nw_protocol *>((uint64_t *)v128);
                    }
                    if ((v131 & 1) != 0) {
                      nw::release_if_needed<nw_protocol *>((uint64_t *)type);
                    }
                    goto LABEL_58;
                  }
                }

                __nwlog_obj();
                int v55 = (void *)objc_claimAutoreleasedReturnValue();
                v56 = *(const char **)(v25 + 16);
                *(_DWORD *)buf = 136446722;
                v133 = "__nw_protocol_output_available";
                if (!v56) {
                  v56 = "invalid";
                }
                v134 = 2082;
                os_log_type_t v135 = (void *)v56;
                v136 = 2048;
                os_log_type_t v137 = (const char *)v25;
                v57 = (char *)_os_log_send_and_compose_impl();

                id v127 = OS_LOG_TYPE_ERROR;
                v126 = 0;
                if (__nwlog_fault(v57, &v127, &v126))
                {
                  if (v127 == OS_LOG_TYPE_FAULT)
                  {
                    __nwlog_obj();
                    int v58 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    v59 = v127;
                    if (os_log_type_enabled(v58, v127))
                    {
                      int64_t v60 = *(const char **)(v25 + 16);
                      if (!v60) {
                        int64_t v60 = "invalid";
                      }
                      *(_DWORD *)buf = 136446722;
                      v133 = "__nw_protocol_output_available";
                      v134 = 2082;
                      os_log_type_t v135 = (void *)v60;
                      v136 = 2048;
                      os_log_type_t v137 = (const char *)v25;
                      _os_log_impl( &dword_181A5C000,  v58,  v59,  "%{public}s protocol %{public}s (%p) has invalid output_available callback",  buf,  0x20u);
                    }
                  }

                  else if (v126)
                  {
                    __int128 v71 = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    int v58 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    v72 = v127;
                    v73 = os_log_type_enabled(v58, v127);
                    if (v71)
                    {
                      if (v73)
                      {
                        nw_endpoint_t v74 = *(const char **)(v25 + 16);
                        if (!v74) {
                          nw_endpoint_t v74 = "invalid";
                        }
                        *(_DWORD *)buf = 136446978;
                        v133 = "__nw_protocol_output_available";
                        v134 = 2082;
                        os_log_type_t v135 = (void *)v74;
                        v136 = 2048;
                        os_log_type_t v137 = (const char *)v25;
                        BOOL v138 = 2082;
                        os_log_type_t v139 = (unint64_t)v71;
                        _os_log_impl( &dword_181A5C000,  v58,  v72,  "%{public}s protocol %{public}s (%p) has invalid output_available callback, dumping backtrace:%{public}s",  buf,  0x2Au);
                      }

                      free(v71);
                      goto LABEL_228;
                    }

                    if (v73)
                    {
                      unint64_t v115 = *(const char **)(v25 + 16);
                      if (!v115) {
                        unint64_t v115 = "invalid";
                      }
                      *(_DWORD *)buf = 136446722;
                      v133 = "__nw_protocol_output_available";
                      v134 = 2082;
                      os_log_type_t v135 = (void *)v115;
                      v136 = 2048;
                      os_log_type_t v137 = (const char *)v25;
                      _os_log_impl( &dword_181A5C000,  v58,  v72,  "%{public}s protocol %{public}s (%p) has invalid output_available callback, no backtrace",  buf,  0x20u);
                    }
                  }

                  else
                  {
                    __nwlog_obj();
                    int v58 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    id v108 = v127;
                    if (os_log_type_enabled(v58, v127))
                    {
                      v109 = *(const char **)(v25 + 16);
                      if (!v109) {
                        v109 = "invalid";
                      }
                      *(_DWORD *)buf = 136446722;
                      v133 = "__nw_protocol_output_available";
                      v134 = 2082;
                      os_log_type_t v135 = (void *)v109;
                      v136 = 2048;
                      os_log_type_t v137 = (const char *)v25;
                      _os_log_impl( &dword_181A5C000,  v58,  v108,  "%{public}s protocol %{public}s (%p) has invalid output_available callback, backtrace limit exceeded",  buf,  0x20u);
                    }
                  }
                }

    id v51 = v163;
    if (v79) {
      free(v79);
    }
    os_log_type_t v21 = 0LL;
    goto LABEL_142;
  }

  __int16 v17 = v16;
  os_log_type_t v169 = 0LL;
  *(_OWORD *)v167 = 0u;
  v168 = 0u;
  if (a1) {
    *a1 = 0LL;
  }
  __n = a5;
  if (a4 != 0LL && a5 != 0) {
    id v18 = a5 + 33LL;
  }
  else {
    id v18 = 28LL;
  }
  if (v164) {
    v18 += nw_path_struct_size_for_endpoint_and_metadata(v164, 0LL, 7);
  }
  if (v15) {
    v18 += nw_path_struct_size_for_endpoint_and_metadata(v15, 0LL, 7);
  }
  if (v17) {
    uint64_t v19 = v18 + 47;
  }
  else {
    uint64_t v19 = v18;
  }
  nw_endpoint_t v161 = a5;
  if (!v19)
  {
    __nwlog_obj();
    unsigned int v82 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v82, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v171 = "strict_calloc";
    v83 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v83);
    if (result) {
      goto LABEL_339;
    }
    free(v83);
  }

  uint64_t v20 = (char *)calloc(1uLL, v19);
  os_log_type_t v21 = v20;
  v162 = a1;
  if (v20)
  {
    int v22 = (unint64_t)&v20[v19];
    if ((uint64_t)v19 <= 0)
    {
      __nwlog_obj();
      v90 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136447234;
      v171 = "nw_necp_append_tlv";
      v172 = 2048;
      *(void *)os_log_type_t v173 = v21;
      *(_WORD *)&v173[8] = 2048;
      *(void *)&v173[10] = &v21[v19];
      *(_WORD *)&v173[18] = 1024;
      *(_DWORD *)v174 = 100;
      *(_WORD *)&v174[4] = 1024;
      *(_DWORD *)&v174[6] = 16;
      int v24 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      id v165 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v91 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136447234;
          v171 = "nw_necp_append_tlv";
          v172 = 2048;
          *(void *)os_log_type_t v173 = v21;
          *(_WORD *)&v173[8] = 2048;
          *(void *)&v173[10] = &v21[v19];
          *(_WORD *)&v173[18] = 1024;
          *(_DWORD *)v174 = 100;
          *(_WORD *)&v174[4] = 1024;
          *(_DWORD *)&v174[6] = 16;
          _os_log_impl( &dword_181A5C000,  v25,  v91,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u",  buf,  0x2Cu);
        }

        goto LABEL_299;
      }

      if (!v165)
      {
        __nwlog_obj();
        os_log_type_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v150 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136447234;
          v171 = "nw_necp_append_tlv";
          v172 = 2048;
          *(void *)os_log_type_t v173 = v21;
          *(_WORD *)&v173[8] = 2048;
          *(void *)&v173[10] = &v21[v19];
          *(_WORD *)&v173[18] = 1024;
          *(_DWORD *)v174 = 100;
          *(_WORD *)&v174[4] = 1024;
          *(_DWORD *)&v174[6] = 16;
          _os_log_impl( &dword_181A5C000,  v25,  v150,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded",  buf,  0x2Cu);
        }

        goto LABEL_299;
      }

      v114 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      nw_endpoint_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      unint64_t v115 = type;
      v116 = os_log_type_enabled(v32, type);
      if (v114)
      {
        if (v116)
        {
          *(_DWORD *)buf = 136447490;
          v171 = "nw_necp_append_tlv";
          v172 = 2048;
          *(void *)os_log_type_t v173 = v21;
          *(_WORD *)&v173[8] = 2048;
          *(void *)&v173[10] = &v21[v19];
          *(_WORD *)&v173[18] = 1024;
          *(_DWORD *)v174 = 100;
          *(_WORD *)&v174[4] = 1024;
          *(_DWORD *)&v174[6] = 16;
          *(_WORD *)v175 = 2082;
          *(void *)&v175[2] = v114;
          _os_log_impl( &dword_181A5C000,  v32,  v115,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s",  buf,  0x36u);
        }

        free(v114);
        if (!v24) {
          goto LABEL_51;
        }
        goto LABEL_50;
      }

      if (v116)
      {
        *(_DWORD *)buf = 136447234;
        v171 = "nw_necp_append_tlv";
        v172 = 2048;
        *(void *)os_log_type_t v173 = v21;
        *(_WORD *)&v173[8] = 2048;
        *(void *)&v173[10] = &v21[v19];
        *(_WORD *)&v173[18] = 1024;
        *(_DWORD *)v174 = 100;
        *(_WORD *)&v174[4] = 1024;
        *(_DWORD *)&v174[6] = 16;
        _os_log_impl( &dword_181A5C000,  v32,  v115,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace",  buf,  0x2Cu);
      }

      goto LABEL_48;
    }

    if (v19 <= 0x14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v23 = (id)gLogObj;
      *(_DWORD *)buf = 136447490;
      v171 = "nw_necp_append_tlv";
      v172 = 2048;
      *(void *)os_log_type_t v173 = v21;
      *(_WORD *)&v173[8] = 2048;
      *(void *)&v173[10] = 21LL;
      *(_WORD *)&v173[18] = 2048;
      *(void *)v174 = &v21[v19];
      *(_WORD *)&v174[8] = 1024;
      *(_DWORD *)v175 = 100;
      *(_WORD *)&v175[4] = 1024;
      *(_DWORD *)&v175[6] = 16;
      int v24 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      id v165 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v25 = (os_log_s *)(id)gLogObj;
        BOOL v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136447490;
          v171 = "nw_necp_append_tlv";
          v172 = 2048;
          *(void *)os_log_type_t v173 = v21;
          *(_WORD *)&v173[8] = 2048;
          *(void *)&v173[10] = 21LL;
          *(_WORD *)&v173[18] = 2048;
          *(void *)v174 = &v21[v19];
          *(_WORD *)&v174[8] = 1024;
          *(_DWORD *)v175 = 100;
          *(_WORD *)&v175[4] = 1024;
          *(_DWORD *)&v175[6] = 16;
          _os_log_impl( &dword_181A5C000,  v25,  v26,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u",  buf,  0x36u);
        }

    _os_log_impl(&dword_181A5C000, v296, OS_LOG_TYPE_DEFAULT, v295, buf, v297);
    v49 = v357;
    goto LABEL_271;
  }

  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
  }
  char v40 = (os_log_s *)(id)gconnectionLogObj;
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v41 = v1;
    char v42 = v1->top_id;
    os_log_type_t v43 = nw_endpoint_get_logging_description(v41->endpoint);
    BOOL v44 = v41->parameters;
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)v388 = v42;
    *(_WORD *)&v388[4] = 2082;
    *(void *)&v388[6] = v43;
    *(_WORD *)&v388[14] = 2114;
    *(void *)&v388[16] = v44;
    _os_log_impl(&dword_181A5C000, v40, OS_LOG_TYPE_DEFAULT, "[C%u %{public}s %{public}@] cancelled", buf, 0x1Cu);
    v1 = v41;
  }

LABEL_276:
}

void sub_181B06014( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, void *a21, uint64_t a22, uint64_t a23, void *a24, void *a25)
{
  _Unwind_Resume(a1);
}

uint64_t nw_array_get_object_at_index(uint64_t result, unint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (!result) {
    return result;
  }
  uint64_t v3 = *(void *)(result + 16);
  if (a2 < (*(void *)(result + 24) - v3) >> 3) {
    return *(void *)(v3 + 8 * a2);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446466;
  uint64_t v13 = "nw_array_get_object_at_index";
  __int16 v14 = 2048;
  unint64_t v15 = a2;
  id v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = (os_log_s *)gLogObj;
      os_log_type_t v6 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v13 = "nw_array_get_object_at_index";
        __int16 v14 = 2048;
        unint64_t v15 = a2;
        uint64_t v7 = "%{public}s array index out of range: %lu";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0x16u);
      }
    }

    else if (v10)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = (os_log_s *)gLogObj;
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446722;
          uint64_t v13 = "nw_array_get_object_at_index";
          __int16 v14 = 2048;
          unint64_t v15 = a2;
          __int16 v16 = 2082;
          __int16 v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s array index out of range: %lu, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(backtrace_string);
        goto LABEL_18;
      }

      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v13 = "nw_array_get_object_at_index";
        __int16 v14 = 2048;
        unint64_t v15 = a2;
        uint64_t v7 = "%{public}s array index out of range: %lu, no backtrace";
        goto LABEL_17;
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = (os_log_s *)gLogObj;
      os_log_type_t v6 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v13 = "nw_array_get_object_at_index";
        __int16 v14 = 2048;
        unint64_t v15 = a2;
        uint64_t v7 = "%{public}s array index out of range: %lu, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }

uint64_t nw_endpoint_transform_receive_report( void *a1, uint64_t a2, unsigned int a3, _WORD *a4, void *a5, void *a6)
{
  uint64_t v164 = *MEMORY[0x1895F89C0];
  id v130 = a1;
  id v129 = a5;
  id v10 = a6;
  uint64_t v131 = v10;
  if (!v10)
  {
    __nwlog_obj();
    id v97 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_transform_receive_report";
    v98 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v140 = 0;
    if (__nwlog_fault(v98, &type, &v140))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v99 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v100 = type;
        if (os_log_type_enabled(v99, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_transform_receive_report";
          _os_log_impl(&dword_181A5C000, v99, v100, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v140)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v99 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v102 = type;
        BOOL v103 = os_log_type_enabled(v99, type);
        if (backtrace_string)
        {
          if (v103)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_transform_receive_report";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v99,  v102,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_124;
        }

        if (v103)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_transform_receive_report";
          _os_log_impl(&dword_181A5C000, v99, v102, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v99 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v104 = type;
        if (os_log_type_enabled(v99, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_transform_receive_report";
          _os_log_impl( &dword_181A5C000,  v99,  v104,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181B0756C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, void *a21, void *a22)
{
  _Unwind_Resume(a1);
}

BOOL nw_tcp_options_get_enable_fast_open(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_tcp(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_get_enable_fast_open_block_invoke;
    v12[3] = &unk_189BC60A8;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_fast_open";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_fast_open";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_fast_open";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_fast_open";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_fast_open";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181B079DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_get_enable_fast_open_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(_WORD *)(a2 + 36) & 0x800) != 0;
  return 1LL;
}

uint64_t __nw_path_create_necp_parameters_block_invoke_3(uint64_t a1, _OWORD *a2)
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (!v3)
  {
    __nwlog_obj();
    char v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v36 = "nw_necp_append_tlv";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v36 = "nw_necp_append_tlv";
      uint64_t v20 = "%{public}s called with null tlv_start";
      goto LABEL_71;
    }

    if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      BOOL v24 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (!v24) {
          goto LABEL_16;
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v36 = "nw_necp_append_tlv";
        __int16 v37 = 2082;
        *(void *)id v38 = backtrace_string;
        char v13 = "%{public}s called with null tlv_start, dumping backtrace:%{public}s";
        goto LABEL_48;
      }

      if (!v24) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v36 = "nw_necp_append_tlv";
      uint64_t v20 = "%{public}s called with null tlv_start, no backtrace";
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_81;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v36 = "nw_necp_append_tlv";
      uint64_t v20 = "%{public}s called with null tlv_start, backtrace limit exceeded";
    }

BOOL nw_path_can_support_endpoint(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  unint64_t v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v28 = "nw_path_can_support_endpoint";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v28 = "nw_path_can_support_endpoint";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null path", buf, 0xCu);
      }

      goto LABEL_59;
    }

    if (!v25)
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v28 = "nw_path_can_support_endpoint";
        _os_log_impl( &dword_181A5C000,  v13,  v22,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_59;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v18 = type;
    BOOL v19 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v28 = "nw_path_can_support_endpoint";
        _os_log_impl(&dword_181A5C000, v13, v18, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }

      goto LABEL_59;
    }

    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v28 = "nw_path_can_support_endpoint";
      __int16 v29 = 2082;
      BOOL v30 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_47;
  }

  if (!v4)
  {
    __nwlog_obj();
    os_log_type_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v28 = "nw_path_can_support_endpoint";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v28 = "nw_path_can_support_endpoint";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null endpoint", buf, 0xCu);
      }

void sub_181B08C4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_can_resolve_endpoint(void *a1, void *a2)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  unint64_t v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    BOOL v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)length = 136446210;
    *(void *)&length[4] = "nw_path_can_resolve_endpoint";
    os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (__nwlog_fault(v22, &type, &v34))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)length = 136446210;
          *(void *)&length[4] = "nw_path_can_resolve_endpoint";
          _os_log_impl(&dword_181A5C000, v23, v24, "%{public}s called with null path", length, 0xCu);
        }

        goto LABEL_55;
      }

      if (!v34)
      {
        __nwlog_obj();
        os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)length = 136446210;
          *(void *)&length[4] = "nw_path_can_resolve_endpoint";
          _os_log_impl( &dword_181A5C000,  v23,  v32,  "%{public}s called with null path, backtrace limit exceeded",  length,  0xCu);
        }

        goto LABEL_55;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      BOOL v29 = os_log_type_enabled(v23, type);
      if (!backtrace_string)
      {
        if (v29)
        {
          *(_DWORD *)length = 136446210;
          *(void *)&length[4] = "nw_path_can_resolve_endpoint";
          _os_log_impl(&dword_181A5C000, v23, v28, "%{public}s called with null path, no backtrace", length, 0xCu);
        }

        goto LABEL_55;
      }

      if (v29)
      {
        *(_DWORD *)length = 136446466;
        *(void *)&length[4] = "nw_path_can_resolve_endpoint";
        __int16 v37 = 2082;
        id v38 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v23,  v28,  "%{public}s called with null path, dumping backtrace:%{public}s",  length,  0x16u);
      }

void sub_181B09250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_agent_resolves_type(uint64_t a1, int a2)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    unint64_t v3 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v13 = "nw_agent_resolves_type";
    id v4 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_agent_resolves_type";
        unsigned int v7 = "%{public}s called with null netagent";
LABEL_28:
        _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
      }
    }

    else
    {
      if (v10)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v6 = type;
        BOOL v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)buf = 136446466;
            char v13 = "nw_agent_resolves_type";
            __int16 v14 = 2082;
            uint64_t v15 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null netagent, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_30;
        }

        if (!v9) {
          goto LABEL_29;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_agent_resolves_type";
        unsigned int v7 = "%{public}s called with null netagent, no backtrace";
        goto LABEL_28;
      }

      __nwlog_obj();
      id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_agent_resolves_type";
        unsigned int v7 = "%{public}s called with null netagent, backtrace limit exceeded";
        goto LABEL_28;
      }
    }

LABEL_118:
    if (v74) {
      free(v74);
    }
    v53 = 0LL;
LABEL_56:

    objc_storeStrong((id *)&self->resolver, v53);
    self->last_resolver_status = 0;
    uint64_t v54 = v47;
    v8[30] = 2;

    uint64_t v55 = nw_endpoint_handler_copy_endpoint(v54);
    id v56 = nw_endpoint_get_type(v55);
    if (v56 == 5) {
      id v57 = 6;
    }
    else {
      id v57 = 1;
    }
    else {
      int v58 = v57;
    }

    v54->event.domain = 2;
    v54->event.event = v58;
    nw_endpoint_handler_report(v54, 0LL, &v54->event.domain, 0LL);
    *(_DWORD *)os_log_type_t type = 0;
    id v59 = MEMORY[0x1895F87A8];
    v97[0] = MEMORY[0x1895F87A8];
    v97[1] = 3221225472LL;
    v97[2] = __52__NWConcrete_nw_endpoint_resolver_startWithHandler___block_invoke;
    v97[3] = &unk_189BBB9A0;
    int64_t v60 = v54;
    v98 = v60;
    id v61 = v53;
    id v62 = v97;
    if (v61)
    {
      os_unfair_lock_lock((os_unfair_lock_t)v61 + 3);
      nw_endpoint_t v63 = (nw_endpoint *)_Block_copy(v62);
      id v64 = v61[21];
      v61[21] = v63;

      os_unfair_lock_unlock((os_unfair_lock_t)v61 + 3);
LABEL_66:

      v94[0] = v59;
      v94[1] = 3221225472LL;
      v94[2] = __52__NWConcrete_nw_endpoint_resolver_startWithHandler___block_invoke_2;
      v94[3] = &unk_189BBB9C8;
      unsigned int v65 = v60;
      id v95 = v65;
      id v66 = v61;
      id v96 = v66;
      nw_resolver_set_update_handler(v66, 0LL, v94);
      nw_endpoint_resolver_update_path_resolver_locked(v65);

      goto LABEL_72;
    }

    __nwlog_obj();
    uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_resolver_set_alternative_handler";
    uint64_t v78 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v100 = 0;
    if (__nwlog_fault(v78, type, &v100))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v79 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v80 = type[0];
        if (os_log_type_enabled(v79, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_resolver_set_alternative_handler";
          _os_log_impl(&dword_181A5C000, v79, v80, "%{public}s called with null resolver", buf, 0xCu);
        }
      }

      else if (v100)
      {
        nw_endpoint_t v84 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v79 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v90 = type[0];
        v85 = os_log_type_enabled(v79, type[0]);
        if (v84)
        {
          if (v85)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_resolver_set_alternative_handler";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v84;
            _os_log_impl( &dword_181A5C000,  v79,  v90,  "%{public}s called with null resolver, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v84);
          goto LABEL_124;
        }

        if (v85)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_resolver_set_alternative_handler";
          _os_log_impl(&dword_181A5C000, v79, v90, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v79 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v87 = type[0];
        if (os_log_type_enabled(v79, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_resolver_set_alternative_handler";
          _os_log_impl( &dword_181A5C000,  v79,  v87,  "%{public}s called with null resolver, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

        if (v144) {
          free(v144);
        }
        os_log_type_t v33 = 0;
        if (v29 != &nw_protocol_ref_counted_handle) {
          goto LABEL_50;
        }
LABEL_49:
        if (a1->handle == &nw_protocol_ref_counted_handle)
        {
          char v40 = a1[1].callbacks;
          if (v40)
          {
            id v41 = (nw_protocol_callbacks *)((char *)v40 - 1);
            a1[1].callbacks = v41;
            if (!v41)
            {
              __int16 v42 = *(void (***)(void))a1[1].flow_id;
              if (v42)
              {
                *(void *)a1[1].flow_id = 0LL;
                v42[2](v42);
                _Block_release(v42);
              }

              if ((a1[1].flow_id[8] & 1) != 0)
              {
                os_log_type_t v43 = *(const void **)a1[1].flow_id;
                if (v43) {
                  _Block_release(v43);
                }
              }

              free(a1);
            }
          }
        }

        goto LABEL_50;
      }

      os_log_type_t v33 = v32(v26, a1, 1LL, 0xFFFFFFFFLL, 1LL, v170);
      if (v29 == &nw_protocol_ref_counted_handle) {
        goto LABEL_49;
      }
LABEL_50:
      if (v27 == &nw_protocol_ref_counted_handle && v26->handle == &nw_protocol_ref_counted_handle)
      {
        uint64_t v44 = v26[1].callbacks;
        if (v44)
        {
          id v45 = (nw_protocol_callbacks *)((char *)v44 - 1);
          v26[1].callbacks = v45;
          if (!v45)
          {
            __int16 v46 = *(void (***)(void))v26[1].flow_id;
            if (v46)
            {
              *(void *)v26[1].flow_id = 0LL;
              v46[2](v46);
              _Block_release(v46);
            }

            if ((v26[1].flow_id[8] & 1) != 0)
            {
              uint64_t v47 = *(const void **)v26[1].flow_id;
              if (v47) {
                _Block_release(v47);
              }
            }

            free(v26);
          }
        }
      }

        goto LABEL_119;
      }

      if (!v239)
      {
        __nwlog_obj();
        os_log_type_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v116 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v242 = "nw_flow_add_read_request";
          _os_log_impl( &dword_181A5C000,  v22,  v116,  "%{public}s called with null read_request, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_118;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v106 = type;
      nw_endpoint_t v107 = os_log_type_enabled(v22, type);
      if (!backtrace_string)
      {
        if (v107)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v242 = "nw_flow_add_read_request";
          _os_log_impl(&dword_181A5C000, v22, v106, "%{public}s called with null read_request, no backtrace", buf, 0xCu);
        }

        goto LABEL_118;
      }

      if (v107)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v242 = "nw_flow_add_read_request";
        v243 = 2082;
        id_str = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v22,  v106,  "%{public}s called with null read_request, dumping backtrace:%{public}s",  buf,  0x16u);
      }

            id v80 = *((void *)v6 + 65);
            id v81 = *((void *)v6 + 63);
            if (!(v80 | v81)) {
              goto LABEL_286;
            }
            unsigned int v82 = (char *)v6 + 472;
            if (v80 && v81)
            {
              v83 = *(void *)(v81 + 24);
              if (!v83
                || (nw_endpoint_t v84 = *(uint64_t (**)(unint64_t, char *))(v83 + 16)) == 0LL
                || *(char **)(v81 + 48) != v82)
              {
                v85 = v356;
                v86 = (*((_BYTE *)v85 + 268) & 0x20) == 0;

                if (v86)
                {
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                  }
                  os_log_type_t v87 = (os_log_s *)(id)gconnectionLogObj;
                  if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
                  {
                    id v88 = v85;

                    v89 = v88;
                    v90 = (*((_BYTE *)v85 + 268) & 1) == 0;

                    if (v90) {
                      v91 = "";
                    }
                    else {
                      v91 = "dry-run ";
                    }
                    nw_endpoint_t v92 = nw_endpoint_handler_copy_endpoint(v89);
                    BOOL v93 = nw_endpoint_get_logging_description(v92);
                    os_log_type_t v94 = v89;
                    id v95 = v94;
                    id v96 = v94[30];
                    else {
                      id v97 = off_189BBBBF0[v96];
                    }

                    v116 = v95;
                    int v117 = "path";
                    switch(*((_DWORD *)v116 + 29))
                    {
                      case 0:
                        break;
                      case 1:
                        int v117 = "resolver";
                        break;
                      case 2:
                        int v117 = nw_endpoint_flow_mode_string(v116[31]);
                        break;
                      case 3:
                        int v117 = "proxy";
                        break;
                      case 4:
                        int v117 = "fallback";
                        break;
                      case 5:
                        int v117 = "transform";
                        break;
                      default:
                        int v117 = "unknown-mode";
                        break;
                    }

                    logg = v117;

                    BOOL v196 = v87;
                    v197 = v116;
                    os_log_type_t v198 = v88;
                    os_unfair_lock_lock((os_unfair_lock_t)v197 + 28);
                    BOOL v199 = v197[8];
                    os_unfair_lock_unlock((os_unfair_lock_t)v197 + 28);

                    os_log_type_t v200 = v199;
                    *(_DWORD *)buf = 136447746;
                    *(void *)&uint8_t buf[4] = "nw_endpoint_flow_failed_with_error";
                    v364 = 2082;
                    v365 = v198->id_str;
                    os_log_type_t v87 = v196;
                    v366 = 2082;
                    v367 = v91;
                    v368 = 2082;
                    v369 = (void *)v93;
                    v370 = 2082;
                    v371 = v97;
                    v372 = 2082;
                    v373 = logg;
                    v374 = 2114;
                    v375 = v200;
                    _os_log_impl( &dword_181A5C000,  v196,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Replay protocol o utput handler cannot handle replace_input_handler",  buf,  0x48u);
                  }
                }

                goto LABEL_286;
              }

              v113 = *(void **)(v80 + 32);
              nw_endpoint_t v114 = *(void **)(v81 + 40);
              if (v114 == &nw_protocol_ref_counted_handle)
              {
                v168 = *(void *)(v81 + 88);
                if (v168) {
                  *(void *)(v81 + 8_Block_object_dispose(va, 8) = v168 + 1;
                }
                *(void *)buf = v81;
                unint64_t v115 = buf[8] | 1;
              }

              else
              {
                *(void *)buf = *((void *)v6 + 63);
                unint64_t v115 = buf[8] & 0xFE;
              }

              buf[8] = v115;
              os_log_type_t v169 = (void *)*((void *)v6 + 64);
              if (v169 == &nw_protocol_ref_counted_handle)
              {
                v171 = *((void *)v6 + 70);
                if (v171) {
                  *((void *)v6 + 70) = v171 + 1;
                }
                *(void *)os_log_type_t type = (char *)v6 + 472;
                v170 = v362 | 1;
              }

              else
              {
                *(void *)os_log_type_t type = (char *)v6 + 472;
                v170 = v362 & 0xFE;
              }

              v362 = v170;
              v172 = *(void **)(v80 + 40);
              if (v172 == &nw_protocol_ref_counted_handle)
              {
                v174 = *(void *)(v80 + 88);
                if (v174) {
                  *(void *)(v80 + 8_Block_object_dispose(va, 8) = v174 + 1;
                }
                v359 = v80;
                os_log_type_t v173 = v360 | 1;
              }

              else
              {
                v359 = v80;
                os_log_type_t v173 = v360 & 0xFE;
              }

              v360 = v173;
              v175 = (void *)v81;
              os_log_type_t v176 = v80;
              BOOL v177 = v84(v81, v82);
              if (v172 == &nw_protocol_ref_counted_handle)
              {
                nw::release_if_needed<nw_protocol *>(&v359);
                if (v169 != &nw_protocol_ref_counted_handle)
                {
LABEL_201:
                  if (v114 != &nw_protocol_ref_counted_handle) {
                    goto LABEL_202;
                  }
                  goto LABEL_220;
                }
              }

              else if (v169 != &nw_protocol_ref_counted_handle)
              {
                goto LABEL_201;
              }

              nw::release_if_needed<nw_protocol *>((uint64_t *)type);
              if (v114 != &nw_protocol_ref_counted_handle)
              {
LABEL_202:
                if (v177) {
                  goto LABEL_203;
                }
                goto LABEL_221;
              }

  unint64_t v3 = 1;
  if ((a1 & 0x10) != 0) {
    goto LABEL_119;
  }
LABEL_8:
  if ((a1 & 0x20) != 0) {
    goto LABEL_158;
  }
LABEL_196:
  if (v2)
  {
LABEL_197:
    v89 = 0LL;
    v90 = 107LL;
    while (1)
    {
      v91 = &v2[v89];
      if (!v2[v89]) {
        break;
      }
      ++v89;
      if (!--v90) {
        return (BOOL)v2;
      }
    }

    if (v90 >= 2)
    {
      nw_endpoint_t v92 = v90 - 2;
      BOOL v93 = 106 - v89;
      if (v89 == 105) {
        os_log_type_t v94 = 1LL;
      }
      else {
        os_log_type_t v94 = 2LL;
      }
      memcpy(v91, ">", v94);
      v91 = v2 + 106;
      while (!v92)
      {
        if (!--v93) {
          goto LABEL_221;
        }
      }

      return (BOOL)v2;
    }

            goto LABEL_30;
          }

          if (!v56)
          {
            __nwlog_obj();
            BOOL v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            uint64_t v55 = type;
            if (os_log_type_enabled(v31, type))
            {
              *(_DWORD *)buf = 136446210;
              id v59 = "nw_framer_protocol_replace_input_handler";
              _os_log_impl( &dword_181A5C000,  v31,  v55,  "%{public}s called with null new_input_handler, backtrace limit exceeded",  buf,  0xCu);
            }

            goto LABEL_118;
          }

          __int16 v42 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          BOOL v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v49 = type;
          BOOL v50 = os_log_type_enabled(v31, type);
          if (!v42)
          {
            if (v50)
            {
              *(_DWORD *)buf = 136446210;
              id v59 = "nw_framer_protocol_replace_input_handler";
              _os_log_impl( &dword_181A5C000,  v31,  v49,  "%{public}s called with null new_input_handler, no backtrace",  buf,  0xCu);
            }

            goto LABEL_118;
          }

          if (v50)
          {
            *(_DWORD *)buf = 136446466;
            id v59 = "nw_framer_protocol_replace_input_handler";
            int64_t v60 = 2082;
            id v61 = v42;
            _os_log_impl( &dword_181A5C000,  v31,  v49,  "%{public}s called with null new_input_handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }
        }

        else
        {
          __nwlog_obj();
          BOOL v35 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          id v59 = "nw_framer_protocol_replace_input_handler";
          char v10 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          id v56 = 0;
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            BOOL v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            uint64_t v36 = type;
            if (os_log_type_enabled(v31, type))
            {
              *(_DWORD *)buf = 136446210;
              id v59 = "nw_framer_protocol_replace_input_handler";
              _os_log_impl(&dword_181A5C000, v31, v36, "%{public}s called with null old_input_handler", buf, 0xCu);
            }

            goto LABEL_118;
          }

          if (!v56)
          {
            __nwlog_obj();
            BOOL v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            uint64_t v54 = type;
            if (os_log_type_enabled(v31, type))
            {
              *(_DWORD *)buf = 136446210;
              id v59 = "nw_framer_protocol_replace_input_handler";
              _os_log_impl( &dword_181A5C000,  v31,  v54,  "%{public}s called with null old_input_handler, backtrace limit exceeded",  buf,  0xCu);
            }

            goto LABEL_118;
          }

          __int16 v42 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          BOOL v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v47 = type;
          uint64_t v48 = os_log_type_enabled(v31, type);
          if (!v42)
          {
            if (v48)
            {
              *(_DWORD *)buf = 136446210;
              id v59 = "nw_framer_protocol_replace_input_handler";
              _os_log_impl( &dword_181A5C000,  v31,  v47,  "%{public}s called with null old_input_handler, no backtrace",  buf,  0xCu);
            }

            goto LABEL_118;
          }

          if (v48)
          {
            *(_DWORD *)buf = 136446466;
            id v59 = "nw_framer_protocol_replace_input_handler";
            int64_t v60 = 2082;
            id v61 = v42;
            _os_log_impl( &dword_181A5C000,  v31,  v47,  "%{public}s called with null old_input_handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v33 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        id v59 = "nw_framer_protocol_replace_input_handler";
        char v10 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        id v56 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          BOOL v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          char v34 = type;
          if (os_log_type_enabled(v31, type))
          {
            *(_DWORD *)buf = 136446210;
            id v59 = "nw_framer_protocol_replace_input_handler";
            _os_log_impl(&dword_181A5C000, v31, v34, "%{public}s called with null framer->parent_definition", buf, 0xCu);
          }

          goto LABEL_118;
        }

        if (!v56)
        {
          __nwlog_obj();
          BOOL v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v53 = type;
          if (os_log_type_enabled(v31, type))
          {
            *(_DWORD *)buf = 136446210;
            id v59 = "nw_framer_protocol_replace_input_handler";
            _os_log_impl( &dword_181A5C000,  v31,  v53,  "%{public}s called with null framer->parent_definition, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_118;
        }

        __int16 v42 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v45 = type;
        __int16 v46 = os_log_type_enabled(v31, type);
        if (!v42)
        {
          if (v46)
          {
            *(_DWORD *)buf = 136446210;
            id v59 = "nw_framer_protocol_replace_input_handler";
            _os_log_impl( &dword_181A5C000,  v31,  v45,  "%{public}s called with null framer->parent_definition, no backtrace",  buf,  0xCu);
          }

          goto LABEL_118;
        }

        if (v46)
        {
          *(_DWORD *)buf = 136446466;
          id v59 = "nw_framer_protocol_replace_input_handler";
          int64_t v60 = 2082;
          id v61 = v42;
          _os_log_impl( &dword_181A5C000,  v31,  v45,  "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s",  buf,  0x16u);
        }
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      id v59 = "nw_framer_protocol_replace_input_handler";
      char v10 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      id v56 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          id v59 = "nw_framer_protocol_replace_input_handler";
          _os_log_impl(&dword_181A5C000, v31, v32, "%{public}s called with null framer", buf, 0xCu);
        }

        goto LABEL_118;
      }

      if (!v56)
      {
        __nwlog_obj();
        BOOL v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v52 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          id v59 = "nw_framer_protocol_replace_input_handler";
          _os_log_impl( &dword_181A5C000,  v31,  v52,  "%{public}s called with null framer, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_118;
      }

      __int16 v42 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v43 = type;
      uint64_t v44 = os_log_type_enabled(v31, type);
      if (!v42)
      {
        if (v44)
        {
          *(_DWORD *)buf = 136446210;
          id v59 = "nw_framer_protocol_replace_input_handler";
          _os_log_impl(&dword_181A5C000, v31, v43, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }

        goto LABEL_118;
      }

      if (v44)
      {
        *(_DWORD *)buf = 136446466;
        id v59 = "nw_framer_protocol_replace_input_handler";
        int64_t v60 = 2082;
        id v61 = v42;
        _os_log_impl( &dword_181A5C000,  v31,  v43,  "%{public}s called with null framer, dumping backtrace:%{public}s",  buf,  0x16u);
      }
    }

    free(v42);
    goto LABEL_30;
  }

  __nwlog_obj();
  os_log_type_t v26 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v59 = "nw_framer_protocol_replace_input_handler";
  os_log_type_t v27 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  id v56 = 0;
  if (__nwlog_fault(v27, &type, &v56))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        id v59 = "nw_framer_protocol_replace_input_handler";
        _os_log_impl(&dword_181A5C000, v28, v29, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if (v56)
    {
      uint64_t v39 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v40 = type;
      id v41 = os_log_type_enabled(v28, type);
      if (v39)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446466;
          id v59 = "nw_framer_protocol_replace_input_handler";
          int64_t v60 = 2082;
          id v61 = v39;
          _os_log_impl( &dword_181A5C000,  v28,  v40,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v39);
        goto LABEL_104;
      }

      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        id v59 = "nw_framer_protocol_replace_input_handler";
        _os_log_impl(&dword_181A5C000, v28, v40, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v51 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        id v59 = "nw_framer_protocol_replace_input_handler";
        _os_log_impl( &dword_181A5C000,  v28,  v51,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

      goto LABEL_137;
    }

    if (!(_BYTE)v96)
    {
      __nwlog_obj();
      uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v77 = aBlock[0];
      if (os_log_type_enabled(v39, aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl( &dword_181A5C000,  v39,  v77,  "%{public}s called with null packet, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_118;
    }

    uint64_t v55 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v52 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v64 = aBlock[0];
    unsigned int v65 = os_log_type_enabled(v52, aBlock[0]);
    if (v55)
    {
      if (v65)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v55;
        _os_log_impl( &dword_181A5C000,  v52,  v64,  "%{public}s called with null packet, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_89;
    }

    if (v65)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
      _os_log_impl(&dword_181A5C000, v52, v64, "%{public}s called with null packet, no backtrace", buf, 0xCu);
    }

    goto LABEL_136;
  }

  if (!nw_parameters_get_logging_disabled(*((void *)v16 + 7)))
  {
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
    }
    os_log_type_t v18 = (os_log_s *)(id)gconnection_groupLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v19 = *((_DWORD *)v16 + 42);
      *(_DWORD *)buf = 136447746;
      *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v19;
      *(_WORD *)&buf[18] = 2112;
      *(void *)&buf[20] = v17;
      *(_WORD *)&buf[28] = 2112;
      *(void *)&buf[30] = v85;
      *(_WORD *)&buf[38] = 2112;
      v105 = v84;
      *(_WORD *)v106 = 2048;
      *(void *)&v106[2] = dispatch_data_get_size(data);
      *(_WORD *)&v106[10] = 2112;
      *(void *)&v106[12] = v82;
      _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_DEBUG,  "%{public}s [G%u] new incoming packet <%@->%@@%@, %zu bytes> on socket %@",  buf,  0x44u);
    }
  }

  id v96 = 0LL;
  id v97 = &v96;
  v98 = 0x3032000000LL;
  v99 = __Block_byref_object_copy__134;
  os_log_type_t v100 = __Block_byref_object_dispose__135;
  v101 = 0LL;
  v90 = 0LL;
  v91 = &v90;
  nw_endpoint_t v92 = 0x3032000000LL;
  BOOL v93 = __Block_byref_object_copy__8579;
  os_log_type_t v94 = __Block_byref_object_dispose__8580;
  os_log_type_t v20 = MEMORY[0x1895F87A8];
  id v95 = 0LL;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 3221225472LL;
  aBlock[2] = ___ZL42nw_connection_group_handle_incoming_packetP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectS3_PU26objcproto15OS_nw_interfaceS1_PU27objcproto16OS_nw_fd_wrapperS1_PU27objcproto16OS_dispatch_dataS1__block_invoke;
  aBlock[3] = &unk_189BC16A8;
  id v88 = &v96;
  BOOL v21 = v16;
  os_log_type_t v87 = v21;
  v89 = &v90;
  os_log_type_t v22 = (void (**)(void))_Block_copy(aBlock);
  os_unfair_lock_lock((os_unfair_lock_t)v16 + 43);
  v22[2](v22);
  os_unfair_lock_unlock((os_unfair_lock_t)v16 + 43);

  if (v97[5] && v91[5])
  {
    os_log_type_t v23 = nw_content_context_create("multicast packet");
    os_log_type_t v24 = v85;
    char v25 = v81;
    os_log_type_t v26 = v84;
    os_log_type_t v27 = v82;
    if (v23)
    {
      if (v23 != (nw_content_context_t)&__block_literal_global_5_41854
        && v23 != (nw_content_context_t)&__block_literal_global_4
        && v23 != (nw_content_context_t)&__block_literal_global_3_41839
        && v23 != (nw_content_context_t)&__block_literal_global_41831)
      {
        os_unfair_lock_lock((os_unfair_lock_t)v23 + 28);
        *((_BYTE *)v23 + 118) |= 0x20u;
        os_log_type_t v28 = nw_array_create();
        BOOL v29 = (void *)*((void *)v23 + 13);
        *((void *)v23 + 13) = v28;

        nw_array_append(*((void *)v23 + 13), v24);
        nw_array_append(*((void *)v23 + 13), v25);
        nw_array_append(*((void *)v23 + 13), v26);
        nw_array_append(*((void *)v23 + 13), v27);
        os_unfair_lock_unlock((os_unfair_lock_t)v23 + 28);
      }

      goto LABEL_119;
    }

    if (!(_BYTE)v124)
    {
      __nwlog_obj();
      uint64_t v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v74 = iterate_block[0];
      if (os_log_type_enabled(v55, (os_log_type_t)iterate_block[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl( &dword_181A5C000,  v55,  v74,  "%{public}s called with null parameters, backtrace limit exceeded",  aBlock,  0xCu);
      }

      goto LABEL_118;
    }

    unsigned int v65 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v66 = iterate_block[0];
    uint64_t v67 = os_log_type_enabled(v55, (os_log_type_t)iterate_block[0]);
    if (!v65)
    {
      if (v67)
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_181A5C000, v55, v66, "%{public}s called with null parameters, no backtrace", aBlock, 0xCu);
      }

      goto LABEL_118;
    }

    if (v67)
    {
      *(_DWORD *)aBlock = 136446466;
      *(void *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
      *(_WORD *)&aBlock[12] = 2082;
      *(void *)&aBlock[14] = v65;
      _os_log_impl( &dword_181A5C000,  v55,  v66,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  aBlock,  0x16u);
    }

    free(v65);
  }

    goto LABEL_119;
  }

  id v5 = (void *)v3[15];
  if (v5)
  {
    os_log_type_t v6 = v5;
    unsigned int v7 = v6;
    if (((_BYTE)v6[17] & 8) == 0) {
      dispatch_assert_queue_V2(v6[1]);
    }
  }

  if ((*((char *)v4 + 405) & 0x80000000) == 0 && gLogDatapath)
  {
    __nwlog_obj();
    char v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446978;
      uint64_t v77 = "nw_protocol_instance_report_ready";
      uint64_t v78 = 2082;
      v79 = (char *)v4 + 407;
      id v80 = 2080;
      id v81 = " ";
      unsigned int v82 = 2048;
      v83 = a2;
      _os_log_impl( &dword_181A5C000,  v34,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sReporting flow %llx ready",  buf,  0x2Au);
    }
  }

  if (*(_DWORD *)(v4[1] + 64LL) != 3)
  {
    if (a2 == -1LL)
    {
      *((_BYTE *)v4 + 402) |= 8u;
      nw_protocol_implementation_report_connected( (NWConcrete_nw_protocol_instance *)v4,  (nw_protocol *)(v4 - 12),  (nw_protocol *)*(v4 - 6),  0xFFFFFFFFFFFFFFFFLL);
      nw_protocol_instance_update_available_paths((NWConcrete_nw_protocol_instance *)v4);
      goto LABEL_46;
    }

    __nwlog_obj();
    BOOL v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v77 = "nw_protocol_instance_report_ready";
    BOOL v31 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(p_paths_log_id_num) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v36 = type[0];
      if (os_log_type_enabled(v32, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v77 = "nw_protocol_instance_report_ready";
        _os_log_impl( &dword_181A5C000,  v32,  v36,  "%{public}s called with null (flow == NW_PROTOCOL_DEFAULT_FLOW)",  buf,  0xCu);
      }
    }

    else if ((_BYTE)p_paths_log_id_num)
    {
      BOOL v50 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v51 = type[0];
      v52 = os_log_type_enabled(v32, type[0]);
      if (v50)
      {
        if (v52)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v77 = "nw_protocol_instance_report_ready";
          uint64_t v78 = 2082;
          v79 = v50;
          _os_log_impl( &dword_181A5C000,  v32,  v51,  "%{public}s called with null (flow == NW_PROTOCOL_DEFAULT_FLOW), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v50);
        if (!v31) {
          goto LABEL_46;
        }
LABEL_120:
        free(v31);
        goto LABEL_46;
      }

      if (v52)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v77 = "nw_protocol_instance_report_ready";
        _os_log_impl( &dword_181A5C000,  v32,  v51,  "%{public}s called with null (flow == NW_PROTOCOL_DEFAULT_FLOW), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      int64_t v60 = type[0];
      if (os_log_type_enabled(v32, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v77 = "nw_protocol_instance_report_ready";
        _os_log_impl( &dword_181A5C000,  v32,  v60,  "%{public}s called with null (flow == NW_PROTOCOL_DEFAULT_FLOW), backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_118;
  }

  *((_BYTE *)v4 + 402) |= 8u;
  os_log_type_t v8 = (char *)v4[29];
  if (a2 >= 0xFFFFFFFFFFFFFFFELL)
  {
    v67[0] = MEMORY[0x1895F87A8];
    v67[1] = 3221225472LL;
    v67[2] = __nw_protocol_instance_report_ready_block_invoke;
    v67[3] = &unk_189BB8550;
    BOOL v9 = v4;
    uint64_t v68 = v9;
    uint64_t v69 = a2;
    nw_hash_table_apply(v8, (uint64_t)v67);
    nw_protocol_instance_update_available_paths(v9);
    char v10 = (void *)nw_protocol_instance_copy_path(v9, -1LL);
    os_log_type_t v11 = nw_path_copy_interface(v10);
    if ((*((char *)v4 + 405) & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v12 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446978;
        uint64_t v77 = "nw_protocol_instance_report_ready";
        uint64_t v78 = 2082;
        v79 = (char *)&v9->flow_in_connected + 7;
        id v80 = 2080;
        id v81 = " ";
        unsigned int v82 = 2112;
        v83 = (unint64_t)v11;
        _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s%sCalling notify with interface %@",  buf,  0x2Au);
      }
    }

    char v13 = *(const char **)&v9[-1].log_str[41];
    if (v13)
    {
      __int16 v14 = (void *)*((void *)v13 + 5);
      if (v14 == &nw_protocol_ref_counted_handle)
      {
        BOOL v21 = *((void *)v13 + 11);
        if (v21) {
          *((void *)v13 + 11) = v21 + 1;
        }
        uint64_t v15 = -1;
      }

      else
      {
        uint64_t v15 = 0;
      }

      *(void *)os_log_type_t type = v13;
      uint64_t v75 = v15;
      os_log_type_t v22 = *(void **)&v9[-1].log_str[33];
      if (v22 == &nw_protocol_ref_counted_handle)
      {
        os_log_type_t v24 = *(void *)&v9[-1].log_str[81];
        if (v24) {
          *(void *)&v9[-1].log_str[81] = v24 + 1;
        }
        os_log_type_t v23 = -1;
      }

      else
      {
        os_log_type_t v23 = 0;
      }

      p_paths_log_id_num = &v9[-1].paths_log_id_num;
      uint64_t v73 = v23;
      char v25 = *((void *)v13 + 3);
      if (v25)
      {
        os_log_type_t v26 = *(void (**)(const char *, unsigned __int16 *, uint64_t, id, uint64_t))(v25 + 160);
        if (v26)
        {
          v26(v13, &v9[-1].paths_log_id_num, 24LL, v11, 8LL);
          goto LABEL_40;
        }
      }

      __nwlog_obj();
      char v40 = (void *)objc_claimAutoreleasedReturnValue();
      id v41 = (const char *)*((void *)v13 + 2);
      *(_DWORD *)buf = 136446722;
      uint64_t v77 = "__nw_protocol_notify";
      if (!v41) {
        id v41 = "invalid";
      }
      uint64_t v78 = 2082;
      v79 = (char *)v41;
      id v80 = 2048;
      id v81 = v13;
      __int16 v42 = (char *)_os_log_send_and_compose_impl();

      __int128 v71 = OS_LOG_TYPE_ERROR;
      BOOL v70 = 0;
      if (__nwlog_fault(v42, &v71, &v70))
      {
        if (v71 == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v44 = v71;
          if (os_log_type_enabled(v43, v71))
          {
            id v45 = (const char *)*((void *)v13 + 2);
            if (!v45) {
              id v45 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            uint64_t v77 = "__nw_protocol_notify";
            uint64_t v78 = 2082;
            v79 = (char *)v45;
            id v80 = 2048;
            id v81 = v13;
            _os_log_impl( &dword_181A5C000,  v43,  v44,  "%{public}s protocol %{public}s (%p) has invalid notify callback",  buf,  0x20u);
          }
        }

        else if (v70)
        {
          v53 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          id v66 = v71;
          uint64_t v54 = os_log_type_enabled(v43, v71);
          if (v53)
          {
            if (v54)
            {
              uint64_t v55 = (const char *)*((void *)v13 + 2);
              if (!v55) {
                uint64_t v55 = "invalid";
              }
              *(_DWORD *)buf = 136446978;
              uint64_t v77 = "__nw_protocol_notify";
              uint64_t v78 = 2082;
              v79 = (char *)v55;
              id v80 = 2048;
              id v81 = v13;
              unsigned int v82 = 2082;
              v83 = (unint64_t)v53;
              _os_log_impl( &dword_181A5C000,  v43,  v66,  "%{public}s protocol %{public}s (%p) has invalid notify callback, dumping backtrace:%{public}s",  buf,  0x2Au);
            }

            free(v53);
            goto LABEL_126;
          }

          if (v54)
          {
            nw_endpoint_t v63 = (const char *)*((void *)v13 + 2);
            if (!v63) {
              nw_endpoint_t v63 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            uint64_t v77 = "__nw_protocol_notify";
            uint64_t v78 = 2082;
            v79 = (char *)v63;
            id v80 = 2048;
            id v81 = v13;
            _os_log_impl( &dword_181A5C000,  v43,  v66,  "%{public}s protocol %{public}s (%p) has invalid notify callback, no backtrace",  buf,  0x20u);
          }
        }

        else
        {
          __nwlog_obj();
          os_log_type_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          id v61 = v71;
          if (os_log_type_enabled(v43, v71))
          {
            id v62 = (const char *)*((void *)v13 + 2);
            if (!v62) {
              id v62 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            uint64_t v77 = "__nw_protocol_notify";
            uint64_t v78 = 2082;
            v79 = (char *)v62;
            id v80 = 2048;
            id v81 = v13;
            _os_log_impl( &dword_181A5C000,  v43,  v61,  "%{public}s protocol %{public}s (%p) has invalid notify callback, backtrace limit exceeded",  buf,  0x20u);
          }
        }
      }

    free(v36);
    goto LABEL_119;
  }

  os_log_type_t v23 = *(void **)(v21 + 16);
  os_log_type_t v24 = *(_DWORD *)(v21 + 448);
  char v25 = *(id *)(v21 + 8);
  os_log_type_t v26 = v23;
  os_log_type_t v135 = v137;
  os_log_type_t v27 = (id)v22;
  v133 = v26;
  id v134 = v25;
  if (!v25)
  {
    __nwlog_obj();
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_connected_socket";
    os_log_type_t v87 = (char *)_os_log_send_and_compose_impl();

    v149[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (v149[0] == 17)
    {
      __nwlog_obj();
      id v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v89 = v149[0];
      if (os_log_type_enabled(v88, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_connected_socket";
        _os_log_impl(&dword_181A5C000, v88, v89, "%{public}s called with null endpoint", buf, 0xCu);
      }

      goto LABEL_204;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      id v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v124 = v149[0];
      if (os_log_type_enabled(v88, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_connected_socket";
        _os_log_impl( &dword_181A5C000,  v88,  v124,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_204;
    }

    nw_endpoint_t v107 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v108 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v109 = v149[0];
    v110 = os_log_type_enabled(v108, (os_log_type_t)v149[0]);
    if (v107)
    {
      if (v110)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_connected_socket";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v107;
        _os_log_impl( &dword_181A5C000,  v108,  v109,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v107);
      if (!v87) {
        goto LABEL_213;
      }
      goto LABEL_212;
    }

    if (v110)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_connected_socket";
      _os_log_impl(&dword_181A5C000, v108, v109, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
    }

    goto LABEL_210;
  }

  if (!v26)
  {
    __nwlog_obj();
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_connected_socket";
    os_log_type_t v87 = (char *)_os_log_send_and_compose_impl();

    v149[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (v149[0] == 17)
    {
      __nwlog_obj();
      id v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v91 = v149[0];
      if (os_log_type_enabled(v88, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_connected_socket";
        _os_log_impl(&dword_181A5C000, v88, v91, "%{public}s called with null parameters", buf, 0xCu);
      }

    free(backtrace_string);
    goto LABEL_162;
  }

  v52 = (os_log_s *)__nwlog_obj();
  v53 = type[0];
  if (os_log_type_enabled(v52, type[0]))
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "operator()";
    uint64_t v54 = "%{public}s called with null other_protocol";
    goto LABEL_161;
  }

    if (v31) {
      free(v31);
    }
    goto LABEL_120;
  }

  unsigned int v7 = v6;
  os_log_type_t v8 = *(const void **)(a1 + 200);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 200) = 0LL;
  }

  BytePtr = CFDataGetBytePtr(v7);
  Length = CFDataGetLength(v7);
  if (!BytePtr)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
    BOOL v35 = (char *)_os_log_send_and_compose_impl();
    v161[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v16_Block_object_dispose(va, 8) = 0;
    if (v161[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v138 = (os_log_s *)__nwlog_obj();
      os_log_type_t v139 = v161[0];
      if (!os_log_type_enabled(v138, v161[0])) {
        goto LABEL_339;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
      char v140 = "%{public}s called with null buffer";
      goto LABEL_338;
    }

    if (!(_BYTE)v168)
    {
      BOOL v138 = (os_log_s *)__nwlog_obj();
      os_log_type_t v139 = v161[0];
      if (!os_log_type_enabled(v138, v161[0])) {
        goto LABEL_339;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
      char v140 = "%{public}s called with null buffer, backtrace limit exceeded";
      goto LABEL_338;
    }

    v145 = (char *)__nw_create_backtrace_string();
    BOOL v138 = (os_log_s *)__nwlog_obj();
    os_log_type_t v139 = v161[0];
    __int16 v146 = os_log_type_enabled(v138, v161[0]);
    if (!v145)
    {
      if (!v146) {
        goto LABEL_339;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
      char v140 = "%{public}s called with null buffer, no backtrace";
      goto LABEL_338;
    }

    if (v146)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v145;
      _os_log_impl( &dword_181A5C000,  v138,  v139,  "%{public}s called with null buffer, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v145);
LABEL_339:
    if (!v35) {
      goto LABEL_141;
    }
    goto LABEL_140;
  }

  os_log_type_t v11 = Length;
  if (!(_DWORD)Length)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
    BOOL v35 = (char *)_os_log_send_and_compose_impl();
    v161[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v16_Block_object_dispose(va, 8) = 0;
    if (v161[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v138 = (os_log_s *)__nwlog_obj();
      os_log_type_t v139 = v161[0];
      if (!os_log_type_enabled(v138, v161[0])) {
        goto LABEL_339;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
      char v140 = "%{public}s called with null length";
      goto LABEL_338;
    }

    if (!(_BYTE)v168)
    {
      BOOL v138 = (os_log_s *)__nwlog_obj();
      os_log_type_t v139 = v161[0];
      if (!os_log_type_enabled(v138, v161[0])) {
        goto LABEL_339;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
      char v140 = "%{public}s called with null length, backtrace limit exceeded";
      goto LABEL_338;
    }

    v147 = (char *)__nw_create_backtrace_string();
    BOOL v138 = (os_log_s *)__nwlog_obj();
    os_log_type_t v139 = v161[0];
    __int16 v148 = os_log_type_enabled(v138, v161[0]);
    if (v147)
    {
      if (v148)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v147;
        _os_log_impl( &dword_181A5C000,  v138,  v139,  "%{public}s called with null length, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v147);
      if (v35) {
        goto LABEL_140;
      }
      goto LABEL_141;
    }

    if (v148)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
      char v140 = "%{public}s called with null length, no backtrace";
LABEL_338:
      _os_log_impl(&dword_181A5C000, v138, v139, v140, buf, 0xCu);
      goto LABEL_339;
    }

    goto LABEL_339;
  }

  v168 = 0LL;
  os_log_type_t v169 = &v168;
  v166 = 0LL;
  v167 = &v166;
  BOOL v12 = *(void *)(a1 + 56);
  if (!v12)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
    BOOL v35 = (char *)_os_log_send_and_compose_impl();
    v161[0] = OS_LOG_TYPE_ERROR;
    id v165 = 0;
    if (v161[0] == OS_LOG_TYPE_FAULT)
    {
      v141 = (os_log_s *)__nwlog_obj();
      nw_endpoint_t v142 = v161[0];
      if (!os_log_type_enabled(v141, v161[0])) {
        goto LABEL_344;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
      v143 = "%{public}s called with null output_handler";
    }

    else if (v165)
    {
      nw_endpoint_t v149 = (char *)__nw_create_backtrace_string();
      v141 = (os_log_s *)__nwlog_obj();
      nw_endpoint_t v142 = v161[0];
      __int16 v150 = os_log_type_enabled(v141, v161[0]);
      if (v149)
      {
        if (v150)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v149;
          _os_log_impl( &dword_181A5C000,  v141,  v142,  "%{public}s called with null output_handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v149);
LABEL_344:
        if (!v35) {
          goto LABEL_141;
        }
        goto LABEL_140;
      }

      if (!v150) {
        goto LABEL_344;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
      v143 = "%{public}s called with null output_handler, no backtrace";
    }

    else
    {
      v141 = (os_log_s *)__nwlog_obj();
      nw_endpoint_t v142 = v161[0];
      if (!os_log_type_enabled(v141, v161[0])) {
        goto LABEL_344;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
      v143 = "%{public}s called with null output_handler, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v141, v142, v143, buf, 0xCu);
    goto LABEL_344;
  }

  char v13 = (*(uint64_t (**)(void, uint64_t, CFIndex, CFIndex, uint64_t, uint64_t *))(*(void *)(v12 + 24) + 88LL))( *(void *)(a1 + 56),  a1 + 24,  Length,  Length,  0xFFFFFFFFLL,  &v168);
  __int16 v14 = v13;
  uint64_t v15 = v168;
  if (!v168 || !v13)
  {
    if (!v13 || (*(_WORD *)(a1 + 368) & 0x80) != 0) {
      goto LABEL_141;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = a1 + 284;
    *(_WORD *)&buf[22] = 2080;
    v171 = " ";
    LOWORD(v172) = 1024;
    *(_DWORD *)((char *)&v172 + 2) = v14;
    BOOL v35 = (char *)_os_log_send_and_compose_impl();
    v161[0] = OS_LOG_TYPE_ERROR;
    id v165 = 0;
    if (v161[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v36 = (os_log_s *)gLogObj;
      __int16 v37 = v161[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, v161[0])) {
        goto LABEL_139;
      }
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = a1 + 284;
      *(_WORD *)&buf[22] = 2080;
      v171 = " ";
      LOWORD(v172) = 1024;
      *(_DWORD *)((char *)&v172 + 2) = v14;
      id v38 = "%{public}s %{public}s%sOutput handler reported %u frames to write, but array is empty";
    }

    else if (v165)
    {
      id v59 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v36 = (os_log_s *)gLogObj;
      __int16 v37 = v161[0];
      int64_t v60 = os_log_type_enabled((os_log_t)gLogObj, v161[0]);
      if (v59)
      {
        if (v60)
        {
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = a1 + 284;
          *(_WORD *)&buf[22] = 2080;
          v171 = " ";
          LOWORD(v172) = 1024;
          *(_DWORD *)((char *)&v172 + 2) = v14;
          WORD3(v172) = 2082;
          *((void *)&v172 + 1) = v59;
          _os_log_impl( &dword_181A5C000,  v36,  v37,  "%{public}s %{public}s%sOutput handler reported %u frames to write, but array is empty, dumping backtrace:%{public}s",  buf,  0x30u);
        }

        free(v59);
LABEL_139:
        if (v35) {
LABEL_140:
        }
          free(v35);
LABEL_141:
        if ((*(_WORD *)(a1 + 368) & 0x80) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v75 = (os_log_s *)gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_http_connect_send_request";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = a1 + 284;
            *(_WORD *)&buf[22] = 2080;
            v171 = " ";
            _os_log_impl( &dword_181A5C000,  v75,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sFailed to send http connect request",  buf,  0x20u);
          }
        }

        v76 = 0LL;
        if (!Request) {
          goto LABEL_146;
        }
LABEL_145:
        CFRelease(Request);
        goto LABEL_146;
      }

      if (!v60) {
        goto LABEL_139;
      }
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = a1 + 284;
      *(_WORD *)&buf[22] = 2080;
      v171 = " ";
      LOWORD(v172) = 1024;
      *(_DWORD *)((char *)&v172 + 2) = v14;
      id v38 = "%{public}s %{public}s%sOutput handler reported %u frames to write, but array is empty, no backtrace";
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v36 = (os_log_s *)gLogObj;
      __int16 v37 = v161[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, v161[0])) {
        goto LABEL_139;
      }
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = a1 + 284;
      *(_WORD *)&buf[22] = 2080;
      v171 = " ";
      LOWORD(v172) = 1024;
      *(_DWORD *)((char *)&v172 + 2) = v14;
      id v38 = "%{public}s %{public}s%sOutput handler reported %u frames to write, but array is empty, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v36, v37, v38, buf, 0x26u);
    goto LABEL_139;
  }

  v153 = Request;
  while (1)
  {
    uint64_t v16 = *(void *)(v15 + 32);
    if (v16 || *(void *)(v15 + 40))
    {
      uint64_t v17 = *(void *)(v15 + 112);
      if (!v17) {
        goto LABEL_29;
      }
    }

    else
    {
      uint64_t v16 = 0LL;
      uint64_t v17 = *(void *)(v15 + 112);
      if (!v17) {
        goto LABEL_29;
      }
    }

    if ((*(_WORD *)(v15 + 204) & 0x100) != 0
      && g_channel_check_validity
      && !g_channel_check_validity(v15, *(void *)(v15 + 88)))
    {
      LODWORD(v17) = 0;
LABEL_29:
      uint64_t v19 = 0LL;
      goto LABEL_30;
    }

    LODWORD(v17) = *(_DWORD *)(v15 + 52);
    os_log_type_t v18 = *(unsigned int *)(v15 + 56);
    if ((_DWORD)v17) {
      LODWORD(v17) = v17 - (v18 + *(_DWORD *)(v15 + 60));
    }
    uint64_t v19 = (void *)(*(void *)(v15 + 112) + v18);
LABEL_30:
    os_log_type_t v20 = v17 >= v11 ? v11 : v17;
    memcpy(v19, BytePtr, v20);
    if (!nw_frame_claim(v15, v21, v20, 0)) {
      break;
    }
    nw_frame_collapse(v15);
    nw_frame_unclaim(v15, v22, v20, 0);
    os_log_type_t v23 = *(void *)(v15 + 32);
    os_log_type_t v24 = *(void **)(v15 + 40);
    if (v23)
    {
      *(void *)(v23 + 40) = v24;
      os_log_type_t v24 = *(void **)(v15 + 40);
    }

    else
    {
      os_log_type_t v169 = *(uint64_t **)(v15 + 40);
    }

    *os_log_type_t v24 = v23;
    char v25 = v167;
    *(void *)(v15 + 32) = 0LL;
    *(void *)(v15 + 40) = v25;
    *char v25 = v15;
    v167 = (uint64_t *)(v15 + 32);
    if (v16)
    {
      BytePtr += v20;
      uint64_t v15 = v16;
      v11 -= v20;
      if (v11) {
        continue;
      }
    }

    goto LABEL_158;
  }

  if ((*(_WORD *)(a1 + 368) & 0x80) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = a1 + 284;
    *(_WORD *)&buf[22] = 2080;
    v171 = " ";
    LOWORD(v172) = 1024;
    *(_DWORD *)((char *)&v172 + 2) = v20;
    uint64_t v54 = (char *)_os_log_send_and_compose_impl();
    v161[0] = OS_LOG_TYPE_ERROR;
    id v165 = 0;
    if (v161[0] != OS_LOG_TYPE_FAULT)
    {
      if (v165)
      {
        unsigned int v65 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v55 = (os_log_s *)gLogObj;
        id v56 = v161[0];
        id v66 = os_log_type_enabled((os_log_t)gLogObj, v161[0]);
        if (v65)
        {
          if (v66)
          {
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = a1 + 284;
            *(_WORD *)&buf[22] = 2080;
            v171 = " ";
            LOWORD(v172) = 1024;
            *(_DWORD *)((char *)&v172 + 2) = v20;
            WORD3(v172) = 2082;
            *((void *)&v172 + 1) = v65;
            _os_log_impl( &dword_181A5C000,  v55,  v56,  "%{public}s %{public}s%sClaiming frame with %u bytes failed, dumping backtrace:%{public}s",  buf,  0x30u);
          }

          free(v65);
          goto LABEL_156;
        }

        if (!v66) {
          goto LABEL_156;
        }
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&buf[22] = 2080;
        v171 = " ";
        LOWORD(v172) = 1024;
        *(_DWORD *)((char *)&v172 + 2) = v20;
        id v57 = "%{public}s %{public}s%sClaiming frame with %u bytes failed, no backtrace";
      }

      else
      {
        uint64_t v55 = (os_log_s *)__nwlog_obj();
        id v56 = v161[0];
        if (!os_log_type_enabled(v55, v161[0])) {
          goto LABEL_156;
        }
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http_connect_send_bytes";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&buf[22] = 2080;
        v171 = " ";
        LOWORD(v172) = 1024;
        *(_DWORD *)((char *)&v172 + 2) = v20;
        id v57 = "%{public}s %{public}s%sClaiming frame with %u bytes failed, backtrace limit exceeded";
      }

  a2->output_handler_context = v29;
  if (a2->output_handler)
  {
    if (a1->default_input_handler) {
      goto LABEL_120;
    }
LABEL_127:
    nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a2);
    *(_OWORD *)handle = *(_OWORD *)a2->flow_id;
    unsigned int v82 = *((void *)handle + 9);
    if (!v82) {
      goto LABEL_122;
    }
    goto LABEL_121;
  }

  nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)a1);
  if (!a1->default_input_handler) {
    goto LABEL_127;
  }
LABEL_120:
  unsigned int v82 = *((void *)handle + 9);
  if (v82)
  {
LABEL_121:
    nw_queue_cancel_source(v82, v31);
    *((void *)handle + 9) = 0LL;
  }

    if (v53) {
      free(v53);
    }
    return 0LL;
  }

  if (!gLogDatapath) {
    return 0LL;
  }
  BOOL v31 = (os_log_s *)__nwlog_obj();
  result = os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
  {
    os_log_type_t v32 = *(_DWORD *)(v11 + 32);
    *(_DWORD *)buf = 136446978;
    uint64_t v69 = "on_data_chunk_recv_callback";
    BOOL v70 = 2082;
    __int128 v71 = a6 + 205;
    id v72 = 2048;
    *(void *)uint64_t v73 = *(void *)v66;
    *(_WORD *)&v73[8] = 1024;
    *(_DWORD *)&v73[10] = v32;
    _os_log_impl( &dword_181A5C000,  v31,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s suppressing input_available on protocol %p for stream %d that is not yet open",  buf,  0x26u);
    return 0LL;
  }

  return result;
}

      free(v81);
      if (!v57)
      {
LABEL_483:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_add_input_handler";
        id v61 = (char *)_os_log_send_and_compose_impl();
        aBlock[0] = 16;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        if (aBlock[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v62 = (os_log_s *)gLogObj;
          nw_endpoint_t v63 = aBlock[0];
          if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_http1_add_input_handler";
            id v64 = "%{public}s called with null http1";
            goto LABEL_497;
          }

          goto LABEL_498;
        }

        if (type == OS_LOG_TYPE_DEFAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v62 = (os_log_s *)gLogObj;
          nw_endpoint_t v63 = aBlock[0];
          if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_http1_add_input_handler";
            id v64 = "%{public}s called with null http1, backtrace limit exceeded";
            goto LABEL_497;
          }

          goto LABEL_498;
        }

        nw_endpoint_t v84 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v62 = (os_log_s *)gLogObj;
        nw_endpoint_t v63 = aBlock[0];
        v270 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]);
        if (!v84)
        {
          if (v270)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_http1_add_input_handler";
            id v64 = "%{public}s called with null http1, no backtrace";
            goto LABEL_497;
          }

          goto LABEL_498;
        }

        if (v270)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_add_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v84;
          v86 = "%{public}s called with null http1, dumping backtrace:%{public}s";
          goto LABEL_491;
        }

      if (v71) {
        free(v71);
      }
      *(_DWORD *)(v45 + 36_Block_object_dispose(va, 8) = 0;
      BOOL v12 = &qword_18C45F000;
      uint64_t v47 = MEMORY[0x1895F87A8];
      if ((*(_BYTE *)(v45 + 158) & 1) != 0)
      {
LABEL_122:
        nw_protocol_remove_input_handler(*(void *)(v46 + 32), v46);
        nw_protocol_set_output_handler(v46, 0LL);
        if ((*(_BYTE *)(v46 + 158) & 1) == 0)
        {
          if (*((_BYTE *)v12 + 1537))
          {
            v143 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v143, OS_LOG_TYPE_DEBUG))
            {
              __int16 v144 = *(void *)(v46 + 488);
              v145 = *(_DWORD *)(*(void *)(v46 + 480) + 372LL);
              __int16 v146 = *(_DWORD *)(v46 + 860);
              if (v144) {
                LODWORD(v144) = *(_DWORD *)(v144 + 424);
              }
              *(_DWORD *)buf = 136447746;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_destroy";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v46 + 74;
              *(_WORD *)&buf[22] = 2080;
              v209 = (uint64_t)" ";
              *(_WORD *)v210 = 1024;
              *(_DWORD *)&v210[2] = v145;
              *(_WORD *)&v210[6] = 1024;
              *(_DWORD *)&v210[8] = v146;
              *(_WORD *)&v210[12] = 1024;
              *(_DWORD *)&v210[14] = v144;
              *(_WORD *)&v210[18] = 2048;
              *(void *)&v210[20] = v46;
              _os_log_impl( &dword_181A5C000,  v143,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> destroying %p",  buf,  0x3Cu);
            }
          }
        }

        id v81 = *(_BYTE *)(v46 + 760);
        if ((v81 & 1) != 0)
        {
          unsigned int v82 = *(void **)(v46 + 752);
          if (v82)
          {
            os_release(v82);
            id v81 = *(_BYTE *)(v46 + 760);
          }
        }

        *(void *)(v46 + 752) = 0LL;
        *(_BYTE *)(v46 + 760) = v81 | 1;
        v83 = *(_BYTE *)(v46 + 744);
        if ((v83 & 1) != 0)
        {
          nw_endpoint_t v84 = *(void **)(v46 + 736);
          if (v84)
          {
            os_release(v84);
            v83 = *(_BYTE *)(v46 + 744);
          }
        }

        *(void *)(v46 + 736) = 0LL;
        *(_BYTE *)(v46 + 744) = v83 | 1;
        v85 = *(void *)(v46 + 488);
        if (!v85 || *(void *)(v85 + 256) != v46)
        {
LABEL_143:
          *(void *)(v46 + 48_Block_object_dispose(va, 8) = 0LL;
          if ((*(_BYTE *)(v46 + 158) & 1) == 0)
          {
            if (!*((_BYTE *)v12 + 1537)) {
              goto LABEL_145;
            }
            v157 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v157, OS_LOG_TYPE_DEBUG))
            {
              __int16 v158 = *(void *)(v46 + 488);
              id v159 = *(_DWORD *)(*(void *)(v46 + 480) + 372LL);
              __int16 v160 = *(_DWORD *)(v46 + 860);
              if (v158) {
                LODWORD(v15_Block_object_dispose(va, 8) = *(_DWORD *)(v158 + 424);
              }
              *(_DWORD *)buf = 136447490;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_destroy";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v46 + 74;
              *(_WORD *)&buf[22] = 2080;
              v209 = (uint64_t)" ";
              *(_WORD *)v210 = 1024;
              *(_DWORD *)&v210[2] = v159;
              *(_WORD *)&v210[6] = 1024;
              *(_DWORD *)&v210[8] = v160;
              *(_WORD *)&v210[12] = 1024;
              *(_DWORD *)&v210[14] = v158;
              _os_log_impl( &dword_181A5C000,  v157,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> finalizing frame arrays",  buf,  0x32u);
            }
          }

          if (*((_BYTE *)v12 + 1537))
          {
            nw_endpoint_t v161 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v161, OS_LOG_TYPE_DEBUG))
            {
              v213 = 136446210;
              v214 = "nw_protocol_finalize_master_frame_array";
              _os_log_impl(&dword_181A5C000, v161, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&v213, 0xCu);
            }
          }

    if (v30) {
      free(v30);
    }
    goto LABEL_31;
  }

  uint64_t v16 = v15;
LABEL_31:

LABEL_32:
  return v15;
}

    if (v43) {
      free(v43);
    }
    goto LABEL_37;
  }

          if (v215) {
            free(v215);
          }
          BOOL v70 = v218;
LABEL_121:
          if (v76) {
            os_release(v76);
          }
          if (v78) {
            os_release(v78);
          }
          if (v73) {
            os_release(v73);
          }
          id v88 = (nw_protocol *)*((void *)v58 + 42);
          if (v88)
          {
            nw_http3_stream_replace_protocol_instance((uint64_t)v58, *((void **)v58 + 44), v88, (uint64_t)v58);
            v89 = nw_parameters_copy_protocol_options_legacy(v77, (nw_protocol *)v58);
            if (v89)
            {
              v90 = v89;
              v91 = v90;
              *((_BYTE *)v58 + 636) = 0;
              nw_endpoint_t v92 = 84LL;
              BOOL v93 = 636LL;
              while (1)
              {
                os_log_type_t v94 = v90[v93 - 588];
                *((_BYTE *)v58 + v93) = v94;
                if (!v94) {
                  break;
                }
                --v92;
                ++v93;
                if (v92 <= 1)
                {
                  *((_BYTE *)v58 + v93) = 0;
                  break;
                }
              }

              id v95 = v91;
              id v96 = *((_WORD *)v95 + 68);

              *((_WORD *)v58 + 316) = v96;
              os_release(v95);
              uint64_t v44 = (uint64_t)v221;
            }

            else
            {
              uint64_t v44 = (uint64_t)v221;
              if ((*v69 & 0x800) == 0)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                id v97 = (os_log_s *)gLogObj;
                if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
                {
                  v98 = *(_DWORD *)(*((void *)v58 + 42) + 1280LL);
                  v99 = *((void *)v58 + 30);
                  os_log_type_t v100 = *((void *)v58 + 44);
                  *(_DWORD *)buf = 136447746;
                  *(void *)&uint8_t buf[4] = "nw_http3_stream_add_input_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = (char *)v58 + 636;
                  *(_WORD *)&buf[22] = 2080;
                  *(void *)&_BYTE buf[24] = " ";
                  *(_WORD *)&buf[32] = 1024;
                  *(_DWORD *)&buf[34] = v98;
                  *(_WORD *)&buf[38] = 2048;
                  *(void *)&buf[40] = v99;
                  *(_WORD *)&buf[48] = 2048;
                  *(void *)&buf[50] = v58;
                  *(_WORD *)&buf[58] = 2048;
                  *(void *)&buf[60] = v100;
                  _os_log_impl( &dword_181A5C000,  v97,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:s%llu> Failed to access options for protocol %p, parameters %p",  buf,  0x44u);
                }
              }
            }

    goto LABEL_119;
  }

  os_unfair_lock_lock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  id v56 = &g_registration_list;
  do
  {
    id v56 = (uint64_t *)*v56;
    if (!v56)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
      goto LABEL_75;
    }
  }

  while (*(void *)identifier != v56[4]
       || *((void *)identifier + 1) != v56[5]
       || *((void *)identifier + 2) != v56[6]
       || *((void *)identifier + 3) != v56[7]
       || *((void *)identifier + 4) != v56[8]);
  id v61 = v56[13];
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  if (!v61)
  {
LABEL_75:
    if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v54) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      id v66 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
      {
        v283 = nw_endpoint_handler_get_id_string(v54);
        v281 = nw_endpoint_handler_dry_run_string(v54);
        uint64_t v67 = nw_endpoint_handler_copy_endpoint(v54);
        v279 = nw_endpoint_get_logging_description(v67);
        uint64_t v68 = nw_endpoint_handler_state_string(v54);
        uint64_t v69 = nw_endpoint_handler_mode_string(v54);
        BOOL v70 = nw_endpoint_handler_copy_current_path(v54);
        *(_DWORD *)buf = 136448258;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        v300 = 2082;
        v301 = (uint64_t)v283;
        v302 = 2082;
        v303 = v281;
        v304 = 2082;
        v305 = (void *)v279;
        v306 = 2082;
        v307 = v68;
        v308 = 2082;
        v309 = v69;
        v310 = 2114;
        v311 = v70;
        v312 = 2080;
        v313 = identifier;
        v314 = 2048;
        v315 = (uint64_t)identifier;
        _os_log_impl( &dword_181A5C000,  v66,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] protocol %s (%p) does not hav e accept function, cannot search for protocol to join",  buf,  0x5Cu);
      }
    }

    goto LABEL_121;
  }

  id v62 = v286;
  nw_endpoint_t v63 = v62;
  while (1)
  {
    registered_endpoint = nw_protocol_instance_registrar_search_for_instance_to_join( (uint64_t)identifier,  a2,  v287,  v63,  v62,  v290,  v49 != 0);
    registered_endpoint = (uint64_t)nw_protocol_instance_registrar_copy_next_registered_endpoint(v63, v49 != 0);

    nw_endpoint_t v63 = (void *)registered_endpoint;
  }

  if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v54) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    v271 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v271, OS_LOG_TYPE_DEBUG))
    {
      v282 = nw_endpoint_handler_get_id_string(v54);
      v280 = nw_endpoint_handler_dry_run_string(v54);
      v284 = nw_endpoint_handler_copy_endpoint(v54);
      v278 = nw_endpoint_get_logging_description(v284);
      v272 = nw_endpoint_handler_state_string(v54);
      v273 = nw_endpoint_handler_mode_string(v54);
      v274 = nw_endpoint_handler_copy_current_path(v54);
      v275 = v274;
      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      v276 = "invalid";
      v277 = *(const char **)(registered_endpoint + 16);
      *(_DWORD *)buf = 136448258;
      if (v277) {
        v276 = v277;
      }
      v300 = 2082;
      v301 = (uint64_t)v282;
      v302 = 2082;
      v303 = v280;
      v304 = 2082;
      v305 = (void *)v278;
      v306 = 2082;
      v307 = v272;
      v308 = 2082;
      v309 = v273;
      v310 = 2114;
      v311 = v274;
      v312 = 2080;
      v313 = (char *)v276;
      v314 = 2048;
      v315 = registered_endpoint;
      _os_log_impl( &dword_181A5C000,  v271,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] returning protocol to join %s (%p)",  buf,  0x5Cu);
    }
  }

    if (v38) {
      free(v38);
    }
    LODWORD(v12) = 0;
  }

  LODWORD(v_Block_object_dispose(va, 8) = v36 + v8;
  uint64_t v55 = *(void *)(a1 + 104);
  if ((!v55 || (*(__int16 *)(v55 + 388) & 0x80000000) == 0) && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    v215 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v216 = *(void *)(a1 + 104);
      v217 = "";
      unint64_t v218 = v216 == 0;
      id v219 = *(_DWORD *)(v216 + 368);
      v220 = (const char *)(v216 + 390);
      uint64_t v256 = "send_data_callback_block_invoke";
      v257 = 2082;
      if (v218) {
        v220 = "";
      }
      *(_DWORD *)buf = 136447234;
      if (!v218) {
        v217 = " ";
      }
      v258 = v220;
      v259 = 2080;
      v260 = (size_t)v217;
      v261 = 1024;
      *(_DWORD *)v262 = v219;
      *(_WORD *)&v262[4] = 1024;
      *(_DWORD *)&v262[6] = v36;
      _os_log_impl( &dword_181A5C000,  v215,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> wrote %u bytes of capsule length",  buf,  0x2Cu);
    }
  }

        if (v144) {
          free(v144);
        }
        os_log_type_t v33 = 0;
        if (v29 != &nw_protocol_ref_counted_handle) {
          goto LABEL_50;
        }
LABEL_49:
        if (a1->handle == &nw_protocol_ref_counted_handle)
        {
          char v40 = a1[1].callbacks;
          if (v40)
          {
            id v41 = (nw_protocol_callbacks *)((char *)v40 - 1);
            a1[1].callbacks = v41;
            if (!v41)
            {
              __int16 v42 = *(void (***)(void))a1[1].flow_id;
              if (v42)
              {
                *(void *)a1[1].flow_id = 0LL;
                v42[2](v42);
                _Block_release(v42);
              }

              if ((a1[1].flow_id[8] & 1) != 0)
              {
                os_log_type_t v43 = *(const void **)a1[1].flow_id;
                if (v43) {
                  _Block_release(v43);
                }
              }

              free(a1);
            }
          }
        }

        goto LABEL_50;
      }

      os_log_type_t v33 = v32(v26, a1, 1LL, 0xFFFFFFFFLL, 1LL, v170);
      if (v29 == &nw_protocol_ref_counted_handle) {
        goto LABEL_49;
      }
LABEL_50:
      if (v27 == &nw_protocol_ref_counted_handle && v26->handle == &nw_protocol_ref_counted_handle)
      {
        uint64_t v44 = v26[1].callbacks;
        if (v44)
        {
          id v45 = (nw_protocol_callbacks *)((char *)v44 - 1);
          v26[1].callbacks = v45;
          if (!v45)
          {
            __int16 v46 = *(void (***)(void))v26[1].flow_id;
            if (v46)
            {
              *(void *)v26[1].flow_id = 0LL;
              v46[2](v46);
              _Block_release(v46);
            }

            if ((v26[1].flow_id[8] & 1) != 0)
            {
              uint64_t v47 = *(const void **)v26[1].flow_id;
              if (v47) {
                _Block_release(v47);
              }
            }

            free(v26);
          }
        }
      }

void sub_181B0A6E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
}

void nw_path_assert_required_agents(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    unint64_t v3 = (void *)v1[28];
    if (v3)
    {
      applier[0] = MEMORY[0x1895F87A8];
      applier[1] = 3221225472LL;
      applier[2] = __nw_path_assert_required_agents_block_invoke;
      applier[3] = &unk_189BC5148;
      char v13 = v1;
      xpc_dictionary_apply(v3, applier);
    }

    goto LABEL_4;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_path_assert_required_agents";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_path_assert_required_agents";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_path_assert_required_agents";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_path_assert_required_agents";
        _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_path_assert_required_agents";
        _os_log_impl(&dword_181A5C000, v6, v11, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

void sub_181B0AA58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_path_assert_required_agents_block_invoke(uint64_t a1, int a2, xpc_object_t xdict)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  v6[0] = 0LL;
  if (xdict)
  {
    data = xpc_dictionary_get_data(xdict, "data", v6);
    if (data)
    {
      if (v6[0] >= 0xD8 && v6[0] == *((unsigned int *)data + 53) + 216LL && (data[209] & 2) != 0)
      {
        *(_OWORD *)os_log_type_t v6 = *(_OWORD *)data;
      }
    }
  }

  return 1LL;
}

LABEL_91:
  return v19;
}

            uint64_t v68 = (size_t)v65[12];
            goto LABEL_92;
          }

          if (v67) {
            goto LABEL_91;
          }
          uint64_t v68 = dispatch_data_get_size(v66);
LABEL_92:
          uint64_t v69 = (size_t)v65[14];
          if (v68 <= v69) {
            uint64_t v69 = 0LL;
          }
          v301 = v68 - v69;
LABEL_95:

          uint64_t v47 = 0LL;
          if ((*(_WORD *)(handle + 332) & 0x800) == 0) {
            goto LABEL_97;
          }
LABEL_96:
          BOOL v70 = v50;
          __int128 v71 = *((_BYTE *)v70 + 128);

          if ((v71 & 4) == 0)
          {
            id v128 = nw_endpoint_handler_get_minimize_logging(v294);
            id v129 = nw_endpoint_handler_get_logging_disabled(v294);
            if (v128)
            {
              if ((v129 & 1) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                v312 = (os_log_s *)(id)gconnectionLogObj;
                if (os_log_type_enabled(v312, OS_LOG_TYPE_DEBUG))
                {
                  os_log_type_t v195 = nw_endpoint_handler_get_id_string(v294);
                  BOOL v196 = nw_endpoint_handler_dry_run_string(v294);
                  v197 = nw_endpoint_handler_copy_endpoint(v294);
                  os_log_type_t v198 = nw_endpoint_get_logging_description(v197);
                  v306 = nw_endpoint_handler_state_string(v294);
                  BOOL v199 = nw_endpoint_handler_mode_string(v294);
                  os_log_type_t v200 = nw_endpoint_handler_copy_current_path(v294);
                  *(_DWORD *)buf = 136447746;
                  *(void *)&uint8_t buf[4] = "nw_flow_prepare_output_frames";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v195;
                  *(_WORD *)&buf[22] = 2082;
                  v338 = v196;
                  *(_WORD *)v339 = 2082;
                  *(void *)&v339[2] = v198;
                  *(_WORD *)&v339[10] = 2082;
                  id v130 = v312;
                  *(void *)&v339[12] = v306;
                  *(_WORD *)&v339[20] = 2082;
                  *(void *)&v339[22] = v199;
                  v340 = 2114;
                  v341 = v200;
                  _os_log_impl( &dword_181A5C000,  v312,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Write request is no t idempotent, stopping preparing frames",  buf,  0x48u);
                }

                else
                {
                  id v130 = v312;
                }

    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v42 = "__nw_protocol_connected";
  unint64_t v3 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v39 = 0;
  if (__nwlog_fault((const char *)v3, &type, &v39))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      char v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "__nw_protocol_connected";
      os_log_type_t v26 = "%{public}s called with null protocol";
    }

    else if (v39)
    {
      os_log_type_t v33 = (char *)__nw_create_backtrace_string();
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      char v25 = type;
      char v34 = os_log_type_enabled(v24, type);
      if (v33)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v42 = "__nw_protocol_connected";
          os_log_type_t v43 = 2082;
          uint64_t v44 = v33;
          _os_log_impl( &dword_181A5C000,  v24,  v25,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v33);
        if (v3) {
          goto LABEL_24;
        }
        return;
      }

      if (!v34) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "__nw_protocol_connected";
      os_log_type_t v26 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      char v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "__nw_protocol_connected";
      os_log_type_t v26 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v24, v25, v26, buf, 0xCu);
  }

    if (v34) {
      free(v34);
    }
    goto LABEL_64;
  }

  if (v5) {
    goto LABEL_11;
  }
  if ((*((_BYTE *)v3 + 128) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v22 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_write_request_consume_bytes";
      _os_log_impl(&dword_181A5C000, v22, OS_LOG_TYPE_ERROR, "%{public}s No data to consume", buf, 0xCu);
    }
  }

  os_log_type_t v23 = 1LL;
LABEL_70:

  return v23;
}

  if (v44)
  {
    id v45 = (nw_protocol *)os_retain(v44);
    a1[1].default_input_handler = v45;
    LODWORD(a1[2].default_input_handler) = nw_path_get_effective_traffic_class(v45);
    HIDWORD(a1[2].default_input_handler) = nw_path_get_maximum_datagram_size(a1[1].default_input_handler);
    __int16 v46 = a1->default_input_handler;
    if (v46)
    {
      uint64_t v47 = v46->handle;
      if (v47 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v48 = v46[1].callbacks;
        if (v48) {
          v46[1].callbacks = (nw_protocol_callbacks *)((char *)&v48->add_input_handler + 1);
        }
      }

      v49 = v46->callbacks;
      if (v49)
      {
        get_parameters = (uint64_t (*)(nw_protocol *))v49->get_parameters;
        if (get_parameters)
        {
          BOOL v51 = (void *)get_parameters(v46);
          if (v47 != &nw_protocol_ref_counted_handle)
          {
LABEL_100:
            v52 = nw_parameters_copy_context(v51);
            a1[1].output_handler_context = nw_path_copy_flow_registration(v52, (uint64_t)a1);
            if (v52) {
              os_release(v52);
            }
            csum_flags = nw_path_get_csum_flags(v44);
            output_handler_context_high = HIWORD(a1[2].output_handler_context);
            if ((output_handler_context_high & 4) != 0 && (csum_flags & 4) != 0
              || (output_handler_context_high & 4) == 0 && (csum_flags & 0x40) != 0)
            {
              HIWORD(a1[2].output_handler_context) = output_handler_context_high & 0xFEF7 | 0x100;
            }

            output_handler_context = a1[1].output_handler_context;
            if (output_handler_context)
            {
              id v56 = output_handler_context;
              id v57 = v56[148];

              HIWORD(a1[2].output_handler_context) = HIWORD(a1[2].output_handler_context) & 0xFFF7 | (4 * v57) & 8;
              a1[2].handle = nw_path_flow_registration_get_stats_area((uint64_t)a1[1].output_handler_context, 2);
              stats_region = (nw_protocol *)nw_path_flow_registration_get_stats_region( a1[1].output_handler_context,  (uint64_t)a1->identifier->name);
              a1[2].output_handler = stats_region;
              if (!stats_region)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                id v59 = (os_log_s *)gLogObj;
                if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136446722;
                  v110 = "nw_protocol_udp_connected";
                  id v111 = 2082;
                  id v112 = a1 + 3;
                  v113 = 2048;
                  nw_endpoint_t v114 = (nw_protocol *)&g_udp_stats;
                  _os_log_impl( &dword_181A5C000,  v59,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s udp->udp_stats is NULL setting to global %p",  buf,  0x20u);
                }

                a1[2].output_handler = (nw_protocol *)&g_udp_stats;
              }
            }

            goto LABEL_10;
          }

      free(v51);
    }

      if (!v34) {
        return 0LL;
      }
      os_log_type_t v32 = (char *)v34;
      goto LABEL_45;
    }

    if (!v73[0])
    {
      BOOL v35 = (os_log_s *)__nwlog_obj();
      uint64_t v36 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
        __int16 v37 = "%{public}s called with null metadata_complete, backtrace limit exceeded";
        goto LABEL_90;
      }

      goto LABEL_91;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v35 = (os_log_s *)__nwlog_obj();
    uint64_t v36 = type[0];
    __int16 v46 = os_log_type_enabled(v35, type[0]);
    if (!backtrace_string)
    {
      if (v46)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
        __int16 v37 = "%{public}s called with null metadata_complete, no backtrace";
        goto LABEL_90;
      }

      goto LABEL_91;
    }

    if (v46)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      id v41 = "%{public}s called with null metadata_complete, dumping backtrace:%{public}s";
      goto LABEL_76;
    }

    free(v44);
    if (!v28) {
      goto LABEL_26;
    }
    goto LABEL_154;
  }

  char v13 = v9;
  char v14 = v13[231];

  uint64_t v15 = v13;
  if ((v14 & 4) != 0) {
    goto LABEL_11;
  }
  uint64_t v16 = v12;
  uint64_t v17 = *(id *)(v16[13] + 136LL);

  if (!v17)
  {
    __nwlog_obj();
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
    uint64_t v54 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v83 = 0;
    if (__nwlog_fault(v54, &type, &v83))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v56 = type;
        if (os_log_type_enabled(v55, type))
        {
          *(_DWORD *)buf = 136446210;
          v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_181A5C000, v55, v56, "%{public}s called with null context", buf, 0xCu);
        }
      }

      else if (v83)
      {
        uint64_t v68 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v69 = type;
        BOOL v70 = os_log_type_enabled(v55, type);
        if (v68)
        {
          if (v70)
          {
            *(_DWORD *)buf = 136446466;
            v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
            os_log_type_t v87 = 2082;
            id v88 = v68;
            _os_log_impl( &dword_181A5C000,  v55,  v69,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v68);
          goto LABEL_164;
        }

        if (v70)
        {
          *(_DWORD *)buf = 136446210;
          v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_181A5C000, v55, v69, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v80 = type;
        if (os_log_type_enabled(v55, type))
        {
          *(_DWORD *)buf = 136446210;
          v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl( &dword_181A5C000,  v55,  v80,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

  if (v20) {
    free(v20);
  }
}

    free(v23);
    goto LABEL_92;
  }

  uint64_t int64 = xpc_dictionary_get_uint64(v1, "type");
  switch(uint64)
  {
    case 1uLL:
      length[0] = 0LL;
      data = (const sockaddr *)xpc_dictionary_get_data(v2, "address", length);
      if (data && length[0] >= 2 && length[0] >= data->sa_len)
      {
        address = nw_endpoint_create_address(data);
        goto LABEL_15;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v5 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
      os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v85 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v7 = (os_log_s *)(id)gLogObj;
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s invalid sockaddr in dictionary", buf, 0xCu);
        }
      }

      else if (v85)
      {
        id v64 = __nw_create_backtrace_string();
        if (v64)
        {
          unsigned int v65 = (char *)v64;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v66 = (os_log_s *)(id)gLogObj;
          uint64_t v67 = type;
          if (os_log_type_enabled(v66, type))
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
            id v88 = 2082;
            v89 = v65;
            _os_log_impl( &dword_181A5C000,  v66,  v67,  "%{public}s invalid sockaddr in dictionary, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v65);
          if (!v6) {
            goto LABEL_99;
          }
          goto LABEL_98;
        }

        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v75 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
          _os_log_impl(&dword_181A5C000, v7, v75, "%{public}s invalid sockaddr in dictionary, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v7 = (os_log_s *)(id)gLogObj;
        id v72 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
          _os_log_impl( &dword_181A5C000,  v7,  v72,  "%{public}s invalid sockaddr in dictionary, backtrace limit exceeded",  buf,  0xCu);
        }
      }

LABEL_97:
      if (!v6)
      {
LABEL_99:
        uint64_t v17 = 0LL;
        goto LABEL_16;
      }

        goto LABEL_92;
      }

      if (!v74)
      {
        __nwlog_obj();
        BOOL v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v68 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v77 = "nw_connection_group_set_state_locked";
          _os_log_impl( &dword_181A5C000,  v31,  v68,  "%{public}s called with null group, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_91;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v66 = type;
      uint64_t v67 = os_log_type_enabled(v31, type);
      if (!backtrace_string)
      {
        if (v67)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v77 = "nw_connection_group_set_state_locked";
          _os_log_impl(&dword_181A5C000, v31, v66, "%{public}s called with null group, no backtrace", buf, 0xCu);
        }

        goto LABEL_91;
      }

      if (v67)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v77 = "nw_connection_group_set_state_locked";
        uint64_t v78 = 2082;
        *(void *)v79 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v31,  v66,  "%{public}s called with null group, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
    }

    if (v30) {
      free(v30);
    }
    BOOL v10 = 0LL;
    goto LABEL_13;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v46 = "__nw_protocol_add_input_handler";
  os_log_type_t v26 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v43 = 0;
  if (__nwlog_fault(v26, &type, &v43))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v27 = (os_log_s *)__nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v46 = "__nw_protocol_add_input_handler";
        BOOL v29 = "%{public}s called with null protocol";
LABEL_84:
        _os_log_impl(&dword_181A5C000, v27, v28, v29, buf, 0xCu);
      }
    }

    else if (v43)
    {
      __int16 v37 = (char *)__nw_create_backtrace_string();
      os_log_type_t v27 = (os_log_s *)__nwlog_obj();
      os_log_type_t v28 = type;
      id v38 = os_log_type_enabled(v27, type);
      if (v37)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v46 = "__nw_protocol_add_input_handler";
          uint64_t v47 = 2082;
          uint64_t v48 = v37;
          _os_log_impl( &dword_181A5C000,  v27,  v28,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v37);
        goto LABEL_85;
      }

      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v46 = "__nw_protocol_add_input_handler";
        BOOL v29 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_84;
      }
    }

    else
    {
      os_log_type_t v27 = (os_log_s *)__nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v46 = "__nw_protocol_add_input_handler";
        BOOL v29 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_84;
      }
    }
  }

    if (v30) {
      free(v30);
    }
    BOOL v10 = 0LL;
    goto LABEL_13;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v46 = "__nw_protocol_remove_input_handler";
  os_log_type_t v26 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v43 = 0;
  if (__nwlog_fault(v26, &type, &v43))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v27 = (os_log_s *)__nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v46 = "__nw_protocol_remove_input_handler";
        BOOL v29 = "%{public}s called with null protocol";
LABEL_84:
        _os_log_impl(&dword_181A5C000, v27, v28, v29, buf, 0xCu);
      }
    }

    else if (v43)
    {
      __int16 v37 = (char *)__nw_create_backtrace_string();
      os_log_type_t v27 = (os_log_s *)__nwlog_obj();
      os_log_type_t v28 = type;
      id v38 = os_log_type_enabled(v27, type);
      if (v37)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v46 = "__nw_protocol_remove_input_handler";
          uint64_t v47 = 2082;
          uint64_t v48 = v37;
          _os_log_impl( &dword_181A5C000,  v27,  v28,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v37);
        goto LABEL_85;
      }

      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v46 = "__nw_protocol_remove_input_handler";
        BOOL v29 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_84;
      }
    }

    else
    {
      os_log_type_t v27 = (os_log_s *)__nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v46 = "__nw_protocol_remove_input_handler";
        BOOL v29 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_84;
      }
    }
  }

    if (v30) {
      free(v30);
    }
    BOOL v10 = 0LL;
    goto LABEL_13;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v46 = "__nw_protocol_connect";
  os_log_type_t v26 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v43 = 0;
  if (__nwlog_fault(v26, &type, &v43))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v27 = (os_log_s *)__nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v46 = "__nw_protocol_connect";
        BOOL v29 = "%{public}s called with null protocol";
LABEL_84:
        _os_log_impl(&dword_181A5C000, v27, v28, v29, buf, 0xCu);
      }
    }

    else if (v43)
    {
      __int16 v37 = (char *)__nw_create_backtrace_string();
      os_log_type_t v27 = (os_log_s *)__nwlog_obj();
      os_log_type_t v28 = type;
      id v38 = os_log_type_enabled(v27, type);
      if (v37)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v46 = "__nw_protocol_connect";
          uint64_t v47 = 2082;
          uint64_t v48 = v37;
          _os_log_impl( &dword_181A5C000,  v27,  v28,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v37);
        goto LABEL_85;
      }

      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v46 = "__nw_protocol_connect";
        BOOL v29 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_84;
      }
    }

    else
    {
      os_log_type_t v27 = (os_log_s *)__nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v46 = "__nw_protocol_connect";
        BOOL v29 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_84;
      }
    }
  }

    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v42 = "__nw_protocol_disconnect";
  unint64_t v3 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v39 = 0;
  if (__nwlog_fault((const char *)v3, &type, &v39))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      char v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "__nw_protocol_disconnect";
      os_log_type_t v26 = "%{public}s called with null protocol";
    }

    else if (v39)
    {
      os_log_type_t v33 = (char *)__nw_create_backtrace_string();
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      char v25 = type;
      char v34 = os_log_type_enabled(v24, type);
      if (v33)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v42 = "__nw_protocol_disconnect";
          os_log_type_t v43 = 2082;
          uint64_t v44 = v33;
          _os_log_impl( &dword_181A5C000,  v24,  v25,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v33);
        if (v3) {
          goto LABEL_24;
        }
        return;
      }

      if (!v34) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "__nw_protocol_disconnect";
      os_log_type_t v26 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      char v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "__nw_protocol_disconnect";
      os_log_type_t v26 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v24, v25, v26, buf, 0xCu);
  }

    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v42 = "__nw_protocol_disconnected";
  unint64_t v3 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v39 = 0;
  if (__nwlog_fault((const char *)v3, &type, &v39))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      char v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "__nw_protocol_disconnected";
      os_log_type_t v26 = "%{public}s called with null protocol";
    }

    else if (v39)
    {
      os_log_type_t v33 = (char *)__nw_create_backtrace_string();
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      char v25 = type;
      char v34 = os_log_type_enabled(v24, type);
      if (v33)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v42 = "__nw_protocol_disconnected";
          os_log_type_t v43 = 2082;
          uint64_t v44 = v33;
          _os_log_impl( &dword_181A5C000,  v24,  v25,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v33);
        if (v3) {
          goto LABEL_24;
        }
        return;
      }

      if (!v34) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "__nw_protocol_disconnected";
      os_log_type_t v26 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      char v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "__nw_protocol_disconnected";
      os_log_type_t v26 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v24, v25, v26, buf, 0xCu);
  }

    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v42 = "__nw_protocol_input_available";
  unint64_t v3 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v39 = 0;
  if (__nwlog_fault((const char *)v3, &type, &v39))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      char v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "__nw_protocol_input_available";
      os_log_type_t v26 = "%{public}s called with null protocol";
    }

    else if (v39)
    {
      os_log_type_t v33 = (char *)__nw_create_backtrace_string();
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      char v25 = type;
      char v34 = os_log_type_enabled(v24, type);
      if (v33)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v42 = "__nw_protocol_input_available";
          os_log_type_t v43 = 2082;
          uint64_t v44 = v33;
          _os_log_impl( &dword_181A5C000,  v24,  v25,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v33);
        if (v3) {
          goto LABEL_24;
        }
        return;
      }

      if (!v34) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "__nw_protocol_input_available";
      os_log_type_t v26 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      char v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "__nw_protocol_input_available";
      os_log_type_t v26 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v24, v25, v26, buf, 0xCu);
  }

    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v42 = "__nw_protocol_output_available";
  unint64_t v3 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v39 = 0;
  if (__nwlog_fault((const char *)v3, &type, &v39))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      char v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "__nw_protocol_output_available";
      os_log_type_t v26 = "%{public}s called with null protocol";
    }

    else if (v39)
    {
      os_log_type_t v33 = (char *)__nw_create_backtrace_string();
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      char v25 = type;
      char v34 = os_log_type_enabled(v24, type);
      if (v33)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v42 = "__nw_protocol_output_available";
          os_log_type_t v43 = 2082;
          uint64_t v44 = v33;
          _os_log_impl( &dword_181A5C000,  v24,  v25,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v33);
        if (v3) {
          goto LABEL_24;
        }
        return;
      }

      if (!v34) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "__nw_protocol_output_available";
      os_log_type_t v26 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      char v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "__nw_protocol_output_available";
      os_log_type_t v26 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v24, v25, v26, buf, 0xCu);
  }

    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v42 = "__nw_protocol_input_finished";
  unint64_t v3 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v39 = 0;
  if (__nwlog_fault((const char *)v3, &type, &v39))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      char v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "__nw_protocol_input_finished";
      os_log_type_t v26 = "%{public}s called with null protocol";
    }

    else if (v39)
    {
      os_log_type_t v33 = (char *)__nw_create_backtrace_string();
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      char v25 = type;
      char v34 = os_log_type_enabled(v24, type);
      if (v33)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v42 = "__nw_protocol_input_finished";
          os_log_type_t v43 = 2082;
          uint64_t v44 = v33;
          _os_log_impl( &dword_181A5C000,  v24,  v25,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v33);
        if (v3) {
          goto LABEL_24;
        }
        return;
      }

      if (!v34) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "__nw_protocol_input_finished";
      os_log_type_t v26 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      char v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "__nw_protocol_input_finished";
      os_log_type_t v26 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v24, v25, v26, buf, 0xCu);
  }

    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v42 = "__nw_protocol_output_finished";
  unint64_t v3 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v39 = 0;
  if (__nwlog_fault((const char *)v3, &type, &v39))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      char v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "__nw_protocol_output_finished";
      os_log_type_t v26 = "%{public}s called with null protocol";
    }

    else if (v39)
    {
      os_log_type_t v33 = (char *)__nw_create_backtrace_string();
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      char v25 = type;
      char v34 = os_log_type_enabled(v24, type);
      if (v33)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v42 = "__nw_protocol_output_finished";
          os_log_type_t v43 = 2082;
          uint64_t v44 = v33;
          _os_log_impl( &dword_181A5C000,  v24,  v25,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v33);
        if (v3) {
          goto LABEL_24;
        }
        return;
      }

      if (!v34) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "__nw_protocol_output_finished";
      os_log_type_t v26 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      char v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "__nw_protocol_output_finished";
      os_log_type_t v26 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v24, v25, v26, buf, 0xCu);
  }

    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v42 = "__nw_protocol_input_flush";
  unint64_t v3 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v39 = 0;
  if (__nwlog_fault((const char *)v3, &type, &v39))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      char v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "__nw_protocol_input_flush";
      os_log_type_t v26 = "%{public}s called with null protocol";
    }

    else if (v39)
    {
      os_log_type_t v33 = (char *)__nw_create_backtrace_string();
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      char v25 = type;
      char v34 = os_log_type_enabled(v24, type);
      if (v33)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v42 = "__nw_protocol_input_flush";
          os_log_type_t v43 = 2082;
          uint64_t v44 = v33;
          _os_log_impl( &dword_181A5C000,  v24,  v25,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v33);
        if (v3) {
          goto LABEL_24;
        }
        return;
      }

      if (!v34) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "__nw_protocol_input_flush";
      os_log_type_t v26 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      char v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "__nw_protocol_input_flush";
      os_log_type_t v26 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v24, v25, v26, buf, 0xCu);
  }

    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v42 = "__nw_protocol_error";
  unint64_t v3 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v39 = 0;
  if (__nwlog_fault((const char *)v3, &type, &v39))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      char v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "__nw_protocol_error";
      os_log_type_t v26 = "%{public}s called with null protocol";
    }

    else if (v39)
    {
      os_log_type_t v33 = (char *)__nw_create_backtrace_string();
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      char v25 = type;
      char v34 = os_log_type_enabled(v24, type);
      if (v33)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v42 = "__nw_protocol_error";
          os_log_type_t v43 = 2082;
          uint64_t v44 = v33;
          _os_log_impl( &dword_181A5C000,  v24,  v25,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v33);
        if (v3) {
          goto LABEL_24;
        }
        return;
      }

      if (!v34) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "__nw_protocol_error";
      os_log_type_t v26 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      char v25 = type;
      if (!os_log_type_enabled(v24, type)) {
        goto LABEL_86;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v42 = "__nw_protocol_error";
      os_log_type_t v26 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v24, v25, v26, buf, 0xCu);
  }

    if (v30) {
      free(v30);
    }
    BOOL v10 = 0LL;
    goto LABEL_13;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v46 = "__nw_protocol_reset";
  os_log_type_t v26 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v43 = 0;
  if (__nwlog_fault(v26, &type, &v43))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v27 = (os_log_s *)__nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v46 = "__nw_protocol_reset";
        BOOL v29 = "%{public}s called with null protocol";
LABEL_84:
        _os_log_impl(&dword_181A5C000, v27, v28, v29, buf, 0xCu);
      }
    }

    else if (v43)
    {
      __int16 v37 = (char *)__nw_create_backtrace_string();
      os_log_type_t v27 = (os_log_s *)__nwlog_obj();
      os_log_type_t v28 = type;
      id v38 = os_log_type_enabled(v27, type);
      if (v37)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v46 = "__nw_protocol_reset";
          uint64_t v47 = 2082;
          uint64_t v48 = v37;
          _os_log_impl( &dword_181A5C000,  v27,  v28,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v37);
        goto LABEL_85;
      }

      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v46 = "__nw_protocol_reset";
        BOOL v29 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_84;
      }
    }

    else
    {
      os_log_type_t v27 = (os_log_s *)__nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v46 = "__nw_protocol_reset";
        BOOL v29 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_84;
      }
    }
  }

    if (v30) {
      free(v30);
    }
    BOOL v10 = 0LL;
    goto LABEL_13;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v46 = "__nw_protocol_waiting_for_output";
  os_log_type_t v26 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v43 = 0;
  if (__nwlog_fault(v26, &type, &v43))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v27 = (os_log_s *)__nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v46 = "__nw_protocol_waiting_for_output";
        BOOL v29 = "%{public}s called with null protocol";
LABEL_84:
        _os_log_impl(&dword_181A5C000, v27, v28, v29, buf, 0xCu);
      }
    }

    else if (v43)
    {
      __int16 v37 = (char *)__nw_create_backtrace_string();
      os_log_type_t v27 = (os_log_s *)__nwlog_obj();
      os_log_type_t v28 = type;
      id v38 = os_log_type_enabled(v27, type);
      if (v37)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v46 = "__nw_protocol_waiting_for_output";
          uint64_t v47 = 2082;
          uint64_t v48 = v37;
          _os_log_impl( &dword_181A5C000,  v27,  v28,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v37);
        goto LABEL_85;
      }

      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v46 = "__nw_protocol_waiting_for_output";
        BOOL v29 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_84;
      }
    }

    else
    {
      os_log_type_t v27 = (os_log_s *)__nwlog_obj();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v46 = "__nw_protocol_waiting_for_output";
        BOOL v29 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_84;
      }
    }
  }

    if (v30) {
      free(v30);
    }
LABEL_93:
    __nwlog_obj();
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "__nw_protocol_notify";
    BOOL v50 = (char *)_os_log_send_and_compose_impl();

    v64[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v60) = 0;
    if (__nwlog_fault(v50, v64, &v60))
    {
      if (v64[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v52 = v64[0];
        if (os_log_type_enabled(v51, v64[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "__nw_protocol_notify";
          _os_log_impl(&dword_181A5C000, v51, v52, "%{public}s called with null protocol", applier, 0xCu);
        }
      }

      else if ((_BYTE)v60)
      {
        v53 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v54 = v64[0];
        uint64_t v55 = os_log_type_enabled(v51, v64[0]);
        if (v53)
        {
          if (v55)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&void applier[4] = "__nw_protocol_notify";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = v53;
            _os_log_impl( &dword_181A5C000,  v51,  v54,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  applier,  0x16u);
          }

          free(v53);
          goto LABEL_109;
        }

        if (v55)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "__nw_protocol_notify";
          _os_log_impl(&dword_181A5C000, v51, v54, "%{public}s called with null protocol, no backtrace", applier, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v56 = v64[0];
        if (os_log_type_enabled(v51, v64[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "__nw_protocol_notify";
          _os_log_impl( &dword_181A5C000,  v51,  v56,  "%{public}s called with null protocol, backtrace limit exceeded",  applier,  0xCu);
        }
      }
    }

  if (v23) {
    free(v23);
  }
LABEL_17:
  if (v12 == &nw_protocol_ref_counted_handle)
  {
    nw::release_if_needed<nw_protocol *>((uint64_t *)&v55);
    if (handle != &nw_protocol_ref_counted_handle) {
      goto LABEL_19;
    }
  }

  else if (handle != &nw_protocol_ref_counted_handle)
  {
    goto LABEL_19;
  }

  nw::release_if_needed<nw_protocol *>((uint64_t *)v57);
LABEL_19:
  v8->preferred_ipv6_address = 0LL;
  if (a4 >= 0xFFFFFFFFFFFFFFFELL && (SBYTE5(v8->flow_in_connected) & 0x80000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v17 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136447234;
      int64_t v60 = "nw_protocol_implementation_report_connected";
      id v61 = 2082;
      id v62 = (nw_protocol_identifier *)((char *)&v8->flow_in_connected + 7);
      nw_endpoint_t v63 = 2080;
      id v64 = (nw_protocol *)" ";
      unsigned int v65 = 2048;
      id v66 = a2;
      uint64_t v67 = 2048;
      uint64_t v68 = a4;
      _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%sReporting connected with protocol: %p, flow: %llx",  buf,  0x34u);
    }
  }

  if (a4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    var13 = (void (*)(NWConcrete_nw_protocol_instance *, unint64_t))v8->parent_definition->extended_state->var13;
    if (var13) {
      var13(v8, a4);
    }
  }

  uint64_t v19 = SBYTE3(v8->flow_in_connected);
  if (v19 < 0)
  {
    BYTE3(v8->flow_in_connected) = v19 & 0x7F;
    var14 = (void (*)(NWConcrete_nw_protocol_instance *, void))v8->parent_definition->extended_state->var14;
    if (var14) {
      var14(v8, 0LL);
    }
  }

  nw_protocol_implementation_finalize_pending_frames(v8);
LABEL_31:
}

    if (v43) {
      free(v43);
    }
    goto LABEL_99;
  }

  if (!v6)
  {
    __nwlog_obj();
    __int16 v46 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v62 = "-[NWConcrete_nw_listener initWithParameters:multicastDescriptor:]";
    uint64_t v47 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    int v58 = 0;
    if (__nwlog_fault(v47, &type, &v58))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v49 = type;
        if (os_log_type_enabled(v48, type))
        {
          *(_DWORD *)buf = 136446210;
          id v62 = "-[NWConcrete_nw_listener initWithParameters:multicastDescriptor:]";
          _os_log_impl(&dword_181A5C000, v48, v49, "%{public}s called with null _parameters", buf, 0xCu);
        }
      }

      else if (v58)
      {
        v53 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v54 = type;
        uint64_t v55 = os_log_type_enabled(v48, type);
        if (v53)
        {
          if (v55)
          {
            *(_DWORD *)buf = 136446466;
            id v62 = "-[NWConcrete_nw_listener initWithParameters:multicastDescriptor:]";
            nw_endpoint_t v63 = 2082;
            id v64 = v53;
            _os_log_impl( &dword_181A5C000,  v48,  v54,  "%{public}s called with null _parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v53);
          goto LABEL_96;
        }

        if (v55)
        {
          *(_DWORD *)buf = 136446210;
          id v62 = "-[NWConcrete_nw_listener initWithParameters:multicastDescriptor:]";
          _os_log_impl(&dword_181A5C000, v48, v54, "%{public}s called with null _parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v57 = type;
        if (os_log_type_enabled(v48, type))
        {
          *(_DWORD *)buf = 136446210;
          id v62 = "-[NWConcrete_nw_listener initWithParameters:multicastDescriptor:]";
          _os_log_impl( &dword_181A5C000,  v48,  v57,  "%{public}s called with null _parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

        goto LABEL_92;
      }

      if (type == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        id v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v51 = buf[0];
        if (os_log_type_enabled(v41, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)nw_endpoint_t v63 = 136446210;
          *(void *)&v63[4] = "nw_connection_read_multiple";
          _os_log_impl( &dword_181A5C000,  v41,  v51,  "%{public}s called with null handler, backtrace limit exceeded",  v63,  0xCu);
        }

        goto LABEL_91;
      }

      id v45 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v48 = buf[0];
      v49 = os_log_type_enabled(v41, (os_log_type_t)buf[0]);
      if (!v45)
      {
        if (v49)
        {
          *(_DWORD *)nw_endpoint_t v63 = 136446210;
          *(void *)&v63[4] = "nw_connection_read_multiple";
          _os_log_impl(&dword_181A5C000, v41, v48, "%{public}s called with null handler, no backtrace", v63, 0xCu);
        }

        goto LABEL_91;
      }

      if (v49)
      {
        *(_DWORD *)nw_endpoint_t v63 = 136446466;
        *(void *)&v63[4] = "nw_connection_read_multiple";
        *(_WORD *)&v63[12] = 2082;
        *(void *)&v63[14] = v45;
        _os_log_impl( &dword_181A5C000,  v41,  v48,  "%{public}s called with null handler, dumping backtrace:%{public}s",  v63,  0x16u);
      }

      goto LABEL_79;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)nw_endpoint_t v63 = 136446210;
    *(void *)&v63[4] = "nw_connection_read_multiple";
    char v40 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v40, buf, &type))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        id v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __int16 v42 = buf[0];
        if (os_log_type_enabled(v41, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)nw_endpoint_t v63 = 136446210;
          *(void *)&v63[4] = "nw_connection_read_multiple";
          _os_log_impl(&dword_181A5C000, v41, v42, "%{public}s called with null connection", v63, 0xCu);
        }

        goto LABEL_91;
      }

      if (type == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        id v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v50 = buf[0];
        if (os_log_type_enabled(v41, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)nw_endpoint_t v63 = 136446210;
          *(void *)&v63[4] = "nw_connection_read_multiple";
          _os_log_impl( &dword_181A5C000,  v41,  v50,  "%{public}s called with null connection, backtrace limit exceeded",  v63,  0xCu);
        }

        goto LABEL_91;
      }

      id v45 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v46 = buf[0];
      uint64_t v47 = os_log_type_enabled(v41, (os_log_type_t)buf[0]);
      if (!v45)
      {
        if (v47)
        {
          *(_DWORD *)nw_endpoint_t v63 = 136446210;
          *(void *)&v63[4] = "nw_connection_read_multiple";
          _os_log_impl(&dword_181A5C000, v41, v46, "%{public}s called with null connection, no backtrace", v63, 0xCu);
        }

        goto LABEL_91;
      }

      if (v47)
      {
        *(_DWORD *)nw_endpoint_t v63 = 136446466;
        *(void *)&v63[4] = "nw_connection_read_multiple";
        *(_WORD *)&v63[12] = 2082;
        *(void *)&v63[14] = v45;
        _os_log_impl( &dword_181A5C000,  v41,  v46,  "%{public}s called with null connection, dumping backtrace:%{public}s",  v63,  0x16u);
      }

    goto LABEL_92;
  }

  if (v15)
  {
    if (!v12)
    {
      os_log_type_t v23 = "No original message provided";
      goto LABEL_21;
    }

    uint64_t v17 = (os_unfair_lock_s *)v12;
    __int16 v18 = v17;
    if (v17 == (os_unfair_lock_s *)&__block_literal_global_5_41854)
    {
      uint64_t v19 = v16;
      uint64_t v20 = v12;
      BOOL v21 = v13;
    }

    else
    {
      if (v17 == (os_unfair_lock_s *)&__block_literal_global_4
        || v17 == (os_unfair_lock_s *)&__block_literal_global_3_41839
        || v17 == (os_unfair_lock_s *)&__block_literal_global_41831)
      {

        os_log_type_t v23 = "Protocol does not support replies";
LABEL_21:
        os_log_type_t v26 = *((void *)v59 + 2);
        if (v26 && !nw_path_parameters_get_logging_disabled(*(void *)(v26 + 104)))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          os_log_type_t v27 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            os_log_type_t v28 = *((_DWORD *)v59 + 112);
            *(_DWORD *)buf = 136446722;
            unsigned int v65 = "nw_connection_send_reply";
            id v66 = 1024;
            *(_DWORD *)uint64_t v67 = v28;
            v67[2] = 2082;
            *(void *)&v67[3] = v23;
            _os_log_impl( &dword_181A5C000,  v27,  OS_LOG_TYPE_ERROR,  "%{public}s [C%u] %{public}s, sending error callback",  buf,  0x1Cu);
          }
        }

        BOOL v29 = *((_DWORD *)v59 + 48);
        v60[0] = MEMORY[0x1895F87A8];
        v60[1] = 3221225472LL;
        v60[2] = __nw_connection_send_reply_block_invoke;
        v60[3] = &unk_189BC8740;
        id v61 = v16;
        nw_connection_async_client_if_needed_with_override(v59, 0LL, v29, v60);

        goto LABEL_29;
      }

      uint64_t v19 = v16;
      uint64_t v20 = v12;
      BOOL v21 = v13;
      os_unfair_lock_lock(v17 + 28);
      os_log_type_t v22 = BYTE2(v18[29]._os_unfair_lock_opaque);
      os_unfair_lock_unlock(v18 + 28);

      if ((v22 & 0x40) == 0)
      {
        os_log_type_t v23 = "Protocol does not support replies";
        char v13 = v21;
LABEL_20:
        BOOL v12 = v20;
        uint64_t v16 = v19;
        goto LABEL_21;
      }
    }

    if (v14 == &__block_literal_global_4)
    {
      os_log_type_t v23 = "Cannot send replies on stream context";
      char v13 = v21;
      goto LABEL_20;
    }

    char v13 = v21;
    if (v14 == &__block_literal_global_5_41854)
    {
      os_log_type_t v23 = "Cannot send replies on new inbound message context";
      goto LABEL_20;
    }

    os_log_type_t v24 = (nw_content_context *)v14;
    char v25 = v24;
    BOOL v12 = v20;
    if (!v24
      || v24 == (nw_content_context *)&__block_literal_global_41831
      || v24 == (nw_content_context *)&__block_literal_global_3_41839)
    {
      uint64_t v16 = v19;
      os_log_type_t v30 = nw_content_context_create("Reply");

      repliable_metadata = nw_content_context_copy_first_repliable_metadata(v18);
      reply = (nw_protocol_metadata *)nw_protocol_metadata_create_reply(repliable_metadata);
      nw_content_context_set_metadata_for_protocol(v30, reply);
      if (v25 == (nw_content_context *)&__block_literal_global_3_41839) {
        nw_content_context_set_is_final(v30, 1);
      }
      char v25 = v30;
    }

    else
    {
      uint64_t v16 = v19;
    }

    os_log_type_t v33 = v25;
    if (v16 == &__block_literal_global_24170) {
      char v34 = nw_write_request_create_idempotent(v13, v25, v18, a5);
    }
    else {
      char v34 = nw_write_request_create(v13, v25, v18, a5, v59, v16);
    }
    BOOL v35 = v34;
    if (v34)
    {
      nw_connection_add_write_request(v59, v34);
LABEL_57:

      goto LABEL_29;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v36 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    unsigned int v65 = "nw_connection_send_reply";
    __int16 v37 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    id v62 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v38 = (os_log_s *)(id)gLogObj;
      uint64_t v39 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v65 = "nw_connection_send_reply";
        _os_log_impl(&dword_181A5C000, v38, v39, "%{public}s nw_write_request_create failed", buf, 0xCu);
      }
    }

    else
    {
      if (v62)
      {
        char v40 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __int16 v42 = type;
        os_log_type_t v43 = os_log_type_enabled(v41, type);
        if (v40)
        {
          if (v43)
          {
            *(_DWORD *)buf = 136446466;
            unsigned int v65 = "nw_connection_send_reply";
            id v66 = 2082;
            *(void *)uint64_t v67 = v40;
            _os_log_impl( &dword_181A5C000,  v41,  v42,  "%{public}s nw_write_request_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v40);
          if (!v37) {
            goto LABEL_57;
          }
          goto LABEL_56;
        }

        if (v43)
        {
          *(_DWORD *)buf = 136446210;
          unsigned int v65 = "nw_connection_send_reply";
          _os_log_impl(&dword_181A5C000, v41, v42, "%{public}s nw_write_request_create failed, no backtrace", buf, 0xCu);
        }

LABEL_55:
        if (!v37) {
          goto LABEL_57;
        }
LABEL_56:
        free(v37);
        goto LABEL_57;
      }

      __nwlog_obj();
      id v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v44 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v65 = "nw_connection_send_reply";
        _os_log_impl( &dword_181A5C000,  v38,  v44,  "%{public}s nw_write_request_create failed, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_55;
  }

  __nwlog_obj();
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  unsigned int v65 = "nw_connection_send_reply";
  __int16 v46 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  id v62 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v50 = type;
    if (os_log_type_enabled(v47, type))
    {
      *(_DWORD *)buf = 136446210;
      unsigned int v65 = "nw_connection_send_reply";
      _os_log_impl(&dword_181A5C000, v47, v50, "%{public}s called with null completion", buf, 0xCu);
    }

    goto LABEL_91;
  }

  if (!v62)
  {
    __nwlog_obj();
    uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    int v58 = type;
    if (os_log_type_enabled(v47, type))
    {
      *(_DWORD *)buf = 136446210;
      unsigned int v65 = "nw_connection_send_reply";
      _os_log_impl( &dword_181A5C000,  v47,  v58,  "%{public}s called with null completion, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_91;
  }

  uint64_t v54 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  uint64_t v55 = type;
  id v56 = os_log_type_enabled(v47, type);
  if (!v54)
  {
    if (v56)
    {
      *(_DWORD *)buf = 136446210;
      unsigned int v65 = "nw_connection_send_reply";
      _os_log_impl(&dword_181A5C000, v47, v55, "%{public}s called with null completion, no backtrace", buf, 0xCu);
    }

    goto LABEL_91;
  }

  if (v56)
  {
    *(_DWORD *)buf = 136446466;
    unsigned int v65 = "nw_connection_send_reply";
    id v66 = 2082;
    *(void *)uint64_t v67 = v54;
    _os_log_impl( &dword_181A5C000,  v47,  v55,  "%{public}s called with null completion, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v54);
  if (v46) {
    goto LABEL_93;
  }
LABEL_29:
}

    if (v43) {
      free(v43);
    }
    goto LABEL_14;
  }

  uint64_t v7 = v6;
  os_log_type_t v8 = v7;
  if (!v7)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v38 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_start_throughput_monitor_on_nw_queue";
    uint64_t v39 = (char *)_os_log_send_and_compose_impl();

    v56[0] = OS_LOG_TYPE_ERROR;
    v61[0] = 0;
    if (__nwlog_fault(v39, v56, v61))
    {
      if (v56[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v40 = (os_log_s *)(id)gLogObj;
        id v41 = v56[0];
        if (os_log_type_enabled(v40, v56[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_start_throughput_monitor_on_nw_queue";
          _os_log_impl(&dword_181A5C000, v40, v41, "%{public}s called with null connection", buf, 0xCu);
        }
      }

      else if (v61[0])
      {
        __int16 v46 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v40 = (os_log_s *)(id)gLogObj;
        uint64_t v47 = v56[0];
        uint64_t v48 = os_log_type_enabled(v40, v56[0]);
        if (v46)
        {
          if (v48)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_connection_start_throughput_monitor_on_nw_queue";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v46;
            _os_log_impl( &dword_181A5C000,  v40,  v47,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v46);
          goto LABEL_83;
        }

        if (v48)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_start_throughput_monitor_on_nw_queue";
          _os_log_impl(&dword_181A5C000, v40, v47, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v40 = (os_log_s *)(id)gLogObj;
        v52 = v56[0];
        if (os_log_type_enabled(v40, v56[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_start_throughput_monitor_on_nw_queue";
          _os_log_impl( &dword_181A5C000,  v40,  v52,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

      if (v37) {
        free(v37);
      }
      goto LABEL_21;
    }

    return 0LL;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  char v25 = (os_log_s *)gLogObj;
  if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
    return 0LL;
  }
  *(_DWORD *)buf = 136446466;
  *(void *)&uint8_t buf[4] = "nw_protocol_demux_get_input_frames";
  *(_WORD *)&buf[12] = 2080;
  *(void *)&buf[14] = handle + 90;
  _os_log_impl(&dword_181A5C000, v25, OS_LOG_TYPE_ERROR, "%{public}s %s No valid node found", buf, 0x16u);
  return 0LL;
}

  id v41 = *(_DWORD *)(v14 + 508);
  if (v41 != 5 && v103 != 0 && v13 != 0LL)
  {
    *(void *)os_log_type_t type = 0LL;
    v105 = (uint64_t)type;
    uint64_t v44 = *(void *)(a1[6] + 32LL);
    if ((*(unsigned int (**)(uint64_t))(*(void *)(v44 + 24) + 88LL))(v44))
    {
      is_metadata_complete = nw_frame_is_metadata_complete(a2);
      __int16 v46 = *(unsigned __int8 *)(a2 + 186) >> 7;
      v92[0] = MEMORY[0x1895F87A8];
      v92[1] = 0x40000000LL;
      BOOL v93 = ___ZL41nw_protocol_masque_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_123;
      os_log_type_t v94 = &__block_descriptor_tmp_124;
      os_log_type_t v100 = v103;
      uint64_t v47 = a1[6];
      id v95 = a1[5];
      id v96 = type;
      id v97 = v13;
      v98 = a2;
      v99 = v47;
      v101 = v46;
      os_log_type_t v102 = is_metadata_complete;
      uint64_t v48 = *(void *)type;
      do
      {
        if (!v48) {
          break;
        }
        v49 = *(void *)(v48 + 32);
        BOOL v50 = ((uint64_t (*)(void *))v93)(v92);
        uint64_t v48 = v49;
      }

      while ((v50 & 1) != 0);
      if (*(void *)type)
      {
        BOOL v51 = a1[5];
        if ((!v51 || (*(_BYTE *)(v51 + 529) & 1) == 0) && gLogDatapath)
        {
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
          }
          BOOL v70 = (os_log_s *)gprivacy_proxyLogObj;
          __int128 v71 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG);
          BOOL v51 = a1[5];
          if (v71)
          {
            id v72 = v51 == 0;
            if (v51) {
              uint64_t v73 = (const char *)(v51 + 531);
            }
            else {
              uint64_t v73 = "";
            }
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_protocol_masque_finalize_output_frames_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v73;
            if (v72) {
              uint64_t v74 = "";
            }
            else {
              uint64_t v74 = " ";
            }
            *(_WORD *)&buf[22] = 2080;
            id v118 = (uint64_t (*)(uint64_t, uint64_t))v74;
            LOWORD(v119) = 1024;
            *(_DWORD *)((char *)&v119 + 2) = v103;
            _os_log_impl( &dword_181A5C000,  v70,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sSending %u early bytes",  buf,  0x26u);
            BOOL v51 = a1[5];
          }
        }

        *(_DWORD *)(v51 + 527) |= 0x400000u;
        (*(void (**)(uint64_t, os_log_type_t *))(*(void *)(v44 + 24) + 96LL))(v44, type);
      }
    }

    else
    {
      v52 = a1[5];
      if (!v52 || (*(_BYTE *)(v52 + 529) & 1) == 0)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
        }
        v53 = (os_log_s *)gprivacy_proxyLogObj;
        uint64_t v54 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR);
        v52 = a1[5];
        if (v54)
        {
          uint64_t v55 = v52 == 0;
          if (v52) {
            id v56 = (const char *)(v52 + 531);
          }
          else {
            id v56 = "";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = v56;
          id v57 = " ";
          if (v55) {
            id v57 = "";
          }
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v57;
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v11_Block_object_dispose(va, 8) = v103;
          _os_log_impl( &dword_181A5C000,  v53,  OS_LOG_TYPE_ERROR,  "%{public}s%sUnable to send %u early bytes",  buf,  0x1Cu);
          v52 = a1[5];
        }
      }

      if ((*(_BYTE *)(v52 + 527) & 8) != 0) {
        nw_frame_finalize(a2);
      }
    }

    id v41 = *(_DWORD *)(a1[5] + 508LL);
  }

  if (v41 == 4)
  {
    os_log_type_t v11 = a2;
LABEL_16:
    nw_frame_finalize(v11);
  }

  return 1LL;
}

              free(v54);
              goto LABEL_92;
            }

            if (v65)
            {
              *(_DWORD *)buf = 136446210;
              uint64_t v75 = "nw_pac_resolver_create_with_script";
              _os_log_impl( &dword_181A5C000,  v55,  v64,  "%{public}s called with null logging_id_str, no backtrace",  buf,  0xCu);
            }

            goto LABEL_124;
          }
        }

        else
        {
          __nwlog_obj();
          BOOL v50 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          uint64_t v75 = "nw_pac_resolver_create_with_script";
          os_log_type_t v43 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          id v72 = 0;
          if (__nwlog_fault(v43, &type, &v72))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              BOOL v51 = type;
              if (os_log_type_enabled(v44, type))
              {
                *(_DWORD *)buf = 136446210;
                uint64_t v75 = "nw_pac_resolver_create_with_script";
                _os_log_impl(&dword_181A5C000, v44, v51, "%{public}s called with null context", buf, 0xCu);
              }

              goto LABEL_109;
            }

            if (!v72)
            {
              __nwlog_obj();
              uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              uint64_t v69 = type;
              if (os_log_type_enabled(v44, type))
              {
                *(_DWORD *)buf = 136446210;
                uint64_t v75 = "nw_pac_resolver_create_with_script";
                _os_log_impl( &dword_181A5C000,  v44,  v69,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
              }

              goto LABEL_109;
            }

            uint64_t v54 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            uint64_t v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            id v62 = type;
            nw_endpoint_t v63 = os_log_type_enabled(v55, type);
            if (v54)
            {
              if (v63)
              {
                *(_DWORD *)buf = 136446466;
                uint64_t v75 = "nw_pac_resolver_create_with_script";
                v76 = 2082;
                uint64_t v77 = v54;
                _os_log_impl( &dword_181A5C000,  v55,  v62,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              goto LABEL_91;
            }

            if (v63)
            {
              *(_DWORD *)buf = 136446210;
              uint64_t v75 = "nw_pac_resolver_create_with_script";
              _os_log_impl(&dword_181A5C000, v55, v62, "%{public}s called with null context, no backtrace", buf, 0xCu);
            }

      goto LABEL_92;
    }

    if (!v73)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v44 = (os_log_s *)(id)gLogObj;
      id v62 = type;
      if (os_log_type_enabled(v44, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v77 = "-[NWConcrete_nw_socks5_server initWithParameters:clientQueue:]";
        _os_log_impl( &dword_181A5C000,  v44,  v62,  "%{public}s nw_listener_create failed, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_91;
    }

    v49 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v44 = (os_log_s *)(id)gLogObj;
    id v57 = type;
    int v58 = os_log_type_enabled(v44, type);
    if (!v49)
    {
      if (v58)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v77 = "-[NWConcrete_nw_socks5_server initWithParameters:clientQueue:]";
        _os_log_impl(&dword_181A5C000, v44, v57, "%{public}s nw_listener_create failed, no backtrace", buf, 0xCu);
      }

      goto LABEL_91;
    }

    if (v58)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v77 = "-[NWConcrete_nw_socks5_server initWithParameters:clientQueue:]";
      uint64_t v78 = 2082;
      v79 = v49;
      _os_log_impl( &dword_181A5C000,  v44,  v57,  "%{public}s nw_listener_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
    }

      if (v36) {
        free(v36);
      }
      return 0LL;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    uint64_t v67 = "nw_frame_split";
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    id v64 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v21 = (os_log_s *)gLogObj;
      os_log_type_t v22 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_107;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v67 = "nw_frame_split";
      os_log_type_t v23 = "%{public}s split_offset is beyond the unclaimed region of the frame";
      goto LABEL_66;
    }

    if (!v64)
    {
      BOOL v21 = (os_log_s *)__nwlog_obj();
      os_log_type_t v22 = type;
      if (!os_log_type_enabled(v21, type)) {
        goto LABEL_107;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v67 = "nw_frame_split";
      os_log_type_t v23 = "%{public}s split_offset is beyond the unclaimed region of the frame, backtrace limit exceeded";
      goto LABEL_66;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v21 = (os_log_s *)__nwlog_obj();
    os_log_type_t v22 = type;
    char v25 = os_log_type_enabled(v21, type);
    if (!backtrace_string)
    {
      if (!v25) {
        goto LABEL_107;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v67 = "nw_frame_split";
      os_log_type_t v23 = "%{public}s split_offset is beyond the unclaimed region of the frame, no backtrace";
      goto LABEL_66;
    }

    if (!v25) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v67 = "nw_frame_split";
    uint64_t v68 = 2082;
    uint64_t v69 = (uint64_t)backtrace_string;
    os_log_type_t v26 = "%{public}s split_offset is beyond the unclaimed region of the frame, dumping backtrace:%{public}s";
LABEL_36:
    os_log_type_t v27 = v21;
    os_log_type_t v28 = v22;
    BOOL v29 = 22;
LABEL_37:
    _os_log_impl(&dword_181A5C000, v27, v28, v26, buf, v29);
    goto LABEL_38;
  }

  BOOL v12 = nw_frame_create(0, 0LL, 0, (uint64_t)__nw_frame_empty_finalizer, 16435934LL);
  if (!v12)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v67 = "__nw_frame_create_empty_frame_with_original";
    uint64_t v55 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    id v64 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v56 = (os_log_s *)__nwlog_obj();
      id v57 = type;
      if (!os_log_type_enabled(v56, type)) {
        goto LABEL_149;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v67 = "__nw_frame_create_empty_frame_with_original";
      int v58 = "%{public}s called with null empty_frame";
    }

    else if (v64)
    {
      int64_t v60 = (char *)__nw_create_backtrace_string();
      id v56 = (os_log_s *)__nwlog_obj();
      id v57 = type;
      id v61 = os_log_type_enabled(v56, type);
      if (v60)
      {
        if (v61)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v67 = "__nw_frame_create_empty_frame_with_original";
          uint64_t v68 = 2082;
          uint64_t v69 = (uint64_t)v60;
          _os_log_impl( &dword_181A5C000,  v56,  v57,  "%{public}s called with null empty_frame, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v60);
        goto LABEL_149;
      }

      if (!v61)
      {
LABEL_149:
        if (v55) {
          free(v55);
        }
        goto LABEL_19;
      }

      *(_DWORD *)buf = 136446210;
      uint64_t v67 = "__nw_frame_create_empty_frame_with_original";
      int v58 = "%{public}s called with null empty_frame, no backtrace";
    }

    else
    {
      id v56 = (os_log_s *)__nwlog_obj();
      id v57 = type;
      if (!os_log_type_enabled(v56, type)) {
        goto LABEL_149;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v67 = "__nw_frame_create_empty_frame_with_original";
      int v58 = "%{public}s called with null empty_frame, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v56, v57, v58, buf, 0xCu);
    goto LABEL_149;
  }

  nw_frame_inherit_metadata(v3, v12, 0);
  if (gLogDatapath)
  {
    id v59 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v67 = "__nw_frame_create_empty_frame_with_original";
      uint64_t v68 = 2048;
      uint64_t v69 = v12;
      BOOL v70 = 2048;
      *(void *)__int128 v71 = v3;
      _os_log_impl( &dword_181A5C000,  v59,  OS_LOG_TYPE_DEBUG,  "%{public}s created empty frame %p from original frame %p",  buf,  0x20u);
    }
  }

        if (v56) {
          free(v56);
        }
        goto LABEL_93;
      }

      __nwlog_obj();
      unsigned int v65 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v87 = "nw_service_connector_start_block_invoke_2";
      BOOL v31 = (char *)_os_log_send_and_compose_impl();

      v85 = OS_LOG_TYPE_ERROR;
      v79 = 0;
      if (v85 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v66 = v85;
        if (os_log_type_enabled(v32, v85))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v87 = "nw_service_connector_start_block_invoke";
          _os_log_impl(&dword_181A5C000, v32, v66, "%{public}s nw_parameters_create failed", buf, 0xCu);
        }
      }

      else if (v79)
      {
        uint64_t v68 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v69 = v85;
        BOOL v70 = os_log_type_enabled(v32, v85);
        if (v68)
        {
          if (v70)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v87 = "nw_service_connector_start_block_invoke";
            id v88 = 2082;
            v89 = v68;
            _os_log_impl( &dword_181A5C000,  v32,  v69,  "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v68);
          if (!v31) {
            goto LABEL_102;
          }
          goto LABEL_101;
        }

        if (v70)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v87 = "nw_service_connector_start_block_invoke";
          _os_log_impl(&dword_181A5C000, v32, v69, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v72 = v85;
        if (os_log_type_enabled(v32, v85))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v87 = "nw_service_connector_start_block_invoke";
          _os_log_impl( &dword_181A5C000,  v32,  v72,  "%{public}s nw_parameters_create failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v30 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v87 = "nw_service_connector_start_block_invoke";
      BOOL v31 = (char *)_os_log_send_and_compose_impl();

      v85 = OS_LOG_TYPE_ERROR;
      v79 = 0;
      if (v85 == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v32 = (os_log_s *)(id)gLogObj;
        os_log_type_t v33 = v85;
        if (os_log_type_enabled(v32, v85))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v87 = "nw_service_connector_start_block_invoke";
          _os_log_impl(&dword_181A5C000, v32, v33, "%{public}s nw_endpoint_create_address failed", buf, 0xCu);
        }
      }

      else if (v79)
      {
        id v59 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        int64_t v60 = v85;
        id v61 = os_log_type_enabled(v32, v85);
        if (v59)
        {
          if (v61)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v87 = "nw_service_connector_start_block_invoke";
            id v88 = 2082;
            v89 = v59;
            _os_log_impl( &dword_181A5C000,  v32,  v60,  "%{public}s nw_endpoint_create_address failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v59);
          if (!v31) {
            goto LABEL_102;
          }
          goto LABEL_101;
        }

        if (v61)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v87 = "nw_service_connector_start_block_invoke";
          _os_log_impl( &dword_181A5C000,  v32,  v60,  "%{public}s nw_endpoint_create_address failed, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v67 = v85;
        if (os_log_type_enabled(v32, v85))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v87 = "nw_service_connector_start_block_invoke";
          _os_log_impl( &dword_181A5C000,  v32,  v67,  "%{public}s nw_endpoint_create_address failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

LABEL_100:
    if (!v31) {
      goto LABEL_102;
    }
LABEL_101:
    free(v31);
    goto LABEL_102;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  unint64_t v3 = (id)gLogObj;
  id v4 = *(void **)(a1 + 32);
  *(_DWORD *)buf = 136446466;
  os_log_type_t v87 = "nw_service_connector_start_block_invoke";
  id v88 = 2114;
  v89 = v4;
  id v5 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v85 = OS_LOG_TYPE_DEFAULT;
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v6 = (os_log_s *)(id)gLogObj;
    uint64_t v7 = type[0];
    if (os_log_type_enabled(v6, type[0]))
    {
      os_log_type_t v8 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      os_log_type_t v87 = "nw_service_connector_start_block_invoke";
      id v88 = 2114;
      v89 = v8;
      _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s %{public}@ already cancelled", buf, 0x16u);
    }

LABEL_92:
      uint64_t v44 = 0LL;
      goto LABEL_93;
    }

    if (v50)
    {
      *(_DWORD *)buf = 136447234;
      v91 = "nw_service_connector_verify_read_succeeded";
      nw_endpoint_t v92 = 2114;
      BOOL v93 = v15;
      os_log_type_t v94 = 2082;
      *(void *)id v95 = a8;
      *(_WORD *)&v95[8] = 2114;
      *(void *)&v95[10] = v16;
      *(_WORD *)&v95[18] = 1024;
      *(_DWORD *)&v95[20] = v21;
      _os_log_impl( &dword_181A5C000,  v49,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}@ failed %{public}s read reply on %{public}@ %{darwin.errno}d",  buf,  0x30u);
    }

    switch(v21)
    {
      case ' ':
      case '1':
      case '6':
      case '9':
      case '<':
      case 'A':
      case 'Y':
        goto LABEL_85;
      case '!':
      case '""':
      case '#':
      case '$':
      case '%':
      case '&':
      case '\'':
      case '(':
      case ')':
      case '*':
      case '+':
      case ',':
      case '-':
      case '.':
      case '/':
      case '0':
      case '2':
      case '3':
      case '4':
      case '5':
      case '7':
      case '8':
      case ':':
      case ';':
      case '=':
      case '>':
      case '?':
      case '@':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Z':
      case '[':
      case '\\':
      case ']':
      case '^':
      case '_':
        goto LABEL_101;
      default:
        if (v21 == 5)
        {
LABEL_85:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v52 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            v91 = "nw_service_connector_verify_read_succeeded";
            nw_endpoint_t v92 = 2082;
            BOOL v93 = a8;
            os_log_type_t v94 = 1024;
            *(_DWORD *)id v95 = v21;
            _os_log_impl( &dword_181A5C000,  v52,  OS_LOG_TYPE_ERROR,  "%{public}s Failed %{public}s read of reply (did not find request) %{darwin.errno}d",  buf,  0x1Cu);
          }

          goto LABEL_88;
        }

    free(v59);
    goto LABEL_92;
  }

  *((_BYTE *)v44 + 616) &= ~1u;
  __int16 v46 = _Block_copy(*(const void **)(a1 + 64));
  uint64_t v47 = (void *)*((void *)v45 + 74);
  *((void *)v45 + 74) = v46;

  uint64_t v48 = (void **)(v45 + 8);
  objc_storeStrong((id *)v45 + 1, *(id *)(a1 + 56));
  v49 = *(void **)(a1 + 48);
  if (v49)
  {
    BOOL v50 = v49;
    BOOL v51 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v50,  0,  0);

    v52 = (void *)*((void *)v45 + 2);
    *((void *)v45 + 2) = v51;
  }

  if (!string_ptr)
  {
    __nwlog_obj();
    v85 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v85, OS_LOG_TYPE_ERROR);
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "_strict_strlcat";
    v86 = (void *)_os_log_send_and_compose_impl();

    free(v86);
  }

  v53 = v45 + 24;
  uint64_t v54 = 436LL;
  uint64_t v55 = v45 + 24;
  while (*v55)
  {
    ++v55;
    if (!--v54)
    {
      if (!string_ptr)
      {
        __nwlog_obj();
        id v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_enabled(v56, OS_LOG_TYPE_ERROR);
        LODWORD(buf[0]) = 136446210;
        *(void *)((char *)buf + 4) = "_strict_strlcpy";
        id v57 = (void *)_os_log_send_and_compose_impl();

        free(v57);
      }

    free((void *)browser_key_for);
    goto LABEL_92;
  }

  if (v6)
  {
LABEL_93:
    if (!nw_parameters_get_logging_disabled(*((void *)v5 + 5)))
    {
      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
      }
      id v57 = (id)gbrowserLogObj;
      int v58 = *((_DWORD *)v5 + 48);
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_browser_remove_result_locked";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v58;
      id v59 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      id v108 = 0;
      if (!__nwlog_fault(v59, &type, &v108))
      {
LABEL_178:
        if (v59)
        {
LABEL_179:
          v49 = (char *)v59;
          goto LABEL_180;
        }

              __int16 v46 = *(const char **)(v6 + 16);
              if (!v46) {
                __int16 v46 = "invalid";
              }
LABEL_93:
              *(_DWORD *)buf = 136446466;
              id v64 = "nw_protocol_http3_stream_start_datagram_flow";
              unsigned int v65 = 2082;
              id v66 = (void *)v46;
              uint64_t v47 = (char *)_os_log_send_and_compose_impl();
              os_log_type_t type = OS_LOG_TYPE_ERROR;
              id v61 = 0;
              if (type == OS_LOG_TYPE_FAULT)
              {
                uint64_t v48 = (os_log_s *)__nwlog_obj();
                v49 = type;
                if (!os_log_type_enabled(v48, type)) {
                  goto LABEL_114;
                }
                BOOL v50 = "invalid";
                if (v6 && *(void *)(v6 + 16)) {
                  BOOL v50 = *(const char **)(v6 + 16);
                }
                *(_DWORD *)buf = 136446466;
                id v64 = "nw_protocol_http3_stream_start_datagram_flow";
                unsigned int v65 = 2082;
                id v66 = (void *)v50;
                BOOL v51 = "%{public}s protocol %{public}s has invalid connect callback";
              }

              else
              {
                if (v61)
                {
                  id v59 = v23;
                  v52 = (char *)__nw_create_backtrace_string();
                  v53 = (os_log_s *)__nwlog_obj();
                  uint64_t v54 = type;
                  uint64_t v55 = os_log_type_enabled(v53, type);
                  if (v52)
                  {
                    if (v55)
                    {
                      id v56 = "invalid";
                      if (v6 && *(void *)(v6 + 16)) {
                        id v56 = *(const char **)(v6 + 16);
                      }
                      *(_DWORD *)buf = 136446722;
                      id v64 = "nw_protocol_http3_stream_start_datagram_flow";
                      unsigned int v65 = 2082;
                      id v66 = (void *)v56;
                      uint64_t v67 = 2082;
                      uint64_t v68 = v52;
                      _os_log_impl( &dword_181A5C000,  v53,  v54,  "%{public}s protocol %{public}s has invalid connect callback, dumping backtrace:%{public}s",  buf,  0x20u);
                    }

                    free(v52);
                    os_log_type_t v23 = v59;
                  }

                  else
                  {
                    os_log_type_t v23 = v59;
                    if (v55)
                    {
                      int v58 = "invalid";
                      if (v6 && *(void *)(v6 + 16)) {
                        int v58 = *(const char **)(v6 + 16);
                      }
                      *(_DWORD *)buf = 136446466;
                      id v64 = "nw_protocol_http3_stream_start_datagram_flow";
                      unsigned int v65 = 2082;
                      id v66 = (void *)v58;
                      _os_log_impl( &dword_181A5C000,  v53,  v54,  "%{public}s protocol %{public}s has invalid connect callback, no backtrace",  buf,  0x16u);
                      os_log_type_t v23 = v59;
                    }
                  }

  uint64_t v44 = 0;
  id v41 = *((unsigned __int8 *)msg_control + 12);
  output_handler_context = (uint64_t)a1[5].callbacks;
  if (output_handler_context) {
    goto LABEL_76;
  }
LABEL_72:
  BOOL v50 = (void *)v40;
  output_handler_context = nw_frame_create(0, v40, (int)v10, (uint64_t)nw_socket_frame_input_finalizer, v165);
  if (output_handler_context)
  {
LABEL_80:
    nw_frame_set_buffer_used_malloc(output_handler_context, 1);
    if (v44) {
      *(_BYTE *)(output_handler_context + 186) = *(_BYTE *)(output_handler_context + 186) & 0xFC | v44 & 3;
    }
    BOOL v12 = v162;
    if (v42)
    {
      v53 = *(_WORD *)(output_handler_context + 204) & 0xFFEF | (*(unsigned __int8 *)(output_handler_context + 206) << 16);
      *(_WORD *)(output_handler_context + 204) &= ~0x10u;
      *(_BYTE *)(output_handler_context + 206) = BYTE2(v53);
      *(void *)(output_handler_context + 152) = v42;
    }

    os_log_type_t v9 = (char *)v165;
    if (v41) {
      *(_BYTE *)(output_handler_context + 185) = v41;
    }
    goto LABEL_86;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_socket_get_input_frames";
  v83 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(type) = 16;
  os_log_type_t v169 = 0;
  nw_endpoint_t v84 = __nwlog_fault(v83, &type, &v169);
  os_log_type_t v9 = (char *)v165;
  LODWORD(v10) = v27;
  if (!v84) {
    goto LABEL_324;
  }
  if (type != 17)
  {
    if (v169)
    {
      __int16 v150 = (char *)__nw_create_backtrace_string();
      v85 = (os_log_s *)__nwlog_obj();
      v86 = type;
      id v151 = os_log_type_enabled(v85, (os_log_type_t)type);
      if (v150)
      {
        if (v151)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_socket_get_input_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&v171 = v150;
          _os_log_impl( &dword_181A5C000,  v85,  v86,  "%{public}s nw_frame_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v150);
        goto LABEL_324;
      }

      if (!v151) {
        goto LABEL_324;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_socket_get_input_frames";
      os_log_type_t v87 = "%{public}s nw_frame_create failed, no backtrace";
    }

    else
    {
      v85 = (os_log_s *)__nwlog_obj();
      v86 = type;
      if (!os_log_type_enabled(v85, (os_log_type_t)type)) {
        goto LABEL_324;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_socket_get_input_frames";
      os_log_type_t v87 = "%{public}s nw_frame_create failed, backtrace limit exceeded";
    }

  if (v40) {
    free(v40);
  }
  __int16 v37 = 0LL;
LABEL_68:

  return v37;
}

  if (v40) {
    free(v40);
  }
  __int16 v37 = 0LL;
LABEL_68:

  return v37;
}

  __break(1u);
  return result;
}

    if (v39) {
      free(v39);
    }
    BOOL v10 = 0LL;
    goto LABEL_43;
  }

  nw_endpoint_handler_initialize_association(v5);
  nw_endpoint_flow_initialize_protocol(v5, (uint64_t)v7 + 376, *((_BYTE *)v7 + 32) & 1);
  if (!a2)
  {
    BOOL v21 = v5;
    os_unfair_lock_lock(&v21->lock);
    os_log_type_t v22 = v21->current_path;
    os_unfair_lock_unlock(&v21->lock);

    os_log_type_t v23 = v21;
    os_log_type_t v24 = v23->parameters;

    if (nw_endpoint_flow_should_add_filter(v24, v22))
    {
      Helper_x8__ne_filter_protocol_identifier = gotLoadHelper_x8__ne_filter_protocol_identifier(v25);
      if (*(void *)(v27 + 648)) {
        inited = ne_filter_protocol_identifier_delayInitStub(Helper_x8__ne_filter_protocol_identifier);
      }
      else {
        inited = 0LL;
      }
      BOOL v31 = inited != 0;
      if ((*((_DWORD *)v7 + 225) & 0x80000000) == 0) {
        goto LABEL_40;
      }
    }

    else
    {
      BOOL v31 = 1;
      if ((*((_DWORD *)v7 + 225) & 0x80000000) == 0) {
        goto LABEL_40;
      }
    }

    if (v31 && v22 && nw_path_uses_nexus_internal(v22, 0))
    {
      os_log_type_t v33 = *((unsigned __int8 *)v7 + 34);
      *((_BYTE *)v7 + 33) = ~(32 * v33) & 0x40 | *((_BYTE *)v7 + 33) & 0xBF;
      if ((~(32 * v33) & 0x40) != 0)
      {
        char v34 = nw_endpoint_flow_setup_channel(v23);
LABEL_42:
        BOOL v10 = v34;

        goto LABEL_43;
      }

void sub_181B0B69C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_path_copy_scoped_interface(void *a1)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v22 = "nw_path_copy_scoped_interface";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v12, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_path_copy_scoped_interface";
          _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null path", buf, 0xCu);
        }
      }

      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        BOOL v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v22 = "nw_path_copy_scoped_interface";
            __int16 v23 = 2082;
            os_log_type_t v24 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_30;
        }

        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_path_copy_scoped_interface";
          _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_path_copy_scoped_interface";
          _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

uint64_t nw_path_get_dns_service_id(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  unint64_t v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    int v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_get_dns_service_id";
    id v9 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v9, type, &v18))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type[0];
        if (os_log_type_enabled(v10, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_get_dns_service_id";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null path", buf, 0xCu);
        }
      }

      else if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type[0];
        BOOL v14 = os_log_type_enabled(v10, type[0]);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_get_dns_service_id";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_26;
        }

        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_get_dns_service_id";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type[0];
        if (os_log_type_enabled(v10, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_get_dns_service_id";
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181B0BD00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_has_unsatisfied_route(void *a1)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_path_has_unsatisfied_route";
    int v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v8, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          char v19 = "nw_path_has_unsatisfied_route";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null path", buf, 0xCu);
        }
      }

      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            char v19 = "nw_path_has_unsatisfied_route";
            __int16 v20 = 2082;
            BOOL v21 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }

        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          char v19 = "nw_path_has_unsatisfied_route";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          char v19 = "nw_path_has_unsatisfied_route";
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

BOOL nw_path_has_ipv4(nw_path_t path)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = path;
  BOOL v2 = v1;
  if (v1)
  {
    BOOL v3 = (v1[473] >> 6) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_path_has_ipv4";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_has_ipv4";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_path_has_ipv4";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_has_ipv4";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_has_ipv4";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

BOOL nw_path_has_ipv6(nw_path_t path)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = path;
  BOOL v2 = v1;
  if (v1)
  {
    BOOL v3 = v1[473] < 0;
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_path_has_ipv6";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_has_ipv6";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_path_has_ipv6";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_has_ipv6";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_path_has_ipv6";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

void nw_path_enumerate_resolver_configs(void *a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = MEMORY[0x1895F87A8];
    *(void *)buf = MEMORY[0x1895F87A8];
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&buf[16] = ___ZL18nw_path_update_dnsP18NWConcrete_nw_path_block_invoke;
    uint64_t v22 = &unk_189BC93A0;
    id v7 = v5;
    id v23 = v7;
    os_unfair_lock_lock((os_unfair_lock_t)v7 + 2);
    ___ZL18nw_path_update_dnsP18NWConcrete_nw_path_block_invoke((uint64_t)buf);
    os_unfair_lock_unlock((os_unfair_lock_t)v7 + 2);

    os_log_type_t v8 = (unsigned __int8 *)*((void *)v7 + 23);
    v17[0] = v6;
    v17[1] = 3221225472LL;
    v17[2] = __nw_path_enumerate_resolver_configs_block_invoke;
    v17[3] = &unk_189BC8628;
    id v18 = v4;
    nw_array_apply(v8, (uint64_t)v17);

    goto LABEL_3;
  }

  __nwlog_obj();
  id v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_path_enumerate_resolver_configs";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v10, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_enumerate_resolver_configs";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_enumerate_resolver_configs";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_enumerate_resolver_configs";
        _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_enumerate_resolver_configs";
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181B0C850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_path_enumerate_resolver_configs_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_181B0C8F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_resolver_config_get_class(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    int v20 = 0;
    *(void *)&buf[16] = 0x2020000000LL;
    v14[0] = MEMORY[0x1895F87A8];
    v14[1] = 3221225472LL;
    v14[2] = __nw_resolver_config_get_class_block_invoke;
    v14[3] = &unk_189BC9210;
    os_log_type_t v16 = buf;
    BOOL v15 = (os_unfair_lock_s *)v1;
    id v3 = v15 + 22;
    os_unfair_lock_lock(v15 + 22);
    __nw_resolver_config_get_class_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v3);
    uint64_t v4 = *(unsigned int *)(*(void *)&buf[8] + 24LL);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_resolver_config_get_class";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_class";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_config_get_class";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_class";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_resolver_config_get_class";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181B0CC1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_resolver_config_get_class_block_invoke(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 8LL);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = xpc_dictionary_get_int64(v2, "Class");
}

void sub_181B0CC98( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t nw_resolver_set_update_handler(void *a1, void *a2, void *a3)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  id v6 = a1;
  id v7 = a2;
  id v8 = a3;
  os_log_type_t v9 = v8;
  if (v6)
  {
    if (v8)
    {
      os_unfair_lock_lock((os_unfair_lock_t)v6 + 3);
      if (*((void *)v6 + 12))
      {
        os_unfair_lock_unlock((os_unfair_lock_t)v6 + 3);
        uint64_t v10 = 0LL;
      }

      else
      {
        os_log_type_t v11 = _Block_copy(v9);
        BOOL v12 = (void *)*((void *)v6 + 12);
        *((void *)v6 + 12) = v11;

        objc_storeStrong((id *)v6 + 14, a2);
        *((_WORD *)v6 + 44) = 0;
        objc_storeStrong((id *)v6 + 27, a1);
        os_unfair_lock_unlock((os_unfair_lock_t)v6 + 3);
        os_log_type_t v13 = (void *)*((void *)v6 + 4);
        v28[0] = MEMORY[0x1895F87A8];
        v28[1] = 3221225472LL;
        v28[2] = __nw_resolver_set_update_handler_block_invoke;
        v28[3] = &unk_189BC93A0;
        id v29 = v6;
        nw_queue_context_async_if_needed(v13, v28);

        uint64_t v10 = 1LL;
      }

      goto LABEL_6;
    }

    __nwlog_obj();
    char v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v33 = "nw_resolver_set_update_handler";
    os_log_type_t v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (__nwlog_fault(v16, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v33 = "nw_resolver_set_update_handler";
          _os_log_impl(&dword_181A5C000, v17, v20, "%{public}s called with null handler", buf, 0xCu);
        }

void sub_181B0D21C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_resolver_set_update_handler_block_invoke(uint64_t a1)
{
  uint64_t v101 = *MEMORY[0x1895F89C0];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12LL));
  uint64_t v2 = *(void *)(a1 + 32);
  if ((*(_BYTE *)(v2 + 347) & 0x10) != 0 && (*(_BYTE *)(v2 + 346) & 0x20) == 0)
  {
    if (*(_BYTE *)(v2 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      id v3 = (os_log_s *)(id)gconnectionLogObj;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_11;
      }
      uint64_t v4 = *(void *)(a1 + 32) + 256LL;
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_resolver_set_update_handler_block_invoke";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v4;
      id v5 = "%{public}s [C%{public}s] started";
      id v6 = v3;
      uint32_t v7 = 22;
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v3 = (os_log_s *)(id)gLogObj;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
LABEL_11:

        uint64_t v2 = *(void *)(a1 + 32);
        goto LABEL_12;
      }

      int v8 = *(_DWORD *)(*(void *)(a1 + 32) + 340LL);
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_resolver_set_update_handler_block_invoke";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v8;
      id v5 = "%{public}s [R%u] started";
      id v6 = v3;
      uint32_t v7 = 18;
    }

    _os_log_impl(&dword_181A5C000, v6, OS_LOG_TYPE_DEFAULT, v5, buf, v7);
    goto LABEL_11;
  }

LABEL_110:
            uint64_t v53 = *(void *)(a1 + 32);
            goto LABEL_111;
          }

          char v57 = *(_BYTE *)(v53 + 346);
        }

        else
        {
          char v57 = *(_BYTE *)(v53 + 346);
          if (((v57 & 0x40) == 0 || !*(_BYTE *)(*(void *)&buf[8] + 24LL))
            && ((*(_BYTE *)(v53 + 346) & 0x80) == 0 || !*(_BYTE *)(*(void *)&v99[8] + 24LL)))
          {
            goto LABEL_112;
          }
        }

        if ((v57 & 0x20) != 0)
        {
LABEL_111:
          objc_storeStrong((id *)(v53 + 144), *v48);
          *(_BYTE *)(*(void *)(a1 + 32) + 346LL) |= 2u;
          nw_resolver_update_status_locked(*(void **)(a1 + 32), 0LL);
          int v29 = 1;
LABEL_112:

          _Block_object_dispose(v99, 8);
          _Block_object_dispose(buf, 8);
          goto LABEL_113;
        }

        if (*(_BYTE *)(v53 + 256))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          int v58 = (os_log_s *)(id)gconnectionLogObj;
          if (!os_log_type_enabled(v58, OS_LOG_TYPE_INFO)) {
            goto LABEL_110;
          }
          uint64_t v59 = *(void *)(a1 + 32) + 256LL;
          id v60 = *v48;
          *(_DWORD *)v98 = 136446722;
          *(void *)&v98[4] = "nw_resolver_set_update_handler_block_invoke";
          *(_WORD *)&v98[12] = 2082;
          *(void *)&v98[14] = v59;
          *(_WORD *)&v98[22] = 2112;
          *(void *)&v98[24] = v60;
          id v61 = "%{public}s [C%{public}s] found cached endpoints %@";
          id v62 = v58;
          uint32_t v63 = 32;
          goto LABEL_109;
        }

        __nwlog_obj();
        int v58 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
        {
          int v64 = *(_DWORD *)(*(void *)(a1 + 32) + 340LL);
          id v65 = *v48;
          *(_DWORD *)v98 = 136446722;
          *(void *)&v98[4] = "nw_resolver_set_update_handler_block_invoke";
          *(_WORD *)&v98[12] = 1024;
          *(_DWORD *)&v98[14] = v64;
          *(_WORD *)&v98[18] = 2112;
          *(void *)&v98[20] = v65;
          id v61 = "%{public}s [R%u] found cached endpoints %@";
          id v62 = v58;
          uint32_t v63 = 28;
LABEL_109:
          _os_log_impl(&dword_181A5C000, v62, OS_LOG_TYPE_INFO, v61, v98, v63);
          goto LABEL_110;
        }

        goto LABEL_110;
      }
    }
  }

  if (v49) {
    free(v49);
  }
LABEL_18:
  BOOL v23 = *(void *)(v3 + 32);
  os_log_type_t v24 = *(void *)(v23 + 100);
  if (!v24 || *(void *)(v24 + 24) == *(void *)(v24 + 16))
  {
    BOOL v26 = *(void *)(v23 + 116);
    if (v26) {
      BOOL v25 = *(void *)(v26 + 24) != *(void *)(v26 + 16);
    }
    else {
      BOOL v25 = 0LL;
    }
  }

  else
  {
    BOOL v25 = 1LL;
  }

  return v25;
}

  if (v34) {
    free(v34);
  }
  return 0LL;
}

  if (v73) {
    free(v73);
  }
LABEL_25:
}

    if (v54) {
      free(v54);
    }
    goto LABEL_25;
  }

  if ((v17[346] & 0x20) == 0)
  {
    if (v17[256])
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      id v19 = (os_log_s *)(id)gconnectionLogObj;
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_11;
      }
      *(_DWORD *)buf = 136448514;
      *(void *)&uint8_t buf[4] = "nw_resolver_srv_resolve_callback";
      uint64_t v82 = 2082;
      *(void *)unsigned int v83 = v18 + 256;
      *(_WORD *)&v83[8] = 1024;
      *(_DWORD *)&v83[10] = a2;
      *(_WORD *)&v83[14] = 1024;
      *(_DWORD *)&v83[16] = a3;
      *(_WORD *)&v83[20] = 1024;
      *(_DWORD *)&v83[22] = a4;
      *(_WORD *)&v83[26] = 2082;
      *(void *)&v83[28] = a5;
      *(_WORD *)&v83[36] = 1024;
      *(_DWORD *)nw_endpoint_t v84 = a6;
      *(_WORD *)&void v84[4] = 1024;
      *(_DWORD *)id v85 = a7;
      *(_WORD *)&v85[4] = 1024;
      *(_DWORD *)v86 = a8;
      *(_WORD *)&v86[4] = 1024;
      os_log_type_t v87 = a10;
      int v20 = "%{public}s [C%{public}s] flags=0x%x ifindex=%u errorCode=%d name=%{public}s rrtype=%u rrclass=%u rdlen=%u, ttl=%u";
      uint64_t v21 = v19;
      int v22 = 74;
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v19 = (os_log_s *)(id)gLogObj;
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
LABEL_11:

        goto LABEL_12;
      }

      BOOL v23 = *((_DWORD *)v18 + 85);
      *(_DWORD *)buf = 136448514;
      *(void *)&uint8_t buf[4] = "nw_resolver_srv_resolve_callback";
      uint64_t v82 = 1024;
      *(_DWORD *)unsigned int v83 = v23;
      *(_WORD *)&v83[4] = 1024;
      *(_DWORD *)&v83[6] = a2;
      *(_WORD *)&v83[10] = 1024;
      *(_DWORD *)&v83[12] = a3;
      *(_WORD *)&v83[16] = 1024;
      *(_DWORD *)&v83[18] = a4;
      *(_WORD *)&v83[22] = 2082;
      *(void *)&v83[24] = a5;
      *(_WORD *)&v83[32] = 1024;
      *(_DWORD *)&v83[34] = a6;
      *(_WORD *)nw_endpoint_t v84 = 1024;
      *(_DWORD *)&v84[2] = a7;
      *(_WORD *)id v85 = 1024;
      *(_DWORD *)&v85[2] = a8;
      *(_WORD *)v86 = 1024;
      *(_DWORD *)&v86[2] = a10;
      int v20 = "%{public}s [R%u] flags=0x%x ifindex=%u errorCode=%d name=%{public}s rrtype=%u rrclass=%u rdlen=%u, ttl=%u";
      uint64_t v21 = v19;
      int v22 = 70;
    }

    _os_log_impl(&dword_181A5C000, v21, OS_LOG_TYPE_DEBUG, v20, buf, v22);
    goto LABEL_11;
  }

    if (v48) {
      free(v48);
    }
    goto LABEL_112;
  }

  if (*((char *)v5 + 190) < 0 || *((int *)v5 + 10) >= 3)
  {
    if (!nw_parameters_get_logging_disabled(*((void *)v5 + 7)))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
      }
      BOOL v51 = (os_log_s *)(id)gconnection_groupLogObj;
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      {
        int v52 = *((_DWORD *)v5 + 42);
        *(_DWORD *)aBlock = 136446466;
        *(void *)&aBlock[4] = "nw_connection_group_extract_connection";
        *(_WORD *)&aBlock[12] = 1024;
        *(_DWORD *)&aBlock[14] = v52;
        _os_log_impl( &dword_181A5C000,  v51,  OS_LOG_TYPE_ERROR,  "%{public}s [G%u] Cannot extract a connection from a failed or cancelled group",  aBlock,  0x12u);
      }
    }

      uint64_t v10 = 0LL;
      goto LABEL_111;
    }

    __nwlog_obj();
    BOOL v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v51 = "nw_protocol_instance_access_cached_content";
    os_log_type_t v24 = (char *)_os_log_send_and_compose_impl();

    nw_endpoint_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v48 = 0;
    if (__nwlog_fault(v24, &type, &v48))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v51 = "nw_protocol_instance_access_cached_content";
          _os_log_impl(&dword_181A5C000, v25, v26, "%{public}s called with null association", buf, 0xCu);
        }
      }

      else if (v48)
      {
        id v38 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v39 = type;
        char v40 = os_log_type_enabled(v25, type);
        if (v38)
        {
          if (v40)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v51 = "nw_protocol_instance_access_cached_content";
            int v52 = 2082;
            uint64_t v53 = v38;
            _os_log_impl( &dword_181A5C000,  v25,  v39,  "%{public}s called with null association, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v38);
          goto LABEL_108;
        }

        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v51 = "nw_protocol_instance_access_cached_content";
          _os_log_impl(&dword_181A5C000, v25, v39, "%{public}s called with null association, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v46 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v51 = "nw_protocol_instance_access_cached_content";
          _os_log_impl( &dword_181A5C000,  v25,  v46,  "%{public}s called with null association, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    goto LABEL_111;
  }

  if (!a2)
  {
    __nwlog_obj();
    BOOL v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v60 = "nw_protocol_implementation_report_connected";
    os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

    v57[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v55) = 0;
    if (v57[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = v57[0];
      if (os_log_type_enabled(v29, v57[0]))
      {
        *(_DWORD *)buf = 136446210;
        id v60 = "nw_protocol_implementation_report_connected";
        _os_log_impl(&dword_181A5C000, v29, v32, "%{public}s called with null protocol", buf, 0xCu);
      }

      goto LABEL_110;
    }

    if (!(_BYTE)v55)
    {
      __nwlog_obj();
      int v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v50 = v57[0];
      if (os_log_type_enabled(v29, v57[0]))
      {
        *(_DWORD *)buf = 136446210;
        id v60 = "nw_protocol_implementation_report_connected";
        _os_log_impl( &dword_181A5C000,  v29,  v50,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_110;
    }

    id v41 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    int v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint32_t v42 = v57[0];
    uint64_t v43 = os_log_type_enabled(v29, v57[0]);
    if (!v41)
    {
      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        id v60 = "nw_protocol_implementation_report_connected";
        _os_log_impl(&dword_181A5C000, v29, v42, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }

      goto LABEL_110;
    }

    if (v43)
    {
      *(_DWORD *)buf = 136446466;
      id v60 = "nw_protocol_implementation_report_connected";
      id v61 = 2082;
      id v62 = (nw_protocol_identifier *)v41;
      _os_log_impl( &dword_181A5C000,  v29,  v42,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_79;
  }

  if (!a3)
  {
    __nwlog_obj();
    os_log_type_t v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v60 = "nw_protocol_implementation_report_connected";
    os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

    v57[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v55) = 0;
    if (v57[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v34 = v57[0];
      if (os_log_type_enabled(v29, v57[0]))
      {
        *(_DWORD *)buf = 136446210;
        id v60 = "nw_protocol_implementation_report_connected";
        _os_log_impl(&dword_181A5C000, v29, v34, "%{public}s called with null input_protocol", buf, 0xCu);
      }

      goto LABEL_110;
    }

    if (!(_BYTE)v55)
    {
      __nwlog_obj();
      int v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v51 = v57[0];
      if (os_log_type_enabled(v29, v57[0]))
      {
        *(_DWORD *)buf = 136446210;
        id v60 = "nw_protocol_implementation_report_connected";
        _os_log_impl( &dword_181A5C000,  v29,  v51,  "%{public}s called with null input_protocol, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_110;
    }

    id v41 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    int v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v44 = v57[0];
    int v45 = os_log_type_enabled(v29, v57[0]);
    if (!v41)
    {
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        id v60 = "nw_protocol_implementation_report_connected";
        _os_log_impl(&dword_181A5C000, v29, v44, "%{public}s called with null input_protocol, no backtrace", buf, 0xCu);
      }

      goto LABEL_110;
    }

    if (v45)
    {
      *(_DWORD *)buf = 136446466;
      id v60 = "nw_protocol_implementation_report_connected";
      id v61 = 2082;
      id v62 = (nw_protocol_identifier *)v41;
      _os_log_impl( &dword_181A5C000,  v29,  v44,  "%{public}s called with null input_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

      if (SBYTE5(v3->flow_in_connected) < 0) {
        goto LABEL_130;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v56 = (id)gLogObj;
      *(_DWORD *)buf = 136446722;
      char v89 = "nw_protocol_implementation_teardown";
      v90 = 2082;
      v91 = (char *)&v22->flow_in_connected + 7;
      __int16 v92 = 2080;
      BOOL v93 = " ";
      char v57 = (void *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(p_paths_log_id_num) = 0;
      if (__nwlog_fault((const char *)v57, type, &p_paths_log_id_num))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v58 = (os_log_s *)(id)gLogObj;
          uint64_t v59 = type[0];
          if (os_log_type_enabled(v58, type[0]))
          {
            *(_DWORD *)buf = 136446722;
            char v89 = "nw_protocol_implementation_teardown";
            v90 = 2082;
            v91 = (char *)&v22->flow_in_connected + 7;
            __int16 v92 = 2080;
            BOOL v93 = " ";
            _os_log_impl( &dword_181A5C000,  v58,  v59,  "%{public}s %{public}s%sUnable to remove output handler",  buf,  0x20u);
          }
        }

        else if ((_BYTE)p_paths_log_id_num)
        {
          id v60 = __nw_create_backtrace_string();
          if (v60)
          {
            id v61 = (char *)v60;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v62 = (os_log_s *)(id)gLogObj;
            uint32_t v63 = type[0];
            if (os_log_type_enabled(v62, type[0]))
            {
              *(_DWORD *)buf = 136446978;
              char v89 = "nw_protocol_implementation_teardown";
              v90 = 2082;
              v91 = (char *)&v22->flow_in_connected + 7;
              __int16 v92 = 2080;
              BOOL v93 = " ";
              os_log_type_t v94 = 2082;
              id v95 = v61;
              _os_log_impl( &dword_181A5C000,  v62,  v63,  "%{public}s %{public}s%sUnable to remove output handler, dumping backtrace:%{public}s",  buf,  0x2Au);
            }

            free(v61);
            if (!v57) {
              goto LABEL_130;
            }
LABEL_129:
            free(v57);
            goto LABEL_130;
          }

          __nwlog_obj();
          int v58 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          id v65 = type[0];
          if (os_log_type_enabled(v58, type[0]))
          {
            *(_DWORD *)buf = 136446722;
            char v89 = "nw_protocol_implementation_teardown";
            v90 = 2082;
            v91 = (char *)&v22->flow_in_connected + 7;
            __int16 v92 = 2080;
            BOOL v93 = " ";
            _os_log_impl( &dword_181A5C000,  v58,  v65,  "%{public}s %{public}s%sUnable to remove output handler, no backtrace",  buf,  0x20u);
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v58 = (os_log_s *)(id)gLogObj;
          int v64 = type[0];
          if (os_log_type_enabled(v58, type[0]))
          {
            *(_DWORD *)buf = 136446722;
            char v89 = "nw_protocol_implementation_teardown";
            v90 = 2082;
            v91 = (char *)&v22->flow_in_connected + 7;
            __int16 v92 = 2080;
            BOOL v93 = " ";
            _os_log_impl( &dword_181A5C000,  v58,  v64,  "%{public}s %{public}s%sUnable to remove output handler, backtrace limit exceeded",  buf,  0x20u);
          }
        }
      }

      if (!v57) {
        goto LABEL_130;
      }
      goto LABEL_129;
    }

    free(v27);
    goto LABEL_119;
  }

  id v3 = *(void *)(v2 + 16);
  if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v4 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      id v5 = *(_DWORD *)(*(void *)(a1 + 32) + 448LL);
      *(_DWORD *)buf = 136446466;
      id v129 = "nw_connection_add_extra_interface_option_block_invoke";
      id v130 = 1024;
      LODWORD(id_str) = v5;
      _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_INFO,  "%{public}s [C%u] Connection is not ready, ignore",  buf,  0x12u);
    }
  }

    free(v31);
    goto LABEL_119;
  }

  id v3 = *(void *)(v2 + 16);
  if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v4 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      id v5 = *(_DWORD *)(*(void *)(a1 + 32) + 448LL);
      *(_DWORD *)buf = 136446466;
      os_log_type_t v137 = "nw_connection_remove_extra_interface_option_block_invoke";
      BOOL v138 = 1024;
      LODWORD(v139) = v5;
      _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_INFO,  "%{public}s [C%u] Connection is not ready, ignore",  buf,  0x12u);
    }
  }

    free(v27);
    goto LABEL_111;
  }

  int v8 = v6;
  os_log_type_t v9 = v8[30];

  if (v9 == 1)
  {
    v231 = v5;
    v232 = v6;
    v239 = v8;
    uint64_t v10 = v8;
    os_log_type_t v11 = *((_BYTE *)v10 + 268);
    __int16 v250 = v10;

    object = self;
    if ((v11 & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      int v12 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v13 = v250;

        os_log_type_t v14 = v13;
        BOOL v15 = *((_BYTE *)v250 + 268);

        if ((v15 & 1) != 0) {
          id v16 = "dry-run ";
        }
        else {
          id v16 = "";
        }
        char v17 = nw_endpoint_handler_copy_endpoint(v14);
        logging_description = nw_endpoint_get_logging_description(v17);
        id v19 = v13 + 168;
        int v20 = v14;
        uint64_t v21 = v20;
        int v22 = v239[30];
        else {
          BOOL v23 = off_189BBBBF0[v22];
        }

        char v37 = v21;
        id v38 = v37;
        uint64_t v39 = "path";
        switch(v232[29])
        {
          case 0u:
            break;
          case 1u:
            uint64_t v39 = "resolver";
            break;
          case 2u:
            uint64_t v39 = nw_endpoint_flow_mode_string(v37[31]);
            break;
          case 3u:
            uint64_t v39 = "proxy";
            break;
          case 4u:
            uint64_t v39 = "fallback";
            break;
          case 5u:
            uint64_t v39 = "transform";
            break;
          default:
            uint64_t v39 = "unknown-mode";
            break;
        }

        id v41 = v38;
        os_unfair_lock_lock((os_unfair_lock_t)v41 + 28);
        uint32_t v42 = v41[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v41 + 28);

        *(_DWORD *)buf = 136447746;
        *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_endpoint_proxy startWithHandler:]";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v19;
        *(_WORD *)&buf[22] = 2082;
        v280 = (uint64_t (*)(uint64_t, uint64_t))v16;
        *(_WORD *)v281 = 2082;
        *(void *)&v281[2] = logging_description;
        *(_WORD *)&v281[10] = 2082;
        *(void *)&v281[12] = v23;
        *(_WORD *)&v281[20] = 2082;
        *(void *)&v281[22] = v39;
        *(_WORD *)&v281[30] = 2114;
        v282 = v42;
        _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ",  buf,  0x48u);
      }

      self = object;
    }

    custom_proxy_configs = self->custom_proxy_configs;
    self->custom_proxy_configs = 0LL;

    path_proxy_configs = object->path_proxy_configs;
    object->path_proxy_configs = 0LL;

    *((_BYTE *)object + 96) &= 0xC6u;
    int v45 = nw_endpoint_handler_copy_endpoint(v250);
    v229 = v45;
    if (nw_endpoint_get_type(v45) == nw_endpoint_type_host)
    {
      uint64_t v46 = v250;
      os_unfair_lock_lock((os_unfair_lock_t)v46 + 28);
      uint64_t v47 = (NWConcrete_nw_path *)*((id *)v46 + 8);
      os_unfair_lock_unlock((os_unfair_lock_t)v46 + 28);

      *(_DWORD *)nw_endpoint_type_t type = 0;
      if (nw_path_get_vpn_config_uuid(v47, (unsigned __int8 (*)[16])buf, (int *)type, 1, 1))
      {
        type[0] = OS_LOG_TYPE_DEFAULT;
        uint64_t v48 = nw_path_voluntary_agent_matches_address(v47, (uint64_t)&xmmword_18272D6E8);
        uint64_t v49 = type[0] ? v48 : 0;
        if (v49 == 1 && nw_endpoint_handler_trigger_agents(v46, 1))
        {
          int minimize_logging = nw_endpoint_handler_get_minimize_logging(v46);
          char logging_disabled = nw_endpoint_handler_get_logging_disabled(v46);
          if (minimize_logging)
          {
            if ((logging_disabled & 1) != 0) {
              goto LABEL_66;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            int v52 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
            {
              id_string = nw_endpoint_handler_get_id_string(v46);
              unint64_t v218 = nw_endpoint_handler_dry_run_string(v46);
              id v219 = nw_endpoint_handler_copy_endpoint(v46);
              v220 = nw_endpoint_get_logging_description(v219);
              v221 = nw_endpoint_handler_state_string(v46);
              v222 = nw_endpoint_handler_mode_string(v46);
              nw_endpoint_t v223 = nw_endpoint_handler_copy_current_path(v46);
              *(_DWORD *)buf = 136447746;
              *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_endpoint_proxy startWithHandler:]";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = id_string;
              *(_WORD *)&buf[22] = 2082;
              v280 = (uint64_t (*)(uint64_t, uint64_t))v218;
              *(_WORD *)v281 = 2082;
              *(void *)&v281[2] = v220;
              *(_WORD *)&v281[10] = 2082;
              *(void *)&v281[12] = v221;
              *(_WORD *)&v281[20] = 2082;
              *(void *)&v281[22] = v222;
              *(_WORD *)&v281[30] = 2114;
              v282 = v223;
              _os_log_impl( &dword_181A5C000,  v52,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] proxy requires agent tr igger before attempting to connect",  buf,  0x48u);
            }
          }

          else
          {
            if ((logging_disabled & 1) != 0)
            {
LABEL_66:
              nw_endpoint_handler_reset_mode(v46, 0);

LABEL_230:
              id v5 = v231;
              goto LABEL_231;
            }

            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            int v52 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
            {
              uint64_t v53 = nw_endpoint_handler_get_id_string(v46);
              uint64_t v54 = nw_endpoint_handler_dry_run_string(v46);
              uint64_t v55 = nw_endpoint_handler_copy_endpoint(v46);
              id v56 = nw_endpoint_get_logging_description(v55);
              char v57 = nw_endpoint_handler_state_string(v46);
              int v58 = nw_endpoint_handler_mode_string(v46);
              uint64_t v59 = nw_endpoint_handler_copy_current_path(v46);
              *(_DWORD *)buf = 136447746;
              *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_endpoint_proxy startWithHandler:]";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v53;
              *(_WORD *)&buf[22] = 2082;
              v280 = (uint64_t (*)(uint64_t, uint64_t))v54;
              *(_WORD *)v281 = 2082;
              *(void *)&v281[2] = v56;
              *(_WORD *)&v281[10] = 2082;
              *(void *)&v281[12] = v57;
              *(_WORD *)&v281[20] = 2082;
              *(void *)&v281[22] = v58;
              *(_WORD *)&v281[30] = 2114;
              v282 = v59;
              _os_log_impl( &dword_181A5C000,  v52,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] proxy requires agent tr igger before attempting to connect",  buf,  0x48u);
            }
          }

          goto LABEL_66;
        }
      }

      int v45 = v229;
    }

    v243 = v45;
    if (v243)
    {
      pthread_mutex_lock(&sOutstandingPacURLMutex);
      id v60 = (const __CFArray *)nw_get_outstanding_pac_urls(void)::gPACURLs;
      if (nw_get_outstanding_pac_urls(void)::gPACURLs)
      {
        id v61 = v243;
        id v62 = -[nw_endpoint type](v61, "type");

        Count = CFArrayGetCount(v60);
        if (Count >= 1)
        {
          if (v62 == 2)
          {
            int v64 = 0LL;
            alloc = (const __CFAllocator *)*MEMORY[0x189604DB0];
            id v65 = 1;
            while (1)
            {
              ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(v60, v64);
              uint64_t v67 = CFURLCopyHostName(ValueAtIndex);
              if (v67)
              {
                uint64_t v68 = v61;
                uint64_t v69 = (const char *)-[nw_endpoint hostname](v68, "hostname");

                if (v69 && (BOOL v70 = CFStringCreateWithCString(alloc, v69, 0x8000100u)) != 0LL)
                {
                  __int128 v71 = CFStringCompare(v67, v70, 0LL) == kCFCompareEqualTo;
                  CFRelease(v70);
                }

                else
                {
                  __int128 v71 = 0;
                }

                CFRelease(v67);
                if (v71)
                {
                  os_log_type_t v72 = CFURLGetPortNumber(ValueAtIndex);
                  uint64_t v73 = v68;
                  os_log_type_t v74 = -[nw_endpoint port](v73, "port");

                  if (v74)
                  {
                    if (v72 && v72 == __rev16(v74)) {
                      break;
                    }
                  }
                }
              }

              id v65 = ++v64 < Count;
              if (Count == v64) {
                goto LABEL_118;
              }
            }

            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            BOOL v75 = (os_log_s *)(id)gLogObj;
            if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
            {
              os_log_type_t v76 = nw_endpoint_get_logging_description(v73);
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_pac_resolver_endpoint_is_pac_url";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v76;
              *(_WORD *)&buf[22] = 2114;
              v280 = (uint64_t (*)(uint64_t, uint64_t))ValueAtIndex;
              _os_log_impl( &dword_181A5C000,  v75,  OS_LOG_TYPE_DEBUG,  "%{public}s Endpoint %{public}s matched PAC URL %{public}@",  buf,  0x20u);
            }

            goto LABEL_118;
          }

          for (i = 0LL; i != Count; ++i)
          {
            uint64_t v82 = (const __CFURL *)CFArrayGetValueAtIndex(v60, i);
            unsigned int v83 = CFURLCopyHostName(v82);
            if (v83) {
              CFRelease(v83);
            }
          }
        }

    int v8 = v44;
    if (!v40) {
      goto LABEL_140;
    }
    goto LABEL_139;
  }

  if (v71)
  {
    if (v56 > 0x14) {
      os_log_type_t v72 = "unknown";
    }
    else {
      os_log_type_t v72 = off_189BB5C28[v56];
    }
    *(_DWORD *)buf = 136446978;
    id v97 = "-[NWPrivilegedHelper registerHandlerFunction:type:allowedEntitlementGroup:]";
    v98 = 1024;
    *(_DWORD *)v99 = v5;
    *(_WORD *)&v99[4] = 2082;
    *(void *)&v99[6] = v72;
    char v100 = 2082;
    uint64_t v101 = v45;
    os_log_type_t v74 = "%{public}s Refusing to register handler for type [%u] %{public}s without any entitlement, dumping backtrace:%{public}s";
LABEL_94:
    _os_log_impl(&dword_181A5C000, v46, v47, v74, buf, 0x26u);
  }

    free(v57);
    if (!v45) {
      goto LABEL_70;
    }
    goto LABEL_137;
  }

  uint64_t v13 = v10;
  os_log_type_t v14 = [v13 type];

  if (v14 != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v20 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    id v78 = "nw_service_connector_start_request";
    v79 = 2114;
    id v80 = (size_t)v13;
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();

    nw_endpoint_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v75 = 0;
    if (__nwlog_fault(v21, &type, &v75))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v22 = (os_log_s *)(id)gLogObj;
        BOOL v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446466;
          id v78 = "nw_service_connector_start_request";
          v79 = 2114;
          id v80 = (size_t)v13;
          _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s Specified endpoint %{public}@ is not an address endpoint",  buf,  0x16u);
        }
      }

      else if (v75)
      {
        os_log_type_t v28 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v22 = (os_log_s *)(id)gLogObj;
        int v29 = type;
        int v30 = os_log_type_enabled(v22, type);
        if (v28)
        {
          if (v30)
          {
            *(_DWORD *)buf = 136446722;
            id v78 = "nw_service_connector_start_request";
            v79 = 2114;
            id v80 = (size_t)v13;
            id v81 = 2082;
            v82[0] = v28;
            _os_log_impl( &dword_181A5C000,  v22,  v29,  "%{public}s Specified endpoint %{public}@ is not an address endpoint, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v28);
          if (!v21) {
            goto LABEL_44;
          }
          goto LABEL_43;
        }

        if (v30)
        {
          *(_DWORD *)buf = 136446466;
          id v78 = "nw_service_connector_start_request";
          v79 = 2114;
          id v80 = (size_t)v13;
          _os_log_impl( &dword_181A5C000,  v22,  v29,  "%{public}s Specified endpoint %{public}@ is not an address endpoint, no backtrace",  buf,  0x16u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v22 = (os_log_s *)(id)gLogObj;
        id v38 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446466;
          id v78 = "nw_service_connector_start_request";
          v79 = 2114;
          id v80 = (size_t)v13;
          _os_log_impl( &dword_181A5C000,  v22,  v38,  "%{public}s Specified endpoint %{public}@ is not an address endpoint, backtrace limit exceeded",  buf,  0x16u);
        }
      }
    }

    if (!v21) {
      goto LABEL_44;
    }
LABEL_43:
    free(v21);
    goto LABEL_44;
  }

  BOOL v15 = strlen(a3);
  if (v15 <= 0x100)
  {
    os_log_type_t v24 = v15;
    BOOL v25 = xpc_string_create(a3);
    BOOL v26 = v25;
    if (v25)
    {
      os_log_type_t v27 = (dispatch_queue_s *)v9[4];
      block[0] = MEMORY[0x1895F87A8];
      block[1] = 3221225472LL;
      block[2] = __nw_service_connector_start_request_block_invoke;
      block[3] = &unk_189BBFE68;
      BOOL v70 = v25;
      __int128 v71 = v9;
      os_log_type_t v72 = v68;
      uint64_t v73 = v13;
      os_log_type_t v74 = v12;
      dispatch_async(v27, block);

LABEL_69:
      goto LABEL_70;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v34 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    id v78 = "nw_service_connector_start_request";
    v79 = 2048;
    id v80 = v24;
    BOOL v35 = (char *)_os_log_send_and_compose_impl();

    nw_endpoint_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v75 = 0;
    if (__nwlog_fault(v35, &type, &v75))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v36 = (os_log_s *)(id)gLogObj;
        char v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136446466;
          id v78 = "nw_service_connector_start_request";
          v79 = 2048;
          id v80 = v24;
          _os_log_impl(&dword_181A5C000, v36, v37, "%{public}s xpc_string_create(%zu) failed", buf, 0x16u);
        }
      }

      else if (v75)
      {
        char v40 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v41 = type;
        uint32_t v42 = os_log_type_enabled(v36, type);
        if (v40)
        {
          if (v42)
          {
            *(_DWORD *)buf = 136446722;
            id v78 = "nw_service_connector_start_request";
            v79 = 2048;
            id v80 = v24;
            id v81 = 2082;
            v82[0] = v40;
            _os_log_impl( &dword_181A5C000,  v36,  v41,  "%{public}s xpc_string_create(%zu) failed, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v40);
          if (!v35) {
            goto LABEL_68;
          }
          goto LABEL_67;
        }

        if (v42)
        {
          *(_DWORD *)buf = 136446466;
          id v78 = "nw_service_connector_start_request";
          v79 = 2048;
          id v80 = v24;
          _os_log_impl(&dword_181A5C000, v36, v41, "%{public}s xpc_string_create(%zu) failed, no backtrace", buf, 0x16u);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v43 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136446466;
          id v78 = "nw_service_connector_start_request";
          v79 = 2048;
          id v80 = v24;
          _os_log_impl( &dword_181A5C000,  v36,  v43,  "%{public}s xpc_string_create(%zu) failed, backtrace limit exceeded",  buf,  0x16u);
        }
      }
    }

    if (!v35)
    {
LABEL_68:
      nw_service_connector_trigger_request_complete_block_inner(v9, 0LL, v12, 0LL, 12);
      goto LABEL_69;
    }

  id v78 = v43->u32[0];
  v79 = v43->u32[1];
  ++v43;
  v41 += v78 + v79;
  if ((v42 & 4) == 0)
  {
LABEL_102:
    if ((v42 & 2) == 0) {
      goto LABEL_103;
    }
LABEL_112:
    id v81 = v43->u16[0];
    uint64_t v43 = (uint32x2_t *)((char *)v43 + 2);
    v41 += v81;
    if ((v42 & 1) == 0) {
      goto LABEL_105;
    }
    goto LABEL_104;
  }

        id v95 = *((id *)v3 + 17);
        id v96 = *((_BYTE *)v3 + 176);
        id v97 = *((id *)v3 + 19);
        v98 = _Block_copy(*((const void **)v3 + 3));
        v99 = (void *)*((void *)v3 + 7);
        char v100 = *((_DWORD *)v3 + 16);
        v156[0] = MEMORY[0x1895F87A8];
        v156[1] = 3221225472LL;
        v156[2] = ___ZL22nw_read_request_reportP26NWConcrete_nw_read_requestPU28objcproto17OS_dispatch_queue8NSObject_block_invoke;
        v156[3] = &unk_189BC0A70;
        __int16 v160 = v98;
        v157 = v30;
        __int16 v158 = v95;
        nw_endpoint_t v161 = (v96 & 2) != 0;
        id v159 = v97;
        uint64_t v101 = v97;
        os_log_type_t v102 = v95;
        BOOL v103 = v98;
        nw_connection_async_client_if_needed_with_override(v99, v4, v100, v156);

LABEL_111:
        break;
      case 2:
        if (*((void *)v3 + 7))
        {
          id v16 = (void *)*((void *)v3 + 19);
          if (!v16) {
            goto LABEL_100;
          }
          char v17 = v16;
          id v18 = v17[2];

          if (v18 == 1 && nw_error_get_error_code(*((nw_error_t *)v3 + 19)) == 89)
          {
            id v19 = *(void *)(*((void *)v3 + 7) + 16LL);
            if (v19 && !nw_path_parameters_get_logging_disabled(*(void *)(v19 + 104)))
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              int v20 = (os_log_s *)(id)gconnectionLogObj;
              if (!os_log_type_enabled(v20, OS_LOG_TYPE_INFO)) {
                goto LABEL_97;
              }
              uint64_t v21 = *(_DWORD *)(*((void *)v3 + 7) + 448LL);
              *(_DWORD *)buf = 136446466;
              id v163 = "nw_read_request_report";
              uint64_t v164 = 1024;
              *(_DWORD *)id v165 = v21;
              int v22 = "%{public}s [C%u] Receive cancelled";
              BOOL v23 = v20;
              os_log_type_t v24 = OS_LOG_TYPE_INFO;
              BOOL v25 = 18;
LABEL_96:
              _os_log_impl(&dword_181A5C000, v23, v24, v22, buf, v25);
LABEL_97:
            }
          }

          else
          {
            id v81 = *(void *)(*((void *)v3 + 7) + 16LL);
            if (v81 && !nw_path_parameters_get_logging_disabled(*(void *)(v81 + 104)))
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              int v20 = (os_log_s *)(id)gconnectionLogObj;
              if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
                goto LABEL_97;
              }
              uint64_t v82 = *(_DWORD *)(*((void *)v3 + 7) + 448LL);
              unsigned int v83 = *((void *)v3 + 19);
              *(_DWORD *)buf = 136446722;
              id v163 = "nw_read_request_report";
              uint64_t v164 = 1024;
              *(_DWORD *)id v165 = v82;
              *(_WORD *)&v165[4] = 2114;
              *(void *)&v165[6] = v83;
              int v22 = "%{public}s [C%u] Receive failed with error %{public}@";
              BOOL v23 = v20;
              os_log_type_t v24 = OS_LOG_TYPE_ERROR;
              BOOL v25 = 28;
              goto LABEL_96;
            }
          }

          nw_endpoint_t v84 = (void *)*((void *)v3 + 19);
          if (v84)
          {
            id v85 = v84;
            v86 = v85[3];

LABEL_101:
            os_log_type_t v87 = *((void *)v3 + 11);
            id v88 = _Block_copy(*((const void **)v3 + 6));
            char v89 = (void *)*((void *)v3 + 7);
            v90 = *((_DWORD *)v3 + 16);
            v131[0] = MEMORY[0x1895F87A8];
            v131[1] = 3221225472LL;
            v131[2] = ___ZL22nw_read_request_reportP26NWConcrete_nw_read_requestPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_103;
            v131[3] = &unk_189BC0FC8;
            v132 = v88;
            v133 = v87;
            id v134 = v86;
            v91 = v88;
            nw_connection_async_client_if_needed_with_override(v89, v4, v90, v131);

            break;
          }

    goto LABEL_111;
  }

  uint64_t cached_content_for_protocol = nw_association_get_cached_content_for_protocol(v3, v4);
  if (cached_content_for_protocol || (uint64_t cached_content_for_protocol = (uint64_t)calloc(1uLL, 0x30uLL)) != 0)
  {
    if (a2)
    {
      id v6 = *(unsigned int *)(cached_content_for_protocol + 36) + 1LL;
      uint32_t v7 = v6 << 31 >> 31;
      *(_DWORD *)(cached_content_for_protocol + 36) = v6;
      if (v7 == v6 && (v7 & 0x8000000000000000LL) == 0) {
        goto LABEL_52;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v8 = (id)gLogObj;
      os_log_type_t v9 = *(unsigned int *)(cached_content_for_protocol + 36);
      *(_DWORD *)buf = 136446978;
      uint64_t v69 = "nw_quic_report_application_result_on_queue";
      BOOL v70 = 2082;
      __int128 v71 = "association_cache->application_success_count";
      os_log_type_t v72 = 2048;
      uint64_t v73 = 1LL;
      os_log_type_t v74 = 2048;
      *(void *)BOOL v75 = v9;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();

      nw_endpoint_type_t type = OS_LOG_TYPE_ERROR;
      id v66 = 0;
      if (__nwlog_fault(v10, &type, &v66))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v11 = (os_log_s *)(id)gLogObj;
          int v12 = type;
          if (os_log_type_enabled(v11, type))
          {
            uint64_t v13 = *(unsigned int *)(cached_content_for_protocol + 36);
            *(_DWORD *)buf = 136446978;
            uint64_t v69 = "nw_quic_report_application_result_on_queue";
            BOOL v70 = 2082;
            __int128 v71 = "association_cache->application_success_count";
            os_log_type_t v72 = 2048;
            uint64_t v73 = 1LL;
            os_log_type_t v74 = 2048;
            *(void *)BOOL v75 = v13;
            _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s Overflow: %{public}s, increment %llu, result %llu",  buf,  0x2Au);
          }
        }

        else if (v66)
        {
          int v22 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v11 = (os_log_s *)(id)gLogObj;
          BOOL v23 = type;
          os_log_type_t v24 = os_log_type_enabled(v11, type);
          if (v22)
          {
            if (v24)
            {
              BOOL v25 = *(unsigned int *)(cached_content_for_protocol + 36);
              *(_DWORD *)buf = 136447234;
              uint64_t v69 = "nw_quic_report_application_result_on_queue";
              BOOL v70 = 2082;
              __int128 v71 = "association_cache->application_success_count";
              os_log_type_t v72 = 2048;
              uint64_t v73 = 1LL;
              os_log_type_t v74 = 2048;
              *(void *)BOOL v75 = v25;
              *(_WORD *)&v75[8] = 2082;
              os_log_type_t v76 = v22;
              _os_log_impl( &dword_181A5C000,  v11,  v23,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
            }

            free(v22);
            if (!v10) {
              goto LABEL_45;
            }
            goto LABEL_44;
          }

          if (v24)
          {
            __int16 v34 = *(unsigned int *)(cached_content_for_protocol + 36);
            *(_DWORD *)buf = 136446978;
            uint64_t v69 = "nw_quic_report_application_result_on_queue";
            BOOL v70 = 2082;
            __int128 v71 = "association_cache->application_success_count";
            os_log_type_t v72 = 2048;
            uint64_t v73 = 1LL;
            os_log_type_t v74 = 2048;
            *(void *)BOOL v75 = v34;
            _os_log_impl( &dword_181A5C000,  v11,  v23,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace",  buf,  0x2Au);
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v11 = (os_log_s *)(id)gLogObj;
          int v30 = type;
          if (os_log_type_enabled(v11, type))
          {
            BOOL v31 = *(unsigned int *)(cached_content_for_protocol + 36);
            *(_DWORD *)buf = 136446978;
            uint64_t v69 = "nw_quic_report_application_result_on_queue";
            BOOL v70 = 2082;
            __int128 v71 = "association_cache->application_success_count";
            os_log_type_t v72 = 2048;
            uint64_t v73 = 1LL;
            os_log_type_t v74 = 2048;
            *(void *)BOOL v75 = v31;
            _os_log_impl( &dword_181A5C000,  v11,  v30,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded",  buf,  0x2Au);
          }
        }
      }

      if (!v10)
      {
LABEL_45:
        *(_DWORD *)(cached_content_for_protocol + 36) = -1;
LABEL_52:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v36 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        {
          char v37 = "failure";
          id v38 = *(_DWORD *)(cached_content_for_protocol + 36);
          uint64_t v39 = *(_DWORD *)(cached_content_for_protocol + 40);
          if (a2) {
            char v37 = "success";
          }
          *(_DWORD *)buf = 136447234;
          uint64_t v69 = "nw_quic_report_application_result_on_queue";
          BOOL v70 = 2112;
          __int128 v71 = (char *)v3;
          os_log_type_t v72 = 2080;
          uint64_t v73 = (uint64_t)v37;
          os_log_type_t v74 = 1024;
          *(_DWORD *)BOOL v75 = v38;
          *(_WORD *)&v75[4] = 1024;
          *(_DWORD *)&v75[6] = v39;
          _os_log_impl( &dword_181A5C000,  v36,  OS_LOG_TYPE_DEBUG,  "%{public}s %@ recording %s for QUIC application result, total success: %u, total failure: %u",  buf,  0x2Cu);
        }

        int64_with_default = networkd_settings_get_int64_with_default( (const char *)nw_setting_quic_failure_cache_seconds,  1800LL);
        id v41 = time(0LL);
        nw_association_set_cached_content_for_protocol(v3, v4, cached_content_for_protocol, v41 + int64_with_default);
        goto LABEL_57;
      }

      free(v39);
      if (!v11) {
        return 0LL;
      }
      goto LABEL_27;
    }
  }

      goto LABEL_111;
    }

    if (!v55)
    {
      __nwlog_obj();
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v53 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136447234;
        int v58 = "nw_path_copy_advertise_descriptor_from_tlv";
        uint64_t v59 = 1024;
        id v60 = 204;
        id v61 = 1024;
        id v62 = a1;
        uint32_t v63 = 2080;
        int v64 = "nw_path_copy_advertise_descriptor_from_tlv";
        id v65 = 1024;
        id v66 = 2031;
        _os_log_impl( &dword_181A5C000,  v16,  v53,  "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded",  buf,  0x28u);
      }

      goto LABEL_110;
    }

    uint64_t v36 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v49 = type;
    uint64_t v50 = os_log_type_enabled(v16, type);
    if (!v36)
    {
      if (v50)
      {
        *(_DWORD *)buf = 136447234;
        int v58 = "nw_path_copy_advertise_descriptor_from_tlv";
        uint64_t v59 = 1024;
        id v60 = 204;
        id v61 = 1024;
        id v62 = a1;
        uint32_t v63 = 2080;
        int v64 = "nw_path_copy_advertise_descriptor_from_tlv";
        id v65 = 1024;
        id v66 = 2031;
        _os_log_impl( &dword_181A5C000,  v16,  v49,  "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace",  buf,  0x28u);
      }

      goto LABEL_110;
    }

    if (v50)
    {
      *(_DWORD *)buf = 136447490;
      int v58 = "nw_path_copy_advertise_descriptor_from_tlv";
      uint64_t v59 = 1024;
      id v60 = 204;
      id v61 = 1024;
      id v62 = a1;
      uint32_t v63 = 2080;
      int v64 = "nw_path_copy_advertise_descriptor_from_tlv";
      id v65 = 1024;
      id v66 = 2031;
      uint64_t v67 = 2082;
      uint64_t v68 = v36;
      _os_log_impl( &dword_181A5C000,  v16,  v49,  "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s",  buf,  0x32u);
    }

    __break(1u);
    return result;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
  os_log_type_t v27 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(__src) = 16;
  LOBYTE(v39) = 0;
  if (__src != 17)
  {
    if (!(_BYTE)v39)
    {
      os_log_type_t v28 = (os_log_s *)__nwlog_obj();
      int v29 = __src;
      if (os_log_type_enabled(v28, (os_log_type_t)__src))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
        int v30 = "%{public}s called with null external_data, backtrace limit exceeded";
        goto LABEL_106;
      }

      goto LABEL_107;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v28 = (os_log_s *)__nwlog_obj();
    int v29 = __src;
    uint64_t v36 = os_log_type_enabled(v28, (os_log_type_t)__src);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
        int v30 = "%{public}s called with null external_data, no backtrace";
        goto LABEL_106;
      }

      goto LABEL_107;
    }

    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v43 = "nw_protocol_http3_uni_stream_finalize_output_frames";
      uint64_t v44 = 2082;
      *(void *)int v45 = backtrace_string;
      os_log_type_t v33 = "%{public}s called with null external_data, dumping backtrace:%{public}s";
      goto LABEL_92;
    }

    if (v47) {
      free(v47);
    }
    id v16 = 0LL;
    a1 = v45;
    goto LABEL_35;
  }

  if (!v5) {
    goto LABEL_150;
  }
  v405[0] = MEMORY[0x1895F87A8];
  v405[1] = 3221225472LL;
  v405[2] = ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_2_44;
  v405[3] = &__block_descriptor_40_e42_v16__0__NSObject_OS_nw_endpoint_handler__8l;
  v405[4] = v382;
  nw_endpoint_handler_access_proxy_handler(v377, v405);
LABEL_112:
  id v96 = v377;
  while (1)
  {
    id v97 = v96;
    uint64_t mode = v97->mode;

    if (mode == 4) {
      break;
    }
    v99 = v97;
    id v96 = (NWConcrete_nw_endpoint_handler *)v99[9];

    if (!v96) {
      goto LABEL_150;
    }
  }

  char v100 = (unsigned int *)((char *)v382 + 1706);
  *(_DWORD *)((char *)v382 + 1706) |= 0x20u;
  uint64_t v101 = v24;
  LOWORD(buf[0]) = WORD2(v97) ^ WORD1(v97) ^ HIWORD(v97) ^ (unsigned __int16)v97;
  os_log_type_t v102 = nw_connection_get_event_milliseconds(v101, 5, 3, buf, 0LL);
  BOOL v103 = nw_connection_get_event_milliseconds(v101, 5, 4, buf, 0LL);
  os_log_type_t v104 = v103 == -1 || v102 == -1;
  if (v104) {
    v105 = v103 != -1;
  }
  else {
    v105 = v102 >= v103;
  }

  v106 = 256;
  if (!v105) {
    v106 = 0;
  }
  nw_endpoint_t v107 = *(_DWORD *)((char *)v382 + 1706) & 0xFFFFFEFF | ((unint64_t)*((unsigned __int16 *)v382 + 855) << 32);
  *char v100 = *v100 & 0xFFFFFEFF | v106;
  *((_WORD *)v382 + 855) = WORD2(v107);
  id v108 = v97;
  v109 = v108;
  if (v97->mode != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v113 = (id)gLogObj;
    buf[0] = 136446210;
    *(void *)&buf[1] = "nw_endpoint_handler_used_weak_fallback";
    nw_endpoint_t v114 = (char *)_os_log_send_and_compose_impl();

    v425[0] = 16;
    LOBYTE(v389) = 0;
    if (__nwlog_fault(v114, v425, &v389))
    {
      if (v425[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v115 = (os_log_s *)(id)gLogObj;
        v116 = v425[0];
        if (os_log_type_enabled(v115, (os_log_type_t)v425[0]))
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_endpoint_handler_used_weak_fallback";
          _os_log_impl( &dword_181A5C000,  v115,  v116,  "%{public}s Endpoint handler is not in fallback mode",  (uint8_t *)buf,  0xCu);
        }
      }

      else if ((_BYTE)v389)
      {
        int v117 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v115 = (os_log_s *)(id)gLogObj;
        id v118 = v425[0];
        v119 = os_log_type_enabled(v115, (os_log_type_t)v425[0]);
        if (v117)
        {
          if (v119)
          {
            buf[0] = 136446466;
            *(void *)&buf[1] = "nw_endpoint_handler_used_weak_fallback";
            LOWORD(buf[3]) = 2082;
            *(void *)((char *)&buf[3] + 2) = v117;
            _os_log_impl( &dword_181A5C000,  v115,  v118,  "%{public}s Endpoint handler is not in fallback mode, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x16u);
          }

          free(v117);
          if (!v114) {
            goto LABEL_146;
          }
          goto LABEL_145;
        }

        if (v119)
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_endpoint_handler_used_weak_fallback";
          _os_log_impl( &dword_181A5C000,  v115,  v118,  "%{public}s Endpoint handler is not in fallback mode, no backtrace",  (uint8_t *)buf,  0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v115 = (os_log_s *)(id)gLogObj;
        v120 = v425[0];
        if (os_log_type_enabled(v115, (os_log_type_t)v425[0]))
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_endpoint_handler_used_weak_fallback";
          _os_log_impl( &dword_181A5C000,  v115,  v120,  "%{public}s Endpoint handler is not in fallback mode, backtrace limit exceeded",  (uint8_t *)buf,  0xCu);
        }
      }
    }

    if (!v114)
    {
LABEL_146:

      id v112 = 0;
      goto LABEL_147;
    }

      if (!v23) {
        return 0LL;
      }
      os_log_type_t v27 = (char *)v23;
      goto LABEL_38;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v24 = (os_log_s *)gLogObj;
    BOOL v25 = v78;
    os_log_type_t v33 = os_log_type_enabled((os_log_t)gLogObj, v78);
    if (!backtrace_string)
    {
      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        id v80 = "nw_channel_replace_input_handler";
        BOOL v26 = "%{public}s nw_hash_table_get_node failed, no backtrace";
        goto LABEL_109;
      }

      goto LABEL_110;
    }

    if (!v33)
    {
LABEL_49:
      free(backtrace_string);
      goto LABEL_110;
    }

    *(_DWORD *)buf = 136446466;
    id v80 = "nw_channel_replace_input_handler";
    id v81 = 2082;
    *(void *)uint64_t v82 = backtrace_string;
    __int16 v34 = "%{public}s nw_hash_table_get_node failed, dumping backtrace:%{public}s";
LABEL_48:
    _os_log_impl(&dword_181A5C000, v24, v25, v34, buf, 0x16u);
    goto LABEL_49;
  }

  int v8 = node;
  if ((nw_protocol *)handle[34] == a2) {
    handle[34] = a3;
  }
  os_log_type_t v9 = (void *)(node + 32);
  if (*(void *)type)
  {
    **(void **)(node + 40) = *(void *)type;
    uint64_t v10 = v77;
    *(void *)(*(void *)type + 40LL) = *(void *)(node + 40);
    *(void *)(node + 40) = v10;
    *(void *)nw_endpoint_type_t type = 0LL;
    uint64_t v77 = type;
  }

  if (*v9)
  {
    *(void *)uint64_t v77 = *v9;
    *(void *)(*(void *)(node + 32) + 40LL) = v77;
    uint64_t v77 = *(os_log_type_t **)(node + 40);
    *(void *)(node + 32) = 0LL;
    *(void *)(node + 40) = v9;
  }

  os_log_type_t v11 = *(void *)(node + 48);
  *(void *)(node + 4_Block_object_dispose(va, 8) = 0LL;
  int v12 = *(unsigned __int8 *)(node + 153);
  uint64_t v13 = (v12 >> 1) & 1;
  flow_control_status = nw_link_get_flow_control_status(*(void **)(node + 104));
  BOOL v15 = flow_control_status;
  id v16 = *(_DWORD *)(v8 + 112);
  if ((v12 & 1) == 0)
  {
    if (!v13) {
      goto LABEL_16;
    }
LABEL_51:
    BOOL v35 = *(void *)(v8 + 88);
    uint64_t v36 = *(void **)(v8 + 96);
    if (v35)
    {
      *(void *)(v35 + 64) = v36;
      uint64_t v36 = *(void **)(v8 + 96);
    }

    else
    {
      handle[49] = v36;
    }

    const char *v36 = v35;
    if ((*(_BYTE *)(v8 + 64) & 1) == 0) {
      goto LABEL_57;
    }
    goto LABEL_55;
  }

  int v30 = *(void *)(v8 + 72);
  BOOL v31 = *(void **)(v8 + 80);
  if (v30)
  {
    *(void *)(v30 + 4_Block_object_dispose(va, 8) = v31;
    **(void **)(v8 + 80) = v30;
    if (v13) {
      goto LABEL_51;
    }
  }

  else
  {
    handle[47] = v31;
    const char *v31 = 0LL;
    if (v13) {
      goto LABEL_51;
    }
  }

LABEL_113:
  if ((*(_BYTE *)(*(void *)(a1 + 32) + 346LL) & 2) == 0)
  {
    if (nw_resolver_can_use_dns_xpc::onceToken != -1) {
      dispatch_once(&nw_resolver_can_use_dns_xpc::onceToken, &__block_literal_global_5655);
    }
    if (nw_resolver_can_use_dns_xpc::can_use_dns_xpc == 1 && MEMORY[0x189615048]) {
      int dns_getaddrinfo_locked = nw_resolver_create_dns_getaddrinfo_locked(*(NWConcrete_nw_resolver **)(a1 + 32), 0LL);
    }
    else {
LABEL_120:
    }
      int dns_getaddrinfo_locked = nw_resolver_create_dns_service_locked(*(NWConcrete_nw_resolver **)(a1 + 32));
    int v29 = dns_getaddrinfo_locked;
  }

  if (!v29)
  {
LABEL_123:
    uint64_t v68 = *(void **)(a1 + 32);
    v77[0] = MEMORY[0x1895F87A8];
    v77[1] = 3221225472LL;
    v77[2] = __nw_resolver_set_update_handler_block_invoke_79;
    v77[3] = &unk_189BC93A0;
    id v78 = v68;
    nw_resolver_update_status_locked(v78, v77);
  }

      if (v25) {
        free(v25);
      }
      return 0LL;
    }

    os_log_type_t v102 = 1;
    uint64_t v21 = *((_DWORD *)handle + 110);
  }

  else
  {
LABEL_28:
    os_log_type_t v102 = 0;
  }

  int v29 = os_channel_available_slot_count();
  int v30 = *((_DWORD *)handle + 105);
  if (v30 - 1 >= v29) {
    int v30 = 0;
  }
  BOOL v31 = v29 - v30;
  if (v31 >= a5) {
    BOOL v31 = a5;
  }
  if (0xFFFFFFFF / v21 < v31) {
    BOOL v31 = 0xFFFFFFFF / v21;
  }
  os_log_type_t v32 = v31 * v21;
  os_log_type_t v33 = a4 / v21;
  if (a4 % v21) {
    __int16 v34 = v33 + 1;
  }
  else {
    __int16 v34 = a4 / v21;
  }
  if (v32 > a4)
  {
    os_log_type_t v32 = v34 * v21;
    BOOL v31 = v34;
  }

  BOOL v103 = v31;
  if (v32 < a3)
  {
    BOOL v35 = *v11 | (handle[446] << 16);
    if ((v35 & 0x10000) == 0 || !*((void *)handle + 17)) {
      return 0LL;
    }
    uint64_t v36 = v35 & 0xFFFEFFFF;
    void *v11 = v36;
    handle[446] = BYTE2(v36);
    if (_nw_signposts_once != -1) {
      dispatch_once(&_nw_signposts_once, &__block_literal_global_65_86685);
    }
    char v37 = os_channel_available_slot_count();
    id v38 = *((_DWORD *)handle + 105);
    if (v38 - 1 >= v37) {
      id v38 = 0;
    }
    uint64_t v39 = v37 - v38;
    if (v39 >= a5) {
      uint64_t v39 = a5;
    }
    if (0xFFFFFFFF / v21 < v39) {
      uint64_t v39 = 0xFFFFFFFF / v21;
    }
    char v40 = v39 * v21;
    if (v33 * v21 == a4) {
      id v41 = a4 / v21;
    }
    else {
      id v41 = v33 + 1;
    }
    if (v40 > a4)
    {
      char v40 = v41 * v21;
      uint64_t v39 = v41;
    }

    BOOL v103 = v39;
    if (v40 < a3) {
      return 0LL;
    }
  }

  v113 = 0u;
  nw_endpoint_t v114 = 0u;
  memset(buf, 0, sizeof(buf));
  if (!*((void *)handle + 17)) {
    return 0LL;
  }
  uint32_t v42 = *((void *)handle + 36);
  next_slot = os_channel_get_next_slot();
  uint64_t v44 = 0LL;
  if (!next_slot || !v103) {
    goto LABEL_131;
  }
  LODWORD(v44) = 0;
  int v45 = 0LL;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    os_log_type_t v104 = v44;
    uint64_t v46 = next_slot;
    packet = 0LL;
    if (!v42)
    {
      nw_channel_allocate_frames(handle);
      uint32_t v42 = *((void *)handle + 36);
      if (!v42) {
        goto LABEL_129;
      }
    }

    if ((*v11 & 0x1000) != 0)
    {
      if (!*((void *)handle + 17)) {
        goto LABEL_77;
      }
      uint64_t v48 = **(_DWORD **)(StatusReg + 8);
LABEL_100:
      int v64 = (os_log_s *)__nwlog_obj();
      id v65 = v64;
      if (v48 == 35)
      {
        if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)nw_endpoint_type_t type = 136446466;
          v109 = "nw_channel_get_output_frames";
          v110 = 1024;
          LODWORD(v111[0]) = 35;
          _os_log_impl( &dword_181A5C000,  v65,  OS_LOG_TYPE_ERROR,  "%{public}s failed to get packet from channel %{darwin.errno}d",  (uint8_t *)type,  0x12u);
        }

        goto LABEL_129;
      }

      *(_DWORD *)nw_endpoint_type_t type = 136446466;
      v109 = "nw_channel_get_output_frames";
      v110 = 1024;
      LODWORD(v111[0]) = v48;
      id v66 = (char *)_os_log_send_and_compose_impl();
      v106 = OS_LOG_TYPE_ERROR;
      v105 = 0;
      if (__nwlog_fault(v66, &v106, &v105))
      {
        if (v106 == OS_LOG_TYPE_FAULT)
        {
          uint64_t v67 = (os_log_s *)__nwlog_obj();
          uint64_t v68 = v106;
          if (!os_log_type_enabled(v67, v106)) {
            goto LABEL_127;
          }
          *(_DWORD *)nw_endpoint_type_t type = 136446466;
          v109 = "nw_channel_get_output_frames";
          v110 = 1024;
          LODWORD(v111[0]) = v48;
          uint64_t v69 = "%{public}s failed to get packet from channel %{darwin.errno}d";
          goto LABEL_126;
        }

        if (!v105)
        {
          uint64_t v67 = (os_log_s *)__nwlog_obj();
          uint64_t v68 = v106;
          if (!os_log_type_enabled(v67, v106)) {
            goto LABEL_127;
          }
          *(_DWORD *)nw_endpoint_type_t type = 136446466;
          v109 = "nw_channel_get_output_frames";
          v110 = 1024;
          LODWORD(v111[0]) = v48;
          uint64_t v69 = "%{public}s failed to get packet from channel %{darwin.errno}d, backtrace limit exceeded";
          goto LABEL_126;
        }

        os_log_type_t v74 = (char *)__nw_create_backtrace_string();
        uint64_t v67 = (os_log_s *)__nwlog_obj();
        uint64_t v68 = v106;
        BOOL v75 = os_log_type_enabled(v67, v106);
        if (v74)
        {
          if (v75)
          {
            *(_DWORD *)nw_endpoint_type_t type = 136446722;
            v109 = "nw_channel_get_output_frames";
            v110 = 1024;
            LODWORD(v111[0]) = v48;
            WORD2(v111[0]) = 2082;
            *(void *)((char *)v111 + 6) = v74;
            _os_log_impl( &dword_181A5C000,  v67,  v68,  "%{public}s failed to get packet from channel %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)type,  0x1Cu);
          }

          free(v74);
          goto LABEL_127;
        }

        if (v75)
        {
          *(_DWORD *)nw_endpoint_type_t type = 136446466;
          v109 = "nw_channel_get_output_frames";
          v110 = 1024;
          LODWORD(v111[0]) = v48;
          uint64_t v69 = "%{public}s failed to get packet from channel %{darwin.errno}d, no backtrace";
LABEL_126:
          _os_log_impl(&dword_181A5C000, v67, v68, v69, (uint8_t *)type, 0x12u);
        }
      }

        if (v35) {
          free(v35);
        }
LABEL_115:
        if (v15->u8[9] != *(unsigned __int8 *)(a1 + 134))
        {
          if ((*(_BYTE *)(a1 + 136) & 1) == 0)
          {
            int v117 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
            {
              id v118 = v15->u8[9];
              v119 = *(unsigned __int8 *)(a1 + 134);
              *(_DWORD *)buf = 136447490;
              *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_process_input_frame";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = a1 + 137;
              *(_WORD *)&buf[22] = 2080;
              nw_endpoint_t v149 = " ";
              __int16 v150 = 2048;
              id v151 = a1;
              __int16 v152 = 1024;
              v153 = v118;
              __int16 v154 = 1024;
              *(_DWORD *)nw_endpoint_t v155 = v119;
              _os_log_impl( &dword_181A5C000,  v117,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s%p Invalid IPv4 protocol %u (expected %u)",  buf,  0x36u);
            }
          }

          v120 = *(void *)(a1 + 48);
          if (v120)
          {
            result = 0LL;
            ++*(void *)(v120 + 144);
            return result;
          }

          return 0LL;
        }

        BOOL v70 = *(_WORD *)(a2 + 204);
        if ((v70 & 0x100) != 0)
        {
          v147 = 0;
          *(_WORD *)buf = 0;
          *(_WORD *)nw_endpoint_type_t type = 0;
          if (g_channel_get_internet_checksum_handler)
          {
            g_channel_get_internet_checksum_handler(a2, &v147, buf, type);
            BOOL v70 = *(_WORD *)(a2 + 204);
          }
        }

        if ((v70 & 0x200) != 0)
        {
          if ((v70 & 0x400) != 0)
          {
LABEL_137:
            id v88 = *(void *)(a1 + 48);
            if (v88) {
              ++*(void *)(v88 + 136);
            }
            nw_frame_claim(a2, v27, v16, v26);
            ++*(void *)(a1 + 8);
            return 1LL;
          }

          if ((*(_BYTE *)(a1 + 136) & 1) == 0)
          {
            os_log_type_t v74 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR)) {
              goto LABEL_240;
            }
          }

          goto LABEL_241;
        }

        if ((v15 & 3) != 0)
        {
          if (v16 - 2 > 0x1D)
          {
            id v78 = ((v16 - 2) >> 1) + 1;
            v79 = 2 * (v78 & 0xFFFFFFF0);
            id v80 = (uint16x8_t *)&v15[1];
            id v81 = 0uLL;
            uint64_t v82 = v78 & 0xFFFFFFF0;
            unsigned int v83 = 0uLL;
            nw_endpoint_t v84 = 0uLL;
            id v85 = 0uLL;
            do
            {
              v86 = v80[-1];
              unsigned int v83 = (int32x4_t)vaddw_high_u16((uint32x4_t)v83, v86);
              id v81 = (int32x4_t)vaddw_u16((uint32x4_t)v81, *(uint16x4_t *)v86.i8);
              id v85 = (int32x4_t)vaddw_high_u16((uint32x4_t)v85, *v80);
              nw_endpoint_t v84 = (int32x4_t)vaddw_u16((uint32x4_t)v84, *(uint16x4_t *)v80->i8);
              v80 += 2;
              v82 -= 16LL;
            }

            while (v82);
            __int128 v71 = vaddvq_s32(vaddq_s32(vaddq_s32(v84, v81), vaddq_s32(v85, v83)));
            if ((v78 & 0xFFFFFFF0) == v78) {
              goto LABEL_135;
            }
            os_log_type_t v72 = (unsigned __int16 *)v15 + (v78 & 0xFFFFFFF0);
            uint64_t v73 = v16 - v79;
          }

          else
          {
            __int128 v71 = 0;
            os_log_type_t v72 = (unsigned __int16 *)v15;
            uint64_t v73 = v16;
          }

          do
          {
            os_log_type_t v87 = *v72++;
            v71 += v87;
            v73 -= 2;
          }

          while (v73);
LABEL_135:
          uint64_t v77 = HIWORD(v71) + (unsigned __int16)v71;
LABEL_136:
          if ((*(_BYTE *)(a1 + 136) & 1) == 0)
          {
            os_log_type_t v74 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
            {
LABEL_240:
              nw_endpoint_t v123 = bswap32(v15->u16[5]) >> 16;
              *(_DWORD *)buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_process_input_frame";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = a1 + 137;
              *(_WORD *)&buf[22] = 2080;
              nw_endpoint_t v149 = " ";
              __int16 v150 = 2048;
              id v151 = a1;
              __int16 v152 = 1024;
              v153 = v123;
              _os_log_impl( &dword_181A5C000,  v74,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s%p Invalid checksum 0x%x",  buf,  0x30u);
            }
          }

      if (v57) {
        free(v57);
      }
      goto LABEL_115;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_append_reassembled_packets";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v16;
    int v30 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v74[0]) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v31 = (os_log_s *)__nwlog_obj();
      os_log_type_t v32 = type[0];
      if (os_log_type_enabled(v31, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_append_reassembled_packets";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v16;
        os_log_type_t v33 = "%{public}s nw_frame_create(%u) failed";
LABEL_54:
        _os_log_impl(&dword_181A5C000, v31, v32, v33, buf, 0x12u);
      }
    }

    else if (LOBYTE(v74[0]))
    {
      __int16 v34 = (char *)__nw_create_backtrace_string();
      BOOL v31 = (os_log_s *)__nwlog_obj();
      os_log_type_t v32 = type[0];
      BOOL v35 = os_log_type_enabled(v31, type[0]);
      if (v34)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_append_reassembled_packets";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v16;
          *(_WORD *)&buf[18] = 2082;
          *(void *)&buf[20] = v34;
          _os_log_impl( &dword_181A5C000,  v31,  v32,  "%{public}s nw_frame_create(%u) failed, dumping backtrace:%{public}s",  buf,  0x1Cu);
        }

        free(v34);
        goto LABEL_55;
      }

      if (v35)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_append_reassembled_packets";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v16;
        os_log_type_t v33 = "%{public}s nw_frame_create(%u) failed, no backtrace";
        goto LABEL_54;
      }
    }

    else
    {
      BOOL v31 = (os_log_s *)__nwlog_obj();
      os_log_type_t v32 = type[0];
      if (os_log_type_enabled(v31, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_append_reassembled_packets";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v16;
        os_log_type_t v33 = "%{public}s nw_frame_create(%u) failed, backtrace limit exceeded";
        goto LABEL_54;
      }
    }

        goto LABEL_117;
      }

      if (!(_BYTE)v167)
      {
        __nwlog_obj();
        os_log_type_t v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v88 = type[0];
        if (os_log_type_enabled(v74, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v5 + 609;
          _os_log_impl( &dword_181A5C000,  v74,  v88,  "%{public}s %s Failed to repair protocol stack: Could not add old input_protocol, backtrace limit exceeded",  buf,  0x16u);
        }

        goto LABEL_113;
      }

      nw_endpoint_t v84 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v79 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v85 = type[0];
      v86 = os_log_type_enabled(v79, type[0]);
      if (v84)
      {
        if (v86)
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v5 + 609;
          *(_WORD *)&buf[22] = 2082;
          v172 = v84;
          _os_log_impl( &dword_181A5C000,  v79,  v85,  "%{public}s %s Failed to repair protocol stack: Could not add old input_protocol, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v84);
LABEL_117:
        if (!v73) {
          goto LABEL_53;
        }
LABEL_118:
        free(v73);
        goto LABEL_53;
      }

      if (v86)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v5 + 609;
        _os_log_impl( &dword_181A5C000,  v79,  v85,  "%{public}s %s Failed to repair protocol stack: Could not add old input_protocol, no backtrace",  buf,  0x16u);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v72 = (id)gLogObj;
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v5 + 609;
      *(_WORD *)&buf[22] = 2114;
      v172 = v155;
      uint64_t v73 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v167) = 0;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v74 = (os_log_s *)(id)gLogObj;
        BOOL v75 = type[0];
        if (os_log_type_enabled(v74, type[0]))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v5 + 609;
          *(_WORD *)&buf[22] = 2114;
          v172 = v155;
          _os_log_impl( &dword_181A5C000,  v74,  v75,  "%{public}s %s Failed to repair protocol stack: Could not undo failed %{public}@ insertion",  buf,  0x20u);
        }

        goto LABEL_113;
      }

      if (!(_BYTE)v167)
      {
        __nwlog_obj();
        os_log_type_t v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v87 = type[0];
        if (os_log_type_enabled(v74, type[0]))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v5 + 609;
          *(_WORD *)&buf[22] = 2114;
          v172 = v155;
          _os_log_impl( &dword_181A5C000,  v74,  v87,  "%{public}s %s Failed to repair protocol stack: Could not undo failed %{public}@ insertion, backtrace limit exceeded",  buf,  0x20u);
        }

        goto LABEL_113;
      }

      id v78 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v79 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v80 = type[0];
      id v81 = os_log_type_enabled(v79, type[0]);
      if (v78)
      {
        if (v81)
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v5 + 609;
          *(_WORD *)&buf[22] = 2114;
          v172 = v155;
          LOWORD(v173) = 2082;
          *(void *)((char *)&v173 + 2) = v78;
          _os_log_impl( &dword_181A5C000,  v79,  v80,  "%{public}s %s Failed to repair protocol stack: Could not undo failed %{public}@ insertion, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v78);
        if (!v73) {
          goto LABEL_53;
        }
        goto LABEL_118;
      }

      if (v81)
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v5 + 609;
        *(_WORD *)&buf[22] = 2114;
        v172 = v155;
        _os_log_impl( &dword_181A5C000,  v79,  v80,  "%{public}s %s Failed to repair protocol stack: Could not undo failed %{public}@ insertion, no backtrace",  buf,  0x20u);
      }
    }

    goto LABEL_117;
  }

  id v56 = *((void *)v5 + 40);
  if (v56)
  {
    char v57 = *(void *)(v56 + 24);
    if (v57)
    {
      int v58 = *(void (**)(uint64_t, char *))(v57 + 16);
      if (v58) {
        v58(v56, v5 + 288);
      }
    }
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v59 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v5 + 609;
    *(_WORD *)&buf[22] = 2114;
    v172 = v155;
    _os_log_impl( &dword_181A5C000,  v59,  OS_LOG_TYPE_INFO,  "%{public}s %s Attached %{public}@ protocol above framer",  buf,  0x20u);
  }

  id v60 = *(void *)(v24 + 24);
  if (!v60 || (id v61 = *(void (**)(uint64_t, uint64_t))(v60 + 24)) == 0LL)
  {
    __nwlog_obj();
    id v129 = (void *)objc_claimAutoreleasedReturnValue();
    id v130 = *(const char **)(v24 + 16);
    if (!v130) {
      id v130 = "invalid";
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v130;
    uint64_t v131 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v167) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v132 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v133 = type[0];
      if (os_log_type_enabled(v132, type[0]))
      {
        id v134 = *(const char **)(v24 + 16);
        if (!v134) {
          id v134 = "invalid";
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v134;
        _os_log_impl( &dword_181A5C000,  v132,  v133,  "%{public}s protocol %{public}s has invalid connect callback",  buf,  0x16u);
      }
    }

    else
    {
      if ((_BYTE)v167)
      {
        os_log_type_t v139 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v140 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v141 = type[0];
        nw_endpoint_t v142 = os_log_type_enabled(v140, type[0]);
        if (v139)
        {
          if (v142)
          {
            v143 = *(const char **)(v24 + 16);
            if (!v143) {
              v143 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v143;
            *(_WORD *)&buf[22] = 2082;
            v172 = v139;
            _os_log_impl( &dword_181A5C000,  v140,  v141,  "%{public}s protocol %{public}s has invalid connect callback, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v139);
        }

        else
        {
          if (v142)
          {
            __int16 v148 = *(const char **)(v24 + 16);
            if (!v148) {
              __int16 v148 = "invalid";
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v148;
            _os_log_impl( &dword_181A5C000,  v140,  v141,  "%{public}s protocol %{public}s has invalid connect callback, no backtrace",  buf,  0x16u);
          }
        }

        goto LABEL_254;
      }

      __nwlog_obj();
      v132 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v146 = type[0];
      if (os_log_type_enabled(v132, type[0]))
      {
        v147 = *(const char **)(v24 + 16);
        if (!v147) {
          v147 = "invalid";
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v147;
        _os_log_impl( &dword_181A5C000,  v132,  v146,  "%{public}s protocol %{public}s has invalid connect callback, backtrace limit exceeded",  buf,  0x16u);
      }
    }

LABEL_254:
    if (v131) {
      free(v131);
    }
    goto LABEL_49;
  }

  v61(v24, v10);
LABEL_49:
  id v41 = 1LL;
LABEL_54:

LABEL_86:
  os_log_type_t v9 = v153;
LABEL_87:

LABEL_88:
  return v41;
}

      if (v28) {
        free(v28);
      }
      goto LABEL_21;
    }

    __nwlog_obj();
    id v38 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v77 = "__nw_protocol_input_available";
    uint64_t v39 = (char *)_os_log_send_and_compose_impl();

    v74[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(p_paths_log_id_num) = 0;
    if (__nwlog_fault(v39, v74, &p_paths_log_id_num))
    {
      if (v74[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v41 = v74[0];
        if (os_log_type_enabled(v40, v74[0]))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v77 = "__nw_protocol_input_available";
          _os_log_impl(&dword_181A5C000, v40, v41, "%{public}s called with null protocol", buf, 0xCu);
        }
      }

      else if ((_BYTE)p_paths_log_id_num)
      {
        uint64_t v54 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v55 = v74[0];
        id v56 = os_log_type_enabled(v40, v74[0]);
        if (v54)
        {
          if (v56)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v77 = "__nw_protocol_input_available";
            id v78 = 2082;
            v79 = v54;
            _os_log_impl( &dword_181A5C000,  v40,  v55,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v54);
          goto LABEL_131;
        }

        if (v56)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v77 = "__nw_protocol_input_available";
          _os_log_impl(&dword_181A5C000, v40, v55, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        char v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v65 = v74[0];
        if (os_log_type_enabled(v40, v74[0]))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v77 = "__nw_protocol_input_available";
          _os_log_impl( &dword_181A5C000,  v40,  v65,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

        goto LABEL_114;
      }

      if (!v58)
      {
        __nwlog_obj();
        BOOL v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v44 = type;
        if (os_log_type_enabled(v26, type))
        {
          int v45 = (const char *)v10[2];
          if (!v45) {
            int v45 = "invalid";
          }
          *(_DWORD *)applier = 136446722;
          *(void *)&void applier[4] = "__nw_protocol_notify";
          *(_WORD *)&applier[12] = 2082;
          *(void *)&applier[14] = v45;
          *(_WORD *)&applier[22] = 2048;
          uint64_t v69 = v10;
          _os_log_impl( &dword_181A5C000,  v26,  v44,  "%{public}s protocol %{public}s (%p) has invalid notify callback, backtrace limit exceeded",  applier,  0x20u);
        }

        goto LABEL_113;
      }

      BOOL v35 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v57 = type;
      uint64_t v36 = os_log_type_enabled(v26, type);
      if (!v35)
      {
        if (v36)
        {
          uint64_t v46 = (const char *)v10[2];
          if (!v46) {
            uint64_t v46 = "invalid";
          }
          *(_DWORD *)applier = 136446722;
          *(void *)&void applier[4] = "__nw_protocol_notify";
          *(_WORD *)&applier[12] = 2082;
          *(void *)&applier[14] = v46;
          *(_WORD *)&applier[22] = 2048;
          uint64_t v69 = v10;
          _os_log_impl( &dword_181A5C000,  v26,  v57,  "%{public}s protocol %{public}s (%p) has invalid notify callback, no backtrace",  applier,  0x20u);
        }

        goto LABEL_113;
      }

      if (v36)
      {
        char v37 = (const char *)v10[2];
        if (!v37) {
          char v37 = "invalid";
        }
        *(_DWORD *)applier = 136446978;
        *(void *)&void applier[4] = "__nw_protocol_notify";
        *(_WORD *)&applier[12] = 2082;
        *(void *)&applier[14] = v37;
        *(_WORD *)&applier[22] = 2048;
        uint64_t v69 = v10;
        LOWORD(v70) = 2082;
        *(void *)((char *)&v70 + 2) = v35;
        _os_log_impl( &dword_181A5C000,  v26,  v57,  "%{public}s protocol %{public}s (%p) has invalid notify callback, dumping backtrace:%{public}s",  applier,  0x2Au);
      }

      free(v35);
    }

      free(v91);
      goto LABEL_114;
    }

    if ((nw_endpoint_handler_get_logging_disabled(v5) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      id v61 = (id)gconnectionLogObj;
      id v62 = nw_endpoint_handler_get_id_string(v5);
      uint32_t v63 = nw_endpoint_handler_dry_run_string(v5);
      int v64 = nw_endpoint_handler_copy_endpoint(v5);
      id v65 = nw_endpoint_get_logging_description(v64);
      id v66 = nw_endpoint_handler_state_string(v5);
      uint64_t v67 = nw_endpoint_handler_mode_string(v5);
      uint64_t v68 = nw_endpoint_handler_copy_current_path(v5);
      *(_DWORD *)buf = 136447746;
      *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context_internal";
      v215 = 2082;
      v216 = (uint64_t)v62;
      v217 = 2082;
      unint64_t v218 = (uint64_t)v63;
      id v219 = 2082;
      v220 = v65;
      v221 = 2082;
      v222 = v66;
      nw_endpoint_t v223 = 2082;
      unint64_t v224 = v67;
      v225 = 2114;
      nw_endpoint_t v226 = v68;
      uint64_t v69 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v212 = 0;
      if ((__nwlog_fault(v69, type, &v212) & 1) != 0)
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          BOOL v70 = (os_log_s *)(id)gconnectionLogObj;
          __int128 v71 = type[0];
          if (os_log_type_enabled(v70, type[0]))
          {
            os_log_type_t v72 = nw_endpoint_handler_get_id_string(v5);
            uint64_t v73 = nw_endpoint_handler_dry_run_string(v5);
            logb = v70;
            os_log_type_t v74 = nw_endpoint_handler_copy_endpoint(v5);
            v190 = v69;
            BOOL v75 = nw_endpoint_get_logging_description(v74);
            os_log_type_t v76 = nw_endpoint_handler_state_string(v5);
            uint64_t v77 = nw_endpoint_handler_mode_string(v5);
            id v78 = nw_endpoint_handler_copy_current_path(v5);
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context_internal";
            v215 = 2082;
            v216 = (uint64_t)v72;
            v217 = 2082;
            unint64_t v218 = (uint64_t)v73;
            id v219 = 2082;
            v220 = v75;
            v221 = 2082;
            v222 = v76;
            nw_endpoint_t v223 = 2082;
            unint64_t v224 = v77;
            v225 = 2114;
            nw_endpoint_t v226 = v78;
            BOOL v70 = logb;
            _os_log_impl( &dword_181A5C000,  logb,  v71,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to add new flow pr otocol to hash table",  buf,  0x48u);

            uint64_t v69 = v190;
          }
        }

        else if (v212)
        {
          v79 = __nw_create_backtrace_string();
          if (v79)
          {
            id v80 = (char *)v79;
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            id v81 = (os_log_s *)(id)gconnectionLogObj;
            uint64_t v82 = type[0];
            if (os_log_type_enabled(v81, type[0]))
            {
              unsigned int v83 = nw_endpoint_handler_get_id_string(v5);
              nw_endpoint_t v84 = nw_endpoint_handler_dry_run_string(v5);
              logc = v81;
              id v85 = v83;
              id v191 = v69;
              v208 = nw_endpoint_handler_copy_endpoint(v5);
              v86 = nw_endpoint_get_logging_description(v208);
              os_log_type_t v87 = nw_endpoint_handler_state_string(v5);
              id v88 = nw_endpoint_handler_mode_string(v5);
              char v89 = nw_endpoint_handler_copy_current_path(v5);
              *(_DWORD *)buf = 136448002;
              *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context_internal";
              v215 = 2082;
              v216 = (uint64_t)v85;
              v217 = 2082;
              unint64_t v218 = (uint64_t)v84;
              id v219 = 2082;
              v220 = v86;
              v221 = 2082;
              v222 = v87;
              nw_endpoint_t v223 = 2082;
              unint64_t v224 = v88;
              v225 = 2114;
              nw_endpoint_t v226 = v89;
              size_t v227 = 2082;
              v228 = v80;
              id v81 = logc;
              _os_log_impl( &dword_181A5C000,  logc,  v82,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to add new flow protocol to hash table, dumping backtrace:%{public}s",  buf,  0x52u);

              uint64_t v69 = v191;
            }

            free(v80);
            if (!v69) {
              goto LABEL_105;
            }
            goto LABEL_104;
          }

          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          BOOL v70 = (os_log_s *)(id)gconnectionLogObj;
          v125 = type[0];
          if (os_log_type_enabled(v70, type[0]))
          {
            unsigned int v126 = nw_endpoint_handler_get_id_string(v5);
            id v127 = nw_endpoint_handler_dry_run_string(v5);
            logg = v70;
            id v128 = nw_endpoint_handler_copy_endpoint(v5);
            os_log_type_t v195 = v69;
            id v129 = nw_endpoint_get_logging_description(v128);
            id v130 = nw_endpoint_handler_state_string(v5);
            uint64_t v131 = nw_endpoint_handler_mode_string(v5);
            v132 = nw_endpoint_handler_copy_current_path(v5);
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context_internal";
            v215 = 2082;
            v216 = (uint64_t)v126;
            v217 = 2082;
            unint64_t v218 = (uint64_t)v127;
            id v219 = 2082;
            v220 = v129;
            v221 = 2082;
            v222 = v130;
            nw_endpoint_t v223 = 2082;
            unint64_t v224 = v131;
            v225 = 2114;
            nw_endpoint_t v226 = v132;
            BOOL v70 = logg;
            _os_log_impl( &dword_181A5C000,  logg,  v125,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to add new flow pr otocol to hash table, no backtrace",  buf,  0x48u);

            uint64_t v69 = v195;
          }
        }

        else
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          BOOL v70 = (os_log_s *)(id)gconnectionLogObj;
          id v108 = type[0];
          if (os_log_type_enabled(v70, type[0]))
          {
            v109 = nw_endpoint_handler_get_id_string(v5);
            v110 = nw_endpoint_handler_dry_run_string(v5);
            loge = v70;
            id v111 = nw_endpoint_handler_copy_endpoint(v5);
            v193 = v69;
            id v112 = nw_endpoint_get_logging_description(v111);
            v113 = nw_endpoint_handler_state_string(v5);
            nw_endpoint_t v114 = nw_endpoint_handler_mode_string(v5);
            unint64_t v115 = nw_endpoint_handler_copy_current_path(v5);
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context_internal";
            v215 = 2082;
            v216 = (uint64_t)v109;
            v217 = 2082;
            unint64_t v218 = (uint64_t)v110;
            id v219 = 2082;
            v220 = v112;
            v221 = 2082;
            v222 = v113;
            nw_endpoint_t v223 = 2082;
            unint64_t v224 = v114;
            v225 = 2114;
            nw_endpoint_t v226 = v115;
            BOOL v70 = loge;
            _os_log_impl( &dword_181A5C000,  loge,  v108,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to add new flow pr otocol to hash table, backtrace limit exceeded",  buf,  0x48u);

            uint64_t v69 = v193;
          }
        }
      }

      if (v69) {
LABEL_104:
      }
        free(v69);
    }

  if (v29) {
LABEL_114:
  }
    free(v29);
LABEL_8:
  uint64_t v4 = 0LL;
LABEL_58:

  return v4;
}

      goto LABEL_117;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v37 = (os_log_s *)(id)gLogObj;
      id v78 = v149[0];
      if (os_log_type_enabled(v37, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connected_socket_internal";
        _os_log_impl( &dword_181A5C000,  v37,  v78,  "%{public}s nw_endpoint_handler_create_with_connected_socket failed, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_113;
    }

    uint64_t v48 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v49 = (os_log_s *)(id)gLogObj;
    os_log_type_t v76 = v149[0];
    uint64_t v77 = os_log_type_enabled(v49, (os_log_type_t)v149[0]);
    if (v48)
    {
      if (v77)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connected_socket_internal";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v48;
        _os_log_impl( &dword_181A5C000,  v49,  v76,  "%{public}s nw_endpoint_handler_create_with_connected_socket failed, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_109;
    }

    if (v77)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_create_with_connected_socket_internal";
      _os_log_impl( &dword_181A5C000,  v49,  v76,  "%{public}s nw_endpoint_handler_create_with_connected_socket failed, no backtrace",  buf,  0xCu);
    }

    goto LABEL_116;
  }

  uint64_t v73 = v27;
LABEL_120:

LABEL_121:
  return v73;
}

  uint64_t v69 = *(_DWORD *)v21;
  *(_DWORD *)v21 |= 0x40000u;
  if ((v69 & 0x10) != 0)
  {
    asprintf(&v144, "/.well-known/masque/udp/*/*/");
  }

  else if ((v69 & 0x28) != 0)
  {
    BOOL v70 = nw_endpoint_get_hostname(*(nw_endpoint_t *)(a1 + 312));
    __int128 v71 = (const __CFAllocator *)*MEMORY[0x189604DB0];
    os_log_type_t v72 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x189604DB0], v70, 0x8000100u);
    if (v72)
    {
      uint64_t v73 = v72;
      URLPathAllowedCharacterSet = (const __CFCharacterSet *)_CFURLComponentsGetURLPathAllowedCharacterSet();
      MutableCopy = CFCharacterSetCreateMutableCopy(v71, URLPathAllowedCharacterSet);
      if (MutableCopy)
      {
        os_log_type_t v76 = MutableCopy;
        CFCharacterSetRemoveCharactersInString(MutableCopy, @":");
        uint64_t v77 = (const __CFString *)_CFStringCreateByAddingPercentEncodingWithAllowedCharacters();
        if (v77)
        {
          id v78 = v77;
          Length = CFStringGetLength(v77);
          id v80 = Length + 1;
          if (Length == -1)
          {
            os_log_type_t v139 = (os_log_s *)__nwlog_obj();
            os_log_type_enabled(v139, OS_LOG_TYPE_ERROR);
            *(_DWORD *)&buf[0].sa_len = 136446210;
            *(void *)&buf[0].sa_data[2] = "strict_calloc";
            char v140 = (void *)_os_log_send_and_compose_impl();
            free(v140);
          }

          id v81 = (char *)calloc(1uLL, v80);
          if (!v81)
          {
            v141 = (os_log_s *)__nwlog_obj();
            os_log_type_enabled(v141, OS_LOG_TYPE_ERROR);
            *(_DWORD *)&buf[0].sa_len = 136446722;
            *(void *)&buf[0].sa_data[2] = "strict_calloc";
            *(_WORD *)&buf[0].sa_data[10] = 2048;
            *(void *)&buf[0].sa_data[12] = 1LL;
            *(_WORD *)&buf[1].sa_data[4] = 2048;
            *(void *)&buf[1].sa_data[6] = v80;
            nw_endpoint_t v142 = (void *)_os_log_send_and_compose_impl();
            free(v142);
            uint64_t v21 = (_BYTE *)(a1 + 527);
          }

          CFStringGetCString(v78, v81, v80, 0x8000100u);
          CFRelease(v78);
        }

        else
        {
          id v81 = 0LL;
        }

        CFRelease(v76);
      }

      else
      {
        id v81 = 0LL;
      }

      CFRelease(v73);
    }

    else
    {
      id v81 = 0LL;
    }

    if ((*(_DWORD *)v21 & 8) != 0)
    {
      nw_endpoint_get_port(*(nw_endpoint_t *)(a1 + 312));
      asprintf(&v144, "/.well-known/masque/udp/%s/%u/");
    }

    else if ((*(_DWORD *)v21 & 0x20) != 0)
    {
      asprintf(&v144, "/.well-known/masque/ip/%s/%u/");
    }

    if (v81) {
      free(v81);
    }
  }

  id v66 = 0;
  BOOL v25 = "https";
  uint64_t v59 = "CONNECT";
  uint64_t v67 = v145;
  if (!v145) {
    goto LABEL_171;
  }
LABEL_148:
  uint64_t v82 = *v67;
  if (v82 != 32 && v82 != 9)
  {
    if (!*v67) {
      goto LABEL_171;
    }
    unsigned int v83 = v67 - 1;
    while (1)
    {
      nw_endpoint_t v84 = (v82 - 33) < 0x5E || v82 == 9;
      if (!v84 && v82 != 32 && (v82 & 0x80) == 0) {
        break;
      }
      uint64_t v82 = v83[2];
      ++v83;
      if (!v82)
      {
        id v85 = *v83;
        if (v85 != 9 && v85 != 32) {
          goto LABEL_171;
        }
        break;
      }
    }
  }

  if ((v21[2] & 1) == 0)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
    }
    v86 = (os_log_s *)gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)&buf[0].sa_len = 136446722;
      *(void *)&buf[0].sa_data[2] = a1 + 531;
      *(_WORD *)&buf[0].sa_data[10] = 2080;
      *(void *)&buf[0].sa_data[12] = " ";
      *(_WORD *)&buf[1].sa_data[4] = 2080;
      *(void *)&buf[1].sa_data[6] = v145;
      _os_log_impl( &dword_181A5C000,  v86,  OS_LOG_TYPE_ERROR,  "%{public}s%sInvalid characters in authority: %s",  &buf[0].sa_len,  0x20u);
    }
  }

  nw_masque_mark_failed_with_error(a1, 22);
  if (v145)
  {
    free(v145);
    v145 = 0LL;
  }

  if (v144) {
    free(v144);
  }
}

              goto LABEL_114;
            }

            if (!v101[0])
            {
              __nwlog_obj();
              BOOL v70 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              uint64_t v82 = type[0];
              if (os_log_type_enabled(v70, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_masque_server_get_listener_association_port";
                _os_log_impl( &dword_181A5C000,  v70,  v82,  "%{public}s called with null key, backtrace limit exceeded",  buf,  0xCu);
              }

              goto LABEL_113;
            }

            backtrace_string = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            BOOL v70 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v79 = type[0];
            id v80 = os_log_type_enabled(v70, type[0]);
            if (!backtrace_string)
            {
              if (v80)
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_masque_server_get_listener_association_port";
                _os_log_impl(&dword_181A5C000, v70, v79, "%{public}s called with null key, no backtrace", buf, 0xCu);
              }

              goto LABEL_113;
            }

            if (v80)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_masque_server_get_listener_association_port";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v70,  v79,  "%{public}s called with null key, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            goto LABEL_101;
          }
        }

        else
        {
          __nwlog_obj();
          uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_server_get_listener_association_port";
          uint64_t v69 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          v101[0] = 0;
          if (__nwlog_fault(v69, type, v101))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              BOOL v70 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              __int128 v71 = type[0];
              if (os_log_type_enabled(v70, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_masque_server_get_listener_association_port";
                _os_log_impl(&dword_181A5C000, v70, v71, "%{public}s called with null server", buf, 0xCu);
              }

              goto LABEL_113;
            }

            if (!v101[0])
            {
              __nwlog_obj();
              BOOL v70 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              id v81 = type[0];
              if (os_log_type_enabled(v70, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_masque_server_get_listener_association_port";
                _os_log_impl( &dword_181A5C000,  v70,  v81,  "%{public}s called with null server, backtrace limit exceeded",  buf,  0xCu);
              }

              goto LABEL_113;
            }

            backtrace_string = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            BOOL v70 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            uint64_t v77 = type[0];
            id v78 = os_log_type_enabled(v70, type[0]);
            if (!backtrace_string)
            {
              if (v78)
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_masque_server_get_listener_association_port";
                _os_log_impl(&dword_181A5C000, v70, v77, "%{public}s called with null server, no backtrace", buf, 0xCu);
              }

              goto LABEL_113;
            }

            if (v78)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_masque_server_get_listener_association_port";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v70,  v77,  "%{public}s called with null server, dumping backtrace:%{public}s",  buf,  0x16u);
            }

    if (v49) {
      free(v49);
    }
    int v20 = 0LL;
    goto LABEL_38;
  }

        free(v19);
        goto LABEL_114;
      }

      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v55 = "nw_utilities_public_key_info_for_sec_identity";
        _os_log_impl(&dword_181A5C000, v20, v37, "%{public}s called with null secIdentity, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v47 = privateKeyRef;
      if (os_log_type_enabled(v20, (os_log_type_t)privateKeyRef))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v55 = "nw_utilities_public_key_info_for_sec_identity";
        _os_log_impl( &dword_181A5C000,  v20,  v47,  "%{public}s called with null secIdentity, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_105;
  }

  privateKeyRef = 0LL;
  id v5 = SecIdentityCopyPrivateKey(v3, &privateKeyRef);
  CFRelease(v4);
  if (!v5) {
    goto LABEL_25;
  }
  if (privateKeyRef)
  {
    CFRelease(privateKeyRef);
    privateKeyRef = 0LL;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v6 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  uint64_t v55 = "nw_utilities_public_key_info_for_sec_identity";
  uint32_t v7 = (char *)_os_log_send_and_compose_impl();

  nw_endpoint_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v51 = 0;
  if (!__nwlog_fault(v7, &type, &v51))
  {
LABEL_23:
    if (!v7) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }

  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v8 = (os_log_s *)(id)gLogObj;
    os_log_type_t v9 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v55 = "nw_utilities_public_key_info_for_sec_identity";
      _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s SecIdentityCopyPrivateKey failed", buf, 0xCu);
    }

    if (v69) {
      free(v69);
    }
    return 0LL;
  }

  id v3 = *a1;
  if (a2)
  {
    if (v3)
    {
      uint64_t v4 = 0LL;
      LODWORD(v5) = 0;
      id v6 = &nwlog_legacy_init(void)::init_once;
      while (1)
      {
        uint32_t v7 = *(_DWORD *)(v3 + 52);
        int v8 = v7 ? v7 - (*(_DWORD *)(v3 + 56) + *(_DWORD *)(v3 + 60)) : 0;
        id v3 = *(void *)(v3 + 32);
        os_log_type_t v9 = (v4 << 31 >> 31) + 1;
        uint64_t v10 = v9 << 31 >> 31;
        if (v10 != v9 || v10 < 0) {
          break;
        }
        uint64_t v4 = (v4 << 31 >> 31) + 1;
        os_log_type_t v11 = __CFADD__((_DWORD)v5, v8);
        id v5 = v5 + v8;
        if (v11) {
          goto LABEL_33;
        }
LABEL_6:
        if (!v3) {
          goto LABEL_96;
        }
      }

      int v12 = v6;
      pthread_once(v6, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v13 = v10;
      *(_DWORD *)buf = 136446978;
      v79 = "nw_frame_array_get_frame_count";
      id v80 = 2082;
      id v81 = "frame_count";
      uint64_t v82 = 2048;
      unsigned int v83 = 1LL;
      nw_endpoint_t v84 = 2048;
      id v85 = v10;
      os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();
      nw_endpoint_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v76 = 0;
      if (__nwlog_fault(v14, &type, &v76))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(v12, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v15 = gLogObj;
          id v16 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_29;
          }
          *(_DWORD *)buf = 136446978;
          v79 = "nw_frame_array_get_frame_count";
          id v80 = 2082;
          id v81 = "frame_count";
          uint64_t v82 = 2048;
          unsigned int v83 = 1LL;
          nw_endpoint_t v84 = 2048;
          id v85 = v13;
          char v17 = (os_log_s *)v15;
          id v18 = v16;
          id v19 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_28:
          _os_log_impl(&dword_181A5C000, v17, v18, v19, buf, 0x2Au);
          goto LABEL_29;
        }

        if (!v76)
        {
          pthread_once(v12, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v24 = gLogObj;
          BOOL v25 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_29;
          }
          *(_DWORD *)buf = 136446978;
          v79 = "nw_frame_array_get_frame_count";
          id v80 = 2082;
          id v81 = "frame_count";
          uint64_t v82 = 2048;
          unsigned int v83 = 1LL;
          nw_endpoint_t v84 = 2048;
          id v85 = v13;
          char v17 = (os_log_s *)v24;
          id v18 = v25;
          id v19 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_28;
        }

        int v20 = (char *)__nw_create_backtrace_string();
        pthread_once(v12, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v21 = (os_log_s *)gLogObj;
        int v22 = type;
        BOOL v23 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (!v20)
        {
          if (!v23) {
            goto LABEL_29;
          }
          *(_DWORD *)buf = 136446978;
          v79 = "nw_frame_array_get_frame_count";
          id v80 = 2082;
          id v81 = "frame_count";
          uint64_t v82 = 2048;
          unsigned int v83 = 1LL;
          nw_endpoint_t v84 = 2048;
          id v85 = v10;
          char v17 = v21;
          id v18 = v22;
          id v19 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          goto LABEL_28;
        }

        if (v23)
        {
          *(_DWORD *)buf = 136447234;
          v79 = "nw_frame_array_get_frame_count";
          id v80 = 2082;
          id v81 = "frame_count";
          uint64_t v82 = 2048;
          unsigned int v83 = 1LL;
          nw_endpoint_t v84 = 2048;
          id v85 = v10;
          v86 = 2082;
          os_log_type_t v87 = v20;
          _os_log_impl( &dword_181A5C000,  v21,  v22,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
        }

        free(v20);
      }

LABEL_169:
              goto LABEL_170;
            }

                objc_storeStrong(a2, v17);
                goto LABEL_114;
              }

              if (gLogDatapath)
              {
                __nwlog_obj();
                char v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136446466;
                  id v62 = "nw_nat64_get_interface_state_internal";
                  uint32_t v63 = 2082;
                  *(void *)int v64 = v27;
                  _os_log_impl( &dword_181A5C000,  v37,  OS_LOG_TYPE_DEBUG,  "%{public}s bailing because path not eligible: %{public}s",  buf,  0x16u);
                }

          if (v58) {
            free(v58);
          }

          id v18 = 0LL;
          goto LABEL_116;
        }

        if (!nw_parameters_get_logging_disabled(*(void *)&v16[10]._os_unfair_lock_opaque))
        {
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
          }
          os_log_type_t v28 = (os_log_s *)(id)gbrowserLogObj;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            int v29 = v16[48]._os_unfair_lock_opaque;
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_browser_dns_service_query_record_callback";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v29;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = a5;
            _os_log_impl( &dword_181A5C000,  v28,  OS_LOG_TYPE_ERROR,  "%{public}s [B%u] txt: a TXT record was delivered for an unknown %s",  buf,  0x1Cu);
          }
        }
      }

      os_unfair_lock_unlock(v16 + 2);
LABEL_22:

      return;
    }

    __nwlog_obj();
    int v45 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)key = 136446210;
    nw_endpoint_t v114 = "nw_browser_dns_service_query_record_callback";
    uint64_t v46 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    v123[0] = 0;
    if (__nwlog_fault(v46, buf, v123))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v48 = buf[0];
        if (os_log_type_enabled(v47, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)key = 136446210;
          nw_endpoint_t v114 = "nw_browser_dns_service_query_record_callback";
          _os_log_impl(&dword_181A5C000, v47, v48, "%{public}s called with null browser", (uint8_t *)key, 0xCu);
        }
      }

      else if (v123[0])
      {
        int v52 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v53 = buf[0];
        uint64_t v54 = os_log_type_enabled(v47, (os_log_type_t)buf[0]);
        if (v52)
        {
          if (v54)
          {
            *(_DWORD *)key = 136446466;
            nw_endpoint_t v114 = "nw_browser_dns_service_query_record_callback";
            unint64_t v115 = 2082;
            v116 = v52;
            _os_log_impl( &dword_181A5C000,  v47,  v53,  "%{public}s called with null browser, dumping backtrace:%{public}s",  (uint8_t *)key,  0x16u);
          }

          free(v52);
          goto LABEL_93;
        }

        if (v54)
        {
          *(_DWORD *)key = 136446210;
          nw_endpoint_t v114 = "nw_browser_dns_service_query_record_callback";
          _os_log_impl( &dword_181A5C000,  v47,  v53,  "%{public}s called with null browser, no backtrace",  (uint8_t *)key,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v56 = buf[0];
        if (os_log_type_enabled(v47, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)key = 136446210;
          nw_endpoint_t v114 = "nw_browser_dns_service_query_record_callback";
          _os_log_impl( &dword_181A5C000,  v47,  v56,  "%{public}s called with null browser, backtrace limit exceeded",  (uint8_t *)key,  0xCu);
        }
      }
    }

    free(v42);
    if (!v33) {
      return;
    }
LABEL_144:
    free(v33);
    return;
  }

  os_log_type_t v11 = handle + 730;
  int v12 = (void *)(v10 + 576);
  while (1)
  {
    int v12 = (void *)*v12;
    if (!v12) {
      break;
    }
    if ((char *)v12[4] == handle)
    {
      void *v11 = 64;
      uint64_t v13 = v12[5];
      if (v13 <= 0x3E)
      {
        os_log_type_t v14 = handle + 731;
        handle[730] = v13 | 0x40;
LABEL_38:
        id v19 = *(FILE **)(v10 + 544);
        if (v19)
        {
          fwrite("qdec: debug: ", 0xDuLL, 1uLL, v19);
          fprintf( *(FILE **)(v10 + 544),  "cancelled stream %llu; generate instruction of %u bytes",
            v12[5],
            (_DWORD)v14 - (_DWORD)v11);
          fputc(10, *(FILE **)(v10 + 544));
        }

        int v20 = (void *)*v12;
        uint64_t v21 = (void *)v12[1];
        if (*v12)
        {
          v20[1] = v21;
          uint64_t v21 = (void *)v12[1];
        }

        else
        {
          *(void *)(v10 + 584) = v21;
        }

        *uint64_t v21 = v20;
        if ((v12[13] & 4) != 0)
        {
          int v22 = v12[2];
          if (v22) {
            *(void *)(v22 + 24) = v12[3];
          }
          else {
            *(void *)(v10 + 16LL * (v12[8] & 7) + 600) = v12[3];
          }
          *(void *)v12[3] = v22;
          --*(_DWORD *)(v10 + 720);
        }

        free(v12);
        *(_DWORD *)(v10 + 520) += (_DWORD)v14 - (_DWORD)v11;
        if (v14 - v11 >= 0)
        {
          handle[635] = (_BYTE)v14 - ((_BYTE)handle - 38);
          goto LABEL_68;
        }

    if (v45) {
      free(v45);
    }
LABEL_115:
    if (!v5) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }

  __nwlog_obj();
  uint64_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v54, OS_LOG_TYPE_ERROR);
  uint32_t v63 = 136446722;
  int v64 = "strict_calloc";
  id v65 = 2048;
  *(void *)id v66 = 1LL;
  *(_WORD *)&v66[8] = 2048;
  *(void *)&v66[10] = 25600LL;
  uint64_t v55 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v55);
  if (!result)
  {
    free(v55);
    goto LABEL_62;
  }

  __break(1u);
  return result;
}

            if (!v5) {
              goto LABEL_19;
            }
            goto LABEL_114;
          }

          if (!v48)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            id v6 = (os_log_s *)gconnectionLogObj;
            uint32_t v7 = type;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
            {
              int v45 = *(_DWORD *)(a1 + 368);
              *(_DWORD *)buf = 136447234;
              BOOL v51 = "nw_http2_send_goaway";
              int v52 = 2082;
              uint64_t v53 = a1 + 390;
              uint64_t v54 = 2080;
              uint64_t v55 = " ";
              id v56 = 1024;
              char v57 = v45;
              int v58 = 1024;
              uint64_t v59 = v3;
              os_log_type_t v9 = "%{public}s %{public}s%s<i%u> Last stream value %d is even, but we are the server, backtrace limit exceeded";
              goto LABEL_112;
            }

            goto LABEL_113;
          }

          backtrace_string = (char *)__nw_create_backtrace_string();
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          id v6 = (os_log_s *)gconnectionLogObj;
          uint32_t v7 = type;
          uint32_t v42 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
          if (!backtrace_string)
          {
            if (!v42) {
              goto LABEL_113;
            }
            uint64_t v47 = *(_DWORD *)(a1 + 368);
            *(_DWORD *)buf = 136447234;
            BOOL v51 = "nw_http2_send_goaway";
            int v52 = 2082;
            uint64_t v53 = a1 + 390;
            uint64_t v54 = 2080;
            uint64_t v55 = " ";
            id v56 = 1024;
            char v57 = v47;
            int v58 = 1024;
            uint64_t v59 = v3;
            os_log_type_t v9 = "%{public}s %{public}s%s<i%u> Last stream value %d is even, but we are the server, no backtrace";
            goto LABEL_112;
          }

          if (v42)
          {
            uint64_t v43 = *(_DWORD *)(a1 + 368);
            *(_DWORD *)buf = 136447490;
            BOOL v51 = "nw_http2_send_goaway";
            int v52 = 2082;
            uint64_t v53 = a1 + 390;
            uint64_t v54 = 2080;
            uint64_t v55 = " ";
            id v56 = 1024;
            char v57 = v43;
            int v58 = 1024;
            uint64_t v59 = v3;
            id v60 = 2082;
            *(void *)id v61 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s %{public}s%s<i%u> Last stream value %d is even, but we are the server, dumping backtrace:%{public}s",  buf,  0x36u);
          }

          free(backtrace_string);
          if (v5) {
LABEL_114:
          }
            free(v5);
        }
      }

      else if ((v3 & 1) != 0 && (v2 & 0x8000) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v4 = *(_DWORD *)(a1 + 368);
        *(_DWORD *)buf = 136447234;
        BOOL v51 = "nw_http2_send_goaway";
        int v52 = 2082;
        uint64_t v53 = a1 + 390;
        uint64_t v54 = 2080;
        uint64_t v55 = " ";
        id v56 = 1024;
        char v57 = v4;
        int v58 = 1024;
        uint64_t v59 = v3;
        nw_endpoint_type_t type = OS_LOG_TYPE_ERROR;
        uint64_t v48 = 0;
        id v5 = (char *)_os_log_send_and_compose_impl();
        if (__nwlog_fault(v5, &type, &v48))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            id v6 = (os_log_s *)gconnectionLogObj;
            uint32_t v7 = type;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
            {
              int v8 = *(_DWORD *)(a1 + 368);
              *(_DWORD *)buf = 136447234;
              BOOL v51 = "nw_http2_send_goaway";
              int v52 = 2082;
              uint64_t v53 = a1 + 390;
              uint64_t v54 = 2080;
              uint64_t v55 = " ";
              id v56 = 1024;
              char v57 = v8;
              int v58 = 1024;
              uint64_t v59 = v3;
              os_log_type_t v9 = "%{public}s %{public}s%s<i%u> Last stream value %d is odd, but we are the client";
LABEL_112:
              _os_log_impl(&dword_181A5C000, v6, v7, v9, buf, 0x2Cu);
              goto LABEL_113;
            }
          }

          else if (v48)
          {
            id v38 = (char *)__nw_create_backtrace_string();
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            id v6 = (os_log_s *)gconnectionLogObj;
            uint32_t v7 = type;
            uint64_t v39 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
            if (!v38)
            {
              if (!v39) {
                goto LABEL_113;
              }
              uint64_t v46 = *(_DWORD *)(a1 + 368);
              *(_DWORD *)buf = 136447234;
              BOOL v51 = "nw_http2_send_goaway";
              int v52 = 2082;
              uint64_t v53 = a1 + 390;
              uint64_t v54 = 2080;
              uint64_t v55 = " ";
              id v56 = 1024;
              char v57 = v46;
              int v58 = 1024;
              uint64_t v59 = v3;
              os_log_type_t v9 = "%{public}s %{public}s%s<i%u> Last stream value %d is odd, but we are the client, no backtrace";
              goto LABEL_112;
            }

            if (v39)
            {
              char v40 = *(_DWORD *)(a1 + 368);
              *(_DWORD *)buf = 136447490;
              BOOL v51 = "nw_http2_send_goaway";
              int v52 = 2082;
              uint64_t v53 = a1 + 390;
              uint64_t v54 = 2080;
              uint64_t v55 = " ";
              id v56 = 1024;
              char v57 = v40;
              int v58 = 1024;
              uint64_t v59 = v3;
              id v60 = 2082;
              *(void *)id v61 = v38;
              _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s %{public}s%s<i%u> Last stream value %d is odd, but we are the client, dumping backtrace:%{public}s",  buf,  0x36u);
            }

            free(v38);
          }

          else
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            id v6 = (os_log_s *)gconnectionLogObj;
            uint32_t v7 = type;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
            {
              uint64_t v44 = *(_DWORD *)(a1 + 368);
              *(_DWORD *)buf = 136447234;
              BOOL v51 = "nw_http2_send_goaway";
              int v52 = 2082;
              uint64_t v53 = a1 + 390;
              uint64_t v54 = 2080;
              uint64_t v55 = " ";
              id v56 = 1024;
              char v57 = v44;
              int v58 = 1024;
              uint64_t v59 = v3;
              os_log_type_t v9 = "%{public}s %{public}s%s<i%u> Last stream value %d is odd, but we are the client, backtrace limit exceeded";
              goto LABEL_112;
            }
          }
        }

        goto LABEL_113;
      }

    if (v58) {
      free(v58);
    }
    goto LABEL_115;
  }

  if ((*(_BYTE *)(a1 + 158) & 1) == 0)
  {
    char v57 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_append_reassembled_packets";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = a1 + 159;
      *(_WORD *)&buf[22] = 2080;
      *(void *)&_BYTE buf[24] = " ";
      LOWORD(v93) = 2048;
      *(void *)((char *)&v93 + 2) = a1;
      _os_log_impl( &dword_181A5C000,  v57,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s%p Frame is no longer valid",  buf,  0x2Au);
    }
  }

  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  int v12 = 0LL;
LABEL_74:
  _Block_object_dispose(&v84, 8);
  _Block_object_dispose(&v88, 8);
  if (!a4) {
    goto LABEL_82;
  }
LABEL_75:
  for (i = 0; ; ++i)
  {
    uint64_t v49 = *(void *)(a1 + 88);
    if (!v49) {
      break;
    }
    uint64_t v50 = *(void *)(v49 + 32);
    BOOL v51 = *(void **)(v49 + 40);
    if (v50)
    {
      *(void *)(v50 + 40) = v51;
      BOOL v51 = *(void **)(v49 + 40);
    }

    else
    {
      *(void *)(a1 + 96) = v51;
    }

    *BOOL v51 = v50;
    *(void *)(v49 + 32) = 0LL;
    *(void *)(v49 + 40) = 0LL;
    nw_frame_finalize(v49);
  }

  if (i)
  {
    if ((*(_BYTE *)(a1 + 158) & 1) == 0)
    {
      uint64_t v53 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      {
        uint64_t v54 = *(_DWORD *)(a1 + 148);
        *(_DWORD *)buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_reassembly";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = a1 + 159;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&_BYTE buf[24] = " ";
        LOWORD(v93) = 2048;
        *(void *)((char *)&v93 + 2) = a1;
        WORD5(v93) = 1024;
        HIDWORD(v93) = v54;
        *(_WORD *)os_log_type_t v94 = 1024;
        *(_DWORD *)&v94[2] = i;
        _os_log_impl( &dword_181A5C000,  v53,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s%p Failed to reassemble IPv6 Fragmentation ID %u, dropping %u frames",  buf,  0x36u);
      }
    }
  }

void sub_181B0DFEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_desperate_ivan(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[98] >> 2) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v16 = "nw_parameters_get_desperate_ivan";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint32_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_parameters_get_desperate_ivan";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint32_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v16 = "nw_parameters_get_desperate_ivan";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_parameters_get_desperate_ivan";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint32_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_parameters_get_desperate_ivan";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_allow_unusable_addresses(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[98] >> 3) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v16 = "nw_parameters_get_allow_unusable_addresses";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint32_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_parameters_get_allow_unusable_addresses";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint32_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v16 = "nw_parameters_get_allow_unusable_addresses";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_parameters_get_allow_unusable_addresses";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint32_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_parameters_get_allow_unusable_addresses";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

id *nw_endpoint_copy_association(void *a1, void *a2)
{
  return nw_endpoint_copy_association_with_evaluator(a1, a2, 0LL);
}

uint64_t nw_association_get_cached_content_for_protocol(void *a1, void *a2)
{
  uint64_t v73 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    id v41 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v66 = "nw_association_get_cached_content_for_protocol";
    uint32_t v42 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v63 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v44 = type;
      if (os_log_type_enabled(v43, type))
      {
        *(_DWORD *)buf = 136446210;
        id v66 = "nw_association_get_cached_content_for_protocol";
        _os_log_impl(&dword_181A5C000, v43, v44, "%{public}s called with null association", buf, 0xCu);
      }
    }

    else if (v63)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v48 = type;
      BOOL v49 = os_log_type_enabled(v43, type);
      if (backtrace_string)
      {
        if (v49)
        {
          *(_DWORD *)buf = 136446466;
          id v66 = "nw_association_get_cached_content_for_protocol";
          __int16 v67 = 2082;
          uint64_t v68 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v43,  v48,  "%{public}s called with null association, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v42) {
          goto LABEL_99;
        }
        goto LABEL_98;
      }

      if (v49)
      {
        *(_DWORD *)buf = 136446210;
        id v66 = "nw_association_get_cached_content_for_protocol";
        _os_log_impl(&dword_181A5C000, v43, v48, "%{public}s called with null association, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v57 = type;
      if (os_log_type_enabled(v43, type))
      {
        *(_DWORD *)buf = 136446210;
        id v66 = "nw_association_get_cached_content_for_protocol";
        _os_log_impl( &dword_181A5C000,  v43,  v57,  "%{public}s called with null association, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_96;
  }

  if (!v4)
  {
    __nwlog_obj();
    int v45 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v66 = "nw_association_get_cached_content_for_protocol";
    uint32_t v42 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v63 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v46 = type;
      if (os_log_type_enabled(v43, type))
      {
        *(_DWORD *)buf = 136446210;
        id v66 = "nw_association_get_cached_content_for_protocol";
        _os_log_impl(&dword_181A5C000, v43, v46, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if (v63)
    {
      uint64_t v50 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v51 = type;
      BOOL v52 = os_log_type_enabled(v43, type);
      if (v50)
      {
        if (v52)
        {
          *(_DWORD *)buf = 136446466;
          id v66 = "nw_association_get_cached_content_for_protocol";
          __int16 v67 = 2082;
          uint64_t v68 = v50;
          _os_log_impl( &dword_181A5C000,  v43,  v51,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v50);
LABEL_97:
        if (!v42)
        {
LABEL_99:
          uint64_t v12 = 0LL;
          goto LABEL_58;
        }

void sub_181B0F188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL networkd_settings_get_BOOL(const char *a1)
{
  if (!sCachedSettings) {
    return 0LL;
  }
  pthread_mutex_lock(&sSettingsMutex);
  uint64_t v2 = (void *)sCachedSettings;
  if (!sCachedSettings) {
    goto LABEL_7;
  }
  Class Class = object_getClass((id)sCachedSettings);
  BOOL v4 = 0LL;
  if (!a1 || Class != (Class)MEMORY[0x1895F9250]) {
    goto LABEL_8;
  }
  xpc_object_t value = xpc_dictionary_get_value(v2, a1);
  if (value && (id v6 = value, object_getClass(value) == (Class)MEMORY[0x1895F9228])) {
    BOOL v4 = xpc_BOOL_get_value(v6);
  }
  else {
LABEL_7:
  }
    BOOL v4 = 0LL;
LABEL_8:
  pthread_mutex_unlock(&sSettingsMutex);
  return v4;
}

uint64_t nw_resolver_derive_service_flags(void *a1, void *a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v5)
  {
    int v8 = 1073762304;
    unsigned int v9 = 1073758208;
    if (v6)
    {
      id v10 = v6;
      int v11 = [v10 type];

      if (v11 != 3)
      {
        if ((nw_parameters_get_desperate_ivan(v7) & 1) == 0
          && (nw_parameters_get_allow_unusable_addresses(v7) & 1) == 0
          && ((v5[347] & 1) == 0 || (v5[346] & 0x40) != 0))
        {
          int v8 = 1073795072;
        }

        if (nw_parameters_get_expired_dns_behavior((nw_parameters_t)v7) == nw_parameters_expired_dns_behavior_prohibit)
        {
          unsigned int v9 = v8;
        }

        else
        {
          id v12 = v10;
          int v13 = [v12 type];

          if (v13 == 2) {
            unsigned int v9 = v8 | 0x80000000;
          }
          else {
            unsigned int v9 = v8;
          }
        }
      }
    }

    BOOL v14 = nw_parameters_requires_dnssec_validation((nw_parameters_t)v7);
    int traffic_class = nw_parameters_get_traffic_class(v7);
    BOOL prohibit_cellular = nw_parameters_get_prohibit_cellular(v7);
    BOOL prohibit_expensive = nw_parameters_get_prohibit_expensive((nw_parameters_t)v7);
    BOOL prohibit_constrained = nw_parameters_get_prohibit_constrained((nw_parameters_t)v7);
    int use_awdl = nw_parameters_get_use_awdl(v7);
    int use_p2p = nw_parameters_get_use_p2p(v7);
    unsigned int v21 = v9 | 0x200000;
    if (!v14) {
      unsigned int v21 = v9;
    }
    if (traffic_class == 100) {
      v21 |= 0x80000u;
    }
    if (prohibit_cellular) {
      v21 |= 0x8000000u;
    }
    if (prohibit_expensive) {
      v21 |= 0x20000000u;
    }
    if (prohibit_constrained) {
      v21 |= 0x2000u;
    }
    if (use_awdl) {
      v21 |= 0x100000u;
    }
    if (use_p2p) {
      uint64_t v22 = v21 | 0x20000;
    }
    else {
      uint64_t v22 = v21;
    }
    goto LABEL_29;
  }

  __nwlog_obj();
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v35 = "nw_resolver_derive_service_flags";
  int v25 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v32 = 0;
  if (__nwlog_fault(v25, &type, &v32))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v35 = "nw_resolver_derive_service_flags";
        _os_log_impl(&dword_181A5C000, v26, v27, "%{public}s called with null resolver", buf, 0xCu);
      }
    }

    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type;
      BOOL v30 = os_log_type_enabled(v26, type);
      if (backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v35 = "nw_resolver_derive_service_flags";
          __int16 v36 = 2082;
          char v37 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v26,  v29,  "%{public}s called with null resolver, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_46;
      }

      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v35 = "nw_resolver_derive_service_flags";
        _os_log_impl(&dword_181A5C000, v26, v29, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v35 = "nw_resolver_derive_service_flags";
        _os_log_impl( &dword_181A5C000,  v26,  v31,  "%{public}s called with null resolver, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181B0F688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_parameters_expired_dns_behavior_t nw_parameters_get_expired_dns_behavior(nw_parameters_t parameters)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = parameters;
  uint64_t v2 = v1;
  if (v1)
  {
    nw_parameters_expired_dns_behavior_t v3 = v1[95];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v16 = "nw_parameters_get_expired_dns_behavior";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_parameters_get_expired_dns_behavior";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v16 = "nw_parameters_get_expired_dns_behavior";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_parameters_get_expired_dns_behavior";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_parameters_get_expired_dns_behavior";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_parameters_requires_dnssec_validation(nw_parameters_t parameters)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = parameters;
  uint64_t v2 = v1;
  if (v1)
  {
    BOOL v3 = (v1[99] >> 6) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v16 = "nw_parameters_requires_dnssec_validation";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_parameters_requires_dnssec_validation";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v16 = "nw_parameters_requires_dnssec_validation";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_parameters_requires_dnssec_validation";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_parameters_requires_dnssec_validation";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_parameters_get_prohibit_cellular(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    id v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_parameters_get_prohibit_cellular";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v7, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_get_prohibit_cellular";
          _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_parameters_get_prohibit_cellular";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }

        if (v12)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_get_prohibit_cellular";
          _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_get_prohibit_cellular";
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181B0FEEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

BOOL nw_context_get_require_encrypted_name_resolution(void *a1)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "nw_context_get_require_encrypted_name_resolution";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v10, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v20 = "nw_context_get_require_encrypted_name_resolution";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null context", buf, 0xCu);
        }
      }

      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v20 = "nw_context_get_require_encrypted_name_resolution";
            __int16 v21 = 2082;
            uint64_t v22 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_28;
        }

        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v20 = "nw_context_get_require_encrypted_name_resolution";
          _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v20 = "nw_context_get_require_encrypted_name_resolution";
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181B10220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_copy_current_audit_token(_OWORD *a1)
{
  *(void *)&v22[13] = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (nw_copy_current_audit_token::onceToken != -1) {
      dispatch_once(&nw_copy_current_audit_token::onceToken, &__block_literal_global_47887);
    }
    if (nw_copy_current_audit_token::valid)
    {
      __int128 v2 = unk_18C45EF78;
      *a1 = nw_copy_current_audit_token::my_audit_token;
      a1[1] = v2;
      return 1LL;
    }

    int v4 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    uint64_t v20 = "nw_copy_current_audit_token";
    __int16 v21 = 1024;
    *(_DWORD *)uint64_t v22 = v4;
    BOOL v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v6 = (os_log_s *)gLogObj;
      os_log_type_t v7 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v20 = "nw_copy_current_audit_token";
        __int16 v21 = 1024;
        *(_DWORD *)uint64_t v22 = v4;
        os_log_type_t v8 = "%{public}s task_info(mach_task_self(), TASK_AUDIT_TOKEN, (integer_t *) &audit_token, &info_size) failed %{darwin.errno}d";
LABEL_19:
        _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0x12u);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v6 = (os_log_s *)gLogObj;
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446722;
          uint64_t v20 = "nw_copy_current_audit_token";
          __int16 v21 = 1024;
          *(_DWORD *)uint64_t v22 = v4;
          v22[2] = 2082;
          *(void *)&v22[3] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s task_info(mach_task_self(), TASK_AUDIT_TOKEN, (integer_t *) &audit_token, &info_size) failed %{da rwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v20 = "nw_copy_current_audit_token";
        __int16 v21 = 1024;
        *(_DWORD *)uint64_t v22 = v4;
        os_log_type_t v8 = "%{public}s task_info(mach_task_self(), TASK_AUDIT_TOKEN, (integer_t *) &audit_token, &info_size) failed %{d"
             "arwin.errno}d, no backtrace";
        goto LABEL_19;
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v6 = (os_log_s *)gLogObj;
      os_log_type_t v7 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v20 = "nw_copy_current_audit_token";
        __int16 v21 = 1024;
        *(_DWORD *)uint64_t v22 = v4;
        os_log_type_t v8 = "%{public}s task_info(mach_task_self(), TASK_AUDIT_TOKEN, (integer_t *) &audit_token, &info_size) failed %{d"
             "arwin.errno}d, backtrace limit exceeded";
        goto LABEL_19;
      }
    }

BOOL nw_parameters_has_delegated_proc_audit_token(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  char v3 = a1;
  int v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v26 = "nw_parameters_has_delegated_proc_audit_token";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v26 = "nw_parameters_has_delegated_proc_audit_token";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null parameters", buf, 0xCu);
      }

      goto LABEL_47;
    }

    if (!v23)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v26 = "nw_parameters_has_delegated_proc_audit_token";
        _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_47;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v16 = type;
    BOOL v17 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v26 = "nw_parameters_has_delegated_proc_audit_token";
        _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }

      goto LABEL_47;
    }

    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v26 = "nw_parameters_has_delegated_proc_audit_token";
      __int16 v27 = 2082;
      os_log_type_t v28 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_35;
  }

  if (!a2)
  {
    __nwlog_obj();
    os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v26 = "nw_parameters_has_delegated_proc_audit_token";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v26 = "nw_parameters_has_delegated_proc_audit_token";
        _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null audit_token", buf, 0xCu);
      }

void nw_endpoint_resolver_update_path_resolver_locked(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v72 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  __int128 v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
    os_log_type_t v34 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v67 = 0;
    if (__nwlog_fault(v34, &type, &v67))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v36 = type;
        if (os_log_type_enabled(v35, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_181A5C000, v35, v36, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v67)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v38 = type;
        BOOL v39 = os_log_type_enabled(v35, type);
        if (backtrace_string)
        {
          if (v39)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v35,  v38,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_54;
        }

        if (v39)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_181A5C000, v35, v38, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v44 = type;
        if (os_log_type_enabled(v35, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl( &dword_181A5C000,  v35,  v44,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181B116C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, void *a24, void *a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, id a32)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

NWConcrete_nw_endpoint_mode_handler *nw_endpoint_handler_copy_resolver(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v49 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  __int128 v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_endpoint_handler_copy_resolver";
    char v23 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (__nwlog_fault(v23, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v34 = "nw_endpoint_handler_copy_resolver";
          _os_log_impl(&dword_181A5C000, v24, v25, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v31)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v27 = type;
        BOOL v28 = os_log_type_enabled(v24, type);
        if (backtrace_string)
        {
          if (v28)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v34 = "nw_endpoint_handler_copy_resolver";
            __int16 v35 = 2082;
            id_str = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v24,  v27,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_48;
        }

        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v34 = "nw_endpoint_handler_copy_resolver";
          _os_log_impl(&dword_181A5C000, v24, v27, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v34 = "nw_endpoint_handler_copy_resolver";
          _os_log_impl( &dword_181A5C000,  v24,  v29,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181B11C68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *nw_dictionary_create()
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  objc_opt_class();
  uint64_t v0 = _os_object_alloc();
  if (!v0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "nw_dictionary_create";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v8 = (os_log_s *)gLogObj;
      os_log_type_t v9 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v19 = "nw_dictionary_create";
      BOOL v10 = "%{public}s nw_dictionary_obj_alloc failed";
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v8 = (os_log_s *)gLogObj;
      os_log_type_t v9 = type;
      BOOL v12 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v19 = "nw_dictionary_create";
          __int16 v20 = 2082;
          os_log_type_t v21 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s nw_dictionary_obj_alloc failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }

      if (!v12)
      {
LABEL_26:
        if (v7) {
          free(v7);
        }
        return 0LL;
      }

      *(_DWORD *)buf = 136446210;
      BOOL v19 = "nw_dictionary_create";
      BOOL v10 = "%{public}s nw_dictionary_obj_alloc failed, no backtrace";
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v8 = (os_log_s *)gLogObj;
      os_log_type_t v9 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v19 = "nw_dictionary_create";
      BOOL v10 = "%{public}s nw_dictionary_obj_alloc failed, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
    goto LABEL_26;
  }

  id v1 = (void *)v0;
  xpc_object_t v2 = xpc_dictionary_create(0LL, 0LL, 0LL);
  v1[2] = v2;
  if (!v2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "nw_dictionary_create";
    char v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v3, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v4 = (os_log_s *)gLogObj;
        os_log_type_t v5 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v19 = "nw_dictionary_create";
          nw_endpoint_t v6 = "%{public}s xpc_dictionary_create failed";
LABEL_32:
          _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
        }
      }

      else if (v16)
      {
        char v13 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v4 = (os_log_s *)gLogObj;
        os_log_type_t v5 = type;
        BOOL v14 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v13)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v19 = "nw_dictionary_create";
            __int16 v20 = 2082;
            os_log_type_t v21 = v13;
            _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v13);
          goto LABEL_33;
        }

        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v19 = "nw_dictionary_create";
          nw_endpoint_t v6 = "%{public}s xpc_dictionary_create failed, no backtrace";
          goto LABEL_32;
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v4 = (os_log_s *)gLogObj;
        os_log_type_t v5 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v19 = "nw_dictionary_create";
          nw_endpoint_t v6 = "%{public}s xpc_dictionary_create failed, backtrace limit exceeded";
          goto LABEL_32;
        }
      }
    }

void nw_path_enumerate_resolve_options(void *a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  char v3 = a1;
  id v4 = a2;
  os_log_type_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    char v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v31 = "nw_path_enumerate_resolve_options";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        char v31 = "nw_path_enumerate_resolve_options";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          char v31 = "nw_path_enumerate_resolve_options";
          __int16 v32 = 2082;
          os_log_type_t v33 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v12) {
          goto LABEL_7;
        }
LABEL_42:
        free(v12);
        goto LABEL_7;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        char v31 = "nw_path_enumerate_resolve_options";
        _os_log_impl(&dword_181A5C000, v13, v18, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        char v31 = "nw_path_enumerate_resolve_options";
        _os_log_impl( &dword_181A5C000,  v13,  v23,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181B12674( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_path_enumerate_resolve_options_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  os_log_type_t v5 = v4;
  size_t length = 0LL;
  if (v4)
  {
    data = xpc_dictionary_get_data(v4, "data", &length);
    if (data)
    {
      if (length >= 0xD8)
      {
        uint64_t v7 = data[53];
        if (length == v7 + 216 && (data[52] & 0x10000) != 0 && v7 >= 0xCC)
        {
          int v8 = *(_DWORD *)(a1 + 40);
          if ((data[72] == v8
             || data[74] == v8
             || data[76] == v8
             || data[78] == v8
             || data[80] == v8
             || data[82] == v8
             || data[84] == v8
             || data[86] == v8)
            && (data[52] & 0x13) != 1)
          {
            (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
          }
        }
      }
    }
  }

  return 1LL;
}

void sub_181B127A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_path_copy_resolved_endpoints(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    id v3 = v1[8];
    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_path_copy_resolved_endpoints";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_resolved_endpoints";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_path_copy_resolved_endpoints";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_resolved_endpoints";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_resolved_endpoints";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

id nw_path_copy_flows(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    id v3 = v1[9];
    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_path_copy_flows";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_flows";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_path_copy_flows";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_flows";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_flows";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

void nw_connection_get_uuid(void *a1, unsigned __int8 *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    id v4 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v21 = "nw_connection_get_uuid";
    os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v21 = "nw_connection_get_uuid";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null out_uuid", buf, 0xCu);
      }
    }

    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v21 = "nw_connection_get_uuid";
          __int16 v22 = 2082;
          os_log_type_t v23 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null out_uuid, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v5) {
          goto LABEL_4;
        }
LABEL_39:
        free(v5);
        goto LABEL_4;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v21 = "nw_connection_get_uuid";
        _os_log_impl(&dword_181A5C000, v6, v11, "%{public}s called with null out_uuid, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v21 = "nw_connection_get_uuid";
        _os_log_impl( &dword_181A5C000,  v6,  v16,  "%{public}s called with null out_uuid, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181B131A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_endpoint_t nw_connection_copy_endpoint(nw_connection_t connection)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = connection;
  xpc_object_t v2 = v1;
  if (v1)
  {
    id v3 = (nw_endpoint *)v1[1];
    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_connection_copy_endpoint";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_connection_copy_endpoint";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_connection_copy_endpoint";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_connection_copy_endpoint";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_connection_copy_endpoint";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_connection_start_activity(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  os_log_type_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    id v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v23 = "nw_connection_start_activity";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_connection_start_activity";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null connection", buf, 0xCu);
      }
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v23 = "nw_connection_start_activity";
          __int16 v24 = 2082;
          os_log_type_t v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v7) {
          goto LABEL_5;
        }
LABEL_40:
        free(v7);
        goto LABEL_5;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_connection_start_activity";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_connection_start_activity";
        _os_log_impl( &dword_181A5C000,  v8,  v18,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181B13924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_set_parent_endpoint(void *a1, void *a2, int a3)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  os_log_type_t v5 = a1;
  id v6 = a2;
  os_log_type_t v7 = v6;
  if (v5)
  {
    if (v6 != v5)
    {
      objc_storeStrong(v5 + 14, a2);
      if (a3) {
        char v8 = 2;
      }
      else {
        char v8 = 0;
      }
      char v9 = *((_BYTE *)v5 + 231) & 0xFD | v8;
      *((_BYTE *)v5 + 231) = v9;
      if (v7)
      {
        *((_BYTE *)v5 + 231) = *((_BYTE *)v7 + 231) & 0x20 | v9 & 0xDF;
        *((_WORD *)v5 + 114) = *((_WORD *)v7 + 114);
      }
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v21 = "nw_endpoint_set_parent_endpoint";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v11, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v21 = "nw_endpoint_set_parent_endpoint";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }

    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v21 = "nw_endpoint_set_parent_endpoint";
          __int16 v22 = 2082;
          os_log_type_t v23 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v21 = "nw_endpoint_set_parent_endpoint";
        _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v21 = "nw_endpoint_set_parent_endpoint";
        _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_endpoint_set_priority(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    [v3 setPriority:a2];
    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_endpoint_set_priority";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_endpoint_set_priority";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_endpoint_set_priority";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_endpoint_set_priority";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_endpoint_set_priority";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181B13EB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *nw_context_copy_tracker_lookup_callback(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v18 = "nw_context_copy_tracker_lookup_callback";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v8, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          char v18 = "nw_context_copy_tracker_lookup_callback";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null context", buf, 0xCu);
        }
      }

      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            char v18 = "nw_context_copy_tracker_lookup_callback";
            __int16 v19 = 2082;
            char v20 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }

        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          char v18 = "nw_context_copy_tracker_lookup_callback";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        char v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          char v18 = "nw_context_copy_tracker_lookup_callback";
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

uint64_t nw_endpoint_address_endpoint_matches_address(void *a1, unsigned __int8 *a2, int a3, int a4)
{
  uint64_t v57 = *MEMORY[0x1895F89C0];
  id v7 = a1;
  os_log_type_t v8 = v7;
  if (!v7)
  {
    __nwlog_obj();
    char v40 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_address_endpoint_matches_address";
    __int16 v41 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (__nwlog_fault(v41, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint32_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v43 = type;
        if (os_log_type_enabled(v42, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_address_endpoint_matches_address";
          _os_log_impl(&dword_181A5C000, v42, v43, "%{public}s called with null endpoint", buf, 0xCu);
        }

        goto LABEL_85;
      }

      if (!v54)
      {
        __nwlog_obj();
        uint32_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v51 = type;
        if (os_log_type_enabled(v42, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_address_endpoint_matches_address";
          _os_log_impl( &dword_181A5C000,  v42,  v51,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_85;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint32_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v47 = type;
      BOOL v48 = os_log_type_enabled(v42, type);
      if (!backtrace_string)
      {
        if (v48)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_address_endpoint_matches_address";
          _os_log_impl(&dword_181A5C000, v42, v47, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }

        goto LABEL_85;
      }

      if (v48)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_endpoint_address_endpoint_matches_address";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v42,  v47,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
      }

void sub_181B14B58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_priority(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = [v1 priority];
    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v16 = "nw_endpoint_get_priority";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_endpoint_get_priority";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v16 = "nw_endpoint_get_priority";
          __int16 v17 = 2082;
          int v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_endpoint_get_priority";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_endpoint_get_priority";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181B14E50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_weight(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = [v1 weight];
    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v16 = "nw_endpoint_get_weight";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_endpoint_get_weight";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v16 = "nw_endpoint_get_weight";
          __int16 v17 = 2082;
          int v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_endpoint_get_weight";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_endpoint_get_weight";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181B1510C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_ignore_resolver_stats(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[96] >> 4) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v16 = "nw_parameters_get_ignore_resolver_stats";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_parameters_get_ignore_resolver_stats";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v16 = "nw_parameters_get_ignore_resolver_stats";
          __int16 v17 = 2082;
          int v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_parameters_get_ignore_resolver_stats";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_parameters_get_ignore_resolver_stats";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t sa_dst_compare_internal(unsigned __int8 *a1, int a2, unsigned __int8 *a3, int a4, int a5)
{
  uint64_t v140 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (a3)
    {
      LODWORD(v6) = a5;
      pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
      pthread_once(&cache_init, (void (*)(void))sa_dst_compare_init_once);
      int v10 = a1[1];
      if (v10 != 2 && v10 != 30)
      {
        int v18 = a3[1];
        BOOL v19 = v18 == 2 || v18 == 30;
        int v20 = v19;
        uint64_t v21 = (v20 << 31 >> 31);
        goto LABEL_387;
      }

      int v11 = a3[1];
      if (v11 != 2 && v11 != 30)
      {
        uint64_t v21 = 1LL;
        goto LABEL_387;
      }

      __int128 v129 = 0u;
      __int128 v130 = 0u;
      memset(v128, 0, sizeof(v128));
      __int128 v126 = 0u;
      __int128 v127 = 0u;
      memset(type, 0, sizeof(type));
      int v12 = sa_dst_lookup(a1, a2, v128);
      BOOL v13 = sa_dst_lookup(a3, a4, type);
      if (v12)
      {
        int v14 = v13;
        if (v13)
        {
          if ((_DWORD)v6)
          {
            if (networkd_settings_get_BOOL((const char *)nw_setting_compare_bypass_stats))
            {
LABEL_11:
              LODWORD(v6) = 0;
              goto LABEL_12;
            }

            char v28 = BYTE12(v130);
            char v29 = BYTE12(v127);
            if ((BYTE12(v130) & 1) != 0)
            {
              if ((BYTE12(v127) & 1) == 0)
              {
                id v16 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136446210;
                  v132 = "sa_dst_compare_statistics";
                  __int16 v17 = "%{public}s prefer 1, dst 2 has no route";
                  goto LABEL_384;
                }

LABEL_386:
                uint64_t v21 = 1LL;
                goto LABEL_387;
              }

              int v59 = (BYTE12(v130) >> 2) & 1;
              int v60 = (BYTE12(v127) >> 2) & 1;
              if (v59 != v60)
              {
                if (v60)
                {
                  id v16 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136446210;
                    v132 = "sa_dst_compare_statistics";
                    __int16 v17 = "%{public}s prefer dst 1, dst 2 is p2p, dst 1 is not";
                    goto LABEL_384;
                  }

                  goto LABEL_386;
                }

                if (v59)
                {
                  uint64_t v24 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136446210;
                    v132 = "sa_dst_compare_statistics";
                    os_log_type_t v25 = "%{public}s prefer dst 2, dst 1 is p2p, dst 2 is not";
                    goto LABEL_352;
                  }

                  goto LABEL_354;
                }
              }

              if (HIDWORD(v129) == nw_interface_get_loopback_index::index)
              {
                BOOL v61 = 1;
              }

              else
              {
                BOOL v61 = 0;
                if (v128[1] == 30 && v128[8] == 254) {
                  BOOL v61 = (v128[9] & 0xC0) == 0x80 && *(_DWORD *)&v128[24] == nw_interface_get_loopback_index::index;
                }
              }

              if (HIDWORD(v126) == nw_interface_get_loopback_index::index)
              {
                BOOL v97 = 1;
              }

              else
              {
                BOOL v97 = 0;
                if (type[1] == 30 && type[8] == 254) {
                  BOOL v97 = (type[9] & 0xC0) == 0x80 && *(_DWORD *)&type[24] == nw_interface_get_loopback_index::index;
                }
                if (v61 && !v97)
                {
                  id v16 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136446210;
                    v132 = "sa_dst_compare_statistics";
                    __int16 v17 = "%{public}s prefer 1, dst 1 is loopback, dst 2 is not";
                    goto LABEL_384;
                  }

                  goto LABEL_386;
                }
              }

              if (v97 && !v61)
              {
                uint64_t v24 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136446210;
                  v132 = "sa_dst_compare_statistics";
                  os_log_type_t v25 = "%{public}s prefer 2, dst 2 is loopback, dst 1 is not";
                  goto LABEL_352;
                }

                goto LABEL_354;
              }

              if ((v28 & 2) != 0)
              {
                if ((v29 & 2) == 0)
                {
                  id v16 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136446210;
                    v132 = "sa_dst_compare_statistics";
                    __int16 v17 = "%{public}s prefer 1, dst 1 is local, dst 2 is not";
                    goto LABEL_384;
                  }

                  goto LABEL_386;
                }

                if (DWORD2(v129) == DWORD2(v126)) {
                  goto LABEL_11;
                }
              }

              else if ((v29 & 2) != 0)
              {
                uint64_t v24 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136446210;
                  v132 = "sa_dst_compare_statistics";
                  os_log_type_t v25 = "%{public}s prefer 2, dst 2 is local, dst 1 is not";
                  goto LABEL_352;
                }

                goto LABEL_354;
              }
            }

            else if ((BYTE12(v127) & 1) != 0)
            {
              uint64_t v24 = (os_log_s *)__nwlog_obj();
              if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_354;
              }
              *(_DWORD *)buf = 136446210;
              v132 = "sa_dst_compare_statistics";
              os_log_type_t v25 = "%{public}s prefer 2, dst 1 has no route";
              goto LABEL_352;
            }

            LODWORD(v6) = v130;
            unsigned int v30 = v127;
            if ((_DWORD)v130)
            {
              if (!(_DWORD)v127)
              {
                if (DWORD2(v127)) {
                  goto LABEL_11;
                }
                unint64_t v6 = DWORD1(v127);
                if (!DWORD1(v127)) {
                  goto LABEL_12;
                }
                v79 = (os_log_s *)__nwlog_obj();
                if (!os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG)) {
                  goto LABEL_386;
                }
                *(_DWORD *)buf = 136446466;
                v132 = "sa_dst_compare_statistics";
                __int16 v133 = 1024;
                *(_DWORD *)id v134 = v6;
                __int16 v17 = "%{public}s prefer 1, dst 2 has no successful connections and %u attempts";
                __int16 v39 = v79;
                uint32_t v40 = 18;
LABEL_385:
                _os_log_impl(&dword_181A5C000, v39, OS_LOG_TYPE_DEBUG, v17, buf, v40);
                goto LABEL_386;
              }

              if (v130 < v127)
              {
                int64_t int64_with_default = networkd_settings_get_int64_with_default( (const char *)nw_setting_tcpconn_rtt_leeway,  3200LL);
                else {
                  unsigned int v32 = 32000;
                }
                unsigned int v122 = v30;
                else {
                  uint64_t v33 = 3200LL;
                }
                int64_t v34 = networkd_settings_get_int64_with_default((const char *)nw_setting_tcpconn_rtt_leeway_small, 320LL);
                if (v34 >= v33) {
                  int v35 = v33;
                }
                else {
                  int v35 = v34;
                }
                if (v34 >= 0) {
                  int v36 = v35;
                }
                else {
                  int v36 = 320;
                }
                if ((int)v33 + (int)v6 < v122)
                {
                  unsigned int v37 = v36;
                  os_log_type_t v38 = (os_log_s *)__nwlog_obj();
                  if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG)) {
                    goto LABEL_386;
                  }
                  *(_DWORD *)buf = 136447234;
                  v132 = "sa_dst_compare_statistics";
                  __int16 v133 = 2048;
                  *(double *)id v134 = (double)v6 * 0.03125;
                  *(_WORD *)&v134[8] = 2048;
                  double v135 = (double)v122 * 0.03125;
                  __int16 v136 = 1024;
                  unsigned int v137 = v33 >> 5;
                  __int16 v138 = 1024;
                  unsigned int v139 = v37 >> 5;
                  __int16 v17 = "%{public}s prefering 1, dst1 min rtt %f < dst2 min rtt %f, leeway %u small leeway %u";
                  __int16 v39 = v38;
                  uint32_t v40 = 44;
                  goto LABEL_385;
                }

                unsigned int v117 = v36;
                unsigned int v119 = v36 + v6;
                log = (os_log_s *)__nwlog_obj();
                BOOL v88 = os_log_type_enabled(log, OS_LOG_TYPE_DEBUG);
                if (v119 < v122)
                {
                  if (v88)
                  {
                    *(_DWORD *)buf = 136447234;
                    v132 = "sa_dst_compare_statistics";
                    __int16 v133 = 2048;
                    *(double *)id v134 = (double)v6 * 0.03125;
                    *(_WORD *)&v134[8] = 2048;
                    double v135 = (double)v122 * 0.03125;
                    __int16 v136 = 1024;
                    unsigned int v137 = v33 >> 5;
                    __int16 v138 = 1024;
                    unsigned int v139 = v117 >> 5;
                    _os_log_impl( &dword_181A5C000,  log,  OS_LOG_TYPE_DEBUG,  "%{public}s prefering 1 slightly, dst1 min rtt %f < dst2 min rtt %f, leeway %u small leeway %u",  buf,  0x2Cu);
                  }

                  char v15 = 0;
                  LODWORD(v6) = 1;
                  goto LABEL_13;
                }

                if (!v88) {
                  goto LABEL_11;
                }
                *(_DWORD *)buf = 136447234;
                v132 = "sa_dst_compare_statistics";
                __int16 v133 = 2048;
                *(double *)id v134 = (double)v6 * 0.03125;
                *(_WORD *)&v134[8] = 2048;
                double v135 = (double)v122 * 0.03125;
                __int16 v136 = 1024;
                unsigned int v137 = v33 >> 5;
                __int16 v138 = 1024;
                unsigned int v139 = v117 >> 5;
                v91 = "%{public}s not prefering 1, dst1 min rtt %f < dst2 min rtt %f, leeway %u small leeway %u";
                __int16 v92 = log;
                goto LABEL_376;
              }

              if (v130 <= v127)
              {
                char v89 = (os_log_s *)__nwlog_obj();
                if (!os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG)) {
                  goto LABEL_11;
                }
                *(_DWORD *)buf = 136446466;
                v132 = "sa_dst_compare_statistics";
                __int16 v133 = 2048;
                *(double *)id v134 = (double)v6 * 0.03125;
                v91 = "%{public}s no preference, equal min rtt %f";
                __int16 v92 = v89;
                uint32_t v93 = 22;
                goto LABEL_377;
              }

              int64_t v80 = networkd_settings_get_int64_with_default((const char *)nw_setting_tcpconn_rtt_leeway, 3200LL);
              if (v80 <= 31999) {
                LODWORD(v81) = v80;
              }
              else {
                LODWORD(v81) = 32000;
              }
              if (v80 >= 0) {
                uint64_t v81 = v81;
              }
              else {
                uint64_t v81 = 3200LL;
              }
              int64_t v123 = v81;
              int64_t v82 = networkd_settings_get_int64_with_default((const char *)nw_setting_tcpconn_rtt_leeway_small, 320LL);
              if (v82 >= v123) {
                int v83 = v123;
              }
              else {
                int v83 = v82;
              }
              if (v82 >= 0) {
                int v84 = v83;
              }
              else {
                int v84 = 320;
              }
              if (v6 <= v123 + v30)
              {
                unsigned int v120 = v84;
                unsigned int v121 = v84 + v30;
                id v118 = (os_log_s *)__nwlog_obj();
                BOOL v98 = os_log_type_enabled(v118, OS_LOG_TYPE_DEBUG);
                if (v6 > v121)
                {
                  if (v98)
                  {
                    *(_DWORD *)buf = 136447234;
                    v132 = "sa_dst_compare_statistics";
                    __int16 v133 = 2048;
                    *(double *)id v134 = (double)v6 * 0.03125;
                    *(_WORD *)&v134[8] = 2048;
                    double v135 = (double)v30 * 0.03125;
                    __int16 v136 = 1024;
                    unsigned int v137 = v123 >> 5;
                    __int16 v138 = 1024;
                    unsigned int v139 = v120 >> 5;
                    _os_log_impl( &dword_181A5C000,  v118,  OS_LOG_TYPE_DEBUG,  "%{public}s prefering 2 slightly, dst1 min rtt %f > dst2 min rtt %f, leeway %u small leeway %u",  buf,  0x2Cu);
                  }

                  LODWORD(v6) = 0;
                  char v15 = 1;
                  goto LABEL_13;
                }

                if (!v98) {
                  goto LABEL_11;
                }
                *(_DWORD *)buf = 136447234;
                v132 = "sa_dst_compare_statistics";
                __int16 v133 = 2048;
                *(double *)id v134 = (double)v6 * 0.03125;
                *(_WORD *)&v134[8] = 2048;
                double v135 = (double)v30 * 0.03125;
                __int16 v136 = 1024;
                unsigned int v137 = v123 >> 5;
                __int16 v138 = 1024;
                unsigned int v139 = v120 >> 5;
                v91 = "%{public}s not prefering 2, dst1 min rtt %f > dst2 min rtt %f, leeway %u small leeway %u";
                __int16 v92 = v118;
LABEL_376:
                uint32_t v93 = 44;
LABEL_377:
                _os_log_impl(&dword_181A5C000, v92, OS_LOG_TYPE_DEBUG, v91, buf, v93);
                goto LABEL_11;
              }

              unsigned int v85 = v84;
              v86 = (os_log_s *)__nwlog_obj();
              if (!os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_354;
              }
              *(_DWORD *)buf = 136447234;
              v132 = "sa_dst_compare_statistics";
              __int16 v133 = 2048;
              *(double *)id v134 = (double)v6 * 0.03125;
              *(_WORD *)&v134[8] = 2048;
              double v135 = (double)v30 * 0.03125;
              __int16 v136 = 1024;
              unsigned int v137 = v123 >> 5;
              __int16 v138 = 1024;
              unsigned int v139 = v85 >> 5;
              os_log_type_t v25 = "%{public}s prefering 2, dst1 min rtt %f > dst2 min rtt %f, leeway %u small leeway %u";
              uint64_t v72 = v86;
              uint32_t v73 = 44;
LABEL_353:
              _os_log_impl(&dword_181A5C000, v72, OS_LOG_TYPE_DEBUG, v25, buf, v73);
              goto LABEL_354;
            }

            if (!(_DWORD)v127)
            {
              char v15 = v130;
              goto LABEL_13;
            }

            char v15 = v130;
            if (DWORD2(v130))
            {
LABEL_13:
              if (v128[37])
              {
                if (!type[37])
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  id v16 = (os_log_s *)gLogObj;
                  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136446210;
                    v132 = "sa_dst_compare_rfc6724";
                    __int16 v17 = "%{public}s Rule 1, prefer d1, d2 is not routable";
LABEL_384:
                    __int16 v39 = v16;
                    uint32_t v40 = 12;
                    goto LABEL_385;
                  }

                  goto LABEL_386;
                }

        if (v153) {
          free(v153);
        }
        if (v16) {
          os_release(v16);
        }
LABEL_390:
        BOOL v55 = 0LL;
        goto LABEL_80;
      }

LABEL_354:
                  uint64_t v21 = 0xFFFFFFFFLL;
                  goto LABEL_387;
                }

                        goto LABEL_393;
                      }

                      if (v352 == OS_LOG_TYPE_DEFAULT)
                      {
                        __nwlog_obj();
                        v296 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                        v312 = v350[0];
                        if (os_log_type_enabled(v296, v350[0]))
                        {
                          v313 = *(const char **)(protocol_for_definition + 16);
                          if (!v313) {
                            v313 = "invalid";
                          }
                          *(_DWORD *)buf = 136446722;
                          v358 = "__nw_protocol_remove_input_handler";
                          v359 = 2082;
                          v360 = (char *)v313;
                          v361 = 2048;
                          v362 = (const char *)protocol_for_definition;
                          _os_log_impl( &dword_181A5C000,  v296,  v312,  "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, backtrace limit exceeded",  buf,  0x20u);
                        }

                        goto LABEL_354;
                      }

                      v304 = (char *)__nw_create_backtrace_string();
                      __nwlog_obj();
                      v305 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      v306 = v350[0];
                      v307 = os_log_type_enabled(v305, v350[0]);
                      if (v304)
                      {
                        if (v307)
                        {
                          v308 = *(const char **)(protocol_for_definition + 16);
                          if (!v308) {
                            v308 = "invalid";
                          }
                          *(_DWORD *)buf = 136446978;
                          v358 = "__nw_protocol_remove_input_handler";
                          v359 = 2082;
                          v360 = (char *)v308;
                          v361 = 2048;
                          v362 = (const char *)protocol_for_definition;
                          v363 = 2082;
                          v364 = v304;
                          _os_log_impl( &dword_181A5C000,  v305,  v306,  "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, dumping backtrace:%{public}s",  buf,  0x2Au);
                        }

                        free(v304);
                      }

                      else
                      {
                        if (v307)
                        {
                          v314 = *(const char **)(protocol_for_definition + 16);
                          if (!v314) {
                            v314 = "invalid";
                          }
                          *(_DWORD *)buf = 136446722;
                          v358 = "__nw_protocol_remove_input_handler";
                          v359 = 2082;
                          v360 = (char *)v314;
                          v361 = 2048;
                          v362 = (const char *)protocol_for_definition;
                          _os_log_impl( &dword_181A5C000,  v305,  v306,  "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, no backtrace",  buf,  0x20u);
                        }
                      }
                    }

LABEL_200:
                if ((v129 & 4) != (v126 & 4))
                {
                  if ((v129 & 4) != 0)
                  {
                    id v16 = (os_log_s *)__nwlog_obj();
                    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 136446210;
                      v132 = "sa_dst_compare_rfc6724";
                      __int16 v17 = "%{public}s Rule 3, prefer d2, d1 source is deprecated";
                      goto LABEL_384;
                    }

                    goto LABEL_386;
                  }

                  if ((v126 & 4) != 0)
                  {
                    uint64_t v24 = (os_log_s *)__nwlog_obj();
                    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 136446210;
                      v132 = "sa_dst_compare_rfc6724";
                      os_log_type_t v25 = "%{public}s Rule 3, prefer d1, d2 source is deprecated";
                      goto LABEL_352;
                    }

                    goto LABEL_354;
                  }
                }

                if ((v129 & 8) != (v126 & 8))
                {
                  if ((v129 & 8) != 0)
                  {
                    id v16 = (os_log_s *)__nwlog_obj();
                    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 136446210;
                      v132 = "sa_dst_compare_rfc6724";
                      __int16 v17 = "%{public}s Rule 3a, prefer d2, d1 source is optimistic";
                      goto LABEL_384;
                    }

                    goto LABEL_386;
                  }

                  if ((v126 & 8) != 0)
                  {
                    uint64_t v24 = (os_log_s *)__nwlog_obj();
                    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 136446210;
                      v132 = "sa_dst_compare_rfc6724";
                      os_log_type_t v25 = "%{public}s Rule 3a, prefer d1, d2 source is optimistic";
                      goto LABEL_352;
                    }

                    goto LABEL_354;
                  }
                }

                if (*(unsigned __int16 *)&v128[32] == WORD2(v129))
                {
                  if (*(unsigned __int16 *)&type[32] != WORD2(v126))
                  {
                    id v16 = (os_log_s *)__nwlog_obj();
                    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 136446210;
                      v132 = "sa_dst_compare_rfc6724";
                      __int16 v17 = "%{public}s Rule 5, prefer d1, d2 dst label does not match src label";
                      goto LABEL_384;
                    }

                    goto LABEL_386;
                  }
                }

                else if (*(unsigned __int16 *)&type[32] == WORD2(v126))
                {
                  uint64_t v24 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136446210;
                    v132 = "sa_dst_compare_rfc6724";
                    os_log_type_t v25 = "%{public}s Rule 5, prefer d2, d1 dst label does not match src label";
                    goto LABEL_352;
                  }

                  goto LABEL_354;
                }

                if (*(unsigned __int16 *)&v128[34] > *(unsigned __int16 *)&type[34])
                {
                  uint64_t v68 = (os_log_s *)__nwlog_obj();
                  if (!os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG)) {
                    goto LABEL_386;
                  }
                  *(_DWORD *)buf = 136446722;
                  v132 = "sa_dst_compare_rfc6724";
                  __int16 v133 = 1024;
                  *(_DWORD *)id v134 = *(unsigned __int16 *)&v128[34];
                  *(_WORD *)&v134[4] = 1024;
                  *(_DWORD *)&v134[6] = *(unsigned __int16 *)&type[34];
                  __int16 v17 = "%{public}s Rule 6, prefer d1, d1 precedence %d > d2 precedence %d";
                  goto LABEL_228;
                }

                if (*(unsigned __int16 *)&type[34] > *(unsigned __int16 *)&v128[34])
                {
                  os_log_type_t v76 = (os_log_s *)__nwlog_obj();
                  if (!os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG)) {
                    goto LABEL_354;
                  }
                  *(_DWORD *)buf = 136446722;
                  v132 = "sa_dst_compare_rfc6724";
                  __int16 v133 = 1024;
                  *(_DWORD *)id v134 = *(unsigned __int16 *)&type[34];
                  *(_WORD *)&v134[4] = 1024;
                  *(_DWORD *)&v134[6] = *(unsigned __int16 *)&v128[34];
                  os_log_type_t v25 = "%{public}s Rule 6, prefer d2, d2 precedence %d > d1 precedence %d";
                  goto LABEL_268;
                }

                if (v128[37] == 30)
                {
                  if (*(unsigned __int16 *)&v128[44] == 544)
                  {
                    BOOL v87 = 0;
LABEL_319:
                    if (type[37] == 30)
                    {
                      if (*(unsigned __int16 *)&type[44] == 544)
                      {
                        BOOL v94 = 0;
                        goto LABEL_380;
                      }

                      if (*(unsigned __int16 *)&type[44] == 288)
                      {
                        BOOL v94 = *(_WORD *)&type[46] != 0;
LABEL_380:
                        if (v87 && !v94)
                        {
                          id v16 = (os_log_s *)__nwlog_obj();
                          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
                          {
                            *(_DWORD *)buf = 136446210;
                            v132 = "sa_dst_compare_rfc6724";
                            __int16 v17 = "%{public}s Rule 7, prefer d1, d2 src is not native";
                            goto LABEL_384;
                          }

                          goto LABEL_386;
                        }

                        goto LABEL_324;
                      }
                    }

                    BOOL v94 = 1;
LABEL_324:
                    if (v94 && !v87)
                    {
                      uint64_t v24 = (os_log_s *)__nwlog_obj();
                      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 136446210;
                        v132 = "sa_dst_compare_rfc6724";
                        os_log_type_t v25 = "%{public}s Rule 7, prefer d2, d1 src is not native";
                        goto LABEL_352;
                      }

                      goto LABEL_354;
                    }

                    unsigned int v124 = rfc6724_scope((uint64_t)v128);
                    unsigned int v95 = rfc6724_scope((uint64_t)type);
                    if (v124 < v95)
                    {
                      unsigned int v96 = v95;
                      uint64_t v68 = (os_log_s *)__nwlog_obj();
                      if (!os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG)) {
                        goto LABEL_386;
                      }
                      *(_DWORD *)buf = 136446722;
                      v132 = "sa_dst_compare_rfc6724";
                      __int16 v133 = 1024;
                      *(_DWORD *)id v134 = v124;
                      *(_WORD *)&v134[4] = 1024;
                      *(_DWORD *)&v134[6] = v96;
                      __int16 v17 = "%{public}s Rule 8, prefer d1, d1 scope %d < d2 scope %d";
LABEL_228:
                      __int16 v39 = v68;
                      uint32_t v40 = 24;
                      goto LABEL_385;
                    }

                    if (v95 < v124)
                    {
                      unsigned int v103 = v95;
                      os_log_type_t v76 = (os_log_s *)__nwlog_obj();
                      if (!os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG)) {
                        goto LABEL_354;
                      }
                      *(_DWORD *)buf = 136446722;
                      v132 = "sa_dst_compare_rfc6724";
                      __int16 v133 = 1024;
                      *(_DWORD *)id v134 = v103;
                      *(_WORD *)&v134[4] = 1024;
                      *(_DWORD *)&v134[6] = v124;
                      os_log_type_t v25 = "%{public}s Rule 8, prefer d2, d2 scope %d < d1 scope %d";
LABEL_268:
                      uint64_t v72 = v76;
                      uint32_t v73 = 24;
                      goto LABEL_353;
                    }

                    if ((_DWORD)v6) {
                      uint64_t v113 = 1LL;
                    }
                    else {
                      uint64_t v113 = 0xFFFFFFFFLL;
                    }
                    int v114 = common_prefix_length((const sockaddr_in_4_6 *)v128, (const sockaddr_in_4_6 *)&v128[36]);
                    int v115 = common_prefix_length((const sockaddr_in_4_6 *)type, (const sockaddr_in_4_6 *)&type[36]);
                    if (v114 && v115)
                    {
                      if (v114 > v115)
                      {
                        id v16 = (os_log_s *)__nwlog_obj();
                        if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
                          goto LABEL_386;
                        }
                        *(_DWORD *)buf = 136446210;
                        v132 = "sa_dst_compare_rfc6724";
                        __int16 v17 = "%{public}s Rule 9, prefer d1, d1 shares more common prefix";
                        goto LABEL_384;
                      }

                      if (v115 > v114)
                      {
                        uint64_t v24 = (os_log_s *)__nwlog_obj();
                        if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
                          goto LABEL_354;
                        }
                        *(_DWORD *)buf = 136446210;
                        v132 = "sa_dst_compare_rfc6724";
                        os_log_type_t v25 = "%{public}s Rule 9, prefer d2, d2 shares more common prefix";
                        goto LABEL_352;
                      }
                    }

                    if (v12 == 1 && v14 == 2)
                    {
                      id v16 = (os_log_s *)__nwlog_obj();
                      if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
                        goto LABEL_386;
                      }
                      *(_DWORD *)buf = 136446210;
                      v132 = "sa_dst_compare_internal_wrapper";
                      __int16 v17 = "%{public}s prefer d1, known while d2 not known";
                      goto LABEL_384;
                    }

                    uint64_t v113 = 0LL;
                    if (v14 != 1)
                    {
LABEL_409:
                      uint64_t v21 = v113;
                    }

                    else
                    {
                      BOOL v19 = v12 == 2;
                      uint64_t v21 = 0LL;
                      if (v19)
                      {
                        uint64_t v24 = (os_log_s *)__nwlog_obj();
                        if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
                          goto LABEL_354;
                        }
                        *(_DWORD *)buf = 136446210;
                        v132 = "sa_dst_compare_internal_wrapper";
                        os_log_type_t v25 = "%{public}s prefer d2, known while d1 not known";
                        goto LABEL_352;
                      }
                    }

    if (v70) {
      free(v70);
    }
    int v12 = 0LL;
    goto LABEL_15;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v108 = "nw_protocol_udp_updated_path";
  unsigned int v63 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v103) = 0;
  if (type[0] != OS_LOG_TYPE_FAULT)
  {
    if (!(_BYTE)v103)
    {
      BOOL v64 = (os_log_s *)__nwlog_obj();
      unsigned int v65 = type[0];
      if (os_log_type_enabled(v64, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        id v108 = "nw_protocol_udp_updated_path";
        unsigned int v66 = "%{public}s called with null path, backtrace limit exceeded";
        goto LABEL_193;
      }

      goto LABEL_194;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v64 = (os_log_s *)__nwlog_obj();
    unsigned int v65 = type[0];
    int64_t v82 = os_log_type_enabled(v64, type[0]);
    if (!backtrace_string)
    {
      if (v82)
      {
        *(_DWORD *)buf = 136446210;
        id v108 = "nw_protocol_udp_updated_path";
        unsigned int v66 = "%{public}s called with null path, no backtrace";
        goto LABEL_193;
      }

      goto LABEL_194;
    }

    if (v82)
    {
      *(_DWORD *)buf = 136446466;
      id v108 = "nw_protocol_udp_updated_path";
      v109 = 2082;
      BOOL v110 = (nw_protocol *)backtrace_string;
      int64_t v80 = "%{public}s called with null path, dumping backtrace:%{public}s";
      goto LABEL_156;
    }

  if (v83) {
    free(v83);
  }
  BOOL v52 = 0xFFFFFFFFLL;
LABEL_143:

  return v52;
}

                    unsigned int v45 = 0LL;
                    id v16 = v25;
                    goto LABEL_196;
                  }

  __break(1u);
  return result;
}

              goto LABEL_207;
            }

            if (!v120)
            {
              __nwlog_obj();
              uint32_t v73 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              v90 = v121;
              if (os_log_type_enabled(v73, v121))
              {
                *(_DWORD *)v132 = 136446210;
                *(void *)&void v132[4] = "nw_http_cookie_options_copy_transform_callback";
                _os_log_impl( &dword_181A5C000,  v73,  v90,  "%{public}s protocol options are not http_cookie, backtrace limit exceeded",  v132,  0xCu);
              }

              goto LABEL_200;
            }

            unsigned int v85 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            int64_t v82 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v86 = v121;
            BOOL v87 = os_log_type_enabled(v82, v121);
            if (v85)
            {
              if (v87)
              {
                *(_DWORD *)v132 = 136446466;
                *(void *)&void v132[4] = "nw_http_cookie_options_copy_transform_callback";
                *(_WORD *)&v132[12] = 2082;
                *(void *)&v132[14] = v85;
                _os_log_impl( &dword_181A5C000,  v82,  v86,  "%{public}s protocol options are not http_cookie, dumping backtrace:%{public}s",  v132,  0x16u);
              }

              free(v85);
              goto LABEL_207;
            }

            if (v87)
            {
              *(_DWORD *)v132 = 136446210;
              *(void *)&void v132[4] = "nw_http_cookie_options_copy_transform_callback";
              _os_log_impl( &dword_181A5C000,  v82,  v86,  "%{public}s protocol options are not http_cookie, no backtrace",  v132,  0xCu);
            }
          }

          else
          {
            unsigned int v63 = v60;
            __nwlog_obj();
            __int128 v71 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)v132 = 136446210;
            *(void *)&void v132[4] = "nw_http_cookie_options_copy_transform_callback";
            LODWORD(v109) = 12;
            id v108 = v132;
            uint64_t v72 = (void *)_os_log_send_and_compose_impl();

            unsigned int v121 = OS_LOG_TYPE_ERROR;
            unsigned int v120 = 0;
            if (v121 == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              uint32_t v73 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              unsigned int v74 = v121;
              if (os_log_type_enabled(v73, v121))
              {
                *(_DWORD *)v132 = 136446210;
                *(void *)&void v132[4] = "nw_http_cookie_options_copy_transform_callback";
                _os_log_impl(&dword_181A5C000, v73, v74, "%{public}s called with null options", v132, 0xCu);
              }

              goto LABEL_200;
            }

            if (!v120)
            {
              __nwlog_obj();
              uint32_t v73 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              char v89 = v121;
              if (os_log_type_enabled(v73, v121))
              {
                *(_DWORD *)v132 = 136446210;
                *(void *)&void v132[4] = "nw_http_cookie_options_copy_transform_callback";
                _os_log_impl( &dword_181A5C000,  v73,  v89,  "%{public}s called with null options, backtrace limit exceeded",  v132,  0xCu);
              }

              goto LABEL_200;
            }

            uint64_t v81 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            int64_t v82 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            int v83 = v121;
            int v84 = os_log_type_enabled(v82, v121);
            if (v81)
            {
              if (v84)
              {
                *(_DWORD *)v132 = 136446466;
                *(void *)&void v132[4] = "nw_http_cookie_options_copy_transform_callback";
                *(_WORD *)&v132[12] = 2082;
                *(void *)&v132[14] = v81;
                _os_log_impl( &dword_181A5C000,  v82,  v83,  "%{public}s called with null options, dumping backtrace:%{public}s",  v132,  0x16u);
              }

              free(v81);
              if (!v72) {
                goto LABEL_209;
              }
              goto LABEL_208;
            }

            if (v84)
            {
              *(_DWORD *)v132 = 136446210;
              *(void *)&void v132[4] = "nw_http_cookie_options_copy_transform_callback";
              _os_log_impl(&dword_181A5C000, v82, v83, "%{public}s called with null options, no backtrace", v132, 0xCu);
            }
          }

          goto LABEL_207;
        }

        __nwlog_obj();
        unsigned int v67 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_cookie_parse";
        uint64_t v68 = (char *)_os_log_send_and_compose_impl();

        v132[0] = 16;
        type[0] = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v68, v132, type))
        {
          if (v132[0] == 17)
          {
            __nwlog_obj();
            unsigned int v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            unsigned int v70 = v132[0];
            if (os_log_type_enabled(v69, (os_log_type_t)v132[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_cookie_parse";
              _os_log_impl(&dword_181A5C000, v69, v70, "%{public}s called with null url", buf, 0xCu);
            }
          }

          else
          {
            if (type[0])
            {
              unsigned int v77 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              unsigned int v78 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              v79 = v132[0];
              int64_t v80 = os_log_type_enabled(v78, (os_log_type_t)v132[0]);
              if (v77)
              {
                if (v80)
                {
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http_cookie_parse";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v77;
                  _os_log_impl( &dword_181A5C000,  v78,  v79,  "%{public}s called with null url, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v77);
              }

              else
              {
                if (v80)
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http_cookie_parse";
                  _os_log_impl(&dword_181A5C000, v78, v79, "%{public}s called with null url, no backtrace", buf, 0xCu);
                }
              }

              goto LABEL_192;
            }

            __nwlog_obj();
            unsigned int v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            BOOL v88 = v132[0];
            if (os_log_type_enabled(v69, (os_log_type_t)v132[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_cookie_parse";
              _os_log_impl( &dword_181A5C000,  v69,  v88,  "%{public}s called with null url, backtrace limit exceeded",  buf,  0xCu);
            }
          }
        }

    if (v24) {
      free(v24);
    }
    goto LABEL_50;
  }

              unsigned int v69 = 0LL;
LABEL_201:

              goto LABEL_202;
            }

            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint32_t v73 = (os_log_s *)(id)gLogObj;
              unsigned int v74 = type;
              if (os_log_type_enabled(v73, type))
              {
                *(_DWORD *)buf = 136446210;
                id v163 = "nw_parameters_create_secure_http_messaging";
                _os_log_impl(&dword_181A5C000, v73, v74, "%{public}s nw_protocol_transform_create failed", buf, 0xCu);
              }
            }

            else
            {
              if (v160)
              {
                BOOL v87 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                BOOL v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                char v89 = type;
                v90 = os_log_type_enabled(v88, type);
                if (v87)
                {
                  if (v90)
                  {
                    *(_DWORD *)buf = 136446466;
                    id v163 = "nw_parameters_create_secure_http_messaging";
                    uint64_t v164 = 2082;
                    id v165 = v87;
                    _os_log_impl( &dword_181A5C000,  v88,  v89,  "%{public}s nw_protocol_transform_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(v87);
                }

                else
                {
                  if (v90)
                  {
                    *(_DWORD *)buf = 136446210;
                    id v163 = "nw_parameters_create_secure_http_messaging";
                    _os_log_impl( &dword_181A5C000,  v88,  v89,  "%{public}s nw_protocol_transform_create failed, no backtrace",  buf,  0xCu);
                  }
                }

                goto LABEL_185;
              }

              __nwlog_obj();
              uint32_t v73 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v104 = type;
              if (os_log_type_enabled(v73, type))
              {
                *(_DWORD *)buf = 136446210;
                id v163 = "nw_parameters_create_secure_http_messaging";
                _os_log_impl( &dword_181A5C000,  v73,  v104,  "%{public}s nw_protocol_transform_create failed, backtrace limit exceeded",  buf,  0xCu);
              }
            }

LABEL_185:
            uint64_t v72 = v71;
            goto LABEL_186;
          }

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v46 = (id)gLogObj;
          *(_DWORD *)buf = 136446210;
          id v163 = "nw_parameters_create_secure_http_messaging";
          unsigned int v47 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          __int16 v160 = 0;
          if (__nwlog_fault(v47, &type, &v160))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              unsigned int v48 = (os_log_s *)(id)gLogObj;
              BOOL v49 = type;
              if (os_log_type_enabled(v48, type))
              {
                *(_DWORD *)buf = 136446210;
                id v163 = "nw_parameters_create_secure_http_messaging";
                _os_log_impl(&dword_181A5C000, v48, v49, "%{public}s nw_tcp_create_options failed", buf, 0xCu);
              }

  if (a2)
  {
    char v89 = a2->callbacks;
    if (v89)
    {
      supports_external_data = (unsigned int (*)(nw_protocol *))v89->supports_external_data;
      if (supports_external_data)
      {
        if (supports_external_data(a2)) {
          v91 = 64;
        }
        else {
          v91 = 0;
        }
        *(_DWORD *)(handle + 527) = *(_DWORD *)(handle + 527) & 0xFFFFFFBF | v91;
      }
    }
  }

  return 1LL;
}

    if (v87) {
      free(v87);
    }
    goto LABEL_208;
  }

  if (!v12)
  {
    __nwlog_obj();
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "-[nw_ip_channel_inbox initWithPath:flow:parameters:delegate:]";
    v91 = (char *)_os_log_send_and_compose_impl();

    uu[0] = OS_LOG_TYPE_ERROR;
    __int16 v136 = 0;
    if (__nwlog_fault(v91, uu, &v136))
    {
      if (uu[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        __int16 v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint32_t v93 = uu[0];
        if (os_log_type_enabled(v92, uu[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "-[nw_ip_channel_inbox initWithPath:flow:parameters:delegate:]";
          _os_log_impl(&dword_181A5C000, v92, v93, "%{public}s called with null delegate", buf, 0xCu);
        }
      }

      else if (v136)
      {
        unsigned int v103 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        __int16 v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v104 = uu[0];
        int v105 = os_log_type_enabled(v92, uu[0]);
        if (v103)
        {
          if (v105)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "-[nw_ip_channel_inbox initWithPath:flow:parameters:delegate:]";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v103;
            _os_log_impl( &dword_181A5C000,  v92,  v104,  "%{public}s called with null delegate, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v103);
          goto LABEL_206;
        }

        if (v105)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "-[nw_ip_channel_inbox initWithPath:flow:parameters:delegate:]";
          _os_log_impl(&dword_181A5C000, v92, v104, "%{public}s called with null delegate, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        __int16 v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        unsigned int v124 = uu[0];
        if (os_log_type_enabled(v92, uu[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "-[nw_ip_channel_inbox initWithPath:flow:parameters:delegate:]";
          _os_log_impl( &dword_181A5C000,  v92,  v124,  "%{public}s called with null delegate, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

              if (v89) {
                free(v89);
              }
              goto LABEL_202;
            }

          free(v56);
          goto LABEL_42;
        }

        if (v75)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http3_save_output_handler";
          int v59 = "%{public}s called with null quic_protocol, no backtrace";
LABEL_198:
          _os_log_impl(&dword_181A5C000, v57, v58, v59, buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_save_output_handler";
        unsigned int v56 = (char *)_os_log_send_and_compose_impl();
        v101[0] = 16;
        LOBYTE(v91) = 0;
        if (v101[0] == 17)
        {
          unsigned int v57 = (os_log_s *)__nwlog_obj();
          BOOL v58 = v101[0];
          if (!os_log_type_enabled(v57, (os_log_type_t)v101[0])) {
            goto LABEL_199;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http3_save_output_handler";
          int v59 = "%{public}s called with null http3";
          goto LABEL_198;
        }

        if (!(_BYTE)v91)
        {
          unsigned int v57 = (os_log_s *)__nwlog_obj();
          BOOL v58 = v101[0];
          if (!os_log_type_enabled(v57, (os_log_type_t)v101[0])) {
            goto LABEL_199;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http3_save_output_handler";
          int v59 = "%{public}s called with null http3, backtrace limit exceeded";
          goto LABEL_198;
        }

        unsigned int v70 = (char *)__nw_create_backtrace_string();
        unsigned int v57 = (os_log_s *)__nwlog_obj();
        BOOL v58 = v101[0];
        __int128 v71 = os_log_type_enabled(v57, (os_log_type_t)v101[0]);
        if (!v70)
        {
          if (!v71) {
            goto LABEL_199;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http3_save_output_handler";
          int v59 = "%{public}s called with null http3, no backtrace";
          goto LABEL_198;
        }

        if (v71)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_save_output_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v70;
          _os_log_impl( &dword_181A5C000,  v57,  v58,  "%{public}s called with null http3, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v70);
      }

        if (v58) {
          free(v58);
        }
        unsigned int v65 = 0LL;
        goto LABEL_211;
      }
    }

    else
    {
      dataa = (dispatch_data_s *)MEMORY[0x1895F8AA8];
      BOOL v64 = MEMORY[0x1895F8AA8];
    }

    if (object)
    {
      if (*((void *)object + 3) != *((void *)object + 2))
      {
        v287[0] = MEMORY[0x1895F87A8];
        v287[1] = 3221225472LL;
        v287[2] = ___ZL28nw_listener_inbox_accept_udpP24nw_listener_inbox_socketiPiPbP8sockaddrjP16nw_ip_ecn_flag_tPU22objcproto11OS_nw_array8NSObject_block_invoke;
        v287[3] = &unk_189BC4FE0;
        v289 = v7;
        v291[0] = *(_OWORD *)address;
        *(_OWORD *)((char *)v291 + 12) = *(_OWORD *)&address[12];
        unsigned int v65 = dataa;
        v288 = v65;
        v290 = v5;
        unsigned int v66 = nw_array_apply(object, (uint64_t)v287);

        if (!v66)
        {
LABEL_211:
          unsigned int v62 = 0LL;
LABEL_530:

          goto LABEL_83;
        }
      }
    }

    v286 = 0LL;
    nw_parameters_get_upper_transport_protocol_options(*((void **)v14 + 6));
    unsigned int v67 = (void *)objc_claimAutoreleasedReturnValue();
    if (nw_protocol_options_is_quic_stream(v67))
    {
      source_connection_id_size_t length = nw_quic_get_source_connection_id_length(v67);
    }

    else
    {
      if (!nw_protocol_options_is_quic_connection(v67))
      {
        unsigned int v75 = 0;
        goto LABEL_126;
      }

      source_connection_id_size_t length = nw_quic_connection_get_source_connection_id_length(v67);
    }

    unsigned int v75 = source_connection_id_length;
LABEL_126:
    __nwlog_obj();
    int64_t v82 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v75;
      _os_log_impl(&dword_181A5C000, v82, OS_LOG_TYPE_DEBUG, "%{public}s Using CID length %u", buf, 0x12u);
    }

    *(void *)buf = MEMORY[0x1895F87A8];
    *(void *)&buf[8] = 0x40000000LL;
    *(void *)&buf[16] = __nw_quic_parse_dispatch_block_invoke;
    *(void *)&_BYTE buf[24] = &__block_descriptor_tmp_30000;
    v297[0] = v75;
    *(void *)&buf[32] = &v286;
    if (dispatch_data_apply(dataa, buf) && if_indextoname(v293, (char *)v305))
    {
      __nwlog_obj();
      int v83 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v305;
        *(_WORD *)&buf[22] = 2112;
        *(void *)&_BYTE buf[24] = v286;
        _os_log_impl( &dword_181A5C000,  v83,  OS_LOG_TYPE_DEFAULT,  "%{public}s Received QUIC short header packet on interface %s with CID %@",  buf,  0x20u);
      }

      v264 = nw_protocol_copy_quic_definition();
      identifier = (__int128 *)nw_protocol_definition_get_identifier(v264);
      *(void *)&v283.sa_len = 0LL;
      *(void *)&v283.sa_data[6] = 0LL;
      v285 = 0;
      v284 = 0LL;
      *(_WORD *)v283.sa_data = __rev16(nw_endpoint_get_port(*((nw_endpoint_t *)v14 + 4)));
      *(_WORD *)&v283.sa_len = 7708;
      v269 = nw_parameters_copy_context(*((void **)v14 + 6));
      v261 = nw_endpoint_create_address(&v283);
      unsigned int v85 = nw_context_copy_registered_endpoint(v269, v261);
      v86 = nw_endpoint_copy_registrar_for_identifier(v85, identifier, 0);
      if (v86)
      {
        v259 = v86;
        quic_instance_by_id = (void *)nw_protocol_instance_registrar_find_quic_instance_by_id(v86, v286);
        v86 = v259;
        if (quic_instance_by_id)
        {
          __nwlog_obj();
          BOOL v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v88, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
            _os_log_impl( &dword_181A5C000,  v88,  OS_LOG_TYPE_INFO,  "%{public}s Found an existing QUIC connection, adding a new path",  buf,  0xCu);
          }

          char v89 = quic_instance_by_id[3];
          if (!v89) {
            goto LABEL_268;
          }
          v90 = *(void (**)(void *))(v89 + 120);
          if (!v90) {
            goto LABEL_268;
          }
          v90(quic_instance_by_id);
          v258 = (void *)objc_claimAutoreleasedReturnValue();
          __nwlog_obj();
          v91 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v91, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v258;
            _os_log_impl(&dword_181A5C000, v91, OS_LOG_TYPE_INFO, "%{public}s QUIC protocol peer path %@", buf, 0x16u);
          }

          __int16 v92 = nw_interface_create_with_name((char *)v305);
          v257 = nw_endpoint_create_address(v7);
          *(void *)os_log_type_t type = 0LL;
          v280 = type;
          v281 = 0x2020000000LL;
          uint32_t v93 = calloc(1uLL, 0x10uLL);
          if (!v93)
          {
            __nwlog_obj();
            __int16 v240 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_enabled(v240, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "strict_calloc";
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = 1LL;
            *(_WORD *)&buf[22] = 2048;
            *(void *)&_BYTE buf[24] = 16LL;
            v241 = (void *)_os_log_send_and_compose_impl();

            result = __nwlog_abort((uint64_t)v241);
            if (result)
            {
              __break(1u);
              return result;
            }

            free(v241);
          }

          v282 = v93;
          v276[0] = MEMORY[0x1895F87A8];
          v276[1] = 3221225472LL;
          v276[2] = ___ZL28nw_listener_inbox_accept_udpP24nw_listener_inbox_socketiPiPbP8sockaddrjP16nw_ip_ecn_flag_tPU22objcproto11OS_nw_array8NSObject_block_invoke_85;
          v276[3] = &unk_189BC5008;
          BOOL v94 = v92;
          v277 = v94;
          v278 = type;
          nw_path_enumerate_interface_options(v258, v276);
          if (uuid_is_null(*((const unsigned __int8 **)v280 + 3)))
          {
            __nwlog_obj();
            unsigned int v95 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v95, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
              _os_log_impl( &dword_181A5C000,  v95,  OS_LOG_TYPE_INFO,  "%{public}s Did not find a matching interface",  buf,  0xCu);
            }

            goto LABEL_265;
          }

          unsigned int v95 = (os_log_s *)nw_path_copy_flow_registration(v269, (uint64_t)quic_instance_by_id);
          id v134 = nw_interface_option_details_create(v94, *((_OWORD **)v280 + 3), v257, 0, dataa, v13);
          uint64_t v256 = v134;
          if (v134)
          {
            nw_path_flow_registration_add_extra_interface_option(v95, v134);
          }

          else
          {
            __nwlog_obj();
            __int16 v148 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v148, OS_LOG_TYPE_ERROR))
            {
              nw_endpoint_t v149 = *((void *)v280 + 3);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
              *(_WORD *)&buf[12] = 2112;
              *(void *)&buf[14] = v94;
              *(_WORD *)&buf[22] = 1042;
              *(_DWORD *)&_BYTE buf[24] = 16;
              *(_WORD *)&_BYTE buf[28] = 2098;
              *(void *)&buf[30] = v149;
              _os_log_impl( &dword_181A5C000,  v148,  OS_LOG_TYPE_ERROR,  "%{public}s Unable to create interface option details with %@ [%{public,uuid_t}.16P]",  buf,  0x26u);
            }
          }

          __int16 v150 = nw_path_flow_registration_copy_path(v95);
          id v151 = quic_instance_by_id[3];
          if (v151)
          {
            __int16 v152 = *(void (**)(void *, void, BOOL))(v151 + 168);
            if (v152)
            {
              v152(quic_instance_by_id, quic_instance_by_id[6], v150);
LABEL_264:

LABEL_265:
              v153 = (void *)*((void *)v280 + 3);
              if (v153)
              {
                free(v153);
                *((void *)v280 + 3) = 0LL;
              }

              _Block_object_dispose(type, 8);
LABEL_268:

LABEL_529:
              unsigned int v62 = 0LL;
              unsigned int v65 = dataa;
              goto LABEL_530;
            }
          }

          __nwlog_obj();
          __int16 v242 = (void *)objc_claimAutoreleasedReturnValue();
          v243 = (const char *)quic_instance_by_id[2];
          if (!v243) {
            v243 = "invalid";
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v243;
          v255 = (char *)_os_log_send_and_compose_impl();

          v275 = OS_LOG_TYPE_ERROR;
          v274 = 0;
          if (__nwlog_fault(v255, &v275, &v274))
          {
            if (v275 == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              __int16 v244 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              v245 = v275;
              if (os_log_type_enabled(v244, v275))
              {
                __int16 v246 = (const char *)quic_instance_by_id[2];
                if (!v246) {
                  __int16 v246 = "invalid";
                }
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v246;
                _os_log_impl( &dword_181A5C000,  v244,  v245,  "%{public}s protocol %{public}s has invalid updated_path callback",  buf,  0x16u);
              }
            }

            else
            {
              if (v274)
              {
                v247 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                __int16 v248 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                __int16 v254 = v275;
                v249 = os_log_type_enabled(v248, v275);
                if (v247)
                {
                  if (v249)
                  {
                    __int16 v250 = (const char *)quic_instance_by_id[2];
                    if (!v250) {
                      __int16 v250 = "invalid";
                    }
                    *(_DWORD *)buf = 136446722;
                    *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v250;
                    *(_WORD *)&buf[22] = 2082;
                    *(void *)&_BYTE buf[24] = v247;
                    _os_log_impl( &dword_181A5C000,  v248,  v254,  "%{public}s protocol %{public}s has invalid updated_path callback, dumping backtrace:%{public}s",  buf,  0x20u);
                  }

                  free(v247);
                  goto LABEL_579;
                }

                if (v249)
                {
                  unint64_t v253 = (const char *)quic_instance_by_id[2];
                  if (!v253) {
                    unint64_t v253 = "invalid";
                  }
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v253;
                  _os_log_impl( &dword_181A5C000,  v248,  v254,  "%{public}s protocol %{public}s has invalid updated_path callback, no backtrace",  buf,  0x16u);
                }
              }

              else
              {
                __nwlog_obj();
                __int16 v248 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                id v251 = v275;
                if (os_log_type_enabled(v248, v275))
                {
                  __int16 v252 = (const char *)quic_instance_by_id[2];
                  if (!v252) {
                    __int16 v252 = "invalid";
                  }
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v252;
                  _os_log_impl( &dword_181A5C000,  v248,  v251,  "%{public}s protocol %{public}s has invalid updated_path callback, backtrace limit exceeded",  buf,  0x16u);
                }
              }
            }
          }

    if (v94) {
      goto LABEL_213;
    }
LABEL_3:
    uuid_clear(uu);
  }

  int v10 = **(_DWORD **)(StatusReg + 8);
  if (v7) {
    free(v7);
  }
LABEL_14:
  if (v10 != 22) {
    goto LABEL_209;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v12 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_path_necp_check_for_updates";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 48;
    _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_INFO,  "%{public}s Trying to copy result again for %u flows (max)",  buf,  0x12u);
  }

  id v7 = (char *)calloc(1uLL, 0x6400uLL);
  if (!v7)
  {
    __nwlog_obj();
    BOOL v110 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v110, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "strict_calloc";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = 1LL;
    *(_WORD *)&buf[22] = 2048;
    v153 = 25600LL;
    id v111 = (void *)_os_log_send_and_compose_impl();

    free(v111);
    id v7 = 0LL;
  }

  nw_path_shared_necp_fd(v141);
  unint64_t v6 = necp_client_action();
  int v10 = **(_DWORD **)(StatusReg + 8);
  if (v7) {
    free(v7);
  }
  if (v10 == 22)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unsigned int v96 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_path_necp_check_for_updates";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 22;
      BOOL v97 = v96;
      BOOL v98 = OS_LOG_TYPE_ERROR;
      goto LABEL_211;
    }
  }

  else
  {
LABEL_209:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unsigned int v96 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_path_necp_check_for_updates";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v10;
      BOOL v97 = v96;
      BOOL v98 = OS_LOG_TYPE_DEBUG;
LABEL_211:
      _os_log_impl(&dword_181A5C000, v97, v98, "%{public}s Failed to copy updated result (%d)", buf, 0x12u);
    }
  }

LABEL_213:
}

LABEL_387:
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    os_log_type_t v104 = (os_log_s *)gLogObj;
                    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
                    {
                      int v105 = *a1;
                      int v106 = *a3;
                      else {
                        int v107 = 60;
                      }
                      if (!(_DWORD)v21) {
                        int v107 = 61;
                      }
                      *(_DWORD *)id v128 = 136448003;
                      *(void *)&v128[4] = "sa_dst_compare_internal";
                      *(_WORD *)&v128[12] = 1040;
                      *(_DWORD *)&v128[14] = v105;
                      *(_WORD *)&v128[18] = 2101;
                      *(void *)&v128[20] = a1;
                      *(_WORD *)&v128[28] = 1024;
                      *(_DWORD *)&v128[30] = a2;
                      *(_WORD *)&v128[34] = 1024;
                      *(_DWORD *)&v128[36] = v107;
                      *(_WORD *)&v128[40] = 1040;
                      *(_DWORD *)&v128[42] = v106;
                      *(_WORD *)&v128[46] = 2101;
                      *(void *)&v128[48] = a3;
                      *(_WORD *)&v128[56] = 1024;
                      *(_DWORD *)&v128[58] = a4;
                      _os_log_impl( &dword_181A5C000,  v104,  OS_LOG_TYPE_DEBUG,  "%{public}s %{sensitive,network:sockaddr}.*P@%u %c %{sensitive,network:sockaddr}.*P@%u",  v128,  0x3Eu);
                    }

                    return v21;
                  }

                  if (*(unsigned __int16 *)&v128[44] == 288)
                  {
                    BOOL v87 = *(_WORD *)&v128[46] != 0;
                    goto LABEL_319;
                  }
                }

                BOOL v87 = 1;
                goto LABEL_319;
              }

              if (!type[37]) {
                goto LABEL_34;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v24 = (os_log_s *)gLogObj;
              if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_354;
              }
              *(_DWORD *)buf = 136446210;
              v132 = "sa_dst_compare_rfc6724";
              os_log_type_t v25 = "%{public}s Rule 1, prefer d2, d1 is not routable";
LABEL_352:
              uint64_t v72 = v24;
              uint32_t v73 = 12;
              goto LABEL_353;
            }

            unint64_t v6 = DWORD1(v130);
            if (DWORD1(v130))
            {
              __int128 v71 = (os_log_s *)__nwlog_obj();
              if (!os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_354;
              }
              *(_DWORD *)buf = 136446466;
              v132 = "sa_dst_compare_statistics";
              __int16 v133 = 1024;
              *(_DWORD *)id v134 = v6;
              os_log_type_t v25 = "%{public}s prefer 2, dst 1 has no successful connections and %u attempts";
              uint64_t v72 = v71;
              uint32_t v73 = 18;
              goto LABEL_353;
            }
          }

                __break(1u);
                return result;
              }
            }

            else
            {
              nw_protocol_set_input_handler((uint64_t)handle, v44);
              if (v70) {
                goto LABEL_142;
              }
            }

            if (v35)
            {
              unsigned int v124 = *(void (***)(uint64_t, _OWORD *))(v35 + 24);
              if (v124)
              {
                v125 = *v124;
                if (v125)
                {
                  v125(v35, v58);
LABEL_233:
                  if (*((void *)handle + 158))
                  {
                    if (((*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0x400000) == 0)
                    {
                      if (gLogDatapath)
                      {
                        v183 = (os_log_s *)__nwlog_obj();
                        if (os_log_type_enabled(v183, OS_LOG_TYPE_DEBUG))
                        {
                          v184 = *((_DWORD *)handle + 320);
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_protocol_http3_add_input_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = handle + 1289;
                          *(_WORD *)&buf[22] = 2080;
                          *(void *)&_BYTE buf[24] = " ";
                          *(_WORD *)&buf[32] = 1024;
                          *(_DWORD *)&buf[34] = v184;
                          _os_log_impl( &dword_181A5C000,  v183,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> deactivating destroy timer because we are active again",  buf,  0x26u);
                        }
                      }
                    }

                    nw_queue_cancel_source(*((void *)handle + 158), v104);
                    *((void *)handle + 15_Block_object_dispose(va, 8) = 0LL;
                  }

                  nw_endpoint_t v155 = *(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16);
                  if ((v155 & 0x200000) != 0 && *((void *)handle + 155) && *((_DWORD *)handle + 319) == 2)
                  {
                    if ((v155 & 0x400000) == 0)
                    {
                      if (gLogDatapath)
                      {
                        v212 = (os_log_s *)__nwlog_obj();
                        if (os_log_type_enabled(v212, OS_LOG_TYPE_DEBUG))
                        {
                          v213 = *((_DWORD *)handle + 320);
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_protocol_http3_add_input_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = handle + 1289;
                          *(_WORD *)&buf[22] = 2080;
                          *(void *)&_BYTE buf[24] = " ";
                          *(_WORD *)&buf[32] = 1024;
                          *(_DWORD *)&buf[34] = v213;
                          _os_log_impl( &dword_181A5C000,  v212,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> re-enabling QUIC keepalives",  buf,  0x26u);
                        }
                      }
                    }

                    __int16 v156 = *(unsigned __int16 *)v222;
                    v157 = (v156 | (handle[1375] << 16)) & 0xFFDFFFFF;
                    *(_WORD *)v222 = v156;
                    handle[1375] = BYTE2(v157);
                    nw_quic_connection_set_keepalive(*((void **)handle + 155), 0xFFFF);
                    buf[0] = 0;
                    output_handler = v219->output_handler;
                    if (output_handler)
                    {
                      id v159 = output_handler->callbacks;
                      if (v159)
                      {
                        notify = (void (*)(nw_protocol *, nw_protocol *))v159->notify;
                        if (notify) {
                          notify(output_handler, v219);
                        }
                      }
                    }

                    nw_endpoint_t v155 = *(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16);
                  }

                  if ((v155 & 0x400000) == 0)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    nw_endpoint_t v161 = (os_log_s *)gLogObj;
                    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
                    {
                      __int16 v162 = *((_DWORD *)handle + 320);
                      *(_DWORD *)buf = 136447490;
                      *(void *)&uint8_t buf[4] = "nw_protocol_http3_add_input_handler";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = handle + 1289;
                      *(_WORD *)&buf[22] = 2080;
                      *(void *)&_BYTE buf[24] = " ";
                      *(_WORD *)&buf[32] = 1024;
                      *(_DWORD *)&buf[34] = v162;
                      *(_WORD *)&buf[38] = 2048;
                      *(void *)&buf[40] = v44;
                      *(_WORD *)&buf[48] = 2082;
                      *(void *)&buf[50] = (char *)v58 + 636;
                      _os_log_impl( &dword_181A5C000,  v161,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s%s<i%u> added input handler %p from %{public}s",  buf,  0x3Au);
                    }
                  }

                  return 1LL;
                }
              }

              __nwlog_obj();
              v182 = *(const char **)(v35 + 16);
              if (!v182) {
                v182 = "invalid";
              }
            }

            else
            {
              __nwlog_obj();
              v182 = "invalid";
            }

            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_http3_add_input_handler";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v182;
            v186 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            v228[0] = 0;
            if (__nwlog_fault(v186, type, v228))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                os_log_type_t v187 = (os_log_s *)__nwlog_obj();
                v188 = type[0];
                if (!os_log_type_enabled(v187, type[0])) {
                  goto LABEL_351;
                }
                v189 = "invalid";
                if (v35 && *(void *)(v35 + 16)) {
                  v189 = *(const char **)(v35 + 16);
                }
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_protocol_http3_add_input_handler";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v189;
                v190 = "%{public}s protocol %{public}s has invalid add_input_handler callback";
LABEL_349:
                v209 = v187;
                v210 = v188;
LABEL_350:
                _os_log_impl(&dword_181A5C000, v209, v210, v190, buf, 0x16u);
                unsigned int v44 = (uint64_t)v221;
                goto LABEL_351;
              }

              if (!v228[0])
              {
                os_log_type_t v187 = (os_log_s *)__nwlog_obj();
                v188 = type[0];
                if (!os_log_type_enabled(v187, type[0])) {
                  goto LABEL_351;
                }
                v208 = "invalid";
                if (v35 && *(void *)(v35 + 16)) {
                  v208 = *(const char **)(v35 + 16);
                }
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_protocol_http3_add_input_handler";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v208;
                v190 = "%{public}s protocol %{public}s has invalid add_input_handler callback, backtrace limit exceeded";
                goto LABEL_349;
              }

              id v191 = (char *)__nw_create_backtrace_string();
              v192 = (os_log_s *)__nwlog_obj();
              v193 = type[0];
              v194 = os_log_type_enabled(v192, type[0]);
              if (v191)
              {
                if (v194)
                {
                  os_log_type_t v195 = "invalid";
                  if (v35 && *(void *)(v35 + 16)) {
                    os_log_type_t v195 = *(const char **)(v35 + 16);
                  }
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_protocol_http3_add_input_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v195;
                  *(_WORD *)&buf[22] = 2082;
                  *(void *)&_BYTE buf[24] = v191;
                  _os_log_impl( &dword_181A5C000,  v192,  v193,  "%{public}s protocol %{public}s has invalid add_input_handler callback, dumping backtrace:%{public}s",  buf,  0x20u);
                  unsigned int v44 = (uint64_t)v221;
                }

                free(v191);
                goto LABEL_351;
              }

              if (v194)
              {
                v211 = "invalid";
                if (v35 && *(void *)(v35 + 16)) {
                  v211 = *(const char **)(v35 + 16);
                }
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_protocol_http3_add_input_handler";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v211;
                v190 = "%{public}s protocol %{public}s has invalid add_input_handler callback, no backtrace";
                v209 = v192;
                v210 = v193;
                goto LABEL_350;
              }
            }

LABEL_424:
  if (v99) {
    free(v99);
  }
  return 0LL;
}

                    v291 = *(unsigned int *)(v274 + 336) + 1LL;
                    v292 = v291 << 31 >> 31;
                    *(_DWORD *)(v274 + 336) = v291;
                    v293 = v579;
                    if (v292 == v291 && (v292 & 0x8000000000000000LL) == 0) {
                      goto LABEL_463;
                    }
                    v294 = v274;
                    __nwlog_obj();
                    v295 = *(unsigned int *)(v294 + 336);
                    *(_DWORD *)buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = "http1->connections_count";
                    *(_WORD *)&buf[22] = 2048;
                    v608 = 1LL;
                    *(_WORD *)v609 = 2048;
                    *(void *)&v609[2] = v295;
                    v296 = (char *)_os_log_send_and_compose_impl();
                    type[0] = OS_LOG_TYPE_ERROR;
                    LOBYTE(aBlock) = 0;
                    if (__nwlog_fault(v296, type, &aBlock))
                    {
                      if (type[0] == OS_LOG_TYPE_FAULT)
                      {
                        v297 = (os_log_s *)__nwlog_obj();
                        v298 = type[0];
                        if (os_log_type_enabled(v297, type[0]))
                        {
                          v299 = *(unsigned int *)(v580 + 336);
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = "http1->connections_count";
                          *(_WORD *)&buf[22] = 2048;
                          v608 = 1LL;
                          *(_WORD *)v609 = 2048;
                          *(void *)&v609[2] = v299;
                          v300 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_459:
                          _os_log_impl(&dword_181A5C000, v297, v298, v300, buf, 0x2Au);
                        }
                      }

                      else if ((_BYTE)aBlock)
                      {
                        v303 = (char *)__nw_create_backtrace_string();
                        v297 = (os_log_s *)__nwlog_obj();
                        v298 = type[0];
                        v304 = os_log_type_enabled(v297, type[0]);
                        if (v303)
                        {
                          if (v304)
                          {
                            v305 = *(unsigned int *)(v580 + 336);
                            *(_DWORD *)buf = 136447234;
                            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                            *(_WORD *)&buf[12] = 2082;
                            *(void *)&buf[14] = "http1->connections_count";
                            *(_WORD *)&buf[22] = 2048;
                            v608 = 1LL;
                            *(_WORD *)v609 = 2048;
                            *(void *)&v609[2] = v305;
                            *(_WORD *)&v609[10] = 2082;
                            *(void *)&v609[12] = v303;
                            _os_log_impl( &dword_181A5C000,  v297,  v298,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                          }

                          free(v303);
                          goto LABEL_460;
                        }

                        if (v304)
                        {
                          v324 = *(unsigned int *)(v580 + 336);
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = "http1->connections_count";
                          *(_WORD *)&buf[22] = 2048;
                          v608 = 1LL;
                          *(_WORD *)v609 = 2048;
                          *(void *)&v609[2] = v324;
                          v300 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                          goto LABEL_459;
                        }
                      }

                      else
                      {
                        v297 = (os_log_s *)__nwlog_obj();
                        v298 = type[0];
                        if (os_log_type_enabled(v297, type[0]))
                        {
                          v323 = *(unsigned int *)(v580 + 336);
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = "http1->connections_count";
                          *(_WORD *)&buf[22] = 2048;
                          v608 = 1LL;
                          *(_WORD *)v609 = 2048;
                          *(void *)&v609[2] = v323;
                          v300 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                          goto LABEL_459;
                        }
                      }
                    }

          __nwlog_obj();
          v276 = *(void *)(v2 + 32);
          v277 = "invalid";
          if (v276)
          {
            v278 = *(const char **)(v276 + 16);
            if (v278) {
              v277 = v278;
            }
          }

          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v277;
          v279 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          v306 = 0;
          if (type == OS_LOG_TYPE_FAULT)
          {
            v280 = (os_log_s *)__nwlog_obj();
            v281 = type;
            if (os_log_type_enabled(v280, type))
            {
              v282 = *(void *)(v305 + 32);
              v283 = "invalid";
              if (v282)
              {
                v284 = *(const char **)(v282 + 16);
                if (v284) {
                  v283 = v284;
                }
              }

              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v283;
              v285 = "%{public}s protocol %{public}s has invalid remove_input_handler callback";
LABEL_452:
              _os_log_impl(&dword_181A5C000, v280, v281, v285, buf, 0x16u);
            }
          }

          else if (v306)
          {
            v286 = (char *)__nw_create_backtrace_string();
            v280 = (os_log_s *)__nwlog_obj();
            v281 = type;
            v287 = os_log_type_enabled(v280, type);
            if (v286)
            {
              if (v287)
              {
                v288 = *(void *)(v305 + 32);
                v289 = "invalid";
                if (v288)
                {
                  v290 = *(const char **)(v288 + 16);
                  if (v290) {
                    v289 = v290;
                  }
                }

                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v289;
                *(_WORD *)&buf[22] = 2082;
                v309 = v286;
                _os_log_impl( &dword_181A5C000,  v280,  v281,  "%{public}s protocol %{public}s has invalid remove_input_handler callback, dumping backtrace:%{public}s",  buf,  0x20u);
              }

              free(v286);
              goto LABEL_453;
            }

            if (v287)
            {
              v294 = *(void *)(v305 + 32);
              v295 = "invalid";
              if (v294)
              {
                v296 = *(const char **)(v294 + 16);
                if (v296) {
                  v295 = v296;
                }
              }

              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v295;
              v285 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, no backtrace";
              goto LABEL_452;
            }
          }

          else
          {
            v280 = (os_log_s *)__nwlog_obj();
            v281 = type;
            if (os_log_type_enabled(v280, type))
            {
              v291 = *(void *)(v305 + 32);
              v292 = "invalid";
              if (v291)
              {
                v293 = *(const char **)(v291 + 16);
                if (v293) {
                  v292 = v293;
                }
              }

              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v292;
              v285 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, backtrace limit exceeded";
              goto LABEL_452;
            }
          }

BOOL sa_dst_lookup(unsigned __int8 *a1, int a2, _OWORD *a3)
{
  uint64_t v49 = *MEMORY[0x1895F89C0];
  pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
  pthread_once(&cache_init, (void (*)(void))sa_dst_compare_init_once);
  os_unfair_lock_lock((os_unfair_lock_t)&cache_lock);
  uint64_t v6 = mach_absolute_time();
  id v7 = (void *)cache;
  if (!cache) {
    goto LABEL_28;
  }
  uint64_t v8 = v6;
  char v9 = 0;
  unint64_t v10 = cache_timeout;
  int v11 = &cache;
  do
  {
    while (v8 - *v7 >= v10)
    {
      uint64_t *v11 = v7[1];
      free(v7);
      unint64_t v10 = cache_timeout;
      id v7 = (void *)*v11;
      if (!*v11) {
        goto LABEL_26;
      }
    }

    if ((v9 & 1) != 0) {
      goto LABEL_6;
    }
    if (*((_DWORD *)v7 + 22) == a2)
    {
      int v12 = a1[1];
      if (v12 == *((unsigned __int8 *)v7 + 17))
      {
        BOOL v13 = (unsigned __int8 *)(v7 + 2);
        if (v12 == 30)
        {
          BOOL v14 = *((void *)a1 + 1) == v7[3] && *((void *)a1 + 2) == v7[4];
          if (v14 && *((_DWORD *)a1 + 6) == *((_DWORD *)v7 + 10))
          {
LABEL_25:
            __int128 v16 = *((_OWORD *)v7 + 2);
            *a3 = *(_OWORD *)v13;
            a3[1] = v16;
            __int128 v17 = *((_OWORD *)v7 + 3);
            __int128 v18 = *((_OWORD *)v7 + 4);
            __int128 v19 = *((_OWORD *)v7 + 6);
            a3[4] = *((_OWORD *)v7 + 5);
            a3[5] = v19;
            a3[2] = v17;
            a3[3] = v18;
            id v7 = (void *)*v11;
LABEL_6:
            char v9 = 1;
            goto LABEL_23;
          }
        }

        else if (v12 == 2)
        {
          if (*((_DWORD *)a1 + 1) == *((_DWORD *)v7 + 5)) {
            goto LABEL_25;
          }
        }

        else
        {
          size_t v15 = *a1;
          if ((_DWORD)v15 == *v13 && !memcmp(a1, v7 + 2, v15)) {
            goto LABEL_25;
          }
        }
      }
    }

    char v9 = 0;
LABEL_23:
    int v11 = v7 + 1;
    id v7 = (void *)v7[1];
  }

  while (v7);
LABEL_26:
  if ((v9 & 1) != 0)
  {
    uint64_t v20 = 1LL;
    goto LABEL_34;
  }

void sa_dst_fill_netsrc(unsigned __int8 *a1)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  int control_socket = sa_dst_fill_netsrc(Destination *)::netsrc_sockfd;
  if (sa_dst_fill_netsrc(Destination *)::netsrc_sockfd < 0)
  {
    int control_socket = nw_create_control_socket((uint64_t)"com.apple.netsrc");
    sa_dst_fill_netsrc(Destination *)::netsrc_sockfd = control_socket;
    if (control_socket < 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "sa_dst_fill_netsrc";
      BOOL v13 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      v30[0] = 0;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v14 = (os_log_s *)gLogObj;
        os_log_type_t v15 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_41;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "sa_dst_fill_netsrc";
        __int128 v16 = "%{public}s nw_create_control_socket failed";
      }

      else if (v30[0])
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v14 = (os_log_s *)gLogObj;
        os_log_type_t v15 = type[0];
        BOOL v22 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (backtrace_string)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "sa_dst_fill_netsrc";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s nw_create_control_socket failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_41;
        }

        if (!v22)
        {
LABEL_41:
          if (v13) {
            free(v13);
          }
          return;
        }

        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "sa_dst_fill_netsrc";
        __int128 v16 = "%{public}s nw_create_control_socket failed, no backtrace";
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v14 = (os_log_s *)gLogObj;
        os_log_type_t v15 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_41;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "sa_dst_fill_netsrc";
        __int128 v16 = "%{public}s nw_create_control_socket failed, backtrace limit exceeded";
      }

      _os_log_impl(&dword_181A5C000, v14, v15, v16, buf, 0xCu);
      goto LABEL_41;
    }
  }

  memset(v26, 0, sizeof(v26));
  int v27 = 0;
  if (sa_dst_fill_netsrc(Destination *)::version) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  int v4 = *((_DWORD *)a1 + 18);
  *(_DWORD *)os_log_type_t type = v3;
  int v25 = v4;
  size_t v5 = *a1;
  if (v5 >= 0x1D)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v6 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "sa_dst_fill_netsrc";
      _os_log_impl(&dword_181A5C000, v6, OS_LOG_TYPE_DEBUG, "%{public}s sockaddr is too big", buf, 0xCu);
    }

    return;
  }

  memcpy(v26, a1, v5);
  if (send(control_socket, type, 0x24uLL, 0) == 36)
  {
    if (sa_dst_fill_netsrc(Destination *)::version == 1)
    {
      memset(buf, 0, 40);
      if (recv(sa_dst_fill_netsrc(Destination *)::netsrc_sockfd, buf, 0x28uLL, 0) == 40)
      {
        *((_DWORD *)a1 + _Block_object_dispose(va, 8) = *(_DWORD *)&buf[34];
        if (buf[0] <= 0x1CuLL) {
          memcpy(a1 + 36, buf, buf[0]);
        }
        int v7 = *(_DWORD *)&buf[30];
        *((_DWORD *)a1 + 16) = *(unsigned __int16 *)&buf[28];
        *((_DWORD *)a1 + 17) = v7;
        return;
      }

      int v23 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unint64_t v10 = (os_log_s *)gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG)) {
        return;
      }
      goto LABEL_34;
    }

    uint64_t v29 = 0LL;
    memset(buf, 0, sizeof(buf));
    if (recv(sa_dst_fill_netsrc(Destination *)::netsrc_sockfd, buf, 0x38uLL, 0) == 56)
    {
      int v17 = *(_DWORD *)&buf[44];
      *((_DWORD *)a1 + _Block_object_dispose(va, 8) = v29;
      *(_OWORD *)(a1 + 36) = *(_OWORD *)buf;
      *((_OWORD *)a1 + 3) = *(_OWORD *)&buf[12];
      int v19 = *(_DWORD *)&buf[36];
      uint8_t v18 = buf[40];
      *((_DWORD *)a1 + 16) = *(_DWORD *)&buf[40];
      *((_DWORD *)a1 + 17) = v17;
      *((_DWORD *)a1 + 19) = WORD2(v29);
      uint64_t v20 = *(void *)&buf[28];
      *((_DWORD *)a1 + 22) = v19;
      *((void *)a1 + 10) = v20;
      a1[92] = a1[92] & 0xF8 | (v18 >> 5);
      return;
    }

    int v23 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v10 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
LABEL_34:
      *(_DWORD *)uint64_t v30 = 136446466;
      uint64_t v31 = "sa_dst_fill_netsrc";
      __int16 v32 = 1024;
      int v33 = v23;
      int v11 = "%{public}s recv failed %{darwin.errno}d";
      int v12 = v30;
      goto LABEL_35;
    }
  }

  else
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    int v9 = **(_DWORD **)(StatusReg + 8);
    if (v9 == 22 && (sa_dst_fill_netsrc(Destination *)::version & 1) == 0)
    {
      sa_dst_fill_netsrc(Destination *)::version = 1;
      sa_dst_fill_netsrc(a1);
      int v9 = **(_DWORD **)(StatusReg + 8);
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v10 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "sa_dst_fill_netsrc";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v9;
      int v11 = "%{public}s send failed %{darwin.errno}d";
      int v12 = buf;
LABEL_35:
      _os_log_impl(&dword_181A5C000, v10, OS_LOG_TYPE_DEBUG, v11, v12, 0x12u);
    }
  }

uint64_t rfc6724_scope(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 1);
  if (v2 == 2)
  {
    unsigned int v8 = bswap32(*(_DWORD *)(a1 + 4));
    BOOL v7 = HIWORD(v8) == 43518 || HIBYTE(v8) == 127;
    unsigned int v6 = 14;
    goto LABEL_13;
  }

  if (v2 != 30) {
    return 0LL;
  }
  int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 == 255)
  {
    unsigned int v10 = (*(_BYTE *)(a1 + 9) & 0xF) - 1;
    if (v10 >= 5) {
      return 14LL;
    }
    else {
      return dword_18272C8C8[v10];
    }
  }

  else
  {
    if (v3 == 254)
    {
      unsigned int v4 = *(unsigned __int8 *)(a1 + 9);
      int v5 = v4 & 0xC0;
      if (v4 <= 0xBF) {
        unsigned int v6 = 14;
      }
      else {
        unsigned int v6 = 5;
      }
      BOOL v7 = v5 == 128;
LABEL_13:
      if (v7) {
        return 2LL;
      }
      else {
        return v6;
      }
    }

    uint64_t v11 = *(void *)(a1 + 15);
    uint64_t result = 14LL;
    if (!(*(void *)(a1 + 8) | v11))
    {
      if (*(_BYTE *)(a1 + 23) == 1) {
        return 2LL;
      }
      else {
        return 14LL;
      }
    }
  }

  return result;
}

uint64_t common_prefix_length(const sockaddr_in_4_6 *a1, const sockaddr_in_4_6 *a2)
{
  if (a1->var0.sa_family != 30 || a2->var0.sa_family != 30) {
    return 0LL;
  }
  int v2 = a1->var3.sin6_addr.__u6_addr8[0] ^ a2->var3.sin6_addr.__u6_addr8[0];
  if (v2)
  {
    uint64_t result = 0LL;
  }

  else
  {
    int v2 = a1->var3.sin6_addr.__u6_addr8[1] ^ a2->var3.sin6_addr.__u6_addr8[1];
    if (v2)
    {
      uint64_t result = 8LL;
    }

    else
    {
      int v2 = a1->var3.sin6_addr.__u6_addr8[2] ^ a2->var3.sin6_addr.__u6_addr8[2];
      if (v2)
      {
        uint64_t result = 16LL;
      }

      else
      {
        int v2 = a1->var3.sin6_addr.__u6_addr8[3] ^ a2->var3.sin6_addr.__u6_addr8[3];
        if (v2)
        {
          uint64_t result = 24LL;
        }

        else
        {
          int v2 = a1->var3.sin6_addr.__u6_addr8[4] ^ a2->var3.sin6_addr.__u6_addr8[4];
          if (v2)
          {
            uint64_t result = 32LL;
          }

          else
          {
            int v2 = a1->var3.sin6_addr.__u6_addr8[5] ^ a2->var3.sin6_addr.__u6_addr8[5];
            if (v2)
            {
              uint64_t result = 40LL;
            }

            else
            {
              int v2 = a1->var3.sin6_addr.__u6_addr8[6] ^ a2->var3.sin6_addr.__u6_addr8[6];
              if (v2)
              {
                uint64_t result = 48LL;
              }

              else
              {
                int v2 = a1->var3.sin6_addr.__u6_addr8[7] ^ a2->var3.sin6_addr.__u6_addr8[7];
                if (!v2) {
                  return 64LL;
                }
                uint64_t result = 56LL;
              }
            }
          }
        }
      }
    }
  }

  for (; (v2 & 0x80) == 0; v2 *= 2)
    uint64_t result = (result + 1);
  return result;
}

uint64_t __nwlog_obj()
{
  return gLogObj;
}

uint64_t nw_endpoint_get_address_family(void *a1)
{
  *(void *)&v40[13] = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    __int128 v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v38 = "nw_endpoint_get_address_family";
    int v27 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        __int128 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_endpoint_get_address_family";
          _os_log_impl(&dword_181A5C000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }

      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        __int128 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v38 = "nw_endpoint_get_address_family";
            __int16 v39 = 2082;
            *(void *)BOOL v40 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v28,  v31,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }

        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_endpoint_get_address_family";
          _os_log_impl(&dword_181A5C000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        __int128 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_endpoint_get_address_family";
          _os_log_impl( &dword_181A5C000,  v28,  v33,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181B184A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_use_long_outstanding_queries(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[96] >> 3) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_parameters_get_use_long_outstanding_queries";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_use_long_outstanding_queries";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_parameters_get_use_long_outstanding_queries";
          __int16 v17 = 2082;
          int v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_use_long_outstanding_queries";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_use_long_outstanding_queries";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_queue_cancel_source(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    dispatch_source_t v3 = *(dispatch_source_t *)a1;
    if (v3)
    {
      dispatch_set_context(v3, 0LL);
      dispatch_source_cancel(*(dispatch_source_t *)a1);
    }

    else
    {
      int v4 = *(void **)(a1 + 8);
      if (v4 && (uint64_t v5 = *(void **)(a1 + 16)) != 0LL)
      {
        if (*(_BYTE *)(a1 + 48)) {
          nw_context_reset_timer_block_with_time(v4, a1, -1LL, v5);
        }
        else {
          nw_context_dequeue_source_block(v4, *(void **)(a1 + 16));
        }
        id v7 = *(id *)(a1 + 8);
        os_log_type_t v8 = _Block_copy(*(const void **)(a1 + 24));
        int v9 = *(void **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;

        os_log_type_t v10 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = 0LL;

        BOOL v11 = *(void **)(a1 + 24);
        *(void *)(a1 + 24) = 0LL;

        if (v8) {
          nw_context_queue_block(v7, v8);
        }
        v23[0] = MEMORY[0x1895F87A8];
        v23[1] = 3221225472LL;
        v23[2] = __nw_queue_cancel_source_block_invoke;
        v23[3] = &__block_descriptor_40_e5_v8__0l;
        v23[4] = a1;
        nw_context_queue_block(v7, v23);
      }

      else if (gLogDatapath)
      {
        __nwlog_obj(v4, a2);
        id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446210;
          int v27 = "nw_queue_cancel_source";
          _os_log_impl(&dword_181A5C000, v6, OS_LOG_TYPE_DEBUG, "%{public}s Cancelled, not cancelling again", buf, 0xCu);
        }
      }
    }

    return;
  }

  __nwlog_obj(0LL, a2);
  os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v27 = "nw_queue_cancel_source";
  char v13 = (void *)_os_log_send_and_compose_impl();

  os_log_type_t v25 = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  uint64_t v14 = __nwlog_fault(v13, &v25, &v24);
  if ((_DWORD)v14)
  {
    if (v25 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj(v14, v15);
      BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = v25;
      if (os_log_type_enabled(v16, v25))
      {
        *(_DWORD *)buf = 136446210;
        int v27 = "nw_queue_cancel_source";
        _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null source", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj(backtrace_string, v19);
      BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = v25;
      BOOL v21 = os_log_type_enabled(v16, v25);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          int v27 = "nw_queue_cancel_source";
          __int16 v28 = 2082;
          os_log_type_t v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v16,  v20,  "%{public}s called with null source, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_33;
      }

      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        int v27 = "nw_queue_cancel_source";
        _os_log_impl(&dword_181A5C000, v16, v20, "%{public}s called with null source, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj(v14, v15);
      BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = v25;
      if (os_log_type_enabled(v16, v25))
      {
        *(_DWORD *)buf = 136446210;
        int v27 = "nw_queue_cancel_source";
        _os_log_impl( &dword_181A5C000,  v16,  v22,  "%{public}s called with null source, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181B18C4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_array_copy(uint64_t a1)
{
  uint64_t v2 = nw_array_create();
  uint64_t v3 = v2;
  if (a1)
  {
    if (v2 == a1) {
      return a1;
    }
    else {
      std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>( v2 + 16,  *(void ***)(a1 + 16),  *(void ***)(a1 + 24),  (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3);
    }
  }

  return v3;
}

void nw_association_set_cached_content_for_protocol(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v87 = *MEMORY[0x1895F89C0];
  id v7 = a1;
  id v8 = a2;
  int v9 = v8;
  if (!v7)
  {
    __nwlog_obj();
    BOOL v58 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    unsigned int v78 = "nw_association_set_cached_content_for_protocol";
    int v59 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v75 = OS_LOG_TYPE_DEFAULT;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v61 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v78 = "nw_association_set_cached_content_for_protocol";
        _os_log_impl(&dword_181A5C000, v60, v61, "%{public}s called with null association", buf, 0xCu);
      }
    }

    else if (v75)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v65 = type;
      BOOL v66 = os_log_type_enabled(v60, type);
      if (backtrace_string)
      {
        if (v66)
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v78 = "nw_association_set_cached_content_for_protocol";
          __int16 v79 = 2082;
          int64_t v80 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v60,  v65,  "%{public}s called with null association, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_133:
        if (!v59) {
          goto LABEL_99;
        }
LABEL_134:
        free(v59);
        goto LABEL_99;
      }

      if (v66)
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v78 = "nw_association_set_cached_content_for_protocol";
        _os_log_impl(&dword_181A5C000, v60, v65, "%{public}s called with null association, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v70 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v78 = "nw_association_set_cached_content_for_protocol";
        _os_log_impl( &dword_181A5C000,  v60,  v70,  "%{public}s called with null association, backtrace limit exceeded",  buf,  0xCu);
      }
    }

LABEL_132:
    goto LABEL_133;
  }

  if (v8)
  {
    id v10 = nw_path_parameters_copy_context(*((void **)v7 + 2));
    nw_context_assert_queue(v10);
    uint64_t internal = *((void *)v7 + 7);
    if (!internal)
    {
      uint64_t internal = nw_hash_table_create_internal( 5u,  48,  (const void *(*)(const void *, unsigned int *))nw_association_get_key,  (unsigned int (*)(const void *, unsigned int))nw_association_key_hash,  (BOOL (*)(const void *, const void *, unsigned int))nw_association_matches_key,  (void (*)(void *))nw_association_release);
      if (!internal)
      {
        *((void *)v7 + 7) = 0LL;
        goto LABEL_98;
      }

      *(_DWORD *)(internal + 48) &= ~2u;
      *((void *)v7 + 7) = internal;
    }

    BOOL node = nw_hash_table_get_node(internal, (uint64_t)v9, 0LL);
    if (!node) {
      goto LABEL_44;
    }
    uint64_t v13 = node;
    uint64_t v14 = (uint64_t *)(node + 32);
    uint64_t v15 = *(void *)(node + 72);
    if (v15)
    {
      if (v15 == a3)
      {
        *(void *)(node + 64) = a4;
        nw_context_remove_cache_entry(v10, v14);
        nw_context_add_cache_entry(v10, v14);
        goto LABEL_98;
      }

      nw_protocol_definition_deallocate_cache_entry(v9, v15);
    }

    nw_context_remove_cache_entry(v10, v14);
    if (nw_hash_table_remove_node(*((void *)v7 + 7), v13)
      || nw_path_parameters_get_logging_disabled(*((void *)v7 + 2)))
    {
LABEL_44:
      if (a3)
      {
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        uint64_t v31 = *((void *)v7 + 7);
        id v32 = v9;
        BOOL v33 = nw_hash_table_add_object(v31, (uint64_t)v32, (char *)&type);
        if (v33)
        {
          uint64_t v34 = (char *)v33;
          if (type || nw_path_parameters_get_logging_disabled(*((void *)v7 + 2))) {
            goto LABEL_97;
          }
          uint64_t v73 = a4;
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          id v35 = (id)gconnectionLogObj;
          logging_description = nw_endpoint_get_logging_description(*((void **)v7 + 1));
          *(_DWORD *)buf = 136446978;
          unsigned int v78 = "nw_association_set_cached_content_for_protocol";
          __int16 v79 = 2082;
          int64_t v80 = (void *)logging_description;
          __int16 v81 = 2048;
          uint64_t v82 = (uint64_t)v32;
          __int16 v83 = 2048;
          int v84 = v34;
          os_log_type_t v37 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t v75 = OS_LOG_TYPE_ERROR;
          char v74 = 0;
          if (__nwlog_fault(v37, &v75, &v74))
          {
            if (v75 == OS_LOG_TYPE_FAULT)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              os_log_type_t v38 = (os_log_s *)(id)gconnectionLogObj;
              os_log_type_t v39 = v75;
              if (os_log_type_enabled(v38, v75))
              {
                BOOL v40 = nw_endpoint_get_logging_description(*((void **)v7 + 1));
                *(_DWORD *)buf = 136446978;
                unsigned int v78 = "nw_association_set_cached_content_for_protocol";
                __int16 v79 = 2082;
                int64_t v80 = (void *)v40;
                __int16 v81 = 2048;
                uint64_t v82 = (uint64_t)v32;
                __int16 v83 = 2048;
                int v84 = v34;
                _os_log_impl( &dword_181A5C000,  v38,  v39,  "%{public}s <nw_association %{public}s> failed to add cached content for protocol %p (node %p)",  buf,  0x2Au);
              }
            }

            else if (v74)
            {
              uint64_t v48 = __nw_create_backtrace_string();
              if (v48)
              {
                uint64_t v49 = (char *)v48;
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                unsigned int v50 = (os_log_s *)(id)gconnectionLogObj;
                os_log_type_t v51 = v75;
                if (os_log_type_enabled(v50, v75))
                {
                  BOOL v52 = nw_endpoint_get_logging_description(*((void **)v7 + 1));
                  *(_DWORD *)buf = 136447234;
                  unsigned int v78 = "nw_association_set_cached_content_for_protocol";
                  __int16 v79 = 2082;
                  int64_t v80 = (void *)v52;
                  __int16 v81 = 2048;
                  uint64_t v82 = (uint64_t)v32;
                  __int16 v83 = 2048;
                  int v84 = v34;
                  __int16 v85 = 2082;
                  v86 = v49;
                  _os_log_impl( &dword_181A5C000,  v50,  v51,  "%{public}s <nw_association %{public}s> failed to add cached content for protocol %p (node %p), dumpi ng backtrace:%{public}s",  buf,  0x34u);
                }

                free(v49);
                if (!v37) {
                  goto LABEL_96;
                }
                goto LABEL_95;
              }

              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              os_log_type_t v38 = (os_log_s *)(id)gconnectionLogObj;
              os_log_type_t v56 = v75;
              if (os_log_type_enabled(v38, v75))
              {
                unsigned int v57 = nw_endpoint_get_logging_description(*((void **)v7 + 1));
                *(_DWORD *)buf = 136446978;
                unsigned int v78 = "nw_association_set_cached_content_for_protocol";
                __int16 v79 = 2082;
                int64_t v80 = (void *)v57;
                __int16 v81 = 2048;
                uint64_t v82 = (uint64_t)v32;
                __int16 v83 = 2048;
                int v84 = v34;
                _os_log_impl( &dword_181A5C000,  v38,  v56,  "%{public}s <nw_association %{public}s> failed to add cached content for protocol %p (node %p), no backtrace",  buf,  0x2Au);
              }
            }

            else
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              os_log_type_t v38 = (os_log_s *)(id)gconnectionLogObj;
              os_log_type_t v54 = v75;
              if (os_log_type_enabled(v38, v75))
              {
                BOOL v55 = nw_endpoint_get_logging_description(*((void **)v7 + 1));
                *(_DWORD *)buf = 136446978;
                unsigned int v78 = "nw_association_set_cached_content_for_protocol";
                __int16 v79 = 2082;
                int64_t v80 = (void *)v55;
                __int16 v81 = 2048;
                uint64_t v82 = (uint64_t)v32;
                __int16 v83 = 2048;
                int v84 = v34;
                _os_log_impl( &dword_181A5C000,  v38,  v54,  "%{public}s <nw_association %{public}s> failed to add cached content for protocol %p (node %p), backtra ce limit exceeded",  buf,  0x2Au);
              }
            }
          }

          if (!v37)
          {
LABEL_96:
            a4 = v73;
LABEL_97:
            *((void *)v34 + _Block_object_dispose(va, 8) = a4;
            *((void *)v34 + 9) = a3;
            nw_context_add_cache_entry(v10, (void *)v34 + 4);
            goto LABEL_98;
          }

  if (*((void *)a3 + 17))
  {
    os_packet_get_flow_uuid();
    BOOL node = nw_hash_table_get_node(*((void *)a3 + 35), (uint64_t)&v223, 16LL);
    if (node)
    {
      if ((a3[222] & 0x200) != 0 && (*(_BYTE *)(node + 153) & 3) == 0)
      {
        *(void *)(node + 72) = 0LL;
        uint64_t v49 = node + 72;
        unsigned int v50 = (void *)*((void *)a3 + 47);
        *(void *)(v49 + _Block_object_dispose(va, 8) = v50;
        os_log_s *v50 = v49 - 40;
        *((void *)a3 + 47) = v49;
        *(_BYTE *)(v49 + 81) |= 1u;
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v51 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_channel_finalize_output_frame";
        v221 = 1042;
        *(_DWORD *)v222 = 16;
        *(_WORD *)&v222[4] = 2098;
        *(void *)&v222[6] = &v223;
        _os_log_impl( &dword_181A5C000,  v51,  OS_LOG_TYPE_ERROR,  "%{public}s Node not found for flow id %{public,uuid_t}.16P",  buf,  0x1Cu);
      }
    }

    os_packet_finalize();
    if ((a3[222] & 0x1000) != 0)
    {
      if (*((void *)a3 + 27))
      {
        BOOL v52 = os_channel_slot_attach_packet();
        if (v52)
        {
          os_log_type_t v53 = v52;
          if ((nw_channel_check_defunct((uint64_t)a3) & 1) == 0)
          {
            __nwlog_obj();
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_channel_finalize_output_frame";
            v221 = 1024;
            *(_DWORD *)v222 = v53;
            os_log_type_t v54 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(v216) = 0;
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              BOOL v55 = (os_log_s *)__nwlog_obj();
              os_log_type_t v56 = type[0];
              if (!os_log_type_enabled(v55, type[0])) {
                goto LABEL_461;
              }
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_channel_finalize_output_frame";
              v221 = 1024;
              *(_DWORD *)v222 = v53;
              unsigned int v57 = "%{public}s os_channel_slot_attach_packet failed %{darwin.errno}d";
            }

            else if ((_BYTE)v216)
            {
              os_log_type_t v173 = (char *)__nw_create_backtrace_string();
              BOOL v55 = (os_log_s *)__nwlog_obj();
              os_log_type_t v56 = type[0];
              v174 = os_log_type_enabled(v55, type[0]);
              if (v173)
              {
                if (v174)
                {
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_channel_finalize_output_frame";
                  v221 = 1024;
                  *(_DWORD *)v222 = v53;
                  *(_WORD *)&v222[4] = 2082;
                  *(void *)&v222[6] = v173;
                  _os_log_impl( &dword_181A5C000,  v55,  v56,  "%{public}s os_channel_slot_attach_packet failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
                }

                free(v173);
                goto LABEL_461;
              }

              if (!v174)
              {
LABEL_461:
                if (v54) {
                  free(v54);
                }
                goto LABEL_15;
              }

              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_channel_finalize_output_frame";
              v221 = 1024;
              *(_DWORD *)v222 = v53;
              unsigned int v57 = "%{public}s os_channel_slot_attach_packet failed %{darwin.errno}d, no backtrace";
            }

            else
            {
              BOOL v55 = (os_log_s *)__nwlog_obj();
              os_log_type_t v56 = type[0];
              if (!os_log_type_enabled(v55, type[0])) {
                goto LABEL_461;
              }
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_channel_finalize_output_frame";
              v221 = 1024;
              *(_DWORD *)v222 = v53;
              unsigned int v57 = "%{public}s os_channel_slot_attach_packet failed %{darwin.errno}d, backtrace limit exceeded";
            }

            _os_log_impl(&dword_181A5C000, v55, v56, v57, buf, 0x12u);
            goto LABEL_461;
          }
        }
      }
    }
  }

    if (v85) {
      free(v85);
    }
    goto LABEL_15;
  }

  output_handler = a3->protocol.output_handler;
  if (!output_handler)
  {
    if ((nw_endpoint_handler_get_logging_disabled(v118) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      id v10 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        id_string = nw_endpoint_handler_get_id_string(v118);
        os_log_type_t v12 = nw_endpoint_handler_dry_run_string(v118);
        uint64_t v13 = nw_endpoint_handler_copy_endpoint(v118);
        logging_description = nw_endpoint_get_logging_description(v13);
        uint64_t v15 = nw_endpoint_handler_state_string(v118);
        id v16 = nw_endpoint_handler_mode_string(v118);
        os_log_type_t v17 = nw_endpoint_handler_copy_current_path(v118);
        *(_DWORD *)buf = 136447746;
        __int128 v126 = "nw_flow_service_reads";
        __int128 v127 = 2082;
        id v128 = id_string;
        __int128 v129 = 2082;
        __int128 v130 = v12;
        uint64_t v131 = 2082;
        v132 = logging_description;
        __int16 v133 = 2082;
        id v134 = v15;
        double v135 = 2082;
        __int16 v136 = v16;
        unsigned int v137 = 2114;
        __int16 v138 = v17;
        _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No output handler",  buf,  0x48u);
      }
    }

    free(v113);
    goto LABEL_181;
  }

  if (_nw_signposts_once != -1) {
    dispatch_once(&_nw_signposts_once, &__block_literal_global_89);
  }
  id v10 = v8;
  uint64_t state = v10->state;

  if ((state & 0xFFFFFFFE) == 4)
  {
    os_log_type_t v12 = v10;
    uint64_t v13 = *((_BYTE *)v12 + 268);

    if ((v13 & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v14 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = v12;

        id v16 = v15;
        os_log_type_t v17 = *((_BYTE *)v12 + 268);

        if ((v17 & 1) != 0) {
          int v18 = "dry-run ";
        }
        else {
          int v18 = "";
        }
        uint64_t v19 = nw_endpoint_handler_copy_endpoint(v16);
        logging_description = nw_endpoint_get_logging_description(v19);
        log = v15->id_str;
        BOOL v21 = v16;
        os_log_type_t v22 = v21;
        int v23 = v10->state;
        else {
          char v24 = off_189BBBBF0[v23];
        }

        os_log_type_t v39 = v22;
        BOOL v40 = v39;
        id v41 = "path";
        switch(v8[29])
        {
          case 0:
            break;
          case 1:
            id v41 = "resolver";
            break;
          case 2:
            id v41 = nw_endpoint_flow_mode_string(v39[31]);
            break;
          case 3:
            id v41 = "proxy";
            break;
          case 4:
            id v41 = "fallback";
            break;
          case 5:
            id v41 = "transform";
            break;
          default:
            id v41 = "unknown-mode";
            break;
        }

        __int16 v45 = v40;
        os_unfair_lock_lock((os_unfair_lock_t)v45 + 28);
        os_log_type_t v46 = v45[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v45 + 28);

        *(_DWORD *)buf = 136447746;
        id v159 = "nw_flow_add_write_request";
        __int16 v160 = 2082;
        nw_endpoint_t v161 = log;
        __int16 v162 = 2082;
        id v163 = v18;
        uint64_t v164 = 2082;
        id v165 = (void *)logging_description;
        v166 = 2082;
        v167 = v24;
        v168 = 2082;
        os_log_type_t v169 = v41;
        v170 = 2114;
        v171 = v46;
        _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] cannot accept write requests",  buf,  0x48u);
      }

      BOOL v47 = 0LL;
      goto LABEL_101;
    }

        if (v50) {
          free(v50);
        }
        goto LABEL_134;
      }

      if (!nw_parameters_get_logging_disabled(*((void *)v8 + 7)))
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
        }
        os_log_type_t v27 = (os_log_s *)(id)gconnection_groupLogObj;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v28 = v25[42];
          *(_DWORD *)uint64_t v131 = 136446722;
          *(void *)&v131[4] = "nw_connection_group_handle_connection_state_changed";
          *(_WORD *)&v131[12] = 1024;
          *(_DWORD *)&v131[14] = v28;
          *(_WORD *)&v131[18] = 2112;
          *(void *)&v131[20] = v14;
          _os_log_impl( &dword_181A5C000,  v27,  OS_LOG_TYPE_DEFAULT,  "%{public}s [G%u] connection %@ ready, reading",  v131,  0x1Cu);
        }
      }

      os_log_type_t v29 = v25;
      uint64_t v30 = v14;
      if (!nw_parameters_get_logging_disabled(*((void *)v8 + 7)) && gLogDatapath)
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
        }
        int v84 = (os_log_s *)(id)gconnection_groupLogObj;
        if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
        {
          __int16 v85 = v29[42];
          *(_DWORD *)uint64_t v131 = 136446722;
          *(void *)&v131[4] = "nw_connection_group_read_on_connection";
          *(_WORD *)&v131[12] = 1024;
          *(_DWORD *)&v131[14] = v85;
          *(_WORD *)&v131[18] = 2112;
          *(void *)&v131[20] = v30;
          _os_log_impl( &dword_181A5C000,  v84,  OS_LOG_TYPE_DEBUG,  "%{public}s [G%u] reading on connection %@",  v131,  0x1Cu);
        }
      }

      uint64_t v31 = v29[44];
      if (!v31)
      {
        uint64_t v31 = 1;
        if (!nw_parameters_get_logging_disabled(*((void *)v8 + 7)))
        {
          if (gLogDatapath)
          {
            if (__nwlog_connection_group_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
            }
            BOOL v88 = (os_log_s *)(id)gconnection_groupLogObj;
            if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
            {
              char v89 = v29[42];
              *(_DWORD *)uint64_t v131 = 136446466;
              *(void *)&v131[4] = "nw_connection_group_read_on_connection";
              *(_WORD *)&v131[12] = 1024;
              *(_DWORD *)&v131[14] = v89;
              _os_log_impl( &dword_181A5C000,  v88,  OS_LOG_TYPE_DEBUG,  "%{public}s [G%u] overriding max size for reads to 1 since message size is 0",  v131,  0x12u);
            }

            uint64_t v31 = 1;
          }
        }
      }

      id v32 = v29[44];
      if (v32 >= 0xFFFFFFFE) {
        id v32 = -2;
      }
      v90 = v32;
      if (!nw_parameters_get_logging_disabled(*((void *)v8 + 7)) && gLogDatapath)
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
        }
        v86 = (os_log_s *)(id)gconnection_groupLogObj;
        if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v87 = v29[42];
          *(_DWORD *)uint64_t v131 = 136446978;
          *(void *)&v131[4] = "nw_connection_group_read_on_connection";
          *(_WORD *)&v131[12] = 1024;
          *(_DWORD *)&v131[14] = v87;
          *(_WORD *)&v131[18] = 1024;
          *(_DWORD *)&v131[20] = v90;
          *(_WORD *)&v131[24] = 1024;
          *(_DWORD *)&v131[26] = v31;
          _os_log_impl( &dword_181A5C000,  v86,  OS_LOG_TYPE_DEBUG,  "%{public}s [G%u] reading with min: %u, max: %u",  v131,  0x1Eu);
        }
      }

      *(void *)uint64_t v131 = MEMORY[0x1895F87A8];
      *(void *)&v131[8] = 3221225472LL;
      *(void *)&v131[16] = ___ZL38nw_connection_group_read_on_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke;
      *(void *)&v131[24] = &unk_189BC5F30;
      BOOL v33 = v29;
      v132 = v33;
      uint64_t v34 = (uint64_t *)v30;
      __int16 v133 = v34;
      nw_connection_receive_internal(v34, 0LL, v90, v31, v131);

LABEL_135:
      _Block_object_dispose(&v103, 8);

      _Block_object_dispose(&v109, 8);
LABEL_20:

      _Block_object_dispose(&v119, 8);
LABEL_21:

      return;
    case 4u:
      if (!nw_parameters_get_logging_disabled(*((void *)v8 + 7)))
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
        }
        os_log_type_t v44 = (os_log_s *)(id)gconnection_groupLogObj;
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          __int16 v45 = v13[42];
          *(_DWORD *)double v135 = 136446978;
          *(void *)&v135[4] = "nw_connection_group_handle_connection_state_changed";
          *(_WORD *)&v135[12] = 1024;
          *(_DWORD *)&v135[14] = v45;
          *(_WORD *)&v135[18] = 2112;
          *(void *)&v135[20] = v14;
          *(_WORD *)&v135[28] = 2112;
          *(void *)&v135[30] = v91;
          _os_log_impl( &dword_181A5C000,  v44,  OS_LOG_TYPE_ERROR,  "%{public}s [G%u] connection %@ failed with error %@",  v135,  0x26u);
        }
      }

      nw_connection_cancel((nw_connection_t)v14);
      goto LABEL_20;
    case 5u:
      if (!nw_parameters_get_logging_disabled(*((void *)v8 + 7)))
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
        }
        id v35 = (os_log_s *)(id)gconnection_groupLogObj;
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
        {
          int v36 = v13[42];
          *(_DWORD *)double v135 = 136446722;
          *(void *)&v135[4] = "nw_connection_group_handle_connection_state_changed";
          *(_WORD *)&v135[12] = 1024;
          *(_DWORD *)&v135[14] = v36;
          *(_WORD *)&v135[18] = 2112;
          *(void *)&v135[20] = v14;
          _os_log_impl( &dword_181A5C000,  v35,  OS_LOG_TYPE_DEBUG,  "%{public}s [G%u] Connection %@ cancelled",  v135,  0x1Cu);
        }
      }

      *(void *)double v135 = MEMORY[0x1895F87A8];
      *(void *)&v135[8] = 3221225472LL;
      *(void *)&v135[16] = ___ZL51nw_connection_group_handle_connection_state_changedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection21nw_connection_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_138;
      *(void *)&v135[24] = &unk_189BC9238;
      *(void *)&v135[32] = v13;
      __int16 v136 = (uint64_t *)v14;
      os_log_type_t v37 = (void (**)(void))_Block_copy(v135);
      os_unfair_lock_lock((os_unfair_lock_t)v8 + 43);
      v37[2](v37);
      os_unfair_lock_unlock((os_unfair_lock_t)v8 + 43);

      goto LABEL_20;
    default:
      goto LABEL_20;
  }

    goto LABEL_133;
  }

  if (!v8)
  {
    __nwlog_obj();
    uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_reply";
    __int16 v45 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v90[0]) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v49 = type[0];
      if (os_log_type_enabled(v46, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_reply";
        _os_log_impl(&dword_181A5C000, v46, v49, "%{public}s called with null inbound_message", buf, 0xCu);
      }

      goto LABEL_132;
    }

    if (!LOBYTE(v90[0]))
    {
      __nwlog_obj();
      os_log_type_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v65 = type[0];
      if (os_log_type_enabled(v46, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_reply";
        _os_log_impl( &dword_181A5C000,  v46,  v65,  "%{public}s called with null inbound_message, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_132;
    }

    unsigned int v57 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v58 = type[0];
    int v59 = os_log_type_enabled(v46, type[0]);
    if (!v57)
    {
      if (v59)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_reply";
        _os_log_impl(&dword_181A5C000, v46, v58, "%{public}s called with null inbound_message, no backtrace", buf, 0xCu);
      }

      goto LABEL_132;
    }

    if (v59)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_group_reply";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v57;
      _os_log_impl( &dword_181A5C000,  v46,  v58,  "%{public}s called with null inbound_message, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_103;
  }

  if (!v9)
  {
    __nwlog_obj();
    unsigned int v50 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_reply";
    __int16 v45 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v90[0]) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v51 = type[0];
      if (os_log_type_enabled(v46, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_reply";
        _os_log_impl(&dword_181A5C000, v46, v51, "%{public}s called with null outbound_message", buf, 0xCu);
      }

      goto LABEL_132;
    }

    if (!LOBYTE(v90[0]))
    {
      __nwlog_obj();
      os_log_type_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v66 = type[0];
      if (os_log_type_enabled(v46, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_reply";
        _os_log_impl( &dword_181A5C000,  v46,  v66,  "%{public}s called with null outbound_message, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_132;
    }

    unsigned int v57 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    int v60 = type[0];
    os_log_type_t v61 = os_log_type_enabled(v46, type[0]);
    if (!v57)
    {
      if (v61)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_reply";
        _os_log_impl( &dword_181A5C000,  v46,  v60,  "%{public}s called with null outbound_message, no backtrace",  buf,  0xCu);
      }

      goto LABEL_132;
    }

    if (v61)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_group_reply";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v57;
      _os_log_impl( &dword_181A5C000,  v46,  v60,  "%{public}s called with null outbound_message, dumping backtrace:%{public}s",  buf,  0x16u);
    }

          if (v57) {
            free(v57);
          }
          goto LABEL_62;
        }

        if ((v16 & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v20 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446978;
            __int16 v83 = "nw_protocol_instance_set_current_path";
            int v84 = 2082;
            __int16 v85 = (char *)&v4->flow_in_connected + 7;
            v86 = 2080;
            uint64_t v87 = " ";
            BOOL v88 = 2048;
            p_os_unfair_lock_opaque = (_DWORD *)a2;
            _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sCannot find interface for new current protocol_path %lx",  buf,  0x2Au);
          }
        }
      }

      else
      {
        if ((SBYTE5(v4->flow_in_connected) & 0x80000000) == 0)
        {
          __nwlog_obj();
          BOOL v52 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446978;
            __int16 v83 = "nw_protocol_instance_set_current_path";
            int v84 = 2082;
            __int16 v85 = (char *)&v4->flow_in_connected + 7;
            v86 = 2080;
            uint64_t v87 = " ";
            BOOL v88 = 2048;
            p_os_unfair_lock_opaque = (_DWORD *)a2;
            _os_log_impl( &dword_181A5C000,  v52,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sCannot find current protocol_path %lx",  buf,  0x2Au);
          }
        }

        id v10 = 0LL;
        id v8 = 0LL;
      }

      uint64_t v14 = 0LL;
LABEL_62:

      goto LABEL_63;
    }

    if ((SBYTE5(v3->flow_in_connected) & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v11 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446722;
        __int16 v83 = "nw_protocol_instance_set_current_path";
        int v84 = 2082;
        __int16 v85 = (char *)&v4->flow_in_connected + 7;
        v86 = 2080;
        uint64_t v87 = " ";
        _os_log_impl(&dword_181A5C000, v11, OS_LOG_TYPE_INFO, "%{public}s %{public}s%sLost all paths", buf, 0x20u);
      }

      if ((SBYTE5(v4->flow_in_connected) & 0x80000000) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          uint64_t v13 = v4->wakeup;
          *(_DWORD *)buf = 136446978;
          __int16 v83 = "nw_protocol_instance_set_current_path";
          int v84 = 2082;
          __int16 v85 = (char *)&v4->flow_in_connected + 7;
          v86 = 2080;
          uint64_t v87 = " ";
          BOOL v88 = 2112;
          p_os_unfair_lock_opaque = v13;
          _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%sClearing overrides for %@",  buf,  0x2Au);
        }
      }
    }

    nw_path_flow_registration_override_evaluator(v4->wakeup, 0LL);
    nw_path_flow_registration_override_interface_types(v4->wakeup, 0, 0, 0, 0, 0);
    uint64_t v14 = 0LL;
    id v8 = 0LL;
    id v10 = 0LL;
    if ((SBYTE5(v4->flow_in_connected) & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_41;
  }

  __nwlog_obj();
  unsigned int v42 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v83 = "nw_protocol_instance_set_current_path";
  BOOL v43 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(p_paths_log_id_num) = 0;
  if (__nwlog_fault(v43, type, &p_paths_log_id_num))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v45 = type[0];
      if (os_log_type_enabled(v44, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v83 = "nw_protocol_instance_set_current_path";
        _os_log_impl(&dword_181A5C000, v44, v45, "%{public}s called with null instance", buf, 0xCu);
      }
    }

    else if ((_BYTE)p_paths_log_id_num)
    {
      os_log_type_t v53 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v54 = type[0];
      BOOL v55 = os_log_type_enabled(v44, type[0]);
      if (v53)
      {
        if (v55)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v83 = "nw_protocol_instance_set_current_path";
          int v84 = 2082;
          __int16 v85 = v53;
          _os_log_impl( &dword_181A5C000,  v44,  v54,  "%{public}s called with null instance, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v53);
        goto LABEL_116;
      }

      if (v55)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v83 = "nw_protocol_instance_set_current_path";
        _os_log_impl(&dword_181A5C000, v44, v54, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v66 = type[0];
      if (os_log_type_enabled(v44, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v83 = "nw_protocol_instance_set_current_path";
        _os_log_impl( &dword_181A5C000,  v44,  v66,  "%{public}s called with null instance, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

                  goto LABEL_133;
                }

                if (!(_BYTE)v275)
                {
                  __nwlog_obj();
                  __int16 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  BOOL v64 = v279;
                  if (os_log_type_enabled(v28, (os_log_type_t)v279))
                  {
                    os_log_type_t v65 = a2->identifier;
                    if (!v65) {
                      os_log_type_t v65 = (nw_protocol_identifier *)"invalid";
                    }
                    *(_DWORD *)buf = 136446722;
                    *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v65;
                    v281 = 2048;
                    v282 = a2;
                    _os_log_impl( &dword_181A5C000,  v28,  v64,  "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, backtrace limit exceeded",  buf,  0x20u);
                  }

                  goto LABEL_132;
                }

                backtrace_string = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                __int16 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                BOOL v47 = v279;
                uint64_t v48 = os_log_type_enabled(v28, (os_log_type_t)v279);
                if (!backtrace_string)
                {
                  if (v48)
                  {
                    os_log_type_t v70 = a2->identifier;
                    if (!v70) {
                      os_log_type_t v70 = (nw_protocol_identifier *)"invalid";
                    }
                    *(_DWORD *)buf = 136446722;
                    *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v70;
                    v281 = 2048;
                    v282 = a2;
                    _os_log_impl( &dword_181A5C000,  v28,  v47,  "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, no backtrace",  buf,  0x20u);
                  }

                  goto LABEL_132;
                }

                if (v48)
                {
                  uint64_t v49 = a2->identifier;
                  if (!v49) {
                    uint64_t v49 = (nw_protocol_identifier *)"invalid";
                  }
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v49;
                  v281 = 2048;
                  v282 = a2;
                  v283 = 2082;
                  *(void *)v284 = backtrace_string;
                  _os_log_impl( &dword_181A5C000,  v28,  v47,  "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, dumping backtrace:%{public}s",  buf,  0x2Au);
                }

                free(backtrace_string);
              }

    free(backtrace_string);
    if (!v26) {
      goto LABEL_78;
    }
    goto LABEL_77;
  }

  uint64_t v5 = (NWConcrete_nw_endpoint_handler *)v3;
  unsigned int mode = v5->mode;

  if ((_DWORD)mode == 2)
  {
    id v7 = nw_endpoint_handler_copy_flow(v5);
    id v8 = v7;
    if ((*((_BYTE *)v7 + 35) & 2) != 0)
    {
      uint64_t v30 = *((void *)v7 + 117);
      if (v30)
      {
        uint64_t v31 = nw_endpoint_handler_register_context(v30, v4);
LABEL_111:

        goto LABEL_112;
      }

      int v36 = v5;
      os_log_type_t v37 = *((_BYTE *)v36 + 268);

      if ((v37 & 0x20) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v38 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          os_log_type_t v39 = v36;

          BOOL v40 = v39;
          id v41 = *((_BYTE *)v36 + 268);

          if ((v41 & 1) != 0) {
            unsigned int v42 = "dry-run ";
          }
          else {
            unsigned int v42 = "";
          }
          BOOL v43 = nw_endpoint_handler_copy_endpoint(v40);
          logging_description = nw_endpoint_get_logging_description(v43);
          id_str = v39->id_str;
          __int16 v45 = v40;
          os_log_type_t v46 = v45;
          BOOL v47 = v45[30];
          else {
            uint64_t v48 = off_189BBBBF0[v47];
          }
          v99 = v48;

          BOOL v64 = v46;
          os_log_type_t v65 = v64;
          BOOL v66 = v5->mode;
          unsigned int v67 = "path";
          switch(v66)
          {
            case 0:
              break;
            case 1:
              unsigned int v67 = "resolver";
              break;
            case 2:
              unsigned int v67 = nw_endpoint_flow_mode_string(v64[31]);
              break;
            case 3:
              unsigned int v67 = "proxy";
              break;
            case 4:
              unsigned int v67 = "fallback";
              break;
            case 5:
              unsigned int v67 = "transform";
              break;
            default:
              unsigned int v67 = "unknown-mode";
              break;
          }

          os_log_type_t v75 = v65;
          os_unfair_lock_lock((os_unfair_lock_t)v75 + 28);
          os_log_type_t v76 = v75[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v75 + 28);

          *(_DWORD *)buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = id_str;
          *(_WORD *)&buf[22] = 2082;
          id v111 = (uint64_t (*)(uint64_t, uint64_t))v42;
          *(_WORD *)BOOL v112 = 2082;
          *(void *)&v112[2] = logging_description;
          *(_WORD *)&v112[10] = 2082;
          *(void *)&v112[12] = v99;
          uint64_t v113 = 2082;
          int v114 = v67;
          int v115 = 2114;
          v116 = v76;
          _os_log_impl( &dword_181A5C000,  v38,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Cannot register, no connected handler",  buf,  0x48u);
        }

        goto LABEL_109;
      }
    }

    else if (*((void *)v7 + 96))
    {
      int v9 = *((void *)v7 + 108);
      if (v9)
      {
        BOOL node = nw_hash_table_get_node(v9, (uint64_t)v4, 0LL);
        if (node)
        {
          BOOL v11 = *(void *)(node + 16);
          if (v11) {
            goto LABEL_96;
          }
        }

        BOOL v11 = nw_endpoint_handler_register_context_internal(v5, v8, v4);
        os_log_type_t v12 = v5;
        uint64_t v13 = *((_BYTE *)v12 + 268);

        if ((v13 & 0x20) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v14 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v15 = v12;

            id v16 = v15;
            os_log_type_t v17 = *((_BYTE *)v12 + 268);

            if ((v17 & 1) != 0) {
              int v18 = "dry-run ";
            }
            else {
              int v18 = "";
            }
            uint64_t v19 = nw_endpoint_handler_copy_endpoint(v16);
            os_log_type_t v104 = nw_endpoint_get_logging_description(v19);
            BOOL v98 = v15->id_str;
            os_log_type_t v20 = v16;
            BOOL v21 = v20;
            os_log_type_t v22 = v20[30];
            else {
              int v23 = off_189BBBBF0[v22];
            }
            BOOL v97 = v23;

            os_log_type_t v68 = v21;
            BOOL v69 = v68;
            char v100 = (uint64_t (*)(uint64_t, uint64_t))v18;
            os_log_type_t v70 = "path";
            switch(v5->mode)
            {
              case 0:
                break;
              case 1:
                os_log_type_t v70 = "resolver";
                break;
              case 2:
                os_log_type_t v70 = nw_endpoint_flow_mode_string(v68[31]);
                break;
              case 3:
                os_log_type_t v70 = "proxy";
                break;
              case 4:
                os_log_type_t v70 = "fallback";
                break;
              case 5:
                os_log_type_t v70 = "transform";
                break;
              default:
                os_log_type_t v70 = "unknown-mode";
                break;
            }

            unsigned int v77 = v69;
            os_unfair_lock_lock((os_unfair_lock_t)v77 + 28);
            unsigned int v78 = v77[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v77 + 28);

            *(_DWORD *)buf = 136448002;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v98;
            *(_WORD *)&buf[22] = 2082;
            id v111 = v100;
            *(_WORD *)BOOL v112 = 2082;
            *(void *)&v112[2] = v104;
            *(_WORD *)&v112[10] = 2082;
            *(void *)&v112[12] = v97;
            uint64_t v113 = 2082;
            int v114 = v70;
            int v115 = 2114;
            v116 = v78;
            unsigned int v117 = 2048;
            id v118 = v11;
            _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Registered protocol %p",  buf,  0x52u);
          }
        }

        if (v11)
        {
LABEL_96:
          __int16 v79 = *(void *)(v11 + 32);
          if (!v79 || (int64_t v80 = *(void *)(v79 + 24)) == 0 || (v81 = *(uint64_t (**)(void))(v80 + 224)) == 0LL)
          {
            uint64_t v31 = 1LL;
            goto LABEL_111;
          }

          os_log_type_t v38 = (os_log_s *)v81();
          *(void *)buf = 0LL;
          *(void *)&buf[8] = buf;
          *(void *)&buf[16] = 0x3032000000LL;
          id v111 = __Block_byref_object_copy__16468;
          *(void *)BOOL v112 = __Block_byref_object_dispose__16469;
          *(void *)&v112[8] = 0LL;
          v105[0] = MEMORY[0x1895F87A8];
          v105[1] = 3221225472LL;
          v105[2] = __nw_endpoint_handler_register_context_block_invoke;
          v105[3] = &unk_189BC7960;
          int v106 = v8;
          int v107 = buf;
          nw_array_apply((unsigned __int8 *)v38, (uint64_t)v105);
          uint64_t v82 = *(nw_protocol_metadata **)(*(void *)&buf[8] + 40LL);
          if (v82) {
            nw_content_context_set_metadata_for_protocol((nw_content_context_t)v4, v82);
          }

          _Block_object_dispose(buf, 8);
          uint64_t v31 = 1LL;
          goto LABEL_110;
        }

        goto LABEL_102;
      }

      os_log_type_t v51 = v5;
      BOOL v52 = *((_BYTE *)v51 + 268);

      if ((v52 & 0x20) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v38 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          os_log_type_t v53 = v51;

          os_log_type_t v54 = v53;
          BOOL v55 = *((_BYTE *)v51 + 268);

          if ((v55 & 1) != 0) {
            os_log_type_t v56 = "dry-run ";
          }
          else {
            os_log_type_t v56 = "";
          }
          unsigned int v57 = nw_endpoint_handler_copy_endpoint(v54);
          BOOL v58 = nw_endpoint_get_logging_description(v57);
          unsigned int v103 = v53->id_str;
          int v59 = v54;
          int v60 = v59;
          os_log_type_t v61 = v59[30];
          else {
            unsigned int v62 = off_189BBBBF0[v61];
          }
          os_log_type_t v101 = v62;

          os_log_type_t v71 = v60;
          uint64_t v72 = v71;
          uint64_t v73 = v5->mode;
          char v74 = "path";
          switch(v73)
          {
            case 0:
              break;
            case 1:
              char v74 = "resolver";
              break;
            case 2:
              char v74 = nw_endpoint_flow_mode_string(v71[31]);
              break;
            case 3:
              char v74 = "proxy";
              break;
            case 4:
              char v74 = "fallback";
              break;
            case 5:
              char v74 = "transform";
              break;
            default:
              char v74 = "unknown-mode";
              break;
          }

          __int16 v83 = v72;
          os_unfair_lock_lock((os_unfair_lock_t)v83 + 28);
          int v84 = v83[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v83 + 28);

          *(_DWORD *)buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v103;
          *(_WORD *)&buf[22] = 2082;
          id v111 = (uint64_t (*)(uint64_t, uint64_t))v56;
          *(_WORD *)BOOL v112 = 2082;
          *(void *)&v112[2] = v58;
          *(_WORD *)&v112[10] = 2082;
          *(void *)&v112[12] = v101;
          uint64_t v113 = 2082;
          int v114 = v74;
          int v115 = 2114;
          v116 = v84;
          _os_log_impl( &dword_181A5C000,  v38,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Cannot register after flow table is released",  buf,  0x48u);
        }

    if (!v17) {
      return;
    }
    goto LABEL_133;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned int v77 = "nw_protocol_http_client_bottom_connected";
    os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v74 = 0;
    if (__nwlog_fault(v17, &type, &v74))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v18 = (os_log_s *)__nwlog_obj();
        uint64_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          unsigned int v77 = "nw_protocol_http_client_bottom_connected";
          os_log_type_t v20 = "%{public}s called with null http_client_bottom";
          goto LABEL_131;
        }
      }

      else if (v74)
      {
        uint64_t v30 = (char *)__nw_create_backtrace_string();
        int v18 = (os_log_s *)__nwlog_obj();
        uint64_t v19 = type;
        uint64_t v73 = os_log_type_enabled(v18, type);
        if (v30)
        {
          if (v73)
          {
            *(_DWORD *)buf = 136446466;
            unsigned int v77 = "nw_protocol_http_client_bottom_connected";
            unsigned int v78 = 2082;
            __int16 v79 = v30;
            id v32 = "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s";
            goto LABEL_70;
          }

          goto LABEL_71;
        }

        if (v73)
        {
          *(_DWORD *)buf = 136446210;
          unsigned int v77 = "nw_protocol_http_client_bottom_connected";
          os_log_type_t v20 = "%{public}s called with null http_client_bottom, no backtrace";
          goto LABEL_131;
        }
      }

      else
      {
        int v18 = (os_log_s *)__nwlog_obj();
        uint64_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          unsigned int v77 = "nw_protocol_http_client_bottom_connected";
          os_log_type_t v20 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
          goto LABEL_131;
        }
      }
    }

    goto LABEL_132;
  }

  if ((handle[294] & 0x10) != 0)
  {
    if ((handle[294] & 4) != 0) {
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v4 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_DWORD *)buf = 136446722;
    unsigned int v77 = "nw_protocol_http_client_bottom_connected";
    unsigned int v78 = 2082;
    __int16 v79 = handle + 208;
    int64_t v80 = 2080;
    __int16 v81 = " ";
    uint64_t v5 = "%{public}s %{public}s%signoring connected";
    id v6 = (os_log_s *)v4;
    id v7 = OS_LOG_TYPE_INFO;
LABEL_15:
    _os_log_impl(&dword_181A5C000, v6, v7, v5, buf, 0x20u);
    return;
  }

  uint64_t v3 = (void *)*((void *)handle + 6);
  if (!v3)
  {
    if ((handle[294] & 4) != 0) {
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)buf = 136446722;
    unsigned int v77 = "nw_protocol_http_client_bottom_connected";
    unsigned int v78 = 2082;
    __int16 v79 = handle + 208;
    int64_t v80 = 2080;
    __int16 v81 = " ";
    uint64_t v5 = "%{public}s %{public}s%sno default input handler, ignoring connected";
    id v6 = (os_log_s *)v8;
    id v7 = OS_LOG_TYPE_ERROR;
    goto LABEL_15;
  }

  if (*((nw_protocol **)handle + 4) != a2)
  {
    if ((handle[294] & 1) == 0 && !*((void *)handle + 17)) {
      nw_protocol_connected(v3, (uint64_t)a2);
    }
    return;
  }

  handle[294] |= 1u;
  int v9 = (nw_protocol *)*((void *)handle + 17);
  if (!v9)
  {
    int v9 = a2;
    if (!a2)
    {
LABEL_58:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      unsigned int v77 = "nw_http_client_bottom_get_out_of_the_way";
      os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v74 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v18 = (os_log_s *)__nwlog_obj();
        uint64_t v19 = type;
        if (!os_log_type_enabled(v18, type)) {
          goto LABEL_132;
        }
        *(_DWORD *)buf = 136446210;
        unsigned int v77 = "nw_http_client_bottom_get_out_of_the_way";
        os_log_type_t v20 = "%{public}s http_messaging not found below http_client_bottom";
        goto LABEL_131;
      }

      if (!v74)
      {
        int v18 = (os_log_s *)__nwlog_obj();
        uint64_t v19 = type;
        if (!os_log_type_enabled(v18, type)) {
          goto LABEL_132;
        }
        *(_DWORD *)buf = 136446210;
        unsigned int v77 = "nw_http_client_bottom_get_out_of_the_way";
        os_log_type_t v20 = "%{public}s http_messaging not found below http_client_bottom, backtrace limit exceeded";
        goto LABEL_131;
      }

      uint64_t v30 = (char *)__nw_create_backtrace_string();
      int v18 = (os_log_s *)__nwlog_obj();
      uint64_t v19 = type;
      BOOL v33 = os_log_type_enabled(v18, type);
      if (!v30)
      {
        if (!v33) {
          goto LABEL_132;
        }
        *(_DWORD *)buf = 136446210;
        unsigned int v77 = "nw_http_client_bottom_get_out_of_the_way";
        os_log_type_t v20 = "%{public}s http_messaging not found below http_client_bottom, no backtrace";
        goto LABEL_131;
      }

      if (v33)
      {
        *(_DWORD *)buf = 136446466;
        unsigned int v77 = "nw_http_client_bottom_get_out_of_the_way";
        unsigned int v78 = 2082;
        __int16 v79 = v30;
        id v32 = "%{public}s http_messaging not found below http_client_bottom, dumping backtrace:%{public}s";
        goto LABEL_70;
      }

    if (v96) {
      free(v96);
    }
LABEL_24:

    __int128 v26 = *(_BYTE *)(a1 + 40);
    os_log_type_t v27 = (os_unfair_lock_s *)*(id *)(a1 + 32);
    __int16 v28 = v27;
    if (v27)
    {
      *(void *)buf = v20;
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&buf[16] = ___ZL27nw_connection_cancel_probesP24NWConcrete_nw_connectionb_block_invoke;
      *(void *)&_BYTE buf[24] = &unk_189BC5EB8;
      *(void *)&buf[32] = v27;
      buf[40] = v26;
      os_unfair_lock_lock(v28 + 34);
      (*(void (**)(_BYTE *))&buf[16])(buf);
      os_unfair_lock_unlock(v28 + 34);

      goto LABEL_26;
    }

    __nwlog_obj();
    v99 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_cancel_probes";
    char v100 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v139[0]) = 0;
    if (__nwlog_fault(v100, type, v139))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v101 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v102 = type[0];
        if (os_log_type_enabled(v101, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_cancel_probes";
          _os_log_impl(&dword_181A5C000, v101, v102, "%{public}s called with null connection", buf, 0xCu);
        }
      }

      else if (LOBYTE(v139[0]))
      {
        int v106 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v101 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        int v107 = type[0];
        id v108 = os_log_type_enabled(v101, type[0]);
        if (v106)
        {
          if (v108)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_connection_cancel_probes";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v106;
            _os_log_impl( &dword_181A5C000,  v101,  v107,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v106);
          goto LABEL_137;
        }

        if (v108)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_cancel_probes";
          _os_log_impl(&dword_181A5C000, v101, v107, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v101 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        int v114 = type[0];
        if (os_log_type_enabled(v101, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_cancel_probes";
          _os_log_impl( &dword_181A5C000,  v101,  v114,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

      if (!v31) {
        goto LABEL_18;
      }
      goto LABEL_133;
    }

    __nwlog_obj();
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_increment_outbound_body_size";
    uint64_t v31 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v58 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      int v36 = type;
      if (os_log_type_enabled(v35, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_increment_outbound_body_size";
        _os_log_impl(&dword_181A5C000, v35, v36, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v58)
    {
      __int16 v45 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v46 = type;
      BOOL v47 = os_log_type_enabled(v35, type);
      if (v45)
      {
        if (v47)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_increment_outbound_body_size";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v45;
          _os_log_impl( &dword_181A5C000,  v35,  v46,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v45);
        goto LABEL_132;
      }

      if (v47)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_increment_outbound_body_size";
        _os_log_impl(&dword_181A5C000, v35, v46, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v55 = type;
      if (os_log_type_enabled(v35, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_transaction_metadata_increment_outbound_body_size";
        _os_log_impl( &dword_181A5C000,  v35,  v55,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }

        free(v53);
        goto LABEL_133;
      }

      unsigned int v42 = 0LL;
      __nwlog_obj();
      unsigned int v50 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      __int16 v83 = "nw_pac_resolver_create_with_url";
      __int16 v45 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      int64_t v80 = 0;
      if (__nwlog_fault(v45, &type, &v80))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v51 = type;
          if (os_log_type_enabled(v46, type))
          {
            *(_DWORD *)buf = 136446210;
            __int16 v83 = "nw_pac_resolver_create_with_url";
            _os_log_impl(&dword_181A5C000, v46, v51, "%{public}s called with null result_handler", buf, 0xCu);
          }

        if (v69) {
          free(v69);
        }
        __int16 v81 = *(void *)(v65 + 112);
        uint64_t v82 = *(void **)(v65 + 120);
        handle = v136;
        if (v81)
        {
          *(void *)(v81 + 120) = v82;
          uint64_t v82 = *(void **)(v65 + 120);
        }

        else
        {
          *((void *)v136 + 42) = v82;
        }

        *uint64_t v82 = v81;
        *(void *)(v65 + 112) = 0LL;
        *(void *)(v65 + 120) = 0LL;
        __int16 v83 = v145[3];
        if (v83)
        {
          if ((*(_BYTE *)(v83 + 276) & 0x10) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            int v84 = (os_log_s *)gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
            {
              __int16 v85 = *(void *)(v83 + 88);
              if (v85) {
                v86 = *(_DWORD *)(v85 + 460);
              }
              else {
                v86 = -1;
              }
              uint64_t v87 = *(void *)(v83 + 64);
              *(_DWORD *)buf = 136447490;
              *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
              id v151 = 2082;
              __int16 v152 = (const char *)(v83 + 192);
              v153 = 2080;
              __int16 v154 = (uint64_t)" ";
              nw_endpoint_t v155 = 1024;
              *(_DWORD *)__int16 v156 = v86;
              *(_WORD *)&v156[4] = 2048;
              *(void *)&v156[6] = v87;
              *(_WORD *)&v156[14] = 2048;
              *(void *)&v156[16] = v83;
              _os_log_impl( &dword_181A5C000,  v84,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:s%lld> destroying stream %p",  buf,  0x3Au);
            }
          }

          if (*(void *)(v83 + 72))
          {
            if ((*(_BYTE *)(v83 + 276) & 0x10) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              BOOL v88 = (os_log_s *)gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
              {
                char v89 = *(void *)(v83 + 88);
                if (v89) {
                  v90 = *(_DWORD *)(v89 + 460);
                }
                else {
                  v90 = -1;
                }
                v91 = *(void *)(v83 + 64);
                *(_DWORD *)buf = 136447234;
                *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
                id v151 = 2082;
                __int16 v152 = (const char *)(v83 + 192);
                v153 = 2080;
                __int16 v154 = (uint64_t)" ";
                nw_endpoint_t v155 = 1024;
                *(_DWORD *)__int16 v156 = v90;
                *(_WORD *)&v156[4] = 2048;
                *(void *)&v156[6] = v91;
                _os_log_impl( &dword_181A5C000,  v88,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:s%lld> input_frames has unread frames before destroying",  buf,  0x30u);
              }
            }
          }

          __int16 v92 = *(void *)(v83 + 72);
          if (v92)
          {
            do
            {
              uint32_t v93 = *(void *)(v92 + 32);
              nw_frame_finalize(v92);
              __int16 v92 = v93;
            }

            while (v93);
          }

          (*(void (**)(void, void))(*(void *)(v83 + 176) + 16LL))(*(void *)(v83 + 176), 0LL);
          BOOL v94 = *(const void **)(v83 + 176);
          if (v94)
          {
            _Block_release(v94);
            *(void *)(v83 + 176) = 0LL;
          }

          if ((*(_BYTE *)(v83 + 168) & 1) != 0)
          {
            unsigned int v95 = *(void **)(v83 + 160);
            if (v95) {
              os_release(v95);
            }
          }

          *(void *)(v83 + 160) = 0LL;
          if ((*(_BYTE *)(v83 + 152) & 1) != 0)
          {
            unsigned int v96 = *(void **)(v83 + 144);
            if (v96) {
              os_release(v96);
            }
          }

          *(void *)(v83 + 144) = 0LL;
          if ((*(_BYTE *)(v83 + 136) & 1) != 0)
          {
            BOOL v97 = *(void **)(v83 + 128);
            if (v97) {
              os_release(v97);
            }
          }

    if (v55)
    {
      uint64_t v72 = (char *)v55;
      goto LABEL_134;
    }

    _os_log_impl(&dword_181A5C000, v37, v38, v39, buf, 0xCu);
    __break(1u);
    return;
  }

    _os_log_impl(&dword_181A5C000, v37, v38, v39, buf, 0xCu);
    __break(1u);
    return;
  }

    free(backtrace_string);
    goto LABEL_206;
  }

  char v74 = v19 + v18;
  os_log_type_t v20 = (char *)calloc(1uLL, v17 + 16);
  if (!v20)
  {
    unsigned int v57 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v57, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    uint64_t v82 = "strict_calloc";
    __int16 v83 = 2048;
    int v84 = 1LL;
    __int16 v85 = 2048;
    v86 = v17 + 16;
    BOOL v58 = (void *)_os_log_send_and_compose_impl();
    uint64_t result = __nwlog_abort((uint64_t)v58);
    if (result) {
      goto LABEL_208;
    }
    free(v58);
  }

  BOOL v21 = v17 + 9;
  snprintf(v20, v21, "%s request", __s);
  os_log_type_t v22 = &v20[v21];
  int v23 = *(_DWORD *)(a1 + 3);
  *(_DWORD *)os_log_type_t v22 = *(_DWORD *)a1;
  *(_DWORD *)(v22 + 3) = v23;
  char v24 = (char *)calloc(1uLL, 0x60uLL);
  os_log_type_t v25 = a10;
  if (!v24)
  {
    int v59 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v59, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    uint64_t v82 = "strict_calloc";
    __int16 v83 = 2048;
    int v84 = 1LL;
    __int16 v85 = 2048;
    v86 = 96LL;
    int v60 = (void *)_os_log_send_and_compose_impl();
    uint64_t result = __nwlog_abort((uint64_t)v60);
    if (result) {
      goto LABEL_208;
    }
    free(v60);
    os_log_type_t v25 = a10;
  }

  __int128 v26 = (char *)(a1 + 7);
  os_log_type_t v27 = v77;
  __int16 v28 = cchpke_responder_setup();
  free(v20);
  if (v28)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v29 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v82 = "nw_http_decrypt_oblivious_request";
      __int16 v83 = 1024;
      LODWORD(v84) = v28;
      _os_log_impl(&dword_181A5C000, v29, OS_LOG_TYPE_ERROR, "%{public}s Setup error: %d", buf, 0x12u);
    }

  __break(1u);
  return result;
}

            goto LABEL_142;
          }

          if (!(_BYTE)v280)
          {
            __nwlog_obj();
            uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v61 = type[0];
            if (os_log_type_enabled(v31, type[0]))
            {
              *(_DWORD *)address = 136446466;
              *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = error_code;
              _os_log_impl( &dword_181A5C000,  v31,  v61,  "%{public}s SO_REUSEADDR failed %{darwin.errno}d, backtrace limit exceeded",  (uint8_t *)address,  0x12u);
            }

            goto LABEL_132;
          }

          unsigned int v42 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          BOOL v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v44 = type[0];
          __int16 v45 = os_log_type_enabled(v43, type[0]);
          if (v42)
          {
            if (v45)
            {
              *(_DWORD *)address = 136446722;
              *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = error_code;
              address[9] = 2082;
              *(void *)&address[10] = v42;
              _os_log_impl( &dword_181A5C000,  v43,  v44,  "%{public}s SO_REUSEADDR failed %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)address,  0x1Cu);
            }

            goto LABEL_71;
          }

          if (v45)
          {
            *(_DWORD *)address = 136446466;
            *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
            address[6] = 1024;
            *(_DWORD *)&address[7] = error_code;
            _os_log_impl( &dword_181A5C000,  v43,  v44,  "%{public}s SO_REUSEADDR failed %{darwin.errno}d, no backtrace",  (uint8_t *)address,  0x12u);
          }

    free(backtrace_string);
    if (!v53) {
      goto LABEL_159;
    }
    goto LABEL_158;
  }

  if (!a4)
  {
    __nwlog_obj();
    BOOL v58 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v81 = "nw_path_copy_path_for_tlv";
    os_log_type_t v53 = (char *)_os_log_send_and_compose_impl();

    v79[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(obj) = 0;
    if (v79[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      int v59 = v79[0];
      if (os_log_type_enabled(v54, v79[0]))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v81 = "nw_path_copy_path_for_tlv";
        _os_log_impl(&dword_181A5C000, v54, v59, "%{public}s called with null parameters_buffer_size", buf, 0xCu);
      }
    }

    else if ((_BYTE)obj)
    {
      os_log_type_t v65 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v66 = v79[0];
      unsigned int v67 = os_log_type_enabled(v54, v79[0]);
      if (v65)
      {
        if (v67)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v81 = "nw_path_copy_path_for_tlv";
          uint64_t v82 = 2082;
          __int16 v83 = v65;
          _os_log_impl( &dword_181A5C000,  v54,  v66,  "%{public}s called with null parameters_buffer_size, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v65);
LABEL_157:
        if (!v53)
        {
LABEL_159:
          browse = 0LL;
          goto LABEL_70;
        }

    goto LABEL_133;
  }

  BOOL v69 = nw_protocol_metadata_copy_definition(v68);
  if (nw_protocol_copy_http_client_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52);
  }
  is_equal = nw_protocol_definition_is_equal( v69,  (nw_protocol_definition_t)nw_protocol_copy_http_client_definition_definition);

  if (!is_equal)
  {
    __nwlog_obj();
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int v115 = 136446210;
    *(void *)&v115[4] = "nw_http_client_metadata_get_client_error";
    BOOL v88 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    unsigned int v103 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v92 = type;
      if (os_log_type_enabled(v89, type))
      {
        *(_DWORD *)int v115 = 136446210;
        *(void *)&v115[4] = "nw_http_client_metadata_get_client_error";
        _os_log_impl(&dword_181A5C000, v89, v92, "%{public}s metadata must be http_client", v115, 0xCu);
      }
    }

    else if (v103)
    {
      unsigned int v96 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v97 = type;
      BOOL v98 = os_log_type_enabled(v89, type);
      if (v96)
      {
        if (v98)
        {
          *(_DWORD *)int v115 = 136446466;
          *(void *)&v115[4] = "nw_http_client_metadata_get_client_error";
          *(_WORD *)&v115[12] = 2082;
          *(void *)&v115[14] = v96;
          _os_log_impl( &dword_181A5C000,  v89,  v97,  "%{public}s metadata must be http_client, dumping backtrace:%{public}s",  v115,  0x16u);
        }

        free(v96);
        if (!v88) {
          goto LABEL_135;
        }
        goto LABEL_134;
      }

      if (v98)
      {
        *(_DWORD *)int v115 = 136446210;
        *(void *)&v115[4] = "nw_http_client_metadata_get_client_error";
        _os_log_impl(&dword_181A5C000, v89, v97, "%{public}s metadata must be http_client, no backtrace", v115, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v100 = type;
      if (os_log_type_enabled(v89, type))
      {
        *(_DWORD *)int v115 = 136446210;
        *(void *)&v115[4] = "nw_http_client_metadata_get_client_error";
        _os_log_impl( &dword_181A5C000,  v89,  v100,  "%{public}s metadata must be http_client, backtrace limit exceeded",  v115,  0xCu);
      }
    }

    goto LABEL_132;
  }

  *(void *)int v115 = 0LL;
  *(void *)&v115[8] = v115;
  v116 = 0;
  *(void *)&v115[16] = 0x2020000000LL;
  *(void *)buf = MEMORY[0x1895F87A8];
  *(void *)&buf[8] = 3221225472LL;
  *(void *)&buf[16] = __nw_http_client_metadata_get_client_error_block_invoke;
  *(void *)&_BYTE buf[24] = &unk_189BC60A8;
  *(void *)&buf[32] = v115;
  userInfo = (uint64_t)v59->super._userInfo;
  if (userInfo)
  {
    __nw_http_client_metadata_get_client_error_block_invoke((uint64_t)buf, userInfo);
    uint64_t v72 = (int *)(*(void *)&v115[8] + 24LL);
  }

  else
  {
    uint64_t v72 = &v116;
  }

  uint64_t v73 = *v72;
  _Block_object_dispose(v115, 8);

  if ((v73 - 1) < 2)
  {
    char v74 = *(id **)(a1 + 32);
    if (v74)
    {
      int v59 = objc_alloc(&OBJC_CLASS___NWURLError);
      [v74[6] loaderTask];
      os_log_type_t v75 = (void *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v76 = v74;
      unsigned int v77 = v75;
      if (v59)
      {
        unsigned int v78 = *MEMORY[0x189607740];
        *(void *)buf = v59;
        *(void *)&buf[8] = &OBJC_CLASS___NWURLError;
        __int16 v79 = (NWURLError *)objc_msgSendSuper2((objc_super *)buf, sel_initWithDomain_code_userInfo_, v78, -1013, 0);
        int v59 = v79;
        if (v79) {
          -[NWURLError fillErrorForLoader:andTask:](v79, "fillErrorForLoader:andTask:", v76, v77);
        }
      }

      int64_t v80 = *(void *)(a1 + 32);
      if (!v80) {
        goto LABEL_70;
      }
      goto LABEL_92;
    }

    goto LABEL_140;
  }

  if (v73 == 3)
  {
    __int16 v81 = *(id **)(a1 + 32);
    if (v81)
    {
      int v59 = objc_alloc(&OBJC_CLASS___NWURLError);
      [v81[6] loaderTask];
      uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue();
      __int16 v83 = v81;
      int v84 = v82;
      if (v59)
      {
        __int16 v85 = *MEMORY[0x189607740];
        *(void *)buf = v59;
        *(void *)&buf[8] = &OBJC_CLASS___NWURLError;
        v86 = (NWURLError *)objc_msgSendSuper2((objc_super *)buf, sel_initWithDomain_code_userInfo_, v85, -1012, 0);
        int v59 = v86;
        if (v86) {
          -[NWURLError fillErrorForLoader:andTask:](v86, "fillErrorForLoader:andTask:", v83, v84);
        }
      }

      int64_t v80 = *(void *)(a1 + 32);
      if (!v80) {
        goto LABEL_70;
      }
LABEL_92:
      objc_storeStrong((id *)(v80 + 88), v59);
      goto LABEL_70;
    }

          if (v70)
          {
            BOOL v88 = (char *)v70;
LABEL_139:
            free(v88);
            goto LABEL_140;
          }

          goto LABEL_140;
        }

        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        os_log_type_t v101 = "nw_http_messaging_get_http_version_from_alpn";
        char v74 = (const char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        BOOL v98 = 0;
        if (__nwlog_fault(v74, &type, &v98))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v75 = (os_log_s *)__nwlog_obj();
            os_log_type_t v76 = type;
            if (!os_log_type_enabled(v75, type)) {
              goto LABEL_137;
            }
            *(_DWORD *)buf = 136446210;
            os_log_type_t v101 = "nw_http_messaging_get_http_version_from_alpn";
            unsigned int v77 = "%{public}s Missing QUIC ALPN";
LABEL_136:
            _os_log_impl(&dword_181A5C000, v75, v76, v77, buf, 0xCu);
            goto LABEL_137;
          }

          if (!v98)
          {
            os_log_type_t v75 = (os_log_s *)__nwlog_obj();
            os_log_type_t v76 = type;
            if (!os_log_type_enabled(v75, type)) {
              goto LABEL_137;
            }
            *(_DWORD *)buf = 136446210;
            os_log_type_t v101 = "nw_http_messaging_get_http_version_from_alpn";
            unsigned int v77 = "%{public}s Missing QUIC ALPN, backtrace limit exceeded";
            goto LABEL_136;
          }

          int64_t v80 = (char *)__nw_create_backtrace_string();
          os_log_type_t v75 = (os_log_s *)__nwlog_obj();
          os_log_type_t v76 = type;
          __int16 v81 = os_log_type_enabled(v75, type);
          if (!v80)
          {
            if (!v81) {
              goto LABEL_137;
            }
            *(_DWORD *)buf = 136446210;
            os_log_type_t v101 = "nw_http_messaging_get_http_version_from_alpn";
            unsigned int v77 = "%{public}s Missing QUIC ALPN, no backtrace";
            goto LABEL_136;
          }

          if (v81)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v101 = "nw_http_messaging_get_http_version_from_alpn";
            os_log_type_t v102 = 2082;
            unsigned int v103 = v80;
            _os_log_impl( &dword_181A5C000,  v75,  v76,  "%{public}s Missing QUIC ALPN, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v80);
        }

    if (v47) {
      free(v47);
    }
    uint64_t v19 = 0LL;
    goto LABEL_33;
  }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v68 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)out = 136446466;
        *(void *)&out[4] = "nw_agent_copy_group_members_for_message";
        *(_WORD *)&out[12] = 1024;
        *(_DWORD *)&out[14] = v43;
        _os_log_impl(&dword_181A5C000, v68, OS_LOG_TYPE_ERROR, "%{public}s Received unknown type %u", out, 0x12u);
      }

      goto LABEL_48;
    }

    if (!v30)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v70 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)out = 136446210;
        *(void *)&out[4] = "nw_agent_copy_group_members_for_message";
        _os_log_impl( &dword_181A5C000,  v70,  OS_LOG_TYPE_ERROR,  "%{public}s No previous endpoint to apply public key to",  out,  0xCu);
      }

LABEL_95:
          free(v37);
          goto LABEL_96;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v41 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        unsigned int v78 = "nw_association_set_cached_content_for_protocol";
        unsigned int v42 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t v75 = OS_LOG_TYPE_ERROR;
        char v74 = 0;
        if (__nwlog_fault(v42, &v75, &v74))
        {
          if (v75 == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            BOOL v43 = (os_log_s *)(id)gLogObj;
            os_log_type_t v44 = v75;
            if (os_log_type_enabled(v43, v75))
            {
              *(_DWORD *)buf = 136446210;
              unsigned int v78 = "nw_association_set_cached_content_for_protocol";
              _os_log_impl(&dword_181A5C000, v43, v44, "%{public}s nw_hash_table_add_object failed", buf, 0xCu);
            }
          }

          else if (v74)
          {
            __int16 v45 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            BOOL v43 = (os_log_s *)(id)gLogObj;
            os_log_type_t v46 = v75;
            BOOL v47 = os_log_type_enabled(v43, v75);
            if (v45)
            {
              if (v47)
              {
                *(_DWORD *)buf = 136446466;
                unsigned int v78 = "nw_association_set_cached_content_for_protocol";
                __int16 v79 = 2082;
                int64_t v80 = v45;
                _os_log_impl( &dword_181A5C000,  v43,  v46,  "%{public}s nw_hash_table_add_object failed, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v45);
              if (!v42) {
                goto LABEL_98;
              }
              goto LABEL_83;
            }

            if (v47)
            {
              *(_DWORD *)buf = 136446210;
              unsigned int v78 = "nw_association_set_cached_content_for_protocol";
              _os_log_impl( &dword_181A5C000,  v43,  v46,  "%{public}s nw_hash_table_add_object failed, no backtrace",  buf,  0xCu);
            }
          }

          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            BOOL v43 = (os_log_s *)(id)gLogObj;
            os_log_type_t v53 = v75;
            if (os_log_type_enabled(v43, v75))
            {
              *(_DWORD *)buf = 136446210;
              unsigned int v78 = "nw_association_set_cached_content_for_protocol";
              _os_log_impl( &dword_181A5C000,  v43,  v53,  "%{public}s nw_hash_table_add_object failed, backtrace limit exceeded",  buf,  0xCu);
            }
          }
        }

        if (v42) {
LABEL_83:
        }
          free(v42);
      }

    if (v45) {
      free(v45);
    }
    id v32 = 0LL;
    goto LABEL_45;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v17 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    else {
      int v18 = off_189BBBBC0[v4];
    }
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_endpoint_flow_copy_protocol_establishment_reports";
    char v74 = 2082;
    os_log_type_t v75 = (void *)v18;
    os_log_type_t v76 = 2082;
    unsigned int v77 = "flow";
    _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
  }

LABEL_26:
  id v32 = 0LL;
LABEL_46:

  return v32;
}

      os_log_type_t v29 = 0;
      uint64_t v30 = 0;
      return v29 | (v30 << 8);
    }

    goto LABEL_96;
  }

  if (v24) {
    free(v24);
  }
  return 0LL;
}

    free(v41);
    if (!v26) {
      return;
    }
LABEL_137:
    free(v26);
    return;
  }

  id v10 = os_retain(object);
  BOOL v11 = *(_BYTE *)(v6 + 584);
  if ((v11 & 1) != 0)
  {
    os_log_type_t v12 = *(void **)(v6 + 576);
    if (v12)
    {
      os_release(v12);
      BOOL v11 = *(_BYTE *)(v6 + 584);
    }
  }

  *(void *)(v6 + 576) = v10;
  *(_BYTE *)(v6 + 584) = v11 | 1;
  uint64_t v13 = *(void *)(a1 + 40);
  if (v13)
  {
    uint64_t v14 = *(void **)(v13 + 576);
    if (v14)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3802000000LL;
      BOOL v66 = __Block_byref_object_copy__88;
      unsigned int v67 = __Block_byref_object_dispose__89;
      os_log_type_t v68 = nw_http_metadata_copy_request(v14);
      v69 |= 1u;
      if (*(void *)(*(void *)&buf[8] + 40LL))
      {
        if ((*(_BYTE *)(v13 + 198) & 1) == 0)
        {
          if (gLogDatapath)
          {
            os_log_type_t v38 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)os_log_type_t type = 136446722;
              *(void *)&os_log_type_t type[4] = "nw_http_authentication_apply_cache";
              *(_WORD *)&type[12] = 2082;
              *(void *)&type[14] = v13 + 114;
              *(_WORD *)&type[22] = 2080;
              os_log_type_t v61 = (uint64_t (*)(uint64_t, uint64_t))" ";
              _os_log_impl(&dword_181A5C000, v38, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", type, 0x20u);
            }
          }
        }

        uint64_t v15 = *(const __CFDictionary **)(v13 + 736);
        if (v15 && CFDictionaryGetCount(v15))
        {
          id v16 = *(void *)(*(void *)&buf[8] + 40LL);
          *(void *)(*(void *)&buf[8] + 40LL) = 0LL;
          os_log_type_t v17 = *(_BYTE *)(v13 + 952);
          if ((v17 & 1) != 0)
          {
            int v18 = *(void **)(v13 + 944);
            if (v18)
            {
              os_release(v18);
              os_log_type_t v17 = *(_BYTE *)(v13 + 952);
            }
          }

          *(void *)(v13 + 944) = v16;
          *(_BYTE *)(v13 + 952) = v17 | 1;
          CFDictionaryApplyFunction( *(CFDictionaryRef *)(v13 + 736),  (CFDictionaryApplierFunction)nw_http_authentication_apply_appsso_headers,  (void *)v13);
          *(_DWORD *)(v13 + 1044) = 4;
          CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v13 + 736));
        }

        else
        {
          else {
            uint64_t v19 = 0LL;
          }
          os_log_type_t v20 = nw_http_request_copy_url_request( *(void **)(*(void *)&buf[8] + 40LL),  **((void ***)&unk_189BC9698 + *(int *)(v13 + 1040)),  v19);
          *(void *)os_log_type_t type = 0LL;
          *(void *)&os_log_type_t type[8] = type;
          *(void *)&type[16] = 0x3802000000LL;
          os_log_type_t v61 = __Block_byref_object_copy__90;
          unsigned int v62 = __Block_byref_object_dispose__91;
          objecta = (void *)CFURLRequestCopyHTTPRequest();
          v64 |= 1u;
          *(void *)BOOL v52 = MEMORY[0x1895F87A8];
          os_log_type_t v53 = 0x40000000LL;
          os_log_type_t v54 = ___ZL34nw_http_authentication_apply_cacheP11nw_protocol_block_invoke;
          BOOL v55 = &unk_189BB7E08;
          os_log_type_t v56 = type;
          unsigned int v57 = buf;
          BOOL v58 = v13;
          BOOL v21 = *(void *)(v13 + 720);
          if (!v21 || *(void *)(v21 + 16) == *(void *)(v21 + 24))
          {
            os_log_type_t v22 = *(void *)(v13 + 704);
            if (v22 && *(void *)(v22 + 16) != *(void *)(v22 + 24)) {
              nw_array_apply((unsigned __int8 *)v22, (uint64_t)v52);
            }
          }

          else
          {
            nw_array_apply((unsigned __int8 *)v21, (uint64_t)v52);
            nw_array_remove_all_objects(*(void *)(v13 + 720));
          }

          _Block_object_dispose(type, 8);
          if ((v64 & 1) != 0 && objecta) {
            os_release(objecta);
          }
          if (v20) {
            CFRelease((CFTypeRef)v20);
          }
          if (v19) {
            CFRelease(v19);
          }
        }

          if (v46) {
            free(v46);
          }
          goto LABEL_41;
        }

    goto LABEL_96;
  }

  uint64_t v5 = nw_parameters_create();
  if (v5)
  {
    options = nw_custom_ip_create_options(custom_ip_protocol_number);
    if (options)
    {
      id v7 = *((id *)v5 + 19);
      id v8 = v7;
      if (v7)
      {
        objc_storeStrong((id *)v7 + 3, options);
        *((_BYTE *)v5 + 92) = 1;
        int v9 = v5;
LABEL_9:

LABEL_50:
        goto LABEL_51;
      }

      __nwlog_obj();
      os_log_type_t v39 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      BOOL v52 = "nw_parameters_create_custom_ip";
      BOOL v40 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      uint64_t v49 = 0;
      if (__nwlog_fault(v40, &type, &v49))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          id v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          unsigned int v42 = type;
          if (os_log_type_enabled(v41, type))
          {
            *(_DWORD *)buf = 136446210;
            BOOL v52 = "nw_parameters_create_custom_ip";
            _os_log_impl(&dword_181A5C000, v41, v42, "%{public}s called with null stack", buf, 0xCu);
          }
        }

        else if (v49)
        {
          BOOL v43 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          id v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v44 = type;
          __int16 v45 = os_log_type_enabled(v41, type);
          if (v43)
          {
            if (v45)
            {
              *(_DWORD *)buf = 136446466;
              BOOL v52 = "nw_parameters_create_custom_ip";
              os_log_type_t v53 = 2082;
              os_log_type_t v54 = v43;
              _os_log_impl( &dword_181A5C000,  v41,  v44,  "%{public}s called with null stack, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v43);
            goto LABEL_105;
          }

          if (v45)
          {
            *(_DWORD *)buf = 136446210;
            BOOL v52 = "nw_parameters_create_custom_ip";
            _os_log_impl(&dword_181A5C000, v41, v44, "%{public}s called with null stack, no backtrace", buf, 0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          id v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v48 = type;
          if (os_log_type_enabled(v41, type))
          {
            *(_DWORD *)buf = 136446210;
            BOOL v52 = "nw_parameters_create_custom_ip";
            _os_log_impl( &dword_181A5C000,  v41,  v48,  "%{public}s called with null stack, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

                xpc_dictionary_set_BOOL(v2, "requires_dnssec_validation", 1);
                goto LABEL_96;
              }

    free(backtrace_string);
    goto LABEL_111;
  }

  if (handle->default_input_handler != a2)
  {
    output_handler_context = (char *)handle[2].output_handler_context;
    id v6 = *(char **)handle[3].flow_id;
    id v8 = output_handler_context;
    if (output_handler_context != v6)
    {
      while (*(nw_protocol **)v8 != a2)
      {
        v8 += 16;
        if (v8 == v6) {
          goto LABEL_33;
        }
      }
    }

    if (v8 != v6)
    {
      int v9 = v8 + 16;
      if (v8 + 16 != v6)
      {
        id v10 = v6 - v8 - 32;
        if (v10 >= 0x10)
        {
          BOOL v11 = (v8 - output_handler_context) >> 4;
          os_log_type_t v12 = (v10 >> 4) + 1;
          uint64_t v13 = 16 * (v12 & 0x1FFFFFFFFFFFFFFELL);
          v8 += v13;
          uint64_t v14 = (uint64_t)&output_handler_context[16 * v11 + 24];
          uint64_t v15 = v12 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            id v16 = *(void *)(v14 + 8);
            *(void *)(v14 - 24) = *(void *)(v14 - 8);
            *(void *)(v14 - _Block_object_dispose(va, 8) = v16;
            LODWORD(v16) = *(_DWORD *)(v14 + 16);
            *(_DWORD *)(v14 - 16) = *(_DWORD *)v14;
            *(_DWORD *)uint64_t v14 = v16;
            v14 += 32LL;
            v15 -= 2LL;
          }

          while (v15);
          if (v12 == (v12 & 0x1FFFFFFFFFFFFFFELL)) {
            goto LABEL_17;
          }
          v9 += v13;
        }

        do
        {
          *(void *)id v8 = *(void *)v9;
          *((_DWORD *)v8 + 2) = *((_DWORD *)v9 + 2);
          v8 += 16;
          v9 += 16;
        }

        while (v9 != v6);
      }

  if (v54) {
    free(v54);
  }
LABEL_66:
}

  if (v43) {
    free(v43);
  }
  char v24 = 0LL;
LABEL_38:

  return v24;
}
}

  if (v28) {
    free(v28);
  }
LABEL_20:
  nw_frame_cache_destroy((uint64_t *)(v1 + 432));
  os_log_type_t v12 = *(void (****)(void))(v1 + 552);
  if (v12)
  {
    (**v12)(*(void *)(v1 + 552));
    free(v12);
    *(void *)(v1 + 552) = 0LL;
  }

  uint64_t v13 = *(void (****)(void))(v1 + 544);
  if (v13)
  {
    (**v13)(*(void *)(v1 + 544));
    free(v13);
    *(void *)(v1 + 544) = 0LL;
  }

  if ((*(_BYTE *)(v1 + 536) & 1) != 0)
  {
    uint64_t v14 = *(void **)(v1 + 528);
    if (v14) {
      os_release(v14);
    }
  }

  *(void *)(v1 + 52_Block_object_dispose(va, 8) = 0LL;
  if ((*(_BYTE *)(v1 + 520) & 1) != 0)
  {
    uint64_t v15 = *(void **)(v1 + 512);
    if (v15) {
      os_release(v15);
    }
  }

  *(void *)(v1 + 512) = 0LL;
  if ((*(_BYTE *)(v1 + 504) & 1) != 0)
  {
    id v16 = *(void **)(v1 + 496);
    if (v16) {
      os_release(v16);
    }
  }

  *(void *)(v1 + 496) = 0LL;
  if ((*(_BYTE *)(v1 + 488) & 1) != 0)
  {
    os_log_type_t v17 = *(void **)(v1 + 480);
    if (v17) {
      os_release(v17);
    }
  }

  *(void *)(v1 + 480) = 0LL;
  nw_protocol_plugin_retry::~nw_protocol_plugin_retry((nw_protocol_plugin_retry *)(v1 + 216));
  free((void *)v1);
}

    if (v15) {
      free(v15);
    }
LABEL_11:
    int v9 = *(void *)(a1 + 56);
    if (v9)
    {
      id v10 = *(void *)(v9 + 24);
      if (v10)
      {
        BOOL v11 = *(void (**)(uint64_t, uint64_t))(v10 + 32);
        if (v11)
        {
          v11(v9, a1 + 24);
          return;
        }
      }
    }

    __nwlog_obj();
    os_log_type_t v22 = *(void *)(a1 + 56);
    int v23 = "invalid";
    if (v22)
    {
      char v24 = *(const char **)(v22 + 16);
      if (v24) {
        int v23 = v24;
      }
    }

    *(_DWORD *)buf = 136446466;
    __int16 v85 = "nw_http_connect_fail";
    v86 = 2082;
    uint64_t v87 = (void *)v23;
    os_log_type_t v25 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v82 = 0;
    if (__nwlog_fault(v25, &type, &v82))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int128 v26 = (os_log_s *)__nwlog_obj();
        os_log_type_t v27 = type;
        if (!os_log_type_enabled(v26, type)) {
          goto LABEL_103;
        }
        __int16 v28 = *(void *)(a1 + 56);
        os_log_type_t v29 = "invalid";
        if (v28)
        {
          uint64_t v30 = *(const char **)(v28 + 16);
          if (v30) {
            os_log_type_t v29 = v30;
          }
        }

        *(_DWORD *)buf = 136446466;
        __int16 v85 = "nw_http_connect_fail";
        v86 = 2082;
        uint64_t v87 = (void *)v29;
        uint64_t v31 = "%{public}s protocol %{public}s has invalid disconnect callback";
LABEL_102:
        _os_log_impl(&dword_181A5C000, v26, v27, v31, buf, 0x16u);
        goto LABEL_103;
      }

      if (!v82)
      {
        __int128 v26 = (os_log_s *)__nwlog_obj();
        os_log_type_t v27 = type;
        if (!os_log_type_enabled(v26, type)) {
          goto LABEL_103;
        }
        BOOL v64 = *(void *)(a1 + 56);
        os_log_type_t v65 = "invalid";
        if (v64)
        {
          BOOL v66 = *(const char **)(v64 + 16);
          if (v66) {
            os_log_type_t v65 = v66;
          }
        }

        *(_DWORD *)buf = 136446466;
        __int16 v85 = "nw_http_connect_fail";
        v86 = 2082;
        uint64_t v87 = (void *)v65;
        uint64_t v31 = "%{public}s protocol %{public}s has invalid disconnect callback, backtrace limit exceeded";
        goto LABEL_102;
      }

      BOOL v47 = (char *)__nw_create_backtrace_string();
      __int128 v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = type;
      uint64_t v48 = os_log_type_enabled(v26, type);
      if (!v47)
      {
        if (!v48) {
          goto LABEL_103;
        }
        uint64_t v72 = *(void *)(a1 + 56);
        uint64_t v73 = "invalid";
        if (v72)
        {
          char v74 = *(const char **)(v72 + 16);
          if (v74) {
            uint64_t v73 = v74;
          }
        }

        *(_DWORD *)buf = 136446466;
        __int16 v85 = "nw_http_connect_fail";
        v86 = 2082;
        uint64_t v87 = (void *)v73;
        uint64_t v31 = "%{public}s protocol %{public}s has invalid disconnect callback, no backtrace";
        goto LABEL_102;
      }

      if (v48)
      {
        uint64_t v49 = *(void *)(a1 + 56);
        unsigned int v50 = "invalid";
        if (v49)
        {
          os_log_type_t v51 = *(const char **)(v49 + 16);
          if (v51) {
            unsigned int v50 = v51;
          }
        }

        *(_DWORD *)buf = 136446722;
        __int16 v85 = "nw_http_connect_fail";
        v86 = 2082;
        uint64_t v87 = (void *)v50;
        BOOL v88 = 2082;
        char v89 = v47;
        _os_log_impl( &dword_181A5C000,  v26,  v27,  "%{public}s protocol %{public}s has invalid disconnect callback, dumping backtrace:%{public}s",  buf,  0x20u);
      }

      free(v47);
    }

    if (v9) {
LABEL_96:
    }
      free(v9);
LABEL_97:
    os_log_type_t v63 = *(void *)(a1 + 32);
    if (v63 && (*(_WORD *)(v63 + 368) & 0x80) != 0) {
      return 0LL;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v64 = *(void *)(a1 + 32);
    os_log_type_t v65 = (const char *)(v64 + 284);
    BOOL v66 = v64 == 0;
    unsigned int v67 = *(void *)(v64 + 200);
    *(_DWORD *)buf = 136446978;
    if (v66) {
      os_log_type_t v65 = "";
    }
    v168 = "nw_http_connect_process_inbound_data_block_invoke";
    if (v66) {
      os_log_type_t v68 = "";
    }
    else {
      os_log_type_t v68 = " ";
    }
    os_log_type_t v169 = 2082;
    v170 = (void *)v65;
    v171 = 2080;
    v172 = v68;
    os_log_type_t v173 = 2048;
    *(void *)v174 = v67;
    BOOL v69 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    id v165 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v70 = (os_log_s *)gLogObj;
      os_log_type_t v71 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        uint64_t v72 = *(void *)(a1 + 32);
        uint64_t v73 = (const char *)(v72 + 284);
        char v74 = v72 == 0;
        if (!v72) {
          uint64_t v73 = "";
        }
        os_log_type_t v75 = *(void *)(v72 + 200);
        if (v74) {
          os_log_type_t v76 = "";
        }
        else {
          os_log_type_t v76 = " ";
        }
        *(_DWORD *)buf = 136446978;
        v168 = "nw_http_connect_process_inbound_data_block_invoke";
        os_log_type_t v169 = 2082;
        v170 = (void *)v73;
        v171 = 2080;
        v172 = v76;
        os_log_type_t v173 = 2048;
        *(void *)v174 = v75;
        unsigned int v77 = "%{public}s %{public}s%sFailed to apply bytes to response message %p";
LABEL_135:
        _os_log_impl(&dword_181A5C000, v70, v71, v77, buf, 0x2Au);
      }
    }

    else if (v165)
    {
      unsigned int v78 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v70 = (os_log_s *)gLogObj;
      os_log_type_t v71 = type;
      __int16 v79 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v78)
      {
        if (v79)
        {
          int64_t v80 = *(void *)(a1 + 32);
          __int16 v81 = (const char *)(v80 + 284);
          if (v80)
          {
            uint64_t v82 = " ";
          }

          else
          {
            __int16 v81 = "";
            uint64_t v82 = "";
          }

          __int16 v83 = *(void *)(v80 + 200);
          *(_DWORD *)buf = 136447234;
          v168 = "nw_http_connect_process_inbound_data_block_invoke";
          os_log_type_t v169 = 2082;
          v170 = (void *)v81;
          v171 = 2080;
          v172 = v82;
          os_log_type_t v173 = 2048;
          *(void *)v174 = v83;
          *(_WORD *)&v174[8] = 2082;
          *(void *)&v174[10] = v78;
          _os_log_impl( &dword_181A5C000,  v70,  v71,  "%{public}s %{public}s%sFailed to apply bytes to response message %p, dumping backtrace:%{public}s",  buf,  0x34u);
        }

        free(v78);
        goto LABEL_136;
      }

      if (v79)
      {
        char v89 = *(void *)(a1 + 32);
        v90 = (const char *)(v89 + 284);
        v91 = v89 == 0;
        if (!v89) {
          v90 = "";
        }
        __int16 v92 = *(void *)(v89 + 200);
        if (v91) {
          uint32_t v93 = "";
        }
        else {
          uint32_t v93 = " ";
        }
        *(_DWORD *)buf = 136446978;
        v168 = "nw_http_connect_process_inbound_data_block_invoke";
        os_log_type_t v169 = 2082;
        v170 = (void *)v90;
        v171 = 2080;
        v172 = v93;
        os_log_type_t v173 = 2048;
        *(void *)v174 = v92;
        unsigned int v77 = "%{public}s %{public}s%sFailed to apply bytes to response message %p, no backtrace";
        goto LABEL_135;
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v70 = (os_log_s *)gLogObj;
      os_log_type_t v71 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        int v84 = *(void *)(a1 + 32);
        __int16 v85 = (const char *)(v84 + 284);
        v86 = v84 == 0;
        if (!v84) {
          __int16 v85 = "";
        }
        uint64_t v87 = *(void *)(v84 + 200);
        if (v86) {
          BOOL v88 = "";
        }
        else {
          BOOL v88 = " ";
        }
        *(_DWORD *)buf = 136446978;
        v168 = "nw_http_connect_process_inbound_data_block_invoke";
        os_log_type_t v169 = 2082;
        v170 = (void *)v85;
        v171 = 2080;
        v172 = v88;
        os_log_type_t v173 = 2048;
        *(void *)v174 = v87;
        unsigned int v77 = "%{public}s %{public}s%sFailed to apply bytes to response message %p, backtrace limit exceeded";
        goto LABEL_135;
      }
    }

        if (v43) {
          free(v43);
        }
        return 0LL;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v22 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        int v23 = *(_DWORD *)(v9 + 32);
        *(_DWORD *)buf = 136446978;
        BOOL v58 = "on_frame_send_callback";
        int v59 = 2082;
        *(void *)int v60 = a3 + 205;
        *(_WORD *)&v60[8] = 2048;
        *(void *)os_log_type_t v61 = v9;
        *(_WORD *)&v61[8] = 1024;
        unsigned int v62 = v23;
        _os_log_impl( &dword_181A5C000,  v22,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s stream (%pm %u) did not have protocol extra",  buf,  0x26u);
      }
    }

    return 4294966775LL;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v11 = a3 + 205;
  *(_DWORD *)buf = 136446466;
  BOOL v58 = "on_frame_send_callback";
  int v59 = 2082;
  *(void *)int v60 = a3 + 205;
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t v56 = OS_LOG_TYPE_DEFAULT;
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v13 = (os_log_s *)gLogObj;
    uint64_t v14 = type[0];
    if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
    {
      *(_DWORD *)buf = 136446466;
      BOOL v58 = "on_frame_send_callback";
      int v59 = 2082;
      *(void *)int v60 = v11;
      uint64_t v15 = "%{public}s %{public}s id based hash table has not yet been created, failing connection";
LABEL_39:
      __int128 v26 = v13;
      os_log_type_t v27 = v14;
      __int16 v28 = 22;
LABEL_40:
      _os_log_impl(&dword_181A5C000, v26, v27, v15, buf, v28);
      goto LABEL_41;
    }

    goto LABEL_41;
  }

  if (v56)
  {
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v13 = (os_log_s *)gLogObj;
    uint64_t v14 = type[0];
    os_log_type_t v17 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v58 = "on_frame_send_callback";
        int v59 = 2082;
        *(void *)int v60 = v11;
        uint64_t v15 = "%{public}s %{public}s id based hash table has not yet been created, failing connection, no backtrace";
        goto LABEL_39;
      }

      goto LABEL_41;
    }

    if (!v17)
    {
LABEL_24:
      free(backtrace_string);
      goto LABEL_41;
    }

    *(_DWORD *)buf = 136446722;
    BOOL v58 = "on_frame_send_callback";
    int v59 = 2082;
    *(void *)int v60 = v11;
    *(_WORD *)&v60[8] = 2082;
    *(void *)os_log_type_t v61 = backtrace_string;
    int v18 = "%{public}s %{public}s id based hash table has not yet been created, failing connection, dumping backtrace:%{public}s";
    uint64_t v19 = v13;
    os_log_type_t v20 = v14;
    BOOL v21 = 32;
LABEL_23:
    _os_log_impl(&dword_181A5C000, v19, v20, v18, buf, v21);
    goto LABEL_24;
  }

  uint64_t v13 = (os_log_s *)__nwlog_obj();
  uint64_t v14 = type[0];
  if (os_log_type_enabled(v13, type[0]))
  {
    *(_DWORD *)buf = 136446466;
    BOOL v58 = "on_frame_send_callback";
    int v59 = 2082;
    *(void *)int v60 = v11;
    uint64_t v15 = "%{public}s %{public}s id based hash table has not yet been created, failing connection, backtrace limit exceeded";
    goto LABEL_39;
  }

          if (v40) {
            free(v40);
          }
LABEL_97:
          uint64_t v15 = object;
          goto LABEL_98;
        }

        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
        v307 = (char *)_os_log_send_and_compose_impl();
        aBlock[0] = 16;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v307, aBlock, &type))
        {
          if (aBlock[0] == 17)
          {
            v308 = (os_log_s *)__nwlog_obj();
            v309 = aBlock[0];
            if (!os_log_type_enabled(v308, (os_log_type_t)aBlock[0])) {
              goto LABEL_606;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
            v310 = "%{public}s called with null http1_stream->protocol_http1";
            goto LABEL_605;
          }

          if (type == OS_LOG_TYPE_DEFAULT)
          {
            v308 = (os_log_s *)__nwlog_obj();
            v309 = aBlock[0];
            if (!os_log_type_enabled(v308, (os_log_type_t)aBlock[0])) {
              goto LABEL_606;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
            v310 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
            goto LABEL_605;
          }

          v332 = (char *)__nw_create_backtrace_string();
          v308 = (os_log_s *)__nwlog_obj();
          v309 = aBlock[0];
          v333 = os_log_type_enabled(v308, (os_log_type_t)aBlock[0]);
          if (v332)
          {
            if (v333)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v332;
              _os_log_impl( &dword_181A5C000,  v308,  v309,  "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v332);
            goto LABEL_606;
          }

          if (v333)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
            v310 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
LABEL_605:
            _os_log_impl(&dword_181A5C000, v308, v309, v310, buf, 0xCu);
          }
        }

      if (v40) {
        free(v40);
      }
LABEL_97:
      BOOL v52 = (uint64_t *)v360[1];
      os_log_type_t v53 = *v52;
      if (*v52)
      {
        nw_frame_set_metadata(*v52, 0LL, 0, v21);
        if (v21)
        {
          if ((*(_BYTE *)(v348 + 158) & 1) == 0)
          {
            if (gLogDatapath)
            {
              BOOL v58 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
              {
                int v59 = *(void *)(v348 + 488);
                if (v59) {
                  LODWORD(v59) = *(_DWORD *)(v59 + 424);
                }
                int v60 = *(_DWORD *)(*(void *)(v348 + 480) + 372LL);
                os_log_type_t v61 = *(_DWORD *)(v348 + 860);
                *(_DWORD *)buf = 136447746;
                v364 = "nw_http1_connection_send_bytes";
                v365 = 2082;
                *(void *)v366 = v347;
                *(_WORD *)&v366[8] = 2080;
                *(void *)&v366[10] = " ";
                v367 = 1024;
                *(_DWORD *)v368 = v60;
                *(_WORD *)&v368[4] = 1024;
                *(_DWORD *)&v368[6] = v61;
                LOWORD(v369) = 1024;
                *(_DWORD *)((char *)&v369 + 2) = v59;
                HIWORD(v369) = 2048;
                *(void *)v370 = v53;
                _os_log_impl( &dword_181A5C000,  v58,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> setting complete on last output frame %p",  buf,  0x3Cu);
              }
            }
          }
        }
      }

      nw_protocol_finalize_output_frames(v20, (uint64_t)&v359);
      __int128 v26 = v361;
      int v9 = v348;
      if (v361)
      {
        *(void *)os_log_type_t type = 0LL;
        v355 = type;
        v357 = 0;
        v356 = 0x2000000000LL;
        *(void *)&__len[1] = MEMORY[0x1895F87A8];
        v350 = 0x40000000LL;
        v351 = ___ZL30nw_http1_connection_send_bytesP19nw_http1_connectionPhjb_block_invoke;
        v352 = &unk_189BBD8B8;
        v353 = type;
        do
        {
          if (!v26) {
            break;
          }
          os_log_type_t v54 = *(void *)(v26 + 32);
          BOOL v55 = ((uint64_t (*)(_DWORD *))v351)(&__len[1]);
          __int128 v26 = v54;
        }

        while ((v55 & 1) != 0);
        if ((*(_BYTE *)(v348 + 158) & 1) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v56 = (os_log_s *)gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            unsigned int v57 = *(void *)(v348 + 488);
            if (v57) {
              LODWORD(v57) = *(_DWORD *)(v57 + 424);
            }
            int v23 = *(_DWORD *)(*(void *)(v348 + 480) + 372LL);
            char v24 = *(_DWORD *)(v348 + 860);
            os_log_type_t v25 = *((_DWORD *)v355 + 6);
            *(_DWORD *)buf = 136447746;
            v364 = "nw_http1_connection_send_bytes";
            v365 = 2082;
            *(void *)v366 = v347;
            *(_WORD *)&v366[8] = 2080;
            *(void *)&v366[10] = " ";
            v367 = 1024;
            *(_DWORD *)v368 = v23;
            *(_WORD *)&v368[4] = 1024;
            *(_DWORD *)&v368[6] = v24;
            LOWORD(v369) = 1024;
            *(_DWORD *)((char *)&v369 + 2) = v57;
            HIWORD(v369) = 1024;
            *(_DWORD *)v370 = v25;
            _os_log_impl( &dword_181A5C000,  v56,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:c%u:s%u> failed to use %u frames, marking as failed",  buf,  0x38u);
          }
        }

        _Block_object_dispose(type, 8);
      }

      if (!v22)
      {
        id v10 = v341;
        goto LABEL_179;
      }
    }

    os_log_type_t v68 = output_frames;
    id v10 = v341;
    if (output_frames)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446466;
      v364 = "nw_http1_connection_send_bytes";
      v365 = 1024;
      *(_DWORD *)v366 = v68;
      BOOL v69 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      v358 = 0;
      if (type[0] != OS_LOG_TYPE_FAULT)
      {
        if (v358)
        {
          int v84 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v85 = (os_log_s *)gLogObj;
          v86 = type[0];
          uint64_t v87 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
          if (v84)
          {
            if (v87)
            {
              *(_DWORD *)buf = 136446722;
              v364 = "nw_http1_connection_send_bytes";
              v365 = 1024;
              *(_DWORD *)v366 = v68;
              *(_WORD *)&v366[4] = 2082;
              *(void *)&v366[6] = v84;
              _os_log_impl( &dword_181A5C000,  v85,  v86,  "%{public}s output handler reported %u frames to write, but array is empty, dumping backtrace:%{public}s",  buf,  0x1Cu);
            }

            free(v84);
            goto LABEL_171;
          }

          if (!v87) {
            goto LABEL_171;
          }
          *(_DWORD *)buf = 136446466;
          v364 = "nw_http1_connection_send_bytes";
          v365 = 1024;
          *(_DWORD *)v366 = v68;
          uint64_t v72 = v85;
          uint64_t v73 = v86;
          char v74 = "%{public}s output handler reported %u frames to write, but array is empty, no backtrace";
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v108 = gLogObj;
          v109 = type[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
            goto LABEL_171;
          }
          *(_DWORD *)buf = 136446466;
          v364 = "nw_http1_connection_send_bytes";
          v365 = 1024;
          *(_DWORD *)v366 = v68;
          uint64_t v72 = (os_log_s *)v108;
          uint64_t v73 = v109;
          char v74 = "%{public}s output handler reported %u frames to write, but array is empty, backtrace limit exceeded";
        }

      free(v21);
      goto LABEL_96;
    }

    os_log_type_t v22 = (os_log_s *)__nwlog_obj();
    int v23 = type;
    if (!os_log_type_enabled(v22, type)) {
      goto LABEL_94;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v49 = "nw_http1_get_http1_protocol";
    char v24 = "%{public}s called with null handle";
    goto LABEL_93;
  }

  uint64_t v5 = *((_DWORD *)handle + 6);
  id v6 = a1->handle;
  if (v5 == 1) {
    goto LABEL_10;
  }
  if (v5 != 2)
  {
    if (v5 != 3) {
      goto LABEL_96;
    }
    id v7 = *((void *)handle + 2);
    if (v7)
    {
      id v6 = (void *)(v7 + 480);
      goto LABEL_10;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v49 = "nw_http1_get_http1_protocol";
    BOOL v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v46 = 0;
    if (__nwlog_fault(v21, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v22 = (os_log_s *)__nwlog_obj();
        int v23 = type;
        if (!os_log_type_enabled(v22, type)) {
          goto LABEL_94;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v49 = "nw_http1_get_http1_protocol";
        char v24 = "%{public}s called with null handle->http1_connection";
        goto LABEL_93;
      }

      if (!v46)
      {
        os_log_type_t v22 = (os_log_s *)__nwlog_obj();
        int v23 = type;
        if (!os_log_type_enabled(v22, type)) {
          goto LABEL_94;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v49 = "nw_http1_get_http1_protocol";
        char v24 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_93;
      }

      os_log_type_t v27 = (char *)__nw_create_backtrace_string();
      os_log_type_t v22 = (os_log_s *)__nwlog_obj();
      int v23 = type;
      uint64_t v34 = os_log_type_enabled(v22, type);
      if (!v27)
      {
        if (!v34) {
          goto LABEL_94;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v49 = "nw_http1_get_http1_protocol";
        char v24 = "%{public}s called with null handle->http1_connection, no backtrace";
        goto LABEL_93;
      }

      if (v34)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v49 = "nw_http1_get_http1_protocol";
        unsigned int v50 = 2082;
        os_log_type_t v51 = v27;
        os_log_type_t v29 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
        goto LABEL_71;
      }

      goto LABEL_72;
    }

      if (v46) {
        free(v46);
      }
      *(_DWORD *)(v41 + 36_Block_object_dispose(va, 8) = -1;
      goto LABEL_98;
    }
  }

      if (v33) {
        free(v33);
      }
      goto LABEL_97;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v147 = "nw_http1_get_output_protocol";
    v132 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    __int16 v144 = 0;
    if (__nwlog_fault(v132, &type, &v144))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v133 = (os_log_s *)__nwlog_obj();
        id v134 = type;
        if (!os_log_type_enabled(v133, type)) {
          goto LABEL_175;
        }
        *(_DWORD *)buf = 136446210;
        v147 = "nw_http1_get_output_protocol";
        double v135 = "%{public}s called with null connection";
        goto LABEL_174;
      }

      if (!v144)
      {
        __int16 v133 = (os_log_s *)__nwlog_obj();
        id v134 = type;
        if (!os_log_type_enabled(v133, type)) {
          goto LABEL_175;
        }
        *(_DWORD *)buf = 136446210;
        v147 = "nw_http1_get_output_protocol";
        double v135 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_174;
      }

      nw_endpoint_t v142 = (char *)__nw_create_backtrace_string();
      __int16 v133 = (os_log_s *)__nwlog_obj();
      id v134 = type;
      v143 = os_log_type_enabled(v133, type);
      if (v142)
      {
        if (v143)
        {
          *(_DWORD *)buf = 136446466;
          v147 = "nw_http1_get_output_protocol";
          __int16 v148 = 2082;
          nw_endpoint_t v149 = v142;
          _os_log_impl( &dword_181A5C000,  v133,  v134,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v142);
        goto LABEL_175;
      }

      if (v143)
      {
        *(_DWORD *)buf = 136446210;
        v147 = "nw_http1_get_output_protocol";
        double v135 = "%{public}s called with null connection, no backtrace";
LABEL_174:
        _os_log_impl(&dword_181A5C000, v133, v134, v135, buf, 0xCu);
      }
    }

  free(v45);
  id v8 = v44;
  if (v40) {
LABEL_139:
  }
    free(v40);
LABEL_140:
  os_log_type_t v39 = v84;
  int v9 = v85;
LABEL_141:

LABEL_142:
LABEL_143:
}

  if (v38) {
    free(v38);
  }
  id v35 = 0LL;
LABEL_51:

  return v35;
}

  LODWORD(v5) = 0;
  int v4 = 0LL;
LABEL_96:
  if (a3) {
    *a3 = v5;
  }
  return v4;
}

      free(v61);
      goto LABEL_30;
    }

    __nwlog_obj();
    int v60 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nwsc_start_outgoing_requests_waiting_for_listener";
    os_log_type_t v61 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v76[0]) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unsigned int v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v63 = type[0];
      if (os_log_type_enabled(v62, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nwsc_start_outgoing_requests_waiting_for_listener";
        _os_log_impl(&dword_181A5C000, v62, v63, "%{public}s called with null serviceConnector", buf, 0xCu);
      }
    }

    else if (LOBYTE(v76[0]))
    {
      BOOL v66 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unsigned int v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      unsigned int v67 = type[0];
      os_log_type_t v68 = os_log_type_enabled(v62, type[0]);
      if (v66)
      {
        if (v68)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nwsc_start_outgoing_requests_waiting_for_listener";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v66;
          _os_log_impl( &dword_181A5C000,  v62,  v67,  "%{public}s called with null serviceConnector, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v66);
        goto LABEL_94;
      }

      if (v68)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nwsc_start_outgoing_requests_waiting_for_listener";
        _os_log_impl( &dword_181A5C000,  v62,  v67,  "%{public}s called with null serviceConnector, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      unsigned int v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v72 = type[0];
      if (os_log_type_enabled(v62, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nwsc_start_outgoing_requests_waiting_for_listener";
        _os_log_impl( &dword_181A5C000,  v62,  v72,  "%{public}s called with null serviceConnector, backtrace limit exceeded",  buf,  0xCu);
      }
    }

          __nwlog_obj();
          os_log_type_t v54 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446722;
          v91 = "nw_service_connector_verify_read_succeeded";
          __int16 v92 = 2082;
          uint32_t v93 = a8;
          BOOL v94 = 1024;
          *(_DWORD *)unsigned int v95 = v21;
          BOOL v55 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          BOOL v88 = 0;
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            os_log_type_t v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            unsigned int v57 = type;
            if (os_log_type_enabled(v56, type))
            {
              *(_DWORD *)buf = 136446722;
              v91 = "nw_service_connector_verify_read_succeeded";
              __int16 v92 = 2082;
              uint32_t v93 = a8;
              BOOL v94 = 1024;
              *(_DWORD *)unsigned int v95 = v21;
              _os_log_impl( &dword_181A5C000,  v56,  v57,  "%{public}s Failed %{public}s read of reply (with known request) %{darwin.errno}d",  buf,  0x1Cu);
            }

    goto LABEL_35;
  }

  if (!v6)
  {
    __nwlog_obj();
    id v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v54 = "nw_service_connector_cancel_request";
    id v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v51 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v33 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v54 = "nw_service_connector_cancel_request";
        _os_log_impl(&dword_181A5C000, v30, v33, "%{public}s called with null endpoint", buf, 0xCu);
      }

      goto LABEL_95;
    }

    if (!v51)
    {
      __nwlog_obj();
      uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v45 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v54 = "nw_service_connector_cancel_request";
        _os_log_impl( &dword_181A5C000,  v30,  v45,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_95;
    }

    os_log_type_t v39 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v40 = type;
    id v41 = os_log_type_enabled(v30, type);
    if (!v39)
    {
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v54 = "nw_service_connector_cancel_request";
        _os_log_impl(&dword_181A5C000, v30, v40, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }

      goto LABEL_95;
    }

    if (v41)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v54 = "nw_service_connector_cancel_request";
      BOOL v55 = 2082;
      os_log_type_t v56 = (size_t)v39;
      _os_log_impl( &dword_181A5C000,  v30,  v40,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_76;
  }

  if (!a3)
  {
    __nwlog_obj();
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v54 = "nw_service_connector_cancel_request";
    id v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v51 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v35 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v54 = "nw_service_connector_cancel_request";
        _os_log_impl(&dword_181A5C000, v30, v35, "%{public}s called with null userService", buf, 0xCu);
      }

      goto LABEL_95;
    }

    if (!v51)
    {
      __nwlog_obj();
      uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v46 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v54 = "nw_service_connector_cancel_request";
        _os_log_impl( &dword_181A5C000,  v30,  v46,  "%{public}s called with null userService, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_95;
    }

    os_log_type_t v39 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    unsigned int v42 = type;
    BOOL v43 = os_log_type_enabled(v30, type);
    if (!v39)
    {
      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v54 = "nw_service_connector_cancel_request";
        _os_log_impl(&dword_181A5C000, v30, v42, "%{public}s called with null userService, no backtrace", buf, 0xCu);
      }

      goto LABEL_95;
    }

    if (v43)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v54 = "nw_service_connector_cancel_request";
      BOOL v55 = 2082;
      os_log_type_t v56 = (size_t)v39;
      _os_log_impl( &dword_181A5C000,  v30,  v42,  "%{public}s called with null userService, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    if (v28) {
      free(v28);
    }
    id v10 = 0LL;
    if (v6 != &nw_protocol_ref_counted_handle) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  BOOL v43 = "nw_protocol_common_connect";
  uint64_t v15 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v40 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v16 = (os_log_s *)gLogObj;
    os_log_type_t v17 = type;
    if (os_log_type_enabled((os_log_t)gLogObj, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v43 = "nw_protocol_common_connect";
      int v18 = "%{public}s connect requires an output handler";
LABEL_46:
      _os_log_impl(&dword_181A5C000, v16, v17, v18, buf, 0xCu);
      goto LABEL_47;
    }

    goto LABEL_47;
  }

  if (v40)
  {
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v16 = (os_log_s *)gLogObj;
    os_log_type_t v17 = type;
    os_log_type_t v20 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v43 = "nw_protocol_common_connect";
        int v18 = "%{public}s connect requires an output handler, no backtrace";
        goto LABEL_46;
      }

      goto LABEL_47;
    }

    if (!v20)
    {
LABEL_33:
      free(backtrace_string);
      goto LABEL_47;
    }

    *(_DWORD *)buf = 136446466;
    BOOL v43 = "nw_protocol_common_connect";
    os_log_type_t v44 = 2082;
    __int16 v45 = backtrace_string;
    BOOL v21 = "%{public}s connect requires an output handler, dumping backtrace:%{public}s";
LABEL_32:
    _os_log_impl(&dword_181A5C000, v16, v17, v21, buf, 0x16u);
    goto LABEL_33;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v16 = (os_log_s *)gLogObj;
  os_log_type_t v17 = type;
  if (os_log_type_enabled((os_log_t)gLogObj, type))
  {
    *(_DWORD *)buf = 136446210;
    BOOL v43 = "nw_protocol_common_connect";
    int v18 = "%{public}s connect requires an output handler, backtrace limit exceeded";
    goto LABEL_46;
  }

    if (v28) {
      free(v28);
    }
    id v10 = 0LL;
    if (v6 != &nw_protocol_ref_counted_handle) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  BOOL v43 = "nw_protocol_common_reset";
  uint64_t v15 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v40 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v16 = (os_log_s *)gLogObj;
    os_log_type_t v17 = type;
    if (os_log_type_enabled((os_log_t)gLogObj, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v43 = "nw_protocol_common_reset";
      int v18 = "%{public}s reset requires an output handler";
LABEL_46:
      _os_log_impl(&dword_181A5C000, v16, v17, v18, buf, 0xCu);
      goto LABEL_47;
    }

    goto LABEL_47;
  }

  if (v40)
  {
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v16 = (os_log_s *)gLogObj;
    os_log_type_t v17 = type;
    os_log_type_t v20 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v43 = "nw_protocol_common_reset";
        int v18 = "%{public}s reset requires an output handler, no backtrace";
        goto LABEL_46;
      }

      goto LABEL_47;
    }

    if (!v20)
    {
LABEL_33:
      free(backtrace_string);
      goto LABEL_47;
    }

    *(_DWORD *)buf = 136446466;
    BOOL v43 = "nw_protocol_common_reset";
    os_log_type_t v44 = 2082;
    __int16 v45 = backtrace_string;
    BOOL v21 = "%{public}s reset requires an output handler, dumping backtrace:%{public}s";
LABEL_32:
    _os_log_impl(&dword_181A5C000, v16, v17, v21, buf, 0x16u);
    goto LABEL_33;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v16 = (os_log_s *)gLogObj;
  os_log_type_t v17 = type;
  if (os_log_type_enabled((os_log_t)gLogObj, type))
  {
    *(_DWORD *)buf = 136446210;
    BOOL v43 = "nw_protocol_common_reset";
    int v18 = "%{public}s reset requires an output handler, backtrace limit exceeded";
    goto LABEL_46;
  }

  if (v25) {
    free(v25);
  }
LABEL_13:
  if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
  {
    os_log_type_t v20 = *(void *)(a1 + 88);
    if (v20)
    {
      BOOL v21 = v20 - 1;
      *(void *)(a1 + 8_Block_object_dispose(va, 8) = v21;
      if (!v21)
      {
        os_log_type_t v22 = *(void (***)(void))(a1 + 64);
        if (v22)
        {
          *(void *)(a1 + 64) = 0LL;
          v22[2](v22);
          _Block_release(v22);
        }

        if ((*(_BYTE *)(a1 + 72) & 1) != 0)
        {
          int v23 = *(const void **)(a1 + 64);
          if (v23) {
            _Block_release(v23);
          }
        }

        free((void *)a1);
      }
    }
  }

  if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
  {
    id v10 = *(void *)(v3 + 88);
    if (v10)
    {
      BOOL v11 = v10 - 1;
      *(void *)(v3 + 8_Block_object_dispose(va, 8) = v11;
      if (!v11)
      {
        os_log_type_t v12 = *(void (***)(void))(v3 + 64);
        if (v12)
        {
          *(void *)(v3 + 64) = 0LL;
          v12[2](v12);
          _Block_release(v12);
        }

        if ((*(_BYTE *)(v3 + 72) & 1) != 0)
        {
          uint64_t v13 = *(const void **)(v3 + 64);
          if (v13) {
            _Block_release(v13);
          }
        }

  if (v25) {
    free(v25);
  }
LABEL_13:
  if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
  {
    os_log_type_t v20 = *(void *)(a1 + 88);
    if (v20)
    {
      BOOL v21 = v20 - 1;
      *(void *)(a1 + 8_Block_object_dispose(va, 8) = v21;
      if (!v21)
      {
        os_log_type_t v22 = *(void (***)(void))(a1 + 64);
        if (v22)
        {
          *(void *)(a1 + 64) = 0LL;
          v22[2](v22);
          _Block_release(v22);
        }

        if ((*(_BYTE *)(a1 + 72) & 1) != 0)
        {
          int v23 = *(const void **)(a1 + 64);
          if (v23) {
            _Block_release(v23);
          }
        }

        free((void *)a1);
      }
    }
  }

  if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
  {
    id v10 = *(void *)(v3 + 88);
    if (v10)
    {
      BOOL v11 = v10 - 1;
      *(void *)(v3 + 8_Block_object_dispose(va, 8) = v11;
      if (!v11)
      {
        os_log_type_t v12 = *(void (***)(void))(v3 + 64);
        if (v12)
        {
          *(void *)(v3 + 64) = 0LL;
          v12[2](v12);
          _Block_release(v12);
        }

        if ((*(_BYTE *)(v3 + 72) & 1) != 0)
        {
          uint64_t v13 = *(const void **)(v3 + 64);
          if (v13) {
            _Block_release(v13);
          }
        }

  if (v25) {
    free(v25);
  }
LABEL_13:
  if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
  {
    os_log_type_t v20 = *(void *)(a1 + 88);
    if (v20)
    {
      BOOL v21 = v20 - 1;
      *(void *)(a1 + 8_Block_object_dispose(va, 8) = v21;
      if (!v21)
      {
        os_log_type_t v22 = *(void (***)(void))(a1 + 64);
        if (v22)
        {
          *(void *)(a1 + 64) = 0LL;
          v22[2](v22);
          _Block_release(v22);
        }

        if ((*(_BYTE *)(a1 + 72) & 1) != 0)
        {
          int v23 = *(const void **)(a1 + 64);
          if (v23) {
            _Block_release(v23);
          }
        }

        free((void *)a1);
      }
    }
  }

  if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
  {
    id v10 = *(void *)(v3 + 88);
    if (v10)
    {
      BOOL v11 = v10 - 1;
      *(void *)(v3 + 8_Block_object_dispose(va, 8) = v11;
      if (!v11)
      {
        os_log_type_t v12 = *(void (***)(void))(v3 + 64);
        if (v12)
        {
          *(void *)(v3 + 64) = 0LL;
          v12[2](v12);
          _Block_release(v12);
        }

        if ((*(_BYTE *)(v3 + 72) & 1) != 0)
        {
          uint64_t v13 = *(const void **)(v3 + 64);
          if (v13) {
            _Block_release(v13);
          }
        }

  if (v25) {
    free(v25);
  }
LABEL_13:
  if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
  {
    os_log_type_t v20 = *(void *)(a2 + 88);
    if (v20)
    {
      BOOL v21 = v20 - 1;
      *(void *)(a2 + 8_Block_object_dispose(va, 8) = v21;
      if (!v21)
      {
        os_log_type_t v22 = *(void (***)(void))(a2 + 64);
        if (v22)
        {
          *(void *)(a2 + 64) = 0LL;
          v22[2](v22);
          _Block_release(v22);
        }

        if ((*(_BYTE *)(a2 + 72) & 1) != 0)
        {
          int v23 = *(const void **)(a2 + 64);
          if (v23) {
            _Block_release(v23);
          }
        }

        free((void *)a2);
      }
    }
  }

  if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
  {
    id v10 = *(void *)(v3 + 88);
    if (v10)
    {
      BOOL v11 = v10 - 1;
      *(void *)(v3 + 8_Block_object_dispose(va, 8) = v11;
      if (!v11)
      {
        os_log_type_t v12 = *(void (***)(void))(v3 + 64);
        if (v12)
        {
          *(void *)(v3 + 64) = 0LL;
          v12[2](v12);
          _Block_release(v12);
        }

        if ((*(_BYTE *)(v3 + 72) & 1) != 0)
        {
          uint64_t v13 = *(const void **)(v3 + 64);
          if (v13) {
            _Block_release(v13);
          }
        }

  if (v25) {
    free(v25);
  }
LABEL_13:
  if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
  {
    os_log_type_t v20 = *(void *)(a2 + 88);
    if (v20)
    {
      BOOL v21 = v20 - 1;
      *(void *)(a2 + 8_Block_object_dispose(va, 8) = v21;
      if (!v21)
      {
        os_log_type_t v22 = *(void (***)(void))(a2 + 64);
        if (v22)
        {
          *(void *)(a2 + 64) = 0LL;
          v22[2](v22);
          _Block_release(v22);
        }

        if ((*(_BYTE *)(a2 + 72) & 1) != 0)
        {
          int v23 = *(const void **)(a2 + 64);
          if (v23) {
            _Block_release(v23);
          }
        }

        free((void *)a2);
      }
    }
  }

  if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
  {
    id v10 = *(void *)(v3 + 88);
    if (v10)
    {
      BOOL v11 = v10 - 1;
      *(void *)(v3 + 8_Block_object_dispose(va, 8) = v11;
      if (!v11)
      {
        os_log_type_t v12 = *(void (***)(void))(v3 + 64);
        if (v12)
        {
          *(void *)(v3 + 64) = 0LL;
          v12[2](v12);
          _Block_release(v12);
        }

        if ((*(_BYTE *)(v3 + 72) & 1) != 0)
        {
          uint64_t v13 = *(const void **)(v3 + 64);
          if (v13) {
            _Block_release(v13);
          }
        }

  if (v25) {
    free(v25);
  }
LABEL_13:
  if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
  {
    os_log_type_t v20 = *(void *)(a2 + 88);
    if (v20)
    {
      BOOL v21 = v20 - 1;
      *(void *)(a2 + 8_Block_object_dispose(va, 8) = v21;
      if (!v21)
      {
        os_log_type_t v22 = *(void (***)(void))(a2 + 64);
        if (v22)
        {
          *(void *)(a2 + 64) = 0LL;
          v22[2](v22);
          _Block_release(v22);
        }

        if ((*(_BYTE *)(a2 + 72) & 1) != 0)
        {
          int v23 = *(const void **)(a2 + 64);
          if (v23) {
            _Block_release(v23);
          }
        }

        free((void *)a2);
      }
    }
  }

  if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
  {
    id v10 = *(void *)(v3 + 88);
    if (v10)
    {
      BOOL v11 = v10 - 1;
      *(void *)(v3 + 8_Block_object_dispose(va, 8) = v11;
      if (!v11)
      {
        os_log_type_t v12 = *(void (***)(void))(v3 + 64);
        if (v12)
        {
          *(void *)(v3 + 64) = 0LL;
          v12[2](v12);
          _Block_release(v12);
        }

        if ((*(_BYTE *)(v3 + 72) & 1) != 0)
        {
          uint64_t v13 = *(const void **)(v3 + 64);
          if (v13) {
            _Block_release(v13);
          }
        }

  if (v25) {
    free(v25);
  }
LABEL_13:
  if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
  {
    os_log_type_t v20 = *(void *)(a2 + 88);
    if (v20)
    {
      BOOL v21 = v20 - 1;
      *(void *)(a2 + 8_Block_object_dispose(va, 8) = v21;
      if (!v21)
      {
        os_log_type_t v22 = *(void (***)(void))(a2 + 64);
        if (v22)
        {
          *(void *)(a2 + 64) = 0LL;
          v22[2](v22);
          _Block_release(v22);
        }

        if ((*(_BYTE *)(a2 + 72) & 1) != 0)
        {
          int v23 = *(const void **)(a2 + 64);
          if (v23) {
            _Block_release(v23);
          }
        }

        free((void *)a2);
      }
    }
  }

  if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
  {
    id v10 = *(void *)(v3 + 88);
    if (v10)
    {
      BOOL v11 = v10 - 1;
      *(void *)(v3 + 8_Block_object_dispose(va, 8) = v11;
      if (!v11)
      {
        os_log_type_t v12 = *(void (***)(void))(v3 + 64);
        if (v12)
        {
          *(void *)(v3 + 64) = 0LL;
          v12[2](v12);
          _Block_release(v12);
        }

        if ((*(_BYTE *)(v3 + 72) & 1) != 0)
        {
          uint64_t v13 = *(const void **)(v3 + 64);
          if (v13) {
            _Block_release(v13);
          }
        }

  if (v25) {
    free(v25);
  }
LABEL_13:
  if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
  {
    os_log_type_t v20 = *(void *)(a2 + 88);
    if (v20)
    {
      BOOL v21 = v20 - 1;
      *(void *)(a2 + 8_Block_object_dispose(va, 8) = v21;
      if (!v21)
      {
        os_log_type_t v22 = *(void (***)(void))(a2 + 64);
        if (v22)
        {
          *(void *)(a2 + 64) = 0LL;
          v22[2](v22);
          _Block_release(v22);
        }

        if ((*(_BYTE *)(a2 + 72) & 1) != 0)
        {
          int v23 = *(const void **)(a2 + 64);
          if (v23) {
            _Block_release(v23);
          }
        }

        free((void *)a2);
      }
    }
  }

  if (v4 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
  {
    id v10 = *(void *)(v3 + 88);
    if (v10)
    {
      BOOL v11 = v10 - 1;
      *(void *)(v3 + 8_Block_object_dispose(va, 8) = v11;
      if (!v11)
      {
        os_log_type_t v12 = *(void (***)(void))(v3 + 64);
        if (v12)
        {
          *(void *)(v3 + 64) = 0LL;
          v12[2](v12);
          _Block_release(v12);
        }

        if ((*(_BYTE *)(v3 + 72) & 1) != 0)
        {
          uint64_t v13 = *(const void **)(v3 + 64);
          if (v13) {
            _Block_release(v13);
          }
        }

  if (v20) {
    free(v20);
  }
LABEL_14:
  if (v7 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v15 = *(void *)(a1 + 88);
    if (v15)
    {
      id v16 = v15 - 1;
      *(void *)(a1 + 8_Block_object_dispose(va, 8) = v16;
      if (!v16)
      {
        os_log_type_t v17 = *(void (***)(void))(a1 + 64);
        if (v17)
        {
          *(void *)(a1 + 64) = 0LL;
          v17[2](v17);
          _Block_release(v17);
        }

        if ((*(_BYTE *)(a1 + 72) & 1) != 0)
        {
          int v18 = *(const void **)(a1 + 64);
          if (v18) {
            _Block_release(v18);
          }
        }

        free((void *)a1);
      }
    }
  }

  if (v5 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v4 + 40) == &nw_protocol_ref_counted_handle)
  {
    BOOL v11 = *(void *)(v4 + 88);
    if (v11)
    {
      os_log_type_t v12 = v11 - 1;
      *(void *)(v4 + 8_Block_object_dispose(va, 8) = v12;
      if (!v12)
      {
        uint64_t v13 = *(void (***)(void))(v4 + 64);
        if (v13)
        {
          *(void *)(v4 + 64) = 0LL;
          v13[2](v13);
          _Block_release(v13);
        }

        if ((*(_BYTE *)(v4 + 72) & 1) != 0)
        {
          uint64_t v14 = *(const void **)(v4 + 64);
          if (v14) {
            _Block_release(v14);
          }
        }

        goto LABEL_25;
      }
    }
  }

    if (v28) {
      free(v28);
    }
    id v10 = 0LL;
    if (v6 != &nw_protocol_ref_counted_handle) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  BOOL v43 = "nw_protocol_common_waiting_for_output";
  uint64_t v15 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v40 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v16 = (os_log_s *)gLogObj;
    os_log_type_t v17 = type;
    if (os_log_type_enabled((os_log_t)gLogObj, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v43 = "nw_protocol_common_waiting_for_output";
      int v18 = "%{public}s waiting_for_output requires an output handler";
LABEL_46:
      _os_log_impl(&dword_181A5C000, v16, v17, v18, buf, 0xCu);
      goto LABEL_47;
    }

    goto LABEL_47;
  }

  if (v40)
  {
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v16 = (os_log_s *)gLogObj;
    os_log_type_t v17 = type;
    os_log_type_t v20 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v43 = "nw_protocol_common_waiting_for_output";
        int v18 = "%{public}s waiting_for_output requires an output handler, no backtrace";
        goto LABEL_46;
      }

      goto LABEL_47;
    }

    if (!v20)
    {
LABEL_33:
      free(backtrace_string);
      goto LABEL_47;
    }

    *(_DWORD *)buf = 136446466;
    BOOL v43 = "nw_protocol_common_waiting_for_output";
    os_log_type_t v44 = 2082;
    __int16 v45 = backtrace_string;
    BOOL v21 = "%{public}s waiting_for_output requires an output handler, dumping backtrace:%{public}s";
LABEL_32:
    _os_log_impl(&dword_181A5C000, v16, v17, v21, buf, 0x16u);
    goto LABEL_33;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v16 = (os_log_s *)gLogObj;
  os_log_type_t v17 = type;
  if (os_log_type_enabled((os_log_t)gLogObj, type))
  {
    *(_DWORD *)buf = 136446210;
    BOOL v43 = "nw_protocol_common_waiting_for_output";
    int v18 = "%{public}s waiting_for_output requires an output handler, backtrace limit exceeded";
    goto LABEL_46;
  }

  if (v38) {
    free(v38);
  }
  os_log_type_t v17 = 0LL;
LABEL_52:

  return v17;
}

      BOOL v11 = 1;
      if (v5 > 1) {
        goto LABEL_53;
      }
      goto LABEL_35;
    }
  }

    free(backtrace_string);
    goto LABEL_129;
  }

  uint64_t v13 = v11;
  if (!v11)
  {
    int v23 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    os_log_type_t v44 = "strict_calloc";
    char v24 = (void *)_os_log_send_and_compose_impl();
    uint64_t result = __nwlog_abort((uint64_t)v24);
    if (result) {
      goto LABEL_132;
    }
    free(v24);
  }

  uint64_t v14 = calloc(1uLL, v13);
  if (!v14)
  {
    os_log_type_t v25 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    os_log_type_t v44 = "strict_calloc";
    __int16 v45 = 2048;
    os_log_type_t v46 = 1LL;
    BOOL v47 = 2048;
    uint64_t v48 = v13;
    __int128 v26 = (void *)_os_log_send_and_compose_impl();
    uint64_t result = __nwlog_abort((uint64_t)v26);
    if (result) {
      goto LABEL_132;
    }
    free(v26);
  }

  memcpy(v14, (const void *)(a1 + v12), v13);
  if (a2 == v13)
  {
    os_log_type_t v27 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    os_log_type_t v44 = "strict_calloc";
    __int16 v28 = (void *)_os_log_send_and_compose_impl();
    uint64_t result = __nwlog_abort((uint64_t)v28);
    if (result) {
      goto LABEL_132;
    }
    free(v28);
  }

  uint64_t v15 = calloc(1uLL, v12);
  if (v15)
  {
LABEL_13:
    id v16 = cchpke_responder_decrypt();
    if (v14) {
      free(v14);
    }
    if (v16)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v17 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
        __int16 v45 = 1024;
        LODWORD(v46) = v16;
        _os_log_impl(&dword_181A5C000, v17, OS_LOG_TYPE_ERROR, "%{public}s Decrypt error: %d", buf, 0x12u);
      }

      if (v15)
      {
        free(v15);
        return 0LL;
      }
    }

    else
    {
      *a8 = v12;
    }

    return (BOOL)v15;
  }

  os_log_type_t v29 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v29, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  os_log_type_t v44 = "strict_calloc";
  __int16 v45 = 2048;
  os_log_type_t v46 = 1LL;
  BOOL v47 = 2048;
  uint64_t v48 = v12;
  uint64_t v30 = (void *)_os_log_send_and_compose_impl();
  uint64_t result = __nwlog_abort((uint64_t)v30);
  if (!result)
  {
    free(v30);
    goto LABEL_13;
  }

  LODWORD(v13) = 0;
  uint64_t v14 = v3[2];
  if (!v14) {
    goto LABEL_35;
  }
LABEL_27:
  if (!nw_path_parameters_get_logging_disabled(v14[13]))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v15 = (os_log_s *)(id)gconnectionLogObj;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_34;
    }
    id v16 = *((_DWORD *)v3 + 112);
    os_log_type_t v17 = v4;
    int v18 = v17;
    if (v17)
    {
      uint64_t v19 = *((unsigned int *)v17 + 112);
LABEL_33:

      *(_DWORD *)buf = 136446978;
      os_log_type_t v71 = "nw_connection_shares_protocol_stack_locked_on_nw_queue";
      uint64_t v72 = 1024;
      *(_DWORD *)uint64_t v73 = v16;
      *(_WORD *)&v73[4] = 2048;
      *(void *)&v73[6] = v19;
      *(_WORD *)&v73[14] = 1024;
      *(_DWORD *)&v73[16] = (_DWORD)v13;
      _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%u] shares a protocol stack with [C%llu]: %{BOOL}d",  buf,  0x22u);
LABEL_34:

      goto LABEL_35;
    }

    __nwlog_obj();
    os_log_type_t v46 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v71 = "nw_connection_get_id";
    BOOL v47 = (char *)_os_log_send_and_compose_impl();

    BOOL v69 = OS_LOG_TYPE_ERROR;
    os_log_type_t v68 = 0;
    if (__nwlog_fault(v47, &v69, &v68))
    {
      if (v69 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v49 = v69;
        if (os_log_type_enabled(v48, v69))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v71 = "nw_connection_get_id";
          _os_log_impl(&dword_181A5C000, v48, v49, "%{public}s called with null connection", buf, 0xCu);
        }
      }

      else if (v68)
      {
        unsigned int v50 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        typea = v69;
        os_log_type_t v51 = os_log_type_enabled(v48, v69);
        if (v50)
        {
          if (v51)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v71 = "nw_connection_get_id";
            uint64_t v72 = 2082;
            *(void *)uint64_t v73 = v50;
            _os_log_impl( &dword_181A5C000,  v48,  typea,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v50);
          goto LABEL_132;
        }

        if (v51)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v71 = "nw_connection_get_id";
          _os_log_impl(&dword_181A5C000, v48, typea, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v53 = v69;
        if (os_log_type_enabled(v48, v69))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v71 = "nw_connection_get_id";
          _os_log_impl( &dword_181A5C000,  v48,  v53,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

      goto LABEL_96;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v47 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v75 = "nw_endpoint_handler_inject_disconnect_error";
    uint64_t v48 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v72 = 0;
    if (__nwlog_fault(v48, &type, &v72))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v49 = (os_log_s *)(id)gLogObj;
        unsigned int v50 = type;
        if (os_log_type_enabled(v49, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v75 = "nw_endpoint_handler_inject_disconnect_error";
          _os_log_impl(&dword_181A5C000, v49, v50, "%{public}s No endpoint flow", buf, 0xCu);
        }
      }

      else if (v72)
      {
        os_log_type_t v53 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v49 = (os_log_s *)(id)gLogObj;
        os_log_type_t v54 = type;
        BOOL v55 = os_log_type_enabled(v49, type);
        if (v53)
        {
          if (v55)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v75 = "nw_endpoint_handler_inject_disconnect_error";
            os_log_type_t v76 = 2082;
            unsigned int v77 = v53;
            _os_log_impl( &dword_181A5C000,  v49,  v54,  "%{public}s No endpoint flow, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v53);
          if (!v48) {
            goto LABEL_95;
          }
          goto LABEL_79;
        }

        if (v55)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v75 = "nw_endpoint_handler_inject_disconnect_error";
          _os_log_impl(&dword_181A5C000, v49, v54, "%{public}s No endpoint flow, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v49 = (os_log_s *)(id)gLogObj;
        unsigned int v57 = type;
        if (os_log_type_enabled(v49, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v75 = "nw_endpoint_handler_inject_disconnect_error";
          _os_log_impl(&dword_181A5C000, v49, v57, "%{public}s No endpoint flow, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }

    if (!v48) {
      goto LABEL_95;
    }
LABEL_79:
    free(v48);
    goto LABEL_95;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v37 = (id)gLogObj;
  else {
    os_log_type_t v38 = off_189BBBBC0[mode];
  }
  *(_DWORD *)buf = 136446722;
  os_log_type_t v75 = "nw_endpoint_handler_inject_disconnect_error";
  os_log_type_t v76 = 2082;
  unsigned int v77 = (void *)v38;
  unsigned int v78 = 2082;
  __int16 v79 = "flow";
  os_log_type_t v39 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v72 = 0;
  if (__nwlog_fault(v39, &type, &v72))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v40 = (os_log_s *)(id)gLogObj;
      id v41 = type;
      if (os_log_type_enabled(v40, type))
      {
        else {
          unsigned int v42 = off_189BBBBC0[mode];
        }
        *(_DWORD *)buf = 136446722;
        os_log_type_t v75 = "nw_endpoint_handler_inject_disconnect_error";
        os_log_type_t v76 = 2082;
        unsigned int v77 = (void *)v42;
        unsigned int v78 = 2082;
        __int16 v79 = "flow";
        _os_log_impl( &dword_181A5C000,  v40,  v41,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
      }
    }

    else if (v72)
    {
      BOOL v43 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v40 = (os_log_s *)(id)gLogObj;
      os_log_type_t v44 = type;
      __int16 v45 = os_log_type_enabled(v40, type);
      if (v43)
      {
        if (v45)
        {
          else {
            os_log_type_t v46 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446978;
          os_log_type_t v75 = "nw_endpoint_handler_inject_disconnect_error";
          os_log_type_t v76 = 2082;
          unsigned int v77 = (void *)v46;
          unsigned int v78 = 2082;
          __int16 v79 = "flow";
          int64_t v80 = 2082;
          __int16 v81 = v43;
          _os_log_impl( &dword_181A5C000,  v40,  v44,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v43);
        if (v39) {
          goto LABEL_87;
        }
        goto LABEL_96;
      }

      if (v45)
      {
        else {
          os_log_type_t v56 = off_189BBBBC0[mode];
        }
        *(_DWORD *)buf = 136446722;
        os_log_type_t v75 = "nw_endpoint_handler_inject_disconnect_error";
        os_log_type_t v76 = 2082;
        unsigned int v77 = (void *)v56;
        unsigned int v78 = 2082;
        __int16 v79 = "flow";
        _os_log_impl( &dword_181A5C000,  v40,  v44,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v40 = (os_log_s *)(id)gLogObj;
      os_log_type_t v51 = type;
      if (os_log_type_enabled(v40, type))
      {
        else {
          BOOL v52 = off_189BBBBC0[mode];
        }
        *(_DWORD *)buf = 136446722;
        os_log_type_t v75 = "nw_endpoint_handler_inject_disconnect_error";
        os_log_type_t v76 = 2082;
        unsigned int v77 = (void *)v52;
        unsigned int v78 = 2082;
        __int16 v79 = "flow";
        _os_log_impl( &dword_181A5C000,  v40,  v51,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
      }
    }

    goto LABEL_85;
  }

void sub_181B19C64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_context_add_cache_entry(void *a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (v3)
  {
    int v4 = v3;
    if (a2)
    {
      uint64_t v5 = (dispatch_queue_t *)v3;
      id v6 = v5;
      if (((_BYTE)v5[17] & 8) == 0) {
        dispatch_assert_queue_V2(v5[1]);
      }

      BOOL v27 = nw_context_copy_cache_context(v6);
      uint64_t v7 = **(void **)(v27 + 24);
      *a2 = v7;
      id v8 = *(void **)(v27 + 24);
      if (v7) {
        id v8 = (void *)*v8;
      }
      v8[1] = a2;
      **(void **)(v27 + 24) = a2;
      a2[1] = *(void *)(v27 + 24);
      uint64_t v9 = *(void *)(*(void *)(v27 + 24) + 16LL);
      a2[2] = v9;
      id v10 = *(void **)(v27 + 24);
      if (v9) {
        id v10 = (void *)v10[2];
      }
      v10[3] = a2 + 2;
      *(void *)(*(void *)(v27 + 24) + 16LL) = a2;
      a2[3] = *(void *)(v27 + 24) + 16LL;
      *(int32x2_t *)(*(void *)(v27 + 24) + 64LL) = vadd_s32( *(int32x2_t *)(*(void *)(v27 + 24) + 64LL),  (int32x2_t)0x100000001LL);

      return;
    }

    __nwlog_obj();
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v31 = "nw_context_add_cache_entry";
    id v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v31 = "nw_context_add_cache_entry";
        _os_log_impl(&dword_181A5C000, v17, v18, "%{public}s called with null cache_entry", buf, 0xCu);
      }
    }

    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type;
      BOOL v24 = os_log_type_enabled(v17, type);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v31 = "nw_context_add_cache_entry";
          __int16 v32 = 2082;
          BOOL v33 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v17,  v23,  "%{public}s called with null cache_entry, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_44;
      }

      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v31 = "nw_context_add_cache_entry";
        _os_log_impl(&dword_181A5C000, v17, v23, "%{public}s called with null cache_entry, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v31 = "nw_context_add_cache_entry";
        _os_log_impl( &dword_181A5C000,  v17,  v26,  "%{public}s called with null cache_entry, backtrace limit exceeded",  buf,  0xCu);
      }
    }

LABEL_44:
    if (v16) {
      free(v16);
    }

    return;
  }

  __nwlog_obj();
  BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v31 = "nw_context_add_cache_entry";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v28 = 0;
  if (__nwlog_fault(v12, &type, &v28))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v31 = "nw_context_add_cache_entry";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v28)
    {
      uint64_t v19 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v13, type);
      if (v19)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v31 = "nw_context_add_cache_entry";
          __int16 v32 = 2082;
          BOOL v33 = v19;
          _os_log_impl( &dword_181A5C000,  v13,  v20,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v19);
        goto LABEL_39;
      }

      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v31 = "nw_context_add_cache_entry";
        _os_log_impl(&dword_181A5C000, v13, v20, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v31 = "nw_context_add_cache_entry";
        _os_log_impl( &dword_181A5C000,  v13,  v25,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181B1A23C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_context_endpoint_get_connected_flow_count(void *a1, void *a2)
{
  uint64_t v65 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (v3)
  {
    if (v4)
    {
      if (((_BYTE)v3[17] & 8) == 0) {
        dispatch_assert_queue_V2(v3[1]);
      }
      BOOL v6 = nw_context_copy_cache_context(v3);

      id v7 = v5;
      int v8 = [v7 type];

      if (v8 == 2)
      {
        uint64_t v9 = (uint64_t *)(*(void *)(v6 + 24) + 40LL);
      }

      else if (v8 == 1)
      {
        uint64_t v9 = (uint64_t *)(*(void *)(v6 + 24) + 32LL);
      }

      else
      {
        uint64_t v9 = (uint64_t *)(*(void *)(v6 + 24) + 48LL);
      }

      if (*v9)
      {
        uint64_t node = nw_hash_table_get_node(*v9, (uint64_t)v7, 0LL);
        if (node)
        {
          uint64_t v11 = nw_hash_table_get_node(*(void *)(node + 16), (uint64_t)v7, 0LL);
          if (v11)
          {
            os_log_type_t v12 = *(id *)(v11 + 16);
            uint64_t v13 = v12;
            if (v12)
            {
              os_log_type_t v14 = (void *)v12[1];
              if (v14)
              {
                uint64_t v15 = v14;
                id v16 = v15;
                if (((_BYTE)v15[17] & 8) == 0) {
                  dispatch_assert_queue_V2(v15[1]);
                }

                uint64_t v17 = v13[25];
                if (v17 && *(_DWORD *)(v17 + 40))
                {
                  *(void *)os_log_type_t type = 0LL;
                  BOOL v58 = type;
                  int v60 = 0;
                  uint64_t v59 = 0x2020000000LL;
                  *(void *)buf = MEMORY[0x1895F87A8];
                  *(void *)&buf[8] = 3221225472LL;
                  *(void *)&buf[16] = __nw_endpoint_get_connected_flow_count_block_invoke;
                  os_log_type_t v63 = &unk_189BB76C0;
                  BOOL v64 = type;
                  nw_hash_table_apply((char *)v17, (uint64_t)buf);
                  uint64_t v18 = *((unsigned int *)v58 + 6);
                  _Block_object_dispose(type, 8);
LABEL_112:

                  goto LABEL_113;
                }

LABEL_94:
      if (v28) {
        free(v28);
      }
      goto LABEL_96;
    }

    __nwlog_obj();
    os_log_type_t v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_connected_flow_count";
    BOOL v24 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v61 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_connected_flow_count";
        _os_log_impl(&dword_181A5C000, v25, v26, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }

    else if (v61)
    {
      uint64_t v34 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v35 = type[0];
      BOOL v36 = os_log_type_enabled(v25, type[0]);
      if (v34)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_connected_flow_count";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v34;
          _os_log_impl( &dword_181A5C000,  v25,  v35,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v34);
        goto LABEL_88;
      }

      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_connected_flow_count";
        _os_log_impl(&dword_181A5C000, v25, v35, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v52 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_connected_flow_count";
        _os_log_impl( &dword_181A5C000,  v25,  v52,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }
    }

LABEL_88:
    if (v24) {
      free(v24);
    }
    uint64_t v18 = 0LL;
    goto LABEL_114;
  }

  __nwlog_obj();
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_connected_flow_count";
  os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  char v61 = 0;
  if (__nwlog_fault(v20, type, &v61))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type[0];
      if (os_log_type_enabled(v21, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_connected_flow_count";
        _os_log_impl(&dword_181A5C000, v21, v22, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v61)
    {
      uint64_t v31 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = type[0];
      BOOL v33 = os_log_type_enabled(v21, type[0]);
      if (v31)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_connected_flow_count";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v31;
          _os_log_impl( &dword_181A5C000,  v21,  v32,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v31);
        goto LABEL_82;
      }

      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_connected_flow_count";
        _os_log_impl(&dword_181A5C000, v21, v32, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v51 = type[0];
      if (os_log_type_enabled(v21, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_connected_flow_count";
        _os_log_impl( &dword_181A5C000,  v21,  v51,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

    if (v72) {
      free(v72);
    }
    goto LABEL_337;
  }

  id v7 = (unsigned int *)v5;
  int v8 = v7[29];

  if ((_DWORD)v8 != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v13 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      else {
        os_log_type_t v25 = off_189BBBBC0[v8];
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v25;
      *(_WORD *)&buf[22] = 2082;
      v379 = "resolver";
      _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
    }

    goto LABEL_82;
  }

  uint64_t v9 = v7;
  uint64_t state = v9->state;

  if ((state & 0xFFFFFFFE) != 4)
  {
    v363 = nw_endpoint_handler_copy_resolver(v9);
    v366 = v6;
    if (*((char **)v363 + 1) != v6)
    {
      if (nw_endpoint_handler_get_minimize_logging(v9))
      {
        if ((nw_endpoint_handler_get_logging_disabled(v9) & 1) == 0)
        {
          v353 = v9;
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          char v28 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
          {
            id_string = nw_endpoint_handler_get_id_string(v9);
            uint64_t v87 = nw_endpoint_handler_dry_run_string(v9);
            BOOL v88 = nw_endpoint_handler_copy_endpoint(v9);
            logging_description = nw_endpoint_get_logging_description(v88);
            v90 = nw_endpoint_handler_state_string(v9);
            v91 = nw_endpoint_handler_mode_string(v353);
            __int16 v92 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v353);
            uint32_t v93 = (const char *)*((void *)v363 + 1);
            *(_DWORD *)buf = 136448258;
            *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = id_string;
            *(_WORD *)&buf[22] = 2082;
            v379 = v87;
            *(_WORD *)v380 = 2082;
            *(void *)&v380[2] = logging_description;
            *(_WORD *)&v380[10] = 2082;
            *(void *)&v380[12] = v90;
            v381 = 2082;
            v382 = v91;
            v383 = 2114;
            v384 = v92;
            v385 = 2048;
            v386 = v93;
            v387 = 2048;
            v388 = v366;
            _os_log_impl( &dword_181A5C000,  v28,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ignoring update from old resolver object (%p != %p)",  buf,  0x5Cu);
          }

          goto LABEL_335;
        }
      }

      else
      {
        os_log_type_t v26 = v9;
        BOOL v27 = *((_BYTE *)v26 + 268);

        if ((v27 & 0x20) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          char v28 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            os_log_type_t v29 = v7;
            os_log_type_t v30 = v26;

            uint64_t v31 = v30;
            os_log_type_t v32 = *((_BYTE *)v26 + 268);

            if ((v32 & 1) != 0) {
              BOOL v33 = "dry-run ";
            }
            else {
              BOOL v33 = "";
            }
            uint64_t v34 = nw_endpoint_handler_copy_endpoint(v31);
            os_log_type_t v35 = nw_endpoint_get_logging_description(v34);
            id_str = v30->id_str;
            os_log_type_t v37 = v31;
            os_log_type_t v38 = v37;
            BOOL v39 = v9->state;
            else {
              BOOL v40 = off_189BBBBF0[v39];
            }

            os_log_type_t v63 = v38;
            BOOL v64 = v63;
            uint64_t v65 = "path";
            switch(v29[29])
            {
              case 0u:
                break;
              case 1u:
                uint64_t v65 = "resolver";
                break;
              case 2u:
                uint64_t v65 = nw_endpoint_flow_mode_string(v63[31]);
                break;
              case 3u:
                uint64_t v65 = "proxy";
                break;
              case 4u:
                uint64_t v65 = "fallback";
                break;
              case 5u:
                uint64_t v65 = "transform";
                break;
              default:
                uint64_t v65 = "unknown-mode";
                break;
            }

            os_log_type_t v68 = v64;
            os_unfair_lock_lock((os_unfair_lock_t)v68 + 28);
            BOOL v69 = v68[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v68 + 28);

            os_log_type_t v70 = (const char *)*((void *)v363 + 1);
            *(_DWORD *)buf = 136448258;
            *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = id_str;
            *(_WORD *)&buf[22] = 2082;
            v379 = v33;
            *(_WORD *)v380 = 2082;
            *(void *)&v380[2] = v35;
            *(_WORD *)&v380[10] = 2082;
            *(void *)&v380[12] = v40;
            v381 = 2082;
            v382 = v65;
            v383 = 2114;
            v384 = v69;
            v385 = 2048;
            v386 = v70;
            v387 = 2048;
            v388 = v366;
            _os_log_impl( &dword_181A5C000,  v28,  OS_LOG_TYPE_DEFAULT,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ignoring update from old resolver object (%p != %p)",  buf,  0x5Cu);
          }

          goto LABEL_335;
        }
      }

            os_log_type_t v14 = 0LL;
LABEL_95:

            goto LABEL_96;
          }

          goto LABEL_112;
        }

        request = nw_flow_add_read_request(v5, (uint64_t)v7 + 376, v4);
      }

      os_log_type_t v14 = request;
LABEL_96:

      goto LABEL_97;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v15 = (id)gLogObj;
    else {
      id v16 = off_189BBBBC0[mode];
    }
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_add_read_request";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v16;
    *(_WORD *)&buf[22] = 2082;
    v109 = "flow";
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    int v107 = 0;
    if (__nwlog_fault(v17, type, &v107))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v18 = (os_log_s *)(id)gLogObj;
        uint64_t v19 = type[0];
        if (os_log_type_enabled(v18, type[0]))
        {
          else {
            os_log_type_t v20 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_add_read_request";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v20;
          *(_WORD *)&buf[22] = 2082;
          v109 = "flow";
          _os_log_impl( &dword_181A5C000,  v18,  v19,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

      else if (v107)
      {
        os_log_type_t v23 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v18 = (os_log_s *)(id)gLogObj;
        BOOL v24 = type[0];
        os_log_type_t v25 = os_log_type_enabled(v18, type[0]);
        if (v23)
        {
          if (v25)
          {
            else {
              os_log_type_t v26 = off_189BBBBC0[mode];
            }
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_add_read_request";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v26;
            *(_WORD *)&buf[22] = 2082;
            v109 = "flow";
            BOOL v110 = 2082;
            id v111 = v23;
            _os_log_impl( &dword_181A5C000,  v18,  v24,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v23);
          if (!v17) {
            goto LABEL_73;
          }
          goto LABEL_72;
        }

        if (v25)
        {
          else {
            os_log_type_t v53 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_add_read_request";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v53;
          *(_WORD *)&buf[22] = 2082;
          v109 = "flow";
          _os_log_impl( &dword_181A5C000,  v18,  v24,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v18 = (os_log_s *)(id)gLogObj;
        BOOL v39 = type[0];
        if (os_log_type_enabled(v18, type[0]))
        {
          else {
            BOOL v40 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_add_read_request";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v40;
          *(_WORD *)&buf[22] = 2082;
          v109 = "flow";
          _os_log_impl( &dword_181A5C000,  v18,  v39,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }
      }

    if (v61) {
      free(v61);
    }
    goto LABEL_64;
  }

  uint64_t v9 = (NWConcrete_nw_endpoint_handler *)v7;
  unsigned int mode = v9->mode;

  if ((_DWORD)mode == 2)
  {
    uint64_t v11 = nw_endpoint_handler_copy_flow(v9);
    BOOL v98 = a2;
    if (a3)
    {
      if (a3 >> 8 == 16776959)
      {
        dns_error = nw_error_create_dns_error(a3);
      }

      else if (a3 + 9899 > 0x63)
      {
        dns_error = nw_error_create_posix_error(a3);
      }

      else
      {
        dns_error = nw_error_create_tls_error(a3);
      }

      os_log_type_t v30 = handle[40];
      handle[40] = dns_error;

      uint64_t v31 = handle[40];
      if (v31)
      {
        objc_storeStrong((id *)v11 + 109, v31);
        *((_BYTE *)v11 + 36) &= ~1u;
      }

      if (!nw_endpoint_handler_get_minimize_logging(v9))
      {
        os_log_type_t v32 = v9;
        BOOL v33 = *((_BYTE *)v32 + 268);

        if ((v33 & 0x20) != 0) {
          goto LABEL_59;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v19 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          os_log_t loga = v19;
          uint64_t v34 = v32;

          os_log_type_t v35 = v34;
          BOOL v36 = *((_BYTE *)v32 + 268);

          if ((v36 & 1) != 0) {
            os_log_type_t v37 = "dry-run ";
          }
          else {
            os_log_type_t v37 = "";
          }
          os_log_type_t v38 = nw_endpoint_handler_copy_endpoint(v35);
          logging_description = nw_endpoint_get_logging_description(v38);
          BOOL v39 = v35;
          BOOL v40 = v39;
          id v41 = v39[30];
          __int16 v92 = v5;
          else {
            unsigned int v42 = off_189BBBBF0[v41];
          }
          int v84 = v42;
          v86 = v37;
          id_str = v34->id_str;

          os_log_type_t v44 = v40;
          os_log_type_t v45 = v44;
          uint64_t v87 = v38;
          os_log_type_t v46 = v11;
          os_log_type_t v47 = "path";
          switch(v9->mode)
          {
            case 0:
              break;
            case 1:
              os_log_type_t v47 = "resolver";
              break;
            case 2:
              os_log_type_t v47 = nw_endpoint_flow_mode_string(v44[31]);
              break;
            case 3:
              os_log_type_t v47 = "proxy";
              break;
            case 4:
              os_log_type_t v47 = "fallback";
              break;
            case 5:
              os_log_type_t v47 = "transform";
              break;
            default:
              os_log_type_t v47 = "unknown-mode";
              break;
          }

          os_log_type_t v51 = v45;
          os_unfair_lock_lock((os_unfair_lock_t)v51 + 28);
          os_log_type_t v52 = v51[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v51 + 28);

          name = "?";
          if (v98 && v98->identifier) {
            name = v98->identifier->name;
          }
          uint64_t v11 = v46;
          uint64_t v19 = loga;
          os_log_type_t v54 = handle[40];
          *(_DWORD *)buf = 136448258;
          os_log_type_t v102 = "nw_flow_error";
          unsigned int v103 = 2082;
          os_log_type_t v104 = id_str;
          int v105 = 2082;
          int v106 = v86;
          int v107 = 2082;
          id v108 = logging_description;
          v109 = 2082;
          BOOL v110 = v84;
          id v111 = 2082;
          BOOL v112 = v47;
          uint64_t v113 = 2114;
          int v114 = v52;
          int v115 = 2082;
          v116 = name;
          unsigned int v117 = 2114;
          id v118 = v54;
          _os_log_impl( &dword_181A5C000,  loga,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Output protocol (%{public}s) sent error: %{public}@",  buf,  0x5Cu);

          uint64_t v5 = v92;
        }

        goto LABEL_58;
      }

      if ((nw_endpoint_handler_get_logging_disabled(v9) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v19 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          uint32_t v93 = v5;
          uint64_t v82 = v11;
          logb = nw_endpoint_handler_get_id_string(v9);
          v90 = nw_endpoint_handler_dry_run_string(v9);
          unsigned int v67 = nw_endpoint_handler_copy_endpoint(v9);
          os_log_type_t v68 = nw_endpoint_get_logging_description(v67);
          BOOL v69 = nw_endpoint_handler_state_string(v9);
          os_log_type_t v70 = nw_endpoint_handler_mode_string(v9);
          os_log_type_t v71 = nw_endpoint_handler_copy_current_path(v9);
          uint64_t v72 = v71;
          uint64_t v73 = "?";
          if (v98 && v98->identifier) {
            uint64_t v73 = v98->identifier->name;
          }
          char v74 = handle[40];
          *(_DWORD *)buf = 136448258;
          os_log_type_t v102 = "nw_flow_error";
          unsigned int v103 = 2082;
          os_log_type_t v104 = (void *)logb;
          int v105 = 2082;
          int v106 = v90;
          int v107 = 2082;
          id v108 = v68;
          v109 = 2082;
          BOOL v110 = v69;
          id v111 = 2082;
          BOOL v112 = v70;
          uint64_t v113 = 2114;
          int v114 = v71;
          int v115 = 2082;
          v116 = v73;
          unsigned int v117 = 2114;
          id v118 = v74;
          _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Output protocol (%{public}s) sent error: %{public}@",  buf,  0x5Cu);

          uint64_t v11 = v82;
          uint64_t v5 = v93;
        }

    if (v24) {
      free(v24);
    }
    goto LABEL_38;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_plugins_disconnected";
  os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v43 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v21 = (os_log_s *)__nwlog_obj();
    os_log_type_t v22 = type;
    if (!os_log_type_enabled(v21, type)) {
      goto LABEL_89;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugins_disconnected";
    os_log_type_t v23 = "%{public}s called with null protocol->handle";
    goto LABEL_88;
  }

  if (!v43)
  {
    BOOL v21 = (os_log_s *)__nwlog_obj();
    os_log_type_t v22 = type;
    if (!os_log_type_enabled(v21, type)) {
      goto LABEL_89;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugins_disconnected";
    os_log_type_t v23 = "%{public}s called with null protocol->handle, backtrace limit exceeded";
    goto LABEL_88;
  }

  os_log_type_t v32 = (char *)__nw_create_backtrace_string();
  BOOL v21 = (os_log_s *)__nwlog_obj();
  os_log_type_t v22 = type;
  BOOL v33 = os_log_type_enabled(v21, type);
  if (!v32)
  {
    if (!v33) {
      goto LABEL_89;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugins_disconnected";
    os_log_type_t v23 = "%{public}s called with null protocol->handle, no backtrace";
    goto LABEL_88;
  }

  if (v33)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugins_disconnected";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v32;
    _os_log_impl( &dword_181A5C000,  v21,  v22,  "%{public}s called with null protocol->handle, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v32);
  if (v20) {
    goto LABEL_90;
  }
}

  if (v19) {
    free(v19);
  }
}

  if (v28) {
    free(v28);
  }
  os_log_type_t v25 = 0LL;
LABEL_32:

  return v25;
}
}

        if (v29) {
          free(v29);
        }
        os_log_type_t v14 = 0LL;
        if (v10 != &nw_protocol_ref_counted_handle) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }

      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v63 = "__nw_protocol_replace_input_handler";
      unsigned int v42 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      int v60 = 0;
      if (__nwlog_fault(v42, &type, &v60))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v43 = (os_log_s *)__nwlog_obj();
          os_log_type_t v44 = type;
          if (os_log_type_enabled(v43, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v63 = "__nw_protocol_replace_input_handler";
            os_log_type_t v45 = "%{public}s called with null new_input_protocol";
LABEL_122:
            _os_log_impl(&dword_181A5C000, v43, v44, v45, buf, 0xCu);
          }
        }

        else if (v60)
        {
          os_log_type_t v54 = (char *)__nw_create_backtrace_string();
          os_log_type_t v43 = (os_log_s *)__nwlog_obj();
          os_log_type_t v44 = type;
          os_log_type_t v55 = os_log_type_enabled(v43, type);
          if (v54)
          {
            if (v55)
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v63 = "__nw_protocol_replace_input_handler";
              BOOL v64 = 2082;
              uint64_t v65 = v54;
              _os_log_impl( &dword_181A5C000,  v43,  v44,  "%{public}s called with null new_input_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v54);
            goto LABEL_123;
          }

          if (v55)
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v63 = "__nw_protocol_replace_input_handler";
            os_log_type_t v45 = "%{public}s called with null new_input_protocol, no backtrace";
            goto LABEL_122;
          }
        }

        else
        {
          os_log_type_t v43 = (os_log_s *)__nwlog_obj();
          os_log_type_t v44 = type;
          if (os_log_type_enabled(v43, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v63 = "__nw_protocol_replace_input_handler";
            os_log_type_t v45 = "%{public}s called with null new_input_protocol, backtrace limit exceeded";
            goto LABEL_122;
          }
        }
      }

  if (v30) {
    free(v30);
  }
  return 0LL;
}

  if (v30) {
    free(v30);
  }
  return 0LL;
}

  if (v27) {
    free(v27);
  }
  return 0LL;
}

  if (v27) {
    free(v27);
  }
  return 0LL;
}

  if (v27) {
    free(v27);
  }
  return 0LL;
}

        free(v65);
        goto LABEL_107;
      }

      if (!v66) {
        goto LABEL_106;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v78 = "+[NWMonitor monitorWithNetworkDescriptionArray:endpoint:parameters:]";
      os_log_type_t v53 = "%{public}s super alloc init failed, no backtrace";
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v52 = type;
      if (!os_log_type_enabled(v51, type)) {
        goto LABEL_106;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v78 = "+[NWMonitor monitorWithNetworkDescriptionArray:endpoint:parameters:]";
      os_log_type_t v53 = "%{public}s super alloc init failed, backtrace limit exceeded";
    }

    if (v43) {
      free(v43);
    }
    goto LABEL_67;
  }

      if (!v27) {
        return 0LL;
      }
      os_log_type_t v26 = (char *)v27;
      goto LABEL_40;
    }

    if (!v37)
    {
      char v28 = (os_log_s *)__nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v40 = "nw_protocol_masque_replace_input_handler";
        os_log_type_t v30 = "%{public}s called with null new_input_handler, backtrace limit exceeded";
        goto LABEL_93;
      }

      goto LABEL_94;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    char v28 = (os_log_s *)__nwlog_obj();
    os_log_type_t v29 = type;
    BOOL v36 = os_log_type_enabled(v28, type);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v40 = "nw_protocol_masque_replace_input_handler";
        os_log_type_t v30 = "%{public}s called with null new_input_handler, no backtrace";
        goto LABEL_93;
      }

      goto LABEL_94;
    }

    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v40 = "nw_protocol_masque_replace_input_handler";
      id v41 = 2082;
      unsigned int v42 = backtrace_string;
      BOOL v33 = "%{public}s called with null new_input_handler, dumping backtrace:%{public}s";
      goto LABEL_75;
    }

  free(v35);
  if (v29) {
LABEL_120:
  }
    free(v29);
}

        *(_DWORD *)buf = 136446466;
        unsigned int v117 = "nw_protocol_http_connect_connected";
        id v118 = 2082;
        unsigned int v119 = (char *)v55;
        unsigned int v57 = "%{public}s protocol %{public}s has invalid connected callback";
LABEL_162:
        _os_log_impl(&dword_181A5C000, v52, v53, v57, buf, 0x16u);
        goto LABEL_163;
      }

      if ((_BYTE)v112)
      {
        char v61 = (char *)__nw_create_backtrace_string();
        os_log_type_t v52 = (os_log_s *)__nwlog_obj();
        os_log_type_t v53 = uu;
        unsigned int v62 = os_log_type_enabled(v52, (os_log_type_t)uu);
        if (v61)
        {
          if (v62)
          {
            os_log_type_t v63 = a1->default_input_handler;
            BOOL v64 = "invalid";
            if (v63)
            {
              uint64_t v65 = v63->identifier;
              if (v65) {
                BOOL v64 = (const char *)v65;
              }
            }

            *(_DWORD *)buf = 136446722;
            unsigned int v117 = "nw_protocol_http_connect_connected";
            id v118 = 2082;
            unsigned int v119 = (char *)v64;
            unsigned int v120 = 2082;
            unsigned int v121 = v61;
            _os_log_impl( &dword_181A5C000,  v52,  v53,  "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v61);
          goto LABEL_163;
        }

        if (!v62) {
          goto LABEL_163;
        }
        char v89 = a1->default_input_handler;
        v90 = "invalid";
        if (v89)
        {
          v91 = v89->identifier;
          if (v91) {
            v90 = (const char *)v91;
          }
        }

      os_log_type_t v76 = v242;
      __int16 v250 = (NWConcrete_nw_parameters *)-[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v76,  0,  0);

      unsigned int v77 = v76;
      __int16 v246 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v77,  0,  0);
      v241 = v77;

      if (v254) {
        unsigned int v78 = (OS_nw_interface *)v254[12];
      }
      else {
        unsigned int v78 = 0LL;
      }
      __int16 v79 = self->primary_interface;
      self->primary_interface = v78;

      int64_t v80 = v254;
      fallback_interface_index = nw_path_get_fallback_interface_index((uint64_t)v254);
      if (fallback_interface_index)
      {
        uint64_t v82 = fallback_interface_index;
        if (nw_context_copy_implicit_context::onceToken != -1) {
          dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
        }
        __int16 v83 = (id)nw_context_copy_implicit_context::implicit_context;
        int v84 = (OS_nw_interface *)nw_path_copy_interface_with_generation(v83, v82, 0);

        __int16 v85 = self->fallback_interface;
        self->fallback_interface = v84;

        v86 = self->fallback_interface;
        if (v86)
        {
          uint64_t v87 = v86;
          BOOL v88 = *((_DWORD *)v87 + 24);

          LOBYTE(v86) = 8 * (v88 == 2);
        }

        char v89 = *((_BYTE *)self + 109) & 0xF7 | v86;
        *((_BYTE *)self + 109) = v89;
        int64_t v80 = v254;
        v90 = (nw_parameters *)v246;
        if ((v89 & 8) == 0) {
          goto LABEL_106;
        }
      }

      else
      {
        v90 = (nw_parameters *)v246;
        if ((*((_BYTE *)self + 109) & 8) == 0) {
          goto LABEL_106;
        }
      }

      if ((*((_BYTE *)self + 108) & 0x18) == 0)
      {
        nw_parameters_get_e_proc_uuid(v241, buf);
        nw_parameters_get_pid(v241);
        nw_parameters_get_effective_bundle_id(v241);
        self->fallback_disposition = _symptoms_daemon_fallback_initial_disposition();
        v90 = (nw_parameters *)v246;
LABEL_107:
        if ((nw_path_update_parameters_for_fallback(v80, v90) & 1) == 0)
        {
          nw_parameters_set_required_interface_type(v90, nw_interface_type_cellular);
          nw_parameters_set_only_primary_requires_type(v90, 1);
          *((_BYTE *)self + 108) |= 0x22u;
        }

        nw_parameters_set_fallback_applied(v250, 1);
        nw_parameters_set_fallback_applied(v90, 1);
        nw_parameters_set_is_fallback(v90, 1);
        if ((*((_BYTE *)self + 108) & 0x10) != 0)
        {
          v91 = 4;
        }

        else if ((*((_BYTE *)self + 108) & 4) != 0)
        {
          v91 = 1;
        }

        else if ((*((_BYTE *)self + 108) & 2) != 0)
        {
          v91 = 2;
        }

        else
        {
          v91 = 3;
        }

        nw_parameters_set_fallback_mode(v90, v91);
        if (nw_path_get_client_id(v80, &v257))
        {
          nw_parameters_set_parent_id_inner(v250, (const unsigned __int8 *)&v257, 0);
          nw_parameters_set_parent_id_inner((NWConcrete_nw_parameters *)v90, (const unsigned __int8 *)&v257, 0);
        }

        if ((*((_BYTE *)self + 108) & 8) == 0)
        {
          if ((*((_BYTE *)self + 108) & 0x10) != 0)
          {
            inner = (NWConcrete_nw_endpoint_handler *)nw_endpoint_handler_create_inner( v244,  v90,  nw_endpoint_fallback_receive_report,  v252,  v252,  0,  0);
            v90 = (nw_parameters *)v250;
          }

          else
          {
            inner = (NWConcrete_nw_endpoint_handler *)nw_endpoint_handler_create_inner( v244,  v250,  nw_endpoint_fallback_receive_report,  v252,  v252,  0,  0);
          }

          int v106 = self->primary_child;
          self->primary_child = inner;

          int v107 = (NWConcrete_nw_endpoint_handler *)nw_endpoint_handler_create_inner( v244,  v90,  nw_endpoint_fallback_receive_report,  v252,  v252,  0,  0);
          id v108 = self->fallback_child;
          self->fallback_child = v107;

          v109 = v252;
          id v111 = nw_endpoint_handler_copy_fallback(v109);
          BOOL v112 = *((void *)v111 + 9);
          v235 = (int64_t *)v111;
          if (v112)
          {
            nw_queue_cancel_source(v112, v110);
            *((void *)v111 + 9) = 0LL;
          }

          if ((*((_BYTE *)v111 + 108) & 4) != 0) {
            goto LABEL_204;
          }
          locka = v109;
          v233 = v109;
          uint64_t v113 = nw_endpoint_handler_copy_fallback(locka);
          v234 = v113;
          if ((*((_BYTE *)v113 + 108) & 0x10) != 0)
          {
            int v114 = &nw_fallback_delay_max_limit_ms;
            int v115 = &nw_setting_tcpconn_fallback_delay_cap_ms;
          }

          else
          {
            if ((*((_BYTE *)v113 + 108) & 2) != 0)
            {
              if ((*((_BYTE *)v113 + 108) & 0x20) != 0)
              {
                int64_t int64_with_default = networkd_settings_get_int64_with_default( (const char *)nw_setting_tcpconn_weak_fallback_delay,  200LL);
                os_log_type_t v169 = networkd_settings_get_int64_with_default(nw_setting_tcpconn_fallback_delay_cap_ms, 500LL);
                v116 = v169;
              }

              else
              {
                v116 = networkd_settings_get_int64_with_default( (const char *)nw_setting_tcpconn_weak_fallback_delay,  0LL);
                if ((unint64_t)(v116 - 0x8637BD05AF6LL) < 0xFFFFF79C842FA50BLL)
                {
                  nw_endpoint_t v155 = networkd_settings_get_int64_with_default( (const char *)nw_setting_tcpconn_fallback_wifi_advantage_per_rtt_ms,  175LL);
                  if (v155 <= 0) {
                    __int16 v156 = 175LL;
                  }
                  else {
                    __int16 v156 = v155;
                  }
                  v157 = 500LL;
                  __int16 v158 = networkd_settings_get_int64_with_default(nw_setting_tcpconn_fallback_delay_cap_ms, 500LL);
                  *(_OWORD *)&v277[16] = 0u;
                  v278 = 0u;
                  *(_OWORD *)v277 = 0uLL;
                  memset(buf, 0, sizeof(buf));
                  else {
                    id v159 = 0LL;
                  }
                  v232 = v159;
                  if (nw_endpoint_handler_fillout_route_stats(*((void **)v234 + 5), (uint64_t)buf)
                    && (v172 = DWORD2(v278) + 2LL * HIDWORD(v278), v172 > 0x1F))
                  {
                    BOOL v181 = v172 >> 5;
                  }

                  else if ((nw_endpoint_handler_get_logging_disabled(locka) & 1) != 0)
                  {
                    BOOL v181 = 200LL;
                  }

                  else
                  {
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                    }
                    os_log_type_t v173 = (os_log_s *)(id)gconnectionLogObj;
                    if (os_log_type_enabled(v173, OS_LOG_TYPE_ERROR))
                    {
                      v174 = nw_endpoint_handler_get_id_string(locka);
                      v175 = nw_endpoint_handler_dry_run_string(locka);
                      os_log_type_t v176 = v174;
                      id v230 = nw_endpoint_handler_copy_endpoint(locka);
                      BOOL v177 = nw_endpoint_get_logging_description(v230);
                      v178 = nw_endpoint_handler_state_string(locka);
                      v179 = nw_endpoint_handler_mode_string(locka);
                      os_log_type_t v180 = nw_endpoint_handler_copy_current_path(locka);
                      *(_DWORD *)os_log_type_t type = 136448002;
                      v259 = "nw_endpoint_fallback_get_timeout_nanos";
                      v260 = 2082;
                      v261 = (void *)v176;
                      v262 = 2082;
                      v263 = v175;
                      v264 = 2082;
                      v265 = v177;
                      v266 = 2082;
                      v267 = v178;
                      v268 = 2082;
                      v269 = v179;
                      v270 = 2114;
                      v271 = v180;
                      v272 = 2048;
                      v273 = 200LL;
                      _os_log_impl( &dword_181A5C000,  v173,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No RTT informat ion for fallback interface, will use a default value %llums",  (uint8_t *)type,  0x52u);

                      v109 = v233;
                    }

                    BOOL v181 = 200LL;
                    id v159 = v232;
                  }

                  v182 = v159 - v181;
                  if (v159 - v181 <= v156) {
                    v182 = v156;
                  }
                  if (v159 <= v181) {
                    v182 = v156;
                  }
                  v183 = 2 * v182;
                  if (2 * v182 >= v157) {
                    v183 = v157;
                  }
                  if (v182 >= 0x7FFFFFFFFFFFFFFFLL) {
                    v116 = v157;
                  }
                  else {
                    v116 = v183;
                  }
                  if ((nw_endpoint_handler_get_logging_disabled(locka) & 1) == 0)
                  {
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                    }
                    v184 = (os_log_s *)(id)gconnectionLogObj;
                    if (os_log_type_enabled(v184, OS_LOG_TYPE_DEBUG))
                    {
                      v231 = v116;
                      os_log_type_t v185 = nw_endpoint_handler_get_id_string(locka);
                      v186 = nw_endpoint_handler_dry_run_string(locka);
                      os_log_type_t v187 = nw_endpoint_handler_copy_endpoint(locka);
                      v188 = v186;
                      v189 = nw_endpoint_get_logging_description(v187);
                      v190 = nw_endpoint_handler_state_string(locka);
                      id v191 = nw_endpoint_handler_mode_string(locka);
                      v192 = nw_endpoint_handler_copy_current_path(locka);
                      *(_DWORD *)os_log_type_t type = 136448258;
                      v259 = "nw_endpoint_fallback_get_timeout_nanos";
                      v260 = 2082;
                      v261 = (void *)v185;
                      v262 = 2082;
                      v263 = v188;
                      v264 = 2082;
                      v265 = v189;
                      v266 = 2082;
                      v267 = v190;
                      v268 = 2082;
                      v269 = v191;
                      v270 = 2114;
                      v271 = v192;
                      v272 = 2048;
                      v273 = v232;
                      v274 = 2048;
                      v275 = v181;
                      _os_log_impl( &dword_181A5C000,  v184,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Primary RTT: %l lums, fallback RTT: %llums",  (uint8_t *)type,  0x5Cu);

                      v109 = v233;
                      v116 = v231;
                    }
                  }
                }
              }

    free(backtrace_string);
    goto LABEL_116;
  }

  if (gLogDatapath)
  {
    uint64_t v31 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      BOOL v64 = "nw_protocol_http2_transport_connect";
      uint64_t v65 = 2082;
      BOOL v66 = handle + 205;
      _os_log_impl(&dword_181A5C000, v31, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }

  if ((handle[204] & 4) != 0)
  {
    if (gLogDatapath)
    {
      os_log_type_t v46 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        BOOL v64 = "nw_protocol_http2_transport_connect";
        uint64_t v65 = 2082;
        BOOL v66 = handle + 205;
        _os_log_impl( &dword_181A5C000,  v46,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s tunnel already closed, ignoring connect with success",  buf,  0x16u);
      }
    }

    return 1LL;
  }

  output_handler_context = a2->output_handler_context;
  if ((handle[204] & 2) == 0)
  {
    if (!output_handler_context) {
      goto LABEL_10;
    }
    BOOL v6 = output_handler_context[4];
    if (v6)
    {
      *(_BYTE *)(v6 + 36) |= 2u;
      if (gLogDatapath)
      {
        os_log_type_t v56 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
        {
          unsigned int v57 = *(_DWORD *)(v6 + 32);
          *(_DWORD *)buf = 136446978;
          BOOL v64 = "nw_protocol_http2_transport_connect";
          uint64_t v65 = 2082;
          BOOL v66 = handle + 205;
          unsigned int v67 = 1024;
          *(_DWORD *)os_log_type_t v68 = v57;
          *(_WORD *)&v68[4] = 2048;
          *(void *)&v68[6] = v6;
          _os_log_impl( &dword_181A5C000,  v56,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s marked stream id %d (%p) as waiting for connect",  buf,  0x26u);
        }
      }

    xpc_release(v24);
    return 0LL;
  }

  if (gLogDatapath)
  {
    char v100 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      int v114 = "nw_protocol_http2_transport_add_input_handler";
      int v115 = 2082;
      v116 = (uint64_t)(handle + 205);
      unsigned int v117 = 1024;
      *(_DWORD *)id v118 = v26;
      _os_log_impl( &dword_181A5C000,  v100,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s found incoming stream id: %d",  buf,  0x1Cu);
    }
  }

  xpc_release(v24);
LABEL_32:
  if (gLogDatapath)
  {
    BOOL v98 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446978;
      int v114 = "nw_http2_transport_add_to_protocol_table";
      int v115 = 2082;
      v116 = (uint64_t)(handle + 205);
      unsigned int v117 = 2048;
      *(void *)id v118 = a2;
      *(_WORD *)&v118[8] = 1024;
      *(_DWORD *)&v118[10] = -999;
      _os_log_impl( &dword_181A5C000,  v98,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s called for protocol %p, stream %d",  buf,  0x26u);
    }
  }

  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  uint64_t internal = *((void *)handle + 14);
  if (!internal)
  {
    uint64_t internal = nw_hash_table_create_internal( 0x11u,  8,  (const void *(*)(const void *, unsigned int *))nw_protocol_get_key,  (unsigned int (*)(const void *, unsigned int))nw_protocol_key_hash,  (BOOL (*)(const void *, const void *, unsigned int))nw_protocol_matches_key,  0LL);
    if (internal)
    {
      *(_DWORD *)(internal + 48) &= ~2u;
      *((void *)handle + 14) = internal;
      goto LABEL_36;
    }

    *((void *)handle + 14) = 0LL;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    int v114 = "nw_http2_transport_add_to_protocol_table";
    os_log_type_t v55 = (const char *)_os_log_send_and_compose_impl();
    id v111 = OS_LOG_TYPE_ERROR;
    BOOL v110 = 0;
    if (__nwlog_fault(v55, &v111, &v110))
    {
      if (v111 == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v56 = (os_log_s *)gLogObj;
        unsigned int v57 = v111;
        if (!os_log_type_enabled((os_log_t)gLogObj, v111)) {
          goto LABEL_132;
        }
        *(_DWORD *)buf = 136446210;
        int v114 = "nw_http2_transport_add_to_protocol_table";
        BOOL v58 = "%{public}s nw_protocol_hash_table_create failed";
LABEL_131:
        _os_log_impl(&dword_181A5C000, v56, v57, v58, buf, 0xCu);
        goto LABEL_132;
      }

      if (!v110)
      {
        os_log_type_t v56 = (os_log_s *)__nwlog_obj();
        unsigned int v57 = v111;
        if (!os_log_type_enabled(v56, v111)) {
          goto LABEL_132;
        }
        *(_DWORD *)buf = 136446210;
        int v114 = "nw_http2_transport_add_to_protocol_table";
        BOOL v58 = "%{public}s nw_protocol_hash_table_create failed, backtrace limit exceeded";
        goto LABEL_131;
      }

      BOOL v69 = (char *)__nw_create_backtrace_string();
      os_log_type_t v56 = (os_log_s *)__nwlog_obj();
      unsigned int v57 = v111;
      os_log_type_t v70 = os_log_type_enabled(v56, v111);
      if (!v69)
      {
        if (!v70) {
          goto LABEL_132;
        }
        *(_DWORD *)buf = 136446210;
        int v114 = "nw_http2_transport_add_to_protocol_table";
        BOOL v58 = "%{public}s nw_protocol_hash_table_create failed, no backtrace";
        goto LABEL_131;
      }

      if (v70)
      {
        *(_DWORD *)buf = 136446466;
        int v114 = "nw_http2_transport_add_to_protocol_table";
        int v115 = 2082;
        v116 = (uint64_t)v69;
        _os_log_impl( &dword_181A5C000,  v56,  v57,  "%{public}s nw_protocol_hash_table_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v69);
    }

        if (v59) {
          free(v59);
        }
        os_log_type_t v32 = 4294966394LL;
        goto LABEL_97;
      }
    }
  }

  __nwlog_obj();
  uint64_t v72 = a6 + 205;
  buf = 136446466;
  unsigned int v137 = "send_data_callback";
  __int16 v138 = 2082;
  unsigned int v139 = a6 + 205;
  uint64_t v65 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(v130) = 16;
  LOBYTE(v126) = 0;
  if (v130 == 17)
  {
    uint64_t v73 = (os_log_s *)__nwlog_obj();
    char v74 = v130;
    if (os_log_type_enabled(v73, (os_log_type_t)v130))
    {
      buf = 136446466;
      unsigned int v137 = "send_data_callback";
      __int16 v138 = 2082;
      unsigned int v139 = v72;
      os_log_type_t v68 = "%{public}s %{public}s output handler has no get_output_frames callback";
LABEL_177:
      __int16 v85 = v73;
      v86 = v74;
      uint64_t v87 = 22;
      goto LABEL_178;
    }

    goto LABEL_179;
  }

  if ((_BYTE)v126)
  {
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v73 = (os_log_s *)__nwlog_obj();
    char v74 = v130;
    int v84 = os_log_type_enabled(v73, (os_log_type_t)v130);
    if (!backtrace_string)
    {
      if (v84)
      {
        buf = 136446466;
        unsigned int v137 = "send_data_callback";
        __int16 v138 = 2082;
        unsigned int v139 = v72;
        os_log_type_t v68 = "%{public}s %{public}s output handler has no get_output_frames callback, no backtrace";
        goto LABEL_177;
      }

      goto LABEL_179;
    }

    if (v84)
    {
      buf = 136446722;
      unsigned int v137 = "send_data_callback";
      __int16 v138 = 2082;
      unsigned int v139 = v72;
      uint64_t v140 = 2082;
      *(void *)v141 = backtrace_string;
      unsigned int v77 = "%{public}s %{public}s output handler has no get_output_frames callback, dumping backtrace:%{public}s";
      unsigned int v78 = v73;
      __int16 v79 = v74;
      int64_t v80 = 32;
      goto LABEL_141;
    }

    goto LABEL_142;
  }

  uint64_t v73 = (os_log_s *)__nwlog_obj();
  char v74 = v130;
  if (os_log_type_enabled(v73, (os_log_type_t)v130))
  {
    buf = 136446466;
    unsigned int v137 = "send_data_callback";
    __int16 v138 = 2082;
    unsigned int v139 = v72;
    os_log_type_t v68 = "%{public}s %{public}s output handler has no get_output_frames callback, backtrace limit exceeded";
    goto LABEL_177;
  }

    if (v20) {
      free(v20);
    }
    os_log_type_t v55 = *(void *)(a2 + 16);
    os_log_type_t v56 = *(void **)(a2 + 24);
    if (v55)
    {
      *(void *)(v55 + 24) = v56;
      os_log_type_t v56 = *(void **)(a2 + 24);
    }

    else
    {
      *(void *)(*(void *)(a1 + 40) + 168LL) = v56;
    }

    nw_interface *v56 = v55;
    *(void *)(a2 + 16) = 0LL;
    *(void *)(a2 + 24) = 0LL;
    unsigned int v57 = *(void *)(a1 + 40);
    BOOL v58 = *(_DWORD *)(v57 + 192);
    if (v58) {
      goto LABEL_135;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v101 = "http2_transport_create_input_frame_block_invoke";
    uint64_t v59 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v98 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v60 = (os_log_s *)gLogObj;
      char v61 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_158;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v101 = "http2_transport_create_input_frame_block_invoke";
      unsigned int v62 = "%{public}s http2_transport count attempted to decrement below zero";
      goto LABEL_157;
    }

    if (!v98)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v60 = (os_log_s *)gLogObj;
      char v61 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_158;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v101 = "http2_transport_create_input_frame_block_invoke";
      unsigned int v62 = "%{public}s http2_transport count attempted to decrement below zero, backtrace limit exceeded";
      goto LABEL_157;
    }

    os_log_type_t v63 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v60 = (os_log_s *)gLogObj;
    char v61 = type;
    BOOL v64 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v63)
    {
      if (!v64) {
        goto LABEL_158;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v101 = "http2_transport_create_input_frame_block_invoke";
      unsigned int v62 = "%{public}s http2_transport count attempted to decrement below zero, no backtrace";
      goto LABEL_157;
    }

    if (v64)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v101 = "http2_transport_create_input_frame_block_invoke";
      os_log_type_t v102 = 2082;
      unsigned int v103 = v63;
      _os_log_impl( &dword_181A5C000,  v60,  v61,  "%{public}s http2_transport count attempted to decrement below zero, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v63);
LABEL_158:
    if (!v59) {
      goto LABEL_160;
    }
LABEL_159:
    free(v59);
    goto LABEL_160;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v10 = *(void *)(a1 + 40);
  if (v10) {
    uint64_t v11 = (const char *)(v10 + 205);
  }
  else {
    uint64_t v11 = "";
  }
  *(_DWORD *)buf = 136446466;
  os_log_type_t v101 = "http2_transport_create_input_frame_block_invoke";
  os_log_type_t v102 = 2082;
  unsigned int v103 = (void *)v11;
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v98 = 0;
  if (__nwlog_fault(v12, &type, &v98))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v13 = (os_log_s *)gLogObj;
      os_log_type_t v14 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        uint64_t v15 = *(void *)(a1 + 40);
        if (v15) {
          id v16 = (const char *)(v15 + 205);
        }
        else {
          id v16 = "";
        }
        *(_DWORD *)buf = 136446466;
        os_log_type_t v101 = "http2_transport_create_input_frame_block_invoke";
        os_log_type_t v102 = 2082;
        unsigned int v103 = (void *)v16;
        uint64_t v17 = "%{public}s %{public}s foreach gave null candidate_frame";
LABEL_84:
        _os_log_impl(&dword_181A5C000, v13, v14, v17, buf, 0x16u);
      }
    }

    else if (v98)
    {
      os_log_type_t v26 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v13 = (os_log_s *)gLogObj;
      os_log_type_t v14 = type;
      BOOL v27 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v26)
      {
        if (v27)
        {
          char v28 = *(void *)(a1 + 40);
          if (v28) {
            os_log_type_t v29 = (const char *)(v28 + 205);
          }
          else {
            os_log_type_t v29 = "";
          }
          *(_DWORD *)buf = 136446722;
          os_log_type_t v101 = "http2_transport_create_input_frame_block_invoke";
          os_log_type_t v102 = 2082;
          unsigned int v103 = (void *)v29;
          os_log_type_t v104 = 2082;
          *(void *)int v105 = v26;
          _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s %{public}s foreach gave null candidate_frame, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v26);
        goto LABEL_85;
      }

      if (v27)
      {
        BOOL v50 = *(void *)(a1 + 40);
        if (v50) {
          os_log_type_t v51 = (const char *)(v50 + 205);
        }
        else {
          os_log_type_t v51 = "";
        }
        *(_DWORD *)buf = 136446466;
        os_log_type_t v101 = "http2_transport_create_input_frame_block_invoke";
        os_log_type_t v102 = 2082;
        unsigned int v103 = (void *)v51;
        uint64_t v17 = "%{public}s %{public}s foreach gave null candidate_frame, no backtrace";
        goto LABEL_84;
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v13 = (os_log_s *)gLogObj;
      os_log_type_t v14 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        os_log_type_t v46 = *(void *)(a1 + 40);
        if (v46) {
          os_log_type_t v47 = (const char *)(v46 + 205);
        }
        else {
          os_log_type_t v47 = "";
        }
        *(_DWORD *)buf = 136446466;
        os_log_type_t v101 = "http2_transport_create_input_frame_block_invoke";
        os_log_type_t v102 = 2082;
        unsigned int v103 = (void *)v47;
        uint64_t v17 = "%{public}s %{public}s foreach gave null candidate_frame, backtrace limit exceeded";
        goto LABEL_84;
      }
    }
  }

    if (v20) {
      free(v20);
    }
    os_log_type_t v55 = *(void *)(a2 + 16);
    os_log_type_t v56 = *(void **)(a2 + 24);
    if (v55)
    {
      *(void *)(v55 + 24) = v56;
      os_log_type_t v56 = *(void **)(a2 + 24);
    }

    else
    {
      *(void *)(*(void *)(a1 + 40) + 184LL) = v56;
    }

    nw_interface *v56 = v55;
    *(void *)(a2 + 16) = 0LL;
    *(void *)(a2 + 24) = 0LL;
    unsigned int v57 = *(void *)(a1 + 40);
    BOOL v58 = *(_DWORD *)(v57 + 196);
    if (v58) {
      goto LABEL_135;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v101 = "http2_transport_create_output_frame_block_invoke";
    uint64_t v59 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v98 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v60 = (os_log_s *)gLogObj;
      char v61 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_158;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v101 = "http2_transport_create_output_frame_block_invoke";
      unsigned int v62 = "%{public}s http2_transport count attempted to decrement below zero";
      goto LABEL_157;
    }

    if (!v98)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v60 = (os_log_s *)gLogObj;
      char v61 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_158;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v101 = "http2_transport_create_output_frame_block_invoke";
      unsigned int v62 = "%{public}s http2_transport count attempted to decrement below zero, backtrace limit exceeded";
      goto LABEL_157;
    }

    os_log_type_t v63 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v60 = (os_log_s *)gLogObj;
    char v61 = type;
    BOOL v64 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v63)
    {
      if (!v64) {
        goto LABEL_158;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v101 = "http2_transport_create_output_frame_block_invoke";
      unsigned int v62 = "%{public}s http2_transport count attempted to decrement below zero, no backtrace";
      goto LABEL_157;
    }

    if (v64)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v101 = "http2_transport_create_output_frame_block_invoke";
      os_log_type_t v102 = 2082;
      unsigned int v103 = v63;
      _os_log_impl( &dword_181A5C000,  v60,  v61,  "%{public}s http2_transport count attempted to decrement below zero, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v63);
LABEL_158:
    if (!v59) {
      goto LABEL_160;
    }
LABEL_159:
    free(v59);
    goto LABEL_160;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v10 = *(void *)(a1 + 40);
  if (v10) {
    uint64_t v11 = (const char *)(v10 + 205);
  }
  else {
    uint64_t v11 = "";
  }
  *(_DWORD *)buf = 136446466;
  os_log_type_t v101 = "http2_transport_create_output_frame_block_invoke";
  os_log_type_t v102 = 2082;
  unsigned int v103 = (void *)v11;
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v98 = 0;
  if (__nwlog_fault(v12, &type, &v98))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v13 = (os_log_s *)gLogObj;
      os_log_type_t v14 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        uint64_t v15 = *(void *)(a1 + 40);
        if (v15) {
          id v16 = (const char *)(v15 + 205);
        }
        else {
          id v16 = "";
        }
        *(_DWORD *)buf = 136446466;
        os_log_type_t v101 = "http2_transport_create_output_frame_block_invoke";
        os_log_type_t v102 = 2082;
        unsigned int v103 = (void *)v16;
        uint64_t v17 = "%{public}s %{public}s foreach gave null candidate_frame";
LABEL_84:
        _os_log_impl(&dword_181A5C000, v13, v14, v17, buf, 0x16u);
      }
    }

    else if (v98)
    {
      os_log_type_t v26 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v13 = (os_log_s *)gLogObj;
      os_log_type_t v14 = type;
      BOOL v27 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v26)
      {
        if (v27)
        {
          char v28 = *(void *)(a1 + 40);
          if (v28) {
            os_log_type_t v29 = (const char *)(v28 + 205);
          }
          else {
            os_log_type_t v29 = "";
          }
          *(_DWORD *)buf = 136446722;
          os_log_type_t v101 = "http2_transport_create_output_frame_block_invoke";
          os_log_type_t v102 = 2082;
          unsigned int v103 = (void *)v29;
          os_log_type_t v104 = 2082;
          *(void *)int v105 = v26;
          _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s %{public}s foreach gave null candidate_frame, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v26);
        goto LABEL_85;
      }

      if (v27)
      {
        BOOL v50 = *(void *)(a1 + 40);
        if (v50) {
          os_log_type_t v51 = (const char *)(v50 + 205);
        }
        else {
          os_log_type_t v51 = "";
        }
        *(_DWORD *)buf = 136446466;
        os_log_type_t v101 = "http2_transport_create_output_frame_block_invoke";
        os_log_type_t v102 = 2082;
        unsigned int v103 = (void *)v51;
        uint64_t v17 = "%{public}s %{public}s foreach gave null candidate_frame, no backtrace";
        goto LABEL_84;
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v13 = (os_log_s *)gLogObj;
      os_log_type_t v14 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        os_log_type_t v46 = *(void *)(a1 + 40);
        if (v46) {
          os_log_type_t v47 = (const char *)(v46 + 205);
        }
        else {
          os_log_type_t v47 = "";
        }
        *(_DWORD *)buf = 136446466;
        os_log_type_t v101 = "http2_transport_create_output_frame_block_invoke";
        os_log_type_t v102 = 2082;
        unsigned int v103 = (void *)v47;
        uint64_t v17 = "%{public}s %{public}s foreach gave null candidate_frame, backtrace limit exceeded";
        goto LABEL_84;
      }
    }
  }

    if (v49) {
      free(v49);
    }
    *(_DWORD *)(v940 + 34_Block_object_dispose(va, 8) = 0;
    goto LABEL_97;
  }

  if ((*(_BYTE *)(v10 + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v20 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      BOOL v21 = *(void *)(v10 + 256);
      os_log_type_t v22 = *(_DWORD *)(*(void *)(v10 + 248) + 372LL);
      if (v21) {
        LODWORD(v21) = *(_DWORD *)(v21 + 860);
      }
      os_log_type_t v23 = *(_DWORD *)(v10 + 424);
      *(_DWORD *)buf = 136447490;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_disconnect";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v10 + 74;
      *(_WORD *)&buf[22] = 2080;
      v961 = (uint64_t)" ";
      *(_WORD *)v962 = 1024;
      *(_DWORD *)&v962[2] = v22;
      *(_WORD *)&v962[6] = 1024;
      *(_DWORD *)&v962[8] = v21;
      *(_WORD *)&v962[12] = 1024;
      *(_DWORD *)&v962[14] = v23;
      _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:c%u:s%u> disconnecting the initial stream without connecting",  buf,  0x32u);
    }
  }

  nw_protocol_disconnect(*(void **)(v10 + 32), v10);
  os_log_type_t v25 = v940;
LABEL_220:
  int v106 = *(void *)(v25 + 248);
  if (v106)
  {
    int v107 = &qword_18C45F000;
    v939 = *(void *)(v25 + 248);
    if ((*(_BYTE *)(v106 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v615 = (os_log_s *)__nwlog_obj();
        v616 = os_log_type_enabled(v615, OS_LOG_TYPE_DEBUG);
        int v107 = &qword_18C45F000;
        os_log_type_t v25 = v940;
        if (v616)
        {
          v617 = v106 + 74;
          v618 = *(void *)(v106 + 256);
          v619 = *(_DWORD *)(*(void *)(v106 + 248) + 372LL);
          if (v618) {
            LODWORD(v61_Block_object_dispose(va, 8) = *(_DWORD *)(v618 + 860);
          }
          int v106 = v939;
          v620 = *(_DWORD *)(v939 + 424);
          *(_DWORD *)buf = 136448002;
          *(void *)&uint8_t buf[4] = "nw_http1_get_next_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v617;
          *(_WORD *)&buf[22] = 2080;
          v961 = (uint64_t)" ";
          *(_WORD *)v962 = 1024;
          *(_DWORD *)&v962[2] = v619;
          *(_WORD *)&v962[6] = 1024;
          *(_DWORD *)&v962[8] = v618;
          *(_WORD *)&v962[12] = 1024;
          *(_DWORD *)&v962[14] = v620;
          *(_WORD *)&v962[18] = 1024;
          *(_DWORD *)&v962[20] = v620;
          *(_WORD *)&v962[24] = 2048;
          *(void *)&v962[26] = v939;
          _os_log_impl( &dword_181A5C000,  v615,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> found stream %u (%p)",  buf,  0x42u);
          os_log_type_t v25 = v940;
          int v107 = &qword_18C45F000;
        }
      }
    }

    id v108 = (_OWORD *)(v106 + 64);
    v109 = *(void *)(v25 + 208);
    if (v109)
    {
      BOOL v110 = 0LL;
      id v111 = v25 + 74;
      do
      {
        BOOL v112 = v109;
        v109 = *(void *)(v109 + 592);
        if ((*(_WORD *)(v112 + 872) & 0x800) == 0)
        {
          if ((*(_BYTE *)(v25 + 158) & 1) != 0 || !*((_BYTE *)v107 + 1537))
          {
            BOOL v110 = v112;
          }

          else
          {
            v934 = v111;
            v936 = v108;
            uint64_t v113 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v113, OS_LOG_TYPE_DEBUG))
            {
              int v114 = *(_DWORD *)(v940 + 372);
              *(_DWORD *)buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_http1_get_next_idle_connection";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v934;
              *(_WORD *)&buf[22] = 2080;
              v961 = (uint64_t)" ";
              *(_WORD *)v962 = 1024;
              *(_DWORD *)&v962[2] = v114;
              *(_WORD *)&v962[6] = 2048;
              *(void *)&v962[8] = v112;
              _os_log_impl( &dword_181A5C000,  v113,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> found idle connection connection %p",  buf,  0x30u);
              id v111 = v934;
              os_log_type_t v25 = v940;
              BOOL v110 = v112;
              id v108 = v936;
              int v107 = &qword_18C45F000;
            }

            else
            {
              BOOL v110 = v112;
              os_log_type_t v25 = v940;
              id v108 = v936;
              int v107 = &qword_18C45F000;
              id v111 = v934;
            }
          }
        }
      }

      while (v109);
      int v106 = v939;
      if (v110)
      {
        v935 = v111;
        if ((*(_BYTE *)(v110 + 158) & 1) == 0)
        {
          if (*((_BYTE *)v107 + 1537))
          {
            v630 = v108;
            v631 = v107;
            v632 = (os_log_s *)__nwlog_obj();
            v633 = os_log_type_enabled(v632, OS_LOG_TYPE_DEBUG);
            int v107 = v631;
            id v108 = v630;
            os_log_type_t v25 = v940;
            if (v633)
            {
              v634 = *(void *)(v110 + 488);
              v635 = *(_DWORD *)(*(void *)(v110 + 480) + 372LL);
              v636 = *(_DWORD *)(v110 + 860);
              if (v634) {
                LODWORD(v634) = *(_DWORD *)(v634 + 424);
              }
              *(_DWORD *)buf = 136447746;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v110 + 74;
              *(_WORD *)&buf[22] = 2080;
              v961 = (uint64_t)" ";
              *(_WORD *)v962 = 1024;
              *(_DWORD *)&v962[2] = v635;
              *(_WORD *)&v962[6] = 1024;
              *(_DWORD *)&v962[8] = v636;
              *(_WORD *)&v962[12] = 1024;
              *(_DWORD *)&v962[14] = v634;
              *(_WORD *)&v962[18] = 2048;
              *(void *)&v962[20] = v110;
              _os_log_impl( &dword_181A5C000,  v632,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> called for connection %p",  buf,  0x3Cu);
              os_log_type_t v25 = v940;
              int v106 = v939;
              id v108 = v630;
              int v107 = v631;
            }
          }
        }

        v937 = v108;
        int v115 = (_WORD *)(v110 + 872);
        if (((*(unsigned __int16 *)(v110 + 872) | (*(unsigned __int8 *)(v110 + 874) << 16)) & 0x80000) == 0)
        {
          v116 = v107;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v110;
          unsigned int v117 = (char *)_os_log_send_and_compose_impl();
          v963[0] = 16;
          LOBYTE(aBlock) = 0;
          if (__nwlog_fault(v117, v963, &aBlock))
          {
            if (v963[0] == 17)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              id v118 = (os_log_s *)gLogObj;
              unsigned int v119 = v963[0];
              if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v963[0]))
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v110;
                unsigned int v120 = "%{public}s connection %p not in idle list, cannot remove";
LABEL_428:
                _os_log_impl(&dword_181A5C000, v118, v119, v120, buf, 0x16u);
              }
            }

            else if ((_BYTE)aBlock)
            {
              BOOL v177 = (char *)__nw_create_backtrace_string();
              id v118 = (os_log_s *)__nwlog_obj();
              unsigned int v119 = v963[0];
              v178 = os_log_type_enabled(v118, (os_log_type_t)v963[0]);
              if (v177)
              {
                if (v178)
                {
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v110;
                  *(_WORD *)&buf[22] = 2082;
                  v961 = (uint64_t)v177;
                  _os_log_impl( &dword_181A5C000,  v118,  v119,  "%{public}s connection %p not in idle list, cannot remove, dumping backtrace:%{public}s",  buf,  0x20u);
                }

                free(v177);
                goto LABEL_429;
              }

              if (v178)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v110;
                unsigned int v120 = "%{public}s connection %p not in idle list, cannot remove, no backtrace";
                goto LABEL_428;
              }
            }

            else
            {
              id v118 = (os_log_s *)__nwlog_obj();
              unsigned int v119 = v963[0];
              if (os_log_type_enabled(v118, (os_log_type_t)v963[0]))
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v110;
                unsigned int v120 = "%{public}s connection %p not in idle list, cannot remove, backtrace limit exceeded";
                goto LABEL_428;
              }
            }
          }

    if (!v21) {
      goto LABEL_96;
    }
    goto LABEL_95;
  }

  int v8 = *((void *)handle + 1);
  if (!v8)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v49 = "nw_http1_get_http1_protocol";
    BOOL v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v46 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_94;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v49 = "nw_http1_get_http1_protocol";
      BOOL v24 = "%{public}s called with null handle->http1_stream";
      goto LABEL_93;
    }

    if (!v46)
    {
      os_log_type_t v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_94;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v49 = "nw_http1_get_http1_protocol";
      BOOL v24 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_93;
    }

    BOOL v27 = (char *)__nw_create_backtrace_string();
    os_log_type_t v22 = (os_log_s *)__nwlog_obj();
    os_log_type_t v23 = type;
    os_log_type_t v35 = os_log_type_enabled(v22, type);
    if (!v27)
    {
      if (!v35) {
        goto LABEL_94;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v49 = "nw_http1_get_http1_protocol";
      BOOL v24 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_93;
    }

    if (v35)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v49 = "nw_http1_get_http1_protocol";
      BOOL v50 = 2082;
      os_log_type_t v51 = v27;
      os_log_type_t v29 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_71;
    }

    goto LABEL_72;
  }

  BOOL v6 = (void *)(v8 + 248);
LABEL_10:
  if (!*v6) {
    goto LABEL_96;
  }
  if (v5 != 2)
  {
    if (v5 != 3)
    {
LABEL_113:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v49 = "nw_protocol_http1_updated_path";
      os_log_type_t v38 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v46 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v39 = (os_log_s *)gLogObj;
        BOOL v40 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_128;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v49 = "nw_protocol_http1_updated_path";
        id v41 = "%{public}s called with null http1_stream";
        goto LABEL_127;
      }

      if (!v46)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v39 = (os_log_s *)gLogObj;
        BOOL v40 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_128;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v49 = "nw_protocol_http1_updated_path";
        id v41 = "%{public}s called with null http1_stream, backtrace limit exceeded";
        goto LABEL_127;
      }

      unsigned int v42 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v39 = (os_log_s *)gLogObj;
      BOOL v40 = type;
      os_log_type_t v45 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v42)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v49 = "nw_protocol_http1_updated_path";
          BOOL v50 = 2082;
          os_log_type_t v51 = v42;
          os_log_type_t v44 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
          goto LABEL_121;
        }

        goto LABEL_122;
      }

      if (!v45) {
        goto LABEL_128;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v49 = "nw_protocol_http1_updated_path";
      id v41 = "%{public}s called with null http1_stream, no backtrace";
      goto LABEL_127;
    }

    uint64_t v9 = *((void *)handle + 2);
    if (v9)
    {
      id v10 = (uint64_t *)(v9 + 488);
      goto LABEL_16;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v49 = "nw_http1_get_stream_for_protocol";
    os_log_type_t v30 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v46 = 0;
    if (__nwlog_fault(v30, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v31 = (os_log_s *)__nwlog_obj();
        os_log_type_t v32 = type;
        if (!os_log_type_enabled(v31, type)) {
          goto LABEL_111;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v49 = "nw_http1_get_stream_for_protocol";
        BOOL v33 = "%{public}s called with null handle->http1_connection";
        goto LABEL_110;
      }

      if (!v46)
      {
        uint64_t v31 = (os_log_s *)__nwlog_obj();
        os_log_type_t v32 = type;
        if (!os_log_type_enabled(v31, type)) {
          goto LABEL_111;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v49 = "nw_http1_get_stream_for_protocol";
        BOOL v33 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_110;
      }

      BOOL v36 = (char *)__nw_create_backtrace_string();
      uint64_t v31 = (os_log_s *)__nwlog_obj();
      os_log_type_t v32 = type;
      os_log_type_t v37 = os_log_type_enabled(v31, type);
      if (v36)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v49 = "nw_http1_get_stream_for_protocol";
          BOOL v50 = 2082;
          os_log_type_t v51 = v36;
          _os_log_impl( &dword_181A5C000,  v31,  v32,  "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v36);
        goto LABEL_111;
      }

      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v49 = "nw_http1_get_stream_for_protocol";
        BOOL v33 = "%{public}s called with null handle->http1_connection, no backtrace";
LABEL_110:
        _os_log_impl(&dword_181A5C000, v31, v32, v33, buf, 0xCu);
      }
    }

      uint64_t v11 = v57;
      if (!v49) {
        goto LABEL_55;
      }
      goto LABEL_88;
    }

    if (!a2)
    {
      __nwlog_obj();
      os_log_type_t v55 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      int v84 = "nw_remote_director_write_one";
      LODWORD(v74) = 12;
      uint64_t v73 = buf;
      os_log_type_t v49 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v79) = 0;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v56 = type[0];
        if (os_log_type_enabled(v50, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          int v84 = "nw_remote_director_write_one";
          os_log_type_t v52 = v50;
          os_log_type_t v53 = v56;
          os_log_type_t v54 = "%{public}s called with null output_handler";
          goto LABEL_85;
        }

        goto LABEL_86;
      }

      if (!(_BYTE)v79)
      {
        __nwlog_obj();
        BOOL v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v68 = type[0];
        if (os_log_type_enabled(v50, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          int v84 = "nw_remote_director_write_one";
          os_log_type_t v52 = v50;
          os_log_type_t v53 = v68;
          os_log_type_t v54 = "%{public}s called with null output_handler, backtrace limit exceeded";
          goto LABEL_85;
        }

        goto LABEL_86;
      }

      unsigned int v57 = v11;
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v59 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v65 = type[0];
      BOOL v66 = os_log_type_enabled(v59, type[0]);
      if (backtrace_string)
      {
        if (!v66) {
          goto LABEL_79;
        }
        *(_DWORD *)buf = 136446466;
        int v84 = "nw_remote_director_write_one";
        __int16 v85 = 2082;
        v86[0] = backtrace_string;
        unsigned int v62 = v59;
        os_log_type_t v63 = v65;
        BOOL v64 = "%{public}s called with null output_handler, dumping backtrace:%{public}s";
LABEL_78:
        _os_log_impl(&dword_181A5C000, v62, v63, v64, buf, 0x16u);
LABEL_79:

        free(backtrace_string);
        uint64_t v11 = v57;
        if (!v49) {
          goto LABEL_55;
        }
        goto LABEL_88;
      }

      if (v66)
      {
        *(_DWORD *)buf = 136446210;
        int v84 = "nw_remote_director_write_one";
        BOOL v69 = v59;
        os_log_type_t v70 = v65;
        os_log_type_t v71 = "%{public}s called with null output_handler, no backtrace";
        goto LABEL_93;
      }

      goto LABEL_94;
    }

    os_log_type_t v14 = v13;
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, os_log_type_t *))(*(void *)(a2 + 24)
                                                                                                  + 88LL))( a2,  a1,  1LL,  v12,  1LL,  type);
    id v16 = *(void **)type;
    if (!*(void *)type || !v15)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v43 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        int v84 = "nw_remote_director_write_one";
        __int16 v85 = 1024;
        LODWORD(v86[0]) = v12;
        WORD2(v86[0]) = 2114;
        *(void *)((char *)v86 + 6) = v11;
        _os_log_impl( &dword_181A5C000,  v43,  OS_LOG_TYPE_DEBUG,  "%{public}s Failed to write %u bytes for %{public}@",  buf,  0x1Cu);
      }

      goto LABEL_55;
    }

    unsigned int v77 = v11;
    unsigned int v78 = v7;
    if (v11)
    {
      uint64_t v17 = v11;
      uint64_t v11 = buf;
      -[uint8_t getUUIDBytes:](v17, "getUUIDBytes:", buf);
      id v16 = *(void **)type;
    }

    __int16 v79 = 0LL;
    int64_t v80 = &v79;
    uint64_t v18 = v16;
    if (v18)
    {
      uint64_t v19 = (uint64_t)v18;
      os_log_type_t v20 = 0;
      if (!v11)
      {
        while (1)
        {
          BOOL v33 = *(void **)(v19 + 32);
          if (!v33 && !*(void *)(v19 + 40)) {
            BOOL v33 = 0LL;
          }
          uint64_t v34 = v33;
          os_log_type_t v35 = *(void *)(v19 + 112);
          if (v35)
          {
            if ((*(_WORD *)(v19 + 204) & 0x100) == 0
              || !g_channel_check_validity
              || g_channel_check_validity(v19, *(void *)(v19 + 88)))
            {
              LODWORD(v35) = *(_DWORD *)(v19 + 52);
              BOOL v36 = *(unsigned int *)(v19 + 56);
              if ((_DWORD)v35) {
                LODWORD(v35) = v35 - (v36 + *(_DWORD *)(v19 + 60));
              }
              os_log_type_t v37 = (void *)(*(void *)(v19 + 112) + v36);
              goto LABEL_47;
            }

            LODWORD(v35) = 0;
          }

          os_log_type_t v37 = 0LL;
LABEL_47:
          else {
            os_log_type_t v38 = v35;
          }
          memcpy(v37, (const void *)(v14 + v20), v38);
          nw_frame_claim(v19, v39, v38, 0);
          nw_frame_collapse(v19);
          nw_frame_unclaim(v19, v40, v38, 0);
          id v41 = *(void *)(v19 + 32);
          unsigned int v42 = *(void **)(v19 + 40);
          if (v41)
          {
            *(void *)(v41 + 40) = v42;
            unsigned int v42 = *(void **)(v19 + 40);
          }

          else
          {
            uint64_t v82 = *(void *)(v19 + 40);
          }

          v20 += v38;
          *unsigned int v42 = v41;
          os_log_type_t v32 = v80;
          *(void *)(v19 + 32) = 0LL;
          *(void *)(v19 + 40) = v32;
          void *v32 = v19;
          int64_t v80 = (uint64_t *)(v19 + 32);

          uint64_t v19 = (uint64_t)v34;
          if (!v34) {
            goto LABEL_57;
          }
        }
      }

      while (2)
      {
        os_log_type_t v22 = *(void **)(v19 + 32);
        if (!v22 && !*(void *)(v19 + 40)) {
          os_log_type_t v22 = 0LL;
        }
        os_log_type_t v23 = v22;
        if ((*(_WORD *)(v19 + 204) & 0x100) != 0 && g_channel_set_flow_handler) {
          g_channel_set_flow_handler(v19, v11);
        }
        BOOL v24 = *(void *)(v19 + 112);
        if (v24)
        {
          if ((*(_WORD *)(v19 + 204) & 0x100) == 0
            || !g_channel_check_validity
            || g_channel_check_validity(v19, *(void *)(v19 + 88)))
          {
            LODWORD(v24) = *(_DWORD *)(v19 + 52);
            os_log_type_t v25 = *(unsigned int *)(v19 + 56);
            if ((_DWORD)v24) {
              LODWORD(v24) = v24 - (v25 + *(_DWORD *)(v19 + 60));
            }
            os_log_type_t v26 = (void *)(*(void *)(v19 + 112) + v25);
LABEL_28:
            else {
              BOOL v27 = v24;
            }
            memcpy(v26, (const void *)(v14 + v20), v27);
            nw_frame_claim(v19, v28, v27, 0);
            nw_frame_collapse(v19);
            nw_frame_unclaim(v19, v29, v27, 0);
            os_log_type_t v30 = *(void *)(v19 + 32);
            uint64_t v31 = *(void **)(v19 + 40);
            if (v30)
            {
              *(void *)(v30 + 40) = v31;
              uint64_t v31 = *(void **)(v19 + 40);
            }

            else
            {
              uint64_t v82 = *(void *)(v19 + 40);
            }

            v20 += v27;
            char *v31 = v30;
            BOOL v21 = v80;
            *(void *)(v19 + 32) = 0LL;
            *(void *)(v19 + 40) = v21;
            *BOOL v21 = v19;
            int64_t v80 = (uint64_t *)(v19 + 32);

            uint64_t v19 = (uint64_t)v23;
            if (!v23) {
              goto LABEL_57;
            }
            continue;
          }

          LODWORD(v24) = 0;
        }

        break;
      }

      os_log_type_t v26 = 0LL;
      goto LABEL_28;
    }

    os_log_type_t v20 = 0;
LABEL_57:
    a2 = v76;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)(v76 + 24) + 96LL))(v76, &v79);
    os_log_type_t v44 = *(void *)type;
    a1 = v75;
    uint64_t v11 = v77;
    id v7 = v78;
    if (*(void *)type)
    {
      do
      {
        os_log_type_t v45 = *(void *)(v44 + 32);
        nw_frame_finalize(v44);
        os_log_type_t v44 = v45;
      }

      while (v45);
    }

      goto LABEL_95;
    }

    if (!v49)
    {
      __nwlog_obj();
      BOOL v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v52 = "nw_storage_fault_in_canvas";
        id v41 = "%{public}s called with null provider, backtrace limit exceeded";
        goto LABEL_93;
      }

      goto LABEL_94;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v40 = type;
    BOOL v48 = os_log_type_enabled(v39, type);
    if (!backtrace_string)
    {
      if (v48)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v52 = "nw_storage_fault_in_canvas";
        id v41 = "%{public}s called with null provider, no backtrace";
        goto LABEL_93;
      }

      goto LABEL_94;
    }

    if (!v48) {
      goto LABEL_80;
    }
    *(_DWORD *)buf = 136446466;
    os_log_type_t v52 = "nw_storage_fault_in_canvas";
    os_log_type_t v53 = 2082;
    os_log_type_t v54 = backtrace_string;
    os_log_type_t v46 = "%{public}s called with null provider, dumping backtrace:%{public}s";
    goto LABEL_79;
  }

    if (!v27) {
      return 0LL;
    }
    goto LABEL_95;
  }

  id v10 = a3 + a2;
  if (a3 + a2 > dispatch_data_get_size(a1))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    size = dispatch_data_get_size(a1);
    LODWORD(buf[0]) = 136446978;
    *(void *)((char *)buf + 4) = "nw_dispatch_data_to_iovec_partial";
    WORD2(buf[1]) = 2048;
    *(void *)((char *)&buf[1] + 6) = a2;
    HIWORD(buf[2]) = 2048;
    os_log_type_t v56 = a3;
    unsigned int v57 = 2048;
    BOOL v58 = size;
    os_log_type_t v12 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v46 = 0;
    if (__nwlog_fault(v12, type, &v46))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v13 = (os_log_s *)gLogObj;
        os_log_type_t v14 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          uint64_t v15 = dispatch_data_get_size(a1);
          LODWORD(buf[0]) = 136446978;
          *(void *)((char *)buf + 4) = "nw_dispatch_data_to_iovec_partial";
          WORD2(buf[1]) = 2048;
          *(void *)((char *)&buf[1] + 6) = a2;
          HIWORD(buf[2]) = 2048;
          os_log_type_t v56 = a3;
          unsigned int v57 = 2048;
          BOOL v58 = v15;
          id v16 = "%{public}s Invalid offset and length (%zu + %zu > %zu)";
LABEL_23:
          _os_log_impl(&dword_181A5C000, v13, v14, v16, (uint8_t *)buf, 0x2Au);
        }
      }

      else if (v46)
      {
        os_log_type_t v20 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v13 = (os_log_s *)gLogObj;
        os_log_type_t v14 = type[0];
        BOOL v21 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (v20)
        {
          if (v21)
          {
            os_log_type_t v22 = dispatch_data_get_size(a1);
            LODWORD(buf[0]) = 136447234;
            *(void *)((char *)buf + 4) = "nw_dispatch_data_to_iovec_partial";
            WORD2(buf[1]) = 2048;
            *(void *)((char *)&buf[1] + 6) = a2;
            HIWORD(buf[2]) = 2048;
            os_log_type_t v56 = a3;
            unsigned int v57 = 2048;
            BOOL v58 = v22;
            uint64_t v59 = 2082;
            int v60 = v20;
            _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s Invalid offset and length (%zu + %zu > %zu), dumping backtrace:%{public}s",  (uint8_t *)buf,  0x34u);
          }

          free(v20);
          goto LABEL_24;
        }

        if (v21)
        {
          BOOL v24 = dispatch_data_get_size(a1);
          LODWORD(buf[0]) = 136446978;
          *(void *)((char *)buf + 4) = "nw_dispatch_data_to_iovec_partial";
          WORD2(buf[1]) = 2048;
          *(void *)((char *)&buf[1] + 6) = a2;
          HIWORD(buf[2]) = 2048;
          os_log_type_t v56 = a3;
          unsigned int v57 = 2048;
          BOOL v58 = v24;
          id v16 = "%{public}s Invalid offset and length (%zu + %zu > %zu), no backtrace";
          goto LABEL_23;
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v13 = (os_log_s *)gLogObj;
        os_log_type_t v14 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          os_log_type_t v23 = dispatch_data_get_size(a1);
          LODWORD(buf[0]) = 136446978;
          *(void *)((char *)buf + 4) = "nw_dispatch_data_to_iovec_partial";
          WORD2(buf[1]) = 2048;
          *(void *)((char *)&buf[1] + 6) = a2;
          HIWORD(buf[2]) = 2048;
          os_log_type_t v56 = a3;
          unsigned int v57 = 2048;
          BOOL v58 = v23;
          id v16 = "%{public}s Invalid offset and length (%zu + %zu > %zu), backtrace limit exceeded";
          goto LABEL_23;
        }
      }
    }

    free(backtrace_string);
    goto LABEL_104;
  }

  uint64_t v2 = a2;
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v45 = "nw_http_copy_trailer_fields_from_indeterminate_binary_message";
    BOOL v33 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    unsigned int v42 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v45 = "nw_http_copy_trailer_fields_from_indeterminate_binary_message";
        BOOL v36 = "%{public}s called with null buffer_length";
        goto LABEL_103;
      }

      goto LABEL_104;
    }

    if (!v42)
    {
      uint64_t v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v45 = "nw_http_copy_trailer_fields_from_indeterminate_binary_message";
        BOOL v36 = "%{public}s called with null buffer_length, backtrace limit exceeded";
        goto LABEL_103;
      }

      goto LABEL_104;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v34 = (os_log_s *)__nwlog_obj();
    os_log_type_t v35 = type;
    id v41 = os_log_type_enabled(v34, type);
    if (!backtrace_string)
    {
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v45 = "nw_http_copy_trailer_fields_from_indeterminate_binary_message";
        BOOL v36 = "%{public}s called with null buffer_length, no backtrace";
        goto LABEL_103;
      }

      goto LABEL_104;
    }

    if (v41)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v45 = "nw_http_copy_trailer_fields_from_indeterminate_binary_message";
      os_log_type_t v46 = 2082;
      os_log_type_t v47 = (unint64_t)backtrace_string;
      BOOL v40 = "%{public}s called with null buffer_length, dumping backtrace:%{public}s";
      goto LABEL_93;
    }

    goto LABEL_94;
  }

  id v3 = a1;
  id v4 = 0LL;
  while (1)
  {
    if (!v2)
    {
LABEL_39:
      if (!v4) {
        return 0LL;
      }
      id v4 = v4;
      uint64_t v19 = _nw_http_parsed_fields_copy_trailer_fields(v4);

      goto LABEL_83;
    }

    if (!v3)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v45 = "_http_vle_decode";
      BOOL v27 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      unsigned int v42 = 0;
      if (__nwlog_fault(v27, &type, &v42))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          char v28 = (os_log_s *)__nwlog_obj();
          os_log_type_t v29 = type;
          if (os_log_type_enabled(v28, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v45 = "_http_vle_decode";
            os_log_type_t v30 = "%{public}s called with null *buffer";
LABEL_75:
            _os_log_impl(&dword_181A5C000, v28, v29, v30, buf, 0xCu);
          }
        }

        else if (v42)
        {
          uint64_t v31 = (char *)__nw_create_backtrace_string();
          char v28 = (os_log_s *)__nwlog_obj();
          os_log_type_t v29 = type;
          os_log_type_t v32 = os_log_type_enabled(v28, type);
          if (v31)
          {
            if (v32)
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v45 = "_http_vle_decode";
              os_log_type_t v46 = 2082;
              os_log_type_t v47 = (unint64_t)v31;
              _os_log_impl( &dword_181A5C000,  v28,  v29,  "%{public}s called with null *buffer, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v31);
          }

          else if (v32)
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v45 = "_http_vle_decode";
            os_log_type_t v30 = "%{public}s called with null *buffer, no backtrace";
            goto LABEL_75;
          }
        }

        else
        {
          char v28 = (os_log_s *)__nwlog_obj();
          os_log_type_t v29 = type;
          if (os_log_type_enabled(v28, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v45 = "_http_vle_decode";
            os_log_type_t v30 = "%{public}s called with null *buffer, backtrace limit exceeded";
            goto LABEL_75;
          }
        }
      }

      if (v27) {
        free(v27);
      }
LABEL_78:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v20 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
        goto LABEL_82;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v45 = "nw_http_copy_trailer_fields_from_indeterminate_binary_message";
      BOOL v21 = "%{public}s Failed to decode integer";
LABEL_80:
      BOOL v24 = (os_log_s *)v20;
      os_log_type_t v26 = 12;
      goto LABEL_81;
    }

    uint64_t v5 = *(unsigned __int8 *)v3;
    if (v5 > 0x3F)
    {
      if (v5 >> 6 == 2)
      {
        if (v2 < 4) {
          goto LABEL_78;
        }
        uint64_t v5 = bswap32(*(_DWORD *)v3 & 0xFFFFFF7F);
        BOOL v6 = 4LL;
        id v7 = (unint64_t)(v3 + 4);
        if (!v5) {
          goto LABEL_39;
        }
      }

      else if (v5 >> 6 == 1)
      {
        if (v2 < 2) {
          goto LABEL_78;
        }
        uint64_t v5 = bswap32(*(_WORD *)v3 & 0xFFBF) >> 16;
        BOOL v6 = 2LL;
        id v7 = (unint64_t)(v3 + 2);
        if (!v5) {
          goto LABEL_39;
        }
      }

      else
      {
        if (v2 < 8) {
          goto LABEL_78;
        }
        uint64_t v9 = *(void *)v3;
        int v8 = v3 + 8;
        uint64_t v5 = bswap64(v9 & 0xFFFFFFFFFFFFFF3FLL);
        if (HIDWORD(v5))
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v22 = gLogObj;
          if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
            goto LABEL_82;
          }
          *(_DWORD *)buf = 136446722;
          os_log_type_t v45 = "nw_http_copy_trailer_fields_from_indeterminate_binary_message";
          os_log_type_t v46 = 2048;
          os_log_type_t v47 = v5;
          BOOL v48 = 2048;
          os_log_type_t v49 = 0xFFFFFFFFLL;
          BOOL v21 = "%{public}s _output %llu > _max %llu";
LABEL_45:
          BOOL v24 = (os_log_s *)v22;
LABEL_49:
          os_log_type_t v26 = 32;
LABEL_81:
          _os_log_impl(&dword_181A5C000, v24, OS_LOG_TYPE_ERROR, v21, buf, v26);
          goto LABEL_82;
        }

        BOOL v6 = 8LL;
        id v7 = (unint64_t)v8;
        if (!v5) {
          goto LABEL_39;
        }
      }
    }

    else
    {
      BOOL v6 = 1LL;
      id v7 = (unint64_t)(v3 + 1);
      if (!*v3) {
        goto LABEL_39;
      }
    }

    id v10 = v2 - v6;
    uint64_t v11 = v2 - v6 >= v5;
    os_log_type_t v12 = v2 - v6 - v5;
    if (!v11) {
      break;
    }
    if (!v12) {
      goto LABEL_41;
    }
    uint64_t v13 = (_DWORD *)(v7 + v5);
    os_log_type_t v14 = *(unsigned __int8 *)(v7 + v5);
    if (v14 <= 0x3F)
    {
      uint64_t v15 = 1LL;
LABEL_32:
      id v16 = (char *)v13 + v15;
      goto LABEL_33;
    }

    if (v14 >> 6 == 2)
    {
      if (v12 < 4) {
        goto LABEL_41;
      }
      os_log_type_t v14 = bswap32(*v13 & 0xFFFFFF7F);
      uint64_t v15 = 4LL;
      goto LABEL_32;
    }

    if (v14 >> 6 == 1)
    {
      if (v12 < 2) {
        goto LABEL_41;
      }
      os_log_type_t v14 = bswap32(*(_WORD *)v13 & 0xFFBF) >> 16;
      uint64_t v15 = 2LL;
      goto LABEL_32;
    }

    if (v12 < 8)
    {
LABEL_41:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v20 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
        goto LABEL_82;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v45 = "nw_http_copy_trailer_fields_from_indeterminate_binary_message";
      BOOL v21 = "%{public}s Failed to decode integer";
      goto LABEL_80;
    }

    uint64_t v18 = *(void *)v13;
    id v16 = (const char *)(v13 + 2);
    os_log_type_t v14 = bswap64(v18 & 0xFFFFFFFFFFFFFF3FLL);
    if (HIDWORD(v14))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v25 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
        goto LABEL_82;
      }
      *(_DWORD *)buf = 136446722;
      os_log_type_t v45 = "nw_http_copy_trailer_fields_from_indeterminate_binary_message";
      os_log_type_t v46 = 2048;
      os_log_type_t v47 = v14;
      BOOL v48 = 2048;
      os_log_type_t v49 = 0xFFFFFFFFLL;
      BOOL v21 = "%{public}s _output %llu > _max %llu";
      goto LABEL_48;
    }

    uint64_t v15 = 8LL;
LABEL_33:
    uint64_t v17 = v12 - v15;
    uint64_t v2 = v12 - v15 - v14;
    if (v12 - v15 < v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v25 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
        goto LABEL_82;
      }
      *(_DWORD *)buf = 136446722;
      os_log_type_t v45 = "nw_http_copy_trailer_fields_from_indeterminate_binary_message";
      os_log_type_t v46 = 2048;
      os_log_type_t v47 = v14;
      BOOL v48 = 2048;
      os_log_type_t v49 = v17;
      BOOL v21 = "%{public}s _length %llu > remaining %zu";
LABEL_48:
      BOOL v24 = (os_log_s *)v25;
      goto LABEL_49;
    }

    if (!v4) {
      id v4 = (id)_nw_http_parsed_fields_create();
    }
    id v3 = &v16[v14];
    if (!nw_http_parsed_fields_add(v4, v7, v5, v16, v14, 0)) {
      goto LABEL_82;
    }
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v22 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    os_log_type_t v45 = "nw_http_copy_trailer_fields_from_indeterminate_binary_message";
    os_log_type_t v46 = 2048;
    os_log_type_t v47 = v5;
    BOOL v48 = 2048;
    os_log_type_t v49 = v10;
    BOOL v21 = "%{public}s _length %llu > remaining %zu";
    goto LABEL_45;
  }

      if (!v61)
      {
LABEL_30:

        goto LABEL_60;
      }

        goto LABEL_69;
      }

      if (type == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        BOOL v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v41 = buf[0];
        if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v52 = 136446210;
          *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
          _os_log_impl( &dword_181A5C000,  v21,  v41,  "%{public}s called with null service, backtrace limit exceeded",  v52,  0xCu);
        }

        goto LABEL_94;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v36 = buf[0];
      os_log_type_t v37 = os_log_type_enabled(v21, (os_log_type_t)buf[0]);
      if (!backtrace_string)
      {
        if (v37)
        {
          *(_DWORD *)os_log_type_t v52 = 136446210;
          *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
          _os_log_impl(&dword_181A5C000, v21, v36, "%{public}s called with null service, no backtrace", v52, 0xCu);
        }

        goto LABEL_94;
      }

      if (v37)
      {
        *(_DWORD *)os_log_type_t v52 = 136446466;
        *(void *)&v52[4] = "nw_service_connector_copy_active_outgoing_request";
        *(_WORD *)&v52[12] = 2082;
        *(void *)&v52[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v21,  v36,  "%{public}s called with null service, dumping backtrace:%{public}s",  v52,  0x16u);
      }

      goto LABEL_68;
    }

        goto LABEL_69;
      }

      if (type == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        BOOL v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v41 = buf[0];
        if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v52 = 136446210;
          *(void *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
          _os_log_impl( &dword_181A5C000,  v21,  v41,  "%{public}s called with null service, backtrace limit exceeded",  v52,  0xCu);
        }

        goto LABEL_94;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v36 = buf[0];
      os_log_type_t v37 = os_log_type_enabled(v21, (os_log_type_t)buf[0]);
      if (!backtrace_string)
      {
        if (v37)
        {
          *(_DWORD *)os_log_type_t v52 = 136446210;
          *(void *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
          _os_log_impl(&dword_181A5C000, v21, v36, "%{public}s called with null service, no backtrace", v52, 0xCu);
        }

        goto LABEL_94;
      }

      if (v37)
      {
        *(_DWORD *)os_log_type_t v52 = 136446466;
        *(void *)&v52[4] = "nw_service_connector_copy_active_connection_with_endpoint_and_service";
        *(_WORD *)&v52[12] = 2082;
        *(void *)&v52[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v21,  v36,  "%{public}s called with null service, dumping backtrace:%{public}s",  v52,  0x16u);
      }

      goto LABEL_68;
    }

        goto LABEL_69;
      }

      if (type == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        BOOL v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v41 = buf[0];
        if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v52 = 136446210;
          *(void *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
          _os_log_impl( &dword_181A5C000,  v21,  v41,  "%{public}s called with null service, backtrace limit exceeded",  v52,  0xCu);
        }

        goto LABEL_94;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v36 = buf[0];
      os_log_type_t v37 = os_log_type_enabled(v21, (os_log_type_t)buf[0]);
      if (!backtrace_string)
      {
        if (v37)
        {
          *(_DWORD *)os_log_type_t v52 = 136446210;
          *(void *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
          _os_log_impl(&dword_181A5C000, v21, v36, "%{public}s called with null service, no backtrace", v52, 0xCu);
        }

        goto LABEL_94;
      }

      if (v37)
      {
        *(_DWORD *)os_log_type_t v52 = 136446466;
        *(void *)&v52[4] = "nw_service_connector_copy_pending_incoming_request";
        *(_WORD *)&v52[12] = 2082;
        *(void *)&v52[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v21,  v36,  "%{public}s called with null service, dumping backtrace:%{public}s",  v52,  0x16u);
      }

      goto LABEL_68;
    }

      uint64_t result = 0LL;
      char *v31 = *(void *)&v81[4];
      v31[1] = *(void *)&v81[16];
      v31[2] = v46;
      *((_DWORD *)v31 + 6) = *(_DWORD *)&v81[12];
      *((_DWORD *)v31 + 7) = HIDWORD(v82[1]);
      v31[4] = __size[0];
      *a3 = v31;
      return result;
    }

  if (nw_browse_result_get_interfaces_count((nw_browse_result_t)v8))
  {
    xpc_dictionary_set_uint64(*((xpc_object_t *)v5 + 20), a2, uint64 | 0x10);
    if (nw_parameters_get_logging_disabled(*((void *)v5 + 5)))
    {
      os_log_type_t v56 = 1LL;
      goto LABEL_183;
    }

    if (__nwlog_browser_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
    }
    os_log_type_t v54 = (os_log_s *)(id)gbrowserLogObj;
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
    {
      os_log_type_t v55 = *((_DWORD *)v5 + 48);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_browser_remove_result_locked";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v55;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = a2;
      *(_WORD *)&_BYTE buf[28] = 2112;
      *(void *)&buf[30] = v6;
      _os_log_impl( &dword_181A5C000,  v54,  OS_LOG_TYPE_DEBUG,  "%{public}s [B%u] changes_map: %s interface_removed(%@)",  buf,  0x26u);
    }

    os_log_type_t v56 = 1LL;
    goto LABEL_182;
  }

  os_log_type_t v63 = *((void *)v5 + 18);
  if (v63) {
    BOOL v64 = (uint64_t)(*(void *)(v63 + 24) - *(void *)(v63 + 16)) >> 3;
  }
  else {
    BOOL v64 = 0LL;
  }
  os_log_type_t v70 = nw_array_duplicate_array_without_object(v63, (void *)v8);
  os_log_type_t v71 = (void *)*((void *)v5 + 18);
  *((void *)v5 + 1_Block_object_dispose(va, 8) = v70;

  uint64_t v72 = *((void *)v5 + 18);
  if (v72) {
    uint64_t v73 = (uint64_t)(*(void *)(v72 + 24) - *(void *)(v72 + 16)) >> 3;
  }
  else {
    uint64_t v73 = 0LL;
  }
  char v74 = nw_parameters_get_logging_disabled(*((void *)v5 + 5));
  if (v64 - 1 != v73)
  {
    if (v74) {
      goto LABEL_181;
    }
    if (__nwlog_browser_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
    }
    __int16 v81 = (id)gbrowserLogObj;
    uint64_t v82 = *((_DWORD *)v5 + 48);
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_browser_remove_result_locked";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v82;
    uint64_t v59 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    id v108 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
      }
      int v60 = (os_log_s *)(id)gbrowserLogObj;
      __int16 v83 = type;
      if (os_log_type_enabled(v60, type))
      {
        int v84 = *((_DWORD *)v5 + 48);
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_browser_remove_result_locked";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v84;
        _os_log_impl(&dword_181A5C000, v60, v83, "%{public}s [B%u] new: failed to remove from new_results", buf, 0x12u);
      }

    if (v26) {
      free(v26);
    }
    return 0LL;
  }

  id v3 = txt_bytes;
  id v4 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_txt_record);
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    BOOL v48 = "nw_txt_record_create_with_bytes";
    int v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v45 = 0;
    if (__nwlog_fault(v8, &type, &v45))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v9 = (os_log_s *)(id)gLogObj;
        id v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v48 = "nw_txt_record_create_with_bytes";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s [nw_txt_record init] failed", buf, 0xCu);
        }
      }

      else if (v45)
      {
        uint64_t v13 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v9 = (os_log_s *)(id)gLogObj;
        os_log_type_t v14 = type;
        uint64_t v15 = os_log_type_enabled(v9, type);
        if (v13)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v48 = "nw_txt_record_create_with_bytes";
            os_log_type_t v49 = 2082;
            BOOL v50 = (size_t)v13;
            _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s [nw_txt_record init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v13);
          if (!v8) {
            goto LABEL_42;
          }
          goto LABEL_41;
        }

        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v48 = "nw_txt_record_create_with_bytes";
          _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s [nw_txt_record init] failed, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v9 = (os_log_s *)(id)gLogObj;
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v48 = "nw_txt_record_create_with_bytes";
          _os_log_impl( &dword_181A5C000,  v9,  v23,  "%{public}s [nw_txt_record init] failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v8)
    {
LABEL_42:

      return (nw_txt_record_t)v4;
    }

            if (v60) {
              free(v60);
            }
            goto LABEL_96;
          }

          __nwlog_obj();
          uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)__int128 v126 = 136446210;
          *(void *)&v126[4] = "nw_activity_create_epilogue_dictionary";
          BOOL v88 = (char *)_os_log_send_and_compose_impl();

          int v115 = OS_LOG_TYPE_ERROR;
          BOOL v112 = 0;
          if (v115 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            char v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v90 = v115;
            if (os_log_type_enabled(v89, v115))
            {
              *(_DWORD *)__int128 v126 = 136446210;
              *(void *)&v126[4] = "nw_activity_create_epilogue_dictionary";
              _os_log_impl(&dword_181A5C000, v89, v90, "%{public}s failed to get activity dictionary", v126, 0xCu);
            }
          }

          else if (v112)
          {
            BOOL v94 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            char v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            unsigned int v95 = v115;
            unsigned int v96 = os_log_type_enabled(v89, v115);
            if (v94)
            {
              if (v96)
              {
                *(_DWORD *)__int128 v126 = 136446466;
                *(void *)&v126[4] = "nw_activity_create_epilogue_dictionary";
                __int128 v127 = 2082;
                id v128 = v94;
                _os_log_impl( &dword_181A5C000,  v89,  v95,  "%{public}s failed to get activity dictionary, dumping backtrace:%{public}s",  v126,  0x16u);
              }

              free(v94);
              goto LABEL_174;
            }

            if (v96)
            {
              *(_DWORD *)__int128 v126 = 136446210;
              *(void *)&v126[4] = "nw_activity_create_epilogue_dictionary";
              _os_log_impl( &dword_181A5C000,  v89,  v95,  "%{public}s failed to get activity dictionary, no backtrace",  v126,  0xCu);
            }
          }

          else
          {
            __nwlog_obj();
            char v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            BOOL v98 = v115;
            if (os_log_type_enabled(v89, v115))
            {
              *(_DWORD *)__int128 v126 = 136446210;
              *(void *)&v126[4] = "nw_activity_create_epilogue_dictionary";
              _os_log_impl( &dword_181A5C000,  v89,  v98,  "%{public}s failed to get activity dictionary, backtrace limit exceeded",  v126,  0xCu);
            }
          }

LABEL_174:
          if (v88) {
            free(v88);
          }

LABEL_177:
          os_log_type_t v56 = 0LL;
          goto LABEL_72;
        }

        __nwlog_obj();
        __int16 v83 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)__int128 v126 = 136446210;
        *(void *)&v126[4] = "nw_activity_create_epilogue_dictionary";
        int v84 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        int v115 = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v84, type, &v115))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            __int16 v85 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v86 = type[0];
            if (os_log_type_enabled(v85, type[0]))
            {
              *(_DWORD *)__int128 v126 = 136446210;
              *(void *)&v126[4] = "nw_activity_create_epilogue_dictionary";
              _os_log_impl(&dword_181A5C000, v85, v86, "%{public}s failed to allocate dictionary", v126, 0xCu);
            }
          }

          else if (v115)
          {
            v91 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            __int16 v85 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            __int16 v92 = type[0];
            uint32_t v93 = os_log_type_enabled(v85, type[0]);
            if (v91)
            {
              if (v93)
              {
                *(_DWORD *)__int128 v126 = 136446466;
                *(void *)&v126[4] = "nw_activity_create_epilogue_dictionary";
                __int128 v127 = 2082;
                id v128 = v91;
                _os_log_impl( &dword_181A5C000,  v85,  v92,  "%{public}s failed to allocate dictionary, dumping backtrace:%{public}s",  v126,  0x16u);
              }

              free(v91);
              goto LABEL_169;
            }

            if (v93)
            {
              *(_DWORD *)__int128 v126 = 136446210;
              *(void *)&v126[4] = "nw_activity_create_epilogue_dictionary";
              _os_log_impl( &dword_181A5C000,  v85,  v92,  "%{public}s failed to allocate dictionary, no backtrace",  v126,  0xCu);
            }
          }

          else
          {
            __nwlog_obj();
            __int16 v85 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            BOOL v97 = type[0];
            if (os_log_type_enabled(v85, type[0]))
            {
              *(_DWORD *)__int128 v126 = 136446210;
              *(void *)&v126[4] = "nw_activity_create_epilogue_dictionary";
              _os_log_impl( &dword_181A5C000,  v85,  v97,  "%{public}s failed to allocate dictionary, backtrace limit exceeded",  v126,  0xCu);
            }
          }
        }

      if (!v37) {
        return 0LL;
      }
      BOOL v36 = (char *)v37;
      goto LABEL_53;
    }

    if (!v50)
    {
      os_log_type_t v38 = (os_log_s *)__nwlog_obj();
      BOOL v39 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v53 = "nw_protocol_http3_uni_stream_get_output_frames";
        BOOL v40 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_93;
      }

      goto LABEL_94;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v38 = (os_log_s *)__nwlog_obj();
    BOOL v39 = type;
    os_log_type_t v43 = os_log_type_enabled(v38, type);
    if (!backtrace_string)
    {
      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v53 = "nw_protocol_http3_uni_stream_get_output_frames";
        BOOL v40 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_93;
      }

      goto LABEL_94;
    }

    if (v43)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v53 = "nw_protocol_http3_uni_stream_get_output_frames";
      os_log_type_t v54 = 2082;
      *(void *)os_log_type_t v55 = backtrace_string;
      os_log_type_t v44 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_74:
      _os_log_impl(&dword_181A5C000, v38, v39, v44, buf, 0x16u);
    }

          free(v59);
          if (!v47) {
            return;
          }
LABEL_110:
          os_log_type_t v46 = (char *)v47;
LABEL_111:
          free(v46);
          return;
        }

        if (v68)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
          BOOL v50 = "%{public}s called with null context, no backtrace";
          goto LABEL_108;
        }
      }

      else
      {
        BOOL v48 = (os_log_s *)__nwlog_obj();
        os_log_type_t v49 = type[0];
        if (os_log_type_enabled(v48, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
          BOOL v50 = "%{public}s called with null context, backtrace limit exceeded";
          goto LABEL_108;
        }
      }

      goto LABEL_109;
    }

    BOOL v48 = (os_log_s *)__nwlog_obj();
    os_log_type_t v49 = type[0];
    if (!os_log_type_enabled(v48, type[0])) {
      goto LABEL_109;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
    BOOL v50 = "%{public}s called with null context";
    goto LABEL_108;
  }

  if (uuid_is_null(uu))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
    os_log_type_t v47 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v75 = 0;
    if (__nwlog_fault(v47, type, &v75))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        BOOL v48 = (os_log_s *)__nwlog_obj();
        os_log_type_t v49 = type[0];
        if (os_log_type_enabled(v48, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
          BOOL v50 = "%{public}s called with null (!uuid_is_null(newflow))";
          goto LABEL_108;
        }
      }

      else if (v75)
      {
        uint64_t v59 = (char *)__nw_create_backtrace_string();
        BOOL v48 = (os_log_s *)__nwlog_obj();
        os_log_type_t v49 = type[0];
        BOOL v69 = os_log_type_enabled(v48, type[0]);
        if (v59)
        {
          if (v69)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v59;
            char v61 = "%{public}s called with null (!uuid_is_null(newflow)), dumping backtrace:%{public}s";
            goto LABEL_93;
          }

          goto LABEL_94;
        }

        if (v69)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
          BOOL v50 = "%{public}s called with null (!uuid_is_null(newflow)), no backtrace";
          goto LABEL_108;
        }
      }

      else
      {
        BOOL v48 = (os_log_s *)__nwlog_obj();
        os_log_type_t v49 = type[0];
        if (os_log_type_enabled(v48, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
          BOOL v50 = "%{public}s called with null (!uuid_is_null(newflow)), backtrace limit exceeded";
          goto LABEL_108;
        }
      }
    }

void sub_181B1AE7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_context_endpoint_get_active_instance_count(void *a1, void *a2)
{
  uint64_t v50 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    BOOL v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_active_instance_count";
    os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (__nwlog_fault(v22, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_active_instance_count";
          _os_log_impl(&dword_181A5C000, v23, v24, "%{public}s called with null context", buf, 0xCu);
        }
      }

      else if (v46)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v34 = type;
        BOOL v35 = os_log_type_enabled(v23, type);
        if (backtrace_string)
        {
          if (v35)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_active_instance_count";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v23,  v34,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_63;
        }

        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_active_instance_count";
          _os_log_impl(&dword_181A5C000, v23, v34, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v42 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_context_endpoint_get_active_instance_count";
          _os_log_impl( &dword_181A5C000,  v23,  v42,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181B1B778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_queue_context_async(void *a1, void *a2)
{
  id v5 = a1;
  id v3 = a2;
  if (nw_context_is_inline(v5))
  {
    nw_context_queue_block(v5, v3);
  }

  else
  {
    BOOL v4 = nw_context_copy_workloop(v5);
    dispatch_async((dispatch_queue_t)v4, v3);
  }
}

void sub_181B1B814( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __nw_queue_context_create_source_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  id v3 = *(void ***)(a1 + 40);
  BOOL v4 = *v3;
  *id v3 = 0LL;

  free(v3);
}

void sub_181B1B8D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_resolver_update(void *a1, void *a2, unsigned int a3)
{
  uint64_t v389 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a2;
  v368 = v5;
  if (!v5)
  {
    __nwlog_obj();
    os_log_type_t v71 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
    uint64_t v72 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v376[0]) = 16;
    LOBYTE(v372) = 0;
    if (__nwlog_fault(v72, v376, &v372))
    {
      if (LOBYTE(v376[0]) == 17)
      {
        __nwlog_obj();
        uint64_t v73 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v74 = v376[0];
        if (os_log_type_enabled(v73, v376[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
          _os_log_impl(&dword_181A5C000, v73, v74, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if ((_BYTE)v372)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v73 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v76 = v376[0];
        BOOL v77 = os_log_type_enabled(v73, v376[0]);
        if (backtrace_string)
        {
          if (v77)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v73,  v76,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_94;
        }

        if (v77)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
          _os_log_impl(&dword_181A5C000, v73, v76, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v73 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v85 = v376[0];
        if (os_log_type_enabled(v73, v376[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
          _os_log_impl( &dword_181A5C000,  v73,  v85,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

LABEL_336:
      id v6 = (char *)v366;
      goto LABEL_337;
    }

    BOOL v41 = v9;
    os_log_type_t v42 = v41->parameters;

    os_log_type_t v43 = v42;
    v346 = v43;
    v351 = v9;
    if (v43)
    {
      uint64_t v44 = *((void *)v43 + 12);

      if ((v44 & 0x400000000LL) != 0)
      {
        LOBYTE(v376[0]) = 0;
        nw_resolver_get_svcb_report(*((void **)v363 + 1), 0LL, (BOOL *)v376, 0LL);
        if (LOBYTE(v376[0]))
        {
          if (nw_endpoint_handler_get_minimize_logging(v41))
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            os_log_type_t v47 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
            {
              os_log_type_t v101 = nw_endpoint_handler_get_id_string(v41);
              os_log_type_t v102 = nw_endpoint_handler_dry_run_string(v41);
              nw_endpoint_t v103 = nw_endpoint_handler_copy_endpoint(v41);
              os_log_type_t v104 = nw_endpoint_get_logging_description(v103);
              int v105 = nw_endpoint_handler_state_string(v41);
              int v106 = nw_endpoint_handler_mode_string(v41);
              int v107 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v41);
              *(_DWORD *)buf = 136447746;
              *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v101;
              *(_WORD *)&buf[22] = 2082;
              v379 = v102;
              *(_WORD *)v380 = 2082;
              *(void *)&v380[2] = v104;
              *(_WORD *)&v380[10] = 2082;
              *(void *)&v380[12] = v105;
              __int16 v381 = 2082;
              v382 = v106;
              __int16 v383 = 2114;
              v384 = v107;
              _os_log_impl( &dword_181A5C000,  v47,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received SVCB, and required to fail",  buf,  0x48u);
            }
          }

          else
          {
            os_log_type_t v45 = v41;
            BOOL v46 = (*((_BYTE *)v45 + 268) & 0x20) == 0;

            if (!v46)
            {
LABEL_41:
              os_log_type_t v55 = nw_endpoint_handler_copy_endpoint(v41);
              nw_endpoint_type_t type = nw_endpoint_get_type(v55);
              if (type == 5) {
                __int16 v57 = 7;
              }
              else {
                __int16 v57 = 2;
              }
              else {
                __int16 v58 = v57;
              }

              nw_endpoint_handler_handle_failure(v41);
              uint64_t v59 = -[NWConcrete_nw_error initWithDomain:code:]( objc_alloc(&OBJC_CLASS___NWConcrete_nw_error),  2,  -65571);
              v41->event.domain = 2;
              v41->event.event = v58;
              nw_endpoint_handler_report(v41, 0LL, &v41->event.domain, v59);

              goto LABEL_334;
            }

            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            os_log_type_t v47 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
            {
              BOOL v48 = nw_endpoint_handler_get_id_string(v45);
              uint64_t v49 = nw_endpoint_handler_dry_run_string(v45);
              nw_endpoint_t v50 = nw_endpoint_handler_copy_endpoint(v45);
              os_log_type_t v51 = nw_endpoint_get_logging_description(v50);
              os_log_type_t v52 = nw_endpoint_handler_state_string(v45);
              os_log_type_t v53 = nw_endpoint_handler_mode_string(v45);
              os_log_type_t v54 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v45);
              *(_DWORD *)buf = 136447746;
              *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v48;
              *(_WORD *)&buf[22] = 2082;
              v379 = v49;
              *(_WORD *)v380 = 2082;
              *(void *)&v380[2] = v51;
              *(_WORD *)&v380[10] = 2082;
              *(void *)&v380[12] = v52;
              __int16 v381 = 2082;
              v382 = v53;
              __int16 v383 = 2114;
              v384 = v54;
              _os_log_impl( &dword_181A5C000,  v47,  OS_LOG_TYPE_DEFAULT,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received SVCB, and required to fail",  buf,  0x48u);
            }
          }

          goto LABEL_41;
        }
      }

            goto LABEL_337;
          }
        }

        int v14 = BYTE4(v320);
        uint64_t v15 = v11;
        char v16 = (dispatch_data_s *)v15[7];
        uint64_t v293 = v15;
        uint64_t v17 = v15[9];
        if ((v14 & 1) == 0)
        {
          if (v16)
          {
            if (!v17)
            {
              size = dispatch_data_get_size(v16);
              uint64_t v19 = v293;
LABEL_25:
              else {
                os_log_type_t v22 = v19[14];
              }

              if ((_DWORD)size != (_DWORD)v22)
              {
                uint64_t v23 = -1;
                goto LABEL_48;
              }

            if (v200) {
              free(v200);
            }
            uint64_t v9 = v348;
LABEL_153:
            os_log_type_t v97 = v92 + 2;
            BOOL v98 = v90 + 3;
            if (v92 == 6)
            {
              os_log_type_t v99 = 0;
              goto LABEL_203;
            }

                          goto LABEL_370;
                        }

                        if (!v346)
                        {
                          __nwlog_obj();
                          v288 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                          v307 = v349;
                          if (os_log_type_enabled(v288, v349))
                          {
                            v308 = output_handler->identifier->name;
                            if (!v308) {
                              v308 = "invalid";
                            }
                            *(_DWORD *)buf = 136446722;
                            v355 = "__nw_protocol_replace_input_handler";
                            v356 = 2082;
                            v357 = (char *)v308;
                            v358 = 2048;
                            nw_endpoint_t v359 = (const char *)output_handler;
                            _os_log_impl( &dword_181A5C000,  v288,  v307,  "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, backtrace limit exceeded",  buf,  0x20u);
                          }

                          goto LABEL_336;
                        }

                        v297 = (char *)__nw_create_backtrace_string();
                        __nwlog_obj();
                        char v298 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                        v299 = v349;
                        v300 = os_log_type_enabled(v298, v349);
                        if (v297)
                        {
                          if (v300)
                          {
                            v301 = output_handler->identifier->name;
                            if (!v301) {
                              v301 = "invalid";
                            }
                            *(_DWORD *)buf = 136446978;
                            v355 = "__nw_protocol_replace_input_handler";
                            v356 = 2082;
                            v357 = (char *)v301;
                            v358 = 2048;
                            nw_endpoint_t v359 = (const char *)output_handler;
                            nw_endpoint_t v360 = 2082;
                            v361 = v297;
                            _os_log_impl( &dword_181A5C000,  v298,  v299,  "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, dumping ba cktrace:%{public}s",  buf,  0x2Au);
                          }

                          free(v297);
                        }

                        else
                        {
                          if (v300)
                          {
                            v309 = output_handler->identifier->name;
                            if (!v309) {
                              v309 = "invalid";
                            }
                            *(_DWORD *)buf = 136446722;
                            v355 = "__nw_protocol_replace_input_handler";
                            v356 = 2082;
                            v357 = (char *)v309;
                            v358 = 2048;
                            nw_endpoint_t v359 = (const char *)output_handler;
                            _os_log_impl( &dword_181A5C000,  v298,  v299,  "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, no backtrace",  buf,  0x20u);
                          }
                        }
                      }

LABEL_198:
          if (v348 == ++v145) {
            goto LABEL_226;
          }
        }

        id v163 = object;
        uint64_t v164 = v148;
        log = (os_log_s *)v163;
        v354 = v164;
        if (v164)
        {
          id v165 = v164;
          BOOL v166 = nw_array_create();
          *(void *)buf = MEMORY[0x1895F87A8];
          *(void *)&buf[8] = 3221225472LL;
          *(void *)&buf[16] = ___ZL53nw_endpoint_resolver_duplicate_array_without_endpointPU22objcproto11OS_nw_array8NSObjectPU25objcproto14OS_nw_endpointS__block_invoke;
          v379 = (const char *)&unk_189BC5030;
          *(void *)v380 = v165;
          id v167 = (id)v166;
          *(void *)&v380[8] = v167;
          nw_array_apply(v163, (uint64_t)buf);
          v168 = *(void **)&v380[8];
          object = (unsigned __int8 *)v167;

          goto LABEL_172;
        }

        __nwlog_obj();
        os_log_type_t v201 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_duplicate_array_without_endpoint";
        int v337 = 12;
        v336 = buf;
        os_log_type_t v202 = (char *)_os_log_send_and_compose_impl();

        LOBYTE(v376[0]) = 16;
        LOBYTE(v372) = 0;
        if (__nwlog_fault(v202, v376, &v372))
        {
          if (LOBYTE(v376[0]) == 17)
          {
            __nwlog_obj();
            os_log_type_t v203 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v204 = v376[0];
            if (os_log_type_enabled(v203, v376[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_duplicate_array_without_endpoint";
              _os_log_impl(&dword_181A5C000, v203, v204, "%{public}s called with null remove_endpoint", buf, 0xCu);
            }
          }

          else if ((_BYTE)v372)
          {
            v205 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            os_log_type_t v203 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v206 = v376[0];
            BOOL v207 = os_log_type_enabled(v203, v376[0]);
            if (v205)
            {
              if (v207)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_duplicate_array_without_endpoint";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v205;
                _os_log_impl( &dword_181A5C000,  v203,  v206,  "%{public}s called with null remove_endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v205);
              goto LABEL_222;
            }

            if (v207)
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_duplicate_array_without_endpoint";
              _os_log_impl( &dword_181A5C000,  v203,  v206,  "%{public}s called with null remove_endpoint, no backtrace",  buf,  0xCu);
            }
          }

          else
          {
            __nwlog_obj();
            os_log_type_t v203 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v208 = v376[0];
            if (os_log_type_enabled(v203, v376[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_duplicate_array_without_endpoint";
              _os_log_impl( &dword_181A5C000,  v203,  v208,  "%{public}s called with null remove_endpoint, backtrace limit exceeded",  buf,  0xCu);
            }
          }
        }

  if (v87) {
LABEL_199:
  }
    free(v87);
LABEL_200:
LABEL_129:
  BOOL v46 = v45;
  uint64_t v44 = v104;
  if (!v45) {
    goto LABEL_131;
  }
LABEL_130:
  *((void *)handle + 51) = v46;
LABEL_131:
  os_log_type_t v76 = *v11;
  BOOL v77 = v76 | (*((unsigned __int8 *)v11 + 2) << 16);
  if ((v76 & 2) == 0 && *((void *)handle + 22))
  {
    *((_BYTE *)v11 + 2) = BYTE2(v77);
    NWConcrete_nw_endpoint_handler *v11 = v77 | 2;
    unsigned int v78 = os_channel_available_slot_count();
    if (*((_DWORD *)handle + 105) - 1 >= v78) {
      nw_endpoint_t v80 = 0;
    }
    else {
      nw_endpoint_t v80 = *((_DWORD *)handle + 105);
    }
    __int16 v81 = *v11 | (*((unsigned __int8 *)v11 + 2) << 16);
    if (v78 == v80)
    {
      if ((*v11 & 0x10) != 0)
      {
        uint64_t v82 = *v11 & 0xFFEF | (*((unsigned __int8 *)v11 + 2) << 16);
        *v11 &= ~0x10u;
        *((_BYTE *)v11 + 2) = BYTE2(v82);
        nw_queue_resume_source(*((void *)handle + 22), v79);
      }
    }

    else if ((*v11 & 0x10) == 0)
    {
      *((_BYTE *)v11 + 2) = BYTE2(v81);
      NWConcrete_nw_endpoint_handler *v11 = v81 | 0x10;
      nw_queue_suspend_source(*((void *)handle + 22));
    }

    __int16 v83 = *v11;
    int v84 = v83 & 0xFFFFFFFD | (*((unsigned __int8 *)v11 + 2) << 16);
    NWConcrete_nw_endpoint_handler *v11 = v83 & 0xFFFD;
    *((_BYTE *)v11 + 2) = BYTE2(v84);
  }

  return v44;
}

    if (v77) {
      free(v77);
    }
    goto LABEL_106;
  }

  os_log_type_t v26 = strdup(name);
  if (!v26)
  {
    __nwlog_obj();
    nw_endpoint_t v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v80, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    int v107 = "strict_strdup";
    __int16 v81 = (void *)_os_log_send_and_compose_impl();

    uint64_t result = (nw_endpoint_t)__nwlog_abort((uint64_t)v81);
    if ((_DWORD)result) {
      goto LABEL_200;
    }
    free(v81);
  }

  *((void *)v25 + 29) = v26;
  char v27 = strdup(type);
  if (!v27)
  {
    __nwlog_obj();
    uint64_t v82 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v82, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    int v107 = "strict_strdup";
    __int16 v83 = (void *)_os_log_send_and_compose_impl();

    uint64_t result = (nw_endpoint_t)__nwlog_abort((uint64_t)v83);
    if ((_DWORD)result) {
      goto LABEL_200;
    }
    free(v83);
  }

  *((void *)v25 + 30) = v27;
  os_log_type_t v28 = strdup(domain);
  if (!v28)
  {
    __nwlog_obj();
    int v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v84, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    int v107 = "strict_strdup";
    os_log_type_t v85 = (void *)_os_log_send_and_compose_impl();

    uint64_t result = (nw_endpoint_t)__nwlog_abort((uint64_t)v85);
    if ((_DWORD)result) {
      goto LABEL_200;
    }
    free(v85);
  }

  *((void *)v25 + 31) = v28;
  os_log_type_t v29 = strlen(type);
  if (type[v29 - 1] == 46)
  {
    *(_BYTE *)(*((void *)v25 + 30) + v29 - 1) = 0;
    os_log_type_t v28 = (char *)*((void *)v25 + 31);
  }

  os_log_type_t v30 = DNSServiceConstructFullName( (char *const)buf,  *((const char *const *)v25 + 29),  *((const char *const *)v25 + 30),  v28);
  if (v30)
  {
    dns_int error = nw_error_create_dns_error(v30);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v32 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      BOOL v33 = (_DWORD *)*((void *)v25 + 29);
      nw_endpoint_t v34 = (char *)*((void *)v25 + 30);
      BOOL v35 = *((void *)v25 + 31);
      *(_DWORD *)typea = 136447235;
      os_log_type_t v97 = "-[NWConcrete_nw_bonjour_service_endpoint initWithName:type:domain:]";
      BOOL v98 = 2085;
      os_log_type_t v99 = v33;
      BOOL v100 = 2082;
      os_log_type_t v101 = v34;
      os_log_type_t v102 = 2085;
      nw_endpoint_t v103 = v35;
      os_log_type_t v104 = 2114;
      int v105 = dns_error;
      _os_log_impl( &dword_181A5C000,  v32,  OS_LOG_TYPE_ERROR,  "%{public}s DNSServiceConstructFullName(..., %{sensitive}s, %{public}s, %{sensitive}s) failed: %{public}@",  (uint8_t *)typea,  0x34u);
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v36 = (id)gLogObj;
    *(_DWORD *)typea = 136446466;
    os_log_type_t v97 = "-[NWConcrete_nw_bonjour_service_endpoint initWithName:type:domain:]";
    BOOL v98 = 2114;
    os_log_type_t v99 = dns_error;
    os_log_type_t v37 = (char *)_os_log_send_and_compose_impl();

    BOOL v94 = OS_LOG_TYPE_ERROR;
    uint32_t v93 = 0;
    if (v94 == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v38 = (os_log_s *)(id)gLogObj;
      uint64_t v39 = v94;
      if (os_log_type_enabled(v38, v94))
      {
        *(_DWORD *)typea = 136446466;
        os_log_type_t v97 = "-[NWConcrete_nw_bonjour_service_endpoint initWithName:type:domain:]";
        BOOL v98 = 2114;
        os_log_type_t v99 = dns_error;
        _os_log_impl( &dword_181A5C000,  v38,  v39,  "%{public}s DNSServiceConstructFullName failed: %{public}@ failed",  (uint8_t *)typea,  0x16u);
      }
    }

    else if (v93)
    {
      os_log_type_t v47 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v38 = (os_log_s *)(id)gLogObj;
      BOOL v48 = v94;
      uint64_t v49 = os_log_type_enabled(v38, v94);
      if (v47)
      {
        if (v49)
        {
          *(_DWORD *)typea = 136446722;
          os_log_type_t v97 = "-[NWConcrete_nw_bonjour_service_endpoint initWithName:type:domain:]";
          BOOL v98 = 2114;
          os_log_type_t v99 = dns_error;
          BOOL v100 = 2082;
          os_log_type_t v101 = v47;
          _os_log_impl( &dword_181A5C000,  v38,  v48,  "%{public}s DNSServiceConstructFullName failed: %{public}@ failed, dumping backtrace:%{public}s",  (uint8_t *)typea,  0x20u);
        }

        free(v47);
        goto LABEL_103;
      }

      if (v49)
      {
        *(_DWORD *)typea = 136446466;
        os_log_type_t v97 = "-[NWConcrete_nw_bonjour_service_endpoint initWithName:type:domain:]";
        BOOL v98 = 2114;
        os_log_type_t v99 = dns_error;
        _os_log_impl( &dword_181A5C000,  v38,  v48,  "%{public}s DNSServiceConstructFullName failed: %{public}@ failed, no backtrace",  (uint8_t *)typea,  0x16u);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v38 = (os_log_s *)(id)gLogObj;
      os_log_type_t v52 = v94;
      if (os_log_type_enabled(v38, v94))
      {
        *(_DWORD *)typea = 136446466;
        os_log_type_t v97 = "-[NWConcrete_nw_bonjour_service_endpoint initWithName:type:domain:]";
        BOOL v98 = 2114;
        os_log_type_t v99 = dns_error;
        _os_log_impl( &dword_181A5C000,  v38,  v52,  "%{public}s DNSServiceConstructFullName failed: %{public}@ failed, backtrace limit exceeded",  (uint8_t *)typea,  0x16u);
      }
    }

LABEL_103:
    if (v37) {
      free(v37);
    }

    goto LABEL_106;
  }

  uint64_t v44 = strdup((const char *)buf);
  if (v44)
  {
LABEL_78:
    *((void *)v25 + 32) = v44;
    if (!strcmp(domain, "local") || strcmp(domain, "local.")) {
      *((_BYTE *)v25 + 231) |= 1u;
    }
    os_log_type_t v45 = v25;

    BOOL v46 = v45;
    goto LABEL_125;
  }

  __nwlog_obj();
  v90 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v90, OS_LOG_TYPE_ERROR);
  *(_DWORD *)typea = 136446210;
  os_log_type_t v97 = "strict_strdup";
  v91 = (void *)_os_log_send_and_compose_impl();

  uint64_t result = (nw_endpoint_t)__nwlog_abort((uint64_t)v91);
  if (!(_DWORD)result)
  {
    free(v91);
    goto LABEL_78;
  }

          if (v72) {
            free(v72);
          }
          BOOL v4 = v71;
          int v14 = v129;
          if (!gLogDatapath)
          {
LABEL_91:
            *(void *)buf = v4;
            *(void *)&buf[8] = 0x40000000LL;
            *(void *)&buf[16] = ___ZL39nw_protocol_finalize_master_frame_arrayP16nw_frame_array_sb_block_invoke_39794;
            unsigned int v137 = (uint64_t)&__block_descriptor_tmp_57_39795;
            v138[0] = 0;
            os_log_type_t v55 = *(void *)(v2 + 664);
            do
            {
              if (!v55) {
                break;
              }
              os_log_type_t v56 = *(void *)(v55 + 16);
              __int16 v57 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
              os_log_type_t v55 = v56;
            }

            while ((v57 & 1) != 0);
            if (!*(void *)(v2 + 664))
            {
LABEL_95:
              nw_frame_cache_destroy(v14);
              __int16 v58 = *(void **)(v2 + 528);
              if (v58)
              {
                uint64_t v59 = *(void **)(v2 + 544);
                if (v59) {
                  nw_association_unregister(v58, v59);
                }
              }

              int v60 = *(void **)(v2 + 800);
              if (v60)
              {
                free(v60);
                *(void *)(v2 + 800) = 0LL;
              }

              *(_DWORD *)(v2 + 840) = 0;
              char v61 = *(void **)(v2 + 808);
              if (v61)
              {
                free(v61);
                *(void *)(v2 + 80_Block_object_dispose(va, 8) = 0LL;
              }

              *(_DWORD *)(v2 + 844) = 0;
              unsigned int v62 = *(void **)(v2 + 816);
              if (v62)
              {
                free(v62);
                *(void *)(v2 + 816) = 0LL;
              }

              *(_DWORD *)(v2 + 84_Block_object_dispose(va, 8) = 0;
              os_log_type_t v63 = *(void **)(v2 + 824);
              if (v63)
              {
                free(v63);
                *(void *)(v2 + 824) = 0LL;
              }

              *(_DWORD *)(v2 + 852) = 0;
              BOOL v64 = *(void **)(v2 + 832);
              if (v64)
              {
                free(v64);
                *(void *)(v2 + 832) = 0LL;
              }

              *(_DWORD *)(v2 + 856) = 0;
              (*(void (**)(void, void))(*(void *)(v2 + 608) + 16LL))(*(void *)(v2 + 608), 0LL);
              uint64_t v65 = *(const void **)(v2 + 608);
              if (v65)
              {
                _Block_release(v65);
                *(void *)(v2 + 60_Block_object_dispose(va, 8) = 0LL;
              }

              nw_http1_connection::~nw_http1_connection((nw_http1_connection *)v2);
              free(v66);
              if (!*(_DWORD *)(v3 + 336) && !*(_DWORD *)(v3 + 344)) {
                nw_protocol_http1_destroy(v3, v3);
              }
              return;
            }

            __nwlog_obj();
            v141 = 136446210;
            uint64_t v142 = "nw_protocol_finalize_master_frame_array";
            os_log_type_t v76 = (char *)_os_log_send_and_compose_impl();
            id v131 = OS_LOG_TYPE_ERROR;
            __int128 v130 = 0;
            if (__nwlog_fault(v76, &v131, &v130))
            {
              if (v131 == OS_LOG_TYPE_FAULT)
              {
                BOOL v77 = (os_log_s *)__nwlog_obj();
                unsigned int v78 = v131;
                if (!os_log_type_enabled(v77, v131)) {
                  goto LABEL_206;
                }
                v141 = 136446210;
                uint64_t v142 = "nw_protocol_finalize_master_frame_array";
                __int16 v79 = "%{public}s frame array is not empty after finalize";
                goto LABEL_205;
              }

              if (!v130)
              {
                BOOL v77 = (os_log_s *)__nwlog_obj();
                unsigned int v78 = v131;
                if (!os_log_type_enabled(v77, v131)) {
                  goto LABEL_206;
                }
                v141 = 136446210;
                uint64_t v142 = "nw_protocol_finalize_master_frame_array";
                __int16 v79 = "%{public}s frame array is not empty after finalize, backtrace limit exceeded";
                goto LABEL_205;
              }

              id v118 = (char *)__nw_create_backtrace_string();
              BOOL v77 = (os_log_s *)__nwlog_obj();
              unsigned int v78 = v131;
              unsigned int v119 = os_log_type_enabled(v77, v131);
              if (v118)
              {
                if (v119)
                {
                  v141 = 136446466;
                  uint64_t v142 = "nw_protocol_finalize_master_frame_array";
                  uint64_t v143 = 2082;
                  unint64_t v144 = v118;
                  _os_log_impl( &dword_181A5C000,  v77,  v78,  "%{public}s frame array is not empty after finalize, dumping backtrace:%{public}s",  (uint8_t *)&v141,  0x16u);
                }

                free(v118);
                goto LABEL_206;
              }

              if (v119)
              {
                v141 = 136446210;
                uint64_t v142 = "nw_protocol_finalize_master_frame_array";
                __int16 v79 = "%{public}s frame array is not empty after finalize, no backtrace";
LABEL_205:
                _os_log_impl(&dword_181A5C000, v77, v78, v79, (uint8_t *)&v141, 0xCu);
              }
            }

LABEL_256:
            nw_array_append(*location, inner);
LABEL_257:

            ++v212;
            v210 = v367;
            if (v213 == v212) {
              goto LABEL_267;
            }
          }

          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          os_log_t loga = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(loga, OS_LOG_TYPE_DEBUG))
          {
            os_log_type_t v237 = nw_endpoint_handler_get_id_string(v367);
            v356 = nw_endpoint_handler_dry_run_string(v367);
            nw_endpoint_t v360 = nw_endpoint_handler_copy_endpoint(v367);
            v343 = nw_endpoint_get_logging_description(v360);
            v238 = nw_endpoint_handler_state_string(v367);
            v239 = nw_endpoint_handler_mode_string(v367);
            __int16 v240 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v367);
            v241 = nw_endpoint_get_logging_description(v214);
            int v242 = nw_parameters_get_is_known_tracker((void *)child_parameters);
            *(_DWORD *)buf = 136448258;
            v243 = "";
            if (v242) {
              v243 = ", tracker";
            }
            *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v237;
            *(_WORD *)&buf[22] = 2082;
            v379 = v356;
            *(_WORD *)v380 = 2082;
            *(void *)&v380[2] = v343;
            *(_WORD *)&v380[10] = 2082;
            *(void *)&v380[12] = v238;
            __int16 v381 = 2082;
            v382 = v239;
            __int16 v383 = 2114;
            v384 = v240;
            __int16 v385 = 2082;
            v386 = v241;
            __int16 v387 = 2080;
            v388 = v243;
            _os_log_impl( &dword_181A5C000,  loga,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Adding endpoint handler for %{public}s%s",  buf,  0x5Cu);

            uint64_t v213 = v349;
          }

          else
          {
            uint64_t v213 = v349;
          }

    if (v34) {
      free(v34);
    }
    return 0LL;
  }

  BOOL v4 = nw_frame_copy_metadata_for_protocol(a2, *(void *)(*(void *)(a1[4] + 8LL) + 40LL));
  id v5 = v4;
  if (v4 && *(void **)(a1[7] + 496LL) != v4)
  {
    id v6 = nw_http_metadata_copy_response(v4);
    id v7 = a1[7];
    uint64_t v8 = *(_BYTE *)(v7 + 504);
    if ((v8 & 1) != 0)
    {
      uint64_t v9 = *(void **)(v7 + 496);
      if (v9)
      {
        os_release(v9);
        uint64_t v8 = *(_BYTE *)(v7 + 504);
      }
    }

    *(void *)(v7 + 496) = v5;
    *(_BYTE *)(v7 + 504) = v8 | 1;
    if (!v6) {
      goto LABEL_27;
    }
    id v10 = v6;
    status_code = _nw_http_response_get_status_code();

    if (status_code == 304
      || (status_code - 200) > 0xFFFFFF9B
      || (char v12 = a1[7], (*(_WORD *)(v12 + 648) & 2) != 0))
    {
LABEL_26:
      os_release(v10);
LABEL_27:
      id v5 = 0LL;
      goto LABEL_28;
    }

    id v13 = *(void **)(v12 + 496);
    if (v13)
    {
      int v14 = nw_http_metadata_copy_header_fields(v13);
      if (v14)
      {
        *(void *)buf = 0LL;
        *(void *)&buf[8] = buf;
        LODWORD(v232) = 1;
        *(void *)&buf[16] = 0x2000000000LL;
        v224[0] = MEMORY[0x1895F87A8];
        v224[1] = 0x40000000LL;
        v224[2] = ___ZL33nw_http_encoding_get_content_typeP25nw_protocol_http_encodingP20nw_protocol_metadata_block_invoke;
        v224[3] = &unk_189BBC0B0;
        v224[4] = buf;
        v224[5] = v12;
        uint64_t v15 = v14;
        char v16 = v224;
        _nw_http_fields_access_value_by_name((uint64_t)v15, (unint64_t)"Content-Encoding", v16);

        uint64_t v17 = *(_DWORD *)(*(void *)&buf[8] + 24LL);
        _Block_object_dispose(buf, 8);
        os_release(v15);
        nw_endpoint_t v18 = a1[7];
        *(_DWORD *)(v18 + 644) = 1;
        switch(v17)
        {
          case 2u:
            uint64_t v17 = 2;
            gzip = nw_decoder_create_gzip();
            goto LABEL_19;
          case 3u:
            *(_DWORD *)(v18 + 644) = 4;
            uint64_t v17 = 3;
            gzip = nw_decoder_create_deflate();
            goto LABEL_19;
          case 4u:
            uint64_t v17 = 4;
            gzip = nw_decoder_create_raw_deflate();
            goto LABEL_19;
          case 5u:
            uint64_t v17 = 5;
            gzip = nw_decoder_create_brotli();
LABEL_19:
            os_log_type_t v20 = (void (***)(void))gzip;
            break;
          default:
            os_log_type_t v20 = 0LL;
            break;
        }

        goto LABEL_20;
      }

      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_encoding_get_content_type";
      v186 = (char *)_os_log_send_and_compose_impl();
      v227[0] = 16;
      LOBYTE(v224[0]) = 0;
      if (__nwlog_fault(v186, v227, v224))
      {
        if (v227[0] == 17)
        {
          os_log_type_t v187 = (os_log_s *)__nwlog_obj();
          v188 = v227[0];
          if (!os_log_type_enabled(v187, (os_log_type_t)v227[0])) {
            goto LABEL_303;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_encoding_get_content_type";
          v189 = "%{public}s called with null header_fields";
          goto LABEL_302;
        }

        if (!LOBYTE(v224[0]))
        {
          os_log_type_t v187 = (os_log_s *)__nwlog_obj();
          v188 = v227[0];
          if (!os_log_type_enabled(v187, (os_log_type_t)v227[0])) {
            goto LABEL_303;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_encoding_get_content_type";
          v189 = "%{public}s called with null header_fields, backtrace limit exceeded";
          goto LABEL_302;
        }

        os_log_type_t v198 = (char *)__nw_create_backtrace_string();
        os_log_type_t v187 = (os_log_s *)__nwlog_obj();
        v188 = v227[0];
        BOOL v199 = os_log_type_enabled(v187, (os_log_type_t)v227[0]);
        if (!v198)
        {
          if (!v199) {
            goto LABEL_303;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_encoding_get_content_type";
          v189 = "%{public}s called with null header_fields, no backtrace";
          goto LABEL_302;
        }

        if (v199)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_encoding_get_content_type";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v198;
          _os_log_impl( &dword_181A5C000,  v187,  v188,  "%{public}s called with null header_fields, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v198);
      }

            if (v75) {
              free(v75);
            }
            *(_DWORD *)(v9 + 336) = -1;
LABEL_259:
            v178 = *(unsigned int *)(v9 + 360) + 1LL;
            uint64_t v179 = v178 << 31 >> 31;
            *(_DWORD *)(v9 + 360) = v178;
            if (v179 == v178 && (v179 & 0x8000000000000000LL) == 0) {
              goto LABEL_278;
            }
            __nwlog_obj();
            os_log_type_t v180 = *(unsigned int *)(v9 + 360);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "http1->next_connection_log_num";
            *(_WORD *)&buf[22] = 2048;
            v783 = 1LL;
            *(_WORD *)v784 = 2048;
            *(void *)&v784[2] = v180;
            BOOL v181 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(aBlock) = 0;
            if (__nwlog_fault(v181, type, &aBlock))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                v182 = (os_log_s *)__nwlog_obj();
                v183 = type[0];
                if (os_log_type_enabled(v182, type[0]))
                {
                  v184 = *(unsigned int *)(v9 + 360);
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->next_connection_log_num";
                  *(_WORD *)&buf[22] = 2048;
                  v783 = 1LL;
                  *(_WORD *)v784 = 2048;
                  *(void *)&v784[2] = v184;
                  os_log_type_t v185 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_274:
                  _os_log_impl(&dword_181A5C000, v182, v183, v185, buf, 0x2Au);
                }
              }

              else if ((_BYTE)aBlock)
              {
                v186 = v31;
                os_log_type_t v187 = (char *)__nw_create_backtrace_string();
                v182 = (os_log_s *)__nwlog_obj();
                v183 = type[0];
                v188 = os_log_type_enabled(v182, type[0]);
                if (v187)
                {
                  if (v188)
                  {
                    v189 = *(unsigned int *)(v9 + 360);
                    *(_DWORD *)buf = 136447234;
                    *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = "http1->next_connection_log_num";
                    *(_WORD *)&buf[22] = 2048;
                    v783 = 1LL;
                    *(_WORD *)v784 = 2048;
                    *(void *)&v784[2] = v189;
                    *(_WORD *)&v784[10] = 2082;
                    *(void *)&v784[12] = v187;
                    _os_log_impl( &dword_181A5C000,  v182,  v183,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                  }

                  free(v187);
                  uint64_t v31 = v186;
                  goto LABEL_275;
                }

                uint64_t v31 = v186;
                if (v188)
                {
                  id v191 = *(unsigned int *)(v9 + 360);
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->next_connection_log_num";
                  *(_WORD *)&buf[22] = 2048;
                  v783 = 1LL;
                  *(_WORD *)v784 = 2048;
                  *(void *)&v784[2] = v191;
                  os_log_type_t v185 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                  goto LABEL_274;
                }
              }

              else
              {
                v182 = (os_log_s *)__nwlog_obj();
                v183 = type[0];
                if (os_log_type_enabled(v182, type[0]))
                {
                  v190 = *(unsigned int *)(v9 + 360);
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->next_connection_log_num";
                  *(_WORD *)&buf[22] = 2048;
                  v783 = 1LL;
                  *(_WORD *)v784 = 2048;
                  *(void *)&v784[2] = v190;
                  os_log_type_t v185 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                  goto LABEL_274;
                }
              }
            }

    if (v251) {
      free(v251);
    }
    goto LABEL_240;
  }

  if (v7)
  {
    if ((v5 & 0x400000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v138 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        unsigned int v139 = *(_DWORD *)(a1 + 1280);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http3_control_stream_process_input";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v3;
        *(_WORD *)&buf[22] = 2080;
        char v282 = " ";
        v283 = 1024;
        v284 = v139;
        _os_log_impl( &dword_181A5C000,  v138,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> Duplicated SETTINGS frame",  buf,  0x26u);
      }
    }

    uint64_t v140 = (void *)*((void *)v272 + 5);
    if (v140)
    {
      while (1)
      {
        v141 = (void (*)(void *, uint64_t, uint64_t))v140[10];
        uint64_t v142 = (void *)v140[4];
        if (!v141) {
          break;
        }
        uint64_t v143 = v140[11];
        v140[10] = 0LL;
        v140[11] = 0LL;
        v141(v140, 1LL, v143);
LABEL_216:
        uint64_t v140 = v142;
        if (!v142) {
          goto LABEL_304;
        }
      }

      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
      unint64_t v144 = (const char *)_os_log_send_and_compose_impl();
      v279[0] = 16;
      LOBYTE(error) = 0;
      __int16 v250 = (char *)v144;
      if (__nwlog_fault(v144, v279, &error))
      {
        if (v279[0] == 17)
        {
          v235 = (os_log_s *)__nwlog_obj();
          log = v279[0];
          if (!os_log_type_enabled(v235, (os_log_type_t)v279[0])) {
            goto LABEL_232;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
          unint64_t v145 = v235;
          uint64_t v146 = log;
          v147 = "%{public}s called with null frame->finalizer";
          goto LABEL_231;
        }

        if (!(_BYTE)error)
        {
          os_log_type_t v237 = (os_log_s *)__nwlog_obj();
          logb = v279[0];
          if (!os_log_type_enabled(v237, (os_log_type_t)v279[0])) {
            goto LABEL_232;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
          unint64_t v145 = v237;
          uint64_t v146 = logb;
          v147 = "%{public}s called with null frame->finalizer, backtrace limit exceeded";
          goto LABEL_231;
        }

        char v236 = __nw_create_backtrace_string();
        os_log_t loga = (os_log_s *)__nwlog_obj();
        v214 = v279[0];
        __int16 v148 = os_log_type_enabled(loga, (os_log_type_t)v279[0]);
        nw_endpoint_t v149 = (char *)v236;
        if (v236)
        {
          if (v148)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v236;
            _os_log_impl( &dword_181A5C000,  loga,  v214,  "%{public}s called with null frame->finalizer, dumping backtrace:%{public}s",  buf,  0x16u);
            nw_endpoint_t v149 = (char *)v236;
          }

          free(v149);
          goto LABEL_232;
        }

        if (v148)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
          unint64_t v145 = loga;
          uint64_t v146 = v214;
          v147 = "%{public}s called with null frame->finalizer, no backtrace";
LABEL_231:
          _os_log_impl(&dword_181A5C000, v145, v146, v147, buf, 0xCu);
        }
      }

  __break(1u);
  return result;
}

          goto LABEL_359;
        }

        if (!v369)
        {
          __nwlog_obj();
          uint64_t v113 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v348 = type;
          if (os_log_type_enabled(v113, type))
          {
            __int16 v148 = *(const char **)(v21 + 16);
            if (!v148) {
              __int16 v148 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            v378 = "__nw_protocol_replace_input_handler";
            v379 = 2082;
            v380 = (char *)v148;
            __int16 v381 = 2048;
            v382 = (const char *)v21;
            _os_log_impl( &dword_181A5C000,  v113,  v348,  "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, backtrace limit exceeded",  buf,  0x20u);
          }

          goto LABEL_256;
        }

        unsigned int v122 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v346 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        nw_endpoint_t v342 = type;
        BOOL v123 = os_log_type_enabled(v346, type);
        if (v122)
        {
          if (v123)
          {
            unsigned int v124 = *(const char **)(v21 + 16);
            if (!v124) {
              unsigned int v124 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            v378 = "__nw_protocol_replace_input_handler";
            v379 = 2082;
            v380 = (char *)v124;
            __int16 v381 = 2048;
            v382 = (const char *)v21;
            __int16 v383 = 2082;
            v384 = v122;
            _os_log_impl( &dword_181A5C000,  v346,  v342,  "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v122);
        }

        else
        {
          if (v123)
          {
            uint64_t v159 = *(const char **)(v21 + 16);
            if (!v159) {
              uint64_t v159 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            v378 = "__nw_protocol_replace_input_handler";
            v379 = 2082;
            v380 = (char *)v159;
            __int16 v381 = 2048;
            v382 = (const char *)v21;
            _os_log_impl( &dword_181A5C000,  v346,  v342,  "%{public}s protocol %{public}s (%p) has invalid replace_input_handler callback, no backtrace",  buf,  0x20u);
          }
        }

LABEL_254:
          id v219 = loga;
LABEL_255:

          goto LABEL_256;
        }
      }

        if (v108) {
          free(v108);
        }
        uint64_t v44 = 0LL;
LABEL_62:

        nw_listener_set_queue(v38, (dispatch_queue_t)v44);
        BOOL v46 = v37[11];
        *(void *)buf = MEMORY[0x1895F87A8];
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&buf[16] = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke;
        *(void *)os_log_type_t v176 = &unk_189BC9318;
        os_log_type_t v47 = v39;
        *(void *)&v176[8] = v47;
        nw_listener_set_state_changed_handler(v46, buf);
        BOOL v48 = v47[8];
        if (!v48) {
          goto LABEL_86;
        }
        uint64_t v49 = v48;
        nw_endpoint_t v50 = v49[2];

        if (v50 == 1)
        {
          os_log_type_t v51 = v37[11];
          *(void *)os_log_type_t v180 = MEMORY[0x1895F87A8];
          *(void *)&v180[8] = 3221225472LL;
          *(void *)&v180[16] = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_2;
          BOOL v181 = (char *)&unk_189BB73D8;
          os_log_type_t v52 = v47;
          v182 = v52;
          nw_listener_set_new_packet_handler(v51, v180);
          os_log_type_t v53 = v52[12];
          if (!v53)
          {
LABEL_71:

LABEL_105:
            *((_BYTE *)v47 + 190) |= 8u;
            nw_listener_start(v37[11]);

LABEL_106:
            return;
          }

          nw_endpoint_t v161 = v52;
          os_log_type_t v54 = v39[7];
          os_log_type_t v55 = v54;
          if (v54)
          {
            os_log_type_t v56 = nw_parameters_copy_context(v54);
            __int16 v57 = v56;
            if (v56)
            {
              __int16 v58 = nw_context_copy_workloop(v56);
              if (v58
                || (v59 = nw_context_copy_implicit_context(), __int16 v58 = nw_context_copy_workloop(v59),
                                                              v59,
                                                              v58))
              {
LABEL_69:

LABEL_70:
                nw_listener_set_queue(v53, (dispatch_queue_t)v58);

                int v60 = v52[12];
                char v61 = MEMORY[0x1895F87A8];
                *(void *)handler = MEMORY[0x1895F87A8];
                *(void *)&handler[8] = 3221225472LL;
                *(void *)&handler[16] = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_3;
                v178 = &unk_189BB7400;
                unsigned int v62 = v161;
                uint64_t v179 = v62;
                nw_listener_set_new_connection_handler(v60, handler);
                os_log_type_t v63 = v52[12];
                *(void *)os_log_type_t v169 = v61;
                BOOL v170 = 3221225472LL;
                v171 = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_4;
                v172 = &unk_189BC9318;
                os_log_type_t v173 = v62;
                nw_listener_set_state_changed_handler(v63, v169);
                nw_listener_start(v52[12]);

                goto LABEL_71;
              }

              __nwlog_obj();
              __int16 v138 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)handler = 136446210;
              *(void *)&handler[4] = "nw_connection_group_copy_workloop";
              typeb = (char *)_os_log_send_and_compose_impl();

              v169[0] = OS_LOG_TYPE_ERROR;
              BOOL v174 = 0;
              if (__nwlog_fault(typeb, v169, &v174))
              {
                if (v169[0] == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  __int16 v136 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  unsigned int v139 = v169[0];
                  if (os_log_type_enabled(v136, v169[0]))
                  {
                    *(_DWORD *)handler = 136446210;
                    *(void *)&handler[4] = "nw_connection_group_copy_workloop";
                    _os_log_impl(&dword_181A5C000, v136, v139, "%{public}s called with null workloop", handler, 0xCu);
                  }
                }

                else
                {
                  if (v174)
                  {
                    nw_endpoint_t v149 = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    BOOL v150 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    __int16 v156 = v169[0];
                    id v151 = os_log_type_enabled(v150, v169[0]);
                    if (v149)
                    {
                      if (v151)
                      {
                        *(_DWORD *)handler = 136446466;
                        *(void *)&handler[4] = "nw_connection_group_copy_workloop";
                        *(_WORD *)&handler[12] = 2082;
                        *(void *)&handler[14] = v149;
                        _os_log_impl( &dword_181A5C000,  v150,  v156,  "%{public}s called with null workloop, dumping backtrace:%{public}s",  handler,  0x16u);
                      }

                      free(v149);
                    }

                    else
                    {
                      if (v151)
                      {
                        *(_DWORD *)handler = 136446210;
                        *(void *)&handler[4] = "nw_connection_group_copy_workloop";
                        _os_log_impl( &dword_181A5C000,  v150,  v156,  "%{public}s called with null workloop, no backtrace",  handler,  0xCu);
                      }
                    }

                    goto LABEL_302;
                  }

                  __nwlog_obj();
                  __int16 v136 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  __int16 v154 = v169[0];
                  if (os_log_type_enabled(v136, v169[0]))
                  {
                    *(_DWORD *)handler = 136446210;
                    *(void *)&handler[4] = "nw_connection_group_copy_workloop";
                    _os_log_impl( &dword_181A5C000,  v136,  v154,  "%{public}s called with null workloop, backtrace limit exceeded",  handler,  0xCu);
                  }
                }

                goto LABEL_298;
              }
            }

            else
            {
              __nwlog_obj();
              double v135 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)handler = 136446210;
              *(void *)&handler[4] = "nw_connection_group_copy_workloop";
              typeb = (char *)_os_log_send_and_compose_impl();

              v169[0] = OS_LOG_TYPE_ERROR;
              BOOL v174 = 0;
              if (__nwlog_fault(typeb, v169, &v174))
              {
                if (v169[0] == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  __int16 v136 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  unsigned int v137 = v169[0];
                  if (os_log_type_enabled(v136, v169[0]))
                  {
                    *(_DWORD *)handler = 136446210;
                    *(void *)&handler[4] = "nw_connection_group_copy_workloop";
                    _os_log_impl(&dword_181A5C000, v136, v137, "%{public}s called with null context", handler, 0xCu);
                  }
                }

                else if (v174)
                {
                  v147 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  __int16 v136 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  nw_endpoint_t v155 = v169[0];
                  __int16 v148 = os_log_type_enabled(v136, v169[0]);
                  if (v147)
                  {
                    if (v148)
                    {
                      *(_DWORD *)handler = 136446466;
                      *(void *)&handler[4] = "nw_connection_group_copy_workloop";
                      *(_WORD *)&handler[12] = 2082;
                      *(void *)&handler[14] = v147;
                      _os_log_impl( &dword_181A5C000,  v136,  v155,  "%{public}s called with null context, dumping backtrace:%{public}s",  handler,  0x16u);
                    }

                    free(v147);
                    goto LABEL_302;
                  }

                  if (v148)
                  {
                    *(_DWORD *)handler = 136446210;
                    *(void *)&handler[4] = "nw_connection_group_copy_workloop";
                    _os_log_impl( &dword_181A5C000,  v136,  v155,  "%{public}s called with null context, no backtrace",  handler,  0xCu);
                  }
                }

                else
                {
                  __nwlog_obj();
                  __int16 v136 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  v153 = v169[0];
                  if (os_log_type_enabled(v136, v169[0]))
                  {
                    *(_DWORD *)handler = 136446210;
                    *(void *)&handler[4] = "nw_connection_group_copy_workloop";
                    _os_log_impl( &dword_181A5C000,  v136,  v153,  "%{public}s called with null context, backtrace limit exceeded",  handler,  0xCu);
                  }
                }

                    if (v102) {
                      free(v102);
                    }
                    goto LABEL_63;
                  }

                  __nwlog_obj();
                  v109 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 136446210;
                  double v135 = "__nw_protocol_connected";
                  os_log_type_t v45 = (char *)_os_log_send_and_compose_impl();

                  type[0] = OS_LOG_TYPE_ERROR;
                  v129[0] = OS_LOG_TYPE_DEFAULT;
                  if (__nwlog_fault(v45, type, v129))
                  {
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      __nwlog_obj();
                      BOOL v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      BOOL v110 = type[0];
                      if (os_log_type_enabled(v46, type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        double v135 = "__nw_protocol_connected";
                        _os_log_impl(&dword_181A5C000, v46, v110, "%{public}s called with null protocol", buf, 0xCu);
                      }

                      goto LABEL_84;
                    }

                    if (v129[0] == OS_LOG_TYPE_DEFAULT)
                    {
                      __nwlog_obj();
                      BOOL v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      unsigned int v122 = type[0];
                      if (os_log_type_enabled(v46, type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        double v135 = "__nw_protocol_connected";
                        _os_log_impl( &dword_181A5C000,  v46,  v122,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
                      }

                      goto LABEL_84;
                    }

                    backtrace_string = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    BOOL v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    unsigned int v117 = type[0];
                    id v118 = os_log_type_enabled(v46, type[0]);
                    if (!backtrace_string)
                    {
                      if (v118)
                      {
                        *(_DWORD *)buf = 136446210;
                        double v135 = "__nw_protocol_connected";
                        _os_log_impl( &dword_181A5C000,  v46,  v117,  "%{public}s called with null protocol, no backtrace",  buf,  0xCu);
                      }

                      goto LABEL_84;
                    }

                    if (v118)
                    {
                      *(_DWORD *)buf = 136446466;
                      double v135 = "__nw_protocol_connected";
                      __int16 v136 = 2082;
                      unsigned int v137 = backtrace_string;
                      _os_log_impl( &dword_181A5C000,  v46,  v117,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
                    }

      free(backtrace_string);
      goto LABEL_281;
    }

    if (!v150) {
      goto LABEL_281;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_stream_remove_input_handler";
    uint64_t v142 = "%{public}s called with null input_protocol, no backtrace";
LABEL_280:
    _os_log_impl(&dword_181A5C000, v140, v141, v142, buf, 0xCu);
LABEL_281:
    if (v139) {
      free(v139);
    }
    return 0LL;
  }

  if ((handle[276] & 0x10) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v143 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v143, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v144 = *((void *)handle + 11);
        if (v144) {
          unint64_t v145 = *(_DWORD *)(v144 + 460);
        }
        else {
          unint64_t v145 = -1;
        }
        v157 = *((void *)handle + 8);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_stream_remove_input_handler";
        v188 = 2082;
        v189 = handle + 192;
        v190 = 2080;
        id v191 = (uint64_t)" ";
        v192 = 1024;
        *(_DWORD *)v193 = v145;
        *(_WORD *)&v193[4] = 2048;
        *(void *)&v193[6] = v157;
        _os_log_impl(&dword_181A5C000, v143, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
      }
    }
  }

  id v5 = &qword_18C45F000;
  if ((handle[276] & 0x10) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = *((void *)handle + 11);
      if (v7) {
        uint64_t v8 = *(_DWORD *)(v7 + 460);
      }
      else {
        uint64_t v8 = -1;
      }
      uint64_t v9 = *((void *)handle + 8);
      default_input_handler = a1->default_input_handler;
      *(_DWORD *)buf = 136448002;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_stream_remove_input_handler";
      v188 = 2082;
      v189 = handle + 192;
      v190 = 2080;
      id v191 = (uint64_t)" ";
      v192 = 1024;
      *(_DWORD *)v193 = v8;
      *(_WORD *)&v193[4] = 2048;
      *(void *)&v193[6] = v9;
      *(_WORD *)&v193[14] = 2048;
      *(void *)&v193[16] = a1;
      v194 = 2048;
      os_log_type_t v195 = default_input_handler;
      BOOL v196 = 2048;
      v197 = a2;
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s%s<i%u:s%lld> protocol %p, default_input_handler %p, input protocol %p",  buf,  0x4Eu);
    }
  }

  BOOL v11 = *((void *)handle + 11);
  if (a2->output_handler == a1) {
    nw_protocol_set_output_handler((uint64_t)a2, 0LL);
  }
  if (a1->default_input_handler != a2) {
    return 0LL;
  }
  if (handle == *(char **)(v11 + 416))
  {
    id v13 = *((void *)handle + 4);
    if (v13) {
      nw_protocol_remove_input_handler(v13, (uint64_t)handle);
    }
  }

  os_log_type_t v173 = *((void *)handle + 11);
  if (!v173)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
    id v151 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v174[0]) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v152 = (os_log_s *)__nwlog_obj();
      v153 = type[0];
      if (!os_log_type_enabled(v152, type[0])) {
        goto LABEL_295;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
      __int16 v154 = "%{public}s called with null webtransport_session";
    }

    else if (LOBYTE(v174[0]))
    {
      __int16 v158 = (char *)__nw_create_backtrace_string();
      __int16 v152 = (os_log_s *)__nwlog_obj();
      v153 = type[0];
      uint64_t v159 = os_log_type_enabled(v152, type[0]);
      if (v158)
      {
        if (v159)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
          v188 = 2082;
          v189 = v158;
          _os_log_impl( &dword_181A5C000,  v152,  v153,  "%{public}s called with null webtransport_session, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v158);
        goto LABEL_295;
      }

      if (!v159)
      {
LABEL_295:
        if (v151) {
          free(v151);
        }
        goto LABEL_89;
      }

      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
      __int16 v154 = "%{public}s called with null webtransport_session, no backtrace";
    }

    else
    {
      __int16 v152 = (os_log_s *)__nwlog_obj();
      v153 = type[0];
      if (!os_log_type_enabled(v152, type[0])) {
        goto LABEL_295;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
      __int16 v154 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v152, v153, v154, buf, 0xCu);
    goto LABEL_295;
  }

  if ((handle[276] & 0x20) != 0)
  {
    if ((*(_BYTE *)(v173 + 548) & 2) == 0)
    {
      if (gLogDatapath)
      {
        nw_endpoint_t v155 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v155, OS_LOG_TYPE_DEBUG))
        {
          __int16 v156 = *(_DWORD *)(v173 + 460);
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
          v188 = 2082;
          v189 = (const char *)(v173 + 464);
          v190 = 2080;
          id v191 = (uint64_t)" ";
          v192 = 1024;
          *(_DWORD *)v193 = v156;
          *(_WORD *)&v193[4] = 2048;
          *(void *)&v193[6] = handle;
          _os_log_impl( &dword_181A5C000,  v155,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> called for stream (%p)",  buf,  0x30u);
        }
      }
    }

    if ((handle[276] & 0x20) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
      v188 = 2048;
      v189 = handle;
      nw_endpoint_t v18 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v174[0]) = 0;
      if (__nwlog_fault(v18, type, v174))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v19 = (os_log_s *)gLogObj;
          os_log_type_t v20 = type[0];
          if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
            v188 = 2048;
            v189 = handle;
            BOOL v21 = "%{public}s stream %p not in pending list, cannot remove";
LABEL_61:
            os_log_type_t v40 = v19;
            BOOL v41 = v20;
LABEL_62:
            _os_log_impl(&dword_181A5C000, v40, v41, v21, buf, 0x16u);
          }
        }

        else if (LOBYTE(v174[0]))
        {
          os_log_type_t v25 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v26 = (os_log_s *)gLogObj;
          char v27 = type[0];
          os_log_type_t v28 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
          if (v25)
          {
            if (v28)
            {
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
              v188 = 2048;
              v189 = handle;
              v190 = 2082;
              id v191 = (uint64_t)v25;
              _os_log_impl( &dword_181A5C000,  v26,  v27,  "%{public}s stream %p not in pending list, cannot remove, dumping backtrace:%{public}s",  buf,  0x20u);
            }

            free(v25);
            goto LABEL_63;
          }

          if (v28)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
            v188 = 2048;
            v189 = handle;
            BOOL v21 = "%{public}s stream %p not in pending list, cannot remove, no backtrace";
            os_log_type_t v40 = v26;
            BOOL v41 = v27;
            goto LABEL_62;
          }
        }

        else
        {
          uint64_t v19 = (os_log_s *)__nwlog_obj();
          os_log_type_t v20 = type[0];
          if (os_log_type_enabled(v19, type[0]))
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_pending_stream";
            v188 = 2048;
            v189 = handle;
            BOOL v21 = "%{public}s stream %p not in pending list, cannot remove, backtrace limit exceeded";
            goto LABEL_61;
          }
        }
      }

    id v163 = v2;
    __nwlog_obj();
    uint64_t v164 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)uint64_t v267 = 136446210;
    v268 = "nw_necp_append_tlv";
    id v165 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v257) = 0;
    if (__nwlog_fault(v165, type, &v257))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v166 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v167 = type[0];
        if (os_log_type_enabled(v166, type[0]))
        {
          *(_DWORD *)uint64_t v267 = 136446210;
          v268 = "nw_necp_append_tlv";
          _os_log_impl(&dword_181A5C000, v166, v167, "%{public}s called with null tlv_start", v267, 0xCu);
        }
      }

      else if ((_BYTE)v257)
      {
        v189 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v166 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v190 = type[0];
        id v191 = os_log_type_enabled(v166, type[0]);
        if (v189)
        {
          if (v191)
          {
            *(_DWORD *)uint64_t v267 = 136446466;
            v268 = "nw_necp_append_tlv";
            uint64_t v269 = 2082;
            *(void *)v270 = v189;
            _os_log_impl( &dword_181A5C000,  v166,  v190,  "%{public}s called with null tlv_start, dumping backtrace:%{public}s",  v267,  0x16u);
          }

          free(v189);
          goto LABEL_360;
        }

        if (v191)
        {
          *(_DWORD *)uint64_t v267 = 136446210;
          v268 = "nw_necp_append_tlv";
          _os_log_impl(&dword_181A5C000, v166, v190, "%{public}s called with null tlv_start, no backtrace", v267, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v166 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v207 = type[0];
        if (os_log_type_enabled(v166, type[0]))
        {
          *(_DWORD *)uint64_t v267 = 136446210;
          v268 = "nw_necp_append_tlv";
          _os_log_impl( &dword_181A5C000,  v166,  v207,  "%{public}s called with null tlv_start, backtrace limit exceeded",  v267,  0xCu);
        }
      }
    }

                    int v115 = 1;
                    goto LABEL_328;
                  }

                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_idle_connection";
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v16;
                  BOOL v100 = (char *)_os_log_send_and_compose_impl();
                  v1065[0] = 16;
                  aBlock[0] = 0;
                  if (__nwlog_fault(v100, v1065, aBlock))
                  {
                    if (v1065[0] == 17)
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      os_log_type_t v101 = (os_log_s *)gLogObj;
                      os_log_type_t v102 = v1065[0];
                      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1065[0])) {
                        goto LABEL_181;
                      }
                      *(_DWORD *)buf = 136446466;
                      *(void *)&uint8_t buf[4] = "nw_http1_add_idle_connection";
                      *(_WORD *)&buf[12] = 2048;
                      *(void *)&buf[14] = v16;
                      nw_endpoint_t v103 = "%{public}s connection %p already in idle list, cannot add twice";
LABEL_180:
                      _os_log_impl(&dword_181A5C000, v101, v102, v103, buf, 0x16u);
                      goto LABEL_181;
                    }

                    if (!aBlock[0])
                    {
                      os_log_type_t v101 = (os_log_s *)__nwlog_obj();
                      os_log_type_t v102 = v1065[0];
                      if (!os_log_type_enabled(v101, (os_log_type_t)v1065[0])) {
                        goto LABEL_181;
                      }
                      *(_DWORD *)buf = 136446466;
                      *(void *)&uint8_t buf[4] = "nw_http1_add_idle_connection";
                      *(_WORD *)&buf[12] = 2048;
                      *(void *)&buf[14] = v16;
                      nw_endpoint_t v103 = "%{public}s connection %p already in idle list, cannot add twice, backtrace limit exceeded";
                      goto LABEL_180;
                    }

                    os_log_type_t v104 = (char *)__nw_create_backtrace_string();
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    os_log_type_t v101 = (os_log_s *)gLogObj;
                    os_log_type_t v102 = v1065[0];
                    int v105 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1065[0]);
                    if (!v104)
                    {
                      BOOL v11 = v1042;
                      if (!v105) {
                        goto LABEL_181;
                      }
                      *(_DWORD *)buf = 136446466;
                      *(void *)&uint8_t buf[4] = "nw_http1_add_idle_connection";
                      *(_WORD *)&buf[12] = 2048;
                      *(void *)&buf[14] = v16;
                      nw_endpoint_t v103 = "%{public}s connection %p already in idle list, cannot add twice, no backtrace";
                      goto LABEL_180;
                    }

                    if (v105)
                    {
                      *(_DWORD *)buf = 136446722;
                      *(void *)&uint8_t buf[4] = "nw_http1_add_idle_connection";
                      *(_WORD *)&buf[12] = 2048;
                      *(void *)&buf[14] = v16;
                      *(_WORD *)&buf[22] = 2082;
                      v1051 = (uint64_t)v104;
                      _os_log_impl( &dword_181A5C000,  v101,  v102,  "%{public}s connection %p already in idle list, cannot add twice, dumping backtrace:%{public}s",  buf,  0x20u);
                    }

                    free(v104);
                    BOOL v11 = v1042;
                  }

LABEL_267:
      __nwlog_obj();
      __int16 v244 = (void *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled((os_log_t)v244, OS_LOG_TYPE_DEBUG))
      {

        v245 = v367;
        __int16 v246 = (void *)&unk_182665000;
      }

      else
      {
        BOOL v247 = gLogFDOverride == -1;

        v245 = v367;
        __int16 v246 = &unk_182665000;
        if (v247) {
          goto LABEL_279;
        }
      }

      v376[0] = 0LL;
      v376[1] = v376;
      v376[2] = 0x2020000000LL;
      char v377 = 1;
      uint64_t v372 = 0LL;
      v373 = &v372;
      uint64_t v374 = 0x2020000000LL;
      v375 = 0LL;
      asprintf(&v375, "", v336, v337);
      __int16 v248 = (unsigned __int8 *)*location;
      v371[0] = MEMORY[0x1895F87A8];
      v371[1] = v246[390];
      v371[2] = ___ZL27nw_endpoint_resolver_updateP30NWConcrete_nw_endpoint_handlerPU25objcproto14OS_nw_resolver8NSObject20nw_resolver_status_t_block_invoke;
      v371[3] = &unk_189BC52F8;
      v371[4] = &v372;
      v371[5] = v376;
      nw_array_apply(v248, (uint64_t)v371);
      if ((nw_endpoint_handler_get_logging_disabled(v245) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        v249 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v249, OS_LOG_TYPE_DEBUG))
        {
          __int16 v250 = nw_endpoint_handler_get_id_string(v367);
          id v251 = nw_endpoint_handler_dry_run_string(v367);
          nw_endpoint_t v252 = nw_endpoint_handler_copy_endpoint(v367);
          unint64_t v253 = nw_endpoint_get_logging_description(v252);
          __int16 v254 = nw_endpoint_handler_state_string(v367);
          v255 = nw_endpoint_handler_mode_string(v367);
          uint64_t v256 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v367);
          v257 = (const char *)v373[3];
          *(_DWORD *)buf = 136448002;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v250;
          *(_WORD *)&buf[22] = 2082;
          v379 = v251;
          *(_WORD *)v380 = 2082;
          *(void *)&v380[2] = v253;
          *(_WORD *)&v380[10] = 2082;
          *(void *)&v380[12] = v254;
          __int16 v381 = 2082;
          v382 = v255;
          __int16 v383 = 2114;
          v384 = v256;
          __int16 v385 = 2082;
          v386 = v257;
          _os_log_impl( &dword_181A5C000,  v249,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Updated endpoint list is (%{public}s)",  buf,  0x52u);
        }

        v245 = v367;
      }

      v258 = (void *)v373[3];
      if (v258)
      {
        free(v258);
        v373[3] = 0LL;
      }

      _Block_object_dispose(&v372, 8);
      _Block_object_dispose(v376, 8);
LABEL_279:
      v259 = nw_endpoint_handler_copy_endpoint(v245);
      nw_endpoint_type_t v260 = nw_endpoint_get_type(v259);
      if (v260 == 5) {
        __int16 v261 = 7;
      }
      else {
        __int16 v261 = 2;
      }
      else {
        __int16 v262 = v261;
      }

      uint64_t v263 = *location;
      if (*location)
      {
        uint64_t v266 = v263 + 16;
        uint64_t v264 = *(void *)(v263 + 16);
        uint64_t v265 = *(void *)(v266 + 8);
        uint64_t v267 = v265 - v264;
        if (v265 != v264)
        {
          v268 = v367;
          v367->event.domain = 2;
          v367->event.event = v262;
          nw_endpoint_handler_report(v367, 0LL, &v367->event.domain, 0LL);
          uint64_t v269 = *((void *)v363 + 6);
          if (v269) {
            uint64_t v269 = (uint64_t)(*(void *)(v269 + 24) - *(void *)(v269 + 16)) >> 3;
          }
          if (v339 == 2 && v267 >> 3 == v269)
          {
            int minimize_logging = nw_endpoint_handler_get_minimize_logging(v367);
            char logging_disabled = nw_endpoint_handler_get_logging_disabled(v367);
            if (minimize_logging)
            {
              if ((logging_disabled & 1) != 0) {
                goto LABEL_298;
              }
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              v272 = (os_log_s *)(id)gconnectionLogObj;
              if (os_log_type_enabled(v272, OS_LOG_TYPE_DEBUG))
              {
                v315 = nw_endpoint_handler_get_id_string(v367);
                v316 = nw_endpoint_handler_dry_run_string(v367);
                nw_endpoint_t v317 = nw_endpoint_handler_copy_endpoint(v367);
                v318 = nw_endpoint_get_logging_description(v317);
                v319 = nw_endpoint_handler_state_string(v367);
                v320 = nw_endpoint_handler_mode_string(v367);
                v321 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v367);
                *(_DWORD *)buf = 136447746;
                *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v315;
                *(_WORD *)&buf[22] = 2082;
                v379 = v316;
                *(_WORD *)v380 = 2082;
                *(void *)&v380[2] = v318;
                *(_WORD *)&v380[10] = 2082;
                *(void *)&v380[12] = v319;
                __int16 v381 = 2082;
                v382 = v320;
                __int16 v383 = 2114;
                v384 = v321;
                _os_log_impl( &dword_181A5C000,  v272,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] resolver complete, al l children failed",  buf,  0x48u);
              }
            }

            else
            {
              if ((logging_disabled & 1) != 0)
              {
LABEL_298:
                nw_endpoint_handler_handle_failure(v268);
                v268->event = (nw_endpoint_handler_event_s)327682;
                nw_endpoint_handler_report(v268, 0LL, &v367->event.domain, 0LL);
LABEL_332:

                goto LABEL_333;
              }

              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              v272 = (os_log_s *)(id)gconnectionLogObj;
              if (os_log_type_enabled(v272, OS_LOG_TYPE_INFO))
              {
                v273 = nw_endpoint_handler_get_id_string(v367);
                v274 = nw_endpoint_handler_dry_run_string(v367);
                nw_endpoint_t v275 = nw_endpoint_handler_copy_endpoint(v367);
                v276 = nw_endpoint_get_logging_description(v275);
                v277 = nw_endpoint_handler_state_string(v367);
                v278 = nw_endpoint_handler_mode_string(v367);
                v279 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v367);
                *(_DWORD *)buf = 136447746;
                *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v273;
                *(_WORD *)&buf[22] = 2082;
                v379 = v274;
                *(_WORD *)v380 = 2082;
                *(void *)&v380[2] = v276;
                *(_WORD *)&v380[10] = 2082;
                *(void *)&v380[12] = v277;
                __int16 v381 = 2082;
                v382 = v278;
                __int16 v383 = 2114;
                v384 = v279;
                _os_log_impl( &dword_181A5C000,  v272,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] resolver complete, al l children failed",  buf,  0x48u);
              }
            }

            v268 = v367;
            goto LABEL_298;
          }

          uint64_t v293 = *((unsigned int *)v363 + 5);
          if ((_DWORD)v293 && v269 != v293 && (*((_BYTE *)v363 + 24) & 2) == 0) {
            goto LABEL_332;
          }
          id v294 = nw_endpoint_handler_copy_context(v367);
          v369[0] = MEMORY[0x1895F87A8];
          v369[1] = 3221225472LL;
          v369[2] = ___ZL27nw_endpoint_resolver_updateP30NWConcrete_nw_endpoint_handlerPU25objcproto14OS_nw_resolver8NSObject20nw_resolver_status_t_block_invoke_105;
          v369[3] = &unk_189BC93A0;
          v370 = v367;
          nw_queue_context_async(v294, v369);

          dns_int error = v370;
LABEL_331:

          goto LABEL_332;
        }
      }

      v280 = v367;
      if (v339 != 2) {
        goto LABEL_332;
      }
      if (nw_endpoint_handler_trigger_agents(v367, 1))
      {
        int v281 = nw_endpoint_handler_get_minimize_logging(v367);
        char v282 = nw_endpoint_handler_get_logging_disabled(v367);
        if (v281)
        {
          if ((v282 & 1) != 0) {
            goto LABEL_308;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v283 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v283, OS_LOG_TYPE_DEBUG))
          {
            v322 = nw_endpoint_handler_get_id_string(v367);
            v323 = nw_endpoint_handler_dry_run_string(v367);
            nw_endpoint_t v324 = nw_endpoint_handler_copy_endpoint(v367);
            v325 = nw_endpoint_get_logging_description(v324);
            v326 = nw_endpoint_handler_state_string(v367);
            v327 = nw_endpoint_handler_mode_string(v367);
            v328 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v367);
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v322;
            *(_WORD *)&buf[22] = 2082;
            v379 = v323;
            *(_WORD *)v380 = 2082;
            *(void *)&v380[2] = v325;
            *(_WORD *)&v380[10] = 2082;
            *(void *)&v380[12] = v326;
            __int16 v381 = 2082;
            v382 = v327;
            __int16 v383 = 2114;
            v384 = v328;
            _os_log_impl( &dword_181A5C000,  v283,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] resolution failed, trying to trigger voluntary agents",  buf,  0x48u);
          }
        }

        else
        {
          if ((v282 & 1) != 0)
          {
LABEL_308:
            nw_endpoint_handler_reset_mode(v280, 0);
            goto LABEL_332;
          }

          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v283 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v283, OS_LOG_TYPE_INFO))
          {
            v284 = nw_endpoint_handler_get_id_string(v367);
            v285 = nw_endpoint_handler_dry_run_string(v367);
            nw_endpoint_t v286 = nw_endpoint_handler_copy_endpoint(v367);
            v287 = nw_endpoint_get_logging_description(v286);
            v288 = nw_endpoint_handler_state_string(v367);
            v289 = nw_endpoint_handler_mode_string(v367);
            v290 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v367);
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v284;
            *(_WORD *)&buf[22] = 2082;
            v379 = v285;
            *(_WORD *)v380 = 2082;
            *(void *)&v380[2] = v287;
            *(_WORD *)&v380[10] = 2082;
            *(void *)&v380[12] = v288;
            __int16 v381 = 2082;
            v382 = v289;
            __int16 v383 = 2114;
            v384 = v290;
            _os_log_impl( &dword_181A5C000,  v283,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] resolution failed, trying to trigger voluntary agents",  buf,  0x48u);
          }
        }

        v280 = v367;
        goto LABEL_308;
      }

      id v296 = nw_endpoint_handler_copy_current_path(v367);
      nw_path_trigger_inactive_cellular_agent_if_necessary(v296);

      v297 = v367;
      LODWORD(v296) = nw_endpoint_handler_get_minimize_logging(v367);
      char v298 = nw_endpoint_handler_get_logging_disabled(v367);
      if ((_DWORD)v296)
      {
        if ((v298 & 1) != 0) {
          goto LABEL_327;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        v299 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v299, OS_LOG_TYPE_DEBUG))
        {
          v329 = nw_endpoint_handler_get_id_string(v367);
          v330 = nw_endpoint_handler_dry_run_string(v367);
          nw_endpoint_t v331 = nw_endpoint_handler_copy_endpoint(v367);
          v332 = nw_endpoint_get_logging_description(v331);
          v333 = nw_endpoint_handler_state_string(v367);
          v334 = nw_endpoint_handler_mode_string(v367);
          v335 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v367);
          *(_DWORD *)buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v329;
          *(_WORD *)&buf[22] = 2082;
          v379 = v330;
          *(_WORD *)v380 = 2082;
          *(void *)&v380[2] = v332;
          *(_WORD *)&v380[10] = 2082;
          *(void *)&v380[12] = v333;
          __int16 v381 = 2082;
          v382 = v334;
          __int16 v383 = 2114;
          v384 = v335;
          _os_log_impl( &dword_181A5C000,  v299,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] resolution failed",  buf,  0x48u);
        }
      }

      else
      {
        if ((v298 & 1) != 0)
        {
LABEL_327:
          int error = nw_resolver_get_error(*((void **)v363 + 1));
          if (error) {
            dns_int error = nw_error_create_dns_error(error);
          }
          else {
            dns_int error = 0LL;
          }
          nw_endpoint_handler_handle_failure(v297);
          v297->event.domain = 2;
          v297->event.event = v262;
          nw_endpoint_handler_report(v297, 0LL, &v297->event.domain, dns_error);
          goto LABEL_331;
        }

        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        v299 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v299, OS_LOG_TYPE_INFO))
        {
          v300 = nw_endpoint_handler_get_id_string(v367);
          v301 = nw_endpoint_handler_dry_run_string(v367);
          nw_endpoint_t v302 = nw_endpoint_handler_copy_endpoint(v367);
          v303 = nw_endpoint_get_logging_description(v302);
          v304 = nw_endpoint_handler_state_string(v367);
          v305 = nw_endpoint_handler_mode_string(v367);
          v306 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v367);
          *(_DWORD *)buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_update";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v300;
          *(_WORD *)&buf[22] = 2082;
          v379 = v301;
          *(_WORD *)v380 = 2082;
          *(void *)&v380[2] = v303;
          *(_WORD *)&v380[10] = 2082;
          *(void *)&v380[12] = v304;
          __int16 v381 = 2082;
          v382 = v305;
          __int16 v383 = 2114;
          v384 = v306;
          _os_log_impl( &dword_181A5C000,  v299,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] resolution failed",  buf,  0x48u);
        }
      }

      v297 = v367;
      goto LABEL_327;
    }

    unsigned int v338 = a3;
    __nwlog_obj();
    BOOL v94 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_parameters_get_fail_if_svcb_received";
    int v337 = 12;
    v336 = buf;
    unsigned int v95 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v376[0]) = 16;
    LOBYTE(v372) = 0;
    if (__nwlog_fault(v95, v376, &v372))
    {
      if (LOBYTE(v376[0]) == 17)
      {
        __nwlog_obj();
        unsigned int v96 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v97 = v376[0];
        if (os_log_type_enabled(v96, v376[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_get_fail_if_svcb_received";
          _os_log_impl(&dword_181A5C000, v96, v97, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if ((_BYTE)v372)
      {
        BOOL v98 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        unsigned int v96 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v99 = v376[0];
        BOOL v100 = os_log_type_enabled(v96, v376[0]);
        if (v98)
        {
          if (v100)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_parameters_get_fail_if_svcb_received";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v98;
            _os_log_impl( &dword_181A5C000,  v96,  v99,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v98);
          goto LABEL_117;
        }

        if (v100)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_get_fail_if_svcb_received";
          _os_log_impl(&dword_181A5C000, v96, v99, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        unsigned int v96 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v108 = v376[0];
        if (os_log_type_enabled(v96, v376[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_get_fail_if_svcb_received";
          _os_log_impl( &dword_181A5C000,  v96,  v108,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

        if (!v39) {
          goto LABEL_299;
        }
        id v118 = a2->identifier;
        if (!v118) {
          id v118 = (nw_protocol_identifier *)"invalid";
        }
        *(_DWORD *)buf = 136446722;
        __int128 v129 = "__nw_protocol_disconnected";
        __int128 v130 = 2082;
        id v131 = (nw_protocol *)v118;
        goto LABEL_297;
      }
    }

    else
    {
      if (gLogDatapath)
      {
        BOOL v114 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v114, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          __int128 v129 = "nw_protocol_plugin_retry_disconnect";
          __int128 v130 = 2048;
          id v131 = a1;
          v132 = 2048;
          __int16 v133 = a2;
          _os_log_impl( &dword_181A5C000,  v114,  OS_LOG_TYPE_DEBUG,  "%{public}s %p sending disconnected immediately to %p without disconnect",  buf,  0x20u);
        }
      }

      os_log_type_t v28 = a2->handle;
      if (v28 == &nw_protocol_ref_counted_handle)
      {
        BOOL v48 = a2[1].callbacks;
        if (v48) {
          a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v48->add_input_handler + 1);
        }
      }

      os_log_type_t v30 = a1->handle;
      if (v30 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v49 = a1[1].callbacks;
        if (v49) {
          a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v49->add_input_handler + 1);
        }
      }

      nw_endpoint_t v50 = a2->callbacks;
      if (v50)
      {
        disconnected = (void (*)(nw_protocol *, nw_protocol *))v50->disconnected;
        if (disconnected) {
          goto LABEL_99;
        }
      }

      __nwlog_obj();
      os_log_type_t v102 = a2->identifier;
      *(_DWORD *)buf = 136446722;
      __int128 v129 = "__nw_protocol_disconnected";
      if (!v102) {
        os_log_type_t v102 = (nw_protocol_identifier *)"invalid";
      }
      __int128 v130 = 2082;
      id v131 = (nw_protocol *)v102;
      v132 = 2048;
      __int16 v133 = a2;
      BOOL v35 = (char *)_os_log_send_and_compose_impl();
      nw_endpoint_type_t type = OS_LOG_TYPE_ERROR;
      __int128 v126 = 0;
      if (type == OS_LOG_TYPE_FAULT) {
        goto LABEL_213;
      }
      if (v126)
      {
        os_log_type_t v45 = (char *)__nw_create_backtrace_string();
        os_log_type_t v37 = (os_log_s *)__nwlog_obj();
        BOOL v38 = type;
        uint64_t v39 = os_log_type_enabled(v37, type);
        if (v45)
        {
          if (!v39) {
            goto LABEL_248;
          }
          if (a2->identifier) {
            int v115 = a2->identifier;
          }
          else {
            int v115 = (nw_protocol_identifier *)"invalid";
          }
          *(_DWORD *)buf = 136446978;
          __int128 v129 = "__nw_protocol_disconnected";
          __int128 v130 = 2082;
          id v131 = (nw_protocol *)v115;
          v132 = 2048;
          __int16 v133 = a2;
          id v134 = 2082;
LABEL_247:
          double v135 = v45;
          _os_log_impl( &dword_181A5C000,  v37,  v38,  "%{public}s protocol %{public}s (%p) has invalid disconnected callback, dumping backtrace:%{public}s",  buf,  0x2Au);
LABEL_248:
          free(v45);
          if (!v35) {
            goto LABEL_100;
          }
          goto LABEL_300;
        }

        goto LABEL_267;
      }
    }

    os_log_type_t v37 = (os_log_s *)__nwlog_obj();
    BOOL v38 = type;
    if (!os_log_type_enabled(v37, type)) {
      goto LABEL_299;
    }
    nw_endpoint_t v116 = a2->identifier;
    if (!v116) {
      nw_endpoint_t v116 = (nw_protocol_identifier *)"invalid";
    }
    *(_DWORD *)buf = 136446722;
    __int128 v129 = "__nw_protocol_disconnected";
    __int128 v130 = 2082;
    id v131 = (nw_protocol *)v116;
    goto LABEL_288;
  }

  if (v75) {
    free(v75);
  }
  return 0LL;
}

    free(backtrace_string);
    if (!v110) {
      goto LABEL_317;
    }
    goto LABEL_316;
  }

  if (v11 == &__block_literal_global_18956)
  {
    __nwlog_obj();
    unsigned int v121 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v163 = "nw_parameters_create_secure_http_messaging";
    BOOL v110 = (char *)_os_log_send_and_compose_impl();

    nw_endpoint_type_t type = OS_LOG_TYPE_ERROR;
    __int16 v160 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v111 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      unsigned int v122 = type;
      if (os_log_type_enabled(v111, type))
      {
        *(_DWORD *)buf = 136446210;
        id v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl( &dword_181A5C000,  v111,  v122,  "%{public}s called with null (configure_http_messaging != (_nw_parameters_configure_protocol_disable))",  buf,  0xCu);
      }

    if (v209) {
      free(v209);
    }
    nw_endpoint_t v88 = 0;
LABEL_121:
    *((_BYTE *)object + 97) = *((_BYTE *)object + 97) & 0xBF | v88;
    char v89 = v250;
    alloca = v89[4];
    int v242 = v89;

    else {
      v90 = 0;
    }
    *((_BYTE *)object + 96) = *((_BYTE *)object + 96) & 0xFD | v90;
    else {
      v91 = 0;
    }
    *((_BYTE *)object + 96) = *((_BYTE *)object + 96) & 0xFB | v91;
    __int16 v92 = v89;
    os_log_type_t v237 = v92[5];

    uint32_t v93 = (OS_nw_array *)nw_parameters_copy_custom_proxy_configs(alloca);
    BOOL v94 = object->custom_proxy_configs;
    object->custom_proxy_configs = v93;

    unsigned int v95 = (unsigned __int8 *)object->custom_proxy_configs;
    if (v95)
    {
      *((_BYTE *)object + 97) |= 0x20u;
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      LOBYTE(v280) = 0;
      v260[0] = MEMORY[0x1895F87A8];
      v260[1] = 3221225472LL;
      v260[2] = __49__NWConcrete_nw_endpoint_proxy_startWithHandler___block_invoke;
      v260[3] = &unk_189BC50D0;
      v260[4] = buf;
      nw_array_apply(v95, (uint64_t)v260);
      if (*(_BYTE *)(*(void *)&buf[8] + 24LL))
      {
        unsigned int v96 = nw_array_create();
        os_log_type_t v97 = (unsigned __int8 *)object->custom_proxy_configs;
        v257[0] = MEMORY[0x1895F87A8];
        v257[1] = 3221225472LL;
        v257[2] = __49__NWConcrete_nw_endpoint_proxy_startWithHandler___block_invoke_2;
        v257[3] = &unk_189BC5030;
        BOOL v98 = (OS_nw_array *)(id)v96;
        v258 = v98;
        v259 = v237;
        nw_array_apply(v97, (uint64_t)v257);
        os_log_type_t v99 = object->custom_proxy_configs;
        object->custom_proxy_configs = v98;
        BOOL v100 = v98;
      }

      _Block_object_dispose(buf, 8);
    }

    os_log_type_t v101 = v92;
    os_unfair_lock_lock((os_unfair_lock_t)v101 + 28);
    os_log_type_t v102 = v101[8];
    lock = (os_unfair_lock_s *)(v101 + 14);
    os_unfair_lock_unlock((os_unfair_lock_t)v101 + 28);
    v235 = v101;

    nw_endpoint_t v103 = (OS_nw_array *)nw_path_copy_proxy_configs(v102);
    os_log_type_t v104 = object->path_proxy_configs;
    object->path_proxy_configs = v103;

    int v105 = object;
    if (!object->custom_proxy_configs && object->path_proxy_configs)
    {
      int v106 = nw_array_create();
      int v107 = (unsigned __int8 *)object->path_proxy_configs;
      v253[0] = MEMORY[0x1895F87A8];
      v253[1] = 3221225472LL;
      v253[2] = __49__NWConcrete_nw_endpoint_proxy_startWithHandler___block_invoke_3;
      v253[3] = &unk_189BC6DB0;
      __int16 v254 = v237;
      v255 = v243;
      os_log_type_t v108 = (OS_nw_array *)(id)v106;
      uint64_t v256 = v108;
      nw_array_apply(v107, (uint64_t)v253);
      v109 = object->path_proxy_configs;
      object->path_proxy_configs = v108;
      BOOL v110 = v108;

      int v105 = object;
    }

    else {
      id v111 = 0;
    }
    *((_BYTE *)v105 + 97) = *((_BYTE *)v105 + 97) & 0xEF | v111;
    BOOL v112 = v235;
    v239[30] = 2;
    __int16 v244 = v112;

    *((_DWORD *)v244 + 20) = 65540;
    v238 = v244 + 10;
    nw_endpoint_handler_report(v244, 0LL, (_WORD *)v244 + 40, 0LL);
    uint64_t v113 = v244;
    BOOL v114 = nw_endpoint_handler_copy_proxy(v113);
    int v115 = v114;
    nw_endpoint_t v116 = 40LL;
    if (!*((void *)v114 + 5)) {
      nw_endpoint_t v116 = 48LL;
    }
    unsigned int v117 = *(id *)((char *)v114 + v116);
    v245 = v113;
    objecta = (unsigned __int8 *)v117;
    id v118 = nw_endpoint_handler_copy_proxy(v245);
    unsigned int v119 = v118;
    __int16 v261 = 0LL;
    __int16 v262 = (uint64_t)&v261;
    uint64_t v263 = 0x2020000000LL;
    LOBYTE(v264) = 0;
    if (objecta && v118)
    {
      *(void *)nw_endpoint_type_t type = MEMORY[0x1895F87A8];
      v270 = 3221225472LL;
      v271 = (uint64_t)___ZL31nw_endpoint_proxy_check_for_pacP30NWConcrete_nw_endpoint_handlerPU22objcproto11OS_nw_array8NSObject_block_invoke;
      v272 = (uint64_t (*)(uint64_t, uint64_t))&unk_189BC7960;
      v273 = v118;
      v274 = (NWConcrete_nw_proxy_config *)&v261;
      nw_array_apply(objecta, (uint64_t)type);
    }

    uint64_t v120 = v245;
    unsigned int v121 = (v250[67] & 0x20) == 0;

    if (v121)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      unsigned int v122 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v122, OS_LOG_TYPE_DEBUG))
      {
        BOOL v123 = v120;

        unsigned int v124 = v123;
        v125 = (v250[67] & 1) == 0;

        if (v125) {
          __int128 v126 = "";
        }
        else {
          __int128 v126 = "dry-run ";
        }
        nw_endpoint_t v127 = nw_endpoint_handler_copy_endpoint(v124);
        id v128 = nw_endpoint_get_logging_description(v127);
        __int128 v129 = v124;
        __int128 v130 = v129;
        id v131 = v239[30];
        else {
          v132 = off_189BBBBF0[v131];
        }
        v228 = v132;

        __int16 v133 = v130;
        id v134 = v133;
        __int16 v246 = "path";
        switch(v232[29])
        {
          case 0u:
            goto LABEL_162;
          case 1u:
            double v135 = "resolver";
            goto LABEL_161;
          case 2u:
            __int16 v246 = nw_endpoint_flow_mode_string(v133[31]);
            goto LABEL_162;
          case 3u:
            double v135 = "proxy";
            goto LABEL_161;
          case 4u:
            double v135 = "fallback";
            goto LABEL_161;
          case 5u:
            double v135 = "transform";
            goto LABEL_161;
          default:
            double v135 = "unknown-mode";
LABEL_161:
            __int16 v246 = v135;
LABEL_162:

            __int16 v136 = v134;
            os_unfair_lock_lock(lock);
            unsigned int v137 = v235[8];
            os_unfair_lock_unlock(lock);

            __int16 v138 = *(_BYTE *)(v262 + 24) == 0;
            *(_DWORD *)buf = 136448002;
            *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_check_for_pac";
            if (v138) {
              unsigned int v139 = "does not have";
            }
            else {
              unsigned int v139 = "has";
            }
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v123->id_str;
            *(_WORD *)&buf[22] = 2082;
            v280 = (uint64_t (*)(uint64_t, uint64_t))v126;
            *(_WORD *)int v281 = 2082;
            *(void *)&v281[2] = v128;
            *(_WORD *)&v281[10] = 2082;
            *(void *)&v281[12] = v228;
            *(_WORD *)&v281[20] = 2082;
            *(void *)&v281[22] = v246;
            *(_WORD *)&v281[30] = 2114;
            char v282 = v137;
            v283 = 2080;
            v284 = v139;
            _os_log_impl( &dword_181A5C000,  v122,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] proxy %s PAC",  buf,  0x52u);

            break;
        }
      }
    }

    _Block_object_dispose(&v261, 8);

    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    v280 = __Block_byref_object_copy__26348;
    *(void *)int v281 = __Block_byref_object_dispose__26349;
    *(void *)&v281[8] = 0LL;
    *(void *)nw_endpoint_type_t type = MEMORY[0x1895F87A8];
    v270 = 3221225472LL;
    v271 = (uint64_t)___ZL43nw_endpoint_proxy_check_for_companion_proxyPU22objcproto11OS_nw_array8NSObject_block_invoke;
    v272 = (uint64_t (*)(uint64_t, uint64_t))&unk_189BC50D0;
    v273 = (void (*)(uint64_t))buf;
    nw_array_apply(objecta, (uint64_t)type);
    BOOL v247 = *(id *)(*(void *)&buf[8] + 40LL);
    _Block_object_dispose(buf, 8);

    uint64_t v140 = v120;
    v141 = nw_endpoint_handler_copy_proxy(v140);
    uint64_t v142 = (const void *)*((void *)v141 + 8);
    if (v142)
    {
      CFRelease(v142);
      *((void *)v141 + _Block_object_dispose(va, 8) = 0LL;
    }

    uint64_t v143 = v140;
    unint64_t v144 = v242[4];

    unint64_t v145 = nw_parameters_copy_url_endpoint(v144);
    uint64_t v146 = v145;
    if (v145)
    {
      v147 = (const __CFURL *)nw_endpoint_copy_cfurl(v145);
      *((void *)v141 + _Block_object_dispose(va, 8) = v147;
      if (!v147) {
        goto LABEL_209;
      }
    }

    else
    {
      __int16 v148 = nw_endpoint_handler_copy_endpoint(v143);
      nw_endpoint_t v149 = *((_BYTE *)v141 + 97);
      type[0] = OS_LOG_TYPE_DEFAULT;
      log = v148;
      BOOL v150 = nw_endpoint_proxy_copy_synthesized_url(v148, v144, (v149 & 2) == 0, type);
      *((void *)v141 + _Block_object_dispose(va, 8) = v150;
      id v151 = v150 == 0LL;
      __int16 v152 = v143;
      v153 = *((_BYTE *)v250 + 268);

      if (v151)
      {
        if ((v153 & 0x20) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v164 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v164, OS_LOG_TYPE_DEBUG))
          {
            id v165 = nw_endpoint_handler_get_id_string(v152);
            v233 = nw_endpoint_handler_dry_run_string(v152);
            char v236 = v165;
            __int16 v240 = nw_endpoint_handler_copy_endpoint(v152);
            BOOL v166 = nw_endpoint_get_logging_description(v240);
            id v167 = nw_endpoint_handler_state_string(v152);
            v168 = nw_endpoint_handler_mode_string(v152);
            os_log_type_t v169 = nw_endpoint_handler_copy_current_path(v152);
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_fillout_url";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v236;
            *(_WORD *)&buf[22] = 2082;
            v280 = (uint64_t (*)(uint64_t, uint64_t))v233;
            *(_WORD *)int v281 = 2082;
            *(void *)&v281[2] = v166;
            *(_WORD *)&v281[10] = 2082;
            *(void *)&v281[12] = v167;
            *(_WORD *)&v281[20] = 2082;
            *(void *)&v281[22] = v168;
            *(_WORD *)&v281[30] = 2114;
            char v282 = v169;
            _os_log_impl( &dword_181A5C000,  v164,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to synthesize URL",  buf,  0x48u);
          }
        }
      }

      else
      {
        if ((v153 & 0x20) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          __int16 v154 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v154, OS_LOG_TYPE_DEBUG))
          {
            nw_endpoint_t v226 = v154;
            nw_endpoint_t v155 = v152;

            __int16 v156 = v155;
            v157 = (v250[67] & 1) == 0;

            if (v157) {
              __int16 v158 = "";
            }
            else {
              __int16 v158 = "dry-run ";
            }
            uint64_t v159 = nw_endpoint_handler_copy_endpoint(v156);
            v225 = nw_endpoint_get_logging_description(v159);
            __int16 v160 = v156;
            nw_endpoint_t v161 = v160;
            __int16 v162 = v239[30];
            unint64_t v224 = (uint64_t (*)(uint64_t, uint64_t))v158;
            else {
              id v163 = off_189BBBBF0[v162];
            }
            v241 = v163;

            BOOL v170 = v161;
            v171 = v170;
            v172 = "path";
            switch(v232[29])
            {
              case 0u:
                break;
              case 1u:
                v172 = "resolver";
                break;
              case 2u:
                v172 = nw_endpoint_flow_mode_string(v170[31]);
                break;
              case 3u:
                v172 = "proxy";
                break;
              case 4u:
                v172 = "fallback";
                break;
              case 5u:
                v172 = "transform";
                break;
              default:
                v172 = "unknown-mode";
                break;
            }

            v234 = (v149 & 2) == 0;

            os_log_type_t v173 = v171;
            os_unfair_lock_lock(lock);
            BOOL v174 = v235[8];
            os_unfair_lock_unlock(lock);

            v175 = (const char *)*((void *)v141 + 8);
            *(_DWORD *)buf = 136448514;
            *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_fillout_url";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v155->id_str;
            *(_WORD *)&buf[22] = 2082;
            v280 = v224;
            *(_WORD *)int v281 = 2082;
            *(void *)&v281[2] = v225;
            *(_WORD *)&v281[10] = 2082;
            *(void *)&v281[12] = v241;
            *(_WORD *)&v281[20] = 2082;
            *(void *)&v281[22] = v172;
            *(_WORD *)&v281[30] = 2114;
            char v282 = v174;
            v283 = 2114;
            v284 = v175;
            v285 = 1024;
            nw_endpoint_t v286 = v234;
            v287 = 1024;
            v288 = type[0];
            _os_log_impl( &dword_181A5C000,  v226,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Synthesized URL %{public} @ (allowed to override scheme: %u, overrode scheme %u)",  buf,  0x5Eu);

            __int16 v154 = v226;
          }
        }

        *((_BYTE *)v141 + 96) |= 0x40u;
        *((_BYTE *)v141 + 97) = *((_BYTE *)v141 + 97) & 0xFE | type[0];
      }

      v147 = (const __CFURL *)*((void *)v141 + 8);
      if (!v147) {
        goto LABEL_209;
      }
    }

    os_log_type_t v176 = CFURLCopyScheme(v147);
    BOOL v177 = v176;
    if (!v176)
    {
LABEL_209:

      os_log_type_t v180 = nw_array_create();
      BOOL v181 = (void *)*((void *)v115 + 7);
      *((void *)v115 + 7) = v180;

      *((_BYTE *)v115 + 96) &= ~0x20u;
      *((_DWORD *)v115 + 6) = 0;
      if ((*((_BYTE *)v115 + 97) & 0x40) != 0)
      {
        direct = nw_proxy_config_create_direct();
        if (direct) {
          nw_array_append(*((void *)v115 + 7), direct);
        }
      }

      else
      {
        v182 = v143;
        direct = (NWConcrete_nw_proxy_config *)v242[4];

        no_proxy = nw_parameters_get_no_proxy(direct);
        prefer_no_proxy = nw_parameters_get_prefer_no_proxy((nw_parameters_t)direct);
        v186 = nw_array_create();
        aBlock[0] = MEMORY[0x1895F87A8];
        aBlock[1] = 3221225472LL;
        aBlock[2] = ___ZL32nw_endpoint_proxy_process_configP30NWConcrete_nw_endpoint_handler_block_invoke;
        aBlock[3] = &unk_189BC85B0;
        os_log_type_t v187 = (id)v186;
        v278 = v187;
        v188 = _Block_copy(aBlock);
        nw_array_apply(*((unsigned __int8 **)v115 + 6), (uint64_t)v188);
        nw_array_apply(*((unsigned __int8 **)v115 + 5), (uint64_t)v188);
        *(void *)buf = MEMORY[0x1895F87A8];
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&buf[16] = ___ZL32nw_endpoint_proxy_process_configP30NWConcrete_nw_endpoint_handler_block_invoke_2;
        v280 = (uint64_t (*)(uint64_t, uint64_t))&unk_189BC13F0;
        v189 = v182;
        *(void *)int v281 = v189;
        *(void *)&v281[8] = direct;
        v190 = v187;
        *(void *)&v281[16] = v190;
        id v191 = v247;
        *(void *)&v281[24] = v191;
        nw_array_apply(objecta, (uint64_t)buf);
        v192 = prefer_no_proxy | no_proxy;
        if ((prefer_no_proxy | no_proxy) == 1)
        {
          v193 = nw_proxy_config_create_direct();
          if (v193) {
            nw_array_append(*((void *)v115 + 7), v193);
          }
        }

        if ((no_proxy & 1) == 0)
        {
          *(void *)nw_endpoint_type_t type = MEMORY[0x1895F87A8];
          v270 = 3221225472LL;
          v271 = (uint64_t)___ZL32nw_endpoint_proxy_process_configP30NWConcrete_nw_endpoint_handler_block_invoke_3;
          v272 = (uint64_t (*)(uint64_t, uint64_t))&unk_189BC13F0;
          v273 = v189;
          v274 = direct;
          nw_endpoint_t v275 = v190;
          v276 = v191;
          nw_array_apply(objecta, (uint64_t)type);
        }

        if ((v192 & 1) == 0 && ((*((_BYTE *)v115 + 96) & 0x20) == 0 || nw_array_is_empty(*((void *)v115 + 7))))
        {
          v194 = nw_proxy_config_create_direct();
          if (v194) {
            nw_array_append(*((void *)v115 + 7), v194);
          }
        }

        if ((no_proxy & 1) == 0)
        {
          __int16 v261 = MEMORY[0x1895F87A8];
          __int16 v262 = 3221225472LL;
          uint64_t v263 = (uint64_t)___ZL32nw_endpoint_proxy_process_configP30NWConcrete_nw_endpoint_handler_block_invoke_4;
          uint64_t v264 = &unk_189BC13F0;
          uint64_t v265 = v189;
          uint64_t v266 = direct;
          uint64_t v267 = v190;
          v268 = v191;
          nw_array_apply(objecta, (uint64_t)&v261);
        }
      }

      *((_DWORD *)v244 + 20) = 131076;
      nw_endpoint_handler_report(v143, 0LL, v238, 0LL);

      os_log_type_t v195 = v143;
      BOOL v196 = (id *)nw_endpoint_handler_copy_proxy(v195);
      *((_DWORD *)v244 + 20) = 196612;
      nw_endpoint_handler_report(v195, 0LL, v238, 0LL);
      *(void *)nw_endpoint_type_t type = 0LL;
      v270 = (uint64_t)type;
      v271 = 0x3032000000LL;
      v272 = __Block_byref_object_copy__26348;
      v273 = __Block_byref_object_dispose__26349;
      v274 = 0LL;
      v197 = (unsigned __int8 *)v196[7];
      *(void *)buf = MEMORY[0x1895F87A8];
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&buf[16] = ___ZL32nw_endpoint_proxy_resolve_configP30NWConcrete_nw_endpoint_handler_block_invoke;
      v280 = (uint64_t (*)(uint64_t, uint64_t))&unk_189BC1378;
      os_log_type_t v198 = v195;
      *(void *)int v281 = v198;
      BOOL v199 = v196;
      *(void *)&v281[8] = v199;
      *(void *)&v281[16] = type;
      nw_array_apply(v197, (uint64_t)buf);
      os_log_type_t v200 = *(void **)(v270 + 40);
      if (v200) {
        objc_storeStrong(v196 + 7, v200);
      }
      nw_endpoint_proxy_complete_resolve(v198);

      _Block_object_dispose(type, 8);
      goto LABEL_230;
    }

    if (CFStringCompare(v176, @"https", 1uLL) && CFStringCompare(v177, @"wss", 1uLL))
    {
      if (CFStringCompare(v177, @"http", 1uLL) && CFStringCompare(v177, @"ws", 1uLL)) {
        goto LABEL_208;
      }
      v178 = 0x80;
      uint64_t v179 = 97LL;
    }

    else
    {
      v178 = 1;
      uint64_t v179 = 98LL;
    }

    *((_BYTE *)v141 + v179) |= v178;
LABEL_208:
    CFRelease(v177);
    goto LABEL_209;
  }

  free(v56);
  if (v47) {
LABEL_275:
  }
    free(v47);
}

                                if (*(_BYTE *)(a2 + *v8)) {
                                  unsigned int v96 = 0;
                                }
LABEL_269:
                                *(_DWORD *)(a1 + 12) = v96;
                                goto LABEL_4;
                              case 6u:
                                *(_BYTE *)(a1 + 44) |= 1u;
                                BOOL v247 = *v3;
                                __int16 v248 = *(void *)(a2 + v247);
                                if (v248 == -1LL || v248 >= *(void *)(a2 + *v6))
                                {
                                  id v251 = 0;
LABEL_291:
                                  *(_BYTE *)(a2 + *v_Block_object_dispose(va, 8) = 1;
                                  goto LABEL_292;
                                }

                                v249 = v248 + 1;
                                __int16 v250 = *(_BYTE *)(*(void *)(a2 + *v10) + v248);
                                *(void *)(a2 + v247) = v249;
                                id v251 = v250 & 0x7F;
                                if ((v250 & 0x80) == 0) {
                                  goto LABEL_292;
                                }
                                nw_endpoint_t v252 = *v3;
                                unint64_t v253 = *(void *)(a2 + v252);
                                if (v253 == -1LL || v253 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_291;
                                }
                                __int16 v254 = *(char *)(*(void *)(a2 + *v10) + v253);
                                *(void *)(a2 + v252) = v253 + 1;
                                id v251 = v251 & 0xFFFFC07F | ((v254 & 0x7F) << 7);
                                if ((v254 & 0x80000000) == 0) {
                                  goto LABEL_292;
                                }
                                v255 = *v3;
                                uint64_t v256 = *(void *)(a2 + v255);
                                if (v256 == -1LL || v256 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_291;
                                }
                                v257 = *(char *)(*(void *)(a2 + *v10) + v256);
                                *(void *)(a2 + v255) = v256 + 1;
                                id v251 = v251 & 0xFFE03FFF | ((v257 & 0x7F) << 14);
                                if ((v257 & 0x80000000) == 0) {
                                  goto LABEL_292;
                                }
                                v258 = *v3;
                                v259 = *(void *)(a2 + v258);
                                if (v259 == -1LL || v259 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_291;
                                }
                                nw_endpoint_type_t v260 = *(char *)(*(void *)(a2 + *v10) + v259);
                                *(void *)(a2 + v25_Block_object_dispose(va, 8) = v259 + 1;
                                id v251 = v251 & 0xF01FFFFF | ((v260 & 0x7F) << 21);
                                if ((v260 & 0x80000000) == 0) {
                                  goto LABEL_292;
                                }
                                __int16 v261 = *v3;
                                __int16 v262 = *(void *)(a2 + v261);
                                if (v262 == -1LL || v262 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_291;
                                }
                                uint64_t v263 = v262 + 1;
                                uint64_t v264 = *(char *)(*(void *)(a2 + *v10) + v262);
                                *(void *)(a2 + v261) = v263;
                                v251 |= v264 << 28;
                                if ((v264 & 0x80000000) == 0) {
                                  goto LABEL_292;
                                }
                                uint64_t v265 = *v3;
                                uint64_t v266 = *(void *)(a2 + v265);
                                if (v266 == -1LL || v266 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_291;
                                }
                                uint64_t v267 = v266 + 1;
                                v268 = *(char *)(*(void *)(a2 + *v10) + v266);
                                *(void *)(a2 + v265) = v267;
                                if ((v268 & 0x80000000) == 0) {
                                  goto LABEL_292;
                                }
                                uint64_t v269 = *v3;
                                v270 = *(void *)(a2 + v269);
                                if (v270 == -1LL || v270 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_291;
                                }
                                v271 = v270 + 1;
                                v272 = *(char *)(*(void *)(a2 + *v10) + v270);
                                *(void *)(a2 + v269) = v271;
                                if ((v272 & 0x80000000) == 0) {
                                  goto LABEL_292;
                                }
                                v273 = *v3;
                                v274 = *(void *)(a2 + v273);
                                if (v274 == -1LL || v274 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_291;
                                }
                                nw_endpoint_t v275 = v274 + 1;
                                v276 = *(char *)(*(void *)(a2 + *v10) + v274);
                                *(void *)(a2 + v273) = v275;
                                if ((v276 & 0x80000000) == 0) {
                                  goto LABEL_292;
                                }
                                v277 = *v3;
                                v278 = *(void *)(a2 + v277);
                                if (v278 == -1LL || v278 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_291;
                                }
                                v279 = v278 + 1;
                                v280 = *(char *)(*(void *)(a2 + *v10) + v278);
                                *(void *)(a2 + v277) = v279;
                                if ((v280 & 0x80000000) == 0) {
                                  goto LABEL_292;
                                }
                                int v281 = *v3;
                                char v282 = *(void *)(a2 + v281);
                                if (v282 == -1LL || v282 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_291;
                                }
                                v283 = v282 + 1;
                                v284 = *(char *)(*(void *)(a2 + *v10) + v282);
                                *(void *)(a2 + v281) = v283;
                                if (v284 < 0)
                                {
                                  id v251 = 0;
                                  goto LABEL_294;
                                }

      _os_log_impl(&dword_181A5C000, v277, OS_LOG_TYPE_DEFAULT, v276, buf, v278);
      nw_endpoint_t v50 = v368;
      uint64_t v49 = v171;
      goto LABEL_272;
    }

    if ((v3 & 1) != 0)
    {
      __int16 v79 = v49;
      nw_endpoint_t v80 = *((void *)&off_189BC7440 + nw_connection_get_tls_version(v1));
      if (v386)
      {
        if ((*((_BYTE *)v1 + 109) & 4) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          __int16 v57 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
          {
            v364 = v50;
            v357 = v79;
            __int16 v81 = v1->top_id;
            uint64_t v82 = nw_endpoint_get_logging_description(v1->endpoint);
            __int16 v83 = v1->parameters;
            int v84 = nw_endpoint_handler_get_id_string(v48);
            os_log_type_t v85 = nw_endpoint_get_description(v79);
            v86 = nw_endpoint_get_logging_description(v364);
            else {
              uint64_t v87 = off_189BB70A8[privacy_stance - 1];
            }
            v347 = *((void *)v386 + 1);
            uint64_t v348 = *((void *)v386 + 5);
            uint64_t v349 = *((void *)v386 + 6);
            v351 = *((void *)v386 + 8);
            v350 = *((void *)v386 + 9);
            v352 = *((void *)v386 + 10);
            v353 = *((void *)v386 + 11);
            v354 = *((void *)v386 + 13);
            v356 = *((void *)v386 + 14);
            v355 = *((void *)v386 + 15);
            *(void *)&v405[138] = *((void *)v386 + 12);
            *(void *)&v405[158] = v356;
            *(_DWORD *)v388 = v81;
            *(void *)&v388[12] = v1->top_uuid;
            *(void *)&v388[22] = v82;
            *(void *)&v389[2] = v83;
            v391 = v84;
            *(_WORD *)&v388[4] = 1042;
            v392 = 1042;
            *(_DWORD *)&v388[6] = 16;
            v393 = 16;
            *(_WORD *)&v388[10] = 2098;
            v394 = 2098;
            v395 = v410;
            v397 = v85;
            v399 = v86;
            *(_WORD *)uint64_t v389 = 2114;
            v400 = 2114;
            *(void *)v403 = v87;
            v404[0] = v362 / 0x3E8;
            *(_DWORD *)((char *)&v404[1] + 2) = v362 % 0x3E8;
            *(void *)v405 = v383;
            *(_DWORD *)&v405[10] = v382 / 0x3E8;
            *(_DWORD *)&v405[16] = v382 % 0x3E8;
            *(_DWORD *)&v405[22] = transport_connect_milliseconds / 0x3E8;
            *(_DWORD *)&v405[28] = transport_connect_milliseconds % 0x3E8;
            *(_WORD *)&v388[20] = 2082;
            v390 = 2082;
            v396 = 2082;
            v398 = 2082;
            v402 = 2082;
            HIWORD(v404[2]) = 2082;
            *(_WORD *)&v405[32] = 2082;
            *(void *)&v405[34] = v80;
            *(_DWORD *)&v405[44] = handshake_ms_for_protocol / 0x3E8;
            *(_DWORD *)&v405[50] = handshake_ms_for_protocol % 0x3E8;
            *(void *)&v405[56] = v349;
            *(void *)&v405[66] = v350;
            *(void *)&v405[76] = v347;
            *(void *)&v405[86] = v348;
            *(_DWORD *)&v405[96] = v355 / 0x3E8;
            *(_DWORD *)&v405[102] = v355 % 0x3E8;
            *(void *)&v405[108] = v352;
            *(void *)&v405[118] = v351;
            *(void *)&v405[128] = v353;
            *(void *)&v405[148] = v354;
            *(_WORD *)&v405[54] = 2048;
            *(_WORD *)&v405[64] = 2048;
            *(_WORD *)&v405[74] = 2048;
            *(_WORD *)&v405[84] = 2048;
            *(_WORD *)&v405[106] = 2048;
            *(_WORD *)&v405[116] = 2048;
            *(_WORD *)&v405[126] = 2048;
            *(_WORD *)&v405[136] = 2048;
            *(_WORD *)&v405[146] = 2048;
            *(_WORD *)&v405[156] = 2048;
            LOWORD(v404[1]) = 1024;
            *(_WORD *)&v405[8] = 1024;
            *(_WORD *)&v405[14] = 1024;
            *(_WORD *)&v405[20] = 1024;
            *(_WORD *)&v405[26] = 1024;
            *(_WORD *)&v405[42] = 1024;
            *(_WORD *)&v405[48] = 1024;
            *(_WORD *)&v405[94] = 1024;
            *(_WORD *)&v405[100] = 1024;
            *(_WORD *)&v403[8] = 1024;
            *(_DWORD *)buf = 67117570;
            v401 = v370;
            v295 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                   "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                   "\tConnected Path: %{public}@\n"
                   "\tPrivacy Stance: %{public}s\n"
                   "\tDuration: %u.%03us, %{public}s @%u.%03us took %u.%03us, %{public}s took %u.%03us\n"
                   "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-o"
                   "f-order bytes: %llu\n"
                   "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
            id v296 = v57;
            v297 = 290;
            goto LABEL_270;
          }

          __int128 v129 = *(dispatch_data_s **)(a1 + 160);
          if (!v129 || *(_BYTE *)(a1 + 208)) {
            goto LABEL_269;
          }
          nw_endpoint_t v149 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL);
          BOOL v150 = *(_DWORD *)(a1 + 168) - v149;
          id v151 = v150 >= v21 ? v21 : v150;
          if (!(_DWORD)v151) {
            goto LABEL_269;
          }
          nw_dispatch_data_copyout_from_offset(v129, (uint64_t)&v6[v8], v151, v149);
          *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += v151;
          *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) += v151;
          *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) += v151;
          char v16 = v21 >= v151;
          __int16 v152 = (v21 - v151);
          LODWORD(v21) = v21 - v151;
          if (v16) {
            goto LABEL_388;
          }
          __nwlog_obj();
          *(_DWORD *)buf = 136446978;
          uint64_t v256 = "send_data_callback_block_invoke";
          v257 = 2082;
          v258 = "bodyCopySize";
          v259 = 2048;
          nw_endpoint_type_t v260 = v151;
          __int16 v261 = 2048;
          *(void *)__int16 v262 = v152;
          v153 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          unint64_t v253 = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v153, type, &v253))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              __int16 v154 = (os_log_s *)__nwlog_obj();
              nw_endpoint_t v155 = type[0];
              if (os_log_type_enabled(v154, type[0]))
              {
                *(_DWORD *)buf = 136446978;
                uint64_t v256 = "send_data_callback_block_invoke";
                v257 = 2082;
                v258 = "bodyCopySize";
                v259 = 2048;
                nw_endpoint_type_t v260 = v151;
                __int16 v261 = 2048;
                *(void *)__int16 v262 = v152;
                __int16 v156 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_384:
                _os_log_impl(&dword_181A5C000, v154, v155, v156, buf, 0x2Au);
              }
            }

            else if (v253)
            {
              backtrace_string = (char *)__nw_create_backtrace_string();
              __int16 v154 = (os_log_s *)__nwlog_obj();
              nw_endpoint_t v155 = type[0];
              uint64_t v164 = os_log_type_enabled(v154, type[0]);
              if (backtrace_string)
              {
                if (v164)
                {
                  *(_DWORD *)buf = 136447234;
                  uint64_t v256 = "send_data_callback_block_invoke";
                  v257 = 2082;
                  v258 = "bodyCopySize";
                  v259 = 2048;
                  nw_endpoint_type_t v260 = v151;
                  __int16 v261 = 2048;
                  *(void *)__int16 v262 = v152;
                  *(_WORD *)&v262[8] = 2082;
                  *(void *)&v262[10] = backtrace_string;
                  _os_log_impl( &dword_181A5C000,  v154,  v155,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                }

                free(backtrace_string);
                goto LABEL_385;
              }

              if (v164)
              {
                *(_DWORD *)buf = 136446978;
                uint64_t v256 = "send_data_callback_block_invoke";
                v257 = 2082;
                v258 = "bodyCopySize";
                v259 = 2048;
                nw_endpoint_type_t v260 = v151;
                __int16 v261 = 2048;
                *(void *)__int16 v262 = v152;
                __int16 v156 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
                goto LABEL_384;
              }
            }

            else
            {
              __int16 v154 = (os_log_s *)__nwlog_obj();
              nw_endpoint_t v155 = type[0];
              if (os_log_type_enabled(v154, type[0]))
              {
                *(_DWORD *)buf = 136446978;
                uint64_t v256 = "send_data_callback_block_invoke";
                v257 = 2082;
                v258 = "bodyCopySize";
                v259 = 2048;
                nw_endpoint_type_t v260 = v151;
                __int16 v261 = 2048;
                *(void *)__int16 v262 = v152;
                __int16 v156 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
                goto LABEL_384;
              }
            }
          }

LABEL_337:
}

    _os_log_impl(&dword_181A5C000, v115, v116, v117, buf, 0xCu);
    goto LABEL_338;
  }

  BOOL v46 = a1[4];
  if (v46)
  {
    nw_http_connection_metadata_closed(*(void **)(v46 + 768));
    if ((*(_BYTE *)(v46 + 158) & 1) == 0)
    {
      if (!*((_BYTE *)v12 + 1537)) {
        goto LABEL_64;
      }
      v147 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v147, OS_LOG_TYPE_DEBUG))
      {
        __int16 v148 = *(void *)(v46 + 488);
        nw_endpoint_t v149 = *(_DWORD *)(*(void *)(v46 + 480) + 372LL);
        BOOL v150 = *(_DWORD *)(v46 + 860);
        if (v148) {
          LODWORD(v14_Block_object_dispose(va, 8) = *(_DWORD *)(v148 + 424);
        }
        *(_DWORD *)buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v46 + 74;
        *(_WORD *)&buf[22] = 2080;
        uint64_t v209 = (uint64_t)" ";
        *(_WORD *)v210 = 1024;
        *(_DWORD *)&v210[2] = v149;
        *(_WORD *)&v210[6] = 1024;
        *(_DWORD *)&v210[8] = v150;
        *(_WORD *)&v210[12] = 1024;
        *(_DWORD *)&v210[14] = v148;
        _os_log_impl( &dword_181A5C000,  v147,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> finalizing unprocessed_input_frames",  buf,  0x32u);
      }
    }

    if (*((_BYTE *)v12 + 1537))
    {
      id v151 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v151, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(type) = 136446210;
        *(void *)((char *)&type + 4) = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_181A5C000, v151, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&type, 0xCu);
      }
    }

void sub_181B1E91C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, void *a26, void *a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, void *a32, void *a33, uint64_t a34, uint64_t a35, uint64_t a36, _Unwind_Exception *exception_object, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, char a49)
{
  _Unwind_Resume(a1);
}

BOOL nw_endpoint_resolver_create_child_parameters(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = nw_endpoint_handler_copy_current_path(v1);
  id v3 = nw_endpoint_handler_copy_parameters(v1);
  BOOL v4 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v3,  0,  0);

  if (v4)
  {
    if (nw_path_get_client_id(v2, buf)) {
      nw_parameters_set_parent_id_inner((NWConcrete_nw_parameters *)v4, buf, 0);
    }
    id v5 = (id)v4;
    *(_WORD *)(v5[13] + 108LL) |= 0x800u;

    nw_endpoint_t v6 = nw_endpoint_handler_copy_endpoint(v1);
    if (v6)
    {
      BOOL v7 = *((void *)v6 + 11) == 0LL;

      if (v7)
      {
LABEL_8:
        uint64_t v8 = v5;
        goto LABEL_16;
      }

      nw_endpoint_t v6 = v5;
      *(_WORD *)(v5[13] + 108LL) |= 0x4000u;
    }

    goto LABEL_8;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v9 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  BOOL v21 = "nw_endpoint_resolver_create_child_parameters";
  id v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v11 = (os_log_s *)(id)gLogObj;
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v21 = "nw_endpoint_resolver_create_child_parameters";
      _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s nw_parameters_copy failed", buf, 0xCu);
    }

void sub_181B1F0D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_is_approved_app_domain(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[231] >> 6) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_endpoint_get_is_approved_app_domain";
  nw_endpoint_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_endpoint_get_is_approved_app_domain";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_endpoint_get_is_approved_app_domain";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_endpoint_get_is_approved_app_domain";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_endpoint_get_is_approved_app_domain";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181B1FAEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_alternate_port(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[114];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_endpoint_get_alternate_port";
  nw_endpoint_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_endpoint_get_alternate_port";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_endpoint_get_alternate_port";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_endpoint_get_alternate_port";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_endpoint_get_alternate_port";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

id nw_endpoint_handler_copy_context(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = v1[5];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_endpoint_handler_copy_context";
  nw_endpoint_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_endpoint_handler_copy_context";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null handler", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_endpoint_handler_copy_context";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_endpoint_handler_copy_context";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_endpoint_handler_copy_context";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_endpoint_resolver_start_next_child(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v262 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    __int16 v244 = v1;
    id v2 = v1;
    uint64_t mode = v2->mode;

    if ((_DWORD)mode != 1)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v22 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        else {
          uint64_t v23 = off_189BBBBC0[mode];
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v23;
        __int16 v250 = 2082;
        id v251 = "resolver";
        _os_log_impl( &dword_181A5C000,  v22,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
      }

      goto LABEL_188;
    }

    BOOL v4 = nw_endpoint_handler_copy_resolver(v2);
    id v5 = v2;
    int state = v5->state;

    v243 = v4;
    if ((state & 0xFFFFFFFE) == 4)
    {
      if (nw_endpoint_handler_get_minimize_logging(v5))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        BOOL v11 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          id_string = nw_endpoint_handler_get_id_string(v5);
          id v165 = nw_endpoint_handler_dry_run_string(v5);
          nw_endpoint_t v166 = nw_endpoint_handler_copy_endpoint(v5);
          logging_description = nw_endpoint_get_logging_description(v166);
          v168 = nw_endpoint_handler_state_string(v5);
          os_log_type_t v169 = nw_endpoint_handler_mode_string(v5);
          id v170 = nw_endpoint_handler_copy_current_path(v5);
          *(_DWORD *)buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = id_string;
          __int16 v250 = 2082;
          id v251 = v165;
          __int16 v252 = 2082;
          unint64_t v253 = logging_description;
          __int16 v254 = 2082;
          v255 = v168;
          __int16 v256 = 2082;
          v257 = v169;
          __int16 v258 = 2114;
          id v259 = v170;
          _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] not starting next child",  buf,  0x48u);
        }
      }

      else
      {
        os_log_type_t v8 = v5;
        char v9 = *((_BYTE *)v8 + 268);

        if ((v9 & 0x20) != 0)
        {
LABEL_69:
          uint64_t v76 = *((void *)v243 + 7);
          if (v76)
          {
            nw_queue_cancel_source(v76, v10);
            *((void *)v243 + 7) = 0LL;
          }

          uint64_t v77 = *((void *)v243 + 8);
          if (v77)
          {
            nw_queue_cancel_source(v77, v10);
            *((void *)v243 + _Block_object_dispose(va, 8) = 0LL;
          }

          goto LABEL_187;
        }

        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        BOOL v11 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          os_log_type_t v12 = v8;

          char v13 = v12;
          char v14 = *((_BYTE *)v8 + 268);

          if ((v14 & 1) != 0) {
            os_log_type_t v15 = "dry-run ";
          }
          else {
            os_log_type_t v15 = "";
          }
          nw_endpoint_t v16 = nw_endpoint_handler_copy_endpoint(v13);
          __int16 v17 = nw_endpoint_get_logging_description(v16);
          id_str = v12->id_str;
          char v18 = v13;
          uint64_t v19 = v18;
          uint64_t v20 = v5->state;
          else {
            BOOL v21 = off_189BBBBF0[v20];
          }

          unsigned int v67 = v19;
          os_log_type_t v68 = v67;
          BOOL v69 = "path";
          switch(v2->mode)
          {
            case 0:
              break;
            case 1:
              BOOL v69 = "resolver";
              break;
            case 2:
              BOOL v69 = nw_endpoint_flow_mode_string(v67[31]);
              break;
            case 3:
              BOOL v69 = "proxy";
              break;
            case 4:
              BOOL v69 = "fallback";
              break;
            case 5:
              BOOL v69 = "transform";
              break;
            default:
              BOOL v69 = "unknown-mode";
              break;
          }

          os_log_type_t v74 = v68;
          os_unfair_lock_lock((os_unfair_lock_t)v74 + 28);
          id v75 = v74[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v74 + 28);

          *(_DWORD *)buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = id_str;
          __int16 v250 = 2082;
          id v251 = v15;
          __int16 v252 = 2082;
          unint64_t v253 = v17;
          __int16 v254 = 2082;
          v255 = v21;
          __int16 v256 = 2082;
          v257 = v69;
          __int16 v258 = 2114;
          id v259 = v75;
          _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] not starting next child",  buf,  0x48u);
        }
      }

      goto LABEL_69;
    }

    if (*((void *)v4 + 4))
    {
      if (nw_endpoint_handler_get_minimize_logging(v5))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v26 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          v172 = nw_endpoint_handler_get_id_string(v5);
          os_log_type_t v173 = nw_endpoint_handler_dry_run_string(v5);
          nw_endpoint_t v174 = nw_endpoint_handler_copy_endpoint(v5);
          v175 = nw_endpoint_get_logging_description(v174);
          os_log_type_t v176 = nw_endpoint_handler_state_string(v5);
          BOOL v177 = nw_endpoint_handler_mode_string(v5);
          id v178 = nw_endpoint_handler_copy_current_path(v5);
          *(_DWORD *)buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v172;
          __int16 v250 = 2082;
          id v251 = v173;
          __int16 v252 = 2082;
          unint64_t v253 = v175;
          __int16 v254 = 2082;
          v255 = v176;
          __int16 v256 = 2082;
          v257 = v177;
          __int16 v258 = 2114;
          id v259 = v178;
          _os_log_impl( &dword_181A5C000,  v26,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] already connected, not starting next child",  buf,  0x48u);
        }
      }

      else
      {
        uint64_t v24 = v5;
        char v25 = *((_BYTE *)v24 + 268);

        if ((v25 & 0x20) != 0)
        {
LABEL_187:

LABEL_188:
          __int16 v152 = v244;
          goto LABEL_189;
        }

        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v26 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          char v27 = v24;

          os_log_type_t v28 = v27;
          char v29 = *((_BYTE *)v24 + 268);

          if ((v29 & 1) != 0) {
            os_log_type_t v30 = "dry-run ";
          }
          else {
            os_log_type_t v30 = "";
          }
          nw_endpoint_t v31 = nw_endpoint_handler_copy_endpoint(v28);
          char v32 = nw_endpoint_get_logging_description(v31);
          BOOL v33 = v27->id_str;
          nw_endpoint_t v34 = v28;
          BOOL v35 = v34;
          uint64_t v36 = v5->state;
          else {
            os_log_type_t v37 = off_189BBBBF0[v36];
          }

          os_log_type_t v70 = v35;
          os_log_type_t v71 = v70;
          int v72 = v2->mode;
          uint64_t v73 = "path";
          switch(v72)
          {
            case 0:
              break;
            case 1:
              uint64_t v73 = "resolver";
              break;
            case 2:
              uint64_t v73 = nw_endpoint_flow_mode_string(v70[31]);
              break;
            case 3:
              uint64_t v73 = "proxy";
              break;
            case 4:
              uint64_t v73 = "fallback";
              break;
            case 5:
              uint64_t v73 = "transform";
              break;
            default:
              uint64_t v73 = "unknown-mode";
              break;
          }

          __int16 v81 = v71;
          os_unfair_lock_lock((os_unfair_lock_t)v81 + 28);
          id v82 = v81[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v81 + 28);

          *(_DWORD *)buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v33;
          __int16 v250 = 2082;
          id v251 = v30;
          __int16 v252 = 2082;
          unint64_t v253 = v32;
          __int16 v254 = 2082;
          v255 = v37;
          __int16 v256 = 2082;
          v257 = v73;
          __int16 v258 = 2114;
          id v259 = v82;
          _os_log_impl( &dword_181A5C000,  v26,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] already connected, not starting next child",  buf,  0x48u);
        }
      }

      goto LABEL_187;
    }

    unint64_t v38 = *((unsigned int *)v4 + 5);
    uint64_t v39 = *((void *)v4 + 5);
    if (!v39 || v38 >= (uint64_t)(*(void *)(v39 + 24) - *(void *)(v39 + 16)) >> 3)
    {
      os_log_type_t v54 = v5;
      char v55 = *((_BYTE *)v54 + 268);

      if ((v55 & 0x20) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v56 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
        {
          __int16 v57 = v54;

          __int16 v58 = v57;
          char v59 = *((_BYTE *)v54 + 268);

          if ((v59 & 1) != 0) {
            int v60 = "dry-run ";
          }
          else {
            int v60 = "";
          }
          nw_endpoint_t v61 = nw_endpoint_handler_copy_endpoint(v58);
          unsigned int v62 = nw_endpoint_get_logging_description(v61);
          os_log_type_t v63 = v58;
          BOOL v64 = v63;
          uint64_t v65 = v5->state;
          nw_endpoint_t endpointa = (nw_endpoint_t)v57->id_str;
          else {
            BOOL v66 = off_189BBBBF0[v65];
          }
          os_log_t loga = v66;

          unsigned int v78 = v64;
          __int16 v79 = v78;
          nw_endpoint_t v80 = "path";
          switch(v2->mode)
          {
            case 0:
              break;
            case 1:
              nw_endpoint_t v80 = "resolver";
              break;
            case 2:
              nw_endpoint_t v80 = nw_endpoint_flow_mode_string(v78[31]);
              break;
            case 3:
              nw_endpoint_t v80 = "proxy";
              break;
            case 4:
              nw_endpoint_t v80 = "fallback";
              break;
            case 5:
              nw_endpoint_t v80 = "transform";
              break;
            default:
              nw_endpoint_t v80 = "unknown-mode";
              break;
          }

          uint64_t v87 = v79;
          os_unfair_lock_lock((os_unfair_lock_t)v87 + 28);
          id v88 = v87[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v87 + 28);

          *(_DWORD *)buf = 136448002;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = endpointa;
          __int16 v250 = 2082;
          id v251 = v60;
          __int16 v252 = 2082;
          unint64_t v253 = v62;
          __int16 v254 = 2082;
          v255 = loga;
          __int16 v256 = 2082;
          v257 = v80;
          __int16 v258 = 2114;
          id v259 = v88;
          __int16 v260 = 1024;
          LODWORD(v261) = v38;
          _os_log_impl( &dword_181A5C000,  v56,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] no child at index %u",  buf,  0x4Eu);
        }
      }

      *((_BYTE *)v243 + 24) |= 2u;
      nw_endpoint_resolver_check_desperate_ivan(v54);
      goto LABEL_187;
    }

    *((_BYTE *)v4 + 24) &= ~2u;
    *((_DWORD *)v4 + 5) = v38 + 1;
    uint64_t v40 = *((void *)v4 + 7);
    if (v40)
    {
      nw_queue_cancel_source(v40, v7);
      *((void *)v4 + 7) = 0LL;
    }

    uint64_t v41 = *((void *)v4 + 8);
    if (v41)
    {
      nw_queue_cancel_source(v41, v7);
      *((void *)v4 + _Block_object_dispose(va, 8) = 0LL;
    }

    nw_array_get_object_at_index(*((void *)v4 + 5), v38);
    int v242 = (void *)objc_claimAutoreleasedReturnValue();
    nw_endpoint_t endpoint = nw_endpoint_handler_copy_endpoint(v242);
    if (nw_endpoint_handler_get_minimize_logging(v5))
    {
      if ((nw_endpoint_handler_get_logging_disabled(v5) & 1) != 0)
      {
LABEL_101:
        BOOL child_parameters = nw_endpoint_resolver_create_child_parameters(v5);
        uint32_t v93 = v242;
        BOOL v94 = v5;
        id v95 = (id)child_parameters;
        unsigned int v96 = v95;
        if (v93)
        {
          if (v95)
          {
            if (!v93->parameters)
            {
              objc_storeStrong((id *)&v93->parameters, (id)child_parameters);
              nw_endpoint_handler_inherit_from_parent(v93, v94, 0);
              objc_storeWeak((id *)&v93->callback_context, v94);
              v93->int state = 0;
LABEL_108:

LABEL_109:
              if (nw_endpoint_get_type(endpoint) == nw_endpoint_type_address)
              {
                os_log_type_t v97 = v5;
                os_unfair_lock_lock(&v97->lock);
                BOOL v98 = v97->current_path;
                os_unfair_lock_unlock(&v97->lock);

                *(_DWORD *)os_log_type_t type = 0;
                id v99 = v98;
                if (nw_path_get_vpn_config_uuid(v98, (unsigned __int8 (*)[16])buf, (int *)type, 1, 1))
                {
                  type[0] = OS_LOG_TYPE_DEFAULT;
                  address = nw_endpoint_get_address(endpoint);
                  if (nw_path_voluntary_agent_matches_address(v98, (uint64_t)address))
                  {
                    if (type[0])
                    {
                      if (!nw_endpoint_handler_trigger_agents(v97, 1))
                      {
LABEL_185:

                        goto LABEL_186;
                      }

                      int minimize_logging = nw_endpoint_handler_get_minimize_logging(v97);
                      char logging_disabled = nw_endpoint_handler_get_logging_disabled(v97);
                      if (minimize_logging)
                      {
                        if ((logging_disabled & 1) != 0) {
                          goto LABEL_121;
                        }
                        if (__nwlog_connection_log::onceToken != -1) {
                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                        }
                        nw_endpoint_t v103 = (os_log_s *)(id)gconnectionLogObj;
                        if (os_log_type_enabled(v103, OS_LOG_TYPE_DEBUG))
                        {
                          uint64_t v227 = nw_endpoint_handler_get_id_string(v97);
                          logd = nw_endpoint_handler_dry_run_string(v97);
                          nw_endpoint_t v228 = nw_endpoint_handler_copy_endpoint(v97);
                          v229 = nw_endpoint_get_logging_description(v228);
                          id v230 = nw_endpoint_handler_state_string(v97);
                          v231 = nw_endpoint_handler_mode_string(v97);
                          id v232 = nw_endpoint_handler_copy_current_path(v97);
                          *(_DWORD *)buf = 136447746;
                          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = v227;
                          __int16 v250 = 2082;
                          id v251 = logd;
                          __int16 v252 = 2082;
                          unint64_t v253 = v229;
                          __int16 v254 = 2082;
                          v255 = v230;
                          __int16 v256 = 2082;
                          v257 = v231;
                          __int16 v258 = 2114;
                          id v259 = v232;
                          _os_log_impl( &dword_181A5C000,  v103,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] child flow requires agent trigger before attempting to connect",  buf,  0x48u);
                        }
                      }

                      else
                      {
                        if ((logging_disabled & 1) != 0)
                        {
LABEL_121:
                          nw_endpoint_handler_reset_mode(v97, 0);
                          goto LABEL_185;
                        }

                        if (__nwlog_connection_log::onceToken != -1) {
                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                        }
                        nw_endpoint_t v103 = (os_log_s *)(id)gconnectionLogObj;
                        if (os_log_type_enabled(v103, OS_LOG_TYPE_INFO))
                        {
                          logc = v103;
                          os_log_type_t v104 = nw_endpoint_handler_get_id_string(v97);
                          int v105 = nw_endpoint_handler_dry_run_string(v97);
                          nw_endpoint_t v106 = nw_endpoint_handler_copy_endpoint(v97);
                          int v107 = nw_endpoint_get_logging_description(v106);
                          os_log_type_t v108 = nw_endpoint_handler_state_string(v97);
                          v109 = nw_endpoint_handler_mode_string(v97);
                          id v110 = nw_endpoint_handler_copy_current_path(v97);
                          *(_DWORD *)buf = 136447746;
                          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
                          *(_WORD *)&buf[12] = 2082;
                          *(void *)&buf[14] = v104;
                          __int16 v250 = 2082;
                          id v251 = v105;
                          __int16 v252 = 2082;
                          unint64_t v253 = v107;
                          __int16 v254 = 2082;
                          v255 = v108;
                          __int16 v256 = 2082;
                          v257 = v109;
                          __int16 v258 = 2114;
                          id v259 = v110;
                          _os_log_impl( &dword_181A5C000,  logc,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] child flow requires agent trigger before attempting to connect",  buf,  0x48u);

                          nw_endpoint_t v103 = logc;
                        }
                      }

                      id v99 = v98;
                      goto LABEL_121;
                    }

                    nw_endpoint_resolver_setup_trigger_agent_timer(v97, 1);
                  }
                }
              }

              nw_endpoint_handler_start(v242);
              id v111 = v5;
              int v112 = v5->state;

              if ((v112 & 0xFFFFFFFE) == 4)
              {
                if (nw_endpoint_handler_get_minimize_logging(v111))
                {
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                  }
                  v194 = (os_log_s *)(id)gconnectionLogObj;
                  if (os_log_type_enabled(v194, OS_LOG_TYPE_DEBUG))
                  {
                    os_log_type_t v195 = nw_endpoint_handler_get_id_string(v111);
                    BOOL v196 = nw_endpoint_handler_dry_run_string(v111);
                    nw_endpoint_t v197 = nw_endpoint_handler_copy_endpoint(v111);
                    os_log_type_t v198 = nw_endpoint_get_logging_description(v197);
                    BOOL v199 = nw_endpoint_handler_state_string(v111);
                    os_log_type_t v200 = nw_endpoint_handler_mode_string(v111);
                    id v201 = nw_endpoint_handler_copy_current_path(v111);
                    *(_DWORD *)buf = 136447746;
                    *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v195;
                    __int16 v250 = 2082;
                    id v251 = v196;
                    __int16 v252 = 2082;
                    unint64_t v253 = v198;
                    __int16 v254 = 2082;
                    v255 = v199;
                    __int16 v256 = 2082;
                    v257 = v200;
                    __int16 v258 = 2114;
                    id v259 = v201;
                    _os_log_impl( &dword_181A5C000,  v194,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Not starting next child timer, handler cancelled or failed",  buf,  0x48u);
                  }

                  id v99 = v194;
                  goto LABEL_185;
                }

                uint64_t v113 = v111;
                BOOL v114 = (*((_BYTE *)v113 + 268) & 0x20) == 0;

                if (v114)
                {
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                  }
                  id v99 = (id)gconnectionLogObj;
                  if (os_log_type_enabled((os_log_t)v99, OS_LOG_TYPE_INFO))
                  {
                    int v115 = nw_endpoint_handler_get_id_string(v113);
                    nw_endpoint_t v116 = nw_endpoint_handler_dry_run_string(v113);
                    nw_endpoint_t v117 = nw_endpoint_handler_copy_endpoint(v113);
                    id v118 = nw_endpoint_get_logging_description(v117);
                    unsigned int v119 = nw_endpoint_handler_state_string(v113);
                    uint64_t v120 = nw_endpoint_handler_mode_string(v113);
                    id v121 = nw_endpoint_handler_copy_current_path(v113);
                    *(_DWORD *)buf = 136447746;
                    *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v115;
                    __int16 v250 = 2082;
                    id v251 = v116;
                    __int16 v252 = 2082;
                    unint64_t v253 = v118;
                    __int16 v254 = 2082;
                    v255 = v119;
                    __int16 v256 = 2082;
                    v257 = v120;
                    __int16 v258 = 2114;
                    id v259 = v121;
                    _os_log_impl( &dword_181A5C000,  (os_log_t)v99,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Not starting next child timer, handler cancelled or failed",  buf,  0x48u);
                  }

                  goto LABEL_185;
                }

LABEL_182:
                  if (v149) {
                    free(v149);
                  }
                  goto LABEL_184;
                }

                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                __int16 v136 = (os_log_s *)(id)gconnectionLogObj;
                if (os_log_type_enabled(v136, OS_LOG_TYPE_DEBUG))
                {
                  v220 = nw_endpoint_handler_get_id_string(v122);
                  v221 = nw_endpoint_handler_dry_run_string(v122);
                  nw_endpoint_t v222 = nw_endpoint_handler_copy_endpoint(v122);
                  nw_endpoint_t v223 = nw_endpoint_get_logging_description(v222);
                  unint64_t v224 = nw_endpoint_handler_state_string(v122);
                  v225 = nw_endpoint_handler_mode_string(v122);
                  id v226 = nw_endpoint_handler_copy_current_path(v122);
                  *(_DWORD *)buf = 136448002;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v220;
                  __int16 v250 = 2082;
                  id v251 = v221;
                  __int16 v252 = 2082;
                  unint64_t v253 = v223;
                  __int16 v254 = 2082;
                  v255 = v224;
                  __int16 v256 = 2082;
                  v257 = v225;
                  __int16 v258 = 2114;
                  id v259 = v226;
                  __int16 v260 = 2048;
                  unint64_t v261 = logb / 0xF4240;
                  _os_log_impl( &dword_181A5C000,  v136,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] starting next child endpoint in %llums",  buf,  0x52u);
                }
              }

              else
              {
                if ((v135 & 1) != 0) {
                  goto LABEL_149;
                }
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                __int16 v136 = (os_log_s *)(id)gconnectionLogObj;
                if (os_log_type_enabled(v136, OS_LOG_TYPE_INFO))
                {
                  unsigned int v137 = nw_endpoint_handler_get_id_string(v122);
                  __int16 v138 = nw_endpoint_handler_dry_run_string(v122);
                  nw_endpoint_t v139 = nw_endpoint_handler_copy_endpoint(v122);
                  uint64_t v140 = nw_endpoint_get_logging_description(v139);
                  v141 = nw_endpoint_handler_state_string(v122);
                  uint64_t v142 = nw_endpoint_handler_mode_string(v122);
                  id v143 = nw_endpoint_handler_copy_current_path(v122);
                  *(_DWORD *)buf = 136448002;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v137;
                  __int16 v250 = 2082;
                  id v251 = v138;
                  __int16 v252 = 2082;
                  unint64_t v253 = v140;
                  __int16 v254 = 2082;
                  v255 = v141;
                  __int16 v256 = 2082;
                  v257 = v142;
                  __int16 v258 = 2114;
                  id v259 = v143;
                  __int16 v260 = 2048;
                  unint64_t v261 = logb / 0xF4240;
                  _os_log_impl( &dword_181A5C000,  v136,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] starting next child endpoint in %llums",  buf,  0x52u);
                }
              }

              unsigned int v124 = v243;
              goto LABEL_149;
            }

            __nwlog_obj();
            v192 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_reinitialize";
            os_log_type_t v187 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            char v247 = 0;
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v188 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v193 = type[0];
              if (os_log_type_enabled(v188, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_endpoint_handler_reinitialize";
                _os_log_impl( &dword_181A5C000,  v188,  v193,  "%{public}s called with null (handler->parameters == nil)",  buf,  0xCu);
              }

              goto LABEL_273;
            }

            if (!v247)
            {
              __nwlog_obj();
              v188 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v219 = type[0];
              if (os_log_type_enabled(v188, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_endpoint_handler_reinitialize";
                _os_log_impl( &dword_181A5C000,  v188,  v219,  "%{public}s called with null (handler->parameters == nil), backtrace limit exceeded",  buf,  0xCu);
              }

              goto LABEL_273;
            }

            v205 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v188 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v208 = type[0];
            BOOL v209 = os_log_type_enabled(v188, type[0]);
            if (!v205)
            {
              if (v209)
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_endpoint_handler_reinitialize";
                _os_log_impl( &dword_181A5C000,  v188,  v208,  "%{public}s called with null (handler->parameters == nil), no backtrace",  buf,  0xCu);
              }

              goto LABEL_273;
            }

            if (v209)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_endpoint_handler_reinitialize";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v205;
              _os_log_impl( &dword_181A5C000,  v188,  v208,  "%{public}s called with null (handler->parameters == nil), dumping backtrace:%{public}s",  buf,  0x16u);
            }
          }

          else
          {
            __nwlog_obj();
            v190 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_reinitialize";
            os_log_type_t v187 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            char v247 = 0;
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v188 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v191 = type[0];
              if (os_log_type_enabled(v188, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_endpoint_handler_reinitialize";
                _os_log_impl(&dword_181A5C000, v188, v191, "%{public}s called with null parameters", buf, 0xCu);
              }

              goto LABEL_273;
            }

            if (!v247)
            {
              __nwlog_obj();
              v188 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v218 = type[0];
              if (os_log_type_enabled(v188, type[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_endpoint_handler_reinitialize";
                _os_log_impl( &dword_181A5C000,  v188,  v218,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
              }

              goto LABEL_273;
            }

            v205 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v188 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v206 = type[0];
            BOOL v207 = os_log_type_enabled(v188, type[0]);
            if (!v205)
            {
              if (v207)
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_endpoint_handler_reinitialize";
                _os_log_impl( &dword_181A5C000,  v188,  v206,  "%{public}s called with null parameters, no backtrace",  buf,  0xCu);
              }

              goto LABEL_273;
            }

            if (v207)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_endpoint_handler_reinitialize";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v205;
              _os_log_impl( &dword_181A5C000,  v188,  v206,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
            }
          }

          free(v205);
          if (!v187) {
            goto LABEL_108;
          }
          goto LABEL_275;
        }

        __nwlog_obj();
        v186 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_reinitialize";
        os_log_type_t v187 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        char v247 = 0;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v188 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v189 = type[0];
          if (os_log_type_enabled(v188, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_reinitialize";
            _os_log_impl(&dword_181A5C000, v188, v189, "%{public}s called with null handler", buf, 0xCu);
          }
        }

        else if (v247)
        {
          os_log_type_t v202 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v188 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v203 = type[0];
          BOOL v204 = os_log_type_enabled(v188, type[0]);
          if (v202)
          {
            if (v204)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_endpoint_handler_reinitialize";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v202;
              _os_log_impl( &dword_181A5C000,  v188,  v203,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v202);
LABEL_274:
            if (!v187) {
              goto LABEL_108;
            }
LABEL_275:
            free(v187);
            goto LABEL_108;
          }

          if (v204)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_reinitialize";
            _os_log_impl(&dword_181A5C000, v188, v203, "%{public}s called with null handler, no backtrace", buf, 0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          v188 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v217 = type[0];
          if (os_log_type_enabled(v188, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_reinitialize";
            _os_log_impl( &dword_181A5C000,  v188,  v217,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
          }
        }

        if (!v37) {
          goto LABEL_140;
        }
        goto LABEL_183;
      }

      __nwlog_obj();
      int v60 = (void *)objc_claimAutoreleasedReturnValue();
      nw_endpoint_t v61 = networkd_privileged_result_to_string(v35);
      *(_DWORD *)buf = 136446722;
      os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
      BOOL v98 = 2048;
      *(void *)id v99 = v35;
      *(_WORD *)&v99[8] = 2082;
      *(void *)&v99[10] = v61;
      os_log_type_t v37 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      BOOL v94 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        unsigned int v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v63 = type;
        if (os_log_type_enabled(v62, type))
        {
          *(_DWORD *)buf = 136446722;
          os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
          BOOL v98 = 2048;
          *(void *)id v99 = v35;
          *(_WORD *)&v99[8] = 2082;
          *(void *)&v99[10] = v61;
          _os_log_impl( &dword_181A5C000,  v62,  v63,  "%{public}s received internal failure result code: [%lld] %{public}s",  buf,  0x20u);
        }
      }

      else if (v94)
      {
        id v75 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        unsigned int v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v76 = type;
        uint64_t v77 = os_log_type_enabled(v62, type);
        if (v75)
        {
          if (v77)
          {
            *(_DWORD *)buf = 136446978;
            os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
            BOOL v98 = 2048;
            *(void *)id v99 = v35;
            *(_WORD *)&v99[8] = 2082;
            *(void *)&v99[10] = v61;
            BOOL v100 = 2082;
            os_log_type_t v101 = v75;
            _os_log_impl( &dword_181A5C000,  v62,  v76,  "%{public}s received internal failure result code: [%lld] %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v75);
          goto LABEL_182;
        }

        if (v77)
        {
          *(_DWORD *)buf = 136446722;
          os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
          BOOL v98 = 2048;
          *(void *)id v99 = v35;
          *(_WORD *)&v99[8] = 2082;
          *(void *)&v99[10] = v61;
          _os_log_impl( &dword_181A5C000,  v62,  v76,  "%{public}s received internal failure result code: [%lld] %{public}s, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        __nwlog_obj();
        unsigned int v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __int16 v81 = type;
        if (os_log_type_enabled(v62, type))
        {
          *(_DWORD *)buf = 136446722;
          os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
          BOOL v98 = 2048;
          *(void *)id v99 = v35;
          *(_WORD *)&v99[8] = 2082;
          *(void *)&v99[10] = v61;
          _os_log_impl( &dword_181A5C000,  v62,  v81,  "%{public}s received internal failure result code: [%lld] %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }
      }

      goto LABEL_182;
    }

    uint64_t v52 = xpc_dictionary_dup_fd(v5, (const char *)networkd_privileged_key_kernel_socket_fd);
    if ((v52 & 0x80000000) == 0)
    {
LABEL_142:

      goto LABEL_143;
    }

    __nwlog_obj();
    os_log_type_t v53 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446466;
    os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
    BOOL v98 = 1024;
    *(_DWORD *)id v99 = v52;
    os_log_type_t v54 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v94 = 0;
    if (__nwlog_fault(v54, &type, &v94))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v56 = type;
        if (os_log_type_enabled(v55, type))
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
          BOOL v98 = 1024;
          *(_DWORD *)id v99 = v52;
          _os_log_impl(&dword_181A5C000, v55, v56, "%{public}s received invalid fd %d", buf, 0x12u);
        }
      }

      else if (v94)
      {
        id v90 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v91 = type;
        __int16 v92 = os_log_type_enabled(v55, type);
        if (v90)
        {
          if (v92)
          {
            *(_DWORD *)buf = 136446722;
            os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
            BOOL v98 = 1024;
            *(_DWORD *)id v99 = v52;
            *(_WORD *)&v99[4] = 2082;
            *(void *)&v99[6] = v90;
            _os_log_impl( &dword_181A5C000,  v55,  v91,  "%{public}s received invalid fd %d, dumping backtrace:%{public}s",  buf,  0x1Cu);
          }

          free(v90);
          goto LABEL_214;
        }

        if (v92)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
          BOOL v98 = 1024;
          *(_DWORD *)id v99 = v52;
          _os_log_impl(&dword_181A5C000, v55, v91, "%{public}s received invalid fd %d, no backtrace", buf, 0x12u);
        }
      }

      else
      {
        __nwlog_obj();
        char v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint32_t v93 = type;
        if (os_log_type_enabled(v55, type))
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
          BOOL v98 = 1024;
          *(_DWORD *)id v99 = v52;
          _os_log_impl( &dword_181A5C000,  v55,  v93,  "%{public}s received invalid fd %d, backtrace limit exceeded",  buf,  0x12u);
        }
      }
    }

      if (!v56) {
        goto LABEL_137;
      }
      goto LABEL_183;
    }

    __nwlog_obj();
    os_log_type_t v54 = (void *)objc_claimAutoreleasedReturnValue();
    char v55 = networkd_privileged_result_to_string(v34);
    *(_DWORD *)buf = 136446722;
    nw_endpoint_t v80 = "networkd_privileged_set_constrained_block_invoke";
    __int16 v81 = 2048;
    *(void *)id v82 = v34;
    *(_WORD *)&v82[8] = 2082;
    *(void *)&v82[10] = v55;
    os_log_type_t v56 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v77 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v57 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v58 = type;
      if (os_log_type_enabled(v57, type))
      {
        *(_DWORD *)buf = 136446722;
        nw_endpoint_t v80 = "networkd_privileged_set_constrained_block_invoke";
        __int16 v81 = 2048;
        *(void *)id v82 = v34;
        *(_WORD *)&v82[8] = 2082;
        *(void *)&v82[10] = v55;
        _os_log_impl( &dword_181A5C000,  v57,  v58,  "%{public}s received internal failure result code: [%lld] %{public}s",  buf,  0x20u);
      }
    }

    else if (v77)
    {
      unsigned int v67 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v57 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v68 = type;
      BOOL v69 = os_log_type_enabled(v57, type);
      if (v67)
      {
        if (v69)
        {
          *(_DWORD *)buf = 136446978;
          nw_endpoint_t v80 = "networkd_privileged_set_constrained_block_invoke";
          __int16 v81 = 2048;
          *(void *)id v82 = v34;
          *(_WORD *)&v82[8] = 2082;
          *(void *)&v82[10] = v55;
          __int16 v83 = 2082;
          int v84 = v67;
          _os_log_impl( &dword_181A5C000,  v57,  v68,  "%{public}s received internal failure result code: [%lld] %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v67);
        goto LABEL_182;
      }

      if (v69)
      {
        *(_DWORD *)buf = 136446722;
        nw_endpoint_t v80 = "networkd_privileged_set_constrained_block_invoke";
        __int16 v81 = 2048;
        *(void *)id v82 = v34;
        *(_WORD *)&v82[8] = 2082;
        *(void *)&v82[10] = v55;
        _os_log_impl( &dword_181A5C000,  v57,  v68,  "%{public}s received internal failure result code: [%lld] %{public}s, no backtrace",  buf,  0x20u);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v57 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v75 = type;
      if (os_log_type_enabled(v57, type))
      {
        *(_DWORD *)buf = 136446722;
        nw_endpoint_t v80 = "networkd_privileged_set_constrained_block_invoke";
        __int16 v81 = 2048;
        *(void *)id v82 = v34;
        *(_WORD *)&v82[8] = 2082;
        *(void *)&v82[10] = v55;
        _os_log_impl( &dword_181A5C000,  v57,  v75,  "%{public}s received internal failure result code: [%lld] %{public}s, backtrace limit exceeded",  buf,  0x20u);
      }
    }

    goto LABEL_182;
  }

  if (Class == (Class)MEMORY[0x1895F9268])
  {
    if (v4 == (void *)MEMORY[0x1895F9198])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      nw_endpoint_t v31 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      nw_endpoint_t v80 = "networkd_privileged_set_constrained_block_invoke";
      nw_endpoint_t v6 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      uint64_t v77 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (os_log_s *)(id)gLogObj;
        char v32 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v80 = "networkd_privileged_set_constrained_block_invoke";
          _os_log_impl(&dword_181A5C000, v12, v32, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED", buf, 0xCu);
        }

        goto LABEL_72;
      }

      if (!v77)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v63 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v80 = "networkd_privileged_set_constrained_block_invoke";
          _os_log_impl( &dword_181A5C000,  v12,  v63,  "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_72;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v44 = type;
      os_log_type_t v45 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v80 = "networkd_privileged_set_constrained_block_invoke";
          _os_log_impl( &dword_181A5C000,  v12,  v44,  "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, no backtrace",  buf,  0xCu);
        }

        goto LABEL_72;
      }

      if (v45)
      {
        *(_DWORD *)buf = 136446466;
        nw_endpoint_t v80 = "networkd_privileged_set_constrained_block_invoke";
        __int16 v81 = 2082;
        *(void *)id v82 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v12,  v44,  "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_25;
    }

    if (v4 != (void *)MEMORY[0x1895F91A0])
    {
      if (v4 != (void *)MEMORY[0x1895F91C8])
      {
        nw_endpoint_t v6 = (char *)MEMORY[0x186E12534](v4);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v23 = (id)gLogObj;
        *(_DWORD *)buf = 136446466;
        nw_endpoint_t v80 = "networkd_privileged_set_constrained_block_invoke";
        __int16 v81 = 2082;
        *(void *)id v82 = v6;
        os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        uint64_t v77 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          char v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v24 = type;
          if (os_log_type_enabled(v9, type))
          {
            *(_DWORD *)buf = 136446466;
            nw_endpoint_t v80 = "networkd_privileged_set_constrained_block_invoke";
            __int16 v81 = 2082;
            *(void *)id v82 = v6;
            _os_log_impl( &dword_181A5C000,  v9,  v24,  "%{public}s received returned unknown XPC error %{public}s",  buf,  0x16u);
          }

          goto LABEL_62;
        }

        if (!v77)
        {
          __nwlog_obj();
          char v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v70 = type;
          if (os_log_type_enabled(v9, type))
          {
            *(_DWORD *)buf = 136446466;
            nw_endpoint_t v80 = "networkd_privileged_set_constrained_block_invoke";
            __int16 v81 = 2082;
            *(void *)id v82 = v6;
            _os_log_impl( &dword_181A5C000,  v9,  v70,  "%{public}s received returned unknown XPC error %{public}s, backtrace limit exceeded",  buf,  0x16u);
          }

          goto LABEL_62;
        }

        os_log_type_t v51 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v52 = type;
        os_log_type_t v53 = os_log_type_enabled(v9, type);
        if (!v51)
        {
          if (v53)
          {
            *(_DWORD *)buf = 136446466;
            nw_endpoint_t v80 = "networkd_privileged_set_constrained_block_invoke";
            __int16 v81 = 2082;
            *(void *)id v82 = v6;
            _os_log_impl( &dword_181A5C000,  v9,  v52,  "%{public}s received returned unknown XPC error %{public}s, no backtrace",  buf,  0x16u);
          }

          goto LABEL_62;
        }

        if (v53)
        {
          *(_DWORD *)buf = 136446722;
          nw_endpoint_t v80 = "networkd_privileged_set_constrained_block_invoke";
          __int16 v81 = 2082;
          *(void *)id v82 = v6;
          *(_WORD *)&v82[8] = 2082;
          *(void *)&v82[10] = v51;
          _os_log_impl( &dword_181A5C000,  v9,  v52,  "%{public}s received returned unknown XPC error %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v51);
        if (!v8) {
          goto LABEL_73;
        }
LABEL_64:
        free(v8);
        goto LABEL_73;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v46 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      nw_endpoint_t v80 = "networkd_privileged_set_constrained_block_invoke";
      nw_endpoint_t v6 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      uint64_t v77 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v47 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v80 = "networkd_privileged_set_constrained_block_invoke";
          _os_log_impl(&dword_181A5C000, v12, v47, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT", buf, 0xCu);
        }

      if (!v56) {
        goto LABEL_137;
      }
      goto LABEL_183;
    }

    __nwlog_obj();
    os_log_type_t v54 = (void *)objc_claimAutoreleasedReturnValue();
    char v55 = networkd_privileged_result_to_string(v34);
    *(_DWORD *)buf = 136446722;
    nw_endpoint_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
    __int16 v81 = 2048;
    *(void *)id v82 = v34;
    *(_WORD *)&v82[8] = 2082;
    *(void *)&v82[10] = v55;
    os_log_type_t v56 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v77 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v57 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v58 = type;
      if (os_log_type_enabled(v57, type))
      {
        *(_DWORD *)buf = 136446722;
        nw_endpoint_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
        __int16 v81 = 2048;
        *(void *)id v82 = v34;
        *(_WORD *)&v82[8] = 2082;
        *(void *)&v82[10] = v55;
        _os_log_impl( &dword_181A5C000,  v57,  v58,  "%{public}s received internal failure result code: [%lld] %{public}s",  buf,  0x20u);
      }
    }

    else if (v77)
    {
      unsigned int v67 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v57 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v68 = type;
      BOOL v69 = os_log_type_enabled(v57, type);
      if (v67)
      {
        if (v69)
        {
          *(_DWORD *)buf = 136446978;
          nw_endpoint_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
          __int16 v81 = 2048;
          *(void *)id v82 = v34;
          *(_WORD *)&v82[8] = 2082;
          *(void *)&v82[10] = v55;
          __int16 v83 = 2082;
          int v84 = v67;
          _os_log_impl( &dword_181A5C000,  v57,  v68,  "%{public}s received internal failure result code: [%lld] %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v67);
        goto LABEL_182;
      }

      if (v69)
      {
        *(_DWORD *)buf = 136446722;
        nw_endpoint_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
        __int16 v81 = 2048;
        *(void *)id v82 = v34;
        *(_WORD *)&v82[8] = 2082;
        *(void *)&v82[10] = v55;
        _os_log_impl( &dword_181A5C000,  v57,  v68,  "%{public}s received internal failure result code: [%lld] %{public}s, no backtrace",  buf,  0x20u);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v57 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v75 = type;
      if (os_log_type_enabled(v57, type))
      {
        *(_DWORD *)buf = 136446722;
        nw_endpoint_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
        __int16 v81 = 2048;
        *(void *)id v82 = v34;
        *(_WORD *)&v82[8] = 2082;
        *(void *)&v82[10] = v55;
        _os_log_impl( &dword_181A5C000,  v57,  v75,  "%{public}s received internal failure result code: [%lld] %{public}s, backtrace limit exceeded",  buf,  0x20u);
      }
    }

    goto LABEL_182;
  }

  if (Class == (Class)MEMORY[0x1895F9268])
  {
    if (v4 == (void *)MEMORY[0x1895F9198])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      nw_endpoint_t v31 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      nw_endpoint_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
      nw_endpoint_t v6 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      uint64_t v77 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (os_log_s *)(id)gLogObj;
        char v32 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
          _os_log_impl(&dword_181A5C000, v12, v32, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED", buf, 0xCu);
        }

        goto LABEL_72;
      }

      if (!v77)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v63 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
          _os_log_impl( &dword_181A5C000,  v12,  v63,  "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_72;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v44 = type;
      os_log_type_t v45 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
          _os_log_impl( &dword_181A5C000,  v12,  v44,  "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, no backtrace",  buf,  0xCu);
        }

        goto LABEL_72;
      }

      if (v45)
      {
        *(_DWORD *)buf = 136446466;
        nw_endpoint_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
        __int16 v81 = 2082;
        *(void *)id v82 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v12,  v44,  "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_25;
    }

    if (v4 != (void *)MEMORY[0x1895F91A0])
    {
      if (v4 != (void *)MEMORY[0x1895F91C8])
      {
        nw_endpoint_t v6 = (char *)MEMORY[0x186E12534](v4);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v23 = (id)gLogObj;
        *(_DWORD *)buf = 136446466;
        nw_endpoint_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
        __int16 v81 = 2082;
        *(void *)id v82 = v6;
        os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        uint64_t v77 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          char v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v24 = type;
          if (os_log_type_enabled(v9, type))
          {
            *(_DWORD *)buf = 136446466;
            nw_endpoint_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
            __int16 v81 = 2082;
            *(void *)id v82 = v6;
            _os_log_impl( &dword_181A5C000,  v9,  v24,  "%{public}s received returned unknown XPC error %{public}s",  buf,  0x16u);
          }

          goto LABEL_62;
        }

        if (!v77)
        {
          __nwlog_obj();
          char v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v70 = type;
          if (os_log_type_enabled(v9, type))
          {
            *(_DWORD *)buf = 136446466;
            nw_endpoint_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
            __int16 v81 = 2082;
            *(void *)id v82 = v6;
            _os_log_impl( &dword_181A5C000,  v9,  v70,  "%{public}s received returned unknown XPC error %{public}s, backtrace limit exceeded",  buf,  0x16u);
          }

          goto LABEL_62;
        }

        os_log_type_t v51 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v52 = type;
        os_log_type_t v53 = os_log_type_enabled(v9, type);
        if (!v51)
        {
          if (v53)
          {
            *(_DWORD *)buf = 136446466;
            nw_endpoint_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
            __int16 v81 = 2082;
            *(void *)id v82 = v6;
            _os_log_impl( &dword_181A5C000,  v9,  v52,  "%{public}s received returned unknown XPC error %{public}s, no backtrace",  buf,  0x16u);
          }

          goto LABEL_62;
        }

        if (v53)
        {
          *(_DWORD *)buf = 136446722;
          nw_endpoint_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
          __int16 v81 = 2082;
          *(void *)id v82 = v6;
          *(_WORD *)&v82[8] = 2082;
          *(void *)&v82[10] = v51;
          _os_log_impl( &dword_181A5C000,  v9,  v52,  "%{public}s received returned unknown XPC error %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v51);
        if (!v8) {
          goto LABEL_73;
        }
LABEL_64:
        free(v8);
        goto LABEL_73;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v46 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      nw_endpoint_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
      nw_endpoint_t v6 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      uint64_t v77 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v47 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
          _os_log_impl(&dword_181A5C000, v12, v47, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT", buf, 0xCu);
        }

      if (!v56) {
        goto LABEL_137;
      }
      goto LABEL_183;
    }

    __nwlog_obj();
    os_log_type_t v54 = (void *)objc_claimAutoreleasedReturnValue();
    char v55 = networkd_privileged_result_to_string(v34);
    *(_DWORD *)buf = 136446722;
    nw_endpoint_t v80 = "networkd_privileged_set_expensive_block_invoke";
    __int16 v81 = 2048;
    *(void *)id v82 = v34;
    *(_WORD *)&v82[8] = 2082;
    *(void *)&v82[10] = v55;
    os_log_type_t v56 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v77 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v57 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v58 = type;
      if (os_log_type_enabled(v57, type))
      {
        *(_DWORD *)buf = 136446722;
        nw_endpoint_t v80 = "networkd_privileged_set_expensive_block_invoke";
        __int16 v81 = 2048;
        *(void *)id v82 = v34;
        *(_WORD *)&v82[8] = 2082;
        *(void *)&v82[10] = v55;
        _os_log_impl( &dword_181A5C000,  v57,  v58,  "%{public}s received internal failure result code: [%lld] %{public}s",  buf,  0x20u);
      }
    }

    else if (v77)
    {
      unsigned int v67 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v57 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v68 = type;
      BOOL v69 = os_log_type_enabled(v57, type);
      if (v67)
      {
        if (v69)
        {
          *(_DWORD *)buf = 136446978;
          nw_endpoint_t v80 = "networkd_privileged_set_expensive_block_invoke";
          __int16 v81 = 2048;
          *(void *)id v82 = v34;
          *(_WORD *)&v82[8] = 2082;
          *(void *)&v82[10] = v55;
          __int16 v83 = 2082;
          int v84 = v67;
          _os_log_impl( &dword_181A5C000,  v57,  v68,  "%{public}s received internal failure result code: [%lld] %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v67);
        goto LABEL_182;
      }

      if (v69)
      {
        *(_DWORD *)buf = 136446722;
        nw_endpoint_t v80 = "networkd_privileged_set_expensive_block_invoke";
        __int16 v81 = 2048;
        *(void *)id v82 = v34;
        *(_WORD *)&v82[8] = 2082;
        *(void *)&v82[10] = v55;
        _os_log_impl( &dword_181A5C000,  v57,  v68,  "%{public}s received internal failure result code: [%lld] %{public}s, no backtrace",  buf,  0x20u);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v57 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v75 = type;
      if (os_log_type_enabled(v57, type))
      {
        *(_DWORD *)buf = 136446722;
        nw_endpoint_t v80 = "networkd_privileged_set_expensive_block_invoke";
        __int16 v81 = 2048;
        *(void *)id v82 = v34;
        *(_WORD *)&v82[8] = 2082;
        *(void *)&v82[10] = v55;
        _os_log_impl( &dword_181A5C000,  v57,  v75,  "%{public}s received internal failure result code: [%lld] %{public}s, backtrace limit exceeded",  buf,  0x20u);
      }
    }

    goto LABEL_182;
  }

  if (Class == (Class)MEMORY[0x1895F9268])
  {
    if (v4 == (void *)MEMORY[0x1895F9198])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      nw_endpoint_t v31 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      nw_endpoint_t v80 = "networkd_privileged_set_expensive_block_invoke";
      nw_endpoint_t v6 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      uint64_t v77 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (os_log_s *)(id)gLogObj;
        char v32 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v80 = "networkd_privileged_set_expensive_block_invoke";
          _os_log_impl(&dword_181A5C000, v12, v32, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED", buf, 0xCu);
        }

        goto LABEL_72;
      }

      if (!v77)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v63 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v80 = "networkd_privileged_set_expensive_block_invoke";
          _os_log_impl( &dword_181A5C000,  v12,  v63,  "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_72;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v44 = type;
      os_log_type_t v45 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v80 = "networkd_privileged_set_expensive_block_invoke";
          _os_log_impl( &dword_181A5C000,  v12,  v44,  "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, no backtrace",  buf,  0xCu);
        }

        goto LABEL_72;
      }

      if (v45)
      {
        *(_DWORD *)buf = 136446466;
        nw_endpoint_t v80 = "networkd_privileged_set_expensive_block_invoke";
        __int16 v81 = 2082;
        *(void *)id v82 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v12,  v44,  "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_25;
    }

    if (v4 != (void *)MEMORY[0x1895F91A0])
    {
      if (v4 != (void *)MEMORY[0x1895F91C8])
      {
        nw_endpoint_t v6 = (char *)MEMORY[0x186E12534](v4);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v23 = (id)gLogObj;
        *(_DWORD *)buf = 136446466;
        nw_endpoint_t v80 = "networkd_privileged_set_expensive_block_invoke";
        __int16 v81 = 2082;
        *(void *)id v82 = v6;
        os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        uint64_t v77 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          char v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v24 = type;
          if (os_log_type_enabled(v9, type))
          {
            *(_DWORD *)buf = 136446466;
            nw_endpoint_t v80 = "networkd_privileged_set_expensive_block_invoke";
            __int16 v81 = 2082;
            *(void *)id v82 = v6;
            _os_log_impl( &dword_181A5C000,  v9,  v24,  "%{public}s received returned unknown XPC error %{public}s",  buf,  0x16u);
          }

          goto LABEL_62;
        }

        if (!v77)
        {
          __nwlog_obj();
          char v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v70 = type;
          if (os_log_type_enabled(v9, type))
          {
            *(_DWORD *)buf = 136446466;
            nw_endpoint_t v80 = "networkd_privileged_set_expensive_block_invoke";
            __int16 v81 = 2082;
            *(void *)id v82 = v6;
            _os_log_impl( &dword_181A5C000,  v9,  v70,  "%{public}s received returned unknown XPC error %{public}s, backtrace limit exceeded",  buf,  0x16u);
          }

          goto LABEL_62;
        }

        os_log_type_t v51 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v52 = type;
        os_log_type_t v53 = os_log_type_enabled(v9, type);
        if (!v51)
        {
          if (v53)
          {
            *(_DWORD *)buf = 136446466;
            nw_endpoint_t v80 = "networkd_privileged_set_expensive_block_invoke";
            __int16 v81 = 2082;
            *(void *)id v82 = v6;
            _os_log_impl( &dword_181A5C000,  v9,  v52,  "%{public}s received returned unknown XPC error %{public}s, no backtrace",  buf,  0x16u);
          }

          goto LABEL_62;
        }

        if (v53)
        {
          *(_DWORD *)buf = 136446722;
          nw_endpoint_t v80 = "networkd_privileged_set_expensive_block_invoke";
          __int16 v81 = 2082;
          *(void *)id v82 = v6;
          *(_WORD *)&v82[8] = 2082;
          *(void *)&v82[10] = v51;
          _os_log_impl( &dword_181A5C000,  v9,  v52,  "%{public}s received returned unknown XPC error %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v51);
        if (!v8) {
          goto LABEL_73;
        }
LABEL_64:
        free(v8);
        goto LABEL_73;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v46 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      nw_endpoint_t v80 = "networkd_privileged_set_expensive_block_invoke";
      nw_endpoint_t v6 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      uint64_t v77 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v47 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v80 = "networkd_privileged_set_expensive_block_invoke";
          _os_log_impl(&dword_181A5C000, v12, v47, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT", buf, 0xCu);
        }

      if (v56) {
        free(v56);
      }
LABEL_14:
      if (v7 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
      {
        BOOL v35 = *(void *)(v3 + 88);
        if (v35)
        {
          uint64_t v36 = v35 - 1;
          *(void *)(v3 + 8_Block_object_dispose(va, 8) = v36;
          if (!v36)
          {
            os_log_type_t v37 = *(void (***)(void))(v3 + 64);
            if (v37)
            {
              *(void *)(v3 + 64) = 0LL;
              v37[2](v37);
              _Block_release(v37);
            }

            if ((*(_BYTE *)(v3 + 72) & 1) != 0)
            {
              unint64_t v38 = *(const void **)(v3 + 64);
              if (v38) {
                _Block_release(v38);
              }
            }

            free((void *)v3);
          }
        }
      }

      if (v5 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v4 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v39 = *(void *)(v4 + 88);
        if (v39)
        {
          uint64_t v40 = v39 - 1;
          *(void *)(v4 + 8_Block_object_dispose(va, 8) = v40;
          if (!v40)
          {
            uint64_t v41 = *(void (***)(void))(v4 + 64);
            if (v41)
            {
              *(void *)(v4 + 64) = 0LL;
              v41[2](v41);
              _Block_release(v41);
            }

            if ((*(_BYTE *)(v4 + 72) & 1) != 0)
            {
              os_log_type_t v42 = *(const void **)(v4 + 64);
              if (v42) {
                _Block_release(v42);
              }
            }

    if (v73) {
      free(v73);
    }
    char v29 = 0LL;
LABEL_38:

    os_log_type_t v30 = *((_BYTE *)v6 + 760);
    if ((v30 & 1) != 0)
    {
      nw_endpoint_t v31 = v6[94];
      if (v31)
      {
        _Block_release(v31);
        os_log_type_t v30 = *((_BYTE *)v6 + 760);
      }
    }

    v6[94] = v29;
    *((_BYTE *)v6 + 760) = v30 | 1;
    char v32 = v25;
    BOOL v33 = nw_protocol_options_copy_definition(v32);
    if (nw_protocol_copy_http_authentication_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_29_72963);
    }
    nw_endpoint_t v34 = nw_protocol_definition_is_equal( v33,  (nw_protocol_definition_t)nw_protocol_copy_http_authentication_definition_http_authentication_definition);

    if (v34)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      unsigned int v119 = (uint64_t)__Block_byref_object_copy__4;
      uint64_t v120 = __Block_byref_object_dispose__5;
      id v121 = 0LL;
      *(void *)os_log_type_t type = v28;
      uint64_t v113 = 3221225472LL;
      BOOL v114 = __nw_http_authentication_options_copy_challenge_queue_block_invoke;
      int v115 = &unk_189BC60A8;
      nw_endpoint_t v116 = buf;
      nw_protocol_options_access_handle(v32, type);
      BOOL v35 = (dispatch_object_s *)*(id *)(*(void *)&buf[8] + 40LL);
      _Block_object_dispose(buf, 8);

      goto LABEL_45;
    }

    __nwlog_obj();
    uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_challenge_queue";
    os_log_type_t v108 = (const char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    nw_endpoint_t v117 = 0;
    uint64_t v77 = (char *)v108;
    if (!__nwlog_fault(v108, type, &v117))
    {
LABEL_189:
      if (v77) {
        free(v77);
      }
      BOOL v35 = 0LL;
LABEL_45:

      uint64_t v36 = *((_BYTE *)v6 + 776);
      if ((v36 & 1) != 0)
      {
        os_log_type_t v37 = v6[96];
        if (v37)
        {
          dispatch_release(v37);
          uint64_t v36 = *((_BYTE *)v6 + 776);
        }
      }

      v6[96] = v35;
      *((_BYTE *)v6 + 776) = v36 | 1;
      unint64_t v38 = v32;
      uint64_t v39 = nw_protocol_options_copy_definition(v38);
      if (nw_protocol_copy_http_authentication_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_29_72963);
      }
      uint64_t v40 = nw_protocol_definition_is_equal( v39,  (nw_protocol_definition_t)nw_protocol_copy_http_authentication_definition_http_authentication_definition);

      if (v40)
      {
        *(void *)buf = 0LL;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x3032000000LL;
        unsigned int v119 = (uint64_t)__Block_byref_object_copy__4;
        uint64_t v120 = __Block_byref_object_dispose__5;
        id v121 = 0LL;
        *(void *)os_log_type_t type = v28;
        uint64_t v113 = 3221225472LL;
        BOOL v114 = __nw_http_authentication_options_copy_credential_storage_block_invoke;
        int v115 = &unk_189BC60A8;
        nw_endpoint_t v116 = buf;
        nw_protocol_options_access_handle(v38, type);
        uint64_t v41 = (dispatch_object_s *)*(id *)(*(void *)&buf[8] + 40LL);
        _Block_object_dispose(buf, 8);

        goto LABEL_52;
      }

      __nwlog_obj();
      nw_endpoint_t v80 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_credential_storage";
      v109 = (const char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      nw_endpoint_t v117 = 0;
      __int16 v81 = (char *)v109;
      if (!__nwlog_fault(v109, type, &v117))
      {
LABEL_196:
        if (v81) {
          free(v81);
        }
        uint64_t v41 = 0LL;
LABEL_52:

        os_log_type_t v42 = *((_BYTE *)v6 + 696);
        if ((v42 & 1) != 0)
        {
          char v43 = v6[86];
          if (v43)
          {
            os_release(v43);
            os_log_type_t v42 = *((_BYTE *)v6 + 696);
          }
        }

        v6[86] = v41;
        *((_BYTE *)v6 + 696) = v42 | 1;
        uint64_t v44 = (dispatch_object_s *)nw_http_authentication_options_copy_credential_cache(v38);
        os_log_type_t v45 = *((_BYTE *)v6 + 712);
        if ((v45 & 1) != 0)
        {
          BOOL v46 = v6[88];
          if (v46)
          {
            os_release(v46);
            os_log_type_t v45 = *((_BYTE *)v6 + 712);
          }
        }

        v6[88] = v44;
        *((_BYTE *)v6 + 712) = v45 | 1;
        char v47 = v38;
        BOOL v48 = nw_protocol_options_copy_definition(v47);
        if (nw_protocol_copy_http_authentication_definition_onceToken != -1) {
          dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_29_72963);
        }
        uint64_t v49 = nw_protocol_definition_is_equal( v48,  (nw_protocol_definition_t)nw_protocol_copy_http_authentication_definition_http_authentication_definition);

        if (v49)
        {
          *(void *)buf = 0LL;
          *(void *)&buf[8] = buf;
          *(void *)&buf[16] = 0x3032000000LL;
          unsigned int v119 = (uint64_t)__Block_byref_object_copy__4;
          uint64_t v120 = __Block_byref_object_dispose__5;
          id v121 = 0LL;
          *(void *)os_log_type_t type = v28;
          uint64_t v113 = 3221225472LL;
          BOOL v114 = __nw_http_authentication_options_copy_h1_fallback_cache_block_invoke;
          int v115 = &unk_189BC60A8;
          nw_endpoint_t v116 = buf;
          nw_protocol_options_access_handle(v47, type);
          nw_endpoint_t v50 = (dispatch_object_s *)*(id *)(*(void *)&buf[8] + 40LL);
          _Block_object_dispose(buf, 8);

LABEL_62:
          os_log_type_t v51 = *((_BYTE *)v6 + 728);
          if ((v51 & 1) != 0)
          {
            uint64_t v52 = v6[90];
            uint64_t v24 = v110;
            __int16 v22 = v111;
            if (v52)
            {
              os_release(v52);
              os_log_type_t v51 = *((_BYTE *)v6 + 728);
            }
          }

          else
          {
            uint64_t v24 = v110;
            __int16 v22 = v111;
          }

          v6[90] = v50;
          *((_BYTE *)v6 + 72_Block_object_dispose(va, 8) = v51 | 1;
          os_log_type_t v53 = nw_http_authentication_options_copy_appsso_h1_fallback_headers(v47);
          os_log_type_t v54 = *((_BYTE *)v6 + 744);
          if ((v54 & 1) != 0)
          {
            char v55 = v6[92];
            if (v55)
            {
              os_release(v55);
              os_log_type_t v54 = *((_BYTE *)v6 + 744);
            }
          }

          v6[92] = (dispatch_object_s *)v53;
          *((_BYTE *)v6 + 744) = v54 | 1;
          goto LABEL_70;
        }

        __nwlog_obj();
        int v84 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_h1_fallback_cache";
        os_log_type_t v85 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        nw_endpoint_t v117 = 0;
        if (__nwlog_fault(v85, type, &v117))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v86 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            uint64_t v87 = type[0];
            if (os_log_type_enabled(v86, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_h1_fallback_cache";
              _os_log_impl( &dword_181A5C000,  v86,  v87,  "%{public}s protocol options are not http_authentication",  buf,  0xCu);
            }
          }

          else if (v117)
          {
            BOOL v98 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v86 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            id v99 = type[0];
            BOOL v100 = os_log_type_enabled(v86, type[0]);
            if (v98)
            {
              if (v100)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_h1_fallback_cache";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v98;
                _os_log_impl( &dword_181A5C000,  v86,  v99,  "%{public}s protocol options are not http_authentication, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v98);
              goto LABEL_202;
            }

            if (v100)
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_h1_fallback_cache";
              _os_log_impl( &dword_181A5C000,  v86,  v99,  "%{public}s protocol options are not http_authentication, no backtrace",  buf,  0xCu);
            }
          }

          else
          {
            __nwlog_obj();
            v86 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v104 = type[0];
            if (os_log_type_enabled(v86, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_h1_fallback_cache";
              _os_log_impl( &dword_181A5C000,  v86,  v104,  "%{public}s protocol options are not http_authentication, backtrace limit exceeded",  buf,  0xCu);
            }
          }
        }

        if ((v88 & 0x10) == 0) {
          goto LABEL_184;
        }
        goto LABEL_183;
      }

      goto LABEL_148;
    }

    if ((v22 & 0x10000) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
      }
      os_log_type_t v37 = (os_log_s *)gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_INFO))
      {
        unint64_t v38 = nw_endpoint_get_logging_description(*(void **)(a1 + 312));
        *(_DWORD *)&buf[0].sa_len = 136446722;
        *(void *)&buf[0].sa_data[2] = a1 + 531;
        *(_WORD *)&buf[0].sa_data[10] = 2080;
        *(void *)&buf[0].sa_data[12] = " ";
        *(_WORD *)&buf[1].sa_data[4] = 2082;
        *(void *)&buf[1].sa_data[6] = v38;
        _os_log_impl( &dword_181A5C000,  v37,  OS_LOG_TYPE_INFO,  "%{public}s%sCreating CONNECT (connect-udp) request for %{public}s",  &buf[0].sa_len,  0x20u);
      }
    }

    uint64_t v39 = *(void **)(a1 + 344);
    if (!v39 || (uint64_t v40 = v39, v41 = v40[3], v40, !v41))
    {
      if ((*(_BYTE *)(a1 + 529) & 1) != 0) {
        goto LABEL_109;
      }
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
      }
      uint64_t v36 = (os_log_s *)gprivacy_proxyLogObj;
      if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
        goto LABEL_109;
      }
      goto LABEL_102;
    }

    os_log_type_t v42 = v41;
    char v43 = [v42 hostname];

    uint64_t v44 = v42;
    os_log_type_t v45 = [v44 port];

    os_release(v44);
    if (!v43)
    {
      if ((*(_BYTE *)(a1 + 529) & 1) != 0) {
        goto LABEL_109;
      }
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
      }
      uint64_t v36 = (os_log_s *)gprivacy_proxyLogObj;
      if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
        goto LABEL_109;
      }
      goto LABEL_107;
    }

    BOOL v46 = __rev16(v45);
    if (v46 != 443 && v46) {
      asprintf(&v145, "%s:%u");
    }
    else {
      asprintf(&v145, "%s");
    }
    os_log_type_t v63 = "connect-udp";
    BOOL v64 = 1;
  }
      }
    }

                        os_log_type_t v70 = *(void *)(a1 + 88);
                        if (v70)
                        {
                          os_log_type_t v71 = *(uint64_t (**)(uint64_t))(v70 + 104);
                          if (v71)
                          {
                            int v72 = v71(a1);
                            if (v72)
                            {
                              if (v72 != 21)
                              {
                                uint64_t result = 0LL;
                                *(_DWORD *)(a1 + 24) = 27;
                                goto LABEL_2272;
                              }

                              uint64_t result = 0LL;
                              *(_DWORD *)(a1 + 24) = 21;
                              uint64_t v73 = "on_status_complete pause";
                              goto LABEL_1148;
                            }
                          }
                        }

      goto LABEL_183;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
    os_log_type_t v42 = (char *)_os_log_send_and_compose_impl();
    v114[0] = 16;
    LOBYTE(v97) = 0;
    if (__nwlog_fault(v42, v114, &v97))
    {
      if (v114[0] == 17)
      {
        char v43 = (os_log_s *)__nwlog_obj();
        uint64_t v44 = v114[0];
        if (os_log_type_enabled(v43, (os_log_type_t)v114[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
          os_log_type_t v45 = "%{public}s called with null alt_svc_options";
LABEL_161:
          _os_log_impl(&dword_181A5C000, v43, v44, v45, buf, 0xCu);
        }
      }

      else if ((_BYTE)v97)
      {
        os_log_type_t v63 = (char *)__nw_create_backtrace_string();
        char v43 = (os_log_s *)__nwlog_obj();
        uint64_t v44 = v114[0];
        BOOL v64 = os_log_type_enabled(v43, (os_log_type_t)v114[0]);
        if (v63)
        {
          if (v64)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v63;
            _os_log_impl( &dword_181A5C000,  v43,  v44,  "%{public}s called with null alt_svc_options, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v63);
          goto LABEL_162;
        }

        if (v64)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
          os_log_type_t v45 = "%{public}s called with null alt_svc_options, no backtrace";
          goto LABEL_161;
        }
      }

      else
      {
        char v43 = (os_log_s *)__nwlog_obj();
        uint64_t v44 = v114[0];
        if (os_log_type_enabled(v43, (os_log_type_t)v114[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
          os_log_type_t v45 = "%{public}s called with null alt_svc_options, backtrace limit exceeded";
          goto LABEL_161;
        }
      }
    }

LABEL_273:
        goto LABEL_274;
      }

      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v44 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v179 = nw_endpoint_handler_get_id_string(v5);
        os_log_type_t v180 = nw_endpoint_handler_dry_run_string(v5);
        nw_endpoint_t v181 = nw_endpoint_handler_copy_endpoint(v5);
        v182 = nw_endpoint_get_logging_description(v181);
        v183 = nw_endpoint_handler_state_string(v5);
        v184 = nw_endpoint_handler_mode_string(v5);
        id v185 = nw_endpoint_handler_copy_current_path(v5);
        *(_DWORD *)buf = 136448002;
        *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v179;
        __int16 v250 = 2082;
        id v251 = v180;
        __int16 v252 = 2082;
        unint64_t v253 = v182;
        __int16 v254 = 2082;
        v255 = v183;
        __int16 v256 = 2082;
        v257 = v184;
        __int16 v258 = 2114;
        id v259 = v185;
        __int16 v260 = 2082;
        unint64_t v261 = (unint64_t)nw_endpoint_get_logging_description(endpoint);
        _os_log_impl( &dword_181A5C000,  v44,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] starting child endpoint %{public}s",  buf,  0x52u);
      }
    }

    else
    {
      os_log_type_t v42 = v5;
      char v43 = *((_BYTE *)v42 + 268);

      if ((v43 & 0x20) != 0) {
        goto LABEL_101;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v44 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
      {
        os_log_type_t v45 = v42;

        BOOL v46 = v45;
        char v47 = *((_BYTE *)v42 + 268);

        if ((v47 & 1) != 0) {
          BOOL v48 = "dry-run ";
        }
        else {
          BOOL v48 = "";
        }
        nw_endpoint_t log = nw_endpoint_handler_copy_endpoint(v46);
        uint64_t v49 = nw_endpoint_get_logging_description(log);
        nw_endpoint_t v50 = v46;
        os_log_type_t v51 = v50;
        uint64_t v52 = v5->state;
        else {
          os_log_type_t v53 = off_189BBBBF0[v52];
        }
        v233 = v53;

        __int16 v83 = v51;
        int v84 = v83;
        os_log_type_t v85 = v49;
        v86 = "path";
        switch(v2->mode)
        {
          case 0:
            break;
          case 1:
            v86 = "resolver";
            break;
          case 2:
            v86 = nw_endpoint_flow_mode_string(v83[31]);
            break;
          case 3:
            v86 = "proxy";
            break;
          case 4:
            v86 = "fallback";
            break;
          case 5:
            v86 = "transform";
            break;
          default:
            v86 = "unknown-mode";
            break;
        }

        char v89 = v84;
        os_unfair_lock_lock((os_unfair_lock_t)v89 + 28);
        id v90 = v89[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v89 + 28);

        id v91 = v90;
        *(_DWORD *)buf = 136448002;
        *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v45->id_str;
        __int16 v250 = 2082;
        id v251 = v48;
        __int16 v252 = 2082;
        unint64_t v253 = v85;
        __int16 v254 = 2082;
        v255 = v233;
        __int16 v256 = 2082;
        v257 = v86;
        __int16 v258 = 2114;
        id v259 = v91;
        __int16 v260 = 2082;
        unint64_t v261 = (unint64_t)nw_endpoint_get_logging_description(endpoint);
        _os_log_impl( &dword_181A5C000,  v44,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] starting child endpoint %{public}s",  buf,  0x52u);
      }
    }

    goto LABEL_101;
  }

  __int16 v152 = 0LL;
  __nwlog_obj();
  v153 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
  __int16 v154 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  char v247 = 0;
  if (__nwlog_fault(v154, type, &v247))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      nw_endpoint_t v155 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v156 = type[0];
      if (os_log_type_enabled(v155, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
        _os_log_impl(&dword_181A5C000, v155, v156, "%{public}s called with null handler", buf, 0xCu);
      }
    }

    else if (v247)
    {
      __int16 v160 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      nw_endpoint_t v155 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v161 = type[0];
      BOOL v162 = os_log_type_enabled(v155, type[0]);
      if (v160)
      {
        if (v162)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v160;
          _os_log_impl( &dword_181A5C000,  v155,  v161,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v160);
        goto LABEL_202;
      }

      if (v162)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
        _os_log_impl(&dword_181A5C000, v155, v161, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      nw_endpoint_t v155 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v171 = type[0];
      if (os_log_type_enabled(v155, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_start_next_child";
        _os_log_impl( &dword_181A5C000,  v155,  v171,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }
            }
          }

          else
          {
            __nwlog_obj();
            os_log_type_t v169 = (void *)objc_claimAutoreleasedReturnValue();
            id v170 = *((_DWORD *)v1 + 85);
            os_log_type_t v171 = nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3));
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v170;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v171;
            uint64_t v164 = (char *)_os_log_send_and_compose_impl();

            handler[0] = 16;
            applier[0] = 0;
            if (handler[0] == 17)
            {
              __nwlog_obj();
              id v165 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              v172 = handler[0];
              if (os_log_type_enabled(v165, (os_log_type_t)handler[0]))
              {
                os_log_type_t v173 = *((_DWORD *)v1 + 85);
                nw_endpoint_t v174 = nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3));
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v173;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v174;
                _os_log_impl( &dword_181A5C000,  v165,  v172,  "%{public}s [R%u] unknown resolver mode of operation for type %d",  buf,  0x18u);
              }

              goto LABEL_273;
            }

            if (!applier[0])
            {
              __nwlog_obj();
              id v165 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v189 = handler[0];
              if (os_log_type_enabled(v165, (os_log_type_t)handler[0]))
              {
                v190 = *((_DWORD *)v1 + 85);
                os_log_type_t v191 = nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3));
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v190;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v191;
                _os_log_impl( &dword_181A5C000,  v165,  v189,  "%{public}s [R%u] unknown resolver mode of operation for type %d, backtrace limit exceeded",  buf,  0x18u);
              }

              goto LABEL_273;
            }

            os_log_type_t v180 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            id v165 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            nw_endpoint_t v181 = handler[0];
            v182 = os_log_type_enabled(v165, (os_log_type_t)handler[0]);
            if (!v180)
            {
              if (v182)
              {
                v194 = *((_DWORD *)v1 + 85);
                os_log_type_t v195 = nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3));
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v194;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v195;
                _os_log_impl( &dword_181A5C000,  v165,  v181,  "%{public}s [R%u] unknown resolver mode of operation for type %d, no backtrace",  buf,  0x18u);
              }

              goto LABEL_273;
            }

            if (v182)
            {
              v183 = *((_DWORD *)v1 + 85);
              v184 = nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3));
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_service_locked";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v183;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v184;
              *(_WORD *)&_BYTE buf[24] = 2082;
              *(void *)&buf[26] = v180;
              _os_log_impl( &dword_181A5C000,  v165,  v181,  "%{public}s [R%u] unknown resolver mode of operation for type %d, dumping backtrace:%{public}s",  buf,  0x22u);
            }

            free(v180);
          }

          _os_log_impl(&dword_181A5C000, v48, v49, v50, buf, 0xCu);
          goto LABEL_274;
        }

        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        id v95 = "nw_http1_get_stream_for_protocol";
        os_log_type_t v70 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        __int16 v92 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v71 = (os_log_s *)__nwlog_obj();
          int v72 = type;
          if (!os_log_type_enabled(v71, type)) {
            goto LABEL_237;
          }
          *(_DWORD *)buf = 136446210;
          id v95 = "nw_http1_get_stream_for_protocol";
          uint64_t v73 = "%{public}s called with null handle->http1_connection";
        }

        else if (v92)
        {
          int v84 = (char *)__nw_create_backtrace_string();
          os_log_type_t v71 = (os_log_s *)__nwlog_obj();
          int v72 = type;
          os_log_type_t v85 = os_log_type_enabled(v71, type);
          if (v84)
          {
            if (v85)
            {
              *(_DWORD *)buf = 136446466;
              id v95 = "nw_http1_get_stream_for_protocol";
              unsigned int v96 = 2082;
              os_log_type_t v97 = v84;
              _os_log_impl( &dword_181A5C000,  v71,  v72,  "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v84);
            goto LABEL_237;
          }

          if (!v85)
          {
LABEL_237:
            if (v70) {
              free(v70);
            }
            goto LABEL_239;
          }

          *(_DWORD *)buf = 136446210;
          id v95 = "nw_http1_get_stream_for_protocol";
          uint64_t v73 = "%{public}s called with null handle->http1_connection, no backtrace";
        }

        else
        {
          os_log_type_t v71 = (os_log_s *)__nwlog_obj();
          int v72 = type;
          if (!os_log_type_enabled(v71, type)) {
            goto LABEL_237;
          }
          *(_DWORD *)buf = 136446210;
          id v95 = "nw_http1_get_stream_for_protocol";
          uint64_t v73 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        }

        _os_log_impl(&dword_181A5C000, v71, v72, v73, buf, 0xCu);
        goto LABEL_237;
      case 0xFu:
        if (v5 == 2)
        {
          uint64_t v10 = (uint64_t *)(v3 + 8);
LABEL_28:
          os_log_type_t v15 = *v10;
          if (v15)
          {
            nw_protocol_reset(a1, *(void *)(v15 + 48));
            return;
          }

    id v131 = v132;
    goto LABEL_245;
  }

  __int16 v17 = *(void *)(v5 + 488);
  if (!v17)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    nw_endpoint_t v50 = *(const char **)(*(void *)(a1[4] + 8LL) + 24LL);
    *(_DWORD *)buf = 136446466;
    uint64_t v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
    v141 = 2048;
    uint64_t v142 = v50;
    os_log_type_t v51 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    __int16 v138 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v51, type, &v138))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v52 = (os_log_s *)__nwlog_obj();
        os_log_type_t v53 = type[0];
        if (os_log_type_enabled(v52, type[0]))
        {
          os_log_type_t v54 = *(const char **)(*(void *)(a1[4] + 8LL) + 24LL);
          *(_DWORD *)buf = 136446466;
          uint64_t v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
          v141 = 2048;
          uint64_t v142 = v54;
          char v55 = "%{public}s stream not found for connection %p";
LABEL_130:
          _os_log_impl(&dword_181A5C000, v52, v53, v55, buf, 0x16u);
        }
      }

      else if (v138)
      {
        char v59 = (char *)__nw_create_backtrace_string();
        uint64_t v52 = (os_log_s *)__nwlog_obj();
        os_log_type_t v53 = type[0];
        int v60 = os_log_type_enabled(v52, type[0]);
        if (v59)
        {
          if (v60)
          {
            nw_endpoint_t v61 = *(const char **)(*(void *)(a1[4] + 8LL) + 24LL);
            *(_DWORD *)buf = 136446722;
            uint64_t v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
            v141 = 2048;
            uint64_t v142 = v61;
            id v143 = 2082;
            id v144 = v59;
            _os_log_impl( &dword_181A5C000,  v52,  v53,  "%{public}s stream not found for connection %p, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v59);
          goto LABEL_131;
        }

        if (v60)
        {
          int v84 = *(const char **)(*(void *)(a1[4] + 8LL) + 24LL);
          *(_DWORD *)buf = 136446466;
          uint64_t v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
          v141 = 2048;
          uint64_t v142 = v84;
          char v55 = "%{public}s stream not found for connection %p, no backtrace";
          goto LABEL_130;
        }
      }

      else
      {
        uint64_t v52 = (os_log_s *)__nwlog_obj();
        os_log_type_t v53 = type[0];
        if (os_log_type_enabled(v52, type[0]))
        {
          unsigned int v62 = *(const char **)(*(void *)(a1[4] + 8LL) + 24LL);
          *(_DWORD *)buf = 136446466;
          uint64_t v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
          v141 = 2048;
          uint64_t v142 = v62;
          char v55 = "%{public}s stream not found for connection %p, backtrace limit exceeded";
          goto LABEL_130;
        }
      }
    }

            _os_log_impl(&dword_181A5C000, v124, v125, v127, v177, 0x18u);
            goto LABEL_274;
          }

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          unsigned int v124 = (os_log_s *)gLogObj;
          int v125 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type))
          {
            char v126 = *(_DWORD *)(v165 + 172);
            *(_DWORD *)BOOL v177 = 136446722;
            *(void *)&v177[4] = "nw_socket_set_receive_low_water_mark";
            *(_WORD *)&v177[12] = 1024;
            *(_DWORD *)&v177[14] = v126;
            *(_WORD *)&v177[18] = 1024;
            *(_DWORD *)&v177[20] = v119;
            nw_endpoint_t v127 = "%{public}s getsockopt SO_RCVBUF fd %d failed %{darwin.errno}d";
            goto LABEL_273;
          }
        }

          if (v182) {
            free(v182);
          }
          goto LABEL_237;
        }

        if (v213 == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          id v133 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          int v134 = v213;
          if (os_log_type_enabled(v133, v213))
          {
            char v135 = output_handler->identifier->name;
            if (!v135) {
              char v135 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            os_log_type_t v219 = "__nw_protocol_remove_input_handler";
            v220 = 2082;
            v221 = (char *)v135;
            nw_endpoint_t v222 = 2048;
            nw_endpoint_t v223 = output_handler;
            _os_log_impl( &dword_181A5C000,  v133,  v134,  "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback",  buf,  0x20u);
          }
        }

        else if (v212)
        {
          nw_endpoint_t v139 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          id v133 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v140 = v213;
          v141 = os_log_type_enabled(v133, v213);
          if (v139)
          {
            if (v141)
            {
              uint64_t v142 = output_handler->identifier->name;
              if (!v142) {
                uint64_t v142 = "invalid";
              }
              *(_DWORD *)buf = 136446978;
              os_log_type_t v219 = "__nw_protocol_remove_input_handler";
              v220 = 2082;
              v221 = (char *)v142;
              nw_endpoint_t v222 = 2048;
              nw_endpoint_t v223 = output_handler;
              unint64_t v224 = 2082;
              v225 = v139;
              _os_log_impl( &dword_181A5C000,  v133,  v140,  "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, dumping backtrace:%{public}s",  buf,  0x2Au);
            }

            free(v139);
            goto LABEL_209;
          }

          if (v141)
          {
            v157 = output_handler->identifier->name;
            if (!v157) {
              v157 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            os_log_type_t v219 = "__nw_protocol_remove_input_handler";
            v220 = 2082;
            v221 = (char *)v157;
            nw_endpoint_t v222 = 2048;
            nw_endpoint_t v223 = output_handler;
            _os_log_impl( &dword_181A5C000,  v133,  v140,  "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, no backtrace",  buf,  0x20u);
          }
        }

        else
        {
          __nwlog_obj();
          id v133 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          nw_endpoint_t v155 = v213;
          if (os_log_type_enabled(v133, v213))
          {
            os_log_type_t v156 = output_handler->identifier->name;
            if (!v156) {
              os_log_type_t v156 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            os_log_type_t v219 = "__nw_protocol_remove_input_handler";
            v220 = 2082;
            v221 = (char *)v156;
            nw_endpoint_t v222 = 2048;
            nw_endpoint_t v223 = output_handler;
            _os_log_impl( &dword_181A5C000,  v133,  v155,  "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, backtrace limit exceeded",  buf,  0x20u);
          }
        }

LABEL_209:
        v132 = (char *)logb;
        goto LABEL_210;
      }

      __nwlog_obj();
      nw_endpoint_t v117 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v219 = "nw_endpoint_handler_get_state";
      id v118 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v214) = 0;
      if (__nwlog_fault(v118, type, &v214))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          unsigned int v119 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v120 = type[0];
          if (os_log_type_enabled(v119, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v219 = "nw_endpoint_handler_get_state";
            _os_log_impl(&dword_181A5C000, v119, v120, "%{public}s called with null handler", buf, 0xCu);
          }

void sub_181B224A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_get_state(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[30];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  nw_endpoint_t v16 = "nw_endpoint_handler_get_state";
  nw_endpoint_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        nw_endpoint_t v16 = "nw_endpoint_handler_get_state";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null handler", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          nw_endpoint_t v16 = "nw_endpoint_handler_get_state";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        nw_endpoint_t v16 = "nw_endpoint_handler_get_state";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        nw_endpoint_t v16 = "nw_endpoint_handler_get_state";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_endpoint_resolver_receive_report( void *a1, int a2, unsigned int a3, unsigned __int16 *a4, void *a5, void *a6)
{
  uint64_t v312 = *MEMORY[0x1895F89C0];
  object = a1;
  id v270 = a5;
  id v12 = a6;
  v271 = v12;
  if (!v12)
  {
    __nwlog_obj();
    os_log_type_t v187 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_receive_report";
    v188 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v288 = 0;
    if (__nwlog_fault(v188, type, &v288))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v189 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v190 = type[0];
        if (os_log_type_enabled(v189, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_receive_report";
          _os_log_impl(&dword_181A5C000, v189, v190, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v288)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v189 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v192 = type[0];
        BOOL v193 = os_log_type_enabled(v189, type[0]);
        if (backtrace_string)
        {
          if (v193)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_receive_report";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v189,  v192,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_226;
        }

        if (v193)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_receive_report";
          _os_log_impl(&dword_181A5C000, v189, v192, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v189 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v194 = type[0];
        if (os_log_type_enabled(v189, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_receive_report";
          _os_log_impl( &dword_181A5C000,  v189,  v194,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

LABEL_190:
                    uint64_t v30 = 1LL;
                    goto LABEL_191;
                  }
                }

                else
                {
                  BOOL v114 = nw_array_create();
                  int v115 = (void *)*((void *)v45 + 6);
                  *((void *)v45 + 6) = v114;

                  uint64_t v110 = *((void *)v45 + 6);
                }

                nw_array_append(v110, object);
                uint64_t v113 = v269;
                goto LABEL_130;
              }

              if (v107 & 1 | !v87) {
                goto LABEL_190;
              }
              *((_BYTE *)v45 + 24) = v107 | 1;
              if (!*((void *)v45 + 7)) {
                goto LABEL_190;
              }
              int v126 = nw_endpoint_handler_get_minimize_logging(v269);
              char v127 = nw_endpoint_handler_get_logging_disabled(v269);
              if (v126)
              {
                if ((v127 & 1) != 0) {
                  goto LABEL_155;
                }
                if (v17[79] != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                id v128 = (os_log_s *)(id)gconnectionLogObj;
                if (os_log_type_enabled(v128, OS_LOG_TYPE_DEBUG))
                {
                  BOOL v209 = nw_endpoint_handler_get_id_string(v269);
                  v210 = nw_endpoint_handler_dry_run_string(v269);
                  nw_endpoint_t v211 = nw_endpoint_handler_copy_endpoint(v269);
                  nw_endpoint_t v212 = nw_endpoint_get_logging_description(v211);
                  uint64_t v213 = nw_endpoint_handler_state_string(v269);
                  v214 = nw_endpoint_handler_mode_string(v269);
                  id v215 = nw_endpoint_handler_copy_current_path(v269);
                  *(_DWORD *)buf = 136448002;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_receive_report";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v209;
                  __int16 v290 = 2082;
                  v291 = v210;
                  __int16 v292 = 2082;
                  uint64_t v293 = v212;
                  __int16 v294 = 2082;
                  v295 = (void *)v213;
                  __int16 v296 = 2082;
                  v297 = v214;
                  __int16 v298 = 2114;
                  id v299 = v215;
                  __int16 v300 = 2048;
                  uint64_t v301 = 2000LL;
                  _os_log_impl( &dword_181A5C000,  v128,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] pushing out endpoin t race by %llums",  buf,  0x52u);
                }
              }

              else
              {
                if ((v127 & 1) != 0)
                {
LABEL_155:
                  uint64_t v136 = *((void *)v45 + 7);
                  dispatch_time_t v137 = dispatch_time(0x8000000000000000LL, 2000000000LL);
                  nw_queue_set_timer_values(v136, v137, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
                  goto LABEL_190;
                }

                if (v17[79] != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                id v128 = (os_log_s *)(id)gconnectionLogObj;
                if (os_log_type_enabled(v128, OS_LOG_TYPE_INFO))
                {
                  nw_endpoint_t v129 = nw_endpoint_handler_get_id_string(v269);
                  __int128 v130 = nw_endpoint_handler_dry_run_string(v269);
                  nw_endpoint_t v131 = nw_endpoint_handler_copy_endpoint(v269);
                  v132 = nw_endpoint_get_logging_description(v131);
                  id v133 = nw_endpoint_handler_state_string(v269);
                  int v134 = nw_endpoint_handler_mode_string(v269);
                  id v135 = nw_endpoint_handler_copy_current_path(v269);
                  *(_DWORD *)buf = 136448002;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_receive_report";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v129;
                  __int16 v290 = 2082;
                  v291 = v130;
                  __int16 v292 = 2082;
                  uint64_t v293 = v132;
                  __int16 v294 = 2082;
                  v295 = (void *)v133;
                  __int16 v296 = 2082;
                  v297 = v134;
                  __int16 v298 = 2114;
                  id v299 = v135;
                  __int16 v300 = 2048;
                  uint64_t v301 = 2000LL;
                  _os_log_impl( &dword_181A5C000,  v128,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] pushing out endpoin t race by %llums",  buf,  0x52u);
                }
              }

              goto LABEL_155;
            }
          }

          uint64_t v91 = *((void *)v45 + 7);
          if (v91)
          {
            nw_queue_cancel_source(v91, v85);
            *((void *)v45 + 7) = 0LL;
          }

          uint64_t v92 = *((void *)v45 + 8);
          if (v92)
          {
            nw_queue_cancel_source(v92, v85);
            *((void *)v45 + _Block_object_dispose(va, 8) = 0LL;
          }

          uint64_t v93 = *((void *)v45 + 9);
          if (v93)
          {
            nw_queue_cancel_source(v93, v85);
            *((void *)v45 + 9) = 0LL;
          }

          if (v261 != 4)
          {
            objc_storeStrong((id *)v45 + 4, obj);
            if (v261 == 3)
            {
              unsigned int v122 = v269;
              v122[30] = 3;
            }

            nw_endpoint_handler_report(v269, 0LL, v258, 0LL);
            int v123 = (unsigned __int8 *)*((void *)v45 + 5);
            v284[0] = MEMORY[0x1895F87A8];
            v284[1] = 3221225472LL;
            v284[2] = ___ZL35nw_endpoint_resolver_receive_reportP30NWConcrete_nw_endpoint_handler26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_error8NSObjectPU23objcproto12OS_nw_objectS5__block_invoke_110;
            v284[3] = &unk_189BC85B0;
            v285 = object;
            nw_array_apply(v123, (uint64_t)v284);
            if (*((void *)v45 + 1))
            {
              unsigned int v124 = v269;
              id v125 = v124[4];

              if (nw_parameters_get_use_long_outstanding_queries(v125))
              {
              }

              else
              {
                __int16 v138 = nw_endpoint_handler_copy_endpoint(v124);
                BOOL v139 = nw_endpoint_get_type(v138) == nw_endpoint_type_bonjour_service;

                if (v139) {
                  nw_resolver_cancel(*((void **)v45 + 1));
                }
              }
            }

            nw_endpoint_t v50 = v285;
            goto LABEL_159;
          }

          if (nw_endpoint_handler_get_minimize_logging(v269))
          {
            if (v17[79] != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            unsigned int v96 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
            {
              os_log_type_t v195 = nw_endpoint_handler_get_id_string(v269);
              BOOL v196 = nw_endpoint_handler_dry_run_string(v269);
              nw_endpoint_t v197 = nw_endpoint_handler_copy_endpoint(v269);
              os_log_type_t v198 = nw_endpoint_get_logging_description(v197);
              BOOL v199 = nw_endpoint_handler_state_string(v269);
              os_log_type_t v200 = nw_endpoint_handler_mode_string(v269);
              id v201 = nw_endpoint_handler_copy_current_path(v269);
              *(_DWORD *)buf = 136447746;
              *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_receive_report";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v195;
              __int16 v290 = 2082;
              v291 = v196;
              __int16 v292 = 2082;
              uint64_t v293 = v198;
              __int16 v294 = 2082;
              v295 = (void *)v199;
              __int16 v296 = 2082;
              v297 = v200;
              __int16 v298 = 2114;
              id v299 = v201;
              _os_log_impl( &dword_181A5C000,  v96,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] child failed after transport finished",  buf,  0x48u);
            }
          }

          else
          {
            BOOL v94 = v269;
            BOOL v95 = (v269[67] & 0x20) == 0;

            if (!v95)
            {
LABEL_189:
              nw_endpoint_handler_handle_failure(v269);
              v269[20] = 327682;
              nw_endpoint_handler_report(v269, 0LL, (_WORD *)v269 + 40, 0LL);
              goto LABEL_190;
            }

            if (v17[79] != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            unsigned int v96 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v96, OS_LOG_TYPE_INFO))
            {
              os_log_type_t v97 = v94;

              BOOL v98 = v97;
              BOOL v99 = (v269[67] & 1) == 0;

              if (v99) {
                BOOL v100 = "";
              }
              else {
                BOOL v100 = "dry-run ";
              }
              nw_endpoint_t v101 = nw_endpoint_handler_copy_endpoint(v98);
              os_log_type_t v102 = nw_endpoint_get_logging_description(v101);
              nw_endpoint_t v103 = v98;
              os_log_type_t v104 = v103;
              uint64_t v105 = v103[30];
              else {
                nw_endpoint_t v106 = off_189BBBBF0[v105];
              }
              os_log_t v263 = (os_log_t)v106;

              uint64_t v140 = v104;
              v141 = v140;
              uint64_t v142 = "path";
              switch(v13[29])
              {
                case 0u:
                  break;
                case 1u:
                  uint64_t v142 = "resolver";
                  break;
                case 2u:
                  uint64_t v142 = nw_endpoint_flow_mode_string(v140[31]);
                  break;
                case 3u:
                  uint64_t v142 = "proxy";
                  break;
                case 4u:
                  uint64_t v142 = "fallback";
                  break;
                case 5u:
                  uint64_t v142 = "transform";
                  break;
                default:
                  uint64_t v142 = "unknown-mode";
                  break;
              }

              id v165 = v141;
              os_unfair_lock_lock((os_unfair_lock_t)v165 + 28);
              id v166 = v165[8];
              os_unfair_lock_unlock((os_unfair_lock_t)v165 + 28);

              *(_DWORD *)buf = 136447746;
              *(void *)&uint8_t buf[4] = "nw_endpoint_resolver_receive_report";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v97 + 168;
              __int16 v290 = 2082;
              v291 = v100;
              __int16 v292 = 2082;
              uint64_t v293 = v102;
              __int16 v294 = 2082;
              v295 = v263;
              __int16 v296 = 2082;
              v297 = v142;
              __int16 v298 = 2114;
              id v299 = v166;
              _os_log_impl( &dword_181A5C000,  v96,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] child failed after transport finished",  buf,  0x48u);
            }
          }

          goto LABEL_189;
        }

        if (*((os_log_s **)v45 + 4) != object)
        {
          if (a2 == 2 && a3 == 4)
          {
            nw_endpoint_t v50 = nw_endpoint_handler_copy_endpoint(object);
            if (nw_endpoint_get_type(v50) == nw_endpoint_type_address)
            {
              os_log_type_t v63 = v15;
              os_unfair_lock_lock((os_unfair_lock_t)v63 + 28);
              BOOL v64 = (NWConcrete_nw_path *)*((id *)v63 + 8);
              os_unfair_lock_unlock((os_unfair_lock_t)v63 + 28);

              *(_DWORD *)os_log_type_t type = 0;
              if (nw_path_get_vpn_config_uuid(v64, (unsigned __int8 (*)[16])buf, (int *)type, 1, 1))
              {
                address = nw_endpoint_get_address(v50);
                if (nw_path_voluntary_agent_matches_address(v64, (uint64_t)address))
                {
                  id v66 = nw_endpoint_handler_copy_context(v63);
                  v286[0] = MEMORY[0x1895F87A8];
                  v286[1] = 3221225472LL;
                  v286[2] = ___ZL35nw_endpoint_resolver_receive_reportP30NWConcrete_nw_endpoint_handler26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_error8NSObjectPU23objcproto12OS_nw_objectS5__block_invoke;
                  v286[3] = &unk_189BC93A0;
                  v287 = v63;
                  nw_queue_context_async(v66, v286);

                  goto LABEL_159;
                }
              }
            }

      if (v80) {
        free(v80);
      }
      return 0LL;
    }

    if (!(_BYTE)v112)
    {
      __int16 v81 = (os_log_s *)__nwlog_obj();
      id v82 = out[0];
      if (os_log_type_enabled(v81, (os_log_type_t)out[0]))
      {
        *(_DWORD *)block = 136446210;
        *(void *)&block[4] = "nw_channel_create_with_attributes";
        id v83 = "%{public}s called with null context, backtrace limit exceeded";
        goto LABEL_189;
      }

      goto LABEL_190;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v81 = (os_log_s *)__nwlog_obj();
    id v82 = out[0];
    uint64_t v85 = os_log_type_enabled(v81, (os_log_type_t)out[0]);
    if (!backtrace_string)
    {
      if (v85)
      {
        *(_DWORD *)block = 136446210;
        *(void *)&block[4] = "nw_channel_create_with_attributes";
        id v83 = "%{public}s called with null context, no backtrace";
        goto LABEL_189;
      }

      goto LABEL_190;
    }

    if (v85)
    {
      *(_DWORD *)block = 136446466;
      *(void *)&block[4] = "nw_channel_create_with_attributes";
      *(_WORD *)&block[12] = 2082;
      *(void *)&block[14] = backtrace_string;
      BOOL v86 = "%{public}s called with null context, dumping backtrace:%{public}s";
LABEL_175:
      _os_log_impl(&dword_181A5C000, v81, v82, v86, block, 0x16u);
    }

      if (v93) {
        free(v93);
      }
      return 0LL;
    }

    if (!LOBYTE(v125[0]))
    {
      unint64_t v90 = (os_log_s *)__nwlog_obj();
      uint64_t v91 = v121[0];
      if (os_log_type_enabled(v90, v121[0]))
      {
        *(_DWORD *)buf = 136446210;
        nw_endpoint_t v129 = "nw_protocol_udp_get_input_frames";
        uint64_t v92 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_189;
      }

      goto LABEL_190;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    unint64_t v90 = (os_log_s *)__nwlog_obj();
    uint64_t v91 = v121[0];
    unsigned int v96 = os_log_type_enabled(v90, v121[0]);
    if (!backtrace_string)
    {
      if (v96)
      {
        *(_DWORD *)buf = 136446210;
        nw_endpoint_t v129 = "nw_protocol_udp_get_input_frames";
        uint64_t v92 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_189;
      }

      goto LABEL_190;
    }

    if (v96)
    {
      *(_DWORD *)buf = 136446466;
      nw_endpoint_t v129 = "nw_protocol_udp_get_input_frames";
      __int128 v130 = 2082;
      nw_endpoint_t v131 = backtrace_string;
      os_log_type_t v97 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_179:
      _os_log_impl(&dword_181A5C000, v90, v91, v97, buf, 0x16u);
    }

        if (v62) {
          free(v62);
        }
        uint64_t v19 = 0;
        if (v15 != &nw_protocol_ref_counted_handle) {
          goto LABEL_29;
        }
        goto LABEL_28;
      }

      __nwlog_obj();
      buf = 136446210;
      uint64_t v113 = "__nw_protocol_connect";
      uint64_t v76 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      uint64_t v110 = 0;
      if (__nwlog_fault(v76, type, &v110))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          uint64_t v77 = (os_log_s *)__nwlog_obj();
          unsigned int v78 = type[0];
          if (os_log_type_enabled(v77, type[0]))
          {
            buf = 136446210;
            uint64_t v113 = "__nw_protocol_connect";
            nw_endpoint_t v79 = "%{public}s called with null other_protocol";
LABEL_226:
            _os_log_impl(&dword_181A5C000, v77, v78, v79, (uint8_t *)&buf, 0xCu);
          }
        }

        else if (v110)
        {
          unsigned int v96 = (char *)__nw_create_backtrace_string();
          uint64_t v77 = (os_log_s *)__nwlog_obj();
          unsigned int v78 = type[0];
          os_log_type_t v97 = os_log_type_enabled(v77, type[0]);
          if (v96)
          {
            if (v97)
            {
              buf = 136446466;
              uint64_t v113 = "__nw_protocol_connect";
              BOOL v114 = 2082;
              int v115 = v96;
              _os_log_impl( &dword_181A5C000,  v77,  v78,  "%{public}s called with null other_protocol, dumping backtrace:%{public}s",  (uint8_t *)&buf,  0x16u);
            }

            free(v96);
            goto LABEL_227;
          }

          if (v97)
          {
            buf = 136446210;
            uint64_t v113 = "__nw_protocol_connect";
            nw_endpoint_t v79 = "%{public}s called with null other_protocol, no backtrace";
            goto LABEL_226;
          }
        }

        else
        {
          uint64_t v77 = (os_log_s *)__nwlog_obj();
          unsigned int v78 = type[0];
          if (os_log_type_enabled(v77, type[0]))
          {
            buf = 136446210;
            uint64_t v113 = "__nw_protocol_connect";
            nw_endpoint_t v79 = "%{public}s called with null other_protocol, backtrace limit exceeded";
            goto LABEL_226;
          }
        }
      }

            goto LABEL_191;
          }

          if (v78)
          {
            *(_DWORD *)os_log_type_t type = 136446466;
            *(void *)&os_log_type_t type[4] = "nw_http_cookie_options_get_allow_only_partitioned_cookies";
            *(_WORD *)&type[12] = 2082;
            *(void *)&type[14] = v76;
            _os_log_impl( &dword_181A5C000,  v77,  v85,  "%{public}s called with null options, dumping backtrace:%{public}s",  type,  0x16u);
          }

          free(v76);
        }

              if (v167) {
                free(v167);
              }
              goto LABEL_42;
            }
          }

          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            BOOL v94 = (os_log_s *)(id)gLogObj;
            if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_protocol_utilities_add_input_handler";
              id v215 = 2048;
              id v216 = v207;
              _os_log_impl( &dword_181A5C000,  v94,  OS_LOG_TYPE_ERROR,  "%{public}s Unable to invoke add_input_handler on protocol %p because it is not valid",  buf,  0x16u);
            }
          }

          goto LABEL_114;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v90 = (id)gLogObj;
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_utilities_add_input_handler";
        id v215 = 2048;
        id v216 = (uint64_t)v6;
        uint64_t v91 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        nw_endpoint_t v212 = 0;
        if (__nwlog_fault(v91, type, &v212))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v92 = (os_log_s *)(id)gLogObj;
            uint64_t v93 = type[0];
            if (os_log_type_enabled(v92, type[0]))
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_protocol_utilities_add_input_handler";
              id v215 = 2048;
              id v216 = (uint64_t)v6;
              _os_log_impl(&dword_181A5C000, v92, v93, "%{public}s Cannot add input handler %p to itself", buf, 0x16u);
            }

      if (v120) {
        free(v120);
      }
      *(_DWORD *)(v9 + 352) = 0;
    }
  }

        if ((*(_BYTE *)(v9 + 158) & 1) != 0) {
          goto LABEL_117;
        }
        goto LABEL_191;
      }

      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_recover_incomplete_header";
      nw_endpoint_t v236 = (char *)_os_log_send_and_compose_impl();
      v265[0] = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v236, v265, &type))
      {
        if (v265[0] == 17)
        {
          os_log_type_t v237 = (os_log_s *)__nwlog_obj();
          v238 = v265[0];
          if (!os_log_type_enabled(v237, (os_log_type_t)v265[0])) {
            goto LABEL_526;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_recover_incomplete_header";
          v239 = "%{public}s called with null http1_stream";
LABEL_525:
          _os_log_impl(&dword_181A5C000, v237, v238, v239, buf, 0xCu);
          goto LABEL_526;
        }

        if (type == OS_LOG_TYPE_DEFAULT)
        {
          os_log_type_t v237 = (os_log_s *)__nwlog_obj();
          v238 = v265[0];
          if (!os_log_type_enabled(v237, (os_log_type_t)v265[0])) {
            goto LABEL_526;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_recover_incomplete_header";
          v239 = "%{public}s called with null http1_stream, backtrace limit exceeded";
          goto LABEL_525;
        }

        int v247 = (char *)__nw_create_backtrace_string();
        os_log_type_t v237 = (os_log_s *)__nwlog_obj();
        v238 = v265[0];
        __int16 v248 = os_log_type_enabled(v237, (os_log_type_t)v265[0]);
        if (!v247)
        {
          if (!v248) {
            goto LABEL_526;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_recover_incomplete_header";
          v239 = "%{public}s called with null http1_stream, no backtrace";
          goto LABEL_525;
        }

        if (v248)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_recover_incomplete_header";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v247;
          _os_log_impl( &dword_181A5C000,  v237,  v238,  "%{public}s called with null http1_stream, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v247);
      }

            id v128 = 4;
            goto LABEL_202;
          }

          *(_DWORD *)(a2 + 160) = 0;
          *(_DWORD *)(a2 + 136) = 2;
          char v9 = 4LL;
LABEL_108:
          uint64_t v7 = v10 + 1;
          BOOL v70 = *v10;
          os_log_type_t v71 = ~(-1 << v9);
          char v16 = v70 & v71;
          if ((v70 & v71) >= v71)
          {
            __int16 v17 = 0;
            os_log_type_t v15 = 1;
            do
            {
              if (v7 >= v8)
              {
                if ((v15 & 1) != 0) {
                  uint64_t v145 = 0;
                }
                else {
                  uint64_t v145 = *(_DWORD *)(a2 + 168);
                }
                __int16 v160 = v145 + (_DWORD)v7 - (_DWORD)v10;
                if (v160 >= 0xB)
                {
                  os_log_type_t v161 = 3821;
                  goto LABEL_349;
                }

                goto LABEL_340;
              }

    if (v98) {
      free(v98);
    }
    goto LABEL_27;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http3_encoder_stream_process_output";
  os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();
  v118[0] = OS_LOG_TYPE_ERROR;
  v122[0] = 0;
  if (__nwlog_fault(v15, v118, v122))
  {
    if (v118[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v16 = (os_log_s *)gLogObj;
      __int16 v17 = v118[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, v118[0])) {
        goto LABEL_157;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http3_encoder_stream_process_output";
      char v18 = "%{public}s Attempting to send on encoder stream before initial sdtc";
      goto LABEL_156;
    }

    if (!v122[0])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v16 = (os_log_s *)gLogObj;
      __int16 v17 = v118[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, v118[0])) {
        goto LABEL_157;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http3_encoder_stream_process_output";
      char v18 = "%{public}s Attempting to send on encoder stream before initial sdtc, backtrace limit exceeded";
      goto LABEL_156;
    }

    uint64_t v19 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v16 = (os_log_s *)gLogObj;
    __int16 v17 = v118[0];
    uint64_t v20 = os_log_type_enabled((os_log_t)gLogObj, v118[0]);
    if (v19)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http3_encoder_stream_process_output";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v19;
        _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s Attempting to send on encoder stream before initial sdtc, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v19);
      goto LABEL_157;
    }

    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http3_encoder_stream_process_output";
      char v18 = "%{public}s Attempting to send on encoder stream before initial sdtc, no backtrace";
LABEL_156:
      _os_log_impl(&dword_181A5C000, v16, v17, v18, buf, 0xCu);
    }
  }

  if (v66) {
    free(v66);
  }
LABEL_192:
  if (!nw_tcp_options_get_enable_keepalive(a2)) {
    goto LABEL_200;
  }
  if ((setsockopt(*(_DWORD *)(a1 + 172), 0xFFFF, 8, v105, 4u) & 0x80000000) == 0)
  {
    *(_DWORD *)os_log_type_t v102 = nw_tcp_options_get_keepalive_idle_time(a2);
    if (*(_DWORD *)v102 && setsockopt(*(_DWORD *)(a1 + 172), 6, 16, v102, 4u) < 0)
    {
      int v72 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      __int16 v81 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        int v107 = "nw_socket_set_bidirectional_tcp_sockopts";
        char v108 = 2080;
        *(void *)int v109 = a1 + 308;
        *(_WORD *)&v109[8] = 1024;
        *(_DWORD *)&v109[10] = v72;
        _os_log_impl( &dword_181A5C000,  v81,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt TCP_KEEPALIVE failed %{darwin.errno}d",  buf,  0x1Cu);
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v74 = (os_log_s *)gLogObj;
      if ((_DWORD)v72 == 22)
      {
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          int v107 = "nw_socket_set_bidirectional_tcp_sockopts";
          char v108 = 1024;
          *(_DWORD *)int v109 = 22;
          uint64_t v75 = "%{public}s setsockopt TCP_KEEPALIVE failed %{darwin.errno}d";
          goto LABEL_250;
        }

        goto LABEL_306;
      }

      *(_DWORD *)buf = 136446466;
      int v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      char v108 = 1024;
      *(_DWORD *)int v109 = v72;
      uint64_t v77 = (char *)_os_log_send_and_compose_impl();
      v101[0] = OS_LOG_TYPE_ERROR;
      v99[0] = OS_LOG_TYPE_DEFAULT;
      if (v101[0] == OS_LOG_TYPE_FAULT)
      {
        unsigned int v78 = (os_log_s *)__nwlog_obj();
        nw_endpoint_t v79 = v101[0];
        if (!os_log_type_enabled(v78, v101[0])) {
          goto LABEL_304;
        }
        *(_DWORD *)buf = 136446466;
        int v107 = "nw_socket_set_bidirectional_tcp_sockopts";
        char v108 = 1024;
        *(_DWORD *)int v109 = v72;
        nw_endpoint_t v80 = "%{public}s setsockopt TCP_KEEPALIVE failed %{darwin.errno}d";
        goto LABEL_303;
      }

      if (v99[0] == OS_LOG_TYPE_DEFAULT)
      {
        unsigned int v78 = (os_log_s *)__nwlog_obj();
        nw_endpoint_t v79 = v101[0];
        if (!os_log_type_enabled(v78, v101[0])) {
          goto LABEL_304;
        }
        *(_DWORD *)buf = 136446466;
        int v107 = "nw_socket_set_bidirectional_tcp_sockopts";
        char v108 = 1024;
        *(_DWORD *)int v109 = v72;
        nw_endpoint_t v80 = "%{public}s setsockopt TCP_KEEPALIVE failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_303;
      }

      id v83 = (char *)__nw_create_backtrace_string();
      unsigned int v78 = (os_log_s *)__nwlog_obj();
      nw_endpoint_t v79 = v101[0];
      unsigned int v89 = os_log_type_enabled(v78, v101[0]);
      if (!v83)
      {
        if (!v89) {
          goto LABEL_304;
        }
        *(_DWORD *)buf = 136446466;
        int v107 = "nw_socket_set_bidirectional_tcp_sockopts";
        char v108 = 1024;
        *(_DWORD *)int v109 = v72;
        nw_endpoint_t v80 = "%{public}s setsockopt TCP_KEEPALIVE failed %{darwin.errno}d, no backtrace";
        goto LABEL_303;
      }

      if (!v89) {
        goto LABEL_287;
      }
      *(_DWORD *)buf = 136446722;
      int v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      char v108 = 1024;
      *(_DWORD *)int v109 = v72;
      *(_WORD *)&v109[4] = 2082;
      *(void *)&v109[6] = v83;
      uint64_t v85 = "%{public}s setsockopt TCP_KEEPALIVE failed %{darwin.errno}d, dumping backtrace:%{public}s";
    }

    else
    {
      *(_DWORD *)nw_endpoint_t v101 = nw_tcp_options_get_keepalive_interval(a2);
      if (!*(_DWORD *)v101 || (setsockopt(*(_DWORD *)(a1 + 172), 6, 257, v101, 4u) & 0x80000000) == 0)
      {
        *(_DWORD *)BOOL v99 = nw_tcp_options_get_keepalive_count(a2);
        if (!*(_DWORD *)v99 || (setsockopt(*(_DWORD *)(a1 + 172), 6, 258, v99, 4u) & 0x80000000) == 0)
        {
LABEL_200:
          if (!nw_tcp_options_get_enable_keepalive_offload(a2)
            || (setsockopt(*(_DWORD *)(a1 + 172), 6, 529, v105, 4u) & 0x80000000) == 0)
          {
            return 1LL;
          }

          int v72 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v76 = (os_log_s *)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            int v107 = "nw_socket_set_bidirectional_tcp_sockopts";
            char v108 = 2080;
            *(void *)int v109 = a1 + 308;
            *(_WORD *)&v109[8] = 1024;
            *(_DWORD *)&v109[10] = v72;
            _os_log_impl( &dword_181A5C000,  v76,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt TCP_KEEPALIVE_OFFLOAD failed %{darwin.errno}d",  buf,  0x1Cu);
          }

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v74 = (os_log_s *)gLogObj;
          if ((_DWORD)v72 == 22)
          {
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              int v107 = "nw_socket_set_bidirectional_tcp_sockopts";
              char v108 = 1024;
              *(_DWORD *)int v109 = 22;
              uint64_t v75 = "%{public}s setsockopt TCP_KEEPALIVE_OFFLOAD failed %{darwin.errno}d";
              goto LABEL_250;
            }

            goto LABEL_306;
          }

          *(_DWORD *)buf = 136446466;
          int v107 = "nw_socket_set_bidirectional_tcp_sockopts";
          char v108 = 1024;
          *(_DWORD *)int v109 = v72;
          uint64_t v77 = (char *)_os_log_send_and_compose_impl();
          v102[0] = OS_LOG_TYPE_ERROR;
          v101[0] = OS_LOG_TYPE_DEFAULT;
          if (v102[0] == OS_LOG_TYPE_FAULT)
          {
            unsigned int v78 = (os_log_s *)__nwlog_obj();
            nw_endpoint_t v79 = v102[0];
            if (!os_log_type_enabled(v78, v102[0])) {
              goto LABEL_304;
            }
            *(_DWORD *)buf = 136446466;
            int v107 = "nw_socket_set_bidirectional_tcp_sockopts";
            char v108 = 1024;
            *(_DWORD *)int v109 = v72;
            nw_endpoint_t v80 = "%{public}s setsockopt TCP_KEEPALIVE_OFFLOAD failed %{darwin.errno}d";
          }

          else if (v101[0])
          {
            BOOL v87 = (char *)__nw_create_backtrace_string();
            unsigned int v78 = (os_log_s *)__nwlog_obj();
            nw_endpoint_t v79 = v102[0];
            id v88 = os_log_type_enabled(v78, v102[0]);
            if (v87)
            {
              if (v88)
              {
                *(_DWORD *)buf = 136446722;
                int v107 = "nw_socket_set_bidirectional_tcp_sockopts";
                char v108 = 1024;
                *(_DWORD *)int v109 = v72;
                *(_WORD *)&v109[4] = 2082;
                *(void *)&v109[6] = v87;
                _os_log_impl( &dword_181A5C000,  v78,  v79,  "%{public}s setsockopt TCP_KEEPALIVE_OFFLOAD failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
              }

              free(v87);
LABEL_304:
              if (!v77) {
                goto LABEL_306;
              }
LABEL_305:
              free(v77);
              goto LABEL_306;
            }

            if (!v88) {
              goto LABEL_304;
            }
            *(_DWORD *)buf = 136446466;
            int v107 = "nw_socket_set_bidirectional_tcp_sockopts";
            char v108 = 1024;
            *(_DWORD *)int v109 = v72;
            nw_endpoint_t v80 = "%{public}s setsockopt TCP_KEEPALIVE_OFFLOAD failed %{darwin.errno}d, no backtrace";
          }

          else
          {
            unsigned int v78 = (os_log_s *)__nwlog_obj();
            nw_endpoint_t v79 = v102[0];
            if (!os_log_type_enabled(v78, v102[0])) {
              goto LABEL_304;
            }
            *(_DWORD *)buf = 136446466;
            int v107 = "nw_socket_set_bidirectional_tcp_sockopts";
            char v108 = 1024;
            *(_DWORD *)int v109 = v72;
            nw_endpoint_t v80 = "%{public}s setsockopt TCP_KEEPALIVE_OFFLOAD failed %{darwin.errno}d, backtrace limit exceeded";
          }
  }

    goto LABEL_191;
  }

void sub_181B24B34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, void *a23, uint64_t a24, void *a25)
{
  _Unwind_Resume(a1);
}

nw_endpoint_t nw_endpoint_create_address_with_ethernet(const sockaddr *a1, int *a2)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  nw_endpoint_t address = nw_endpoint_create_address(a1);
  nw_endpoint_t v4 = address;
  if (a2 && address)
  {
    id v5 = address;
    int v6 = -[nw_endpoint type](v5, "type");

    if (v6 == 1)
    {
      int v7 = *a2;
      *((_WORD *)v5 + 182) = *((_WORD *)a2 + 2);
      *((_DWORD *)v5 + 90) = v7;
LABEL_12:

      return v4;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    char v9 = v5;
    nw_endpoint_type_t v10 = -[nw_endpoint type](v9, "type");

    *(_DWORD *)buf = 136446466;
    uint64_t v30 = "nw_endpoint_set_ethernet_address";
    __int16 v31 = 1024;
    nw_endpoint_type_t v32 = v10;
    LODWORD(v26) = 18;
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (__nwlog_fault(v11, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v12 = (os_log_s *)(id)gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          uint64_t v14 = v9;
          nw_endpoint_type_t v15 = -[nw_endpoint type](v14, "type", buf, v26);

          *(_DWORD *)buf = 136446466;
          uint64_t v30 = "nw_endpoint_set_ethernet_address";
          __int16 v31 = 1024;
          nw_endpoint_type_t v32 = v15;
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }

      else if (v27)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v12 = (os_log_s *)(id)gLogObj;
        os_log_type_t v18 = type;
        BOOL v19 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v19)
          {
            uint64_t v20 = v9;
            nw_endpoint_type_t v21 = -[nw_endpoint type](v20, "type", buf, v26);

            *(_DWORD *)buf = 136446722;
            uint64_t v30 = "nw_endpoint_set_ethernet_address";
            __int16 v31 = 1024;
            nw_endpoint_type_t v32 = v21;
            __int16 v33 = 2082;
            id v34 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v18,  "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s",  buf,  0x1Cu);
          }

          free(backtrace_string);
          if (!v11) {
            goto LABEL_12;
          }
          goto LABEL_11;
        }

        if (v19)
        {
          nw_endpoint_type_t v25 = nw_endpoint_get_type(v9);
          *(_DWORD *)buf = 136446466;
          uint64_t v30 = "nw_endpoint_set_ethernet_address";
          __int16 v31 = 1024;
          nw_endpoint_type_t v32 = v25;
          _os_log_impl(&dword_181A5C000, v12, v18, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v12 = (os_log_s *)(id)gLogObj;
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v12, type))
        {
          uint64_t v23 = v9;
          nw_endpoint_type_t v24 = -[nw_endpoint type](v23, "type", buf, v26);

          *(_DWORD *)buf = 136446466;
          uint64_t v30 = "nw_endpoint_set_ethernet_address";
          __int16 v31 = 1024;
          nw_endpoint_type_t v32 = v24;
          _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s incorrect endpoint type %u, backtrace limit exceeded",  buf,  0x12u);
        }
      }
    }

    if (!v11) {
      goto LABEL_12;
    }
LABEL_11:
    free(v11);
    goto LABEL_12;
  }

  return v4;
}

void sub_181B25244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_BYTE *nw_endpoint_get_ethernet_address(void *a1)
{
  *(void *)&v41[13] = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    char v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v39 = "nw_endpoint_get_ethernet_address";
    os_log_type_t v28 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (__nwlog_fault(v28, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v29, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v39 = "nw_endpoint_get_ethernet_address";
          _os_log_impl(&dword_181A5C000, v29, v30, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }

      else if (v36)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v32 = type;
        BOOL v33 = os_log_type_enabled(v29, type);
        if (backtrace_string)
        {
          if (v33)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v39 = "nw_endpoint_get_ethernet_address";
            __int16 v40 = 2082;
            *(void *)uint64_t v41 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v29,  v32,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_49;
        }

        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v39 = "nw_endpoint_get_ethernet_address";
          _os_log_impl(&dword_181A5C000, v29, v32, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        char v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v29, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v39 = "nw_endpoint_get_ethernet_address";
          _os_log_impl( &dword_181A5C000,  v29,  v34,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181B258A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_is_multicast(void *a1)
{
  *(void *)&v43[13] = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    char v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v41 = "nw_endpoint_is_multicast";
    os_log_type_t v30 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (__nwlog_fault(v30, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        __int16 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v41 = "nw_endpoint_is_multicast";
          _os_log_impl(&dword_181A5C000, v31, v32, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }

      else if (v38)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        __int16 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v34 = type;
        BOOL v35 = os_log_type_enabled(v31, type);
        if (backtrace_string)
        {
          if (v35)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v41 = "nw_endpoint_is_multicast";
            __int16 v42 = 2082;
            *(void *)char v43 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v31,  v34,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_50;
        }

        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v41 = "nw_endpoint_is_multicast";
          _os_log_impl(&dword_181A5C000, v31, v34, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        __int16 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v36 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v41 = "nw_endpoint_is_multicast";
          _os_log_impl( &dword_181A5C000,  v31,  v36,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181B25F08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_is_multilayer_packet_logging_enabled(void *a1)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    id v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v21 = "nw_path_is_multilayer_packet_logging_enabled";
    int v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v10, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v21 = "nw_path_is_multilayer_packet_logging_enabled";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null path", buf, 0xCu);
        }
      }

      else if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v21 = "nw_path_is_multilayer_packet_logging_enabled";
            __int16 v22 = 2082;
            id v23 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }

        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v21 = "nw_path_is_multilayer_packet_logging_enabled";
          _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v21 = "nw_path_is_multilayer_packet_logging_enabled";
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

BOOL nw_endpoint_flow_expected_to_join(NWConcrete_nw_endpoint_handler *a1, NWConcrete_nw_endpoint_flow *a2)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  int v4 = a2;
  if (v4)
  {
    __int16 v5 = v3;
    int v6 = v5;
    if (v5)
    {
      BOOL v7 = v5->parameters;
LABEL_4:

      *(void *)os_log_type_t type = 0LL;
      uint64_t v41 = type;
      uint64_t v42 = 0x2020000000LL;
      uint64_t v43 = 0LL;
      v38[0] = 0LL;
      v38[1] = v38;
      v38[2] = 0x2020000000LL;
      char v39 = 0;
      nw_endpoint_t v8 = nw_endpoint_handler_copy_endpoint(v6);
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      os_log_type_t v45 = __Block_byref_object_copy__80314;
      uint64_t v46 = __Block_byref_object_dispose__80315;
      char v47 = v8;
      aBlock[0] = MEMORY[0x1895F87A8];
      aBlock[1] = 3221225472LL;
      aBlock[2] = ___ZL33nw_endpoint_flow_expected_to_joinP30NWConcrete_nw_endpoint_handlerP27NWConcrete_nw_endpoint_flow_block_invoke;
      aBlock[3] = &unk_189BC7988;
      BOOL v35 = buf;
      id v9 = v47;
      __int16 v31 = v9;
      os_log_type_t v32 = v6;
      os_log_type_t v36 = v38;
      int v10 = v7;
      BOOL v33 = v10;
      os_log_type_t v34 = v4;
      uint64_t v37 = type;
      BOOL v11 = _Block_copy(aBlock);
      nw_parameters_internal_iterate_protocol_stack(v10, 5, 0, v11);
      if (*((void *)v41 + 3))
      {
        BOOL v12 = 1LL;
      }

      else
      {
        nw_parameters_internal_iterate_protocol_stack(v10, 4, 0, v11);
        BOOL v12 = *((void *)v41 + 3) != 0LL;
      }

      _Block_object_dispose(buf, 8);
      _Block_object_dispose(v38, 8);
      _Block_object_dispose(type, 8);

      goto LABEL_8;
    }

    __nwlog_obj();
    char v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_parameters";
    id v19 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v38[0]) = 0;
    if (__nwlog_fault(v19, type, v38))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type[0];
        if (os_log_type_enabled(v20, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_parameters";
          _os_log_impl(&dword_181A5C000, v20, v21, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (LOBYTE(v38[0]))
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        int v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v26 = type[0];
        BOOL v27 = os_log_type_enabled(v20, type[0]);
        if (backtrace_string)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_parameters";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v20,  v26,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_44;
        }

        if (v27)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_parameters";
          _os_log_impl(&dword_181A5C000, v20, v26, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        int v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v29 = type[0];
        if (os_log_type_enabled(v20, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_copy_parameters";
          _os_log_impl( &dword_181A5C000,  v20,  v29,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181B26874( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_flow_setup_channel(NWConcrete_nw_endpoint_handler *a1)
{
  uint64_t v228 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v147 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    nw_endpoint_t v212 = "nw_endpoint_handler_get_mode";
    nw_endpoint_t v148 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v227) = 16;
    LOBYTE(v210) = 0;
    if (__nwlog_fault(v148, &v227, &v210))
    {
      if (v227 == 17)
      {
        __nwlog_obj();
        nw_endpoint_t v149 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v150 = v227;
        if (os_log_type_enabled(v149, (os_log_type_t)v227))
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v212 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_181A5C000, v149, v150, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if ((_BYTE)v210)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        nw_endpoint_t v149 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v152 = v227;
        BOOL v153 = os_log_type_enabled(v149, (os_log_type_t)v227);
        if (backtrace_string)
        {
          if (v153)
          {
            *(_DWORD *)buf = 136446466;
            nw_endpoint_t v212 = "nw_endpoint_handler_get_mode";
            __int16 v213 = 2082;
            v214 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v149,  v152,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_176;
        }

        if (v153)
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v212 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_181A5C000, v149, v152, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        nw_endpoint_t v149 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v154 = v227;
        if (os_log_type_enabled(v149, (os_log_type_t)v227))
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v212 = "nw_endpoint_handler_get_mode";
          _os_log_impl( &dword_181A5C000,  v149,  v154,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

LABEL_176:
    if (v148) {
      free(v148);
    }
    unsigned int mode = 0;
    id v2 = 0LL;
LABEL_179:
    dispatch_time_t v146 = v2;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v155 = (id)gLogObj;
    if (mode > 5) {
      os_log_type_t v156 = "unknown-mode";
    }
    else {
      os_log_type_t v156 = off_189BBBBC0[mode];
    }
    *(_DWORD *)buf = 136446722;
    nw_endpoint_t v212 = "nw_endpoint_flow_setup_channel";
    __int16 v213 = 2082;
    v214 = (char *)v156;
    __int16 v215 = 2082;
    id v216 = "flow";
    v157 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v227) = 16;
    LOBYTE(v210) = 0;
    if (__nwlog_fault(v157, &v227, &v210))
    {
      if (v227 == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        nw_endpoint_t v158 = (os_log_s *)(id)gLogObj;
        os_log_type_t v159 = v227;
        if (os_log_type_enabled(v158, (os_log_type_t)v227))
        {
          if (mode > 5) {
            __int16 v160 = "unknown-mode";
          }
          else {
            __int16 v160 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          nw_endpoint_t v212 = "nw_endpoint_flow_setup_channel";
          __int16 v213 = 2082;
          v214 = (char *)v160;
          __int16 v215 = 2082;
          id v216 = "flow";
          _os_log_impl( &dword_181A5C000,  v158,  v159,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

      else if ((_BYTE)v210)
      {
        os_log_type_t v161 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        nw_endpoint_t v158 = (os_log_s *)(id)gLogObj;
        os_log_type_t v162 = v227;
        BOOL v163 = os_log_type_enabled(v158, (os_log_type_t)v227);
        if (v161)
        {
          if (v163)
          {
            if (mode > 5) {
              id v164 = "unknown-mode";
            }
            else {
              id v164 = off_189BBBBC0[mode];
            }
            *(_DWORD *)buf = 136446978;
            nw_endpoint_t v212 = "nw_endpoint_flow_setup_channel";
            __int16 v213 = 2082;
            v214 = (char *)v164;
            __int16 v215 = 2082;
            id v216 = "flow";
            __int16 v217 = 2082;
            os_log_type_t v218 = v161;
            _os_log_impl( &dword_181A5C000,  v158,  v162,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v161);
          if (!v157) {
            goto LABEL_213;
          }
          goto LABEL_212;
        }

        if (v163)
        {
          if (mode > 5) {
            id v167 = "unknown-mode";
          }
          else {
            id v167 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          nw_endpoint_t v212 = "nw_endpoint_flow_setup_channel";
          __int16 v213 = 2082;
          v214 = (char *)v167;
          __int16 v215 = 2082;
          id v216 = "flow";
          _os_log_impl( &dword_181A5C000,  v158,  v162,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        nw_endpoint_t v158 = (os_log_s *)(id)gLogObj;
        os_log_type_t v165 = v227;
        if (os_log_type_enabled(v158, (os_log_type_t)v227))
        {
          if (mode > 5) {
            id v166 = "unknown-mode";
          }
          else {
            id v166 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          nw_endpoint_t v212 = "nw_endpoint_flow_setup_channel";
          __int16 v213 = 2082;
          v214 = (char *)v166;
          __int16 v215 = 2082;
          id v216 = "flow";
          _os_log_impl( &dword_181A5C000,  v158,  v165,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }
      }
    }

    if (!v157)
    {
LABEL_213:
      uint64_t v110 = 0LL;
      goto LABEL_214;
    }

    free(backtrace_string);
    goto LABEL_190;
  }

  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)block = 136446210;
    *(void *)&block[4] = "nw_channel_create_with_attributes";
    nw_endpoint_t v80 = (char *)_os_log_send_and_compose_impl();
    out[0] = 16;
    LOBYTE(v112) = 0;
    if (out[0] == 17)
    {
      __int16 v81 = (os_log_s *)__nwlog_obj();
      nw_endpoint_t v82 = out[0];
      if (os_log_type_enabled(v81, (os_log_type_t)out[0]))
      {
        *(_DWORD *)block = 136446210;
        *(void *)&block[4] = "nw_channel_create_with_attributes";
        id v83 = "%{public}s called with null attributes";
        goto LABEL_189;
      }

      goto LABEL_190;
    }

    if (!(_BYTE)v112)
    {
      __int16 v81 = (os_log_s *)__nwlog_obj();
      nw_endpoint_t v82 = out[0];
      if (os_log_type_enabled(v81, (os_log_type_t)out[0]))
      {
        *(_DWORD *)block = 136446210;
        *(void *)&block[4] = "nw_channel_create_with_attributes";
        id v83 = "%{public}s called with null attributes, backtrace limit exceeded";
        goto LABEL_189;
      }

      goto LABEL_190;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v81 = (os_log_s *)__nwlog_obj();
    nw_endpoint_t v82 = out[0];
    BOOL v87 = os_log_type_enabled(v81, (os_log_type_t)out[0]);
    if (!backtrace_string)
    {
      if (v87)
      {
        *(_DWORD *)block = 136446210;
        *(void *)&block[4] = "nw_channel_create_with_attributes";
        id v83 = "%{public}s called with null attributes, no backtrace";
        goto LABEL_189;
      }

      goto LABEL_190;
    }

    if (v87)
    {
      *(_DWORD *)block = 136446466;
      *(void *)&block[4] = "nw_channel_create_with_attributes";
      *(_WORD *)&block[12] = 2082;
      *(void *)&block[14] = backtrace_string;
      BOOL v86 = "%{public}s called with null attributes, dumping backtrace:%{public}s";
      goto LABEL_175;
    }

    goto LABEL_176;
  }

  memset(out, 0, sizeof(out));
  uuid_unparse(uu, out);
  snprintf(&out[36], 0xCuLL, "-%u", a3);
  globals_for_channel = nw_context_get_globals_for_channel(a1);
  id v9 = (os_unfair_lock_s *)(globals_for_channel + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(globals_for_channel + 16));
  char v10 = (char *)nw_dictionary_copy_value(*(void *)globals_for_channel, (uint64_t)out);
  if (v10)
  {
LABEL_157:
    os_unfair_lock_unlock(v9);
    return (BOOL)v10;
  }

  BOOL v11 = *(const void **)a4;
  nw_endpoint_t v12 = *(unsigned int *)(a4 + 8);
  os_log_type_t v13 = *(_BYTE *)(a4 + 12);
  if (_nw_signposts_once != -1) {
    dispatch_once(&_nw_signposts_once, &__block_literal_global_65_86685);
  }
  objc_opt_class();
  os_log_type_t v14 = _os_object_alloc();
  if (!v14)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_channel_create";
    nw_endpoint_t v32 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v122) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v33 = (os_log_s *)gLogObj;
      os_log_type_t v34 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_107;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_create";
      BOOL v35 = "%{public}s nw_channel_obj_alloc failed";
    }

    else if ((_BYTE)v122)
    {
      BOOL v40 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v33 = (os_log_s *)gLogObj;
      os_log_type_t v34 = type[0];
      uint64_t v41 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (v40)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_channel_create";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v40;
          _os_log_impl( &dword_181A5C000,  v33,  v34,  "%{public}s nw_channel_obj_alloc failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v40);
        goto LABEL_107;
      }

      if (!v41)
      {
LABEL_107:
        if (v32) {
          free(v32);
        }
        goto LABEL_126;
      }

      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_create";
      BOOL v35 = "%{public}s nw_channel_obj_alloc failed, no backtrace";
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v33 = (os_log_s *)gLogObj;
      os_log_type_t v34 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_107;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_create";
      BOOL v35 = "%{public}s nw_channel_obj_alloc failed, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v33, v34, v35, buf, 0xCu);
    goto LABEL_107;
  }

  char v10 = (char *)v14;
  *(_OWORD *)(v14 + 8_Block_object_dispose(va, 8) = *(_OWORD *)uu;
  *(_DWORD *)(v14 + 42_Block_object_dispose(va, 8) = a3;
  BOOL v15 = os_channel_attr_create();
  *((void *)v10 + 1_Block_object_dispose(va, 8) = v15;
  if (!v15)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_channel_create";
    uint64_t v36 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v122) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v37 = (os_log_s *)gLogObj;
      char v38 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_123;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_create";
      char v39 = "%{public}s os_channel_attr_create failed";
    }

    else if ((_BYTE)v122)
    {
      os_log_type_t v45 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v37 = (os_log_s *)gLogObj;
      char v38 = type[0];
      nw_endpoint_t v46 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (v45)
      {
        if (v46)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_channel_create";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v45;
          _os_log_impl( &dword_181A5C000,  v37,  v38,  "%{public}s os_channel_attr_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v45);
        goto LABEL_123;
      }

      if (!v46) {
        goto LABEL_123;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_create";
      char v39 = "%{public}s os_channel_attr_create failed, no backtrace";
    }

    else
    {
      uint64_t v37 = (os_log_s *)__nwlog_obj();
      char v38 = type[0];
      if (!os_log_type_enabled(v37, type[0])) {
        goto LABEL_123;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_create";
      char v39 = "%{public}s os_channel_attr_create failed, backtrace limit exceeded";
    }

          nw_endpoint_t v46 = 1;
          goto LABEL_177;
        }

        free(v74);
        goto LABEL_177;
      }

      if (v111)
      {
        *(_DWORD *)os_log_type_t type = 136446210;
        *(void *)&os_log_type_t type[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl( &dword_181A5C000,  v107,  v110,  "%{public}s failed to add kIDSKeyRemoteInterfaceType, no backtrace",  type,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v107 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      int v112 = __str[0];
      if (os_log_type_enabled(v107, __str[0]))
      {
        *(_DWORD *)os_log_type_t type = 136446210;
        *(void *)&os_log_type_t type[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl( &dword_181A5C000,  v107,  v112,  "%{public}s failed to add kIDSKeyRemoteInterfaceType, backtrace limit exceeded",  type,  0xCu);
      }
    }

    goto LABEL_175;
  }

  BOOL v95 = nw_txt_record_set_key((nw_txt_record_t)v65, "rift", (const uint8_t *)__str, v66);

  if (!v95) {
    goto LABEL_159;
  }
  nw_endpoint_set_txt_record(v63, v65);
  v177[2](v177, evaluator_for_endpoint, v63);
  unsigned int v96 = 1LL;
LABEL_178:

LABEL_179:
  uint64_t v113 = v179;
LABEL_180:

LABEL_181:
  return v96;
}

    if (v58) {
      free(v58);
    }
    goto LABEL_47;
  }

  __nwlog_obj();
  os_log_type_t v53 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v94 = "__nw_protocol_input_finished";
  int v54 = (char *)_os_log_send_and_compose_impl();

  v91[0] = OS_LOG_TYPE_ERROR;
  v88[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v54, v91, v88))
  {
    if (v91[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v56 = v91[0];
      if (os_log_type_enabled(v55, v91[0]))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v94 = "__nw_protocol_input_finished";
        _os_log_impl(&dword_181A5C000, v55, v56, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if (v88[0])
    {
      os_log_type_t v71 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      int v72 = v91[0];
      int v73 = os_log_type_enabled(v55, v91[0]);
      if (v71)
      {
        if (v73)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v94 = "__nw_protocol_input_finished";
          BOOL v95 = 2082;
          unsigned int v96 = v71;
          _os_log_impl( &dword_181A5C000,  v55,  v72,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v71);
        goto LABEL_171;
      }

      if (v73)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v94 = "__nw_protocol_input_finished";
        _os_log_impl(&dword_181A5C000, v55, v72, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v85 = v91[0];
      if (os_log_type_enabled(v55, v91[0]))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v94 = "__nw_protocol_input_finished";
        _os_log_impl( &dword_181A5C000,  v55,  v85,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  if (v33) {
    free(v33);
  }
}

          if (!v47)
          {
LABEL_178:
            id v69 = 0LL;
LABEL_202:

            goto LABEL_203;
          }

        goto LABEL_177;
      }

      if (!v112)
      {
        __nwlog_obj();
        BOOL v78 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v100 = type;
        if (os_log_type_enabled(v78, type))
        {
          *(_DWORD *)buf = 136446210;
          int v115 = "nw_connection_create_from_protocol_on_nw_queue";
          _os_log_impl( &dword_181A5C000,  v78,  v100,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_176;
      }

      nw_endpoint_t v82 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v78 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v85 = type;
      BOOL v86 = os_log_type_enabled(v78, type);
      if (!v82)
      {
        if (v86)
        {
          *(_DWORD *)buf = 136446210;
          int v115 = "nw_connection_create_from_protocol_on_nw_queue";
          _os_log_impl(&dword_181A5C000, v78, v85, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }

        goto LABEL_176;
      }

      if (v86)
      {
        *(_DWORD *)buf = 136446466;
        int v115 = "nw_connection_create_from_protocol_on_nw_queue";
        nw_endpoint_t v116 = 2082;
        *(void *)nw_endpoint_t v117 = v82;
        _os_log_impl( &dword_181A5C000,  v78,  v85,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_143;
    }
  }

  else
  {
    char v74 = v6;
    __nwlog_obj();
    uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    int v115 = "nw_connection_create_from_protocol_on_nw_queue";
    uint64_t v77 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    int v112 = 0;
    if (__nwlog_fault(v77, &type, &v112))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v78 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        nw_endpoint_t v79 = type;
        if (os_log_type_enabled(v78, type))
        {
          *(_DWORD *)buf = 136446210;
          int v115 = "nw_connection_create_from_protocol_on_nw_queue";
          _os_log_impl(&dword_181A5C000, v78, v79, "%{public}s called with null endpoint", buf, 0xCu);
        }

        goto LABEL_176;
      }

      if (!v112)
      {
        __nwlog_obj();
        BOOL v78 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v99 = type;
        if (os_log_type_enabled(v78, type))
        {
          *(_DWORD *)buf = 136446210;
          int v115 = "nw_connection_create_from_protocol_on_nw_queue";
          _os_log_impl( &dword_181A5C000,  v78,  v99,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_176;
      }

      nw_endpoint_t v82 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v78 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v83 = type;
      uint64_t v84 = os_log_type_enabled(v78, type);
      if (!v82)
      {
        if (v84)
        {
          *(_DWORD *)buf = 136446210;
          int v115 = "nw_connection_create_from_protocol_on_nw_queue";
          _os_log_impl(&dword_181A5C000, v78, v83, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }

        goto LABEL_176;
      }

      if (v84)
      {
        *(_DWORD *)buf = 136446466;
        int v115 = "nw_connection_create_from_protocol_on_nw_queue";
        nw_endpoint_t v116 = 2082;
        *(void *)nw_endpoint_t v117 = v82;
        _os_log_impl( &dword_181A5C000,  v78,  v83,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      if (v84) {
        free(v84);
      }
      os_log_type_t v28 = 0LL;
      goto LABEL_119;
    }

    os_log_type_t v28 = v8;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v29 = (id)gLogObj;
    else {
      BOOL v30 = off_189BBBBC0[mode];
    }
    *(_DWORD *)buf = 136446722;
    dispatch_time_t v137 = "nw_endpoint_handler_remove_extra_interface_option";
    __int16 v138 = 2082;
    BOOL v139 = (void *)v30;
    uint64_t v140 = 2082;
    nw_endpoint_t v141 = "flow";
    __int16 v31 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v132) = 0;
    if (__nwlog_fault(v31, type, &v132))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        nw_endpoint_t v32 = (os_log_s *)(id)gLogObj;
        BOOL v33 = type[0];
        if (os_log_type_enabled(v32, type[0]))
        {
          else {
            os_log_type_t v34 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          dispatch_time_t v137 = "nw_endpoint_handler_remove_extra_interface_option";
          __int16 v138 = 2082;
          BOOL v139 = (void *)v34;
          uint64_t v140 = 2082;
          nw_endpoint_t v141 = "flow";
          _os_log_impl( &dword_181A5C000,  v32,  v33,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

      else if ((_BYTE)v132)
      {
        BOOL v35 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        nw_endpoint_t v32 = (os_log_s *)(id)gLogObj;
        uint64_t v36 = type[0];
        uint64_t v37 = os_log_type_enabled(v32, type[0]);
        if (v35)
        {
          if (v37)
          {
            else {
              char v38 = off_189BBBBC0[mode];
            }
            *(_DWORD *)buf = 136446978;
            dispatch_time_t v137 = "nw_endpoint_handler_remove_extra_interface_option";
            __int16 v138 = 2082;
            BOOL v139 = (void *)v38;
            uint64_t v140 = 2082;
            nw_endpoint_t v141 = "flow";
            uint64_t v142 = 2082;
            int v143 = v35;
            _os_log_impl( &dword_181A5C000,  v32,  v36,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v35);
          if (!v31) {
            goto LABEL_119;
          }
          goto LABEL_110;
        }

        if (v37)
        {
          else {
            nw_endpoint_t v60 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          dispatch_time_t v137 = "nw_endpoint_handler_remove_extra_interface_option";
          __int16 v138 = 2082;
          BOOL v139 = (void *)v60;
          uint64_t v140 = 2082;
          nw_endpoint_t v141 = "flow";
          _os_log_impl( &dword_181A5C000,  v32,  v36,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        nw_endpoint_t v32 = (os_log_s *)(id)gLogObj;
        os_log_type_t v53 = type[0];
        if (os_log_type_enabled(v32, type[0]))
        {
          else {
            int v54 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          dispatch_time_t v137 = "nw_endpoint_handler_remove_extra_interface_option";
          __int16 v138 = 2082;
          BOOL v139 = (void *)v54;
          uint64_t v140 = 2082;
          nw_endpoint_t v141 = "flow";
          _os_log_impl( &dword_181A5C000,  v32,  v53,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }
      }
    }

    if (!v31)
    {
LABEL_119:

      goto LABEL_120;
    }

    if (v89) {
      free(v89);
    }
    goto LABEL_85;
  }

  if (nw_endpoint_handler_get_minimize_logging(v5))
  {
    if ((nw_endpoint_handler_get_logging_disabled(v5) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      nw_endpoint_t v79 = v2;
      nw_endpoint_t v80 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
      {
        __int16 v81 = nw_endpoint_handler_get_id_string(v5);
        nw_endpoint_t v82 = nw_endpoint_handler_dry_run_string(v5);
        id v83 = nw_endpoint_handler_copy_endpoint(v5);
        uint64_t v84 = nw_endpoint_get_logging_description(v83);
        uint64_t v85 = nw_endpoint_handler_state_string(v5);
        BOOL v86 = nw_endpoint_handler_mode_string(v5);
        BOOL v87 = nw_endpoint_handler_copy_current_path(v5);
        *(_DWORD *)buf = 136447746;
        id v166 = "nw_endpoint_proxy_start_next_child";
        id v167 = 2082;
        int v168 = (void *)v81;
        os_log_type_t v169 = 2082;
        id v170 = v82;
        nw_endpoint_t v171 = 2082;
        v172 = v84;
        nw_endpoint_t v173 = 2082;
        nw_endpoint_t v174 = v85;
        v175 = 2082;
        os_log_type_t v176 = v86;
        id v177 = 2114;
        nw_endpoint_t v178 = v87;
        _os_log_impl( &dword_181A5C000,  v80,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] not starting next child",  buf,  0x48u);
      }

      id v2 = v79;
    }
  }

  else
  {
    BOOL v7 = v5;
    nw_endpoint_t v8 = *((_BYTE *)v7 + 268);

    if ((v8 & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      id v9 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        char v10 = v7;

        BOOL v11 = v10;
        nw_endpoint_t v12 = *((_BYTE *)v7 + 268);

        if ((v12 & 1) != 0) {
          os_log_type_t v13 = "dry-run ";
        }
        else {
          os_log_type_t v13 = "";
        }
        os_log_type_t v14 = nw_endpoint_handler_copy_endpoint(v11);
        os_log_type_t v156 = nw_endpoint_get_logging_description(v14);
        BOOL v15 = v10->id_str;
        os_log_type_t v16 = v11;
        uint64_t v17 = v16;
        char v18 = v5->state;
        else {
          id v19 = off_189BBBBF0[v18];
        }

        uint64_t v36 = v17;
        uint64_t v37 = v36;
        char v38 = "path";
        switch(v3[29])
        {
          case 0u:
            break;
          case 1u:
            char v38 = "resolver";
            break;
          case 2u:
            char v38 = nw_endpoint_flow_mode_string(v36[31]);
            break;
          case 3u:
            char v38 = "proxy";
            break;
          case 4u:
            char v38 = "fallback";
            break;
          case 5u:
            char v38 = "transform";
            break;
          default:
            char v38 = "unknown-mode";
            break;
        }

        os_log_type_t v53 = v37;
        os_unfair_lock_lock((os_unfair_lock_t)v53 + 28);
        int v54 = v53[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v53 + 28);

        *(_DWORD *)buf = 136447746;
        id v166 = "nw_endpoint_proxy_start_next_child";
        id v167 = 2082;
        int v168 = v15;
        os_log_type_t v169 = 2082;
        id v170 = v13;
        nw_endpoint_t v171 = 2082;
        v172 = v156;
        nw_endpoint_t v173 = 2082;
        nw_endpoint_t v174 = v19;
        v175 = 2082;
        os_log_type_t v176 = v38;
        id v177 = 2114;
        nw_endpoint_t v178 = v54;
        _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] not starting next child",  buf,  0x48u);
      }

                      if (!v55) {
                        goto LABEL_82;
                      }
                      goto LABEL_177;
                    }

                    nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a2);
                    if (!a2->output_handler) {
                      nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)(handle + 24));
                    }
                    *(_OWORD *)(handle + 24) = *(_OWORD *)a2->flow_id;
                    if (nw_proxy_copy_http_connect_definition::onceToken != -1) {
                      dispatch_once(&nw_proxy_copy_http_connect_definition::onceToken, &__block_literal_global_92);
                    }
                    char v59 = (id)nw_proxy_copy_http_connect_definition::proxy_definition;
                    nw_endpoint_t v60 = v8;
                    nw_endpoint_t v61 = v59;
                    id v62 = v61;
                    if (v61)
                    {
                      *(void *)buf = 0LL;
                      *(void *)&buf[8] = buf;
                      *(void *)&buf[16] = 0x3032000000LL;
                      uint64_t v113 = __Block_byref_object_copy__19159;
                      *(void *)&BOOL v114 = __Block_byref_object_dispose__19160;
                      *((void *)&v114 + 1) = 0LL;
                      os_log_type_t v63 = (unsigned __int8 *)v60[21];
                      if (v63)
                      {
                        *(void *)os_log_type_t type = MEMORY[0x1895F87A8];
                        nw_endpoint_t v106 = 3221225472LL;
                        int v107 = __nw_parameters_copy_proxy_options_block_invoke;
                        char v108 = &unk_189BC7960;
                        int v109 = v61;
                        uint64_t v110 = buf;
                        nw_array_apply(v63, (uint64_t)type);

                        BOOL v64 = *(void **)(*(void *)&buf[8] + 40LL);
                      }

                      else
                      {
                        BOOL v64 = 0LL;
                      }

                      unsigned int v67 = v64;
                      _Block_object_dispose(buf, 8);

                      goto LABEL_136;
                    }

                    __nwlog_obj();
                    os_log_type_t v97 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_parameters_copy_proxy_options";
                    BOOL v98 = (char *)_os_log_send_and_compose_impl();

                    type[0] = OS_LOG_TYPE_ERROR;
                    id v111 = 0;
                    if (__nwlog_fault(v98, type, &v111))
                    {
                      if (type[0] == OS_LOG_TYPE_FAULT)
                      {
                        __nwlog_obj();
                        BOOL v99 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                        BOOL v100 = type[0];
                        if (os_log_type_enabled(v99, type[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_parameters_copy_proxy_options";
                          _os_log_impl( &dword_181A5C000,  v99,  v100,  "%{public}s called with null proxy_protocol",  buf,  0xCu);
                        }
                      }

                      else if (v111)
                      {
                        nw_endpoint_t v101 = (char *)__nw_create_backtrace_string();
                        __nwlog_obj();
                        BOOL v99 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                        os_log_type_t v102 = type[0];
                        nw_endpoint_t v103 = os_log_type_enabled(v99, type[0]);
                        if (v101)
                        {
                          if (v103)
                          {
                            *(_DWORD *)buf = 136446466;
                            *(void *)&uint8_t buf[4] = "nw_parameters_copy_proxy_options";
                            *(_WORD *)&buf[12] = 2082;
                            *(void *)&buf[14] = v101;
                            _os_log_impl( &dword_181A5C000,  v99,  v102,  "%{public}s called with null proxy_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
                          }

                          free(v101);
                          goto LABEL_225;
                        }

                        if (v103)
                        {
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_parameters_copy_proxy_options";
                          _os_log_impl( &dword_181A5C000,  v99,  v102,  "%{public}s called with null proxy_protocol, no backtrace",  buf,  0xCu);
                        }
                      }

                      else
                      {
                        __nwlog_obj();
                        BOOL v99 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                        os_log_type_t v104 = type[0];
                        if (os_log_type_enabled(v99, type[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_parameters_copy_proxy_options";
                          _os_log_impl( &dword_181A5C000,  v99,  v104,  "%{public}s called with null proxy_protocol, backtrace limit exceeded",  buf,  0xCu);
                        }
                      }
                    }

      if (v172) {
        free(v172);
      }
      a4 = 0xFFFFFFFFLL;
      goto LABEL_179;
    }

    uint64_t v50 = (v46 + 2);
    __nwlog_obj();
    *(_DWORD *)buf = 136446978;
    nw_endpoint_t v178 = "nw_protocol_http1_get_output_frames";
    uint64_t v179 = 2082;
    *(void *)os_log_type_t v180 = "minimum_bytes";
    *(_WORD *)&v180[8] = 2048;
    nw_endpoint_t log = v50 + 7;
    *(void *)&v180[10] = v50 + 7;
    nw_endpoint_t v181 = 2048;
    *(void *)v182 = a3;
    os_log_type_t v176 = OS_LOG_TYPE_ERROR;
    v175 = 0;
    nw_endpoint_t v171 = (char *)_os_log_send_and_compose_impl();
    if (__nwlog_fault(v171, &v176, &v175))
    {
      if (v176 == OS_LOG_TYPE_FAULT)
      {
        id v51 = (os_log_s *)__nwlog_obj();
        nw_endpoint_t v52 = v176;
        __int16 v160 = v51;
        if (os_log_type_enabled(v51, v176))
        {
          *(_DWORD *)buf = 136446978;
          nw_endpoint_t v178 = "nw_protocol_http1_get_output_frames";
          uint64_t v179 = 2082;
          *(void *)os_log_type_t v180 = "minimum_bytes";
          *(_WORD *)&v180[8] = 2048;
          *(void *)&v180[10] = log;
          nw_endpoint_t v181 = 2048;
          *(void *)v182 = a3;
          os_log_type_t v53 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_153:
          BOOL v95 = v160;
          unsigned int v96 = v52;
LABEL_154:
          _os_log_impl(&dword_181A5C000, v95, v96, v53, buf, 0x2Au);
        }
      }

      else if (v175)
      {
        __int16 v81 = (char *)__nw_create_backtrace_string();
        os_log_type_t v161 = (os_log_s *)__nwlog_obj();
        typea = v176;
        nw_endpoint_t v82 = os_log_type_enabled(v161, v176);
        if (v81)
        {
          if (v82)
          {
            *(_DWORD *)buf = 136447234;
            nw_endpoint_t v178 = "nw_protocol_http1_get_output_frames";
            uint64_t v179 = 2082;
            *(void *)os_log_type_t v180 = "minimum_bytes";
            *(_WORD *)&v180[8] = 2048;
            *(void *)&v180[10] = log;
            nw_endpoint_t v181 = 2048;
            *(void *)v182 = a3;
            *(_WORD *)&v182[8] = 2082;
            v183 = (uint64_t)v81;
            _os_log_impl( &dword_181A5C000,  v161,  typea,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v81);
          goto LABEL_155;
        }

        if (v82)
        {
          *(_DWORD *)buf = 136446978;
          nw_endpoint_t v178 = "nw_protocol_http1_get_output_frames";
          uint64_t v179 = 2082;
          *(void *)os_log_type_t v180 = "minimum_bytes";
          *(_WORD *)&v180[8] = 2048;
          *(void *)&v180[10] = log;
          nw_endpoint_t v181 = 2048;
          *(void *)v182 = a3;
          os_log_type_t v53 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          BOOL v95 = v161;
          unsigned int v96 = typea;
          goto LABEL_154;
        }
      }

      else
      {
        BOOL v94 = (os_log_s *)__nwlog_obj();
        nw_endpoint_t v52 = v176;
        __int16 v160 = v94;
        if (os_log_type_enabled(v94, v176))
        {
          *(_DWORD *)buf = 136446978;
          nw_endpoint_t v178 = "nw_protocol_http1_get_output_frames";
          uint64_t v179 = 2082;
          *(void *)os_log_type_t v180 = "minimum_bytes";
          *(_WORD *)&v180[8] = 2048;
          *(void *)&v180[10] = log;
          nw_endpoint_t v181 = 2048;
          *(void *)v182 = a3;
          os_log_type_t v53 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_153;
        }
      }
    }

          free(v62);
          goto LABEL_177;
        }

        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_stream_save_outbound_message";
        id v62 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(v643) = 16;
        LOBYTE(v647) = 0;
        if (v643 == 17)
        {
          os_log_type_t v63 = (os_log_s *)__nwlog_obj();
          BOOL v64 = v643;
          if (!os_log_type_enabled(v63, (os_log_type_t)v643)) {
            goto LABEL_175;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_stream_save_outbound_message";
          uint64_t v65 = "%{public}s metadata must be http";
        }

        else
        {
          if ((_BYTE)v647)
          {
            v570 = (char *)__nw_create_backtrace_string();
            uint64_t v76 = (os_log_s *)__nwlog_obj();
            uint64_t v77 = v643;
            v571 = os_log_type_enabled(v76, (os_log_type_t)v643);
            if (v570)
            {
              if (v571)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_save_outbound_message";
                v638 = 2082;
                *(void *)v639 = v570;
                _os_log_impl( &dword_181A5C000,  v76,  v77,  "%{public}s metadata must be http, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v570);
            }

            else if (v571)
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_save_outbound_message";
              uint64_t v65 = "%{public}s metadata must be http, no backtrace";
              goto LABEL_310;
            }

            goto LABEL_175;
          }

          os_log_type_t v63 = (os_log_s *)__nwlog_obj();
          BOOL v64 = v643;
          if (!os_log_type_enabled(v63, (os_log_type_t)v643)) {
            goto LABEL_175;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_stream_save_outbound_message";
          uint64_t v65 = "%{public}s metadata must be http, backtrace limit exceeded";
        }

LABEL_177:
      if (v73) {
        free(v73);
      }
      goto LABEL_92;
    }

    if (!v88)
    {
      __nwlog_obj();
      char v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v84 = type;
      if (os_log_type_enabled(v74, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v91 = "nw_service_connector_verify_read_succeeded";
        _os_log_impl( &dword_181A5C000,  v74,  v84,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_176;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    char v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    __int16 v81 = type;
    nw_endpoint_t v82 = os_log_type_enabled(v74, type);
    if (!backtrace_string)
    {
      if (v82)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v91 = "nw_service_connector_verify_read_succeeded";
        _os_log_impl(&dword_181A5C000, v74, v81, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }

      goto LABEL_176;
    }

    if (v82)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v91 = "nw_service_connector_verify_read_succeeded";
      nw_endpoint_t v92 = 2082;
      uint64_t v93 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v74,  v81,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
    }

          free(v68);
          goto LABEL_208;
        }

    _os_log_impl(&dword_181A5C000, v58, v59, v60, buf, 0x12u);
    goto LABEL_177;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v43 = (os_log_s *)gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v553 = "nw_socket_set_common_sockopts";
    v554 = 1024;
    *(_DWORD *)v555 = v49;
    BOOL v44 = "%{public}s setsockopt SO_NECP_LISTENUUID failed %{darwin.errno}d";
    goto LABEL_134;
  }

    goto LABEL_177;
  }

  char v6 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_protocol_stack);
  if (v5 >> 3 == 2)
  {
    BOOL v7 = nw_array_get_object_at_index((uint64_t)v2, 0LL);
    id v9 = nw_array_get_object_at_index((uint64_t)v2, 1uLL);
    if (nw_protocol_options_is_masque(*(void **)(v7 + 40)))
    {
      if (nw_protocol_options_is_masque(*(void **)(v9 + 40)))
      {
        os_log_type_t v14 = nw_protocol_options_copy(*(void **)(v7 + 40));
        BOOL v11 = v14;
        BOOL v15 = *(void **)(v7 + 32);
        if (!v15) {
          BOOL v15 = *(void **)(v7 + 24);
        }
        nw_protocol_options_set_proxy_endpoint(v14, v15, 0);
        if (nw_protocol_copy_http2_definition_onceToken != -1) {
          dispatch_once(&nw_protocol_copy_http2_definition_onceToken, &__block_literal_global_3_72546);
        }
        options = nw_protocol_create_options((void *)nw_protocol_copy_http2_definition_http2_definition);
        nw_http2_set_idle_timeout(options, 60LL);
        os_log_type_t v16 = *(id *)(v7 + 48);
        if (v16)
        {
          uint64_t v17 = (NWConcrete_nw_protocol_options *)v16;
          sec_protocol_options_add_tls_application_protocol((sec_protocol_options_t)v17, "h2");
          sec_protocol_options_set_min_tls_protocol_version((sec_protocol_options_t)v17, tls_protocol_version_TLSv13);
        }

        else
        {
          if (nw_protocol_copy_serializable_tls_definition::onceToken != -1) {
            dispatch_once(&nw_protocol_copy_serializable_tls_definition::onceToken, &__block_literal_global_72237);
          }
          uint64_t v17 = nw_protocol_create_options((void *)nw_protocol_copy_serializable_tls_definition::tls_definition);
          nw_serializable_tls_set_add_h2_alpn(v17);
          nw_serializable_tls_set_require_tls13(v17);
          os_log_type_t v28 = *(void *)(v7 + 56);
          if (v28)
          {
            nw_serializable_tls_set_server_raw_public_keys(v17, v28);
          }

          else
          {
            nw_endpoint_t v32 = *(void *)(v7 + 64);
            if (v32)
            {
              nw_serializable_tls_set_client_identity_reference(v17, v32, *(void *)(v7 + 72));
            }

            else if ((*(_BYTE *)(v7 + 80) & 0x10) != 0)
            {
              nw_serializable_tls_set_trust_certs(v17);
            }
          }
        }

        nw_endpoint_t v82 = v17;
        os_log_type_t v34 = *(void *)(v9 + 32);
        if (!v34) {
          os_log_type_t v34 = *(void *)(v9 + 24);
        }
        nw_masque_options_set_target_endpoint(v11, v34);
        BOOL v35 = nw_protocol_options_copy(*(void **)(v9 + 40));
        uint64_t v36 = v35;
        uint64_t v37 = *(void **)(v9 + 32);
        if (!v37) {
          uint64_t v37 = *(void **)(v9 + 24);
        }
        nw_protocol_options_set_proxy_endpoint(v35, v37, 1);
        id v83 = v36;
        if ((*(_BYTE *)(v7 + 81) & 2) != 0)
        {
          nw_masque_options_set_forced_protocol(v11, 2);
          if (nw_protocol_copy_http3_definition_onceToken != -1) {
            dispatch_once(&nw_protocol_copy_http3_definition_onceToken, &__block_literal_global_10_72547);
          }
          uint64_t v41 = nw_protocol_create_options((void *)nw_protocol_copy_http3_definition_http3_definition);
          char v38 = v41;
          if ((*(_BYTE *)(v9 + 80) & 2) != 0)
          {
            nw_http3_set_0rtt_enabled(v41, 1LL);
            nw_http3_set_idle_timeout(v38, 30LL);
            nw_http3_set_keepalive_mode(v38, 2LL);
          }

          else
          {
            nw_http3_set_idle_timeout(v41, 900LL);
            nw_http3_set_keepalive_mode(v38, 1LL);
          }

          if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
            dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55294);
          }
          BOOL v40 = nw_protocol_create_options((void *)nw_protocol_copy_quic_stream_definition::quic_definition);
          uint64_t v42 = (NWConcrete_nw_protocol_options *)nw_quic_stream_copy_shared_connection_options(v40);
          uint64_t v43 = v42;
          BOOL v44 = *(_BYTE *)(v9 + 80);
          if ((v44 & 4) != 0)
          {
            nw_quic_connection_set_enable_l4s(v42, 1);
            BOOL v44 = *(_BYTE *)(v9 + 80);
          }

          if ((v44 & 8) != 0) {
            nw_quic_connection_set_enable_multipath(v43, 1);
          }
          nw_quic_connection_set_idle_timeout(v43, 0);
          nw_quic_connection_set_max_datagram_frame_size(v43, 0xFFFF);
          nw_quic_connection_set_max_udp_payload_size(v43, 1472);
          nw_quic_connection_set_datagram_variant_flow_id_enabled(v43, 1);
          if (nw_masque_options_get_version(v83) == 2)
          {
            nw_quic_connection_set_datagram_quarter_stream_id(v43, 1);
            nw_quic_connection_set_datagram_context_id(v43, 1);
          }

          nw_quic_connection_set_source_connection_id_length(v43, 8);
          nw_quic_connection_set_initial_packet_size(v43, 1304);
          os_log_type_t v45 = *(void **)(v9 + 48);
          if (v45)
          {
            nw_endpoint_t v46 = v45;
            nw_quic_connection_set_sec_protocol_options(v43, v46);
          }

          char v47 = *(void *)(v9 + 56);
          if (v47)
          {
            nw_quic_connection_set_server_raw_public_keys(v43, v47);
          }

          else
          {
            uint64_t v50 = *(void *)(v9 + 64);
            if (v50)
            {
              nw_quic_connection_set_client_identity_reference(v43, v50, *(void *)(v9 + 72));
            }

            else if ((*(_BYTE *)(v9 + 80) & 0x10) != 0)
            {
              nw_quic_connection_set_override_trust_certs_for_tests(v43, 1);
            }
          }

          nw_quic_connection_add_h3_alpn(v43, 1);
          nw_quic_connection_set_keepalive_count(v43, 3);
          nw_protocol_stack_append_application_protocol(v6, v83);
          nw_protocol_stack_append_application_protocol(v6, v38);
          nw_protocol_stack_append_application_protocol(v6, v40);
          nw_protocol_stack_append_application_protocol(v6, v11);
          nw_protocol_stack_append_application_protocol(v6, options);
          nw_protocol_stack_append_application_protocol(v6, v82);
          nw_endpoint_t v52 = nw_protocol_create_options((void *)g_tcp_definition);
          nw_protocol_stack_set_transport_protocol((nw_protocol_stack_t)v6, (nw_protocol_options_t)v52);
        }

        else
        {
          nw_masque_options_set_forced_protocol(v11, 1);
          if (nw_protocol_copy_http2_definition_onceToken != -1) {
            dispatch_once(&nw_protocol_copy_http2_definition_onceToken, &__block_literal_global_3_72546);
          }
          char v38 = nw_protocol_create_options((void *)nw_protocol_copy_http2_definition_http2_definition);
          nw_http2_set_idle_timeout(v38, 900LL);
          char v39 = *(id *)(v9 + 48);
          if (v39)
          {
            BOOL v40 = (NWConcrete_nw_protocol_options *)v39;
            sec_protocol_options_add_tls_application_protocol((sec_protocol_options_t)v40, "h2");
            sec_protocol_options_set_min_tls_protocol_version((sec_protocol_options_t)v40, tls_protocol_version_TLSv13);
          }

          else
          {
            serializable_options = nw_tls_create_serializable_options();
            nw_serializable_tls_set_add_h2_alpn(serializable_options);
            nw_serializable_tls_set_require_tls13(serializable_options);
            int v49 = *(void *)(v9 + 56);
            if (v49)
            {
              BOOL v40 = serializable_options;
              nw_serializable_tls_set_server_raw_public_keys(serializable_options, v49);
            }

            else
            {
              id v51 = *(void *)(v9 + 64);
              if (v51)
              {
                BOOL v40 = serializable_options;
                nw_serializable_tls_set_client_identity_reference(serializable_options, v51, *(void *)(v9 + 72));
              }

              else
              {
                BOOL v40 = serializable_options;
                if ((*(_BYTE *)(v9 + 80) & 0x10) != 0) {
                  nw_serializable_tls_set_trust_certs(serializable_options);
                }
              }
            }
          }

          nw_protocol_stack_append_application_protocol(v6, v83);
          nw_protocol_stack_append_application_protocol(v6, v38);
          nw_protocol_stack_append_application_protocol(v6, v40);
          nw_protocol_stack_append_application_protocol(v6, v11);
          nw_protocol_stack_append_application_protocol(v6, options);
          nw_protocol_stack_append_application_protocol(v6, v17);
          if (nw_protocol_demux_copy_definition::onceToken != -1) {
            dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_5_25952);
          }
          if (nw_protocol_demux_copy_definition::definition)
          {
            id v62 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
            os_log_type_t v63 = nw_protocol_create_options(v62);
            if (v62) {
              os_release(v62);
            }
          }

          else
          {
            os_log_type_t v63 = nw_protocol_create_options(0LL);
          }

          nw_protocol_stack_append_application_protocol(v6, v63);

          uint64_t v43 = nw_protocol_create_options((void *)g_tcp_definition);
          nw_protocol_stack_set_transport_protocol((nw_protocol_stack_t)v6, (nw_protocol_options_t)v43);
        }

        nw_endpoint_t v61 = v38;

        BOOL v64 = nw_protocol_options_copy_proxy_endpoint_for_stack(v11);
        __int16 v22 = nw_proxy_config_create_with_stack(v64, v6);

        if (nw_masque_options_get_version(v83) == 2 || (*(_BYTE *)(v7 + 81) & 2) != 0)
        {
          uint64_t v65 = (id)g_udp_definition;
          nw_proxy_config_set_alternate_protocol_stack(v22, 0LL, v65, 4u);

          if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
            dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55294);
          }
          id v66 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
          nw_proxy_config_set_alternate_protocol_stack(v22, 0LL, v66, 3u);

          if ((*(_BYTE *)(v9 + 80) & 1) != 0) {
            nw_proxy_config_set_alternate_protocol_stack(v22, 0LL, 0LL, 2u);
          }
        }

        nw_proxy_config_set_is_privacy_proxy(v22, 1, 0);
LABEL_140:

LABEL_141:
        nw_proxy_config_set_type(v22, 3006);
        goto LABEL_142;
      }

      if (nw_protocol_options_is_oblivious_http(*(void **)(v9 + 40)))
      {
        os_log_type_t v23 = nw_protocol_options_copy(*(void **)(v7 + 40));
        BOOL v11 = v23;
        BOOL v24 = *(void **)(v7 + 32);
        if (!v24) {
          BOOL v24 = *(void **)(v7 + 24);
        }
        nw_protocol_options_set_proxy_endpoint(v23, v24, 0);
        options = nw_protocol_options_copy(*(void **)(v9 + 40));
        if (nw_protocol_copy_http2_definition_onceToken != -1) {
          dispatch_once(&nw_protocol_copy_http2_definition_onceToken, &__block_literal_global_3_72546);
        }
        nw_endpoint_t v82 = nw_protocol_create_options((void *)nw_protocol_copy_http2_definition_http2_definition);
        nw_http2_set_idle_timeout(v82, 60LL);
        id v25 = *(id *)(v7 + 48);
        if (v25)
        {
          id v83 = (NWConcrete_nw_protocol_options *)v25;
          sec_protocol_options_add_tls_application_protocol((sec_protocol_options_t)v83, "h2");
          sec_protocol_options_set_min_tls_protocol_version((sec_protocol_options_t)v83, tls_protocol_version_TLSv13);
        }

        else
        {
          BOOL v30 = nw_tls_create_serializable_options();
          nw_serializable_tls_set_add_h2_alpn(v30);
          nw_serializable_tls_set_require_tls13(v30);
          __int16 v31 = *(void *)(v7 + 56);
          if (v31)
          {
            id v83 = v30;
            nw_serializable_tls_set_server_raw_public_keys(v30, v31);
          }

          else
          {
            BOOL v33 = *(void *)(v7 + 64);
            if (v33)
            {
              id v83 = v30;
              nw_serializable_tls_set_client_identity_reference(v30, v33, *(void *)(v7 + 72));
            }

            else
            {
              id v83 = v30;
              if ((*(_BYTE *)(v7 + 80) & 0x10) != 0) {
                nw_serializable_tls_set_trust_certs(v30);
              }
            }
          }
        }

        nw_protocol_stack_append_application_protocol(v6, options);
        nw_protocol_stack_append_application_protocol(v6, v11);
        nw_protocol_stack_append_application_protocol(v6, v82);
        nw_protocol_stack_append_application_protocol(v6, v83);
        __int16 v57 = nw_protocol_create_options((void *)g_tcp_definition);
        nw_protocol_stack_set_transport_protocol((nw_protocol_stack_t)v6, (nw_protocol_options_t)v57);

        nw_endpoint_t v58 = nw_protocol_options_copy_proxy_endpoint_for_stack(v11);
        __int16 v22 = nw_proxy_config_create_with_stack(v58, v6);

        nw_proxy_config_set_is_privacy_proxy(v22, 1, 0);
        if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
          dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72514);
        }
        char v59 = (id)nw_protocol_copy_http_messaging_definition_definition;
        nw_proxy_config_add_required_protocol(v22, v59);

        if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
          dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72514);
        }
        nw_endpoint_t v60 = (id)nw_protocol_copy_http_messaging_definition_definition;
        nw_proxy_config_add_protocol_to_remove(v22, v60);

        nw_endpoint_t v61 = (void *)nw_protocol_boringssl_copy_definition();
        nw_proxy_config_add_protocol_to_remove(v22, v61);
        goto LABEL_140;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v20 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v87 = "nw_proxy_config_create_fallback_privacy_proxy";
        os_log_type_t v21 = "%{public}s Second hop must be MASQUE or OHTTP";
        goto LABEL_28;
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v20 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v87 = "nw_proxy_config_create_fallback_privacy_proxy";
        os_log_type_t v21 = "%{public}s First hop must be MASQUE";
LABEL_28:
        _os_log_impl(&dword_181A5C000, v20, OS_LOG_TYPE_ERROR, v21, buf, 0xCu);
      }
    }

    goto LABEL_30;
  }

  if (v5 >> 3 == 1)
  {
    BOOL v7 = nw_array_get_object_at_index((uint64_t)v2, 0LL);
    if (nw_protocol_options_is_masque(*(void **)(v7 + 40)))
    {
      nw_endpoint_t v8 = nw_protocol_options_copy(*(void **)(v7 + 40));
      id v9 = (uint64_t)v8;
      char v10 = *(void **)(v7 + 32);
      if (!v10) {
        char v10 = *(void **)(v7 + 24);
      }
      nw_protocol_options_set_proxy_endpoint(v8, v10, 0);
      if (nw_protocol_copy_http2_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_http2_definition_onceToken, &__block_literal_global_3_72546);
      }
      BOOL v11 = nw_protocol_create_options((void *)nw_protocol_copy_http2_definition_http2_definition);
      nw_http2_set_idle_timeout(v11, 60LL);
      nw_endpoint_t v12 = *(id *)(v7 + 48);
      if (v12)
      {
        options = (NWConcrete_nw_protocol_options *)v12;
        sec_protocol_options_add_tls_application_protocol((sec_protocol_options_t)options, "h2");
        sec_protocol_options_set_min_tls_protocol_version((sec_protocol_options_t)options, tls_protocol_version_TLSv13);
      }

      else
      {
        if (nw_protocol_copy_serializable_tls_definition::onceToken != -1) {
          dispatch_once(&nw_protocol_copy_serializable_tls_definition::onceToken, &__block_literal_global_72237);
        }
        BOOL v26 = nw_protocol_create_options((void *)nw_protocol_copy_serializable_tls_definition::tls_definition);
        nw_serializable_tls_set_add_h2_alpn(v26);
        nw_serializable_tls_set_require_tls13(v26);
        BOOL v27 = *(void *)(v7 + 56);
        if (v27)
        {
          options = v26;
          nw_serializable_tls_set_server_raw_public_keys(v26, v27);
        }

        else
        {
          os_log_type_t v29 = *(void *)(v7 + 64);
          if (v29)
          {
            options = v26;
            nw_serializable_tls_set_client_identity_reference(v26, v29, *(void *)(v7 + 72));
          }

          else
          {
            options = v26;
            if ((*(_BYTE *)(v7 + 80) & 0x10) != 0) {
              nw_serializable_tls_set_trust_certs(v26);
            }
          }
        }
      }

      nw_protocol_stack_append_application_protocol(v6, (void *)v9);
      nw_protocol_stack_append_application_protocol(v6, v11);
      nw_protocol_stack_append_application_protocol(v6, options);
      os_log_type_t v53 = nw_protocol_create_options((void *)g_tcp_definition);
      nw_protocol_stack_set_transport_protocol((nw_protocol_stack_t)v6, (nw_protocol_options_t)v53);

      int v54 = nw_protocol_options_copy_proxy_endpoint_for_stack((void *)v9);
      __int16 v22 = nw_proxy_config_create_with_stack(v54, v6);

      if (nw_masque_options_get_version((void *)v9) == 2)
      {
        char v55 = (id)g_udp_definition;
        nw_proxy_config_set_alternate_protocol_stack(v22, 0LL, v55, 4u);

        if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
          dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55294);
        }
        BOOL v56 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
        nw_proxy_config_set_alternate_protocol_stack(v22, 0LL, v56, 3u);

        if ((*(_BYTE *)(v7 + 80) & 1) != 0) {
          nw_proxy_config_set_alternate_protocol_stack(v22, 0LL, 0LL, 2u);
        }
      }

      nw_proxy_config_set_is_privacy_proxy(v22, 1, 0);
      goto LABEL_141;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v19 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v87 = "nw_proxy_config_create_fallback_privacy_proxy";
      _os_log_impl(&dword_181A5C000, v19, OS_LOG_TYPE_ERROR, "%{public}s First hop must be MASQUE", buf, 0xCu);
    }
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v18 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v87 = "nw_proxy_config_create_fallback_privacy_proxy";
      _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_ERROR,  "%{public}s No more than two hops are currently supported",  buf,  0xCu);
    }
  }

                  if (v56) {
                    free(v56);
                  }
                  nw_endpoint_t v12 = 0LL;
                  goto LABEL_20;
                }

                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_protocol_test_access_options";
                os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();
                type[0] = OS_LOG_TYPE_ERROR;
                id v66 = 0;
                if (__nwlog_fault(v28, type, &v66))
                {
                  if (type[0] == OS_LOG_TYPE_FAULT)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    os_log_type_t v29 = (os_log_s *)gLogObj;
                    BOOL v30 = type[0];
                    if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
                      goto LABEL_83;
                    }
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_protocol_test_access_options";
                    __int16 v31 = "%{public}s Failed to copy test protocol options";
                    goto LABEL_82;
                  }

                  if (!v66)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    os_log_type_t v29 = (os_log_s *)gLogObj;
                    BOOL v30 = type[0];
                    if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
                      goto LABEL_83;
                    }
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_protocol_test_access_options";
                    __int16 v31 = "%{public}s Failed to copy test protocol options, backtrace limit exceeded";
                    goto LABEL_82;
                  }

                  uint64_t v37 = (char *)__nw_create_backtrace_string();
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  os_log_type_t v29 = (os_log_s *)gLogObj;
                  BOOL v30 = type[0];
                  char v38 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
                  if (v37)
                  {
                    if (v38)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(void *)&uint8_t buf[4] = "nw_protocol_test_access_options";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = v37;
                      _os_log_impl( &dword_181A5C000,  v29,  v30,  "%{public}s Failed to copy test protocol options, dumping backtrace:%{public}s",  buf,  0x16u);
                    }

                    free(v37);
                    goto LABEL_83;
                  }

                  if (v38)
                  {
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_protocol_test_access_options";
                    __int16 v31 = "%{public}s Failed to copy test protocol options, no backtrace";
LABEL_82:
                    _os_log_impl(&dword_181A5C000, v29, v30, v31, buf, 0xCu);
                  }
                }

LABEL_212:
    free(v157);
    goto LABEL_213;
  }

  unsigned int mode = v1->mode;

  if (mode != 2) {
    goto LABEL_179;
  }
  os_log_type_t v206 = v2;
  int v4 = nw_endpoint_handler_copy_flow(v2);
  if (_nw_signposts_once != -1) {
    dispatch_once(&_nw_signposts_once, &__block_literal_global_80157);
  }
  if ((*((_BYTE *)v4 + 33) & 0x40) == 0)
  {
    __int16 v5 = v2;
    char v6 = *((_BYTE *)v5 + 268);

    if ((v6 & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      BOOL v7 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        nw_endpoint_t v8 = v5;

        id v9 = v8;
        char v10 = *((_BYTE *)v5 + 268);

        if ((v10 & 1) != 0) {
          BOOL v11 = "dry-run ";
        }
        else {
          BOOL v11 = "";
        }
        nw_endpoint_t v204 = v4;
        nw_endpoint_t v12 = nw_endpoint_handler_copy_endpoint(v9);
        logging_description = nw_endpoint_get_logging_description(v12);
        id_str = v8->id_str;
        BOOL v15 = v9;
        os_log_type_t v16 = v15;
        uint64_t v17 = v15[30];
        else {
          char v18 = off_189BBBBF0[v17];
        }

        nw_endpoint_t v52 = v16;
        os_log_type_t v53 = v52;
        int v54 = "path";
        switch(v206->mode)
        {
          case 0:
            break;
          case 1:
            int v54 = "resolver";
            break;
          case 2:
            int v54 = nw_endpoint_flow_mode_string(v52[31]);
            break;
          case 3:
            int v54 = "proxy";
            break;
          case 4:
            int v54 = "fallback";
            break;
          case 5:
            int v54 = "transform";
            break;
          default:
            int v54 = "unknown-mode";
            break;
        }

        char v108 = v53;
        os_unfair_lock_lock((os_unfair_lock_t)v108 + 28);
        int v109 = v108[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v108 + 28);

        *(_DWORD *)buf = 136447746;
        nw_endpoint_t v212 = "nw_endpoint_flow_setup_channel";
        __int16 v213 = 2082;
        v214 = id_str;
        __int16 v215 = 2082;
        id v216 = v11;
        __int16 v217 = 2082;
        os_log_type_t v218 = (void *)logging_description;
        __int16 v219 = 2082;
        v220 = v18;
        __int16 v221 = 2082;
        nw_endpoint_t v222 = v54;
        __int16 v223 = 2114;
        unint64_t v224 = v109;
        _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] is not a channel flow",  buf,  0x48u);

        int v4 = v204;
      }
    }

    uint64_t v110 = 0LL;
    goto LABEL_157;
  }

  int v209 = 0;
  id v19 = v2;
  p_lock = &v19->lock;
  os_unfair_lock_lock(&v19->lock);
  os_log_type_t v21 = v19->current_path;
  os_unfair_lock_unlock(&v19->lock);

  __int16 v22 = (NWConcrete_nw_path_flow_registration *)*((void *)v4 + 104);
  v205 = v21;
  if (!v22)
  {
    if (*((void *)v4 + 113)) {
      goto LABEL_31;
    }
    v19->event = (nw_endpoint_handler_event_s)65539;
    nw_endpoint_handler_report(v19, 0LL, &v19->event.domain, 0LL);
    BOOL v208 = 0;
    nw_path_get_nexus_agent_uuid_check_assertion(v21, &v210, &v208);
    if (v208
      && !nw_path_agent_action(v21, (const unsigned __int8 *)&v210, 131)
      && (nw_endpoint_handler_get_logging_disabled(v19) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v65 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
      {
        id_string = nw_endpoint_handler_get_id_string(v19);
        unsigned int v67 = nw_endpoint_handler_dry_run_string(v19);
        nw_endpoint_t v68 = nw_endpoint_handler_copy_endpoint(v19);
        id v69 = nw_endpoint_get_logging_description(v68);
        BOOL v70 = nw_endpoint_handler_state_string(v19);
        os_log_type_t v71 = nw_endpoint_handler_mode_string(v19);
        int v72 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v19);
        *(_DWORD *)buf = 136447746;
        nw_endpoint_t v212 = "nw_endpoint_flow_setup_channel";
        __int16 v213 = 2082;
        v214 = (char *)id_string;
        __int16 v215 = 2082;
        id v216 = v67;
        __int16 v217 = 2082;
        os_log_type_t v218 = (void *)v69;
        __int16 v219 = 2082;
        v220 = v70;
        __int16 v221 = 2082;
        nw_endpoint_t v222 = v71;
        __int16 v223 = 2114;
        unint64_t v224 = v72;
        _os_log_impl( &dword_181A5C000,  v65,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] failed to assert nexus agent",  buf,  0x48u);
      }
    }

    int v73 = v19;
    char v74 = (void **)v73[7];

    int v207 = 0;
    if (v74)
    {
      uint64_t v75 = nw_path_evaluator_create_flow_inner(v74[3], 1, 1, 0, 0, &v210, 0LL, 0, &v207);
      uint64_t v76 = (void *)*((void *)v4 + 104);
      *((void *)v4 + 104) = v75;
    }

    if (!*((void *)v4 + 104))
    {
      if ((nw_endpoint_handler_get_logging_disabled(v73) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        id v111 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
        {
          int v112 = nw_endpoint_handler_get_id_string(v73);
          uint64_t v113 = nw_endpoint_handler_dry_run_string(v73);
          nw_endpoint_t v203 = nw_endpoint_handler_copy_endpoint(v73);
          BOOL v114 = nw_endpoint_get_logging_description(v203);
          int v115 = nw_endpoint_handler_state_string(v73);
          nw_endpoint_t v116 = nw_endpoint_handler_mode_string(v73);
          nw_endpoint_t v117 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v73);
          *(_DWORD *)buf = 136447746;
          nw_endpoint_t v212 = "nw_endpoint_flow_setup_channel";
          __int16 v213 = 2082;
          v214 = (char *)v112;
          __int16 v215 = 2082;
          id v216 = v113;
          __int16 v217 = 2082;
          os_log_type_t v218 = (void *)v114;
          __int16 v219 = 2082;
          v220 = v115;
          __int16 v221 = 2082;
          nw_endpoint_t v222 = v116;
          __int16 v223 = 2114;
          unint64_t v224 = v117;
          _os_log_impl( &dword_181A5C000,  v111,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] failed to request add nexus flow",  buf,  0x48u);
        }
      }

      if (v207 && !*((void *)v4 + 109))
      {
        posix_int error = nw_error_create_posix_error(v207);
        uint64_t v119 = (void *)*((void *)v4 + 109);
        *((void *)v4 + 109) = posix_error;
      }

      nw_endpoint_flow_failed_with_error(v73, 1, 0LL);

      goto LABEL_113;
    }

    if (nw_endpoint_handler_get_minimize_logging(v73))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      nw_endpoint_t v79 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
      {
        v183 = nw_endpoint_handler_get_id_string(v73);
        v184 = nw_endpoint_handler_dry_run_string(v73);
        nw_endpoint_t v185 = nw_endpoint_handler_copy_endpoint(v73);
        __int16 v186 = nw_endpoint_get_logging_description(v185);
        os_log_type_t v187 = nw_endpoint_handler_state_string(v73);
        v188 = nw_endpoint_handler_mode_string(v73);
        os_log_type_t v189 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v73);
        *(_DWORD *)buf = 136447746;
        nw_endpoint_t v212 = "nw_endpoint_flow_setup_channel";
        __int16 v213 = 2082;
        v214 = (char *)v183;
        __int16 v215 = 2082;
        id v216 = v184;
        __int16 v217 = 2082;
        os_log_type_t v218 = (void *)v186;
        __int16 v219 = 2082;
        v220 = v187;
        __int16 v221 = 2082;
        nw_endpoint_t v222 = v188;
        __int16 v223 = 2114;
        unint64_t v224 = v189;
        _os_log_impl( &dword_181A5C000,  v79,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] requested nexus flow",  buf,  0x48u);
      }
    }

    else
    {
      uint64_t v77 = v73;
      BOOL v78 = (*((_BYTE *)v77 + 268) & 0x20) == 0;

      if (!v78)
      {
LABEL_71:
        nw_association_force_update(v74, *((void **)v4 + 104));

        goto LABEL_124;
      }

      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      nw_endpoint_t v79 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
      {
        nw_endpoint_t v80 = nw_endpoint_handler_get_id_string(v77);
        __int16 v81 = nw_endpoint_handler_dry_run_string(v77);
        nw_endpoint_t v82 = nw_endpoint_handler_copy_endpoint(v77);
        id v83 = v74;
        uint64_t v84 = nw_endpoint_get_logging_description(v82);
        uint64_t v85 = nw_endpoint_handler_state_string(v77);
        BOOL v86 = nw_endpoint_handler_mode_string(v77);
        BOOL v87 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v77);
        *(_DWORD *)buf = 136447746;
        nw_endpoint_t v212 = "nw_endpoint_flow_setup_channel";
        __int16 v213 = 2082;
        v214 = (char *)v80;
        __int16 v215 = 2082;
        id v216 = v81;
        __int16 v217 = 2082;
        os_log_type_t v218 = (void *)v84;
        __int16 v219 = 2082;
        v220 = v85;
        __int16 v221 = 2082;
        nw_endpoint_t v222 = v86;
        __int16 v223 = 2114;
        unint64_t v224 = v87;
        _os_log_impl( &dword_181A5C000,  v79,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] requested nexus flow",  buf,  0x48u);

        char v74 = v83;
      }
    }

    goto LABEL_71;
  }

  BOOL nexus_instance = nw_path_flow_registration_get_nexus_instance(v21, v22, &v227, &v209);
  int can_use_nexus = nw_path_flow_registration_can_use_nexus(v21, *((NWConcrete_nw_path_flow_registration **)v4 + 104));
  if (*((void *)v4 + 113))
  {
    if ((nexus_instance & can_use_nexus & 1) != 0)
    {
      id v25 = v19;
      BOOL v26 = (*((_BYTE *)v25 + 268) & 0x20) == 0;

      if (v26)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        BOOL v27 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v28 = v25;

          os_log_type_t v29 = v28;
          BOOL v30 = (*((_BYTE *)v25 + 268) & 1) == 0;

          if (v30) {
            __int16 v31 = "";
          }
          else {
            __int16 v31 = "dry-run ";
          }
          nw_endpoint_t v32 = nw_endpoint_handler_copy_endpoint(v29);
          BOOL v33 = nw_endpoint_get_logging_description(v32);
          BOOL v199 = v31;
          os_log_type_t v34 = v29;
          BOOL v35 = v34;
          uint64_t v36 = v34[30];
          uint64_t v37 = v33;
          else {
            char v38 = off_189BBBBF0[v36];
          }
          nw_endpoint_t v197 = v38;

          char v120 = v35;
          id v121 = v120;
          unsigned int v122 = "path";
          switch(v206->mode)
          {
            case 0:
              break;
            case 1:
              unsigned int v122 = "resolver";
              break;
            case 2:
              unsigned int v122 = nw_endpoint_flow_mode_string(v120[31]);
              break;
            case 3:
              unsigned int v122 = "proxy";
              break;
            case 4:
              unsigned int v122 = "fallback";
              break;
            case 5:
              unsigned int v122 = "transform";
              break;
            default:
              unsigned int v122 = "unknown-mode";
              break;
          }

          char v144 = v121;
          os_unfair_lock_lock(p_lock);
          uint64_t v145 = v19->current_path;
          os_unfair_lock_unlock(p_lock);

          *(_DWORD *)buf = 136447746;
          nw_endpoint_t v212 = "nw_endpoint_flow_setup_channel";
          __int16 v213 = 2082;
          v214 = v28->id_str;
          __int16 v215 = 2082;
          id v216 = v199;
          __int16 v217 = 2082;
          os_log_type_t v218 = (void *)v37;
          __int16 v219 = 2082;
          v220 = v197;
          __int16 v221 = 2082;
          nw_endpoint_t v222 = v122;
          __int16 v223 = 2114;
          unint64_t v224 = v145;
          _os_log_impl( &dword_181A5C000,  v27,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] already set up",  buf,  0x48u);
        }
      }

      os_log_type_t v21 = v205;
      nw_endpoint_flow_setup_protocols(v25, 0LL, 0LL, (*((unsigned __int8 *)v4 + 32) >> 4) & 1, 0);
      uint64_t v142 = &qword_18C45F000;
      int v143 = &qword_18C45F000;
      goto LABEL_151;
    }

    if (nexus_instance)
    {
      if (nw_endpoint_handler_get_minimize_logging(v19))
      {
        if ((nw_endpoint_handler_get_logging_disabled(v19) & 1) != 0)
        {
LABEL_139:
          os_log_type_t v21 = v205;
          uint64_t v142 = &qword_18C45F000;
          int v143 = &qword_18C45F000;
          if ((nw_path_allows_multipath(v205) & 1) == 0 && (*((_BYTE *)v4 + 32) & 1) != 0
            || (*((_BYTE *)v4 + 33) & 8) == 0)
          {
            nw_endpoint_flow_failed_with_error(v19, 1, 0LL);
          }

            if (v58) {
              free(v58);
            }
            goto LABEL_214;
          }

          if (a2) {
            goto LABEL_82;
          }
          nw_endpoint_t v92 = v18;
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          os_log_type_t v97 = "__nw_frame_unclaimed_length";
          uint64_t v50 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          BOOL v94 = 0;
          if (__nwlog_fault(v50, &type, &v94))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              id v51 = (os_log_s *)__nwlog_obj();
              nw_endpoint_t v52 = type;
              if (!os_log_type_enabled(v51, type)) {
                goto LABEL_196;
              }
              *(_DWORD *)buf = 136446210;
              os_log_type_t v97 = "__nw_frame_unclaimed_length";
              os_log_type_t v53 = "%{public}s called with null frame";
LABEL_195:
              _os_log_impl(&dword_181A5C000, v51, v52, v53, buf, 0xCu);
              goto LABEL_196;
            }

            if (!v94)
            {
              id v51 = (os_log_s *)__nwlog_obj();
              nw_endpoint_t v52 = type;
              if (!os_log_type_enabled(v51, type)) {
                goto LABEL_196;
              }
              *(_DWORD *)buf = 136446210;
              os_log_type_t v97 = "__nw_frame_unclaimed_length";
              os_log_type_t v53 = "%{public}s called with null frame, backtrace limit exceeded";
              goto LABEL_195;
            }

            char v74 = (char *)__nw_create_backtrace_string();
            id v51 = (os_log_s *)__nwlog_obj();
            nw_endpoint_t v52 = type;
            uint64_t v75 = os_log_type_enabled(v51, type);
            if (!v74)
            {
              if (!v75) {
                goto LABEL_196;
              }
              *(_DWORD *)buf = 136446210;
              os_log_type_t v97 = "__nw_frame_unclaimed_length";
              os_log_type_t v53 = "%{public}s called with null frame, no backtrace";
              goto LABEL_195;
            }

            if (v75)
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v97 = "__nw_frame_unclaimed_length";
              BOOL v98 = 2082;
              BOOL v99 = v74;
              _os_log_impl( &dword_181A5C000,  v51,  v52,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v74);
          }

      free(v87);
      goto LABEL_213;
    }

    if (v113)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_connected_socket";
      _os_log_impl(&dword_181A5C000, v108, v112, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
    }

      if (!v93) {
        goto LABEL_242;
      }
      goto LABEL_213;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_pending_stream";
    uint64_t v93 = (void *)_os_log_send_and_compose_impl();
    LOBYTE(aBlock) = 16;
    v339[0] = OS_LOG_TYPE_DEFAULT;
    if (aBlock == 17)
    {
      id v259 = (os_log_s *)__nwlog_obj();
      __int16 v260 = aBlock;
      if (!os_log_type_enabled(v259, (os_log_type_t)aBlock)) {
        goto LABEL_212;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_pending_stream";
      unsigned int v96 = "%{public}s called with null webtransport_stream";
    }

    else if (v339[0])
    {
      uint64_t v278 = (char *)__nw_create_backtrace_string();
      id v259 = (os_log_s *)__nwlog_obj();
      __int16 v260 = aBlock;
      char v279 = os_log_type_enabled(v259, (os_log_type_t)aBlock);
      if (v278)
      {
        if (v279)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_pending_stream";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v278;
          _os_log_impl( &dword_181A5C000,  v259,  v260,  "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v278);
        goto LABEL_212;
      }

      if (!v279) {
        goto LABEL_212;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_pending_stream";
      unsigned int v96 = "%{public}s called with null webtransport_stream, no backtrace";
    }

    else
    {
      id v259 = (os_log_s *)__nwlog_obj();
      __int16 v260 = aBlock;
      if (!os_log_type_enabled(v259, (os_log_type_t)aBlock)) {
        goto LABEL_212;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_pending_stream";
      unsigned int v96 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
    }

    int v134 = v259;
    nw_endpoint_t v135 = v260;
    uint64_t v136 = 12;
    goto LABEL_211;
  }

  if (!v29)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_http3_stream_reconfigure_and_start";
    v255 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(aBlock) = 16;
    v339[0] = OS_LOG_TYPE_DEFAULT;
    if (aBlock == 17)
    {
      __int16 v256 = (os_log_s *)__nwlog_obj();
      v257 = aBlock;
      if (!os_log_type_enabled(v256, (os_log_type_t)aBlock)) {
        goto LABEL_548;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_http3_stream_reconfigure_and_start";
      __int16 v258 = "%{public}s called with null webtransport_stream";
    }

    else if (v339[0])
    {
      v276 = (char *)__nw_create_backtrace_string();
      __int16 v256 = (os_log_s *)__nwlog_obj();
      v257 = aBlock;
      v277 = os_log_type_enabled(v256, (os_log_type_t)aBlock);
      if (v276)
      {
        if (v277)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_webtransport_http3_stream_reconfigure_and_start";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v276;
          _os_log_impl( &dword_181A5C000,  v256,  v257,  "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v276);
        goto LABEL_548;
      }

      if (!v277)
      {
LABEL_548:
        if (v255) {
          free(v255);
        }
        goto LABEL_589;
      }

      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_http3_stream_reconfigure_and_start";
      __int16 v258 = "%{public}s called with null webtransport_stream, no backtrace";
    }

    else
    {
      __int16 v256 = (os_log_s *)__nwlog_obj();
      v257 = aBlock;
      if (!os_log_type_enabled(v256, (os_log_type_t)aBlock)) {
        goto LABEL_548;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_http3_stream_reconfigure_and_start";
      __int16 v258 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v256, v257, v258, buf, 0xCu);
    goto LABEL_548;
  }

  nw_endpoint_t v80 = v30[11];
  if ((*((_BYTE *)v30 + 276) & 0x10) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v81 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      nw_endpoint_t v82 = v30[11];
      if (v82) {
        id v83 = *(_DWORD *)(v82 + 460);
      }
      else {
        id v83 = -1;
      }
      uint64_t v105 = v30[8];
      *(_DWORD *)buf = 136447746;
      *(void *)&uint8_t buf[4] = "nw_webtransport_http3_stream_reconfigure_and_start";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v30 + 24;
      *(_WORD *)&_BYTE buf[22] = 2080;
      v344 = (uint64_t)" ";
      *(_WORD *)v345 = 1024;
      *(_DWORD *)&v345[2] = v83;
      *(_WORD *)&v345[6] = 2048;
      *(void *)&v345[8] = v105;
      *(_WORD *)&v345[16] = 2048;
      *(void *)&v345[18] = v30;
      *(_WORD *)&v345[26] = 1024;
      LODWORD(v346) = v68 >> 5;
      _os_log_impl( &dword_181A5C000,  v81,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:s%lld> Reconfiguring HTTP3 stream with protocol: %p, peer_initiated: %u",  buf,  0x40u);
    }
  }

  if (*(void **)(v80 + 416) == v30)
  {
    if ((*((_BYTE *)v30 + 276) & 0x10) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v115 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        nw_endpoint_t v116 = v30[11];
        if (v116) {
          nw_endpoint_t v117 = *(_DWORD *)(v116 + 460);
        }
        else {
          nw_endpoint_t v117 = -1;
        }
        id v133 = v30[8];
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_webtransport_http3_stream_reconfigure_and_start";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v30 + 24;
        *(_WORD *)&_BYTE buf[22] = 2080;
        v344 = (uint64_t)" ";
        *(_WORD *)v345 = 1024;
        *(_DWORD *)&v345[2] = v117;
        *(_WORD *)&v345[6] = 2048;
        *(void *)&v345[8] = v133;
        _os_log_impl( &dword_181A5C000,  v115,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%lld> Returning connected without more reconfiguration for placeholder stream",  buf,  0x30u);
      }
    }

    nw_protocol_connected((void *)v30[6], (uint64_t)v30);
    goto LABEL_589;
  }

  nw_endpoint_t v106 = nw_parameters_copy_protocol_options_legacy((void *)v30[18], (nw_protocol *)v30);
  if (!v106)
  {
    if ((*((_BYTE *)v30 + 276) & 0x10) != 0) {
      goto LABEL_589;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v118 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      goto LABEL_589;
    }
    uint64_t v119 = v30[11];
    if (v119) {
      char v120 = *(_DWORD *)(v119 + 460);
    }
    else {
      char v120 = -1;
    }
    BOOL v139 = v30[8];
    *(_DWORD *)buf = 136447234;
    *(void *)&uint8_t buf[4] = "nw_webtransport_http3_stream_reconfigure_and_start";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v30 + 24;
    *(_WORD *)&_BYTE buf[22] = 2080;
    v344 = (uint64_t)" ";
    *(_WORD *)v345 = 1024;
    *(_DWORD *)&v345[2] = v120;
    *(_WORD *)&v345[6] = 2048;
    *(void *)&v345[8] = v139;
    uint64_t v140 = "%{public}s %{public}s%s<i%u:s%lld> Could not find options for stream when reconfiguring";
    nw_endpoint_t v141 = (os_log_s *)v118;
    uint64_t v142 = OS_LOG_TYPE_ERROR;
    int v143 = 48;
LABEL_245:
    _os_log_impl(&dword_181A5C000, v141, v142, v140, buf, v143);
    goto LABEL_589;
  }

  int v107 = v106;
  v30[3] = &nw_protocol_webtransport_http3_stream_callbacks(void)::protocol_callbacks;
  if (v68)
  {
    if ((*((_BYTE *)v30 + 276) & 0x10) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v121 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v122 = v30[11];
        if (v122) {
          int v123 = *(_DWORD *)(v122 + 460);
        }
        else {
          int v123 = -1;
        }
        char v144 = v30[8];
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_webtransport_http3_stream_reconfigure_and_start";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v30 + 24;
        *(_WORD *)&_BYTE buf[22] = 2080;
        v344 = (uint64_t)" ";
        *(_WORD *)v345 = 1024;
        *(_DWORD *)&v345[2] = v123;
        *(_WORD *)&v345[6] = 2048;
        *(void *)&v345[8] = v144;
        _os_log_impl( &dword_181A5C000,  v121,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%lld> Preemptively configuring metadata with incoming stream ID",  buf,  0x30u);
      }
    }

    if (*(void *)(v80 + 176) != -1LL)
    {
      if (v30[8] == -1LL)
      {
        nw_endpoint_t v148 = *(void *)(v30[11] + 176LL);
        if (v148 == -1)
        {
          if ((*((_BYTE *)v30 + 276) & 0x10) == 0)
          {
            int v168 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v168, OS_LOG_TYPE_ERROR))
            {
              os_log_type_t v169 = v30[11];
              if (v169) {
                id v170 = *(_DWORD *)(v169 + 460);
              }
              else {
                id v170 = -1;
              }
              nw_endpoint_t v174 = v30[8];
              *(_DWORD *)buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_webtransport_http3_stream_assign_stream_id";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v30 + 24;
              *(_WORD *)&_BYTE buf[22] = 2080;
              v344 = (uint64_t)" ";
              *(_WORD *)v345 = 1024;
              *(_DWORD *)&v345[2] = v170;
              *(_WORD *)&v345[6] = 2048;
              *(void *)&v345[8] = v174;
              _os_log_impl( &dword_181A5C000,  v168,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:s%lld> Failed to get stream ID for HTTP/3 webtransport stream, failing",  buf,  0x30u);
            }
          }

          v175 = (void *)v30[6];
          nw_protocol_error(v175, (uint64_t)v30);
          nw_protocol_disconnected(v175, (uint64_t)v30);
        }

        else
        {
          v30[8] = v148;
          nw_webtransport_metadata_set_stream_id((void *)v30[20], v148);
          if ((*((_BYTE *)v30 + 276) & 0x10) == 0)
          {
            nw_endpoint_t v149 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v149, OS_LOG_TYPE_INFO))
            {
              os_log_type_t v150 = v30[11];
              if (v150) {
                os_log_type_t v151 = *(_DWORD *)(v150 + 460);
              }
              else {
                os_log_type_t v151 = -1;
              }
              nw_endpoint_t v173 = v30[8];
              *(_DWORD *)buf = 136448002;
              *(void *)&uint8_t buf[4] = "nw_webtransport_http3_stream_assign_stream_id";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v30 + 24;
              *(_WORD *)&_BYTE buf[22] = 2080;
              v344 = (uint64_t)" ";
              *(_WORD *)v345 = 1024;
              *(_DWORD *)&v345[2] = v151;
              *(_WORD *)&v345[6] = 2048;
              *(void *)&v345[8] = v173;
              *(_WORD *)&v345[16] = 2048;
              *(void *)&v345[18] = v173;
              *(_WORD *)&v345[26] = 2048;
              v346 = v30;
              v347 = 1024;
              LODWORD(v34_Block_object_dispose(va, 8) = 1;
              _os_log_impl( &dword_181A5C000,  v149,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:s%lld> Assigned stream ID: %llu to stream with protocol %p, incoming: %u",  buf,  0x4Au);
            }
          }
        }
      }

      else if ((*((_BYTE *)v30 + 276) & 0x10) == 0)
      {
        if (gLogDatapath)
        {
          uint64_t v145 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v145, OS_LOG_TYPE_DEBUG))
          {
            dispatch_time_t v146 = v30[11];
            if (v146) {
              uint64_t v147 = *(_DWORD *)(v146 + 460);
            }
            else {
              uint64_t v147 = -1;
            }
            v325 = v30[8];
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_webtransport_http3_stream_assign_stream_id";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v30 + 24;
            *(_WORD *)&_BYTE buf[22] = 2080;
            v344 = (uint64_t)" ";
            *(_WORD *)v345 = 1024;
            *(_DWORD *)&v345[2] = v147;
            *(_WORD *)&v345[6] = 2048;
            *(void *)&v345[8] = v325;
            *(_WORD *)&v345[16] = 2048;
            *(void *)&v345[18] = v325;
            _os_log_impl( &dword_181A5C000,  v145,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%lld> Stream ID %llu already set, skipping",  buf,  0x3Au);
          }
        }
      }

      os_log_type_t v176 = v30[8];
      id v177 = *((_BYTE *)v30 + 276);
      if (v176 == -1)
      {
        if ((*((_BYTE *)v30 + 276) & 0x10) == 0)
        {
          nw_endpoint_t v181 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v181, OS_LOG_TYPE_ERROR))
          {
            v182 = v30[11];
            if (v182) {
              v183 = *(_DWORD *)(v182 + 460);
            }
            else {
              v183 = -1;
            }
            __int16 v186 = v30[8];
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_webtransport_stream_configure_metadata_with_stream_id";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v30 + 24;
            *(_WORD *)&_BYTE buf[22] = 2080;
            v344 = (uint64_t)" ";
            *(_WORD *)v345 = 1024;
            *(_DWORD *)&v345[2] = v183;
            *(_WORD *)&v345[6] = 2048;
            *(void *)&v345[8] = v186;
            _os_log_impl( &dword_181A5C000,  v181,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:s%lld> Not configuring webtransport stream metadata with no stream ID set",  buf,  0x30u);
          }
        }
      }

      else
      {
        *((_BYTE *)v30 + 276) = v177 & 0xF0 | (4 * ((v176 & 2) != 0)) | 3;
        if ((v177 & 0x10) == 0)
        {
          nw_endpoint_t v178 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v178, OS_LOG_TYPE_INFO))
          {
            uint64_t v179 = v30[11];
            if (v179) {
              os_log_type_t v180 = *(_DWORD *)(v179 + 460);
            }
            else {
              os_log_type_t v180 = -1;
            }
            v184 = v30[8];
            nw_endpoint_t v185 = *((unsigned __int8 *)v30 + 276);
            *(_DWORD *)buf = 136448002;
            *(void *)&uint8_t buf[4] = "nw_webtransport_stream_configure_metadata_with_stream_id";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v30 + 24;
            *(_WORD *)&_BYTE buf[22] = 2080;
            v344 = (uint64_t)" ";
            *(_WORD *)v345 = 1024;
            *(_DWORD *)&v345[2] = v180;
            *(_WORD *)&v345[6] = 2048;
            *(void *)&v345[8] = v184;
            *(_WORD *)&v345[16] = 1024;
            *(_DWORD *)&v345[18] = (v185 >> 1) & 1;
            *(_WORD *)&v345[22] = 1024;
            *(_DWORD *)&v345[24] = (v185 >> 3) & 1;
            LOWORD(v346) = 1024;
            *(_DWORD *)((char *)&v346 + 2) = (v185 >> 2) & 1;
            _os_log_impl( &dword_181A5C000,  v178,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:s%lld> Configuring metadata with flags: peer_initiated: %u, datagram: %u, unidirectional: %u",  buf,  0x42u);
          }
        }

        nw_webtransport_metadata_set_is_peer_initiated((void *)v30[20], (*((_BYTE *)v30 + 276) & 2) != 0);
        nw_webtransport_metadata_set_is_datagram((void *)v30[20], (*((_BYTE *)v30 + 276) & 8) != 0);
        nw_webtransport_metadata_set_is_unidirectional((void *)v30[20], (*((_BYTE *)v30 + 276) & 4) != 0);
      }
    }

    if ((*((_BYTE *)v30 + 276) & 0x40) != 0) {
      goto LABEL_295;
    }
LABEL_294:
    nw_webtransport_http3_stream_fix_http_parameters(v80, (uint64_t)v30);
    goto LABEL_295;
  }

  if (nw_protocol_options_is_webtransport(v107))
  {
    *((_BYTE *)v30 + 276) = *((_BYTE *)v30 + 276) & 0xFC | 1;
    if (nw_webtransport_options_get_is_datagram(v107)) {
      char v108 = 8;
    }
    else {
      char v108 = 0;
    }
    *((_BYTE *)v30 + 276) = *((_BYTE *)v30 + 276) & 0xF7 | v108;
    int v109 = nw_webtransport_options_get_is_unidirectional(v107);
    uint64_t v110 = *((_BYTE *)v30 + 276);
    if (v109) {
      id v111 = 4;
    }
    else {
      id v111 = 0;
    }
    *((_BYTE *)v30 + 276) = v110 & 0xFB | v111;
    if ((v110 & 0x10) == 0)
    {
      int v112 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v112, OS_LOG_TYPE_INFO))
      {
        uint64_t v113 = v30[11];
        if (v113) {
          BOOL v114 = *(_DWORD *)(v113 + 460);
        }
        else {
          BOOL v114 = -1;
        }
        nw_endpoint_t v158 = v30[8];
        os_log_type_t v159 = *((unsigned __int8 *)v30 + 276);
        *(_DWORD *)buf = 136448002;
        *(void *)&uint8_t buf[4] = "nw_webtransport_stream_configure_metadata_with_options";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v30 + 24;
        *(_WORD *)&_BYTE buf[22] = 2080;
        v344 = (uint64_t)" ";
        *(_WORD *)v345 = 1024;
        *(_DWORD *)&v345[2] = v114;
        *(_WORD *)&v345[6] = 2048;
        *(void *)&v345[8] = v158;
        *(_WORD *)&v345[16] = 1024;
        *(_DWORD *)&v345[18] = (v159 >> 1) & 1;
        *(_WORD *)&v345[22] = 1024;
        *(_DWORD *)&v345[24] = (v159 >> 3) & 1;
        LOWORD(v346) = 1024;
        *(_DWORD *)((char *)&v346 + 2) = (v159 >> 2) & 1;
        _os_log_impl( &dword_181A5C000,  v112,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:s%lld> Configuring metadata with flags: peer_initiated: %u, datagram: %u, unidirectional: %u",  buf,  0x42u);
      }
    }

    nw_webtransport_metadata_set_is_peer_initiated((void *)v30[20], (*((_BYTE *)v30 + 276) & 2) != 0);
    nw_webtransport_metadata_set_is_datagram((void *)v30[20], (*((_BYTE *)v30 + 276) & 8) != 0);
    nw_webtransport_metadata_set_is_unidirectional((void *)v30[20], (*((_BYTE *)v30 + 276) & 4) != 0);
  }

  else if ((*((_BYTE *)v30 + 276) & 0x10) == 0)
  {
    __int128 v130 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v130, OS_LOG_TYPE_ERROR))
    {
      nw_endpoint_t v131 = v30[11];
      if (v131) {
        v132 = *(_DWORD *)(v131 + 460);
      }
      else {
        v132 = -1;
      }
      id v164 = v30[8];
      *(_DWORD *)buf = 136447234;
      *(void *)&uint8_t buf[4] = "nw_webtransport_stream_configure_metadata_with_options";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v30 + 24;
      *(_WORD *)&_BYTE buf[22] = 2080;
      v344 = (uint64_t)" ";
      *(_WORD *)v345 = 1024;
      *(_DWORD *)&v345[2] = v132;
      *(_WORD *)&v345[6] = 2048;
      *(void *)&v345[8] = v164;
      _os_log_impl( &dword_181A5C000,  v130,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:s%lld> Invalid protocol options for webtransport stream",  buf,  0x30u);
    }
  }

  if ((*((_BYTE *)v30 + 276) & 8) != 0)
  {
    nw_protocol_connected(v30, v80);
    goto LABEL_295;
  }

  nw_protocol_set_output_handler((uint64_t)v30, 0LL);
  v30[7] = 0LL;
  if (!*(void *)(v80 + 376))
  {
    if ((*((_BYTE *)v30 + 276) & 0x10) != 0) {
      goto LABEL_587;
    }
    os_log_type_t v165 = (os_log_s *)__nwlog_obj();
    if (!os_log_type_enabled(v165, OS_LOG_TYPE_ERROR)) {
      goto LABEL_587;
    }
    id v166 = v30[11];
    if (v166) {
      id v167 = *(_DWORD *)(v166 + 460);
    }
    else {
      id v167 = -1;
    }
    nw_endpoint_t v171 = v30[8];
    *(_DWORD *)buf = 136447234;
    *(void *)&uint8_t buf[4] = "nw_webtransport_http3_stream_reconfigure_and_start";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v30 + 24;
    *(_WORD *)&_BYTE buf[22] = 2080;
    v344 = (uint64_t)" ";
    *(_WORD *)v345 = 1024;
    *(_DWORD *)&v345[2] = v167;
    *(_WORD *)&v345[6] = 2048;
    *(void *)&v345[8] = v171;
    v172 = "%{public}s %{public}s%s<i%u:s%lld> no http connection metadata when attempting to start webtransport http3 stream";
    goto LABEL_586;
  }

  if ((*((_BYTE *)v30 + 276) & 0x40) == 0) {
    goto LABEL_294;
  }
LABEL_295:
  os_log_type_t v187 = *(void *)(v80 + 32);
  if (!v187)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_to_transport";
    nw_endpoint_t v286 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(aBlock) = 16;
    v339[0] = OS_LOG_TYPE_DEFAULT;
    if (aBlock == 17)
    {
      v287 = (os_log_s *)__nwlog_obj();
      char v288 = aBlock;
      if (!os_log_type_enabled(v287, (os_log_type_t)aBlock)) {
        goto LABEL_578;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_to_transport";
      v289 = "%{public}s called with null transport_protocol";
LABEL_576:
      v315 = v287;
      v316 = v288;
LABEL_577:
      _os_log_impl(&dword_181A5C000, v315, v316, v289, buf, 0xCu);
      goto LABEL_578;
    }

    if (v339[0] == OS_LOG_TYPE_DEFAULT)
    {
      v287 = (os_log_s *)__nwlog_obj();
      char v288 = aBlock;
      if (!os_log_type_enabled(v287, (os_log_type_t)aBlock)) {
        goto LABEL_578;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_to_transport";
      v289 = "%{public}s called with null transport_protocol, backtrace limit exceeded";
      goto LABEL_576;
    }

    v297 = (char *)__nw_create_backtrace_string();
    __int16 v298 = (os_log_s *)__nwlog_obj();
    id v299 = aBlock;
    __int16 v300 = os_log_type_enabled(v298, (os_log_type_t)aBlock);
    if (!v297)
    {
      if (!v300) {
        goto LABEL_578;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_to_transport";
      v289 = "%{public}s called with null transport_protocol, no backtrace";
      goto LABEL_603;
    }

    if (v300)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_add_to_transport";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v297;
      _os_log_impl( &dword_181A5C000,  v298,  v299,  "%{public}s called with null transport_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v297);
LABEL_578:
    if (!v286) {
      goto LABEL_580;
    }
    goto LABEL_579;
  }

  if ((*(_BYTE *)(v80 + 548) & 0x40) != 0)
  {
    v188 = (void *)nw_protocol_get_parameters((uint64_t)v30);
    if (v188)
    {
      os_log_type_t v189 = v188;
      nw_parameters_log_protocol_instances(v188);
      os_log_type_t v190 = v189;
      os_log_type_t v191 = (nw_protocol_stack *)v190[19];

      *(void *)unsigned int v339 = 0LL;
      v340 = v339;
      nw_endpoint_t v341 = 0x2000000000LL;
      nw_endpoint_t v342 = 0;
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3802000000LL;
      v344 = (uint64_t)__Block_byref_object_copy__33539;
      *(void *)v345 = __Block_byref_object_dispose__33540;
      *(void *)&v345[8] = 0LL;
      v345[16] |= 1u;
      aBlock = MEMORY[0x1895F87A8];
      v333 = 0x40000000LL;
      v334 = ___ZL45nw_webtransport_session_add_to_http_messagingP23nw_webtransport_sessionP11nw_protocolS2__block_invoke;
      v335 = &unk_189BBC648;
      v336 = v339;
      int v337 = buf;
      unsigned int v338 = v30;
      nw_protocol_stack_iterate_application_protocols(v191, &aBlock);
      nw_endpoint_t v192 = *(void **)(*(void *)&buf[8] + 40LL);
      if (v192)
      {
        if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
          dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72514);
        }
        BOOL v193 = (id)nw_protocol_copy_http_messaging_definition_definition;
        os_log_type_t v194 = v192;
        v194[2] = v187;

        if (v193) {
          os_release(v193);
        }
        os_log_type_t v195 = (nw_parameters *)nw_protocol_get_parameters(v187);
        if (!v195) {
          goto LABEL_318;
        }
        BOOL v196 = v107;
        nw_endpoint_t v197 = nw_parameters_copy_default_protocol_stack(v195);
        os_log_type_t v198 = nw_parameters_copy_default_protocol_stack((nw_parameters_t)v190);
        BOOL v199 = nw_protocol_stack_copy_transport_protocol(v197);
        os_log_type_t v200 = nw_protocol_stack_copy_transport_protocol(v198);
        nw_endpoint_t v201 = v200;
        if (v199)
        {
          if (v200)
          {
            os_log_type_t v202 = nw_protocol_options_copy_definition(v199);
            if (nw_protocol_options_matches_definition(v201, v202))
            {
              protocol_handle = nw_protocol_options_get_protocol_handle(v199);
              nw_parameters_set_protocol_instance(v201, v204, protocol_handle);
            }

            os_release(v201);
          }

          nw_endpoint_t v201 = v199;
        }

        else if (!v200)
        {
LABEL_314:
          if (v198) {
            os_release(v198);
          }
          int v107 = v196;
          if (v197) {
            os_release(v197);
          }
LABEL_318:
          nw_protocol_set_output_handler((uint64_t)v30, 0LL);
          v205 = nw_protocol_add_input_handler(v187, (uint64_t)v30);
          goto LABEL_319;
        }

        os_release(v201);
        goto LABEL_314;
      }

      v328 = v107;
      __nwlog_obj();
      v353 = 136446210;
      v354 = "nw_webtransport_session_add_to_http_messaging";
      uint64_t v301 = (char *)_os_log_send_and_compose_impl();
      nw_endpoint_t v331 = OS_LOG_TYPE_ERROR;
      v330 = 0;
      if (__nwlog_fault(v301, &v331, &v330))
      {
        if (v331 == OS_LOG_TYPE_FAULT)
        {
          __int16 v302 = (os_log_s *)__nwlog_obj();
          v303 = v331;
          if (os_log_type_enabled(v302, v331))
          {
            v353 = 136446210;
            v354 = "nw_webtransport_session_add_to_http_messaging";
            __int16 v304 = "%{public}s called with null options";
LABEL_596:
            v323 = v302;
            nw_endpoint_t v324 = v303;
LABEL_597:
            _os_log_impl(&dword_181A5C000, v323, v324, v304, (uint8_t *)&v353, 0xCu);
          }
        }

        else if (v330)
        {
          v309 = (char *)__nw_create_backtrace_string();
          __int16 v310 = (os_log_s *)__nwlog_obj();
          id v311 = v331;
          uint64_t v312 = os_log_type_enabled(v310, v331);
          if (v309)
          {
            if (v312)
            {
              v353 = 136446466;
              v354 = "nw_webtransport_session_add_to_http_messaging";
              v355 = 2082;
              v356 = v309;
              _os_log_impl( &dword_181A5C000,  v310,  v311,  "%{public}s called with null options, dumping backtrace:%{public}s",  (uint8_t *)&v353,  0x16u);
            }

            free(v309);
            goto LABEL_598;
          }

          if (v312)
          {
            v353 = 136446210;
            v354 = "nw_webtransport_session_add_to_http_messaging";
            __int16 v304 = "%{public}s called with null options, no backtrace";
            v323 = v310;
            nw_endpoint_t v324 = v311;
            goto LABEL_597;
          }
        }

        else
        {
          __int16 v302 = (os_log_s *)__nwlog_obj();
          v303 = v331;
          if (os_log_type_enabled(v302, v331))
          {
            v353 = 136446210;
            v354 = "nw_webtransport_session_add_to_http_messaging";
            __int16 v304 = "%{public}s called with null options, backtrace limit exceeded";
            goto LABEL_596;
          }
        }
      }

              if (v79) {
                nw_endpoint_t v129 = 0LL;
              }
              else {
                nw_endpoint_t v129 = 5LL;
              }
              __int128 v130 = v99 + v129;
              if (!__CFADD__(v99, (_DWORD)v129))
              {
                BOOL v11 = v89;
                os_log_type_t v14 = v346;
                if (!(_DWORD)v130)
                {
LABEL_237:
                  uint64_t v17 = (char *)nw_frame_unclaimed_bytes(v11, __len);
                  if ((*(_WORD *)(v11 + 204) & 4) != 0)
                  {
                    os_log_type_t v151 = *(_BYTE *)(v11 + 216);
                    *(void *)(v11 + 20_Block_object_dispose(va, 8) = v9;
                    *(_BYTE *)(v11 + 216) = v151 & 0xFC | 1;
                    goto LABEL_43;
                  }

                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  *(_DWORD *)buf = 136446466;
                  v364 = "nw_http1_frame_metadata_reset";
                  v365 = 2048;
                  char v144 = v11;
                  *(void *)v366 = v11;
                  uint64_t v145 = (char *)_os_log_send_and_compose_impl();
                  LOBYTE(__len[1]) = 16;
                  type[0] = OS_LOG_TYPE_DEFAULT;
                  if (LOBYTE(__len[1]) == 17)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    dispatch_time_t v146 = gLogObj;
                    uint64_t v147 = __len[1];
                    if (os_log_type_enabled((os_log_t)gLogObj, __len[1]))
                    {
                      *(_DWORD *)buf = 136446466;
                      v364 = "nw_http1_frame_metadata_reset";
                      v365 = 2048;
                      *(void *)v366 = v11;
                      nw_endpoint_t v148 = (os_log_s *)v146;
                      nw_endpoint_t v149 = v147;
                      os_log_type_t v150 = "%{public}s frame %p has no metadata";
LABEL_252:
                      _os_log_impl(&dword_181A5C000, v148, v149, v150, buf, 0x16u);
                    }
                  }

                  else if (type[0])
                  {
                    os_log_type_t v152 = (char *)__nw_create_backtrace_string();
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    BOOL v153 = (os_log_s *)gLogObj;
                    os_log_type_t v154 = __len[1];
                    id v155 = os_log_type_enabled((os_log_t)gLogObj, __len[1]);
                    if (v152)
                    {
                      if (v155)
                      {
                        *(_DWORD *)buf = 136446722;
                        v364 = "nw_http1_frame_metadata_reset";
                        v365 = 2048;
                        *(void *)v366 = v144;
                        *(_WORD *)&v366[8] = 2082;
                        *(void *)&v366[10] = v152;
                        _os_log_impl( &dword_181A5C000,  v153,  v154,  "%{public}s frame %p has no metadata, dumping backtrace:%{public}s",  buf,  0x20u);
                      }

                      free(v152);
                      id v9 = v348;
                      goto LABEL_253;
                    }

                    id v9 = v348;
                    if (v155)
                    {
                      *(_DWORD *)buf = 136446466;
                      v364 = "nw_http1_frame_metadata_reset";
                      v365 = 2048;
                      *(void *)v366 = v144;
                      nw_endpoint_t v148 = v153;
                      nw_endpoint_t v149 = v154;
                      os_log_type_t v150 = "%{public}s frame %p has no metadata, no backtrace";
                      goto LABEL_252;
                    }
                  }

                  else
                  {
                    os_log_type_t v156 = (os_log_s *)__nwlog_obj();
                    v157 = __len[1];
                    if (os_log_type_enabled(v156, __len[1]))
                    {
                      *(_DWORD *)buf = 136446466;
                      v364 = "nw_http1_frame_metadata_reset";
                      v365 = 2048;
                      *(void *)v366 = v11;
                      nw_endpoint_t v148 = v156;
                      nw_endpoint_t v149 = v157;
                      os_log_type_t v150 = "%{public}s frame %p has no metadata, backtrace limit exceeded";
                      goto LABEL_252;
                    }
                  }

          if (v143) {
            free(v143);
          }
          *(_DWORD *)(v580 + 34_Block_object_dispose(va, 8) = 0;
          __int16 v5 = v579;
          int v4 = v140;
          goto LABEL_215;
        }

        BOOL v98 = v4;
        BOOL v99 = v3;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v100 = *(unsigned int *)(v99 + 340);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = "http1->idle_connections_count";
        *(_WORD *)&_BYTE buf[22] = 2048;
        v608 = 1LL;
        *(_WORD *)v609 = 2048;
        *(void *)&v609[2] = v100;
        nw_endpoint_t v101 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(aBlock) = 0;
        if (__nwlog_fault(v101, type, &aBlock))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v102 = (os_log_s *)__nwlog_obj();
            nw_endpoint_t v103 = type[0];
            if (os_log_type_enabled(v102, type[0]))
            {
              os_log_type_t v104 = *(unsigned int *)(v580 + 340);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = "http1->idle_connections_count";
              *(_WORD *)&_BYTE buf[22] = 2048;
              v608 = 1LL;
              *(_WORD *)v609 = 2048;
              *(void *)&v609[2] = v104;
              uint64_t v105 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_165:
              _os_log_impl(&dword_181A5C000, v102, v103, v105, buf, 0x2Au);
            }
          }

          else if ((_BYTE)aBlock)
          {
            nw_endpoint_t v117 = (char *)__nw_create_backtrace_string();
            os_log_type_t v102 = (os_log_s *)__nwlog_obj();
            nw_endpoint_t v103 = type[0];
            uint64_t v118 = os_log_type_enabled(v102, type[0]);
            if (v117)
            {
              if (v118)
              {
                uint64_t v119 = *(unsigned int *)(v580 + 340);
                *(_DWORD *)buf = 136447234;
                *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "http1->idle_connections_count";
                *(_WORD *)&_BYTE buf[22] = 2048;
                v608 = 1LL;
                *(_WORD *)v609 = 2048;
                *(void *)&v609[2] = v119;
                *(_WORD *)&v609[10] = 2082;
                *(void *)&v609[12] = v117;
                _os_log_impl( &dword_181A5C000,  v102,  v103,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
              }

              free(v117);
              goto LABEL_166;
            }

            if (v118)
            {
              char v127 = *(unsigned int *)(v580 + 340);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = "http1->idle_connections_count";
              *(_WORD *)&_BYTE buf[22] = 2048;
              v608 = 1LL;
              *(_WORD *)v609 = 2048;
              *(void *)&v609[2] = v127;
              uint64_t v105 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
              goto LABEL_165;
            }
          }

          else
          {
            os_log_type_t v102 = (os_log_s *)__nwlog_obj();
            nw_endpoint_t v103 = type[0];
            if (os_log_type_enabled(v102, type[0]))
            {
              int v126 = *(unsigned int *)(v580 + 340);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = "http1->idle_connections_count";
              *(_WORD *)&_BYTE buf[22] = 2048;
              v608 = 1LL;
              *(_WORD *)v609 = 2048;
              *(void *)&v609[2] = v126;
              uint64_t v105 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
              goto LABEL_165;
            }
          }
        }

  if (v85)
  {
    finalizer_context = v85;
    goto LABEL_5;
  }

          if (!v77)
          {
LABEL_214:
            char v6 = &qword_18C45F000;
            BOOL v11 = v90;
            goto LABEL_21;
          }

        if ((*(_WORD *)(a4 + 204) & 4) != 0)
        {
          uint64_t v140 = *(void *)(a4 + 216);
          if (v140)
          {
            nw_endpoint_t v141 = *(void *)(v140 + 56);
            if (v141)
            {
              uint64_t v142 = *(void *)(v141 + 32);
              if (v142)
              {
                int v143 = *(_DWORD *)(v142 + 176);
                v374[0] = a4;
                v374[1] = data_source_read_callback;
                char v144 = *(void *)(a4 + 64);
                if (v144)
                {
                  uint64_t v145 = *(_BYTE *)(v144 + 66);
                  dispatch_time_t v146 = (unsigned __int16 *)(v142 + 188);
                  uint64_t v147 = *(unsigned __int16 *)(v142 + 188) | (*(unsigned __int8 *)(v142 + 190) << 16);
                  if ((v145 & 0x40) != 0)
                  {
                    nw_endpoint_t v148 = (v147 >> 19) & 1;
                    if (!*((_BYTE *)v8 + 1537)) {
                      LOBYTE(v14_Block_object_dispose(va, 8) = 1;
                    }
                    if ((*(_WORD *)(v142 + 188) & 0x200) == 0)
                    {
                      if ((v148 & 1) == 0)
                      {
                        if (__nwlog_connection_log::onceToken != -1) {
                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                        }
                        unsigned int v339 = (os_log_s *)gconnectionLogObj;
                        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
                        {
                          nw_endpoint_t v341 = *(_DWORD *)(v142 + 176);
                          v340 = *(_DWORD *)(v142 + 180);
                          LODWORD(buf[0]) = 136447234;
                          *(void *)((char *)buf + 4) = "nw_http2_submit_data";
                          WORD2(buf[1]) = 2082;
                          *(void *)((char *)&buf[1] + 6) = v142 + 191;
                          HIWORD(buf[2]) = 2080;
                          *(void *)&v370 = " ";
                          WORD4(v370) = 1024;
                          *(_DWORD *)((char *)&v370 + 10) = v340;
                          HIWORD(v370) = 1024;
                          LODWORD(v371[0]) = v341;
                          _os_log_impl( &dword_181A5C000,  v339,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> frame is complete, marking end stream",  (uint8_t *)buf,  0x2Cu);
                        }
                      }

                      goto LABEL_268;
                    }

                    if ((v148 & 1) == 0)
                    {
                      if (__nwlog_connection_log::onceToken != -1) {
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                      }
                      BOOL v163 = (os_log_s *)gconnectionLogObj;
                      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
                      {
                        v343 = *(_DWORD *)(v142 + 176);
                        nw_endpoint_t v342 = *(_DWORD *)(v142 + 180);
                        LODWORD(buf[0]) = 136447234;
                        *(void *)((char *)buf + 4) = "nw_http2_submit_data";
                        WORD2(buf[1]) = 2082;
                        *(void *)((char *)&buf[1] + 6) = v142 + 191;
                        HIWORD(buf[2]) = 2080;
                        *(void *)&v370 = " ";
                        WORD4(v370) = 1024;
                        *(_DWORD *)((char *)&v370 + 10) = v342;
                        HIWORD(v370) = 1024;
                        LODWORD(v371[0]) = v343;
                        id v166 = "%{public}s %{public}s%s<i%u:s%d> stream is in CONNECT mode, not marking end stream";
                        goto LABEL_251;
                      }
                    }

                    goto LABEL_268;
                  }
                }

                else
                {
                  dispatch_time_t v146 = (unsigned __int16 *)(v142 + 188);
                  uint64_t v147 = *(unsigned __int16 *)(v142 + 188) | (*(unsigned __int8 *)(v142 + 190) << 16);
                }

                if ((v147 & 0x80000) == 0 && *((_BYTE *)v8 + 1537))
                {
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                  }
                  BOOL v163 = (os_log_s *)gconnectionLogObj;
                  if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
                  {
                    os_log_type_t v165 = *(_DWORD *)(v142 + 176);
                    id v164 = *(_DWORD *)(v142 + 180);
                    LODWORD(buf[0]) = 136447234;
                    *(void *)((char *)buf + 4) = "nw_http2_submit_data";
                    WORD2(buf[1]) = 2082;
                    *(void *)((char *)&buf[1] + 6) = v142 + 191;
                    HIWORD(buf[2]) = 2080;
                    *(void *)&v370 = " ";
                    WORD4(v370) = 1024;
                    *(_DWORD *)((char *)&v370 + 10) = v164;
                    HIWORD(v370) = 1024;
                    LODWORD(v371[0]) = v165;
                    id v166 = "%{public}s %{public}s%s<i%u:s%d> frame is not complete, not marking end stream";
LABEL_251:
                    _os_log_impl(&dword_181A5C000, v163, OS_LOG_TYPE_DEBUG, v166, (uint8_t *)buf, 0x2Cu);
                  }
                }

LABEL_136:
        __int16 v57 = 0LL;
LABEL_137:

        goto LABEL_138;
      }
    }

    __int16 v57 = 0LL;
    goto LABEL_138;
  }

  if (nexus_instance)
  {
    v19->event = (nw_endpoint_handler_event_s)131075;
    nw_endpoint_handler_report(v19, 0LL, &v19->event.domain, 0LL);
    nw_endpoint_flow_setup_protocols(v19, 0LL, 0LL, (*((unsigned __int8 *)v4 + 32) >> 4) & 1, 0);
    goto LABEL_125;
  }

  if (!v209)
  {
    int minimize_logging = nw_endpoint_handler_get_minimize_logging(v19);
    char logging_disabled = nw_endpoint_handler_get_logging_disabled(v19);
    if (minimize_logging)
    {
      if ((logging_disabled & 1) != 0)
      {
LABEL_125:
        if (_nw_signposts_once == -1)
        {
          if (_nw_signposts_enabled) {
            goto LABEL_127;
          }
        }

        else
        {
          dispatch_once(&_nw_signposts_once, &__block_literal_global_80157);
          if (_nw_signposts_enabled)
          {
LABEL_127:
          }
        }

        uint64_t v110 = 1LL;
        goto LABEL_156;
      }

      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      id v125 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v125, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v190 = nw_endpoint_handler_get_id_string(v19);
        os_log_type_t v191 = nw_endpoint_handler_dry_run_string(v19);
        nw_endpoint_t v192 = nw_endpoint_handler_copy_endpoint(v19);
        BOOL v193 = nw_endpoint_get_logging_description(v192);
        os_log_type_t v194 = nw_endpoint_handler_state_string(v19);
        os_log_type_t v195 = nw_endpoint_handler_mode_string(v19);
        BOOL v196 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v19);
        *(_DWORD *)buf = 136447746;
        nw_endpoint_t v212 = "nw_endpoint_flow_setup_channel";
        __int16 v213 = 2082;
        v214 = (char *)v190;
        __int16 v215 = 2082;
        id v216 = v191;
        __int16 v217 = 2082;
        os_log_type_t v218 = (void *)v193;
        __int16 v219 = 2082;
        v220 = v194;
        __int16 v221 = 2082;
        nw_endpoint_t v222 = v195;
        __int16 v223 = 2114;
        unint64_t v224 = v196;
        _os_log_impl( &dword_181A5C000,  v125,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] already requested nexus, wait",  buf,  0x48u);
      }
    }

    else
    {
      if ((logging_disabled & 1) != 0) {
        goto LABEL_125;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      id v125 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v125, OS_LOG_TYPE_INFO))
      {
        int v126 = nw_endpoint_handler_get_id_string(v19);
        char v127 = nw_endpoint_handler_dry_run_string(v19);
        nw_endpoint_t v128 = nw_endpoint_handler_copy_endpoint(v19);
        nw_endpoint_t v129 = nw_endpoint_get_logging_description(v128);
        __int128 v130 = nw_endpoint_handler_state_string(v19);
        nw_endpoint_t v131 = nw_endpoint_handler_mode_string(v19);
        v132 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v19);
        *(_DWORD *)buf = 136447746;
        nw_endpoint_t v212 = "nw_endpoint_flow_setup_channel";
        __int16 v213 = 2082;
        v214 = (char *)v126;
        __int16 v215 = 2082;
        id v216 = v127;
        __int16 v217 = 2082;
        os_log_type_t v218 = (void *)v129;
        __int16 v219 = 2082;
        v220 = v130;
        __int16 v221 = 2082;
        nw_endpoint_t v222 = v131;
        __int16 v223 = 2114;
        unint64_t v224 = v132;
        _os_log_impl( &dword_181A5C000,  v125,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] already requested nexus, wait",  buf,  0x48u);
      }
    }

LABEL_124:
    os_log_type_t v21 = v205;
    goto LABEL_125;
  }

  id v88 = nw_error_create_posix_error(v209);
  if ((nw_endpoint_handler_get_logging_disabled(v19) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    unsigned int v89 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
    {
      os_log_type_t v200 = v88;
      unint64_t v90 = nw_endpoint_handler_get_id_string(v19);
      uint64_t v91 = nw_endpoint_handler_dry_run_string(v19);
      nw_endpoint_t v92 = nw_endpoint_handler_copy_endpoint(v19);
      uint64_t v93 = nw_endpoint_get_logging_description(v92);
      BOOL v94 = nw_endpoint_handler_state_string(v19);
      BOOL v95 = nw_endpoint_handler_mode_string(v19);
      unsigned int v96 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v19);
      *(_DWORD *)buf = 136448002;
      nw_endpoint_t v212 = "nw_endpoint_flow_setup_channel";
      __int16 v213 = 2082;
      v214 = (char *)v90;
      __int16 v215 = 2082;
      id v216 = v91;
      __int16 v217 = 2082;
      os_log_type_t v218 = (void *)v93;
      __int16 v219 = 2082;
      v220 = v94;
      __int16 v221 = 2082;
      nw_endpoint_t v222 = v95;
      __int16 v223 = 2114;
      unint64_t v224 = v96;
      __int16 v225 = 2112;
      id v88 = v200;
      id v226 = (os_log_s *)v200;
      _os_log_impl( &dword_181A5C000,  v89,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] nexus assignment error %@",  buf,  0x52u);
    }
  }

  if (!*((void *)v4 + 109)) {
    objc_storeStrong((id *)v4 + 109, v88);
  }
  nw_endpoint_flow_failed_with_error(v19, 1, 0LL);

LABEL_113:
  uint64_t v110 = 0LL;
  os_log_type_t v21 = v205;
LABEL_156:

LABEL_157:
  dispatch_time_t v146 = v206;
LABEL_214:

  return v110;
}

            goto LABEL_143;
          }

          if (!v114)
          {
            __nwlog_obj();
            uint64_t v93 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v104 = type;
            if (os_log_type_enabled(v93, type))
            {
              *(_DWORD *)buf = 136446210;
              nw_endpoint_t v117 = "nw_protocol_utilities_add_input_handler";
              _os_log_impl( &dword_181A5C000,  v93,  v104,  "%{public}s called with null input_protocol, backtrace limit exceeded",  buf,  0xCu);
            }

            goto LABEL_136;
          }

          os_log_type_t v97 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          BOOL v98 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          nw_endpoint_t v101 = type;
          os_log_type_t v102 = os_log_type_enabled(v98, type);
          if (v97)
          {
            if (v102)
            {
              *(_DWORD *)buf = 136446466;
              nw_endpoint_t v117 = "nw_protocol_utilities_add_input_handler";
              uint64_t v118 = 2082;
              uint64_t v119 = (uint64_t)v97;
              _os_log_impl( &dword_181A5C000,  v98,  v101,  "%{public}s called with null input_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
            }

                  nw_endpoint_t v103 = (void **)nw_endpoint_handler_register_context_internal(v5, v7, v55);
                  goto LABEL_137;
                }

    if (v40) {
      free(v40);
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v97 = "__nw_frame_set_traffic_class";
    nw_endpoint_t v68 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v94 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v69 = (os_log_s *)__nwlog_obj();
      BOOL v70 = type;
      if (os_log_type_enabled(v69, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v97 = "__nw_frame_set_traffic_class";
        os_log_type_t v71 = "%{public}s called with null frame";
LABEL_151:
        _os_log_impl(&dword_181A5C000, v69, v70, v71, buf, 0xCu);
      }
    }

    else if (v94)
    {
      int v72 = (char *)__nw_create_backtrace_string();
      id v69 = (os_log_s *)__nwlog_obj();
      BOOL v70 = type;
      int v73 = os_log_type_enabled(v69, type);
      if (v72)
      {
        if (v73)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v97 = "__nw_frame_set_traffic_class";
          BOOL v98 = 2082;
          BOOL v99 = v72;
          _os_log_impl( &dword_181A5C000,  v69,  v70,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v72);
        goto LABEL_152;
      }

      if (v73)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v97 = "__nw_frame_set_traffic_class";
        os_log_type_t v71 = "%{public}s called with null frame, no backtrace";
        goto LABEL_151;
      }
    }

    else
    {
      id v69 = (os_log_s *)__nwlog_obj();
      BOOL v70 = type;
      if (os_log_type_enabled(v69, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v97 = "__nw_frame_set_traffic_class";
        os_log_type_t v71 = "%{public}s called with null frame, backtrace limit exceeded";
        goto LABEL_151;
      }
    }

LABEL_137:
        if (!v18)
        {
LABEL_140:

          goto LABEL_141;
        }

        goto LABEL_138;
      }

      if (!v94)
      {
        __nwlog_obj();
        id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v64 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
          _os_log_impl( &dword_181A5C000,  v19,  v64,  "%{public}s received invalid result type, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_136;
      }

      uint64_t v42 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v43 = type;
      BOOL v44 = os_log_type_enabled(v19, type);
      if (!v42)
      {
        if (v44)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
          _os_log_impl(&dword_181A5C000, v19, v43, "%{public}s received invalid result type, no backtrace", buf, 0xCu);
        }

        goto LABEL_136;
      }

      if (v44)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
        BOOL v98 = 2082;
        *(void *)BOOL v99 = v42;
        _os_log_impl( &dword_181A5C000,  v19,  v43,  "%{public}s received invalid result type, dumping backtrace:%{public}s",  buf,  0x16u);
      }

LABEL_137:
        if (!v21)
        {
LABEL_140:
          nw_endpoint_t v46 = 1;
          goto LABEL_141;
        }

        goto LABEL_138;
      }

      if (!v106)
      {
        __nwlog_obj();
        __int16 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v66 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          int v109 = "networkd_privileged_setup_feth_pair";
          _os_log_impl( &dword_181A5C000,  v22,  v66,  "%{public}s received invalid result type, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_136;
      }

      char v47 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v48 = type;
      int v49 = os_log_type_enabled(v22, type);
      if (!v47)
      {
        if (v49)
        {
          *(_DWORD *)buf = 136446210;
          int v109 = "networkd_privileged_setup_feth_pair";
          _os_log_impl(&dword_181A5C000, v22, v48, "%{public}s received invalid result type, no backtrace", buf, 0xCu);
        }

        goto LABEL_136;
      }

      if (v49)
      {
        *(_DWORD *)buf = 136446466;
        int v109 = "networkd_privileged_setup_feth_pair";
        uint64_t v110 = 2082;
        *(void *)id v111 = v47;
        _os_log_impl( &dword_181A5C000,  v22,  v48,  "%{public}s received invalid result type, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v18);
      goto LABEL_137;
    }

    if (!v81)
    {
      __nwlog_obj();
      id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      nw_endpoint_t v60 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
        _os_log_impl( &dword_181A5C000,  v19,  v60,  "%{public}s received invalid result type, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_134;
    }

    BOOL v40 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v41 = type;
    uint64_t v42 = os_log_type_enabled(v19, type);
    if (!v40)
    {
      if (v42)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
        _os_log_impl(&dword_181A5C000, v19, v41, "%{public}s received invalid result type, no backtrace", buf, 0xCu);
      }

      goto LABEL_134;
    }

    if (v42)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
      uint64_t v85 = 2082;
      *(void *)BOOL v86 = v40;
      _os_log_impl( &dword_181A5C000,  v19,  v41,  "%{public}s received invalid result type, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    if (v38) {
      free(v38);
    }
    __int16 v22 = 0LL;
    goto LABEL_44;
  }

  unint64_t v90 = 0LL;
  id v83 = v5;
  if (!nw_txt_record_get_key_data_value(v5, "lcid", &v90))
  {
    __nwlog_obj();
    uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)access_xpc_object_t value = 136446210;
    *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
    uint64_t v42 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v100[0]) = 16;
    LOBYTE(v99) = 0;
    if (__nwlog_fault(v42, v100, &v99))
    {
      if (LOBYTE(v100[0]) == 17)
      {
        __nwlog_obj();
        uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v44 = v100[0];
        if (os_log_type_enabled(v43, v100[0]))
        {
          *(_DWORD *)access_xpc_object_t value = 136446210;
          *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
          _os_log_impl( &dword_181A5C000,  v43,  v44,  "%{public}s called with null nw_txt_record_get_key_data_value(metadata, kIDSKeyLocalCID, &lcid)",  access_value,  0xCu);
        }
      }

      else if ((_BYTE)v99)
      {
        id v62 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v63 = v100[0];
        BOOL v64 = os_log_type_enabled(v43, v100[0]);
        if (v62)
        {
          if (v64)
          {
            *(_DWORD *)access_xpc_object_t value = 136446466;
            *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
            *(_WORD *)&access_value[12] = 2082;
            *(void *)&access_value[14] = v62;
            _os_log_impl( &dword_181A5C000,  v43,  v63,  "%{public}s called with null nw_txt_record_get_key_data_value(metadata, kIDSKeyLocalCID, &lcid), dumping ba cktrace:%{public}s",  access_value,  0x16u);
          }

          free(v62);
          goto LABEL_142;
        }

        if (v64)
        {
          *(_DWORD *)access_xpc_object_t value = 136446210;
          *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
          _os_log_impl( &dword_181A5C000,  v43,  v63,  "%{public}s called with null nw_txt_record_get_key_data_value(metadata, kIDSKeyLocalCID, &lcid), no backtrace",  access_value,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v77 = v100[0];
        if (os_log_type_enabled(v43, v100[0]))
        {
          *(_DWORD *)access_xpc_object_t value = 136446210;
          *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
          _os_log_impl( &dword_181A5C000,  v43,  v77,  "%{public}s called with null nw_txt_record_get_key_data_value(metadata, kIDSKeyLocalCID, &lcid), backtrace limit exceeded",  access_value,  0xCu);
        }
      }
    }

    if (v60) {
      free(v60);
    }
    BOOL v15 = 0xFFFFFFFFLL;
    id v230 = -1;
    if (*(_BYTE *)(v14 + 140) == 2) {
      goto LABEL_147;
    }
    goto LABEL_139;
  }

  __break(1u);
  return result;
}

    goto LABEL_137;
  }

  if (!data)
  {
    __nwlog_obj();
    int v49 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
    char v38 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(aBlock[0]) = 16;
    LOBYTE(v96) = 0;
    if (LOBYTE(aBlock[0]) == 17)
    {
      __nwlog_obj();
      char v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v50 = aBlock[0];
      if (os_log_type_enabled(v39, aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_181A5C000, v39, v50, "%{public}s called with null packet", buf, 0xCu);
      }

  if (v47) {
    free(v47);
  }
LABEL_45:
}

              nw::release_if_needed<nw_protocol *>((uint64_t *)type);
              if (!v19)
              {
LABEL_240:
                id v88 = 0LL;
                nw_endpoint_t v92 = 0LL;
                nw_endpoint_t v101 = 1;
                goto LABEL_241;
              }

          goto LABEL_137;
        }

        if (v65 == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          __int16 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          nw_endpoint_t v60 = type[0];
          if (os_log_type_enabled(v22, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            unsigned int v67 = "__nw_protocol_get_parameters";
            _os_log_impl( &dword_181A5C000,  v22,  v60,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_136;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        __int16 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v55 = type[0];
        BOOL v56 = os_log_type_enabled(v22, type[0]);
        if (!backtrace_string)
        {
          if (v56)
          {
            *(_DWORD *)buf = 136446210;
            unsigned int v67 = "__nw_protocol_get_parameters";
            _os_log_impl(&dword_181A5C000, v22, v55, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
          }

          goto LABEL_136;
        }

        if (v56)
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v67 = "__nw_protocol_get_parameters";
          nw_endpoint_t v68 = 2082;
          id v69 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v22,  v55,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

    free(v37);
    goto LABEL_137;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "operator()";
  os_log_type_t v23 = (char *)_os_log_send_and_compose_impl();
  v132[0] = 16;
  type[0] = OS_LOG_TYPE_DEFAULT;
  if (v132[0] == 17)
  {
    BOOL v24 = (os_log_s *)__nwlog_obj();
    id v25 = v132[0];
    if (!os_log_type_enabled(v24, (os_log_type_t)v132[0])) {
      goto LABEL_120;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "operator()";
    BOOL v26 = "%{public}s called with null response";
    goto LABEL_119;
  }

  if (type[0] == OS_LOG_TYPE_DEFAULT)
  {
    BOOL v24 = (os_log_s *)__nwlog_obj();
    id v25 = v132[0];
    if (!os_log_type_enabled(v24, (os_log_type_t)v132[0])) {
      goto LABEL_120;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "operator()";
    BOOL v26 = "%{public}s called with null response, backtrace limit exceeded";
    goto LABEL_119;
  }

  os_log_type_t v29 = (char *)__nw_create_backtrace_string();
  BOOL v24 = (os_log_s *)__nwlog_obj();
  id v25 = v132[0];
  BOOL v35 = os_log_type_enabled(v24, (os_log_type_t)v132[0]);
  if (!v29)
  {
    if (!v35) {
      goto LABEL_120;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "operator()";
    BOOL v26 = "%{public}s called with null response, no backtrace";
    goto LABEL_119;
  }

  if (v35)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "operator()";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v29;
    __int16 v31 = "%{public}s called with null response, dumping backtrace:%{public}s";
    goto LABEL_71;
  }

      if (!v42)
      {
LABEL_138:

        goto LABEL_139;
      }

    _os_log_impl(&dword_181A5C000, v41, OS_LOG_TYPE_ERROR, v42, buf, 0xCu);
    return 0LL;
  }

  *(void *)os_log_type_t type = 0LL;
  os_log_type_t v45 = v22;
  if (v19 > 0x3F)
  {
    if (v19 >> 14)
    {
      if (v19 >> 30)
      {
        if (v19 >> 62)
        {
          nw_endpoint_t v117 = v13;
          uint64_t v119 = v12;
          nw_endpoint_t v46 = v20;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446466;
          int v126 = "_http_vle_encode";
          char v127 = 2048;
          nw_endpoint_t v128 = v19;
          __int16 v57 = (void *)_os_log_send_and_compose_impl();
          uint64_t result = __nwlog_abort((uint64_t)v57);
          if (result) {
            goto LABEL_318;
          }
          free(v57);
          char v47 = 0LL;
          os_log_type_t v13 = v117;
          nw_endpoint_t v12 = v119;
        }

        else
        {
          nw_endpoint_t v46 = v20;
          *(void *)os_log_type_t type = bswap64(v19 | 0xC000000000000000LL);
          char v47 = 8LL;
        }
      }

      else
      {
        nw_endpoint_t v46 = v20;
        *(void *)os_log_type_t type = bswap32(v19 | 0x80000000);
        char v47 = 4LL;
      }
    }

    else
    {
      nw_endpoint_t v46 = v20;
      *(void *)os_log_type_t type = bswap32(v19 | 0x4000) >> 16;
      char v47 = 2LL;
    }
  }

  else
  {
    nw_endpoint_t v46 = v20;
    *(void *)os_log_type_t type = v19;
    char v47 = 1LL;
  }

  uint64_t v48 = 0LL;
  __n = 0LL;
  if (!*(void *)(a1 + 112))
  {
    uint64_t v48 = nw_http_encrypt_chunked_oblivious_request_header( v11,  v13,  v12,  (char **)(a1 + 112),  (void *)(a1 + 120),  (void *)(a1 + 96),  (size_t *)(a1 + 104),  &__n);
    if (!v48)
    {
      if (v45) {
        free(v45);
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v41 = (os_log_s *)gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
        return 0LL;
      }
      *(_DWORD *)buf = 136446210;
      int v126 = "nw_http_create_oblivious_request";
      uint64_t v42 = "%{public}s Failed to fill out OHTTP header";
      goto LABEL_136;
    }
  }

  unsigned int v122 = 0LL;
  if (!v15)
  {
    nw_endpoint_t v60 = 0LL;
    id v51 = 0LL;
    goto LABEL_100;
  }

  char v59 = nw_http_encrypt_chunked_oblivious_request_chunk( v16,  v15 + v21,  a6,  *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  &v122);
  if (!v59)
  {
    if (v45) {
      free(v45);
    }
    if (v48) {
      free((void *)v48);
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v41 = (os_log_s *)gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return 0LL;
    }
    *(_DWORD *)buf = 136446210;
    int v126 = "nw_http_create_oblivious_request";
    uint64_t v42 = "%{public}s Failed to fill out OHTTP chunk";
    goto LABEL_136;
  }

  id v51 = (void *)v59;
  nw_endpoint_t v60 = v122;
LABEL_100:
  nw_endpoint_t v61 = __n;
  id v62 = __n + v47 + v60;
  __src = 0LL;
  if (v62 > 0x3F)
  {
    if (v62 >> 14)
    {
      if (v62 >> 30)
      {
        if (v62 >> 62)
        {
          BOOL v64 = (os_log_s *)__nwlog_obj();
          os_log_type_enabled(v64, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446466;
          int v126 = "_http_vle_encode";
          char v127 = 2048;
          nw_endpoint_t v128 = v62;
          uint64_t v65 = (void *)_os_log_send_and_compose_impl();
          uint64_t result = __nwlog_abort((uint64_t)v65);
          if (result) {
            goto LABEL_318;
          }
          free(v65);
          os_log_type_t v63 = 0LL;
          nw_endpoint_t v60 = v122;
          nw_endpoint_t v61 = __n;
        }

        else
        {
          __src = bswap64(v62 | 0xC000000000000000LL);
          os_log_type_t v63 = 8LL;
        }
      }

      else
      {
        __src = bswap32(v62 | 0x80000000);
        os_log_type_t v63 = 4LL;
      }
    }

    else
    {
      __src = bswap32(v62 | 0x4000) >> 16;
      os_log_type_t v63 = 2LL;
    }
  }

  else
  {
    __src = __n + v47 + v60;
    os_log_type_t v63 = 1LL;
  }

  id v66 = v47 + a6 + v60 + v63 + v61;
  *nw_endpoint_t v46 = v66;
  if (!v66)
  {
    nw_endpoint_t v82 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v82, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    int v126 = "strict_calloc";
    id v83 = (void *)_os_log_send_and_compose_impl();
    uint64_t result = __nwlog_abort((uint64_t)v83);
    if (result) {
      goto LABEL_318;
    }
    free(v83);
  }

  unsigned int v67 = (char *)calloc(1uLL, v66);
  os_log_type_t v53 = v67;
  if (v67)
  {
    nw_endpoint_t v68 = v67;
    if (!a6)
    {
LABEL_126:
      memcpy(v68, &__src, v63);
      id v69 = &v68[v63];
      memcpy(v69, type, v47);
      BOOL v70 = &v69[v47];
      if (v48)
      {
        os_log_type_t v71 = __n;
        memcpy(v70, (const void *)v48, __n);
        v70 += v71;
      }

      if (v122) {
        memcpy(v70, v51, v122);
      }
      if (!v45) {
        goto LABEL_148;
      }
      int v72 = v45;
LABEL_147:
      free(v72);
LABEL_148:
      if (v48) {
        free((void *)v48);
      }
      if (!v51) {
        return (BOOL)v53;
      }
      int v54 = (unsigned __int8 *)v51;
      goto LABEL_152;
    }

            *(_DWORD *)buf = 136446466;
            nw_endpoint_t v82 = "nw_protocol_http_connect_input_finished";
            id v83 = 2082;
            uint64_t v84 = (void *)v67;
            uint64_t v17 = "%{public}s protocol %{public}s has invalid input_finished callback, no backtrace";
            goto LABEL_137;
          }

          goto LABEL_138;
        }

        nw_endpoint_t v12 = (os_log_s *)__nwlog_obj();
        os_log_type_t v13 = type;
        if (!os_log_type_enabled(v12, type)) {
          goto LABEL_138;
        }
        id v69 = a1->default_input_handler;
        nw_endpoint_t v58 = "invalid";
        if (v69)
        {
          BOOL v70 = v69->identifier;
          if (v70) {
            nw_endpoint_t v58 = (const char *)v70;
          }
        }

      *(_DWORD *)buf = 136446466;
      nw_endpoint_t v117 = "nw_protocol_http_connect_connected";
      uint64_t v118 = 2082;
      uint64_t v119 = (char *)v72;
      __int16 v57 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
      goto LABEL_162;
    }

    goto LABEL_163;
  }

  id v9 = *((_WORD *)handle + 184);
  *((_WORD *)handle + 184) = v9 | 0x10;
  switch(*((_DWORD *)handle + 70))
  {
    case 0:
      if ((v9 & 1) == 0) {
        goto LABEL_79;
      }
      path = nw_protocol_http_connect_get_path((nw_protocol *)(handle + 24));
      if (path)
      {
        BOOL v11 = path;
        nw_endpoint_t v12 = v11->parameters;

        if (v12)
        {
          os_log_type_t v13 = nw_parameters_copy_context(v12);
          if (v13)
          {
            os_log_type_t v14 = v13;
            BOOL v15 = (NWConcrete_nw_path_flow_registration *)nw_path_copy_flow_registration(v13, (uint64_t)(handle + 24));
            if (!v15)
            {
              if ((*((_WORD *)handle + 184) & 0x80) == 0)
              {
                uint64_t v43 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136446722;
                  nw_endpoint_t v117 = "nw_http_connect_keep_path_flow_registration_open";
                  uint64_t v118 = 2082;
                  uint64_t v119 = handle + 284;
                  char v120 = 2080;
                  id v121 = " ";
                  _os_log_impl( &dword_181A5C000,  v43,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sUnable to copy flow registration",  buf,  0x20u);
                }
              }

              goto LABEL_78;
            }

            os_log_type_t v16 = v15;
            uu = 0uLL;
            int v115 = 0;
            if (nw_path_flow_registration_get_nexus_instance(v11, v15, &uu, &v115))
            {
              BOOL v114 = 0;
              nexus_key = nw_path_flow_registration_get_nexus_key(v11, v16, &v114);
              uint64_t v113 = 16LL;
              can_support_user_packet_pool = nw_path_flow_registration_can_support_user_packet_pool(v11, v16);
              else {
                id v19 = 0;
              }
              BYTE4(v113) = v19 | can_support_user_packet_pool;
              int v112 = nexus_key;
              int v20 = nw_channel_create_with_attributes(v14, (unsigned __int8 *)&uu, v115, (uint64_t)&v112);
              if (v20)
              {
                os_log_type_t v21 = (void *)v20;
                nw_channel_set_keep_path_flow_registration_open(v20, v16);
                os_release(v21);
LABEL_77:
                os_release(v16);
LABEL_78:
                os_release(v14);
                os_release(v12);
                goto LABEL_79;
              }

              if ((*((_WORD *)handle + 184) & 0x80) != 0) {
                goto LABEL_77;
              }
              BOOL v44 = (os_log_s *)__nwlog_obj();
              if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
                goto LABEL_77;
              }
              *(_DWORD *)buf = 136446722;
              nw_endpoint_t v117 = "nw_http_connect_keep_path_flow_registration_open";
              uint64_t v118 = 2082;
              uint64_t v119 = handle + 284;
              char v120 = 2080;
              id v121 = " ";
              os_log_type_t v45 = "%{public}s %{public}s%sUnable to get channel";
            }

            else
            {
              if ((*((_WORD *)handle + 184) & 0x80) != 0) {
                goto LABEL_77;
              }
              BOOL v44 = (os_log_s *)__nwlog_obj();
              if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
                goto LABEL_77;
              }
              *(_DWORD *)buf = 136446722;
              nw_endpoint_t v117 = "nw_http_connect_keep_path_flow_registration_open";
              uint64_t v118 = 2082;
              uint64_t v119 = handle + 284;
              char v120 = 2080;
              id v121 = " ";
              os_log_type_t v45 = "%{public}s %{public}s%sUnable to get nexus instance";
            }

            _os_log_impl(&dword_181A5C000, v44, OS_LOG_TYPE_ERROR, v45, buf, 0x20u);
            goto LABEL_77;
          }

          os_release(v12);
          if ((*((_WORD *)handle + 184) & 0x80) == 0)
          {
            uint64_t v37 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446722;
              nw_endpoint_t v117 = "nw_http_connect_keep_path_flow_registration_open";
              uint64_t v118 = 2082;
              uint64_t v119 = handle + 284;
              char v120 = 2080;
              id v121 = " ";
              char v38 = "%{public}s %{public}s%sUnable to get context";
              goto LABEL_66;
            }
          }

    if (!v69) {
      return 0LL;
    }
    BOOL v94 = (char *)v69;
LABEL_138:
    free(v94);
    return 0LL;
  }

  if (CFHTTPMessageIsHeaderComplete(*(CFHTTPMessageRef *)(v8 + 200)))
  {
    uint64_t v17 = CFHTTPMessageCopyHeaderFieldValue(*(CFHTTPMessageRef *)(v8 + 200), @"Content-Length");
    char v18 = v17;
    if (v17) {
      *(_DWORD *)(v8 + 256) = CFStringGetIntValue(v17);
    }
    id v19 = CFHTTPMessageCopyHeaderFieldValue(*(CFHTTPMessageRef *)(v8 + 200), @"Connection");
    if (v19)
    {
      v176.size_t length = CFStringGetLength(@"Close");
      v176.location = 0LL;
      if (CFStringCompareWithOptions(v19, @"Close", v176, 1uLL) == kCFCompareEqualTo) {
        *(_WORD *)(v8 + 368) |= 0x20u;
      }
    }

    int v20 = CFHTTPMessageCopyHeaderFieldValue(*(CFHTTPMessageRef *)(v8 + 200), @"Proxy-Connection");
    if (v20)
    {
      v177.size_t length = CFStringGetLength(@"Close");
      v177.location = 0LL;
      if (CFStringCompareWithOptions(v20, @"Close", v177, 1uLL) == kCFCompareEqualTo) {
        *(_WORD *)(v8 + 368) |= 0x20u;
      }
    }

    if (CFHTTPMessageGetResponseStatusCode(*(CFHTTPMessageRef *)(v8 + 200)) == 200)
    {
      if (*(_DWORD *)(v8 + 256))
      {
        if ((*(_WORD *)(v8 + 368) & 0x80) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v21 = (os_log_s *)gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            __int16 v22 = *(_DWORD *)(v8 + 256);
            *(_DWORD *)buf = 136446978;
            int v168 = "nw_http_connect_append_bytes";
            os_log_type_t v169 = 2082;
            id v170 = (void *)(v8 + 284);
            nw_endpoint_t v171 = 2080;
            v172 = " ";
            nw_endpoint_t v173 = 1024;
            *(_DWORD *)nw_endpoint_t v174 = v22;
            _os_log_impl( &dword_181A5C000,  v21,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sProxy server sent back 200 OK and specified a Content-Length (%d)",  buf,  0x26u);
          }
        }
      }

      *(_DWORD *)(v8 + 256) = 0;
    }

    os_log_type_t v23 = CFHTTPMessageCopyBody(*(CFHTTPMessageRef *)(v8 + 200));
    BOOL v24 = v23;
    if (v23) {
      LODWORD(v23) = CFDataGetLength(v23);
    }
    id v25 = *(_DWORD *)(v8 + 260) + (_DWORD)v23;
    BOOL v26 = *(_DWORD *)(v8 + 256);
    BOOL v27 = __OFSUB__(v25, v26);
    os_log_type_t v28 = v25 - v26;
    os_log_type_t v29 = v28 < 0 == v27;
    *(_DWORD *)(v8 + 260) = v25;
    if (v28 < 0 != v27) {
      os_log_type_t v28 = 0;
    }
    *(_WORD *)(v8 + 36_Block_object_dispose(va, 8) = *(_WORD *)(v8 + 368) & 0xFFFD | (2 * v29);
    *(_DWORD *)(v8 + 264) = v28;
    if (v24) {
      CFRelease(v24);
    }
    if (v20) {
      CFRelease(v20);
    }
    if (v19) {
      CFRelease(v19);
    }
    if (v18) {
      CFRelease(v18);
    }
  }

        if (v94) {
          free(v94);
        }
        *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = -1;
        return;
      }

      if (!(*(_BYTE *)(*(void *)(a1 + 72) + 158LL) & 1 | (gLogDatapath == 0)))
      {
        uint64_t v136 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v136, OS_LOG_TYPE_DEBUG))
        {
          dispatch_time_t v137 = *(void *)(a1 + 72);
          __int16 v138 = (const char *)(v137 + 74);
          BOOL v139 = *(void *)(v137 + 488);
          uint64_t v140 = *(_DWORD *)(*(void *)(v137 + 480) + 372LL);
          nw_endpoint_t v141 = *(_DWORD *)(v137 + 860);
          if (v139) {
            LODWORD(v139) = *(_DWORD *)(v139 + 424);
          }
          *(_DWORD *)buf = 136447746;
          uint64_t v147 = "nw_http1_connection_process_input_frames_block_invoke";
          nw_endpoint_t v148 = 2082;
          nw_endpoint_t v149 = v138;
          os_log_type_t v150 = 2080;
          *(void *)os_log_type_t v151 = " ";
          *(_WORD *)&v151[8] = 1024;
          *(_DWORD *)&v151[10] = v140;
          *(_WORD *)&v151[14] = 1024;
          *(_DWORD *)&v151[16] = v141;
          LOWORD(v152) = 1024;
          *(_DWORD *)((char *)&v152 + 2) = v139;
          HIWORD(v152) = 2048;
          *(void *)BOOL v153 = v16;
          _os_log_impl( &dword_181A5C000,  v136,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> bytes left over after trimming, splitting frame %p",  buf,  0x3Cu);
        }
      }

      *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v16;
      os_log_type_t v16 = nw_frame_split((uint64_t *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL), a3);
      if (v16)
      {
LABEL_97:
        *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = nw_frame_unclaimed_bytes( *(void *)(*(void *)(*(void *)(a1 + 40)
                                                                                              + 8LL)
                                                                                  + 24LL),
                                                                        (_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL)
                                                                                 + 24LL));
        goto LABEL_98;
      }

      if ((*(_BYTE *)(*(void *)(a1 + 72) + 158LL) & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v26 = (os_log_s *)gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          BOOL v27 = *(void *)(a1 + 72);
          os_log_type_t v28 = (const char *)(v27 + 74);
          os_log_type_t v29 = *(void *)(v27 + 488);
          BOOL v30 = *(_DWORD *)(*(void *)(v27 + 480) + 372LL);
          __int16 v31 = *(_DWORD *)(v27 + 860);
          if (v29) {
            LODWORD(v29) = *(_DWORD *)(v29 + 424);
          }
          nw_endpoint_t v32 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
          *(_DWORD *)buf = 136448002;
          uint64_t v147 = "nw_http1_connection_process_input_frames_block_invoke";
          nw_endpoint_t v148 = 2082;
          nw_endpoint_t v149 = v28;
          os_log_type_t v150 = 2080;
          *(void *)os_log_type_t v151 = " ";
          *(_WORD *)&v151[8] = 1024;
          *(_DWORD *)&v151[10] = v30;
          *(_WORD *)&v151[14] = 1024;
          *(_DWORD *)&v151[16] = v31;
          LOWORD(v152) = 1024;
          *(_DWORD *)((char *)&v152 + 2) = v29;
          HIWORD(v152) = 2048;
          *(void *)BOOL v153 = v32;
          *(_WORD *)&v153[8] = 1024;
          *(_DWORD *)&v153[10] = a3;
          _os_log_impl( &dword_181A5C000,  v26,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:c%u:s%u> failed to split frame %p at offset %u",  buf,  0x42u);
        }
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      uint64_t v147 = "nw_http1_connection_process_input_frames_block_invoke";
      BOOL v33 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v144 = 0;
      if (__nwlog_fault(v33, &type, &v144))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v34 = (os_log_s *)gLogObj;
          BOOL v35 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_95;
          }
          *(_DWORD *)buf = 136446210;
          uint64_t v147 = "nw_http1_connection_process_input_frames_block_invoke";
          uint64_t v36 = "%{public}s nw_frame_split with partial frame failed";
          goto LABEL_94;
        }

        if (!v144)
        {
          os_log_type_t v34 = (os_log_s *)__nwlog_obj();
          BOOL v35 = type;
          if (!os_log_type_enabled(v34, type)) {
            goto LABEL_95;
          }
          *(_DWORD *)buf = 136446210;
          uint64_t v147 = "nw_http1_connection_process_input_frames_block_invoke";
          uint64_t v36 = "%{public}s nw_frame_split with partial frame failed, backtrace limit exceeded";
          goto LABEL_94;
        }

        uint64_t v50 = (char *)__nw_create_backtrace_string();
        os_log_type_t v34 = (os_log_s *)__nwlog_obj();
        BOOL v35 = type;
        id v51 = os_log_type_enabled(v34, type);
        if (v50)
        {
          if (v51)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v147 = "nw_http1_connection_process_input_frames_block_invoke";
            nw_endpoint_t v148 = 2082;
            nw_endpoint_t v149 = v50;
            _os_log_impl( &dword_181A5C000,  v34,  v35,  "%{public}s nw_frame_split with partial frame failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v50);
          goto LABEL_95;
        }

        if (v51)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v147 = "nw_http1_connection_process_input_frames_block_invoke";
          uint64_t v36 = "%{public}s nw_frame_split with partial frame failed, no backtrace";
LABEL_94:
          _os_log_impl(&dword_181A5C000, v34, v35, v36, buf, 0xCu);
        }
      }

          if (!v97) {
            goto LABEL_138;
          }
          goto LABEL_137;
        }

        __nwlog_obj();
        int v112 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(buf[0]) = 136446210;
        *(void *)((char *)buf + 4) = "nw_service_connector_add_active_outgoing_request";
        os_log_type_t v97 = (void *)_os_log_send_and_compose_impl();

        type[0] = 16;
        nw_endpoint_t v131 = OS_LOG_TYPE_DEFAULT;
        if (type[0] == 17)
        {
          __nwlog_obj();
          uint64_t v110 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v113 = type[0];
          if (os_log_type_enabled(v110, (os_log_type_t)type[0]))
          {
            LODWORD(buf[0]) = 136446210;
            *(void *)((char *)buf + 4) = "nw_service_connector_add_active_outgoing_request";
            _os_log_impl( &dword_181A5C000,  v110,  v113,  "%{public}s called with null serviceConnector->activeOutgoingRequests",  (uint8_t *)buf,  0xCu);
          }

        BYTE1(v10[1].super.isa) |= 0x10u;
        if ((v35 & 2) == 0)
        {
LABEL_77:
          if ((v35 & 0x10) == 0) {
            goto LABEL_78;
          }
          goto LABEL_138;
        }

                  free(v69);
                  goto LABEL_137;
                }

                if (v75)
                {
                  *(_DWORD *)buf = 136447490;
                  nw_endpoint_t v171 = "nw_necp_append_tlv";
                  v172 = 2048;
                  *(void *)nw_endpoint_t v173 = v35;
                  *(_WORD *)&v173[8] = 2048;
                  *(void *)&v173[10] = __n + 5;
                  *(_WORD *)&v173[18] = 2048;
                  *(void *)nw_endpoint_t v174 = v22;
                  *(_WORD *)&v174[8] = 1024;
                  *(_DWORD *)v175 = 102;
                  *(_WORD *)&v175[4] = 1024;
                  *(_DWORD *)&v175[6] = v161;
                  _os_log_impl( &dword_181A5C000,  v73,  v74,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace",  buf,  0x36u);
                }

LABEL_135:
                if (!v69) {
                  goto LABEL_137;
                }
                goto LABEL_136;
              }

              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              BOOL v70 = (os_log_s *)(id)gLogObj;
              uint64_t v76 = type;
              if (os_log_type_enabled(v70, type))
              {
                *(_DWORD *)buf = 136447490;
                nw_endpoint_t v171 = "nw_necp_append_tlv";
                v172 = 2048;
                *(void *)nw_endpoint_t v173 = v35;
                *(_WORD *)&v173[8] = 2048;
                *(void *)&v173[10] = a5 + 5LL;
                *(_WORD *)&v173[18] = 2048;
                *(void *)nw_endpoint_t v174 = v22;
                *(_WORD *)&v174[8] = 1024;
                *(_DWORD *)v175 = 102;
                *(_WORD *)&v175[4] = 1024;
                *(_DWORD *)&v175[6] = a5;
                _os_log_impl( &dword_181A5C000,  v70,  v76,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded",  buf,  0x36u);
              }
            }

            goto LABEL_135;
          }

          *(_BYTE *)BOOL v35 = 102;
          *(_DWORD *)(v35 + 1) = a5;
          memcpy((void *)(v35 + 5), a4, a5);
          v35 += a5 + 5LL;
          uint64_t v50 = v15;
          int v49 = v164;
          if (!v164) {
            goto LABEL_138;
          }
LABEL_72:
          BOOL v35 = nw_path_evaluator_add_endpoint_to_necp_message(v49, 200, v35, v22, 7);
          if (!v50) {
            goto LABEL_73;
          }
          goto LABEL_139;
        }

        __nwlog_obj();
        nw_endpoint_t v117 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136447234;
        nw_endpoint_t v171 = "nw_necp_append_tlv";
        v172 = 2048;
        *(void *)nw_endpoint_t v173 = v35;
        *(_WORD *)&v173[8] = 2048;
        *(void *)&v173[10] = v22;
        *(_WORD *)&v173[18] = 1024;
        *(_DWORD *)nw_endpoint_t v174 = 102;
        *(_WORD *)&v174[4] = 1024;
        *(_DWORD *)&v174[6] = a5;
        uint64_t v118 = (const char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        os_log_type_t v165 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          uint64_t v119 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          char v120 = type;
          if (os_log_type_enabled(v119, type))
          {
            *(_DWORD *)buf = 136447234;
            nw_endpoint_t v171 = "nw_necp_append_tlv";
            v172 = 2048;
            *(void *)nw_endpoint_t v173 = v35;
            *(_WORD *)&v173[8] = 2048;
            *(void *)&v173[10] = v22;
            *(_WORD *)&v173[18] = 1024;
            *(_DWORD *)nw_endpoint_t v174 = 102;
            *(_WORD *)&v174[4] = 1024;
            *(_DWORD *)&v174[6] = a5;
            _os_log_impl( &dword_181A5C000,  v119,  v120,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u",  buf,  0x2Cu);
          }
        }

        else
        {
          if (v165)
          {
            uint64_t v140 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            nw_endpoint_t v141 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            uint64_t v142 = type;
            int v143 = os_log_type_enabled(v141, type);
            if (v140)
            {
              if (v143)
              {
                *(_DWORD *)buf = 136447490;
                nw_endpoint_t v171 = "nw_necp_append_tlv";
                v172 = 2048;
                *(void *)nw_endpoint_t v173 = v35;
                *(_WORD *)&v173[8] = 2048;
                *(void *)&v173[10] = v22;
                *(_WORD *)&v173[18] = 1024;
                *(_DWORD *)nw_endpoint_t v174 = 102;
                *(_WORD *)&v174[4] = 1024;
                *(_DWORD *)&v174[6] = v161;
                *(_WORD *)v175 = 2082;
                *(void *)&v175[2] = v140;
                _os_log_impl( &dword_181A5C000,  v141,  v142,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s",  buf,  0x36u);
              }

              free(v140);
            }

            else
            {
              if (v143)
              {
                *(_DWORD *)buf = 136447234;
                nw_endpoint_t v171 = "nw_necp_append_tlv";
                v172 = 2048;
                *(void *)nw_endpoint_t v173 = v35;
                *(_WORD *)&v173[8] = 2048;
                *(void *)&v173[10] = v22;
                *(_WORD *)&v173[18] = 1024;
                *(_DWORD *)nw_endpoint_t v174 = 102;
                *(_WORD *)&v174[4] = 1024;
                *(_DWORD *)&v174[6] = v161;
                _os_log_impl( &dword_181A5C000,  v141,  v142,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace",  buf,  0x2Cu);
              }
            }

            goto LABEL_331;
          }

          __nwlog_obj();
          uint64_t v119 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v157 = type;
          if (os_log_type_enabled(v119, type))
          {
            *(_DWORD *)buf = 136447234;
            nw_endpoint_t v171 = "nw_necp_append_tlv";
            v172 = 2048;
            *(void *)nw_endpoint_t v173 = v35;
            *(_WORD *)&v173[8] = 2048;
            *(void *)&v173[10] = v22;
            *(_WORD *)&v173[18] = 1024;
            *(_DWORD *)nw_endpoint_t v174 = 102;
            *(_WORD *)&v174[4] = 1024;
            *(_DWORD *)&v174[6] = a5;
            _os_log_impl( &dword_181A5C000,  v119,  v157,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded",  buf,  0x2Cu);
          }
        }

LABEL_331:
        id v51 = v163;
        if (!v118) {
          goto LABEL_334;
        }
        os_log_type_t v159 = (char *)v118;
LABEL_333:
        free(v159);
LABEL_334:
        BOOL v35 = 0LL;
        uint64_t v50 = v15;
        int v49 = v164;
        if (!v164) {
          goto LABEL_138;
        }
        goto LABEL_72;
      }

      __nwlog_obj();
      int v107 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      nw_endpoint_t v171 = "nw_necp_append_tlv";
      os_log_type_t v104 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v165 = 0;
      if (__nwlog_fault(v104, &type, &v165))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          uint64_t v105 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          char v108 = type;
          if (os_log_type_enabled(v105, type))
          {
            *(_DWORD *)buf = 136446210;
            nw_endpoint_t v171 = "nw_necp_append_tlv";
            _os_log_impl(&dword_181A5C000, v105, v108, "%{public}s called with null beyond", buf, 0xCu);
          }

    if (v42) {
      free(v42);
    }
LABEL_12:
    *((void *)handle + _Block_object_dispose(va, 8) = 0LL;
    handle[130] = 0;
    lsqpack_enc_cleanup((uint64_t)(handle + 256));
    *((_OWORD *)handle + 20) = 0u;
    *((_OWORD *)handle + 21) = 0u;
    *((_OWORD *)handle + 22) = 0u;
    *((_OWORD *)handle + 23) = 0u;
    *((_OWORD *)handle + 29) = 0u;
    *((_OWORD *)handle + 30) = 0u;
    *((_OWORD *)handle + 27) = 0u;
    *((_OWORD *)handle + 2_Block_object_dispose(va, 8) = 0u;
    *((_OWORD *)handle + 25) = 0u;
    *((_OWORD *)handle + 26) = 0u;
    *((_OWORD *)handle + 24) = 0u;
    *((_OWORD *)handle + 1_Block_object_dispose(va, 8) = 0u;
    *((_OWORD *)handle + 19) = 0u;
    *((_OWORD *)handle + 16) = 0u;
    *((_OWORD *)handle + 17) = 0u;
    *((void *)handle + 40) = handle + 312;
    *((void *)handle + 43) = handle + 336;
    *((void *)handle + 45) = handle + 352;
    *((void *)handle + 47) = handle + 368;
    lsqpack_dec_cleanup((uint64_t)(handle + 496));
    *((_OWORD *)handle + 51) = 0u;
    *((_OWORD *)handle + 52) = 0u;
    *((_OWORD *)handle + 49) = 0u;
    *((_OWORD *)handle + 50) = 0u;
    *((_OWORD *)handle + 47) = 0u;
    *((_OWORD *)handle + 4_Block_object_dispose(va, 8) = 0u;
    *((_OWORD *)handle + 45) = 0u;
    *((_OWORD *)handle + 46) = 0u;
    *((_OWORD *)handle + 43) = 0u;
    *((_OWORD *)handle + 44) = 0u;
    *((_OWORD *)handle + 41) = 0u;
    *((_OWORD *)handle + 42) = 0u;
    *((_OWORD *)handle + 39) = 0u;
    *((_OWORD *)handle + 40) = 0u;
    *((_OWORD *)handle + 37) = 0u;
    *((_OWORD *)handle + 3_Block_object_dispose(va, 8) = 0u;
    *((_OWORD *)handle + 35) = 0u;
    *((_OWORD *)handle + 36) = 0u;
    *((_OWORD *)handle + 33) = 0u;
    *((_OWORD *)handle + 34) = 0u;
    *((_OWORD *)handle + 31) = 0u;
    *((_OWORD *)handle + 32) = 0u;
    *(void *)(handle + 500) = 0x3FFF00003FFFLL;
    *((int32x2_t *)handle + 66) = vdup_n_s32(0x3FDu);
    *((void *)handle + 64) = 0x1FF00000064LL;
    *((void *)handle + 67) = &nw_qpack_dec_callbacks;
    *((void *)handle + 73) = handle + 576;
    *((void *)handle + 75) = handle + 592;
    *((void *)handle + 77) = handle + 608;
    *((void *)handle + 79) = handle + 624;
    *((void *)handle + 81) = handle + 640;
    *((void *)handle + 83) = handle + 656;
    *((void *)handle + 85) = handle + 672;
    *((void *)handle + 87) = handle + 688;
    *((void *)handle + 89) = handle + 704;
    BOOL v11 = *((void *)handle + 114);
    if (v11)
    {
      nw_endpoint_t v12 = (void *)(v11 + 560);
      os_log_type_t v13 = *(void *)(v11 + 560);
      if (v13)
      {
        do
        {
          os_log_type_t v14 = v13;
          BOOL v15 = (void *)(v13 + 560);
          *(void *)(v13 + 56_Block_object_dispose(va, 8) = *(void *)(v11 + 568);
          **(void **)(v11 + 56_Block_object_dispose(va, 8) = v13;
          os_log_s *v12 = 0LL;
          v12[1] = 0LL;
          os_log_type_t v13 = *(void *)(v13 + 560);
          nw_endpoint_t v12 = v15;
          BOOL v11 = v14;
        }

        while (v13);
      }

      else
      {
        os_log_type_t v14 = *((void *)handle + 114);
        BOOL v15 = (void *)(v11 + 560);
      }

      os_log_type_t v16 = *(void **)(v14 + 568);
      *((void *)handle + 115) = v16;
      *os_log_type_t v16 = 0LL;
      unsigned int *v15 = 0LL;
      v15[1] = 0LL;
    }

    uint64_t v17 = *((void *)handle + 116);
    if (v17)
    {
      char v18 = (void *)(v17 + 576);
      id v19 = *(void *)(v17 + 576);
      if (v19)
      {
        do
        {
          int v20 = v19;
          os_log_type_t v21 = (void *)(v19 + 576);
          *(void *)(v19 + 584) = *(void *)(v17 + 584);
          **(void **)(v17 + 584) = v19;
          *char v18 = 0LL;
          v18[1] = 0LL;
          id v19 = *(void *)(v19 + 576);
          char v18 = v21;
          uint64_t v17 = v20;
        }

        while (v19);
      }

      else
      {
        int v20 = *((void *)handle + 116);
        os_log_type_t v21 = (void *)(v17 + 576);
      }

      __int16 v22 = *(void **)(v20 + 584);
      *((void *)handle + 117) = v22;
      *__int16 v22 = 0LL;
      *os_log_type_t v21 = 0LL;
      v21[1] = 0LL;
    }

    os_log_type_t v23 = *((void *)handle + 118);
    if (v23)
    {
      BOOL v24 = (void *)(v23 + 592);
      id v25 = *(void *)(v23 + 592);
      if (v25)
      {
        do
        {
          BOOL v26 = v25;
          BOOL v27 = (void *)(v25 + 592);
          *(void *)(v25 + 600) = *(void *)(v23 + 600);
          **(void **)(v23 + 600) = v25;
          *BOOL v24 = 0LL;
          v24[1] = 0LL;
          id v25 = *(void *)(v25 + 592);
          BOOL v24 = v27;
          os_log_type_t v23 = v26;
        }

        while (v25);
      }

      else
      {
        BOOL v26 = *((void *)handle + 118);
        BOOL v27 = (void *)(v23 + 592);
      }

      os_log_type_t v28 = *(void **)(v26 + 600);
      *((void *)handle + 119) = v28;
      NWConcrete_nw_endpoint_handler *v28 = 0LL;
      *BOOL v27 = 0LL;
      v27[1] = 0LL;
    }

    *((_OWORD *)handle + 62) = 0u;
    *((void *)handle + 126) = -1LL;
    os_log_type_t v29 = *((void *)handle + 132);
    if (!v29)
    {
LABEL_36:
      BOOL v33 = *((void *)handle + 134);
      if (!v33)
      {
LABEL_42:
        uint64_t v37 = (dispatch_object_s *)*((void *)handle + 150);
        if (v37)
        {
          dispatch_release(v37);
          *((void *)handle + 150) = 0LL;
        }

        *((_DWORD *)handle + 31_Block_object_dispose(va, 8) = 0;
        *((void *)handle + 122) = 0LL;
        *((_WORD *)handle + 642) = 0;
        *((void *)handle + 12_Block_object_dispose(va, 8) = 0LL;
        char v38 = (*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0xCF966F;
        *v4 &= 0x966Fu;
        handle[1375] = BYTE2(v38);
        nw_protocol_set_output_handler((uint64_t)a1, (uint64_t)output_handler);
        nw_http3_setup_connection_if_needed((uint64_t)handle);
        return;
      }

      os_log_type_t v34 = *(void *)(v33 + 32);
      if (v34)
      {
        BOOL v35 = *(void *)(v34 + 24);
        if (v35)
        {
          uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
          if (v36)
          {
            v36(v34, v33);
LABEL_41:
            nw_protocol_http3_uni_stream_destroy(*((void *)handle + 134));
            *((void *)handle + 134) = 0LL;
            goto LABEL_42;
          }
        }
      }

      __nwlog_obj();
      uint64_t v65 = *(void *)(*((void *)handle + 134) + 32LL);
      id v66 = "invalid";
      if (v65)
      {
        unsigned int v67 = *(const char **)(v65 + 16);
        if (v67) {
          id v66 = v67;
        }
      }

      *(_DWORD *)buf = 136446466;
      int v115 = "nw_http3_reset";
      nw_endpoint_t v116 = 2082;
      nw_endpoint_t v117 = (char *)v66;
      nw_endpoint_t v68 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      int v112 = 0;
      if (__nwlog_fault(v68, &type, &v112))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          id v69 = (os_log_s *)__nwlog_obj();
          BOOL v70 = type;
          if (!os_log_type_enabled(v69, type)) {
            goto LABEL_169;
          }
          os_log_type_t v71 = *(void *)(*((void *)handle + 134) + 32LL);
          int v72 = "invalid";
          if (v71)
          {
            int v73 = *(const char **)(v71 + 16);
            if (v73) {
              int v72 = v73;
            }
          }

          *(_DWORD *)buf = 136446466;
          int v115 = "nw_http3_reset";
          nw_endpoint_t v116 = 2082;
          nw_endpoint_t v117 = (char *)v72;
          char v74 = "%{public}s protocol %{public}s has invalid remove_input_handler callback";
          goto LABEL_168;
        }

        if (!v112)
        {
          id v69 = (os_log_s *)__nwlog_obj();
          BOOL v70 = type;
          if (!os_log_type_enabled(v69, type)) {
            goto LABEL_169;
          }
          nw_endpoint_t v103 = *(void *)(*((void *)handle + 134) + 32LL);
          os_log_type_t v104 = "invalid";
          if (v103)
          {
            uint64_t v105 = *(const char **)(v103 + 16);
            if (v105) {
              os_log_type_t v104 = v105;
            }
          }

          *(_DWORD *)buf = 136446466;
          int v115 = "nw_http3_reset";
          nw_endpoint_t v116 = 2082;
          nw_endpoint_t v117 = (char *)v104;
          char v74 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, backtrace limit exceeded";
          goto LABEL_168;
        }

        unsigned int v89 = (char *)__nw_create_backtrace_string();
        id v69 = (os_log_s *)__nwlog_obj();
        BOOL v70 = type;
        unint64_t v90 = os_log_type_enabled(v69, type);
        if (v89)
        {
          if (v90)
          {
            uint64_t v91 = *(void *)(*((void *)handle + 134) + 32LL);
            nw_endpoint_t v92 = "invalid";
            if (v91)
            {
              uint64_t v93 = *(const char **)(v91 + 16);
              if (v93) {
                nw_endpoint_t v92 = v93;
              }
            }

            *(_DWORD *)buf = 136446722;
            int v115 = "nw_http3_reset";
            nw_endpoint_t v116 = 2082;
            nw_endpoint_t v117 = (char *)v92;
            uint64_t v118 = 2082;
            uint64_t v119 = v89;
            _os_log_impl( &dword_181A5C000,  v69,  v70,  "%{public}s protocol %{public}s has invalid remove_input_handler callback, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v89);
          goto LABEL_169;
        }

        if (v90)
        {
          int v109 = *(void *)(*((void *)handle + 134) + 32LL);
          uint64_t v110 = "invalid";
          if (v109)
          {
            id v111 = *(const char **)(v109 + 16);
            if (v111) {
              uint64_t v110 = v111;
            }
          }

          *(_DWORD *)buf = 136446466;
          int v115 = "nw_http3_reset";
          nw_endpoint_t v116 = 2082;
          nw_endpoint_t v117 = (char *)v110;
          char v74 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, no backtrace";
LABEL_168:
          _os_log_impl(&dword_181A5C000, v69, v70, v74, buf, 0x16u);
        }
      }

    if (!v68)
    {
LABEL_138:
      id v19 = 0LL;
      char v18 = v174;
      uint64_t v36 = v175;
      BOOL v15 = v172;
      goto LABEL_139;
    }

    free(backtrace_string);
    goto LABEL_186;
  }

  cchpke_params_x25519_AESGCM128_HKDF_SHA256();
  BOOL v11 = cchpke_params_sizeof_aead_key();
  nw_endpoint_t v12 = cchpke_params_sizeof_aead_nonce();
  char v74 = cchpke_params_sizeof_aead_tag();
  if (v11 <= v12) {
    os_log_type_t v13 = v12;
  }
  else {
    os_log_type_t v13 = v11;
  }
  if (!v13)
  {
    char v39 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v39, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "strict_calloc";
    BOOL v40 = (void *)_os_log_send_and_compose_impl();
    uint64_t result = __nwlog_abort((uint64_t)v40);
    if (result) {
      goto LABEL_192;
    }
    free(v40);
  }

  os_log_type_t v14 = (char *)calloc(1uLL, v13);
  if (!v14)
  {
    uint64_t v41 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v41, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136446722;
    *(void *)&__str[4] = "strict_calloc";
    *(_WORD *)&__str[12] = 2048;
    *(void *)&__str[14] = 1LL;
    *(_WORD *)&__str[22] = 2048;
    *(void *)&__str[24] = v13;
    int v72 = (void *)_os_log_send_and_compose_impl();
    uint64_t result = __nwlog_abort((uint64_t)v72);
    if (result) {
      goto LABEL_192;
    }
    free(v72);
  }

  unint64_t v90 = 0u;
  uint64_t v91 = 0u;
  id v88 = 0u;
  unsigned int v89 = 0u;
  BOOL v86 = 0u;
  BOOL v87 = 0u;
  uint64_t v84 = 0u;
  uint64_t v85 = 0u;
  nw_endpoint_t v82 = 0u;
  id v83 = 0u;
  nw_endpoint_t v80 = 0u;
  __int16 v81 = 0u;
  BOOL v78 = 0u;
  nw_endpoint_t v79 = 0u;
  memset(__str, 0, sizeof(__str));
  snprintf(__str, 0x100uLL, "%s response", a3);
  strlen(__str);
  BOOL v15 = cchpke_responder_export();
  if (v15)
  {
    os_log_type_t v16 = v15;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v17 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      buf = 136446466;
      uint64_t v93 = "nw_http_encrypt_oblivious_response";
      BOOL v94 = 1024;
      LODWORD(v95) = v16;
      _os_log_impl(&dword_181A5C000, v17, OS_LOG_TYPE_ERROR, "%{public}s Export error: %d", (uint8_t *)&buf, 0x12u);
    }

    if (!v14) {
      return 0LL;
    }
    char v18 = v14;
    goto LABEL_63;
  }

  if (!(v13 + a2 + v74))
  {
    nw_endpoint_t v52 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v52, OS_LOG_TYPE_ERROR);
    buf = 136446210;
    uint64_t v93 = "strict_calloc";
    os_log_type_t v53 = (void *)_os_log_send_and_compose_impl();
    uint64_t result = __nwlog_abort((uint64_t)v53);
    if (result) {
      goto LABEL_192;
    }
    free(v53);
  }

  id v19 = calloc(1uLL, v13 + a2 + v74);
  if (!v19)
  {
    int v54 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v54, OS_LOG_TYPE_ERROR);
    buf = 136446722;
    uint64_t v93 = "strict_calloc";
    BOOL v94 = 2048;
    BOOL v95 = 1LL;
    unsigned int v96 = 2048;
    os_log_type_t v97 = v13 + a2 + v74;
    char v55 = (void *)_os_log_send_and_compose_impl();
    uint64_t result = __nwlog_abort((uint64_t)v55);
    if (result) {
      goto LABEL_192;
    }
    free(v55);
  }

  arc4random_buf(v19, v13);
  if (!(v13 + a7))
  {
    BOOL v56 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v56, OS_LOG_TYPE_ERROR);
    buf = 136446210;
    uint64_t v93 = "strict_calloc";
    __int16 v57 = (void *)_os_log_send_and_compose_impl();
    uint64_t result = __nwlog_abort((uint64_t)v57);
    if (result) {
      goto LABEL_192;
    }
    free(v57);
  }

  int v20 = (char *)calloc(1uLL, v13 + a7);
  if (!v20)
  {
    nw_endpoint_t v58 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v58, OS_LOG_TYPE_ERROR);
    buf = 136446722;
    uint64_t v93 = "strict_calloc";
    BOOL v94 = 2048;
    BOOL v95 = 1LL;
    unsigned int v96 = 2048;
    os_log_type_t v97 = v13 + a7;
    os_log_type_t v71 = (void *)_os_log_send_and_compose_impl();
    uint64_t result = __nwlog_abort((uint64_t)v71);
    if (result) {
      goto LABEL_192;
    }
    free(v71);
  }

  memcpy(v20, a6, a7);
  memcpy(&v20[a7], v19, v13);
  os_log_type_t v21 = cchpke_params_sizeof_kdf_hash();
  if (!v21)
  {
    char v59 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v59, OS_LOG_TYPE_ERROR);
    buf = 136446210;
    uint64_t v93 = "strict_calloc";
    nw_endpoint_t v60 = (void *)_os_log_send_and_compose_impl();
    uint64_t result = __nwlog_abort((uint64_t)v60);
    if (result) {
      goto LABEL_192;
    }
    free(v60);
  }

  __int16 v22 = calloc(1uLL, v21);
  if (!v22)
  {
    nw_endpoint_t v61 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v61, OS_LOG_TYPE_ERROR);
    buf = 136446722;
    uint64_t v93 = "strict_calloc";
    BOOL v94 = 2048;
    BOOL v95 = 1LL;
    unsigned int v96 = 2048;
    os_log_type_t v97 = v21;
    id v62 = (void *)_os_log_send_and_compose_impl();
    uint64_t result = __nwlog_abort((uint64_t)v62);
    if (result) {
      goto LABEL_192;
    }
    free(v62);
  }

  ccsha256_di();
  os_log_type_t v23 = cchkdf_extract();
  if (v20) {
    free(v20);
  }
  if (v14) {
    free(v14);
  }
  if (v23)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v24 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      buf = 136446466;
      uint64_t v93 = "nw_http_encrypt_oblivious_response";
      BOOL v94 = 1024;
      LODWORD(v95) = v23;
      _os_log_impl(&dword_181A5C000, v24, OS_LOG_TYPE_ERROR, "%{public}s Extract error: %d", (uint8_t *)&buf, 0x12u);
    }

    if (v22) {
      free(v22);
    }
LABEL_61:
    if (!v19) {
      return (BOOL)v19;
    }
    char v18 = (char *)v19;
    goto LABEL_63;
  }

  if (!v11)
  {
    os_log_type_t v63 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v63, OS_LOG_TYPE_ERROR);
    buf = 136446210;
    uint64_t v93 = "strict_calloc";
    BOOL v64 = (void *)_os_log_send_and_compose_impl();
    uint64_t result = __nwlog_abort((uint64_t)v64);
    if (result) {
      goto LABEL_192;
    }
    free(v64);
  }

  id v25 = calloc(1uLL, v11);
  if (!v25)
  {
    uint64_t v65 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v65, OS_LOG_TYPE_ERROR);
    buf = 136446722;
    uint64_t v93 = "strict_calloc";
    BOOL v94 = 2048;
    BOOL v95 = 1LL;
    unsigned int v96 = 2048;
    os_log_type_t v97 = v11;
    id v66 = (void *)_os_log_send_and_compose_impl();
    uint64_t result = __nwlog_abort((uint64_t)v66);
    if (result) {
      goto LABEL_192;
    }
    free(v66);
  }

  BOOL v26 = cchkdf_expand();
  if (v26)
  {
    BOOL v27 = v26;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v28 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      buf = 136446466;
      uint64_t v93 = "nw_http_encrypt_oblivious_response";
      BOOL v94 = 1024;
      LODWORD(v95) = v27;
      _os_log_impl(&dword_181A5C000, v28, OS_LOG_TYPE_ERROR, "%{public}s Key expand error: %d", (uint8_t *)&buf, 0x12u);
    }

    if (v22) {
      free(v22);
    }
    if (v25) {
      free(v25);
    }
    goto LABEL_61;
  }

  if (!v12)
  {
    unsigned int v67 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v67, OS_LOG_TYPE_ERROR);
    buf = 136446210;
    uint64_t v93 = "strict_calloc";
    nw_endpoint_t v68 = (void *)_os_log_send_and_compose_impl();
    uint64_t result = __nwlog_abort((uint64_t)v68);
    if (result) {
      goto LABEL_192;
    }
    free(v68);
  }

  os_log_type_t v29 = calloc(1uLL, v12);
  if (v29) {
    goto LABEL_45;
  }
  id v69 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v69, OS_LOG_TYPE_ERROR);
  buf = 136446722;
  uint64_t v93 = "strict_calloc";
  BOOL v94 = 2048;
  BOOL v95 = 1LL;
  unsigned int v96 = 2048;
  os_log_type_t v97 = v12;
  BOOL v70 = (void *)_os_log_send_and_compose_impl();
  uint64_t result = __nwlog_abort((uint64_t)v70);
  if (!result)
  {
    free(v70);
LABEL_45:
    BOOL v30 = cchkdf_expand();
    if (v22) {
      free(v22);
    }
    if (v30)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v31 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        buf = 136446466;
        uint64_t v93 = "nw_http_encrypt_oblivious_response";
        BOOL v94 = 1024;
        LODWORD(v95) = v30;
        _os_log_impl( &dword_181A5C000,  v31,  OS_LOG_TYPE_ERROR,  "%{public}s Nonce expand error: %d",  (uint8_t *)&buf,  0x12u);
      }

      if (v25) {
        free(v25);
      }
      if (v29) {
        free(v29);
      }
    }

    else
    {
      ccaes_gcm_encrypt_mode();
      nw_endpoint_t v32 = ccgcm_one_shot();
      if (v25) {
        free(v25);
      }
      if (v29) {
        free(v29);
      }
      if (!v32)
      {
        *a8 = v13 + a2 + v74;
        return (BOOL)v19;
      }

      BOOL v33 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        buf = 136446466;
        uint64_t v93 = "nw_http_encrypt_oblivious_response";
        BOOL v94 = 1024;
        LODWORD(v95) = v32;
        _os_log_impl(&dword_181A5C000, v33, OS_LOG_TYPE_ERROR, "%{public}s Encrypt error: %u", (uint8_t *)&buf, 0x12u);
      }
    }

    goto LABEL_61;
  }

      if (v42) {
        free(v42);
      }
      char v18 = 0LL;
      goto LABEL_139;
    }

    goto LABEL_30;
  }

  uint64_t v17 = (id *)nw_dictionary_copy_value(*(void *)(a1[4] + 24LL), (uint64_t)out);
  if (!v17)
  {
LABEL_30:
    char v18 = 0LL;
    goto LABEL_140;
  }

  nw_dictionary_set_value(*(void *)(a1[4] + 24LL), out, 0LL);
  *(_OWORD *)*(void *)(*(void *)(a1[6] + 8LL) + 24LL) = *(_OWORD *)uu;
  char v18 = 1LL;
LABEL_140:

  return v18;
}

    if (v52) {
      free(v52);
    }
    goto LABEL_138;
  }

  int v20 = v19;
  os_log_type_t v21 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v20,  0,  0);

  nw_http2_stream_init(v18);
  __int16 v22 = *(unsigned __int16 *)(v18 + 188);
  *(_BYTE *)(v18 + 8_Block_object_dispose(va, 8) = (*(_WORD *)(a3 + 388) & 0x80) != 0;
  *(_DWORD *)(v18 + 176) = v17;
  os_log_type_t v23 = v22 | (*(unsigned __int8 *)(v18 + 190) << 16) | 0x80;
  *(_WORD *)(v18 + 18_Block_object_dispose(va, 8) = v22 | 0x80;
  BOOL v24 = (16 * *(unsigned __int16 *)(a3 + 388)) & 0x80000 | v23 & 0xFFF7FFFF;
  *(_WORD *)(v18 + 18_Block_object_dispose(va, 8) = v23;
  *(_BYTE *)(v18 + 190) = BYTE2(v24);
  *(_DWORD *)(v18 + 180) = *(_DWORD *)(a3 + 368);
  if (v17 > *(_DWORD *)(a3 + 364) && (*(_WORD *)(a3 + 388) & 1) == 0) {
    *(_DWORD *)(a3 + 364) = v17;
  }
  if (!nw_http2_add_to_id_table(a3, v18, 0LL))
  {
    if (((*(unsigned __int16 *)(v18 + 188) | (*(unsigned __int8 *)(v18 + 190) << 16)) & 0x80000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      id v62 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        BOOL v64 = *(_DWORD *)(v18 + 176);
        os_log_type_t v63 = *(_DWORD *)(v18 + 180);
        *(_DWORD *)buf = 136447234;
        int v107 = "on_begin_headers_callback";
        char v108 = 2082;
        int v109 = v18 + 191;
        uint64_t v110 = 2080;
        id v111 = (uint64_t)" ";
        int v112 = 1024;
        uint64_t v113 = v63;
        BOOL v114 = 1024;
        LODWORD(v115[0]) = v64;
        _os_log_impl( &dword_181A5C000,  v62,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:s%d> failed to add new stream to the id based hash table",  buf,  0x2Cu);
      }
    }

    std::destroy_at[abi:nn180100]<http2_stream,0>(v18);
    free((void *)v18);
    if (v21) {
      os_release((void *)v21);
    }
    return 4294966775LL;
  }

  nw_parameters_set_server_mode((void *)v21, 1);
  if (((*(unsigned __int16 *)(v18 + 188) | (*(unsigned __int8 *)(v18 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v93 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      BOOL v95 = *(_DWORD *)(v18 + 176);
      BOOL v94 = *(_DWORD *)(v18 + 180);
      *(_DWORD *)buf = 136447490;
      int v107 = "on_begin_headers_callback";
      char v108 = 2082;
      int v109 = v18 + 191;
      uint64_t v110 = 2080;
      id v111 = (uint64_t)" ";
      int v112 = 1024;
      uint64_t v113 = v94;
      BOOL v114 = 1024;
      LODWORD(v115[0]) = v95;
      WORD2(v115[0]) = 2048;
      *(void *)((char *)v115 + 6) = v21;
      _os_log_impl( &dword_181A5C000,  v93,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> using parameters %p on new incoming stream",  buf,  0x36u);
    }
  }

  id v25 = *(void ***)(a3 + 144);
  if (v25 && (BOOL v26 = *v25) != 0LL && *v26)
  {
    if (((*(unsigned __int16 *)(v18 + 188) | (*(unsigned __int8 *)(v18 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      unsigned int v96 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        BOOL v98 = *(_DWORD *)(v18 + 176);
        os_log_type_t v97 = *(_DWORD *)(v18 + 180);
        *(_DWORD *)buf = 136447490;
        int v107 = "on_begin_headers_callback";
        char v108 = 2082;
        int v109 = v18 + 191;
        uint64_t v110 = 2080;
        id v111 = (uint64_t)" ";
        int v112 = 1024;
        uint64_t v113 = v97;
        BOOL v114 = 1024;
        LODWORD(v115[0]) = v98;
        WORD2(v115[0]) = 1024;
        *(_DWORD *)((char *)v115 + 6) = v17;
        _os_log_impl( &dword_181A5C000,  v96,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> calling listen handler for new stream %d",  buf,  0x32u);
      }
    }

    *(_DWORD *)(a3 + 360) = v17;
    BOOL v27 = (***(uint64_t (****)(void, void, BOOL))(a3 + 144))( *(void *)(a3 + 144),  *(void *)(a3 + 112),  v21);
    *(_DWORD *)(a3 + 360) = -1;
    if (((*(unsigned __int16 *)(v18 + 188) | (*(unsigned __int8 *)(v18 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
    {
      BOOL v99 = v27;
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      BOOL v100 = (os_log_s *)gconnectionLogObj;
      nw_endpoint_t v101 = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
      BOOL v27 = v99;
      if (v101)
      {
        nw_endpoint_t v103 = *(_DWORD *)(v18 + 176);
        os_log_type_t v102 = *(_DWORD *)(v18 + 180);
        *(_DWORD *)buf = 136447490;
        int v107 = "on_begin_headers_callback";
        char v108 = 2082;
        int v109 = v18 + 191;
        uint64_t v110 = 2080;
        id v111 = (uint64_t)" ";
        int v112 = 1024;
        uint64_t v113 = v102;
        BOOL v114 = 1024;
        LODWORD(v115[0]) = v103;
        WORD2(v115[0]) = 1024;
        *(_DWORD *)((char *)v115 + 6) = v17;
        _os_log_impl( &dword_181A5C000,  v100,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> called into listen handler for new stream %d",  buf,  0x32u);
        BOOL v27 = v99;
      }
    }

    if ((v27 & 1) == 0)
    {
      if (((*(unsigned __int16 *)(v18 + 188) | (*(unsigned __int8 *)(v18 + 190) << 16)) & 0x80000) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v28 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
        {
          BOOL v30 = *(_DWORD *)(v18 + 176);
          os_log_type_t v29 = *(_DWORD *)(v18 + 180);
          *(_DWORD *)buf = 136447490;
          int v107 = "on_begin_headers_callback";
          char v108 = 2082;
          int v109 = v18 + 191;
          uint64_t v110 = 2080;
          id v111 = (uint64_t)" ";
          int v112 = 1024;
          uint64_t v113 = v29;
          BOOL v114 = 1024;
          LODWORD(v115[0]) = v30;
          WORD2(v115[0]) = 1024;
          *(_DWORD *)((char *)v115 + 6) = v17;
          _os_log_impl( &dword_181A5C000,  v28,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:s%d> listen handler didn't accept the new flow for stream id %d",  buf,  0x32u);
        }
      }

      nw_http2_stream_close(a3, v18);
    }

    if (!v21) {
      return 0LL;
    }
  }

  else
  {
    if (((*(unsigned __int16 *)(v18 + 188) | (*(unsigned __int8 *)(v18 + 190) << 16)) & 0x80000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      BOOL v86 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        id v88 = *(_DWORD *)(v18 + 176);
        BOOL v87 = *(_DWORD *)(v18 + 180);
        *(_DWORD *)buf = 136447234;
        int v107 = "on_begin_headers_callback";
        char v108 = 2082;
        int v109 = v18 + 191;
        uint64_t v110 = 2080;
        id v111 = (uint64_t)" ";
        int v112 = 1024;
        uint64_t v113 = v87;
        BOOL v114 = 1024;
        LODWORD(v115[0]) = v88;
        _os_log_impl( &dword_181A5C000,  v86,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:s%d> listen handler has no new_flow callback, ignoring incoming flow",  buf,  0x2Cu);
      }
    }

    nw_http2_stream_close(a3, v18);
    if (!v21) {
      return 0LL;
    }
  }

  os_release((void *)v21);
  return 0LL;
}

    if (v45) {
      free(v45);
    }
    return 1LL;
  }

  output_handler = a1->output_handler;
  if (!output_handler) {
    return 0LL;
  }
  os_log_type_t v13 = output_handler->callbacks;
  if (!v13) {
    return 0LL;
  }
  connect = (uint64_t (*)(nw_protocol *, nw_protocol *))v13->connect;
  if (!connect) {
    return 0LL;
  }
  BOOL v15 = output_handler->handle;
  if (v15 == &nw_protocol_ref_counted_handle)
  {
    os_log_type_t v16 = output_handler[1].callbacks;
    if (v16) {
      output_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v16->add_input_handler + 1);
    }
  }

  uint64_t v17 = a1[1].callbacks;
  if (v17) {
    a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v17->add_input_handler + 1);
  }
  char v10 = connect(output_handler, a1);
  if (a1->handle == &nw_protocol_ref_counted_handle)
  {
    BOOL v30 = a1[1].callbacks;
    if (v30)
    {
      __int16 v31 = (nw_protocol_callbacks *)((char *)v30 - 1);
      a1[1].callbacks = v31;
      if (!v31)
      {
        nw_endpoint_t v32 = *(void (***)(void))a1[1].flow_id;
        if (v32)
        {
          *(void *)a1[1].flow_id = 0LL;
          v32[2](v32);
          _Block_release(v32);
        }

        if ((a1[1].flow_id[8] & 1) != 0)
        {
          BOOL v33 = *(const void **)a1[1].flow_id;
          if (v33) {
            _Block_release(v33);
          }
        }

        free(a1);
      }
    }
  }

  if (v15 == &nw_protocol_ref_counted_handle && output_handler->handle == &nw_protocol_ref_counted_handle)
  {
    char v18 = output_handler[1].callbacks;
    if (v18)
    {
      id v19 = (nw_protocol_callbacks *)((char *)v18 - 1);
      output_handler[1].callbacks = v19;
      if (!v19)
      {
        int v20 = *(void (***)(void))output_handler[1].flow_id;
        if (v20)
        {
          *(void *)output_handler[1].flow_id = 0LL;
          v20[2](v20);
          _Block_release(v20);
        }

        if ((output_handler[1].flow_id[8] & 1) != 0)
        {
          os_log_type_t v21 = *(const void **)output_handler[1].flow_id;
          if (v21) {
            _Block_release(v21);
          }
        }

        free(output_handler);
      }
    }
  }

  return v10;
}

void sub_181B28680( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_get_nexus_agent_uuid_check_assertion(void *a1, _OWORD *a2, BOOL *a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  __int16 v5 = a1;
  char v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v22 = "nw_path_get_nexus_agent_uuid_check_assertion";
    nw_endpoint_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v12, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v22 = "nw_path_get_nexus_agent_uuid_check_assertion";
          _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null path", buf, 0xCu);
        }
      }

      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        BOOL v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v22 = "nw_path_get_nexus_agent_uuid_check_assertion";
            __int16 v23 = 2082;
            BOOL v24 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_27;
        }

        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v22 = "nw_path_get_nexus_agent_uuid_check_assertion";
          _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v22 = "nw_path_get_nexus_agent_uuid_check_assertion";
          _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181B28B54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_get_nexus_protocol_level(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    char v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v18 = "nw_path_get_nexus_protocol_level";
    BOOL v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v7, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        nw_endpoint_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v18 = "nw_path_get_nexus_protocol_level";
          _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null path", buf, 0xCu);
        }
      }

      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        nw_endpoint_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v18 = "nw_path_get_nexus_protocol_level";
            __int16 v19 = 2082;
            int v20 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }

        if (v12)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v18 = "nw_path_get_nexus_protocol_level";
          _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        nw_endpoint_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v18 = "nw_path_get_nexus_protocol_level";
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181B28E28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_association_force_update(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    if ((*((_BYTE *)v3 + 76) & 2) == 0)
    {
      *((_BYTE *)v3 + 76) |= 2u;
      nw_path_evaluator_force_update(*((void **)v3 + 3), v4);
      *((_BYTE *)v3 + 76) &= ~2u;
    }

    goto LABEL_4;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_association_force_update";
  char v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_association_force_update";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null association", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_association_force_update";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null association, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_association_force_update";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null association, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_association_force_update";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null association, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181B293A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_path_flow *nw_path_flow_create()
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  uint64_t v0 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_path_flow);
  id v1 = v0;
  if (v0)
  {
    v0->ctl_command_code = 0;
    id v2 = v0;
    goto LABEL_10;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v3 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  char v15 = "nw_path_flow_create";
  id v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v5 = (os_log_s *)(id)gLogObj;
    os_log_type_t v6 = type;
    if (os_log_type_enabled(v5, type))
    {
      *(_DWORD *)buf = 136446210;
      char v15 = "nw_path_flow_create";
      _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_flow) alloc] init] failed",  buf,  0xCu);
    }

void sub_181B29AFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_is_equal_inner(void *a1, void *a2, int a3)
{
  uint64_t v5 = a1;
  os_log_type_t v6 = a2;
  BOOL v7 = v5 == v6;
  if (v5 != v6 && v5 && v6)
  {
    if (*(void *)v5->flow_registration_id != *(void *)v6->flow_registration_id
      || *(void *)&v5->flow_registration_id[8] != *(void *)&v6->flow_registration_id[8])
    {
      goto LABEL_50;
    }

    routing_uint64_t result = v5->policy_result.routing_result;
    unsigned int v9 = v6->policy_result.routing_result;
    if (routing_result == 3 && v9 == 3)
    {
      BOOL v7 = 1LL;
      goto LABEL_51;
    }

    if (routing_result != v9
      || v5->policy_result.routing_result_parameter.tunnel_interface_index != v6->policy_result.routing_result_parameter.tunnel_interface_index
      || v5->policy_result.filter_control_unit != v6->policy_result.filter_control_unit
      || v5->policy_result.flow_divert_aggregate_unit != v6->policy_result.flow_divert_aggregate_unit
      || v5->policy_result.service_action != v6->policy_result.service_action
      || (*(void *)v5->policy_result.service_uuid == *(void *)v6->policy_result.service_uuid
        ? (BOOL v10 = *(void *)&v5->policy_result.service_uuid[8] == *(void *)&v6->policy_result.service_uuid[8])
        : (BOOL v10 = 0),
          !v10
       || v5->policy_result.service_flags != v6->policy_result.service_flags
       || v5->policy_result.service_data != v6->policy_result.service_data
       || v5->policy_result.routed_interface_index != v6->policy_result.routed_interface_index
       || v5->policy_result.direct_interface_index != v6->policy_result.direct_interface_index))
    {
LABEL_50:
      BOOL v7 = 0LL;
      goto LABEL_51;
    }

    uint64_t v36 = v6;
    if (v5->policy_result.direct_interface_generation == v6->policy_result.direct_interface_generation
      && v5->policy_result.delegate_interface_index == v6->policy_result.delegate_interface_index
      && v5->policy_result.delegate_interface_generation == v6->policy_result.delegate_interface_generation
      && v5->policy_result.policy_id == v6->policy_result.policy_id)
    {
      uint64_t num_netagents = v5->policy_result.num_netagents;
      if ((_DWORD)num_netagents == v6->policy_result.num_netagents)
      {
        uint64_t num_interface_options = v5->policy_result.num_interface_options;
        if ((_DWORD)num_interface_options == v6->policy_result.num_interface_options
          && (!(_DWORD)num_netagents
           || (netagents = v5->policy_result.netagents) != 0LL
           && (os_log_type_t v14 = v36->policy_result.netagents) != 0LL
           && !memcmp(netagents, v14, 20 * num_netagents))
          && (!(_DWORD)num_interface_options
           || (interface_options = v5->policy_result.interface_options) != 0LL
           && (__int16 v16 = v36->policy_result.interface_options) != 0LL
           && !memcmp(interface_options, v16, 24 * num_interface_options))
          && v5->status == v36->status
          && v5->reason == v36->reason)
        {
          if (!nw_path_network_is_satisfied(v5) && !nw_path_network_is_satisfied(v36))
          {
            BOOL v7 = 1LL;
            os_log_type_t v6 = v36;
            goto LABEL_51;
          }

          if (a3)
          {
            flows = v5->flows;
            uint64_t v18 = v36->flows;
            if (flows)
            {
              if (!v18) {
                goto LABEL_82;
              }
              uint64_t v21 = flows + 2;
              Class isa = flows[2].super.super.isa;
              int v20 = v21[1].super.super.isa;
              uint64_t v22 = v20 - isa;
              if (v22 != v18[3].super.super.isa - v18[2].super.super.isa) {
                goto LABEL_82;
              }
              if (v20 != isa)
              {
                unint64_t v23 = 0LL;
                do
                {
                  nw_array_get_object_at_index((uint64_t)v5->flows, v23);
                  BOOL v24 = (void *)objc_claimAutoreleasedReturnValue();
                  nw_array_get_object_at_index((uint64_t)v36->flows, v23);
                  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue();
                  BOOL is_equal = nw_path_flow_is_equal(v24, v25);

                  if (!is_equal) {
                    goto LABEL_82;
                  }
                }

                while (v22 != ++v23);
              }
            }

            else if (v18)
            {
              goto LABEL_82;
            }
          }

          if (((*((_BYTE *)v36 + 473) ^ *((_BYTE *)v5 + 473)) & 0xF3) == 0)
          {
            fallback_agent_domains = v5->fallback_agent_domains;
            os_log_type_t v29 = v36->fallback_agent_domains;
            if (fallback_agent_domains && v29 && fallback_agent_domains != v29)
            {
              if (!xpc_equal(fallback_agent_domains, v29)) {
                goto LABEL_82;
              }
            }

            else if (fallback_agent_domains != v29)
            {
              goto LABEL_82;
            }

            fallback_agent_types = v5->fallback_agent_types;
            __int16 v31 = v36->fallback_agent_types;
            if (fallback_agent_types && v31 && fallback_agent_types != v31)
            {
              if (!xpc_equal(fallback_agent_types, v31)) {
                goto LABEL_82;
              }
            }

            else if (fallback_agent_types != v31)
            {
              goto LABEL_82;
            }

            network_agent_dictionary = v5->network_agent_dictionary;
            BOOL v33 = v36->network_agent_dictionary;
            if (network_agent_dictionary && v33 && network_agent_dictionary != v33)
            {
              if (!xpc_equal(network_agent_dictionary, v33)) {
                goto LABEL_82;
              }
            }

            else if (network_agent_dictionary != v33)
            {
              goto LABEL_82;
            }

            proxy_settings = v5->proxy_settings;
            BOOL v35 = v36->proxy_settings;
            if (proxy_settings && v35 && proxy_settings != v35)
            {
              if (!xpc_equal(proxy_settings, v35)) {
                goto LABEL_82;
              }
            }

            else if (proxy_settings != v35)
            {
              goto LABEL_82;
            }

            if (nw_interface_deep_compare(v5->fallback_interface, v36->fallback_interface)
              && nw_interface_deep_compare(v5->direct, v36->direct))
            {
              BOOL v7 = nw_interface_deep_compare(v5->delegate, v36->delegate);
              os_log_type_t v6 = v36;
              goto LABEL_51;
            }
          }
        }
      }
    }

void sub_181B29F2C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

BOOL nw_interface_deep_compare(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (v3 == v4) {
    BOOL v7 = 1LL;
  }
  else {
    BOOL v7 = nw_interface_shallow_compare(v3, v4)
  }
      && *((_DWORD *)v3 + 22) == *((_DWORD *)v4 + 22)
      && ((*(_WORD *)(v4 + 85) ^ *(_WORD *)(v3 + 85)) & 0x3F) == 0
      && *((_DWORD *)v3 + 15) == *((_DWORD *)v4 + 15)
      && (size_t v5 = v3[32], (_DWORD)v5 == v4[32])
      && !memcmp(v3 + 12, v4 + 12, v5)
      && (size_t v6 = v3[56], (_DWORD)v6 == v4[56])
      && !memcmp(v3 + 36, v4 + 36, v6)
      && v3[84] == v4[84];

  return v7;
}

void __nw_endpoint_handler_initialize_association_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (nw_path_changed_from_previous(v5)) {
    *(_BYTE *)(*(void *)(a1 + 32) + 268LL) = *(_BYTE *)(*(void *)(a1 + 32) + 268LL) & 0xF7 | (8
  }
                                                                                                * nw_endpoint_handler_get_alternate_path_state( *(void **)(a1 + 32),  0LL,  0LL,  v5));
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 112LL));
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 64LL), a3);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 112LL));
  nw_endpoint_handler_path_change(*(NWConcrete_nw_endpoint_handler **)(a1 + 32));
}

void sub_181B2A27C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t nw_path_changed_from_previous(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[474] >> 4) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_path_changed_from_previous";
  size_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_path_changed_from_previous";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_path_changed_from_previous";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_path_changed_from_previous";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_path_changed_from_previous";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

BOOL nw_endpoint_handler_should_reset_for_fallback(NWConcrete_nw_endpoint_handler *a1)
{
  id v1 = a1;
  id v2 = v1;
  BOOL v5 = !v1->parent_handler
    && !nw_endpoint_handler_has_fallback_children(v1)
    && (*((_BYTE *)v2 + 268) & 0x10) == 0
    && v2->state == 2
    && (int mode = v2->mode, (mode | 4) != 4)
    && (*((_BYTE *)v2 + 268) & 1) == 0
    && (mode != 2
     || (mode_handler = v2->mode_handler) == 0LL

  return v5;
}

void sub_181B2A5BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181B2C108( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_flow_registration_copy_path(void *a1)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v21 = "nw_path_flow_registration_copy_path";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v11, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v21 = "nw_path_flow_registration_copy_path";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null flow_registration", buf, 0xCu);
        }
      }

      else if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v21 = "nw_path_flow_registration_copy_path";
            __int16 v22 = 2082;
            unint64_t v23 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null flow_registration, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }

        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v21 = "nw_path_flow_registration_copy_path";
          _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null flow_registration, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v21 = "nw_path_flow_registration_copy_path";
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null flow_registration, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181B2C53C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_copy_for_flow_registration(void *a1, void *a2)
{
  uint64_t v83 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  BOOL v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    __int16 v57 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    nw_endpoint_t v80 = "nw_path_copy_for_flow_registration";
    nw_endpoint_t v58 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v78 = OS_LOG_TYPE_ERROR;
    char v77 = 0;
    if (__nwlog_fault(v58, &v78, &v77))
    {
      if (v78 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v59 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v60 = v78;
        if (os_log_type_enabled(v59, v78))
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v80 = "nw_path_copy_for_flow_registration";
          _os_log_impl(&dword_181A5C000, v59, v60, "%{public}s called with null path", buf, 0xCu);
        }
      }

      else if (v77)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v59 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v62 = v78;
        BOOL v63 = os_log_type_enabled(v59, v78);
        if (backtrace_string)
        {
          if (v63)
          {
            *(_DWORD *)buf = 136446466;
            nw_endpoint_t v80 = "nw_path_copy_for_flow_registration";
            __int16 v81 = 2082;
            size_t v82 = (size_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v59,  v62,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_60;
        }

        if (v63)
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v80 = "nw_path_copy_for_flow_registration";
          _os_log_impl(&dword_181A5C000, v59, v62, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        char v59 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v68 = v78;
        if (os_log_type_enabled(v59, v78))
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v80 = "nw_path_copy_for_flow_registration";
          _os_log_impl( &dword_181A5C000,  v59,  v68,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181B2CEF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_path_copy_for_flow_registration_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  BOOL v5 = v4;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v4[18] == *(void *)(v6 + 32) && v4[19] == *(void *)(v6 + 40) && (*(_BYTE *)(v6 + 149) & 1) == 0)
  {
    nw_array_append(*(void *)(*(void *)(a1 + 40) + 72LL), v4);
  }

  else
  {
    BOOL v7 = *(unsigned __int8 **)(v6 + 16);
    if (v7)
    {
      v9[0] = MEMORY[0x1895F87A8];
      v9[1] = 3221225472LL;
      v9[2] = __nw_path_copy_for_flow_registration_block_invoke_3;
      v9[3] = &unk_189BC6DB0;
      os_log_type_t v10 = v4;
      id v11 = *(id *)(a1 + 40);
      __int128 v12 = v10;
      nw_array_apply(v7, (uint64_t)v9);
    }
  }

  return 1LL;
}

uint64_t nw_path_flow_registration_can_use_nexus( NWConcrete_nw_path *a1, NWConcrete_nw_path_flow_registration *a2)
{
  id v2 = nw_path_copy_flow_for_registration(a1, a2);
  uint64_t v3 = v2;
  if (!v2)
  {
    uint64_t v9 = 0LL;
    goto LABEL_15;
  }

  id v4 = v2;
  BOOL v5 = (void *)v4[3];
  if (v5
    && (size_t length = 0LL, (data = xpc_dictionary_get_data(v5, "data", &length)) != 0LL)
    && length >= 0xD8
    && (BOOL v7 = data, length == data[53] + 216LL)
    && ((data[52] & 0xE080) != 0 ? (BOOL v8 = (data[52] & 0x13) == 1) : (BOOL v8 = 1), !v8))
  {

    if (v7[53] >= 0xCCu)
    {
      unsigned int v11 = v7[52];
      unsigned int v12 = (v11 >> 7) & 1;
      unsigned int v13 = (v11 >> 14) & 1;
      if ((*((_BYTE *)v4 + 186) & 8) != 0) {
        uint64_t v9 = v13;
      }
      else {
        uint64_t v9 = v12;
      }
      goto LABEL_13;
    }
  }

  else
  {
  }

  uint64_t v9 = 0LL;
LABEL_13:

LABEL_15:
  return v9;
}

uint64_t __nw_path_is_viable_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  BOOL v5 = v4;
  if ((v4[185] & 2) != 0)
  {
    if ((v4[185] & 1) != 0) {
      goto LABEL_15;
    }
    BOOL v7 = v4;
    BOOL v8 = (void *)v7[3];
    if (!v8
      || (size_t length = 0LL, (data = xpc_dictionary_get_data(v8, "data", &length)) == 0LL)
      || length < 0xD8
      || (os_log_type_t v10 = data, length != data[53] + 216LL)
      || ((data[52] & 0xE080) != 0 ? (BOOL v11 = (data[52] & 0x13) == 1) : (BOOL v11 = 1), v11))
    {

      uint64_t v6 = 1LL;
      goto LABEL_16;
    }

    if ((v10[52] & 0x40) != 0)
    {
LABEL_15:
      uint64_t v6 = 0LL;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
      goto LABEL_16;
    }
  }

  uint64_t v6 = 1LL;
LABEL_16:

  return v6;
}

uint64_t __nw_path_copy_connected_interface_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  BOOL v5 = v4;
  uint64_t v6 = (void *)*((void *)v4 + 2);
  if (v6 && (*((_BYTE *)v4 + 185) & 1) != 0)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), v6);
    uint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v7 = 1LL;
  }

  return v7;
}

uint64_t nw_endpoint_handler_create_protocol_for_definition(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = a4;
  if (v7 && (v10 = v7, char v11 = v10[184], v10, (v11 & 1) != 0))
  {
    unsigned int v13 = (uint64_t (*)(uint64_t, _BYTE *, id, char *))nw_protocol_definition_get_framer_create(v10);
    if (!v13)
    {
      uint64_t v14 = 0LL;
      goto LABEL_7;
    }

    uint64_t internal = v13(a1, v10, v8, v9);
  }

  else
  {
    uint64_t internal = nw_protocol_create_internal(a1, v8, v9, 1);
  }

  uint64_t v14 = internal;
LABEL_7:

  return v14;
}

void sub_181B2D308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_create(uint64_t a1, void *a2, const char *a3)
{
  return nw_protocol_create_internal(a1, a2, a3, 1);
}

void nw_endpoint_handler_set_protocol_instance(void *a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v58 = *MEMORY[0x1895F89C0];
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  if (!v7)
  {
    __nwlog_obj();
    unsigned int v36 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    unsigned int v51 = "nw_endpoint_handler_set_protocol_instance";
    unsigned int v25 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (__nwlog_fault(v25, &type, &v48))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        unsigned int v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v37 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)buf = 136446210;
          unsigned int v51 = "nw_endpoint_handler_set_protocol_instance";
          _os_log_impl(&dword_181A5C000, v26, v37, "%{public}s called with null handler", buf, 0xCu);
        }

        goto LABEL_40;
      }

      if (!v48)
      {
        __nwlog_obj();
        unsigned int v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v46 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)buf = 136446210;
          unsigned int v51 = "nw_endpoint_handler_set_protocol_instance";
          _os_log_impl( &dword_181A5C000,  v26,  v46,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_40;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unsigned int v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v41 = type;
      BOOL v42 = os_log_type_enabled(v26, type);
      if (!backtrace_string)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446210;
          unsigned int v51 = "nw_endpoint_handler_set_protocol_instance";
          _os_log_impl(&dword_181A5C000, v26, v41, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }

        goto LABEL_40;
      }

      if (v42)
      {
        *(_DWORD *)buf = 136446466;
        unsigned int v51 = "nw_endpoint_handler_set_protocol_instance";
        __int16 v52 = 2082;
        os_log_type_t v53 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v26,  v41,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
    }

    goto LABEL_41;
  }

  os_log_type_t v10 = (NWConcrete_nw_endpoint_handler *)v7;
  uint64_t mode = v10->mode;

  if ((_DWORD)mode != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v23 = (id)gLogObj;
    else {
      unsigned int v24 = off_189BBBBC0[mode];
    }
    *(_DWORD *)buf = 136446722;
    unsigned int v51 = "nw_endpoint_handler_set_protocol_instance";
    __int16 v52 = 2082;
    os_log_type_t v53 = (void *)v24;
    __int16 v54 = 2082;
    char v55 = "flow";
    unsigned int v25 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (__nwlog_fault(v25, &type, &v48))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unsigned int v26 = (os_log_s *)(id)gLogObj;
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v26, type))
        {
          else {
            unsigned int v28 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          unsigned int v51 = "nw_endpoint_handler_set_protocol_instance";
          __int16 v52 = 2082;
          os_log_type_t v53 = (void *)v28;
          __int16 v54 = 2082;
          char v55 = "flow";
          _os_log_impl( &dword_181A5C000,  v26,  v27,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }

        goto LABEL_40;
      }

      if (!v48)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unsigned int v26 = (os_log_s *)(id)gLogObj;
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v26, type))
        {
          else {
            unsigned int v34 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          unsigned int v51 = "nw_endpoint_handler_set_protocol_instance";
          __int16 v52 = 2082;
          os_log_type_t v53 = (void *)v34;
          __int16 v54 = 2082;
          char v55 = "flow";
          _os_log_impl( &dword_181A5C000,  v26,  v33,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }

        goto LABEL_40;
      }

      unsigned int v29 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned int v26 = (os_log_s *)(id)gLogObj;
      os_log_type_t v30 = type;
      BOOL v31 = os_log_type_enabled(v26, type);
      if (!v29)
      {
        if (v31)
        {
          else {
            unsigned int v35 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          unsigned int v51 = "nw_endpoint_handler_set_protocol_instance";
          __int16 v52 = 2082;
          os_log_type_t v53 = (void *)v35;
          __int16 v54 = 2082;
          char v55 = "flow";
          _os_log_impl( &dword_181A5C000,  v26,  v30,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
        }

        goto LABEL_40;
      }

      if (v31)
      {
        else {
          unsigned int v32 = off_189BBBBC0[mode];
        }
        *(_DWORD *)buf = 136446978;
        unsigned int v51 = "nw_endpoint_handler_set_protocol_instance";
        __int16 v52 = 2082;
        os_log_type_t v53 = (void *)v32;
        __int16 v54 = 2082;
        char v55 = "flow";
        __int16 v56 = 2082;
        __int16 v57 = v29;
        _os_log_impl( &dword_181A5C000,  v26,  v30,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
      }

      free(v29);
      if (v25) {
        goto LABEL_42;
      }
      goto LABEL_43;
    }

void sub_181B2DC04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_parameters_copy_protocol_value(void *a1, uint64_t a2, const char *a3)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  uint64_t v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    id v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v30 = "nw_parameters_copy_protocol_value";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_parameters_copy_protocol_value";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null parameters", buf, 0xCu);
      }

      goto LABEL_56;
    }

    if (!v27)
    {
      __nwlog_obj();
      char v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_parameters_copy_protocol_value";
        _os_log_impl( &dword_181A5C000,  v11,  v24,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_56;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    char v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v18 = type;
    BOOL v19 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_parameters_copy_protocol_value";
        _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }

      goto LABEL_56;
    }

    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v30 = "nw_parameters_copy_protocol_value";
      __int16 v31 = 2082;
      unsigned int v32 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
    }

void sub_181B2E334(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_options_get_protocol_handle(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 2);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_protocol_options_get_protocol_handle";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_options_get_protocol_handle";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_protocol_options_get_protocol_handle";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_options_get_protocol_handle";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_options_get_protocol_handle";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_protocol_definition_get_message_is_stream(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[184] >> 2) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_protocol_definition_get_message_is_stream";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_get_message_is_stream";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_protocol_definition_get_message_is_stream";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null definition, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_get_message_is_stream";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_definition_get_message_is_stream";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null definition, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void *nw_frame_array_init(void *result)
{
  *BOOL result = 0LL;
  result[1] = result;
  return result;
}

uint64_t nw_protocol_default_get_parameters(nw_protocol *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_protocol_default_get_parameters";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_24;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "nw_protocol_default_get_parameters";
      BOOL v11 = "%{public}s called with null protocol";
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_protocol_default_get_parameters";
          __int16 v18 = 2082;
          uint64_t v19 = (nw_protocol_identifier *)backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }

      if (!v13)
      {
LABEL_24:
        if (v8) {
          free(v8);
        }
        return 0LL;
      }

      *(_DWORD *)buf = 136446210;
      __int16 v17 = "nw_protocol_default_get_parameters";
      BOOL v11 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      id v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_24;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v17 = "nw_protocol_default_get_parameters";
      BOOL v11 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
    goto LABEL_24;
  }

  default_input_handler = a1->default_input_handler;
  if (default_input_handler)
  {
    callbacks = default_input_handler->callbacks;
    if (callbacks)
    {
      get_parameters = (uint64_t (*)(void))callbacks->get_parameters;
      if (get_parameters) {
        return get_parameters();
      }
    }
  }

  uint64_t v6 = (os_log_s *)__nwlog_obj();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    identifier = (nw_protocol_identifier *)"<null>";
    if (a1->identifier) {
      identifier = a1->identifier;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v17 = "nw_protocol_default_get_parameters";
    __int16 v18 = 2082;
    uint64_t v19 = identifier;
    _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEBUG,  "%{public}s Protocol %{public}s does not support get parameters",  buf,  0x16u);
  }

  return 0LL;
}

id *nw_protocol_metadata_create_singleton(void *a1)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&nw_uuid_generate_insecure(unsigned char *)::uuid_lock);
  if ((void)nw_uuid_generate_insecure(unsigned char *)::last_used_uuid != -1LL)
  {
    *(void *)&nw_uuid_generate_insecure(unsigned char *)::last_used_uuid = nw_uuid_generate_insecure(unsigned char *)::last_used_uuid
                                                                           + 1;
    goto LABEL_7;
  }

  if (*((void *)&nw_uuid_generate_insecure(unsigned char *)::last_used_uuid + 1) == -1LL)
  {
LABEL_6:
    uuid_generate_random((unsigned __int8 *)&nw_uuid_generate_insecure(unsigned char *)::last_used_uuid);
    BYTE9(nw_uuid_generate_insecure(unsigned char *)::last_used_uuid) = -1;
  }

  else
  {
    ++*((void *)&nw_uuid_generate_insecure(unsigned char *)::last_used_uuid + 1);
  }

void sub_181B2EC90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181B2F1DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_flow_add_one_protocol( void *a1, __int128 *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7)
{
  uint64_t v78 = *MEMORY[0x1895F89C0];
  id v13 = a1;
  id v14 = a3;
  __int128 v15 = a4;
  id v16 = a5;
  id v58 = a6;
  char v59 = v15;
  __int16 v56 = v14;
  __int16 v57 = v16;
  uint64_t protocol_for_definition = nw_endpoint_handler_create_protocol_for_definition((uint64_t)a2, v15, v16, v58);
  if (protocol_for_definition)
  {
    if (v15)
    {
      if (!v14)
      {
LABEL_12:
        char v55 = a2;
        if (a7)
        {
          if (protocol_for_definition != a7)
          {
            char v27 = *(void **)(protocol_for_definition + 24);
            if (v27 && *v27)
            {
              if ((nw_protocol_add_input_handler(protocol_for_definition, a7) & 1) != 0) {
                goto LABEL_35;
              }
            }

            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              unsigned int v32 = (os_log_s *)(id)gLogObj;
              if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446466;
                BOOL v63 = "nw_protocol_utilities_add_input_handler";
                __int16 v64 = 2048;
                uint64_t v65 = protocol_for_definition;
                _os_log_impl( &dword_181A5C000,  v32,  OS_LOG_TYPE_ERROR,  "%{public}s Unable to invoke add_input_handler on protocol %p because it is not valid",  buf,  0x16u);
              }
            }

LABEL_64:
        if (v47) {
          free(v47);
        }
        goto LABEL_28;
      }
    }

    else
    {
      char v59 = nw_protocol_definition_create_with_identifier(a2);
      if (!v14) {
        goto LABEL_12;
      }
    }

    nw_endpoint_handler_set_protocol_instance(v13, v14, v59, protocol_for_definition);
    goto LABEL_12;
  }

  if ((nw_endpoint_handler_get_logging_disabled(v13) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    __int16 v18 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = nw_endpoint_handler_get_id_string(v13);
      uint64_t v20 = nw_endpoint_handler_dry_run_string(v13);
      nw_endpoint_t v21 = nw_endpoint_handler_copy_endpoint(v13);
      os_log_type_t v22 = a2;
      BOOL v23 = nw_endpoint_get_logging_description(v21);
      os_log_type_t v24 = nw_endpoint_handler_state_string(v13);
      os_log_type_t v25 = nw_endpoint_handler_mode_string(v13);
      id v26 = nw_endpoint_handler_copy_current_path(v13);
      *(_DWORD *)buf = 136448002;
      BOOL v63 = "nw_endpoint_flow_add_one_protocol";
      __int16 v64 = 2082;
      uint64_t v65 = (uint64_t)v19;
      __int16 v66 = 2082;
      unsigned int v67 = (void *)v20;
      __int16 v68 = 2082;
      id v69 = v23;
      __int16 v70 = 2082;
      os_log_type_t v71 = v24;
      __int16 v72 = 2082;
      int v73 = v25;
      __int16 v74 = 2114;
      id v75 = v26;
      __int16 v76 = 2082;
      char v77 = v22;
      _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to create protocol handler: %{public}s",  buf,  0x52u);
    }

    goto LABEL_33;
  }

  if (v21) {
    free(v21);
  }
  BOOL v11 = 0LL;
LABEL_18:

  return v11;
}

  if (v20) {
    free(v20);
  }
  __int16 v17 = 100000000LL;
LABEL_47:

  return v17;
}

              if (v68) {
                free(v68);
              }
              id v13 = MEMORY[0x1895F87A8];
            }
          }

          else
          {
            *(void *)(v19 + 64) = v24;
            *(void *)(v19 + 72) = v24;
            *(void *)(v19 + 120) = 0LL;
            *(void *)(v19 + 12_Block_object_dispose(va, 8) = v19 + 64;
          }
        }

        nw_frame_claim(v19, v22, 20, 0);
        v74[0] = 0LL;
        v74[1] = v74;
        id v75 = 20;
        v74[2] = 0x2000000000LL;
        *(void *)buf = v13;
        *(void *)&buf[8] = 0x40000000LL;
        *(void *)&buf[16] = ___ZL43nw_protocol_ipv4_append_reassembled_packetsP16nw_protocol_ipv4P16nw_frame_array_sPb_block_invoke_24;
        *(void *)&_BYTE buf[24] = &unk_189BC8970;
        *(void *)&nw_endpoint_t v92 = v74;
        *((void *)&v92 + 1) = a1;
        *(_DWORD *)&v93[8] = v16;
        *(void *)uint64_t v93 = v17;
        id v39 = *(void *)(a1 + 64);
        do
        {
          if (!v39) {
            break;
          }
          uint64_t v40 = *(void *)(v39 + 32);
          os_log_type_t v41 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
          id v39 = v40;
        }

        while ((v41 & 1) != 0);
        *(void *)(v19 + 16) = 0LL;
        BOOL v42 = *(uint64_t **)(a1 + 88);
        *(void *)(v19 + 24) = v42;
        *BOOL v42 = v19;
        *(void *)(a1 + 8_Block_object_dispose(va, 8) = v19 + 16;
        *(void *)(v19 + 32) = 0LL;
        os_log_type_t v43 = *(uint64_t **)(a3 + 8);
        *(void *)(v19 + 40) = v43;
        char *v43 = v19;
        *(void *)(a3 + _Block_object_dispose(va, 8) = v19 + 32;
        *(void *)os_log_type_t type = v13;
        __int16 v70 = 0x40000000LL;
        os_log_type_t v71 = ___ZL43nw_protocol_ipv4_append_reassembled_packetsP16nw_protocol_ipv4P16nw_frame_array_sPb_block_invoke_26;
        __int16 v72 = &__block_descriptor_tmp_27_86230;
        int v73 = a1;
        BOOL v44 = *(void *)(a1 + 64);
        do
        {
          if (!v44) {
            break;
          }
          os_log_type_t v45 = *(void *)(v44 + 32);
          os_log_type_t v46 = ((uint64_t (*)(os_log_type_t *))v71)(type);
          BOOL v44 = v45;
        }

        while ((v46 & 1) != 0);
        _Block_object_dispose(v74, 8);
        os_log_type_t v12 = 1LL;
        goto LABEL_74;
      }

      if ((*(_BYTE *)(a1 + 136) & 1) != 0)
      {
LABEL_115:
        os_release((void *)v19);
        os_log_type_t v12 = 0LL;
        goto LABEL_74;
      }

      __nwlog_obj();
      *(_DWORD *)buf = 136447234;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_append_reassembled_packets";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = a1 + 137;
      *(_WORD *)&_BYTE buf[22] = 2080;
      *(void *)&_BYTE buf[24] = " ";
      LOWORD(v92) = 2048;
      *(void *)((char *)&v92 + 2) = a1;
      WORD5(v92) = 1024;
      HIDWORD(v92) = v76;
      __int16 v57 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v74[0]) = 0;
      if (__nwlog_fault(v57, type, v74))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          id v58 = (os_log_s *)__nwlog_obj();
          char v59 = type[0];
          if (!os_log_type_enabled(v58, type[0])) {
            goto LABEL_113;
          }
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_append_reassembled_packets";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = a1 + 137;
          *(_WORD *)&_BYTE buf[22] = 2080;
          *(void *)&_BYTE buf[24] = " ";
          LOWORD(v92) = 2048;
          *(void *)((char *)&v92 + 2) = a1;
          WORD5(v92) = 1024;
          HIDWORD(v92) = v76;
          char v60 = "%{public}s %{public}s%s%p Invalid first IP reassembly frame (length %u)";
          goto LABEL_112;
        }

        if (!LOBYTE(v74[0]))
        {
          id v58 = (os_log_s *)__nwlog_obj();
          char v59 = type[0];
          if (!os_log_type_enabled(v58, type[0])) {
            goto LABEL_113;
          }
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_append_reassembled_packets";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = a1 + 137;
          *(_WORD *)&_BYTE buf[22] = 2080;
          *(void *)&_BYTE buf[24] = " ";
          LOWORD(v92) = 2048;
          *(void *)((char *)&v92 + 2) = a1;
          WORD5(v92) = 1024;
          HIDWORD(v92) = v76;
          char v60 = "%{public}s %{public}s%s%p Invalid first IP reassembly frame (length %u), backtrace limit exceeded";
          goto LABEL_112;
        }

        BOOL v63 = (char *)__nw_create_backtrace_string();
        id v58 = (os_log_s *)__nwlog_obj();
        char v59 = type[0];
        __int16 v64 = os_log_type_enabled(v58, type[0]);
        if (v63)
        {
          if (v64)
          {
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_append_reassembled_packets";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = a1 + 137;
            *(_WORD *)&_BYTE buf[22] = 2080;
            *(void *)&_BYTE buf[24] = " ";
            LOWORD(v92) = 2048;
            *(void *)((char *)&v92 + 2) = a1;
            WORD5(v92) = 1024;
            HIDWORD(v92) = v76;
            *(_WORD *)uint64_t v93 = 2082;
            *(void *)&v93[2] = v63;
            _os_log_impl( &dword_181A5C000,  v58,  v59,  "%{public}s %{public}s%s%p Invalid first IP reassembly frame (length %u), dumping backtrace:%{public}s",  buf,  0x3Au);
          }

          free(v63);
          goto LABEL_113;
        }

        if (v64)
        {
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_append_reassembled_packets";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = a1 + 137;
          *(_WORD *)&_BYTE buf[22] = 2080;
          *(void *)&_BYTE buf[24] = " ";
          LOWORD(v92) = 2048;
          *(void *)((char *)&v92 + 2) = a1;
          WORD5(v92) = 1024;
          HIDWORD(v92) = v76;
          char v60 = "%{public}s %{public}s%s%p Invalid first IP reassembly frame (length %u), no backtrace";
LABEL_112:
          _os_log_impl(&dword_181A5C000, v58, v59, v60, buf, 0x30u);
        }
      }

    free(v32);
    goto LABEL_65;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v16 = (id)gLogObj;
  *(_DWORD *)buf = 136446722;
  BOOL v53 = "nw_read_request_create";
  os_log_type_t v54 = 2048;
  char v55 = (char *)v15;
  __int16 v56 = 2048;
  __int16 v57 = a2;
  __int16 v17 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  int v50 = 0;
  if (__nwlog_fault(v17, &type, &v50))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v18 = (os_log_s *)(id)gLogObj;
      uint64_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446722;
        BOOL v53 = "nw_read_request_create";
        os_log_type_t v54 = 2048;
        char v55 = (char *)v15;
        __int16 v56 = 2048;
        __int16 v57 = a2;
        _os_log_impl(&dword_181A5C000, v18, v19, "%{public}s minlength (%zu) > maxlength (%zu)", buf, 0x20u);
      }
    }

    else if (v50)
    {
      os_log_type_t v24 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v18 = (os_log_s *)(id)gLogObj;
      os_log_type_t v25 = type;
      id v26 = os_log_type_enabled(v18, type);
      if (v24)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446978;
          BOOL v53 = "nw_read_request_create";
          os_log_type_t v54 = 2048;
          char v55 = (char *)v15;
          __int16 v56 = 2048;
          __int16 v57 = a2;
          id v58 = 2082;
          char v59 = v24;
          _os_log_impl( &dword_181A5C000,  v18,  v25,  "%{public}s minlength (%zu) > maxlength (%zu), dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v24);
        if (!v17) {
          goto LABEL_56;
        }
        goto LABEL_55;
      }

      if (v26)
      {
        *(_DWORD *)buf = 136446722;
        BOOL v53 = "nw_read_request_create";
        os_log_type_t v54 = 2048;
        char v55 = (char *)v15;
        __int16 v56 = 2048;
        __int16 v57 = a2;
        _os_log_impl( &dword_181A5C000,  v18,  v25,  "%{public}s minlength (%zu) > maxlength (%zu), no backtrace",  buf,  0x20u);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v18 = (os_log_s *)(id)gLogObj;
      nw_endpoint_t v35 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446722;
        BOOL v53 = "nw_read_request_create";
        os_log_type_t v54 = 2048;
        char v55 = (char *)v15;
        __int16 v56 = 2048;
        __int16 v57 = a2;
        _os_log_impl( &dword_181A5C000,  v18,  v35,  "%{public}s minlength (%zu) > maxlength (%zu), backtrace limit exceeded",  buf,  0x20u);
      }
    }
  }

        v41[(v34 >> 6) + 8] |= 1LL << v34;
        BOOL v86 = (uint64_t *)(v41[6] + 16 * v34);
        const char *v86 = v21;
        v86[1] = v22;
        BOOL v87 = (uint64_t *)(v41[7] + 16 * v34);
        *BOOL v87 = v30;
        v87[1] = v29;
        id v88 = v41[2];
        __int16 v74 = __OFADD__(v88, 1LL);
        unsigned int v89 = v88 + 1;
        if (v74) {
          goto LABEL_77;
        }
        v41[2] = v89;
        swift_bridgeObjectRetain();
        goto LABEL_66;
      }

      swift_bridgeObjectRetain();
      __int16 v76 = sub_181C8C01C(v21, v22);
      uint64_t v78 = v77;
      swift_bridgeObjectRelease();
      if ((v78 & 1) != 0)
      {
        nw_endpoint_t v79 = v99;
        nw_endpoint_t v80 = swift_isUniquelyReferenced_nonNull_native();
        __int16 v81 = *v79;
        os_log_type_t v104 = (void *)*v79;
        os_log_s *v79 = 0x8000000000000000LL;
        if ((v80 & 1) == 0)
        {
          sub_181C926B8();
          __int16 v81 = (uint64_t)v104;
        }

        swift_bridgeObjectRelease();
        sub_181C4D3C4(v76, v81);
        os_log_s *v79 = v81;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        size_t v82 = v103;
        sub_181BDA14C(v103, v24, 1);
        swift_bridgeObjectRelease();
        sub_181BDA14C(v82, v24, 1);
        a2 = v79;
      }

      else
      {
        swift_bridgeObjectRelease();
        uint64_t v85 = v103;
        sub_181BDA14C(v103, v24, 1);
        swift_bridgeObjectRelease();
        sub_181BDA14C(v85, v24, 1);
        a2 = v99;
      }

LABEL_65:
          if (!v9) {
            goto LABEL_68;
          }
          goto LABEL_66;
        }

        if (!v94)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v10 = (os_log_s *)(id)gLogObj;
          uint64_t v40 = type;
          if (os_log_type_enabled(v10, type))
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
            BOOL v98 = 2082;
            *(void *)BOOL v99 = v7;
            _os_log_impl( &dword_181A5C000,  v10,  v40,  "%{public}s received unknown type XPC %{public}s, backtrace limit exceeded",  buf,  0x16u);
          }

          goto LABEL_64;
        }

        id v26 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v10 = (os_log_s *)(id)gLogObj;
        char v27 = type;
        id v28 = os_log_type_enabled(v10, type);
        if (!v26)
        {
          if (v28)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
            BOOL v98 = 2082;
            *(void *)BOOL v99 = v7;
            _os_log_impl( &dword_181A5C000,  v10,  v27,  "%{public}s received unknown type XPC %{public}s, no backtrace",  buf,  0x16u);
          }

          goto LABEL_64;
        }

        if (v28)
        {
          *(_DWORD *)buf = 136446722;
          os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
          BOOL v98 = 2082;
          *(void *)BOOL v99 = v7;
          *(_WORD *)&v99[8] = 2082;
          *(void *)&v99[10] = v26;
          _os_log_impl( &dword_181A5C000,  v10,  v27,  "%{public}s received unknown type XPC %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v26);
        if (!v9)
        {
LABEL_68:
          if (!v7)
          {
LABEL_141:
            os_log_type_t v52 = 0xFFFFFFFFLL;
            goto LABEL_142;
          }

      free(v8);
      goto LABEL_65;
    }

    if (v4 == (void *)MEMORY[0x1895F9198])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned int v32 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      uint64_t v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
      uint64_t v6 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      __int16 v81 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v33 = (os_log_s *)(id)gLogObj;
        unsigned int v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
          _os_log_impl(&dword_181A5C000, v33, v34, "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED", buf, 0xCu);
        }

        goto LABEL_178;
      }

      if (!v81)
      {
        __nwlog_obj();
        uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __int16 v64 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
          _os_log_impl( &dword_181A5C000,  v33,  v64,  "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_178;
      }

      os_log_type_t v46 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v47 = type;
      char v48 = os_log_type_enabled(v33, type);
      if (!v46)
      {
        if (v48)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
          _os_log_impl( &dword_181A5C000,  v33,  v47,  "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, no backtrace",  buf,  0xCu);
        }

        goto LABEL_178;
      }

      if (v48)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
        uint64_t v85 = 2082;
        *(void *)BOOL v86 = v46;
        _os_log_impl( &dword_181A5C000,  v33,  v47,  "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, dumping backtrace:%{public}s",  buf,  0x16u);
      }
    }

    else
    {
      if (v4 == (void *)MEMORY[0x1895F91A0])
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v45 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
          _os_log_impl( &dword_181A5C000,  v45,  OS_LOG_TYPE_ERROR,  "%{public}s received XPC_ERROR_CONNECTION_INVALID",  buf,  0xCu);
        }

        goto LABEL_78;
      }

      if (v4 != (void *)MEMORY[0x1895F91C8])
      {
        uint64_t v6 = (void *)MEMORY[0x186E12534](v4);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v24 = (id)gLogObj;
        *(_DWORD *)buf = 136446466;
        uint64_t v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
        uint64_t v85 = 2082;
        *(void *)BOOL v86 = v6;
        os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        __int16 v81 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          __int128 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v25 = type;
          if (os_log_type_enabled(v9, type))
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
            uint64_t v85 = 2082;
            *(void *)BOOL v86 = v6;
            _os_log_impl( &dword_181A5C000,  v9,  v25,  "%{public}s received returned unknown XPC error %{public}s",  buf,  0x16u);
          }

          goto LABEL_62;
        }

        if (!v81)
        {
          __nwlog_obj();
          __int128 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          __int16 v74 = type;
          if (os_log_type_enabled(v9, type))
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
            uint64_t v85 = 2082;
            *(void *)BOOL v86 = v6;
            _os_log_impl( &dword_181A5C000,  v9,  v74,  "%{public}s received returned unknown XPC error %{public}s, backtrace limit exceeded",  buf,  0x16u);
          }

          goto LABEL_62;
        }

        os_log_type_t v52 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        __int128 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v53 = type;
        os_log_type_t v54 = os_log_type_enabled(v9, type);
        if (!v52)
        {
          if (v54)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
            uint64_t v85 = 2082;
            *(void *)BOOL v86 = v6;
            _os_log_impl( &dword_181A5C000,  v9,  v53,  "%{public}s received returned unknown XPC error %{public}s, no backtrace",  buf,  0x16u);
          }

          goto LABEL_62;
        }

        if (v54)
        {
          *(_DWORD *)buf = 136446722;
          uint64_t v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
          uint64_t v85 = 2082;
          *(void *)BOOL v86 = v6;
          *(_WORD *)&v86[8] = 2082;
          *(void *)&v86[10] = v52;
          _os_log_impl( &dword_181A5C000,  v9,  v53,  "%{public}s received returned unknown XPC error %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v52);
        if (!v8) {
          goto LABEL_65;
        }
        goto LABEL_64;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v49 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      uint64_t v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
      uint64_t v6 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      __int16 v81 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        int v50 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
          _os_log_impl(&dword_181A5C000, v33, v50, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT", buf, 0xCu);
        }

LABEL_65:
            if (!v7) {
              goto LABEL_67;
            }
            goto LABEL_66;
          }

          if (!v88)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v8 = (os_log_s *)(id)gLogObj;
            os_log_type_t v41 = type;
            if (os_log_type_enabled(v8, type))
            {
              *(_DWORD *)buf = 136446466;
              uint64_t v91 = "networkd_privileged_reload_managed_network_settings";
              nw_endpoint_t v92 = 2082;
              *(void *)uint64_t v93 = v5;
              _os_log_impl( &dword_181A5C000,  v8,  v41,  "%{public}s received unknown type XPC %{public}s, backtrace limit exceeded",  buf,  0x16u);
            }

            goto LABEL_64;
          }

          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v8 = (os_log_s *)(id)gLogObj;
          id v26 = type;
          char v27 = os_log_type_enabled(v8, type);
          if (!backtrace_string)
          {
            if (v27)
            {
              *(_DWORD *)buf = 136446466;
              uint64_t v91 = "networkd_privileged_reload_managed_network_settings";
              nw_endpoint_t v92 = 2082;
              *(void *)uint64_t v93 = v5;
              _os_log_impl( &dword_181A5C000,  v8,  v26,  "%{public}s received unknown type XPC %{public}s, no backtrace",  buf,  0x16u);
            }

            goto LABEL_64;
          }

          if (v27)
          {
            *(_DWORD *)buf = 136446722;
            uint64_t v91 = "networkd_privileged_reload_managed_network_settings";
            nw_endpoint_t v92 = 2082;
            *(void *)uint64_t v93 = v5;
            *(_WORD *)&v93[8] = 2082;
            *(void *)&v93[10] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v26,  "%{public}s received unknown type XPC %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(backtrace_string);
          if (!v7)
          {
LABEL_67:
            if (v5)
            {
              free(v5);
              BOOL v42 = 1;
LABEL_175:
              os_log_type_t v46 = v42 == 0;
              goto LABEL_176;
            }

              break;
            }

            if (os_channel_slot_detach_packet())
            {
              __int16 v81 = *(void *)&v12[38]._os_unfair_lock_opaque;
              __nwlog_obj();
              size_t v82 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              uint64_t v83 = os_log_type_enabled(v82, OS_LOG_TYPE_ERROR);
              if (v81)
              {
                if (v83)
                {
                  uint64_t v84 = *(char **)&v12[6]._os_unfair_lock_opaque;
                  uint64_t v85 = v12[42]._os_unfair_lock_opaque;
                  *(_DWORD *)buf = 136447490;
                  nw_endpoint_t v149 = "receiveOneFramefromRing_locked";
                  os_log_type_t v150 = 2080;
                  os_log_type_t v151 = v84;
                  os_log_type_t v152 = 1042;
                  LODWORD(v153) = 16;
                  WORD2(v153) = 2098;
                  *(void *)((char *)&v153 + 6) = (char *)v12 + 115;
                  HIWORD(v153) = 1024;
                  LODWORD(v154) = v85;
                  WORD2(v154) = 2112;
                  *(void *)((char *)&v154 + 6) = @"Bad RX detach";
                  BOOL v86 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>]  %@";
                  BOOL v87 = v82;
                  id v88 = 54;
                  goto LABEL_129;
                }
              }

              else if (v83)
              {
                *(_DWORD *)buf = 136446722;
                nw_endpoint_t v149 = "receiveOneFramefromRing_locked";
                os_log_type_t v150 = 2114;
                os_log_type_t v151 = (char *)v12;
                os_log_type_t v152 = 2112;
                *(void *)&BOOL v153 = @"Bad RX detach";
                BOOL v86 = "%{public}s [%{public}@]  %@";
                BOOL v87 = v82;
                id v88 = 32;
LABEL_129:
                _os_log_impl(&dword_181A5C000, v87, OS_LOG_TYPE_ERROR, v86, buf, v88);
              }

              BOOL v53 = v142;
              if (!*(void *)&v12[38]._os_unfair_lock_opaque) {
                goto LABEL_64;
              }
              goto LABEL_161;
            }

            if (!os_packet_get_next_buflet())
            {
              int v126 = *(void *)&v12[38]._os_unfair_lock_opaque;
              __nwlog_obj();
              char v127 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              nw_endpoint_t v128 = os_log_type_enabled(v127, OS_LOG_TYPE_ERROR);
              if (v126)
              {
                if (v128)
                {
                  nw_endpoint_t v129 = *(char **)&v12[6]._os_unfair_lock_opaque;
                  __int128 v130 = v12[42]._os_unfair_lock_opaque;
                  *(_DWORD *)buf = 136447490;
                  nw_endpoint_t v149 = "receiveOneFramefromRing_locked";
                  os_log_type_t v150 = 2080;
                  os_log_type_t v151 = v129;
                  os_log_type_t v152 = 1042;
                  LODWORD(v153) = 16;
                  WORD2(v153) = 2098;
                  *(void *)((char *)&v153 + 6) = (char *)v12 + 115;
                  HIWORD(v153) = 1024;
                  LODWORD(v154) = v130;
                  WORD2(v154) = 2112;
                  *(void *)((char *)&v154 + 6) = @"Bad RX buflet";
                  nw_endpoint_t v131 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>]  %@";
                  v132 = v127;
                  id v133 = 54;
                  goto LABEL_159;
                }
              }

              else if (v128)
              {
                *(_DWORD *)buf = 136446722;
                nw_endpoint_t v149 = "receiveOneFramefromRing_locked";
                os_log_type_t v150 = 2114;
                os_log_type_t v151 = (char *)v12;
                os_log_type_t v152 = 2112;
                *(void *)&BOOL v153 = @"Bad RX buflet";
                nw_endpoint_t v131 = "%{public}s [%{public}@]  %@";
                v132 = v127;
                id v133 = 32;
LABEL_159:
                _os_log_impl(&dword_181A5C000, v132, OS_LOG_TYPE_ERROR, v131, buf, v133);
              }

              BOOL v53 = v142;
              if (!*(void *)&v12[38]._os_unfair_lock_opaque) {
                goto LABEL_64;
              }
              goto LABEL_161;
            }

            nw_endpoint_t log = os_buflet_get_data_offset();
            object_nw_endpoint_t address = os_buflet_get_object_address();
            if (!object_address)
            {
              uint64_t v118 = *(void *)&v12[38]._os_unfair_lock_opaque;
              __nwlog_obj();
              uint64_t v119 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              char v120 = os_log_type_enabled(v119, OS_LOG_TYPE_ERROR);
              if (v118)
              {
                if (v120)
                {
                  id v121 = *(char **)&v12[6]._os_unfair_lock_opaque;
                  unsigned int v122 = v12[42]._os_unfair_lock_opaque;
                  *(_DWORD *)buf = 136447490;
                  nw_endpoint_t v149 = "receiveOneFramefromRing_locked";
                  os_log_type_t v150 = 2080;
                  os_log_type_t v151 = v121;
                  os_log_type_t v152 = 1042;
                  LODWORD(v153) = 16;
                  WORD2(v153) = 2098;
                  *(void *)((char *)&v153 + 6) = (char *)v12 + 115;
                  HIWORD(v153) = 1024;
                  LODWORD(v154) = v122;
                  WORD2(v154) = 2112;
                  *(void *)((char *)&v154 + 6) = @"Bad RX address";
                  int v123 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>]  %@";
                  unsigned int v124 = v119;
                  id v125 = 54;
                  goto LABEL_154;
                }
              }

              else if (v120)
              {
                *(_DWORD *)buf = 136446722;
                nw_endpoint_t v149 = "receiveOneFramefromRing_locked";
                os_log_type_t v150 = 2114;
                os_log_type_t v151 = (char *)v12;
                os_log_type_t v152 = 2112;
                *(void *)&BOOL v153 = @"Bad RX address";
                int v123 = "%{public}s [%{public}@]  %@";
                unsigned int v124 = v119;
                id v125 = 32;
LABEL_154:
                _os_log_impl(&dword_181A5C000, v124, OS_LOG_TYPE_ERROR, v123, buf, v125);
              }

              BOOL v53 = v142;
              if (!*(void *)&v12[38]._os_unfair_lock_opaque) {
                goto LABEL_64;
              }
              goto LABEL_161;
            }

            data_size_t length = (unsigned __int16)os_packet_get_data_length();
            if (!data_length)
            {
              os_log_type_t v102 = *(void *)&v12[38]._os_unfair_lock_opaque;
              __nwlog_obj();
              nw_endpoint_t v103 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v104 = os_log_type_enabled(v103, OS_LOG_TYPE_ERROR);
              if (v102)
              {
                if (v104)
                {
                  uint64_t v105 = *(char **)&v12[6]._os_unfair_lock_opaque;
                  nw_endpoint_t v106 = v12[42]._os_unfair_lock_opaque;
                  *(_DWORD *)buf = 136447490;
                  nw_endpoint_t v149 = "receiveOneFramefromRing_locked";
                  os_log_type_t v150 = 2080;
                  os_log_type_t v151 = v105;
                  os_log_type_t v152 = 1042;
                  LODWORD(v153) = 16;
                  WORD2(v153) = 2098;
                  *(void *)((char *)&v153 + 6) = (char *)v12 + 115;
                  HIWORD(v153) = 1024;
                  LODWORD(v154) = v106;
                  WORD2(v154) = 2112;
                  *(void *)((char *)&v154 + 6) = @"Bad RX frame length";
                  int v107 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>]  %@";
                  char v108 = v103;
                  int v109 = 54;
                  goto LABEL_144;
                }
              }

              else if (v104)
              {
                *(_DWORD *)buf = 136446722;
                nw_endpoint_t v149 = "receiveOneFramefromRing_locked";
                os_log_type_t v150 = 2114;
                os_log_type_t v151 = (char *)v12;
                os_log_type_t v152 = 2112;
                *(void *)&BOOL v153 = @"Bad RX frame length";
                int v107 = "%{public}s [%{public}@]  %@";
                char v108 = v103;
                int v109 = 32;
LABEL_144:
                _os_log_impl(&dword_181A5C000, v108, OS_LOG_TYPE_ERROR, v107, buf, v109);
              }

              BOOL v53 = v142;
              if (!*(void *)&v12[38]._os_unfair_lock_opaque) {
                goto LABEL_64;
              }
              goto LABEL_161;
            }

            BOOL v23 = os_channel_advance_slot();
            os_log_type_t v24 = *(void *)&v12[38]._os_unfair_lock_opaque;
            if (v23)
            {
              __nwlog_obj();
              unsigned int v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              unint64_t v90 = os_log_type_enabled(v89, OS_LOG_TYPE_ERROR);
              if (v24)
              {
                if (v90)
                {
                  uint64_t v91 = *(char **)&v12[6]._os_unfair_lock_opaque;
                  nw_endpoint_t v92 = v12[42]._os_unfair_lock_opaque;
                  *(_DWORD *)buf = 136447490;
                  nw_endpoint_t v149 = "receiveOneFramefromRing_locked";
                  os_log_type_t v150 = 2080;
                  os_log_type_t v151 = v91;
                  os_log_type_t v152 = 1042;
                  LODWORD(v153) = 16;
                  WORD2(v153) = 2098;
                  *(void *)((char *)&v153 + 6) = (char *)v12 + 115;
                  HIWORD(v153) = 1024;
                  LODWORD(v154) = v92;
                  WORD2(v154) = 2112;
                  *(void *)((char *)&v154 + 6) = @"Failed to advance RX slot";
                  uint64_t v93 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>]  %@";
                  BOOL v94 = v89;
                  BOOL v95 = 54;
                  goto LABEL_134;
                }
              }

              else if (v90)
              {
                *(_DWORD *)buf = 136446722;
                nw_endpoint_t v149 = "receiveOneFramefromRing_locked";
                os_log_type_t v150 = 2114;
                os_log_type_t v151 = (char *)v12;
                os_log_type_t v152 = 2112;
                *(void *)&BOOL v153 = @"Failed to advance RX slot";
                uint64_t v93 = "%{public}s [%{public}@]  %@";
                BOOL v94 = v89;
                BOOL v95 = 32;
LABEL_134:
                _os_log_impl(&dword_181A5C000, v94, OS_LOG_TYPE_ERROR, v93, buf, v95);
              }

              BOOL v53 = v142;
              if (!*(void *)&v12[38]._os_unfair_lock_opaque) {
                goto LABEL_64;
              }
              goto LABEL_161;
            }

            os_log_type_t v25 = os_channel_sync();
            id v26 = *(void *)&v12[38]._os_unfair_lock_opaque;
            __nwlog_obj();
            osnw_endpoint_t log = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (v25)
            {
              unsigned int v96 = os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR);
              if (v26)
              {
                if (v96)
                {
                  os_log_type_t v97 = *(char **)&v12[6]._os_unfair_lock_opaque;
                  BOOL v98 = v12[42]._os_unfair_lock_opaque;
                  *(_DWORD *)buf = 136447490;
                  nw_endpoint_t v149 = "receiveOneFramefromRing_locked";
                  os_log_type_t v150 = 2080;
                  os_log_type_t v151 = v97;
                  os_log_type_t v152 = 1042;
                  LODWORD(v153) = 16;
                  WORD2(v153) = 2098;
                  *(void *)((char *)&v153 + 6) = (char *)v12 + 115;
                  HIWORD(v153) = 1024;
                  LODWORD(v154) = v98;
                  WORD2(v154) = 2112;
                  *(void *)((char *)&v154 + 6) = @"Failed to sync RX";
                  BOOL v99 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>]  %@";
                  BOOL v100 = oslog;
                  nw_endpoint_t v101 = 54;
                  goto LABEL_139;
                }
              }

              else if (v96)
              {
                *(_DWORD *)buf = 136446722;
                nw_endpoint_t v149 = "receiveOneFramefromRing_locked";
                os_log_type_t v150 = 2114;
                os_log_type_t v151 = (char *)v12;
                os_log_type_t v152 = 2112;
                *(void *)&BOOL v153 = @"Failed to sync RX";
                BOOL v99 = "%{public}s [%{public}@]  %@";
                BOOL v100 = oslog;
                nw_endpoint_t v101 = 32;
LABEL_139:
                _os_log_impl(&dword_181A5C000, v100, OS_LOG_TYPE_ERROR, v99, buf, v101);
              }

              BOOL v53 = v142;
              if (!*(void *)&v12[38]._os_unfair_lock_opaque) {
                goto LABEL_64;
              }
              goto LABEL_161;
            }

            char v27 = os_log_type_enabled(oslog, OS_LOG_TYPE_DEBUG);
            if (v26)
            {
              if (!v27) {
                goto LABEL_41;
              }
              id v28 = *(char **)&v12[6]._os_unfair_lock_opaque;
              unsigned int v29 = v12[42]._os_unfair_lock_opaque;
              *(_DWORD *)buf = 136447490;
              nw_endpoint_t v149 = "receiveOneFramefromRing_locked";
              os_log_type_t v150 = 2080;
              os_log_type_t v151 = v28;
              os_log_type_t v152 = 1042;
              LODWORD(v153) = 16;
              WORD2(v153) = 2098;
              *(void *)((char *)&v153 + 6) = (char *)v12 + 115;
              HIWORD(v153) = 1024;
              LODWORD(v154) = v29;
              WORD2(v154) = 1024;
              *(_DWORD *)((char *)&v154 + 6) = data_length;
              os_log_type_t v30 = oslog;
              os_log_type_t v31 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] receiveDatafromRing: frame len %d";
              unsigned int v32 = 50;
            }

            else
            {
              if (!v27) {
                goto LABEL_41;
              }
              *(_DWORD *)buf = 136446722;
              nw_endpoint_t v149 = "receiveOneFramefromRing_locked";
              os_log_type_t v150 = 2114;
              os_log_type_t v151 = (char *)v12;
              os_log_type_t v152 = 1024;
              LODWORD(v153) = data_length;
              os_log_type_t v30 = oslog;
              os_log_type_t v31 = "%{public}s [%{public}@] receiveDatafromRing: frame len %d";
              unsigned int v32 = 28;
            }

            _os_log_impl(&dword_181A5C000, v30, OS_LOG_TYPE_DEBUG, v31, buf, v32);
LABEL_41:

            if ((data_length - 1519) <= 0xFFFFFA4C)
            {
              uint64_t v110 = *(void *)&v12[38]._os_unfair_lock_opaque;
              __nwlog_obj();
              id v111 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              int v112 = os_log_type_enabled(v111, OS_LOG_TYPE_ERROR);
              if (v110)
              {
                if (v112)
                {
                  uint64_t v113 = *(char **)&v12[6]._os_unfair_lock_opaque;
                  BOOL v114 = v12[42]._os_unfair_lock_opaque;
                  *(_DWORD *)buf = 136447490;
                  nw_endpoint_t v149 = "receiveOneFramefromRing_locked";
                  os_log_type_t v150 = 2080;
                  os_log_type_t v151 = v113;
                  os_log_type_t v152 = 1042;
                  LODWORD(v153) = 16;
                  WORD2(v153) = 2098;
                  *(void *)((char *)&v153 + 6) = (char *)v12 + 115;
                  HIWORD(v153) = 1024;
                  LODWORD(v154) = v114;
                  WORD2(v154) = 2112;
                  *(void *)((char *)&v154 + 6) = @"frame size len is invalid";
                  int v115 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>]  %@";
                  nw_endpoint_t v116 = v111;
                  nw_endpoint_t v117 = 54;
                  goto LABEL_149;
                }
              }

              else if (v112)
              {
                *(_DWORD *)buf = 136446722;
                nw_endpoint_t v149 = "receiveOneFramefromRing_locked";
                os_log_type_t v150 = 2114;
                os_log_type_t v151 = (char *)v12;
                os_log_type_t v152 = 2112;
                *(void *)&BOOL v153 = @"frame size len is invalid";
                int v115 = "%{public}s [%{public}@]  %@";
                nw_endpoint_t v116 = v111;
                nw_endpoint_t v117 = 32;
LABEL_149:
                _os_log_impl(&dword_181A5C000, v116, OS_LOG_TYPE_ERROR, v115, buf, v117);
              }

              BOOL v53 = v142;
              if (!*(void *)&v12[38]._os_unfair_lock_opaque) {
                goto LABEL_64;
              }
LABEL_161:
              os_channel_packet_free();
              is_defunct = os_channel_is_defunct();
LABEL_62:
              if (is_defunct) {
                -[NWConcrete_nw_ethernet_channel closeChannel:]((uint64_t)v53, 0);
              }
              goto LABEL_64;
            }

            uint64_t v33 = (unsigned __int16 *)(object_address + log);
            osos_log_t loga = (data_length - 14);
            unsigned int v34 = v33[6];
            if (v34 == 129)
            {
              BOOL v139 = bswap32(v33[7]) >> 16;
              nw_endpoint_t v135 = bswap32(v33[8]) >> 16;
              nw_endpoint_t v35 = v33 + 9;
              osloga -= 4LL;
            }

            else
            {
              BOOL v139 = 0;
              nw_endpoint_t v35 = v33 + 7;
              nw_endpoint_t v135 = __rev16(v34);
            }

            unsigned int v36 = dispatch_data_create(v35, osloga, 0LL, 0LL);
            os_log_type_t v37 = *(void *)&v12[38]._os_unfair_lock_opaque;
            uint64_t v38 = v36;
            if (v36)
            {
              __nwlog_obj();
              os_log_t loga = (os_log_s *)objc_claimAutoreleasedReturnValue();
              id v39 = os_log_type_enabled(loga, OS_LOG_TYPE_DEBUG);
              if (v37)
              {
                if (v39)
                {
                  uint64_t v40 = *(char **)&v12[6]._os_unfair_lock_opaque;
                  os_log_type_t v41 = v12[42]._os_unfair_lock_opaque;
                  *(_DWORD *)buf = 136449026;
                  nw_endpoint_t v149 = "receiveOneFramefromRing_locked";
                  os_log_type_t v150 = 2080;
                  os_log_type_t v151 = v40;
                  os_log_type_t v152 = 1042;
                  LODWORD(v153) = 16;
                  WORD2(v153) = 2098;
                  *(void *)((char *)&v153 + 6) = (char *)v12 + 115;
                  HIWORD(v153) = 1024;
                  LODWORD(v154) = v41;
                  WORD2(v154) = 1024;
                  *(_DWORD *)((char *)&v154 + 6) = v135;
                  WORD5(v154) = 1024;
                  HIDWORD(v154) = v139;
                  id v155 = 1042;
                  *(_DWORD *)os_log_type_t v156 = 6;
                  *(_WORD *)&v156[4] = 2098;
                  *(void *)&v156[6] = v33;
                  v157 = 1042;
                  nw_endpoint_t v158 = 6;
                  os_log_type_t v159 = 2098;
                  __int16 v160 = v33 + 3;
                  os_log_type_t v161 = 1024;
                  os_log_type_t v162 = osloga;
                  BOOL v42 = loga;
                  os_log_type_t v43 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] receiveDatafromRing: ethertype %X v"
                        "lantag %X local %{public,nw_ethernet_address_t}.6P remote %{public,nw_ethernet_address_t}.6P data size %d";
                  BOOL v44 = 94;
                  goto LABEL_51;
                }
              }

              else if (v39)
              {
                *(_DWORD *)buf = 136448258;
                nw_endpoint_t v149 = "receiveOneFramefromRing_locked";
                os_log_type_t v150 = 2114;
                os_log_type_t v151 = (char *)v12;
                os_log_type_t v152 = 1024;
                LODWORD(v153) = v135;
                WORD2(v153) = 1024;
                *(_DWORD *)((char *)&v153 + 6) = v139;
                WORD5(v153) = 1042;
                HIDWORD(v153) = 6;
                LOWORD(v154) = 2098;
                *(void *)((char *)&v154 + 2) = v33;
                WORD5(v154) = 1042;
                HIDWORD(v154) = 6;
                id v155 = 2098;
                *(void *)os_log_type_t v156 = v33 + 3;
                *(_WORD *)&v156[8] = 1024;
                *(_DWORD *)&v156[10] = osloga;
                BOOL v42 = loga;
                os_log_type_t v43 = "%{public}s [%{public}@] receiveDatafromRing: ethertype %X vlantag %X local %{public,nw_ethernet_ad"
                      "dress_t}.6P remote %{public,nw_ethernet_address_t}.6P data size %d";
                BOOL v44 = 72;
LABEL_51:
                _os_log_impl(&dword_181A5C000, v42, OS_LOG_TYPE_DEBUG, v43, buf, v44);
              }

              os_unfair_lock_unlock(v12 + 2);
              (*(void (**)(void))(*(void *)&v12[14]._os_unfair_lock_opaque + 16LL))();
              os_unfair_lock_lock(v12 + 2);
              if (!*(void *)&v12[38]._os_unfair_lock_opaque)
              {

                BOOL v53 = v142;
                goto LABEL_64;
              }
            }

            os_channel_packet_free();
          }
        }
      }
    }
  }

  os_unfair_lock_unlock(v12 + 2);

LABEL_66:
  __int16 v56 = *(nw_ethernet_channel **)(a1 + 32);
  if (*((_BYTE *)v56 + 112))
  {
    *((_BYTE *)v56 + 112) = 0;
    nw_queue_resume_source(*(void *)(*(void *)(a1 + 32) + 104LL), v55);
    __int16 v56 = *(nw_ethernet_channel **)(a1 + 32);
  }

  if (*((_BYTE *)v56 + 114)) {
    nw_ethernet_channel_cancel(v56);
  }
}

    if (!v32) {
      return;
    }
    goto LABEL_65;
  }

  id v16 = *(_BYTE *)(a1 + 212);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  __int16 v17 = (os_log_s *)gLogObj;
  if ((v16 & 0x20) != 0)
  {
    *(_DWORD *)buf = 136446210;
    BOOL v94 = "nw_protocol_plugin_retry_reissue_output_frames";
    unsigned int v32 = (char *)_os_log_send_and_compose_impl();
    nw_endpoint_t v92 = OS_LOG_TYPE_ERROR;
    uint64_t v91 = 0;
    if (v92 == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v33 = (os_log_s *)gLogObj;
      unsigned int v34 = v92;
      if (!os_log_type_enabled((os_log_t)gLogObj, v92)) {
        goto LABEL_64;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v94 = "nw_protocol_plugin_retry_reissue_output_frames";
      nw_endpoint_t v35 = "%{public}s trying to reissue output frames when an async reissue is pending";
      goto LABEL_63;
    }

    if (!v91)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v33 = (os_log_s *)gLogObj;
      unsigned int v34 = v92;
      if (!os_log_type_enabled((os_log_t)gLogObj, v92)) {
        goto LABEL_64;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v94 = "nw_protocol_plugin_retry_reissue_output_frames";
      nw_endpoint_t v35 = "%{public}s trying to reissue output frames when an async reissue is pending, backtrace limit exceeded";
      goto LABEL_63;
    }

    unsigned int v36 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v33 = (os_log_s *)gLogObj;
    unsigned int v34 = v92;
    os_log_type_t v37 = os_log_type_enabled((os_log_t)gLogObj, v92);
    if (!v36)
    {
      if (!v37) {
        goto LABEL_64;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v94 = "nw_protocol_plugin_retry_reissue_output_frames";
      nw_endpoint_t v35 = "%{public}s trying to reissue output frames when an async reissue is pending, no backtrace";
      goto LABEL_63;
    }

    if (v37)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v94 = "nw_protocol_plugin_retry_reissue_output_frames";
      BOOL v95 = 2082;
      unsigned int v96 = v36;
      uint64_t v38 = "%{public}s trying to reissue output frames when an async reissue is pending, dumping backtrace:%{public}s";
LABEL_41:
      _os_log_impl(&dword_181A5C000, v33, v34, v38, buf, 0x16u);
      goto LABEL_42;
    }

    goto LABEL_42;
  }

  __int16 v18 = a6;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
  {
    uint64_t v19 = *(const char **)(a2 + 16);
    if (!v19) {
      uint64_t v19 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    BOOL v94 = "nw_protocol_plugin_retry_reissue_output_frames";
    BOOL v95 = 2082;
    unsigned int v96 = (void *)v19;
    os_log_type_t v97 = 1024;
    LODWORD(v9_Block_object_dispose(va, 8) = a6;
    _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_INFO,  "%{public}s Rebuilding stack and reissuing output frames for %{public}s, behavior %u",  buf,  0x1Cu);
  }

  *(_BYTE *)(a1 + 212) = *(_BYTE *)(a1 + 212) & 0x69 | 0x10;
  if (a4)
  {
    uint64_t v20 = a4;
    nw_endpoint_t v21 = [v20 type];

    if (v21 == 4)
    {
      os_log_type_t v22 = nw_endpoint_copy_host_port_endpoint_for_url(v20);
      BOOL v23 = nw_context_copy_registered_endpoint(a3, (void *)v22);
      os_log_type_t v24 = *(_BYTE *)(a1 + 88);
      if ((v24 & 1) != 0)
      {
        os_log_type_t v25 = *(void **)(a1 + 80);
        if (v25)
        {
          os_release(v25);
          os_log_type_t v24 = *(_BYTE *)(a1 + 88);
        }
      }

      *(void *)(a1 + 80) = v23;
      *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = v24 | 1;
      if (a5)
      {
LABEL_28:
        if (v22) {
          os_release((void *)v22);
        }
        if (a5) {
          goto LABEL_31;
        }
LABEL_49:
        os_log_type_t v30 = 0LL;
        os_log_type_t v31 = *(_BYTE *)(a1 + 56);
        if ((v31 & 1) == 0) {
          goto LABEL_52;
        }
LABEL_50:
        os_log_type_t v41 = *(void **)(a1 + 48);
        if (v41)
        {
          os_release(v41);
          os_log_type_t v31 = *(_BYTE *)(a1 + 56);
        }

        goto LABEL_52;
      }

      id v26 = *(void *)(a2 + 48);
      if (v26)
      {
        uint64_t v85 = *(void **)(v26 + 40);
        if (v85 == &nw_protocol_ref_counted_handle)
        {
          char v27 = *(void *)(v26 + 88);
          if (v27) {
            *(void *)(v26 + 8_Block_object_dispose(va, 8) = v27 + 1;
          }
        }

        id v28 = *(void *)(v26 + 24);
        if (v28)
        {
          unsigned int v29 = *(uint64_t (**)(uint64_t))(v28 + 112);
          if (v29)
          {
            a5 = (void *)v29(v26);
LABEL_25:
            if (v85 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v26 + 40) == &nw_protocol_ref_counted_handle)
            {
              char v48 = *(void *)(v26 + 88);
              if (v48)
              {
                os_log_type_t v49 = v48 - 1;
                *(void *)(v26 + 8_Block_object_dispose(va, 8) = v49;
                if (!v49)
                {
                  int v50 = *(void (***)(void))(v26 + 64);
                  if (v50)
                  {
                    *(void *)(v26 + 64) = 0LL;
                    aBlocka = v50;
                    v50[2](v50);
                    _Block_release(aBlocka);
                  }

                  if ((*(_BYTE *)(v26 + 72) & 1) != 0)
                  {
                    unsigned int v51 = *(const void **)(v26 + 64);
                    if (v51) {
                      _Block_release(v51);
                    }
                  }

                  free((void *)v26);
                }
              }
            }

    if (v30) {
      free(v30);
    }

    nw_endpoint_t v21 = 0LL;
    goto LABEL_67;
  }

  nw_ws_metadata_set_permessage_deflate(*(void **)(a1 + 32), a4);
  __int128 v9 = *(_DWORD *)(a1 + 64);
  if (v9) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = 0;
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) >= 0x7FuLL) {
    LODWORD(v11) = 127;
  }
  else {
    BOOL v11 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
  }
  if ((nw_ws_validate_frame( (nw_ws_state_t *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 48LL),  *(unsigned __int8 *)(a1 + 68),  v10,  v9,  (*(_WORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 273LL) & 4) == 0,  v11,  0) & 1) != 0)
  {
    os_log_type_t v12 = *(void **)(a1 + 40);
    id v13 = *(void *)(*(void *)(a1 + 48) + 8LL) + 48LL;
    id v14 = *(_DWORD *)(a1 + 64);
    close_code = nw_ws_metadata_get_close_code(*(nw_protocol_metadata_t *)(a1 + 32));
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 256LL) = nw_ws_write_header( v13,  v12,  v14,  close_code,  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL)
                                                                               + 24LL),
                                                                     v10,
                                                                     *(unsigned __int8 *)(a1 + 68));
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 240LL) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 236LL) = 5;
    os_log_type_t v8 = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 236LL);
    goto LABEL_10;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v23 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    os_log_type_t v24 = *(void *)(*(void *)(a1 + 48) + 8LL) + 275LL;
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v24;
    _os_log_impl(&dword_181A5C000, v23, OS_LOG_TYPE_ERROR, "%{public}s %{public}s got invalid frame", buf, 0x16u);
  }

  nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 40), 100);
  return 0LL;
}

      *(void *)(v12 + 104) = v39;
    }

    _Block_object_dispose(&v103, 8);
    __int16 v17 = 0;
LABEL_66:
    a5 = *(_DWORD *)is_complete;
LABEL_67:
    char v48 = *(void *)(*(void *)(a1 + 48) + 8LL);
    os_log_type_t v49 = a3;
    if ((*(_BYTE *)(v48 + 232) & 8) != 0)
    {
      uint64_t v6 = *(const uint8_t **)(v48 + 136);
      os_log_type_t v49 = *(void *)(v48 + 160);
    }

    int v50 = *(nw_framer **)(a1 + 32);
    if (v6 && v49)
    {
      unsigned int v51 = a5;
      nw_framer_deliver_input(v50, v6, v49, *(nw_framer_message_t *)(a1 + 40), a5);
      block = 0LL;
      nw_endpoint_t v116 = 0LL;
      LOBYTE(v117) = 0;
      if (v49 >= 0x10) {
        os_log_type_t v52 = 16LL;
      }
      else {
        os_log_type_t v52 = v49;
      }
      strncpy((char *)&block, (const char *)v6, v52);
      if (!gLogDatapath) {
        goto LABEL_81;
      }
      __nwlog_obj();
      BOOL v53 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v54 = *(void *)(a1 + 40);
        char v55 = "";
        __int16 v56 = *(void *)(*(void *)(a1 + 48) + 8LL) + 275LL;
        if (v51) {
          char v55 = ", complete";
        }
        *(_DWORD *)buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v56;
        *(_WORD *)&_BYTE buf[22] = 2082;
        *(void *)char v108 = &block;
        *(_WORD *)&v108[8] = 2048;
        *(void *)&v108[10] = v54;
        *(_WORD *)&v108[18] = 2048;
        *(void *)&v108[20] = v49;
        int v109 = 2082;
        uint64_t v110 = v55;
        _os_log_impl( &dword_181A5C000,  v53,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s input delivering input '%{public}s' %p (%zu bytes)%{public}s",  buf,  0x3Eu);
      }
    }

    else
    {
      __int16 v57 = a5;
      nw_framer_deliver_input_no_copy(v50, 0LL, *(nw_framer_message_t *)(a1 + 40), a5);
      if (!gLogDatapath)
      {
LABEL_81:
        if (v17)
        {
          id v58 = *(void **)(a1 + 32);
          async_block[0] = MEMORY[0x1895F87A8];
          async_block[1] = 3221225472LL;
          async_block[2] = __nw_protocol_copy_ws_definition_block_invoke_23;
          async_block[3] = &unk_189BC7870;
          nw_endpoint_t v101 = *(void *)(a1 + 48);
          os_log_type_t v102 = v17;
          BOOL v100 = v58;
          nw_framer_async(v100, async_block);
        }

        return a3;
      }

      __nwlog_obj();
      BOOL v53 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
      {
        __int16 v68 = *(void *)(a1 + 40);
        id v69 = *(void *)(*(void *)(a1 + 48) + 8LL);
        __int16 v70 = v69 + 275;
        os_log_type_t v71 = *(void *)(v69 + 160);
        __int16 v72 = "";
        if (v57) {
          __int16 v72 = ", complete";
        }
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v70;
        *(_WORD *)&_BYTE buf[22] = 2048;
        *(void *)char v108 = v68;
        *(_WORD *)&v108[8] = 2048;
        *(void *)&v108[10] = v71;
        *(_WORD *)&v108[18] = 2082;
        *(void *)&v108[20] = v72;
        _os_log_impl( &dword_181A5C000,  v53,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s input delivering input %p (%zu bytes)%{public}s",  buf,  0x34u);
      }
    }

    goto LABEL_81;
  }

  *(_DWORD *)is_complete = a5;
  id v26 = *(void **)(a1 + 40);
  char v27 = *(id *)(a1 + 32);
  id v28 = v26;
  unsigned int v29 = v28;
  if (!v27)
  {
    metadatab = v28;
    __nwlog_obj();
    char v77 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_ws_process_close_frame";
    uint64_t v78 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(block) = 16;
    LOBYTE(v103) = 0;
    if (__nwlog_fault(v78, &block, &v103))
    {
      if (block == 17)
      {
        __nwlog_obj();
        nw_endpoint_t v79 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        nw_endpoint_t v80 = block;
        if (os_log_type_enabled(v79, (os_log_type_t)block))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_ws_process_close_frame";
          _os_log_impl(&dword_181A5C000, v79, v80, "%{public}s called with null framer", buf, 0xCu);
        }
      }

      else
      {
        if ((_BYTE)v103)
        {
          BOOL v87 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          id v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          unsigned int v89 = block;
          unint64_t v90 = os_log_type_enabled(v88, (os_log_type_t)block);
          if (v87)
          {
            if (v90)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_ws_process_close_frame";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v87;
              _os_log_impl( &dword_181A5C000,  v88,  v89,  "%{public}s called with null framer, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v87);
          }

          else
          {
            if (v90)
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_ws_process_close_frame";
              _os_log_impl(&dword_181A5C000, v88, v89, "%{public}s called with null framer, no backtrace", buf, 0xCu);
            }
          }

          goto LABEL_146;
        }

        __nwlog_obj();
        nw_endpoint_t v79 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        nw_endpoint_t v92 = block;
        if (os_log_type_enabled(v79, (os_log_type_t)block))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_ws_process_close_frame";
          _os_log_impl( &dword_181A5C000,  v79,  v92,  "%{public}s called with null framer, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

  if (v11) {
    free(v11);
  }
}

          goto LABEL_65;
        }

        if (!v31)
        {
          __nwlog_obj();
          __int128 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v30 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            unsigned int v34 = "nw_framer_protocol_get_remote_endpoint";
            _os_log_impl( &dword_181A5C000,  v15,  v30,  "%{public}s called with null framer->parent_definition, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_64;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        __int128 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v26 = type;
        char v27 = os_log_type_enabled(v15, type);
        if (!backtrace_string)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446210;
            unsigned int v34 = "nw_framer_protocol_get_remote_endpoint";
            _os_log_impl( &dword_181A5C000,  v15,  v26,  "%{public}s called with null framer->parent_definition, no backtrace",  buf,  0xCu);
          }

          goto LABEL_64;
        }

        if (v27)
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v34 = "nw_framer_protocol_get_remote_endpoint";
          nw_endpoint_t v35 = 2082;
          unsigned int v36 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v15,  v26,  "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        goto LABEL_43;
      }
    }

    else
    {
      __nwlog_obj();
      id v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      unsigned int v34 = "nw_framer_protocol_get_remote_endpoint";
      id v14 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v31 = 0;
      if (__nwlog_fault(v14, &type, &v31))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          __int128 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          id v16 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            unsigned int v34 = "nw_framer_protocol_get_remote_endpoint";
            _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s called with null framer", buf, 0xCu);
          }

          goto LABEL_64;
        }

        if (!v31)
        {
          __nwlog_obj();
          __int128 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          unsigned int v29 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            unsigned int v34 = "nw_framer_protocol_get_remote_endpoint";
            _os_log_impl( &dword_181A5C000,  v15,  v29,  "%{public}s called with null framer, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_64;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        __int128 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = type;
        os_log_type_t v25 = os_log_type_enabled(v15, type);
        if (!backtrace_string)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446210;
            unsigned int v34 = "nw_framer_protocol_get_remote_endpoint";
            _os_log_impl(&dword_181A5C000, v15, v24, "%{public}s called with null framer, no backtrace", buf, 0xCu);
          }

          goto LABEL_64;
        }

        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v34 = "nw_framer_protocol_get_remote_endpoint";
          nw_endpoint_t v35 = 2082;
          unsigned int v36 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v15,  v24,  "%{public}s called with null framer, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        goto LABEL_65;
      }

      if (type == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v39 = (os_log_type_t)v43.receiver;
        if (os_log_type_enabled(v20, (os_log_type_t)v43.receiver))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v45 = "nw_endpoint_copy_registrar_for_identifier";
          _os_log_impl( &dword_181A5C000,  v20,  v39,  "%{public}s called with null identifier, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_64;
      }

      os_log_type_t v24 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v27 = (os_log_type_t)v43.receiver;
      id v28 = os_log_type_enabled(v20, (os_log_type_t)v43.receiver);
      if (!v24)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v45 = "nw_endpoint_copy_registrar_for_identifier";
          _os_log_impl(&dword_181A5C000, v20, v27, "%{public}s called with null identifier, no backtrace", buf, 0xCu);
        }

        goto LABEL_64;
      }

      if (v28)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v45 = "nw_endpoint_copy_registrar_for_identifier";
        os_log_type_t v46 = 2082;
        os_log_type_t v47 = v24;
        _os_log_impl( &dword_181A5C000,  v20,  v27,  "%{public}s called with null identifier, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_38;
    }
  }

  else
  {
    __nwlog_obj();
    __int16 v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v45 = "nw_endpoint_copy_registrar_for_identifier";
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v43.receiver) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v19, &v43, &type))
    {
      if (LOBYTE(v43.receiver) == 17)
      {
        __nwlog_obj();
        uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        nw_endpoint_t v21 = (os_log_type_t)v43.receiver;
        if (os_log_type_enabled(v20, (os_log_type_t)v43.receiver))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v45 = "nw_endpoint_copy_registrar_for_identifier";
          _os_log_impl(&dword_181A5C000, v20, v21, "%{public}s called with null endpoint", buf, 0xCu);
        }

        goto LABEL_64;
      }

      if (type == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v38 = (os_log_type_t)v43.receiver;
        if (os_log_type_enabled(v20, (os_log_type_t)v43.receiver))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v45 = "nw_endpoint_copy_registrar_for_identifier";
          _os_log_impl( &dword_181A5C000,  v20,  v38,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_64;
      }

      os_log_type_t v24 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = (os_log_type_t)v43.receiver;
      id v26 = os_log_type_enabled(v20, (os_log_type_t)v43.receiver);
      if (!v24)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v45 = "nw_endpoint_copy_registrar_for_identifier";
          _os_log_impl(&dword_181A5C000, v20, v25, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }

        goto LABEL_64;
      }

      if (v26)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v45 = "nw_endpoint_copy_registrar_for_identifier";
        os_log_type_t v46 = 2082;
        os_log_type_t v47 = v24;
        _os_log_impl( &dword_181A5C000,  v20,  v25,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    if (v18) {
      free(v18);
    }
    goto LABEL_14;
  }

  __nwlog_obj();
  os_log_type_t v22 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v47 = "__nw_protocol_finalize_output_frames";
  BOOL v23 = (char *)_os_log_send_and_compose_impl();

  v43[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v23, v43, &type))
  {
    if (v43[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = v43[0];
      if (os_log_type_enabled(v24, v43[0]))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v47 = "__nw_protocol_finalize_output_frames";
        _os_log_impl(&dword_181A5C000, v24, v25, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if (type)
    {
      nw_endpoint_t v35 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      unsigned int v36 = v43[0];
      os_log_type_t v37 = os_log_type_enabled(v24, v43[0]);
      if (v35)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v47 = "__nw_protocol_finalize_output_frames";
          char v48 = 2082;
          os_log_type_t v49 = v35;
          _os_log_impl( &dword_181A5C000,  v24,  v36,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v35);
        goto LABEL_72;
      }

      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v47 = "__nw_protocol_finalize_output_frames";
        _os_log_impl(&dword_181A5C000, v24, v36, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v41 = v43[0];
      if (os_log_type_enabled(v24, v43[0]))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v47 = "__nw_protocol_finalize_output_frames";
        _os_log_impl( &dword_181A5C000,  v24,  v41,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  if (v12) {
    free(v12);
  }
  uint64_t v10 = 0LL;
LABEL_112:

  return v10;
}

    if (v18) {
      free(v18);
    }
    goto LABEL_14;
  }

  __nwlog_obj();
  os_log_type_t v22 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v47 = "__nw_protocol_finalize_output_frames";
  BOOL v23 = (char *)_os_log_send_and_compose_impl();

  v43[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v23, v43, &type))
  {
    if (v43[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = v43[0];
      if (os_log_type_enabled(v24, v43[0]))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v47 = "__nw_protocol_finalize_output_frames";
        _os_log_impl(&dword_181A5C000, v24, v25, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if (type)
    {
      nw_endpoint_t v35 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      unsigned int v36 = v43[0];
      os_log_type_t v37 = os_log_type_enabled(v24, v43[0]);
      if (v35)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v47 = "__nw_protocol_finalize_output_frames";
          char v48 = 2082;
          os_log_type_t v49 = v35;
          _os_log_impl( &dword_181A5C000,  v24,  v36,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v35);
        goto LABEL_72;
      }

      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v47 = "__nw_protocol_finalize_output_frames";
        _os_log_impl(&dword_181A5C000, v24, v36, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v41 = v43[0];
      if (os_log_type_enabled(v24, v43[0]))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v47 = "__nw_protocol_finalize_output_frames";
        _os_log_impl( &dword_181A5C000,  v24,  v41,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

        goto LABEL_65;
      }

      if (!v38)
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        os_log_type_t v8 = (os_log_s *)(id)glistenerLogObj;
        unsigned int v29 = type;
        if (os_log_type_enabled(v8, type))
        {
          os_log_type_t v30 = nw_listener_get_id_string(*(void **)(a1 + 32));
          *(_DWORD *)buf = 136446466;
          os_log_type_t v41 = "nw_listener_set_advertise_endpoints_block_invoke";
          BOOL v42 = 2082;
          os_log_type_t v43 = v30;
          _os_log_impl( &dword_181A5C000,  v8,  v29,  "%{public}s [%{public}s] Called on listener with advertise descriptor set, backtrace limit exceeded",  buf,  0x16u);
        }

        goto LABEL_64;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
      }
      os_log_type_t v8 = (os_log_s *)(id)glistenerLogObj;
      BOOL v23 = type;
      os_log_type_t v24 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v24)
        {
          uint64_t v33 = nw_listener_get_id_string(*(void **)(a1 + 32));
          *(_DWORD *)buf = 136446466;
          os_log_type_t v41 = "nw_listener_set_advertise_endpoints_block_invoke";
          BOOL v42 = 2082;
          os_log_type_t v43 = v33;
          _os_log_impl( &dword_181A5C000,  v8,  v23,  "%{public}s [%{public}s] Called on listener with advertise descriptor set, no backtrace",  buf,  0x16u);
        }

        goto LABEL_64;
      }

      if (v24)
      {
        os_log_type_t v25 = nw_listener_get_id_string(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136446722;
        os_log_type_t v41 = "nw_listener_set_advertise_endpoints_block_invoke";
        BOOL v42 = 2082;
        os_log_type_t v43 = v25;
        BOOL v44 = 2082;
        os_log_type_t v45 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v8,  v23,  "%{public}s [%{public}s] Called on listener with advertise descriptor set, dumping backtrace:%{public}s",  buf,  0x20u);
      }

      goto LABEL_47;
    }

            xpc_dictionary_set_BOOL(v2, "server", 1);
            goto LABEL_65;
          }

    if (v30) {
      free(v30);
    }
    goto LABEL_16;
  }

  __nwlog_obj();
  os_log_type_t v25 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v58 = "nw_parameters_log_protocol_instances";
  id v26 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v55 = 0;
  if (__nwlog_fault(v26, &type, &v55))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        id v58 = "nw_parameters_log_protocol_instances";
        _os_log_impl(&dword_181A5C000, v27, v28, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v55)
    {
      os_log_type_t v45 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v46 = type;
      os_log_type_t v47 = os_log_type_enabled(v27, type);
      if (v45)
      {
        if (v47)
        {
          *(_DWORD *)buf = 136446466;
          id v58 = "nw_parameters_log_protocol_instances";
          char v59 = 2082;
          char v60 = v45;
          _os_log_impl( &dword_181A5C000,  v27,  v46,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v45);
        goto LABEL_59;
      }

      if (v47)
      {
        *(_DWORD *)buf = 136446210;
        id v58 = "nw_parameters_log_protocol_instances";
        _os_log_impl(&dword_181A5C000, v27, v46, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      unsigned int v51 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        id v58 = "nw_parameters_log_protocol_instances";
        _os_log_impl( &dword_181A5C000,  v27,  v51,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

        goto LABEL_65;
      }

      if (!v52)
      {
        __nwlog_obj();
        id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v43 = v53;
        if (os_log_type_enabled(v26, v53))
        {
          *(_DWORD *)buf = 136446210;
          char v55 = "nw_protocol_parameters_iterate_stack";
          _os_log_impl( &dword_181A5C000,  v26,  v43,  "%{public}s called with null iterator, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_64;
      }

      unsigned int v34 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v37 = v53;
      uint64_t v38 = os_log_type_enabled(v26, v53);
      if (!v34)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          char v55 = "nw_protocol_parameters_iterate_stack";
          _os_log_impl(&dword_181A5C000, v26, v37, "%{public}s called with null iterator, no backtrace", buf, 0xCu);
        }

        goto LABEL_64;
      }

      if (v38)
      {
        *(_DWORD *)buf = 136446466;
        char v55 = "nw_protocol_parameters_iterate_stack";
        __int16 v56 = 2082;
        __int16 v57 = v34;
        _os_log_impl( &dword_181A5C000,  v26,  v37,  "%{public}s called with null iterator, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_44;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v55 = "nw_protocol_parameters_iterate_stack";
    os_log_type_t v25 = (char *)_os_log_send_and_compose_impl();

    BOOL v53 = OS_LOG_TYPE_ERROR;
    os_log_type_t v52 = 0;
    if (__nwlog_fault(v25, &v53, &v52))
    {
      if (v53 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v27 = v53;
        if (os_log_type_enabled(v26, v53))
        {
          *(_DWORD *)buf = 136446210;
          char v55 = "nw_protocol_parameters_iterate_stack";
          _os_log_impl(&dword_181A5C000, v26, v27, "%{public}s called with null parameters", buf, 0xCu);
        }

        goto LABEL_64;
      }

      if (!v52)
      {
        __nwlog_obj();
        id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v42 = v53;
        if (os_log_type_enabled(v26, v53))
        {
          *(_DWORD *)buf = 136446210;
          char v55 = "nw_protocol_parameters_iterate_stack";
          _os_log_impl( &dword_181A5C000,  v26,  v42,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_64;
      }

      unsigned int v34 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      nw_endpoint_t v35 = v53;
      unsigned int v36 = os_log_type_enabled(v26, v53);
      if (!v34)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          char v55 = "nw_protocol_parameters_iterate_stack";
          _os_log_impl(&dword_181A5C000, v26, v35, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }

        goto LABEL_64;
      }

      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        char v55 = "nw_protocol_parameters_iterate_stack";
        __int16 v56 = 2082;
        __int16 v57 = v34;
        _os_log_impl( &dword_181A5C000,  v26,  v35,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_83;
    }

    unsigned int v29 = (os_log_s *)__nwlog_obj();
    os_log_type_t v30 = type;
    if (!os_log_type_enabled(v29, type)) {
      goto LABEL_83;
    }
    *(_DWORD *)buf = 136446210;
    unsigned int v51 = "nw_protocol_masque_remove_input_handler";
    os_log_type_t v31 = "%{public}s called with null protocol";
LABEL_82:
    _os_log_impl(&dword_181A5C000, v29, v30, v31, buf, 0xCu);
LABEL_83:
    if (v28) {
      free(v28);
    }
    return 0LL;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned int v51 = "nw_protocol_masque_remove_input_handler";
    id v28 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v29 = (os_log_s *)__nwlog_obj();
      os_log_type_t v30 = type;
      if (!os_log_type_enabled(v29, type)) {
        goto LABEL_83;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v51 = "nw_protocol_masque_remove_input_handler";
      os_log_type_t v31 = "%{public}s called with null masque";
      goto LABEL_82;
    }

    if (!v48)
    {
      unsigned int v29 = (os_log_s *)__nwlog_obj();
      os_log_type_t v30 = type;
      if (!os_log_type_enabled(v29, type)) {
        goto LABEL_83;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v51 = "nw_protocol_masque_remove_input_handler";
      os_log_type_t v31 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_82;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    unsigned int v29 = (os_log_s *)__nwlog_obj();
    os_log_type_t v30 = type;
    unsigned int v36 = os_log_type_enabled(v29, type);
    if (backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        unsigned int v51 = "nw_protocol_masque_remove_input_handler";
        os_log_type_t v52 = 2082;
        BOOL v53 = backtrace_string;
        nw_endpoint_t v35 = "%{public}s called with null masque, dumping backtrace:%{public}s";
        goto LABEL_63;
      }

      goto LABEL_64;
    }

    if (!v36) {
      goto LABEL_83;
    }
    *(_DWORD *)buf = 136446210;
    unsigned int v51 = "nw_protocol_masque_remove_input_handler";
    os_log_type_t v31 = "%{public}s called with null masque, no backtrace";
    goto LABEL_82;
  }

  if ((handle[529] & 1) == 0 && gLogDatapath)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
    }
    unsigned int v32 = (os_log_s *)gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      unsigned int v51 = "nw_protocol_masque_remove_input_handler";
      os_log_type_t v52 = 2082;
      BOOL v53 = handle + 531;
      os_log_type_t v54 = 2080;
      char v55 = " ";
      _os_log_impl(&dword_181A5C000, v32, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
    }
  }

  if (!a2) {
    return 0LL;
  }
  if (a2->output_handler == a1) {
    nw_protocol_set_output_handler((uint64_t)a2, 0LL);
  }
  if (a1->default_input_handler != a2)
  {
    output_handler_context = a2->output_handler_context;
    if (output_handler_context)
    {
      a2->output_handler_context = 0LL;
      nw_protocol_set_output_handler((uint64_t)a2, 0LL);
      os_log_type_t v8 = output_handler_context[4];
      if (v8)
      {
        do
        {
          __int128 v9 = *(void *)(v8 + 32);
          nw_frame_finalize(v8);
          os_log_type_t v8 = v9;
        }

        while (v9);
      }

      uint64_t v10 = (void *)output_handler_context[6];
      if (v10)
      {
        os_release(v10);
        output_handler_context[6] = 0LL;
      }

      goto LABEL_37;
    }

    return 0LL;
  }

  nw_protocol_set_input_handler((uint64_t)a1, 0LL);
  nw_protocol_set_input_handler((uint64_t)(handle + 64), 0LL);
  BOOL v11 = *((void *)handle + 20);
  if (v11)
  {
    os_log_type_t v12 = *(void *)(v11 + 24);
    if (v12)
    {
      id v13 = *(void (**)(void))(v12 + 8);
      if (v13) {
        v13();
      }
    }
  }

  id v14 = *((void *)handle + 28);
  if (v14)
  {
    __int128 v15 = *(void *)(v14 + 24);
    if (v15)
    {
      id v16 = *(void (**)(void))(v15 + 8);
      if (v16) {
        v16();
      }
    }
  }

  __int16 v17 = *((void *)handle + 12);
  if (v17)
  {
    __int16 v18 = *(void *)(v17 + 24);
    if (v18)
    {
      uint64_t v19 = *(void (**)(void))(v18 + 8);
      if (v19) {
        v19();
      }
    }
  }

  uint64_t v20 = *((void *)handle + 4);
  if (v20)
  {
    nw_endpoint_t v21 = *(void *)(v20 + 24);
    if (v21)
    {
      os_log_type_t v22 = *(void (**)(void))(v21 + 8);
      if (v22) {
        v22();
      }
    }
  }

  BOOL v23 = (void *)*((void *)handle + 56);
  if (v23)
  {
    os_release(v23);
    *((void *)handle + 56) = 0LL;
  }

  os_log_type_t v24 = *((void *)handle + 55);
  if (!v24) {
    goto LABEL_37;
  }
  if (!*(void *)v24 || (os_log_type_t v25 = *(void (**)(void))(*(void *)v24 + 8LL)) == 0LL)
  {
    __nwlog_obj();
    os_log_type_t v37 = (char *)*((void *)handle + 55);
    *(_DWORD *)buf = 136446466;
    unsigned int v51 = "nw_protocol_masque_remove_input_handler";
    os_log_type_t v52 = 2048;
    BOOL v53 = v37;
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    os_log_type_t v47 = (char *)_os_log_send_and_compose_impl();
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v38 = (os_log_s *)__nwlog_obj();
      id v39 = type;
      if (!os_log_type_enabled(v38, type)) {
        goto LABEL_91;
      }
      uint64_t v40 = (char *)*((void *)handle + 55);
      *(_DWORD *)buf = 136446466;
      unsigned int v51 = "nw_protocol_masque_remove_input_handler";
      os_log_type_t v52 = 2048;
      BOOL v53 = v40;
      os_log_type_t v41 = "%{public}s listen protocol (%p) has invalid disconnected callback";
    }

    else if (v48)
    {
      BOOL v42 = (char *)__nw_create_backtrace_string();
      uint64_t v38 = (os_log_s *)__nwlog_obj();
      id v39 = type;
      os_log_type_t v43 = os_log_type_enabled(v38, type);
      if (v42)
      {
        if (v43)
        {
          BOOL v44 = (char *)*((void *)handle + 55);
          *(_DWORD *)buf = 136446722;
          unsigned int v51 = "nw_protocol_masque_remove_input_handler";
          os_log_type_t v52 = 2048;
          BOOL v53 = v44;
          os_log_type_t v54 = 2082;
          char v55 = v42;
          _os_log_impl( &dword_181A5C000,  v38,  v39,  "%{public}s listen protocol (%p) has invalid disconnected callback, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v42);
        goto LABEL_91;
      }

      if (!v43)
      {
LABEL_91:
        if (v47) {
          free(v47);
        }
        goto LABEL_36;
      }

      os_log_type_t v46 = (char *)*((void *)handle + 55);
      *(_DWORD *)buf = 136446466;
      unsigned int v51 = "nw_protocol_masque_remove_input_handler";
      os_log_type_t v52 = 2048;
      BOOL v53 = v46;
      os_log_type_t v41 = "%{public}s listen protocol (%p) has invalid disconnected callback, no backtrace";
    }

    else
    {
      uint64_t v38 = (os_log_s *)__nwlog_obj();
      id v39 = type;
      if (!os_log_type_enabled(v38, type)) {
        goto LABEL_91;
      }
      os_log_type_t v45 = (char *)*((void *)handle + 55);
      *(_DWORD *)buf = 136446466;
      unsigned int v51 = "nw_protocol_masque_remove_input_handler";
      os_log_type_t v52 = 2048;
      BOOL v53 = v45;
      os_log_type_t v41 = "%{public}s listen protocol (%p) has invalid disconnected callback, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v38, v39, v41, buf, 0x16u);
    goto LABEL_91;
  }

  v25();
LABEL_36:
  *((void *)handle + 55) = 0LL;
LABEL_37:
  if (a3)
  {
    if (!a1->default_input_handler)
    {
      id v26 = *((void *)handle + 60);
      if (!v26 || !*(_DWORD *)(v26 + 40)) {
        nw_masque_protocol_destroy((uint64_t)handle);
      }
    }
  }

  return 1LL;
}

          os_release(v24);
          nw_frame_finalize(a2);
          os_release(v26);
          return 1LL;
        }

        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_deliver_failure_message";
        char v55 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        nw_endpoint_t v61 = 0;
        if (__nwlog_fault(v55, &type, &v61))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __int16 v56 = (os_log_s *)__nwlog_obj();
            __int16 v57 = type;
            if (!os_log_type_enabled(v56, type)) {
              goto LABEL_97;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_deliver_failure_message";
            id v58 = "%{public}s called with null ohttp";
            goto LABEL_96;
          }

          if (!v61)
          {
            __int16 v56 = (os_log_s *)__nwlog_obj();
            __int16 v57 = type;
            if (!os_log_type_enabled(v56, type)) {
              goto LABEL_97;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_deliver_failure_message";
            id v58 = "%{public}s called with null ohttp, backtrace limit exceeded";
            goto LABEL_96;
          }

          backtrace_string = (char *)__nw_create_backtrace_string();
          __int16 v56 = (os_log_s *)__nwlog_obj();
          __int16 v57 = type;
          char v60 = os_log_type_enabled(v56, type);
          if (backtrace_string)
          {
            if (v60)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_deliver_failure_message";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v56,  v57,  "%{public}s called with null ohttp, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(backtrace_string);
            goto LABEL_97;
          }

          if (v60)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_deliver_failure_message";
            id v58 = "%{public}s called with null ohttp, no backtrace";
LABEL_96:
            _os_log_impl(&dword_181A5C000, v56, v57, v58, buf, 0xCu);
          }
        }

    if (v25) {
      free(v25);
    }
    __int128 v9 = 0;
    goto LABEL_26;
  }

  __nwlog_obj();
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)id v39 = 136446210;
  *(void *)&v39[4] = "nw_endpoint_handler_fillout_tcp_info";
  nw_endpoint_t v21 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  type[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v21, buf, type))
  {
    if (buf[0] == 17)
    {
      __nwlog_obj();
      os_log_type_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v23 = buf[0];
      if (os_log_type_enabled(v22, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)id v39 = 136446210;
        *(void *)&v39[4] = "nw_endpoint_handler_fillout_tcp_info";
        _os_log_impl(&dword_181A5C000, v22, v23, "%{public}s called with null handler", v39, 0xCu);
      }
    }

    else if (type[0])
    {
      id v28 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      unsigned int v29 = buf[0];
      os_log_type_t v30 = os_log_type_enabled(v22, (os_log_type_t)buf[0]);
      if (v28)
      {
        if (v30)
        {
          *(_DWORD *)id v39 = 136446466;
          *(void *)&v39[4] = "nw_endpoint_handler_fillout_tcp_info";
          *(_WORD *)&v39[12] = 2082;
          *(void *)&v39[14] = v28;
          _os_log_impl( &dword_181A5C000,  v22,  v29,  "%{public}s called with null handler, dumping backtrace:%{public}s",  v39,  0x16u);
        }

        free(v28);
        goto LABEL_55;
      }

      if (v30)
      {
        *(_DWORD *)id v39 = 136446210;
        *(void *)&v39[4] = "nw_endpoint_handler_fillout_tcp_info";
        _os_log_impl(&dword_181A5C000, v22, v29, "%{public}s called with null handler, no backtrace", v39, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      unsigned int v34 = buf[0];
      if (os_log_type_enabled(v22, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)id v39 = 136446210;
        *(void *)&v39[4] = "nw_endpoint_handler_fillout_tcp_info";
        _os_log_impl( &dword_181A5C000,  v22,  v34,  "%{public}s called with null handler, backtrace limit exceeded",  v39,  0xCu);
      }
    }
  }

    if (v23) {
      free(v23);
    }
    *((_DWORD *)handle + 114) = 0;
    goto LABEL_67;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_input_handler";
  uint64_t v110 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v137[0]) = 0;
  if (type[0] != OS_LOG_TYPE_FAULT)
  {
    if (!LOBYTE(v137[0]))
    {
      id v111 = (os_log_s *)__nwlog_obj();
      int v112 = type[0];
      if (os_log_type_enabled(v111, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_input_handler";
        uint64_t v113 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
        goto LABEL_243;
      }

      goto LABEL_244;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    id v111 = (os_log_s *)__nwlog_obj();
    int v112 = type[0];
    uint64_t v119 = os_log_type_enabled(v111, type[0]);
    if (!backtrace_string)
    {
      if (v119)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_input_handler";
        uint64_t v113 = "%{public}s called with null webtransport_stream, no backtrace";
        goto LABEL_243;
      }

      goto LABEL_244;
    }

    if (v119)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_input_handler";
      os_log_type_t v151 = 2082;
      os_log_type_t v152 = backtrace_string;
      nw_endpoint_t v116 = "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s";
      goto LABEL_218;
    }

    _os_log_impl(&dword_181A5C000, v24, v25, v26, buf, 0xCu);
    goto LABEL_65;
  }

  handle = (char *)a1->handle;
  if (handle)
  {
    if ((handle[548] & 2) == 0)
    {
      if (gLogDatapath)
      {
        id v28 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          unsigned int v29 = *((_DWORD *)handle + 115);
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_disconnected";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = handle + 464;
          *(_WORD *)&_BYTE buf[22] = 2080;
          os_log_type_t v37 = " ";
          *(_WORD *)uint64_t v38 = 1024;
          *(_DWORD *)&v38[2] = v29;
          id v39 = 2048;
          uint64_t v40 = a2;
          _os_log_impl( &dword_181A5C000,  v28,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> called, with other_protocol: %p",  buf,  0x30u);
        }
      }
    }

    if (*((_DWORD *)handle + 111) == 5)
    {
      if ((handle[548] & 2) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v3 = (os_log_s *)gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          size_t v4 = *((_DWORD *)handle + 115);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_terminate";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = handle + 464;
          *(_WORD *)&_BYTE buf[22] = 2080;
          os_log_type_t v37 = " ";
          *(_WORD *)uint64_t v38 = 1024;
          *(_DWORD *)&v38[2] = v4;
          _os_log_impl( &dword_181A5C000,  v3,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> Session already terminated, ignoring",  buf,  0x26u);
        }
      }

      return;
    }

    id v5 = *((_DWORD *)handle + 113);
    if (v5)
    {
      if ((handle[548] & 2) != 0) {
        goto LABEL_17;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v6 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
        goto LABEL_17;
      }
      id v7 = *((_DWORD *)handle + 115);
      *(_DWORD *)buf = 136447234;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_terminate";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = handle + 464;
      *(_WORD *)&_BYTE buf[22] = 2080;
      os_log_type_t v37 = " ";
      *(_WORD *)uint64_t v38 = 1024;
      *(_DWORD *)&v38[2] = v7;
      id v39 = 1024;
      LODWORD(v40) = v5;
      os_log_type_t v8 = "%{public}s %{public}s%s<i%u> Closing webtransport session with error %{darwin.errno}d";
      __int128 v9 = (os_log_s *)v6;
      uint64_t v10 = 44;
    }

    else
    {
      if ((handle[548] & 2) != 0) {
        goto LABEL_17;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v11 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
        goto LABEL_17;
      }
      os_log_type_t v12 = *((_DWORD *)handle + 115);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_terminate";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = handle + 464;
      *(_WORD *)&_BYTE buf[22] = 2080;
      os_log_type_t v37 = " ";
      *(_WORD *)uint64_t v38 = 1024;
      *(_DWORD *)&v38[2] = v12;
      os_log_type_t v8 = "%{public}s %{public}s%s<i%u> Closing webtransport session without error";
      __int128 v9 = (os_log_s *)v11;
      uint64_t v10 = 38;
    }

    _os_log_impl(&dword_181A5C000, v9, OS_LOG_TYPE_INFO, v8, buf, v10);
LABEL_17:
    *((_DWORD *)handle + 111) = 5;
    id v13 = (char *)*((void *)handle + 23);
    if (v13)
    {
      *(void *)buf = MEMORY[0x1895F87A8];
      *(void *)&buf[8] = 0x40000000LL;
      *(void *)&buf[16] = ___ZL33nw_webtransport_session_terminateP23nw_webtransport_sessioni_block_invoke;
      os_log_type_t v37 = (const char *)&__block_descriptor_tmp_22_33505;
      *(_DWORD *)uint64_t v38 = v5;
      nw_hash_table_apply(v13, (uint64_t)buf);
    }

    id v14 = *((void *)handle + 53);
    if (v14)
    {
      __int128 v15 = *(void **)(v14 + 48);
      if (v5) {
        nw_protocol_error(*(void **)(v14 + 48), *((void *)handle + 53));
      }
      nw_protocol_disconnected(v15, v14);
    }

    id v16 = *((void *)handle + 41);
    if (v16)
    {
      if (v5)
      {
        do
        {
          __int16 v17 = *(void *)(v16 + 112);
          __int16 v18 = *(void **)(v16 + 48);
          nw_protocol_error(v18, v16);
          uint64_t v19 = v16;
          id v16 = v17;
          nw_protocol_disconnected(v18, v19);
        }

        while (v17);
      }

      else
      {
        do
        {
          uint64_t v20 = *(void *)(v16 + 112);
          nw_protocol_disconnected(*(void **)(v16 + 48), v16);
          id v16 = v20;
        }

        while (v20);
      }
    }

    nw_endpoint_t v21 = *((void *)handle + 52);
    if (v21)
    {
      os_log_type_t v22 = *(void **)(v21 + 48);
      if (v5) {
        nw_protocol_error(*(void **)(v21 + 48), *((void *)handle + 52));
      }
      nw_protocol_disconnected(v22, v21);
    }

    if (*((void *)handle + 4))
    {
      nw_protocol_remove_instance((uint64_t)handle);
      nw_protocol_disconnect(*((void **)handle + 4), (uint64_t)handle);
    }

    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_disconnected";
  BOOL v23 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  unsigned int v34 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v24 = (os_log_s *)__nwlog_obj();
    os_log_type_t v25 = type;
    if (!os_log_type_enabled(v24, type)) {
      goto LABEL_65;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_disconnected";
    id v26 = "%{public}s called with null webtransport_session";
    goto LABEL_64;
  }

  if (!v34)
  {
    os_log_type_t v24 = (os_log_s *)__nwlog_obj();
    os_log_type_t v25 = type;
    if (!os_log_type_enabled(v24, type)) {
      goto LABEL_65;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_disconnected";
    id v26 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
    goto LABEL_64;
  }

  unsigned int v32 = (char *)__nw_create_backtrace_string();
  os_log_type_t v24 = (os_log_s *)__nwlog_obj();
  os_log_type_t v25 = type;
  uint64_t v33 = os_log_type_enabled(v24, type);
  if (!v32)
  {
    if (!v33) {
      goto LABEL_65;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_disconnected";
    id v26 = "%{public}s called with null webtransport_session, no backtrace";
    goto LABEL_64;
  }

  if (v33)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_disconnected";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v32;
    _os_log_impl( &dword_181A5C000,  v24,  v25,  "%{public}s called with null webtransport_session, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v32);
  if (v23) {
    goto LABEL_66;
  }
}

  *(_BYTE *)(v5 + 192) = self->_useP2P;
  *(_WORD *)(v5 + 196) |= 0x4000u;
  has = (__int16)self->_has;
  if ((has & 0x1000) == 0)
  {
LABEL_13:
    if ((has & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_66;
  }

    goto LABEL_65;
  }

  uint64_t v6 = (unsigned int *)v4;
  id v7 = v6[29];

  if ((_DWORD)v7 != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v27 = (id)gLogObj;
    else {
      id v28 = off_189BBBBC0[v7];
    }
    *(_DWORD *)buf = 136446722;
    unsigned int v122 = "-[NWConcrete_nw_endpoint_fallback updatePathWithHandler:]";
    int v123 = 2082;
    unsigned int v124 = (void *)v28;
    id v125 = 2082;
    int v126 = "fallback";
    unsigned int v29 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v119 = 0;
    if (__nwlog_fault(v29, &type, &v119))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v30 = (os_log_s *)(id)gLogObj;
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v30, type))
        {
          else {
            unsigned int v32 = off_189BBBBC0[v7];
          }
          *(_DWORD *)buf = 136446722;
          unsigned int v122 = "-[NWConcrete_nw_endpoint_fallback updatePathWithHandler:]";
          int v123 = 2082;
          unsigned int v124 = (void *)v32;
          id v125 = 2082;
          int v126 = "fallback";
          _os_log_impl( &dword_181A5C000,  v30,  v31,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

      else if (v119)
      {
        uint64_t v33 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v30 = (os_log_s *)(id)gLogObj;
        unsigned int v34 = type;
        nw_endpoint_t v35 = os_log_type_enabled(v30, type);
        if (v33)
        {
          if (v35)
          {
            else {
              unsigned int v36 = off_189BBBBC0[v7];
            }
            *(_DWORD *)buf = 136446978;
            unsigned int v122 = "-[NWConcrete_nw_endpoint_fallback updatePathWithHandler:]";
            int v123 = 2082;
            unsigned int v124 = (void *)v36;
            id v125 = 2082;
            int v126 = "fallback";
            char v127 = 2082;
            nw_endpoint_t v128 = v33;
            _os_log_impl( &dword_181A5C000,  v30,  v34,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v33);
          if (!v29) {
            goto LABEL_93;
          }
LABEL_66:
          free(v29);
          goto LABEL_93;
        }

        if (v35)
        {
          else {
            id v39 = off_189BBBBC0[v7];
          }
          *(_DWORD *)buf = 136446722;
          unsigned int v122 = "-[NWConcrete_nw_endpoint_fallback updatePathWithHandler:]";
          int v123 = 2082;
          unsigned int v124 = (void *)v39;
          id v125 = 2082;
          int v126 = "fallback";
          _os_log_impl( &dword_181A5C000,  v30,  v34,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v30 = (os_log_s *)(id)gLogObj;
        os_log_type_t v37 = type;
        if (os_log_type_enabled(v30, type))
        {
          else {
            uint64_t v38 = off_189BBBBC0[v7];
          }
          *(_DWORD *)buf = 136446722;
          unsigned int v122 = "-[NWConcrete_nw_endpoint_fallback updatePathWithHandler:]";
          int v123 = 2082;
          unsigned int v124 = (void *)v38;
          id v125 = 2082;
          int v126 = "fallback";
          _os_log_impl( &dword_181A5C000,  v30,  v37,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }
      }

      goto LABEL_64;
    }

      _os_log_impl(&dword_181A5C000, v42, v43, v44, buf, 0xCu);
      goto LABEL_65;
    }

    --*v87;
LABEL_68:
    if ((*(_WORD *)(v36 + 204) & 0x100) == 0
      || (os_log_type_t v52 = (unsigned int (*)(uint64_t, void))v35[199]) == 0LL
      || v52(v36, *(void *)(v36 + 88)))
    {
      BOOL v53 = *(void **)(v36 + 112);
      if (v53) {
        free(v53);
      }
    }

    nw_frame_reset(v36, 0LL, 0, 0LL, 0LL);
    os_release((void *)v36);
    *(_DWORD *)buf = 0;
    nw_frame_array_get_frame_count((uint64_t *)a1, 0, buf);
    os_log_type_t v31 = *(_DWORD *)buf;
    if (*(_DWORD *)buf < 0x1000001u) {
      goto LABEL_39;
    }
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  nw_endpoint_t v61 = *v87;
  *(_DWORD *)buf = 136446722;
  uint64_t v91 = v34;
  nw_endpoint_t v92 = 1024;
  *(_DWORD *)uint64_t v93 = v31;
  *(_WORD *)&v93[4] = 1024;
  *(_DWORD *)&v93[6] = v61;
  os_log_type_t v62 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  id v88 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (v88)
    {
      __int16 v70 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v63 = (os_log_s *)gLogObj;
      __int16 v64 = type;
      os_log_type_t v71 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v70)
      {
        if (v71)
        {
          __int16 v72 = *v87;
          *(_DWORD *)buf = 136446978;
          uint64_t v91 = v34;
          nw_endpoint_t v92 = 1024;
          *(_DWORD *)uint64_t v93 = v31;
          *(_WORD *)&v93[4] = 1024;
          *(_DWORD *)&v93[6] = v72;
          *(_WORD *)&v93[10] = 2082;
          *(void *)&v93[12] = v70;
          _os_log_impl( &dword_181A5C000,  v63,  v64,  "%{public}s no more frames in frame cache, we thought we had %u bytes in %u frames, dumping backtrace:%{public}s",  buf,  0x22u);
        }

        free(v70);
        goto LABEL_106;
      }

      if (!v71) {
        goto LABEL_106;
      }
      __int16 v76 = *v87;
      *(_DWORD *)buf = 136446722;
      uint64_t v91 = v34;
      nw_endpoint_t v92 = 1024;
      *(_DWORD *)uint64_t v93 = v31;
      *(_WORD *)&v93[4] = 1024;
      *(_DWORD *)&v93[6] = v76;
      __int16 v66 = "%{public}s no more frames in frame cache, we thought we had %u bytes in %u frames, no backtrace";
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v63 = (os_log_s *)gLogObj;
      __int16 v64 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_106;
      }
      __int16 v74 = *v87;
      *(_DWORD *)buf = 136446722;
      uint64_t v91 = v34;
      nw_endpoint_t v92 = 1024;
      *(_DWORD *)uint64_t v93 = v31;
      *(_WORD *)&v93[4] = 1024;
      *(_DWORD *)&v93[6] = v74;
      __int16 v66 = "%{public}s no more frames in frame cache, we thought we had %u bytes in %u frames, backtrace limit exceeded";
    }

    os_log_type_t v47 = MEMORY[0x1895F87A8];
    *(void *)buf = MEMORY[0x1895F87A8];
    *(void *)&buf[8] = 0x40000000LL;
    *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39716;
    int v209 = (uint64_t)&__block_descriptor_tmp_55_39717;
    *(void *)__int128 v210 = v46 + 616;
    v210[8] = 0;
    char v48 = *(void *)(v46 + 616);
    do
    {
      if (!v48) {
        break;
      }
      os_log_type_t v49 = *(void *)(v48 + 32);
      int v50 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
      char v48 = v49;
    }

    while ((v50 & 1) != 0);
    if ((*(_BYTE *)(v46 + 158) & 1) == 0)
    {
      if (!*((_BYTE *)v12 + 1537)) {
        goto LABEL_69;
      }
      os_log_type_t v152 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v152, OS_LOG_TYPE_DEBUG))
      {
        BOOL v153 = *(void *)(v46 + 488);
        os_log_type_t v154 = *(_DWORD *)(*(void *)(v46 + 480) + 372LL);
        id v155 = *(_DWORD *)(v46 + 860);
        if (v153) {
          LODWORD(v153) = *(_DWORD *)(v153 + 424);
        }
        *(_DWORD *)buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v46 + 74;
        *(_WORD *)&_BYTE buf[22] = 2080;
        int v209 = (uint64_t)" ";
        *(_WORD *)__int128 v210 = 1024;
        *(_DWORD *)&v210[2] = v154;
        *(_WORD *)&v210[6] = 1024;
        *(_DWORD *)&v210[8] = v155;
        *(_WORD *)&v210[12] = 1024;
        *(_DWORD *)&v210[14] = v153;
        _os_log_impl( &dword_181A5C000,  v152,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> finalizing processed_input_frames",  buf,  0x32u);
      }
    }

    if (*((_BYTE *)v12 + 1537))
    {
      os_log_type_t v156 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v156, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(type) = 136446210;
        *(void *)((char *)&type + 4) = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_181A5C000, v156, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&type, 0xCu);
      }
    }

        goto LABEL_65;
      }
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    nw_endpoint_t v21 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v40 = "handleSetNetworkdSetting";
      os_log_type_t v41 = 2114;
      *(void *)BOOL v42 = v9;
      _os_log_impl( &dword_181A5C000,  v21,  OS_LOG_TYPE_DEFAULT,  "%{public}s new value is the same, will not save settings for %{public}@",  buf,  0x16u);
    }

    goto LABEL_32;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v10 = (id)gLogObj;
  if (os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v40 = "handleSetNetworkdSetting";
    os_log_type_t v41 = 1024;
    *(_DWORD *)BOOL v42 = [v1 pid];
    _os_log_impl( &dword_181A5C000,  (os_log_t)v10,  OS_LOG_TYPE_ERROR,  "%{public}s pid %d sent us NULL settings key",  buf,  0x12u);
  }

  BOOL v11 = 22LL;
LABEL_34:

  return v11;
}

  if ((v8 & 0x3FFFFFFFFFFFFFFELL) == 2)
  {
    if (!v14) {
      goto LABEL_148;
    }
    while (1)
    {
      uint64_t v40 = *v13;
      if (v40 <= 0x3F)
      {
        os_log_type_t v41 = 1LL;
        goto LABEL_74;
      }

      if (v40 >> 6 == 2)
      {
        if (v14 < 4) {
          return 0LL;
        }
        uint64_t v40 = bswap32(*(_DWORD *)v13 & 0xFFFFFF7F);
        os_log_type_t v41 = 4LL;
LABEL_74:
        BOOL v42 = &v13[v41];
        os_log_type_t v43 = v14 - v41;
        if (!v40) {
          break;
        }
        goto LABEL_75;
      }

      if (v40 >> 6 == 1)
      {
        if (v14 < 2) {
          return 0LL;
        }
        uint64_t v40 = bswap32(*(_WORD *)v13 & 0xFFBF) >> 16;
        os_log_type_t v41 = 2LL;
        goto LABEL_74;
      }

      if (v14 < 8) {
        return 0LL;
      }
      os_log_type_t v49 = *(void *)v13;
      BOOL v42 = v13 + 8;
      uint64_t v40 = bswap64(v49 & 0xFFFFFFFFFFFFFF3FLL);
      if (HIDWORD(v40)) {
        return 0LL;
      }
      os_log_type_t v43 = v14 - 8;
      if (!v40) {
        break;
      }
LABEL_75:
      BOOL v44 = v43 - v40;
      if (v43 <= v40) {
        return 0LL;
      }
      os_log_type_t v45 = &v42[v40];
      os_log_type_t v46 = v42[v40];
      if (v46 > 0x3F)
      {
        char v48 = v46 >> 6;
        if (v48 == 2)
        {
          if (v44 < 4) {
            return 0LL;
          }
          os_log_type_t v46 = bswap32(*(_DWORD *)v45 & 0xFFFFFF7F);
          os_log_type_t v47 = 4LL;
        }

        else if (v48 == 1)
        {
          if (v44 < 2) {
            return 0LL;
          }
          os_log_type_t v46 = bswap32(*(_WORD *)v45 & 0xFFBF) >> 16;
          os_log_type_t v47 = 2LL;
        }

        else
        {
          if (v44 < 8) {
            return 0LL;
          }
          os_log_type_t v46 = bswap64(*(void *)v45 & 0xFFFFFFFFFFFFFF3FLL);
          os_log_type_t v47 = 8LL;
        }
      }

      else
      {
        os_log_type_t v47 = 1LL;
      }

      int v50 = v44 - v47;
      if (HIDWORD(v46)) {
        unsigned int v51 = 0;
      }
      else {
        unsigned int v51 = v50 >= v46;
      }
      if (!v51) {
        return 0LL;
      }
      id v13 = &v45[v47 + v46];
      id v14 = v50 - v46;
      if (!v14) {
        goto LABEL_148;
      }
    }

    if (!v43)
    {
LABEL_148:
      __int16 v66 = 0LL;
      goto LABEL_149;
    }

    nw_endpoint_t v61 = 0LL;
    while (1)
    {
      os_log_type_t v62 = *v42;
      if (v62 <= 0x3F)
      {
        BOOL v63 = 1LL;
        goto LABEL_137;
      }

      if (v62 >> 6 == 1)
      {
        if (v43 < 2) {
          return 0LL;
        }
        os_log_type_t v62 = bswap32(*(_WORD *)v42 & 0xFFBF) >> 16;
        BOOL v63 = 2LL;
        goto LABEL_137;
      }

      if (v43 < 8) {
        return 0LL;
      }
      __int16 v68 = *(void *)v42;
      __int16 v64 = v42 + 8;
      os_log_type_t v62 = bswap64(v68 & 0xFFFFFFFFFFFFFF3FLL);
      if (HIDWORD(v62)) {
        return 0LL;
      }
      BOOL v63 = 8LL;
      if (!v62)
      {
LABEL_147:
        __int16 v66 = v61;
LABEL_149:
        if (a5) {
          *a5 = v66;
        }
        return 1LL;
      }

          free(v42);
          goto LABEL_75;
        }

        __nwlog_obj();
        size_t v82 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_service_connector_add_active_connection";
        BOOL v42 = (char *)_os_log_send_and_compose_impl();

        v100[0] = 16;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        if (v100[0] == 17)
        {
          __nwlog_obj();
          nw_endpoint_t v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v83 = v100[0];
          if (os_log_type_enabled(v80, (os_log_type_t)v100[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_service_connector_add_active_connection";
            _os_log_impl( &dword_181A5C000,  v80,  v83,  "%{public}s called with null serviceConnector->activeConnections",  buf,  0xCu);
          }

                if (v28) {
                  free(v28);
                }
                BOOL v42 = v69;
                if (!v69) {
                  goto LABEL_19;
                }
                char v48 = (void *)*((void *)v69 + 1);
                if (v48)
                {
                  free(v48);
                  v42[1] = 0LL;
                }

                BOOL v44 = (void *)v42[2];
                if (v44) {
                  goto LABEL_54;
                }
                goto LABEL_55;
              }

              if (v67)
              {
                os_log_type_t v37 = (char *)__nw_create_backtrace_string();
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                uint64_t v38 = (os_log_s *)gLogObj;
                id v39 = type;
                uint64_t v40 = os_log_type_enabled((os_log_t)gLogObj, type);
                if (v37)
                {
                  if (v40)
                  {
                    *(_DWORD *)buf = 136446978;
                    __int16 v72 = "copymptcpinfo";
                    int v73 = 1024;
                    *(_DWORD *)__int16 v74 = v12;
                    *(_WORD *)&void v74[4] = 1024;
                    *(_DWORD *)&v74[6] = a1;
                    LOWORD(v75) = 2082;
                    *(void *)((char *)&v75 + 2) = v37;
                    _os_log_impl( &dword_181A5C000,  v38,  v39,  "%{public}s NULL conninfo aux data for ifindex %u on fd %d, dumping backtrace:%{public}s",  buf,  0x22u);
                  }

                  free(v37);
                  goto LABEL_64;
                }

                if (!v40) {
                  goto LABEL_64;
                }
                *(_DWORD *)buf = 136446722;
                __int16 v72 = "copymptcpinfo";
                int v73 = 1024;
                *(_DWORD *)__int16 v74 = v12;
                *(_WORD *)&void v74[4] = 1024;
                *(_DWORD *)&v74[6] = a1;
                os_log_type_t v31 = v38;
                unsigned int v32 = v39;
                uint64_t v33 = "%{public}s NULL conninfo aux data for ifindex %u on fd %d, no backtrace";
              }

              else
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                os_log_type_t v46 = gLogObj;
                os_log_type_t v47 = type;
                if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
                  goto LABEL_64;
                }
                *(_DWORD *)buf = 136446722;
                __int16 v72 = "copymptcpinfo";
                int v73 = 1024;
                *(_DWORD *)__int16 v74 = v12;
                *(_WORD *)&void v74[4] = 1024;
                *(_DWORD *)&v74[6] = a1;
                os_log_type_t v31 = (os_log_s *)v46;
                unsigned int v32 = v47;
                uint64_t v33 = "%{public}s NULL conninfo aux data for ifindex %u on fd %d, backtrace limit exceeded";
              }

  if (v15) {
    free(v15);
  }
  uint64_t v10 = 0LL;
LABEL_47:

  return v10;
}

      free(v35);
      if (!v21) {
        return;
      }
LABEL_95:
      free(v21);
      return;
    }

    os_log_type_t v22 = (os_log_s *)__nwlog_obj();
    BOOL v23 = type;
    if (!os_log_type_enabled(v22, type)) {
      goto LABEL_94;
    }
    *(_DWORD *)buf = 136446210;
    unsigned int v51 = "nw_protocol_http3_stream_error";
    os_log_type_t v24 = "%{public}s called with null http3_stream";
LABEL_93:
    _os_log_impl(&dword_181A5C000, v22, v23, v24, buf, 0xCu);
    goto LABEL_94;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned int v51 = "nw_protocol_http3_stream_error";
    nw_endpoint_t v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v22 = (os_log_s *)__nwlog_obj();
      BOOL v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_94;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v51 = "nw_protocol_http3_stream_error";
      os_log_type_t v24 = "%{public}s called with null other_protocol";
      goto LABEL_93;
    }

    if (!v48)
    {
      os_log_type_t v22 = (os_log_s *)__nwlog_obj();
      BOOL v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_94;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v51 = "nw_protocol_http3_stream_error";
      os_log_type_t v24 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_93;
    }

    nw_endpoint_t v35 = (char *)__nw_create_backtrace_string();
    os_log_type_t v22 = (os_log_s *)__nwlog_obj();
    BOOL v23 = type;
    uint64_t v38 = os_log_type_enabled(v22, type);
    if (!v35)
    {
      if (!v38) {
        goto LABEL_94;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v51 = "nw_protocol_http3_stream_error";
      os_log_type_t v24 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_93;
    }

    if (v38)
    {
      *(_DWORD *)buf = 136446466;
      unsigned int v51 = "nw_protocol_http3_stream_error";
      os_log_type_t v52 = 2082;
      BOOL v53 = v35;
      os_log_type_t v37 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_63;
    }

    goto LABEL_64;
  }

  if ((handle[92] & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      os_log_type_t v25 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        id v26 = *(_DWORD *)(handle[42] + 1280LL);
        char v27 = handle[30];
        *(_DWORD *)buf = 136447234;
        unsigned int v51 = "nw_protocol_http3_stream_error";
        os_log_type_t v52 = 2082;
        BOOL v53 = (char *)handle + 636;
        os_log_type_t v54 = 2080;
        char v55 = " ";
        __int16 v56 = 1024;
        __int16 v57 = v26;
        id v58 = 2048;
        char v59 = v27;
        _os_log_impl(&dword_181A5C000, v25, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%llu> called", buf, 0x30u);
      }
    }
  }

  if (a3 == 35)
  {
    if ((handle[92] & 0x800) == 0)
    {
      if (gLogDatapath)
      {
        id v39 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v40 = *(_DWORD *)(handle[42] + 1280LL);
          os_log_type_t v41 = handle[30];
          *(_DWORD *)buf = 136447234;
          unsigned int v51 = "nw_protocol_http3_stream_error";
          os_log_type_t v52 = 2082;
          BOOL v53 = (char *)handle + 636;
          os_log_type_t v54 = 2080;
          char v55 = " ";
          __int16 v56 = 1024;
          __int16 v57 = v40;
          id v58 = 2048;
          char v59 = v41;
          _os_log_impl( &dword_181A5C000,  v39,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> early data rejected",  buf,  0x30u);
        }
      }
    }

    default_input_handler = a1->default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        int error = (void (*)(void))callbacks->error;
        if (error) {
          goto LABEL_16;
        }
      }
    }

    __nwlog_obj();
    BOOL v11 = a1->default_input_handler;
    os_log_type_t v12 = "invalid";
    if (v11)
    {
      identifier = v11->identifier;
      if (identifier) {
        os_log_type_t v12 = (const char *)identifier;
      }
    }

    *(_DWORD *)buf = 136446466;
    unsigned int v51 = "nw_protocol_http3_stream_error";
    os_log_type_t v52 = 2082;
    BOOL v53 = (char *)v12;
    id v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int128 v15 = (os_log_s *)__nwlog_obj();
      id v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_85;
      }
      __int16 v17 = a1->default_input_handler;
      __int16 v18 = "invalid";
      if (v17)
      {
        uint64_t v19 = v17->identifier;
        if (v19) {
          __int16 v18 = (const char *)v19;
        }
      }

      *(_DWORD *)buf = 136446466;
      unsigned int v51 = "nw_protocol_http3_stream_error";
      os_log_type_t v52 = 2082;
      BOOL v53 = (char *)v18;
      uint64_t v20 = "%{public}s protocol %{public}s has invalid error callback";
    }

    else if (v48)
    {
      id v28 = (char *)__nw_create_backtrace_string();
      __int128 v15 = (os_log_s *)__nwlog_obj();
      id v16 = type;
      unsigned int v29 = os_log_type_enabled(v15, type);
      if (v28)
      {
        if (v29)
        {
          os_log_type_t v30 = a1->default_input_handler;
          os_log_type_t v31 = "invalid";
          if (v30)
          {
            unsigned int v32 = v30->identifier;
            if (v32) {
              os_log_type_t v31 = (const char *)v32;
            }
          }

          *(_DWORD *)buf = 136446722;
          unsigned int v51 = "nw_protocol_http3_stream_error";
          os_log_type_t v52 = 2082;
          BOOL v53 = (char *)v31;
          os_log_type_t v54 = 2082;
          char v55 = v28;
          _os_log_impl( &dword_181A5C000,  v15,  v16,  "%{public}s protocol %{public}s has invalid error callback, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v28);
        goto LABEL_85;
      }

      if (!v29)
      {
LABEL_85:
        if (v14) {
          free(v14);
        }
        return;
      }

      os_log_type_t v45 = a1->default_input_handler;
      os_log_type_t v46 = "invalid";
      if (v45)
      {
        os_log_type_t v47 = v45->identifier;
        if (v47) {
          os_log_type_t v46 = (const char *)v47;
        }
      }

      *(_DWORD *)buf = 136446466;
      unsigned int v51 = "nw_protocol_http3_stream_error";
      os_log_type_t v52 = 2082;
      BOOL v53 = (char *)v46;
      uint64_t v20 = "%{public}s protocol %{public}s has invalid error callback, no backtrace";
    }

    else
    {
      __int128 v15 = (os_log_s *)__nwlog_obj();
      id v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_85;
      }
      BOOL v42 = a1->default_input_handler;
      os_log_type_t v43 = "invalid";
      if (v42)
      {
        BOOL v44 = v42->identifier;
        if (v44) {
          os_log_type_t v43 = (const char *)v44;
        }
      }

      *(_DWORD *)buf = 136446466;
      unsigned int v51 = "nw_protocol_http3_stream_error";
      os_log_type_t v52 = 2082;
      BOOL v53 = (char *)v43;
      uint64_t v20 = "%{public}s protocol %{public}s has invalid error callback, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v15, v16, v20, buf, 0x16u);
    goto LABEL_85;
  }

  nw_http3_stream_get_application_error((uint64_t)handle);
  __int128 v9 = a1->default_input_handler;
  if (v9)
  {
    uint64_t v10 = v9->callbacks;
    if (v10)
    {
      int error = (void (*)(void))v10->error;
      if (error) {
LABEL_16:
      }
        error();
    }
  }

  os_log_type_t v30 = (char *)malloc_zone_calloc((malloc_zone_t *)g_slab_zone, 1uLL, 0x190uLL);
  if (v30)
  {
    if (!v152) {
      goto LABEL_67;
    }
    goto LABEL_66;
  }

  char v108 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v108, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  os_log_type_t v156 = "strict_malloc_zone_calloc";
  v157 = 2048;
  *(void *)nw_endpoint_t v158 = 1LL;
  *(_WORD *)&v158[8] = 2048;
  *(void *)os_log_type_t v159 = 400LL;
  int v109 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v109);
  if (result) {
    goto LABEL_216;
  }
  free(v109);
  if (v152)
  {
LABEL_66:
    dispatch_retain(v152);
    *((void *)v30 + 34) = v152;
  }

      if (!v37)
      {
LABEL_66:
        uint64_t v19 = 0LL;
        __int16 v18 = v174;
        unsigned int v36 = v175;
        goto LABEL_67;
      }

LABEL_65:
        if (!v16)
        {
LABEL_67:
          browse = 0LL;
          goto LABEL_68;
        }

    if (!v42) {
      goto LABEL_38;
    }
    os_log_type_t v37 = (char *)v42;
    goto LABEL_37;
  }

  id v5 = v3;
  uint64_t v6 = [v5 type];

  if (v6 == 1)
  {
    id v7 = (int *)v5;
    if (v4) {
      os_log_type_t v8 = nw_path_copy_interface(v4);
    }
    else {
      os_log_type_t v8 = 0LL;
    }
    os_log_type_t v22 = v8;
    BOOL v23 = v22;
    os_log_type_t v24 = *((unsigned __int8 *)v7 + 233);
    if (v24 == 30)
    {
      if (v7[60] || v7[61] || v7[62] != -65536) {
        goto LABEL_28;
      }
      os_log_type_t v25 = v7 + 63;
    }

    else
    {
      if (v24 != 2) {
        goto LABEL_28;
      }
      os_log_type_t v25 = v7 + 59;
    }

    id v26 = *v25;
    if (*v25 == -1) {
      goto LABEL_45;
    }
    if (v22)
    {
      char v27 = (char *)v22;
      id v28 = v27;
      unsigned int v29 = *(_WORD *)(v27 + 85);
      if ((v29 & 0x80) != 0) {
        os_log_type_t v30 = *((_DWORD *)v27 + 18);
      }
      else {
        os_log_type_t v30 = 0;
      }

      uint64_t v38 = v28;
      if ((*(_WORD *)(v28 + 85) & 0x100) == 0)
      {

        os_log_type_t v31 = 0LL;
        goto LABEL_46;
      }

      id v39 = v38[19];

      if (v26 != v39)
      {
        os_log_type_t v31 = 0LL;
        if ((v29 & 0x80) == 0 || (v39 & v30) != v26) {
          goto LABEL_46;
        }
      }

        goto LABEL_65;
      }

      if (!v44)
      {
        __nwlog_obj();
        os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v47 = "nw_oblivious_http_serialize_options";
          unsigned int v32 = "%{public}s called with null existing_handle, backtrace limit exceeded";
          goto LABEL_63;
        }

        goto LABEL_64;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v31 = type;
      os_log_type_t v41 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v47 = "nw_oblivious_http_serialize_options";
          unsigned int v32 = "%{public}s called with null existing_handle, no backtrace";
          goto LABEL_63;
        }

        goto LABEL_64;
      }

      if (!v41) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v47 = "nw_oblivious_http_serialize_options";
      char v48 = 2082;
      os_log_type_t v49 = (uint64_t)backtrace_string;
      BOOL v42 = "%{public}s called with null existing_handle, dumping backtrace:%{public}s";
      goto LABEL_53;
    }

    if (v20) {
      free(v20);
    }
    goto LABEL_9;
  }

  __nwlog_obj();
  __int128 v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v39 = "nw_http_metadata_set_request";
  id v16 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  unsigned int v36 = 0;
  if (__nwlog_fault(v16, &type, &v36))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        id v39 = "nw_http_metadata_set_request";
        _os_log_impl(&dword_181A5C000, v17, v18, "%{public}s metadata must be http", buf, 0xCu);
      }
    }

    else if (v36)
    {
      id v26 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v27 = type;
      id v28 = os_log_type_enabled(v17, type);
      if (v26)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          id v39 = "nw_http_metadata_set_request";
          uint64_t v40 = 2082;
          os_log_type_t v41 = v26;
          _os_log_impl( &dword_181A5C000,  v17,  v27,  "%{public}s metadata must be http, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v26);
        goto LABEL_59;
      }

      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        id v39 = "nw_http_metadata_set_request";
        _os_log_impl(&dword_181A5C000, v17, v27, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v33 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        id v39 = "nw_http_metadata_set_request";
        _os_log_impl( &dword_181A5C000,  v17,  v33,  "%{public}s metadata must be http, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

    if (v20) {
      free(v20);
    }
    goto LABEL_9;
  }

  __nwlog_obj();
  __int128 v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v39 = "nw_http_metadata_enumerate_modern_header_fields_combined";
  id v16 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  unsigned int v36 = 0;
  if (__nwlog_fault(v16, &type, &v36))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        id v39 = "nw_http_metadata_enumerate_modern_header_fields_combined";
        _os_log_impl(&dword_181A5C000, v17, v18, "%{public}s metadata must be http", buf, 0xCu);
      }
    }

    else if (v36)
    {
      id v26 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v27 = type;
      id v28 = os_log_type_enabled(v17, type);
      if (v26)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          id v39 = "nw_http_metadata_enumerate_modern_header_fields_combined";
          uint64_t v40 = 2082;
          os_log_type_t v41 = v26;
          _os_log_impl( &dword_181A5C000,  v17,  v27,  "%{public}s metadata must be http, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v26);
        goto LABEL_59;
      }

      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        id v39 = "nw_http_metadata_enumerate_modern_header_fields_combined";
        _os_log_impl(&dword_181A5C000, v17, v27, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v33 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        id v39 = "nw_http_metadata_enumerate_modern_header_fields_combined";
        _os_log_impl( &dword_181A5C000,  v17,  v33,  "%{public}s metadata must be http, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  __break(1u);
  return result;
}

          free(v27);
          goto LABEL_65;
        }

        __nwlog_obj();
        id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v45 = type;
        if (os_log_type_enabled(v28, type))
        {
          else {
            os_log_type_t v46 = off_189BBBBC0[v18];
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_enable_sleep_proxy_if_needed";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v46;
          *(_WORD *)&_BYTE buf[22] = 2082;
          BOOL v95 = "flow";
          _os_log_impl( &dword_181A5C000,  v28,  v45,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v28 = (os_log_s *)(id)gLogObj;
        os_log_type_t v43 = type;
        if (os_log_type_enabled(v28, type))
        {
          else {
            BOOL v44 = off_189BBBBC0[v18];
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_enable_sleep_proxy_if_needed";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v44;
          *(_WORD *)&_BYTE buf[22] = 2082;
          BOOL v95 = "flow";
          _os_log_impl( &dword_181A5C000,  v28,  v43,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }
      }
    }

    if (!v27) {
      goto LABEL_65;
    }
    goto LABEL_64;
  }

        if (v10)
        {
          uint64_t v40 = (char *)v10;
LABEL_66:
          free(v40);
        }

        return 4294966394LL;
      }
    }

    else if (((*(unsigned __int16 *)(stream_from_id + 188) | (*(unsigned __int8 *)(stream_from_id + 190) << 16)) & 0x80000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v19 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
      {
        nw_endpoint_t v21 = *(_DWORD *)(v7 + 176);
        uint64_t v20 = *(_DWORD *)(v7 + 180);
        *(_DWORD *)buf = 136447490;
        char v55 = "on_stream_close_callback";
        __int16 v56 = 2082;
        __int16 v57 = (char *)(v7 + 191);
        id v58 = 2080;
        char v59 = " ";
        char v60 = 1024;
        nw_endpoint_t v61 = v20;
        os_log_type_t v62 = 1024;
        *(_DWORD *)BOOL v63 = v21;
        *(_WORD *)&void v63[4] = 1024;
        *(_DWORD *)&v63[6] = v21;
        _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:s%d> closing stream %d that has no input handler",  buf,  0x32u);
      }
    }

    if (*(_BYTE *)(v7 + 72) && *(void *)(v7 + 64) != *(void *)(v7 + 80))
    {
      if ((*(__int16 *)(a4 + 388) & 0x80000000) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        id v26 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
        {
          char v27 = *(_DWORD *)(a4 + 368);
          if (*(_BYTE *)(v7 + 72)) {
            id v28 = *(void *)(v7 + 64);
          }
          else {
            id v28 = -1LL;
          }
          uint64_t v33 = *(void *)(v7 + 80);
          *(_DWORD *)buf = 136447490;
          char v55 = "on_stream_close_callback";
          __int16 v56 = 2082;
          __int16 v57 = (char *)(a4 + 390);
          id v58 = 2080;
          char v59 = " ";
          char v60 = 1024;
          nw_endpoint_t v61 = v27;
          os_log_type_t v62 = 2048;
          *(void *)BOOL v63 = v28;
          *(_WORD *)&v63[8] = 2048;
          *(void *)&v63[10] = v33;
          _os_log_impl( &dword_181A5C000,  v26,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> Content length header %llu does not equal body size %llu",  buf,  0x3Au);
        }
      }

      unsigned int v34 = *(unsigned __int16 *)(v7 + 188);
      nw_endpoint_t v35 = v34 | (*(unsigned __int8 *)(v7 + 190) << 16);
      if ((v34 & 0x40) == 0)
      {
        *(_BYTE *)(v7 + 190) = BYTE2(v35);
        *(_WORD *)(v7 + 18_Block_object_dispose(va, 8) = v35 | 0x40;
        nw_protocol_error(*(void **)v52, a4);
        nw_protocol_disconnected(*(void **)v52, a4);
      }
    }

    else
    {
      os_log_type_t v22 = (*(unsigned __int8 *)(v7 + 190) >> 3) & 1;
      if (!gLogDatapath) {
        LOBYTE(v22) = 1;
      }
      if ((*(_WORD *)(v7 + 188) & 1) != 0)
      {
        if ((v22 & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          char v48 = (os_log_s *)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            int v50 = *(_DWORD *)(v7 + 176);
            os_log_type_t v49 = *(_DWORD *)(v7 + 180);
            *(_DWORD *)buf = 136447490;
            char v55 = "on_stream_close_callback";
            __int16 v56 = 2082;
            __int16 v57 = (char *)(v7 + 191);
            id v58 = 2080;
            char v59 = " ";
            char v60 = 1024;
            nw_endpoint_t v61 = v49;
            os_log_type_t v62 = 1024;
            *(_DWORD *)BOOL v63 = v50;
            *(_WORD *)&void v63[4] = 1024;
            *(_DWORD *)&v63[6] = v50;
            _os_log_impl( &dword_181A5C000,  v48,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> closing stream %d",  buf,  0x32u);
          }
        }

        *(_WORD *)(v7 + 188) &= ~1u;
        nw_http2_stream_close(a4, v7);
      }

      else if ((v22 & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        BOOL v23 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v25 = *(_DWORD *)(v7 + 176);
          os_log_type_t v24 = *(_DWORD *)(v7 + 180);
          *(_DWORD *)buf = 136447234;
          char v55 = "on_stream_close_callback";
          __int16 v56 = 2082;
          __int16 v57 = (char *)(v7 + 191);
          id v58 = 2080;
          char v59 = " ";
          char v60 = 1024;
          nw_endpoint_t v61 = v24;
          os_log_type_t v62 = 1024;
          *(_DWORD *)BOOL v63 = v25;
          _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> not closing already closed stream",  buf,  0x2Cu);
        }
      }

      nw_http2_protocol_close(a4, v7, *(uint64_t *)v52);
    }

    return 0LL;
  }

  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
  }
  id v16 = (os_log_s *)gconnectionLogObj;
  BOOL result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO);
  if ((_DWORD)result)
  {
    __int16 v18 = *(_DWORD *)(a4 + 368);
    *(_DWORD *)buf = 136447234;
    char v55 = "on_stream_close_callback";
    __int16 v56 = 2082;
    __int16 v57 = (char *)(a4 + 390);
    id v58 = 2080;
    char v59 = " ";
    char v60 = 1024;
    nw_endpoint_t v61 = v18;
    os_log_type_t v62 = 1024;
    *(_DWORD *)BOOL v63 = a2;
    _os_log_impl( &dword_181A5C000,  v16,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> did not find stream %d",  buf,  0x2Cu);
    return 0LL;
  }

  return result;
}

    if (!v10) {
      return;
    }
    uint64_t v40 = (void *)v10;
    goto LABEL_140;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_http2_destroy";
  uint64_t v3 = _os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  int v134 = OS_LOG_TYPE_DEFAULT;
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    size_t v82 = (os_log_s *)__nwlog_obj();
    uint64_t v83 = type[0];
    if (!os_log_type_enabled(v82, type[0])) {
      goto LABEL_220;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_destroy";
    uint64_t v84 = "%{public}s called with null http2";
    goto LABEL_219;
  }

  if (v134 == OS_LOG_TYPE_DEFAULT)
  {
    size_t v82 = (os_log_s *)__nwlog_obj();
    uint64_t v83 = type[0];
    if (!os_log_type_enabled(v82, type[0])) {
      goto LABEL_220;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_destroy";
    uint64_t v84 = "%{public}s called with null http2, backtrace limit exceeded";
    goto LABEL_219;
  }

  BOOL v99 = (char *)__nw_create_backtrace_string();
  size_t v82 = (os_log_s *)__nwlog_obj();
  uint64_t v83 = type[0];
  BOOL v100 = os_log_type_enabled(v82, type[0]);
  if (!v99)
  {
    if (!v100) {
      goto LABEL_220;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_destroy";
    uint64_t v84 = "%{public}s called with null http2, no backtrace";
    goto LABEL_219;
  }

  if (v100)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_destroy";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v99;
    _os_log_impl( &dword_181A5C000,  v82,  v83,  "%{public}s called with null http2, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v99);
  if (v3) {
    goto LABEL_139;
  }
}

          free(v40);
          if (!v24) {
            return;
          }
          goto LABEL_90;
        }

        if (v63)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v72 = "nw_protocol_test_get_message_properties";
          char v27 = "%{public}s called with null test, no backtrace";
          goto LABEL_88;
        }
      }

      else
      {
        os_log_type_t v25 = (os_log_s *)__nwlog_obj();
        id v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v72 = "nw_protocol_test_get_message_properties";
          char v27 = "%{public}s called with null test, backtrace limit exceeded";
          goto LABEL_88;
        }
      }

      goto LABEL_89;
    }

    os_log_type_t v25 = (os_log_s *)__nwlog_obj();
    id v26 = type;
    if (!os_log_type_enabled(v25, type)) {
      goto LABEL_89;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v72 = "nw_protocol_test_get_message_properties";
    char v27 = "%{public}s called with null test";
    goto LABEL_88;
  }

  if (!a3) {
    return;
  }
  id v5 = *(void *)(a1 + 32);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 24);
    if (v6)
    {
      id v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 248);
      os_log_type_t v8 = &nw_protocol_ref_counted_handle;
      if (v7)
      {
        __int128 v9 = *(void **)(v5 + 40);
        if (v9 == &nw_protocol_ref_counted_handle)
        {
          uint64_t v10 = *(void *)(v5 + 88);
          if (v10) {
            *(void *)(v5 + 8_Block_object_dispose(va, 8) = v10 + 1;
          }
        }

        BOOL v11 = *(void *)(a1 + 88);
        if (v11) {
          *(void *)(a1 + 8_Block_object_dispose(va, 8) = v11 + 1;
        }
        v7(v5, a1, a3);
        if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
        {
          id v28 = *(void *)(a1 + 88);
          if (v28)
          {
            unsigned int v29 = v28 - 1;
            *(void *)(a1 + 8_Block_object_dispose(va, 8) = v29;
            if (!v29)
            {
              os_log_type_t v30 = *(void (***)(void))(a1 + 64);
              if (v30)
              {
                *(void *)(a1 + 64) = 0LL;
                v30[2](v30);
                _Block_release(v30);
              }

              if ((*(_BYTE *)(a1 + 72) & 1) != 0)
              {
                os_log_type_t v31 = *(const void **)(a1 + 64);
                if (v31) {
                  _Block_release(v31);
                }
              }

              free((void *)a1);
            }
          }
        }

        if (v9 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v5 + 40) == &nw_protocol_ref_counted_handle)
        {
          os_log_type_t v47 = *(void *)(v5 + 88);
          if (v47)
          {
            char v48 = v47 - 1;
            *(void *)(v5 + 8_Block_object_dispose(va, 8) = v48;
            if (!v48)
            {
              os_log_type_t v49 = *(void (***)(void))(v5 + 64);
              if (v49)
              {
                *(void *)(v5 + 64) = 0LL;
                v49[2](v49);
                _Block_release(v49);
              }

              if ((*(_BYTE *)(v5 + 72) & 1) != 0)
              {
                int v50 = *(const void **)(v5 + 64);
                if (v50) {
                  _Block_release(v50);
                }
              }

              free((void *)v5);
            }
          }
        }

        os_log_type_t v8 = *(void **)(a1 + 40);
      }
    }

    else
    {
      os_log_type_t v8 = &nw_protocol_ref_counted_handle;
    }
  }

  else
  {
    os_log_type_t v8 = &nw_protocol_ref_counted_handle;
  }

  v68[0] = MEMORY[0x1895F87A8];
  v68[1] = 0x40000000LL;
  v68[2] = ___ZL39nw_protocol_test_get_message_propertiesP11nw_protocolS0_P30nw_protocol_message_properties_block_invoke;
  v68[3] = &__block_descriptor_tmp_42_83923;
  v68[4] = a1 + 96;
  v68[5] = a3;
  if (v8 != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v72 = "nw_protocol_test_access_options";
    os_log_type_t v24 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    id v69 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (v69)
      {
        uint64_t v40 = (char *)__nw_create_backtrace_string();
        os_log_type_t v25 = (os_log_s *)__nwlog_obj();
        id v26 = type;
        __int16 v64 = os_log_type_enabled(v25, type);
        if (v40)
        {
          if (v64)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v72 = "nw_protocol_test_access_options";
            int v73 = 2082;
            __int16 v74 = v40;
            BOOL v42 = "%{public}s called with null test, dumping backtrace:%{public}s";
            goto LABEL_63;
          }

          goto LABEL_64;
        }

        if (v64)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v72 = "nw_protocol_test_access_options";
          char v27 = "%{public}s called with null test, no backtrace";
          goto LABEL_88;
        }
      }

      else
      {
        os_log_type_t v25 = (os_log_s *)__nwlog_obj();
        id v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v72 = "nw_protocol_test_access_options";
          char v27 = "%{public}s called with null test, backtrace limit exceeded";
          goto LABEL_88;
        }
      }

      goto LABEL_89;
    }

    os_log_type_t v25 = (os_log_s *)__nwlog_obj();
    id v26 = type;
    if (!os_log_type_enabled(v25, type)) {
      goto LABEL_89;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v72 = "nw_protocol_test_access_options";
    char v27 = "%{public}s called with null test";
    goto LABEL_88;
  }

  os_log_type_t v12 = *(void *)(a1 + 88);
  if (v12) {
    *(void *)(a1 + 8_Block_object_dispose(va, 8) = v12 + 1;
  }
  id v13 = *(void *)(a1 + 24);
  if (v13)
  {
    id v14 = *(uint64_t (**)(uint64_t))(v13 + 112);
    if (v14)
    {
      __int128 v15 = (void *)v14(a1);
      goto LABEL_22;
    }
  }

  __nwlog_obj();
  os_log_type_t v52 = *(const char **)(a1 + 16);
  *(_DWORD *)buf = 136446722;
  __int16 v72 = "__nw_protocol_get_parameters";
  if (!v52) {
    os_log_type_t v52 = "invalid";
  }
  int v73 = 2082;
  __int16 v74 = (void *)v52;
  id v75 = 2048;
  __int16 v76 = a1;
  BOOL v53 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  id v69 = 0;
  if (__nwlog_fault(v53, &type, &v69))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v54 = (os_log_s *)__nwlog_obj();
      char v55 = type;
      if (os_log_type_enabled(v54, type))
      {
        __int16 v56 = *(const char **)(a1 + 16);
        if (!v56) {
          __int16 v56 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        __int16 v72 = "__nw_protocol_get_parameters";
        int v73 = 2082;
        __int16 v74 = (void *)v56;
        id v75 = 2048;
        __int16 v76 = a1;
        __int16 v57 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback";
LABEL_171:
        _os_log_impl(&dword_181A5C000, v54, v55, v57, buf, 0x20u);
      }
    }

    else if (v69)
    {
      id v58 = (char *)__nw_create_backtrace_string();
      os_log_type_t v54 = (os_log_s *)__nwlog_obj();
      char v55 = type;
      char v59 = os_log_type_enabled(v54, type);
      if (v58)
      {
        if (v59)
        {
          char v60 = *(const char **)(a1 + 16);
          if (!v60) {
            char v60 = "invalid";
          }
          *(_DWORD *)buf = 136446978;
          __int16 v72 = "__nw_protocol_get_parameters";
          int v73 = 2082;
          __int16 v74 = (void *)v60;
          id v75 = 2048;
          __int16 v76 = a1;
          char v77 = 2082;
          uint64_t v78 = v58;
          _os_log_impl( &dword_181A5C000,  v54,  v55,  "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v58);
        goto LABEL_172;
      }

      if (v59)
      {
        unsigned int v67 = *(const char **)(a1 + 16);
        if (!v67) {
          unsigned int v67 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        __int16 v72 = "__nw_protocol_get_parameters";
        int v73 = 2082;
        __int16 v74 = (void *)v67;
        id v75 = 2048;
        __int16 v76 = a1;
        __int16 v57 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, no backtrace";
        goto LABEL_171;
      }
    }

    else
    {
      os_log_type_t v54 = (os_log_s *)__nwlog_obj();
      char v55 = type;
      if (os_log_type_enabled(v54, type))
      {
        __int16 v66 = *(const char **)(a1 + 16);
        if (!v66) {
          __int16 v66 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        __int16 v72 = "__nw_protocol_get_parameters";
        int v73 = 2082;
        __int16 v74 = (void *)v66;
        id v75 = 2048;
        __int16 v76 = a1;
        __int16 v57 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, backtrace limit exceeded";
        goto LABEL_171;
      }
    }
  }

            if (v69) {
              free(v69);
            }
            id v13 = MEMORY[0x1895F87A8];
          }
        }

        else
        {
          *(void *)(v19 + 64) = v25;
          *(void *)(v19 + 72) = v25;
          *(void *)(v19 + 120) = 0LL;
          *(void *)(v19 + 12_Block_object_dispose(va, 8) = v19 + 64;
        }
      }

      nw_frame_claim(v19, v22, 40, 0);
      v75[0] = 0LL;
      v75[1] = v75;
      __int16 v76 = 40;
      v75[2] = 0x2000000000LL;
      *(void *)buf = v13;
      *(void *)&buf[8] = 0x40000000LL;
      *(void *)&buf[16] = ___ZL43nw_protocol_ipv6_append_reassembled_packetsP16nw_protocol_ipv6P16nw_frame_array_sPb_block_invoke_41;
      *(void *)&_BYTE buf[24] = &unk_189BC8B40;
      *(void *)&uint64_t v93 = v75;
      *((void *)&v93 + 1) = a1;
      *(_DWORD *)&v94[8] = v16;
      *(void *)BOOL v94 = v17;
      uint64_t v40 = *(void *)(a1 + 88);
      do
      {
        if (!v40) {
          break;
        }
        os_log_type_t v41 = *(void *)(v40 + 32);
        BOOL v42 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
        uint64_t v40 = v41;
      }

      while ((v42 & 1) != 0);
      *(void *)(v19 + 16) = 0LL;
      os_log_type_t v43 = *(uint64_t **)(a1 + 112);
      *(void *)(v19 + 24) = v43;
      char *v43 = v19;
      *(void *)(a1 + 112) = v19 + 16;
      *(void *)(v19 + 32) = 0LL;
      BOOL v44 = *(uint64_t **)(a3 + 8);
      *(void *)(v19 + 40) = v44;
      os_log_s *v44 = v19;
      *(void *)(a3 + _Block_object_dispose(va, 8) = v19 + 32;
      *(void *)os_log_type_t type = v13;
      os_log_type_t v71 = 0x40000000LL;
      __int16 v72 = ___ZL43nw_protocol_ipv6_append_reassembled_packetsP16nw_protocol_ipv6P16nw_frame_array_sPb_block_invoke_43;
      int v73 = &__block_descriptor_tmp_44_85824;
      __int16 v74 = a1;
      os_log_type_t v45 = *(void *)(a1 + 88);
      do
      {
        if (!v45) {
          break;
        }
        os_log_type_t v46 = *(void *)(v45 + 32);
        os_log_type_t v47 = ((uint64_t (*)(os_log_type_t *))v72)(type);
        os_log_type_t v45 = v46;
      }

      while ((v47 & 1) != 0);
      _Block_object_dispose(v75, 8);
      os_log_type_t v12 = 1LL;
      goto LABEL_74;
    }

    if ((*(_BYTE *)(a1 + 158) & 1) != 0)
    {
LABEL_115:
      os_release((void *)v19);
      os_log_type_t v12 = 0LL;
      goto LABEL_74;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136447234;
    *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_append_reassembled_packets";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = a1 + 159;
    *(_WORD *)&_BYTE buf[22] = 2080;
    *(void *)&_BYTE buf[24] = " ";
    LOWORD(v93) = 2048;
    *(void *)((char *)&v93 + 2) = a1;
    WORD5(v93) = 1024;
    HIDWORD(v93) = v77;
    id v58 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v75[0]) = 0;
    if (__nwlog_fault(v58, type, v75))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        char v59 = (os_log_s *)__nwlog_obj();
        char v60 = type[0];
        if (!os_log_type_enabled(v59, type[0])) {
          goto LABEL_113;
        }
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_append_reassembled_packets";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = a1 + 159;
        *(_WORD *)&_BYTE buf[22] = 2080;
        *(void *)&_BYTE buf[24] = " ";
        LOWORD(v93) = 2048;
        *(void *)((char *)&v93 + 2) = a1;
        WORD5(v93) = 1024;
        HIDWORD(v93) = v77;
        nw_endpoint_t v61 = "%{public}s %{public}s%s%p Invalid first IPv6 reassembly frame (length %u)";
        goto LABEL_112;
      }

      if (!LOBYTE(v75[0]))
      {
        char v59 = (os_log_s *)__nwlog_obj();
        char v60 = type[0];
        if (!os_log_type_enabled(v59, type[0])) {
          goto LABEL_113;
        }
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_append_reassembled_packets";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = a1 + 159;
        *(_WORD *)&_BYTE buf[22] = 2080;
        *(void *)&_BYTE buf[24] = " ";
        LOWORD(v93) = 2048;
        *(void *)((char *)&v93 + 2) = a1;
        WORD5(v93) = 1024;
        HIDWORD(v93) = v77;
        nw_endpoint_t v61 = "%{public}s %{public}s%s%p Invalid first IPv6 reassembly frame (length %u), backtrace limit exceeded";
        goto LABEL_112;
      }

      __int16 v64 = (char *)__nw_create_backtrace_string();
      char v59 = (os_log_s *)__nwlog_obj();
      char v60 = type[0];
      uint64_t v65 = os_log_type_enabled(v59, type[0]);
      if (v64)
      {
        if (v65)
        {
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_append_reassembled_packets";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = a1 + 159;
          *(_WORD *)&_BYTE buf[22] = 2080;
          *(void *)&_BYTE buf[24] = " ";
          LOWORD(v93) = 2048;
          *(void *)((char *)&v93 + 2) = a1;
          WORD5(v93) = 1024;
          HIDWORD(v93) = v77;
          *(_WORD *)BOOL v94 = 2082;
          *(void *)&v94[2] = v64;
          _os_log_impl( &dword_181A5C000,  v59,  v60,  "%{public}s %{public}s%s%p Invalid first IPv6 reassembly frame (length %u), dumping backtrace:%{public}s",  buf,  0x3Au);
        }

        free(v64);
        goto LABEL_113;
      }

      if (v65)
      {
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_append_reassembled_packets";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = a1 + 159;
        *(_WORD *)&_BYTE buf[22] = 2080;
        *(void *)&_BYTE buf[24] = " ";
        LOWORD(v93) = 2048;
        *(void *)((char *)&v93 + 2) = a1;
        WORD5(v93) = 1024;
        HIDWORD(v93) = v77;
        nw_endpoint_t v61 = "%{public}s %{public}s%s%p Invalid first IPv6 reassembly frame (length %u), no backtrace";
LABEL_112:
        _os_log_impl(&dword_181A5C000, v59, v60, v61, buf, 0x30u);
      }
    }

    if (v38) {
      free(v38);
    }
    goto LABEL_15;
  }

  p_internalEvaluator = (os_unfair_lock_s **)&v9->_internalEvaluator;
  objc_storeStrong((id *)&v9->_internalEvaluator, a3);
  objc_storeStrong((id *)&v10->_parameters, a4);
  os_log_type_t v12 = objc_alloc(&OBJC_CLASS___NWPath);
  id v13 = nw_path_evaluator_copy_path(*p_internalEvaluator);
  id v14 = -[NWPath initWithPath:](v12, "initWithPath:", v13);
  internalPath = v10->_internalPath;
  v10->_internalPath = (NWPath *)v14;

  if (!v10->_internalPath)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v19 = (id)gLogObj;
    uint64_t v20 = *p_internalEvaluator;
    *(_DWORD *)location = 136446466;
    *(void *)&location[4] = "-[NWPathEvaluator initWithEvaluator:parameters:]";
    char v55 = 2114;
    __int16 v56 = v20;
    nw_endpoint_t v21 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v52 = 0;
    if (__nwlog_fault(v21, &type, &v52))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v22 = (os_log_s *)(id)gLogObj;
        BOOL v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          os_log_type_t v24 = *p_internalEvaluator;
          *(_DWORD *)location = 136446466;
          *(void *)&location[4] = "-[NWPathEvaluator initWithEvaluator:parameters:]";
          char v55 = 2114;
          __int16 v56 = v24;
          _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s [[NWPath alloc] initWithPath:nw_path_evaluator_copy_path(%{public}@)] failed",  location,  0x16u);
        }
      }

      else if (v52)
      {
        id v26 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v22 = (os_log_s *)(id)gLogObj;
        char v27 = type;
        id v28 = os_log_type_enabled(v22, type);
        if (v26)
        {
          if (v28)
          {
            unsigned int v29 = *p_internalEvaluator;
            *(_DWORD *)location = 136446722;
            *(void *)&location[4] = "-[NWPathEvaluator initWithEvaluator:parameters:]";
            char v55 = 2114;
            __int16 v56 = v29;
            __int16 v57 = 2082;
            id v58 = v26;
            _os_log_impl( &dword_181A5C000,  v22,  v27,  "%{public}s [[NWPath alloc] initWithPath:nw_path_evaluator_copy_path(%{public}@)] failed, dumping backtrace:%{public}s",  location,  0x20u);
          }

          free(v26);
          if (!v21) {
            goto LABEL_14;
          }
          goto LABEL_13;
        }

        if (v28)
        {
          unsigned int v32 = *p_internalEvaluator;
          *(_DWORD *)location = 136446466;
          *(void *)&location[4] = "-[NWPathEvaluator initWithEvaluator:parameters:]";
          char v55 = 2114;
          __int16 v56 = v32;
          _os_log_impl( &dword_181A5C000,  v22,  v27,  "%{public}s [[NWPath alloc] initWithPath:nw_path_evaluator_copy_path(%{public}@)] failed, no backtrace",  location,  0x16u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v22 = (os_log_s *)(id)gLogObj;
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v22, type))
        {
          os_log_type_t v31 = *p_internalEvaluator;
          *(_DWORD *)location = 136446466;
          *(void *)&location[4] = "-[NWPathEvaluator initWithEvaluator:parameters:]";
          char v55 = 2114;
          __int16 v56 = v31;
          _os_log_impl( &dword_181A5C000,  v22,  v30,  "%{public}s [[NWPath alloc] initWithPath:nw_path_evaluator_copy_path(%{public}@)] failed, backtrace limit exceeded",  location,  0x16u);
        }
      }
    }

    if (!v21)
    {
LABEL_14:

LABEL_15:
      __int16 v18 = 0LL;
      goto LABEL_16;
    }

void sub_181B2FAE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

id *nw_tcp_create_metadata(_OWORD *a1)
{
  return nw_protocol_metadata_create((void *)g_tcp_definition, a1);
}

uint64_t nw_protocol_metadata_access_handle(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    size_t v4 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_protocol_metadata_access_handle";
    id v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_protocol_metadata_access_handle";
        os_log_type_t v8 = "%{public}s called with null metadata";
LABEL_32:
        _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      BOOL v11 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_protocol_metadata_access_handle";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_34:
        if (!v5) {
          return 0LL;
        }
LABEL_35:
        free(v5);
        return 0LL;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_protocol_metadata_access_handle";
        os_log_type_t v8 = "%{public}s called with null metadata, no backtrace";
        goto LABEL_32;
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_protocol_metadata_access_handle";
        os_log_type_t v8 = "%{public}s called with null metadata, backtrace limit exceeded";
        goto LABEL_32;
      }
    }

void nw_tcp_set_callbacks(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  if (nw_protocol_metadata_is_tcp(v5))
  {
    v14[0] = MEMORY[0x1895F87A8];
    v14[1] = 3221225472LL;
    v14[2] = __nw_tcp_set_callbacks_block_invoke;
    v14[3] = &__block_descriptor_48_e9_B16__0_v8l;
    void v14[4] = a2;
    v14[5] = a3;
    nw_protocol_metadata_access_handle((uint64_t)v5, (uint64_t)v14);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_tcp_set_callbacks";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v16 = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v7, &v16, &v15))
  {
    if (v16 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_tcp_set_callbacks";
        _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null nw_protocol_metadata_is_tcp(metadata)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = v16;
      BOOL v12 = os_log_type_enabled(v8, v16);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_tcp_set_callbacks";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_tcp_set_callbacks";
        _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_tcp_set_callbacks";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181B302C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_protocol_metadata_is_tcp(nw_protocol_metadata_t metadata)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v1 = metadata;
  if (v1)
  {
    BOOL v2 = nw_protocol_metadata_matches_definition((uint64_t)v1, g_tcp_definition);
    goto LABEL_5;
  }

  __nwlog_obj();
  size_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v15 = "nw_protocol_metadata_is_tcp";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_protocol_metadata_is_tcp";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null metadata", buf, 0xCu);
      }
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          char v15 = "nw_protocol_metadata_is_tcp";
          __int16 v16 = 2082;
          __int16 v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_protocol_metadata_is_tcp";
        _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_protocol_metadata_is_tcp";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181B30598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_protocol_metadata_matches_definition(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (a2) {
      return nw_protocol_definition_is_equal_unsafe(*(void *)(a1 + 8), a2);
    }
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v16 = "nw_protocol_metadata_matches_definition";
    size_t v4 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault(v4, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v6 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v16 = "nw_protocol_metadata_matches_definition";
          os_log_type_t v7 = "%{public}s called with null definition";
          goto LABEL_31;
        }
      }

      else
      {
        if (v13)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v6 = type;
          BOOL v12 = os_log_type_enabled(v5, type);
          if (backtrace_string)
          {
            if (v12)
            {
              *(_DWORD *)buf = 136446466;
              __int16 v16 = "nw_protocol_metadata_matches_definition";
              __int16 v17 = 2082;
              uint64_t v18 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null definition, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(backtrace_string);
            if (!v4) {
              return 0LL;
            }
            goto LABEL_34;
          }

          if (!v12) {
            goto LABEL_32;
          }
          *(_DWORD *)buf = 136446210;
          __int16 v16 = "nw_protocol_metadata_matches_definition";
          os_log_type_t v7 = "%{public}s called with null definition, no backtrace";
          goto LABEL_31;
        }

        __nwlog_obj();
        id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v6 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v16 = "nw_protocol_metadata_matches_definition";
          os_log_type_t v7 = "%{public}s called with null definition, backtrace limit exceeded";
          goto LABEL_31;
        }
      }

      goto LABEL_32;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v16 = "nw_protocol_metadata_matches_definition";
    size_t v4 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_metadata_matches_definition";
        os_log_type_t v7 = "%{public}s called with null metadata";
LABEL_31:
        _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
      }

uint64_t __nw_tcp_set_callbacks_block_invoke(uint64_t a1, uint64_t a2)
{
  size_t v4 = (os_unfair_lock_s *)(a2 + 56);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 56));
  *(void *)(a2 + 4_Block_object_dispose(va, 8) = *(void *)(a1 + 32);
  id v5 = *(__int128 **)(a1 + 40);
  if (v5)
  {
    __int128 v6 = *v5;
    __int128 v7 = v5[2];
    *(_OWORD *)(a2 + 16) = v5[1];
    *(_OWORD *)(a2 + 32) = v7;
  }

  else
  {
    __int128 v6 = 0uLL;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
  }

  *(_OWORD *)a2 = v6;
  os_unfair_lock_unlock(v4);
  return 1LL;
}

uint64_t nw_protocol_default_supports_external_data(nw_protocol *a1)
{
  return 0LL;
}

uint64_t nw_protocol_default_get_local(nw_protocol *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v16 = "nw_protocol_default_get_local";
    id v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int128 v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v16 = "nw_protocol_default_get_local";
      os_log_type_t v8 = "%{public}s called with null protocol";
      goto LABEL_33;
    }

    if (!v13)
    {
      __int128 v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v16 = "nw_protocol_default_get_local";
      os_log_type_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_33;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int128 v6 = (os_log_s *)__nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v10 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (!v10) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v16 = "nw_protocol_default_get_local";
      os_log_type_t v8 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_33;
    }

    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v16 = "nw_protocol_default_get_local";
      __int16 v17 = 2082;
      uint64_t v18 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_34:
    if (!v5) {
      return 0LL;
    }
LABEL_35:
    free(v5);
    return 0LL;
  }

  default_input_handler = a1->default_input_handler;
  if (!default_input_handler)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v16 = "nw_protocol_default_get_local";
    id v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int128 v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v16 = "nw_protocol_default_get_local";
      os_log_type_t v8 = "%{public}s called with null protocol->default_input_handler";
      goto LABEL_33;
    }

    if (!v13)
    {
      __int128 v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v16 = "nw_protocol_default_get_local";
      os_log_type_t v8 = "%{public}s called with null protocol->default_input_handler, backtrace limit exceeded";
      goto LABEL_33;
    }

    os_log_type_t v11 = (char *)__nw_create_backtrace_string();
    __int128 v6 = (os_log_s *)__nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v12 = os_log_type_enabled(v6, type);
    if (v11)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v16 = "nw_protocol_default_get_local";
        __int16 v17 = 2082;
        uint64_t v18 = v11;
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null protocol->default_input_handler, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v11);
      if (!v5) {
        return 0LL;
      }
      goto LABEL_35;
    }

    if (v12)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v16 = "nw_protocol_default_get_local";
      os_log_type_t v8 = "%{public}s called with null protocol->default_input_handler, no backtrace";
LABEL_33:
      _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0xCu);
      goto LABEL_34;
    }

    goto LABEL_34;
  }

  callbacks = default_input_handler->callbacks;
  if (callbacks)
  {
    get_local_nw_endpoint_t endpoint = (uint64_t (*)(void))callbacks->get_local_endpoint;
  }

  return 0LL;
}

nw_endpoint_t nw_flow_get_local(nw_protocol *a1)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  id v1 = *((id *)a1->handle + 20);
  BOOL v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    BOOL v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v23 = "nw_flow_get_local";
    char v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v13, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v23 = "nw_flow_get_local";
          _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v17 = type;
        BOOL v18 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v23 = "nw_flow_get_local";
            __int16 v24 = 2082;
            os_log_type_t v25 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v14,  v17,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_34;
        }

        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v23 = "nw_flow_get_local";
          _os_log_impl(&dword_181A5C000, v14, v17, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v23 = "nw_flow_get_local";
          _os_log_impl( &dword_181A5C000,  v14,  v19,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181B31214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_endpoint_t nw_path_copy_effective_local_endpoint(nw_path_t path)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  nw_path_t v1 = path;
  BOOL v2 = (nw_parameters_t *)v1;
  if (v1)
  {
    uint64_t v3 = (void *)*((void *)v1 + 10);
    if (v3)
    {
      nw_endpoint_t v4 = v3;
LABEL_11:
      os_log_type_t v9 = v4;
      goto LABEL_12;
    }

    uint64_t v5 = *((void *)v1 + 9);
    if (v5 && *(void *)(v5 + 24) != *(void *)(v5 + 16))
    {
      nw_array_get_object_at_index(v5, 0LL);
      nw_endpoint_t v6 = (void *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = v6;
      if (v6)
      {
        os_log_type_t v8 = (void *)v6[4];
        if (v8)
        {
          os_log_type_t v9 = v8;

          goto LABEL_12;
        }
      }
    }

    nw_endpoint_t v4 = nw_parameters_copy_local_endpoint(v2[2]);
    goto LABEL_11;
  }

  __nwlog_obj();
  os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v22 = "nw_path_copy_effective_local_endpoint";
  BOOL v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_path_copy_effective_local_endpoint";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_path_copy_effective_local_endpoint";
          __int16 v23 = 2082;
          __int16 v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_29;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_path_copy_effective_local_endpoint";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_path_copy_effective_local_endpoint";
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

char *__cdecl nw_endpoint_copy_address_string(nw_endpoint_t endpoint)
{
  *(void *)((char *)&v93[8] + 2) = *MEMORY[0x1895F89C0];
  nw_path_t v1 = endpoint;
  BOOL v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)unint64_t v90 = 136446210;
    uint64_t v91 = "nw_endpoint_copy_address_string";
    char v19 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v19, buf, &type))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        __int16 v66 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v67 = buf[0];
        if (os_log_type_enabled(v66, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)unint64_t v90 = 136446210;
          uint64_t v91 = "nw_endpoint_copy_address_string";
          _os_log_impl(&dword_181A5C000, v66, v67, "%{public}s called with null any_endpoint", v90, 0xCu);
        }
      }

      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        __int16 v66 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v69 = buf[0];
        BOOL v70 = os_log_type_enabled(v66, (os_log_type_t)buf[0]);
        if (backtrace_string)
        {
          if (v70)
          {
            *(_DWORD *)unint64_t v90 = 136446466;
            uint64_t v91 = "nw_endpoint_copy_address_string";
            __int16 v92 = 2082;
            v93[0] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v66,  v69,  "%{public}s called with null any_endpoint, dumping backtrace:%{public}s",  v90,  0x16u);
          }

          free(backtrace_string);
          if (!v19) {
            goto LABEL_49;
          }
          goto LABEL_48;
        }

        if (v70)
        {
          *(_DWORD *)unint64_t v90 = 136446210;
          uint64_t v91 = "nw_endpoint_copy_address_string";
          _os_log_impl(&dword_181A5C000, v66, v69, "%{public}s called with null any_endpoint, no backtrace", v90, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        __int16 v66 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v71 = buf[0];
        if (os_log_type_enabled(v66, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)unint64_t v90 = 136446210;
          uint64_t v91 = "nw_endpoint_copy_address_string";
          _os_log_impl( &dword_181A5C000,  v66,  v71,  "%{public}s called with null any_endpoint, backtrace limit exceeded",  v90,  0xCu);
        }
      }
    }

void sub_181B3252C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_default_get_remote(nw_protocol *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v16 = "nw_protocol_default_get_remote";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      nw_endpoint_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      id v16 = "nw_protocol_default_get_remote";
      id v8 = "%{public}s called with null protocol";
      goto LABEL_33;
    }

    if (!v13)
    {
      nw_endpoint_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      id v16 = "nw_protocol_default_get_remote";
      id v8 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_33;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    nw_endpoint_t v6 = (os_log_s *)__nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v10 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (!v10) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      id v16 = "nw_protocol_default_get_remote";
      id v8 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_33;
    }

    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      id v16 = "nw_protocol_default_get_remote";
      __int16 v17 = 2082;
      int v18 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_34:
    if (!v5) {
      return 0LL;
    }
LABEL_35:
    free(v5);
    return 0LL;
  }

  default_input_handler = a1->default_input_handler;
  if (!default_input_handler)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v16 = "nw_protocol_default_get_remote";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      nw_endpoint_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      id v16 = "nw_protocol_default_get_remote";
      id v8 = "%{public}s called with null protocol->default_input_handler";
      goto LABEL_33;
    }

    if (!v13)
    {
      nw_endpoint_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      id v16 = "nw_protocol_default_get_remote";
      id v8 = "%{public}s called with null protocol->default_input_handler, backtrace limit exceeded";
      goto LABEL_33;
    }

    os_log_type_t v11 = (char *)__nw_create_backtrace_string();
    nw_endpoint_t v6 = (os_log_s *)__nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v12 = os_log_type_enabled(v6, type);
    if (v11)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        id v16 = "nw_protocol_default_get_remote";
        __int16 v17 = 2082;
        int v18 = v11;
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null protocol->default_input_handler, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v11);
      if (!v5) {
        return 0LL;
      }
      goto LABEL_35;
    }

    if (v12)
    {
      *(_DWORD *)buf = 136446210;
      id v16 = "nw_protocol_default_get_remote";
      id v8 = "%{public}s called with null protocol->default_input_handler, no backtrace";
LABEL_33:
      _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0xCu);
      goto LABEL_34;
    }

    goto LABEL_34;
  }

  callbacks = default_input_handler->callbacks;
  if (callbacks)
  {
    get_remote_nw_endpoint_t endpoint = (uint64_t (*)(void))callbacks->get_remote_endpoint;
  }

  return 0LL;
}

uint64_t nw_protocol_default_get_path(nw_protocol *a1)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_protocol_default_get_path";
    id v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "nw_protocol_default_get_path";
      os_log_type_t v11 = "%{public}s called with null protocol";
      goto LABEL_37;
    }

    if (!v16)
    {
      int v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "nw_protocol_default_get_path";
      os_log_type_t v11 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_37;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v13 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (!v13) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "nw_protocol_default_get_path";
      os_log_type_t v11 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_37;
    }

    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v19 = "nw_protocol_default_get_path";
      __int16 v20 = 2082;
      os_log_type_t v21 = (nw_protocol_identifier *)backtrace_string;
      _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_38:
    if (!v8) {
      return 0LL;
    }
LABEL_39:
    free(v8);
    return 0LL;
  }

  default_input_handler = a1->default_input_handler;
  if (!default_input_handler)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_protocol_default_get_path";
    id v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "nw_protocol_default_get_path";
      os_log_type_t v11 = "%{public}s called with null protocol->default_input_handler";
      goto LABEL_37;
    }

    if (!v16)
    {
      int v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "nw_protocol_default_get_path";
      os_log_type_t v11 = "%{public}s called with null protocol->default_input_handler, backtrace limit exceeded";
      goto LABEL_37;
    }

    int v14 = (char *)__nw_create_backtrace_string();
    int v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v15 = os_log_type_enabled(v9, type);
    if (v14)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v19 = "nw_protocol_default_get_path";
        __int16 v20 = 2082;
        os_log_type_t v21 = (nw_protocol_identifier *)v14;
        _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null protocol->default_input_handler, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v14);
      if (!v8) {
        return 0LL;
      }
      goto LABEL_39;
    }

    if (v15)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "nw_protocol_default_get_path";
      os_log_type_t v11 = "%{public}s called with null protocol->default_input_handler, no backtrace";
LABEL_37:
      _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
      goto LABEL_38;
    }

    goto LABEL_38;
  }

  callbacks = default_input_handler->callbacks;
  if (callbacks)
  {
    get_path = (uint64_t (*)(void))callbacks->get_path;
    if (get_path) {
      return get_path();
    }
  }

  nw_endpoint_t v6 = (os_log_s *)__nwlog_obj();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    identifier = (nw_protocol_identifier *)"<null>";
    if (a1->identifier) {
      identifier = a1->identifier;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v19 = "nw_protocol_default_get_path";
    __int16 v20 = 2082;
    os_log_type_t v21 = identifier;
    _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEBUG,  "%{public}s Protocol %{public}s does not support get path",  buf,  0x16u);
  }

  return 0LL;
}

id nw_flow_get_path(nw_protocol *a1)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v1 = *((id *)a1->handle + 20);
  BOOL v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    int v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v20 = "nw_flow_get_path";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v10, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v20 = "nw_flow_get_path";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v20 = "nw_flow_get_path";
            __int16 v21 = 2082;
            uint64_t v22 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_28;
        }

        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v20 = "nw_flow_get_path";
          _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v20 = "nw_flow_get_path";
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181B331C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned __int8 *nw_parameters_copy_protocol_options_legacy(void *a1, nw_protocol *a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (v3)
  {
    if (a2)
    {
      uint64_t v4 = nw_protocol_instance_stub_create(a2);
      id v5 = nw_parameters_copy_protocol_options_internal(v3, v4, 0LL);

      goto LABEL_4;
    }

    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v23 = "nw_parameters_copy_protocol_options_legacy";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v8, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v23 = "nw_parameters_copy_protocol_options_legacy";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null protocol_handle", buf, 0xCu);
        }

void sub_181B33698(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_protocol_instance_stub *nw_protocol_instance_stub_create(nw_protocol *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  BOOL result = objc_alloc(&OBJC_CLASS___NWConcrete_nw_protocol_instance_stub);
  if (!result) {
    return result;
  }
  v13.receiver = result;
  v13.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_protocol_instance_stub;
  BOOL result = (NWConcrete_nw_protocol_instance_stub *)-[nw_protocol init](&v13, sel_init);
  if (result)
  {
    result->protocol = a1;
    return result;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v3 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  BOOL v15 = "-[NWConcrete_nw_protocol_instance_stub initWithProtocol:]";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v5 = (os_log_s *)(id)gLogObj;
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "-[NWConcrete_nw_protocol_instance_stub initWithProtocol:]";
        _os_log_impl(&dword_181A5C000, v5, v6, "%{public}s [super init] failed", buf, 0xCu);
      }
    }

    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v5 = (os_log_s *)(id)gLogObj;
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v15 = "-[NWConcrete_nw_protocol_instance_stub initWithProtocol:]";
          __int16 v16 = 2082;
          BOOL v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v8,  "%{public}s [super init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "-[NWConcrete_nw_protocol_instance_stub initWithProtocol:]";
        _os_log_impl(&dword_181A5C000, v5, v8, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v5 = (os_log_s *)(id)gLogObj;
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "-[NWConcrete_nw_protocol_instance_stub initWithProtocol:]";
        _os_log_impl(&dword_181A5C000, v5, v10, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

size_t nw_protocol_options_get_log_id_str(void *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  os_log_type_t v6 = (unsigned __int8 *)v5;
  if (!v5)
  {
    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    unint64_t v33 = "nw_protocol_options_get_log_id_str";
    objc_super v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v33 = "nw_protocol_options_get_log_id_str";
        _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null options", buf, 0xCu);
      }

      goto LABEL_58;
    }

    if (!v30)
    {
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v33 = "nw_protocol_options_get_log_id_str";
        _os_log_impl( &dword_181A5C000,  v14,  v27,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_58;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v33 = "nw_protocol_options_get_log_id_str";
        _os_log_impl(&dword_181A5C000, v14, v21, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }

      goto LABEL_58;
    }

    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      unint64_t v33 = "nw_protocol_options_get_log_id_str";
      __int16 v34 = 2082;
      id v35 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v14,  v21,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
    }

LABEL_58:
        goto LABEL_59;
      }

      if (!v30)
      {
        __nwlog_obj();
        os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v33 = "nw_protocol_options_get_log_id_str";
          _os_log_impl( &dword_181A5C000,  v14,  v29,  "%{public}s called with null log_id_str_len, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_58;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v14, type);
      if (!backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v33 = "nw_protocol_options_get_log_id_str";
          _os_log_impl( &dword_181A5C000,  v14,  v25,  "%{public}s called with null log_id_str_len, no backtrace",  buf,  0xCu);
        }

        goto LABEL_58;
      }

      if (v26)
      {
        *(_DWORD *)buf = 136446466;
        unint64_t v33 = "nw_protocol_options_get_log_id_str";
        __int16 v34 = 2082;
        id v35 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v14,  v25,  "%{public}s called with null log_id_str_len, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_40;
    }

  if (v20) {
    free(v20);
  }
  size_t v10 = 0LL;
LABEL_31:

  return v10;
}

            int v43 = 0LL;
LABEL_123:

            BOOL v95 = v173;
            goto LABEL_124;
          }
        }
      }
      }
    }

    else
    {
      os_log_type_t v15 = handle[40];
      handle[40] = 0LL;

      __int16 v16 = (void *)*((void *)v11 + 109);
      *((void *)v11 + 109) = 0LL;

      *((_BYTE *)v11 + 36) &= ~1u;
      if (!nw_endpoint_handler_get_minimize_logging(v9))
      {
        os_log_type_t v17 = v9;
        uint64_t v18 = *((_BYTE *)v17 + 268);

        if ((v18 & 0x20) != 0) {
          goto LABEL_59;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v19 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          nw_endpoint_t log = v19;
          int v81 = v11;
          char v20 = v17;

          os_log_type_t v21 = v20;
          BOOL v22 = *((_BYTE *)v17 + 268);

          if ((v22 & 1) != 0) {
            os_log_type_t v23 = "dry-run ";
          }
          else {
            os_log_type_t v23 = "";
          }
          BOOL v24 = nw_endpoint_handler_copy_endpoint(v21);
          os_log_type_t v25 = nw_endpoint_get_logging_description(v24);
          __int16 v88 = v23;
          int v85 = v20->id_str;
          BOOL v26 = v21;
          os_log_type_t v27 = v26;
          os_log_type_t v28 = v26[30];
          else {
            os_log_type_t v29 = off_189BBBBF0[v28];
          }

          char v48 = v27;
          int v49 = v48;
          unint64_t v50 = "path";
          switch(v9->mode)
          {
            case 0:
              break;
            case 1:
              unint64_t v50 = "resolver";
              break;
            case 2:
              unint64_t v50 = nw_endpoint_flow_mode_string(v48[31]);
              break;
            case 3:
              unint64_t v50 = "proxy";
              break;
            case 4:
              unint64_t v50 = "fallback";
              break;
            case 5:
              unint64_t v50 = "transform";
              break;
            default:
              unint64_t v50 = "unknown-mode";
              break;
          }

          int v55 = v49;
          os_unfair_lock_lock((os_unfair_lock_t)v55 + 28);
          __int16 v56 = v55[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v55 + 28);

          *(_DWORD *)buf = 136447746;
          os_log_type_t v102 = "nw_flow_error";
          nw_endpoint_t v103 = 2082;
          os_log_type_t v104 = v85;
          uint64_t v105 = 2082;
          nw_endpoint_t v106 = v88;
          int v107 = 2082;
          char v108 = v25;
          int v109 = 2082;
          uint64_t v110 = v29;
          id v111 = 2082;
          int v112 = v50;
          uint64_t v113 = 2114;
          BOOL v114 = v56;
          os_log_type_t v19 = log;
          _os_log_impl( &dword_181A5C000,  log,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Output protocol cleared error",  buf,  0x48u);

          char v11 = v81;
        }

        goto LABEL_58;
      }

      if ((nw_endpoint_handler_get_logging_disabled(v9) & 1) == 0)
      {
        uint64_t v83 = v11;
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v19 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          logc = nw_endpoint_handler_get_id_string(v9);
          uint64_t v91 = nw_endpoint_handler_dry_run_string(v9);
          int v75 = nw_endpoint_handler_copy_endpoint(v9);
          char v76 = nw_endpoint_get_logging_description(v75);
          char v77 = nw_endpoint_handler_state_string(v9);
          uint64_t v78 = nw_endpoint_handler_mode_string(v9);
          nw_endpoint_t v79 = nw_endpoint_handler_copy_current_path(v9);
          *(_DWORD *)buf = 136447746;
          os_log_type_t v102 = "nw_flow_error";
          nw_endpoint_t v103 = 2082;
          os_log_type_t v104 = (void *)logc;
          uint64_t v105 = 2082;
          nw_endpoint_t v106 = v91;
          int v107 = 2082;
          char v108 = v76;
          int v109 = 2082;
          uint64_t v110 = v77;
          id v111 = 2082;
          int v112 = v78;
          uint64_t v113 = 2114;
          BOOL v114 = v79;
          _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Output protocol cleared error",  buf,  0x48u);

          char v11 = v83;
        }

        goto LABEL_58;
      }
    }

      BOOL result = 0LL;
      goto LABEL_34;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  sub_181C3A224( (uint64_t)v82,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_181C37D38);
  __break(1u);
LABEL_61:
  swift_bridgeObjectRelease_n();

  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_62:

  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  BOOL result = swift_bridgeObjectRelease_n();
  __break(1u);
  return result;
}

        ++v7;
        os_log_type_t v6 = (_BYTE *)a4[4 * v7 + 1];
      }

      while (v6);
    }
  }

  return result;
}

    goto LABEL_103;
  }

  if (v45 && *(void *)(v45 + 152))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v50 = (os_log_s *)(id)gLogObj;
    if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_61;
    }
    unsigned int v51 = *(void *)(a1 + 32);
    os_log_type_t v52 = *(void *)(v51 + 24);
    BOOL v53 = v51 + 115;
    os_log_type_t v54 = *(_DWORD *)(v51 + 168);
    int v55 = v8 + 26;
    if (v8)
    {
      os_log_type_t v63 = v8[2];
    }

    else
    {
      int v55 = 0LL;
      os_log_type_t v63 = 0;
    }

    *(_DWORD *)buf = 136448258;
    int v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
    uint64_t v110 = 2080;
    id v111 = v52;
    int v112 = 1042;
    *(_DWORD *)uint64_t v113 = 16;
    *(_WORD *)&v113[4] = 2098;
    *(void *)&v113[6] = v53;
    BOOL v114 = 1024;
    *(_DWORD *)int v115 = v54;
    *(_WORD *)&v115[4] = 2080;
    *(void *)&v115[6] = v55;
    *(_WORD *)&v115[14] = 1024;
    *(_DWORD *)&v115[16] = v63;
    nw_endpoint_t v116 = 1042;
    *(_DWORD *)nw_endpoint_t v117 = 16;
    *(_WORD *)&v117[4] = 2098;
    *(void *)&v117[6] = a3;
    BOOL v59 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] Ethernet Channel handle update: for %s (%d) nexus"
          " agent %{public, uuid_t}.16P";
    int v60 = v50;
    nw_endpoint_t v61 = 76;
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v50 = (os_log_s *)(id)gLogObj;
    if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_61;
    }
    __int16 v56 = *(void *)(a1 + 32);
    __int16 v57 = v8 + 26;
    if (v8)
    {
      os_log_type_t v58 = v8[2];
    }

    else
    {
      __int16 v57 = 0LL;
      os_log_type_t v58 = 0;
    }

    *(_DWORD *)buf = 136447490;
    int v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
    uint64_t v110 = 2114;
    id v111 = v56;
    int v112 = 2080;
    *(void *)uint64_t v113 = v57;
    *(_WORD *)&v113[8] = 1024;
    *(_DWORD *)&v113[10] = v58;
    BOOL v114 = 1042;
    *(_DWORD *)int v115 = 16;
    *(_WORD *)&v115[4] = 2098;
    *(void *)&v115[6] = a3;
    BOOL v59 = "%{public}s [%{public}@] Ethernet Channel handle update: for %s (%d) nexus agent %{public, uuid_t}.16P";
    int v60 = v50;
    nw_endpoint_t v61 = 54;
  }

  _os_log_impl(&dword_181A5C000, v60, OS_LOG_TYPE_DEBUG, v59, buf, v61);
LABEL_61:

  os_log_type_t v64 = *(void *)(a1 + 32);
  uint64_t v65 = *(void **)(v64 + 80);
  if (!v65)
  {
    int v107 = *(_OWORD *)a3;
LABEL_67:
    if (*(void *)(v64 + 152))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v69 = (os_log_s *)(id)gLogObj;
      if (!os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_77;
      }
      BOOL v70 = v8 + 26;
      os_log_type_t v71 = *(void *)(a1 + 32);
      if (!v8) {
        BOOL v70 = 0LL;
      }
      __int16 v72 = *(_DWORD *)(v71 + 168);
      int v73 = *(void *)(v71 + 24);
      *(_DWORD *)buf = 136448002;
      int v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
      uint64_t v110 = 2080;
      id v111 = v73;
      int v112 = 1042;
      *(_DWORD *)uint64_t v113 = 16;
      *(_WORD *)&v113[4] = 2098;
      *(void *)&v113[6] = v71 + 115;
      BOOL v114 = 1024;
      *(_DWORD *)int v115 = v72;
      *(_WORD *)&v115[4] = 1042;
      *(_DWORD *)&v115[6] = 16;
      *(_WORD *)&v115[10] = 2098;
      *(void *)&v115[12] = &v107;
      nw_endpoint_t v116 = 2080;
      *(void *)nw_endpoint_t v117 = v70;
      uint64_t v74 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] Ethernet Channel handle update: adding flow reg"
            "istration for nexus agent %{public,uuid_t}.16P on %s";
      int v75 = v69;
      char v76 = 70;
      goto LABEL_76;
    }

  if (v28) {
    free(v28);
  }
  os_log_type_t v25 = 0;
  os_log_type_t v15 = 0LL;
LABEL_61:
  id v38 = v233 >= v25;
  v233 -= v25;
  if (!v38)
  {
    if (gLogDatapath)
    {
      os_log_type_t v189 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v189, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 136446978;
        *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = "minimum_bytes";
        HIWORD(buf[2]) = 2048;
        unsigned int v261 = v25;
        LOWORD(v262[0]) = 2048;
        *(void *)((char *)v262 + 2) = v233;
        _os_log_impl( &dword_181A5C000,  v189,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  (uint8_t *)buf,  0x2Au);
      }
    }

    id v233 = 0;
  }

  id v38 = v232 >= v25;
  v232 -= v25;
  if (!v38)
  {
    if (gLogDatapath)
    {
      os_log_type_t v190 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v190, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 136446978;
        *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = "maximum_bytes";
        HIWORD(buf[2]) = 2048;
        unsigned int v261 = v25;
        LOWORD(v262[0]) = 2048;
        *(void *)((char *)v262 + 2) = v232;
        _os_log_impl( &dword_181A5C000,  v190,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  (uint8_t *)buf,  0x2Au);
      }
    }

    id v232 = 0;
  }

  id v38 = v231 >= v15;
  v231 -= v15;
  __int16 v225 = v25;
  if (!v38)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    LODWORD(buf[0]) = 136446978;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
    WORD2(buf[1]) = 2082;
    *(void *)((char *)&buf[1] + 6) = "maximum_frame_count";
    HIWORD(buf[2]) = 2048;
    unsigned int v261 = v15;
    LOWORD(v262[0]) = 2048;
    *(void *)((char *)v262 + 2) = v231;
    id v39 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v258[0]) = 0;
    if (__nwlog_fault(v39, type, v258))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v40 = gLogObj;
        os_log_type_t v41 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          LODWORD(buf[0]) = 136446978;
          *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = "maximum_frame_count";
          HIWORD(buf[2]) = 2048;
          unsigned int v261 = v15;
          LOWORD(v262[0]) = 2048;
          *(void *)((char *)v262 + 2) = v231;
          BOOL v42 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_79:
          os_log_type_t v45 = (os_log_s *)v40;
LABEL_80:
          _os_log_impl(&dword_181A5C000, v45, v41, v42, (uint8_t *)buf, 0x2Au);
        }
      }

      else if (LOBYTE(v258[0]))
      {
        int v43 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v41 = type[0];
        __int16 v221 = (os_log_s *)gLogObj;
        BOOL v44 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (v43)
        {
          if (v44)
          {
            LODWORD(buf[0]) = 136447234;
            *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
            WORD2(buf[1]) = 2082;
            *(void *)((char *)&buf[1] + 6) = "maximum_frame_count";
            HIWORD(buf[2]) = 2048;
            unsigned int v261 = v15;
            LOWORD(v262[0]) = 2048;
            *(void *)((char *)v262 + 2) = v231;
            WORD1(v262[1]) = 2082;
            *(void *)((char *)&v262[1] + 4) = v43;
            _os_log_impl( &dword_181A5C000,  v221,  v41,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x34u);
          }

          free(v43);
          goto LABEL_81;
        }

        if (v44)
        {
          LODWORD(buf[0]) = 136446978;
          *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = "maximum_frame_count";
          HIWORD(buf[2]) = 2048;
          unsigned int v261 = v15;
          LOWORD(v262[0]) = 2048;
          *(void *)((char *)v262 + 2) = v231;
          BOOL v42 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          os_log_type_t v45 = v221;
          goto LABEL_80;
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v40 = gLogObj;
        os_log_type_t v41 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          LODWORD(buf[0]) = 136446978;
          *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames_internal";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = "maximum_frame_count";
          HIWORD(buf[2]) = 2048;
          unsigned int v261 = v15;
          LOWORD(v262[0]) = 2048;
          *(void *)((char *)v262 + 2) = v231;
          BOOL v42 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_79;
        }
      }
    }

    char v11 = 0;
    goto LABEL_14;
  }

    if (v47) {
      free(v47);
    }
    os_log_type_t v19 = 0LL;
LABEL_19:

    char v20 = (nw_protocol_metadata *)*(id *)(a1 + 32);
    if (nw_protocol_metadata_is_ws(v20))
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      __int16 v57 = __Block_byref_object_copy__50676;
      os_log_type_t v58 = __Block_byref_object_dispose__50677;
      BOOL v59 = 0LL;
      access_xpc_object_t value = v18;
      unint64_t v50 = 3221225472LL;
      unsigned int v51 = __nw_ws_metadata_copy_pong_handler_block_invoke;
      os_log_type_t v52 = &unk_189BC0970;
      BOOL v53 = buf;
      nw_framer_message_access_value(v20, "pong_handler", &access_value);
      os_log_type_t v21 = (unint64_t)_Block_copy(*(const void **)(*(void *)&buf[8] + 40LL));
      _Block_object_dispose(buf, 8);

      if (v19 && v21)
      {
        BOOL v22 = nw_ws_ping_request_create(v48, (void *)v19, (void *)v21);
        nw_array_append(*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 104LL), v22);
LABEL_71:

LABEL_72:
        if (output_buffer && output_length)
        {
          if (*(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 256LL))
          {
            id v39 = 0LL;
            do
            {
              output_buffer[v39] ^= *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL)
                                             + (((_BYTE)v39
                                               + *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL)
                                                                            + 176LL)) & 3)
                                             + 256LL);
              ++v39;
            }

            while (output_length != v39);
            nw_framer_write_output(*(nw_framer_t *)(a1 + 40), output_buffer, output_length);
          }

          else
          {
            os_log_type_t v40 = *(nw_framer **)(a1 + 40);
            if (a4)
            {
              nw_framer_write_output(v40, output_buffer, output_length);
            }

            else
            {
              nw_framer_write_output_no_copy(v40, output_length);
              output_size_t length = 0LL;
            }
          }

          *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 176LL) += output_length;
        }

        return output_length;
      }

    if (v10) {
      free(v10);
    }
    id v3 = 0LL;
    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v29 = "nw_framer_protocol_supports_external_data";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v26 = 0;
  if (__nwlog_fault(v6, &type, &v26))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_framer_protocol_supports_external_data";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if (v26)
    {
      os_log_type_t v15 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v16 = type;
      os_log_type_t v17 = os_log_type_enabled(v7, type);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v29 = "nw_framer_protocol_supports_external_data";
          char v30 = 2082;
          os_log_type_t v31 = v15;
          _os_log_impl( &dword_181A5C000,  v7,  v16,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v15);
        goto LABEL_49;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_framer_protocol_supports_external_data";
        _os_log_impl(&dword_181A5C000, v7, v16, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v29 = "nw_framer_protocol_supports_external_data";
        _os_log_impl( &dword_181A5C000,  v7,  v23,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

    if (v11) {
      free(v11);
    }
    uint64_t v4 = 0LL;
    goto LABEL_5;
  }

  __nwlog_obj();
  os_log_type_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v30 = "nw_framer_protocol_waiting_for_output";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v27 = 0;
  if (__nwlog_fault(v7, &type, &v27))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      int v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        char v30 = "nw_framer_protocol_waiting_for_output";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if (v27)
    {
      __int16 v16 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      uint64_t v18 = os_log_type_enabled(v8, type);
      if (v16)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          char v30 = "nw_framer_protocol_waiting_for_output";
          os_log_type_t v31 = 2082;
          unsigned int v32 = v16;
          _os_log_impl( &dword_181A5C000,  v8,  v17,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v16);
        goto LABEL_49;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        char v30 = "nw_framer_protocol_waiting_for_output";
        _os_log_impl(&dword_181A5C000, v8, v17, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v24 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        char v30 = "nw_framer_protocol_waiting_for_output";
        _os_log_impl( &dword_181A5C000,  v8,  v24,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  if (v12) {
    free(v12);
  }
  int v9 = 0LL;
LABEL_7:

  return v9;
}
}

    goto LABEL_59;
  }

  if (!v3[33])
  {
    __nwlog_obj();
    os_log_type_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)location = 136446210;
    *(void *)&location[4] = "nw_protocol_instance_schedule_wakeup";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    unsigned int v32 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      objc_super v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v16 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_protocol_instance_schedule_wakeup";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null instance->wakeup", location, 0xCu);
      }

      goto LABEL_58;
    }

    if (!v32)
    {
      __nwlog_obj();
      objc_super v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_protocol_instance_schedule_wakeup";
        _os_log_impl( &dword_181A5C000,  v13,  v28,  "%{public}s called with null instance->wakeup, backtrace limit exceeded",  location,  0xCu);
      }

      goto LABEL_58;
    }

    BOOL v22 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    objc_super v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v23 = type;
    BOOL v24 = os_log_type_enabled(v13, type);
    if (!v22)
    {
      if (v24)
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_protocol_instance_schedule_wakeup";
        _os_log_impl( &dword_181A5C000,  v13,  v23,  "%{public}s called with null instance->wakeup, no backtrace",  location,  0xCu);
      }

      goto LABEL_58;
    }

    if (v24)
    {
      *(_DWORD *)location = 136446466;
      *(void *)&location[4] = "nw_protocol_instance_schedule_wakeup";
      id v35 = 2082;
      uint64_t v36 = v22;
      _os_log_impl( &dword_181A5C000,  v13,  v23,  "%{public}s called with null instance->wakeup, dumping backtrace:%{public}s",  location,  0x16u);
    }

    goto LABEL_39;
  }

  id v5 = (void *)v3[15];
  if (!v5)
  {
    __nwlog_obj();
    os_log_type_t v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)location = 136446210;
    *(void *)&location[4] = "nw_protocol_instance_schedule_wakeup";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    unsigned int v32 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      objc_super v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_protocol_instance_schedule_wakeup";
        _os_log_impl(&dword_181A5C000, v13, v18, "%{public}s called with null instance->context", location, 0xCu);
      }

      goto LABEL_58;
    }

    if (!v32)
    {
      __nwlog_obj();
      objc_super v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_protocol_instance_schedule_wakeup";
        _os_log_impl( &dword_181A5C000,  v13,  v29,  "%{public}s called with null instance->context, backtrace limit exceeded",  location,  0xCu);
      }

      goto LABEL_58;
    }

    BOOL v22 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    objc_super v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v25 = type;
    BOOL v26 = os_log_type_enabled(v13, type);
    if (!v22)
    {
      if (v26)
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_protocol_instance_schedule_wakeup";
        _os_log_impl( &dword_181A5C000,  v13,  v25,  "%{public}s called with null instance->context, no backtrace",  location,  0xCu);
      }

      goto LABEL_58;
    }

    if (v26)
    {
      *(_DWORD *)location = 136446466;
      *(void *)&location[4] = "nw_protocol_instance_schedule_wakeup";
      id v35 = 2082;
      uint64_t v36 = v22;
      _os_log_impl( &dword_181A5C000,  v13,  v25,  "%{public}s called with null instance->context, dumping backtrace:%{public}s",  location,  0x16u);
    }

    free(v38);
    if (!v28) {
      goto LABEL_28;
    }
    goto LABEL_79;
  }

  BOOL v46 = v7;
  os_log_type_t v8 = (id *)v7;
  int v9 = v8[1];

  size_t v10 = v5[1];
  char v11 = MEMORY[0x1895F87A8];
  if (v10)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    int v60 = __Block_byref_object_copy__19159;
    nw_endpoint_t v61 = __Block_byref_object_dispose__19160;
    os_log_type_t v62 = v10;
    os_log_type_t v12 = (unsigned __int8 *)v5[1];
    v52[0] = v11;
    v52[1] = 3221225472LL;
    v52[2] = __nw_protocol_stack_replace_protocol_block_invoke;
    v52[3] = &unk_189BB8C68;
    v52[4] = v9;
    BOOL v53 = v6;
    __int16 v56 = buf;
    os_log_type_t v54 = v5;
    int v55 = v8;
    nw_array_apply(v12, (uint64_t)v52);
    objc_super v13 = *(void **)(*(void *)&buf[8] + 40LL);
    if (v13) {
      objc_storeStrong(v5 + 1, v13);
    }

    _Block_object_dispose(buf, 8);
  }

  os_log_type_t v14 = v5[2];
  if (v14)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    int v60 = __Block_byref_object_copy__19159;
    nw_endpoint_t v61 = __Block_byref_object_dispose__19160;
    os_log_type_t v62 = v14;
    os_log_type_t v15 = (unsigned __int8 *)v5[2];
    v47[0] = v11;
    v47[1] = 3221225472LL;
    v47[2] = __nw_protocol_stack_replace_protocol_block_invoke_3;
    v47[3] = &unk_189BB8C68;
    v47[4] = v9;
    char v48 = v6;
    unsigned int v51 = buf;
    int v49 = v5;
    unint64_t v50 = v8;
    nw_array_apply(v15, (uint64_t)v47);
    __int16 v16 = *(void **)(*(void *)&buf[8] + 40LL);
    if (v16) {
      objc_storeStrong(v5 + 2, v16);
    }

    _Block_object_dispose(buf, 8);
  }

  os_log_type_t v17 = v5[3];
  if (v17)
  {
    uint64_t v18 = (id *)v17;
    os_log_type_t v19 = v18[1];

    if (nw_protocol_definition_is_equal_unsafe((uint64_t)v9, (uint64_t)v19)
      || nw_protocol_definition_is_equal_unsafe((uint64_t)v6, (uint64_t)v19))
    {
      objc_storeStrong(v5 + 3, a3);
    }
  }

  char v20 = v5[4];
  if (v20)
  {
    os_log_type_t v21 = (id *)v20;
    BOOL v22 = v21[1];

    if (nw_protocol_definition_is_equal_unsafe((uint64_t)v9, (uint64_t)v22)
      || nw_protocol_definition_is_equal_unsafe((uint64_t)v6, (uint64_t)v22))
    {
      objc_storeStrong(v5 + 4, a3);
    }
  }

  os_log_type_t v23 = v5[6];
  if (v23)
  {
    BOOL v24 = (id *)v23;
    os_log_type_t v25 = v24[1];

    if (nw_protocol_definition_is_equal_unsafe((uint64_t)v9, (uint64_t)v25)
      || nw_protocol_definition_is_equal_unsafe((uint64_t)v6, (uint64_t)v25))
    {
      objc_storeStrong(v5 + 6, a3);
    }
  }

  BOOL v26 = v46;
LABEL_28:
}

    if (v16) {
      free(v16);
    }
    goto LABEL_5;
  }

  __nwlog_obj();
  objc_super v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
  size_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  unint64_t v33 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    char v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
      _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null block", buf, 0xCu);
    }

    goto LABEL_52;
  }

  if (!v33)
  {
    __nwlog_obj();
    char v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v29 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
      _os_log_impl(&dword_181A5C000, v11, v29, "%{public}s called with null block, backtrace limit exceeded", buf, 0xCu);
    }

    goto LABEL_52;
  }

  BOOL v22 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  char v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v23 = type;
  BOOL v24 = os_log_type_enabled(v11, type);
  if (!v22)
  {
    if (v24)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
      _os_log_impl(&dword_181A5C000, v11, v23, "%{public}s called with null block, no backtrace", buf, 0xCu);
    }

    goto LABEL_52;
  }

  if (v24)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
    os_log_type_t v37 = 2082;
    id v38 = v22;
    _os_log_impl( &dword_181A5C000,  v11,  v23,  "%{public}s called with null block, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v22);
  if (v10) {
    goto LABEL_54;
  }
LABEL_6:
}

    goto LABEL_59;
  }

  if (!a2)
  {
    __nwlog_obj();
    unint64_t v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_set_service_identifier";
    char v30 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v44 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v34 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_set_service_identifier";
        _os_log_impl(&dword_181A5C000, v31, v34, "%{public}s called with null service_uuid", buf, 0xCu);
      }
    }

    else if (v44)
    {
      id v38 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v39 = type;
      os_log_type_t v40 = os_log_type_enabled(v31, type);
      if (v38)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_service_identifier";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v38;
          _os_log_impl( &dword_181A5C000,  v31,  v39,  "%{public}s called with null service_uuid, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v38);
        if (!v30) {
          goto LABEL_25;
        }
LABEL_60:
        os_log_type_t v28 = (char *)v30;
        goto LABEL_24;
      }

      if (v40)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_set_service_identifier";
        _os_log_impl(&dword_181A5C000, v31, v39, "%{public}s called with null service_uuid, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v42 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_set_service_identifier";
        _os_log_impl( &dword_181A5C000,  v31,  v42,  "%{public}s called with null service_uuid, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_58;
  }

  id v5 = (char *)v3;
  os_log_type_t v6 = [v5 type];

  if (v6 == 6)
  {
    *(_OWORD *)(v5 + 24_Block_object_dispose(va, 8) = *a2;
    os_log_type_t v7 = v5;
    os_log_type_t v8 = v7 + 45;
    *(void *)buf = MEMORY[0x1895F87A8];
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&buf[16] = __nw_endpoint_clear_description_block_invoke;
    *(void *)&_BYTE buf[24] = &unk_189BC93A0;
    os_log_type_t v47 = v7;
    int v9 = v7;
    os_unfair_lock_lock(v8);
    __nw_endpoint_clear_description_block_invoke((uint64_t)buf);
    os_unfair_lock_unlock(v8);

    goto LABEL_25;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  size_t v10 = (id)gLogObj;
  char v11 = v5;
  os_log_type_t v12 = [v11 type];

  *(_DWORD *)buf = 136446466;
  *(void *)&uint8_t buf[4] = "nw_endpoint_set_service_identifier";
  *(_WORD *)&buf[12] = 1024;
  *(_DWORD *)&buf[14] = v12;
  LODWORD(v43) = 18;
  objc_super v13 = (const char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v44 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v14 = (os_log_s *)(id)gLogObj;
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v14, type))
    {
      __int16 v16 = v11;
      os_log_type_t v17 = objc_msgSend(v16, "type", buf, v43);

      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_endpoint_set_service_identifier";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v17;
      _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s incorrect endpoint type %u", buf, 0x12u);
    }

LABEL_59:
      if (v15) {
        free(v15);
      }
      goto LABEL_9;
    }

    if (!v32)
    {
      __nwlog_obj();
      __int16 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        id v35 = "nw_connection_create_experimental_probe_locked";
        _os_log_impl( &dword_181A5C000,  v16,  v31,  "%{public}s called with null experiment_identifier, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_58;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    __int16 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v27 = type;
    os_log_type_t v28 = os_log_type_enabled(v16, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        id v35 = "nw_connection_create_experimental_probe_locked";
        _os_log_impl( &dword_181A5C000,  v16,  v27,  "%{public}s called with null experiment_identifier, no backtrace",  buf,  0xCu);
      }

      goto LABEL_58;
    }

    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      id v35 = "nw_connection_create_experimental_probe_locked";
      uint64_t v36 = 2082;
      os_log_type_t v37 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v16,  v27,  "%{public}s called with null experiment_identifier, dumping backtrace:%{public}s",  buf,  0x16u);
    }

      if (v19) {
        free(v19);
      }
      objc_super v13 = 0;
      goto LABEL_18;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v14 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_unsent_byte_count";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    __int16 v34 = 0;
    if (__nwlog_fault(v15, type, &v34))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v16 = (os_log_s *)(id)gLogObj;
        os_log_type_t v17 = type[0];
        if (os_log_type_enabled(v16, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_unsent_byte_count";
          _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v34)
      {
        BOOL v22 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v16 = (os_log_s *)(id)gLogObj;
        os_log_type_t v23 = type[0];
        BOOL v24 = os_log_type_enabled(v16, type[0]);
        if (v22)
        {
          if (v24)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_unsent_byte_count";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v22;
            _os_log_impl( &dword_181A5C000,  v16,  v23,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v22);
          goto LABEL_49;
        }

        if (v24)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_unsent_byte_count";
          _os_log_impl(&dword_181A5C000, v16, v23, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v16 = (os_log_s *)(id)gLogObj;
        os_log_type_t v28 = type[0];
        if (os_log_type_enabled(v16, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_unsent_byte_count";
          _os_log_impl( &dword_181A5C000,  v16,  v28,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v25) {
      goto LABEL_60;
    }
LABEL_59:
    free(v25);
    goto LABEL_60;
  }

  os_log_type_t v8 = (unsigned int *)v6;
  int v9 = v8[29];

  if ((_DWORD)v9 == 3)
  {
    size_t v10 = v8;
    char v11 = *((_BYTE *)v10 + 268);

    if ((v11 & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      os_log_type_t v12 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        int v60 = v7;
        objc_super v13 = v10;

        os_log_type_t v14 = v13;
        os_log_type_t v15 = *((_BYTE *)v10 + 268);

        if ((v15 & 1) != 0) {
          __int16 v16 = "dry-run ";
        }
        else {
          __int16 v16 = "";
        }
        os_log_type_t v17 = nw_endpoint_handler_copy_endpoint(v14);
        logging_description = nw_endpoint_get_logging_description(v17);
        BOOL v59 = (char *)(v13 + 42);
        os_log_type_t v19 = v14;
        char v20 = v19;
        os_log_type_t v21 = v19[30];
        else {
          BOOL v22 = off_189BBBBF0[v21];
        }
        os_log_type_t v58 = v22;

        unint64_t v33 = v20;
        __int16 v34 = v33;
        id v35 = v8[29];
        uint64_t v36 = "path";
        switch(v35)
        {
          case 0u:
            break;
          case 1u:
            uint64_t v36 = "resolver";
            break;
          case 2u:
            uint64_t v36 = nw_endpoint_flow_mode_string(v33[31]);
            break;
          case 3u:
            uint64_t v36 = "proxy";
            break;
          case 4u:
            uint64_t v36 = "fallback";
            break;
          case 5u:
            uint64_t v36 = "transform";
            break;
          default:
            uint64_t v36 = "unknown-mode";
            break;
        }

        os_log_type_t v40 = v34;
        os_unfair_lock_lock((os_unfair_lock_t)v40 + 28);
        os_log_type_t v41 = v40[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v40 + 28);

        *(_DWORD *)buf = 136447746;
        __int16 v66 = "-[NWConcrete_nw_endpoint_proxy cancelWithHandler:forced:]";
        os_log_type_t v67 = 2082;
        __int16 v68 = v59;
        os_log_type_t v69 = 2082;
        BOOL v70 = v16;
        os_log_type_t v71 = 2082;
        __int16 v72 = (void *)logging_description;
        int v73 = 2082;
        uint64_t v74 = v58;
        int v75 = 2082;
        char v76 = v36;
        char v77 = 2114;
        uint64_t v78 = v41;
        _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ",  buf,  0x48u);

        os_log_type_t v7 = v60;
      }
    }

    child_endpoint_handlers = (unsigned __int8 *)self->child_endpoint_handlers;
    v61[0] = MEMORY[0x1895F87A8];
    v61[1] = 3221225472LL;
    v61[2] = __57__NWConcrete_nw_endpoint_proxy_cancelWithHandler_forced___block_invoke;
    v61[3] = &__block_descriptor_33_e35_B24__0Q8__NSObject_OS_nw_object__16l;
    os_log_type_t v62 = a4;
    nw_array_apply(child_endpoint_handlers, (uint64_t)v61);
    int v43 = self->child_endpoint_handlers;
    self->child_endpoint_handlers = 0LL;

    failed_child_endpoint_handlers = self->failed_child_endpoint_handlers;
    self->failed_child_endpoint_handlers = 0LL;

    pac_resolvers = self->pac_resolvers;
    self->pac_resolvers = 0LL;

    custom_proxy_configs = self->custom_proxy_configs;
    self->custom_proxy_configs = 0LL;

    path_proxy_configs = self->path_proxy_configs;
    self->path_proxy_configs = 0LL;

    parsed_proxy_configs = self->parsed_proxy_configs;
    self->parsed_proxy_configs = 0LL;

    url = self->url;
    if (url)
    {
      CFRelease(url);
      self->url = 0LL;
    }

    child_timer = self->child_timer;
    if (child_timer)
    {
      nw_queue_cancel_source((uint64_t)child_timer, v49);
      self->child_timer = 0LL;
    }

    goto LABEL_60;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v23 = (id)gLogObj;
  else {
    BOOL v24 = off_189BBBBC0[v9];
  }
  *(_DWORD *)buf = 136446722;
  __int16 v66 = "-[NWConcrete_nw_endpoint_proxy cancelWithHandler:forced:]";
  os_log_type_t v67 = 2082;
  __int16 v68 = (void *)v24;
  os_log_type_t v69 = 2082;
  BOOL v70 = "proxy";
  os_log_type_t v25 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v63 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v26 = (os_log_s *)(id)gLogObj;
    os_log_type_t v27 = type;
    if (os_log_type_enabled(v26, type))
    {
      else {
        os_log_type_t v28 = off_189BBBBC0[v9];
      }
      *(_DWORD *)buf = 136446722;
      __int16 v66 = "-[NWConcrete_nw_endpoint_proxy cancelWithHandler:forced:]";
      os_log_type_t v67 = 2082;
      __int16 v68 = (void *)v28;
      os_log_type_t v69 = 2082;
      BOOL v70 = "proxy";
      _os_log_impl( &dword_181A5C000,  v26,  v27,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
    }

      free(backtrace_string);
      goto LABEL_99;
    }

    char v20 = (os_log_s *)__nwlog_obj();
    os_log_type_t v21 = uu;
    if (!os_log_type_enabled(v20, (os_log_type_t)uu)) {
      goto LABEL_99;
    }
    *(_DWORD *)out = 136446210;
    *(void *)&out[4] = "nw_protocol_masque_connect";
    BOOL v22 = "%{public}s called with null protocol";
LABEL_98:
    _os_log_impl(&dword_181A5C000, v20, v21, v22, (uint8_t *)out, 0xCu);
LABEL_99:
    if (v19) {
      free(v19);
    }
    return 0LL;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)out = 136446210;
    *(void *)&out[4] = "nw_protocol_masque_connect";
    os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(uu) = 16;
    BOOL v59 = 0;
    if (uu == 17)
    {
      char v20 = (os_log_s *)__nwlog_obj();
      os_log_type_t v21 = uu;
      if (!os_log_type_enabled(v20, (os_log_type_t)uu)) {
        goto LABEL_99;
      }
      *(_DWORD *)out = 136446210;
      *(void *)&out[4] = "nw_protocol_masque_connect";
      BOOL v22 = "%{public}s called with null masque";
      goto LABEL_98;
    }

    if (!v59)
    {
      char v20 = (os_log_s *)__nwlog_obj();
      os_log_type_t v21 = uu;
      if (!os_log_type_enabled(v20, (os_log_type_t)uu)) {
        goto LABEL_99;
      }
      *(_DWORD *)out = 136446210;
      *(void *)&out[4] = "nw_protocol_masque_connect";
      BOOL v22 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_98;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    char v20 = (os_log_s *)__nwlog_obj();
    os_log_type_t v21 = uu;
    os_log_type_t v37 = os_log_type_enabled(v20, (os_log_type_t)uu);
    if (backtrace_string)
    {
      if (v37)
      {
        *(_DWORD *)out = 136446466;
        *(void *)&out[4] = "nw_protocol_masque_connect";
        *(_WORD *)&out[12] = 2082;
        *(void *)&out[14] = backtrace_string;
        uint64_t v36 = "%{public}s called with null masque, dumping backtrace:%{public}s";
        goto LABEL_57;
      }

      goto LABEL_58;
    }

    if (!v37) {
      goto LABEL_99;
    }
    *(_DWORD *)out = 136446210;
    *(void *)&out[4] = "nw_protocol_masque_connect";
    BOOL v22 = "%{public}s called with null masque, no backtrace";
    goto LABEL_98;
  }

  if (*((_DWORD *)handle + 127) == 4)
  {
    if (*((void *)handle + 60))
    {
      if (!*((void *)handle + 61)) {
        *((void *)handle + 61) = nw_dictionary_create();
      }
      if (a2)
      {
        callbacks = a2->callbacks;
        if (callbacks)
        {
          connected = (void (*)(nw_protocol *, nw_protocol *))callbacks->connected;
          if (connected)
          {
            connected(a2, a1);
            uu = 0uLL;
            goto LABEL_11;
          }
        }

        __nwlog_obj();
        identifier = a2->identifier;
        if (!identifier) {
          identifier = (nw_protocol_identifier *)"invalid";
        }
      }

      else
      {
        __nwlog_obj();
        identifier = (nw_protocol_identifier *)"invalid";
      }

      *(_DWORD *)out = 136446466;
      *(void *)&out[4] = "nw_protocol_masque_connect";
      *(_WORD *)&out[12] = 2082;
      *(void *)&out[14] = identifier;
      id v38 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(uu) = 16;
      BOOL v59 = 0;
      if (__nwlog_fault(v38, &uu, &v59))
      {
        if (uu == 17)
        {
          id v39 = (os_log_s *)__nwlog_obj();
          os_log_type_t v40 = uu;
          if (!os_log_type_enabled(v39, (os_log_type_t)uu)) {
            goto LABEL_108;
          }
          os_log_type_t v41 = (nw_protocol_identifier *)"invalid";
          if (a2 && a2->identifier) {
            os_log_type_t v41 = a2->identifier;
          }
          *(_DWORD *)out = 136446466;
          *(void *)&out[4] = "nw_protocol_masque_connect";
          *(_WORD *)&out[12] = 2082;
          *(void *)&out[14] = v41;
          BOOL v42 = "%{public}s protocol %{public}s has invalid connected callback";
LABEL_107:
          _os_log_impl(&dword_181A5C000, v39, v40, v42, (uint8_t *)out, 0x16u);
          goto LABEL_108;
        }

        if (!v59)
        {
          id v39 = (os_log_s *)__nwlog_obj();
          os_log_type_t v40 = uu;
          if (!os_log_type_enabled(v39, (os_log_type_t)uu)) {
            goto LABEL_108;
          }
          unsigned int v51 = (nw_protocol_identifier *)"invalid";
          if (a2 && a2->identifier) {
            unsigned int v51 = a2->identifier;
          }
          *(_DWORD *)out = 136446466;
          *(void *)&out[4] = "nw_protocol_masque_connect";
          *(_WORD *)&out[12] = 2082;
          *(void *)&out[14] = v51;
          BOOL v42 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
          goto LABEL_107;
        }

        int v43 = (char *)__nw_create_backtrace_string();
        id v39 = (os_log_s *)__nwlog_obj();
        os_log_type_t v40 = uu;
        BOOL v44 = os_log_type_enabled(v39, (os_log_type_t)uu);
        if (!v43)
        {
          if (!v44) {
            goto LABEL_108;
          }
          os_log_type_t v52 = (nw_protocol_identifier *)"invalid";
          if (a2 && a2->identifier) {
            os_log_type_t v52 = a2->identifier;
          }
          *(_DWORD *)out = 136446466;
          *(void *)&out[4] = "nw_protocol_masque_connect";
          *(_WORD *)&out[12] = 2082;
          *(void *)&out[14] = v52;
          BOOL v42 = "%{public}s protocol %{public}s has invalid connected callback, no backtrace";
          goto LABEL_107;
        }

        if (v44)
        {
          os_log_type_t v45 = (nw_protocol_identifier *)"invalid";
          if (a2 && a2->identifier) {
            os_log_type_t v45 = a2->identifier;
          }
          *(_DWORD *)out = 136446722;
          *(void *)&out[4] = "nw_protocol_masque_connect";
          *(_WORD *)&out[12] = 2082;
          *(void *)&out[14] = v45;
          *(_WORD *)&out[22] = 2082;
          *(void *)&out[24] = v43;
          _os_log_impl( &dword_181A5C000,  v39,  v40,  "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s",  (uint8_t *)out,  0x20u);
        }

        free(v43);
      }

  if (v26) {
    free(v26);
  }
LABEL_14:
}

      objc_super v13 = *(os_unfair_lock_s **)(a1 + 32);
      goto LABEL_59;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v34 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
    {
      id v35 = "IP";
      uint64_t v36 = *(unsigned __int8 *)(a1 + 48);
      os_log_type_t v37 = *(void *)(a1 + 32);
      id v38 = *(void *)(a1 + 40);
      if (v36 == 6) {
        id v35 = "TCP";
      }
      id v39 = *(void *)(v37 + 16);
      os_log_type_t v40 = *(void *)(v37 + 224);
      if (v36 == 17) {
        id v35 = "UDP";
      }
      *(_DWORD *)buf = 136447490;
      *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_setup_outer_connection_inner_block_invoke";
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v39;
      *(_WORD *)&_BYTE buf[22] = 2080;
      int v126 = (void *(*)(uint64_t, uint64_t))v35;
      *(_WORD *)char v127 = 2112;
      *(void *)&v127[2] = v38;
      *(_WORD *)&v127[10] = 2112;
      *(void *)&v127[12] = v5;
      nw_endpoint_t v128 = 2112;
      nw_endpoint_t v129 = v40;
      _os_log_impl( &dword_181A5C000,  v34,  OS_LOG_TYPE_INFO,  "%{public}s %{public}@ Failed %s connection to %@ with error %@ (for %@)\n",  buf,  0x3Eu);
    }

    *(_BYTE *)(*(void *)(a1 + 32) + 217LL) = 1;
    if (v5)
    {
      os_log_type_t v41 = v5;
      BOOL v42 = v41[2];

      if (v42 == 2)
      {
        int v43 = v41;
        BOOL v44 = v43[3];

        if (v44 == -65554)
        {
          well_known = (os_log_s *)_nw_http_response_create_well_known(502LL);
          if (!*(_BYTE *)(*(void *)(a1 + 32) + 220LL))
          {
            os_log_type_t v45 = (void *)[v12 mutableCopy];
            [v45 appendString:@"; error=dns_error"];
            nw_http_fields_append(well_known, (uint64_t)"Proxy-Status", [v45 UTF8String]);
LABEL_56:

            goto LABEL_57;
          }

          goto LABEL_57;
        }
      }

      char v48 = v41;
      int v49 = v41[2];

      if (v49 == 1)
      {
        unint64_t v50 = v48;
        unsigned int v51 = v50[3];

        if (v51 == 61)
        {
          well_known = (os_log_s *)_nw_http_response_create_well_known(502LL);
          if (!*(_BYTE *)(*(void *)(a1 + 32) + 220LL))
          {
            os_log_type_t v45 = (void *)[v12 mutableCopy];
            [v45 appendString:@"; error=connection_refused"];
            nw_http_fields_append(well_known, (uint64_t)"Proxy-Status", [v45 UTF8String]);
            goto LABEL_56;
          }

  __break(1u);
  return result;
}

  *(_DWORD *)(v5 + 16_Block_object_dispose(va, 8) = self->_requiredInterfaceType;
  *(_WORD *)(v5 + 196) |= 0x10u;
  has = (__int16)self->_has;
  if ((has & 0x400) == 0)
  {
LABEL_7:
    if ((has & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_60;
  }

    if (v40) {
      free(v40);
    }
    return;
  }

  os_log_type_t v7 = v3;
  os_log_type_t v8 = v7[29];

  if ((_DWORD)v8 == 4)
  {
    int v9 = nw_endpoint_handler_copy_fallback(*(NWConcrete_nw_endpoint_handler **)(a1 + 32));
    size_t v10 = v9;
    char v11 = *((void *)v9 + 1);
    os_log_type_t v12 = __CFADD__(v11, a3);
    objc_super v13 = v11 + a3;
    if (v12) {
      os_log_type_t v14 = 1;
    }
    else {
      os_log_type_t v14 = a2;
    }
    if (v12) {
      objc_super v13 = -1LL;
    }
    *((_DWORD *)v9 + 26) = v14;
    *((void *)v9 + 1) = v13;
    if (a2 == 2)
    {
      os_log_type_t v37 = *((void *)v9 + 11);
      id v38 = dispatch_time(0x8000000000000000LL, 1000000LL * *((void *)v9 + 2));
      nw_queue_set_timer_values(v37, v38, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
      goto LABEL_32;
    }

    if (a2 != 1)
    {
      if (!a2)
      {
        if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          __int16 v16 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
            uint64_t v18 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
            os_log_type_t v19 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
            logging_description = nw_endpoint_get_logging_description(v19);
            os_log_type_t v21 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
            BOOL v22 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
            os_log_type_t v23 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
            *(_DWORD *)buf = 136447746;
            __int16 v57 = "nw_endpoint_fallback_check_usage_cap_block_invoke";
            os_log_type_t v58 = 2082;
            BOOL v59 = (void *)id_string;
            int v60 = 2082;
            nw_endpoint_t v61 = v18;
            os_log_type_t v62 = 2082;
            os_log_type_t v63 = logging_description;
            os_log_type_t v64 = 2082;
            uint64_t v65 = v21;
            __int16 v66 = 2082;
            os_log_type_t v67 = v22;
            __int16 v68 = 2114;
            os_log_type_t v69 = v23;
            _os_log_impl( &dword_181A5C000,  v16,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] fallback no longer allowe d for connection, cancelling",  buf,  0x48u);
          }
        }

        BOOL v24 = *((void *)v10 + 11);
        if (v24)
        {
          nw_queue_cancel_source(v24, v15);
          *((void *)v10 + 11) = 0LL;
        }

        nw_endpoint_handler_cancel(*((void **)v10 + 5), 0LL, 1);
      }

      goto LABEL_32;
    }

    int minimize_logging = nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 32));
    char logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32));
    if (minimize_logging)
    {
      if ((logging_disabled & 1) != 0) {
        goto LABEL_32;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      os_log_type_t v29 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v47 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        char v48 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        int v49 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        unint64_t v50 = nw_endpoint_get_logging_description(v49);
        unsigned int v51 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        os_log_type_t v52 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        BOOL v53 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136447746;
        __int16 v57 = "nw_endpoint_fallback_check_usage_cap_block_invoke";
        os_log_type_t v58 = 2082;
        BOOL v59 = (void *)v47;
        int v60 = 2082;
        nw_endpoint_t v61 = v48;
        os_log_type_t v62 = 2082;
        os_log_type_t v63 = v50;
        os_log_type_t v64 = 2082;
        uint64_t v65 = v51;
        __int16 v66 = 2082;
        os_log_type_t v67 = v52;
        __int16 v68 = 2114;
        os_log_type_t v69 = v53;
        _os_log_impl( &dword_181A5C000,  v29,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] fallback now allowed for conn ection with no cap",  buf,  0x48u);
      }
    }

    else
    {
      if ((logging_disabled & 1) != 0)
      {
LABEL_32:

        return;
      }

      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      os_log_type_t v29 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        char v30 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        os_log_type_t v31 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        unsigned int v32 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        unint64_t v33 = nw_endpoint_get_logging_description(v32);
        __int16 v34 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        id v35 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        uint64_t v36 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136447746;
        __int16 v57 = "nw_endpoint_fallback_check_usage_cap_block_invoke";
        os_log_type_t v58 = 2082;
        BOOL v59 = (void *)v30;
        int v60 = 2082;
        nw_endpoint_t v61 = v31;
        os_log_type_t v62 = 2082;
        os_log_type_t v63 = v33;
        os_log_type_t v64 = 2082;
        uint64_t v65 = v34;
        __int16 v66 = 2082;
        os_log_type_t v67 = v35;
        __int16 v68 = 2114;
        os_log_type_t v69 = v36;
        _os_log_impl( &dword_181A5C000,  v29,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] fallback now allowed for conn ection with no cap",  buf,  0x48u);
      }
    }

    goto LABEL_32;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v25 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    else {
      BOOL v26 = off_189BBBBC0[v8];
    }
    *(_DWORD *)buf = 136446722;
    __int16 v57 = "nw_endpoint_fallback_check_usage_cap_block_invoke";
    os_log_type_t v58 = 2082;
    BOOL v59 = (void *)v26;
    int v60 = 2082;
    nw_endpoint_t v61 = "fallback";
    _os_log_impl( &dword_181A5C000,  v25,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
  }
}

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  unsigned int v51 = (id)gLogObj;
  if (mode > 5) {
    os_log_type_t v52 = "unknown-mode";
  }
  else {
    os_log_type_t v52 = off_189BBBBC0[mode];
  }
  *(_DWORD *)buf = 136446722;
  char v77 = "nw_endpoint_fallback_reset_expected_progress_target";
  uint64_t v78 = 2082;
  nw_endpoint_t v79 = (void *)v52;
  __int16 v80 = 2082;
  int v81 = "fallback";
  BOOL v53 = (void *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v74 = 0;
  if (!__nwlog_fault((const char *)v53, &type, &v74))
  {
LABEL_90:
    if (!v53) {
      goto LABEL_92;
    }
LABEL_91:
    free(v53);
    goto LABEL_92;
  }

  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v54 = (os_log_s *)(id)gLogObj;
    int v55 = type;
    if (os_log_type_enabled(v54, type))
    {
      if (mode > 5) {
        __int16 v56 = "unknown-mode";
      }
      else {
        __int16 v56 = off_189BBBBC0[mode];
      }
      *(_DWORD *)buf = 136446722;
      char v77 = "nw_endpoint_fallback_reset_expected_progress_target";
      uint64_t v78 = 2082;
      nw_endpoint_t v79 = (void *)v56;
      __int16 v80 = 2082;
      int v81 = "fallback";
      _os_log_impl( &dword_181A5C000,  v54,  v55,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
    }

  if (v19) {
    free(v19);
  }
  os_log_type_t v7 = 0LL;
LABEL_25:

  return v7;
}

    goto LABEL_59;
  }

  char v11 = v7[1];
  if (v11)
  {
    if (v9)
    {
      os_log_type_t v12 = (char *)v9;
      objc_super v13 = v12 + 8;

      char v11 = v7[1];
      if (v8) {
        goto LABEL_11;
      }
    }

    else
    {
      objc_super v13 = "proxy-wildcard";
      if (v8) {
        goto LABEL_11;
      }
    }

    os_log_type_t v14 = nw_dictionary_copy_value(v11, nw_proxy_config_default_transport(void)::default_transport_string);
    if (v14)
    {
      os_log_type_t v8 = v14;
      char v11 = v7[1];
LABEL_11:
      nw_dictionary_set_value(v11, v13, v8);
      if (a4 - 2 <= 2)
      {
        os_log_type_t v15 = (void *)v7[2];
        if (!v15)
        {
          __int16 v16 = xpc_dictionary_create(0LL, 0LL, 0LL);
          os_log_type_t v17 = (void *)v7[2];
          v7[2] = v16;

          os_log_type_t v15 = (void *)v7[2];
        }

        xpc_dictionary_set_uint64(v15, v13, a4);
      }

      goto LABEL_15;
    }

    __nwlog_obj();
    char v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    int v43 = "nw_proxy_config_set_alternate_protocol_stack";
    os_log_type_t v31 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v40 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unsigned int v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      unint64_t v33 = type;
      if (os_log_type_enabled(v32, type))
      {
        *(_DWORD *)buf = 136446210;
        int v43 = "nw_proxy_config_set_alternate_protocol_stack";
        _os_log_impl(&dword_181A5C000, v32, v33, "%{public}s called with null stack", buf, 0xCu);
      }
    }

    else if (v40)
    {
      uint64_t v36 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unsigned int v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v37 = type;
      id v38 = os_log_type_enabled(v32, type);
      if (v36)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          int v43 = "nw_proxy_config_set_alternate_protocol_stack";
          BOOL v44 = 2082;
          os_log_type_t v45 = v36;
          _os_log_impl( &dword_181A5C000,  v32,  v37,  "%{public}s called with null stack, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v36);
        goto LABEL_67;
      }

      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        int v43 = "nw_proxy_config_set_alternate_protocol_stack";
        _os_log_impl(&dword_181A5C000, v32, v37, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      unsigned int v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v39 = type;
      if (os_log_type_enabled(v32, type))
      {
        *(_DWORD *)buf = 136446210;
        int v43 = "nw_proxy_config_set_alternate_protocol_stack";
        _os_log_impl( &dword_181A5C000,  v32,  v39,  "%{public}s called with null stack, backtrace limit exceeded",  buf,  0xCu);
      }
    }

LABEL_67:
    if (v31) {
      free(v31);
    }
    os_log_type_t v8 = 0LL;
    goto LABEL_15;
  }

  __nwlog_obj();
  BOOL v22 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v43 = "nw_proxy_config_set_alternate_protocol_stack";
  os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v40 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v23 = type;
    if (os_log_type_enabled(v20, type))
    {
      *(_DWORD *)buf = 136446210;
      int v43 = "nw_proxy_config_set_alternate_protocol_stack";
      _os_log_impl(&dword_181A5C000, v20, v23, "%{public}s called with null config->stacks", buf, 0xCu);
    }

    goto LABEL_58;
  }

  if (!v40)
  {
    __nwlog_obj();
    char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v35 = type;
    if (os_log_type_enabled(v20, type))
    {
      *(_DWORD *)buf = 136446210;
      int v43 = "nw_proxy_config_set_alternate_protocol_stack";
      _os_log_impl( &dword_181A5C000,  v20,  v35,  "%{public}s called with null config->stacks, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_58;
  }

  os_log_type_t v27 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v28 = type;
  os_log_type_t v29 = os_log_type_enabled(v20, type);
  if (!v27)
  {
    if (v29)
    {
      *(_DWORD *)buf = 136446210;
      int v43 = "nw_proxy_config_set_alternate_protocol_stack";
      _os_log_impl(&dword_181A5C000, v20, v28, "%{public}s called with null config->stacks, no backtrace", buf, 0xCu);
    }

    goto LABEL_58;
  }

  if (v29)
  {
    *(_DWORD *)buf = 136446466;
    int v43 = "nw_proxy_config_set_alternate_protocol_stack";
    BOOL v44 = 2082;
    os_log_type_t v45 = v27;
    _os_log_impl( &dword_181A5C000,  v20,  v28,  "%{public}s called with null config->stacks, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v27);
  if (v19) {
    goto LABEL_60;
  }
LABEL_15:
}

  if (v24) {
    free(v24);
  }
  size_t v10 = 0LL;
LABEL_25:

  return v10;
}

  if (v13)
  {
LABEL_59:
    id v35 = (char *)v13;
LABEL_60:
    free(v35);
  }

  if (v6) {
    free(v6);
  }
  return 0xFFFFFFFFLL;
}

  if (v6) {
    free(v6);
  }
  return 0xFFFFFFFFLL;
}

  if (v6) {
    free(v6);
  }
  return 0xFFFFFFFFLL;
}

      if (v30) {
        free(v30);
      }
      *(_DWORD *)(v3 + 36_Block_object_dispose(va, 8) = 0;
      uint64_t v4 = v28;
      goto LABEL_61;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v16 = *(unsigned int *)(v3 + 336);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = "http1->connections_count";
    *(_WORD *)&_BYTE buf[22] = 2048;
    dispatch_time_t v137 = 1LL;
    *(_WORD *)__int16 v138 = 2048;
    *(void *)&v138[2] = v16;
    os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v141) = 16;
    nw_endpoint_t v131 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v17, &v141, &v131))
    {
      if (v141 == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v18 = (os_log_s *)gLogObj;
        os_log_type_t v19 = v141;
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v141))
        {
          char v20 = *(unsigned int *)(v3 + 336);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->connections_count";
          *(_WORD *)&_BYTE buf[22] = 2048;
          dispatch_time_t v137 = 1LL;
          *(_WORD *)__int16 v138 = 2048;
          *(void *)&v138[2] = v20;
          os_log_type_t v21 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_36:
          _os_log_impl(&dword_181A5C000, v18, v19, v21, buf, 0x2Au);
        }
      }

      else if (v131)
      {
        BOOL v22 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v18 = (os_log_s *)gLogObj;
        os_log_type_t v19 = v141;
        os_log_type_t v23 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v141);
        if (v22)
        {
          if (v23)
          {
            BOOL v24 = *(unsigned int *)(v3 + 336);
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "http1->connections_count";
            *(_WORD *)&_BYTE buf[22] = 2048;
            dispatch_time_t v137 = 1LL;
            *(_WORD *)__int16 v138 = 2048;
            *(void *)&v138[2] = v24;
            *(_WORD *)&v138[10] = 2082;
            *(void *)&v138[12] = v22;
            _os_log_impl( &dword_181A5C000,  v18,  v19,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v22);
          goto LABEL_37;
        }

        if (v23)
        {
          BOOL v26 = *(unsigned int *)(v3 + 336);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->connections_count";
          *(_WORD *)&_BYTE buf[22] = 2048;
          dispatch_time_t v137 = 1LL;
          *(_WORD *)__int16 v138 = 2048;
          *(void *)&v138[2] = v26;
          os_log_type_t v21 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          goto LABEL_36;
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v18 = (os_log_s *)gLogObj;
        os_log_type_t v19 = v141;
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v141))
        {
          os_log_type_t v25 = *(unsigned int *)(v3 + 336);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->connections_count";
          *(_WORD *)&_BYTE buf[22] = 2048;
          dispatch_time_t v137 = 1LL;
          *(_WORD *)__int16 v138 = 2048;
          *(void *)&v138[2] = v25;
          os_log_type_t v21 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_36;
        }
      }
    }

    -[NWNetworkDescription dnsServerAddressOptions](self, "dnsServerAddressOptions");
    os_log_type_t v45 = (void *)objc_claimAutoreleasedReturnValue();

    if (v45)
    {
      [v6 dnsServersAsStrings];
      int v9 = (id)objc_claimAutoreleasedReturnValue();
      BOOL v46 = [v6 overrideDNSServersAsStrings];
      os_log_type_t v47 = (void *)v46;
      if (v9)
      {
        -[NWNetworkDescription dnsServerAddressOptions](self, "dnsServerAddressOptions");
        id v3 = (Class *)objc_claimAutoreleasedReturnValue();
        if (NWUtilsAnyStringsMatchPatternSet(v9, v3))
        {

          goto LABEL_70;
        }

        if (!v47)
        {
LABEL_80:

          goto LABEL_81;
        }
      }

      else if (!v46)
      {
        goto LABEL_79;
      }

      -[NWNetworkDescription dnsServerAddressOptions](self, "dnsServerAddressOptions");
      char v48 = (void *)objc_claimAutoreleasedReturnValue();
      matched = NWUtilsAnyStringsMatchPatternSet(v47, v48);

      if (v9)
      {

        if ((matched & 1) == 0) {
          goto LABEL_79;
        }
      }

      else
      {

        if (!matched) {
          goto LABEL_79;
        }
      }
    }

        _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0x16u);
        goto LABEL_59;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      objc_super v13 = (os_log_s *)gLogObj;
      os_log_type_t v14 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v36 = "nw_protocol_register_many_to_one";
        os_log_type_t v37 = 2082;
        id v38 = a1;
        os_log_type_t v15 = "%{public}s Protocol identifier %{public}s is already registered";
        goto LABEL_58;
      }

            goto LABEL_59;
          }

          if (!v43)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            char v20 = (os_log_s *)(id)gLogObj;
            uint64_t v36 = type[0];
            if (os_log_type_enabled(v20, type[0]))
            {
              *(_DWORD *)aBlock = 136446210;
              *(void *)&void aBlock[4] = "nw_protocol_instance_registrar_copy_shared_connection_state";
              _os_log_impl( &dword_181A5C000,  v20,  v36,  "%{public}s called with null context, backtrace limit exceeded",  aBlock,  0xCu);
            }

            goto LABEL_58;
          }

          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v20 = (os_log_s *)(id)gLogObj;
          unsigned int v32 = type[0];
          unint64_t v33 = os_log_type_enabled(v20, type[0]);
          if (!backtrace_string)
          {
            if (v33)
            {
              *(_DWORD *)aBlock = 136446210;
              *(void *)&void aBlock[4] = "nw_protocol_instance_registrar_copy_shared_connection_state";
              _os_log_impl( &dword_181A5C000,  v20,  v32,  "%{public}s called with null context, no backtrace",  aBlock,  0xCu);
            }

            goto LABEL_58;
          }

          if (v33)
          {
            *(_DWORD *)aBlock = 136446466;
            *(void *)&void aBlock[4] = "nw_protocol_instance_registrar_copy_shared_connection_state";
            *(_WORD *)&aBlock[12] = 2082;
            *(void *)&aBlock[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v20,  v32,  "%{public}s called with null context, dumping backtrace:%{public}s",  aBlock,  0x16u);
          }

          free(backtrace_string);
        }

      goto LABEL_43;
    }

    if (v17 == -256LL)
    {
      __nwlog_obj();
      id v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v38, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      char v48 = "strict_malloc";
      id v39 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t v31 = __nwlog_abort((uint64_t)v39);
      if (v31) {
        goto LABEL_75;
      }
      free(v39);
    }

    os_log_type_t v23 = malloc(v18);
    if (v23)
    {
      BOOL v24 = v23;
      os_log_type_t v25 = (void *)*((void *)v8 + 1);
      os_log_type_t v17 = *((void *)v8 + 2);
      memcpy(v23, v25, v17);
      if (v25)
      {
        free(v25);
        *((void *)v8 + 1) = 0LL;
        os_log_type_t v17 = *((void *)v8 + 2);
      }

      *((void *)v8 + 1) = v24;
      *((void *)v8 + 3) = v18;
      goto LABEL_30;
    }

    __nwlog_obj();
    os_log_type_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v40, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446466;
    char v48 = "strict_malloc";
    int v49 = 2048;
    unint64_t v50 = v18;
    os_log_type_t v41 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t v31 = __nwlog_abort((uint64_t)v41);
    if (!v31)
    {
      free(v41);
      os_unfair_lock_unlock((os_unfair_lock_t)v8 + 8);
      __nwlog_obj();
      BOOL v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v42, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      char v48 = "nw_txt_record_set_key";
      int v43 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t v31 = __nwlog_abort((uint64_t)v43);
      if (!v31)
      {
        free(v43);
        os_log_type_t v29 = 0;
        goto LABEL_44;
      }
    }

    if (v24) {
      free(v24);
    }
    goto LABEL_60;
  }

    free(backtrace_string);
    goto LABEL_74;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v35 = "nw_protocol_http3_stream_get_parameters";
    os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    unsigned int v32 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v20 = (os_log_s *)__nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      id v35 = "nw_protocol_http3_stream_get_parameters";
      BOOL v22 = "%{public}s called with null http3_stream";
      goto LABEL_73;
    }

    if (!v32)
    {
      char v20 = (os_log_s *)__nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      id v35 = "nw_protocol_http3_stream_get_parameters";
      BOOL v22 = "%{public}s called with null http3_stream, backtrace limit exceeded";
      goto LABEL_73;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    char v20 = (os_log_s *)__nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v26 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        id v35 = "nw_protocol_http3_stream_get_parameters";
        BOOL v22 = "%{public}s called with null http3_stream, no backtrace";
        goto LABEL_73;
      }

      goto LABEL_74;
    }

    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      id v35 = "nw_protocol_http3_stream_get_parameters";
      uint64_t v36 = 2082;
      os_log_type_t v37 = backtrace_string;
      os_log_type_t v25 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
      goto LABEL_57;
    }

    goto LABEL_58;
  }

  if (handle + 64 != (char *)a1)
  {
    if ((*((_WORD *)handle + 368) & 0x1000) == 0)
    {
      if (*((void *)handle + 4))
      {
        nw_http3_fix_quic_parameters(*((void *)handle + 42), *((void **)handle + 44), 0, 0);
        *((_WORD *)handle + 368) |= 0x1000u;
      }
    }

    return *((void *)handle + 44);
  }

  if (*((void *)handle + 45)) {
    goto LABEL_9;
  }
  id v3 = (void *)*((void *)handle + 44);
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v4,  0,  1);

    *((void *)handle + 45) = v5;
    os_log_type_t v6 = *((void *)handle + 4);
    if (v6)
    {
      os_log_type_t v7 = nw_parameters_copy_protocol_options_legacy((void *)v5, *((nw_protocol **)handle + 4));
      if (v7)
      {
        os_log_type_t v8 = v7;
        if (nw_protocol_options_is_quic_stream(v7))
        {
          int v9 = nw_protocol_options_copy(v8);
          nw_quic_stream_set_is_unidirectional(v9, 0);
          nw_quic_stream_set_is_datagram(v9, 1);
          nw_quic_stream_set_associated_stream_id(v9, *((void *)handle + 30));
          nw_quic_stream_set_datagram_context_id(v9, *((void *)handle + 32));
          nw_protocol_http3_add_alpn_to_quic_options((nw_protocol_options *)v9);
          if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
            dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55294);
          }
          size_t v10 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
          nw_parameters_set_protocol_instance(v9, v11, v6);
          if (v10) {
            os_release(v10);
          }
          nw_protocol_options_inherit_log_id(v8, v9);
          nw_protocol_options_set_prohibit_joining(v9);
          os_log_type_t v12 = nw_parameters_copy_default_protocol_stack(*((nw_parameters_t *)handle + 45));
          nw_protocol_stack_replace_protocol_with_handle(v12, v6, v9);
          if (v12) {
            os_release(v12);
          }
          if (v9) {
            os_release(v9);
          }
        }

        os_release(v8);
      }

  if (v27) {
    free(v27);
  }
LABEL_41:
}

        free(v14);
        goto LABEL_59;
      }

      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interpose_flow_get_locked";
        _os_log_impl(&dword_181A5C000, v15, v27, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interpose_flow_get_locked";
        _os_log_impl( &dword_181A5C000,  v15,  v31,  "%{public}s called with null flow, backtrace limit exceeded",  buf,  0xCu);
      }
    }

  if (v12) {
    free(v12);
  }
  return 0LL;
}

      free(backtrace_string);
      goto LABEL_75;
    }

    char v20 = (os_log_s *)__nwlog_obj();
    os_log_type_t v21 = type[0];
    if (!os_log_type_enabled(v20, type[0])) {
      goto LABEL_75;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v36 = "nw_socket_remove_input_handler";
    BOOL v22 = "%{public}s called with null protocol";
LABEL_74:
    _os_log_impl(&dword_181A5C000, v20, v21, v22, buf, 0xCu);
LABEL_75:
    if (v19) {
      free(v19);
    }
    return 0LL;
  }

  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v36 = "nw_socket_remove_input_handler";
    os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    unint64_t v33 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v20 = (os_log_s *)__nwlog_obj();
      os_log_type_t v21 = type[0];
      if (!os_log_type_enabled(v20, type[0])) {
        goto LABEL_75;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v36 = "nw_socket_remove_input_handler";
      BOOL v22 = "%{public}s called with null socket_handler";
      goto LABEL_74;
    }

    if (!v33)
    {
      char v20 = (os_log_s *)__nwlog_obj();
      os_log_type_t v21 = type[0];
      if (!os_log_type_enabled(v20, type[0])) {
        goto LABEL_75;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v36 = "nw_socket_remove_input_handler";
      BOOL v22 = "%{public}s called with null socket_handler, backtrace limit exceeded";
      goto LABEL_74;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    char v20 = (os_log_s *)__nwlog_obj();
    os_log_type_t v21 = type[0];
    char v30 = os_log_type_enabled(v20, type[0]);
    if (backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v36 = "nw_socket_remove_input_handler";
        os_log_type_t v37 = 2082;
        id v38 = backtrace_string;
        os_log_type_t v29 = "%{public}s called with null socket_handler, dumping backtrace:%{public}s";
        goto LABEL_57;
      }

      goto LABEL_58;
    }

    if (!v30) {
      goto LABEL_75;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v36 = "nw_socket_remove_input_handler";
    BOOL v22 = "%{public}s called with null socket_handler, no backtrace";
    goto LABEL_74;
  }

  if (a2)
  {
    if (a2->output_handler == a1)
    {
      callbacks = a1[1].callbacks;
      if (callbacks)
      {
        os_log_type_t v7 = (nw_protocol_callbacks *)((char *)callbacks - 1);
        a1[1].callbacks = v7;
        if (!v7)
        {
          os_log_type_t v8 = *(void (***)(void))a1[1].flow_id;
          if (v8)
          {
            *(void *)a1[1].flow_id = 0LL;
            v8[2](v8);
            _Block_release(v8);
          }

          if ((a1[1].flow_id[8] & 1) != 0)
          {
            int v9 = *(const void **)a1[1].flow_id;
            if (v9) {
              _Block_release(v9);
            }
          }

          free(a1);
        }
      }

      a2->output_handler = 0LL;
    }

    goto LABEL_14;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v36 = "__nw_protocol_get_output_handler";
  os_log_type_t v23 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  unint64_t v33 = 0;
  if (__nwlog_fault(v23, type, &v33))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v24 = (os_log_s *)__nwlog_obj();
      os_log_type_t v25 = type[0];
      if (!os_log_type_enabled(v24, type[0])) {
        goto LABEL_80;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v36 = "__nw_protocol_get_output_handler";
      BOOL v26 = "%{public}s called with null protocol";
      goto LABEL_79;
    }

    if (!v33)
    {
      BOOL v24 = (os_log_s *)__nwlog_obj();
      os_log_type_t v25 = type[0];
      if (!os_log_type_enabled(v24, type[0])) {
        goto LABEL_80;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v36 = "__nw_protocol_get_output_handler";
      BOOL v26 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_79;
    }

    os_log_type_t v31 = (char *)__nw_create_backtrace_string();
    BOOL v24 = (os_log_s *)__nwlog_obj();
    os_log_type_t v25 = type[0];
    unsigned int v32 = os_log_type_enabled(v24, type[0]);
    if (v31)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v36 = "__nw_protocol_get_output_handler";
        os_log_type_t v37 = 2082;
        id v38 = v31;
        _os_log_impl( &dword_181A5C000,  v24,  v25,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v31);
      goto LABEL_80;
    }

    if (v32)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v36 = "__nw_protocol_get_output_handler";
      BOOL v26 = "%{public}s called with null protocol, no backtrace";
LABEL_79:
      _os_log_impl(&dword_181A5C000, v24, v25, v26, buf, 0xCu);
    }
  }

        goto LABEL_158;
      }

      if (!(_BYTE)v90)
      {
        __nwlog_obj();
        size_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        unint64_t v33 = type[0];
        if (os_log_type_enabled(v10, type[0]))
        {
          *(_DWORD *)&buf[0].sa_len = 136446722;
          *(void *)&buf[0].sa_data[2] = "-[nw_listener_inbox_socket start]";
          *(_WORD *)&buf[0].sa_data[10] = 1024;
          *(_DWORD *)&buf[0].sa_data[12] = sockfd_from_client;
          *(_WORD *)buf[1].sa_data = 1024;
          *(_DWORD *)&buf[1].sa_data[2] = v7;
          _os_log_impl( &dword_181A5C000,  v10,  v33,  "%{public}s setsockopt(%d, TCP_FASTOPEN, 1) failed %{darwin.errno}d, backtrace limit exceeded",  &buf[0].sa_len,  0x18u);
        }

        goto LABEL_58;
      }

      BOOL v26 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      size_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = type[0];
      os_log_type_t v28 = os_log_type_enabled(v10, type[0]);
      if (!v26)
      {
        if (v28)
        {
          *(_DWORD *)&buf[0].sa_len = 136446722;
          *(void *)&buf[0].sa_data[2] = "-[nw_listener_inbox_socket start]";
          *(_WORD *)&buf[0].sa_data[10] = 1024;
          *(_DWORD *)&buf[0].sa_data[12] = sockfd_from_client;
          *(_WORD *)buf[1].sa_data = 1024;
          *(_DWORD *)&buf[1].sa_data[2] = v7;
          _os_log_impl( &dword_181A5C000,  v10,  v27,  "%{public}s setsockopt(%d, TCP_FASTOPEN, 1) failed %{darwin.errno}d, no backtrace",  &buf[0].sa_len,  0x18u);
        }

        goto LABEL_58;
      }

      if (v28)
      {
        *(_DWORD *)&buf[0].sa_len = 136446978;
        *(void *)&buf[0].sa_data[2] = "-[nw_listener_inbox_socket start]";
        *(_WORD *)&buf[0].sa_data[10] = 1024;
        *(_DWORD *)&buf[0].sa_data[12] = sockfd_from_client;
        *(_WORD *)buf[1].sa_data = 1024;
        *(_DWORD *)&buf[1].sa_data[2] = v7;
        *(_WORD *)&buf[1].sa_data[6] = 2082;
        *(void *)&buf[1].sa_data[8] = v26;
        _os_log_impl( &dword_181A5C000,  v10,  v27,  "%{public}s setsockopt(%d, TCP_FASTOPEN, 1) failed %{darwin.errno}d, dumping backtrace:%{public}s",  &buf[0].sa_len,  0x22u);
      }

LABEL_119:
      free(v26);
      if (!v9) {
        goto LABEL_160;
      }
      goto LABEL_159;
    }

    self->_sockfd_for_logging_only_do_not_close_or_use = sockfd_from_client;
    if (-[nw_listener_inbox multicast](self, "multicast"))
    {
      os_log_type_t v12 = dup(sockfd_from_client);
      objc_super v13 = (OS_nw_fd_wrapper *)nw_fd_wrapper_create(v12);
      sockfd_wrapper_for_connection_group_only = self->_sockfd_wrapper_for_connection_group_only;
      self->_sockfd_wrapper_for_connection_group_only = v13;
    }

    else
    {
      sockfd_wrapper_for_connection_group_only = self->_sockfd_wrapper_for_connection_group_only;
      self->_sockfd_wrapper_for_connection_group_only = 0LL;
    }

    if (v3 >= 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v18 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)&buf[0].sa_len = 136446466;
        *(void *)&buf[0].sa_data[2] = "-[nw_listener_inbox_socket start]";
        *(_WORD *)&buf[0].sa_data[10] = 1024;
        *(_DWORD *)&buf[0].sa_data[12] = sockfd_from_client;
        _os_log_impl(&dword_181A5C000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s Not guarding fd %d", &buf[0].sa_len, 0x12u);
      }

      goto LABEL_67;
    }

    if ((nw_fd_wrapper_guard(v6) & 1) != 0) {
      goto LABEL_67;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v22 = (id)gLogObj;
    *(_DWORD *)&buf[0].sa_len = 136446466;
    *(void *)&buf[0].sa_data[2] = "-[nw_listener_inbox_socket start]";
    *(_WORD *)&buf[0].sa_data[10] = 1024;
    *(_DWORD *)&buf[0].sa_data[12] = sockfd_from_client;
    os_log_type_t v23 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v90) = 0;
    if (__nwlog_fault(v23, type, &v90))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v24 = (os_log_s *)(id)gLogObj;
        os_log_type_t v25 = type[0];
        if (os_log_type_enabled(v24, type[0]))
        {
          *(_DWORD *)&buf[0].sa_len = 136446466;
          *(void *)&buf[0].sa_data[2] = "-[nw_listener_inbox_socket start]";
          *(_WORD *)&buf[0].sa_data[10] = 1024;
          *(_DWORD *)&buf[0].sa_data[12] = sockfd_from_client;
          _os_log_impl(&dword_181A5C000, v24, v25, "%{public}s Failed to protect fd %d", &buf[0].sa_len, 0x12u);
        }
      }

      else if ((_BYTE)v90)
      {
        char v30 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v31 = type[0];
        unsigned int v32 = os_log_type_enabled(v24, type[0]);
        if (v30)
        {
          if (v32)
          {
            *(_DWORD *)&buf[0].sa_len = 136446722;
            *(void *)&buf[0].sa_data[2] = "-[nw_listener_inbox_socket start]";
            *(_WORD *)&buf[0].sa_data[10] = 1024;
            *(_DWORD *)&buf[0].sa_data[12] = sockfd_from_client;
            *(_WORD *)buf[1].sa_data = 2082;
            *(void *)&buf[1].sa_data[2] = v30;
            _os_log_impl( &dword_181A5C000,  v24,  v31,  "%{public}s Failed to protect fd %d, dumping backtrace:%{public}s",  &buf[0].sa_len,  0x1Cu);
          }

          free(v30);
          goto LABEL_65;
        }

        if (v32)
        {
          *(_DWORD *)&buf[0].sa_len = 136446466;
          *(void *)&buf[0].sa_data[2] = "-[nw_listener_inbox_socket start]";
          *(_WORD *)&buf[0].sa_data[10] = 1024;
          *(_DWORD *)&buf[0].sa_data[12] = sockfd_from_client;
          _os_log_impl( &dword_181A5C000,  v24,  v31,  "%{public}s Failed to protect fd %d, no backtrace",  &buf[0].sa_len,  0x12u);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __int16 v34 = type[0];
        if (os_log_type_enabled(v24, type[0]))
        {
          *(_DWORD *)&buf[0].sa_len = 136446466;
          *(void *)&buf[0].sa_data[2] = "-[nw_listener_inbox_socket start]";
          *(_WORD *)&buf[0].sa_data[10] = 1024;
          *(_DWORD *)&buf[0].sa_data[12] = sockfd_from_client;
          _os_log_impl( &dword_181A5C000,  v24,  v34,  "%{public}s Failed to protect fd %d, backtrace limit exceeded",  &buf[0].sa_len,  0x12u);
        }
      }
    }

  if (v15) {
    free(v15);
  }
  return 0LL;
}

    if (v12) {
      free(v12);
    }
    goto LABEL_5;
  }

  __nwlog_obj();
  int v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v30 = "nw_tls_options_add_transport_specific_application_protocol";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v27 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    size_t v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      char v30 = "nw_tls_options_add_transport_specific_application_protocol";
      _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null application_protocol", buf, 0xCu);
    }

    goto LABEL_52;
  }

  if (!v27)
  {
    __nwlog_obj();
    os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v25 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      char v30 = "nw_tls_options_add_transport_specific_application_protocol";
      _os_log_impl( &dword_181A5C000,  v7,  v25,  "%{public}s called with null application_protocol, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_52;
  }

  uint64_t v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v19 = type;
  char v20 = os_log_type_enabled(v7, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      char v30 = "nw_tls_options_add_transport_specific_application_protocol";
      _os_log_impl( &dword_181A5C000,  v7,  v19,  "%{public}s called with null application_protocol, no backtrace",  buf,  0xCu);
    }

    goto LABEL_52;
  }

  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    char v30 = "nw_tls_options_add_transport_specific_application_protocol";
    os_log_type_t v31 = 2082;
    unsigned int v32 = v18;
    _os_log_impl( &dword_181A5C000,  v7,  v19,  "%{public}s called with null application_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v18);
  if (v6) {
    goto LABEL_54;
  }
LABEL_6:
}

    goto LABEL_59;
  }

  id v5 = v3;
  os_log_type_t v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
  }
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_definition_http_definition);

  if (!is_equal_unsafe)
  {
    __nwlog_obj();
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    unint64_t v33 = "nw_http_metadata_enumerate_headers";
    char v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v33 = "nw_http_metadata_enumerate_headers";
        _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s metadata must be http", buf, 0xCu);
      }

      goto LABEL_58;
    }

    if (!v30)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v33 = "nw_http_metadata_enumerate_headers";
        _os_log_impl( &dword_181A5C000,  v12,  v27,  "%{public}s metadata must be http, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_58;
    }

    os_log_type_t v21 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v22 = type;
    os_log_type_t v23 = os_log_type_enabled(v12, type);
    if (!v21)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v33 = "nw_http_metadata_enumerate_headers";
        _os_log_impl(&dword_181A5C000, v12, v22, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
      }

      goto LABEL_58;
    }

    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      unint64_t v33 = "nw_http_metadata_enumerate_headers";
      __int16 v34 = 2082;
      id v35 = v21;
      _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s metadata must be http, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_39;
  }

  if (!v4)
  {
    __nwlog_obj();
    __int16 v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    unint64_t v33 = "nw_http_metadata_enumerate_headers";
    char v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v33 = "nw_http_metadata_enumerate_headers";
        _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null enumerator", buf, 0xCu);
      }

      goto LABEL_58;
    }

    if (!v30)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v33 = "nw_http_metadata_enumerate_headers";
        _os_log_impl( &dword_181A5C000,  v12,  v28,  "%{public}s called with null enumerator, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_58;
    }

    os_log_type_t v21 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v24 = type;
    os_log_type_t v25 = os_log_type_enabled(v12, type);
    if (!v21)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v33 = "nw_http_metadata_enumerate_headers";
        _os_log_impl(&dword_181A5C000, v12, v24, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
      }

      goto LABEL_58;
    }

    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      unint64_t v33 = "nw_http_metadata_enumerate_headers";
      __int16 v34 = 2082;
      id v35 = v21;
      _os_log_impl( &dword_181A5C000,  v12,  v24,  "%{public}s called with null enumerator, dumping backtrace:%{public}s",  buf,  0x16u);
    }

      goto LABEL_59;
    }

    if (!v29)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
        _os_log_impl( &dword_181A5C000,  v12,  v27,  "%{public}s metadata must be http_client, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_58;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v23 = type;
    BOOL v24 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
        _os_log_impl(&dword_181A5C000, v12, v23, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
      }

      goto LABEL_58;
    }

    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s metadata must be http_client, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_40;
  }

      if (v16) {
        free(v16);
      }
      return 0LL;
    }

    if (!v29)
    {
      os_log_type_t v17 = (os_log_s *)__nwlog_obj();
      uint64_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v32 = "nw_protocol_http_messaging_create";
        os_log_type_t v19 = "%{public}s called with null endpoint, backtrace limit exceeded";
        goto LABEL_57;
      }

      goto LABEL_58;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v17 = (os_log_s *)__nwlog_obj();
    uint64_t v18 = type;
    BOOL v26 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        unsigned int v32 = "nw_protocol_http_messaging_create";
        os_log_type_t v19 = "%{public}s called with null endpoint, no backtrace";
        goto LABEL_57;
      }

      goto LABEL_58;
    }

    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      unsigned int v32 = "nw_protocol_http_messaging_create";
      unint64_t v33 = 2082;
      __int16 v34 = (uint64_t)backtrace_string;
      os_log_type_t v27 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
LABEL_47:
      _os_log_impl(&dword_181A5C000, v17, v18, v27, buf, 0x16u);
    }

    if (v21)
    {
      char v30 = (char *)v21;
      goto LABEL_60;
    }

    return 0LL;
  }

  os_log_type_t v12 = (id)nw_protocol_get_parameters((uint64_t)a2);
  objc_super v13 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v12,  0,  1);

  os_log_type_t v14 = (char)handle[1].handle;
  if ((v14 & 1) != 0)
  {
    os_log_type_t v15 = handle[1].output_handler;
    if (v15)
    {
      os_release(v15);
      os_log_type_t v14 = (char)handle[1].handle;
    }
  }

  handle[1].output_handler = (nw_protocol *)v13;
  LOBYTE(handle[1].handle) = v14 | 1;
  __int16 v16 = nw_parameters_copy_default_protocol_stack((nw_parameters_t)v13);
  os_log_type_t v17 = nw_parameters_copy_protocol_options_legacy(handle[1].output_handler, handle);
  uint64_t v18 = nw_protocol_options_copy(v17);
  if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72514);
  }
  os_log_type_t v19 = (id)nw_protocol_copy_http_messaging_definition_definition;
  nw_parameters_set_protocol_instance(v18, v20, (uint64_t)handle);
  if (v19) {
    os_release(v19);
  }
  nw_protocol_stack_replace_protocol_with_handle(v16, (uint64_t)handle, v18);
  char v11 = nw_protocol_connect((uint64_t)a1->output_handler, (uint64_t)a1);
  if (v18) {
    os_release(v18);
  }
  if (v17) {
    os_release(v17);
  }
  if (v16) {
    os_release(v16);
  }
  return v11;
}

    if (!v16) {
      goto LABEL_77;
    }
    goto LABEL_59;
  }

  if (nw_protocol_copy_test_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_test_definition::onceToken, &__block_literal_global_83889);
  }
  if (nw_protocol_copy_test_definition::test_definition)
  {
    os_log_type_t v8 = os_retain((void *)nw_protocol_copy_test_definition::test_definition);
    if (v8)
    {
      int v9 = v8;
      size_t v10 = nw_parameters_copy_protocol_options_for_definition(v7, v8);
      if (v10)
      {
        char v11 = v10;
        if (nw_protocol_options_is_test_protocol(v10))
        {
          v87((uint64_t)v86, v11);
LABEL_75:
          os_release(v9);
          __int16 v34 = v11;
LABEL_76:
          os_release(v34);
          goto LABEL_77;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        uint64_t v93 = "nw_protocol_test_access_options";
        BOOL v24 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        unint64_t v90 = 0;
        if (__nwlog_fault(v24, &type, &v90))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v25 = (os_log_s *)gLogObj;
            BOOL v26 = type;
            if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
              goto LABEL_73;
            }
            *(_DWORD *)buf = 136446210;
            uint64_t v93 = "nw_protocol_test_access_options";
            os_log_type_t v27 = "%{public}s Failed to copy test protocol options";
            goto LABEL_72;
          }

          if (!v90)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v25 = (os_log_s *)gLogObj;
            BOOL v26 = type;
            if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
              goto LABEL_73;
            }
            *(_DWORD *)buf = 136446210;
            uint64_t v93 = "nw_protocol_test_access_options";
            os_log_type_t v27 = "%{public}s Failed to copy test protocol options, backtrace limit exceeded";
            goto LABEL_72;
          }

          unsigned int v32 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v25 = (os_log_s *)gLogObj;
          BOOL v26 = type;
          unint64_t v33 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (v32)
          {
            if (v33)
            {
              *(_DWORD *)buf = 136446466;
              uint64_t v93 = "nw_protocol_test_access_options";
              BOOL v94 = 2082;
              BOOL v95 = (nw_protocol_identifier *)v32;
              _os_log_impl( &dword_181A5C000,  v25,  v26,  "%{public}s Failed to copy test protocol options, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v32);
            goto LABEL_73;
          }

          if (v33)
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v93 = "nw_protocol_test_access_options";
            os_log_type_t v27 = "%{public}s Failed to copy test protocol options, no backtrace";
LABEL_72:
            _os_log_impl(&dword_181A5C000, v25, v26, v27, buf, 0xCu);
          }
        }

    if (v34) {
      free(v34);
    }

    goto LABEL_15;
  }

  v51.receiver = self;
  v51.super_class = (Class)&OBJC_CLASS___NWPathEvaluator;
  int v9 = -[NWPathEvaluator init](&v51, sel_init);
  size_t v10 = v9;
  if (!v9)
  {
    __nwlog_obj();
    os_log_type_t v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)location = 136446210;
    *(void *)&location[4] = "-[NWPathEvaluator initWithEvaluator:parameters:]";
    id v38 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v52 = 0;
    if (__nwlog_fault(v38, &type, &v52))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v40 = type;
        if (os_log_type_enabled(v39, type))
        {
          *(_DWORD *)location = 136446210;
          *(void *)&location[4] = "-[NWPathEvaluator initWithEvaluator:parameters:]";
          _os_log_impl(&dword_181A5C000, v39, v40, "%{public}s [super init] failed", location, 0xCu);
        }
      }

      else if (v52)
      {
        BOOL v44 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v45 = type;
        BOOL v46 = os_log_type_enabled(v39, type);
        if (v44)
        {
          if (v46)
          {
            *(_DWORD *)location = 136446466;
            *(void *)&location[4] = "-[NWPathEvaluator initWithEvaluator:parameters:]";
            int v55 = 2082;
            __int16 v56 = v44;
            _os_log_impl( &dword_181A5C000,  v39,  v45,  "%{public}s [super init] failed, dumping backtrace:%{public}s",  location,  0x16u);
          }

          free(v44);
          goto LABEL_64;
        }

        if (v46)
        {
          *(_DWORD *)location = 136446210;
          *(void *)&location[4] = "-[NWPathEvaluator initWithEvaluator:parameters:]";
          _os_log_impl(&dword_181A5C000, v39, v45, "%{public}s [super init] failed, no backtrace", location, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        id v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v48 = type;
        if (os_log_type_enabled(v39, type))
        {
          *(_DWORD *)location = 136446210;
          *(void *)&location[4] = "-[NWPathEvaluator initWithEvaluator:parameters:]";
          _os_log_impl( &dword_181A5C000,  v39,  v48,  "%{public}s [super init] failed, backtrace limit exceeded",  location,  0xCu);
        }
      }
    }

uint64_t nw_protocol_options_get_log_id_num(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[68];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_protocol_options_get_log_id_num";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_options_get_log_id_num";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_protocol_options_get_log_id_num";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_options_get_log_id_num";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_protocol_options_get_log_id_num";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

id nw_path_copy_flow_registration(void *a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t globals_for_path = nw_context_get_globals_for_path(v3);
    os_unfair_lock_lock((os_unfair_lock_t)(globals_for_path + 124));
    uint64_t v6 = *(void *)(globals_for_path + 40);
    if (v6 && (uint64_t node = nw_hash_table_get_node(v6, a2, 16LL)) != 0) {
      id v8 = *(id *)(node + 16);
    }
    else {
      id v8 = 0LL;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(globals_for_path + 124));
    goto LABEL_7;
  }

  __nwlog_obj();
  os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v21 = "nw_path_copy_flow_registration";
  BOOL v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v11, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v21 = "nw_path_copy_flow_registration";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v21 = "nw_path_copy_flow_registration";
          __int16 v22 = 2082;
          os_log_type_t v23 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v21 = "nw_path_copy_flow_registration";
        _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v21 = "nw_path_copy_flow_registration";
        _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181B34660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_protocol_definition_t nw_protocol_copy_tcp_definition(void)
{
  return (nw_protocol_definition_t)(id)g_tcp_definition;
}

uint64_t nw_context_get_globals_for_protocol(void *a1, void *a2)
{
  uint64_t v94 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    id v38 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v87 = "nw_context_get_globals_for_protocol";
    id v39 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v85 = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v39, &v85, &type))
    {
      if (v85 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v41 = v85;
        if (os_log_type_enabled(v40, v85))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v87 = "nw_context_get_globals_for_protocol";
          _os_log_impl(&dword_181A5C000, v40, v41, "%{public}s called with null context", buf, 0xCu);
        }
      }

      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v51 = v85;
        BOOL v52 = os_log_type_enabled(v40, v85);
        if (backtrace_string)
        {
          if (v52)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v87 = "nw_context_get_globals_for_protocol";
            __int16 v88 = 2082;
            unsigned int v89 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v40,  v51,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_100;
        }

        if (v52)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v87 = "nw_context_get_globals_for_protocol";
          _os_log_impl(&dword_181A5C000, v40, v51, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v63 = v85;
        if (os_log_type_enabled(v40, v85))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v87 = "nw_context_get_globals_for_protocol";
          _os_log_impl( &dword_181A5C000,  v40,  v63,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

LABEL_105:
    if (v43) {
      free(v43);
    }
    goto LABEL_113;
  }

  uint64_t v6 = v3;
  os_log_type_t v7 = v6;
  if ((*((_BYTE *)v6 + 136) & 8) == 0) {
    dispatch_assert_queue_V2(*((dispatch_queue_t *)v6 + 1));
  }

  id v3 = (os_unfair_lock_s **)nw_context_copy_globals_context(v7);
  id v8 = v3[4];
  if (v8)
  {
    os_unfair_lock_lock(v8 + 12);
    int v9 = v3[4];
    if (!v9) {
      goto LABEL_166;
    }
    uint64_t node = nw_hash_table_get_node(*(void *)&v9[13]._os_unfair_lock_opaque, (uint64_t)v5, 0LL);
    if (node)
    {
      uint64_t v11 = *(void *)(node + 32);
LABEL_167:
      os_unfair_lock_unlock(v3[4] + 12);

      goto LABEL_168;
    }

    os_log_type_t v12 = v5;
    os_log_type_t v13 = v3;
    uint64_t v14 = v12[9];
    if (v14)
    {
      BOOL v16 = *(uint64_t (**)(void *))v14;
      os_log_type_t v15 = *(uint64_t (**)(void *, os_unfair_lock_s **))(v14 + 8);
      if (v16)
      {
        if (!v15)
        {
          uint64_t v17 = v16(v12);
          goto LABEL_15;
        }

          if (v39)
          {
            BOOL v68 = (char *)v39;
LABEL_107:
            free(v68);
          }

          return 0LL;
        }

        id v26 = v21;
        *a6 += nw_protocol_ipv4_process_reassembly(a1, 0, a4, 0, 0LL);
        if ((*(_WORD *)(a2 + 204) & 0x100) != 0
          && g_channel_check_validity
          && (g_channel_check_validity(a2, *(void *)(a2 + 88)) & 1) == 0)
        {
          if ((*(_BYTE *)(a1 + 136) & 1) != 0) {
            goto LABEL_227;
          }
          uint64_t v93 = (os_log_s *)__nwlog_obj();
          if (!os_log_type_enabled(v93, OS_LOG_TYPE_INFO)) {
            goto LABEL_227;
          }
          goto LABEL_226;
        }

        os_log_type_t v28 = v15->i8[1];
        os_log_type_t v29 = v28 & 3;
        *(_BYTE *)(a2 + 186) = *(_BYTE *)(a2 + 186) & 0xFC | v28 & 3;
        switch(v29)
        {
          case 3:
            char v30 = (void *)(a1 + 32);
            break;
          case 2:
            char v30 = (void *)(a1 + 24);
            break;
          case 1:
            char v30 = (void *)(a1 + 16);
            break;
          default:
            os_log_type_t v31 = *(_BYTE *)(a1 + 136);
            if ((v31 & 2) != 0) {
              goto LABEL_92;
            }
            goto LABEL_50;
        }

        ++*v30;
        os_log_type_t v31 = *(_BYTE *)(a1 + 136);
        if ((v31 & 2) != 0)
        {
LABEL_92:
          os_log_type_t v64 = mach_continuous_time();
          os_log_type_t v65 = *(_WORD *)(a2 + 204) & 0xFFEF | (*(unsigned __int8 *)(a2 + 206) << 16);
          *(_WORD *)(a2 + 204) &= ~0x10u;
          *(_BYTE *)(a2 + 206) = BYTE2(v65);
          *(void *)(a2 + 152) = v64;
          if ((*(_BYTE *)(a1 + 136) & 0x80) == 0) {
            goto LABEL_51;
          }
          goto LABEL_93;
        }

    os_log_s *v40 = 0;
    goto LABEL_106;
  }

  if (!v2)
  {
    __nwlog_obj();
    nw_endpoint_t v129 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v129, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    uint64_t v140 = "_strict_strlcat";
    __int128 v130 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v130);
    if (result) {
      goto LABEL_268;
    }
    free(v130);
  }

  os_log_type_t v41 = 0LL;
  BOOL v42 = 107LL;
  while (1)
  {
    os_log_type_t v40 = &v2[v41];
    if (!v2[v41]) {
      break;
    }
    ++v41;
    if (!--v42) {
      goto LABEL_106;
    }
  }

  if (v42 < 2) {
    goto LABEL_105;
  }
  BOOL v46 = v42 - 2;
  os_log_type_t v47 = 106 - v41;
  if (v41 == 105) {
    char v48 = 1LL;
  }
  else {
    char v48 = 2LL;
  }
  memcpy(v40, "<", v48);
  os_log_type_t v40 = v2 + 106;
  while (!v46)
  {
    if (!--v47) {
      goto LABEL_105;
    }
  }

    _os_log_impl(&dword_181A5C000, v53, v54, v55, buf, 0xCu);
    goto LABEL_106;
  }

  handle = (char *)a1->handle;
  if (handle)
  {
    if ((handle[235] & 0xE) == 6 && handle[150] == 3)
    {
      if (*((nw_protocol **)handle + 8) != a2) {
        return;
      }
      output_handler = a1->output_handler;
      if (!output_handler) {
        return;
      }
      callbacks = output_handler->callbacks;
      if (!callbacks) {
        return;
      }
      get_output_local_nw_endpoint_t endpoint = (uint64_t (*)(void))callbacks->get_output_local_endpoint;
      id v8 = (void *)get_output_local_endpoint();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v9 = (os_log_s *)gLogObj;
      if (v8)
      {
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v91 = "nw_protocol_shoes_connected";
          __int16 v92 = 2082;
          uint64_t v93 = handle + 151;
          _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s udp-associate tcp connected",  buf,  0x16u);
        }

        os_log_type_t v10 = v8;
        uint64_t v11 = [v10 port];

        *((_WORD *)handle + 72) = __rev16(v11);
        os_log_type_t v12 = a1->output_handler;
        nw_protocol_set_output_handler((uint64_t)a1, *((void *)handle + 8));
        nw_protocol_set_output_handler((uint64_t)handle, *((void *)handle + 8));
        *((void *)handle + _Block_object_dispose(va, 8) = v12;
        nw_protocol_shoes_send_request_inner(a1);
        return;
      }

      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v91 = "nw_protocol_shoes_connected";
        __int16 v92 = 2082;
        uint64_t v93 = handle + 151;
        _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s udp-associate no local endpoint for udp",  buf,  0x16u);
      }

      nw_protocol_shoes_error((nw_protocol *)handle, (nw_protocol *)handle, 57);
      handle[235] |= 0x10u;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v30 = (os_log_s *)gLogObj;
      os_log_type_t v31 = (os_log_s *)gLogObj;
      goto LABEL_74;
    }

    os_log_type_t v13 = a1->output_handler;
    if (v13)
    {
      uint64_t v14 = v13->callbacks;
      if (v14)
      {
        if (v14->get_output_local_endpoint)
        {
          os_log_type_t v15 = (void *)((uint64_t (*)(void))v14->get_remote_endpoint)();
          if (v15)
          {
            BOOL v16 = v15;
            uint64_t v17 = -[nw_protocol_identifier type](v16, "type");

            if (v17 == 1 && nw_endpoint_get_type(*((nw_endpoint_t *)handle + 13)) != nw_endpoint_type_address)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v18 = (os_log_s *)gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v19 = (nw_protocol *)*((void *)handle + 13);
                *(_DWORD *)buf = 136446978;
                uint64_t v91 = "nw_protocol_shoes_connected";
                __int16 v92 = 2082;
                uint64_t v93 = handle + 151;
                uint64_t v94 = 2112;
                BOOL v95 = v19;
                unsigned int v96 = 2112;
                os_log_type_t v97 = v16;
                _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s Updating peer endpoint from %@ to %@",  buf,  0x2Au);
              }

              BOOL v20 = (void *)*((void *)handle + 13);
              *((void *)handle + 13) = os_retain(v16);
              if (v20) {
                os_release(v20);
              }
            }
          }
        }
      }
    }

    ((void (*)(void))a1->default_input_handler->callbacks->connected)();
    uint64_t v21 = a1->output_handler;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v22 = (os_log_s *)gLogObj;
    if (v21 != a2)
    {
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        identifier = a2->identifier;
        uint64_t v24 = a1->output_handler;
        os_log_type_t v25 = a1->identifier;
        *(_DWORD *)buf = 136447490;
        uint64_t v91 = "nw_protocol_shoes_connected";
        __int16 v92 = 2082;
        uint64_t v93 = handle + 151;
        uint64_t v94 = 2048;
        BOOL v95 = a2;
        unsigned int v96 = 2080;
        os_log_type_t v97 = identifier;
        BOOL v98 = 2048;
        BOOL v99 = v24;
        BOOL v100 = 2080;
        nw_endpoint_t v101 = v25;
        _os_log_impl( &dword_181A5C000,  v22,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s connected protocol %p (%s) is not our output_handler %p (%s), ignoring",  buf,  0x3Eu);
      }

      return;
    }

    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      id v26 = a1->output_handler;
      if (!v26
        || (os_log_type_t v27 = (uint64_t (*)(void))v26->callbacks->get_output_local_endpoint) == 0LL
        || (default_input_handler = (nw_protocol *)v27()) == 0LL)
      {
        default_input_handler = a1->default_input_handler;
        if (default_input_handler)
        {
          get_local_nw_endpoint_t endpoint = (uint64_t (*)(void))default_input_handler->callbacks->get_local_endpoint;
          else {
            default_input_handler = 0LL;
          }
        }
      }

      BOOL v32 = "with";
      uint64_t v91 = "nw_protocol_shoes_connected";
      unint64_t v33 = handle[235];
      *(_DWORD *)buf = 136446978;
      __int16 v92 = 2082;
      if ((v33 & 1) == 0) {
        BOOL v32 = "no";
      }
      uint64_t v93 = handle + 151;
      uint64_t v94 = 2114;
      BOOL v95 = default_input_handler;
      unsigned int v96 = 2082;
      os_log_type_t v97 = (nw_protocol_identifier *)v32;
      _os_log_impl( &dword_181A5C000,  v22,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s local address %{public}@ %{public}s TFO",  buf,  0x2Au);
    }

    os_log_type_t v34 = handle[150];
    if (v34 != 6)
    {
      if (v34 != 1) {
        return;
      }
      *((_DWORD *)handle + 34) = 0;
      BOOL v35 = handle[235];
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v36 = (os_log_s *)gLogObj;
      os_log_type_t v37 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG);
      if ((v35 & 1) == 0)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v91 = "nw_protocol_shoes_connected";
          __int16 v92 = 2082;
          uint64_t v93 = handle + 151;
          _os_log_impl( &dword_181A5C000,  v36,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s send request without TFO data from above",  buf,  0x16u);
        }

        id v38 = (char *)a1->handle;
        if (v38)
        {
          if ((~v38[235] & 6) == 0)
          {
            if (gLogDatapath)
            {
              BOOL v74 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446466;
                uint64_t v91 = "nw_protocol_shoes_send_request";
                __int16 v92 = 2082;
                uint64_t v93 = v38 + 151;
                _os_log_impl( &dword_181A5C000,  v74,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s udp-associate creating output handler for udp",  buf,  0x16u);
              }
            }

            id v39 = (id)(*(uint64_t (**)(void))(*(void *)(*((void *)v38 + 6) + 24LL) + 112LL))();
            os_log_type_t v40 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v39,  0,  0);

            os_log_type_t v41 = nw_parameters_copy_default_protocol_stack((nw_parameters_t)v40);
            options = nw_protocol_create_options((void *)g_tcp_definition);
            nw_tcp_options_set_reset_local_port(options, 1);
            nw_protocol_options_set_log_id(options, "C", v38 + 151, 101);
            nw_protocol_stack_set_transport_protocol(v41, (nw_protocol_options_t)options);
            if (v41) {
              os_release(v41);
            }
            if (options) {
              os_release(options);
            }
            int v43 = nw_parameters_copy_context(v39);
            BOOL v44 = nw_path_copy_flow_registration(v43, (uint64_t)v38);
            if (v43) {
              os_release(v43);
            }
            ip_protocol = nw_parameters_get_ip_protocol((void *)v40);
            new_flow = nw_path_flow_registration_create_new_flow(v44, 1, 0, 0, 0, 0LL, 0LL, ip_protocol);
            *((void *)v38 + 10) = new_flow;
            nw_path_flow_registration_set_specific_use_only(new_flow, 1);
            if (v44) {
              os_release(v44);
            }
            os_log_type_t v102 = *(_OWORD *)v38;
            nw_path_flow_registration_get_id(*((void **)v38 + 10), v38);
            os_log_type_t v47 = nw_endpoint_copy_original_endpoint(*((void **)v38 + 12), 1LL);
            if (nw_socket_protocol_identifier::onceToken != -1) {
              dispatch_once(&nw_socket_protocol_identifier::onceToken, &__block_literal_global_64023);
            }
            uint64_t internal = nw_protocol_create_internal( (uint64_t)&nw_socket_protocol_identifier::identifier,  (void *)v47,  (const char *)v40,  1);
            if (v47) {
              os_release((void *)v47);
            }
            *((void *)v38 + 9) = v40;
            (**(void (***)(uint64_t, nw_protocol *))(internal + 24))(internal, a1);
            *((void *)v38 + _Block_object_dispose(va, 8) = internal;
            v38[150] = 3;
            os_log_type_t v49 = *(void *)(internal + 24);
            if (v49)
            {
              unint64_t v50 = *(void (**)(uint64_t, nw_protocol *))(v49 + 24);
              if (v50)
              {
                v50(internal, a1);
LABEL_65:
                os_log_type_t v51 = (void *)*((void *)v38 + 9);
                if (v51)
                {
                  os_release(v51);
                  *((void *)v38 + 9) = 0LL;
                }

                *(_OWORD *)id v38 = v102;
                return;
              }
            }

            __nwlog_obj();
            os_log_type_t v64 = *((void *)v38 + 8);
            os_log_type_t v65 = "invalid";
            if (v64)
            {
              __int16 v66 = *(const char **)(v64 + 16);
              if (v66) {
                os_log_type_t v65 = v66;
              }
            }

            *(_DWORD *)buf = 136446466;
            uint64_t v91 = "nw_protocol_shoes_send_request";
            __int16 v92 = 2082;
            uint64_t v93 = (char *)v65;
            os_log_type_t v67 = (char *)_os_log_send_and_compose_impl();
            os_log_type_t type = OS_LOG_TYPE_ERROR;
            __int16 v88 = 0;
            if (__nwlog_fault(v67, &type, &v88))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                BOOL v68 = (os_log_s *)__nwlog_obj();
                os_log_type_t v69 = type;
                if (!os_log_type_enabled(v68, type)) {
                  goto LABEL_155;
                }
                os_log_type_t v70 = *((void *)v38 + 8);
                os_log_type_t v71 = "invalid";
                if (v70)
                {
                  __int16 v72 = *(const char **)(v70 + 16);
                  if (v72) {
                    os_log_type_t v71 = v72;
                  }
                }

                *(_DWORD *)buf = 136446466;
                uint64_t v91 = "nw_protocol_shoes_send_request";
                __int16 v92 = 2082;
                uint64_t v93 = (char *)v71;
                os_log_type_t v73 = "%{public}s protocol %{public}s has invalid connect callback";
                goto LABEL_154;
              }

              if (!v88)
              {
                BOOL v68 = (os_log_s *)__nwlog_obj();
                os_log_type_t v69 = type;
                if (!os_log_type_enabled(v68, type)) {
                  goto LABEL_155;
                }
                __int16 v82 = *((void *)v38 + 8);
                char v83 = "invalid";
                if (v82)
                {
                  __int16 v84 = *(const char **)(v82 + 16);
                  if (v84) {
                    char v83 = v84;
                  }
                }

                *(_DWORD *)buf = 136446466;
                uint64_t v91 = "nw_protocol_shoes_send_request";
                __int16 v92 = 2082;
                uint64_t v93 = (char *)v83;
                os_log_type_t v73 = "%{public}s protocol %{public}s has invalid connect callback, backtrace limit exceeded";
                goto LABEL_154;
              }

              char v77 = (char *)__nw_create_backtrace_string();
              BOOL v68 = (os_log_s *)__nwlog_obj();
              os_log_type_t v69 = type;
              os_log_type_t v78 = os_log_type_enabled(v68, type);
              if (v77)
              {
                if (v78)
                {
                  os_log_type_t v79 = *((void *)v38 + 8);
                  BOOL v80 = "invalid";
                  if (v79)
                  {
                    os_log_type_t v81 = *(const char **)(v79 + 16);
                    if (v81) {
                      BOOL v80 = v81;
                    }
                  }

                  *(_DWORD *)buf = 136446722;
                  uint64_t v91 = "nw_protocol_shoes_send_request";
                  __int16 v92 = 2082;
                  uint64_t v93 = (char *)v80;
                  uint64_t v94 = 2082;
                  BOOL v95 = (nw_protocol *)v77;
                  _os_log_impl( &dword_181A5C000,  v68,  v69,  "%{public}s protocol %{public}s has invalid connect callback, dumping backtrace:%{public}s",  buf,  0x20u);
                }

                free(v77);
                goto LABEL_155;
              }

              if (v78)
              {
                os_log_type_t v85 = *((void *)v38 + 8);
                __int16 v86 = "invalid";
                if (v85)
                {
                  BOOL v87 = *(const char **)(v85 + 16);
                  if (v87) {
                    __int16 v86 = v87;
                  }
                }

                *(_DWORD *)buf = 136446466;
                uint64_t v91 = "nw_protocol_shoes_send_request";
                __int16 v92 = 2082;
                uint64_t v93 = (char *)v86;
                os_log_type_t v73 = "%{public}s protocol %{public}s has invalid connect callback, no backtrace";
LABEL_154:
                _os_log_impl(&dword_181A5C000, v68, v69, v73, buf, 0x16u);
              }
            }

      if (v45) {
        free(v45);
      }
    }
  }

  while (1)
  {
    id v4 = *(void *)(v3 + 32);
    id v5 = *(void **)(v4 + 100);
    if (!v5 || v5[3] == v5[2]) {
      break;
    }
    uint64_t v6 = v5;
    os_log_type_t v7 = *(void *)(v3 + 32);
    id v8 = *(void **)(v7 + 108);
    if (v8)
    {
      objc_storeStrong((id *)(v7 + 100), v8);
      int v9 = *(void *)(v3 + 32);
      os_log_type_t v10 = *(void **)(v9 + 108);
      *(void *)(v9 + 10_Block_object_dispose(va, 8) = 0LL;
    }

    else
    {
      uint64_t v11 = nw_array_create();
      os_log_type_t v12 = *(void *)(v3 + 32);
      os_log_type_t v10 = *(void **)(v12 + 100);
      *(void *)(v12 + 100) = v11;
    }

    nw_array_apply(v6, (uint64_t)&__block_literal_global_1259);
    nw_array_remove_all_objects((uint64_t)v6);
    os_log_type_t v13 = *(void *)(v3 + 32);
    uint64_t v14 = *(void **)(v13 + 108);
    *(void *)(v13 + 10_Block_object_dispose(va, 8) = v6;
  }

  os_log_type_t v15 = *(void **)(v4 + 116);
  BOOL v16 = v15;
  uint64_t v17 = *(void *)(*(void *)(v3 + 32) + 124LL);
  if (!v17)
  {
    uint64_t v19 = nw_array_create();
    BOOL v20 = (void ***)v19;
    if (v16)
    {
      uint64_t v21 = v16;
      if ((void ***)v19 == v16)
      {
LABEL_16:
        id v22 = *(void *)(v3 + 32);
        uint64_t v18 = *(void **)(v22 + 116);
        *(void *)(v22 + 116) = v21;
        goto LABEL_17;
      }

      std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>( v19 + 16,  v16[2],  v16[3],  v16[3] - v16[2]);
    }

    uint64_t v21 = v20;
    goto LABEL_16;
  }

  nw_array_assign(v17, (uint64_t)v16);
  objc_storeStrong((id *)(*(void *)(v3 + 32) + 116LL), *(id *)(*(void *)(v3 + 32) + 124LL));
  uint64_t v18 = *(void **)(*(void *)(v3 + 32) + 124LL);
  *(void *)(*(void *)(v3 + 32) + 124LL) = 0LL;
LABEL_17:

  nw_array_apply((unsigned __int8 *)v16, (uint64_t)&__block_literal_global_12);
  nw_array_remove_all_objects((uint64_t)v16);
  objc_storeStrong((id *)(*(void *)(v3 + 32) + 124LL), v15);
  if ((*(_BYTE *)(v3 + 136) & 8) == 0) {
    goto LABEL_18;
  }
  os_log_type_t v40 = v70;
  os_log_type_t v41 = (unint64_t *)(v3 + 112);
  while (1)
  {
    BOOL v42 = __ldaxr(v41);
    if (v42 != v40) {
      break;
    }
    if (!__stlxr(0LL, v41))
    {
      int v43 = 1;
      goto LABEL_52;
    }
  }

  int v43 = 0;
  __clrex();
LABEL_52:
  if ((v43 & 1) != 0) {
    goto LABEL_18;
  }
  __nwlog_obj();
  char v48 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446722;
  os_log_type_t v73 = "nw_context_run_queued_blocks_inline";
  BOOL v74 = 2048;
  os_log_type_t v75 = v70;
  id v76 = 2048;
  BOOL v68 = v42;
  char v77 = v42;
  os_log_type_t v49 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v69 = 0;
  if (__nwlog_fault(v49, &type, &v69))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unint64_t v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v51 = type;
      if (os_log_type_enabled(v50, type))
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v73 = "nw_context_run_queued_blocks_inline";
        BOOL v74 = 2048;
        os_log_type_t v75 = v70;
        id v76 = 2048;
        char v77 = v68;
        _os_log_impl( &dword_181A5C000,  v50,  v51,  "%{public}s Exiting call, expected inline TID to be %llu but got %llu",  buf,  0x20u);
      }
    }

    else if (v69)
    {
      os_log_type_t v63 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unint64_t v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v64 = type;
      os_log_type_t v65 = os_log_type_enabled(v50, type);
      if (v63)
      {
        if (v65)
        {
          *(_DWORD *)buf = 136446978;
          os_log_type_t v73 = "nw_context_run_queued_blocks_inline";
          BOOL v74 = 2048;
          os_log_type_t v75 = v70;
          id v76 = 2048;
          char v77 = v68;
          os_log_type_t v78 = 2082;
          os_log_type_t v79 = v63;
          _os_log_impl( &dword_181A5C000,  v50,  v64,  "%{public}s Exiting call, expected inline TID to be %llu but got %llu, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v63);
        goto LABEL_110;
      }

      if (v65)
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v73 = "nw_context_run_queued_blocks_inline";
        BOOL v74 = 2048;
        os_log_type_t v75 = v70;
        id v76 = 2048;
        char v77 = v68;
        _os_log_impl( &dword_181A5C000,  v50,  v64,  "%{public}s Exiting call, expected inline TID to be %llu but got %llu, no backtrace",  buf,  0x20u);
      }
    }

    else
    {
      __nwlog_obj();
      unint64_t v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v67 = type;
      if (os_log_type_enabled(v50, type))
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v73 = "nw_context_run_queued_blocks_inline";
        BOOL v74 = 2048;
        os_log_type_t v75 = v70;
        id v76 = 2048;
        char v77 = v68;
        _os_log_impl( &dword_181A5C000,  v50,  v67,  "%{public}s Exiting call, expected inline TID to be %llu but got %llu, backtrace limit exceeded",  buf,  0x20u);
      }
    }
  }

LABEL_106:
        if (v61) {
          goto LABEL_107;
        }
        goto LABEL_108;
      }

      if (!v85)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v62 = (os_log_s *)(id)gLogObj;
        id v76 = type;
        if (os_log_type_enabled(v62, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_create_application_service_from_dictionary";
          _os_log_impl( &dword_181A5C000,  v62,  v76,  "%{public}s NWOSApplicationServiceEndpoint alloc/init failed, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_105;
      }

      os_log_type_t v69 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v62 = (os_log_s *)(id)gLogObj;
      os_log_type_t v70 = type;
      os_log_type_t v71 = os_log_type_enabled(v62, type);
      if (!v69)
      {
        if (v71)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_create_application_service_from_dictionary";
          _os_log_impl( &dword_181A5C000,  v62,  v70,  "%{public}s NWOSApplicationServiceEndpoint alloc/init failed, no backtrace",  buf,  0xCu);
        }

        goto LABEL_105;
      }

      if (v71)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_endpoint_create_application_service_from_dictionary";
        __int16 v88 = 2082;
        unsigned int v89 = v69;
        _os_log_impl( &dword_181A5C000,  v62,  v70,  "%{public}s NWOSApplicationServiceEndpoint alloc/init failed, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v69);
      if (v61) {
LABEL_107:
      }
        free(v61);
LABEL_108:

LABEL_16:
      if (!v17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v22 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
        os_log_type_t v23 = (char *)_os_log_send_and_compose_impl();

        LOBYTE(length[0]) = 16;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        if (LOBYTE(length[0]) == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v24 = (os_log_s *)(id)gLogObj;
          os_log_type_t v25 = length[0];
          if (os_log_type_enabled(v24, length[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_endpoint_create_from_dictionary";
            _os_log_impl(&dword_181A5C000, v24, v25, "%{public}s invalid dictionary", buf, 0xCu);
          }

    if (v45) {
      free(v45);
    }
    os_log_type_t v31 = 0LL;
    goto LABEL_41;
  }

  if (!v6)
  {
    __nwlog_obj();
    char v48 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v83 = "nw_interface_use_observer_create";
    os_log_type_t v49 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v81.receiver) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v49, &v81, &type))
    {
      if (LOBYTE(v81.receiver) == 17)
      {
        __nwlog_obj();
        unint64_t v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v51 = (os_log_type_t)v81.receiver;
        if (os_log_type_enabled(v50, (os_log_type_t)v81.receiver))
        {
          *(_DWORD *)buf = 136446210;
          char v83 = "nw_interface_use_observer_create";
          _os_log_impl(&dword_181A5C000, v50, v51, "%{public}s called with null block", buf, 0xCu);
        }
      }

      else if (type)
      {
        os_log_type_t v64 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        unint64_t v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v65 = (os_log_type_t)v81.receiver;
        __int16 v66 = os_log_type_enabled(v50, (os_log_type_t)v81.receiver);
        if (v64)
        {
          if (v66)
          {
            *(_DWORD *)buf = 136446466;
            char v83 = "nw_interface_use_observer_create";
            __int16 v84 = 2082;
            os_log_type_t v85 = v64;
            _os_log_impl( &dword_181A5C000,  v50,  v65,  "%{public}s called with null block, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v64);
          goto LABEL_111;
        }

        if (v66)
        {
          *(_DWORD *)buf = 136446210;
          char v83 = "nw_interface_use_observer_create";
          _os_log_impl(&dword_181A5C000, v50, v65, "%{public}s called with null block, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        unint64_t v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __int16 v72 = (os_log_type_t)v81.receiver;
        if (os_log_type_enabled(v50, (os_log_type_t)v81.receiver))
        {
          *(_DWORD *)buf = 136446210;
          char v83 = "nw_interface_use_observer_create";
          _os_log_impl( &dword_181A5C000,  v50,  v72,  "%{public}s called with null block, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    _os_log_impl(&dword_181A5C000, v51, v52, v53, buf, 0xCu);
    goto LABEL_106;
  }

  -[__CFString setEndpoint:](v38, "setEndpoint:", v9);
  if (v10) {
    id v39 = (NWParameters *)[v10 copy];
  }
  else {
    id v39 = objc_alloc_init(&OBJC_CLASS___NWParameters);
  }
  os_log_type_t v54 = v39;
  -[__CFString setParameters:](v24, "setParameters:", v39);

  BOOL v55 = objc_alloc(&OBJC_CLASS___NWPathEvaluator);
  -[__CFString endpoint](v24, "endpoint");
  __int16 v56 = (void *)objc_claimAutoreleasedReturnValue();
  -[__CFString parameters](v24, "parameters");
  os_log_type_t v57 = (void *)objc_claimAutoreleasedReturnValue();
  BOOL v58 = -[NWPathEvaluator initWithEndpoint:parameters:](v55, "initWithEndpoint:parameters:", v56, v57);
  -[__CFString setPathEvaluator:](v24, "setPathEvaluator:", v58);

  -[__CFString pathEvaluator](v24, "pathEvaluator");
  BOOL v59 = (void *)objc_claimAutoreleasedReturnValue();

  if (v59)
  {
    int v60 = (void *)[objc_alloc(MEMORY[0x189603F18]) initWithArray:v11 copyItems:1];
    -[__CFString setNetworkDescriptionArray:](v24, "setNetworkDescriptionArray:", v60);

    -[__CFString setStatus:](v24, "setStatus:", 0LL);
    -[__CFString setBestAvailableNetworkDescription:](v24, "setBestAvailableNetworkDescription:", 0LL);
    +[NWMonitor saveMonitor:](&OBJC_CLASS___NWMonitor, "saveMonitor:", v24);
    -[__CFString pathEvaluator](v24, "pathEvaluator");
    nw_endpoint_t v61 = (void *)objc_claimAutoreleasedReturnValue();
    [v61 addObserver:v24 forKeyPath:@"path" options:5 context:0];

    [0 privateDescription];
    os_log_type_t v62 = (__CFString *)objc_claimAutoreleasedReturnValue();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v63 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v78 = "+[NWMonitor monitorWithNetworkDescriptionArray:endpoint:parameters:]";
      os_log_type_t v79 = 2114;
      BOOL v80 = v62;
      _os_log_impl(&dword_181A5C000, v63, OS_LOG_TYPE_DEBUG, "%{public}s created monitor %{public}@", buf, 0x16u);
    }

    uint64_t v24 = v24;
    id v26 = v24;
    goto LABEL_110;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v64 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  os_log_type_t v78 = "+[NWMonitor monitorWithNetworkDescriptionArray:endpoint:parameters:]";
  unint64_t v50 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v75 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (v75)
    {
      os_log_type_t v65 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v52 = type;
      BOOL v68 = os_log_type_enabled(v51, type);
      if (v65)
      {
        if (v68)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v78 = "+[NWMonitor monitorWithNetworkDescriptionArray:endpoint:parameters:]";
          os_log_type_t v79 = 2082;
          BOOL v80 = (const __CFString *)v65;
          os_log_type_t v67 = "%{public}s NWPathEvaluator alloc initWithEndpoint:parameters: failed, dumping backtrace:%{public}s";
          goto LABEL_93;
        }

        goto LABEL_94;
      }

      if (!v68) {
        goto LABEL_106;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v78 = "+[NWMonitor monitorWithNetworkDescriptionArray:endpoint:parameters:]";
      BOOL v53 = "%{public}s NWPathEvaluator alloc initWithEndpoint:parameters: failed, no backtrace";
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v52 = type;
      if (!os_log_type_enabled(v51, type)) {
        goto LABEL_106;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v78 = "+[NWMonitor monitorWithNetworkDescriptionArray:endpoint:parameters:]";
      BOOL v53 = "%{public}s NWPathEvaluator alloc initWithEndpoint:parameters: failed, backtrace limit exceeded";
    }

    goto LABEL_105;
  }

  __nwlog_obj();
  os_log_type_t v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v52 = type;
  if (os_log_type_enabled(v51, type))
  {
    *(_DWORD *)buf = 136446210;
    os_log_type_t v78 = "+[NWMonitor monitorWithNetworkDescriptionArray:endpoint:parameters:]";
    BOOL v53 = "%{public}s NWPathEvaluator alloc initWithEndpoint:parameters: failed";
    goto LABEL_105;
  }

    if (v45) {
      free(v45);
    }
    os_log_type_t v34 = 0;
    if (v29 != &nw_protocol_ref_counted_handle)
    {
LABEL_55:
      if (v26 != &nw_protocol_ref_counted_handle) {
        goto LABEL_56;
      }
      goto LABEL_109;
    }

          _os_log_impl(&dword_181A5C000, v65, v66, v67, buf, 0xCu);
        }

          if (v50) {
            free(v50);
          }
LABEL_71:

          _CFHTTPAuthenticationGetPATAuthHeaders();
          if (*(_BYTE *)(*(void *)&type[8] + 24LL)) {
            id v26 = 1;
          }
          else {
            id v26 = 2;
          }
          _Block_object_dispose(type, 8);
          if (v39) {
            dispatch_release(v39);
          }
          uint64_t v17 = v52;
          if (pat_timestamps_array) {
            os_release(pat_timestamps_array);
          }
          if (v51) {
            CFRelease(v51);
          }
          _Block_object_dispose(buf, 8);
          if ((v63 & 1) != 0 && v62)
          {
            CFRelease(v62);
            if (!v52)
            {
LABEL_86:
              if (v7) {
                os_release(v7);
              }
              return v26;
            }

    if (v21) {
      free(v21);
    }
    goto LABEL_4;
  }

    nw_endpoint_flow_cleanup_protocol(v5, (uint64_t)v6, 1);
    id v133 = v6[23];
    v6[23] = 0LL;

    free(v6);
LABEL_121:
    uint64_t v6 = 0LL;
LABEL_122:

    goto LABEL_123;
  }

  __nwlog_obj();
  dispatch_time_t v146 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v146, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  *(void *)&uint8_t buf[4] = "strict_calloc";
  __int16 v215 = 2048;
  id v216 = 1LL;
  __int16 v217 = 2048;
  os_log_type_t v218 = 336LL;
  uint64_t v147 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v147);
  if (!result)
  {
    free(v147);
    goto LABEL_2;
  }

  __break(1u);
  return result;
}

    if (v15)
    {
LABEL_106:
      __int16 v56 = (char *)v15;
      goto LABEL_107;
    }

    free(backtrace_string);
    if (!v41) {
      goto LABEL_132;
    }
    goto LABEL_131;
  }

  if (v4 == (void (**)(nw_parameters_configure_protocol_block_t, NWConcrete_nw_protocol_options *))&__block_literal_global_18956)
  {
    __nwlog_obj();
    BOOL v46 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v62 = "nw_parameters_create_secure_udp";
    os_log_type_t v41 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v59 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v47 = type;
      if (os_log_type_enabled(v42, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v62 = "nw_parameters_create_secure_udp";
        _os_log_impl( &dword_181A5C000,  v42,  v47,  "%{public}s called with null (configure_udp != (_nw_parameters_configure_protocol_disable))",  buf,  0xCu);
      }
    }

    else if (v59)
    {
      BOOL v53 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v54 = type;
      BOOL v55 = os_log_type_enabled(v42, type);
      if (v53)
      {
        if (v55)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v62 = "nw_parameters_create_secure_udp";
          os_log_type_t v63 = 2082;
          os_log_type_t v64 = v53;
          _os_log_impl( &dword_181A5C000,  v42,  v54,  "%{public}s called with null (configure_udp != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v53);
LABEL_130:
        if (!v41)
        {
LABEL_132:
          os_log_type_t v10 = 0LL;
          goto LABEL_80;
        }

                if (!v39)
                {
LABEL_107:
                  unint64_t v33 = 0LL;
LABEL_154:

                  goto LABEL_155;
                }

      if (v40) {
        free(v40);
      }
      int v9 = 0LL;
      goto LABEL_9;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v14 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    BOOL v52 = "nw_parameters_create_custom_ip";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v49 = 0;
    if (__nwlog_fault(v15, &type, &v49))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v16 = (os_log_s *)(id)gLogObj;
        uint64_t v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v52 = "nw_parameters_create_custom_ip";
          _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s nw_custom_ip_create_options failed", buf, 0xCu);
        }
      }

      else if (v49)
      {
        uint64_t v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v16 = (os_log_s *)(id)gLogObj;
        id v22 = type;
        os_log_type_t v23 = os_log_type_enabled(v16, type);
        if (v21)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v52 = "nw_parameters_create_custom_ip";
            BOOL v53 = 2082;
            os_log_type_t v54 = v21;
            _os_log_impl( &dword_181A5C000,  v16,  v22,  "%{public}s nw_custom_ip_create_options failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v21);
          if (!v15) {
            goto LABEL_49;
          }
          goto LABEL_48;
        }

        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v52 = "nw_parameters_create_custom_ip";
          _os_log_impl( &dword_181A5C000,  v16,  v22,  "%{public}s nw_custom_ip_create_options failed, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v16 = (os_log_s *)(id)gLogObj;
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v52 = "nw_parameters_create_custom_ip";
          _os_log_impl( &dword_181A5C000,  v16,  v25,  "%{public}s nw_custom_ip_create_options failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v15)
    {
LABEL_49:
      int v9 = 0LL;
      goto LABEL_50;
    }

            free(v56);
            goto LABEL_106;
          }

          os_log_type_t v28 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_read_request);
          if (v28)
          {
            os_log_type_t v29 = _Block_copy(v15);
            buffer_completion = v28->buffer_completion;
            v28->buffer_completion = v29;

            objc_storeStrong((id *)&v28->connection, a1);
            os_log_type_t v31 = qos_class_self();
            v28->min = v16;
            v28->max = a4;
            v28->buffer = a2;
            v28->qos_class = v31;
            v28->variant = 2;
            if (_nw_signposts_once != -1) {
              dispatch_once(&_nw_signposts_once, &__block_literal_global_51910);
            }
            BOOL v32 = v28;

            nw_connection_add_read_request(v14, v32);
            unint64_t v33 = 1LL;
            goto LABEL_107;
          }

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v42 = (id)gLogObj;
          *(_DWORD *)buf = 136446210;
          uint64_t v94 = "nw_read_request_create_with_buffer";
          int v43 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          uint64_t v91 = 0;
          if ((__nwlog_fault(v43, &type, &v91) & 1) != 0)
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              BOOL v44 = (os_log_s *)(id)gLogObj;
              os_log_type_t v45 = type;
              if (os_log_type_enabled(v44, type))
              {
                *(_DWORD *)buf = 136446210;
                uint64_t v94 = "nw_read_request_create_with_buffer";
                _os_log_impl( &dword_181A5C000,  v44,  v45,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_read_request) alloc] init] failed",  buf,  0xCu);
              }
            }

            else if (v91)
            {
              os_log_type_t v49 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              BOOL v44 = (os_log_s *)(id)gLogObj;
              unint64_t v50 = type;
              os_log_type_t v51 = os_log_type_enabled(v44, type);
              if (v49)
              {
                if (v51)
                {
                  *(_DWORD *)buf = 136446466;
                  uint64_t v94 = "nw_read_request_create_with_buffer";
                  BOOL v95 = 2082;
                  *(void *)unsigned int v96 = v49;
                  _os_log_impl( &dword_181A5C000,  v44,  v50,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_read_request) alloc] init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v49);
                if (!v43) {
                  goto LABEL_86;
                }
                goto LABEL_85;
              }

              if (v51)
              {
                *(_DWORD *)buf = 136446210;
                uint64_t v94 = "nw_read_request_create_with_buffer";
                _os_log_impl( &dword_181A5C000,  v44,  v50,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_read_request) alloc] init] failed, no backtrace",  buf,  0xCu);
              }
            }

            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              BOOL v44 = (os_log_s *)(id)gLogObj;
              os_log_type_t v54 = type;
              if (os_log_type_enabled(v44, type))
              {
                *(_DWORD *)buf = 136446210;
                uint64_t v94 = "nw_read_request_create_with_buffer";
                _os_log_impl( &dword_181A5C000,  v44,  v54,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_read_request) alloc] init] failed, backtrace limit exceeded",  buf,  0xCu);
              }
            }
          }

          if (!v43)
          {
LABEL_86:

            goto LABEL_87;
          }

  [MEMORY[0x189607968] numberWithUnsignedInt:self->_multipathService];
  __int16 v72 = (void *)objc_claimAutoreleasedReturnValue();
  [v4 setObject:v72 forKey:@"multipathService"];

  if ((*(_WORD *)&self->_has & 0x80) != 0)
  {
LABEL_26:
    [MEMORY[0x189607968] numberWithBool:self->_keepalive];
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    [v4 setObject:v11 forKey:@"keepalive"];
  }

    _os_log_impl(&dword_181A5C000, v63, v64, v66, buf, 0x18u);
    goto LABEL_106;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v63 = (os_log_s *)gLogObj;
  os_log_type_t v64 = type;
  if (os_log_type_enabled((os_log_t)gLogObj, type))
  {
    os_log_type_t v65 = *v87;
    *(_DWORD *)buf = 136446722;
    uint64_t v91 = v34;
    __int16 v92 = 1024;
    *(_DWORD *)uint64_t v93 = v31;
    *(_WORD *)&v93[4] = 1024;
    *(_DWORD *)&v93[6] = v65;
    __int16 v66 = "%{public}s no more frames in frame cache, we thought we had %u bytes in %u frames";
    goto LABEL_105;
  }

    goto LABEL_112;
  }

  id v3 = sec_identity_copy_ref(v1);
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    id v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v55 = "nw_utilities_public_key_info_for_sec_identity";
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(privateKeyRef) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (privateKeyRef == 17)
    {
      __nwlog_obj();
      BOOL v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = privateKeyRef;
      if (os_log_type_enabled(v20, (os_log_type_t)privateKeyRef))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v55 = "nw_utilities_public_key_info_for_sec_identity";
        _os_log_impl(&dword_181A5C000, v20, v23, "%{public}s called with null secIdentity", buf, 0xCu);
      }
    }

    else if (type)
    {
      os_log_type_t v36 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v37 = privateKeyRef;
      id v38 = os_log_type_enabled(v20, (os_log_type_t)privateKeyRef);
      if (v36)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v55 = "nw_utilities_public_key_info_for_sec_identity";
          __int16 v56 = 2082;
          os_log_type_t v57 = v36;
          _os_log_impl( &dword_181A5C000,  v20,  v37,  "%{public}s called with null secIdentity, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v36);
LABEL_112:
        if (!v19)
        {
LABEL_114:
          os_log_type_t v15 = 0LL;
          goto LABEL_32;
        }

    if (v49) {
      free(v49);
    }
    return 2LL;
  }

  os_log_type_t v47 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
  *(_DWORD *)output_buffer = 136446722;
  BOOL v68 = "strict_calloc";
  os_log_type_t v69 = 2048;
  os_log_type_t v70 = 1LL;
  os_log_type_t v71 = 2048;
  __int16 v72 = 16LL;
  char v48 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v48);
  if (!(_DWORD)result)
  {
    free(v48);
    goto LABEL_2;
  }

  __break(1u);
  return result;
}

  if (v73) {
    free(v73);
  }
  uint64_t v11 = 0;
LABEL_18:

  return v11;
}

    if (v27) {
      free(v27);
    }
    return 0xFFFFFFFFLL;
  }

  if (*(_DWORD *)&v81[24])
  {
    if (*(_DWORD *)&v81[24] <= 0x1Cu) {
      uint64_t v17 = 28LL;
    }
    else {
      uint64_t v17 = *(unsigned int *)&v81[24];
    }
    *(_DWORD *)&v81[24] = v17;
    uint64_t v18 = calloc(1uLL, v17);
    if (!v18)
    {
      os_log_type_t v65 = (os_log_s *)__nwlog_obj();
      os_log_type_enabled(v65, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446722;
      char v77 = "strict_calloc";
      os_log_type_t v78 = 2048;
      *(void *)os_log_type_t v79 = 1LL;
      *(_WORD *)&v79[8] = 2048;
      v80[0] = v17;
      os_log_type_t v73 = 32;
      __int16 v66 = (void *)_os_log_send_and_compose_impl();
      BOOL result = __nwlog_abort((uint64_t)v66);
      if ((_DWORD)result) {
        goto LABEL_158;
      }
      free(v66);
    }

    *(void *)&v81[16] = v18;
  }

  if (LODWORD(v82[1]))
  {
    if (LODWORD(v82[1]) <= 0x1C) {
      uint64_t v19 = 28LL;
    }
    else {
      uint64_t v19 = LODWORD(v82[1]);
    }
    LODWORD(v82[1]) = v19;
    BOOL v20 = calloc(1uLL, v19);
    if (!v20)
    {
      os_log_type_t v67 = (os_log_s *)__nwlog_obj();
      os_log_type_enabled(v67, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446722;
      char v77 = "strict_calloc";
      os_log_type_t v78 = 2048;
      *(void *)os_log_type_t v79 = 1LL;
      *(_WORD *)&v79[8] = 2048;
      v80[0] = v19;
      os_log_type_t v73 = 32;
      BOOL v68 = (void *)_os_log_send_and_compose_impl();
      BOOL result = __nwlog_abort((uint64_t)v68);
      if ((_DWORD)result) {
        goto LABEL_158;
      }
      free(v68);
    }

    v82[0] = v20;
  }

  uint64_t v21 = LODWORD(__size[1]);
  if (LODWORD(__size[1]))
  {
    id v22 = calloc(1uLL, LODWORD(__size[1]));
    if (!v22)
    {
      os_log_type_t v69 = (os_log_s *)__nwlog_obj();
      os_log_type_enabled(v69, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446722;
      char v77 = "strict_calloc";
      os_log_type_t v78 = 2048;
      *(void *)os_log_type_t v79 = 1LL;
      *(_WORD *)&v79[8] = 2048;
      v80[0] = v21;
      os_log_type_t v73 = 32;
      os_log_type_t v70 = (void *)_os_log_send_and_compose_impl();
      BOOL result = __nwlog_abort((uint64_t)v70);
      if ((_DWORD)result) {
        goto LABEL_158;
      }
      free(v70);
    }

    __size[0] = (size_t)v22;
  }

  if (ioctl(a1, 0xC0407398uLL, v81, v73))
  {
    os_log_type_t v23 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if ((v23 | 0x10) == 0x16)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v24 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        char v77 = "copyconninfo";
        os_log_type_t v78 = 1024;
        *(_DWORD *)os_log_type_t v79 = a1;
        *(_WORD *)&v79[4] = 1024;
        *(_DWORD *)&void v79[6] = v23;
        _os_log_impl( &dword_181A5C000,  v24,  OS_LOG_TYPE_ERROR,  "%{public}s ioctl(%d,SIOCGCONNINFO) %{darwin.errno}d",  buf,  0x18u);
      }

          if (!v40) {
            goto LABEL_25;
          }
LABEL_106:
          free(v40);
          goto LABEL_25;
        }

        int v43 = (char *)__nw_create_backtrace_string();
        os_log_t loga = (os_log_s *)__nwlog_obj();
        nw_endpoint_t v61 = type[0];
        BOOL v44 = os_log_type_enabled(loga, type[0]);
        if (v43)
        {
          if (v44)
          {
            os_log_type_t v45 = *(void *)(v15 + 32);
            if (v45)
            {
              BOOL v46 = *(const char **)(v45 + 16);
              if (!v46) {
                BOOL v46 = "invalid";
              }
            }

            else
            {
              BOOL v46 = "invalid";
            }

            LODWORD(buf[0]) = 136446722;
            *(void *)((char *)buf + 4) = "nw_http3_stream_control_stream_output_available";
            WORD2(buf[1]) = 2082;
            *(void *)((char *)&buf[1] + 6) = v46;
            HIWORD(buf[2]) = 2082;
            buf[3] = v43;
            _os_log_impl( &dword_181A5C000,  loga,  v61,  "%{public}s protocol %{public}s has invalid disconnect callback, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x20u);
          }

          free(v43);
          goto LABEL_105;
        }

        if (!v44) {
          goto LABEL_105;
        }
        os_log_type_t v49 = *(void *)(v15 + 32);
        if (v49)
        {
          unint64_t v50 = *(const char **)(v49 + 16);
          if (!v50) {
            unint64_t v50 = "invalid";
          }
        }

        else
        {
          unint64_t v50 = "invalid";
        }

        LODWORD(buf[0]) = 136446466;
        *(void *)((char *)buf + 4) = "nw_http3_stream_control_stream_output_available";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = v50;
        _os_log_impl( &dword_181A5C000,  loga,  v61,  "%{public}s protocol %{public}s has invalid disconnect callback, no backtrace",  (uint8_t *)buf,  0x16u);
        if (v40) {
          goto LABEL_106;
        }
LABEL_25:
        uint64_t v14 = &__block_literal_global_29_60283;
        if (v15 == *(void *)(a1 + 912)) {
          goto LABEL_126;
        }
        goto LABEL_63;
      default:
        uint64_t v14 = &__block_literal_global_29_60283;
        goto LABEL_63;
    }
  }

    _os_log_impl(&dword_181A5C000, v32, v33, v34, &__dst[0].sa_len, 0xCu);
    goto LABEL_106;
  }

  if (a1->handle == &nw_protocol_ref_counted_handle)
  {
    memset(__dst, 0, sizeof(__dst));
    int v43 = 0;
    BOOL v2 = *(_DWORD *)&a1[4].flow_id[12];
    if (v2 < 0) {
      return;
    }
    remote = (void *)nw_socket_get_remote(a1);
    if (remote && (v4 = remote, id v5 = [v4 type], v4, v5 == 1))
    {
      int address_family = nw_endpoint_get_address_family(v4);
      os_log_type_t v7 = address_family;
      BOOL v42 = 0LL;
      id v8 = address_family == 2;
      if ((address_family == 30 || address_family == 2) && !copyconninfo(v2, 0, &v42))
      {
        int v9 = v42;
        os_log_type_t v10 = *(unsigned __int8 **)(v42 + 8);
        if (v10)
        {
          uint64_t v11 = *v10;
          if (v11 >= 0x81)
          {
            int v43 = *(_DWORD *)(v42 + 4);
          }

          else
          {
            memcpy(__dst, v10, v11);
            os_log_type_t v10 = *(unsigned __int8 **)(v9 + 8);
            int v43 = *(_DWORD *)(v9 + 4);
            if (!v10) {
              goto LABEL_56;
            }
          }

          free(v10);
          *(void *)(v9 + _Block_object_dispose(va, 8) = 0LL;
        }

        else
        {
          int v43 = *(_DWORD *)(v42 + 4);
        }

          if (v44) {
            free(v44);
          }
LABEL_107:
          if (ioctl(*(_DWORD *)&a1[4].flow_id[12], 0x8004667EuLL, out, v131) < 0)
          {
            BOOL v53 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_socket_initialize_socket";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v53;
            os_log_type_t v54 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            id v133 = OS_LOG_TYPE_DEFAULT;
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              BOOL v55 = (os_log_s *)gLogObj;
              __int16 v56 = type[0];
              if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
                goto LABEL_235;
              }
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_socket_initialize_socket";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v53;
              os_log_type_t v57 = "%{public}s FIONBIO failed %{darwin.errno}d";
            }

            else if (v133)
            {
              BOOL v68 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              BOOL v55 = (os_log_s *)gLogObj;
              __int16 v56 = type[0];
              os_log_type_t v69 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
              if (v68)
              {
                if (v69)
                {
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_socket_initialize_socket";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v53;
                  *(_WORD *)&buf[18] = 2082;
                  *(void *)&buf[20] = v68;
                  _os_log_impl( &dword_181A5C000,  v55,  v56,  "%{public}s FIONBIO failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
                }

                free(v68);
                if (!v54) {
                  goto LABEL_237;
                }
                goto LABEL_236;
              }

              if (!v69) {
                goto LABEL_235;
              }
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_socket_initialize_socket";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v53;
              os_log_type_t v57 = "%{public}s FIONBIO failed %{darwin.errno}d, no backtrace";
            }

            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              BOOL v55 = (os_log_s *)gLogObj;
              __int16 v56 = type[0];
              if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
                goto LABEL_235;
              }
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_socket_initialize_socket";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v53;
              os_log_type_t v57 = "%{public}s FIONBIO failed %{darwin.errno}d, backtrace limit exceeded";
            }

            os_log_type_t v78 = v55;
            os_log_type_t v79 = v56;
            BOOL v80 = 18;
LABEL_234:
            _os_log_impl(&dword_181A5C000, v78, v79, v57, buf, v80);
            goto LABEL_235;
          }

          if (uuid_is_null(a1->flow_id) || !setsockopt(*(_DWORD *)&a1[4].flow_id[12], 0xFFFF, 4369, a1, 0x10u))
          {
LABEL_109:
            if (identifier)
            {
              unint64_t v50 = *(void *)&identifier->name[24];
              if (v50)
              {
                os_log_type_t v51 = *(uint64_t (**)(nw_protocol_identifier *))(v50 + 112);
                if (v51)
                {
                  if (*(_UNKNOWN **)identifier[1].name == &nw_protocol_ref_counted_handle)
                  {
                    nw_endpoint_t v61 = *(void *)&identifier[2].name[8];
                    if (v61) {
                      *(void *)&identifier[2].name[8] = v61 + 1;
                    }
                    BOOL v52 = (void *)v51(identifier);
                    if (*(_UNKNOWN **)identifier[1].name == &nw_protocol_ref_counted_handle)
                    {
                      os_log_type_t v70 = *(void *)&identifier[2].name[8];
                      if (v70)
                      {
                        os_log_type_t v71 = v70 - 1;
                        *(void *)&identifier[2].name[8] = v71;
                        if (!v71)
                        {
                          __int16 v72 = *(void (***)(void))&identifier[1].name[24];
                          if (v72)
                          {
                            *(void *)&identifier[1].name[24] = 0LL;
                            v72[2](v72);
                            _Block_release(v72);
                          }

                          if ((identifier[1].level & 1) != 0)
                          {
                            os_log_type_t v73 = *(const void **)&identifier[1].name[24];
                            if (v73) {
                              _Block_release(v73);
                            }
                          }

                          free(identifier);
                        }
                      }
                    }
                  }

                  else
                  {
                    BOOL v52 = (void *)v51(identifier);
                  }

                  if (v52)
                  {
                    os_log_type_t v62 = v52;
                    os_log_type_t v63 = v62[19];

                    if (v63)
                    {
                      os_log_type_t v64 = (id *)v63;
                      os_log_type_t v65 = v64[3];

                      os_release(v64);
                      if (v65)
                      {
                        __int16 v66 = v65;
                        if (nw_protocol_setup_tcp_definition(void)::onceToken[0] != -1) {
                          dispatch_once( nw_protocol_setup_tcp_definition(void)::onceToken,  &__block_literal_global_63226);
                        }
                        os_log_type_t v67 = nw_protocol_options_matches_definition(v66, (void *)g_tcp_definition);

                        if (v67) {
                          nw_socket_set_bidirectional_tcp_sockopts((uint64_t)p_output_handler, v66);
                        }
                        os_release(v66);
                      }
                    }
                  }
                }
              }
            }

            return 1LL;
          }

          BOOL v58 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          BOOL v59 = (os_log_s *)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_socket_initialize_socket";
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = (char *)a1 + 404;
            *(_WORD *)&_BYTE buf[22] = 1024;
            *(_DWORD *)&_BYTE buf[24] = v58;
            _os_log_impl( &dword_181A5C000,  v59,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt SO_NECP_CLIENTUUID failed %{darwin.errno}d",  buf,  0x1Cu);
          }

          if (v58 == 2 || v58 == 22)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            int v60 = (os_log_s *)gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_socket_initialize_socket";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v58;
              _os_log_impl( &dword_181A5C000,  v60,  OS_LOG_TYPE_ERROR,  "%{public}s setsockopt SO_NECP_CLIENTUUID failed %{darwin.errno}d",  buf,  0x12u);
            }

            goto LABEL_109;
          }

          __nwlog_obj();
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_socket_initialize_socket";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v58;
          BOOL v74 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          id v133 = OS_LOG_TYPE_DEFAULT;
          if ((__nwlog_fault(v74, type, &v133) & 1) != 0)
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              os_log_type_t v75 = (os_log_s *)__nwlog_obj();
              id v76 = type[0];
              if (!os_log_type_enabled(v75, type[0])) {
                goto LABEL_171;
              }
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_socket_initialize_socket";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v58;
              char v77 = "%{public}s setsockopt SO_NECP_CLIENTUUID failed %{darwin.errno}d";
              goto LABEL_170;
            }

            if (v133 == OS_LOG_TYPE_DEFAULT)
            {
              os_log_type_t v75 = (os_log_s *)__nwlog_obj();
              id v76 = type[0];
              if (!os_log_type_enabled(v75, type[0])) {
                goto LABEL_171;
              }
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_socket_initialize_socket";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v58;
              char v77 = "%{public}s setsockopt SO_NECP_CLIENTUUID failed %{darwin.errno}d, backtrace limit exceeded";
              goto LABEL_170;
            }

            os_log_type_t v81 = (char *)__nw_create_backtrace_string();
            os_log_type_t v75 = (os_log_s *)__nwlog_obj();
            id v76 = type[0];
            __int16 v82 = os_log_type_enabled(v75, type[0]);
            if (v81)
            {
              if (v82)
              {
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_socket_initialize_socket";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v58;
                *(_WORD *)&buf[18] = 2082;
                *(void *)&buf[20] = v81;
                _os_log_impl( &dword_181A5C000,  v75,  v76,  "%{public}s setsockopt SO_NECP_CLIENTUUID failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
              }

              free(v81);
              goto LABEL_171;
            }

            if (v82)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_socket_initialize_socket";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v58;
              char v77 = "%{public}s setsockopt SO_NECP_CLIENTUUID failed %{darwin.errno}d, no backtrace";
LABEL_170:
              _os_log_impl(&dword_181A5C000, v75, v76, v77, buf, 0x12u);
            }
          }

  if (v45) {
    free(v45);
  }
  int v9 = 0LL;
LABEL_75:

  return v9;
}

  if (v47) {
    free(v47);
  }
  os_log_type_t v29 = 0LL;
LABEL_53:

  return v29;
}

    if (v88) {
      free(v88);
    }
    uint64_t v21 = 0LL;
LABEL_39:

LABEL_40:
LABEL_41:
    os_log_type_t v34 = v7;
    BOOL v35 = v34[2];

    *(_DWORD *)(a3 + 156) = nw_parameters_get_traffic_class(v35);
    *(_DWORD *)(a3 + 204) = nw_parameters_get_multipath_service((nw_parameters_t)v35);
    id v133 = 0LL;
    nw_endpoint_t v131 = 0u;
    v132 = 0u;
    nw_endpoint_t v129 = 0u;
    __int128 v130 = 0u;
    char v127 = 0u;
    nw_endpoint_t v128 = 0u;
    id v125 = 0u;
    int v126 = 0u;
    int v123 = 0u;
    unsigned int v124 = 0u;
    id v121 = 0u;
    unsigned int v122 = 0u;
    uint64_t v119 = 0u;
    char v120 = 0u;
    nw_endpoint_t v117 = 0u;
    uint64_t v118 = 0u;
    int v115 = 0u;
    memset(v116, 0, sizeof(v116));
    memset(buf, 0, sizeof(buf));
    if (!nw_parameters_get_multipath(v35))
    {
      os_log_type_t v36 = v8;
      nw_context_assert_queue(v5[3]);
      os_log_type_t v37 = v36;
      if (nw_parameters_get_ip_protocol(v37[2]) == 6)
      {
        id v38 = nw_endpoint_handler_fillout_tcp_info(v37[18], buf);

        if (v38)
        {
          *(_WORD *)(a3 + 20_Block_object_dispose(va, 8) = *(_WORD *)(a3 + 208) & 0xFE1F | (32 * (_BYTE)v123) & 0x20 | (8 * v123) & 0x40 | (32 * (_BYTE)v123) & 0x80 | (((v123 & 2) != 0) << 8);
          id v39 = *(void *)&v116[3];
          *(void *)a3 = *(void *)&v116[11];
          *(void *)(a3 + _Block_object_dispose(va, 8) = v39;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)&v116[13];
          os_log_type_t v40 = *(void *)&v116[9];
          *(void *)(a3 + 32) = *(void *)&v116[5];
          *(void *)(a3 + 40) = v40;
          *(void *)(a3 + 4_Block_object_dispose(va, 8) = *(void *)&v116[1];
          *(void *)(a3 + 56) = 0LL;
          *(void *)(a3 + 64) = 0LL;
          *(void *)(a3 + 72) = 0LL;
          os_log_type_t v41 = vrev64q_s32(*(int32x4_t *)&buf[5]);
          v41.i64[0] = *(void *)&buf[5];
          *(int32x4_t *)(a3 + 160) = v41;
          *(_DWORD *)(a3 + 176) = LOBYTE(v116[19]);
          if (nw_parameters_get_tfo(v35) && (BYTE4(v123) & 8) != 0) {
            *(_WORD *)(a3 + 208) |= 0x200u;
          }
          goto LABEL_74;
        }
      }

      else
      {
      }
    }

    if (nw_endpoint_handler_is_multipath(v6))
    {
      uint64_t v105 = 0LL;
      if (nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue(v8, (uint64_t)&v105))
      {
        BOOL v44 = v105;
        if (v105)
        {
          if (*(void *)v105)
          {
            os_log_type_t v45 = *(void *)(*(void *)v105 + 32LL);
            if (v45)
            {
              v42.i32[0] = 0;
              v43.i32[0] = *(_BYTE *)(v45 + 116) & 1;
              BOOL v46 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v43, v42), 0);
              os_log_type_t v47 = *(int8x16_t *)(v45 + 120);
              char v48 = (int64x2_t)vandq_s8(v47, v46);
              os_log_type_t v49 = (int64x2_t)vbicq_s8(v47, v46);
              unint64_t v50 = *(int8x16_t *)(v45 + 48);
              os_log_type_t v51 = vdup_n_s32((*(_BYTE *)(v45 + 44) & 1) == 0);
              v52.i64[0] = v51.u32[0];
              v52.i64[1] = v51.u32[1];
              BOOL v53 = (int32x4_t)vcltzq_s64(vshlq_n_s64(v52, 0x3FuLL));
              os_log_type_t v54 = (int64x2_t)vandq_s8(v50, (int8x16_t)v53);
              BOOL v55 = (int64x2_t)vbicq_s8(v50, (int8x16_t)v53);
              v53.i32[0] = *(_BYTE *)(v45 + 188) & 1;
              __int16 v56 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v53, v42), 0);
              os_log_type_t v57 = *(int8x16_t *)(v45 + 192);
              BOOL v58 = (int64x2_t)vandq_s8(v57, v56);
              BOOL v59 = (int32x4_t)vbicq_s8(v57, v56);
              int v60 = vaddq_s64(v49, (int64x2_t)v59);
              v59.i32[0] = *(_BYTE *)(v45 + 260) & 1;
              nw_endpoint_t v61 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v59, v42), 0);
              os_log_type_t v62 = *(int8x16_t *)(v45 + 264);
              os_log_type_t v63 = (int64x2_t)vandq_s8(v62, v61);
              os_log_type_t v64 = vaddq_s64(v55, vaddq_s64(v60, (int64x2_t)vbicq_s8(v62, v61)));
              os_log_type_t v65 = vaddq_s64(v54, vaddq_s64(vaddq_s64(v48, v58), v63));
              *(_WORD *)(a3 + 20_Block_object_dispose(va, 8) = ((*(_WORD *)(v45 + 328) & 1) << 10) | *(_WORD *)(a3 + 208) & 0xFBFF;
              *(int8x16_t *)(a3 + 80) = vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL);
              *(int8x16_t *)(a3 + 96) = vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL);
              *(_OWORD *)(a3 + 112) = *(_OWORD *)(v45 + 24);
              __int16 v66 = (int8x16_t)vaddq_s64(v64, v65);
              *(int8x16_t *)a3 = vextq_s8(v66, v66, 8uLL);
            }
          }
        }

        freemptcpinfo(v44);
        goto LABEL_74;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v67 = (id)gLogObj;
      *(_DWORD *)uint64_t v110 = 136446210;
      id v111 = "nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queue";
      BOOL v68 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      nw_endpoint_t v103 = 0;
      if (__nwlog_fault(v68, &type, &v103))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v69 = (os_log_s *)(id)gLogObj;
          os_log_type_t v70 = type;
          if (os_log_type_enabled(v69, type))
          {
            *(_DWORD *)uint64_t v110 = 136446210;
            id v111 = "nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queue";
            _os_log_impl( &dword_181A5C000,  v69,  v70,  "%{public}s nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue failed",  v110,  0xCu);
          }
        }

        else if (v103)
        {
          os_log_type_t v71 = __nw_create_backtrace_string();
          if (v71)
          {
            __int16 v72 = (char *)v71;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v73 = (os_log_s *)(id)gLogObj;
            BOOL v74 = type;
            if (os_log_type_enabled(v73, type))
            {
              *(_DWORD *)uint64_t v110 = 136446466;
              id v111 = "nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queue";
              int v112 = 2082;
              uint64_t v113 = v72;
              _os_log_impl( &dword_181A5C000,  v73,  v74,  "%{public}s nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue failed, dumping backtrace:%{public}s",  v110,  0x16u);
            }

            free(v72);
            if (!v68) {
              goto LABEL_74;
            }
            goto LABEL_73;
          }

          __nwlog_obj();
          os_log_type_t v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          id v76 = type;
          if (os_log_type_enabled(v69, type))
          {
            *(_DWORD *)uint64_t v110 = 136446210;
            id v111 = "nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queue";
            _os_log_impl( &dword_181A5C000,  v69,  v76,  "%{public}s nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue failed, no backtrace",  v110,  0xCu);
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v69 = (os_log_s *)(id)gLogObj;
          os_log_type_t v75 = type;
          if (os_log_type_enabled(v69, type))
          {
            *(_DWORD *)uint64_t v110 = 136446210;
            id v111 = "nw_connection_stats_fill_in_statistics_report_for_endpoint_on_nw_queue";
            _os_log_impl( &dword_181A5C000,  v69,  v75,  "%{public}s nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue failed, backtrace limit exceeded",  v110,  0xCu);
          }
        }
      }

      if (v68) {
LABEL_73:
      }
        free(v68);
    }

          _Block_object_dispose(v259, 8);
          _Block_object_dispose(&v261, 8);
          _Block_object_dispose(v265, 8);
          if (v58)
          {
            nw_frame_set_metadata(v58, 0LL, 1, 1);
            *(void *)(v58 + 32) = 0LL;
            __int16 v86 = a6->tqh_last;
            *(void *)(v58 + 40) = v86;
            const char *v86 = (nw_frame *)v58;
            a6->tqh_last = (nw_frame **)(v58 + 32);
            BOOL v87 = *((unsigned int *)v313 + 6) + 1LL;
            __int16 v88 = v87 << 31 >> 31;
            *((_DWORD *)v313 + 6) = v87;
            if (v88 != v87 || v88 < 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              unsigned int v89 = *((unsigned int *)v313 + 6);
              *(_DWORD *)buf = 136446978;
              nw_endpoint_t v317 = "nw_protocol_http2_get_input_frames";
              v318 = 2082;
              v319 = "return_frame_count";
              v320 = 2048;
              v321 = 1LL;
              v322 = 2048;
              *(void *)v323 = v89;
              __int16 v90 = (char *)_os_log_send_and_compose_impl();
              v265[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(v261) = 0;
              if (v265[0] != OS_LOG_TYPE_FAULT)
              {
                if ((_BYTE)v261)
                {
                  int v115 = (char *)__nw_create_backtrace_string();
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  nw_endpoint_t v116 = (os_log_s *)gLogObj;
                  nw_endpoint_t v117 = v265[0];
                  uint64_t v118 = os_log_type_enabled((os_log_t)gLogObj, v265[0]);
                  if (v115)
                  {
                    if (v118)
                    {
                      uint64_t v119 = *((unsigned int *)v313 + 6);
                      *(_DWORD *)buf = 136447234;
                      nw_endpoint_t v317 = "nw_protocol_http2_get_input_frames";
                      v318 = 2082;
                      v319 = "return_frame_count";
                      v320 = 2048;
                      v321 = 1LL;
                      v322 = 2048;
                      *(void *)v323 = v119;
                      *(_WORD *)&v323[8] = 2082;
                      *(void *)&v323[10] = v115;
                      _os_log_impl( &dword_181A5C000,  v116,  v117,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                    }

                    free(v115);
                    goto LABEL_151;
                  }

                  if (!v118) {
                    goto LABEL_151;
                  }
                  v132 = *((unsigned int *)v313 + 6);
                  *(_DWORD *)buf = 136446978;
                  nw_endpoint_t v317 = "nw_protocol_http2_get_input_frames";
                  v318 = 2082;
                  v319 = "return_frame_count";
                  v320 = 2048;
                  v321 = 1LL;
                  v322 = 2048;
                  *(void *)v323 = v132;
                  uint64_t v94 = v116;
                  BOOL v95 = v117;
                  unsigned int v96 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                }

                else
                {
                  int v123 = (os_log_s *)__nwlog_obj();
                  unsigned int v124 = v265[0];
                  if (!os_log_type_enabled(v123, v265[0])) {
                    goto LABEL_151;
                  }
                  id v125 = *((unsigned int *)v313 + 6);
                  *(_DWORD *)buf = 136446978;
                  nw_endpoint_t v317 = "nw_protocol_http2_get_input_frames";
                  v318 = 2082;
                  v319 = "return_frame_count";
                  v320 = 2048;
                  v321 = 1LL;
                  v322 = 2048;
                  *(void *)v323 = v125;
                  uint64_t v94 = v123;
                  BOOL v95 = v124;
                  unsigned int v96 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                }

    if (!v33)
    {
LABEL_92:
      if (a19) {
        goto LABEL_93;
      }
      goto LABEL_107;
    }

        free(v24);
        goto LABEL_106;
      }

      if (!v49) {
        goto LABEL_104;
      }
      *(_DWORD *)buf = 136446722;
      nw_endpoint_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
      os_log_type_t v62 = 2048;
      *(void *)os_log_type_t v63 = v21;
      *(_WORD *)&v63[8] = 1024;
      *(_DWORD *)&v63[10] = v41;
      os_log_type_t v27 = "%{public}s Received read error when reading network agent message (%zd bytes) %{darwin.errno}d, no backtrace";
    }

    else
    {
      BOOL v42 = (os_log_s *)__nwlog_obj();
      int v43 = type;
      if (!os_log_type_enabled(v42, type)) {
        goto LABEL_104;
      }
      *(_DWORD *)buf = 136446722;
      nw_endpoint_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
      os_log_type_t v62 = 2048;
      *(void *)os_log_type_t v63 = v21;
      *(_WORD *)&v63[8] = 1024;
      *(_DWORD *)&v63[10] = v41;
      os_log_type_t v27 = "%{public}s Received read error when reading network agent message (%zd bytes) %{darwin.errno}d, backtrace limit exceeded";
    }

    unint64_t v50 = v42;
    os_log_type_t v51 = v43;
    BOOL v52 = 28;
    goto LABEL_103;
  }

  return v6;
}

    if (v43) {
      free(v43);
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v157 = "__nw_protocol_get_remote_endpoint";
    os_log_type_t v49 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v154 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      unint64_t v50 = (os_log_s *)__nwlog_obj();
      os_log_type_t v51 = type[0];
      if (os_log_type_enabled(v50, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v157 = "__nw_protocol_get_remote_endpoint";
        BOOL v52 = "%{public}s called with null protocol";
LABEL_120:
        _os_log_impl(&dword_181A5C000, v50, v51, v52, buf, 0xCu);
      }
    }

    else if (v154)
    {
      BOOL v53 = (char *)__nw_create_backtrace_string();
      unint64_t v50 = (os_log_s *)__nwlog_obj();
      os_log_type_t v51 = type[0];
      os_log_type_t v54 = os_log_type_enabled(v50, type[0]);
      if (v53)
      {
        if (v54)
        {
          *(_DWORD *)buf = 136446466;
          v157 = "__nw_protocol_get_remote_endpoint";
          nw_endpoint_t v158 = 2082;
          os_log_type_t v159 = (nw_protocol_identifier *)v53;
          _os_log_impl( &dword_181A5C000,  v50,  v51,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v53);
        goto LABEL_121;
      }

      if (v54)
      {
        *(_DWORD *)buf = 136446210;
        v157 = "__nw_protocol_get_remote_endpoint";
        BOOL v52 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_120;
      }
    }

    else
    {
      unint64_t v50 = (os_log_s *)__nwlog_obj();
      os_log_type_t v51 = type[0];
      if (os_log_type_enabled(v50, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v157 = "__nw_protocol_get_remote_endpoint";
        BOOL v52 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_120;
      }
    }

    if (!v15)
    {
LABEL_86:
      close(v1);
      if (sCachedSettings)
      {
        dictionary = xpc_dictionary_get_dictionary( (xpc_object_t)sCachedSettings,  (const char *)nw_settings_managed_settings);
        if (dictionary) {
          xpc_dictionary_apply(dictionary, &__block_literal_global_13_88510);
        }
      }

      return;
    }

    goto LABEL_85;
  }

  int v9 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (v9 == 2) {
    return;
  }
  if (v9 == 1)
  {
    os_log_type_t v10 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init(v10);
    uint64_t v11 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      v79.st_dev = 136446466;
      *(void *)&v79.st_uint64_t mode = "networkd_settings_read_from_file";
      WORD2(v79.st_ino) = 2082;
      *(__darwin_ino64_t *)((char *)&v79.st_ino + 6) = nw_file_path_settings;
      _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_ERROR,  "%{public}s Sandbox is preventing this process from reading networkd settings file at %{public}s, please add an exception.",  (uint8_t *)&v79,  0x16u);
    }

    return;
  }

  os_log_type_t v23 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init(v23);
  v79.st_dev = 136446466;
  *(void *)&v79.st_uint64_t mode = "networkd_settings_read_from_file";
  WORD2(v79.st_ino) = 1024;
  *(_DWORD *)((char *)&v79.st_ino + 6) = v9;
  uint64_t v24 = (char *)_os_log_send_and_compose_impl();
  buf[0] = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v24, buf, &type))
  {
    if (buf[0] == 17)
    {
      os_log_type_t v25 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init(v25);
      id v26 = (os_log_s *)gLogObj;
      os_log_type_t v27 = buf[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)buf[0])) {
        goto LABEL_59;
      }
      v79.st_dev = 136446466;
      *(void *)&v79.st_uint64_t mode = "networkd_settings_read_from_file";
      WORD2(v79.st_ino) = 1024;
      *(_DWORD *)((char *)&v79.st_ino + 6) = v9;
      os_log_type_t v28 = "%{public}s networkd settings file open failed %{darwin.errno}d";
      goto LABEL_58;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      id v38 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init(v38);
      id v26 = (os_log_s *)gLogObj;
      os_log_type_t v27 = buf[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)buf[0])) {
        goto LABEL_59;
      }
      v79.st_dev = 136446466;
      *(void *)&v79.st_uint64_t mode = "networkd_settings_read_from_file";
      WORD2(v79.st_ino) = 1024;
      *(_DWORD *)((char *)&v79.st_ino + 6) = v9;
      os_log_type_t v28 = "%{public}s networkd settings file open failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_58;
    }

    char v30 = (char *)__nw_create_backtrace_string();
    os_log_type_t v31 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init(v31);
    id v26 = (os_log_s *)gLogObj;
    os_log_type_t v27 = buf[0];
    BOOL v32 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)buf[0]);
    if (v30)
    {
      if (v32)
      {
        v79.st_dev = 136446722;
        *(void *)&v79.st_uint64_t mode = "networkd_settings_read_from_file";
        WORD2(v79.st_ino) = 1024;
        *(_DWORD *)((char *)&v79.st_ino + 6) = v9;
        HIWORD(v79.st_uid) = 2082;
        *(void *)&v79.st_gid = v30;
        _os_log_impl( &dword_181A5C000,  v26,  v27,  "%{public}s networkd settings file open failed %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)&v79,  0x1Cu);
      }

      free(v30);
      goto LABEL_59;
    }

    if (v32)
    {
      v79.st_dev = 136446466;
      *(void *)&v79.st_uint64_t mode = "networkd_settings_read_from_file";
      WORD2(v79.st_ino) = 1024;
      *(_DWORD *)((char *)&v79.st_ino + 6) = v9;
      os_log_type_t v28 = "%{public}s networkd settings file open failed %{darwin.errno}d, no backtrace";
LABEL_58:
      _os_log_impl(&dword_181A5C000, v26, v27, v28, (uint8_t *)&v79, 0x12u);
    }
  }