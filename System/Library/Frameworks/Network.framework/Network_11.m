uint64_t NWFile1.init(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58D790);
  v3 = swift_allocObject();
  *(_DWORD *)(v3 + 16) = 0;
  v4 = MEMORY[0x18961AFE8];
  *(void *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = v4;
  *(void *)(v1 + 32) = 0LL;
  *(_BYTE *)(v1 + 40) = -1;
  v5 = v1 + OBJC_IVAR____TtC7Network7NWFile1_fileURL;
  v6 = sub_18264E568();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(v5, a1, v6);
  return v1;
}

uint64_t NWFile1.description.getter()
{
  return 0x28656C6946574ELL;
}

uint64_t NWFile1.waitUntilComplete()()
{
  v1[3] = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EBE0);
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EBE8);
  v1[7] = v3;
  v1[8] = *(void *)(v3 - 8);
  v1[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_181CA2EC0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v3 + 16) = sub_181CA41C4;
  *(void *)(v3 + 24) = v1;
  v4 = v2 + 4;
  os_unfair_lock_lock(v2 + 4);
  (*(void (**)(uint64_t *__return_ptr))(v3 + 16))(&v11);
  int v5 = v12;
  os_unfair_lock_unlock(v4);
  swift_task_dealloc();
  if (v5 == 255)
  {
    uint64_t v7 = *(void *)(v0 + 40);
    uint64_t v6 = *(void *)(v0 + 48);
    uint64_t v8 = *(void *)(v0 + 32);
    NWFile1.transferState.getter();
    sub_18264EE20();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v9;
    void *v9 = v0;
    v9[1] = sub_181CA3060;
    return sub_18264EEF8();
  }

  else
  {
    if ((v5 & 1) != 0) {
      swift_willThrow();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_181CA3060()
{
  return swift_task_switch();
}

uint64_t sub_181CA30C4()
{
  if (*(_BYTE *)(v0 + 88) == 2)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 64) + 8LL))(*(void *)(v0 + 72), *(void *)(v0 + 56));
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_181CA3060;
    return sub_18264EEF8();
  }

uint64_t sub_181CA3184()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NWFile1.__allocating_init(from:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  NWFile1.init(from:)(a1);
  return v2;
}

uint64_t *NWFile1.init(from:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v51 = *v2;
  uint64_t v45 = sub_18264E568();
  uint64_t v43 = *(void *)(v45 - 8);
  uint64_t v4 = MEMORY[0x1895F8858](v45);
  uint64_t v42 = (uint64_t)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v4);
  v46 = (char *)&v41 - v6;
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EBF0);
  uint64_t v44 = *(void *)(v47 - 8);
  MEMORY[0x1895F8858](v47);
  v50 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_18264F30C();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EBF8);
  MEMORY[0x1895F8858](v12);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v55 = type metadata accessor for NWFileSerializationContext(0LL);
  uint64_t v15 = *(void *)(v55 - 8);
  MEMORY[0x1895F8858](v55);
  v49 = (uint64_t *)((char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58D790);
  uint64_t v17 = swift_allocObject();
  *(_DWORD *)(v17 + 16) = 0;
  uint64_t v18 = MEMORY[0x18961AFE8];
  v2[2] = v17;
  v2[3] = v18;
  v2[4] = 0LL;
  *((_BYTE *)v2 + 40) = -1;
  uint64_t v19 = a1[3];
  v52 = a1;
  __swift_project_boxed_opaque_existential_2(a1, v19);
  uint64_t v20 = sub_18264F6D8();
  if (qword_18C58B268 != -1) {
    swift_once();
  }
  uint64_t v21 = __swift_project_value_buffer(v8, (uint64_t)qword_18C5A4A48);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v21, v8);
  if (*(void *)(v20 + 16) && (unint64_t v22 = sub_181C8C028((uint64_t)v11), (v23 & 1) != 0))
  {
    sub_181BF9894(*(void *)(v20 + 56) + 32 * v22, (uint64_t)&v53);
  }

  else
  {
    __int128 v53 = 0u;
    __int128 v54 = 0u;
  }

  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (!*((void *)&v54 + 1))
  {
    sub_181BDA0F0((uint64_t)&v53, (uint64_t *)&unk_18C58D300);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v14, 1LL, 1LL, v55);
    goto LABEL_13;
  }

  uint64_t v24 = v55;
  int v25 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v14, v25 ^ 1u, 1LL, v24);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1LL, v24) == 1)
  {
LABEL_13:
    sub_181BDA0F0((uint64_t)v14, &qword_18C58EBF8);
    uint64_t v30 = sub_18264F204();
    swift_allocError();
    uint64_t v32 = v31;
    sub_18264F1F8();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v30 - 8) + 104LL))( v32,  *MEMORY[0x189619360],  v30);
    swift_willThrow();
    v27 = v52;
    goto LABEL_14;
  }

  v26 = v49;
  sub_181CA4230((uint64_t)v14, (uint64_t)v49);
  v27 = v52;
  __swift_project_boxed_opaque_existential_2(v52, v52[3]);
  sub_181CA4274();
  uint64_t v28 = v48;
  sub_18264F6E4();
  if (v28)
  {
    sub_181BCD3E8((uint64_t)v26);
LABEL_14:
    swift_release();
    swift_bridgeObjectRelease();
    sub_181CA420C((void *)v2[4], *((_BYTE *)v2 + 40));
    swift_deallocPartialClassInstance();
    goto LABEL_15;
  }

  sub_181CA42B8(&qword_18C58EC08, MEMORY[0x189606AC8]);
  uint64_t v29 = v45;
  sub_18264F3F0();
  __swift_project_boxed_opaque_existential_2(v26, v26[3]);
  uint64_t v34 = sub_18264E514();
  uint64_t v36 = v35;
  v37 = (void (*)(char *, char *, uint64_t))((char *)v26 + *(int *)(v55 + 20));
  if (qword_18C58B260 != -1) {
    swift_once();
  }
  sub_18264F75C();
  uint64_t v38 = v42;
  sub_181C4A80C(v34, v36, v37, (uint64_t)&v53, v42);
  sub_181BDA0F0((uint64_t)&v53, &qword_18C58D638);
  swift_bridgeObjectRelease();
  uint64_t v39 = v43;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32))( (uint64_t)v2 + OBJC_IVAR____TtC7Network7NWFile1_fileURL,  v38,  v29);
  v40 = v49;
  __swift_project_boxed_opaque_existential_2(v49, v49[3]);
  sub_181C4B47C();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v46, v29);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v50, v47);
  sub_181BCD3E8((uint64_t)v40);
LABEL_15:
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v27);
  return v2;
}

uint64_t NWFile1.encode(to:)(void *a1)
{
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EC10);
  uint64_t v27 = *(void *)(v32 - 8);
  MEMORY[0x1895F8858](v32);
  uint64_t v30 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_18264F30C();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EBF8);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = type metadata accessor for NWFileSerializationContext(0LL);
  uint64_t v10 = *(void *)(v35 - 8);
  MEMORY[0x1895F8858](v35);
  uint64_t v28 = (uint64_t *)((char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  uint64_t v12 = sub_18264F6D8();
  if (qword_18C58B268 != -1) {
    swift_once();
  }
  uint64_t v13 = __swift_project_value_buffer(v3, (uint64_t)qword_18C5A4A48);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v13, v3);
  if (*(void *)(v12 + 16) && (unint64_t v14 = sub_181C8C028((uint64_t)v6), (v15 & 1) != 0))
  {
    sub_181BF9894(*(void *)(v12 + 56) + 32 * v14, (uint64_t)&v33);
  }

  else
  {
    __int128 v33 = 0u;
    __int128 v34 = 0u;
  }

  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (!*((void *)&v34 + 1))
  {
    sub_181BDA0F0((uint64_t)&v33, (uint64_t *)&unk_18C58D300);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v9, 1LL, 1LL, v35);
    goto LABEL_13;
  }

  uint64_t v16 = v35;
  int v17 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v9, v17 ^ 1u, 1LL, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1LL, v16) == 1)
  {
LABEL_13:
    sub_181BDA0F0((uint64_t)v9, &qword_18C58EBF8);
    uint64_t v24 = sub_18264F21C();
    swift_allocError();
    v26 = v25;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EC18);
    v26[3] = MEMORY[0x189617FA8];
    void *v26 = 0LL;
    v26[1] = 0xE000000000000000LL;
    sub_18264F1F8();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v24 - 8) + 104LL))( v26,  *MEMORY[0x1896193B8],  v24);
    return swift_willThrow();
  }

  uint64_t v18 = v28;
  sub_181CA4230((uint64_t)v9, (uint64_t)v28);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_181CA4274();
  uint64_t v19 = v30;
  sub_18264F714();
  uint64_t v20 = v31;
  sub_18264E568();
  sub_181CA42B8(&qword_18C58EC20, MEMORY[0x189606AB0]);
  uint64_t v21 = v32;
  uint64_t v22 = v29;
  sub_18264F45C();
  if (!v22)
  {
    __swift_project_boxed_opaque_existential_2(v18, v18[3]);
    sub_181C4B7D4(v20);
  }

  (*(void (**)(char *, uint64_t))(v27 + 8))(v19, v21);
  return sub_181BCD3E8((uint64_t)v18);
}

void sub_181CA3C40(void *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(void **)(a2 + 32);
    *(void *)(a2 + 32) = a1;
    unsigned __int8 v3 = *(_BYTE *)(a2 + 40);
    *(_BYTE *)(a2 + 40) = 1;
    id v4 = a1;
    uint64_t v5 = v2;
    unsigned __int8 v6 = v3;
  }

  else
  {
    uint64_t v5 = *(void **)(a2 + 32);
    *(void *)(a2 + 32) = 0LL;
    unsigned __int8 v7 = *(_BYTE *)(a2 + 40);
    *(_BYTE *)(a2 + 40) = 0;
    unsigned __int8 v6 = v7;
  }

  sub_181CA420C(v5, v6);
}

uint64_t sub_181CA3CA8()
{
  return sub_18264F684();
}

uint64_t sub_181CA3CF8()
{
  return sub_18264EB44();
}

uint64_t sub_181CA3D10()
{
  return sub_18264F684();
}

uint64_t sub_181CA3D5C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_18264F390();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_181CA3DAC(void *a1@<X8>)
{
  *a1 = 0x4C5255656C6966LL;
  a1[1] = 0xE700000000000000LL;
}

uint64_t sub_181CA3DC8()
{
  return 0x4C5255656C6966LL;
}

uint64_t sub_181CA3DE0@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_18264F390();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_181CA3E34()
{
  return sub_18264F738();
}

uint64_t sub_181CA3E5C()
{
  return sub_18264F744();
}

uint64_t NWFile1.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7Network7NWFile1_fileURL;
  uint64_t v2 = sub_18264E568();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  return v0;
}

uint64_t NWFile1.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7Network7NWFile1_fileURL;
  uint64_t v2 = sub_18264E568();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t *sub_181CA3F50@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = swift_allocObject();
  uint64_t result = NWFile1.init(from:)(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_181CA3FA4(void *a1)
{
  return NWFile1.encode(to:)(a1);
}

uint64_t sub_181CA3FC4()
{
  return 0x28656C6946574ELL;
}

BOOL static NWFile1.TransferPhase.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t NWFile1.TransferPhase.hash(into:)()
{
  return sub_18264F654();
}

uint64_t NWFile1.TransferPhase.hashValue.getter()
{
  return sub_18264F684();
}

uint64_t sub_181CA40E4()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58ECE8);
  MEMORY[0x1895F8858](v0);
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_18264F30C();
  __swift_allocate_value_buffer(v3, qword_18C5A4A48);
  uint64_t v4 = __swift_project_value_buffer(v3, (uint64_t)qword_18C5A4A48);
  sub_18264F300();
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v2, 1LL, v3);
  if ((_DWORD)result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v4, v2, v3);
  }
  __break(1u);
  return result;
}

id sub_181CA41C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 32);
  *(void *)a1 = v2;
  unsigned __int8 v3 = *(_BYTE *)(v1 + 40);
  *(_BYTE *)(a1 + 8) = v3;
  return sub_181CA4BD0(v2, v3);
}

uint64_t type metadata accessor for NWFileSerializationContext(uint64_t a1)
{
  return sub_181BD62C8(a1, qword_18C58EC88);
}

void sub_181CA420C(void *a1, unsigned __int8 a2)
{
  if (a2 != 255) {
    sub_181CA4224(a1, a2 & 1);
  }
}

void sub_181CA4224(id a1, char a2)
{
  if ((a2 & 1) != 0) {
}
  }

uint64_t sub_181CA4230(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWFileSerializationContext(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_181CA4274()
{
  unint64_t result = qword_18C58EC00;
  if (!qword_18C58EC00)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182664B48, &type metadata for NWFile1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EC00);
  }

  return result;
}

uint64_t sub_181CA42B8(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = sub_18264E568();
    uint64_t result = MEMORY[0x186E12084](a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_181CA42FC()
{
  unint64_t result = qword_18C58EC28;
  if (!qword_18C58EC28)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWFile1.TransferPhase,  &type metadata for NWFile1.TransferPhase);
    atomic_store(result, (unint64_t *)&qword_18C58EC28);
  }

  return result;
}

uint64_t sub_181CA4340()
{
  return type metadata accessor for NWFile1(0LL);
}

uint64_t type metadata accessor for NWFile1(uint64_t a1)
{
  return sub_181BD62C8(a1, (uint64_t *)&unk_18C58A1A8);
}

uint64_t sub_181CA435C()
{
  uint64_t result = sub_18264E568();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t method lookup function for NWFile1()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWFile1.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of NWFile1.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

ValueMetadata *type metadata accessor for NWFile1.TransferState()
{
  return &type metadata for NWFile1.TransferState;
}

uint64_t _s7Network7NWFile1C13TransferPhaseOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_181CA447C + 4 * byte_182664865[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181CA44B0 + 4 * byte_182664860[v4]))();
}

uint64_t sub_181CA44B0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181CA44B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181CA44C0LL);
  }
  return result;
}

uint64_t sub_181CA44CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181CA44D4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_181CA44D8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181CA44E0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWFile1.TransferPhase()
{
  return &type metadata for NWFile1.TransferPhase;
}

uint64_t dispatch thunk of NWFileTransferDelegate.receivingDestinationDirectory.getter( uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t storeEnumTagSinglePayload for NWFile1.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_181CA4544 + 4 * byte_18266486A[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_181CA4564 + 4 * byte_18266486F[v4]))();
  }
}

_BYTE *sub_181CA4544(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_181CA4564(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_181CA456C(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_181CA4574(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_181CA457C(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_181CA4584(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NWFile1.CodingKeys()
{
  return &type metadata for NWFile1.CodingKeys;
}

void *sub_181CA45A0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v18 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (void *)((char *)v4 + v8);
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = *(uint64_t *)((char *)a2 + v8);
    uint64_t v12 = *(void *)(v10 + 8);
    void *v9 = v11;
    v9[1] = v12;
    uint64_t v13 = *(int *)(type metadata accessor for NWActorID() + 20);
    unint64_t v14 = (char *)v9 + v13;
    uint64_t v15 = v10 + v13;
    uint64_t v16 = sub_18264E688();
    int v17 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16LL);
    swift_bridgeObjectRetain();
    v17(v14, v15, v16);
  }

  return v4;
}

uint64_t sub_181CA4678(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  uint64_t v5 = v4 + *(int *)(type metadata accessor for NWActorID() + 20);
  uint64_t v6 = sub_18264E688();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
}

uint64_t sub_181CA46D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a2 + v7 + 8);
  *uint64_t v8 = *(void *)(a2 + v7);
  v8[1] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for NWActorID() + 20);
  uint64_t v12 = (char *)v8 + v11;
  uint64_t v13 = v9 + v11;
  uint64_t v14 = sub_18264E688();
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL);
  swift_bridgeObjectRetain();
  v15(v12, v13, v14);
  return a1;
}

uint64_t *sub_181CA4778(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (uint64_t *)((char *)a1 + v6);
  uint64_t v8 = (uint64_t *)((char *)a2 + v6);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(type metadata accessor for NWActorID() + 20);
  uint64_t v10 = (char *)v7 + v9;
  uint64_t v11 = (char *)v8 + v9;
  uint64_t v12 = sub_18264E688();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24LL))(v10, v11, v12);
  return a1;
}

uint64_t sub_181CA480C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  *(_OWORD *)(a1 + v5) = *(_OWORD *)(a2 + v5);
  uint64_t v8 = *(int *)(type metadata accessor for NWActorID() + 20);
  uint64_t v9 = v6 + v8;
  uint64_t v10 = v7 + v8;
  uint64_t v11 = sub_18264E688();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))(v9, v10, v11);
  return a1;
}

uint64_t sub_181CA488C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(int *)(type metadata accessor for NWActorID() + 20);
  uint64_t v12 = (char *)v8 + v11;
  uint64_t v13 = (char *)v9 + v11;
  uint64_t v14 = sub_18264E688();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40LL))(v12, v13, v14);
  return a1;
}

uint64_t sub_181CA4920()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181CA492C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for NWActorID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 20),  a2,  v8);
  }

uint64_t sub_181CA49A8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181CA49B4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for NWActorID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 20),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_181CA4A28()
{
  uint64_t result = type metadata accessor for NWActorID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

unint64_t sub_181CA4AA0()
{
  unint64_t result = qword_18C58ECC0;
  if (!qword_18C58ECC0)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182664B20, &type metadata for NWFile1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58ECC0);
  }

  return result;
}

unint64_t sub_181CA4AE8()
{
  unint64_t result = qword_18C58ECC8;
  if (!qword_18C58ECC8)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182664A58, &type metadata for NWFile1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58ECC8);
  }

  return result;
}

unint64_t sub_181CA4B30()
{
  unint64_t result = qword_18C58ECD0;
  if (!qword_18C58ECD0)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182664A80, &type metadata for NWFile1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58ECD0);
  }

  return result;
}

void sub_181CA4B74()
{
}

uint64_t sub_181CA4B8C@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 24);
  return swift_bridgeObjectRetain();
}

id sub_181CA4BD0(id result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_181CA4BE8(result, a2 & 1);
  }
  return result;
}

id sub_181CA4BE8(id result, char a2)
{
  if ((a2 & 1) != 0) {
    return result;
  }
  return result;
}

uint64_t *sub_181CA4BF4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = sub_18264E688();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    sub_181BCD4AC(*v10, v12);
    uint64_t *v9 = v11;
    v9[1] = v12;
    uint64_t v13 = a3[6];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = *((void *)v15 + 3);
    int v17 = v15[32];
    if ((~v16 & 0x3000000000000000LL) != 0 || v17 != 255)
    {
      char v20 = v17 & 1;
      uint64_t v21 = *(void *)v15;
      unint64_t v22 = *((void *)v15 + 1);
      uint64_t v23 = *((void *)v15 + 2);
      sub_181C36CD8(*(void *)v15, v22, v23, *((void *)v15 + 3), v17 & 1);
      *(void *)uint64_t v14 = v21;
      *((void *)v14 + 1) = v22;
      *((void *)v14 + 2) = v23;
      *((void *)v14 + 3) = v16;
      v14[32] = v20;
    }

    else
    {
      __int128 v18 = *((_OWORD *)v15 + 1);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      *((_OWORD *)v14 + 1) = v18;
      v14[32] = v15[32];
    }

    uint64_t v24 = a3[7];
    int v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    *(void *)int v25 = *(void *)v26;
    v25[8] = v26[8];
  }

  return a1;
}

uint64_t sub_181CA4D30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18264E688();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t result = sub_181BCD4F0(*(void *)(a1 + *(int *)(a2 + 20)), *(void *)(a1 + *(int *)(a2 + 20) + 8));
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  unint64_t v7 = *(void *)(v6 + 24);
  int v8 = *(unsigned __int8 *)(v6 + 32);
  if ((~v7 & 0x3000000000000000LL) != 0 || v8 != 255) {
    return sub_181C36D48(*(void *)v6, *(void *)(v6 + 8), *(void *)(v6 + 16), v7, v8 & 1);
  }
  return result;
}

uint64_t sub_181CA4DB8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_18264E688();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  int v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_181BCD4AC(*v9, v11);
  *int v8 = v10;
  v8[1] = v11;
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = *(void *)(v14 + 24);
  int v16 = *(unsigned __int8 *)(v14 + 32);
  if ((~v15 & 0x3000000000000000LL) != 0 || v16 != 255)
  {
    char v18 = v16 & 1;
    uint64_t v19 = *(void *)v14;
    unint64_t v20 = *(void *)(v14 + 8);
    uint64_t v21 = *(void *)(v14 + 16);
    sub_181C36CD8(*(void *)v14, v20, v21, *(void *)(v14 + 24), v16 & 1);
    *(void *)uint64_t v13 = v19;
    *(void *)(v13 + 8) = v20;
    *(void *)(v13 + 16) = v21;
    *(void *)(v13 + 24) = v15;
    *(_BYTE *)(v13 + 32) = v18;
  }

  else
  {
    __int128 v17 = *(_OWORD *)(v14 + 16);
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    *(_OWORD *)(v13 + 16) = v17;
    *(_BYTE *)(v13 + 32) = *(_BYTE *)(v14 + 32);
  }

  uint64_t v22 = a3[7];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(void *)uint64_t v23 = *(void *)v24;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  return a1;
}

uint64_t sub_181CA4EC8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_18264E688();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  int v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_181BCD4AC(*v9, v11);
  uint64_t v12 = *v8;
  unint64_t v13 = v8[1];
  *int v8 = v10;
  v8[1] = v11;
  sub_181BCD4F0(v12, v13);
  uint64_t v14 = a3[6];
  uint64_t v15 = a1 + v14;
  int v16 = (__int128 *)(a2 + v14);
  uint64_t v17 = ~*(void *)(a1 + v14 + 24) & 0x3000000000000000LL;
  unint64_t v18 = *(void *)(a2 + v14 + 24);
  int v19 = *(unsigned __int8 *)(a2 + v14 + 32);
  BOOL v21 = (~v18 & 0x3000000000000000LL) == 0 && v19 == 255;
  if (v17 || *(unsigned __int8 *)(v15 + 32) != 255)
  {
    if (v21)
    {
      sub_181CA5060(v15);
      char v24 = *((_BYTE *)v16 + 32);
      __int128 v25 = v16[1];
      *(_OWORD *)uint64_t v15 = *v16;
      *(_OWORD *)(v15 + 16) = v25;
      *(_BYTE *)(v15 + 32) = v24;
    }

    else
    {
      char v26 = v19 & 1;
      uint64_t v27 = *(void *)v16;
      unint64_t v28 = *((void *)v16 + 1);
      uint64_t v29 = *((void *)v16 + 2);
      sub_181C36CD8(v27, v28, v29, v18, v19 & 1);
      uint64_t v30 = *(void *)v15;
      unint64_t v31 = *(void *)(v15 + 8);
      uint64_t v32 = *(void *)(v15 + 16);
      unint64_t v33 = *(void *)(v15 + 24);
      char v34 = *(_BYTE *)(v15 + 32);
      *(void *)uint64_t v15 = v27;
      *(void *)(v15 + 8) = v28;
      *(void *)(v15 + 16) = v29;
      *(void *)(v15 + 24) = v18;
      *(_BYTE *)(v15 + 32) = v26;
      sub_181C36D48(v30, v31, v32, v33, v34);
    }
  }

  else if (v21)
  {
    __int128 v22 = *v16;
    __int128 v23 = v16[1];
    *(_BYTE *)(v15 + 32) = *((_BYTE *)v16 + 32);
    *(_OWORD *)uint64_t v15 = v22;
    *(_OWORD *)(v15 + 16) = v23;
  }

  else
  {
    char v35 = v19 & 1;
    uint64_t v36 = *(void *)v16;
    unint64_t v37 = *((void *)v16 + 1);
    uint64_t v38 = *((void *)v16 + 2);
    sub_181C36CD8(v36, v37, v38, v18, v19 & 1);
    *(void *)uint64_t v15 = v36;
    *(void *)(v15 + 8) = v37;
    *(void *)(v15 + 16) = v38;
    *(void *)(v15 + 24) = v18;
    *(_BYTE *)(v15 + 32) = v35;
  }

  uint64_t v39 = a3[7];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = (uint64_t *)(a2 + v39);
  uint64_t v42 = *v41;
  *(_BYTE *)(v40 + 8) = *((_BYTE *)v41 + 8);
  *(void *)uint64_t v40 = v42;
  return a1;
}

uint64_t sub_181CA5060(uint64_t a1)
{
  return a1;
}

uint64_t sub_181CA5094(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_18264E688();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_BYTE *)(v8 + 32) = *(_BYTE *)(v9 + 32);
  __int128 v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(void *)uint64_t v12 = *(void *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  return a1;
}

uint64_t sub_181CA5124(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_18264E688();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void *)(a1 + v7);
  unint64_t v9 = *(void *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_181BCD4F0(v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  unint64_t v13 = *(void *)(a1 + v10 + 24);
  int v14 = *(unsigned __int8 *)(a1 + v10 + 32);
  uint64_t v15 = *(void *)(a2 + v10 + 24);
  int v16 = *(unsigned __int8 *)(v12 + 32);
  if ((~v13 & 0x3000000000000000LL) != 0 || v14 != 255)
  {
    if ((~v15 & 0x3000000000000000LL) != 0 || v16 != 255)
    {
      char v18 = v14 & 1;
      uint64_t v19 = *(void *)(v12 + 16);
      uint64_t v20 = *(void *)v11;
      unint64_t v21 = *(void *)(v11 + 8);
      uint64_t v22 = *(void *)(v11 + 16);
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
      *(void *)(v11 + 16) = v19;
      *(void *)(v11 + 24) = v15;
      *(_BYTE *)(v11 + 32) = v16 & 1;
      sub_181C36D48(v20, v21, v22, v13, v18);
      goto LABEL_8;
    }

    sub_181CA5060(v11);
  }

  __int128 v17 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v17;
  *(_BYTE *)(v11 + 32) = *(_BYTE *)(v12 + 32);
LABEL_8:
  uint64_t v23 = a3[7];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  *(void *)uint64_t v24 = *(void *)v25;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  return a1;
}

uint64_t sub_181CA5234()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181CA5240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_18264E688();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unsigned int v9 = ((*(void *)(a1 + *(int *)(a3 + 24) + 24) >> 60) & 3 | (4 * *(unsigned __int8 *)(a1 + *(int *)(a3 + 24) + 32))) ^ 0x3FF;
  if (v9 >= 0x3FB) {
    return 0LL;
  }
  else {
    return v9;
  }
}

uint64_t sub_181CA52C8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181CA52D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_18264E688();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  uint64_t v10 = a1 + *(int *)(a4 + 24);
  *(void *)uint64_t v10 = 0LL;
  *(void *)(v10 + 8) = 0LL;
  *(void *)(v10 + 16) = 0LL;
  *(void *)(v10 + 24) = (~(_DWORD)a2 & 3LL) << 60;
  *(_BYTE *)(v10 + 32) = ~(_DWORD)a2 >> 2;
  return result;
}

uint64_t type metadata accessor for ReplyEnvelope()
{
  uint64_t result = qword_18C58ED48;
  if (!qword_18C58ED48) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_181CA539C()
{
  uint64_t result = sub_18264E688();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t destroy for ReplyEnvelope.Error(uint64_t a1)
{
  return sub_181C36D48( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for ReplyEnvelope.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(_BYTE *)(a2 + 32);
  sub_181C36CD8(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for ReplyEnvelope.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(_BYTE *)(a2 + 32);
  sub_181C36CD8(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(_BYTE *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  sub_181C36D48(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for ReplyEnvelope.Error(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(_BYTE *)(a1 + 32);
  __int128 v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 32) = v3;
  sub_181C36D48(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplyEnvelope.Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x3FC && *(_BYTE *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 1020);
  }
  unsigned int v3 = ((*(void *)(a1 + 24) >> 60) & 3 | (4 * *(unsigned __int8 *)(a1 + 32))) ^ 0x3FF;
  if (v3 >= 0x3FB) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ReplyEnvelope.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3FB)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 1020;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x3FC) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if (a3 >= 0x3FC) {
      *(_BYTE *)(result + 33) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0LL;
      *(void *)(result + 8) = 0LL;
      *(void *)(result + 16) = 0LL;
      *(void *)(result + 24) = (-a2 & 3LL) << 60;
      *(_BYTE *)(result + 32) = -a2 >> 2;
    }
  }

  return result;
}

uint64_t sub_181CA55F8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32)) {
    int v1 = 4;
  }
  else {
    int v1 = 0;
  }
  unsigned int v2 = (*(void *)(a1 + 24) >> 60) & 3 | v1;
  if (v2 <= 3) {
    return v2;
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t sub_181CA5628(uint64_t result)
{
  *(void *)(result + 24) &= 0xCFFFFFFFFFFFFFFFLL;
  return result;
}

uint64_t sub_181CA5638(uint64_t result, uint64_t a2)
{
  if (a2 < 4)
  {
    *(void *)(result + 24) = *(void *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL | (a2 << 60);
  }

  else
  {
    *(void *)uint64_t result = (a2 - 4);
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
  }

  *(_BYTE *)(result + 32) = a2 > 3;
  return result;
}

ValueMetadata *type metadata accessor for ReplyEnvelope.Error()
{
  return &type metadata for ReplyEnvelope.Error;
}

uint64_t sub_181CA567C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X8>)
{
  v117 = a3;
  uint64_t v112 = type metadata accessor for NWActorSystemProtobuf_Reply.Metrics(0LL);
  uint64_t v115 = *(void *)(v112 - 8);
  MEMORY[0x1895F8858](v112);
  v106 = (void *)((char *)v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C6A8);
  uint64_t v7 = MEMORY[0x1895F8858](v6);
  uint64_t v107 = (uint64_t)v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v7);
  uint64_t v111 = (uint64_t)v91 - v9;
  uint64_t v10 = sub_18264EA9C();
  MEMORY[0x1895F8858](v10);
  v105 = (char *)v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v116 = type metadata accessor for NWActorSystemProtobuf_Reply.Error(0LL);
  uint64_t v114 = *(void *)(v116 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v116);
  v104 = (char *)v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  v103 = (char *)v91 - v15;
  uint64_t v16 = MEMORY[0x1895F8858](v14);
  v96 = (char *)v91 - v17;
  uint64_t v18 = MEMORY[0x1895F8858](v16);
  v102 = (char *)v91 - v19;
  uint64_t v20 = MEMORY[0x1895F8858](v18);
  v101 = (char *)v91 - v21;
  MEMORY[0x1895F8858](v20);
  v108 = (void *)((char *)v91 - v22);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C6B0);
  uint64_t v24 = MEMORY[0x1895F8858](v23);
  v100 = (char *)v91 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = MEMORY[0x1895F8858](v24);
  v99 = (char *)v91 - v27;
  uint64_t v28 = MEMORY[0x1895F8858](v26);
  v109 = (char *)v91 - v29;
  uint64_t v30 = MEMORY[0x1895F8858](v28);
  v98 = (char *)v91 - v31;
  uint64_t v32 = MEMORY[0x1895F8858](v30);
  v97 = (char *)v91 - v33;
  uint64_t v34 = MEMORY[0x1895F8858](v32);
  uint64_t v110 = (uint64_t)v91 - v35;
  MEMORY[0x1895F8858](v34);
  uint64_t v113 = (uint64_t)v91 - v36;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C0D0);
  uint64_t v38 = MEMORY[0x1895F8858](v37);
  uint64_t v40 = (char *)v91 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v38);
  v118 = (char *)v91 - v41;
  uint64_t v42 = sub_18264E688();
  uint64_t v43 = *(void *)(v42 - 8);
  MEMORY[0x1895F8858](v42);
  uint64_t v45 = (char *)v91 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = type metadata accessor for NWActorSystemProtobuf_Reply(0LL);
  MEMORY[0x1895F8858](v46);
  uint64_t v48 = (char *)v91 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v122 = a1;
  unint64_t v123 = a2;
  uint64_t v49 = sub_18264E730();
  __int128 v119 = 0u;
  __int128 v120 = 0u;
  uint64_t v121 = 0LL;
  MEMORY[0x1895F8858](v49);
  sub_181BCD4AC(a1, a2);
  sub_18264E724();
  sub_181BD67D4(&qword_18C58C610, type metadata accessor for NWActorSystemProtobuf_Reply, (uint64_t)&unk_18265E9C0);
  unint64_t v50 = v124;
  sub_18264E7E4();
  if (v50) {
    return sub_181BCD4F0(a1, a2);
  }
  v93 = v45;
  uint64_t v94 = v46;
  uint64_t v95 = a1;
  unint64_t v124 = a2;
  swift_bridgeObjectRetain();
  uint64_t v52 = (uint64_t)v118;
  sub_18264E640();
  swift_bridgeObjectRelease();
  sub_181BE48BC(v52, (uint64_t)v40, &qword_18C58C0D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v40, 1LL, v42) == 1)
  {
    sub_181BDA0F0((uint64_t)v40, &qword_18C58C0D0);
    sub_181C54028();
    swift_allocError();
    strcpy(v53, "Missing callID");
    v53[15] = -18;
    swift_willThrow();
    sub_181BCD4F0(v95, v124);
    sub_181BDA0F0(v52, &qword_18C58C0D0);
    return sub_181BC920C((uint64_t)v48, type metadata accessor for NWActorSystemProtobuf_Reply);
  }

  else
  {
    v91[4] = 0LL;
    v91[2] = v43;
    __int128 v54 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
    uint64_t v55 = (uint64_t)v93;
    v54(v93, v40, v42);
    sub_181BDA0F0(v52, &qword_18C58C0D0);
    v56 = v117;
    v91[3] = v42;
    v54(v117, (char *)v55, v42);
    uint64_t v57 = *((void *)v48 + 2);
    unint64_t v58 = *((void *)v48 + 3);
    uint64_t v59 = type metadata accessor for ReplyEnvelope();
    v60 = (uint64_t *)&v56[*(int *)(v59 + 20)];
    uint64_t *v60 = v57;
    v60[1] = v58;
    v91[1] = v60;
    uint64_t v61 = v94;
    uint64_t v62 = *(int *)(v94 + 28);
    v92 = v48;
    v93 = &v48[v62];
    uint64_t v63 = v113;
    sub_181BE48BC((uint64_t)&v48[v62], v113, &qword_18C58C6B0);
    v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v114 + 48);
    uint64_t v65 = v116;
    int v66 = v64(v63, 1LL, v116);
    sub_181BCD4AC(v57, v58);
    sub_181BDA0F0(v63, &qword_18C58C6B0);
    v118 = (char *)v59;
    if (v66 == 1)
    {
      v67 = &v56[*(int *)(v59 + 24)];
      *(void *)v67 = 0LL;
      *((void *)v67 + 1) = 0LL;
      *((void *)v67 + 2) = 0LL;
      *((void *)v67 + 3) = 0x3000000000000000LL;
      v67[32] = -1;
      v68 = v56;
      unint64_t v69 = v124;
      uint64_t v70 = (uint64_t)v92;
      uint64_t v71 = v112;
      uint64_t v72 = v115;
    }

    else
    {
      uint64_t v73 = v110;
      sub_181BE48BC((uint64_t)v93, v110, &qword_18C58C6B0);
      int v74 = v64(v73, 1LL, v65);
      uint64_t v72 = v115;
      v75 = v108;
      if (v74 == 1)
      {
        void *v108 = 0LL;
        *((_BYTE *)v75 + 8) = 1;
        v75[2] = MEMORY[0x18961AFE8];
        sub_18264E70C();
        sub_181BDA0F0(v73, &qword_18C58C6B0);
      }

      else
      {
        sub_181BC928C(v73, (uint64_t)v108, type metadata accessor for NWActorSystemProtobuf_Reply.Error);
      }

      uint64_t v70 = (uint64_t)v92;
      uint64_t v76 = *v75;
      int v77 = *((unsigned __int8 *)v75 + 8);
      sub_181BC920C((uint64_t)v75, type metadata accessor for NWActorSystemProtobuf_Reply.Error);
      if (v77 == 1) {
        __asm { BR              X9 }
      }

      *(void *)&__int128 v119 = 0LL;
      *((void *)&v119 + 1) = 0xE000000000000000LL;
      sub_18264F168();
      swift_bridgeObjectRelease();
      *(void *)&__int128 v119 = 0xD00000000000001BLL;
      *((void *)&v119 + 1) = 0x80000001827317A0LL;
      uint64_t v122 = v76;
      sub_18264F480();
      sub_18264EB74();
      swift_bridgeObjectRelease();
      uint64_t v78 = *((void *)&v119 + 1);
      v68 = v117;
      v79 = &v117[*((int *)v118 + 6)];
      *(void *)v79 = v119;
      *((void *)v79 + 1) = v78;
      *((void *)v79 + 2) = 0LL;
      *((void *)v79 + 3) = 0LL;
      v79[32] = 0;
      unint64_t v69 = v124;
      uint64_t v71 = v112;
      uint64_t v61 = v94;
    }

    uint64_t v80 = v70 + *(int *)(v61 + 32);
    uint64_t v81 = v70;
    uint64_t v82 = v111;
    sub_181BE48BC(v80, v111, &qword_18C58C6A8);
    v83 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
    int v84 = v83(v82, 1LL, v71);
    sub_181BDA0F0(v82, &qword_18C58C6A8);
    if (v84 == 1)
    {
      sub_181BCD4F0(v95, v69);
      uint64_t result = sub_181BC920C(v81, type metadata accessor for NWActorSystemProtobuf_Reply);
      uint64_t v85 = 0LL;
      v86 = v118;
    }

    else
    {
      uint64_t v87 = v80;
      uint64_t v88 = v107;
      sub_181BE48BC(v87, v107, &qword_18C58C6A8);
      if (v83(v88, 1LL, v71) == 1)
      {
        v89 = v106;
        uint64_t *v106 = 0LL;
        sub_18264E70C();
        sub_181BDA0F0(v88, &qword_18C58C6A8);
      }

      else
      {
        v89 = v106;
        sub_181BC928C(v88, (uint64_t)v106, type metadata accessor for NWActorSystemProtobuf_Reply.Metrics);
      }

      v86 = v118;
      sub_181BCD4F0(v95, v69);
      sub_181BC920C(v81, type metadata accessor for NWActorSystemProtobuf_Reply);
      uint64_t v85 = *v89;
      uint64_t result = sub_181BC920C((uint64_t)v89, type metadata accessor for NWActorSystemProtobuf_Reply.Metrics);
    }

    v90 = &v68[*((int *)v86 + 7)];
    *(void *)v90 = v85;
    v90[8] = v84 == 1;
  }

  return result;
}

uint64_t sub_181CA682C()
{
  uint64_t v37 = sub_18264EA9C();
  v36[3] = *(void *)(v37 - 8);
  MEMORY[0x1895F8858](v37);
  v36[2] = (char *)v36 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = type metadata accessor for NWActorSystemProtobuf_Reply.Error(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1895F8858](v2);
  uint64_t v41 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v45 = (char *)v36 - v6;
  uint64_t v7 = type metadata accessor for NWActorSystemProtobuf_Reply.Metrics(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  uint64_t v38 = (uint64_t)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (void *)((char *)v36 - v11);
  uint64_t v13 = type metadata accessor for NWActorSystemProtobuf_Reply(0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (void *)((char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_18264E70C();
  uint64_t v16 = *(void (**)(void))(v3 + 56);
  uint64_t v39 = (char *)v15 + *(int *)(v13 + 28);
  uint64_t v44 = v2;
  uint64_t v40 = v16;
  v16();
  uint64_t v42 = v13;
  uint64_t v17 = (uint64_t)v15 + *(int *)(v13 + 32);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v18(v17, 1LL, 1LL, v7);
  *uint64_t v15 = sub_18264E64C();
  v15[1] = v19;
  uint64_t v20 = (int *)type metadata accessor for ReplyEnvelope();
  uint64_t v21 = (uint64_t *)(v0 + v20[5]);
  uint64_t v22 = *v21;
  unint64_t v23 = v21[1];
  v15[2] = *v21;
  v15[3] = v23;
  uint64_t v43 = v15;
  uint64_t v24 = (uint64_t *)(v0 + v20[7]);
  if ((v24[1] & 1) != 0)
  {
    sub_181BCD4AC(v22, v23);
  }

  else
  {
    uint64_t v25 = *v24;
    sub_181BCD4AC(v22, v23);
    sub_18264E70C();
    *uint64_t v12 = v25;
    uint64_t v26 = v38;
    sub_181BC9248((uint64_t)v12, v38, type metadata accessor for NWActorSystemProtobuf_Reply.Metrics);
    sub_181BDA0F0(v17, &qword_18C58C6A8);
    sub_181BC928C(v26, v17, type metadata accessor for NWActorSystemProtobuf_Reply.Metrics);
    v18(v17, 0LL, 1LL, v7);
    sub_181BC920C((uint64_t)v12, type metadata accessor for NWActorSystemProtobuf_Reply.Metrics);
  }

  uint64_t v27 = v0 + v20[6];
  uint64_t v28 = *(void *)v27;
  unint64_t v29 = *(void *)(v27 + 8);
  uint64_t v31 = *(void *)(v27 + 16);
  unint64_t v30 = *(void *)(v27 + 24);
  int v32 = *(unsigned __int8 *)(v27 + 32);
  if ((~v30 & 0x3000000000000000LL) != 0 || v32 != 255)
  {
    *((void *)v45 + 2) = MEMORY[0x18961AFE8];
    sub_181C36CD8(v28, v29, v31, v30, v32 & 1);
    sub_18264E70C();
    __asm { BR              X10 }
  }

  sub_181BD67D4(&qword_18C58C610, type metadata accessor for NWActorSystemProtobuf_Reply, (uint64_t)&unk_18265E9C0);
  uint64_t v33 = (uint64_t)v43;
  uint64_t v34 = sub_18264E7D8();
  sub_181BC920C(v33, type metadata accessor for NWActorSystemProtobuf_Reply);
  return v34;
}

void sub_181CA704C(void *a1)
{
  uint64_t v2 = v1;
  sub_181CA8F38(v2, (uint64_t)v31);
  uint64_t v18 = v31[0];
  uint64_t v17 = v31[1];
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EE20);
  uint64_t v23 = *(void *)(v26 - 8);
  MEMORY[0x1895F8858](v26);
  uint64_t v21 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EE28);
  uint64_t v20 = *(void *)(v25 - 8);
  MEMORY[0x1895F8858](v25);
  uint64_t v19 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EE30);
  uint64_t v24 = *(void *)(v27 - 8);
  MEMORY[0x1895F8858](v27);
  uint64_t v22 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EE38);
  uint64_t v15 = *(void *)(v16 - 8);
  MEMORY[0x1895F8858](v16);
  uint64_t v14 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EE40);
  v12[1] = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EE48);
  MEMORY[0x1895F8858](v8);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EE50);
  uint64_t v28 = *(void *)(v30 - 8);
  MEMORY[0x1895F8858](v30);
  uint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_181CA8F50();
  unint64_t v29 = v10;
  sub_18264F714();
  sub_181CA8F38(v2, (uint64_t)v32);
  if (v33) {
    int v11 = 4;
  }
  else {
    int v11 = 0;
  }
  __asm { BR              X11 }

uint64_t sub_181CA730C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 104) = a1 & 0xCFFFFFFFFFFFFFFFLL;
  *(_BYTE *)(v1 - 184) = 2;
  sub_181CA9060();
  uint64_t v2 = *(void *)(v1 - 328);
  uint64_t v4 = *(void *)(v1 - 208);
  uint64_t v3 = *(void *)(v1 - 200);
  sub_18264F420();
  uint64_t v5 = *(void *)(v1 - 312);
  sub_18264F444();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 320) + 8LL))(v2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 216) + 8LL))(v4, v3);
}

uint64_t sub_181CA76EC()
{
  return 0LL;
}

uint64_t sub_181CA76F8()
{
  return sub_18264F738();
}

uint64_t sub_181CA7720()
{
  return sub_18264F744();
}

uint64_t sub_181CA7750()
{
  return 12383LL;
}

uint64_t sub_181CA7760()
{
  return sub_18264F738();
}

uint64_t sub_181CA7788()
{
  return sub_18264F744();
}

uint64_t sub_181CA77B0()
{
  if (*v0) {
    return 0x566465646F636E65LL;
  }
  else {
    return 0x4E64656C676E616DLL;
  }
}

uint64_t sub_181CA77FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_181CA9A6C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_181CA7820()
{
  return sub_18264F738();
}

uint64_t sub_181CA7848()
{
  return sub_18264F744();
}

uint64_t sub_181CA7870()
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_181CA78A4 + 4 * byte_182664BA2[*v0]))( 0xD000000000000015LL,  0x8000000182731880LL);
}

uint64_t sub_181CA78A4()
{
  return 0x6F5464656C696166LL;
}

uint64_t sub_181CA78C8()
{
  return 0x69796C7265646E75LL;
}

uint64_t sub_181CA78E4()
{
  return 0x43656C6261646F63LL;
}

uint64_t sub_181CA7908()
{
  return 0x726F727245736ELL;
}

uint64_t sub_181CA7920()
{
  return 0x746E65696C63LL;
}

uint64_t sub_181CA7934@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_181CA9B8C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_181CA7958()
{
  return sub_18264F738();
}

uint64_t sub_181CA7980()
{
  return sub_18264F744();
}

uint64_t sub_181CA79A8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_181CA79D4()
{
  return sub_18264F738();
}

uint64_t sub_181CA79FC()
{
  return sub_18264F744();
}

uint64_t sub_181CA7A24()
{
  return 0x6465766968637261LL;
}

uint64_t sub_181CA7A44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x6465766968637261LL && a2 == 0xEC00000061746144LL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }

  else
  {
    char v5 = sub_18264F4EC();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }

  *a3 = v7 & 1;
  return result;
}

uint64_t sub_181CA7AF0()
{
  return sub_18264F738();
}

uint64_t sub_181CA7B18()
{
  return sub_18264F744();
}

uint64_t sub_181CA7B40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }

  else
  {
    char v5 = sub_18264F4EC();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }

  *a3 = v7 & 1;
  return result;
}

uint64_t sub_181CA7BBC()
{
  return sub_18264F738();
}

uint64_t sub_181CA7BE4()
{
  return sub_18264F744();
}

uint64_t sub_181CA7C0C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_181CA86AC(a1, (uint64_t)v5);
  if (!v2) {
    return sub_181CA8F38(v5, a2);
  }
  return result;
}

void sub_181CA7C50(void *a1)
{
}

uint64_t sub_181CA7C9C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EDA0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_181CA85E0();
  sub_18264F714();
  LOBYTE(v16[0]) = 0;
  sub_18264E688();
  sub_181BD67D4(&qword_18C58D9D8, (uint64_t (*)(uint64_t))MEMORY[0x189606F20], MEMORY[0x189606F38]);
  sub_18264F45C();
  if (!v2)
  {
    uint64_t v9 = (int *)type metadata accessor for ReplyEnvelope();
    v16[0] = *(_OWORD *)(v3 + v9[5]);
    char v18 = 1;
    sub_181C0B554();
    sub_18264F45C();
    uint64_t v10 = v3 + v9[6];
    char v11 = *(_BYTE *)(v10 + 32);
    __int128 v12 = *(_OWORD *)(v10 + 16);
    v16[0] = *(_OWORD *)v10;
    v16[1] = v12;
    char v17 = v11;
    char v18 = 2;
    sub_181CA8668();
    sub_18264F438();
    uint64_t v13 = (uint64_t *)(v3 + v9[7]);
    uint64_t v14 = *v13;
    LOBYTE(v13) = *((_BYTE *)v13 + 8);
    *(void *)&v16[0] = v14;
    BYTE8(v16[0]) = (_BYTE)v13;
    char v18 = 3;
    sub_181C275B8();
    sub_18264F438();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_181CA7EA8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v24 = sub_18264E688();
  uint64_t v3 = *(void *)(v24 - 8);
  MEMORY[0x1895F8858](v24);
  uint64_t v25 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58ED88);
  uint64_t v5 = *(void *)(v26 - 8);
  MEMORY[0x1895F8858](v26);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = (int *)type metadata accessor for ReplyEnvelope();
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_181CA85E0();
  uint64_t v27 = v7;
  uint64_t v11 = (uint64_t)v28;
  sub_18264F6E4();
  if (v11) {
    return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  }
  uint64_t v12 = v5;
  uint64_t v28 = a1;
  uint64_t v13 = (uint64_t)v10;
  LOBYTE(v29) = 0;
  sub_181BD67D4(&qword_18C58D9E8, (uint64_t (*)(uint64_t))MEMORY[0x189606F20], MEMORY[0x189606F60]);
  uint64_t v14 = v24;
  uint64_t v15 = v25;
  uint64_t v16 = v26;
  sub_18264F3F0();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v13, v15, v14);
  char v32 = 1;
  sub_181C0B82C();
  sub_18264F3F0();
  *(_OWORD *)(v13 + v8[5]) = v29;
  char v32 = 2;
  sub_181CA8624();
  sub_18264F3C0();
  char v17 = v31;
  uint64_t v18 = v13 + v8[6];
  __int128 v19 = v30;
  *(_OWORD *)uint64_t v18 = v29;
  *(_OWORD *)(v18 + 16) = v19;
  *(_BYTE *)(v18 + 32) = v17;
  char v32 = 3;
  sub_181C27574();
  sub_18264F3C0();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v27, v16);
  char v20 = BYTE8(v29);
  uint64_t v21 = v13 + v8[7];
  *(void *)uint64_t v21 = v29;
  *(_BYTE *)(v21 + 8) = v20;
  sub_181BC9248(v13, v23, (uint64_t (*)(void))type metadata accessor for ReplyEnvelope);
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v28);
  return sub_181BC920C(v13, (uint64_t (*)(void))type metadata accessor for ReplyEnvelope);
}

unint64_t sub_181CA8240()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_181CA825C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_181CA9E54(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_181CA8284()
{
  return sub_18264F738();
}

uint64_t sub_181CA82AC()
{
  return sub_18264F744();
}

uint64_t sub_181CA82D4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EF18);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_181CA9A28();
  sub_18264F6E4();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  }
  uint64_t v9 = sub_18264F3FC();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  *a2 = v9;
  return result;
}

uint64_t sub_181CA83E4(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EF28);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_181CA9A28();
  sub_18264F714();
  sub_18264F468();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_181CA84CC()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181CA84F8 + 4 * byte_182664BA8[*v0]))( 0x44496C6C6163LL,  0xE600000000000000LL);
}

uint64_t sub_181CA84F8()
{
  return 0x65756C6176LL;
}

uint64_t sub_181CA850C()
{
  return 0x726F727265LL;
}

uint64_t sub_181CA8520()
{
  return 0x7363697274656DLL;
}

uint64_t sub_181CA8538@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_181CA9ED8(a1, a2);
  *a3 = result;
  return result;
}

void sub_181CA855C(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_181CA8568()
{
  return sub_18264F738();
}

uint64_t sub_181CA8590()
{
  return sub_18264F744();
}

uint64_t sub_181CA85B8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_181CA7EA8(a1, a2);
}

uint64_t sub_181CA85CC(void *a1)
{
  return sub_181CA7C9C(a1);
}

unint64_t sub_181CA85E0()
{
  unint64_t result = qword_18C58ED90;
  if (!qword_18C58ED90)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_1826654EC, &type metadata for ReplyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58ED90);
  }

  return result;
}

unint64_t sub_181CA8624()
{
  unint64_t result = qword_18C58ED98;
  if (!qword_18C58ED98)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182664C78, &type metadata for ReplyEnvelope.Error);
    atomic_store(result, (unint64_t *)&qword_18C58ED98);
  }

  return result;
}

unint64_t sub_181CA8668()
{
  unint64_t result = qword_18C58EDA8;
  if (!qword_18C58EDA8)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182664C50, &type metadata for ReplyEnvelope.Error);
    atomic_store(result, (unint64_t *)&qword_18C58EDA8);
  }

  return result;
}

uint64_t sub_181CA86AC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EDB0);
  uint64_t v34 = *(void *)(v27 - 8);
  MEMORY[0x1895F8858](v27);
  uint64_t v42 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EDB8);
  uint64_t v32 = *(void *)(v4 - 8);
  uint64_t v33 = v4;
  MEMORY[0x1895F8858](v4);
  uint64_t v37 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EDC0);
  uint64_t v35 = *(void *)(v31 - 8);
  MEMORY[0x1895F8858](v31);
  uint64_t v41 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EDC8);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v29 = v7;
  uint64_t v30 = v8;
  MEMORY[0x1895F8858](v7);
  uint64_t v40 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EDD0);
  uint64_t v39 = *(void *)(v28 - 8);
  MEMORY[0x1895F8858](v28);
  uint64_t v36 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EDD8);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EDE0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = a1[3];
  uint64_t v43 = a1;
  __swift_project_boxed_opaque_existential_2(a1, v19);
  sub_181CA8F50();
  uint64_t v20 = v44;
  sub_18264F6E4();
  if (!v20)
  {
    v26[4] = v14;
    v26[2] = v12;
    v26[3] = v11;
    uint64_t v44 = v16;
    uint64_t v21 = sub_18264F408();
    if (*(void *)(v21 + 16) == 1LL) {
      __asm { BR              X10 }
    }

    uint64_t v22 = sub_18264F204();
    swift_allocError();
    uint64_t v24 = v23;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D6F8);
    *uint64_t v24 = &type metadata for ReplyEnvelope.Error;
    sub_18264F3A8();
    sub_18264F1F8();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v22 - 8) + 104LL))( v24,  *MEMORY[0x189619358],  v22);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v18, v15);
  }

  return __swift_destroy_boxed_opaque_existential_2((uint64_t)v43);
}

void sub_181CA8AB4()
{
  *(_BYTE *)(v4 - 104) = 1;
  sub_181CA90A4();
  uint64_t v5 = *(void *)(v4 - 176);
  sub_18264F39C();
  if (!v0)
  {
    *(void *)(v4 - 280) = 0LL;
    (*(void (**)(uint64_t, void))(v2 + 8))(v5, *(void *)(v4 - 240));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 112) + 8LL))(v1, v3);
    JUMPOUT(0x181CA8B38LL);
  }

  JUMPOUT(0x181CA8A6CLL);
}

void sub_181CA8B60()
{
  *(_BYTE *)(v4 - 104) = 2;
  sub_181CA9060();
  uint64_t v5 = v2;
  sub_18264F39C();
  if (v0)
  {
    swift_bridgeObjectRelease();
    JUMPOUT(0x181CA8A80LL);
  }

  uint64_t v6 = *(void *)(v4 - 232);
  sub_18264F3D8();
  *(void *)(v4 - 280) = 0LL;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 224) + 8LL))(v1, v6);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 112) + 8LL))(v5, v3);
  JUMPOUT(0x181CA8B3CLL);
}

uint64_t sub_181CA8F38(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(_BYTE *)(a2 + 32) = *((_BYTE *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

unint64_t sub_181CA8F50()
{
  unint64_t result = qword_18C58EDE8;
  if (!qword_18C58EDE8)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18266549C, &type metadata for ReplyEnvelope.Error.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EDE8);
  }

  return result;
}

unint64_t sub_181CA8F94()
{
  unint64_t result = qword_18C58EDF0;
  if (!qword_18C58EDF0)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18266544C, &type metadata for ReplyEnvelope.Error.ClientCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EDF0);
  }

  return result;
}

unint64_t sub_181CA8FD8()
{
  unint64_t result = qword_18C58EDF8;
  if (!qword_18C58EDF8)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_1826653FC, &type metadata for ReplyEnvelope.Error.NsErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EDF8);
  }

  return result;
}

unint64_t sub_181CA901C()
{
  unint64_t result = qword_18C58EE00;
  if (!qword_18C58EE00)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_1826653AC, &type metadata for ReplyEnvelope.Error.CodableClientCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EE00);
  }

  return result;
}

unint64_t sub_181CA9060()
{
  unint64_t result = qword_18C58EE08;
  if (!qword_18C58EE08)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18266535C, &type metadata for ReplyEnvelope.Error.UnderlyingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EE08);
  }

  return result;
}

unint64_t sub_181CA90A4()
{
  unint64_t result = qword_18C58EE10;
  if (!qword_18C58EE10)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18266530C, &type metadata for ReplyEnvelope.Error.FailedToExecuteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EE10);
  }

  return result;
}

unint64_t sub_181CA90E8()
{
  unint64_t result = qword_18C58EE18;
  if (!qword_18C58EE18)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_1826652BC, &type metadata for ReplyEnvelope.Error.ActorResolutionFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EE18);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for ReplyEnvelope.Error.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_181CA9178 + 4 * byte_182664BB7[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_181CA91AC + 4 * byte_182664BB2[v4]))();
}

uint64_t sub_181CA91AC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181CA91B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181CA91BCLL);
  }
  return result;
}

uint64_t sub_181CA91C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181CA91D0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_181CA91D4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181CA91DC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReplyEnvelope.Error.CodingKeys()
{
  return &type metadata for ReplyEnvelope.Error.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplyEnvelope.Error.ActorResolutionFailedCodingKeys()
{
  return &type metadata for ReplyEnvelope.Error.ActorResolutionFailedCodingKeys;
}

ValueMetadata *type metadata accessor for ReplyEnvelope.Error.FailedToExecuteCodingKeys()
{
  return &type metadata for ReplyEnvelope.Error.FailedToExecuteCodingKeys;
}

ValueMetadata *type metadata accessor for ReplyEnvelope.Error.UnderlyingCodingKeys()
{
  return &type metadata for ReplyEnvelope.Error.UnderlyingCodingKeys;
}

uint64_t storeEnumTagSinglePayload for ReplyEnvelope.Error.CodableClientCodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_181CA927C + 4 * byte_182664BC1[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181CA92B0 + 4 * byte_182664BBC[v4]))();
}

uint64_t sub_181CA92B0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181CA92B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181CA92C0LL);
  }
  return result;
}

uint64_t sub_181CA92CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181CA92D4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_181CA92D8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181CA92E0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReplyEnvelope.Error.CodableClientCodingKeys()
{
  return &type metadata for ReplyEnvelope.Error.CodableClientCodingKeys;
}

ValueMetadata *type metadata accessor for ReplyEnvelope.Error.NsErrorCodingKeys()
{
  return &type metadata for ReplyEnvelope.Error.NsErrorCodingKeys;
}

ValueMetadata *type metadata accessor for ReplyEnvelope.Error.ClientCodingKeys()
{
  return &type metadata for ReplyEnvelope.Error.ClientCodingKeys;
}

uint64_t storeEnumTagSinglePayload for ReplyEnvelope.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_181CA9368 + 4 * byte_182664BCB[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_181CA939C + 4 * byte_182664BC6[v4]))();
}

uint64_t sub_181CA939C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181CA93A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181CA93ACLL);
  }
  return result;
}

uint64_t sub_181CA93B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181CA93C0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_181CA93C4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181CA93CC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReplyEnvelope.CodingKeys()
{
  return &type metadata for ReplyEnvelope.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplyEnvelope.Metrics()
{
  return &type metadata for ReplyEnvelope.Metrics;
}

unint64_t sub_181CA93FC()
{
  unint64_t result = qword_18C58EE68;
  if (!qword_18C58EE68)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182664E5C, &type metadata for ReplyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EE68);
  }

  return result;
}

unint64_t sub_181CA9444()
{
  unint64_t result = qword_18C58EE70;
  if (!qword_18C58EE70)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182664F14, &type metadata for ReplyEnvelope.Error.ClientCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EE70);
  }

  return result;
}

unint64_t sub_181CA948C()
{
  unint64_t result = qword_18C58EE78;
  if (!qword_18C58EE78)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182664FCC, &type metadata for ReplyEnvelope.Error.NsErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EE78);
  }

  return result;
}

unint64_t sub_181CA94D4()
{
  unint64_t result = qword_18C58EE80;
  if (!qword_18C58EE80)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182665084, &type metadata for ReplyEnvelope.Error.CodableClientCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EE80);
  }

  return result;
}

unint64_t sub_181CA951C()
{
  unint64_t result = qword_18C58EE88;
  if (!qword_18C58EE88)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18266513C, &type metadata for ReplyEnvelope.Error.UnderlyingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EE88);
  }

  return result;
}

unint64_t sub_181CA9564()
{
  unint64_t result = qword_18C58EE90;
  if (!qword_18C58EE90)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182665294, &type metadata for ReplyEnvelope.Error.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EE90);
  }

  return result;
}

unint64_t sub_181CA95AC()
{
  unint64_t result = qword_18C58EE98;
  if (!qword_18C58EE98)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_1826651B4, &type metadata for ReplyEnvelope.Error.ActorResolutionFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EE98);
  }

  return result;
}

unint64_t sub_181CA95F4()
{
  unint64_t result = qword_18C58EEA0;
  if (!qword_18C58EEA0)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_1826651DC, &type metadata for ReplyEnvelope.Error.ActorResolutionFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EEA0);
  }

  return result;
}

unint64_t sub_181CA963C()
{
  unint64_t result = qword_18C58EEA8;
  if (!qword_18C58EEA8)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182665164, &type metadata for ReplyEnvelope.Error.FailedToExecuteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EEA8);
  }

  return result;
}

unint64_t sub_181CA9684()
{
  unint64_t result = qword_18C58EEB0;
  if (!qword_18C58EEB0)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18266518C, &type metadata for ReplyEnvelope.Error.FailedToExecuteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EEB0);
  }

  return result;
}

unint64_t sub_181CA96CC()
{
  unint64_t result = qword_18C58EEB8;
  if (!qword_18C58EEB8)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_1826650AC, &type metadata for ReplyEnvelope.Error.UnderlyingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EEB8);
  }

  return result;
}

unint64_t sub_181CA9714()
{
  unint64_t result = qword_18C58EEC0;
  if (!qword_18C58EEC0)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_1826650D4, &type metadata for ReplyEnvelope.Error.UnderlyingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EEC0);
  }

  return result;
}

unint64_t sub_181CA975C()
{
  unint64_t result = qword_18C58EEC8;
  if (!qword_18C58EEC8)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182664FF4, &type metadata for ReplyEnvelope.Error.CodableClientCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EEC8);
  }

  return result;
}

unint64_t sub_181CA97A4()
{
  unint64_t result = qword_18C58EED0;
  if (!qword_18C58EED0)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18266501C, &type metadata for ReplyEnvelope.Error.CodableClientCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EED0);
  }

  return result;
}

unint64_t sub_181CA97EC()
{
  unint64_t result = qword_18C58EED8;
  if (!qword_18C58EED8)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182664F3C, &type metadata for ReplyEnvelope.Error.NsErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EED8);
  }

  return result;
}

unint64_t sub_181CA9834()
{
  unint64_t result = qword_18C58EEE0;
  if (!qword_18C58EEE0)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182664F64, &type metadata for ReplyEnvelope.Error.NsErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EEE0);
  }

  return result;
}

unint64_t sub_181CA987C()
{
  unint64_t result = qword_18C58EEE8;
  if (!qword_18C58EEE8)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182664E84, &type metadata for ReplyEnvelope.Error.ClientCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EEE8);
  }

  return result;
}

unint64_t sub_181CA98C4()
{
  unint64_t result = qword_18C58EEF0;
  if (!qword_18C58EEF0)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182664EAC, &type metadata for ReplyEnvelope.Error.ClientCodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EEF0);
  }

  return result;
}

unint64_t sub_181CA990C()
{
  unint64_t result = qword_18C58EEF8;
  if (!qword_18C58EEF8)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182665204, &type metadata for ReplyEnvelope.Error.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EEF8);
  }

  return result;
}

unint64_t sub_181CA9954()
{
  unint64_t result = qword_18C58EF00;
  if (!qword_18C58EF00)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18266522C, &type metadata for ReplyEnvelope.Error.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EF00);
  }

  return result;
}

unint64_t sub_181CA999C()
{
  unint64_t result = qword_18C58EF08;
  if (!qword_18C58EF08)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182664DCC, &type metadata for ReplyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EF08);
  }

  return result;
}

unint64_t sub_181CA99E4()
{
  unint64_t result = qword_18C58EF10;
  if (!qword_18C58EF10)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182664DF4, &type metadata for ReplyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EF10);
  }

  return result;
}

unint64_t sub_181CA9A28()
{
  unint64_t result = qword_18C58EF20;
  if (!qword_18C58EF20)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182665644, &type metadata for ReplyEnvelope.Metrics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EF20);
  }

  return result;
}

uint64_t sub_181CA9A6C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4E64656C676E616DLL && a2 == 0xEB00000000656D61LL;
  if (v2 || (sub_18264F4EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x566465646F636E65LL && a2 == 0xEC00000065756C61LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = sub_18264F4EC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_181CA9B8C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000015LL && a2 == 0x8000000182731880LL || (sub_18264F4EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x6F5464656C696166LL && a2 == 0xEF65747563657845LL || (sub_18264F4EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x69796C7265646E75LL && a2 == 0xEA0000000000676ELL || (sub_18264F4EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0x43656C6261646F63LL && a2 == 0xED0000746E65696CLL || (sub_18264F4EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else if (a1 == 0x726F727245736ELL && a2 == 0xE700000000000000LL || (sub_18264F4EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4LL;
  }

  else if (a1 == 0x746E65696C63LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 5LL;
  }

  else
  {
    char v5 = sub_18264F4EC();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

uint64_t sub_181CA9E54(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000001BLL && a2 == 0x80000001827318A0LL)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }

  else
  {
    char v3 = sub_18264F4EC();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }

  return v2 & 1;
}

uint64_t sub_181CA9ED8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x44496C6C6163LL && a2 == 0xE600000000000000LL;
  if (v2 || (sub_18264F4EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x65756C6176LL && a2 == 0xE500000000000000LL || (sub_18264F4EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x726F727265LL && a2 == 0xE500000000000000LL || (sub_18264F4EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0x7363697274656DLL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else
  {
    char v6 = sub_18264F4EC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t _s7Network13ReplyEnvelopeV5ErrorO20UnderlyingCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_181CAA0B8 + 4 * byte_182664BD0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_181CAA0D8 + 4 * byte_182664BD5[v4]))();
  }
}

_BYTE *sub_181CAA0B8(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_181CAA0D8(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_181CAA0E0(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_181CAA0E8(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_181CAA0F0(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_181CAA0F8(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ReplyEnvelope.Metrics.CodingKeys()
{
  return &type metadata for ReplyEnvelope.Metrics.CodingKeys;
}

unint64_t sub_181CAA118()
{
  unint64_t result = qword_18C58EF30;
  if (!qword_18C58EF30)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18266561C, &type metadata for ReplyEnvelope.Metrics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EF30);
  }

  return result;
}

unint64_t sub_181CAA160()
{
  unint64_t result = qword_18C58EF38;
  if (!qword_18C58EF38)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18266558C, &type metadata for ReplyEnvelope.Metrics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EF38);
  }

  return result;
}

unint64_t sub_181CAA1A8()
{
  unint64_t result = qword_18C58EF40;
  if (!qword_18C58EF40)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_1826655B4, &type metadata for ReplyEnvelope.Metrics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EF40);
  }

  return result;
}

uint64_t sub_181CAA1F4(uint64_t a1)
{
  return sub_18264EAC0();
}

uint64_t sub_181CAA260()
{
  uint64_t v0 = sub_18264E934();
  __swift_allocate_value_buffer(v0, qword_18C5A4A60);
  __swift_project_value_buffer(v0, (uint64_t)qword_18C5A4A60);
  return sub_18264E928();
}

void *NWActorSystemInvocationDecoder.decodeGenericSubstitutions()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NWActorSystemInvocationDecoder() + 20);
  uint64_t v2 = *(void *)(v1 + *(int *)(type metadata accessor for RemoteCallEnvelope(0LL) + 28));
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3) {
    return (void *)MEMORY[0x18961AFE8];
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = v2 + 40;
  char v5 = (void *)MEMORY[0x18961AFE8];
  do
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_18264F180();
    swift_bridgeObjectRelease();
    if (v6)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v5 = sub_181BC5B34(0LL, v5[2] + 1LL, 1, v5);
      }
      unint64_t v8 = v5[2];
      unint64_t v7 = v5[3];
      if (v8 >= v7 >> 1) {
        char v5 = sub_181BC5B34((void *)(v7 > 1), v8 + 1, 1, v5);
      }
      __int128 v5[2] = v8 + 1;
      v5[v8 + 4] = v6;
    }

    v4 += 16LL;
    --v3;
  }

  while (v3);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t type metadata accessor for NWActorSystemInvocationDecoder()
{
  uint64_t result = qword_18C58EFA0;
  if (!qword_18C58EFA0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t NWActorSystemInvocationDecoder.decodeNextArgument<A>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v47 = (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))swift_conformsToProtocol();
  swift_conformsToProtocol();
  uint64_t v6 = sub_18264F09C();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)v38 - v9;
  uint64_t v11 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v13 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = type metadata accessor for NWActorSystemInvocationDecoder();
  uint64_t v15 = (void *)(v2 + *(int *)(result + 24));
  uint64_t v17 = *v15;
  unint64_t v16 = v15[1];
  unint64_t v18 = *(void *)(*v15 + 16LL);
  if (v16 == v18)
  {
    sub_181BF7EF8();
    swift_allocError();
    *(void *)uint64_t v19 = a1;
    *(_OWORD *)(v19 + 8) = xmmword_1826656B0;
    return swift_willThrow();
  }

  if (v16 < v18)
  {
    uint64_t v39 = v6;
    uint64_t v40 = v3;
    uint64_t v20 = v17 + 16 * v16;
    uint64_t v22 = *(void *)(v20 + 32);
    unint64_t v21 = *(void *)(v20 + 40);
    uint64_t v41 = v22;
    unint64_t v42 = v21;
    v15[1] = v16 + 1;
    if (*(_BYTE *)(v2 + *(int *)(result + 28)) == 1
      && ((uint64_t v23 = swift_conformsToProtocol2()) != 0 ? (v24 = v23) : (v24 = 0LL), v23 ? (v25 = a1) : (v25 = 0LL), v25))
    {
      v38[0] = a2;
      uint64_t v47 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v24 + 24);
      uint64_t v45 = v25;
      uint64_t v46 = v24;
      v38[1] = __swift_allocate_boxed_opaque_existential_0(v44);
      uint64_t v27 = v41;
      unint64_t v26 = v42;
      sub_181BCD4AC(v41, v42);
      sub_181BCD4AC(v27, v26);
      uint64_t v28 = v40;
      v47(v27, v26, v25, v24);
      if (v28)
      {
        __swift_deallocate_boxed_opaque_existential_1Tm((uint64_t)v44);
      }

      else
      {
        sub_181BCD38C((uint64_t)v44, (uint64_t)v43);
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D6F0);
        int v32 = swift_dynamicCast();
        uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
        if (v32)
        {
          v33(v10, 0LL, 1LL, a1);
          sub_181BCD4F0(v41, v42);
          uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
          v34(v13, v10, a1);
          v34((char *)v38[0], v13, a1);
          return __swift_destroy_boxed_opaque_existential_2((uint64_t)v44);
        }

        v33(v10, 1LL, 1LL, a1);
        (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v39);
        uint64_t v35 = sub_18264F204();
        swift_allocError();
        uint64_t v37 = v36;
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D6F8);
        __swift_project_boxed_opaque_existential_2(v44, v45);
        *uint64_t v37 = swift_getDynamicType();
        sub_18264F1F8();
        (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v35 - 8) + 104LL))( v37,  *MEMORY[0x189619358],  v35);
        swift_willThrow();
        __swift_destroy_boxed_opaque_existential_2((uint64_t)v44);
      }

      uint64_t v30 = v41;
      unint64_t v29 = v42;
    }

    else
    {
      uint64_t v30 = v41;
      unint64_t v29 = v42;
      sub_181BCD4AC(v41, v42);
      uint64_t v31 = v40;
      sub_18264E3B8();
      if (!v31) {
        return sub_181BCD4F0(v30, v29);
      }
    }

    swift_willThrow();
    return sub_181BCD4F0(v30, v29);
  }

  __break(1u);
  return result;
}

uint64_t NWActorSystemInvocationDecoder.decodeErrorType()()
{
  return 0LL;
}

uint64_t NWActorSystemInvocationDecoder.decodeReturnType()()
{
  return 0LL;
}

void *sub_181CAA7F8()
{
  return NWActorSystemInvocationDecoder.decodeGenericSubstitutions()();
}

uint64_t sub_181CAA80C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return NWActorSystemInvocationDecoder.decodeNextArgument<A>()(a1, a2);
}

void *initializeBufferWithCopyOfBuffer for NWActorSystemInvocationDecoder(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain();
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_18264E688();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    int v32 = v12;
    swift_retain();
    v12(v9, v10, v11);
    uint64_t v13 = (int *)type metadata accessor for RemoteCallEnvelope(0LL);
    uint64_t v14 = v13[5];
    uint64_t v15 = &v9[v14];
    unint64_t v16 = &v10[v14];
    uint64_t v17 = *(void *)&v10[v14 + 8];
    *(void *)uint64_t v15 = *(void *)&v10[v14];
    *((void *)v15 + 1) = v17;
    uint64_t v18 = *(int *)(type metadata accessor for NWActorID() + 20);
    uint64_t v19 = &v15[v18];
    uint64_t v20 = &v16[v18];
    swift_bridgeObjectRetain();
    v32(v19, v20, v11);
    uint64_t v21 = v13[6];
    uint64_t v22 = &v9[v21];
    uint64_t v23 = &v10[v21];
    uint64_t v24 = *((void *)v23 + 1);
    *(void *)uint64_t v22 = *(void *)v23;
    *((void *)v22 + 1) = v24;
    *(void *)&v9[v13[7]] = *(void *)&v10[v13[7]];
    *(void *)&v9[v13[8]] = *(void *)&v10[v13[8]];
    *(void *)&v9[v13[9]] = *(void *)&v10[v13[9]];
    uint64_t v25 = a3[6];
    uint64_t v26 = a3[7];
    uint64_t v27 = (void *)((char *)v7 + v25);
    uint64_t v28 = (void *)((char *)a2 + v25);
    uint64_t v30 = *v28;
    uint64_t v29 = v28[1];
    void *v27 = v30;
    v27[1] = v29;
    *((_BYTE *)v7 + v26) = *((_BYTE *)a2 + v26);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  return v7;
}

uint64_t destroy for NWActorSystemInvocationDecoder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_18264E688();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v6(v4, v5);
  uint64_t v7 = v4 + *(int *)(type metadata accessor for RemoteCallEnvelope(0LL) + 20);
  swift_bridgeObjectRelease();
  uint64_t v8 = type metadata accessor for NWActorID();
  v6(v7 + *(int *)(v8 + 20), v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for NWActorSystemInvocationDecoder(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v5 = a3[5];
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_18264E688();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL);
  swift_retain();
  v9(v6, v7, v8);
  uint64_t v10 = (int *)type metadata accessor for RemoteCallEnvelope(0LL);
  uint64_t v11 = v10[5];
  uint64_t v12 = &v6[v11];
  uint64_t v13 = &v7[v11];
  uint64_t v14 = *(void *)&v7[v11 + 8];
  *(void *)uint64_t v12 = *(void *)&v7[v11];
  *((void *)v12 + 1) = v14;
  uint64_t v15 = *(int *)(type metadata accessor for NWActorID() + 20);
  unint64_t v16 = &v12[v15];
  uint64_t v17 = &v13[v15];
  swift_bridgeObjectRetain();
  v9(v16, v17, v8);
  uint64_t v18 = v10[6];
  uint64_t v19 = &v6[v18];
  uint64_t v20 = &v7[v18];
  uint64_t v21 = *((void *)v20 + 1);
  *(void *)uint64_t v19 = *(void *)v20;
  *((void *)v19 + 1) = v21;
  *(void *)&v6[v10[7]] = *(void *)&v7[v10[7]];
  *(void *)&v6[v10[8]] = *(void *)&v7[v10[8]];
  *(void *)&v6[v10[9]] = *(void *)&v7[v10[9]];
  uint64_t v22 = a3[6];
  uint64_t v23 = a3[7];
  uint64_t v24 = (void *)((char *)a1 + v22);
  uint64_t v25 = (void *)((char *)a2 + v22);
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  *uint64_t v24 = v27;
  v24[1] = v26;
  *((_BYTE *)a1 + v23) = *((_BYTE *)a2 + v23);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for NWActorSystemInvocationDecoder(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_18264E688();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24LL);
  v10(v7, v8, v9);
  uint64_t v11 = (int *)type metadata accessor for RemoteCallEnvelope(0LL);
  uint64_t v12 = v11[5];
  uint64_t v13 = &v7[v12];
  uint64_t v14 = &v8[v12];
  *(void *)uint64_t v13 = *(void *)&v8[v12];
  *((void *)v13 + 1) = *(void *)&v8[v12 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = type metadata accessor for NWActorID();
  v10(&v13[*(int *)(v15 + 20)], &v14[*(int *)(v15 + 20)], v9);
  uint64_t v16 = v11[6];
  uint64_t v17 = &v7[v16];
  uint64_t v18 = &v8[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  *((void *)v17 + 1) = *((void *)v18 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v7[v11[7]] = *(void *)&v8[v11[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v7[v11[8]] = *(void *)&v8[v11[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v7[v11[9]] = *(void *)&v8[v11[9]];
  uint64_t v19 = a3[6];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  *(void *)((char *)a1 + v19) = *(void *)((char *)a2 + v19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v20 + 1) = *((void *)v21 + 1);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  return a1;
}

void *initializeWithTake for NWActorSystemInvocationDecoder(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_18264E688();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = (int *)type metadata accessor for RemoteCallEnvelope(0LL);
  uint64_t v12 = v11[5];
  uint64_t v13 = &v7[v12];
  uint64_t v14 = &v8[v12];
  *(_OWORD *)&v7[v12] = *(_OWORD *)&v8[v12];
  uint64_t v15 = type metadata accessor for NWActorID();
  v10(&v13[*(int *)(v15 + 20)], &v14[*(int *)(v15 + 20)], v9);
  *(_OWORD *)&v7[v11[6]] = *(_OWORD *)&v8[v11[6]];
  *(void *)&v7[v11[7]] = *(void *)&v8[v11[7]];
  *(void *)&v7[v11[8]] = *(void *)&v8[v11[8]];
  *(void *)&v7[v11[9]] = *(void *)&v8[v11[9]];
  uint64_t v16 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *((_BYTE *)a1 + v16) = *((_BYTE *)a2 + v16);
  return a1;
}

void *assignWithTake for NWActorSystemInvocationDecoder(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_18264E688();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40LL);
  v10(v7, v8, v9);
  uint64_t v11 = (int *)type metadata accessor for RemoteCallEnvelope(0LL);
  uint64_t v12 = v11[5];
  uint64_t v13 = &v7[v12];
  uint64_t v14 = &v8[v12];
  uint64_t v15 = *(void *)&v8[v12 + 8];
  *(void *)uint64_t v13 = *(void *)&v8[v12];
  *((void *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = type metadata accessor for NWActorID();
  v10(&v13[*(int *)(v16 + 20)], &v14[*(int *)(v16 + 20)], v9);
  uint64_t v17 = v11[6];
  uint64_t v18 = &v7[v17];
  uint64_t v19 = &v8[v17];
  uint64_t v21 = *(void *)v19;
  uint64_t v20 = *((void *)v19 + 1);
  *(void *)uint64_t v18 = v21;
  *((void *)v18 + 1) = v20;
  swift_bridgeObjectRelease();
  *(void *)&v7[v11[7]] = *(void *)&v8[v11[7]];
  swift_bridgeObjectRelease();
  *(void *)&v7[v11[8]] = *(void *)&v8[v11[8]];
  swift_bridgeObjectRelease();
  *(void *)&v7[v11[9]] = *(void *)&v8[v11[9]];
  uint64_t v22 = a3[6];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  *(void *)((char *)a1 + v22) = *(void *)((char *)a2 + v22);
  swift_bridgeObjectRelease();
  *((void *)v23 + 1) = *((void *)v24 + 1);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWActorSystemInvocationDecoder()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181CAAFF0(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for RemoteCallEnvelope(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 20)],  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for NWActorSystemInvocationDecoder()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_181CAB078(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for RemoteCallEnvelope(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_181CAB0EC()
{
  uint64_t result = type metadata accessor for RemoteCallEnvelope(319LL);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t sub_181CAB17C(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v3 = 0x65756C6176LL;
    }
    else {
      unint64_t v3 = 0xD000000000000010LL;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE500000000000000LL;
    }
    else {
      unint64_t v4 = 0x800000018272DB90LL;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        unint64_t v6 = 0x65756C6176LL;
      }
      else {
        unint64_t v6 = 0xD000000000000010LL;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE500000000000000LL;
      }
      else {
        unint64_t v7 = 0x800000018272DB90LL;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }

  else
  {
    unint64_t v4 = 0xE400000000000000LL;
    unint64_t v3 = 1701667182LL;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }

  unint64_t v7 = 0xE400000000000000LL;
  if (v3 != 1701667182)
  {
LABEL_21:
    char v8 = sub_18264F4EC();
    goto LABEL_22;
  }

uint64_t sub_181CAB27C(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xD000000000000012LL;
  unint64_t v3 = 0x800000018272DBB0LL;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0x6946726564616568LL;
    }
    else {
      unint64_t v5 = 0x68506E6F73616572LL;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xEC00000073646C65LL;
    }
    else {
      unint64_t v6 = 0xEC00000065736172LL;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }

  unint64_t v5 = 0xD000000000000012LL;
  unint64_t v6 = 0x800000018272DBB0LL;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      unint64_t v2 = 0x6946726564616568LL;
    }
    else {
      unint64_t v2 = 0x68506E6F73616572LL;
    }
    if (v7 == 1) {
      unint64_t v3 = 0xEC00000073646C65LL;
    }
    else {
      unint64_t v3 = 0xEC00000065736172LL;
    }
  }

uint64_t sub_181CAB3A8(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    unint64_t v3 = 0x6946726564616568LL;
  }
  else {
    unint64_t v3 = 0xD000000000000012LL;
  }
  if (v2) {
    unint64_t v4 = 0x800000018272DBB0LL;
  }
  else {
    unint64_t v4 = 0xEC00000073646C65LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v5 = 0x6946726564616568LL;
  }
  else {
    unint64_t v5 = 0xD000000000000012LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xEC00000073646C65LL;
  }
  else {
    unint64_t v6 = 0x800000018272DBB0LL;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_18264F4EC();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_181CAB458(char a1, unsigned __int8 a2)
{
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v2 = 0x646F70656D6F68LL;
    }
    else {
      uint64_t v2 = 0x72656B61657073LL;
    }
    unint64_t v3 = 0xE700000000000000LL;
    int v4 = a2;
    if (a2)
    {
LABEL_6:
      if (v4 == 1) {
        uint64_t v5 = 0x646F70656D6F68LL;
      }
      else {
        uint64_t v5 = 0x72656B61657073LL;
      }
      unint64_t v6 = 0xE700000000000000LL;
      if (v2 != v5) {
        goto LABEL_15;
      }
      goto LABEL_13;
    }
  }

  else
  {
    unint64_t v3 = 0xE300000000000000LL;
    uint64_t v2 = 7496035LL;
    int v4 = a2;
    if (a2) {
      goto LABEL_6;
    }
  }

  unint64_t v6 = 0xE300000000000000LL;
  if (v2 != 7496035)
  {
LABEL_15:
    char v7 = sub_18264F4EC();
    goto LABEL_16;
  }

uint64_t sub_181CAB560(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xE900000000000079LL;
  uint64_t v3 = 0x74696D69786F7270LL;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 0x73646E65697266LL;
    }
    else {
      uint64_t v5 = 0x656E6F7972657665LL;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xE700000000000000LL;
    }
    else {
      unint64_t v6 = 0xE800000000000000LL;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }

  uint64_t v5 = 0x74696D69786F7270LL;
  unint64_t v6 = 0xE900000000000079LL;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      uint64_t v3 = 0x73646E65697266LL;
    }
    else {
      uint64_t v3 = 0x656E6F7972657665LL;
    }
    if (v7 == 1) {
      unint64_t v2 = 0xE700000000000000LL;
    }
    else {
      unint64_t v2 = 0xE800000000000000LL;
    }
  }

uint64_t HTTPRequest.scheme.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = (void *)v2;
  if (!a2)
  {
    uint64_t result = sub_181BCECE0(*(void *)(v2 + 56), *(void *)(v2 + 64));
    *(void *)(v2 + 104) = 0LL;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    return result;
  }

  unint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v6 = v3[8];
  if (v6)
  {
    uint64_t v7 = v3[7];
    uint64_t v17 = v3[9];
    uint64_t v15 = v3[10];
    uint64_t v16 = v3[11];
    if ((sub_181BCE7EC(a1, a2) & 1) != 0)
    {
      sub_181BCECA4(v7, v6);
    }

    else
    {
      sub_181BCECA4(v7, v6);
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C548);
      sub_181CAC80C();
      sub_18264EB14();
      swift_bridgeObjectRelease();
      uint64_t v5 = 0LL;
      unint64_t v4 = 0xE000000000000000LL;
    }

    uint64_t v9 = sub_181C024EC(v5, v4);
    uint64_t v11 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17 == 0x656D656863733ALL && v15 == 0xE700000000000000LL)
    {
      unsigned __int8 v13 = v16;
      uint64_t result = sub_181BCECE0(v7, v6);
    }

    else
    {
      char v14 = sub_18264F4EC();
      unsigned __int8 v13 = v16;
      uint64_t result = sub_181BCECE0(v7, v6);
      if ((v14 & 1) == 0)
      {
        __break(1u);
        return result;
      }
    }

    v3[7] = v7;
    v3[8] = v6;
    v3[9] = v17;
    v3[10] = v15;
    v3[11] = v13;
  }

  else
  {
    if ((sub_181BCE7EC(a1, a2) & 1) == 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C548);
      sub_181CAC80C();
      sub_18264EB14();
      swift_bridgeObjectRelease();
      uint64_t v5 = 0LL;
      unint64_t v4 = 0xE000000000000000LL;
    }

    uint64_t v9 = sub_181C024EC(v5, v4);
    uint64_t v11 = v10;
    uint64_t result = swift_bridgeObjectRelease();
    *(_OWORD *)(v3 + 7) = xmmword_182663830;
    *(_OWORD *)(v3 + 9) = xmmword_182663830;
    v3[11] = 0LL;
  }

  v3[12] = v9;
  v3[13] = v11;
  return result;
}

uint64_t HTTPRequest.authority.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = (void *)v2;
  if (!a2)
  {
    uint64_t result = sub_181BCECE0(*(void *)(v2 + 112), *(void *)(v2 + 120));
    *(void *)(v2 + 160) = 0LL;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    return result;
  }

  unint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v6 = v3[15];
  if (v6)
  {
    uint64_t v7 = v3[14];
    uint64_t v17 = v3[16];
    uint64_t v15 = v3[17];
    uint64_t v16 = v3[18];
    if ((sub_181BCE7EC(a1, a2) & 1) != 0)
    {
      sub_181BCECA4(v7, v6);
    }

    else
    {
      sub_181BCECA4(v7, v6);
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C548);
      sub_181CAC80C();
      sub_18264EB14();
      swift_bridgeObjectRelease();
      uint64_t v5 = 0LL;
      unint64_t v4 = 0xE000000000000000LL;
    }

    uint64_t v9 = sub_181C024EC(v5, v4);
    uint64_t v11 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17 == 0x69726F687475613ALL && v15 == 0xEA00000000007974LL)
    {
      unsigned __int8 v13 = v16;
      uint64_t result = sub_181BCECE0(v7, v6);
    }

    else
    {
      char v14 = sub_18264F4EC();
      unsigned __int8 v13 = v16;
      uint64_t result = sub_181BCECE0(v7, v6);
      if ((v14 & 1) == 0)
      {
        __break(1u);
        return result;
      }
    }

    v3[14] = v7;
    v3[15] = v6;
    v3[16] = v17;
    v3[17] = v15;
    v3[18] = v13;
  }

  else
  {
    if ((sub_181BCE7EC(a1, a2) & 1) == 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C548);
      sub_181CAC80C();
      sub_18264EB14();
      swift_bridgeObjectRelease();
      uint64_t v5 = 0LL;
      unint64_t v4 = 0xE000000000000000LL;
    }

    uint64_t v9 = sub_181C024EC(v5, v4);
    uint64_t v11 = v10;
    uint64_t result = swift_bridgeObjectRelease();
    *((_OWORD *)v3 + 7) = xmmword_182663840;
    *((_OWORD *)v3 + 8) = xmmword_182663840;
    v3[18] = 0LL;
  }

  v3[19] = v9;
  v3[20] = v11;
  return result;
}

uint64_t HTTPRequest.path.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = (void *)v2;
  if (!a2)
  {
    uint64_t result = sub_181BCECE0(*(void *)(v2 + 168), *(void *)(v2 + 176));
    *(void *)(v2 + 216) = 0LL;
    *(_OWORD *)(v2 + 200) = 0u;
    *(_OWORD *)(v2 + 184) = 0u;
    *(_OWORD *)(v2 + 168) = 0u;
    return result;
  }

  unint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v6 = v3[22];
  if (v6)
  {
    uint64_t v7 = v3[21];
    uint64_t v17 = v3[23];
    uint64_t v15 = v3[24];
    uint64_t v16 = v3[25];
    if ((sub_181BCE7EC(a1, a2) & 1) != 0)
    {
      sub_181BCECA4(v7, v6);
    }

    else
    {
      sub_181BCECA4(v7, v6);
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C548);
      sub_181CAC80C();
      sub_18264EB14();
      swift_bridgeObjectRelease();
      uint64_t v5 = 0LL;
      unint64_t v4 = 0xE000000000000000LL;
    }

    uint64_t v9 = sub_181C024EC(v5, v4);
    uint64_t v11 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17 == 0x687461703ALL && v15 == 0xE500000000000000LL)
    {
      unsigned __int8 v13 = v16;
      uint64_t result = sub_181BCECE0(v7, v6);
    }

    else
    {
      char v14 = sub_18264F4EC();
      unsigned __int8 v13 = v16;
      uint64_t result = sub_181BCECE0(v7, v6);
      if ((v14 & 1) == 0)
      {
        __break(1u);
        return result;
      }
    }

    v3[21] = v7;
    v3[22] = v6;
    v3[23] = v17;
    v3[24] = v15;
    v3[25] = v13;
  }

  else
  {
    if ((sub_181BCE7EC(a1, a2) & 1) == 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C548);
      sub_181CAC80C();
      sub_18264EB14();
      swift_bridgeObjectRelease();
      uint64_t v5 = 0LL;
      unint64_t v4 = 0xE000000000000000LL;
    }

    uint64_t v9 = sub_181C024EC(v5, v4);
    uint64_t v11 = v10;
    uint64_t result = swift_bridgeObjectRelease();
    *(_OWORD *)(v3 + 21) = xmmword_182663850;
    *(_OWORD *)(v3 + 23) = xmmword_182663850;
    v3[25] = 0LL;
  }

  v3[26] = v9;
  v3[27] = v11;
  return result;
}

uint64_t HTTPRequest.PseudoHeaderFields.scheme.setter(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  if (!v2
    || (v4 == 0x656D656863733ALL ? (BOOL v9 = v5 == 0xE700000000000000LL) : (BOOL v9 = 0),
        v9 || (uint64_t result = sub_18264F4EC(), (result & 1) != 0)))
  {
    uint64_t result = sub_181BCECE0(v1[7], v1[8]);
    v1[7] = v3;
    v1[8] = v2;
    v1[9] = v4;
    v1[10] = v5;
    v1[11] = v6;
    v1[12] = v7;
    v1[13] = v8;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t HTTPRequest.PseudoHeaderFields.authority.setter(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  if (!v2
    || (v4 == 0x69726F687475613ALL ? (BOOL v9 = v5 == 0xEA00000000007974LL) : (BOOL v9 = 0),
        v9 || (uint64_t result = sub_18264F4EC(), (result & 1) != 0)))
  {
    uint64_t result = sub_181BCECE0(v1[14], v1[15]);
    v1[14] = v3;
    v1[15] = v2;
    v1[16] = v4;
    v1[17] = v5;
    v1[18] = v6;
    v1[19] = v7;
    v1[20] = v8;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t HTTPRequest.PseudoHeaderFields.path.setter(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  if (!v2
    || (v4 == 0x687461703ALL ? (BOOL v9 = v5 == 0xE500000000000000LL) : (BOOL v9 = 0),
        v9 || (uint64_t result = sub_18264F4EC(), (result & 1) != 0)))
  {
    uint64_t result = sub_181BCECE0(v1[21], v1[22]);
    v1[21] = v3;
    v1[22] = v2;
    v1[23] = v4;
    v1[24] = v5;
    v1[25] = v6;
    v1[26] = v7;
    v1[27] = v8;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void static HTTPRequest.Method.get.getter(void *a1@<X8>)
{
  *a1 = 5522759LL;
  a1[1] = 0xE300000000000000LL;
}

double HTTPRequest.init(method:scheme:authority:path:headerFields:)@<D0>( uint64_t *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t *a8@<X7>, uint64_t a9@<X8>)
{
  unint64_t v10 = a5;
  uint64_t v40 = a1[1];
  uint64_t v41 = *a1;
  uint64_t v42 = *a8;
  if (a3)
  {
    uint64_t v14 = a2;
    if ((sub_181BCE7EC(a2, a3) & 1) != 0)
    {
      swift_bridgeObjectRetain();
      unint64_t v15 = a3;
    }

    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C548);
      sub_181CAC80C();
      sub_18264EB14();
      uint64_t v14 = 0LL;
      unint64_t v15 = 0xE000000000000000LL;
    }

    uint64_t v25 = sub_181C024EC(v14, v15);
    uint64_t v38 = v26;
    uint64_t v39 = v25;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v17 = 0xE700000000000000LL;
    uint64_t v16 = 0x656D656863733ALL;
    if (v10)
    {
LABEL_9:
      if ((sub_181BCE7EC(a4, v10) & 1) != 0)
      {
        swift_bridgeObjectRetain();
        unint64_t v27 = v10;
      }

      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C548);
        sub_181CAC80C();
        sub_18264EB14();
        a4 = 0LL;
        unint64_t v27 = 0xE000000000000000LL;
      }

      uint64_t v19 = sub_181C024EC(a4, v27);
      uint64_t v20 = v28;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v10 = 0xEA00000000007974LL;
      uint64_t v18 = 0x69726F687475613ALL;
      if (a7) {
        goto LABEL_13;
      }
LABEL_6:
      uint64_t v21 = 0LL;
      unint64_t v22 = 0LL;
      uint64_t v23 = 0LL;
      uint64_t v24 = 0LL;
      goto LABEL_17;
    }
  }

  else
  {
    uint64_t v16 = 0LL;
    unint64_t v17 = 0LL;
    uint64_t v38 = 0LL;
    uint64_t v39 = 0LL;
    if (a5) {
      goto LABEL_9;
    }
  }

  uint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  uint64_t v20 = 0LL;
  if (!a7) {
    goto LABEL_6;
  }
LABEL_13:
  uint64_t v36 = v16;
  unint64_t v29 = v17;
  uint64_t v30 = v20;
  uint64_t v31 = v19;
  if ((sub_181BCE7EC(a6, a7) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    unint64_t v32 = a7;
    uint64_t v33 = a6;
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C548);
    sub_181CAC80C();
    sub_18264EB14();
    uint64_t v33 = 0LL;
    unint64_t v32 = 0xE000000000000000LL;
  }

  uint64_t v23 = sub_181C024EC(v33, v32);
  uint64_t v24 = v34;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v22 = 0xE500000000000000LL;
  uint64_t v21 = 0x687461703ALL;
  uint64_t v19 = v31;
  uint64_t v20 = v30;
  unint64_t v17 = v29;
  uint64_t v16 = v36;
LABEL_17:
  *(void *)a9 = 0x646F6874656D3ALL;
  *(void *)(a9 + 8) = 0xE700000000000000LL;
  *(void *)(a9 + 16) = 0x646F6874656D3ALL;
  *(void *)(a9 + 24) = 0xE700000000000000LL;
  *(_BYTE *)(a9 + 32) = 0;
  *(void *)(a9 + 40) = v41;
  *(void *)(a9 + 48) = v40;
  *(void *)(a9 + 56) = v16;
  *(void *)(a9 + 64) = v17;
  *(void *)(a9 + 72) = v16;
  *(void *)(a9 + 80) = v17;
  *(void *)(a9 + 88) = 0LL;
  *(void *)(a9 + 96) = v39;
  *(void *)(a9 + 104) = v38;
  *(void *)(a9 + 112) = v18;
  *(void *)(a9 + 120) = v10;
  *(void *)(a9 + 128) = v18;
  *(void *)(a9 + 136) = v10;
  *(void *)(a9 + 144) = 0LL;
  *(void *)(a9 + 152) = v19;
  *(void *)(a9 + 160) = v20;
  *(void *)(a9 + 168) = v21;
  *(void *)(a9 + 176) = v22;
  *(void *)(a9 + 184) = v21;
  *(void *)(a9 + 192) = v22;
  *(void *)(a9 + 200) = 0LL;
  *(void *)(a9 + 208) = v23;
  *(void *)(a9 + 216) = v24;
  double result = 0.0;
  *(_OWORD *)(a9 + 240) = 0u;
  *(_OWORD *)(a9 + 256) = 0u;
  *(_OWORD *)(a9 + 224) = 0u;
  *(void *)(a9 + 272) = 0LL;
  *(void *)(a9 + 280) = v42;
  return result;
}

uint64_t HTTPRequest.method.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 48);
  *a1 = *(void *)(v1 + 40);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

void static HTTPRequest.Method.connect.getter(void *a1@<X8>)
{
  *a1 = 0x5443454E4E4F43LL;
  a1[1] = 0xE700000000000000LL;
}

Network::HTTPRequest::Method_optional __swiftcall HTTPRequest.Method.init(_:)(Swift::String a1)
{
  object = a1._object;
  uint64_t v3 = v1;
  uint64_t v4 = HIBYTE(a1._object) & 0xF;
  if (v4
    && (uint64_t countAndFlagsBits = a1._countAndFlagsBits,
        uint64_t v6 = sub_181C2B750(a1._countAndFlagsBits, (unint64_t)a1._object),
        (v6 & 1) != 0))
  {
    *uint64_t v3 = countAndFlagsBits;
    v3[1] = (uint64_t)object;
  }

  else
  {
    uint64_t v6 = swift_bridgeObjectRelease();
    *uint64_t v3 = 0LL;
    v3[1] = 0LL;
  }

  result.value.rawValue._object = v7;
  result.value.rawValue._uint64_t countAndFlagsBits = v6;
  return result;
}

uint64_t HTTPRequest.PseudoHeaderFields.extendedConnectProtocol.setter(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  if (!v2
    || (v4 == 0x6F636F746F72703ALL ? (BOOL v9 = v5 == 0xE90000000000006CLL) : (BOOL v9 = 0),
        v9 || (uint64_t result = sub_18264F4EC(), (result & 1) != 0)))
  {
    uint64_t result = sub_181BCECE0(v1[28], v1[29]);
    v1[28] = v3;
    v1[29] = v2;
    v1[30] = v4;
    v1[31] = v5;
    v1[32] = v6;
    v1[33] = v7;
    v1[34] = v8;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void static HTTPRequest.Method.head.getter(void *a1@<X8>)
{
  *a1 = 1145128264LL;
  a1[1] = 0xE400000000000000LL;
}

void static HTTPRequest.Method.post.getter(void *a1@<X8>)
{
  *a1 = 1414745936LL;
  a1[1] = 0xE400000000000000LL;
}

void static HTTPRequest.Method.put.getter(void *a1@<X8>)
{
  *a1 = 5526864LL;
  a1[1] = 0xE300000000000000LL;
}

void static HTTPRequest.Method.delete.getter(void *a1@<X8>)
{
  *a1 = 0x4554454C4544LL;
  a1[1] = 0xE600000000000000LL;
}

void static HTTPRequest.Method.options.getter(void *a1@<X8>)
{
  *a1 = 0x534E4F4954504FLL;
  a1[1] = 0xE700000000000000LL;
}

void static HTTPRequest.Method.trace.getter(void *a1@<X8>)
{
  *a1 = 0x4543415254LL;
  a1[1] = 0xE500000000000000LL;
}

void static HTTPRequest.Method.patch.getter(void *a1@<X8>)
{
  *a1 = 0x4843544150LL;
  a1[1] = 0xE500000000000000LL;
}

uint64_t HTTPRequest.method.setter(unint64_t *a1)
{
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v5 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  char v8 = *((_BYTE *)v1 + 32);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  BOOL v10 = v6 == 0x646F6874656D3ALL && v7 == 0xE700000000000000LL;
  if (v10 || (uint64_t result = sub_18264F4EC(), (result & 1) != 0))
  {
    uint64_t v11 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000LL) == 0) {
      uint64_t v11 = v2 & 0xFFFFFFFFFFFFLL;
    }
    if (v11)
    {
      char v12 = sub_181C2B750(v2, v3);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v12 & 1) != 0)
      {
        uint64_t *v1 = v5;
        v1[1] = v4;
        v1[2] = v6;
        v1[3] = v7;
        *((_BYTE *)v1 + 32) = v8;
        v1[5] = v2;
        v1[6] = v3;
        return result;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t HTTPRequest.PseudoHeaderFields.method.setter(uint64_t result)
{
  uint64_t v2 = *(void *)result;
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  uint64_t v5 = *(void *)(result + 24);
  char v6 = *(_BYTE *)(result + 32);
  unint64_t v7 = *(void *)(result + 40);
  unint64_t v8 = *(void *)(result + 48);
  BOOL v9 = v4 == 0x646F6874656D3ALL && v5 == 0xE700000000000000LL;
  if (v9 || (uint64_t result = sub_18264F4EC(), (result & 1) != 0))
  {
    uint64_t v10 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000LL) == 0) {
      uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
    }
    if (v10)
    {
      uint64_t result = sub_181C2B750(v7, v8);
      if ((result & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        *(void *)uint64_t v1 = v2;
        *(void *)(v1 + 8) = v3;
        *(void *)(v1 + 16) = v4;
        *(void *)(v1 + 24) = v5;
        *(_BYTE *)(v1 + 32) = v6;
        *(void *)(v1 + 40) = v7;
        *(void *)(v1 + 48) = v8;
        return result;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

unint64_t sub_181CAC80C()
{
  unint64_t result = qword_18C58C550;
  if (!qword_18C58C550)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58C548);
    unint64_t result = MEMORY[0x186E12084](MEMORY[0x189619618], v1);
    atomic_store(result, (unint64_t *)&qword_18C58C550);
  }

  return result;
}

Network::HTTPRequest::Method_optional __swiftcall HTTPRequest.Method.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  uint64_t v3 = v1;
  uint64_t v4 = HIBYTE(rawValue._object) & 0xF;
  if (v4
    && (uint64_t countAndFlagsBits = rawValue._countAndFlagsBits,
        uint64_t v6 = sub_181C2B750(rawValue._countAndFlagsBits, (unint64_t)rawValue._object),
        (v6 & 1) != 0))
  {
    *uint64_t v3 = countAndFlagsBits;
    v3[1] = (uint64_t)object;
  }

  else
  {
    uint64_t v6 = swift_bridgeObjectRelease();
    *uint64_t v3 = 0LL;
    v3[1] = 0LL;
  }

  result.value.rawValue._object = v7;
  result.value.rawValue._uint64_t countAndFlagsBits = v6;
  return result;
}

uint64_t HTTPRequest.Method.description.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_181CAC8F0()
{
  return sub_18264F684();
}

uint64_t sub_181CAC948()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_181CAC98C()
{
  return sub_18264F684();
}

uint64_t sub_181CAC9E0(Swift::String *a1)
{
  return HTTPRequest.Method.init(rawValue:)(*a1).value.rawValue._countAndFlagsBits;
}

uint64_t sub_181CAC9EC@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_181CAC9FC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v7 = a2[3];
  char v9 = *((_BYTE *)a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11[0] = v6;
  v11[1] = v5;
  v11[2] = v8;
  v11[3] = v7;
  char v12 = v9;
  uint64_t v13 = v4;
  uint64_t v14 = v3;
  sub_181CADCC8(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v6;
  a2[1] = v5;
  a2[2] = v8;
  a2[3] = v7;
  *((_BYTE *)a2 + 32) = v9;
  a2[5] = v4;
  a2[6] = v3;
  return result;
}

uint64_t (*HTTPRequest.method.modify(void *a1))(unint64_t *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = *(void *)(v1 + 48);
  *a1 = *(void *)(v1 + 40);
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return sub_181CACAE8;
}

uint64_t sub_181CACAE8(unint64_t *a1, char a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = a1[2];
  unint64_t v4 = *a1;
  uint64_t v6 = *(void *)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  char v9 = *(_BYTE *)(v3 + 32);
  BOOL v11 = v7 == 0x646F6874656D3ALL && v8 == 0xE700000000000000LL;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    if (!v11)
    {
      uint64_t result = sub_18264F4EC();
      if ((result & 1) == 0) {
        goto LABEL_26;
      }
    }

    uint64_t v13 = HIBYTE(v2) & 0xF;
    if ((v2 & 0x2000000000000000LL) == 0) {
      uint64_t v13 = v4 & 0xFFFFFFFFFFFFLL;
    }
    if (v13)
    {
      char v14 = sub_181C2B750(v4, v2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v14 & 1) != 0)
      {
        *(void *)unint64_t v3 = v6;
        *(void *)(v3 + 8) = v5;
        *(void *)(v3 + 16) = v7;
        *(void *)(v3 + 24) = v8;
        *(_BYTE *)(v3 + 32) = v9;
        *(void *)(v3 + 40) = v4;
        *(void *)(v3 + 48) = v2;
        return swift_bridgeObjectRelease();
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

  else
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    if (!v11)
    {
      uint64_t result = sub_18264F4EC();
      if ((result & 1) == 0) {
        goto LABEL_27;
      }
    }

    uint64_t v15 = HIBYTE(v2) & 0xF;
    if ((v2 & 0x2000000000000000LL) == 0) {
      uint64_t v15 = v4 & 0xFFFFFFFFFFFFLL;
    }
    if (v15)
    {
      char v16 = sub_181C2B750(v4, v2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v16 & 1) != 0)
      {
        *(void *)unint64_t v3 = v6;
        *(void *)(v3 + 8) = v5;
        *(void *)(v3 + 16) = v7;
        *(void *)(v3 + 24) = v8;
        *(_BYTE *)(v3 + 32) = v9;
        *(void *)(v3 + 40) = v4;
        *(void *)(v3 + 48) = v2;
        return result;
      }

      goto LABEL_25;
    }
  }

  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

unint64_t HTTPRequest.scheme.getter()
{
  uint64_t v1 = v0[8];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v0[7];
  unint64_t v3 = v0[12];
  unint64_t v4 = v0[13];
  if ((sub_181BCE7EC(v3, v4) & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }

  else
  {
    sub_181BCECA4(v2, v1);
    unint64_t v5 = sub_181C9420C(v3, v4);
    sub_181BCECE0(v2, v1);
    return v5;
  }

  return v3;
}

uint64_t sub_181CACDB0@<X0>(void *__src@<X0>, unint64_t *a2@<X8>)
{
  uint64_t result = (uint64_t)memcpy(__dst, __src, 0x120uLL);
  uint64_t v4 = __dst[8];
  if (__dst[8])
  {
    uint64_t v5 = __dst[7];
    unint64_t v6 = __dst[12];
    unint64_t v7 = __dst[13];
    if ((sub_181BCE7EC(__dst[12], __dst[13]) & 1) != 0)
    {
      uint64_t result = swift_bridgeObjectRetain();
    }

    else
    {
      sub_181C0F308(__dst);
      sub_181BCECA4(v5, v4);
      unint64_t v8 = sub_181C9420C(v6, v7);
      unint64_t v10 = v9;
      sub_181BCECE0(v5, v4);
      uint64_t result = (uint64_t)sub_181C63D84(__dst);
      unint64_t v6 = v8;
      unint64_t v7 = v10;
    }
  }

  else
  {
    unint64_t v6 = 0LL;
    unint64_t v7 = 0LL;
  }

  *a2 = v6;
  a2[1] = v7;
  return result;
}

uint64_t (*HTTPRequest.scheme.modify(unint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = (unint64_t)v1;
  uint64_t v3 = v1[8];
  if (v3)
  {
    uint64_t v4 = v1[7];
    unint64_t v5 = v1[12];
    unint64_t v6 = v1[13];
    if ((sub_181BCE7EC(v5, v6) & 1) != 0)
    {
      swift_bridgeObjectRetain();
    }

    else
    {
      sub_181BCECA4(v4, v3);
      unint64_t v7 = sub_181C9420C(v5, v6);
      unint64_t v9 = v8;
      sub_181BCECE0(v4, v3);
      unint64_t v5 = v7;
      unint64_t v6 = v9;
    }
  }

  else
  {
    unint64_t v5 = 0LL;
    unint64_t v6 = 0LL;
  }

  *a1 = v5;
  a1[1] = v6;
  return sub_181CACFB0;
}

uint64_t sub_181CACFB0(uint64_t *a1, char a2)
{
  return sub_181CADB60(a1, a2, (uint64_t (*)(uint64_t, uint64_t))HTTPRequest.scheme.setter);
}

unint64_t HTTPRequest.authority.getter()
{
  uint64_t v1 = v0[15];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v0[14];
  unint64_t v3 = v0[19];
  unint64_t v4 = v0[20];
  if ((sub_181BCE7EC(v3, v4) & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }

  else
  {
    sub_181BCECA4(v2, v1);
    unint64_t v5 = sub_181C9420C(v3, v4);
    sub_181BCECE0(v2, v1);
    return v5;
  }

  return v3;
}

uint64_t sub_181CAD0A4@<X0>(void *__src@<X0>, unint64_t *a2@<X8>)
{
  uint64_t result = (uint64_t)memcpy(__dst, __src, 0x120uLL);
  uint64_t v4 = __dst[15];
  if (__dst[15])
  {
    uint64_t v5 = __dst[14];
    unint64_t v6 = __dst[19];
    unint64_t v7 = __dst[20];
    if ((sub_181BCE7EC(__dst[19], __dst[20]) & 1) != 0)
    {
      uint64_t result = swift_bridgeObjectRetain();
    }

    else
    {
      sub_181C0F308(__dst);
      sub_181BCECA4(v5, v4);
      unint64_t v8 = sub_181C9420C(v6, v7);
      unint64_t v10 = v9;
      sub_181BCECE0(v5, v4);
      uint64_t result = (uint64_t)sub_181C63D84(__dst);
      unint64_t v6 = v8;
      unint64_t v7 = v10;
    }
  }

  else
  {
    unint64_t v6 = 0LL;
    unint64_t v7 = 0LL;
  }

  *a2 = v6;
  a2[1] = v7;
  return result;
}

uint64_t (*HTTPRequest.authority.modify(unint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = (unint64_t)v1;
  uint64_t v3 = v1[15];
  if (v3)
  {
    uint64_t v4 = v1[14];
    unint64_t v5 = v1[19];
    unint64_t v6 = v1[20];
    if ((sub_181BCE7EC(v5, v6) & 1) != 0)
    {
      swift_bridgeObjectRetain();
    }

    else
    {
      sub_181BCECA4(v4, v3);
      unint64_t v7 = sub_181C9420C(v5, v6);
      unint64_t v9 = v8;
      sub_181BCECE0(v4, v3);
      unint64_t v5 = v7;
      unint64_t v6 = v9;
    }
  }

  else
  {
    unint64_t v5 = 0LL;
    unint64_t v6 = 0LL;
  }

  *a1 = v5;
  a1[1] = v6;
  return sub_181CAD2A4;
}

uint64_t sub_181CAD2A4(uint64_t *a1, char a2)
{
  return sub_181CADB60(a1, a2, (uint64_t (*)(uint64_t, uint64_t))HTTPRequest.authority.setter);
}

unint64_t HTTPRequest.path.getter()
{
  uint64_t v1 = v0[22];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v0[21];
  unint64_t v3 = v0[26];
  unint64_t v4 = v0[27];
  if ((sub_181BCE7EC(v3, v4) & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }

  else
  {
    sub_181BCECA4(v2, v1);
    unint64_t v5 = sub_181C9420C(v3, v4);
    sub_181BCECE0(v2, v1);
    return v5;
  }

  return v3;
}

uint64_t sub_181CAD398@<X0>(void *__src@<X0>, unint64_t *a2@<X8>)
{
  uint64_t result = (uint64_t)memcpy(__dst, __src, 0x120uLL);
  uint64_t v4 = __dst[22];
  if (__dst[22])
  {
    uint64_t v5 = __dst[21];
    unint64_t v6 = __dst[26];
    unint64_t v7 = __dst[27];
    if ((sub_181BCE7EC(__dst[26], __dst[27]) & 1) != 0)
    {
      uint64_t result = swift_bridgeObjectRetain();
    }

    else
    {
      sub_181C0F308(__dst);
      sub_181BCECA4(v5, v4);
      unint64_t v8 = sub_181C9420C(v6, v7);
      unint64_t v10 = v9;
      sub_181BCECE0(v5, v4);
      uint64_t result = (uint64_t)sub_181C63D84(__dst);
      unint64_t v6 = v8;
      unint64_t v7 = v10;
    }
  }

  else
  {
    unint64_t v6 = 0LL;
    unint64_t v7 = 0LL;
  }

  *a2 = v6;
  a2[1] = v7;
  return result;
}

uint64_t (*HTTPRequest.path.modify(unint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = (unint64_t)v1;
  uint64_t v3 = v1[22];
  if (v3)
  {
    uint64_t v4 = v1[21];
    unint64_t v5 = v1[26];
    unint64_t v6 = v1[27];
    if ((sub_181BCE7EC(v5, v6) & 1) != 0)
    {
      swift_bridgeObjectRetain();
    }

    else
    {
      sub_181BCECA4(v4, v3);
      unint64_t v7 = sub_181C9420C(v5, v6);
      unint64_t v9 = v8;
      sub_181BCECE0(v4, v3);
      unint64_t v5 = v7;
      unint64_t v6 = v9;
    }
  }

  else
  {
    unint64_t v5 = 0LL;
    unint64_t v6 = 0LL;
  }

  *a1 = v5;
  a1[1] = v6;
  return sub_181CAD598;
}

uint64_t sub_181CAD598(uint64_t *a1, char a2)
{
  return sub_181CADB60(a1, a2, (uint64_t (*)(uint64_t, uint64_t))HTTPRequest.path.setter);
}

unint64_t HTTPRequest.extendedConnectProtocol.getter()
{
  uint64_t v1 = v0[29];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v0[28];
  unint64_t v3 = v0[33];
  unint64_t v4 = v0[34];
  if ((sub_181BCE7EC(v3, v4) & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }

  else
  {
    sub_181BCECA4(v2, v1);
    unint64_t v5 = sub_181C9420C(v3, v4);
    sub_181BCECE0(v2, v1);
    return v5;
  }

  return v3;
}

uint64_t sub_181CAD68C@<X0>(void *__src@<X0>, unint64_t *a2@<X8>)
{
  uint64_t result = (uint64_t)memcpy(__dst, __src, 0x120uLL);
  uint64_t v4 = __dst[29];
  if (__dst[29])
  {
    uint64_t v5 = __dst[28];
    unint64_t v6 = __dst[33];
    unint64_t v7 = __dst[34];
    if ((sub_181BCE7EC(__dst[33], __dst[34]) & 1) != 0)
    {
      uint64_t result = swift_bridgeObjectRetain();
    }

    else
    {
      sub_181C0F308(__dst);
      sub_181BCECA4(v5, v4);
      unint64_t v8 = sub_181C9420C(v6, v7);
      unint64_t v10 = v9;
      sub_181BCECE0(v5, v4);
      uint64_t result = (uint64_t)sub_181C63D84(__dst);
      unint64_t v6 = v8;
      unint64_t v7 = v10;
    }
  }

  else
  {
    unint64_t v6 = 0LL;
    unint64_t v7 = 0LL;
  }

  *a2 = v6;
  a2[1] = v7;
  return result;
}

uint64_t HTTPRequest.extendedConnectProtocol.setter(unint64_t a1, unint64_t a2)
{
  unint64_t v3 = (void *)v2;
  if (!a2)
  {
    uint64_t result = sub_181BCECE0(*(void *)(v2 + 224), *(void *)(v2 + 232));
    *(void *)(v2 + 272) = 0LL;
    *(_OWORD *)(v2 + 240) = 0u;
    *(_OWORD *)(v2 + 256) = 0u;
    *(_OWORD *)(v2 + 224) = 0u;
    return result;
  }

  unint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v6 = v3[29];
  if (v6)
  {
    uint64_t v7 = v3[28];
    uint64_t v17 = v3[30];
    uint64_t v15 = v3[31];
    uint64_t v16 = v3[32];
    if ((sub_181BCE7EC(a1, a2) & 1) != 0)
    {
      sub_181BCECA4(v7, v6);
    }

    else
    {
      sub_181BCECA4(v7, v6);
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C548);
      sub_181CAC80C();
      sub_18264EB14();
      swift_bridgeObjectRelease();
      uint64_t v5 = 0LL;
      unint64_t v4 = 0xE000000000000000LL;
    }

    uint64_t v9 = sub_181C024EC(v5, v4);
    uint64_t v11 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17 == 0x6F636F746F72703ALL && v15 == 0xE90000000000006CLL)
    {
      unsigned __int8 v13 = v16;
      uint64_t result = sub_181BCECE0(v7, v6);
    }

    else
    {
      char v14 = sub_18264F4EC();
      unsigned __int8 v13 = v16;
      uint64_t result = sub_181BCECE0(v7, v6);
      if ((v14 & 1) == 0)
      {
        __break(1u);
        return result;
      }
    }

    v3[28] = v7;
    v3[29] = v6;
    v3[30] = v17;
    v3[31] = v15;
    v3[32] = v13;
  }

  else
  {
    if ((sub_181BCE7EC(a1, a2) & 1) == 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C548);
      sub_181CAC80C();
      sub_18264EB14();
      swift_bridgeObjectRelease();
      uint64_t v5 = 0LL;
      unint64_t v4 = 0xE000000000000000LL;
    }

    uint64_t v9 = sub_181C024EC(v5, v4);
    uint64_t v11 = v10;
    uint64_t result = swift_bridgeObjectRelease();
    *((_OWORD *)v3 + 14) = xmmword_182663860;
    *((_OWORD *)v3 + 15) = xmmword_182663860;
    v3[32] = 0LL;
  }

  v3[33] = v9;
  v3[34] = v11;
  return result;
}

uint64_t (*HTTPRequest.extendedConnectProtocol.modify(unint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = (unint64_t)v1;
  uint64_t v3 = v1[29];
  if (v3)
  {
    uint64_t v4 = v1[28];
    unint64_t v5 = v1[33];
    unint64_t v6 = v1[34];
    if ((sub_181BCE7EC(v5, v6) & 1) != 0)
    {
      swift_bridgeObjectRetain();
    }

    else
    {
      sub_181BCECA4(v4, v3);
      unint64_t v7 = sub_181C9420C(v5, v6);
      unint64_t v9 = v8;
      sub_181BCECE0(v4, v3);
      unint64_t v5 = v7;
      unint64_t v6 = v9;
    }
  }

  else
  {
    unint64_t v5 = 0LL;
    unint64_t v6 = 0LL;
  }

  *a1 = v5;
  a1[1] = v6;
  return sub_181CADB54;
}

uint64_t sub_181CADB54(uint64_t *a1, char a2)
{
  return sub_181CADB60(a1, a2, (uint64_t (*)(uint64_t, uint64_t))HTTPRequest.extendedConnectProtocol.setter);
}

uint64_t sub_181CADB60(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if ((a2 & 1) == 0) {
    return a3(*a1, v4);
  }
  swift_bridgeObjectRetain();
  a3(v5, v4);
  return swift_bridgeObjectRelease();
}

uint64_t HTTPRequest.PseudoHeaderFields.method.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  char v6 = *((_BYTE *)v1 + 32);
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_181CADC0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  char v7 = *(_BYTE *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  v11[0] = *(void *)a1;
  uint64_t v4 = v11[0];
  v11[1] = v3;
  v11[2] = v6;
  v11[3] = v5;
  char v12 = v7;
  uint64_t v13 = v9;
  uint64_t v14 = v8;
  sub_181CADCC8(v11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v5;
  *(_BYTE *)(a2 + 32) = v7;
  *(void *)(a2 + 40) = v9;
  *(void *)(a2 + 48) = v8;
  return result;
}

uint64_t sub_181CADCC8(void *a1)
{
  uint64_t result = a1[2];
  unint64_t v3 = a1[5];
  unint64_t v4 = a1[6];
  if (result != 0x646F6874656D3ALL || a1[3] != 0xE700000000000000LL)
  {
    uint64_t result = sub_18264F4EC();
    if ((result & 1) == 0) {
      goto LABEL_13;
    }
  }

  uint64_t v6 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000LL) == 0) {
    uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v6)
  {
    __break(1u);
    goto LABEL_12;
  }

  uint64_t result = sub_181C2B750(v3, v4);
  if ((result & 1) == 0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }

  return result;
}

void (*HTTPRequest.PseudoHeaderFields.method.modify(void *a1))(uint64_t **a1, char a2)
{
  unint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[7] = v1;
  uint64_t v5 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  char v8 = *((_BYTE *)v1 + 32);
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  *unint64_t v3 = v5;
  v3[1] = v4;
  v3[2] = v6;
  v3[3] = v7;
  *((_BYTE *)v3 + 32) = v8;
  v3[5] = v9;
  v3[6] = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_181CADDF0;
}

void sub_181CADDF0(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v5 = (*a1)[2];
  uint64_t v6 = (*a1)[3];
  char v15 = *((_BYTE *)*a1 + 32);
  unint64_t v7 = (*a1)[5];
  unint64_t v8 = (*a1)[6];
  BOOL v10 = v5 == 0x646F6874656D3ALL && v6 == 0xE700000000000000LL;
  if ((a2 & 1) != 0)
  {
    if (!v10 && (sub_18264F4EC() & 1) == 0) {
      goto LABEL_27;
    }
    uint64_t v11 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000LL) == 0) {
      uint64_t v11 = v7 & 0xFFFFFFFFFFFFLL;
    }
    if (v11)
    {
      if ((sub_181C2B750(v7, v8) & 1) != 0)
      {
        uint64_t v12 = v2[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)uint64_t v12 = v4;
        *(void *)(v12 + 8) = v3;
        *(void *)(v12 + 16) = v5;
        *(void *)(v12 + 24) = v6;
        *(_BYTE *)(v12 + 32) = v15;
        *(void *)(v12 + 40) = v7;
        *(void *)(v12 + 48) = v8;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_22:
        free(v2);
        return;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

  else
  {
    if (!v10 && (sub_18264F4EC() & 1) == 0) {
      goto LABEL_28;
    }
    uint64_t v13 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000LL) == 0) {
      uint64_t v13 = v7 & 0xFFFFFFFFFFFFLL;
    }
    if (v13)
    {
      if ((sub_181C2B750(v7, v8) & 1) != 0)
      {
        uint64_t v14 = v2[7];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)uint64_t v14 = v4;
        *(void *)(v14 + 8) = v3;
        *(void *)(v14 + 16) = v5;
        *(void *)(v14 + 24) = v6;
        *(_BYTE *)(v14 + 32) = v15;
        *(void *)(v14 + 40) = v7;
        *(void *)(v14 + 48) = v8;
        goto LABEL_22;
      }

      goto LABEL_26;
    }
  }

  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
}

uint64_t HTTPRequest.PseudoHeaderFields.scheme.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[7];
  uint64_t v3 = v1[8];
  uint64_t v4 = v1[9];
  uint64_t v5 = v1[10];
  uint64_t v6 = v1[11];
  uint64_t v7 = v1[12];
  uint64_t v8 = v1[13];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  return sub_181BCECA4(v2, v3);
}

uint64_t sub_181CAE010@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[7];
  uint64_t v2 = a1[8];
  uint64_t v4 = a1[9];
  uint64_t v5 = a1[10];
  uint64_t v6 = a1[11];
  uint64_t v7 = a1[12];
  uint64_t v8 = a1[13];
  *a2 = v3;
  a2[1] = v2;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v7;
  a2[6] = v8;
  return sub_181BCECA4(v3, v2);
}

uint64_t sub_181CAE038(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v9 = a1[6];
  if (!v3) {
    goto LABEL_7;
  }
  if (v5 == 0x656D656863733ALL && v6 == 0xE700000000000000LL) {
    goto LABEL_7;
  }
  uint64_t v11 = a1[2];
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  uint64_t v14 = a1[5];
  uint64_t v15 = a1[6];
  uint64_t result = sub_18264F4EC();
  uint64_t v9 = v15;
  uint64_t v8 = v14;
  uint64_t v7 = v13;
  uint64_t v6 = v12;
  uint64_t v5 = v11;
  if ((result & 1) != 0)
  {
LABEL_7:
    uint64_t v17 = a2[7];
    uint64_t v18 = a2[8];
    uint64_t v27 = v3;
    uint64_t v19 = v4;
    uint64_t v20 = v3;
    uint64_t v21 = v4;
    uint64_t v22 = v5;
    uint64_t v23 = v6;
    uint64_t v24 = v7;
    uint64_t v25 = v8;
    uint64_t v26 = v9;
    sub_181BCECA4(v19, v20);
    uint64_t result = sub_181BCECE0(v17, v18);
    a2[7] = v21;
    a2[8] = v27;
    a2[9] = v22;
    a2[10] = v23;
    a2[11] = v24;
    a2[12] = v25;
    a2[13] = v26;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void (*HTTPRequest.PseudoHeaderFields.scheme.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  uint64_t v4 = v1[7];
  uint64_t v5 = v1[8];
  uint64_t v6 = v1[9];
  uint64_t v7 = v1[10];
  uint64_t v8 = v1[11];
  uint64_t v9 = v1[12];
  uint64_t v10 = v1[13];
  *uint64_t v3 = v4;
  v3[1] = v5;
  v3[2] = v6;
  v3[3] = v7;
  v3[4] = v8;
  v3[5] = v9;
  v3[6] = v10;
  v3[7] = v1;
  sub_181BCECA4(v4, v5);
  return sub_181CAE1F0;
}

void sub_181CAE1F0(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v5 = (*a1)[2];
  uint64_t v6 = (*a1)[3];
  uint64_t v8 = (*a1)[4];
  uint64_t v7 = (*a1)[5];
  uint64_t v9 = (*a1)[6];
  if ((a2 & 1) != 0)
  {
    if (!v3
      || (v5 == 0x656D656863733ALL ? (BOOL v10 = v6 == 0xE700000000000000LL) : (BOOL v10 = 0), v10 || (sub_18264F4EC() & 1) != 0))
    {
      uint64_t v11 = (void *)v2[7];
      uint64_t v12 = v11[8];
      uint64_t v15 = v11[7];
      sub_181BCECA4(v4, v3);
      sub_181BCECE0(v15, v12);
      v11[7] = v4;
      v11[8] = v3;
      v11[9] = v5;
      v11[10] = v6;
      v11[11] = v8;
      v11[12] = v7;
      v11[13] = v9;
      sub_181BCECE0(*v2, v2[1]);
LABEL_16:
      free(v2);
      return;
    }

    __break(1u);
  }

  else if (!v3 {
         || (v5 == 0x656D656863733ALL ? (BOOL v13 = v6 == 0xE700000000000000LL) : (BOOL v13 = 0), v13
  }
                                                                                     || (sub_18264F4EC() & 1) != 0))
  {
    uint64_t v14 = (uint64_t *)v2[7];
    sub_181BCECE0(v14[7], v14[8]);
    v14[7] = v4;
    v14[8] = v3;
    v14[9] = v5;
    v14[10] = v6;
    v14[11] = v8;
    v14[12] = v7;
    v14[13] = v9;
    goto LABEL_16;
  }

  __break(1u);
}

uint64_t HTTPRequest.PseudoHeaderFields.authority.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[14];
  uint64_t v3 = v1[15];
  uint64_t v4 = v1[16];
  uint64_t v5 = v1[17];
  uint64_t v6 = v1[18];
  uint64_t v7 = v1[19];
  uint64_t v8 = v1[20];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  return sub_181BCECA4(v2, v3);
}

uint64_t sub_181CAE3BC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[14];
  uint64_t v2 = a1[15];
  uint64_t v4 = a1[16];
  uint64_t v5 = a1[17];
  uint64_t v6 = a1[18];
  uint64_t v7 = a1[19];
  uint64_t v8 = a1[20];
  *a2 = v3;
  a2[1] = v2;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v7;
  a2[6] = v8;
  return sub_181BCECA4(v3, v2);
}

uint64_t sub_181CAE3E4(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v9 = a1[6];
  if (!v3) {
    goto LABEL_7;
  }
  if (v5 == 0x69726F687475613ALL && v6 == 0xEA00000000007974LL) {
    goto LABEL_7;
  }
  uint64_t v11 = a1[2];
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  uint64_t v14 = a1[5];
  uint64_t v15 = a1[6];
  uint64_t result = sub_18264F4EC();
  uint64_t v9 = v15;
  uint64_t v8 = v14;
  uint64_t v7 = v13;
  uint64_t v6 = v12;
  uint64_t v5 = v11;
  if ((result & 1) != 0)
  {
LABEL_7:
    uint64_t v17 = a2[14];
    uint64_t v18 = a2[15];
    uint64_t v19 = v4;
    uint64_t v20 = v3;
    uint64_t v27 = v3;
    uint64_t v21 = v4;
    uint64_t v22 = v5;
    uint64_t v23 = v6;
    uint64_t v24 = v7;
    uint64_t v25 = v8;
    uint64_t v26 = v9;
    sub_181BCECA4(v19, v20);
    uint64_t result = sub_181BCECE0(v17, v18);
    a2[14] = v21;
    a2[15] = v27;
    a2[16] = v22;
    a2[17] = v23;
    a2[18] = v24;
    a2[19] = v25;
    a2[20] = v26;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void (*HTTPRequest.PseudoHeaderFields.authority.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  uint64_t v4 = v1[14];
  uint64_t v5 = v1[15];
  uint64_t v6 = v1[16];
  uint64_t v7 = v1[17];
  uint64_t v8 = v1[18];
  uint64_t v9 = v1[19];
  uint64_t v10 = v1[20];
  *uint64_t v3 = v4;
  v3[1] = v5;
  v3[2] = v6;
  v3[3] = v7;
  v3[4] = v8;
  v3[5] = v9;
  v3[6] = v10;
  v3[7] = v1;
  sub_181BCECA4(v4, v5);
  return sub_181CAE5A0;
}

void sub_181CAE5A0(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v5 = (*a1)[2];
  uint64_t v6 = (*a1)[3];
  uint64_t v8 = (*a1)[4];
  uint64_t v7 = (*a1)[5];
  uint64_t v9 = (*a1)[6];
  if ((a2 & 1) != 0)
  {
    if (!v3
      || (v5 == 0x69726F687475613ALL ? (BOOL v10 = v6 == 0xEA00000000007974LL) : (BOOL v10 = 0), v10 || (sub_18264F4EC() & 1) != 0))
    {
      uint64_t v11 = (void *)v2[7];
      uint64_t v12 = v11[15];
      uint64_t v15 = v11[14];
      sub_181BCECA4(v4, v3);
      sub_181BCECE0(v15, v12);
      v11[14] = v4;
      v11[15] = v3;
      v11[16] = v5;
      v11[17] = v6;
      v11[18] = v8;
      v11[19] = v7;
      v11[20] = v9;
      sub_181BCECE0(*v2, v2[1]);
LABEL_16:
      free(v2);
      return;
    }

    __break(1u);
  }

  else if (!v3 {
         || (v5 == 0x69726F687475613ALL ? (BOOL v13 = v6 == 0xEA00000000007974LL) : (BOOL v13 = 0),
  }
             v13 || (sub_18264F4EC() & 1) != 0))
  {
    uint64_t v14 = (uint64_t *)v2[7];
    sub_181BCECE0(v14[14], v14[15]);
    v14[14] = v4;
    v14[15] = v3;
    v14[16] = v5;
    v14[17] = v6;
    v14[18] = v8;
    v14[19] = v7;
    v14[20] = v9;
    goto LABEL_16;
  }

  __break(1u);
}

uint64_t HTTPRequest.PseudoHeaderFields.path.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[21];
  uint64_t v3 = v1[22];
  uint64_t v4 = v1[23];
  uint64_t v5 = v1[24];
  uint64_t v6 = v1[25];
  uint64_t v7 = v1[26];
  uint64_t v8 = v1[27];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  return sub_181BCECA4(v2, v3);
}

uint64_t sub_181CAE77C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[21];
  uint64_t v2 = a1[22];
  uint64_t v4 = a1[23];
  uint64_t v5 = a1[24];
  uint64_t v6 = a1[25];
  uint64_t v7 = a1[26];
  uint64_t v8 = a1[27];
  *a2 = v3;
  a2[1] = v2;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v7;
  a2[6] = v8;
  return sub_181BCECA4(v3, v2);
}

uint64_t sub_181CAE7A4(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v9 = a1[6];
  if (!v3) {
    goto LABEL_7;
  }
  if (v5 == 0x687461703ALL && v6 == 0xE500000000000000LL) {
    goto LABEL_7;
  }
  uint64_t v11 = a1[2];
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  uint64_t v14 = a1[5];
  uint64_t v15 = a1[6];
  uint64_t result = sub_18264F4EC();
  uint64_t v9 = v15;
  uint64_t v8 = v14;
  uint64_t v7 = v13;
  uint64_t v6 = v12;
  uint64_t v5 = v11;
  if ((result & 1) != 0)
  {
LABEL_7:
    uint64_t v17 = a2[21];
    uint64_t v18 = a2[22];
    uint64_t v27 = v3;
    uint64_t v19 = v4;
    uint64_t v20 = v3;
    uint64_t v21 = v4;
    uint64_t v22 = v5;
    uint64_t v23 = v6;
    uint64_t v24 = v7;
    uint64_t v25 = v8;
    uint64_t v26 = v9;
    sub_181BCECA4(v19, v20);
    uint64_t result = sub_181BCECE0(v17, v18);
    a2[21] = v21;
    a2[22] = v27;
    a2[23] = v22;
    a2[24] = v23;
    a2[25] = v24;
    a2[26] = v25;
    a2[27] = v26;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void (*HTTPRequest.PseudoHeaderFields.path.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  uint64_t v4 = v1[21];
  uint64_t v5 = v1[22];
  uint64_t v6 = v1[23];
  uint64_t v7 = v1[24];
  uint64_t v8 = v1[25];
  uint64_t v9 = v1[26];
  uint64_t v10 = v1[27];
  *uint64_t v3 = v4;
  v3[1] = v5;
  v3[2] = v6;
  v3[3] = v7;
  v3[4] = v8;
  v3[5] = v9;
  v3[6] = v10;
  v3[7] = v1;
  sub_181BCECA4(v4, v5);
  return sub_181CAE954;
}

void sub_181CAE954(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v5 = (*a1)[2];
  uint64_t v6 = (*a1)[3];
  uint64_t v8 = (*a1)[4];
  uint64_t v7 = (*a1)[5];
  uint64_t v9 = (*a1)[6];
  if ((a2 & 1) != 0)
  {
    if (!v3
      || (v5 == 0x687461703ALL ? (BOOL v10 = v6 == 0xE500000000000000LL) : (BOOL v10 = 0), v10 || (sub_18264F4EC() & 1) != 0))
    {
      uint64_t v11 = (void *)v2[7];
      uint64_t v12 = v11[22];
      uint64_t v15 = v11[21];
      sub_181BCECA4(v4, v3);
      sub_181BCECE0(v15, v12);
      v11[21] = v4;
      v11[22] = v3;
      v11[23] = v5;
      v11[24] = v6;
      v11[25] = v8;
      v11[26] = v7;
      v11[27] = v9;
      sub_181BCECE0(*v2, v2[1]);
LABEL_16:
      free(v2);
      return;
    }

    __break(1u);
  }

  else if (!v3 {
         || (v5 == 0x687461703ALL ? (BOOL v13 = v6 == 0xE500000000000000LL) : (BOOL v13 = 0), v13 || (sub_18264F4EC() & 1) != 0))
  }
  {
    uint64_t v14 = (uint64_t *)v2[7];
    sub_181BCECE0(v14[21], v14[22]);
    v14[21] = v4;
    v14[22] = v3;
    v14[23] = v5;
    v14[24] = v6;
    v14[25] = v8;
    v14[26] = v7;
    v14[27] = v9;
    goto LABEL_16;
  }

  __break(1u);
}

uint64_t HTTPRequest.PseudoHeaderFields.extendedConnectProtocol.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[28];
  uint64_t v3 = v1[29];
  uint64_t v4 = v1[30];
  uint64_t v5 = v1[31];
  uint64_t v6 = v1[32];
  uint64_t v7 = v1[33];
  uint64_t v8 = v1[34];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  return sub_181BCECA4(v2, v3);
}

uint64_t sub_181CAEB10@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[28];
  uint64_t v2 = a1[29];
  uint64_t v4 = a1[30];
  uint64_t v5 = a1[31];
  uint64_t v6 = a1[32];
  uint64_t v7 = a1[33];
  uint64_t v8 = a1[34];
  *a2 = v3;
  a2[1] = v2;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v7;
  a2[6] = v8;
  return sub_181BCECA4(v3, v2);
}

uint64_t sub_181CAEB38(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v9 = a1[6];
  if (!v3) {
    goto LABEL_7;
  }
  if (v5 == 0x6F636F746F72703ALL && v6 == 0xE90000000000006CLL) {
    goto LABEL_7;
  }
  uint64_t v11 = a1[2];
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  uint64_t v14 = a1[5];
  uint64_t v15 = a1[6];
  uint64_t result = sub_18264F4EC();
  uint64_t v9 = v15;
  uint64_t v8 = v14;
  uint64_t v7 = v13;
  uint64_t v6 = v12;
  uint64_t v5 = v11;
  if ((result & 1) != 0)
  {
LABEL_7:
    uint64_t v17 = a2[28];
    uint64_t v18 = a2[29];
    uint64_t v19 = v4;
    uint64_t v20 = v3;
    uint64_t v27 = v3;
    uint64_t v21 = v4;
    uint64_t v22 = v5;
    uint64_t v23 = v6;
    uint64_t v24 = v7;
    uint64_t v25 = v8;
    uint64_t v26 = v9;
    sub_181BCECA4(v19, v20);
    uint64_t result = sub_181BCECE0(v17, v18);
    a2[28] = v21;
    a2[29] = v27;
    a2[30] = v22;
    a2[31] = v23;
    a2[32] = v24;
    a2[33] = v25;
    a2[34] = v26;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void (*HTTPRequest.PseudoHeaderFields.extendedConnectProtocol.modify( void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  uint64_t v4 = v1[28];
  uint64_t v5 = v1[29];
  uint64_t v6 = v1[30];
  uint64_t v7 = v1[31];
  uint64_t v8 = v1[32];
  uint64_t v9 = v1[33];
  uint64_t v10 = v1[34];
  *uint64_t v3 = v4;
  v3[1] = v5;
  v3[2] = v6;
  v3[3] = v7;
  v3[4] = v8;
  v3[5] = v9;
  v3[6] = v10;
  v3[7] = v1;
  sub_181BCECA4(v4, v5);
  return sub_181CAECF4;
}

void sub_181CAECF4(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v5 = (*a1)[2];
  uint64_t v6 = (*a1)[3];
  uint64_t v8 = (*a1)[4];
  uint64_t v7 = (*a1)[5];
  uint64_t v9 = (*a1)[6];
  if ((a2 & 1) != 0)
  {
    if (!v3
      || (v5 == 0x6F636F746F72703ALL ? (BOOL v10 = v6 == 0xE90000000000006CLL) : (BOOL v10 = 0), v10 || (sub_18264F4EC() & 1) != 0))
    {
      uint64_t v11 = (void *)v2[7];
      uint64_t v12 = v11[29];
      uint64_t v15 = v11[28];
      sub_181BCECA4(v4, v3);
      sub_181BCECE0(v15, v12);
      v11[28] = v4;
      v11[29] = v3;
      v11[30] = v5;
      v11[31] = v6;
      v11[32] = v8;
      v11[33] = v7;
      v11[34] = v9;
      sub_181BCECE0(*v2, v2[1]);
LABEL_16:
      free(v2);
      return;
    }

    __break(1u);
  }

  else if (!v3 {
         || (v5 == 0x6F636F746F72703ALL ? (BOOL v13 = v6 == 0xE90000000000006CLL) : (BOOL v13 = 0),
  }
             v13 || (sub_18264F4EC() & 1) != 0))
  {
    uint64_t v14 = (uint64_t *)v2[7];
    sub_181BCECE0(v14[28], v14[29]);
    v14[28] = v4;
    v14[29] = v3;
    v14[30] = v5;
    v14[31] = v6;
    v14[32] = v8;
    v14[33] = v7;
    v14[34] = v9;
    goto LABEL_16;
  }

  __break(1u);
}

uint64_t HTTPRequest.PseudoHeaderFields.hash(into:)()
{
  uint64_t v1 = v0[8];
  uint64_t v6 = v0[7];
  uint64_t v7 = v0[14];
  uint64_t v10 = v0[15];
  uint64_t v8 = v0[21];
  uint64_t v11 = v0[22];
  uint64_t v12 = v0[29];
  uint64_t v9 = v0[28];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_18264EB44();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_18264F660();
  swift_bridgeObjectRetain();
  sub_18264EB44();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (v1)
  {
    sub_18264F660();
    sub_181BCECA4(v6, v1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_18264EB44();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_18264F660();
    swift_bridgeObjectRetain();
    sub_18264EB44();
    swift_bridgeObjectRelease();
    sub_181BCECE0(v6, v1);
    uint64_t v3 = v10;
    uint64_t v2 = v11;
    if (v10) {
      goto LABEL_3;
    }
  }

  else
  {
    sub_18264F660();
    uint64_t v3 = v10;
    uint64_t v2 = v11;
    if (v10)
    {
LABEL_3:
      sub_18264F660();
      sub_181BCECA4(v7, v3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_18264EB44();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_18264F660();
      swift_bridgeObjectRetain();
      sub_18264EB44();
      swift_bridgeObjectRelease();
      sub_181BCECE0(v7, v3);
      if (v2) {
        goto LABEL_4;
      }
LABEL_8:
      sub_18264F660();
      uint64_t v4 = v12;
      if (v12) {
        goto LABEL_5;
      }
      return sub_18264F660();
    }
  }

  sub_18264F660();
  if (!v2) {
    goto LABEL_8;
  }
LABEL_4:
  sub_18264F660();
  sub_181BCECA4(v8, v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_18264EB44();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_18264F660();
  swift_bridgeObjectRetain();
  sub_18264EB44();
  swift_bridgeObjectRelease();
  sub_181BCECE0(v8, v2);
  uint64_t v4 = v12;
  if (v12)
  {
LABEL_5:
    sub_18264F660();
    sub_181BCECA4(v9, v4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_18264EB44();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_18264F660();
    swift_bridgeObjectRetain();
    sub_18264EB44();
    swift_bridgeObjectRelease();
    return sub_181BCECE0(v9, v4);
  }

  return sub_18264F660();
}

uint64_t HTTPRequest.PseudoHeaderFields.hashValue.getter()
{
  return sub_18264F684();
}

uint64_t sub_181CAF3A0()
{
  return sub_18264F684();
}

uint64_t sub_181CAF3E0()
{
  return sub_18264F684();
}

void *HTTPRequest.pseudoHeaderFields.getter@<X0>(void *a1@<X8>)
{
  return sub_181CB1B1C(v4);
}

void *HTTPRequest.pseudoHeaderFields.setter(const void *a1)
{
  return memcpy(v1, a1, 0x118uLL);
}

uint64_t (*HTTPRequest.pseudoHeaderFields.modify())()
{
  return nullsub_1;
}

uint64_t HTTPRequest.headerFields.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 280);
  return swift_retain();
}

uint64_t HTTPRequest.headerFields.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_release();
  *(void *)(v1 + 280) = v2;
  return result;
}

uint64_t (*HTTPRequest.headerFields.modify())()
{
  return nullsub_1;
}

uint64_t HTTPRequest.hash(into:)()
{
  return swift_release();
}

uint64_t HTTPRequest.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 280);
  sub_18264F648();
  HTTPRequest.PseudoHeaderFields.hash(into:)();
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = v2 + 80;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_18264EB44();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_18264F660();
      swift_bridgeObjectRetain();
      sub_18264EB44();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v4 += 64LL;
      --v3;
    }

    while (v3);
    swift_bridgeObjectRelease();
  }

  return sub_18264F684();
}

uint64_t sub_181CAF680()
{
  uint64_t v1 = *(void *)(v0 + 280);
  HTTPRequest.PseudoHeaderFields.hash(into:)();
  uint64_t result = swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = v3 + 80;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_18264EB44();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_18264F660();
      swift_bridgeObjectRetain();
      sub_18264EB44();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v5 += 64LL;
      --v4;
    }

    while (v4);
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_181CAF79C()
{
  return sub_18264F684();
}

uint64_t HTTPRequest.debugDescription.getter()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[8];
  unint64_t v4 = v0[12];
  unint64_t v3 = v0[13];
  uint64_t v11 = v0[14];
  unint64_t v5 = v0[20];
  unint64_t v14 = v0[19];
  uint64_t v15 = v0[15];
  uint64_t v16 = v0[22];
  uint64_t v12 = v0[21];
  unint64_t v6 = v0[27];
  unint64_t v13 = v0[26];
  swift_bridgeObjectRetain();
  sub_18264EB74();
  swift_bridgeObjectRelease();
  sub_18264EB74();
  if (v2)
  {
    if ((sub_181BCE7EC(v4, v3) & 1) != 0)
    {
      swift_bridgeObjectRetain();
    }

    else
    {
      sub_181BCECA4(v1, v2);
      sub_181C9420C(v4, v3);
      sub_181BCECE0(v1, v2);
    }

    uint64_t v8 = v15;
    uint64_t v7 = v16;
    unint64_t v9 = v14;
    swift_bridgeObjectRetain();
    sub_18264EB74();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v8 = v15;
    uint64_t v7 = v16;
    unint64_t v9 = v14;
  }

  sub_18264EB74();
  swift_bridgeObjectRelease();
  if (v8)
  {
    if ((sub_181BCE7EC(v9, v5) & 1) != 0)
    {
      swift_bridgeObjectRetain();
    }

    else
    {
      sub_181BCECA4(v11, v8);
      sub_181C9420C(v9, v5);
      uint64_t v7 = v16;
      sub_181BCECE0(v11, v8);
    }
  }

  sub_18264EB74();
  swift_bridgeObjectRelease();
  if (v7)
  {
    if ((sub_181BCE7EC(v13, v6) & 1) != 0)
    {
      swift_bridgeObjectRetain();
    }

    else
    {
      sub_181BCECA4(v12, v7);
      sub_181C9420C(v13, v6);
      sub_181BCECE0(v12, v7);
    }
  }

  sub_18264EB74();
  swift_bridgeObjectRelease();
  return 40LL;
}

uint64_t HTTPRequest.PseudoHeaderFields.encode(to:)(void *a1)
{
  uint64_t v9 = v1[8];
  uint64_t v6 = v1[15];
  uint64_t v5 = v1[22];
  uint64_t v4 = v1[29];
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_18264F6F0();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
  sub_181C252C4();
  sub_18264F4BC();
  if (!v2)
  {
    if (v9)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
      sub_18264F4BC();
    }

    if (v6)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
      sub_18264F4BC();
    }

    if (v5)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
      sub_18264F4BC();
    }

    if (v4)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
      sub_18264F4BC();
    }
  }

  return __swift_destroy_boxed_opaque_existential_2((uint64_t)v7);
}

uint64_t HTTPRequest.PseudoHeaderFields.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1;
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_18264F6C0();
  if (v2) {
    goto LABEL_68;
  }
  __swift_project_boxed_opaque_existential_2(v63, v64);
  if ((sub_18264F4A4() & 1) != 0)
  {
    uint64_t v49 = 0LL;
    uint64_t v50 = 0LL;
    unint64_t v66 = 0LL;
    uint64_t v44 = 0LL;
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
LABEL_4:
    sub_181BCECE0(v9, v8);
    sub_181BCECE0(v7, v6);
    sub_181BCECE0(v5, v44);
    sub_181BCECE0(v49, v50);
    sub_181BCD38C((uint64_t)v63, (uint64_t)&v56);
    sub_18264F204();
    swift_allocError();
    sub_18264F1E0();
    __swift_destroy_boxed_opaque_existential_2((uint64_t)&v56);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_2((uint64_t)v63);
    goto LABEL_68;
  }

  uint64_t v21 = (uint64_t)v3;
  unint64_t v41 = 0LL;
  unint64_t v42 = 0LL;
  unint64_t v39 = 0LL;
  unsigned __int8 v40 = 0;
  uint64_t v37 = 0LL;
  uint64_t v38 = 0LL;
  uint64_t v43 = 0LL;
  unint64_t v54 = 0LL;
  unint64_t v55 = 0LL;
  uint64_t v53 = 0LL;
  uint64_t v51 = 0LL;
  unint64_t v52 = 0LL;
  uint64_t v49 = 0LL;
  uint64_t v50 = 0LL;
  uint64_t v47 = 0LL;
  unint64_t v48 = 0LL;
  unint64_t v10 = 0LL;
  uint64_t v45 = 0LL;
  unint64_t v46 = 0LL;
  uint64_t v44 = 0LL;
  unint64_t v35 = 0LL;
  uint64_t v36 = 0LL;
  uint64_t v33 = 0LL;
  unint64_t v34 = 0LL;
  uint64_t v31 = 0LL;
  unint64_t v32 = 0LL;
  uint64_t v29 = 0LL;
  uint64_t v30 = 0LL;
  unint64_t v27 = 0LL;
  unint64_t v28 = 0LL;
  unint64_t v25 = 0LL;
  uint64_t v26 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v24 = 0LL;
  uint64_t v22 = 0LL;
LABEL_6:
  unint64_t v66 = v10;
  do
  {
    while (1)
    {
      while (1)
      {
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v63, v64);
        sub_181C25308();
        sub_18264F498();
        unint64_t v11 = v59;
        unint64_t v13 = v61;
        unint64_t v12 = v62;
        if (v58 != 0x646F6874656D3ALL || v59 != 0xE700000000000000LL) {
          break;
        }
        unint64_t v11 = 0xE700000000000000LL;
LABEL_28:
        sub_181BCECE0(v37, v43);
        if (v43)
        {
          sub_181BCECE0(v22, v23);
          sub_181BCECE0(v29, v30);
          sub_181BCECE0(v36, v44);
          sub_181BCECE0(v49, v50);
          sub_181BCD38C((uint64_t)v63, (uint64_t)&v56);
          sub_18264F204();
          swift_allocError();
          goto LABEL_65;
        }

        __swift_project_boxed_opaque_existential_2(v63, v64);
        unint64_t v41 = v61;
        unint64_t v42 = v62;
        unint64_t v39 = v11;
        unsigned __int8 v40 = v60;
        uint64_t v37 = v56;
        uint64_t v38 = v58;
        uint64_t v43 = v57;
        if ((sub_18264F4A4() & 1) != 0)
        {
          uint64_t v37 = v56;
          uint64_t v38 = v58;
          unint64_t v42 = v62;
          uint64_t v43 = v57;
          unint64_t v39 = v11;
          unsigned __int8 v40 = v60;
          unint64_t v41 = v61;
          goto LABEL_53;
        }
      }

      if ((sub_18264F4EC() & 1) != 0) {
        goto LABEL_28;
      }
      if (v58 == 0x656D656863733ALL && v59 == 0xE700000000000000LL) {
        break;
      }
      if ((sub_18264F4EC() & 1) != 0) {
        goto LABEL_32;
      }
      if (v58 == 0x69726F687475613ALL && v59 == 0xEA00000000007974LL)
      {
        unint64_t v11 = 0xEA00000000007974LL;
LABEL_36:
        sub_181BCECE0(v36, v44);
        if (v44)
        {
          sub_181BCECE0(v22, v23);
          sub_181BCECE0(v29, v30);
          sub_181BCECE0(v49, v50);
          sub_181BCECE0(v37, v43);
          sub_181BCD38C((uint64_t)v63, (uint64_t)&v56);
          sub_18264F204();
          swift_allocError();
          goto LABEL_65;
        }

        unint64_t v66 = v65;
        __swift_project_boxed_opaque_existential_2(v63, v64);
        uint64_t v47 = v60;
        unint64_t v48 = v62;
        unint64_t v10 = v61;
        uint64_t v45 = v58;
        unint64_t v46 = v11;
        uint64_t v44 = v57;
        uint64_t v36 = v56;
        if ((sub_18264F4A4() & 1) == 0) {
          goto LABEL_6;
        }
        uint64_t v36 = v56;
        uint64_t v44 = v57;
        uint64_t v45 = v58;
        unint64_t v46 = v11;
        uint64_t v47 = v60;
        unint64_t v10 = v61;
        unint64_t v48 = v62;
        goto LABEL_54;
      }

      if ((sub_18264F4EC() & 1) != 0) {
        goto LABEL_36;
      }
      if (v58 == 0x687461703ALL && v59 == 0xE500000000000000LL)
      {
        unint64_t v11 = 0xE500000000000000LL;
LABEL_40:
        sub_181BCECE0(v29, v30);
        if (v30)
        {
          sub_181BCECE0(v22, v23);
          sub_181BCECE0(v36, v44);
          sub_181BCECE0(v49, v50);
          sub_181BCECE0(v37, v43);
          sub_181BCD38C((uint64_t)v63, (uint64_t)&v56);
          sub_18264F204();
          swift_allocError();
          goto LABEL_65;
        }

        __swift_project_boxed_opaque_existential_2(v63, v64);
        char v16 = sub_18264F4A4();
        unint64_t v34 = v61;
        unint64_t v35 = v62;
        unint64_t v32 = v11;
        uint64_t v33 = v60;
        uint64_t v30 = v57;
        uint64_t v31 = v58;
        uint64_t v29 = v56;
        unint64_t v10 = v66;
        if ((v16 & 1) == 0) {
          goto LABEL_6;
        }
        uint64_t v29 = v56;
        uint64_t v30 = v57;
        uint64_t v31 = v58;
        unint64_t v32 = v11;
        uint64_t v33 = v60;
        unint64_t v34 = v61;
        unint64_t v35 = v62;
        goto LABEL_54;
      }

      if ((sub_18264F4EC() & 1) != 0) {
        goto LABEL_40;
      }
      if (v58 == 0x6F636F746F72703ALL && v59 == 0xE90000000000006CLL)
      {
        unint64_t v11 = 0xE90000000000006CLL;
LABEL_44:
        sub_181BCECE0(v22, v23);
        if (!v23)
        {
          __swift_project_boxed_opaque_existential_2(v63, v64);
          char v17 = sub_18264F4A4();
          unint64_t v27 = v61;
          unint64_t v28 = v62;
          unint64_t v25 = v11;
          uint64_t v26 = v60;
          uint64_t v23 = v57;
          uint64_t v24 = v58;
          uint64_t v22 = v56;
          unint64_t v10 = v66;
          if ((v17 & 1) == 0) {
            goto LABEL_6;
          }
          goto LABEL_54;
        }

        sub_181BCECE0(v29, v30);
        sub_181BCECE0(v36, v44);
        sub_181BCECE0(v49, v50);
        sub_181BCECE0(v37, v43);
        sub_181BCD38C((uint64_t)v63, (uint64_t)&v56);
        sub_18264F204();
        swift_allocError();
LABEL_65:
        sub_18264F1E0();
LABEL_66:
        __swift_destroy_boxed_opaque_existential_2((uint64_t)&v56);
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_67;
      }

      if ((sub_18264F4EC() & 1) != 0) {
        goto LABEL_44;
      }
      swift_bridgeObjectRetain();
      char v15 = sub_18264EBE0();
      swift_bridgeObjectRelease();
      if ((v15 & 1) == 0)
      {
        sub_181BCECE0(v22, v23);
        sub_181BCECE0(v29, v30);
        sub_181BCECE0(v36, v44);
        sub_181BCECE0(v49, v50);
        sub_181BCECE0(v37, v43);
        sub_181BCD38C((uint64_t)v63, (uint64_t)&v56);
        sub_18264F168();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_18264EB74();
        if ((sub_181BCE7EC(v13, v12) & 1) != 0)
        {
          swift_bridgeObjectRetain();
        }

        else
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_181C9420C(v13, v12);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }

        sub_18264EB74();
        swift_bridgeObjectRelease();
        sub_18264EB74();
        swift_bridgeObjectRelease();
        sub_18264EB74();
        sub_18264F204();
        swift_allocError();
        sub_18264F1E0();
        swift_bridgeObjectRelease();
        goto LABEL_66;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_project_boxed_opaque_existential_2(v63, v64);
      if ((sub_18264F4A4() & 1) != 0) {
        goto LABEL_53;
      }
    }

    unint64_t v11 = 0xE700000000000000LL;
LABEL_32:
    sub_181BCECE0(v49, v50);
    if (v50)
    {
      sub_181BCECE0(v22, v23);
      sub_181BCECE0(v29, v30);
      sub_181BCECE0(v36, v44);
      sub_181BCECE0(v37, v43);
      sub_181BCD38C((uint64_t)v63, (uint64_t)&v56);
      sub_18264F204();
      swift_allocError();
      goto LABEL_65;
    }

    __swift_project_boxed_opaque_existential_2(v63, v64);
    unint64_t v54 = v61;
    unint64_t v55 = v62;
    uint64_t v53 = v60;
    uint64_t v51 = v58;
    unint64_t v52 = v11;
    uint64_t v49 = v56;
    uint64_t v50 = v57;
  }

  while ((sub_18264F4A4() & 1) == 0);
  uint64_t v49 = v56;
  uint64_t v50 = v57;
  uint64_t v51 = v58;
  unint64_t v52 = v11;
  uint64_t v53 = v60;
  unint64_t v54 = v61;
  unint64_t v55 = v62;
LABEL_53:
  unint64_t v10 = v66;
LABEL_54:
  if (!v43)
  {
    unint64_t v3 = (void *)v21;
    unint64_t v66 = v10;
    uint64_t v5 = v36;
    uint64_t v7 = v29;
    uint64_t v6 = v30;
    uint64_t v8 = v23;
    uint64_t v9 = v22;
    goto LABEL_4;
  }

  uint64_t v18 = HIBYTE(v42) & 0xF;
  if ((v42 & 0x2000000000000000LL) == 0) {
    uint64_t v18 = v41 & 0xFFFFFFFFFFFFLL;
  }
  if (v18 && (sub_181C2B750(v41, v42) & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_2((uint64_t)v63);
    *(void *)a2 = v37;
    *(void *)(a2 + 8) = v43;
    *(void *)(a2 + 16) = v38;
    *(void *)(a2 + 24) = v39;
    *(_BYTE *)(a2 + 32) = v40;
    *(void *)(a2 + 40) = v41;
    *(void *)(a2 + 48) = v42;
    *(void *)(a2 + 56) = v49;
    *(void *)(a2 + 64) = v50;
    *(void *)(a2 + 72) = v51;
    *(void *)(a2 + 80) = v52;
    *(void *)(a2 + 88) = v53;
    *(void *)(a2 + 96) = v54;
    *(void *)(a2 + 104) = v55;
    *(void *)(a2 + 112) = v36;
    *(void *)(a2 + 120) = v44;
    *(void *)(a2 + 128) = v45;
    *(void *)(a2 + 136) = v46;
    *(void *)(a2 + 144) = v47;
    *(void *)(a2 + 152) = v10;
    *(void *)(a2 + 160) = v48;
    *(void *)(a2 + 168) = v29;
    *(void *)(a2 + 176) = v30;
    *(void *)(a2 + 184) = v31;
    *(void *)(a2 + 192) = v32;
    *(void *)(a2 + 200) = v33;
    *(void *)(a2 + 208) = v34;
    uint64_t v19 = v21;
    *(void *)(a2 + 216) = v35;
    *(void *)(a2 + 224) = v22;
    *(void *)(a2 + 232) = v23;
    *(void *)(a2 + 240) = v24;
    *(void *)(a2 + 248) = v25;
    *(void *)(a2 + 256) = v26;
    *(void *)(a2 + 264) = v27;
    *(void *)(a2 + 272) = v28;
    return __swift_destroy_boxed_opaque_existential_2(v19);
  }

  sub_181BCECE0(v22, v23);
  sub_181BCECE0(v29, v30);
  sub_181BCECE0(v36, v44);
  sub_181BCECE0(v49, v50);
  sub_181BCD38C((uint64_t)v63, (uint64_t)&v56);
  sub_18264F168();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_18264EB74();
  sub_181BCECE0(v37, v43);
  swift_bridgeObjectRelease();
  sub_18264EB74();
  sub_18264F204();
  swift_allocError();
  sub_18264F1E0();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_2((uint64_t)&v56);
  swift_willThrow();
LABEL_67:
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v63);
  unint64_t v3 = (void *)v21;
LABEL_68:
  uint64_t v19 = (uint64_t)v3;
  return __swift_destroy_boxed_opaque_existential_2(v19);
}

uint64_t sub_181CB0CB8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return HTTPRequest.PseudoHeaderFields.init(from:)(a1, a2);
}

uint64_t sub_181CB0CCC(void *a1)
{
  return HTTPRequest.PseudoHeaderFields.encode(to:)(a1);
}

uint64_t sub_181CB0CE0(char *a1, char *a2)
{
  return sub_181CAB3A8(*a1, *a2);
}

uint64_t sub_181CB0CEC()
{
  return sub_18264F684();
}

uint64_t sub_181CB0D78()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_181CB0DE0()
{
  return sub_18264F684();
}

uint64_t sub_181CB0E68@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_18264F390();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_181CB0EC4(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0xD000000000000012LL;
  if (*v1) {
    unint64_t v2 = 0x6946726564616568LL;
  }
  unint64_t v3 = 0x800000018272DBB0LL;
  if (*v1) {
    unint64_t v3 = 0xEC00000073646C65LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_181CB0F10()
{
  if (*v0) {
    return 0x6946726564616568LL;
  }
  else {
    return 0xD000000000000012LL;
  }
}

uint64_t sub_181CB0F58@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_18264F390();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_181CB0FB8()
{
  return sub_18264F738();
}

uint64_t sub_181CB0FE0()
{
  return sub_18264F744();
}

uint64_t HTTPRequest.encode(to:)(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EFE0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = v3[35];
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_181CB1DC4();
  sub_18264F714();
  memcpy(v12, v3, sizeof(v12));
  char v13 = 0;
  sub_181CB1E08();
  sub_18264F45C();
  if (!v2)
  {
    v12[0] = v11;
    char v13 = 1;
    sub_181C729C8();
    sub_18264F45C();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void *HTTPRequest.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EFF8);
  uint64_t v5 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v7 = (char *)&v13[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_181CB1DC4();
  sub_18264F6E4();
  if (v2) {
    return (void *)__swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  }
  uint64_t v8 = a2;
  v18[303] = 0;
  sub_181CB1E4C();
  uint64_t v9 = v12;
  sub_18264F3F0();
  memcpy(v16, v17, sizeof(v16));
  memcpy(v18, v17, 0x118uLL);
  v18[302] = 1;
  sub_181CB1B1C(v16);
  sub_181C72A94();
  sub_18264F3F0();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v9);
  uint64_t v10 = v15;
  memcpy(v13, v16, 0x118uLL);
  v13[35] = v15;
  sub_181C0F308(v13);
  sub_181CB1C70(v16);
  memcpy(v8, v13, 0x120uLL);
  __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  memcpy(v14, v18, 0x118uLL);
  v14[35] = v10;
  return sub_181C63D84(v14);
}

void *sub_181CB13A4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return HTTPRequest.init(from:)(a1, a2);
}

uint64_t sub_181CB13B8(void *a1)
{
  return HTTPRequest.encode(to:)(a1);
}

BOOL _s7Network11HTTPRequestV18PseudoHeaderFieldsV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v70 = *(void *)(a1 + 56);
  uint64_t v76 = *(void *)(a1 + 72);
  uint64_t v78 = *(void *)(a1 + 80);
  uint64_t v79 = *(void *)(a1 + 64);
  uint64_t v74 = *(void *)(a1 + 96);
  uint64_t v75 = *(void *)(a1 + 88);
  uint64_t v77 = *(void *)(a1 + 104);
  uint64_t v56 = *(void *)(a1 + 112);
  uint64_t v71 = *(void *)(a1 + 120);
  uint64_t v67 = *(void *)(a1 + 136);
  uint64_t v64 = *(void *)(a1 + 144);
  uint64_t v65 = *(void *)(a1 + 128);
  uint64_t v60 = *(void *)(a1 + 152);
  uint64_t v66 = *(void *)(a1 + 160);
  uint64_t v43 = *(void *)(a1 + 168);
  uint64_t v57 = *(void *)(a1 + 176);
  uint64_t v53 = *(void *)(a1 + 192);
  uint64_t v50 = *(void *)(a1 + 200);
  uint64_t v51 = *(void *)(a1 + 184);
  uint64_t v46 = *(void *)(a1 + 208);
  uint64_t v52 = *(void *)(a1 + 216);
  uint64_t v29 = *(void *)(a1 + 224);
  uint64_t v38 = *(void *)(a1 + 240);
  uint64_t v40 = *(void *)(a1 + 232);
  uint64_t v41 = *(void *)(a1 + 248);
  uint64_t v37 = *(void *)(a1 + 256);
  uint64_t v32 = *(void *)(a1 + 264);
  uint64_t v33 = *(void *)(a1 + 272);
  int v5 = *(unsigned __int8 *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 64);
  uint64_t v69 = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 72);
  uint64_t v9 = *(void *)(a2 + 80);
  uint64_t v11 = *(void *)(a2 + 88);
  uint64_t v72 = *(void *)(a2 + 104);
  uint64_t v73 = *(void *)(a2 + 96);
  uint64_t v55 = *(void *)(a2 + 112);
  uint64_t v68 = *(void *)(a2 + 120);
  uint64_t v62 = *(void *)(a2 + 128);
  uint64_t v63 = *(void *)(a2 + 136);
  uint64_t v61 = *(void *)(a2 + 144);
  uint64_t v58 = *(void *)(a2 + 160);
  uint64_t v59 = *(void *)(a2 + 152);
  uint64_t v42 = *(void *)(a2 + 168);
  uint64_t v54 = *(void *)(a2 + 176);
  uint64_t v48 = *(void *)(a2 + 184);
  uint64_t v49 = *(void *)(a2 + 192);
  uint64_t v47 = *(void *)(a2 + 200);
  uint64_t v44 = *(void *)(a2 + 216);
  uint64_t v45 = *(void *)(a2 + 208);
  uint64_t v28 = *(void *)(a2 + 224);
  uint64_t v39 = *(void *)(a2 + 232);
  uint64_t v35 = *(void *)(a2 + 240);
  uint64_t v36 = *(void *)(a2 + 248);
  uint64_t v34 = *(void *)(a2 + 256);
  uint64_t v30 = *(void *)(a2 + 264);
  uint64_t v31 = *(void *)(a2 + 272);
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24))
  {
    if (v2 != v5) {
      return 0LL;
    }
  }

  else
  {
    char v12 = sub_18264F4EC();
    BOOL result = 0LL;
    if ((v12 & 1) == 0 || v2 != v5) {
      return result;
    }
  }

  if (v3 != v6 || v4 != v7)
  {
    char v14 = sub_18264F4EC();
    BOOL result = 0LL;
    if ((v14 & 1) == 0) {
      return result;
    }
  }

  if (!v79)
  {
    if (!v8) {
      goto LABEL_25;
    }
LABEL_19:
    sub_181BCECA4(v69, v8);
    sub_181BCECE0(v70, v79);
    uint64_t v15 = v69;
    uint64_t v16 = v8;
LABEL_51:
    sub_181BCECE0(v15, v16);
    return 0LL;
  }

  if (!v8)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_19;
  }

  if (v76 == v10 && v78 == v9)
  {
  }

  else
  {
    char v17 = sub_18264F4EC();
    BOOL result = 0LL;
  }

  if (v74 != v73 || v77 != v72)
  {
    char v18 = sub_18264F4EC();
    BOOL result = 0LL;
    if ((v18 & 1) == 0) {
      return result;
    }
  }

uint64_t _s7Network11HTTPRequestV2eeoiySbAC_ACtFZ_0(uint64_t *__src, void *a2)
{
  uint64_t v4 = __src[35];
  memcpy(v8, a2, sizeof(v8));
  uint64_t v5 = a2[35];
  swift_retain();
  swift_retain();
  char v6 = sub_181C24B78(v4, v5);
  swift_release();
  swift_release();
  return v6 & 1;
}

void *sub_181CB1B1C(void *a1)
{
  uint64_t v2 = a1[7];
  uint64_t v3 = a1[8];
  uint64_t v5 = a1[15];
  uint64_t v6 = a1[14];
  uint64_t v7 = a1[22];
  uint64_t v8 = a1[21];
  uint64_t v9 = a1[29];
  uint64_t v10 = a1[28];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_181BCECA4(v2, v3);
  sub_181BCECA4(v6, v5);
  sub_181BCECA4(v8, v7);
  sub_181BCECA4(v10, v9);
  return a1;
}

void *sub_181CB1C70(void *a1)
{
  uint64_t v2 = a1[7];
  uint64_t v3 = a1[8];
  uint64_t v5 = a1[15];
  uint64_t v6 = a1[14];
  uint64_t v7 = a1[22];
  uint64_t v8 = a1[21];
  uint64_t v9 = a1[29];
  uint64_t v10 = a1[28];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_181BCECE0(v2, v3);
  sub_181BCECE0(v6, v5);
  sub_181BCECE0(v8, v7);
  sub_181BCECE0(v10, v9);
  return a1;
}

unint64_t sub_181CB1DC4()
{
  unint64_t result = qword_18C58EFE8;
  if (!qword_18C58EFE8)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182665B40, &type metadata for HTTPRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EFE8);
  }

  return result;
}

unint64_t sub_181CB1E08()
{
  unint64_t result = qword_18C58EFF0;
  if (!qword_18C58EFF0)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for HTTPRequest.PseudoHeaderFields,  &type metadata for HTTPRequest.PseudoHeaderFields);
    atomic_store(result, (unint64_t *)&qword_18C58EFF0);
  }

  return result;
}

unint64_t sub_181CB1E4C()
{
  unint64_t result = qword_18C58F000;
  if (!qword_18C58F000)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for HTTPRequest.PseudoHeaderFields,  &type metadata for HTTPRequest.PseudoHeaderFields);
    atomic_store(result, (unint64_t *)&qword_18C58F000);
  }

  return result;
}

unint64_t sub_181CB1E94()
{
  unint64_t result = qword_18C58F008;
  if (!qword_18C58F008)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for HTTPRequest.Method,  &type metadata for HTTPRequest.Method);
    atomic_store(result, (unint64_t *)&qword_18C58F008);
  }

  return result;
}

unint64_t sub_181CB1EDC()
{
  unint64_t result = qword_18C58F010;
  if (!qword_18C58F010)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for HTTPRequest.Method,  &type metadata for HTTPRequest.Method);
    atomic_store(result, (unint64_t *)&qword_18C58F010);
  }

  return result;
}

unint64_t sub_181CB1F24()
{
  unint64_t result = qword_18C58F018;
  if (!qword_18C58F018)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for HTTPRequest.PseudoHeaderFields,  &type metadata for HTTPRequest.PseudoHeaderFields);
    atomic_store(result, (unint64_t *)&qword_18C58F018);
  }

  return result;
}

unint64_t sub_181CB1F6C()
{
  unint64_t result = qword_18C58F020;
  if (!qword_18C58F020)
  {
    unint64_t result = MEMORY[0x186E12084](&protocol conformance descriptor for HTTPRequest, &type metadata for HTTPRequest);
    atomic_store(result, (unint64_t *)&qword_18C58F020);
  }

  return result;
}

uint64_t sub_181CB1FB0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_181CB1FC4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))HTTPRequest.scheme.setter);
}

uint64_t sub_181CB1FD4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))HTTPRequest.authority.setter);
}

uint64_t sub_181CB1FE4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))HTTPRequest.path.setter);
}

uint64_t sub_181CB1FF4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_38Tm( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, uint64_t))HTTPRequest.extendedConnectProtocol.setter);
}

uint64_t destroy for HTTPRequest(void *a1)
{
  if (a1[8])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (a1[15])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (a1[22])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (a1[29])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_release();
}

uint64_t initializeWithCopy for HTTPRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  uint64_t v7 = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = v7;
    uint64_t v8 = *(void *)(a2 + 80);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = v8;
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    uint64_t v9 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v10 = *(void *)(a2 + 120);
    if (v10) {
      goto LABEL_3;
    }
  }

  else
  {
    __int128 v19 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v19;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    uint64_t v10 = *(void *)(a2 + 120);
    if (v10)
    {
LABEL_3:
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = v10;
      uint64_t v11 = *(void *)(a2 + 136);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = v11;
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      uint64_t v12 = *(void *)(a2 + 160);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v13 = *(void *)(a2 + 176);
      if (v13) {
        goto LABEL_4;
      }
LABEL_8:
      __int128 v21 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = v21;
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      uint64_t v16 = *(void *)(a2 + 232);
      if (v16) {
        goto LABEL_5;
      }
LABEL_9:
      __int128 v22 = *(_OWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 240) = v22;
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      goto LABEL_10;
    }
  }

  __int128 v20 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v20;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  uint64_t v13 = *(void *)(a2 + 176);
  if (!v13) {
    goto LABEL_8;
  }
LABEL_4:
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v13;
  uint64_t v14 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v14;
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  uint64_t v15 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v16 = *(void *)(a2 + 232);
  if (!v16) {
    goto LABEL_9;
  }
LABEL_5:
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v16;
  uint64_t v17 = *(void *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v17;
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  uint64_t v18 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_10:
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for HTTPRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 56);
  uint64_t v5 = (__int128 *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64))
  {
    if (v6)
    {
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_181CB27C8(a1 + 56);
      __int128 v8 = *(_OWORD *)(a2 + 72);
      __int128 v7 = *(_OWORD *)(a2 + 88);
      __int128 v9 = *v5;
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(_OWORD *)(a1 + 72) = v8;
      *(_OWORD *)(a1 + 88) = v7;
      _OWORD *v4 = v9;
    }
  }

  else if (v6)
  {
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v10 = *v5;
    __int128 v11 = *(_OWORD *)(a2 + 72);
    __int128 v12 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)(a1 + 72) = v11;
    *(_OWORD *)(a1 + 88) = v12;
    _OWORD *v4 = v10;
  }

  uint64_t v13 = (_OWORD *)(a1 + 112);
  uint64_t v14 = (__int128 *)(a2 + 112);
  uint64_t v15 = *(void *)(a2 + 120);
  if (*(void *)(a1 + 120))
  {
    if (v15)
    {
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_181CB27C8(a1 + 112);
      __int128 v17 = *(_OWORD *)(a2 + 128);
      __int128 v16 = *(_OWORD *)(a2 + 144);
      __int128 v18 = *v14;
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(_OWORD *)(a1 + 128) = v17;
      *(_OWORD *)(a1 + 144) = v16;
      *uint64_t v13 = v18;
    }
  }

  else if (v15)
  {
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v19 = *v14;
    __int128 v20 = *(_OWORD *)(a2 + 128);
    __int128 v21 = *(_OWORD *)(a2 + 144);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(_OWORD *)(a1 + 128) = v20;
    *(_OWORD *)(a1 + 144) = v21;
    *uint64_t v13 = v19;
  }

  __int128 v22 = (_OWORD *)(a1 + 168);
  char v23 = (__int128 *)(a2 + 168);
  uint64_t v24 = *(void *)(a2 + 176);
  if (*(void *)(a1 + 176))
  {
    if (v24)
    {
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_181CB27C8(a1 + 168);
      __int128 v26 = *(_OWORD *)(a2 + 184);
      __int128 v25 = *(_OWORD *)(a2 + 200);
      __int128 v27 = *v23;
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      *(_OWORD *)(a1 + 184) = v26;
      *(_OWORD *)(a1 + 200) = v25;
      *__int128 v22 = v27;
    }
  }

  else if (v24)
  {
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v28 = *v23;
    __int128 v29 = *(_OWORD *)(a2 + 184);
    __int128 v30 = *(_OWORD *)(a2 + 200);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(_OWORD *)(a1 + 184) = v29;
    *(_OWORD *)(a1 + 200) = v30;
    *__int128 v22 = v28;
  }

  uint64_t v31 = (_OWORD *)(a1 + 224);
  uint64_t v32 = (__int128 *)(a2 + 224);
  uint64_t v33 = *(void *)(a2 + 232);
  if (*(void *)(a1 + 232))
  {
    if (v33)
    {
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(void *)(a1 + 248) = *(void *)(a2 + 248);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
      *(void *)(a1 + 264) = *(void *)(a2 + 264);
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_181CB27C8(a1 + 224);
      __int128 v35 = *(_OWORD *)(a2 + 240);
      __int128 v34 = *(_OWORD *)(a2 + 256);
      __int128 v36 = *v32;
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      *(_OWORD *)(a1 + 240) = v35;
      *(_OWORD *)(a1 + 256) = v34;
      *uint64_t v31 = v36;
    }
  }

  else if (v33)
  {
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v37 = *v32;
    __int128 v38 = *(_OWORD *)(a2 + 240);
    __int128 v39 = *(_OWORD *)(a2 + 256);
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(_OWORD *)(a1 + 240) = v38;
    *(_OWORD *)(a1 + 256) = v39;
    *uint64_t v31 = v37;
  }

  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_181CB27C8(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for HTTPRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 64))
  {
    uint64_t v7 = *(void *)(a2 + 64);
    if (v7)
    {
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = v7;
      swift_bridgeObjectRelease();
      uint64_t v8 = *(void *)(a2 + 80);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = v8;
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      uint64_t v9 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = v9;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }

    sub_181CB27C8(a1 + 56);
  }

  __int128 v10 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v10;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
LABEL_6:
  if (*(void *)(a1 + 120))
  {
    uint64_t v11 = *(void *)(a2 + 120);
    if (v11)
    {
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = v11;
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void *)(a2 + 136);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = v12;
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      uint64_t v13 = *(void *)(a2 + 160);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = v13;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }

    sub_181CB27C8(a1 + 112);
  }

  __int128 v14 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v14;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
LABEL_11:
  if (*(void *)(a1 + 176))
  {
    uint64_t v15 = *(void *)(a2 + 176);
    if (v15)
    {
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = v15;
      swift_bridgeObjectRelease();
      uint64_t v16 = *(void *)(a2 + 192);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = v16;
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
      uint64_t v17 = *(void *)(a2 + 216);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(void *)(a1 + 216) = v17;
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }

    sub_181CB27C8(a1 + 168);
  }

  __int128 v18 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v18;
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
LABEL_16:
  if (!*(void *)(a1 + 232))
  {
LABEL_20:
    __int128 v22 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v22;
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    goto LABEL_21;
  }

  uint64_t v19 = *(void *)(a2 + 232);
  if (!v19)
  {
    sub_181CB27C8(a1 + 224);
    goto LABEL_20;
  }

  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v19;
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v20;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  uint64_t v21 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v21;
  swift_bridgeObjectRelease();
LABEL_21:
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPRequest(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 288)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 280) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 288) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 288) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for HTTPRequest()
{
  return &type metadata for HTTPRequest;
}

ValueMetadata *type metadata accessor for HTTPRequest.Method()
{
  return &type metadata for HTTPRequest.Method;
}

uint64_t destroy for HTTPRequest.PseudoHeaderFields(void *a1)
{
  if (a1[8])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (a1[15])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (a1[22])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  uint64_t result = a1[29];
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t initializeWithCopy for HTTPRequest.PseudoHeaderFields(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  uint64_t v7 = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = v7;
    uint64_t v8 = *(void *)(a2 + 80);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = v8;
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    uint64_t v9 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v10 = *(void *)(a2 + 120);
    if (v10) {
      goto LABEL_3;
    }
  }

  else
  {
    __int128 v20 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v20;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    uint64_t v10 = *(void *)(a2 + 120);
    if (v10)
    {
LABEL_3:
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = v10;
      uint64_t v11 = *(void *)(a2 + 136);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = v11;
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      uint64_t v12 = *(void *)(a2 + 160);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v13 = *(void *)(a2 + 176);
      if (v13) {
        goto LABEL_4;
      }
LABEL_8:
      __int128 v22 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = v22;
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      uint64_t v16 = *(void *)(a2 + 232);
      if (v16) {
        goto LABEL_5;
      }
LABEL_9:
      __int128 v23 = *(_OWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 240) = v23;
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      return a1;
    }
  }

  __int128 v21 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v21;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  uint64_t v13 = *(void *)(a2 + 176);
  if (!v13) {
    goto LABEL_8;
  }
LABEL_4:
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v13;
  uint64_t v14 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v14;
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  uint64_t v15 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v16 = *(void *)(a2 + 232);
  if (!v16) {
    goto LABEL_9;
  }
LABEL_5:
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v16;
  uint64_t v17 = *(void *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v17;
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  uint64_t v18 = *(void *)(a2 + 264);
  uint64_t v19 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = v18;
  *(void *)(a1 + 272) = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HTTPRequest.PseudoHeaderFields(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 56);
  uint64_t v5 = (__int128 *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64))
  {
    if (v6)
    {
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_181CB27C8(a1 + 56);
      __int128 v8 = *(_OWORD *)(a2 + 72);
      __int128 v7 = *(_OWORD *)(a2 + 88);
      __int128 v9 = *v5;
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(_OWORD *)(a1 + 72) = v8;
      *(_OWORD *)(a1 + 88) = v7;
      _OWORD *v4 = v9;
    }
  }

  else if (v6)
  {
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v10 = *v5;
    __int128 v11 = *(_OWORD *)(a2 + 72);
    __int128 v12 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)(a1 + 72) = v11;
    *(_OWORD *)(a1 + 88) = v12;
    _OWORD *v4 = v10;
  }

  uint64_t v13 = (_OWORD *)(a1 + 112);
  uint64_t v14 = (__int128 *)(a2 + 112);
  uint64_t v15 = *(void *)(a2 + 120);
  if (*(void *)(a1 + 120))
  {
    if (v15)
    {
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_181CB27C8(a1 + 112);
      __int128 v17 = *(_OWORD *)(a2 + 128);
      __int128 v16 = *(_OWORD *)(a2 + 144);
      __int128 v18 = *v14;
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(_OWORD *)(a1 + 128) = v17;
      *(_OWORD *)(a1 + 144) = v16;
      *uint64_t v13 = v18;
    }
  }

  else if (v15)
  {
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v19 = *v14;
    __int128 v20 = *(_OWORD *)(a2 + 128);
    __int128 v21 = *(_OWORD *)(a2 + 144);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(_OWORD *)(a1 + 128) = v20;
    *(_OWORD *)(a1 + 144) = v21;
    *uint64_t v13 = v19;
  }

  __int128 v22 = (_OWORD *)(a1 + 168);
  __int128 v23 = (__int128 *)(a2 + 168);
  uint64_t v24 = *(void *)(a2 + 176);
  if (*(void *)(a1 + 176))
  {
    if (v24)
    {
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_181CB27C8(a1 + 168);
      __int128 v26 = *(_OWORD *)(a2 + 184);
      __int128 v25 = *(_OWORD *)(a2 + 200);
      __int128 v27 = *v23;
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      *(_OWORD *)(a1 + 184) = v26;
      *(_OWORD *)(a1 + 200) = v25;
      *__int128 v22 = v27;
    }
  }

  else if (v24)
  {
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v28 = *v23;
    __int128 v29 = *(_OWORD *)(a2 + 184);
    __int128 v30 = *(_OWORD *)(a2 + 200);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(_OWORD *)(a1 + 184) = v29;
    *(_OWORD *)(a1 + 200) = v30;
    *__int128 v22 = v28;
  }

  uint64_t v31 = (_OWORD *)(a1 + 224);
  uint64_t v32 = (__int128 *)(a2 + 224);
  uint64_t v33 = *(void *)(a2 + 232);
  if (*(void *)(a1 + 232))
  {
    if (v33)
    {
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(void *)(a1 + 248) = *(void *)(a2 + 248);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
      *(void *)(a1 + 264) = *(void *)(a2 + 264);
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_181CB27C8(a1 + 224);
      __int128 v35 = *(_OWORD *)(a2 + 240);
      __int128 v34 = *(_OWORD *)(a2 + 256);
      __int128 v36 = *v32;
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      *(_OWORD *)(a1 + 240) = v35;
      *(_OWORD *)(a1 + 256) = v34;
      *uint64_t v31 = v36;
    }
  }

  else if (v33)
  {
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v37 = *v32;
    __int128 v38 = *(_OWORD *)(a2 + 240);
    __int128 v39 = *(_OWORD *)(a2 + 256);
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(_OWORD *)(a1 + 240) = v38;
    *(_OWORD *)(a1 + 256) = v39;
    *uint64_t v31 = v37;
  }

  return a1;
}

void *__swift_memcpy280_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x118uLL);
}

uint64_t assignWithTake for HTTPRequest.PseudoHeaderFields(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 64))
  {
    uint64_t v7 = *(void *)(a2 + 64);
    if (v7)
    {
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = v7;
      swift_bridgeObjectRelease();
      uint64_t v8 = *(void *)(a2 + 80);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = v8;
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      uint64_t v9 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = v9;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }

    sub_181CB27C8(a1 + 56);
  }

  __int128 v10 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v10;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
LABEL_6:
  if (*(void *)(a1 + 120))
  {
    uint64_t v11 = *(void *)(a2 + 120);
    if (v11)
    {
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = v11;
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void *)(a2 + 136);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = v12;
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      uint64_t v13 = *(void *)(a2 + 160);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = v13;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }

    sub_181CB27C8(a1 + 112);
  }

  __int128 v14 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v14;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
LABEL_11:
  if (*(void *)(a1 + 176))
  {
    uint64_t v15 = *(void *)(a2 + 176);
    if (v15)
    {
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = v15;
      swift_bridgeObjectRelease();
      uint64_t v16 = *(void *)(a2 + 192);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = v16;
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
      uint64_t v17 = *(void *)(a2 + 216);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(void *)(a1 + 216) = v17;
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }

    sub_181CB27C8(a1 + 168);
  }

  __int128 v18 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v18;
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
LABEL_16:
  if (!*(void *)(a1 + 232))
  {
LABEL_20:
    __int128 v22 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v22;
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    return a1;
  }

  uint64_t v19 = *(void *)(a2 + 232);
  if (!v19)
  {
    sub_181CB27C8(a1 + 224);
    goto LABEL_20;
  }

  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v19;
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v20;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  uint64_t v21 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v21;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPRequest.PseudoHeaderFields(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 280)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPRequest.PseudoHeaderFields(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 280) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 280) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for HTTPRequest.PseudoHeaderFields()
{
  return &type metadata for HTTPRequest.PseudoHeaderFields;
}

uint64_t storeEnumTagSinglePayload for HTTPRequest.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_181CB35FC + 4 * byte_182665765[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181CB3630 + 4 * byte_182665760[v4]))();
}

uint64_t sub_181CB3630(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181CB3638(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181CB3640LL);
  }
  return result;
}

uint64_t sub_181CB364C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181CB3654LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_181CB3658(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181CB3660(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HTTPRequest.CodingKeys()
{
  return &type metadata for HTTPRequest.CodingKeys;
}

unint64_t sub_181CB3680()
{
  unint64_t result = qword_18C58F028;
  if (!qword_18C58F028)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182665B18, &type metadata for HTTPRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58F028);
  }

  return result;
}

unint64_t sub_181CB36C8()
{
  unint64_t result = qword_18C58F030;
  if (!qword_18C58F030)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182665A50, &type metadata for HTTPRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58F030);
  }

  return result;
}

unint64_t sub_181CB3710()
{
  unint64_t result = qword_18C58F038;
  if (!qword_18C58F038)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182665A78, &type metadata for HTTPRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58F038);
  }

  return result;
}

uint64_t NWActorDiscoveryMechanism.init(browseDescriptor:browseParameters:connectionParameters:target:)@<X0>( __int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v14 = *a1;
  uint64_t v8 = *((void *)a1 + 2);
  uint64_t v9 = *((void *)a1 + 3);
  char v10 = *((_BYTE *)a1 + 32);
  sub_181CB3800(a4, a5);
  uint64_t result = type metadata accessor for NWActorDiscoveryMechanism(0LL);
  uint64_t v12 = result;
  uint64_t v13 = a5 + *(int *)(result + 20);
  *(_OWORD *)uint64_t v13 = v14;
  *(void *)(v13 + 16) = v8;
  *(void *)(v13 + 24) = v9;
  *(_BYTE *)(v13 + 32) = v10;
  *(void *)(a5 + *(int *)(result + sub_181CA3C40(*(void **)(v0 + 16), *(void *)(v0 + 24)) = a2;
  if (a3) {
    a2 = a3;
  }
  else {
    uint64_t result = swift_retain();
  }
  *(void *)(a5 + *(int *)(v12 + 28)) = a2;
  return result;
}

uint64_t sub_181CB3800(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWActorDiscoveryMechanism.Target(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for NWActorDiscoveryMechanism.Target(uint64_t a1)
{
  return sub_181BD62C8(a1, qword_18C58F148);
}

uint64_t type metadata accessor for NWActorDiscoveryMechanism(uint64_t a1)
{
  return sub_181BD62C8(a1, qword_18C58F098);
}

uint64_t *initializeBufferWithCopyOfBuffer for NWActorDiscoveryMechanism(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v8 + ((v5 + 16LL) & ~(unint64_t)v5));
  }

  else
  {
    type metadata accessor for NWActorDiscoveryMechanism.Target(0LL);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for NWEndpoint();
      uint64_t v7 = (char *)&loc_181CB38F4 + 4 * byte_182665B90[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }

    uint64_t v9 = a2[1];
    uint64_t *v4 = *a2;
    v4[1] = v9;
    swift_retain();
    swift_storeEnumTagMultiPayload();
    uint64_t v10 = a3[5];
    uint64_t v11 = (char *)v4 + v10;
    uint64_t v12 = (char *)a2 + v10;
    unsigned int v13 = v12[32];
    if (v13 <= 0xFD)
    {
      uint64_t v15 = *(void *)v12;
      uint64_t v16 = *((void *)v12 + 1);
      uint64_t v17 = *((void *)v12 + 2);
      uint64_t v18 = *((void *)v12 + 3);
      sub_181BD6344(*(void *)v12, v16, v17, v18, v12[32]);
      *(void *)uint64_t v11 = v15;
      *((void *)v11 + 1) = v16;
      *((void *)v11 + 2) = v17;
      *((void *)v11 + 3) = v18;
      v11[32] = v13;
    }

    else
    {
      __int128 v14 = *((_OWORD *)v12 + 1);
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
      *((_OWORD *)v11 + 1) = v14;
      v11[32] = v12[32];
    }

    uint64_t v19 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)v4 + v19) = *(uint64_t *)((char *)a2 + v19);
    swift_retain();
  }

  swift_retain();
  return v4;
}

uint64_t destroy for NWActorDiscoveryMechanism(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for NWEndpoint();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        sub_181BC6974(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_BYTE *)(a1 + 24));
        break;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(a1 + 48) != 1LL) {
          goto LABEL_9;
        }
        break;
      case 2u:
        swift_bridgeObjectRelease();
        break;
      case 3u:
        uint64_t v4 = sub_18264E568();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
        break;
      case 4u:
LABEL_9:
        swift_unknownObjectRelease();
        break;
      default:
        break;
    }
  }

  else
  {
    swift_release();
  }

  uint64_t v5 = a1 + *(int *)(a2 + 20);
  unsigned int v6 = *(unsigned __int8 *)(v5 + 32);
  if (v6 <= 0xFD) {
    sub_181BD63C8(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), v6);
  }
  swift_release();
  return swift_release();
}

void *initializeWithCopy for NWActorDiscoveryMechanism(void *a1, void *a2, int *a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for NWEndpoint();
    unsigned int v6 = (char *)&loc_181CB3C74 + 4 * byte_182665BA4[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }

  uint64_t v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  swift_retain();
  swift_storeEnumTagMultiPayload();
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  unsigned int v11 = v10[32];
  if (v11 <= 0xFD)
  {
    uint64_t v13 = *(void *)v10;
    uint64_t v14 = *((void *)v10 + 1);
    uint64_t v15 = *((void *)v10 + 2);
    uint64_t v16 = *((void *)v10 + 3);
    sub_181BD6344(*(void *)v10, v14, v15, v16, v10[32]);
    *(void *)uint64_t v9 = v13;
    *((void *)v9 + 1) = v14;
    *((void *)v9 + 2) = v15;
    *((void *)v9 + 3) = v16;
    v9[32] = v11;
  }

  else
  {
    __int128 v12 = *((_OWORD *)v10 + 1);
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    *((_OWORD *)v9 + 1) = v12;
    v9[32] = v10[32];
  }

  uint64_t v17 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v17) = *(void *)((char *)a2 + v17);
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for NWActorDiscoveryMechanism(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_181CB4130((uint64_t)a1);
    type metadata accessor for NWActorDiscoveryMechanism.Target(0LL);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for NWEndpoint();
      unsigned int v6 = (char *)&loc_181CB3EC4 + 4 * byte_182665BA9[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }

    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    swift_retain();
    swift_storeEnumTagMultiPayload();
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = (uint64_t)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  unsigned int v11 = *((unsigned __int8 *)a2 + v8 + 32);
  if (*((unsigned __int8 *)a1 + v8 + 32) <= 0xFDu)
  {
    if (v11 <= 0xFD)
    {
      uint64_t v20 = *(void *)v10;
      uint64_t v21 = *((void *)v10 + 1);
      uint64_t v22 = *((void *)v10 + 2);
      uint64_t v23 = *((void *)v10 + 3);
      sub_181BD6344(v20, v21, v22, v23, v11);
      uint64_t v24 = *(void *)v9;
      uint64_t v25 = *(void *)(v9 + 8);
      uint64_t v26 = *(void *)(v9 + 16);
      uint64_t v27 = *(void *)(v9 + 24);
      *(void *)uint64_t v9 = v20;
      *(void *)(v9 + 8) = v21;
      *(void *)(v9 + 16) = v22;
      *(void *)(v9 + 24) = v23;
      unsigned __int8 v28 = *(_BYTE *)(v9 + 32);
      *(_BYTE *)(v9 + 32) = v11;
      sub_181BD63C8(v24, v25, v26, v27, v28);
    }

    else
    {
      sub_181CB416C(v9);
      char v14 = v10[32];
      __int128 v15 = *((_OWORD *)v10 + 1);
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
      *(_OWORD *)(v9 + 16) = v15;
      *(_BYTE *)(v9 + 32) = v14;
    }
  }

  else if (v11 <= 0xFD)
  {
    uint64_t v16 = *(void *)v10;
    uint64_t v17 = *((void *)v10 + 1);
    uint64_t v18 = *((void *)v10 + 2);
    uint64_t v19 = *((void *)v10 + 3);
    sub_181BD6344(v16, v17, v18, v19, v11);
    *(void *)uint64_t v9 = v16;
    *(void *)(v9 + 8) = v17;
    *(void *)(v9 + 16) = v18;
    *(void *)(v9 + 24) = v19;
    *(_BYTE *)(v9 + 32) = v11;
  }

  else
  {
    __int128 v12 = *(_OWORD *)v10;
    __int128 v13 = *((_OWORD *)v10 + 1);
    *(_BYTE *)(v9 + 32) = v10[32];
    *(_OWORD *)uint64_t v9 = v12;
    *(_OWORD *)(v9 + 16) = v13;
  }

  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_retain();
  swift_release();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_181CB4130(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWActorDiscoveryMechanism.Target(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_181CB416C(uint64_t a1)
{
  return a1;
}

char *initializeWithTake for NWActorDiscoveryMechanism(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for NWActorDiscoveryMechanism.Target(0LL);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for NWEndpoint();
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v8 = sub_18264E568();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
    }

    swift_storeEnumTagMultiPayload();
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64LL));
  }

  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  unsigned int v11 = &a1[v9];
  __int128 v12 = &a2[v9];
  __int128 v13 = *(_OWORD *)v12;
  __int128 v14 = *((_OWORD *)v12 + 1);
  v11[32] = v12[32];
  *(_OWORD *)unsigned int v11 = v13;
  *((_OWORD *)v11 + 1) = v14;
  *(void *)&a1[v10] = *(void *)&a2[v10];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  return a1;
}

unsigned __int8 *assignWithTake for NWActorDiscoveryMechanism(unsigned __int8 *a1, char *a2, int *a3)
{
  if (a1 != (unsigned __int8 *)a2)
  {
    sub_181CB4130((uint64_t)a1);
    uint64_t v6 = type metadata accessor for NWActorDiscoveryMechanism.Target(0LL);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for NWEndpoint();
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v8 = sub_18264E568();
        (*(void (**)(unsigned __int8 *, char *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, a2, v8);
        swift_storeEnumTagMultiPayload();
      }

      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
      }

      swift_storeEnumTagMultiPayload();
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64LL));
    }
  }

  uint64_t v9 = a3[5];
  uint64_t v10 = (uint64_t)&a1[v9];
  unsigned int v11 = &a2[v9];
  unsigned int v12 = a1[v9 + 32];
  if (v12 <= 0xFD)
  {
    unsigned int v13 = v11[32];
    if (v13 <= 0xFD)
    {
      uint64_t v15 = *(void *)v10;
      uint64_t v16 = *(void *)(v10 + 8);
      uint64_t v17 = *(void *)(v10 + 16);
      uint64_t v18 = *(void *)(v10 + 24);
      __int128 v19 = *((_OWORD *)v11 + 1);
      *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
      *(_OWORD *)(v10 + 16) = v19;
      *(_BYTE *)(v10 + 32) = v13;
      sub_181BD63C8(v15, v16, v17, v18, v12);
      goto LABEL_13;
    }

    sub_181CB416C(v10);
  }

  __int128 v14 = *((_OWORD *)v11 + 1);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v14;
  *(_BYTE *)(v10 + 32) = v11[32];
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_release();
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for NWActorDiscoveryMechanism()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181CB443C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NWActorDiscoveryMechanism.Target(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for NWActorDiscoveryMechanism()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181CB44C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for NWActorDiscoveryMechanism.Target(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

uint64_t sub_181CB453C()
{
  uint64_t result = type metadata accessor for NWActorDiscoveryMechanism.Target(319LL);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NWActorDiscoveryMechanism.Target( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for NWEndpoint();
      uint64_t v6 = (char *)&loc_181CB463C + 4 * byte_182665BAE[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }

    uint64_t v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    swift_retain();
    swift_storeEnumTagMultiPayload();
  }

  return a1;
}

uint64_t destroy for NWActorDiscoveryMechanism.Target(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      uint64_t result = sub_181BC6974(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_BYTE *)(a1 + 24));
      break;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = *(void *)(a1 + 48);
      if (result != 1) {
        goto LABEL_9;
      }
      break;
    case 2:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 3:
      uint64_t v3 = sub_18264E568();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
      break;
    case 4:
LABEL_9:
      uint64_t result = swift_unknownObjectRelease();
      break;
    default:
      return result;
  }

  return result;
}

void *initializeWithCopy for NWActorDiscoveryMechanism.Target(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for NWEndpoint();
    uint64_t v4 = (char *)&loc_181CB4900 + 4 * byte_182665BB8[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }

  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  swift_retain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for NWActorDiscoveryMechanism.Target(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_181CB4130((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for NWEndpoint();
      uint64_t v4 = (char *)&loc_181CB4AC4 + 4 * byte_182665BBD[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }

    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    swift_retain();
    swift_storeEnumTagMultiPayload();
  }

  return a1;
}

void *initializeWithTake for NWActorDiscoveryMechanism.Target(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for NWEndpoint();
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v7 = sub_18264E568();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64LL));
    }

    swift_storeEnumTagMultiPayload();
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *assignWithTake for NWActorDiscoveryMechanism.Target(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_181CB4130((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for NWEndpoint();
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v7 = sub_18264E568();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
      }

      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64LL));
      }

      swift_storeEnumTagMultiPayload();
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t sub_181CB4DE4()
{
  uint64_t result = type metadata accessor for NWEndpoint();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0LL;
  }

  return result;
}

void sub_181CB56C8(_Unwind_Exception *a1)
{
}

void sub_181CB5930(_Unwind_Exception *a1)
{
}

void sub_181CB5DBC(_Unwind_Exception *a1)
{
}

void sub_181CB5F4C(_Unwind_Exception *a1)
{
}

void sub_181CB65D4(_Unwind_Exception *a1)
{
}

void sub_181CB6730( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_181CB68F0(_Unwind_Exception *a1)
{
}

void sub_181CB6D40( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
}

void sub_181CB7320(_Unwind_Exception *a1)
{
}

void sub_181CB7764( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
}

void nw::object::_destroy(nw::object *this)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v10 = "_destroy";
  unint64_t v1 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v2 = (os_log_s *)gLogObj;
    os_log_type_t v3 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_15;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v10 = "_destroy";
    uint64_t v4 = "%{public}s nw::object::_destroy should never be called";
LABEL_14:
    _os_log_impl(&dword_181A5C000, v2, v3, v4, buf, 0xCu);
    goto LABEL_15;
  }

  if (!v7)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v2 = (os_log_s *)gLogObj;
    os_log_type_t v3 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_15;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v10 = "_destroy";
    uint64_t v4 = "%{public}s nw::object::_destroy should never be called, backtrace limit exceeded";
    goto LABEL_14;
  }

  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v2 = (os_log_s *)gLogObj;
  os_log_type_t v3 = type;
  BOOL v6 = os_log_type_enabled((os_log_t)gLogObj, type);
  if (!backtrace_string)
  {
    if (!v6) {
      goto LABEL_15;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v10 = "_destroy";
    uint64_t v4 = "%{public}s nw::object::_destroy should never be called, no backtrace";
    goto LABEL_14;
  }

  if (v6)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v10 = "_destroy";
    __int16 v11 = 2082;
    unsigned int v12 = backtrace_string;
    _os_log_impl( &dword_181A5C000,  v2,  v3,  "%{public}s nw::object::_destroy should never be called, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(backtrace_string);
LABEL_15:
  if (v1) {
    free(v1);
  }
}

char *nw::object::class_def::register_method_def(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v112 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "register_method_def";
    v98 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v107 = 0;
    if (__nwlog_fault(v98, &type, &v107))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v99 = (os_log_s *)__nwlog_obj();
        os_log_type_t v100 = type;
        if (os_log_type_enabled(v99, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "register_method_def";
          v101 = "%{public}s called with null (!def.slot())";
LABEL_120:
          _os_log_impl(&dword_181A5C000, v99, v100, v101, buf, 0xCu);
        }
      }

      else if (v107)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v99 = (os_log_s *)__nwlog_obj();
        os_log_type_t v100 = type;
        BOOL v103 = os_log_type_enabled(v99, type);
        if (backtrace_string)
        {
          if (v103)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "register_method_def";
            __int16 v110 = 2082;
            uint64_t v111 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v99,  v100,  "%{public}s called with null (!def.slot()), dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_121;
        }

        if (v103)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "register_method_def";
          v101 = "%{public}s called with null (!def.slot()), no backtrace";
          goto LABEL_120;
        }
      }

      else
      {
        v99 = (os_log_s *)__nwlog_obj();
        os_log_type_t v100 = type;
        if (os_log_type_enabled(v99, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "register_method_def";
          v101 = "%{public}s called with null (!def.slot()), backtrace limit exceeded";
          goto LABEL_120;
        }
      }
    }

LABEL_104:
      v97 = (void *)qword_18C45F4E0;
      qword_18C45F4E0 = (uint64_t)result;
      *(void *)&xmmword_18C45F4E8 = &result[8 * (v83 >> 2)];
      *((void *)&xmmword_18C45F4E8 + 1) = v37;
      qword_18C45F4F8 = (uint64_t)&result[8 * v83];
      if (v97)
      {
        free(v97);
        __int128 v37 = (char *)*((void *)&xmmword_18C45F4E8 + 1);
      }

      goto LABEL_106;
    }

    if (qword_18C45F4F8 == qword_18C45F4E0) {
      size_t v25 = 1LL;
    }
    else {
      size_t v25 = (qword_18C45F4F8 - qword_18C45F4E0) >> 2;
    }
    uint64_t result = (char *)calloc(v25, 8uLL);
    if (!result) {
      goto LABEL_124;
    }
    uint64_t v26 = result;
    uint64_t v104 = v9;
    uint64_t result = (char *)calloc(0x100uLL, 0x10uLL);
    if (!result) {
      goto LABEL_124;
    }
    uint64_t v27 = result;
    unsigned __int8 v28 = &v26[8 * v23];
    unint64_t v29 = (unint64_t)&v26[8 * v25];
    if (v23 == v25)
    {
      if (v7 < 1)
      {
        if (v5 == v6) {
          size_t v48 = 1LL;
        }
        else {
          size_t v48 = v7 >> 2;
        }
        uint64_t result = (char *)calloc(v48, 8uLL);
        if (!result) {
          goto LABEL_124;
        }
        uint64_t v49 = result;
        unsigned __int8 v28 = &result[8 * (v48 >> 2)];
        unint64_t v29 = (unint64_t)&result[8 * v48];
        free(v26);
        uint64_t v26 = v49;
      }

      else
      {
        unint64_t v30 = v23 + 2;
        if (v23 >= -1) {
          unint64_t v30 = v23 + 1;
        }
        v28 -= 8 * (v30 >> 1);
      }
    }

    *(void *)unsigned __int8 v28 = v27;
    uint64_t v50 = v28 + 8;
    uint64_t v51 = *((void *)&xmmword_18C45F4E8 + 1);
    if (*((void *)&xmmword_18C45F4E8 + 1) == (void)xmmword_18C45F4E8)
    {
      uint64_t v55 = v28;
      uint64_t v53 = v28 + 8;
LABEL_75:
      uint64_t v72 = (void *)qword_18C45F4E0;
      qword_18C45F4E0 = (uint64_t)v26;
      *(void *)&xmmword_18C45F4E8 = v55;
      *((void *)&xmmword_18C45F4E8 + 1) = v53;
      qword_18C45F4F8 = v29;
      uint64_t v9 = v104;
      uint64_t v4 = a2;
      uint64_t v3 = a3;
      if (v72) {
        free(v72);
      }
      goto LABEL_88;
    }

    while (v28 != v26)
    {
      uint64_t v52 = v28;
      uint64_t v53 = v50;
LABEL_52:
      uint64_t v54 = *(void *)(v51 - 8);
      v51 -= 8LL;
      *((void *)v52 - 1) = v54;
      uint64_t v55 = v52 - 8;
      uint64_t v50 = v53;
      unsigned __int8 v28 = v55;
      if (v51 == (void)xmmword_18C45F4E8) {
        goto LABEL_75;
      }
    }

    if ((unint64_t)v50 < v29)
    {
      uint64_t v56 = (uint64_t)(v29 - (void)v50) >> 3;
      if (v56 >= -1) {
        unint64_t v57 = v56 + 1;
      }
      else {
        unint64_t v57 = v56 + 2;
      }
      uint64_t v53 = &v50[8 * (v57 >> 1)];
      uint64_t v52 = &v28[8 * (v57 >> 1)];
      if (v50 == v28)
      {
        uint64_t v26 = v50;
      }

      else
      {
        memmove(&v28[8 * (v57 >> 1)], v28, v50 - v28);
        uint64_t v26 = v28;
      }

      goto LABEL_52;
    }

    else {
      size_t v58 = (uint64_t)(v29 - (void)v28) >> 2;
    }
    uint64_t result = (char *)calloc(v58, 8uLL);
    if (!result) {
      goto LABEL_124;
    }
    uint64_t v26 = result;
    unint64_t v59 = (v58 + 3) >> 2;
    uint64_t v52 = &result[8 * v59];
    uint64_t v53 = v52;
    int64_t v60 = v50 - v28;
    if (v50 != v28)
    {
      uint64_t v53 = &v52[v60 & 0xFFFFFFFFFFFFFFF8LL];
      unint64_t v61 = v60 - 8;
      uint64_t v62 = &result[8 * v59];
      uint64_t v63 = v28;
      if (v61 >= 0x38)
      {
        uint64_t v64 = 8 * v59;
        uint64_t v62 = &result[8 * v59];
        uint64_t v63 = v28;
        if ((unint64_t)(v62 - v28) >= 0x20)
        {
          uint64_t v65 = (v61 >> 3) + 1;
          uint64_t v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v62 = &v52[v66];
          uint64_t v67 = (__int128 *)(v28 + 16);
          uint64_t v68 = &result[v64 + 16];
          uint64_t v69 = v65 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            __int128 v70 = *v67;
            *((_OWORD *)v68 - 1) = *(v67 - 1);
            *(_OWORD *)uint64_t v68 = v70;
            v67 += 2;
            v68 += 32;
            v69 -= 4LL;
          }

          while (v69);
          if (v65 == (v65 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_72;
          }
          uint64_t v63 = &v28[v66];
        }
      }

      do
      {
        uint64_t v71 = *(void *)v63;
        v63 += 8;
        *(void *)uint64_t v62 = v71;
        v62 += 8;
      }

      while (v62 != v53);
    }

  if (v27) {
    free(v27);
  }
  return 0LL;
}

      goto LABEL_64;
    }

    if (!v48)
    {
      __nwlog_obj();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v45 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl( &dword_181A5C000,  v13,  v45,  "%{public}s called with null instance->parent_definition->common_state->deallocate_cache_entry, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_104;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    __int128 v36 = type;
    __int128 v37 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v51 = "nw_protocol_instance_access_cached_content";
        _os_log_impl( &dword_181A5C000,  v13,  v36,  "%{public}s called with null instance->parent_definition->common_state->deallocate_cache_entry, no backtrace",  buf,  0xCu);
      }

      goto LABEL_104;
    }

    if (v37)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v51 = "nw_protocol_instance_access_cached_content";
      uint64_t v52 = 2082;
      uint64_t v53 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v13,  v36,  "%{public}s called with null instance->parent_definition->common_state->deallocate_cache_entry, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_63;
  }
}

    if (!v14) {
      return 1LL;
    }
LABEL_105:
    free(v14);
    return 1LL;
  }

  uint64_t v4 = *(void **)(a2 + 16);
  uint64_t v5 = *(char **)(a1 + 32);
  if (!v4)
  {
    if (v5 && v5[405] < 0) {
      return 1LL;
    }
    __nwlog_obj();
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v22 = *(void *)(a1 + 32);
    uint64_t v23 = v22 == 0;
    if (v22) {
      uint64_t v24 = (const char *)(v22 + 407);
    }
    else {
      uint64_t v24 = "";
    }
    *(_DWORD *)buf = 136446978;
    uint64_t v67 = "nw_protocol_instance_enumerate_flows_block_invoke";
    uint64_t v68 = 2082;
    uint64_t v69 = v24;
    if (v23) {
      size_t v25 = "";
    }
    else {
      size_t v25 = " ";
    }
    __int128 v70 = 2080;
    uint64_t v71 = v25;
    uint64_t v72 = 2048;
    uint64_t v73 = (char *)a2;
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v64 = 0;
    if (__nwlog_fault(v14, &type, &v64))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v27 = type;
        if (os_log_type_enabled(v26, type))
        {
          unsigned __int8 v28 = *(void *)(a1 + 32);
          unint64_t v29 = v28 == 0;
          if (v28) {
            unint64_t v30 = (const char *)(v28 + 407);
          }
          else {
            unint64_t v30 = "";
          }
          *(_DWORD *)buf = 136446978;
          if (v29) {
            size_t v31 = "";
          }
          else {
            size_t v31 = " ";
          }
          uint64_t v67 = "nw_protocol_instance_enumerate_flows_block_invoke";
          uint64_t v68 = 2082;
          uint64_t v69 = v30;
          __int128 v70 = 2080;
          uint64_t v71 = v31;
          uint64_t v72 = 2048;
          uint64_t v73 = (char *)a2;
          _os_log_impl(&dword_181A5C000, v26, v27, "%{public}s %{public}s%sNull protocol in node %p", buf, 0x2Au);
        }
      }

      else if (v64)
      {
        uint64_t v39 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v40 = type;
        uint64_t v41 = os_log_type_enabled(v26, type);
        if (v39)
        {
          if (v41)
          {
            uint64_t v42 = *(void *)(a1 + 32);
            uint64_t v43 = v42 == 0;
            if (v42) {
              uint64_t v44 = (const char *)(v42 + 407);
            }
            else {
              uint64_t v44 = "";
            }
            if (v43) {
              uint64_t v45 = "";
            }
            else {
              uint64_t v45 = " ";
            }
            *(_DWORD *)buf = 136447234;
            uint64_t v67 = "nw_protocol_instance_enumerate_flows_block_invoke";
            uint64_t v68 = 2082;
            uint64_t v69 = v44;
            __int128 v70 = 2080;
            uint64_t v71 = v45;
            uint64_t v72 = 2048;
            uint64_t v73 = (char *)a2;
            uint64_t v74 = 2082;
            uint64_t v75 = v39;
            _os_log_impl( &dword_181A5C000,  v26,  v40,  "%{public}s %{public}s%sNull protocol in node %p, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v39);
          if (!v14) {
            return 1LL;
          }
          goto LABEL_105;
        }

        if (v41)
        {
          int64_t v60 = *(void *)(a1 + 32);
          unint64_t v61 = (const char *)(v60 + 407);
          uint64_t v62 = v60 == 0;
          uint64_t v63 = "";
          if (v62) {
            unint64_t v61 = "";
          }
          *(_DWORD *)buf = 136446978;
          if (!v62) {
            uint64_t v63 = " ";
          }
          uint64_t v67 = "nw_protocol_instance_enumerate_flows_block_invoke";
          uint64_t v68 = 2082;
          uint64_t v69 = v61;
          __int128 v70 = 2080;
          uint64_t v71 = v63;
          uint64_t v72 = 2048;
          uint64_t v73 = (char *)a2;
          _os_log_impl( &dword_181A5C000,  v26,  v40,  "%{public}s %{public}s%sNull protocol in node %p, no backtrace",  buf,  0x2Au);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v51 = type;
        if (os_log_type_enabled(v26, type))
        {
          uint64_t v52 = *(void *)(a1 + 32);
          uint64_t v53 = v52 == 0;
          if (v52) {
            uint64_t v54 = (const char *)(v52 + 407);
          }
          else {
            uint64_t v54 = "";
          }
          *(_DWORD *)buf = 136446978;
          if (v53) {
            uint64_t v55 = "";
          }
          else {
            uint64_t v55 = " ";
          }
          uint64_t v67 = "nw_protocol_instance_enumerate_flows_block_invoke";
          uint64_t v68 = 2082;
          uint64_t v69 = v54;
          __int128 v70 = 2080;
          uint64_t v71 = v55;
          uint64_t v72 = 2048;
          uint64_t v73 = (char *)a2;
          _os_log_impl( &dword_181A5C000,  v26,  v51,  "%{public}s %{public}s%sNull protocol in node %p, backtrace limit exceeded",  buf,  0x2Au);
        }
      }
    }

    goto LABEL_104;
  }

  BOOL v6 = v5;
  if (nw_protocol_definition_get_message_is_stream(v6[1]) && *(v6 - 6) == v4)
  {
  }

  else
  {

    if (v4 != (void *)-2LL) {
      return (*(uint64_t (**)(void, void *, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  v4,  *(void *)(a2 + 32));
    }
  }

  return 1LL;
}

        goto LABEL_105;
      }

      if (!v82)
      {
        __nwlog_obj();
        uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v53 = v83;
        if (os_log_type_enabled(v46, v83))
        {
          uint64_t v54 = (const char *)*((void *)v24 + 2);
          if (!v54) {
            uint64_t v54 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          v89 = "__nw_protocol_remove_input_handler";
          uint64_t v90 = 2082;
          uint64_t v91 = (char *)v54;
          v92 = 2048;
          v93 = v24;
          _os_log_impl( &dword_181A5C000,  v46,  v53,  "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, backtrace limit exceeded",  buf,  0x20u);
        }

        goto LABEL_104;
      }

      uint64_t v49 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int128 v79 = v83;
      uint64_t v50 = os_log_type_enabled(v46, v83);
      if (!v49)
      {
        if (v50)
        {
          uint64_t v55 = (const char *)*((void *)v24 + 2);
          if (!v55) {
            uint64_t v55 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          v89 = "__nw_protocol_remove_input_handler";
          uint64_t v90 = 2082;
          uint64_t v91 = (char *)v55;
          v92 = 2048;
          v93 = v24;
          _os_log_impl( &dword_181A5C000,  v46,  v79,  "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, no backtrace",  buf,  0x20u);
        }

        goto LABEL_104;
      }

      if (v50)
      {
        uint64_t v51 = (const char *)*((void *)v24 + 2);
        if (!v51) {
          uint64_t v51 = "invalid";
        }
        *(_DWORD *)buf = 136446978;
        v89 = "__nw_protocol_remove_input_handler";
        uint64_t v90 = 2082;
        uint64_t v91 = (char *)v51;
        v92 = 2048;
        v93 = v24;
        uint64_t v94 = 2082;
        __int128 v95 = v49;
        _os_log_impl( &dword_181A5C000,  v46,  v79,  "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, dumping backtrace:%{public}s",  buf,  0x2Au);
      }

      free(v49);
    }

    free(v18);
    goto LABEL_105;
  }

  if ((sc_state - 101) >= 5)
  {
    if ((sc_state - 7) < 2)
    {
      *(void *)__int128 v119 = 0LL;
      *(void *)&v119[8] = v119;
      *(void *)&v119[16] = 0x3032000000LL;
      __int128 v120 = __Block_byref_object_copy__16053;
      uint64_t v121 = __Block_byref_object_dispose__16054;
      uint64_t v122 = 0LL;
      LOBYTE(buffer) = 5;
      BYTE1(buffer) = a2 ^ 1;
      *(_DWORD *)((char *)&buffer + 2) = 768;
      BYTE6(buffer) = 0;
      uint64_t v21 = dispatch_data_create(&buffer, 7uLL, 0LL, 0LL);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v22 = (os_log_s *)(id)gLogObj;
      uint64_t v23 = v22;
      if ((a2 & 1) != 0)
      {
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_INFO)) {
          goto LABEL_78;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_socks5_connection_send_reply_on_queue";
        *(_WORD *)&_BYTE buf[12] = 2114;
        *(void *)&buf[14] = v5;
        uint64_t v24 = "%{public}s %{public}@ sending SOCKS success reply";
        size_t v25 = v23;
        uint64_t v26 = OS_LOG_TYPE_INFO;
      }

      else
      {
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
          goto LABEL_78;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_socks5_connection_send_reply_on_queue";
        *(_WORD *)&_BYTE buf[12] = 2114;
        *(void *)&buf[14] = v5;
        uint64_t v24 = "%{public}s %{public}@ sending SOCKS failure reply";
        size_t v25 = v23;
        uint64_t v26 = OS_LOG_TYPE_ERROR;
      }

      _os_log_impl(&dword_181A5C000, v25, v26, v24, buf, 0x16u);
LABEL_78:

      if (v21)
      {
LABEL_153:
        *((_BYTE *)v5 + 160) |= 8u;
        uint64_t v88 = (nw_content_context *)&__block_literal_global_41831;
        v89 = &__block_literal_global_41831;
        if ((a2 & 1) == 0)
        {
          uint64_t v90 = &__block_literal_global_3_41839;

          uint64_t v88 = (nw_content_context *)&__block_literal_global_3_41839;
        }

        uint64_t v91 = v5->sc_in_connection;
        if (*((char *)v5 + 160) < 0)
        {
          v92 = v5->sc_in_udp_associated_tcp_connection;

          uint64_t v91 = v92;
        }

        WeakRetained = objc_loadWeakRetained((id *)&v5->sc_parent);
        nw_socks5_connection_increment_busy_on_queue(v5, WeakRetained);
        completion[0] = MEMORY[0x1895F87A8];
        completion[1] = 3221225472LL;
        completion[2] = ___ZL40nw_socks5_connection_send_reply_on_queueP31NWConcrete_nw_socks5_connectionbU13block_pointerFvbE_block_invoke_167;
        completion[3] = &unk_189BB8328;
        uint64_t v104 = v5;
        uint64_t v94 = WeakRetained;
        v105 = v94;
        v106 = v6;
        nw_connection_send((nw_connection_t)v91, v21, v88, 1, completion);

        goto LABEL_159;
      }

    goto LABEL_105;
  }

  uint64_t v9 = v7;
  unint64_t v10 = -[nw_endpoint type](v9, "type");

  if (v10 != 1)
  {
    if (!a3) {
      goto LABEL_49;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v19 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    uint64_t v62 = "nw_listener_copy_parameters_with_port";
    uint64_t v63 = 2114;
    uint64_t v64 = (char *)v9;
    uint64_t v20 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    unint64_t v59 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v21 = (os_log_s *)(id)gLogObj;
      uint64_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v62 = "nw_listener_copy_parameters_with_port";
        uint64_t v63 = 2114;
        uint64_t v64 = (char *)v9;
        _os_log_impl(&dword_181A5C000, v21, v22, "%{public}s Local endpoint is not an address: %{public}@", buf, 0x16u);
      }
    }

    else if (v59)
    {
      unint64_t v29 = __nw_create_backtrace_string();
      if (v29)
      {
        unint64_t v30 = (char *)v29;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v31 = (os_log_s *)(id)gLogObj;
        uint64_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446722;
          uint64_t v62 = "nw_listener_copy_parameters_with_port";
          uint64_t v63 = 2114;
          uint64_t v64 = (char *)v9;
          uint64_t v65 = 2082;
          uint64_t v66 = v30;
          _os_log_impl( &dword_181A5C000,  v31,  v32,  "%{public}s Local endpoint is not an address: %{public}@, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v30);
        if (!v20) {
          goto LABEL_108;
        }
        goto LABEL_95;
      }

      __nwlog_obj();
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v49 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v62 = "nw_listener_copy_parameters_with_port";
        uint64_t v63 = 2114;
        uint64_t v64 = (char *)v9;
        _os_log_impl( &dword_181A5C000,  v21,  v49,  "%{public}s Local endpoint is not an address: %{public}@, no backtrace",  buf,  0x16u);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v21 = (os_log_s *)(id)gLogObj;
      uint64_t v41 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v62 = "nw_listener_copy_parameters_with_port";
        uint64_t v63 = 2114;
        uint64_t v64 = (char *)v9;
        _os_log_impl( &dword_181A5C000,  v21,  v41,  "%{public}s Local endpoint is not an address: %{public}@, backtrace limit exceeded",  buf,  0x16u);
      }
    }

    goto LABEL_93;
  }

  address_family = nw_endpoint_get_address_family(v9);
  if (address_family != 30 && address_family != 2)
  {
    if (!a3) {
      goto LABEL_49;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v26 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    uint64_t v62 = "nw_listener_copy_parameters_with_port";
    uint64_t v63 = 2114;
    uint64_t v64 = (char *)v9;
    uint64_t v20 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    unint64_t v59 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v21 = (os_log_s *)(id)gLogObj;
      uint64_t v27 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v62 = "nw_listener_copy_parameters_with_port";
        uint64_t v63 = 2114;
        uint64_t v64 = (char *)v9;
        _os_log_impl( &dword_181A5C000,  v21,  v27,  "%{public}s Local endpoint has unsupported family: %{public}@",  buf,  0x16u);
      }
    }

    else if (v59)
    {
      uint64_t v43 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v44 = type;
      uint64_t v45 = os_log_type_enabled(v21, type);
      if (v43)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446722;
          uint64_t v62 = "nw_listener_copy_parameters_with_port";
          uint64_t v63 = 2114;
          uint64_t v64 = (char *)v9;
          uint64_t v65 = 2082;
          uint64_t v66 = v43;
          _os_log_impl( &dword_181A5C000,  v21,  v44,  "%{public}s Local endpoint has unsupported family: %{public}@, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v43);
        if (!v20) {
          goto LABEL_108;
        }
        goto LABEL_95;
      }

      if (v45)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v62 = "nw_listener_copy_parameters_with_port";
        uint64_t v63 = 2114;
        uint64_t v64 = (char *)v9;
        _os_log_impl( &dword_181A5C000,  v21,  v44,  "%{public}s Local endpoint has unsupported family: %{public}@, no backtrace",  buf,  0x16u);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v54 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v62 = "nw_listener_copy_parameters_with_port";
        uint64_t v63 = 2114;
        uint64_t v64 = (char *)v9;
        _os_log_impl( &dword_181A5C000,  v21,  v54,  "%{public}s Local endpoint has unsupported family: %{public}@, backtrace limit exceeded",  buf,  0x16u);
      }
    }

                    xpc_dictionary_set_BOOL(v2, "minimize_logging", 1);
                    goto LABEL_105;
                  }

      if (v43) {
        free(v43);
      }
      goto LABEL_32;
    }

    __nwlog_obj();
    __int128 v38 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_parameters_inherit_protocol_instances";
    uint64_t v39 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    uint64_t v67 = 0;
    if (__nwlog_fault(v39, type, &v67))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v41 = type[0];
        if (os_log_type_enabled(v40, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_inherit_protocol_instances";
          _os_log_impl(&dword_181A5C000, v40, v41, "%{public}s called with null stack", buf, 0xCu);
        }
      }

      else if (v67)
      {
        uint64_t v52 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v53 = type[0];
        uint64_t v54 = os_log_type_enabled(v40, type[0]);
        if (v52)
        {
          if (v54)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_parameters_inherit_protocol_instances";
            uint64_t v69 = 2082;
            __int128 v70 = v52;
            _os_log_impl( &dword_181A5C000,  v40,  v53,  "%{public}s called with null stack, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v52);
          goto LABEL_99;
        }

        if (v54)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_inherit_protocol_instances";
          _os_log_impl(&dword_181A5C000, v40, v53, "%{public}s called with null stack, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        int64_t v60 = type[0];
        if (os_log_type_enabled(v40, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_inherit_protocol_instances";
          _os_log_impl( &dword_181A5C000,  v40,  v60,  "%{public}s called with null stack, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

LABEL_105:
              size_t v25 = v81;
            }

            if (v66) {
              free(v66);
            }
            goto LABEL_26;
          }

          uint64_t v78 = v50;
          uint64_t v51 = **(_DWORD **)(StatusReg + 8);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v52 = (id)gLogObj;
          v105 = 136446722;
          v106 = "-[ManagedNetworkSettings reloadMNS]";
          char v107 = 2114;
          v108[0] = v30;
          LOWORD(v108[1]) = 1024;
          *(_DWORD *)uint64_t v75 = v51;
          *(_DWORD *)((char *)&v108[1] + 2) = v51;
          uint64_t v53 = (const char *)_os_log_send_and_compose_impl();

          LOBYTE(buf) = 16;
          uint64_t v82 = 0;
          uint64_t v80 = (char *)v53;
          if (__nwlog_fault(v53, &buf, &v82))
          {
            if (buf != 17)
            {
              if (v82)
              {
                unint64_t v59 = (char *)__nw_create_backtrace_string();
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                uint64_t v54 = (os_log_s *)(id)gLogObj;
                int64_t v60 = buf;
                unint64_t v61 = os_log_type_enabled(v54, (os_log_type_t)buf);
                if (v59)
                {
                  if (v61)
                  {
                    v105 = 136446978;
                    v106 = "-[ManagedNetworkSettings reloadMNS]";
                    char v107 = 2114;
                    v108[0] = v30;
                    LOWORD(v108[1]) = 1024;
                    *(_DWORD *)((char *)&v108[1] + 2) = *(_DWORD *)v75;
                    HIWORD(v108[1]) = 2082;
                    v108[2] = v59;
                    _os_log_impl( &dword_181A5C000,  v54,  v60,  "%{public}s MNS error reading sysctl %{public}@ %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)&v105,  0x26u);
                  }

                  free(v59);
                  goto LABEL_79;
                }

                if (!v61) {
                  goto LABEL_78;
                }
                v105 = 136446722;
                v106 = "-[ManagedNetworkSettings reloadMNS]";
                char v107 = 2114;
                v108[0] = v30;
                LOWORD(v108[1]) = 1024;
                *(_DWORD *)((char *)&v108[1] + 2) = *(_DWORD *)v75;
                uint64_t v56 = v54;
                unint64_t v57 = v60;
                size_t v58 = "%{public}s MNS error reading sysctl %{public}@ %{darwin.errno}d, no backtrace";
              }

              else
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                uint64_t v54 = (os_log_s *)(id)gLogObj;
                uint64_t v62 = buf;
                if (!os_log_type_enabled(v54, (os_log_type_t)buf)) {
                  goto LABEL_78;
                }
                v105 = 136446722;
                v106 = "-[ManagedNetworkSettings reloadMNS]";
                char v107 = 2114;
                v108[0] = v30;
                LOWORD(v108[1]) = 1024;
                *(_DWORD *)((char *)&v108[1] + 2) = *(_DWORD *)v75;
                uint64_t v56 = v54;
                unint64_t v57 = v62;
                size_t v58 = "%{public}s MNS error reading sysctl %{public}@ %{darwin.errno}d, backtrace limit exceeded";
              }

        free(v48);
        goto LABEL_105;
      }

      if (v58)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v71 = "nw_connection_create_with_client_id";
        _os_log_impl( &dword_181A5C000,  v49,  v57,  "%{public}s called with null !uuid_is_null(client_id), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v49 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      int64_t v60 = type;
      if (os_log_type_enabled(v49, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v71 = "nw_connection_create_with_client_id";
        _os_log_impl( &dword_181A5C000,  v49,  v60,  "%{public}s called with null !uuid_is_null(client_id), backtrace limit exceeded",  buf,  0xCu);
      }
    }

    if (v50) {
      free(v50);
    }
LABEL_21:

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v20 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    uint64_t v62 = "nw_endpoint_create_custom";
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v58.receiver) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v21, &v58, &type))
    {
      if (LOBYTE(v58.receiver) == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v22 = (os_log_s *)(id)gLogObj;
        receiver = (os_log_type_t)v58.receiver;
        if (os_log_type_enabled(v22, (os_log_type_t)v58.receiver))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v62 = "nw_endpoint_create_custom";
          _os_log_impl(&dword_181A5C000, v22, receiver, "%{public}s NWOSCustomEndpoint alloc/init failed", buf, 0xCu);
        }
      }

      else if (type)
      {
        size_t v25 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v22 = (os_log_s *)(id)gLogObj;
        uint64_t v26 = (os_log_type_t)v58.receiver;
        uint64_t v27 = os_log_type_enabled(v22, (os_log_type_t)v58.receiver);
        if (v25)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v62 = "nw_endpoint_create_custom";
            uint64_t v63 = 2082;
            *(void *)uint64_t v64 = v25;
            _os_log_impl( &dword_181A5C000,  v22,  v26,  "%{public}s NWOSCustomEndpoint alloc/init failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v25);
          if (!v21) {
            goto LABEL_28;
          }
          goto LABEL_27;
        }

        if (v27)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v62 = "nw_endpoint_create_custom";
          _os_log_impl( &dword_181A5C000,  v22,  v26,  "%{public}s NWOSCustomEndpoint alloc/init failed, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v22 = (os_log_s *)(id)gLogObj;
        __int128 v36 = (os_log_type_t)v58.receiver;
        if (os_log_type_enabled(v22, (os_log_type_t)v58.receiver))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v62 = "nw_endpoint_create_custom";
          _os_log_impl( &dword_181A5C000,  v22,  v36,  "%{public}s NWOSCustomEndpoint alloc/init failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v21)
    {
LABEL_28:
      uint64_t v24 = 0LL;
LABEL_37:

      goto LABEL_38;
    }

LABEL_105:
      if (v38) {
        free(v38);
      }
      goto LABEL_16;
    }

    if (!(_BYTE)v54)
    {
      __nwlog_obj();
      uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v52 = __dst;
      if (os_log_type_enabled(v39, (os_log_type_t)__dst))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_match_pattern_to_endpoint";
        _os_log_impl( &dword_181A5C000,  v39,  v52,  "%{public}s called with null pattern, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_104;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v46 = __dst;
    uint64_t v47 = os_log_type_enabled(v39, (os_log_type_t)__dst);
    if (!backtrace_string)
    {
      if (v47)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_match_pattern_to_endpoint";
        _os_log_impl(&dword_181A5C000, v39, v46, "%{public}s called with null pattern, no backtrace", buf, 0xCu);
      }

      goto LABEL_104;
    }

    if (v47)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_match_pattern_to_endpoint";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v39,  v46,  "%{public}s called with null pattern, dumping backtrace:%{public}s",  buf,  0x16u);
    }

            HIDWORD(handle[7].output_handler_context) = 1;
            if ((*(_DWORD *)v8 & 0x200000) != 0)
            {
              uint64_t v50 = *(void *)handle[4].flow_id;
              if (v50)
              {
                *(_DWORD *)v8 &= ~0x400000u;
                *(void *)(v50 + 32) = 0LL;
                *(void *)(v50 + 40) = buf;
                *(void *)&buf[0] = v50;
                *((void *)&buf[0] + 1) = v50 + 32;
                nw_protocol_finalize_output_frames((uint64_t)handle, (uint64_t)buf);
                return;
              }
            }

            uint64_t v51 = handle->default_input_handler;
            if (v51)
            {
              uint64_t v52 = v51->callbacks;
              if (v52)
              {
                uint64_t v53 = (void (*)(nw_protocol *, nw_protocol *))v52->connected;
                if (v53)
                {
                  v53(v51, handle);
                  return;
                }
              }
            }

            __nwlog_obj();
            uint64_t v72 = handle->default_input_handler;
            uint64_t v73 = "invalid";
            if (v72)
            {
              uint64_t v74 = v72->identifier->name;
              if (v74) {
                uint64_t v73 = v74;
              }
            }

            LODWORD(buf[0]) = 136446466;
            *(void *)((char *)buf + 4) = "nw_masque_wait_for_early_data";
            WORD6(buf[0]) = 2082;
            *(void *)((char *)buf + 14) = v73;
            uint64_t v75 = (char *)_os_log_send_and_compose_impl();
            applier[0] = 16;
            LOBYTE(v106) = 0;
            if (applier[0] == 17)
            {
              uint64_t v76 = (os_log_s *)__nwlog_obj();
              uint64_t v77 = applier[0];
              if (!os_log_type_enabled(v76, (os_log_type_t)applier[0])) {
                goto LABEL_218;
              }
              uint64_t v78 = handle->default_input_handler;
              __int128 v79 = "invalid";
              if (v78)
              {
                uint64_t v80 = v78->identifier->name;
                if (v80) {
                  __int128 v79 = v80;
                }
              }

              LODWORD(buf[0]) = 136446466;
              *(void *)((char *)buf + 4) = "nw_masque_wait_for_early_data";
              WORD6(buf[0]) = 2082;
              *(void *)((char *)buf + 14) = v79;
              uint64_t v81 = "%{public}s protocol %{public}s has invalid connected callback";
            }

            else if ((_BYTE)v106)
            {
              uint64_t v86 = (char *)__nw_create_backtrace_string();
              uint64_t v76 = (os_log_s *)__nwlog_obj();
              uint64_t v77 = applier[0];
              unint64_t v87 = os_log_type_enabled(v76, (os_log_type_t)applier[0]);
              if (v86)
              {
                if (v87)
                {
                  uint64_t v88 = handle->default_input_handler;
                  v89 = "invalid";
                  if (v88)
                  {
                    uint64_t v90 = v88->identifier->name;
                    if (v90) {
                      v89 = v90;
                    }
                  }

                  LODWORD(buf[0]) = 136446722;
                  *(void *)((char *)buf + 4) = "nw_masque_wait_for_early_data";
                  WORD6(buf[0]) = 2082;
                  *(void *)((char *)buf + 14) = v89;
                  WORD3(buf[1]) = 2082;
                  *((void *)&buf[1] + 1) = v86;
                  _os_log_impl( &dword_181A5C000,  v76,  v77,  "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x20u);
                }

                free(v86);
                goto LABEL_218;
              }

              if (!v87)
              {
LABEL_218:
                if (v75) {
                  free(v75);
                }
                return;
              }

              v98 = handle->default_input_handler;
              v99 = "invalid";
              if (v98)
              {
                os_log_type_t v100 = v98->identifier->name;
                if (v100) {
                  v99 = v100;
                }
              }

              LODWORD(buf[0]) = 136446466;
              *(void *)((char *)buf + 4) = "nw_masque_wait_for_early_data";
              WORD6(buf[0]) = 2082;
              *(void *)((char *)buf + 14) = v99;
              uint64_t v81 = "%{public}s protocol %{public}s has invalid connected callback, no backtrace";
            }

            else
            {
              uint64_t v76 = (os_log_s *)__nwlog_obj();
              uint64_t v77 = applier[0];
              if (!os_log_type_enabled(v76, (os_log_type_t)applier[0])) {
                goto LABEL_218;
              }
              uint64_t v94 = handle->default_input_handler;
              __int128 v95 = "invalid";
              if (v94)
              {
                uint64_t v96 = v94->identifier->name;
                if (v96) {
                  __int128 v95 = v96;
                }
              }

              LODWORD(buf[0]) = 136446466;
              *(void *)((char *)buf + 4) = "nw_masque_wait_for_early_data";
              WORD6(buf[0]) = 2082;
              *(void *)((char *)buf + 14) = v95;
              uint64_t v81 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
            }

            _os_log_impl(&dword_181A5C000, v76, v77, v81, (uint8_t *)buf, 0x16u);
            goto LABEL_218;
          }

    uint64_t v40 = nw_protocol_options_copy(v21);
    nw_parameters_set_protocol_instance(v40, v41, (uint64_t)v6);
    nw_protocol_options_inherit_log_id(v21, v40);
    uint64_t v42 = nw_parameters_copy_default_protocol_stack(*((nw_parameters_t *)handle + 40));
    uint64_t v43 = v42;
    if (v20) {
      nw_protocol_stack_replace_protocol_with_handle(v42, (uint64_t)v6, v40);
    }
    else {
      nw_protocol_stack_replace_protocol(v42, v7, v40);
    }
    *(_DWORD *)(handle + 527) |= 0x20000u;
    if (v43) {
      os_release(v43);
    }
    if (v40) {
      os_release(v40);
    }
    goto LABEL_111;
  }

  uint64_t v2 = *((void *)handle + 6);
  if (handle + 64 != (char *)a1 || (uint64_t result = *((void *)handle + 52)) == 0)
  {
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 24);
      if (v3)
      {
        uint64_t v4 = *(uint64_t (**)(void))(v3 + 112);
        if (v4) {
          return v4(*((void *)handle + 6));
        }
      }
    }

    return 0LL;
  }

  return result;
}

        *(_DWORD *)buf = 136446466;
        uint64_t v82 = "nw_protocol_http_connect_input_finished";
        size_t v83 = 2082;
        int v84 = (void *)v58;
        uint64_t v17 = "%{public}s protocol %{public}s has invalid input_finished callback, backtrace limit exceeded";
        goto LABEL_137;
      }

  [MEMORY[0x189607968] numberWithBool:self->_noFallback];
  uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue();
  [v4 setObject:v71 forKey:@"noFallback"];

  has = (__int16)self->_has;
  if ((has & 8) == 0)
  {
LABEL_25:
    if ((has & 0x80) == 0) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }

        free(backtrace_string);
        goto LABEL_62;
      }

      if (!v55) {
        goto LABEL_62;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v68 = "nw_protocol_http2_transport_remove_input_handler";
      uint64_t v23 = "%{public}s called with null input_protocol, no backtrace";
    }

    else
    {
      uint64_t v44 = (os_log_s *)__nwlog_obj();
      uint64_t v45 = type;
      if (!os_log_type_enabled(v44, type)) {
        goto LABEL_62;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v68 = "nw_protocol_http2_transport_remove_input_handler";
      uint64_t v23 = "%{public}s called with null input_protocol, backtrace limit exceeded";
    }

    if (v35) {
      free(v35);
    }
    uint64_t v20 = 0LL;
    goto LABEL_38;
  }

  if (v12 - v11 < v13 + 5)
  {
    unint64_t v59 = v5;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v14 = (id)gLogObj;
    BOOL v15 = v10;
    *(_DWORD *)buf = 136447490;
    uint64_t v63 = "nw_necp_append_tlv";
    uint64_t v64 = 2048;
    *(void *)uint64_t v65 = v11;
    *(_WORD *)&v65[8] = 2048;
    *(void *)uint64_t v66 = v13 + 5;
    *(_WORD *)&v66[8] = 2048;
    *(void *)uint64_t v67 = v12;
    *(_WORD *)&v67[8] = 1024;
    *(_DWORD *)uint64_t v68 = v10;
    *(_WORD *)&v68[4] = 1024;
    *(_DWORD *)&v68[6] = v13;
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    int64_t v60 = 0;
    if (__nwlog_fault(v16, &type, &v60))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v17 = (os_log_s *)(id)gLogObj;
        uint64_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136447490;
          uint64_t v63 = "nw_necp_append_tlv";
          uint64_t v64 = 2048;
          *(void *)uint64_t v65 = v11;
          *(_WORD *)&v65[8] = 2048;
          *(void *)uint64_t v66 = v13 + 5;
          *(_WORD *)&v66[8] = 2048;
          *(void *)uint64_t v67 = v12;
          *(_WORD *)&v67[8] = 1024;
          *(_DWORD *)uint64_t v68 = v15;
          *(_WORD *)&v68[4] = 1024;
          *(_DWORD *)&v68[6] = v13;
          _os_log_impl( &dword_181A5C000,  v17,  v18,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u",  buf,  0x36u);
        }
      }

      else if (v60)
      {
        uint64_t v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v17 = (os_log_s *)(id)gLogObj;
        uint64_t v22 = type;
        uint64_t v23 = os_log_type_enabled(v17, type);
        if (v21)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136447746;
            uint64_t v63 = "nw_necp_append_tlv";
            uint64_t v64 = 2048;
            *(void *)uint64_t v65 = v11;
            *(_WORD *)&v65[8] = 2048;
            *(void *)uint64_t v66 = v13 + 5;
            *(_WORD *)&v66[8] = 2048;
            *(void *)uint64_t v67 = v12;
            *(_WORD *)&v67[8] = 1024;
            *(_DWORD *)uint64_t v68 = v15;
            *(_WORD *)&v68[4] = 1024;
            *(_DWORD *)&v68[6] = v13;
            uint64_t v69 = 2082;
            __int128 v70 = v21;
            _os_log_impl( &dword_181A5C000,  v17,  v22,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s",  buf,  0x40u);
          }

          free(v21);
          if (!v16) {
            goto LABEL_37;
          }
          goto LABEL_36;
        }

        if (v23)
        {
          *(_DWORD *)buf = 136447490;
          uint64_t v63 = "nw_necp_append_tlv";
          uint64_t v64 = 2048;
          *(void *)uint64_t v65 = v11;
          *(_WORD *)&v65[8] = 2048;
          *(void *)uint64_t v66 = v13 + 5;
          *(_WORD *)&v66[8] = 2048;
          *(void *)uint64_t v67 = v12;
          *(_WORD *)&v67[8] = 1024;
          *(_DWORD *)uint64_t v68 = v15;
          *(_WORD *)&v68[4] = 1024;
          *(_DWORD *)&v68[6] = v13;
          _os_log_impl( &dword_181A5C000,  v17,  v22,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace",  buf,  0x36u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v17 = (os_log_s *)(id)gLogObj;
        uint64_t v24 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136447490;
          uint64_t v63 = "nw_necp_append_tlv";
          uint64_t v64 = 2048;
          *(void *)uint64_t v65 = v11;
          *(_WORD *)&v65[8] = 2048;
          *(void *)uint64_t v66 = v13 + 5;
          *(_WORD *)&v66[8] = 2048;
          *(void *)uint64_t v67 = v12;
          *(_WORD *)&v67[8] = 1024;
          *(_DWORD *)uint64_t v68 = v15;
          *(_WORD *)&v68[4] = 1024;
          *(_DWORD *)&v68[6] = v13;
          _os_log_impl( &dword_181A5C000,  v17,  v24,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded",  buf,  0x36u);
        }
      }
    }

    if (!v16)
    {
LABEL_37:
      uint64_t v20 = 0LL;
      uint64_t v5 = v59;
      goto LABEL_38;
    }

  if (v61) {
    free(v61);
  }
  *(_DWORD *)(v9 + 336) = -1;
  uint64_t v13 = v257;
LABEL_107:
  uint64_t v71 = *(unsigned int *)(v9 + 360) + 1LL;
  uint64_t v72 = v71 << 31 >> 31;
  *(_DWORD *)(v9 + 360) = v71;
  if (v72 == v71 && (v72 & 0x8000000000000000LL) == 0) {
    goto LABEL_126;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v73 = *(unsigned int *)(v9 + 360);
  *(_DWORD *)buf = 136446978;
  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
  *(_WORD *)&_BYTE buf[12] = 2082;
  *(void *)&buf[14] = "http1->next_connection_log_num";
  *(_WORD *)&buf[22] = 2048;
  v268 = 1LL;
  v269 = 2048;
  *(void *)v270 = v73;
  uint64_t v74 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(aBlock[0]) = 0;
  if (__nwlog_fault(v74, type, aBlock))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v75 = (os_log_s *)gLogObj;
      uint64_t v76 = type[0];
      if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
      {
        uint64_t v77 = *(unsigned int *)(v9 + 360);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = "http1->next_connection_log_num";
        *(_WORD *)&buf[22] = 2048;
        v268 = 1LL;
        v269 = 2048;
        *(void *)v270 = v77;
        uint64_t v78 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_122:
        _os_log_impl(&dword_181A5C000, v75, v76, v78, buf, 0x2Au);
      }
    }

    else if (LOBYTE(aBlock[0]))
    {
      __int128 v79 = (char *)__nw_create_backtrace_string();
      uint64_t v75 = (os_log_s *)__nwlog_obj();
      uint64_t v76 = type[0];
      uint64_t v80 = os_log_type_enabled(v75, type[0]);
      if (v79)
      {
        if (v80)
        {
          uint64_t v81 = *(unsigned int *)(v9 + 360);
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = "http1->next_connection_log_num";
          *(_WORD *)&buf[22] = 2048;
          v268 = 1LL;
          v269 = 2048;
          *(void *)v270 = v81;
          *(_WORD *)&v270[8] = 2082;
          v271 = v79;
          _os_log_impl( &dword_181A5C000,  v75,  v76,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
        }

        free(v79);
        goto LABEL_123;
      }

      if (v80)
      {
        size_t v83 = *(unsigned int *)(v9 + 360);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = "http1->next_connection_log_num";
        *(_WORD *)&buf[22] = 2048;
        v268 = 1LL;
        v269 = 2048;
        *(void *)v270 = v83;
        uint64_t v78 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
        goto LABEL_122;
      }
    }

    else
    {
      uint64_t v75 = (os_log_s *)__nwlog_obj();
      uint64_t v76 = type[0];
      if (os_log_type_enabled(v75, type[0]))
      {
        uint64_t v82 = *(unsigned int *)(v9 + 360);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = "http1->next_connection_log_num";
        *(_WORD *)&buf[22] = 2048;
        v268 = 1LL;
        v269 = 2048;
        *(void *)v270 = v82;
        uint64_t v78 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
        goto LABEL_122;
      }
    }
  }

    if (v17) {
      free(v17);
    }
LABEL_14:
    (*(void (**)(uint64_t, uint64_t, void *))(a5 + 16))(a5, 1LL, object);
    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  unint64_t v35 = "operator()";
  uint64_t v13 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v32 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v14 = (os_log_s *)__nwlog_obj();
    BOOL v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_99;
    }
    *(_DWORD *)buf = 136446210;
    unint64_t v35 = "operator()";
    uint64_t v16 = "%{public}s called with null completion";
    goto LABEL_98;
  }

  if (!v32)
  {
    uint64_t v14 = (os_log_s *)__nwlog_obj();
    BOOL v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_99;
    }
    *(_DWORD *)buf = 136446210;
    unint64_t v35 = "operator()";
    uint64_t v16 = "%{public}s called with null completion, backtrace limit exceeded";
    goto LABEL_98;
  }

  uint64_t v23 = (char *)__nw_create_backtrace_string();
  uint64_t v14 = (os_log_s *)__nwlog_obj();
  BOOL v15 = type;
  unsigned __int8 v28 = os_log_type_enabled(v14, type);
  if (!v23)
  {
    if (!v28) {
      goto LABEL_99;
    }
    *(_DWORD *)buf = 136446210;
    unint64_t v35 = "operator()";
    uint64_t v16 = "%{public}s called with null completion, no backtrace";
    goto LABEL_98;
  }

  if (v28)
  {
    *(_DWORD *)buf = 136446466;
    unint64_t v35 = "operator()";
    __int128 v36 = 2082;
    __int128 v37 = v23;
    size_t v25 = "%{public}s called with null completion, dumping backtrace:%{public}s";
    goto LABEL_66;
  }
  }

      __int16 v110 = *(unsigned __int8 **)(v32 + 24);
      uint64_t v111 = *v110;
      if (v111 != 13 && v111 != 10)
      {
        if (v110[1] == 45)
        {
          *(_DWORD *)(v32 + 12) = 3;
LABEL_116:
          *(void *)(v32 + 16) = 2LL;
          *(_BYTE *)(v32 + 8) = 0;
LABEL_117:
          uint64_t v115 = a1[4];
          if (!v115) {
            goto LABEL_153;
          }
          goto LABEL_121;
        }

        goto LABEL_119;
      }

      *(_DWORD *)(v32 + 12) = 2;
      uint64_t v113 = v110[1];
      if (v113 == 13 || v113 == 10) {
        goto LABEL_116;
      }
      *(void *)(v32 + 16) = 1LL;
LABEL_120:
      *(_BYTE *)(v32 + 8) = 1;
      uint64_t v115 = a1[4];
      if (!v115) {
        goto LABEL_153;
      }
LABEL_121:
      uint64_t v116 = *(id *)(v115 + 72);
      if (!v116 || (v117 = v116[3], v116, v117 != 4))
      {
        v118 = a1[4];
        if (v118)
        {
          __int128 v119 = a5;
          __int128 v120 = *(void *)(v118 + 96);
          uint64_t v121 = *(id *)(v118 + 72);
          if (v121)
          {
            uint64_t v122 = v121[4];
          }

          else
          {
            uint64_t v122 = 0LL;
          }
        }

        else
        {
LABEL_153:
          __int128 v119 = a5;
          __int128 v120 = 0LL;
          uint64_t v122 = 0LL;
        }

        unint64_t v124 = a1[4];
        if (v124) {
          v125 = *(dispatch_data_s **)(v124 + 40);
        }
        else {
          v125 = 0LL;
        }
        unint64_t v123 = *(void *)(*(void *)(a1[6] + 8LL) + 24LL);
        v126 = dispatch_data_create_subrange(v125, v123, v10 + v9 + a1[8] - (v120 + v122) - v123);
        v127 = a1[4];
        if (v127 && *(_BYTE *)(v127 + 8))
        {
          v128 = a1[8];
          goto LABEL_132;
        }

        (*(void (**)(void))(a1[5] + 16LL))();
        v127 = a1[4];
        v128 = a1[8];
        if (v127)
        {
LABEL_132:
          v129 = *(id *)(v127 + 72);
          v130 = v129;
          if (v129)
          {
            v131 = *((void *)v129 + 4);
            v127 = a1[4];
            if (v127)
            {
LABEL_134:
              v132 = *(id *)(v127 + 72);
              if (v132) {
                v127 = v132[2];
              }
              else {
                v127 = 0LL;
              }
LABEL_136:
              *(void *)(*(void *)(a1[6] + 8LL) + 24LL) = v10 + v9 + v128 - v131 + v127;

              v133 = a1[4];
              a5 = v119;
              if (v133)
              {
                if (!*(_BYTE *)(v133 + 8) || (*(_BYTE *)(v133 + 8) = 0, (v133 = a1[4]) != 0))
                {
                  v134 = *(id *)(v133 + 56);
                  if (v134)
                  {
                    v134[5] = 0LL;
                    v134[6] = 0LL;
                  }
                }
              }

              v135 = a1[4];
              if (!v135) {
                goto LABEL_155;
              }
              v136 = (char *)*(id *)(v135 + 72);
              if (v136)
              {
                v137 = v136[8];

                v9 -= v137;
              }

              v135 = a1[4];
              if (v135)
              {
                v138 = *(id *)(v135 + 72);
                if (v138) {
                  LODWORD(v135) = v138[3];
                }
                else {
                  LODWORD(v135) = 0;
                }
              }

              else
              {
LABEL_155:
                v138 = 0LL;
              }

              v139 = a1[4];
              if (v139) {
                *(_DWORD *)(v139 + 12) = v135;
              }

              goto LABEL_5;
            }
          }

          else
          {
            v131 = 0LL;
            v127 = a1[4];
            if (v127) {
              goto LABEL_134;
            }
          }

          v132 = 0LL;
          goto LABEL_136;
        }

        v131 = 0LL;
        v130 = 0LL;
        v132 = 0LL;
        goto LABEL_136;
      }

      if (v33) {
        free(v33);
      }
      return 0LL;
    }

    if (!v42)
    {
      uint64_t v34 = (os_log_s *)__nwlog_obj();
      unint64_t v35 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v45 = "nw_http_copy_trailer_fields_from_indeterminate_binary_message";
        __int128 v36 = "%{public}s called with null buffer, backtrace limit exceeded";
        goto LABEL_103;
      }

      goto LABEL_104;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v34 = (os_log_s *)__nwlog_obj();
    unint64_t v35 = type;
    uint64_t v39 = os_log_type_enabled(v34, type);
    if (!backtrace_string)
    {
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v45 = "nw_http_copy_trailer_fields_from_indeterminate_binary_message";
        __int128 v36 = "%{public}s called with null buffer, no backtrace";
        goto LABEL_103;
      }

      goto LABEL_104;
    }

    if (v39)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v45 = "nw_http_copy_trailer_fields_from_indeterminate_binary_message";
      uint64_t v46 = 2082;
      uint64_t v47 = (unint64_t)backtrace_string;
      uint64_t v40 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
LABEL_93:
      _os_log_impl(&dword_181A5C000, v34, v35, v40, buf, 0x16u);
    }

      abort();
    }
  }

  else
  {
    if (v52 <= 1) {
      uint64_t v53 = 1LL;
    }
    else {
      uint64_t v53 = (v9 - v8) >> 3;
    }
    uint64_t v54 = v51 + v52 - 1;
    uint64_t v55 = v8;
    uint64_t v56 = v53;
    do
    {
      --v54;
      v55 += 8;
      --v56;
    }

    while (v56);
    if (v10 != v50) {
      goto LABEL_76;
    }
  }

    free(v30);
    goto LABEL_105;
  }

  if (gLogDatapath)
  {
    __nwlog_obj();
    unint64_t v57 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v62 = "nw_nat64_get_interface_state_internal";
      _os_log_impl(&dword_181A5C000, v57, OS_LOG_TYPE_DEBUG, "%{public}s bailing because local only", buf, 0xCu);
    }
  }

  return 3LL;
}

    goto LABEL_105;
  }

  if (!v5)
  {
    __nwlog_obj();
    unint64_t v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
    uint64_t v27 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v72) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unsigned __int8 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      size_t v31 = type[0];
      if (os_log_type_enabled(v28, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
        _os_log_impl(&dword_181A5C000, v28, v31, "%{public}s called with null metric_name", buf, 0xCu);
      }

      goto LABEL_104;
    }

    if (!(_BYTE)v72)
    {
      __nwlog_obj();
      unsigned __int8 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v47 = type[0];
      if (os_log_type_enabled(v28, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
        _os_log_impl( &dword_181A5C000,  v28,  v47,  "%{public}s called with null metric_name, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_104;
    }

    __int128 v37 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    unsigned __int8 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    __int128 v38 = type[0];
    uint64_t v39 = os_log_type_enabled(v28, type[0]);
    if (!v37)
    {
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
        _os_log_impl(&dword_181A5C000, v28, v38, "%{public}s called with null metric_name, no backtrace", buf, 0xCu);
      }

      goto LABEL_104;
    }

    if (v39)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = v37;
      _os_log_impl( &dword_181A5C000,  v28,  v38,  "%{public}s called with null metric_name, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_70;
  }

  if (!v7)
  {
    __nwlog_obj();
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
    uint64_t v27 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v72) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unsigned __int8 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v33 = type[0];
      if (os_log_type_enabled(v28, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
        _os_log_impl(&dword_181A5C000, v28, v33, "%{public}s called with null metrics", buf, 0xCu);
      }

      goto LABEL_104;
    }

    if (!(_BYTE)v72)
    {
      __nwlog_obj();
      unsigned __int8 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      size_t v48 = type[0];
      if (os_log_type_enabled(v28, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
        _os_log_impl( &dword_181A5C000,  v28,  v48,  "%{public}s called with null metrics, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_104;
    }

    __int128 v37 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    unsigned __int8 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v40 = type[0];
    uint64_t v41 = os_log_type_enabled(v28, type[0]);
    if (!v37)
    {
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
        _os_log_impl(&dword_181A5C000, v28, v40, "%{public}s called with null metrics, no backtrace", buf, 0xCu);
      }

      goto LABEL_104;
    }

    if (v41)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_activity_submit_metrics";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = v37;
      _os_log_impl( &dword_181A5C000,  v28,  v40,  "%{public}s called with null metrics, dumping backtrace:%{public}s",  buf,  0x16u);
    }

      if (v12) {
        free(v12);
      }
      v58[0] = MEMORY[0x1895F87A8];
      v58[1] = 3221225472LL;
      v58[2] = __nw_activity_retrieve_metrics_block_invoke_87;
      v58[3] = &unk_189BC8740;
      unint64_t v59 = v8;
      uint64_t v51 = (dispatch_queue_s *)v6;
      uint64_t v52 = dispatch_block_create_with_qos_class((dispatch_block_flags_t)0LL, v10, 0, v58);
      dispatch_async(v51, v52);

      goto LABEL_22;
    }

  if (v29) {
    free(v29);
  }
LABEL_106:
  if (ioctl(*(_DWORD *)&a1[4].flow_id[12], 0x8004667EuLL, &v551, v532) < 0)
  {
    uint64_t v45 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v46 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v553 = "nw_socket_set_common_sockopts";
      v554 = 2080;
      *(void *)v555 = (char *)a1 + 404;
      *(_WORD *)&v555[8] = 1024;
      *(_DWORD *)&v555[10] = v45;
      _os_log_impl( &dword_181A5C000,  v46,  OS_LOG_TYPE_ERROR,  "%{public}s %s FIONBIO failed %{darwin.errno}d",  buf,  0x1Cu);
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v47 = (os_log_s *)gLogObj;
    if ((_DWORD)v45 == 22)
    {
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v553 = "nw_socket_set_common_sockopts";
        v554 = 1024;
        *(_DWORD *)v555 = 22;
        size_t v48 = "%{public}s FIONBIO failed %{darwin.errno}d";
LABEL_287:
        _os_log_impl(&dword_181A5C000, v47, OS_LOG_TYPE_ERROR, v48, buf, 0x12u);
      }

      if (v49) {
        free(v49);
      }
      goto LABEL_13;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    size_t v25 = (id)gLogObj;
    *(_DWORD *)uint64_t v76 = 136446210;
    uint64_t v77 = "nw_path_evaluator_evaluate";
    uint64_t v26 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v26, buf, &type))
    {
      if (buf[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v27 = (os_log_s *)(id)gLogObj;
        unsigned __int8 v28 = buf[0];
        if (os_log_type_enabled(v27, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)uint64_t v76 = 136446210;
          uint64_t v77 = "nw_path_evaluator_evaluate";
          _os_log_impl(&dword_181A5C000, v27, v28, "%{public}s nw_path_create failed", v76, 0xCu);
        }
      }

      else if (type)
      {
        __int128 v36 = __nw_create_backtrace_string();
        if (v36)
        {
          __int128 v37 = (char *)v36;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int128 v38 = (os_log_s *)(id)gLogObj;
          uint64_t v39 = buf[0];
          if (os_log_type_enabled(v38, (os_log_type_t)buf[0]))
          {
            *(_DWORD *)uint64_t v76 = 136446466;
            uint64_t v77 = "nw_path_evaluator_evaluate";
            uint64_t v78 = 2082;
            __int128 v79 = v37;
            _os_log_impl( &dword_181A5C000,  v38,  v39,  "%{public}s nw_path_create failed, dumping backtrace:%{public}s",  v76,  0x16u);
          }

          free(v37);
          if (!v26) {
            goto LABEL_84;
          }
          goto LABEL_83;
        }

        __nwlog_obj();
        uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v46 = buf[0];
        if (os_log_type_enabled(v27, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)uint64_t v76 = 136446210;
          uint64_t v77 = "nw_path_evaluator_evaluate";
          _os_log_impl(&dword_181A5C000, v27, v46, "%{public}s nw_path_create failed, no backtrace", v76, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v27 = (os_log_s *)(id)gLogObj;
        uint64_t v45 = buf[0];
        if (os_log_type_enabled(v27, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)uint64_t v76 = 136446210;
          uint64_t v77 = "nw_path_evaluator_evaluate";
          _os_log_impl( &dword_181A5C000,  v27,  v45,  "%{public}s nw_path_create failed, backtrace limit exceeded",  v76,  0xCu);
        }
      }
    }

    if (!v26)
    {
LABEL_84:
      free(v12);
LABEL_85:
      uint64_t v44 = 0LL;
      goto LABEL_86;
    }
          }
        }

        uint64_t v51 = v200;
        if (v63) {
          goto LABEL_138;
        }
        goto LABEL_106;
      }

      uint64_t v66 = (const UInt8 *)&v198[v42];
LABEL_107:
      v42 += v60 + 5;
      if (v42 > v207) {
        break;
      }
      if (v60 && v66)
      {
        if (v51 == 2)
        {
          uint64_t v67 = CFDataCreate(allocator, v66, v60);
          if (v67)
          {
            uint64_t v68 = CFPropertyListCreateWithData(allocator, v67, 0LL, 0LL, 0LL);
            if (v68)
            {
              uint64_t v69 = (void *)_CFXPCCreateXPCObjectFromCFObject();
              __int128 v70 = v69;
              if (v69)
              {
                uint64_t v71 = nw_resolver_config_create_with_dictionary(v69);
                uint64_t v72 = (uint64_t)v201->resolver_configs;
                if (!v72)
                {
                  uint64_t v73 = nw_array_create();
                  uint64_t v74 = v201->resolver_configs;
                  v201->resolver_configs = (OS_nw_array *)v73;

                  uint64_t v72 = (uint64_t)v201->resolver_configs;
                }

                nw_array_append(v72, v71);
              }

              CFRelease(v68);
            }

            CFRelease(v67);
          }
        }

        else if (v51 == 1)
        {
          if (v60 != 8)
          {
            __nwlog_obj();
            v97 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
            {
              LODWORD(length[0]) = 136446722;
              *(size_t *)((char *)length + 4) = (size_t)"nw_path_override_info_create_from_data";
              WORD2(length[1]) = 1024;
              *(_DWORD *)((char *)&length[1] + 6) = v60;
              WORD1(length[2]) = 2048;
              *(size_t *)((char *)&length[2] + 4) = 8LL;
              _os_log_impl( &dword_181A5C000,  v97,  OS_LOG_TYPE_ERROR,  "%{public}s received invalid size for flags (%d != %zu)",  (uint8_t *)length,  0x1Cu);
            }

            goto LABEL_189;
          }

          v201->override_flags = *(void *)v66;
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v75 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
          {
            LODWORD(length[0]) = 136446466;
            *(size_t *)((char *)length + 4) = (size_t)"nw_path_override_info_create_from_data";
            WORD2(length[1]) = 1024;
            *(_DWORD *)((char *)&length[1] + 6) = v51;
            _os_log_impl( &dword_181A5C000,  v75,  OS_LOG_TYPE_ERROR,  "%{public}s received unknown TLV (type %d)",  (uint8_t *)length,  0x12u);
          }
        }
      }

      uint64_t v41 = *(void *)v205;
      if (v42 >= *(void *)v205) {
        goto LABEL_139;
      }
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v88 = (id)gLogObj;
    LODWORD(length[0]) = 136446978;
    *(size_t *)((char *)length + 4) = (size_t)"nw_path_override_info_create_from_data";
    WORD2(length[1]) = 1024;
    *(_DWORD *)((char *)&length[1] + 6) = v60;
    WORD1(length[2]) = 2048;
    *(size_t *)((char *)&length[2] + 4) = v42;
    WORD2(length[3]) = 2048;
    *(size_t *)((char *)&length[3] + 6) = v207;
    v196 = length;
    v89 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(type) = 16;
    LOBYTE(v236) = 0;
    if (__nwlog_fault(v89, &type, &v236))
    {
      if (type == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v90 = (os_log_s *)(id)gLogObj;
        uint64_t v91 = type;
        if (os_log_type_enabled(v90, (os_log_type_t)type))
        {
          LODWORD(length[0]) = 136446978;
          *(size_t *)((char *)length + 4) = (size_t)"nw_path_override_info_create_from_data";
          WORD2(length[1]) = 1024;
          *(_DWORD *)((char *)&length[1] + 6) = v60;
          WORD1(length[2]) = 2048;
          *(size_t *)((char *)&length[2] + 4) = v42;
          WORD2(length[3]) = 2048;
          *(size_t *)((char *)&length[3] + 6) = v207;
          _os_log_impl( &dword_181A5C000,  v90,  v91,  "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu)",  (uint8_t *)length,  0x26u);
        }

        goto LABEL_186;
      }

      if ((_BYTE)v236)
      {
        v93 = __nw_create_backtrace_string();
        if (v93)
        {
          uint64_t v94 = (char *)v93;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int128 v95 = (os_log_s *)(id)gLogObj;
          v206 = type;
          if (os_log_type_enabled(v95, (os_log_type_t)type))
          {
            LODWORD(length[0]) = 136447234;
            *(size_t *)((char *)length + 4) = (size_t)"nw_path_override_info_create_from_data";
            WORD2(length[1]) = 1024;
            *(_DWORD *)((char *)&length[1] + 6) = v60;
            WORD1(length[2]) = 2048;
            *(size_t *)((char *)&length[2] + 4) = v42;
            WORD2(length[3]) = 2048;
            *(size_t *)((char *)&length[3] + 6) = v207;
            HIWORD(length[4]) = 2082;
            length[5] = (size_t)v94;
            _os_log_impl( &dword_181A5C000,  v95,  v206,  "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), dumping backtrace:%{public}s",  (uint8_t *)length,  0x30u);
          }

          free(v94);
          goto LABEL_187;
        }

        __nwlog_obj();
        uint64_t v90 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v98 = type;
        if (os_log_type_enabled(v90, (os_log_type_t)type))
        {
          LODWORD(length[0]) = 136446978;
          *(size_t *)((char *)length + 4) = (size_t)"nw_path_override_info_create_from_data";
          WORD2(length[1]) = 1024;
          *(_DWORD *)((char *)&length[1] + 6) = v60;
          WORD1(length[2]) = 2048;
          *(size_t *)((char *)&length[2] + 4) = v42;
          WORD2(length[3]) = 2048;
          *(size_t *)((char *)&length[3] + 6) = v207;
          _os_log_impl( &dword_181A5C000,  v90,  v98,  "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), no backtrace",  (uint8_t *)length,  0x26u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v90 = (os_log_s *)(id)gLogObj;
        uint64_t v96 = type;
        if (os_log_type_enabled(v90, (os_log_type_t)type))
        {
          LODWORD(length[0]) = 136446978;
          *(size_t *)((char *)length + 4) = (size_t)"nw_path_override_info_create_from_data";
          WORD2(length[1]) = 1024;
          *(_DWORD *)((char *)&length[1] + 6) = v60;
          WORD1(length[2]) = 2048;
          *(size_t *)((char *)&length[2] + 4) = v42;
          WORD2(length[3]) = 2048;
          *(size_t *)((char *)&length[3] + 6) = v207;
          _os_log_impl( &dword_181A5C000,  v90,  v96,  "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), backtrace limit exceeded",  (uint8_t *)length,  0x26u);
        }
      }

    free(v32);
    goto LABEL_105;
  }

  uint64_t v7 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v8 = (os_log_s *)(id)gLogObj;
  uint64_t v9 = v8;
  if (v7 == 2)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v81 = "nw_path_create_evaluator_for_client_id";
      uint64_t v82 = 1024;
      LODWORD(v83[0]) = 2;
      _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_ERROR,  "%{public}s NECP_CLIENT_ACTION_CLAIM %{darwin.errno}d",  buf,  0x12u);
    }

    goto LABEL_91;
  }

  *(_DWORD *)buf = 136446466;
  uint64_t v81 = "nw_path_create_evaluator_for_client_id";
  uint64_t v82 = 1024;
  LODWORD(v83[0]) = v7;
  uint64_t v11 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v75) = 0;
  if (__nwlog_fault(v11, type, &v75))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v19 = (os_log_s *)(id)gLogObj;
      uint64_t v20 = type[0];
      if (os_log_type_enabled(v19, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v81 = "nw_path_create_evaluator_for_client_id";
        uint64_t v82 = 1024;
        LODWORD(v83[0]) = v7;
        _os_log_impl(&dword_181A5C000, v19, v20, "%{public}s NECP_CLIENT_ACTION_CLAIM %{darwin.errno}d", buf, 0x12u);
      }

        goto LABEL_105;
      }

      if (!v78)
      {
        __nwlog_obj();
        size_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v65 = v79[0];
        if (os_log_type_enabled(v48, (os_log_type_t)v79[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_interface_prohibited_by_parameters";
          _os_log_impl( &dword_181A5C000,  v48,  v65,  "%{public}s called with null interface, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_104;
      }

      uint64_t v56 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      size_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      unint64_t v59 = v79[0];
      int64_t v60 = os_log_type_enabled(v48, (os_log_type_t)v79[0]);
      if (!v56)
      {
        if (v60)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_interface_prohibited_by_parameters";
          _os_log_impl(&dword_181A5C000, v48, v59, "%{public}s called with null interface, no backtrace", buf, 0xCu);
        }

        goto LABEL_104;
      }

      if (v60)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_interface_prohibited_by_parameters";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = v56;
        _os_log_impl( &dword_181A5C000,  v48,  v59,  "%{public}s called with null interface, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_84;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_interface_prohibited_by_parameters";
    uint64_t v47 = (char *)_os_log_send_and_compose_impl();

    v79[0] = 16;
    uint64_t v78 = 0;
    if (__nwlog_fault(v47, v79, &v78))
    {
      if (v79[0] == 17)
      {
        __nwlog_obj();
        size_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v49 = v79[0];
        if (os_log_type_enabled(v48, (os_log_type_t)v79[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_interface_prohibited_by_parameters";
          _os_log_impl(&dword_181A5C000, v48, v49, "%{public}s called with null path", buf, 0xCu);
        }

        goto LABEL_104;
      }

      if (!v78)
      {
        __nwlog_obj();
        size_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v64 = v79[0];
        if (os_log_type_enabled(v48, (os_log_type_t)v79[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_interface_prohibited_by_parameters";
          _os_log_impl( &dword_181A5C000,  v48,  v64,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_104;
      }

      uint64_t v56 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      size_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      unint64_t v57 = v79[0];
      size_t v58 = os_log_type_enabled(v48, (os_log_type_t)v79[0]);
      if (!v56)
      {
        if (v58)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_interface_prohibited_by_parameters";
          _os_log_impl(&dword_181A5C000, v48, v57, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }

        goto LABEL_104;
      }

      if (v58)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_interface_prohibited_by_parameters";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = v56;
        _os_log_impl( &dword_181A5C000,  v48,  v57,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    free(backtrace_string);
    goto LABEL_156;
  }

  uint64_t v39 = (os_log_s *)__nwlog_obj();
  uint64_t v40 = v114[0];
  if (os_log_type_enabled(v39, (os_log_type_t)v114[0]))
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
    uint64_t v41 = "%{public}s called with null other_protocol";
    goto LABEL_155;
  }

        uint64_t v88 = v89;
        goto LABEL_105;
      }

      if (!(_BYTE)v105)
      {
        v89 = v88;
        __nwlog_obj();
        uint64_t v90 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v96 = v110[0];
        if (os_log_type_enabled(v90, (os_log_type_t)v110[0]))
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_endpoint_handler_copy_parent";
          _os_log_impl( &dword_181A5C000,  v90,  v96,  "%{public}s called with null handler, backtrace limit exceeded",  (uint8_t *)buf,  0xCu);
        }

        goto LABEL_104;
      }

      v92 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v93 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v94 = v110[0];
      __int128 v95 = os_log_type_enabled(v93, (os_log_type_t)v110[0]);
      if (v92)
      {
        if (v95)
        {
          buf[0] = 136446466;
          *(void *)&buf[1] = "nw_endpoint_handler_copy_parent";
          LOWORD(buf[3]) = 2082;
          *(void *)((char *)&buf[3] + 2) = v92;
          _os_log_impl( &dword_181A5C000,  v93,  v94,  "%{public}s called with null handler, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x16u);
        }

        free(v92);
      }

      else
      {
        if (v95)
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_endpoint_handler_copy_parent";
          _os_log_impl( &dword_181A5C000,  v93,  v94,  "%{public}s called with null handler, no backtrace",  (uint8_t *)buf,  0xCu);
        }
      }
    }

        uint64_t v42 = *((_WORD *)handle + 194);
        *((_WORD *)handle + 194) = v42 & 0xEFFF;
        if ((v42 & 0xC) != 0)
        {
          if ((v42 & 0x8000) == 0 && gLogDatapath)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            uint64_t v43 = (os_log_s *)gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v44 = *((_DWORD *)handle + 92);
              *(_DWORD *)buf = 136446978;
              uint64_t v76 = "nw_protocol_http2_process_connected";
              uint64_t v77 = 2082;
              uint64_t v78 = handle + 390;
              __int128 v79 = 2080;
              uint64_t v80 = " ";
              uint64_t v81 = 1024;
              uint64_t v82 = v44;
              _os_log_impl( &dword_181A5C000,  v43,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> tunnel already connected or closed, ignoring connected event",  buf,  0x26u);
            }
          }

          return 1LL;
        }

        nw_http2_send_settings((uint64_t)handle);
        uint64_t v45 = *((__int16 *)handle + 194);
        *((_WORD *)handle + 194) |= 4u;
        if ((v45 & 0x80000000) == 0 && gLogDatapath)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v66 = (os_log_s *)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v67 = *((_DWORD *)handle + 92);
            *(_DWORD *)buf = 136446978;
            uint64_t v76 = "nw_protocol_http2_process_connected";
            uint64_t v77 = 2082;
            uint64_t v78 = handle + 390;
            __int128 v79 = 2080;
            uint64_t v80 = " ";
            uint64_t v81 = 1024;
            uint64_t v82 = v67;
            _os_log_impl( &dword_181A5C000,  v66,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> http2 tunnel is now connected",  buf,  0x26u);
          }
        }

        uint64_t v46 = (void *)*((void *)handle + 14);
        if (v46)
        {
          uint64_t v47 = v46;
          size_t v48 = (v47[231] & 4) == 0;

          if (v48)
          {
            if ((*((__int16 *)handle + 194) & 0x80000000) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              uint64_t v49 = (os_log_s *)gconnectionLogObj;
              if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v50 = *((_DWORD *)handle + 92);
                *(_DWORD *)buf = 136446978;
                uint64_t v76 = "nw_protocol_http2_process_connected";
                uint64_t v77 = 2082;
                uint64_t v78 = handle + 390;
                __int128 v79 = 2080;
                uint64_t v80 = " ";
                uint64_t v81 = 1024;
                uint64_t v82 = v50;
                _os_log_impl( &dword_181A5C000,  v49,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> http2's remote endpoint is not registered",  buf,  0x26u);
              }
            }
          }

          else
          {
            nw_endpoint_add_edges_for_instance(v47, (unsigned __int8 *)handle, 1);
          }

          goto LABEL_152;
        }

        if (*((__int16 *)handle + 194) < 0)
        {
LABEL_152:
          nw_protocol_http2_process_input((uint64_t)handle);
          uint64_t v64 = (char *)*((void *)handle + 19);
          *(void *)os_log_type_t type = MEMORY[0x1895F87A8];
          uint64_t v69 = 0x40000000LL;
          __int128 v70 = ___ZL35nw_protocol_http2_process_connectedP17nw_protocol_http2_block_invoke;
          uint64_t v71 = &__block_descriptor_tmp_46_82685;
          uint64_t v72 = handle;
          nw_hash_table_apply(v64, (uint64_t)type);
          return 1LL;
        }

        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v53 = *((_DWORD *)handle + 92);
        *(_DWORD *)buf = 136446978;
        uint64_t v76 = "nw_protocol_http2_process_connected";
        uint64_t v77 = 2082;
        uint64_t v78 = handle + 390;
        __int128 v79 = 2080;
        uint64_t v80 = " ";
        uint64_t v81 = 1024;
        uint64_t v82 = v53;
        uint64_t v54 = (char *)_os_log_send_and_compose_impl();
        uint64_t v74 = OS_LOG_TYPE_ERROR;
        uint64_t v73 = 0;
        if (__nwlog_fault(v54, &v74, &v73))
        {
          if (v74 == OS_LOG_TYPE_FAULT)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            uint64_t v55 = (os_log_s *)gconnectionLogObj;
            uint64_t v56 = v74;
            if (!os_log_type_enabled((os_log_t)gconnectionLogObj, v74)) {
              goto LABEL_150;
            }
            unint64_t v57 = *((_DWORD *)handle + 92);
            *(_DWORD *)buf = 136446978;
            uint64_t v76 = "nw_protocol_http2_process_connected";
            uint64_t v77 = 2082;
            uint64_t v78 = handle + 390;
            __int128 v79 = 2080;
            uint64_t v80 = " ";
            uint64_t v81 = 1024;
            uint64_t v82 = v57;
            size_t v58 = "%{public}s %{public}s%s<i%u> http2 does not have remote endpoint";
            goto LABEL_149;
          }

          if (!v73)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            uint64_t v55 = (os_log_s *)gconnectionLogObj;
            uint64_t v56 = v74;
            if (!os_log_type_enabled((os_log_t)gconnectionLogObj, v74)) {
              goto LABEL_150;
            }
            uint64_t v62 = *((_DWORD *)handle + 92);
            *(_DWORD *)buf = 136446978;
            uint64_t v76 = "nw_protocol_http2_process_connected";
            uint64_t v77 = 2082;
            uint64_t v78 = handle + 390;
            __int128 v79 = 2080;
            uint64_t v80 = " ";
            uint64_t v81 = 1024;
            uint64_t v82 = v62;
            size_t v58 = "%{public}s %{public}s%s<i%u> http2 does not have remote endpoint, backtrace limit exceeded";
            goto LABEL_149;
          }

          unint64_t v59 = (char *)__nw_create_backtrace_string();
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v55 = (os_log_s *)gconnectionLogObj;
          uint64_t v56 = v74;
          int64_t v60 = os_log_type_enabled((os_log_t)gconnectionLogObj, v74);
          if (v59)
          {
            if (v60)
            {
              unint64_t v61 = *((_DWORD *)handle + 92);
              *(_DWORD *)buf = 136447234;
              uint64_t v76 = "nw_protocol_http2_process_connected";
              uint64_t v77 = 2082;
              uint64_t v78 = handle + 390;
              __int128 v79 = 2080;
              uint64_t v80 = " ";
              uint64_t v81 = 1024;
              uint64_t v82 = v61;
              size_t v83 = 2082;
              int v84 = (nw_listen_protocol *)v59;
              _os_log_impl( &dword_181A5C000,  v55,  v56,  "%{public}s %{public}s%s<i%u> http2 does not have remote endpoint, dumping backtrace:%{public}s",  buf,  0x30u);
            }

            free(v59);
            goto LABEL_150;
          }

          if (v60)
          {
            uint64_t v63 = *((_DWORD *)handle + 92);
            *(_DWORD *)buf = 136446978;
            uint64_t v76 = "nw_protocol_http2_process_connected";
            uint64_t v77 = 2082;
            uint64_t v78 = handle + 390;
            __int128 v79 = 2080;
            uint64_t v80 = " ";
            uint64_t v81 = 1024;
            uint64_t v82 = v63;
            size_t v58 = "%{public}s %{public}s%s<i%u> http2 does not have remote endpoint, no backtrace";
LABEL_149:
            _os_log_impl(&dword_181A5C000, v55, v56, v58, buf, 0x26u);
          }
        }

    LODWORD(v52) = v52 | 0x10000;
    if (v34)
    {
LABEL_91:
      LODWORD(v52) = v52 | 0x20000;
      if (!v33) {
        goto LABEL_92;
      }
      goto LABEL_106;
    }

        LOWORD(v43) = v67;
        LOBYTE(v41) = v66;
        uint64_t v42 = v65;
        goto LABEL_112;
      }

      if ((unint64_t)v44 + 2 > v22)
      {
        uint64_t v65 = v42;
        uint64_t v66 = v41;
        uint64_t v67 = v43;
        if ((*(_BYTE *)(a1 + 158) & 1) != 0) {
          goto LABEL_104;
        }
        v92 = (os_log_s *)__nwlog_obj();
        if (!os_log_type_enabled(v92, OS_LOG_TYPE_ERROR)) {
          goto LABEL_104;
        }
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = a1 + 159;
        *(_WORD *)&buf[22] = 2080;
        v146 = " ";
        v147 = 2048;
        v148 = a1;
        v149 = 2048;
        *(void *)&v150 = v22;
        uint64_t v69 = "%{public}s %{public}s%s%p IPv6 extension header cannot fit in packet length %lu";
        __int128 v70 = v92;
        uint64_t v71 = 52;
LABEL_103:
        _os_log_impl(&dword_181A5C000, v70, OS_LOG_TYPE_ERROR, v69, buf, v71);
        goto LABEL_104;
      }

      uint64_t v50 = (unsigned __int8 *)v17 + v44;
      uint64_t v51 = 8 * v50[1] + 8;
      uint64_t v52 = v51 + v44;
      if (v51 + v44 > v22)
      {
        v125 = a7.n128_u32[0];
        uint64_t v65 = v42;
        uint64_t v66 = v41;
        uint64_t v67 = v43;
        if ((*(_BYTE *)(a1 + 158) & 1) != 0) {
          goto LABEL_104;
        }
        v93 = (os_log_s *)__nwlog_obj();
        if (!os_log_type_enabled(v93, OS_LOG_TYPE_ERROR)) {
          goto LABEL_104;
        }
        *(_DWORD *)buf = v125;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = a1 + 159;
        *(_WORD *)&buf[22] = 2080;
        v146 = " ";
        v147 = 2048;
        v148 = a1;
        v149 = 1024;
        LODWORD(v150) = v51;
        WORD2(v150) = 2048;
        *(void *)((char *)&v150 + 6) = v22;
        uint64_t v69 = "%{public}s %{public}s%s%p IPv6 extension header length %u cannot fit in packet length %lu";
        __int128 v70 = v93;
        uint64_t v71 = 58;
        goto LABEL_103;
      }

      if ((*(_BYTE *)(a1 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          __int128 v119 = v43;
          __int128 v120 = v41;
          v129 = v42;
          unint64_t v123 = a7;
          v127 = a8;
          uint64_t v53 = v45;
          log = (os_log_s *)__nwlog_obj();
          uint64_t v54 = os_log_type_enabled(log, OS_LOG_TYPE_DEBUG);
          a7 = v123;
          a8 = v127;
          uint64_t v45 = v53;
          uint64_t v42 = v129;
          uint64_t v43 = v119;
          uint64_t v41 = v120;
          if (v54)
          {
            *(_DWORD *)buf = v123.n128_u32[0];
            *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = a1 + 159;
            *(_WORD *)&buf[22] = 2080;
            v146 = " ";
            v147 = 2048;
            v148 = a1;
            v149 = 1024;
            LODWORD(v150) = v40;
            WORD2(v150) = 1024;
            *(_DWORD *)((char *)&v150 + 6) = v51;
            _os_log_impl(&dword_181A5C000, log, OS_LOG_TYPE_DEBUG, v53, buf, 0x36u);
            a7 = v123;
            a8 = v127;
            uint64_t v45 = v53;
            uint64_t v42 = v129;
            uint64_t v43 = v119;
            uint64_t v41 = v120;
          }
        }
      }

      uint64_t v40 = *v50;
      uint64_t v44 = v52;
LABEL_69:
    }
  }

  if ((*(_BYTE *)(a1 + 158) & 1) == 0)
  {
    v99 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v99, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = a1 + 159;
      *(_WORD *)&buf[22] = 2080;
      v146 = " ";
      v147 = 2048;
      v148 = a1;
      _os_log_impl( &dword_181A5C000,  v99,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s%p Frame is no longer valid",  buf,  0x2Au);
    }
  }

  uint64_t result = 0LL;
  *(void *)(a1 + 48) = 0LL;
  return result;
}

void std::__split_buffer<void (nw::object::**)(void),nw::c_allocator<void (nw::object::**)(void)>>::push_back( void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 != (char *)a1[3])
  {
LABEL_24:
    *(void *)uint64_t v4 = *a2;
    a1[2] += 8LL;
    return;
  }

  uint64_t v5 = (char *)a1[1];
  uint64_t v6 = (uint64_t)&v5[-*a1];
  if ((unint64_t)v5 > *a1)
  {
    uint64_t v7 = v6 >> 3;
    BOOL v8 = v6 >> 3 < -1;
    uint64_t v9 = (v6 >> 3) + 2;
    if (v8) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = v7 + 1;
    }
    uint64_t v11 = v10 >> 1;
    uint64_t v12 = -v11;
    uint64_t v13 = &v5[-8 * v11];
    int64_t v14 = v4 - v5;
    if (v4 != v5)
    {
      memmove(&v5[-8 * v11], v5, v4 - v5);
      uint64_t v4 = (char *)a1[1];
    }

    BOOL v15 = &v4[8 * v12];
    uint64_t v4 = &v13[v14];
    a1[1] = v15;
    a1[2] = &v13[v14];
    goto LABEL_24;
  }

  else {
    size_t v16 = (uint64_t)&v4[-*a1] >> 2;
  }
  uint64_t v17 = (char *)calloc(v16, 8uLL);
  if (v17)
  {
    uint64_t v18 = &v17[8 * (v16 >> 2)];
    uint64_t v19 = (uint64_t *)a1[1];
    uint64_t v4 = v18;
    uint64_t v20 = a1[2] - (void)v19;
    if (!v20) {
      goto LABEL_22;
    }
    uint64_t v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8LL];
    unint64_t v21 = v20 - 8;
    if (v21 >= 0x38)
    {
      uint64_t v23 = &v17[8 * (v16 >> 2)];
      uint64_t v22 = v23;
      if ((unint64_t)(v23 - (char *)v19) >= 0x20)
      {
        uint64_t v24 = (v21 >> 3) + 1;
        uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v22 = &v18[v25];
        uint64_t v26 = (__int128 *)(v19 + 2);
        uint64_t v27 = v23 + 16;
        uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          __int128 v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          _OWORD *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4LL;
        }

        while (v28);
        if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_22:
          size_t v31 = (char *)*a1;
          *a1 = v17;
          a1[1] = v18;
          a1[2] = v4;
          a1[3] = &v17[8 * v16];
          if (v31)
          {
            free(v31);
            uint64_t v4 = (char *)a1[2];
          }

          goto LABEL_24;
        }

        uint64_t v19 = (uint64_t *)((char *)v19 + v25);
      }
    }

    else
    {
      uint64_t v22 = &v17[8 * (v16 >> 2)];
    }

    do
    {
      uint64_t v30 = *v19++;
      *(void *)uint64_t v22 = v30;
      v22 += 8;
    }

    while (v22 != v4);
    goto LABEL_22;
  }

  __break(1u);
}

void std::__split_buffer<void (nw::object::**)(void),nw::c_allocator<void (nw::object::**)(void)>>::push_front( const void **a1, void *a2)
{
  uint64_t v4 = (char *)a1[1];
  if (v4 != *a1)
  {
    uint64_t v5 = (char *)a1[1];
LABEL_25:
    *((void *)v5 - 1) = *a2;
    a1[1] = (char *)a1[1] - 8;
    return;
  }

  uint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  if (v6 < v7)
  {
    uint64_t v8 = (v7 - v6) >> 3;
    if (v8 >= -1) {
      uint64_t v9 = v8 + 1;
    }
    else {
      uint64_t v9 = v8 + 2;
    }
    uint64_t v10 = v9 >> 1;
    uint64_t v5 = &v4[8 * (v9 >> 1)];
    if (v6 != v4)
    {
      memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
      uint64_t v4 = (char *)a1[2];
    }

    a1[1] = v5;
    a1[2] = &v4[8 * v10];
    goto LABEL_25;
  }

  if (v7 == v4) {
    size_t v11 = 1LL;
  }
  else {
    size_t v11 = (v7 - v4) >> 2;
  }
  uint64_t v12 = (char *)calloc(v11, 8uLL);
  if (v12)
  {
    unint64_t v13 = (v11 + 3) >> 2;
    uint64_t v5 = &v12[8 * v13];
    int64_t v14 = (uint64_t *)a1[1];
    BOOL v15 = v5;
    int64_t v16 = (_BYTE *)a1[2] - (_BYTE *)v14;
    if (!v16) {
      goto LABEL_23;
    }
    BOOL v15 = &v5[v16 & 0xFFFFFFFFFFFFFFF8LL];
    unint64_t v17 = v16 - 8;
    if (v17 >= 0x38)
    {
      uint64_t v18 = &v12[8 * v13];
      uint64_t v19 = v18;
      if ((unint64_t)(v18 - (char *)v14) >= 0x20)
      {
        uint64_t v20 = (v17 >> 3) + 1;
        uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v18 = &v5[v21];
        uint64_t v22 = (__int128 *)(v14 + 2);
        uint64_t v23 = v19 + 16;
        uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          __int128 v25 = *v22;
          *(v23 - 1) = *(v22 - 1);
          *uint64_t v23 = v25;
          v22 += 2;
          v23 += 2;
          v24 -= 4LL;
        }

        while (v24);
        if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_23:
          uint64_t v27 = (void *)*a1;
          *a1 = v12;
          a1[1] = v5;
          a1[2] = v15;
          a1[3] = &v12[8 * v11];
          if (v27)
          {
            free(v27);
            uint64_t v5 = (char *)a1[1];
          }

          goto LABEL_25;
        }

        int64_t v14 = (uint64_t *)((char *)v14 + v21);
      }
    }

    else
    {
      uint64_t v18 = &v12[8 * v13];
    }

    do
    {
      uint64_t v26 = *v14++;
      *(void *)uint64_t v18 = v26;
      v18 += 8;
    }

    while (v18 != v15);
    goto LABEL_23;
  }

  __break(1u);
}

uint64_t nw::object::_redacted_description(uint64_t **this)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  uint64_t v2 = nw::object::cls(this[2]);
  uint64_t v3 = nw::object::class_def::lookup_method(v2, nw::object::__description_def_instance, qword_18C45F480);
  if (v4) {
    BOOL v5 = (v4 & 1 | v3) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  int v6 = !v5;
  if (v3) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = v6 == 0;
  }
  if (!v7)
  {
    uint64_t v8 = (uint64_t (*)(void *))v3;
    uint64_t v9 = (uint64_t **)((char *)this + (v4 >> 1));
    if ((v4 & 1) != 0) {
      uint64_t v8 = *(uint64_t (**)(void *))(*v9 + v8);
    }
    return v8(v9);
  }

  nw::object::cls(this[2]);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446466;
  uint64_t v20 = "bad_method_lookup";
  __int16 v21 = 2080;
  uint64_t v22 = "object::description";
  size_t v11 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v11, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v12 = (os_log_s *)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v20 = "bad_method_lookup";
        __int16 v21 = 2080;
        uint64_t v22 = "object::description";
        int64_t v14 = "%{public}s unable to lookup %s";
LABEL_27:
        _os_log_impl(&dword_181A5C000, v12, v13, v14, buf, 0x16u);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v12 = (os_log_s *)gLogObj;
      os_log_type_t v13 = type;
      BOOL v16 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446722;
          uint64_t v20 = "bad_method_lookup";
          __int16 v21 = 2080;
          uint64_t v22 = "object::description";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s unable to lookup %s, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(backtrace_string);
        goto LABEL_28;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v20 = "bad_method_lookup";
        __int16 v21 = 2080;
        uint64_t v22 = "object::description";
        int64_t v14 = "%{public}s unable to lookup %s, no backtrace";
        goto LABEL_27;
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v12 = (os_log_s *)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v20 = "bad_method_lookup";
        __int16 v21 = 2080;
        uint64_t v22 = "object::description";
        int64_t v14 = "%{public}s unable to lookup %s, backtrace limit exceeded";
        goto LABEL_27;
      }
    }
  }

uint64_t *nw::object::cls(uint64_t *this)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  if (this) {
    return this;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v10 = "cls";
  unint64_t v1 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  uint64_t v2 = __nwlog_fault(v1, &type, &v7);
  if ((_DWORD)v2)
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      uint64_t v2 = os_log_type_enabled(v3, type);
      if ((_DWORD)v2)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v10 = "cls";
        BOOL v5 = "%{public}s called with null m_cls";
LABEL_15:
        _os_log_impl(&dword_181A5C000, v3, v4, v5, buf, 0xCu);
      }
    }

    else if (v7)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      uint64_t v2 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if ((_DWORD)v2)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v10 = "cls";
          __int16 v11 = 2082;
          uint64_t v12 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v3,  v4,  "%{public}s called with null m_cls, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_16;
      }

      if ((_DWORD)v2)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v10 = "cls";
        BOOL v5 = "%{public}s called with null m_cls, no backtrace";
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      uint64_t v2 = os_log_type_enabled(v3, type);
      if ((_DWORD)v2)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v10 = "cls";
        BOOL v5 = "%{public}s called with null m_cls, backtrace limit exceeded";
        goto LABEL_15;
      }
    }
  }

uint64_t nw::object::class_def::lookup_method(void *a1, unint64_t a2, char a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a3)
  {
    if (a1[13] > a2) {
      return *(void *)(*(void *)(a1[9] + (((a1[12] + a2) >> 5) & 0x7FFFFFFFFFFFFF8LL))
    }
                       + 16LL * (*((_BYTE *)a1 + 96) + a2));
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v15 = "lookup_method";
    os_log_type_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (__nwlog_fault(v4, &type, &v12))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v5 = (os_log_s *)__nwlog_obj();
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_32;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "lookup_method";
        char v7 = "%{public}s called with null (def.slot().value() < m_method_table.size())";
        goto LABEL_31;
      }

      if (!v12)
      {
        BOOL v5 = (os_log_s *)__nwlog_obj();
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_32;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "lookup_method";
        char v7 = "%{public}s called with null (def.slot().value() < m_method_table.size()), backtrace limit exceeded";
        goto LABEL_31;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v11 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v15 = "lookup_method";
          __int16 v16 = 2082;
          char v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null (def.slot().value() < m_method_table.size()), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v4) {
          return 0LL;
        }
        goto LABEL_33;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "lookup_method";
        char v7 = "%{public}s called with null (def.slot().value() < m_method_table.size()), no backtrace";
LABEL_31:
        _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
      }
    }
  }

  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v15 = "lookup_method";
    os_log_type_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v15 = "lookup_method";
      char v7 = "%{public}s called with null (def.slot())";
      goto LABEL_31;
    }

    if (!v12)
    {
      BOOL v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v15 = "lookup_method";
      char v7 = "%{public}s called with null (def.slot()), backtrace limit exceeded";
      goto LABEL_31;
    }

    uint64_t v8 = (char *)__nw_create_backtrace_string();
    BOOL v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (!v8)
    {
      if (!v9) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v15 = "lookup_method";
      char v7 = "%{public}s called with null (def.slot()), no backtrace";
      goto LABEL_31;
    }

    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v15 = "lookup_method";
      __int16 v16 = 2082;
      char v17 = v8;
      _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null (def.slot()), dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v8);
  }

void nw::object::_class(nw::object *this)
{
  if ((v1 & 1) == 0)
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_18C45F4A8 = 6LL;
      xmmword_18C45F4B0 = 0u;
      unk_18C45F4C0 = 0u;
      xmmword_18C45F4D0 = 0u;
      *(_OWORD *)&qword_18C45F4E0 = 0u;
      *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
      *(_OWORD *)&qword_18C45F500 = 0u;
      xmmword_18C45F510 = 0u;
      unk_18C45F520 = 0u;
      qword_18C45F530 = (uint64_t)&qword_18C45F530;
      unk_18C45F538 = &qword_18C45F530;
      qword_18C45F540 = 0LL;
      dword_18C45F548 = 0;
    }
  }

CFStringRef nw::object::_description(nw::object *this)
{
  uint64_t v1 = MEMORY[0x189614768];
  uint64_t v2 = MEMORY[0x189614768] + 64LL;
  uint64_t v3 = (uint64_t *)MEMORY[0x189614738];
  uint64_t v4 = *(void *)(MEMORY[0x189614738] + 8LL);
  uint64_t v5 = *(void *)(MEMORY[0x189614738] + 16LL);
  v29[0] = MEMORY[0x189614768] + 64LL;
  uint64_t v21 = v4;
  *(uint64_t *)((char *)&v21 + *(void *)(v4 - sub_181CA3C40(*(void **)(v0 + 16), *(void *)(v0 + 24)) = v5;
  os_log_type_t v6 = (std::ios_base *)((char *)&v21 + *(void *)(v21 - 24));
  std::ios_base::init(v6, &v22);
  v6[1].__vftable = 0LL;
  v6[1].__fmtflags_ = -1;
  uint64_t v21 = v1 + 24;
  v29[0] = v2;
  std::streambuf::basic_streambuf();
  uint64_t v7 = MEMORY[0x189614750];
  uint64_t v22 = MEMORY[0x189614750] + 16LL;
  *(_OWORD *)uint64_t v26 = 0u;
  __int128 v27 = 0u;
  int v28 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v21, (uint64_t)"<nw::object ", 12LL);
  uint64_t v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)">", 1LL);
  if ((v28 & 0x10) != 0)
  {
    unint64_t v11 = *((void *)&v27 + 1);
    if (*((void *)&v27 + 1) < v25)
    {
      *((void *)&v27 + 1) = v25;
      unint64_t v11 = v25;
    }

    char v12 = (const void **)&v24;
  }

  else
  {
    if ((v28 & 8) == 0)
    {
      size_t v9 = 0LL;
      HIBYTE(v20) = 0;
      uint64_t v10 = __p;
      goto LABEL_16;
    }

    char v12 = (const void **)v23;
    unint64_t v11 = v23[2];
  }

  uint64_t v13 = *v12;
  size_t v9 = v11 - (void)*v12;
  if (v9 >= 0x7FFFFFFFFFFFFFF8LL) {
    abort();
  }
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v10 = operator new(v14 + 1);
    __p[1] = (void *)v9;
    int64_t v20 = v15 | 0x8000000000000000LL;
    __p[0] = v10;
    goto LABEL_15;
  }

  HIBYTE(v20) = v11 - *(_BYTE *)v12;
  uint64_t v10 = __p;
  if (v9) {
LABEL_15:
  }
    memmove(v10, v13, v9);
LABEL_16:
  *((_BYTE *)v10 + v9) = 0;
  if (v20 >= 0) {
    __int16 v16 = __p;
  }
  else {
    __int16 v16 = (void **)__p[0];
  }
  CFStringRef v17 = CFStringCreateWithCString(0LL, (const char *)v16, 0x8000100u);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v21 = *v3;
  *(uint64_t *)((char *)&v21 + *(void *)(v21 - sub_181CA3C40(*(void **)(v0 + 16), *(void *)(v0 + 24)) = v3[3];
  uint64_t v22 = v7 + 16;
  if (SBYTE7(v27) < 0) {
    operator delete(v26[0]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x186E10044](v29);
  return v17;
}

void *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>( void *a1, uint64_t a2, uint64_t a3)
{
  if (!v23[0]) {
    goto LABEL_32;
  }
  os_log_type_t v6 = (char *)a1 + *(void *)(*a1 - 24LL);
  uint64_t v7 = *((void *)v6 + 5);
  uint64_t v8 = a2 + a3;
  if ((*((_DWORD *)v6 + 2) & 0xB0) == 0x20) {
    uint64_t v9 = a2 + a3;
  }
  else {
    uint64_t v9 = a2;
  }
  int v10 = *((_DWORD *)v6 + 36);
  if (v10 == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)));
    unint64_t v11 = std::locale::use_facet(&__b, MEMORY[0x189614558]);
    int v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32LL);
    std::locale::~locale(&__b);
    *((_DWORD *)v6 + 36) = v10;
    if (!v7) {
      goto LABEL_31;
    }
  }

  else if (!v7)
  {
    goto LABEL_31;
  }

  uint64_t v12 = *((void *)v6 + 3);
  BOOL v13 = v12 <= a3;
  size_t v14 = v12 - a3;
  if (v13) {
    size_t v15 = 0LL;
  }
  else {
    size_t v15 = v14;
  }
  if (v9 - a2 >= 1
    && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96LL))(v7, a2, v9 - a2) != v9 - a2)
  {
    goto LABEL_31;
  }

  if ((uint64_t)v15 >= 1)
  {
    if (v15 >= 0x7FFFFFFFFFFFFFF8LL) {
      abort();
    }
    if (v15 >= 0x17)
    {
      uint64_t v17 = (v15 & 0xFFFFFFFFFFFFFFF8LL) + 8;
      if ((v15 | 7) != 0x17) {
        uint64_t v17 = v15 | 7;
      }
      uint64_t v18 = v17 + 1;
      p_b = (std::locale::__imp *)operator new(v17 + 1);
      size_t v25 = v15;
      int64_t v26 = v18 | 0x8000000000000000LL;
      __b.__locale_ = p_b;
    }

    else
    {
      HIBYTE(v26) = v15;
      p_b = (std::locale::__imp *)&__b;
    }

    memset(p_b, v10, v15);
    *((_BYTE *)p_b + v15) = 0;
    if (v26 >= 0) {
      locale = &__b;
    }
    else {
      locale = __b.__locale_;
    }
    uint64_t v20 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(void *)v7 + 96LL))(v7, locale, v15);
    uint64_t v21 = v20;
    if ((SHIBYTE(v26) & 0x80000000) == 0)
    {
      if (v20 != v15) {
        goto LABEL_31;
      }
      goto LABEL_28;
    }

    operator delete(__b.__locale_);
    if (v21 != v15)
    {
LABEL_31:
      std::ios_base::clear( (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)),  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24LL) + 32) | 5);
      goto LABEL_32;
    }
  }

uint64_t nw_protocol_udp_create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (nw_protocol_udp_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_udp_identifier::onceToken, &__block_literal_global_24);
  }
  uint64_t v5 = nw_protocol_new( 184LL,  a4,  (uint64_t)&nw_protocol_udp_identifier::identifier,  nw_protocol_udp_callbacks(void)::callbacks);
  if (v5) {
    return v5 - 96;
  }
  else {
    return 0LL;
  }
}

void ___ZL25nw_protocol_udp_callbacksv_block_invoke()
{
  nw_protocol_udp_callbacks(void)::callbacks = nw_protocol_one_to_one_callbacks_new();
  nw_protocol_callbacks_set_add_input_handler( (void *)nw_protocol_udp_callbacks(void)::callbacks,  (uint64_t)nw_protocol_udp_add_input_handler);
  nw_protocol_callbacks_set_remove_input_handler( nw_protocol_udp_callbacks(void)::callbacks,  (uint64_t)nw_protocol_udp_remove_input_handler);
  nw_protocol_callbacks_set_get_input_frames( nw_protocol_udp_callbacks(void)::callbacks,  (uint64_t)nw_protocol_udp_get_input_frames);
  nw_protocol_callbacks_set_get_output_frames( nw_protocol_udp_callbacks(void)::callbacks,  (uint64_t)nw_protocol_udp_get_output_frames);
  nw_protocol_callbacks_set_finalize_output_frames( nw_protocol_udp_callbacks(void)::callbacks,  (uint64_t)nw_protocol_udp_finalize_output_frames);
  nw_protocol_callbacks_set_connected(nw_protocol_udp_callbacks(void)::callbacks, (uint64_t)nw_protocol_udp_connected);
  nw_protocol_callbacks_set_disconnected( nw_protocol_udp_callbacks(void)::callbacks,  (uint64_t)nw_protocol_udp_disconnected);
  nw_protocol_callbacks_set_link_state(nw_protocol_udp_callbacks(void)::callbacks, (uint64_t)nw_protocol_udp_link_state);
  nw_protocol_callbacks_set_updated_path( nw_protocol_udp_callbacks(void)::callbacks,  (uint64_t)nw_protocol_udp_updated_path);
  nw_protocol_callbacks_set_get_message_properties( nw_protocol_udp_callbacks(void)::callbacks,  (uint64_t)nw_protocol_udp_get_message_properties);
  nw_protocol_callbacks_set_copy_info(nw_protocol_udp_callbacks(void)::callbacks, (uint64_t)nw_protocol_udp_copy_info);
  nw_protocol_callbacks_set_error(nw_protocol_udp_callbacks(void)::callbacks, (uint64_t)nw_protocol_udp_error);
}

uint64_t nw_protocol_udp_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v157 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
    v99 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    os_log_type_t v151 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == 17)
    {
      os_log_type_t v100 = (os_log_s *)__nwlog_obj();
      os_log_type_t v101 = type[0];
      if (!os_log_type_enabled(v100, (os_log_type_t)type[0])) {
        goto LABEL_204;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
      v102 = "%{public}s called with null protocol";
      goto LABEL_203;
    }

    if (v151 == OS_LOG_TYPE_DEFAULT)
    {
      os_log_type_t v100 = (os_log_s *)__nwlog_obj();
      os_log_type_t v101 = type[0];
      if (!os_log_type_enabled(v100, (os_log_type_t)type[0])) {
        goto LABEL_204;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
      v102 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_203;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v100 = (os_log_s *)__nwlog_obj();
    os_log_type_t v101 = type[0];
    BOOL v134 = os_log_type_enabled(v100, (os_log_type_t)type[0]);
    if (!backtrace_string)
    {
      if (!v134) {
        goto LABEL_204;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
      v102 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_203;
    }

    if (!v134) {
      goto LABEL_198;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    v105 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
    goto LABEL_197;
  }

  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
    v99 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    os_log_type_t v151 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == 17)
    {
      os_log_type_t v100 = (os_log_s *)__nwlog_obj();
      os_log_type_t v101 = type[0];
      if (!os_log_type_enabled(v100, (os_log_type_t)type[0])) {
        goto LABEL_204;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
      v102 = "%{public}s called with null udp";
      goto LABEL_203;
    }

    if (v151 == OS_LOG_TYPE_DEFAULT)
    {
      os_log_type_t v100 = (os_log_s *)__nwlog_obj();
      os_log_type_t v101 = type[0];
      if (!os_log_type_enabled(v100, (os_log_type_t)type[0])) {
        goto LABEL_204;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
      v102 = "%{public}s called with null udp, backtrace limit exceeded";
      goto LABEL_203;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v100 = (os_log_s *)__nwlog_obj();
    os_log_type_t v101 = type[0];
    BOOL v135 = os_log_type_enabled(v100, (os_log_type_t)type[0]);
    if (!backtrace_string)
    {
      if (!v135) {
        goto LABEL_204;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
      v102 = "%{public}s called with null udp, no backtrace";
      goto LABEL_203;
    }

    if (!v135) {
      goto LABEL_198;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    v105 = "%{public}s called with null udp, dumping backtrace:%{public}s";
    goto LABEL_197;
  }

  default_input_handler = a1->default_input_handler;
  if (default_input_handler == a2)
  {
    nw_protocol_set_flow_id_from_protocol(a1, a2);
    if (a2) {
      goto LABEL_12;
    }
LABEL_25:
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
    BOOL v13 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    os_log_type_t v151 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == 17)
    {
      size_t v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type[0];
      if (!os_log_type_enabled(v14, (os_log_type_t)type[0])) {
        goto LABEL_139;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
      __int16 v16 = "%{public}s called with null protocol";
    }

    else if (v151)
    {
      uint64_t v75 = (char *)__nw_create_backtrace_string();
      size_t v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type[0];
      BOOL v76 = os_log_type_enabled(v14, (os_log_type_t)type[0]);
      if (v75)
      {
        if (v76)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v75;
          _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v75);
LABEL_139:
        if (v13) {
          free(v13);
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler";
        uint64_t v81 = (char *)_os_log_send_and_compose_impl();
        type[0] = 16;
        os_log_type_t v151 = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v81, type, &v151))
        {
          if (type[0] == 17)
          {
            uint64_t v82 = (os_log_s *)__nwlog_obj();
            os_log_type_t v83 = type[0];
            if (!os_log_type_enabled(v82, (os_log_type_t)type[0])) {
              goto LABEL_155;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler";
            int v84 = "%{public}s called with null protocol";
LABEL_154:
            _os_log_impl(&dword_181A5C000, v82, v83, v84, buf, 0xCu);
            goto LABEL_155;
          }

          if (v151 == OS_LOG_TYPE_DEFAULT)
          {
            uint64_t v82 = (os_log_s *)__nwlog_obj();
            os_log_type_t v83 = type[0];
            if (!os_log_type_enabled(v82, (os_log_type_t)type[0])) {
              goto LABEL_155;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler";
            int v84 = "%{public}s called with null protocol, backtrace limit exceeded";
            goto LABEL_154;
          }

          uint64_t v85 = (char *)__nw_create_backtrace_string();
          uint64_t v82 = (os_log_s *)__nwlog_obj();
          os_log_type_t v83 = type[0];
          BOOL v86 = os_log_type_enabled(v82, (os_log_type_t)type[0]);
          if (!v85)
          {
            if (!v86) {
              goto LABEL_155;
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler";
            int v84 = "%{public}s called with null protocol, no backtrace";
            goto LABEL_154;
          }

          if (v86)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = v85;
            _os_log_impl( &dword_181A5C000,  v82,  v83,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v85);
        }

LABEL_309:
  if (v107) {
    free(v107);
  }
  unint64_t v11 = 0LL;
  if (handle != &nw_protocol_ref_counted_handle) {
    goto LABEL_45;
  }
LABEL_22:
  if (a2->handle != &nw_protocol_ref_counted_handle)
  {
    BOOL v12 = 1;
    goto LABEL_48;
  }

  uint64_t v21 = a2[1].callbacks;
  if (v21)
  {
    uint64_t v22 = (nw_protocol_callbacks *)((char *)v21 - 1);
    a2[1].callbacks = v22;
    if (!v22)
    {
      __int16 v23 = *(void (***)(void))a2[1].flow_id;
      if (v23)
      {
        *(void *)a2[1].flow_id = 0LL;
        v23[2](v23);
        _Block_release(v23);
      }

      if ((a2[1].flow_id[8] & 1) != 0)
      {
        uint64_t v24 = *(const void **)a2[1].flow_id;
        if (v24) {
          _Block_release(v24);
        }
      }

      free(a2);
    }
  }

                    if (v156) {
                      free(v156);
                    }
                    if (v98 != &nw_protocol_ref_counted_handle) {
                      goto LABEL_127;
                    }
LABEL_126:
                    nw::release_if_needed<nw_protocol *>((uint64_t *)v235);
LABEL_127:
                    if (v90 == &nw_protocol_ref_counted_handle) {
                      nw::release_if_needed<nw_protocol *>((uint64_t *)v244);
                    }
LABEL_129:
                    BOOL v103 = (void *)*((void *)v7 + 41);
                    *((void *)v7 + 40) = 0LL;
                    *((void *)v7 + 41) = 0LL;

                    BOOL v104 = (void *)*((void *)v7 + 42);
                    *((void *)v7 + 42) = 0LL;

                    v105 = (void *)*((void *)v7 + 43);
                    *((void *)v7 + 43) = 0LL;

                    goto LABEL_291;
                  }

                  __nwlog_obj();
                  v162 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                  v163 = (char *)_os_log_send_and_compose_impl();

                  v244[0] = 16;
                  v235[0] = OS_LOG_TYPE_DEFAULT;
                  if (__nwlog_fault(v163, v244, v235))
                  {
                    if (v244[0] == 17)
                    {
                      __nwlog_obj();
                      v164 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      v165 = v244[0];
                      if (os_log_type_enabled(v164, (os_log_type_t)v244[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                        _os_log_impl(&dword_181A5C000, v164, v165, "%{public}s called with null protocol", buf, 0xCu);
                      }
                    }

                    else if (v235[0])
                    {
                      v173 = (char *)__nw_create_backtrace_string();
                      __nwlog_obj();
                      v164 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      v174 = v244[0];
                      v175 = os_log_type_enabled(v164, (os_log_type_t)v244[0]);
                      if (v173)
                      {
                        if (v175)
                        {
                          *(_DWORD *)buf = 136446466;
                          *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                          *(_WORD *)&_BYTE buf[12] = 2082;
                          *(void *)&buf[14] = v173;
                          _os_log_impl( &dword_181A5C000,  v164,  v174,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
                        }

                        free(v173);
                        goto LABEL_319;
                      }

                      if (v175)
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                        _os_log_impl( &dword_181A5C000,  v164,  v174,  "%{public}s called with null protocol, no backtrace",  buf,  0xCu);
                      }
                    }

                    else
                    {
                      __nwlog_obj();
                      v164 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      v185 = v244[0];
                      if (os_log_type_enabled(v164, (os_log_type_t)v244[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                        _os_log_impl( &dword_181A5C000,  v164,  v185,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
                      }
                    }
                  }

LABEL_310:
LABEL_311:

              goto LABEL_312;
            }

            v152 = MEMORY[0x1895F87A8];
            *(void *)buf = MEMORY[0x1895F87A8];
            *(void *)&buf[8] = 3221225472LL;
            *(void *)&buf[16] = ___ZL51nw_connection_run_sec_experiment_locked_on_nw_queueP24NWConcrete_nw_connection_block_invoke;
            *(void *)&_BYTE buf[24] = &unk_189BC5148;
            v153 = v151;
            *(void *)v524 = v153;
            v154 = _Block_copy(buf);
            *(void *)aBlock = v152;
            *(void *)&aBlock[8] = 3221225472LL;
            *(void *)&aBlock[16] = ___ZL51nw_connection_run_sec_experiment_locked_on_nw_queueP24NWConcrete_nw_connection_block_invoke_220;
            v541 = (uint64_t (*)(uint64_t, uint64_t))&unk_189BC5CF8;
            v155 = v153;
            v542 = v155;
            char v156 = _Block_copy(aBlock);
            should_skip_probe_sampling = nw_parameters_get_should_skip_probe_sampling(v150[2]);
            v158 = nw_queue_copy_current_workloop();
            v159 = sec_experiment_run_async_with_sampling_disabled();

            if ((v159 & 1) != 0)
            {
              *((_BYTE *)v155 + 109) |= 1u;
              v160 = v150[2];
              if (!v160 || nw_path_parameters_get_logging_disabled(v160[13])) {
                goto LABEL_261;
              }
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              v161 = (id)gconnectionLogObj;
              if (!os_log_type_enabled((os_log_t)v161, OS_LOG_TYPE_DEBUG))
              {
LABEL_260:

LABEL_261:
                goto LABEL_262;
              }

              v162 = *((_DWORD *)v155 + 112);
              v163 = "enabled";
              *(void *)&v537[4] = "nw_connection_run_sec_experiment_locked_on_nw_queue";
              *(_DWORD *)v537 = 136446722;
              if (should_skip_probe_sampling) {
                v163 = "disabled";
              }
              *(_WORD *)&v537[12] = 1024;
              *(_DWORD *)&v537[14] = v162;
              *(_WORD *)&v537[18] = 2082;
              *(void *)&v537[20] = v163;
              v164 = "%{public}s [C%u] Probe connection started with sampling %{public}s";
            }

            else
            {
              v165 = v150[2];
              if (!v165 || nw_path_parameters_get_logging_disabled(v165[13])) {
                goto LABEL_261;
              }
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              v161 = (id)gconnectionLogObj;
              if (!os_log_type_enabled((os_log_t)v161, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_260;
              }
              v166 = *((_DWORD *)v155 + 112);
              v167 = "enabled";
              *(void *)&v537[4] = "nw_connection_run_sec_experiment_locked_on_nw_queue";
              *(_DWORD *)v537 = 136446722;
              if (should_skip_probe_sampling) {
                v167 = "disabled";
              }
              *(_WORD *)&v537[12] = 1024;
              *(_DWORD *)&v537[14] = v166;
              *(_WORD *)&v537[18] = 2082;
              *(void *)&v537[20] = v167;
              v164 = "%{public}s [C%u] Probe connection not run with sampling %{public}s";
            }

            _os_log_impl(&dword_181A5C000, (os_log_t)v161, OS_LOG_TYPE_DEBUG, v164, v537, 0x1Cu);
            goto LABEL_260;
          }

          __nwlog_obj();
          v457 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_run_probes_locked_on_nw_queue";
          v458 = (char *)_os_log_send_and_compose_impl();

          aBlock[0] = 16;
          v537[0] = 0;
          if (__nwlog_fault(v458, aBlock, v537))
          {
            if (aBlock[0] == 17)
            {
              __nwlog_obj();
              v459 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              v460 = aBlock[0];
              if (os_log_type_enabled(v459, (os_log_type_t)aBlock[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_connection_run_probes_locked_on_nw_queue";
                _os_log_impl(&dword_181A5C000, v459, v460, "%{public}s called with null connection", buf, 0xCu);
              }
            }

            else if (v537[0])
            {
              v475 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v459 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              v476 = aBlock[0];
              v477 = os_log_type_enabled(v459, (os_log_type_t)aBlock[0]);
              if (v475)
              {
                if (v477)
                {
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_connection_run_probes_locked_on_nw_queue";
                  *(_WORD *)&_BYTE buf[12] = 2082;
                  *(void *)&buf[14] = v475;
                  _os_log_impl( &dword_181A5C000,  v459,  v476,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v475);
                goto LABEL_823;
              }

              if (v477)
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_connection_run_probes_locked_on_nw_queue";
                _os_log_impl( &dword_181A5C000,  v459,  v476,  "%{public}s called with null connection, no backtrace",  buf,  0xCu);
              }
            }

            else
            {
              __nwlog_obj();
              v459 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              v493 = aBlock[0];
              if (os_log_type_enabled(v459, (os_log_type_t)aBlock[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_connection_run_probes_locked_on_nw_queue";
                _os_log_impl( &dword_181A5C000,  v459,  v493,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
              }
            }
          }

      if (v127) {
        free(v127);
      }
      goto LABEL_311;
    }

    BOOL v103 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    __nwlog_obj();
    BOOL v104 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = v103;
    v105 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v283.sa_len = 0;
    if (__nwlog_fault(v105, type, &v283))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v106 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v107 = type[0];
        if (os_log_type_enabled(v106, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = v103;
          _os_log_impl(&dword_181A5C000, v106, v107, "%{public}s socket() failed %{darwin.errno}d", buf, 0x12u);
        }
      }

      else if (v283.sa_len)
      {
        uint64_t v114 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v106 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v115 = type[0];
        uint64_t v116 = os_log_type_enabled(v106, type[0]);
        if (v114)
        {
          if (v116)
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = v103;
            *(_WORD *)&buf[18] = 2082;
            *(void *)&buf[20] = v114;
            _os_log_impl( &dword_181A5C000,  v106,  v115,  "%{public}s socket() failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
          }

          free(v114);
          goto LABEL_209;
        }

        if (v116)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = v103;
          _os_log_impl( &dword_181A5C000,  v106,  v115,  "%{public}s socket() failed %{darwin.errno}d, no backtrace",  buf,  0x12u);
        }
      }

      else
      {
        __nwlog_obj();
        v106 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        unint64_t v124 = type[0];
        if (os_log_type_enabled(v106, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = v103;
          _os_log_impl( &dword_181A5C000,  v106,  v124,  "%{public}s socket() failed %{darwin.errno}d, backtrace limit exceeded",  buf,  0x12u);
        }
      }
    }

LABEL_318:
  if (v113) {
    free(v113);
  }
  __int128 v29 = 0LL;
LABEL_51:
  if (!v12 && a2->handle == &nw_protocol_ref_counted_handle)
  {
    uint64_t v67 = a2[1].callbacks;
    if (v67)
    {
      uint64_t v68 = (nw_protocol_callbacks *)((char *)v67 - 1);
      a2[1].callbacks = v68;
      if (!v68)
      {
        uint64_t v69 = *(void (***)(void))a2[1].flow_id;
        if (v69)
        {
          *(void *)a2[1].flow_id = 0LL;
          v69[2](v69);
          _Block_release(v69);
        }

        if ((a2[1].flow_id[8] & 1) != 0)
        {
          __int128 v70 = *(const void **)a2[1].flow_id;
          if (v70) {
            _Block_release(v70);
          }
        }

        free(a2);
      }
    }
  }

  if (!v11 || (id v30 = v11, v31 = [v30 type], v30, v31 != 1))
  {
LABEL_189:
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
    v99 = (char *)_os_log_send_and_compose_impl();
    type[0] = 16;
    os_log_type_t v151 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == 17)
    {
      os_log_type_t v100 = (os_log_s *)__nwlog_obj();
      os_log_type_t v101 = type[0];
      if (os_log_type_enabled(v100, (os_log_type_t)type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
        v102 = "%{public}s called with null (local_address && nw_endpoint_get_type(local_address) == nw_endpoint_type_address)";
        goto LABEL_203;
      }

      goto LABEL_204;
    }

    if (v151 == OS_LOG_TYPE_DEFAULT)
    {
      os_log_type_t v100 = (os_log_s *)__nwlog_obj();
      os_log_type_t v101 = type[0];
      if (!os_log_type_enabled(v100, (os_log_type_t)type[0])) {
        goto LABEL_204;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
      v102 = "%{public}s called with null (local_address && nw_endpoint_get_type(local_address) == nw_endpoint_type_addre"
             "ss), backtrace limit exceeded";
      goto LABEL_203;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v100 = (os_log_s *)__nwlog_obj();
    os_log_type_t v101 = type[0];
    BOOL v104 = os_log_type_enabled(v100, (os_log_type_t)type[0]);
    if (!backtrace_string)
    {
      if (!v104) {
        goto LABEL_204;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
      v102 = "%{public}s called with null (local_address && nw_endpoint_get_type(local_address) == nw_endpoint_type_addre"
             "ss), no backtrace";
      goto LABEL_203;
    }

    if (!v104)
    {
LABEL_198:
      free(backtrace_string);
      goto LABEL_204;
    }

    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    v105 = "%{public}s called with null (local_address && nw_endpoint_get_type(local_address) == nw_endpoint_type_address"
           "), dumping backtrace:%{public}s";
LABEL_197:
    _os_log_impl(&dword_181A5C000, v100, v101, v105, buf, 0x16u);
    goto LABEL_198;
  }

  if (v29)
  {
    id v32 = v29;
    int v33 = [v32 type];

    if (v33 == 1)
    {
      id v34 = v30;
      __int16 v35 = [v34 port];

      LOWORD(a1[2].output_handler_context) = v35;
      id v36 = v32;
      __int16 v37 = [v36 port];

      WORD1(a1[2].output_handler_context) = v37;
      int address_family = nw_endpoint_get_address_family(v34);
      HIWORD(a1[2].output_handler_context) = HIWORD(a1[2].output_handler_context) & 0xFFFB | (4 * (address_family == 2));
      address = nw_endpoint_get_address((nw_endpoint_t)v34);
      if (address_family == 2)
      {
        *(_DWORD *)a1[2].flow_id = *(_DWORD *)&address->sa_data[2];
        LODWORD(a1[2].identifier) = *(_DWORD *)&nw_endpoint_get_address((nw_endpoint_t)v36)->sa_data[2];
      }

      else
      {
        *(sockaddr *)a1[2].flow_id = *(sockaddr *)&address->sa_data[6];
        *(sockaddr *)&a1[2].identifier = *(sockaddr *)&nw_endpoint_get_address((nw_endpoint_t)v36)->sa_data[6];
      }

      uint64_t v40 = a2->handle;
      if (v40 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v41 = a2[1].callbacks;
        if (v41) {
          a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v41->add_input_handler + 1);
        }
      }

      uint64_t v42 = a2->callbacks;
      if (v42)
      {
        get_parameters = (uint64_t (*)(nw_protocol *))v42->get_parameters;
        if (get_parameters)
        {
          uint64_t v44 = (void *)get_parameters(a2);
          if (v40 != &nw_protocol_ref_counted_handle) {
            goto LABEL_67;
          }
          goto LABEL_66;
        }
      }

      __nwlog_obj();
      v118 = a2->identifier;
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
      if (!v118) {
        v118 = (nw_protocol_identifier *)"invalid";
      }
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = v118;
      *(_WORD *)&buf[22] = 2048;
      v153 = a2;
      __int128 v119 = (char *)_os_log_send_and_compose_impl();
      type[0] = 16;
      os_log_type_t v151 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v119, type, &v151))
      {
        if (type[0] == 17)
        {
          __int128 v120 = (os_log_s *)__nwlog_obj();
          os_log_type_t v121 = type[0];
          if (!os_log_type_enabled(v120, (os_log_type_t)type[0])) {
            goto LABEL_328;
          }
          uint64_t v122 = a2->identifier;
          if (!v122) {
            uint64_t v122 = (nw_protocol_identifier *)"invalid";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v122;
          *(_WORD *)&buf[22] = 2048;
          v153 = a2;
          unint64_t v123 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback";
LABEL_327:
          _os_log_impl(&dword_181A5C000, v120, v121, v123, buf, 0x20u);
          goto LABEL_328;
        }

        if (v151 == OS_LOG_TYPE_DEFAULT)
        {
          __int128 v120 = (os_log_s *)__nwlog_obj();
          os_log_type_t v121 = type[0];
          if (!os_log_type_enabled(v120, (os_log_type_t)type[0])) {
            goto LABEL_328;
          }
          v142 = a2->identifier;
          if (!v142) {
            v142 = (nw_protocol_identifier *)"invalid";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v142;
          *(_WORD *)&buf[22] = 2048;
          v153 = a2;
          unint64_t v123 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, backtrace limit exceeded";
          goto LABEL_327;
        }

        v131 = (char *)__nw_create_backtrace_string();
        __int128 v120 = (os_log_s *)__nwlog_obj();
        os_log_type_t v121 = type[0];
        BOOL v132 = os_log_type_enabled(v120, (os_log_type_t)type[0]);
        if (!v131)
        {
          if (!v132) {
            goto LABEL_328;
          }
          v148 = a2->identifier;
          if (!v148) {
            v148 = (nw_protocol_identifier *)"invalid";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v148;
          *(_WORD *)&buf[22] = 2048;
          v153 = a2;
          unint64_t v123 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, no backtrace";
          goto LABEL_327;
        }

        if (v132)
        {
          v133 = a2->identifier;
          if (!v133) {
            v133 = (nw_protocol_identifier *)"invalid";
          }
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v133;
          *(_WORD *)&buf[22] = 2048;
          v153 = a2;
          LOWORD(v154[0]) = 2082;
          *(void *)((char *)v154 + 2) = v131;
          _os_log_impl( &dword_181A5C000,  v120,  v121,  "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v131);
      }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v153 = (os_log_s *)gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          v154 = *((_DWORD *)a1 + 45);
          v155 = *((_DWORD *)a1 + 46);
          char v156 = *((_DWORD *)a1 + 47);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_plugin_retry_send_output_frames";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = v154;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v155;
          LOWORD(v167) = 1024;
          *(_DWORD *)((char *)&v167 + 2) = v156;
          _os_log_impl( &dword_181A5C000,  v153,  OS_LOG_TYPE_ERROR,  "%{public}s Asked for %u minimum bytes, %u maximum bytes, %u frames but received no frames",  buf,  0x1Eu);
        }

        goto LABEL_29;
      }

  __break(1u);
  return result;
}

        free(v6);
        goto LABEL_319;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = (os_log_s *)(id)gLogObj;
      __int16 v16 = v178[0];
      if (os_log_type_enabled(v7, (os_log_type_t)v178[0]))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_create_flow_result_from_tlv";
        *(_WORD *)&_BYTE buf[12] = 2048;
        *(void *)&buf[14] = a3;
        _os_log_impl( &dword_181A5C000,  v7,  v16,  "%{public}s NECP buffer too short %zu, backtrace limit exceeded",  buf,  0x16u);
      }
    }

    goto LABEL_317;
  }

  uint64_t v9 = nw_path_flow_create();
  int v10 = v9;
  if (!v9)
  {
LABEL_345:

    goto LABEL_346;
  }

  v176 = 0;
  v175 = 0;
  v174 = 0;
  v173 = 0;
  if (a3 == 5)
  {
    v170 = 0LL;
    object = 0LL;
    unint64_t v11 = 0LL;
    goto LABEL_334;
  }

  v170 = 0LL;
  object = 0LL;
  unint64_t v11 = 0LL;
  __dst = v9->tfo_cookie;
  location = (id *)&v9->local_endpoint;
  uu = &v9->nexus_instance[4];
  v167 = &v9->flow_id[4];
  p_nexus_agent_struct = &v9->nexus_agent_struct;
  while (2)
  {
    uint64_t v17 = a2[v11];
    uint64_t v18 = *(unsigned int *)&a2[v11 + 1];
    if ((_DWORD)v18)
    {
      if (v18 <= 0xFFFFFFF9 && a3 >= v18 + 5 && a3 - (v18 + 5) >= v11)
      {
        __int128 v29 = (unsigned __int8 *)&a2[v11 + 5];
        goto LABEL_46;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v20 = (id)gLogObj;
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(void *)&buf[14] = v11;
      *(_WORD *)&buf[22] = 2048;
      *(void *)&_BYTE buf[24] = a3;
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v18;
      uint64_t v21 = (void *)_os_log_send_and_compose_impl();

      v178[0] = 16;
      v177 = 0;
      if (__nwlog_fault((const char *)v21, v178, &v177))
      {
        if (v178[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v22 = (os_log_s *)(id)gLogObj;
          __int16 v23 = v178[0];
          if (os_log_type_enabled(v22, (os_log_type_t)v178[0]))
          {
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
            *(_WORD *)&_BYTE buf[12] = 2048;
            *(void *)&buf[14] = v11;
            *(_WORD *)&buf[22] = 2048;
            *(void *)&_BYTE buf[24] = a3;
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v18;
            _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u",  buf,  0x26u);
          }
        }

        else
        {
          if (v177)
          {
            uint64_t v24 = v4;
            size_t v25 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            int64_t v26 = (os_log_s *)(id)gLogObj;
            __int128 v27 = v178[0];
            int v28 = os_log_type_enabled(v26, (os_log_type_t)v178[0]);
            if (v25)
            {
              if (v28)
              {
                *(_DWORD *)buf = 136447234;
                *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
                *(_WORD *)&_BYTE buf[12] = 2048;
                *(void *)&buf[14] = v11;
                *(_WORD *)&buf[22] = 2048;
                *(void *)&_BYTE buf[24] = a3;
                *(_WORD *)&buf[32] = 1024;
                *(_DWORD *)&buf[34] = v18;
                *(_WORD *)&buf[38] = 2082;
                *(void *)&buf[40] = v25;
                _os_log_impl( &dword_181A5C000,  v26,  v27,  "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, dumping backtrace:%{public}s",  buf,  0x30u);
              }

              uint64_t v4 = v24;
              free(v25);
              if (!v21) {
                goto LABEL_45;
              }
            }

            else
            {
              if (v28)
              {
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_necp_buffer_get_tlv_value";
                *(_WORD *)&_BYTE buf[12] = 2048;
                *(void *)&buf[14] = v11;
                *(_WORD *)&buf[22] = 2048;
                *(void *)&_BYTE buf[24] = a3;
                *(_WORD *)&buf[32] = 1024;
                *(_DWORD *)&buf[34] = v18;
                _os_log_impl( &dword_181A5C000,  v26,  v27,  "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, no backtrace",  buf,  0x26u);
              }

              uint64_t v4 = v24;
              if (!v21) {
                goto LABEL_45;
              }
            }

LABEL_328:
      if (v119) {
        free(v119);
      }
      uint64_t v44 = 0LL;
      if (v40 != &nw_protocol_ref_counted_handle)
      {
LABEL_67:
        uint64_t v45 = nw_parameters_copy_protocol_options_legacy(v44, a1);
        if (!v45)
        {
LABEL_83:
          unint64_t v59 = a1->default_input_handler;
          if (v59)
          {
            int64_t v60 = v59->callbacks;
            if (v60)
            {
              get_path = (uint64_t (*)(nw_protocol *))v60->get_path;
              if (get_path)
              {
                if (v59->handle == &nw_protocol_ref_counted_handle)
                {
                  uint64_t v63 = v59[1].callbacks;
                  if (v63) {
                    v59[1].callbacks = (nw_protocol_callbacks *)((char *)&v63->add_input_handler + 1);
                  }
                  uint64_t v62 = (void *)get_path(v59);
                  if (v59->handle == &nw_protocol_ref_counted_handle)
                  {
                    uint64_t v77 = v59[1].callbacks;
                    if (v77)
                    {
                      uint64_t v78 = (nw_protocol_callbacks *)((char *)v77 - 1);
                      v59[1].callbacks = v78;
                      if (!v78)
                      {
                        __int128 v79 = *(void (***)(void))v59[1].flow_id;
                        if (v79)
                        {
                          *(void *)v59[1].flow_id = 0LL;
                          v79[2](v79);
                          _Block_release(v79);
                        }

                        if ((v59[1].flow_id[8] & 1) != 0)
                        {
                          uint64_t v80 = *(const void **)v59[1].flow_id;
                          if (v80) {
                            _Block_release(v80);
                          }
                        }

                        free(v59);
                      }
                    }
                  }
                }

                else
                {
                  uint64_t v62 = (void *)get_path(a1->default_input_handler);
                }

                if (v62)
                {
                  uint64_t v64 = v62;
                  if (nw_path_network_is_satisfied_update_reason(v64, 0LL))
                  {
                    int effective_traffic_class = v64->effective_traffic_class;
                    if (!effective_traffic_class) {
                      int effective_traffic_class = nw_parameters_get_traffic_class(v64->parameters);
                    }
                  }

                  else
                  {
                    int effective_traffic_class = 0;
                  }

                  LODWORD(a1[2].default_input_handler) = effective_traffic_class;
                  HIDWORD(a1[2].default_input_handler) = nw_path_get_maximum_datagram_size(v64);
                }
              }
            }
          }

          if (_nw_signposts_once != -1) {
            dispatch_once(&_nw_signposts_once, &__block_literal_global_13);
          }
          if (_nw_signposts_enabled)
          {
          }

          return 1LL;
        }

        uint64_t v46 = v45;
        uint64_t v47 = v46;
        uint64_t v48 = 0LL;
        a1[3].flow_id[0] = 0;
        uint64_t v49 = a1 + 3;
        unint64_t v50 = 84LL;
        while (1)
        {
          int v51 = v46[v48 + 48];
          v49->flow_id[v48] = v51;
          if (!v51) {
            break;
          }
          --v50;
          ++v48;
          if (v50 <= 1)
          {
            v49->flow_id[v48] = 0;
            break;
          }
        }

        uint64_t v52 = v47;
        __int16 v53 = *((_WORD *)v52 + 68);

        WORD2(a1[2].output_handler_context) = v53;
        if (nw_udp_options_get_prefer_no_checksum(v52)) {
          __int16 v54 = 16;
        }
        else {
          __int16 v54 = 0;
        }
        HIWORD(a1[2].output_handler_context) = HIWORD(a1[2].output_handler_context) & 0xFFEF | v54;
        uint64_t v55 = v52;
        if (nw_protocol_options_is_udp(v55))
        {
          *(void *)os_log_type_t type = 0LL;
          *(void *)&type[8] = type;
          *(void *)&type[16] = 0x2020000000LL;
          char v156 = 0;
          *(void *)buf = MEMORY[0x1895F87A8];
          *(void *)&buf[8] = 3221225472LL;
          *(void *)&buf[16] = __nw_udp_options_get_ignore_inbound_checksum_block_invoke;
          v153 = (nw_protocol *)&unk_189BC60A8;
          v154[0] = type;
          nw_protocol_options_access_handle(v55, buf);
          BOOL v56 = *(_BYTE *)(*(void *)&type[8] + 24LL) == 0;
          _Block_object_dispose(type, 8);

          if (v56) {
            __int16 v57 = 0;
          }
          else {
            __int16 v57 = 64;
          }
LABEL_79:
          HIWORD(a1[2].output_handler_context) = HIWORD(a1[2].output_handler_context) & 0xFFBF | v57;
          if (nw_udp_options_get_no_metadata(v55)) {
            __int16 v58 = 32;
          }
          else {
            __int16 v58 = 0;
          }
          HIWORD(a1[2].output_handler_context) = HIWORD(a1[2].output_handler_context) & 0xFFDF | v58;
          os_release(v55);
          goto LABEL_83;
        }

        __nwlog_obj();
        v136 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)os_log_type_t type = 136446210;
        *(void *)&type[4] = "nw_udp_options_get_ignore_inbound_checksum";
        v137 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t v151 = OS_LOG_TYPE_ERROR;
        char v150 = 0;
        if ((__nwlog_fault(v137, &v151, &v150) & 1) != 0)
        {
          if (v151 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v138 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v139 = v151;
            if (os_log_type_enabled(v138, v151))
            {
              *(_DWORD *)os_log_type_t type = 136446210;
              *(void *)&type[4] = "nw_udp_options_get_ignore_inbound_checksum";
              _os_log_impl( &dword_181A5C000,  v138,  v139,  "%{public}s called with null nw_protocol_options_is_udp(options)",  type,  0xCu);
            }
          }

          else if (v150)
          {
            v143 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v138 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v144 = v151;
            BOOL v145 = os_log_type_enabled(v138, v151);
            if (v143)
            {
              if (v145)
              {
                *(_DWORD *)os_log_type_t type = 136446466;
                *(void *)&type[4] = "nw_udp_options_get_ignore_inbound_checksum";
                *(_WORD *)&type[12] = 2082;
                *(void *)&type[14] = v143;
                _os_log_impl( &dword_181A5C000,  v138,  v144,  "%{public}s called with null nw_protocol_options_is_udp(options), dumping backtrace:%{public}s",  type,  0x16u);
              }

              free(v143);
              goto LABEL_342;
            }

            if (v145)
            {
              *(_DWORD *)os_log_type_t type = 136446210;
              *(void *)&type[4] = "nw_udp_options_get_ignore_inbound_checksum";
              _os_log_impl( &dword_181A5C000,  v138,  v144,  "%{public}s called with null nw_protocol_options_is_udp(options), no backtrace",  type,  0xCu);
            }
          }

          else
          {
            __nwlog_obj();
            v138 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v149 = v151;
            if (os_log_type_enabled(v138, v151))
            {
              *(_DWORD *)os_log_type_t type = 136446210;
              *(void *)&type[4] = "nw_udp_options_get_ignore_inbound_checksum";
              _os_log_impl( &dword_181A5C000,  v138,  v149,  "%{public}s called with null nw_protocol_options_is_udp(options), backtrace limit exceeded",  type,  0xCu);
            }
          }
        }

              if (v247) {
                free(v247);
              }
              unint64_t v11 = 0LL;
              *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = -1;
              break;
            }

            __nwlog_obj();
            __int128 v119 = (_DWORD *)**(unsigned int **)(a1 + 40);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = "maximum_frame_count";
            *(_WORD *)&buf[22] = 2048;
            v292 = 1LL;
            v293 = 2048;
            v294 = v119;
            __int128 v120 = (char *)_os_log_send_and_compose_impl();
            os_log_type_t type = OS_LOG_TYPE_ERROR;
            v288 = 0;
            if (__nwlog_fault(v120, &type, &v288))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                os_log_type_t v121 = (os_log_s *)__nwlog_obj();
                uint64_t v122 = type;
                if (os_log_type_enabled(v121, type))
                {
                  unint64_t v123 = (_DWORD *)**(unsigned int **)(a1 + 40);
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                  *(_WORD *)&_BYTE buf[12] = 2082;
                  *(void *)&buf[14] = "maximum_frame_count";
                  *(_WORD *)&buf[22] = 2048;
                  v292 = 1LL;
                  v293 = 2048;
                  v294 = v123;
                  unint64_t v124 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_288:
                  _os_log_impl(&dword_181A5C000, v121, v122, v124, buf, 0x2Au);
                }
              }

              else if (v288)
              {
                v190 = (char *)__nw_create_backtrace_string();
                os_log_type_t v121 = (os_log_s *)__nwlog_obj();
                uint64_t v122 = type;
                v191 = os_log_type_enabled(v121, type);
                if (v190)
                {
                  if (v191)
                  {
                    v192 = (_DWORD *)**(unsigned int **)(a1 + 40);
                    *(_DWORD *)buf = 136447234;
                    *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                    *(_WORD *)&_BYTE buf[12] = 2082;
                    *(void *)&buf[14] = "maximum_frame_count";
                    *(_WORD *)&buf[22] = 2048;
                    v292 = 1LL;
                    v293 = 2048;
                    v294 = v192;
                    v295 = 2082;
                    v296 = v190;
                    _os_log_impl( &dword_181A5C000,  v121,  v122,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                  }

                  free(v190);
                  goto LABEL_289;
                }

                if (v191)
                {
                  v224 = (_DWORD *)**(unsigned int **)(a1 + 40);
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                  *(_WORD *)&_BYTE buf[12] = 2082;
                  *(void *)&buf[14] = "maximum_frame_count";
                  *(_WORD *)&buf[22] = 2048;
                  v292 = 1LL;
                  v293 = 2048;
                  v294 = v224;
                  unint64_t v124 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
                  goto LABEL_288;
                }
              }

              else
              {
                os_log_type_t v121 = (os_log_s *)__nwlog_obj();
                uint64_t v122 = type;
                if (os_log_type_enabled(v121, type))
                {
                  v223 = (_DWORD *)**(unsigned int **)(a1 + 40);
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                  *(_WORD *)&_BYTE buf[12] = 2082;
                  *(void *)&buf[14] = "maximum_frame_count";
                  *(_WORD *)&buf[22] = 2048;
                  v292 = 1LL;
                  v293 = 2048;
                  v294 = v223;
                  unint64_t v124 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
                  goto LABEL_288;
                }
              }
            }

      if ((*(_WORD *)(v14 + 428) & 0x1000) == 0) {
        goto LABEL_345;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http1_remove_input_handler";
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(void *)&buf[14] = v14;
      v197 = (char *)_os_log_send_and_compose_impl();
      v1065[0] = 16;
      aBlock[0] = 0;
      if (__nwlog_fault(v197, v1065, aBlock))
      {
        if (v1065[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v198 = (os_log_s *)gLogObj;
          v199 = v1065[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1065[0])) {
            goto LABEL_343;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_remove_input_handler";
          *(_WORD *)&_BYTE buf[12] = 2048;
          *(void *)&buf[14] = v14;
          v200 = "%{public}s http1 stream %p still in pending list";
          goto LABEL_342;
        }

        if (!aBlock[0])
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v198 = (os_log_s *)gLogObj;
          v199 = v1065[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1065[0])) {
            goto LABEL_343;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_remove_input_handler";
          *(_WORD *)&_BYTE buf[12] = 2048;
          *(void *)&buf[14] = v14;
          v200 = "%{public}s http1 stream %p still in pending list, backtrace limit exceeded";
          goto LABEL_342;
        }

        v201 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v198 = (os_log_s *)gLogObj;
        v199 = v1065[0];
        v202 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v1065[0]);
        if (v201)
        {
          if (v202)
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_protocol_http1_remove_input_handler";
            *(_WORD *)&_BYTE buf[12] = 2048;
            *(void *)&buf[14] = v14;
            *(_WORD *)&buf[22] = 2082;
            v1051 = (uint64_t)v201;
            _os_log_impl( &dword_181A5C000,  v198,  v199,  "%{public}s http1 stream %p still in pending list, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v201);
          unint64_t v11 = v1042;
          goto LABEL_343;
        }

        unint64_t v11 = v1042;
        if (v202)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_remove_input_handler";
          *(_WORD *)&_BYTE buf[12] = 2048;
          *(void *)&buf[14] = v14;
          v200 = "%{public}s http1 stream %p still in pending list, no backtrace";
LABEL_342:
          _os_log_impl(&dword_181A5C000, v198, v199, v200, buf, 0x16u);
        }
      }

        if (v101) {
          free(v101);
        }
        uint64_t v40 = 0;
        if ((v36 & 1) != 0) {
          goto LABEL_56;
        }
LABEL_57:
        if ((v374 & 1) != 0) {
          nw::release_if_needed<nw_protocol *>((uint64_t *)v373);
        }
        if ((v376 & 1) != 0) {
          nw::release_if_needed<nw_protocol *>((uint64_t *)v375);
        }
        if ((v40 & 1) == 0)
        {
          if ((nw_endpoint_handler_get_logging_disabled(v362) & 1) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            v214 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v214, OS_LOG_TYPE_ERROR))
            {
              loga = v214;
              v248 = nw_endpoint_handler_get_id_string(v362);
              v249 = nw_endpoint_handler_dry_run_string(v362);
              v356 = nw_endpoint_handler_copy_endpoint(v362);
              v250 = nw_endpoint_get_logging_description(v356);
              v251 = nw_endpoint_handler_state_string(v362);
              v252 = nw_endpoint_handler_mode_string(v362);
              v253 = nw_endpoint_handler_copy_current_path(v362);
              v254 = v253;
              v255 = *(const char **)(v359 + 16);
              if (!v255) {
                v255 = "invalid";
              }
              *(_DWORD *)buf = 136448258;
              v378 = "nw_endpoint_handler_modify_protocol_stack";
              v379 = 2082;
              v380 = (char *)v248;
              v381 = 2082;
              v382 = v249;
              v383 = 2082;
              v384 = (void *)v250;
              v385 = 2082;
              v386 = v251;
              v387 = 2082;
              v388 = v252;
              v389 = 2114;
              v390 = v253;
              v391 = 2082;
              v392 = (void *)v255;
              v393 = 2082;
              v394 = identifier;
              _os_log_impl( &dword_181A5C000,  loga,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to replace proto col %{public}s with %{public}s",  buf,  0x5Cu);

              goto LABEL_599;
            }

                    if (!v151)
                    {
LABEL_330:
                      uint64_t v8 = &qword_18C45F000;
                      goto LABEL_331;
                    }

LABEL_342:
        if (v137) {
          free(v137);
        }

        __int16 v57 = 0;
        goto LABEL_79;
      }

              if (v161) {
                free(v161);
              }
              goto LABEL_90;
            }

            __nwlog_obj();
            __int128 v119 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            v169 = "__nw_protocol_connect";
            __int128 v120 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            v163[0] = OS_LOG_TYPE_DEFAULT;
            if (__nwlog_fault(v120, type, v163))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                os_log_type_t v121 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                uint64_t v122 = type[0];
                if (os_log_type_enabled(v121, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  v169 = "__nw_protocol_connect";
                  _os_log_impl(&dword_181A5C000, v121, v122, "%{public}s called with null protocol", buf, 0xCu);
                }
              }

              else if (v163[0])
              {
                v140 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                os_log_type_t v121 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                v141 = type[0];
                v142 = os_log_type_enabled(v121, type[0]);
                if (v140)
                {
                  if (v142)
                  {
                    *(_DWORD *)buf = 136446466;
                    v169 = "__nw_protocol_connect";
                    v170 = 2082;
                    v171 = v140;
                    _os_log_impl( &dword_181A5C000,  v121,  v141,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(v140);
                  goto LABEL_358;
                }

                if (v142)
                {
                  *(_DWORD *)buf = 136446210;
                  v169 = "__nw_protocol_connect";
                  _os_log_impl( &dword_181A5C000,  v121,  v141,  "%{public}s called with null protocol, no backtrace",  buf,  0xCu);
                }
              }

              else
              {
                __nwlog_obj();
                os_log_type_t v121 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                v152 = type[0];
                if (os_log_type_enabled(v121, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  v169 = "__nw_protocol_connect";
                  _os_log_impl( &dword_181A5C000,  v121,  v152,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
                }
              }
            }

      goto LABEL_343;
    }

LABEL_204:
  if (v99) {
    free(v99);
  }
  return 0LL;
}

    if (v188) {
      free(v188);
    }
    uint64_t v22 = 0LL;
    goto LABEL_124;
  }

  v238 = v5;
  os_log_type_t v6 = (NWConcrete_nw_endpoint_handler *)v5;
  mode = v6->mode;

  if ((_DWORD)mode != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v35 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      else {
        id v36 = off_189BBBBC0[mode];
      }
      *(_DWORD *)buf = 136446722;
      v245 = "nw_flow_listener_new_flow";
      v246 = 2082;
      v247 = (uint64_t)v36;
      v248 = 2082;
      v249 = (uint64_t)"flow";
      _os_log_impl( &dword_181A5C000,  v35,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
    }

    uint64_t v22 = 0LL;
    goto LABEL_123;
  }

  uint64_t v8 = nw_endpoint_handler_copy_flow(v6);
  v236 = (uint64_t *)v8;
  if (!*((void *)v8 + 96))
  {
    __int16 v37 = v6;
    __int128 v38 = *((_BYTE *)v37 + 268);

    if ((v38 & 0x20) == 0)
    {
      uint64_t v39 = v6;
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v40 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        uint64_t v41 = v37;

        uint64_t v42 = v41;
        uint64_t v43 = *((_BYTE *)v37 + 268);

        if ((v43 & 1) != 0) {
          uint64_t v44 = "dry-run ";
        }
        else {
          uint64_t v44 = "";
        }
        uint64_t v45 = nw_endpoint_handler_copy_endpoint(v42);
        logging_description = nw_endpoint_get_logging_description(v45);
        id_str = v41->id_str;
        uint64_t v48 = v42;
        uint64_t v49 = v48;
        unint64_t v50 = v48[30];
        else {
          int v51 = off_189BBBBF0[v50];
        }

        unint64_t v61 = v49;
        uint64_t v62 = v61;
        uint64_t v63 = "path";
        switch(v39->mode)
        {
          case 0:
            break;
          case 1:
            uint64_t v63 = "resolver";
            break;
          case 2:
            uint64_t v63 = nw_endpoint_flow_mode_string(v61[31]);
            break;
          case 3:
            uint64_t v63 = "proxy";
            break;
          case 4:
            uint64_t v63 = "fallback";
            break;
          case 5:
            uint64_t v63 = "transform";
            break;
          default:
            uint64_t v63 = "unknown-mode";
            break;
        }

        v127 = v62;
        os_unfair_lock_lock((os_unfair_lock_t)v127 + 28);
        BOOL v128 = v127[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v127 + 28);

        *(_DWORD *)buf = 136447746;
        v245 = "nw_flow_listener_new_flow";
        v246 = 2082;
        v247 = (uint64_t)id_str;
        v248 = 2082;
        v249 = (uint64_t)v44;
        v250 = 2082;
        v251 = logging_description;
        v252 = 2082;
        v253 = v51;
        v254 = 2082;
        v255 = v63;
        v256 = 2114;
        v257 = v128;
        _os_log_impl( &dword_181A5C000,  v40,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Cannot receive new flows on n on-multiplexed protocols",  buf,  0x48u);
      }
    }

    goto LABEL_120;
  }

  uint64_t v9 = (char *)calloc(1uLL, 0x150uLL);
  v237 = v9;
  if (v9)
  {
LABEL_5:
    nw_endpoint_flow_initialize_protocol(v6, v9, 1LL);
    int v10 = *((void *)v8 + 97);
    log = v10;
    if (v10)
    {
      if (v9)
      {
        if ((char *)v10 != v9)
        {
          unint64_t v11 = *(void **)(v10 + 24);
          if (v11 && *v11)
          {
            if ((nw_protocol_add_input_handler(v10, (uint64_t)v9) & 1) != 0)
            {
              BOOL v12 = v10;
              BOOL v13 = *(uint64_t (**)(uint64_t, uint64_t, char *))(*(void *)(v10 + 24) + 224LL);
              if (v13)
              {
                size_t v14 = v13(v10, 255LL, v237);
                os_log_type_t v15 = (void *)v14;
                if (v14)
                {
                  __int16 v16 = *(void *)(v14 + 24) - *(void *)(v14 + 16);
                  if (v16)
                  {
                    uint64_t v17 = nw_array_get_object_at_index(v14, (v16 >> 3) - 1);
                    uint64_t v18 = (void *)*((void *)v237 + 30);
                    *((void *)v237 + 30) = v17;
                  }
                }

                BOOL v12 = v10;
              }

              uint64_t v20 = v236;
              uint64_t v19 = (uint64_t)v237;
              if (*((void *)v237 + 30))
              {
                os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                uint64_t v21 = !nw_hash_table_add_object(v236[108], (uint64_t)v237, (char *)&type) || type == OS_LOG_TYPE_DEFAULT;
                uint64_t v22 = !v21;
                if (!v21)
                {
                  minimize_logging = nw_endpoint_handler_get_minimize_logging(v6);
                  logging_disabled = nw_endpoint_handler_get_logging_disabled(v6);
                  if (minimize_logging)
                  {
                    if ((logging_disabled & 1) != 0) {
                      goto LABEL_31;
                    }
                    v210 = v6;
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                    }
                    size_t v25 = (os_log_s *)(id)gconnectionLogObj;
                    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
                    {
                      id_string = nw_endpoint_handler_get_id_string(v6);
                      v212 = nw_endpoint_handler_dry_run_string(v6);
                      v213 = nw_endpoint_handler_copy_endpoint(v6);
                      v214 = nw_endpoint_get_logging_description(v213);
                      v215 = nw_endpoint_handler_state_string(v6);
                      v216 = nw_endpoint_handler_mode_string(v6);
                      v217 = nw_endpoint_handler_copy_current_path(v210);
                      v218 = *(void *)(log + 16);
                      *(_DWORD *)buf = 136448258;
                      v245 = "nw_flow_listener_new_flow";
                      v246 = 2082;
                      v247 = (uint64_t)id_string;
                      v248 = 2082;
                      v249 = (uint64_t)v212;
                      v250 = 2082;
                      v251 = v214;
                      v252 = 2082;
                      v253 = v215;
                      v254 = 2082;
                      v255 = v216;
                      v256 = 2114;
                      v257 = v217;
                      v258 = 2048;
                      v259 = v237;
                      v260 = 2080;
                      v261 = v218;
                      _os_log_impl( &dword_181A5C000,  v25,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Added inbound p er-message protocol %p to %s",  buf,  0x5Cu);
                    }
                  }

                  else
                  {
                    if ((logging_disabled & 1) != 0)
                    {
LABEL_31:
                      (*(void (**)(uint64_t, char *))(*(void *)(v12 + 24) + 24LL))(v12, v237);
                      *((_WORD *)v237 + 166) |= 0x400u;
LABEL_122:

LABEL_123:
                      v129 = v238;
LABEL_124:

                      return v22;
                    }

                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                    }
                    size_t v25 = (os_log_s *)(id)gconnectionLogObj;
                    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
                    {
                      int64_t v26 = nw_endpoint_handler_get_id_string(v6);
                      __int128 v27 = nw_endpoint_handler_dry_run_string(v6);
                      int v28 = nw_endpoint_handler_copy_endpoint(v6);
                      __int128 v29 = nw_endpoint_get_logging_description(v28);
                      id v30 = nw_endpoint_handler_state_string(v6);
                      int v31 = v6;
                      id v32 = nw_endpoint_handler_mode_string(v6);
                      int v33 = nw_endpoint_handler_copy_current_path(v31);
                      id v34 = *(void *)(log + 16);
                      *(_DWORD *)buf = 136448258;
                      v245 = "nw_flow_listener_new_flow";
                      v246 = 2082;
                      v247 = (uint64_t)v26;
                      v248 = 2082;
                      v249 = (uint64_t)v27;
                      v250 = 2082;
                      v251 = v29;
                      v252 = 2082;
                      v253 = v30;
                      v254 = 2082;
                      v255 = v32;
                      v256 = 2114;
                      v257 = v33;
                      v258 = 2048;
                      v259 = v237;
                      v260 = 2080;
                      v261 = v34;
                      _os_log_impl( &dword_181A5C000,  v25,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Added inbound p er-message protocol %p to %s",  buf,  0x5Cu);
                    }
                  }

                  uint64_t v20 = v236;
                  BOOL v12 = log;
                  goto LABEL_31;
                }

                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                int v84 = (id)gconnectionLogObj;
                uint64_t v85 = nw_endpoint_handler_get_id_string(v6);
                BOOL v86 = nw_endpoint_handler_dry_run_string(v6);
                unint64_t v87 = nw_endpoint_handler_copy_endpoint(v6);
                uint64_t v88 = nw_endpoint_get_logging_description(v87);
                os_log_type_t v89 = nw_endpoint_handler_state_string(v6);
                uint64_t v90 = v6;
                uint64_t v91 = nw_endpoint_handler_mode_string(v6);
                BOOL v92 = nw_endpoint_handler_copy_current_path(v90);
                *(_DWORD *)buf = 136447746;
                v245 = "nw_flow_listener_new_flow";
                v246 = 2082;
                v247 = (uint64_t)v85;
                v248 = 2082;
                v249 = (uint64_t)v86;
                v250 = 2082;
                v251 = v88;
                v252 = 2082;
                v253 = v89;
                v254 = 2082;
                v255 = v91;
                os_log_type_t v6 = v90;
                v256 = 2114;
                v257 = v92;
                v93 = (char *)_os_log_send_and_compose_impl();

                v242 = OS_LOG_TYPE_ERROR;
                v241 = 0;
                if ((__nwlog_fault(v93, &v242, &v241) & 1) != 0)
                {
                  if (v242 == OS_LOG_TYPE_FAULT)
                  {
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                    }
                    uint64_t v94 = (os_log_s *)(id)gconnectionLogObj;
                    os_log_type_t v95 = v242;
                    if (os_log_type_enabled(v94, v242))
                    {
                      loga = v94;
                      uint64_t v96 = nw_endpoint_handler_get_id_string(v90);
                      v97 = nw_endpoint_handler_dry_run_string(v90);
                      BOOL v98 = nw_endpoint_handler_copy_endpoint(v90);
                      v219 = v93;
                      v99 = nw_endpoint_get_logging_description(v98);
                      os_log_type_t v100 = nw_endpoint_handler_state_string(v90);
                      os_log_type_t v101 = nw_endpoint_handler_mode_string(v90);
                      v102 = nw_endpoint_handler_copy_current_path(v90);
                      *(_DWORD *)buf = 136447746;
                      v245 = "nw_flow_listener_new_flow";
                      v246 = 2082;
                      v247 = (uint64_t)v96;
                      v248 = 2082;
                      v249 = (uint64_t)v97;
                      v250 = 2082;
                      v251 = v99;
                      v252 = 2082;
                      v253 = v100;
                      v254 = 2082;
                      v255 = v101;
                      os_log_type_t v6 = v90;
                      v256 = 2114;
                      v257 = v102;
                      _os_log_impl( &dword_181A5C000,  loga,  v95,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to add i nbound flow protocol to hash table",  buf,  0x48u);

                      v93 = v219;
                      uint64_t v94 = loga;
                    }
                  }

                  else
                  {
                    if (v241)
                    {
                      v141 = __nw_create_backtrace_string();
                      if (v141)
                      {
                        v142 = (char *)v141;
                        if (__nwlog_connection_log::onceToken != -1) {
                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                        }
                        v143 = (os_log_s *)(id)gconnectionLogObj;
                        os_log_type_t v144 = v242;
                        if (os_log_type_enabled(v143, v242))
                        {
                          logc = v143;
                          BOOL v145 = nw_endpoint_handler_get_id_string(v90);
                          v146 = nw_endpoint_handler_dry_run_string(v90);
                          v147 = v145;
                          v221 = v93;
                          v227 = nw_endpoint_handler_copy_endpoint(v90);
                          v148 = nw_endpoint_get_logging_description(v227);
                          os_log_type_t v149 = nw_endpoint_handler_state_string(v90);
                          char v150 = nw_endpoint_handler_mode_string(v90);
                          os_log_type_t v151 = nw_endpoint_handler_copy_current_path(v90);
                          *(_DWORD *)buf = 136448002;
                          v245 = "nw_flow_listener_new_flow";
                          v246 = 2082;
                          v247 = (uint64_t)v147;
                          v248 = 2082;
                          v249 = (uint64_t)v146;
                          v250 = 2082;
                          v251 = v148;
                          v252 = 2082;
                          v253 = v149;
                          v254 = 2082;
                          v255 = v150;
                          os_log_type_t v6 = v90;
                          v256 = 2114;
                          v257 = v151;
                          v258 = 2082;
                          v259 = v142;
                          _os_log_impl( &dword_181A5C000,  logc,  v144,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to a dd inbound flow protocol to hash table, dumping backtrace:%{public}s",  buf,  0x52u);

                          v93 = v221;
                          v143 = logc;
                        }

                        free(v142);
                        goto LABEL_162;
                      }

                      if (__nwlog_connection_log::onceToken != -1) {
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                      }
                      v160 = (os_log_s *)(id)gconnectionLogObj;
                      v178 = v242;
                      if (os_log_type_enabled(v160, v242))
                      {
                        v223 = nw_endpoint_handler_get_id_string(v90);
                        v179 = nw_endpoint_handler_dry_run_string(v90);
                        loge = v160;
                        v180 = nw_endpoint_handler_copy_endpoint(v90);
                        v181 = v93;
                        v182 = nw_endpoint_get_logging_description(v180);
                        v183 = nw_endpoint_handler_state_string(v90);
                        v184 = nw_endpoint_handler_mode_string(v90);
                        v185 = nw_endpoint_handler_copy_current_path(v90);
                        *(_DWORD *)buf = 136447746;
                        v245 = "nw_flow_listener_new_flow";
                        v246 = 2082;
                        v247 = (uint64_t)v223;
                        v248 = 2082;
                        v249 = (uint64_t)v179;
                        v250 = 2082;
                        v251 = v182;
                        v252 = 2082;
                        v253 = v183;
                        v254 = 2082;
                        v255 = v184;
                        os_log_type_t v6 = v90;
                        v256 = 2114;
                        v257 = v185;
                        _os_log_impl( &dword_181A5C000,  loge,  v178,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to add inbound flow protocol to hash table, no backtrace",  buf,  0x48u);

                        v93 = v181;
                        v160 = loge;
                      }
                    }

                    else
                    {
                      if (__nwlog_connection_log::onceToken != -1) {
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                      }
                      v160 = (os_log_s *)(id)gconnectionLogObj;
                      v161 = v242;
                      if (os_log_type_enabled(v160, v242))
                      {
                        v222 = nw_endpoint_handler_get_id_string(v90);
                        v162 = nw_endpoint_handler_dry_run_string(v90);
                        logd = v160;
                        v163 = nw_endpoint_handler_copy_endpoint(v90);
                        v164 = v93;
                        v165 = nw_endpoint_get_logging_description(v163);
                        v166 = nw_endpoint_handler_state_string(v90);
                        v167 = nw_endpoint_handler_mode_string(v90);
                        v168 = nw_endpoint_handler_copy_current_path(v90);
                        *(_DWORD *)buf = 136447746;
                        v245 = "nw_flow_listener_new_flow";
                        v246 = 2082;
                        v247 = (uint64_t)v222;
                        v248 = 2082;
                        v249 = (uint64_t)v162;
                        v250 = 2082;
                        v251 = v165;
                        v252 = 2082;
                        v253 = v166;
                        v254 = 2082;
                        v255 = v167;
                        os_log_type_t v6 = v90;
                        v256 = 2114;
                        v257 = v168;
                        _os_log_impl( &dword_181A5C000,  logd,  v161,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to add inbound flow protocol to hash table, backtrace limit exceeded",  buf,  0x48u);

                        v93 = v164;
                        v160 = logd;
                      }
                    }
                  }
                }

      goto LABEL_211;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      uint64_t v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v125 = v149[0];
      if (os_log_type_enabled(v88, (os_log_type_t)v149[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_connected_socket";
        _os_log_impl( &dword_181A5C000,  v88,  v125,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_204;
    }

    uint64_t v111 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v108 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v112 = v149[0];
    uint64_t v113 = os_log_type_enabled(v108, (os_log_type_t)v149[0]);
    if (v111)
    {
      if (v113)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_connected_socket";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = v111;
        _os_log_impl( &dword_181A5C000,  v108,  v112,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v111);
LABEL_211:
      if (!v87)
      {
LABEL_213:
        uint64_t v47 = 0LL;
        goto LABEL_91;
      }

    if (!v75) {
      return;
    }
    goto LABEL_205;
  }

  uint64_t v94 = (uint64_t)handle;
  while ((*((_DWORD *)handle + 111) | 2) == 3)
  {
    *(void *)os_log_type_t type = 0LL;
    uint64_t v122 = (uint64_t)type;
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3802000000LL;
    os_log_type_t v151 = __Block_byref_object_copy__50;
    v152 = __Block_byref_object_dispose__51;
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
    }
    v153 = (uint64_t *)(id)nw_protocol_copy_http_definition_http_definition;
    v154[0] |= 1u;
    v95[0] = MEMORY[0x1895F87A8];
    v95[1] = 0x40000000LL;
    uint64_t v96 = (uint64_t (*)(void *))___ZL38nw_webtransport_session_http_get_inputP23nw_webtransport_session_block_invoke;
    v97 = &unk_189BBC6B8;
    BOOL v98 = buf;
    v99 = handle;
    uint64_t v5 = *(void *)type;
    do
    {
      if (!v5) {
        break;
      }
      os_log_type_t v6 = *(void *)(v5 + 32);
      uint64_t v7 = v96(v95);
      uint64_t v5 = v6;
    }

    while ((v7 & 1) != 0);
    _Block_object_dispose(buf, 8);
    if ((v154[0] & 1) != 0)
    {
      if (v153) {
        os_release(v153);
      }
    }

    handle = (char *)v94;
  }

  if (!*((_DWORD *)handle + 112))
  {
    uint64_t v8 = &qword_18C45F000;
    if ((handle[548] & 2) == 0)
    {
      if (gLogDatapath)
      {
        uint64_t v90 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v91 = *((_DWORD *)handle + 115);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_http2_handle_capsules";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = handle + 464;
          *(_WORD *)&buf[22] = 2080;
          os_log_type_t v151 = (uint64_t (*)(uint64_t, uint64_t))" ";
          LOWORD(v152) = 1024;
          *(_DWORD *)((char *)&v152 + 2) = v91;
          _os_log_impl(&dword_181A5C000, v90, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
        }
      }
    }

    if (*((_DWORD *)handle + 111) == 4)
    {
      uint64_t v9 = handle + 96;
      v93 = handle + 464;
LABEL_26:
      __int128 v119 = 0;
      v129 = 0LL;
      BOOL v130 = &v129;
      v131 = 0x2000000000LL;
      int v10 = *((void *)handle + 17);
      BOOL v132 = v10 != 0;
      if (!v10)
      {
        do
        {
          __int16 v23 = *v9;
          if (!*v9)
          {
            uint64_t v24 = *((void *)handle + 4);
            *(void *)buf = 0LL;
            *(void *)&buf[8] = buf;
            if (!nw_protocol_get_input_frames( v24,  (uint64_t)handle,  1LL,  0xFFFFFFFFLL,  0xFFFFFFFFLL,  (uint64_t)buf)) {
              goto LABEL_142;
            }
            if (*(void *)buf)
            {
              **((void **)handle + 13) = *(void *)buf;
              size_t v25 = *(void *)&buf[8];
              *(void *)(*(void *)buf + 40LL) = *((void *)handle + 13);
              *((void *)handle + 13) = v25;
            }

            __int16 v23 = *v9;
          }

          *(void *)os_log_type_t type = MEMORY[0x1895F87A8];
          uint64_t v122 = 0x40000000LL;
          unint64_t v123 = (uint64_t (*)(os_log_type_t *))__nw_http_capsule_framer_read_capsule_block_invoke;
          unint64_t v124 = &unk_189BBFB98;
          BOOL v125 = &v129;
          v126 = v9;
          v127 = handle;
          BOOL v128 = &v119;
          do
          {
            if (!v23) {
              break;
            }
            int64_t v26 = *(void *)(v23 + 32);
            __int128 v27 = v123(type);
            __int16 v23 = v26;
          }

          while ((v27 & 1) != 0);
          handle = (char *)v94;
        }

        while (!*((_BYTE *)v130 + 24));
      }

      __int128 v120 = 0;
      while (1)
      {
        v146 = 0LL;
        v147 = &v146;
        os_log_type_t v149 = 0;
        v148 = 0x2000000000LL;
        v144[0] = 0LL;
        v144[1] = v144;
        BOOL v145 = 0;
        v144[2] = 0x2000000000LL;
        v139[0] = MEMORY[0x1895F87A8];
        v139[1] = 0x40000000LL;
        v140 = ___ZL43nw_http_capsule_framer_process_capsule_bodyP22nw_http_capsule_framerP11nw_protocolPb_block_invoke;
        v141 = &unk_189BBFC50;
        v142 = &v146;
        v143 = v144;
        unint64_t v11 = *v9;
        do
        {
          if (!v11) {
            break;
          }
          BOOL v12 = *(void *)(v11 + 32);
          BOOL v13 = v140((uint64_t)v139, (_DWORD *)v11);
          unint64_t v11 = v12;
        }

        while ((v13 & 1) != 0);
        size_t v14 = v94;
        os_log_type_t v15 = *(void *)(v94 + 32);
        if (*(void *)(v94 + 136) > (unint64_t)*((unsigned int *)v147 + 6) && v15 != 0)
        {
          uint64_t v17 = *(void *)(v15 + 24);
          if (v17)
          {
            if (*(void *)(v17 + 80))
            {
              *(void *)buf = 0LL;
              *(void *)&buf[8] = buf;
              if (!nw_protocol_get_input_frames(v15, v94, 1LL, 0xFFFFFFFFLL, 0xFFFFFFFFLL, (uint64_t)buf))
              {
                uint64_t v22 = 0;
                goto LABEL_44;
              }

              if (*(void *)buf)
              {
                **(void **)(v94 + 104) = *(void *)buf;
                uint64_t v18 = *(void *)&buf[8];
                *(void *)(*(void *)buf + 40LL) = *(void *)(v94 + 104);
                *(void *)(v94 + 104) = v18;
              }
            }
          }
        }

        __int128 v120 = 0;
        v137[0] = 0LL;
        v137[1] = v137;
        v138 = 0;
        v137[2] = 0x2000000000LL;
        v133 = 0LL;
        BOOL v134 = &v133;
        v136 = 0;
        BOOL v135 = 0x2000000000LL;
        *(void *)buf = MEMORY[0x1895F87A8];
        *(void *)&buf[8] = 0x40000000LL;
        *(void *)&buf[16] = ___ZL43nw_http_capsule_framer_process_capsule_bodyP22nw_http_capsule_framerP11nw_protocolPb_block_invoke_2;
        os_log_type_t v151 = (uint64_t (*)(uint64_t, uint64_t))&unk_189BBFC78;
        v152 = (void (*)(uint64_t))v137;
        v153 = &v133;
        *(void *)v154 = v9;
        *(void *)&v154[8] = &v120;
        uint64_t v19 = *v9;
        do
        {
          if (!v19) {
            break;
          }
          uint64_t v20 = *(void *)(v19 + 32);
          uint64_t v21 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
          uint64_t v19 = v20;
        }

        while ((v21 & 1) != 0);
        uint64_t v22 = *((_DWORD *)v134 + 6);
        _Block_object_dispose(&v133, 8);
        _Block_object_dispose(v137, 8);
        size_t v14 = v94;
LABEL_44:
        _Block_object_dispose(v144, 8);
        _Block_object_dispose(&v146, 8);
        if (!v22)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v72 = (os_log_s *)gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v74 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 136);
            uint64_t v73 = *(void *)(v14 + 144);
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_http_capsule_framer_read_capsule";
            *(_WORD *)&_BYTE buf[12] = 2048;
            *(void *)&buf[14] = v73;
            *(_WORD *)&buf[22] = 2048;
            os_log_type_t v151 = v74;
            _os_log_impl( &dword_181A5C000,  v72,  OS_LOG_TYPE_DEBUG,  "%{public}s Could not find all capsule data for type %llx. Remaining length: %lld",  buf,  0x20u);
          }

        if (v91) {
          free(v91);
        }
LABEL_57:
        uint64_t v48 = v135[0];
        if (v135[0])
        {
          do
          {
            uint64_t v49 = *(void *)(v48 + 32);
            nw_frame_finalize(v48);
            uint64_t v48 = v49;
          }

          while (v49);
        }

        if (gLogDatapath)
        {
          v97 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG))
          {
            BOOL v98 = *((_DWORD *)v131 + 6);
            buf = 136446722;
            v137 = "send_data_callback";
            v138 = 2082;
            os_log_type_t v139 = a6 + 205;
            v140 = 1024;
            *(_DWORD *)v141 = v98;
            _os_log_impl( &dword_181A5C000,  v97,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s wrote %u bytes",  (uint8_t *)&buf,  0x1Cu);
          }
        }

        if (*((_DWORD *)v131 + 6) == v30)
        {
          unint64_t v50 = *(_DWORD *)(v25 + 52);
          if (v50)
          {
            int v51 = *(_DWORD *)(v25 + 56) + *(_DWORD *)(v25 + 60);
            uint64_t v52 = v50 - v51;
            if (v50 != v51)
            {
              if (gLogDatapath)
              {
                v106 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG))
                {
                  char v107 = *((_DWORD *)v127 + 6);
                  buf = 136446978;
                  v137 = "send_data_callback";
                  v138 = 2082;
                  os_log_type_t v139 = a6 + 205;
                  v140 = 1024;
                  *(_DWORD *)v141 = v107;
                  *(_WORD *)&v141[4] = 1024;
                  *(_DWORD *)&v141[6] = v52;
                  _os_log_impl( &dword_181A5C000,  v106,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s wrote partial frame, %u bytes, %u remaining",  (uint8_t *)&buf,  0x22u);
                }
              }

              id v32 = 0LL;
              goto LABEL_97;
            }

            if (gLogDatapath) {
              goto LABEL_197;
            }
          }

          else if (gLogDatapath)
          {
LABEL_197:
            BOOL v103 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v103, OS_LOG_TYPE_DEBUG))
            {
              BOOL v104 = *((_DWORD *)v127 + 6);
              buf = 136446978;
              v137 = "send_data_callback";
              v138 = 2082;
              os_log_type_t v139 = a6 + 205;
              v140 = 2048;
              *(void *)v141 = v25;
              *(_WORD *)&v141[8] = 1024;
              *(_DWORD *)&v141[10] = v104;
              _os_log_impl( &dword_181A5C000,  v103,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s finished writing complete frame %p, final length %u",  (uint8_t *)&buf,  0x26u);
            }
          }

          http2_transport_cache_output_frame(a6, (void *)v25);
          id v32 = 0LL;
          *a5 = 0LL;
LABEL_97:
          _Block_object_dispose(v124, 8);
          _Block_object_dispose(&v126, 8);
          _Block_object_dispose(&v130, 8);
          return v32;
        }

        __nwlog_obj();
        __int16 v58 = a6 + 205;
        buf = 136446466;
        v137 = "send_data_callback";
        v138 = 2082;
        os_log_type_t v139 = a6 + 205;
        unint64_t v59 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        v108 = 0;
        if (__nwlog_fault(v59, &type, &v108))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            int64_t v60 = (os_log_s *)__nwlog_obj();
            unint64_t v61 = type;
            if (os_log_type_enabled(v60, type))
            {
              buf = 136446466;
              v137 = "send_data_callback";
              v138 = 2082;
              os_log_type_t v139 = v58;
              uint64_t v62 = "%{public}s %{public}s did not write complete frame";
LABEL_93:
              _os_log_impl(&dword_181A5C000, v60, v61, v62, (uint8_t *)&buf, 0x16u);
            }
          }

          else if (v108)
          {
            uint64_t v63 = (char *)__nw_create_backtrace_string();
            int64_t v60 = (os_log_s *)__nwlog_obj();
            unint64_t v61 = type;
            uint64_t v64 = os_log_type_enabled(v60, type);
            if (v63)
            {
              if (v64)
              {
                buf = 136446722;
                v137 = "send_data_callback";
                v138 = 2082;
                os_log_type_t v139 = v58;
                v140 = 2082;
                *(void *)v141 = v63;
                _os_log_impl( &dword_181A5C000,  v60,  v61,  "%{public}s %{public}s did not write complete frame, dumping backtrace:%{public}s",  (uint8_t *)&buf,  0x20u);
              }

              free(v63);
              goto LABEL_94;
            }

            if (v64)
            {
              buf = 136446466;
              v137 = "send_data_callback";
              v138 = 2082;
              os_log_type_t v139 = v58;
              uint64_t v62 = "%{public}s %{public}s did not write complete frame, no backtrace";
              goto LABEL_93;
            }
          }

          else
          {
            int64_t v60 = (os_log_s *)__nwlog_obj();
            unint64_t v61 = type;
            if (os_log_type_enabled(v60, type))
            {
              buf = 136446466;
              v137 = "send_data_callback";
              v138 = 2082;
              os_log_type_t v139 = v58;
              uint64_t v62 = "%{public}s %{public}s did not write complete frame, backtrace limit exceeded";
              goto LABEL_93;
            }
          }
        }

          if (!v45)
          {
LABEL_206:
            *((void *)v85 + 3) = 0LL;
            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            uint64_t v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
            uint64_t v68 = (char *)_os_log_send_and_compose_impl();
            LOBYTE(__src) = 16;
            os_log_type_t v89 = OS_LOG_TYPE_DEFAULT;
            if (__src == 17)
            {
              uint64_t v69 = (os_log_s *)__nwlog_obj();
              __int128 v70 = __src;
              if (!os_log_type_enabled(v69, (os_log_type_t)__src)) {
                goto LABEL_220;
              }
              *(_DWORD *)buf = 136446210;
              uint64_t v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
              uint64_t v71 = "%{public}s called with null cursor";
              goto LABEL_219;
            }

            if (v89 == OS_LOG_TYPE_DEFAULT)
            {
              uint64_t v69 = (os_log_s *)__nwlog_obj();
              __int128 v70 = __src;
              if (!os_log_type_enabled(v69, (os_log_type_t)__src)) {
                goto LABEL_220;
              }
              *(_DWORD *)buf = 136446210;
              uint64_t v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
              uint64_t v71 = "%{public}s called with null cursor, backtrace limit exceeded";
              goto LABEL_219;
            }

            BOOL v76 = (char *)__nw_create_backtrace_string();
            uint64_t v69 = (os_log_s *)__nwlog_obj();
            __int128 v70 = __src;
            uint64_t v77 = os_log_type_enabled(v69, (os_log_type_t)__src);
            if (!v76)
            {
              if (!v77) {
                goto LABEL_220;
              }
              *(_DWORD *)buf = 136446210;
              uint64_t v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
              uint64_t v71 = "%{public}s called with null cursor, no backtrace";
              goto LABEL_219;
            }

            if (v77)
            {
              *(_DWORD *)buf = 136446466;
              uint64_t v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
              BOOL v92 = 2082;
              v93 = v76;
              _os_log_impl( &dword_181A5C000,  v69,  v70,  "%{public}s called with null cursor, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v76);
LABEL_220:
            if (!v68)
            {
LABEL_222:
              __int16 v23 = 0LL;
              goto LABEL_26;
            }

        free(v76);
        goto LABEL_205;
      }

      if (v86)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v100 = "nw_proxy_config_create_privacy_proxy_internal";
        _os_log_impl(&dword_181A5C000, v77, v85, "%{public}s called with null (hop_count > 0), no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v77 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v88 = type;
      if (os_log_type_enabled(v77, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v100 = "nw_proxy_config_create_privacy_proxy_internal";
        _os_log_impl( &dword_181A5C000,  v77,  v88,  "%{public}s called with null (hop_count > 0), backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181CBBA1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_udp_remove_input_handler(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  uint64_t v72 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v65 = "nw_protocol_udp_remove_input_handler";
    id v32 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v62 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v62)
      {
        int v33 = (os_log_s *)__nwlog_obj();
        os_log_type_t v34 = type;
        if (!os_log_type_enabled(v33, type)) {
          goto LABEL_130;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v65 = "nw_protocol_udp_remove_input_handler";
        __int16 v35 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_129;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int v33 = (os_log_s *)__nwlog_obj();
      os_log_type_t v34 = type;
      BOOL v47 = os_log_type_enabled(v33, type);
      if (!backtrace_string)
      {
        if (!v47) {
          goto LABEL_130;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v65 = "nw_protocol_udp_remove_input_handler";
        __int16 v35 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_129;
      }

      if (v47)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v65 = "nw_protocol_udp_remove_input_handler";
        __int16 v66 = 2082;
        uint64_t v67 = backtrace_string;
        uint64_t v48 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_91:
        _os_log_impl(&dword_181A5C000, v33, v34, v48, buf, 0x16u);
      }

uint64_t nw_protocol_udp_get_input_frames( nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, uint64_t a5, nw_frame_array_s *a6)
{
  uint64_t v136 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v129 = "nw_protocol_udp_get_input_frames";
    v93 = (char *)_os_log_send_and_compose_impl();
    v121[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v125[0]) = 0;
    if (v121[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v90 = (os_log_s *)__nwlog_obj();
      os_log_type_t v91 = v121[0];
      if (os_log_type_enabled(v90, v121[0]))
      {
        *(_DWORD *)buf = 136446210;
        v129 = "nw_protocol_udp_get_input_frames";
        BOOL v92 = "%{public}s called with null protocol";
LABEL_189:
        _os_log_impl(&dword_181A5C000, v90, v91, v92, buf, 0xCu);
      }

uint64_t nw_protocol_udp_get_output_frames( nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, uint64_t a5, nw_frame_array_s *a6)
{
  uint64_t v76 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (a1->handle == &nw_protocol_ref_counted_handle)
    {
      __int16 output_handler_context_high = HIWORD(a1[2].output_handler_context);
      if ((output_handler_context_high & 1) != 0)
      {
        uint64_t v17 = 0LL;
        HIWORD(a1[2].output_handler_context) = output_handler_context_high | 2;
        return v17;
      }

      if (a3 >= 0xFFFFFFF8) {
        uint64_t v9 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v9 = a3 + 8;
      }
      if (a4 >= 0xFFFFFFF8) {
        uint64_t v10 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v10 = a4 + 8;
      }
      uint64_t output_handler = a1->output_handler;
      if (output_handler)
      {
        handle = output_handler->handle;
        if (handle == &nw_protocol_ref_counted_handle)
        {
          callbacks = output_handler[1].callbacks;
          if (callbacks) {
            output_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
          }
        }

        size_t v14 = a1[1].callbacks;
        if (v14) {
          a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v14->add_input_handler + 1);
        }
        if (a6)
        {
          os_log_type_t v15 = output_handler->callbacks;
          if (v15)
          {
            get_output_frames = (uint64_t (*)(nw_protocol *, nw_protocol *, uint64_t, uint64_t, uint64_t, nw_frame_array_s *))v15->get_output_frames;
            if (get_output_frames)
            {
              uint64_t v17 = get_output_frames(output_handler, a1, v9, v10, a5, a6);
              goto LABEL_20;
            }
          }

          __nwlog_obj();
          name = output_handler->identifier->name;
          *(_DWORD *)buf = 136446722;
          uint64_t v69 = "__nw_protocol_get_output_frames";
          if (!name) {
            name = "invalid";
          }
          __int16 v70 = 2082;
          os_log_type_t v71 = (void *)name;
          __int16 v72 = 2048;
          uint64_t v73 = output_handler;
          __int16 v35 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v66 = 0;
          if (__nwlog_fault(v35, &type, &v66))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              id v36 = (os_log_s *)__nwlog_obj();
              os_log_type_t v37 = type;
              if (!os_log_type_enabled(v36, type)) {
                goto LABEL_137;
              }
              os_log_type_t v38 = output_handler->identifier->name;
              if (!v38) {
                os_log_type_t v38 = "invalid";
              }
              *(_DWORD *)buf = 136446722;
              uint64_t v69 = "__nw_protocol_get_output_frames";
              __int16 v70 = 2082;
              os_log_type_t v71 = (void *)v38;
              __int16 v72 = 2048;
              uint64_t v73 = output_handler;
              uint64_t v39 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback";
LABEL_122:
              BOOL v59 = v36;
              os_log_type_t v60 = v37;
              uint32_t v61 = 32;
LABEL_136:
              _os_log_impl(&dword_181A5C000, v59, v60, v39, buf, v61);
              goto LABEL_137;
            }

            if (!v66)
            {
              id v36 = (os_log_s *)__nwlog_obj();
              os_log_type_t v37 = type;
              if (!os_log_type_enabled(v36, type)) {
                goto LABEL_137;
              }
              __int16 v57 = output_handler->identifier->name;
              if (!v57) {
                __int16 v57 = "invalid";
              }
              *(_DWORD *)buf = 136446722;
              uint64_t v69 = "__nw_protocol_get_output_frames";
              __int16 v70 = 2082;
              os_log_type_t v71 = (void *)v57;
              __int16 v72 = 2048;
              uint64_t v73 = output_handler;
              uint64_t v39 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, backtrace limit exceeded";
              goto LABEL_122;
            }

            backtrace_string = (char *)__nw_create_backtrace_string();
            id v36 = (os_log_s *)__nwlog_obj();
            os_log_type_t v37 = type;
            BOOL v51 = os_log_type_enabled(v36, type);
            if (!backtrace_string)
            {
              if (!v51) {
                goto LABEL_137;
              }
              __int16 v58 = output_handler->identifier->name;
              if (!v58) {
                __int16 v58 = "invalid";
              }
              *(_DWORD *)buf = 136446722;
              uint64_t v69 = "__nw_protocol_get_output_frames";
              __int16 v70 = 2082;
              os_log_type_t v71 = (void *)v58;
              __int16 v72 = 2048;
              uint64_t v73 = output_handler;
              uint64_t v39 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, no backtrace";
              goto LABEL_122;
            }

            if (v51)
            {
              if (output_handler->identifier) {
                uint64_t v52 = output_handler->identifier->name;
              }
              else {
                uint64_t v52 = "invalid";
              }
              *(_DWORD *)buf = 136446978;
              uint64_t v69 = "__nw_protocol_get_output_frames";
              __int16 v70 = 2082;
              os_log_type_t v71 = (void *)v52;
              __int16 v72 = 2048;
              uint64_t v73 = output_handler;
              __int16 v74 = 2082;
              os_log_type_t v75 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v36,  v37,  "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, dumping backtrace:%{public}s",  buf,  0x2Au);
            }

            free(backtrace_string);
          }

LABEL_137:
          if (!v35)
          {
LABEL_139:
            uint64_t v17 = 0LL;
LABEL_20:
            if (a1->handle == &nw_protocol_ref_counted_handle)
            {
              uint64_t v22 = a1[1].callbacks;
              if (v22)
              {
                __int16 v23 = (nw_protocol_callbacks *)((char *)v22 - 1);
                a1[1].callbacks = v23;
                if (!v23)
                {
                  uint64_t v24 = *(void (***)(void))a1[1].flow_id;
                  if (v24)
                  {
                    *(void *)a1[1].flow_id = 0LL;
                    v24[2](v24);
                    _Block_release(v24);
                  }

                  if ((a1[1].flow_id[8] & 1) != 0)
                  {
                    size_t v25 = *(const void **)a1[1].flow_id;
                    if (v25) {
                      _Block_release(v25);
                    }
                  }

                  free(a1);
                }
              }
            }

            if (handle == &nw_protocol_ref_counted_handle && output_handler->handle == &nw_protocol_ref_counted_handle)
            {
              int64_t v26 = output_handler[1].callbacks;
              if (v26)
              {
                __int128 v27 = (nw_protocol_callbacks *)((char *)v26 - 1);
                output_handler[1].callbacks = v27;
                if (!v27)
                {
                  uint64_t v28 = *(void (***)(void))output_handler[1].flow_id;
                  if (v28)
                  {
                    *(void *)output_handler[1].flow_id = 0LL;
                    v28[2](v28);
                    _Block_release(v28);
                  }

                  if ((output_handler[1].flow_id[8] & 1) != 0)
                  {
                    uint64_t v29 = *(const void **)output_handler[1].flow_id;
                    if (v29) {
                      _Block_release(v29);
                    }
                  }

                  free(output_handler);
                }
              }
            }

LABEL_138:
            if (!v26)
            {
LABEL_141:
              os_log_type_t v49 = 1;
              goto LABEL_142;
            }

            goto LABEL_139;
          }

          if (!v106)
          {
            __nwlog_obj();
            __int128 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            __int16 v70 = type;
            if (os_log_type_enabled(v27, type))
            {
              *(_DWORD *)buf = 136446210;
              os_log_type_t v109 = "networkd_privileged_set_agent_on_interface_internal";
              _os_log_impl( &dword_181A5C000,  v27,  v70,  "%{public}s received invalid result type, backtrace limit exceeded",  buf,  0xCu);
            }

            goto LABEL_137;
          }

          unint64_t v50 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          __int128 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v51 = type;
          uint64_t v52 = os_log_type_enabled(v27, type);
          if (!v50)
          {
            if (v52)
            {
              *(_DWORD *)buf = 136446210;
              os_log_type_t v109 = "networkd_privileged_set_agent_on_interface_internal";
              _os_log_impl( &dword_181A5C000,  v27,  v51,  "%{public}s received invalid result type, no backtrace",  buf,  0xCu);
            }

            goto LABEL_137;
          }

          if (v52)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v109 = "networkd_privileged_set_agent_on_interface_internal";
            __int16 v110 = 2082;
            *(void *)uint64_t v111 = v50;
            _os_log_impl( &dword_181A5C000,  v27,  v51,  "%{public}s received invalid result type, dumping backtrace:%{public}s",  buf,  0x16u);
          }

        goto LABEL_138;
      }

      if (!v67)
      {
        __nwlog_obj();
        uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v62 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_copy_workloop";
          _os_log_impl( &dword_181A5C000,  v31,  v62,  "%{public}s called with null workloop, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_137;
      }

      BOOL v54 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v55 = type;
      BOOL v56 = os_log_type_enabled(v31, type);
      if (!v54)
      {
        if (v56)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_copy_workloop";
          _os_log_impl(&dword_181A5C000, v31, v55, "%{public}s called with null workloop, no backtrace", buf, 0xCu);
        }

        goto LABEL_137;
      }

      if (v56)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_group_copy_workloop";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = v54;
        _os_log_impl( &dword_181A5C000,  v31,  v55,  "%{public}s called with null workloop, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v54);
    }

        if (v31) {
          free(v31);
        }
        goto LABEL_21;
      }

      __nwlog_obj();
      os_log_type_t v45 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      uint64_t v94 = "__nw_protocol_input_available";
      uint64_t v46 = (char *)_os_log_send_and_compose_impl();

      v88[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v46, v88, &type))
      {
        if (v88[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          BOOL v47 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v48 = v88[0];
          if (os_log_type_enabled(v47, v88[0]))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v94 = "__nw_protocol_input_available";
            _os_log_impl(&dword_181A5C000, v47, v48, "%{public}s called with null other_protocol", buf, 0xCu);
          }
        }

        else if (type)
        {
          __int16 v68 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          BOOL v47 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v69 = v88[0];
          __int16 v70 = os_log_type_enabled(v47, v88[0]);
          if (v68)
          {
            if (v70)
            {
              *(_DWORD *)buf = 136446466;
              uint64_t v94 = "__nw_protocol_input_available";
              os_log_type_t v95 = 2082;
              BOOL v96 = v68;
              _os_log_impl( &dword_181A5C000,  v47,  v69,  "%{public}s called with null other_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v68);
            goto LABEL_166;
          }

          if (v70)
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v94 = "__nw_protocol_input_available";
            _os_log_impl( &dword_181A5C000,  v47,  v69,  "%{public}s called with null other_protocol, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          BOOL v47 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v83 = v88[0];
          if (os_log_type_enabled(v47, v88[0]))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v94 = "__nw_protocol_input_available";
            _os_log_impl( &dword_181A5C000,  v47,  v83,  "%{public}s called with null other_protocol, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

    if (v47) {
      free(v47);
    }
    goto LABEL_45;
  }

  node = nw_hash_table_get_node(v4[29], a2, 8LL);
  if (node)
  {
    uint64_t v17 = node;
    uint64_t v18 = *(_WORD *)(node + 84);
    if ((v18 & 0x10) == 0)
    {
      uint64_t v19 = v18 | 0x10;
      *(_WORD *)(node + 84) = v18 | 0x10;
      if ((v18 & 4) != 0)
      {
        __int128 v27 = *(nw_protocol **)(node + 16);
        uint64_t v28 = v4;
        if (nw_protocol_definition_get_message_is_stream((void *)v4[1])
          && *(nw_protocol **)&v28[-1].log_str[41] == v27)
        {
          uint64_t v29 = -2LL;
        }

        else
        {
          uint64_t v29 = (unint64_t)v27;
        }

        nw_protocol_implementation_report_connected(v28, (nw_protocol *)(v4 - 12), v27, v29);
      }

      else
      {
        if ((*((char *)v4 + 405) & 0x80000000) == 0 && gLogDatapath)
        {
          __nwlog_obj();
          BOOL v65 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446978;
            uint64_t v77 = "nw_protocol_instance_report_ready";
            os_log_type_t v78 = 2082;
            __int128 v79 = (char *)v4 + 407;
            BOOL v80 = 2080;
            uint64_t v81 = " ";
            uint64_t v82 = 2048;
            os_log_type_t v83 = a2;
            _os_log_impl( &dword_181A5C000,  v65,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sDelaying the delivery of connected() on flow %llx",  buf,  0x2Au);
          }

          uint64_t v19 = *(_WORD *)(v17 + 84);
        }

        *(_WORD *)(v17 + 84) = v19 | 0x20;
      }
    }
  }

  else if ((*((char *)v4 + 405) & 0x80000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v20 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      uint64_t v77 = "nw_protocol_instance_report_ready";
      os_log_type_t v78 = 2082;
      __int128 v79 = (char *)v4 + 407;
      BOOL v80 = 2080;
      uint64_t v81 = " ";
      uint64_t v82 = 2048;
      os_log_type_t v83 = a2;
      _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sCannot report ready, flow %llx does not exist",  buf,  0x2Au);
    }
  }

              if (!*((void *)v7 + 15))
              {
LABEL_159:
                uint64_t v88 = v19;
                os_log_type_t v89 = *(id *)(v88[13] + 136LL);

                uint64_t v90 = (void *)*((void *)v7 + 15);
                *((void *)v7 + 15) = v89;

                *(_DWORD *)os_log_type_t type = 0;
                os_log_type_t v91 = nw_parameters_copy_protocol_options(v88, v7, type);
                BOOL v92 = v91;
                if (v91)
                {
                  if (!v7[407])
                  {
                    v93 = v91;
                    v7[407] = 0;
                    uint64_t v94 = 84LL;
                    os_log_type_t v95 = 407LL;
                    while (1)
                    {
                      BOOL v96 = v93[v95 - 359];
                      v7[v95] = v96;
                      if (!v96) {
                        break;
                      }
                      --v94;
                      ++v95;
                      if (v94 <= 1)
                      {
                        v7[v95] = 0;
                        break;
                      }
                    }
                  }

                  if ((v7[404] & 4) == 0)
                  {
                    v97 = v92;
                    BOOL v98 = v97[153] == 0;

                    if (!v98)
                    {
                      if ((v7[405] & 0x80000000) == 0)
                      {
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        os_log_type_t v99 = (os_log_s *)(id)gLogObj;
                        if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                          *(_WORD *)&_BYTE buf[12] = 2082;
                          *(void *)&buf[14] = v7 + 407;
                          v281 = 2080;
                          v282 = (nw_protocol *)" ";
                          _os_log_impl( &dword_181A5C000,  v99,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sProhibit joining set, removing eligibility to join",  buf,  0x20u);
                        }
                      }

                      v7[404] |= 4u;
                      nw_protocol_remove_instance((uint64_t)(v7 - 96));
                    }
                  }
                }

                if (!*((_DWORD *)v7 + 94))
                {
                  if (*(_DWORD *)type)
                  {
                    *((_DWORD *)v7 + 94) = *(_DWORD *)type;
                  }

                  else if ((v7[405] & 0x80000000) == 0)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    os_log_type_t v100 = (os_log_s *)(id)gLogObj;
                    if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136446978;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                      *(_WORD *)&_BYTE buf[12] = 2082;
                      *(void *)&buf[14] = v7 + 407;
                      v281 = 2080;
                      v282 = (nw_protocol *)" ";
                      v283 = 2048;
                      *(void *)v284 = v7;
                      _os_log_impl( &dword_181A5C000,  v100,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sProtocol level is undefined for instance %p",  buf,  0x2Au);
                    }
                  }
                }

                os_log_type_t v101 = 0;
LABEL_241:
                if (*(_DWORD *)(*((void *)v7 + 1) + 64LL) == 3)
                {
                  __int128 v119 = v7;
                  if (nw_protocol_definition_get_message_is_stream(*((void **)v7 + 1))
                    && *((nw_protocol **)v119 - 6) == a2)
                  {
                    __int128 v120 = -2LL;
                  }

                  else
                  {
                    __int128 v120 = (uint64_t)a2;
                  }

                  if (gLogDatapath)
                  {
                    __nwlog_obj();
                    v193 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v193, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 136446722;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                      *(_WORD *)&_BYTE buf[12] = 2048;
                      *(void *)&buf[14] = v119;
                      v281 = 2048;
                      v282 = (nw_protocol *)v120;
                      _os_log_impl( &dword_181A5C000,  v193,  OS_LOG_TYPE_DEBUG,  "%{public}s Instance %p add input handler for flow %llx",  buf,  0x20u);
                    }
                  }

                  internal = *((void *)v119 + 29);
                  if (!internal)
                  {
                    internal = nw_hash_table_create_internal( 0x1Fu,  56,  (const void *(*)(const void *, unsigned int *))nw_protocol_get_key,  (unsigned int (*)(const void *, unsigned int))nw_protocol_key_hash,  (BOOL (*)(const void *, const void *, unsigned int))nw_protocol_matches_key,  0LL);
                    if (!internal)
                    {
                      *((void *)v119 + 29) = 0LL;
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      v162 = (id)gLogObj;
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                      __int16 v130 = (char *)_os_log_send_and_compose_impl();

                      type[0] = 16;
                      LOBYTE(v279) = 0;
                      if (type[0] == 17)
                      {
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        v131 = (os_log_s *)(id)gLogObj;
                        v163 = type[0];
                        if (os_log_type_enabled(v131, (os_log_type_t)type[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                          _os_log_impl( &dword_181A5C000,  v131,  v163,  "%{public}s nw_hash_table_create_no_lock failed",  buf,  0xCu);
                        }
                      }

                      else if ((_BYTE)v279)
                      {
                        v169 = (char *)__nw_create_backtrace_string();
                        __nwlog_obj();
                        v131 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                        v170 = type[0];
                        v171 = os_log_type_enabled(v131, (os_log_type_t)type[0]);
                        if (v169)
                        {
                          if (v171)
                          {
                            *(_DWORD *)buf = 136446466;
                            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                            *(_WORD *)&_BYTE buf[12] = 2082;
                            *(void *)&buf[14] = v169;
                            _os_log_impl( &dword_181A5C000,  v131,  v170,  "%{public}s nw_hash_table_create_no_lock failed, dumping backtrace:%{public}s",  buf,  0x16u);
                          }

                          free(v169);
                          if (!v130) {
                            goto LABEL_330;
                          }
                          goto LABEL_329;
                        }

                        if (v171)
                        {
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                          _os_log_impl( &dword_181A5C000,  v131,  v170,  "%{public}s nw_hash_table_create_no_lock failed, no backtrace",  buf,  0xCu);
                        }
                      }

                      else
                      {
                        __nwlog_obj();
                        v131 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                        v183 = type[0];
                        if (os_log_type_enabled(v131, (os_log_type_t)type[0]))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                          _os_log_impl( &dword_181A5C000,  v131,  v183,  "%{public}s nw_hash_table_create_no_lock failed, backtrace limit exceeded",  buf,  0xCu);
                        }
                      }

                      goto LABEL_327;
                    }

                    *(_DWORD *)(internal + 48) &= ~2u;
                    *((void *)v119 + 29) = internal;
                  }

                  LOBYTE(v275) = 0;
                  uint64_t v122 = nw_hash_table_add_object(internal, (uint64_t)a2, (char *)&v275);
                  if ((_BYTE)v275)
                  {
                    v274 = v122;
                    if ((v119[405] & 0x80000000) == 0 && gLogDatapath)
                    {
                      __nwlog_obj();
                      v194 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v194, OS_LOG_TYPE_DEBUG))
                      {
                        v195 = nw_protocol_flow_for_protocol((NWConcrete_nw_protocol_instance *)v119, (uint64_t)a2);
                        *(_DWORD *)buf = 136447234;
                        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                        *(_WORD *)&_BYTE buf[12] = 2082;
                        *(void *)&buf[14] = v119 + 407;
                        v281 = 2080;
                        v282 = (nw_protocol *)" ";
                        v283 = 2048;
                        *(void *)v284 = a2;
                        *(_WORD *)&v284[8] = 2048;
                        *(void *)&v284[10] = v195;
                        _os_log_impl( &dword_181A5C000,  v194,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sMultiplexing protocol added protocol %p to hash table for flow %llx",  buf,  0x34u);
                      }

                      uint64_t v122 = v274;
                      if (a2)
                      {
LABEL_253:
                        a2->output_handler_context = (void *)v122;
                        if (!a2->output_handler)
                        {
                          a2->uint64_t output_handler = a1;
                          if (a1->handle == &nw_protocol_ref_counted_handle)
                          {
                            uint64_t v123 = a1[1].callbacks;
                            if (v123) {
                              a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v123->add_input_handler + 1);
                            }
                          }
                        }

                        if (!a1->default_input_handler)
                        {
                          a1->default_input_handler = a2;
                          if (a2->handle == &nw_protocol_ref_counted_handle)
                          {
                            int v124 = a2[1].callbacks;
                            if (v124) {
                              a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v124->add_input_handler + 1);
                            }
                          }

    if (!v21)
    {
LABEL_139:
      BOOL v8 = 0LL;
      goto LABEL_12;
    }

      free(v42);
      goto LABEL_138;
    }

    __nwlog_obj();
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)char v107 = 136446210;
    *(void *)&v107[4] = "nw_http_cookie_options_get_should_not_send_cookies";
    BOOL v41 = _os_log_send_and_compose_impl();

    uint64_t v42 = (char *)v41;
    uint64_t v17 = v95;
    LOBYTE(v111[0]) = 16;
    LOBYTE(v110[0]) = 0;
    v93 = v42;
    if (LOBYTE(v111[0]) == 17)
    {
      __nwlog_obj();
      os_log_type_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v44 = v111[0];
      if (os_log_type_enabled(v43, v111[0]))
      {
        *(_DWORD *)char v107 = 136446210;
        *(void *)&v107[4] = "nw_http_cookie_options_get_should_not_send_cookies";
        _os_log_impl(&dword_181A5C000, v43, v44, "%{public}s called with null options", v107, 0xCu);
      }

      goto LABEL_81;
    }

    if (LOBYTE(v110[0]))
    {
      BOOL v47 = __nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v49 = v111[0];
      unint64_t v50 = os_log_type_enabled(v48, v111[0]);
      os_log_type_t v89 = (char *)v47;
      if (v47)
      {
        if (v50)
        {
          *(_DWORD *)char v107 = 136446466;
          *(void *)&v107[4] = "nw_http_cookie_options_get_should_not_send_cookies";
          *(_WORD *)&v107[12] = 2082;
          *(void *)&v107[14] = v47;
          _os_log_impl( &dword_181A5C000,  v48,  v49,  "%{public}s called with null options, dumping backtrace:%{public}s",  v107,  0x16u);
        }

        uint64_t v42 = v93;
        uint64_t v17 = v95;
        free(v89);
        goto LABEL_136;
      }

      if (v50)
      {
        *(_DWORD *)char v107 = 136446210;
        *(void *)&v107[4] = "nw_http_cookie_options_get_should_not_send_cookies";
        _os_log_impl(&dword_181A5C000, v48, v49, "%{public}s called with null options, no backtrace", v107, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v54 = v111[0];
      if (os_log_type_enabled(v48, v111[0]))
      {
        *(_DWORD *)char v107 = 136446210;
        *(void *)&v107[4] = "nw_http_cookie_options_get_should_not_send_cookies";
        _os_log_impl( &dword_181A5C000,  v48,  v54,  "%{public}s called with null options, backtrace limit exceeded",  v107,  0xCu);
      }
    }

                        if (!v64)
                        {
LABEL_139:
                          int v33 = 0LL;
LABEL_150:

                          goto LABEL_151;
                        }

          if (*(_BYTE *)(a2 + *v8)) {
            uint64_t v67 = 0LL;
          }
LABEL_139:
          *(_BYTE *)(a1 + 43) = v67 != 0;
          goto LABEL_5;
        case 6u:
          *(_BYTE *)(a1 + 48) |= 0x10u;
          char v126 = *v3;
          os_log_type_t v127 = *(void *)(a2 + v126);
          if (v127 == -1LL || v127 >= *(void *)(a2 + *v6))
          {
            __int16 v130 = 0LL;
LABEL_151:
            *(_BYTE *)(a2 + *v8) = 1;
            goto LABEL_152;
          }

          BOOL v128 = v127 + 1;
          v129 = *(_BYTE *)(*(void *)(a2 + *v10) + v127);
          *(void *)(a2 + v126) = v128;
          __int16 v130 = v129 & 0x7F;
          if ((v129 & 0x80) == 0) {
            goto LABEL_152;
          }
          v131 = *v3;
          __int16 v132 = *(void *)(a2 + v131);
          if (v132 == -1LL || v132 >= *(void *)(a2 + *v6)) {
            goto LABEL_151;
          }
          v133 = v132 + 1;
          __int16 v134 = *(char *)(*(void *)(a2 + *v10) + v132);
          *(void *)(a2 + v131) = v133;
          v130 |= (unint64_t)(v134 & 0x7F) << 7;
          if ((v134 & 0x80000000) == 0) {
            goto LABEL_152;
          }
          BOOL v135 = *v3;
          uint64_t v136 = *(void *)(a2 + v135);
          if (v136 == -1LL || v136 >= *(void *)(a2 + *v6)) {
            goto LABEL_151;
          }
          v137 = v136 + 1;
          v138 = *(char *)(*(void *)(a2 + *v10) + v136);
          *(void *)(a2 + v135) = v137;
          v130 |= (unint64_t)(v138 & 0x7F) << 14;
          if ((v138 & 0x80000000) == 0) {
            goto LABEL_152;
          }
          os_log_type_t v139 = *v3;
          v140 = *(void *)(a2 + v139);
          if (v140 == -1LL || v140 >= *(void *)(a2 + *v6)) {
            goto LABEL_151;
          }
          v141 = v140 + 1;
          v142 = *(char *)(*(void *)(a2 + *v10) + v140);
          *(void *)(a2 + v139) = v141;
          v130 |= (unint64_t)(v142 & 0x7F) << 21;
          if ((v142 & 0x80000000) == 0) {
            goto LABEL_152;
          }
          v143 = *v3;
          os_log_type_t v144 = *(void *)(a2 + v143);
          if (v144 == -1LL || v144 >= *(void *)(a2 + *v6)) {
            goto LABEL_151;
          }
          BOOL v145 = v144 + 1;
          v146 = *(char *)(*(void *)(a2 + *v10) + v144);
          *(void *)(a2 + v143) = v145;
          v130 |= (unint64_t)(v146 & 0x7F) << 28;
          if ((v146 & 0x80000000) == 0) {
            goto LABEL_152;
          }
          v181 = *v3;
          v182 = *(void *)(a2 + v181);
          if (v182 == -1LL || v182 >= *(void *)(a2 + *v6)) {
            goto LABEL_151;
          }
          v183 = v182 + 1;
          v184 = *(char *)(*(void *)(a2 + *v10) + v182);
          *(void *)(a2 + v181) = v183;
          v130 |= (unint64_t)(v184 & 0x7F) << 35;
          if (v184 < 0)
          {
            v237 = *v3;
            v238 = *(void *)(a2 + v237);
            if (v238 == -1LL || v238 >= *(void *)(a2 + *v6)) {
              goto LABEL_151;
            }
            v239 = v238 + 1;
            v240 = *(char *)(*(void *)(a2 + *v10) + v238);
            *(void *)(a2 + v237) = v239;
            v130 |= (unint64_t)(v240 & 0x7F) << 42;
            if (v240 < 0)
            {
              v241 = *v3;
              v242 = *(void *)(a2 + v241);
              if (v242 == -1LL || v242 >= *(void *)(a2 + *v6)) {
                goto LABEL_151;
              }
              v243 = v242 + 1;
              v244 = *(char *)(*(void *)(a2 + *v10) + v242);
              *(void *)(a2 + v241) = v243;
              v130 |= (unint64_t)(v244 & 0x7F) << 49;
              if (v244 < 0)
              {
                v245 = *v3;
                v246 = *(void *)(a2 + v245);
                if (v246 == -1LL || v246 >= *(void *)(a2 + *v6)) {
                  goto LABEL_151;
                }
                v247 = v246 + 1;
                v248 = *(char *)(*(void *)(a2 + *v10) + v246);
                *(void *)(a2 + v245) = v247;
                v130 |= (unint64_t)(v248 & 0x7F) << 56;
                if (v248 < 0)
                {
                  v249 = *v3;
                  v250 = *(void *)(a2 + v249);
                  if (v250 == -1LL || v250 >= *(void *)(a2 + *v6)) {
                    goto LABEL_151;
                  }
                  v251 = v250 + 1;
                  v252 = *(unsigned __int8 *)(*(void *)(a2 + *v10) + v250);
                  *(void *)(a2 + v249) = v251;
                  if ((v252 & 0x80) != 0)
                  {
                    __int16 v130 = 0LL;
                    goto LABEL_154;
                  }

                  v130 |= v252 << 63;
                }
              }
            }
          }

    if (v100) {
      free(v100);
    }
LABEL_26:

    uint64_t v29 = *(void *)(a1 + 32);
    uint64_t v30 = *(void **)(v29 + 512);
    if (v30 && *(char *)(v29 + 109) < 0)
    {
      uint64_t v31 = *(void *)(v29 + 16);
      if (v31 && !nw_path_parameters_get_logging_disabled(*(void *)(v31 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v32 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          int v33 = *(_DWORD *)(*(void *)(a1 + 32) + 448LL);
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_cancel_inner_block_invoke_2";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = v33;
          _os_log_impl( &dword_181A5C000,  v32,  OS_LOG_TYPE_INFO,  "%{public}s [C%u] Connection cancelled, updating current interface",  buf,  0x12u);
        }
      }

      (*(void (**)(void, void))(*(void *)(*(void *)(a1 + 32) + 512LL) + 16LL))( *(void *)(*(void *)(a1 + 32) + 512LL),  0LL);
      uint64_t v29 = *(void *)(a1 + 32);
      uint64_t v30 = *(void **)(v29 + 512);
    }

    *(void *)(v29 + 512) = 0LL;

    os_log_type_t v34 = *(void *)(a1 + 32);
    __int16 v35 = *(void **)(v34 + 520);
    *(void *)(v34 + 520) = 0LL;

    v147 = 524289;
    nw_connection_endpoint_report_on_nw_queue(0LL, 0, 5, (uint64_t)&v147, 0LL, *(void **)(a1 + 32));
    if (os_unfair_lock_opaque < 1) {
      goto LABEL_80;
    }
    nw_connection_send_stats_report_on_nw_queue(*(void **)(a1 + 32));
    if (os_unfair_lock_opaque > 2) {
      goto LABEL_80;
    }
    id v36 = *(id *)(a1 + 32);
    os_log_type_t v37 = 0;
    if (nw_connection_get_event_milliseconds(v36, 2, 2, 0LL, 0LL) == -1)
    {
      *(_WORD *)buf = 0;
      event_milliseconds = nw_connection_get_event_milliseconds(v36, 2, 1, buf, 0LL);
      if (event_milliseconds == -1)
      {
        os_log_type_t v37 = 0;
      }

      else
      {
        uint64_t v52 = event_milliseconds;
        os_log_type_t v53 = mach_continuous_time();
        if (v53 <= 1) {
          BOOL v54 = 1LL;
        }
        else {
          BOOL v54 = v53;
        }
        uint64_t v55 = nw_delta_nanos(*((void *)v36 + 9), v54);
        os_log_type_t v37 = 0;
        BOOL v56 = v55 / 0xF4240;
        if (v55 > 0xF423FFFFFFFFFLL) {
          LODWORD(v56) = -1;
        }
        __int16 v57 = v56 >= v52;
        __int16 v58 = v56 - v52;
        if (v58 != 0 && v57 && v58 >> 3 >= 0x271)
        {
          BOOL v59 = nw_connection_copy_endpoint_handler_for_handler_id( *((NWConcrete_nw_connection **)v36 + 18),  *(__int16 *)buf);
          nw_connection_report_symptom_on_nw_queue(v36, 421900, v59, 0);

          os_log_type_t v37 = 1;
        }
      }
    }

    if (nw_connection_get_event_milliseconds(v36, 3, 6, 0LL, 0LL) == -1)
    {
      *(_WORD *)buf = 0;
      os_log_type_t v60 = nw_connection_get_event_milliseconds(v36, 3, 3, buf, 0LL);
      if (v60 != -1)
      {
        uint32_t v61 = v60;
        os_log_type_t v62 = mach_continuous_time();
        if (v62 <= 1) {
          uint64_t v63 = 1LL;
        }
        else {
          uint64_t v63 = v62;
        }
        uint64_t v64 = nw_delta_nanos(*((void *)v36 + 9), v63);
        BOOL v65 = v64 / 0xF4240;
        if (v64 > 0xF423FFFFFFFFFLL) {
          LODWORD(v65) = -1;
        }
        __int16 v57 = v65 >= v61;
        char v66 = v65 - v61;
        if (v66 != 0 && v57 && v66 >> 3 >= 0x271)
        {
          uint64_t v67 = nw_connection_copy_endpoint_handler_for_handler_id( *((NWConcrete_nw_connection **)v36 + 18),  *(__int16 *)buf);
          nw_connection_report_symptom_on_nw_queue(v36, 421901, v67, 0);

          os_log_type_t v37 = 1;
        }
      }
    }

    if (v37) {
      os_log_type_t v38 = 60;
    }
    else {
      os_log_type_t v38 = 1301;
    }
    uint64_t v39 = (void **)*(id *)(a1 + 32);
    uint64_t v40 = v39;
    if (v39)
    {
      nw_context_assert_queue(v39[3]);
      BOOL v41 = v40;
      *(void *)os_log_type_t type = 0LL;
      v142 = (uint64_t)type;
      LODWORD(v144) = 0;
      v143 = 0x2020000000LL;
      uint64_t v42 = v41 + 34;
      *(void *)buf = v20;
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&buf[16] = __nw_connection_get_privacy_stance_block_invoke;
      *(void *)&_BYTE buf[24] = &unk_189BC9210;
      *(void *)&buf[40] = type;
      os_log_type_t v43 = v41;
      *(void *)&buf[32] = v43;
      os_unfair_lock_lock(v42);
      (*(void (**)(_BYTE *))&buf[16])(buf);
      os_unfair_lock_unlock(v42);
      uint64_t v44 = *(_DWORD *)(v142 + 24);

      _Block_object_dispose(type, 8);
      if (v44 == 4) {
        goto LABEL_46;
      }
      os_log_type_t v45 = v43;
      *(void *)os_log_type_t type = 0LL;
      v142 = (uint64_t)type;
      LODWORD(v144) = 0;
      v143 = 0x2020000000LL;
      *(void *)buf = v20;
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&buf[16] = __nw_connection_get_privacy_stance_block_invoke;
      *(void *)&_BYTE buf[24] = &unk_189BC9210;
      *(void *)&buf[40] = type;
      uint64_t v46 = v45;
      *(void *)&buf[32] = v46;
      os_unfair_lock_lock(v42);
      (*(void (**)(_BYTE *))&buf[16])(buf);
      os_unfair_lock_unlock(v42);
      BOOL v47 = *(_DWORD *)(v142 + 24);

      _Block_object_dispose(type, 8);
      if (v47 == 1)
      {
LABEL_46:
        uint64_t v48 = *((void *)v43 + 2);
        if (v48 && !nw_path_parameters_get_logging_disabled(*(void *)(v48 + 104)) && gLogDatapath)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          os_log_type_t v49 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
          {
            unint64_t v50 = *((_DWORD *)v43 + 112);
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_connection_report_error_to_proxy_agent_on_nw_queue";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = v50;
            _os_log_impl( &dword_181A5C000,  v49,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%u] not reporting error for connection with ineligible privacy stance",  buf,  0x12u);
          }
        }
      }

      else
      {
        *(void *)buf = v20;
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&buf[16] = __nw_connection_report_error_to_proxy_agent_on_nw_queue_block_invoke;
        *(void *)&_BYTE buf[24] = &unk_189BB9810;
        __int16 v68 = v46;
        *(void *)&buf[32] = v68;
        *(_DWORD *)&buf[40] = v38;
        uint64_t v69 = (void (**)(void *, id, id))_Block_copy(buf);
        if ((v68[109] & 0x40) != 0
          && (__int16 v70 = nw_endpoint_handler_copy_connected_flow_handler(*((void **)v68 + 18))) != 0LL)
        {
          os_log_type_t v71 = v70;
          __int16 v72 = v71[4];

          uint64_t v73 = v71;
          os_unfair_lock_lock((os_unfair_lock_t)v73 + 28);
          __int16 v74 = *((id *)v73 + 8);
          os_unfair_lock_unlock((os_unfair_lock_t)v73 + 28);

          v69[2](v69, v72, v74);
        }

        else
        {
          os_log_type_t v75 = (void *)*((void *)v68 + 18);
          *(void *)os_log_type_t type = v20;
          v142 = 3221225472LL;
          v143 = (uint64_t)__nw_connection_report_error_to_proxy_agent_on_nw_queue_block_invoke_25;
          os_log_type_t v144 = (uint64_t (*)(uint64_t, uint64_t))&unk_189BB9838;
          LODWORD(v146) = v38;
          BOOL v145 = v69;
          nw_endpoint_handler_apply_to_leaf_children(v75, type);
          uint64_t v73 = v145;
        }
      }

        if (v73) {
          free(v73);
        }
        *(_DWORD *)(v8 + 352) = 0;
        os_log_type_t v15 = object;
        goto LABEL_140;
      }

      v339 = *(void *)(v11 + 256);
      v340 = *(_DWORD *)(*(void *)(v11 + 248) + 372LL);
      if (v339) {
        LODWORD(v339) = *(_DWORD *)(v339 + 860);
      }
      v341 = *(_DWORD *)(v11 + 424);
      v342 = *(_DWORD *)(v8 + 348);
      *(_DWORD *)buf = 136448258;
      *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = v11 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(void *)&_BYTE buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v340;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v339;
      *(_WORD *)&buf[44] = 1024;
      *(_DWORD *)&buf[46] = v341;
      *(_WORD *)&buf[50] = 1024;
      *(_DWORD *)&buf[52] = v341;
      *(_WORD *)&buf[56] = 2048;
      *(void *)&buf[58] = v11;
      *(_WORD *)&buf[66] = 1024;
      *(_DWORD *)&buf[68] = v342;
      _os_log_impl( &dword_181A5C000,  v338,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> removed pending stream %u (%p), now have %u pending streams",  buf,  0x48u);
LABEL_58:
      os_log_type_t v15 = object;
      goto LABEL_68;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    size_t v25 = *(unsigned int *)(v8 + 348);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = "http1->pending_stream_count";
    *(_WORD *)&buf[22] = 2048;
    *(void *)&_BYTE buf[24] = 1LL;
    *(_WORD *)&buf[32] = 2048;
    *(void *)&buf[34] = v25;
    int64_t v26 = (char *)_os_log_send_and_compose_impl();
    aBlock[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v26, aBlock, &type))
    {
      if (aBlock[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int128 v27 = (os_log_s *)gLogObj;
        uint64_t v28 = aBlock[0];
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)aBlock[0]))
        {
          uint64_t v29 = *(unsigned int *)(v8 + 348);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = "http1->pending_stream_count";
          *(_WORD *)&buf[22] = 2048;
          *(void *)&_BYTE buf[24] = 1LL;
          *(_WORD *)&buf[32] = 2048;
          *(void *)&buf[34] = v29;
          uint64_t v30 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_61:
          os_log_type_t v37 = v27;
          os_log_type_t v38 = v28;
LABEL_62:
          _os_log_impl(&dword_181A5C000, v37, v38, v30, buf, 0x2Au);
        }
      }

      else if (type)
      {
        uint64_t v31 = (char *)__nw_create_backtrace_string();
        os_log_type_t v32 = (os_log_s *)__nwlog_obj();
        int v33 = aBlock[0];
        os_log_type_t v34 = os_log_type_enabled(v32, (os_log_type_t)aBlock[0]);
        if (v31)
        {
          if (v34)
          {
            __int16 v35 = *(unsigned int *)(v8 + 348);
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = "http1->pending_stream_count";
            *(_WORD *)&buf[22] = 2048;
            *(void *)&_BYTE buf[24] = 1LL;
            *(_WORD *)&buf[32] = 2048;
            *(void *)&buf[34] = v35;
            *(_WORD *)&buf[42] = 2082;
            *(void *)&buf[44] = v31;
            _os_log_impl( &dword_181A5C000,  v32,  v33,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v31);
          goto LABEL_63;
        }

        if (v34)
        {
          v206 = *(unsigned int *)(v8 + 348);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = "http1->pending_stream_count";
          *(_WORD *)&buf[22] = 2048;
          *(void *)&_BYTE buf[24] = 1LL;
          *(_WORD *)&buf[32] = 2048;
          *(void *)&buf[34] = v206;
          uint64_t v30 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          os_log_type_t v37 = v32;
          os_log_type_t v38 = v33;
          goto LABEL_62;
        }
      }

      else
      {
        __int128 v27 = (os_log_s *)__nwlog_obj();
        uint64_t v28 = aBlock[0];
        if (os_log_type_enabled(v27, (os_log_type_t)aBlock[0]))
        {
          id v36 = *(unsigned int *)(v8 + 348);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_pending_stream";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = "http1->pending_stream_count";
          *(_WORD *)&buf[22] = 2048;
          *(void *)&_BYTE buf[24] = 1LL;
          *(_WORD *)&buf[32] = 2048;
          *(void *)&buf[34] = v36;
          uint64_t v30 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_61;
        }
      }
    }

    goto LABEL_138;
  }

  uint64_t v44 = v8;
  os_log_type_t v45 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v47 = type;
  os_log_type_t v71 = os_log_type_enabled(v46, type);
  if (!v45)
  {
    if (v71)
    {
      if (v56 > 0x14) {
        __int128 v79 = "unknown";
      }
      else {
        __int128 v79 = off_189BB5C28[v56];
      }
      *(_DWORD *)buf = 136446722;
      v97 = "-[NWPrivilegedHelper registerHandlerFunction:type:allowedEntitlementGroup:]";
      BOOL v98 = 1024;
      *(_DWORD *)os_log_type_t v99 = v5;
      *(_WORD *)&v99[4] = 2082;
      *(void *)&v99[6] = v79;
      os_log_type_t v78 = "%{public}s Refusing to register handler for type [%u] %{public}s without any entitlement, no backtrace";
      goto LABEL_109;
    }

    if (v58) {
      free(v58);
    }
    size_t v25 = 0LL;
    if (v21 != &nw_protocol_ref_counted_handle) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }

  size_t v25 = 1LL;
LABEL_60:
  if ((_DWORD)a3 && (_UNKNOWN *)a1[5] != &nw_protocol_ref_counted_handle) {
    a1[5] = 0LL;
  }
  if (a5) {
    (*(void (**)(uint64_t))(a5 + 16))(a5);
  }
  return v25;
}

        BYTE1(v10[1].super.isa) |= 0x20u;
        if ((v35 & 0x10) == 0)
        {
LABEL_78:
          if ((v35 & 4) == 0) {
            goto LABEL_79;
          }
          goto LABEL_139;
        }

          os_log_type_t v89 = (void *)*((void *)v272 + 5);
          if (!v89) {
            goto LABEL_3;
          }
          while (1)
          {
            while (1)
            {
              uint64_t v90 = (void (*)(void *, uint64_t, uint64_t))v89[10];
              os_log_type_t v91 = (void *)v89[4];
              if (!v90) {
                break;
              }
              BOOL v92 = v89[11];
              v89[10] = 0LL;
              v89[11] = 0LL;
              v90(v89, 1LL, v92);
              os_log_type_t v89 = v91;
              if (!v91) {
                goto LABEL_3;
              }
            }

            v93 = v3;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
            uint64_t v94 = (char *)_os_log_send_and_compose_impl();
            v279[0] = 16;
            LOBYTE(error) = 0;
            if (v279[0] == 17)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v95 = gLogObj;
              BOOL v96 = v279[0];
              if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v279[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
                v97 = (os_log_s *)v95;
                BOOL v98 = v96;
                os_log_type_t v99 = "%{public}s called with null frame->finalizer";
LABEL_154:
                _os_log_impl(&dword_181A5C000, v97, v98, v99, buf, 0xCu);
              }
            }

            else if ((_BYTE)error)
            {
              os_log_type_t v100 = (char *)__nw_create_backtrace_string();
              os_log_type_t v101 = (os_log_s *)__nwlog_obj();
              v102 = v279[0];
              BOOL v103 = os_log_type_enabled(v101, (os_log_type_t)v279[0]);
              if (v100)
              {
                if (v103)
                {
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
                  *(_WORD *)&_BYTE buf[12] = 2082;
                  *(void *)&buf[14] = v100;
                  _os_log_impl( &dword_181A5C000,  v101,  v102,  "%{public}s called with null frame->finalizer, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v100);
                goto LABEL_155;
              }

              if (v103)
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
                v97 = v101;
                BOOL v98 = v102;
                os_log_type_t v99 = "%{public}s called with null frame->finalizer, no backtrace";
                goto LABEL_154;
              }
            }

            else
            {
              BOOL v104 = (os_log_s *)__nwlog_obj();
              v105 = v279[0];
              if (os_log_type_enabled(v104, (os_log_type_t)v279[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "__nw_frame_finalize";
                v97 = v104;
                BOOL v98 = v105;
                os_log_type_t v99 = "%{public}s called with null frame->finalizer, backtrace limit exceeded";
                goto LABEL_154;
              }
            }

            os_log_type_t v101 = *((void *)handle + 110);
            *((void *)v58 + 68) = v101;
            if (v101) {
              v102 = (void *)(v101 + 552);
            }
            else {
              v102 = handle + 888;
            }
            const char *v102 = v58 + 34;
            *((void *)handle + 110) = v58;
            *((void *)v58 + 69) = handle + 880;
            if (*((void *)handle + 6))
            {
              if (v70)
              {
LABEL_142:
                *(_OWORD *)handle = *(_OWORD *)v44;
                if (((*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0x400000) == 0)
                {
                  if (gLogDatapath)
                  {
                    v196 = (os_log_s *)__nwlog_obj();
                    if (os_log_type_enabled(v196, OS_LOG_TYPE_DEBUG))
                    {
                      v197 = *((_DWORD *)handle + 320);
                      v198 = *((void *)handle + 6);
                      *(_DWORD *)buf = 136447746;
                      *(void *)&uint8_t buf[4] = "nw_protocol_http3_add_input_handler";
                      *(_WORD *)&_BYTE buf[12] = 2082;
                      *(void *)&buf[14] = handle + 1289;
                      *(_WORD *)&buf[22] = 2080;
                      *(void *)&_BYTE buf[24] = " ";
                      *(_WORD *)&buf[32] = 1024;
                      *(_DWORD *)&buf[34] = v197;
                      *(_WORD *)&buf[38] = 2048;
                      *(void *)&buf[40] = handle;
                      *(_WORD *)&buf[48] = 2048;
                      *(void *)&buf[50] = v198;
                      *(_WORD *)&buf[58] = 2048;
                      *(void *)&buf[60] = v44;
                      _os_log_impl( &dword_181A5C000,  v196,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> protocol %p protocol->default_input_handler %p input_protocol %p",  buf,  0x44u);
                    }
                  }
                }

                if (!*((void *)handle + 152))
                {
                  char v126 = object;
                  os_log_type_t v127 = *(id *)(v217[13] + 136LL);

                  BOOL v128 = (void *)*((void *)handle + 151);
                  if (v128)
                  {
                    os_release(v128);
                    *((void *)handle + 151) = 0LL;
                  }

                  v129 = nw_path_copy_flow_registration(v127, (uint64_t)handle);
                  *((void *)handle + 151) = v129;
                  uint64_t v44 = (uint64_t)v221;
                  if (v127)
                  {
                    os_release(v127);
                    v129 = (id)*((void *)handle + 151);
                  }

                  if (v129)
                  {
                    __int16 v130 = nw_path_flow_registration_copy_endpoint(v129);
                    v131 = nw_path_flow_registration_copy_parameters(*((void **)handle + 151));
                    __int16 v132 = nw_endpoint_copy_association_with_evaluator(v130, v131, 0LL);
                    *((void *)handle + 152) = v132;
                    if (v130)
                    {
                      os_release(v130);
                      __int16 v132 = (id *)*((void *)handle + 152);
                    }

                    if (v132)
                    {
                      v133 = nw_protocol_instance_stub_create((nw_protocol *)handle);
                      *((void *)handle + 153) = v133;
                      nw_association_register_internal( *((void **)handle + 152),  v126,  v133,  0,  0,  &__block_literal_global_165_61479);
                      __int16 v134 = nw_association_copy_current_path(*((void **)handle + 152), v131);
                      if (v134)
                      {
                        BOOL v135 = v134;
                        uint64_t v136 = nw_path_copy_for_flow_registration(v134, *((void **)handle + 151));
                        if (v136)
                        {
                          v137 = (void *)v136;
                          v138 = *v216;
                          if (*v216 != v137)
                          {
                            if (v138)
                            {
                              os_release(v138);
                              *v216 = 0LL;
                            }

                            *v216 = os_retain(v137);
                          }

                          if (nw_path_has_flows(v137)) {
                            os_log_type_t v139 = -8388608;
                          }
                          else {
                            os_log_type_t v139 = 0;
                          }
                          handle[1375] = (v139 & 0xFF80FFFF | ((handle[1375] & 0x7F) << 16)) >> 16;
                          v140 = nw_parameters_copy_effective_proxy_config(v126);
                          if (v140)
                          {
                            v141 = v140;
                            if (nw_path_has_proxy_config(v135, v140))
                            {
                              v142 = (void *)*((void *)handle + 154);
                              if (v142) {
                                os_release(v142);
                              }
                              *((void *)handle + 154) = v141;
                            }

                            else
                            {
                              os_release(v141);
                            }
                          }

                          os_release(v135);
                        }

                        else
                        {
                          v137 = v135;
                        }

                        os_release(v137);
                      }
                    }

                    if (v131) {
                      os_release(v131);
                    }
                  }
                }

                BOOL v103 = nw_parameters_copy_protocol_options_legacy(object, (nw_protocol *)v58);
                if (!v103) {
                  goto LABEL_233;
                }
                v105 = v103;
                v106 = v105;
                handle[1289] = 0;
                char v107 = 84LL;
                v108 = 1289LL;
                while (1)
                {
                  os_log_type_t v109 = v105[v108 - 1241];
                  handle[v108] = v109;
                  if (!v109) {
                    break;
                  }
                  --v107;
                  ++v108;
                  if (v107 <= 1)
                  {
                    handle[v108] = 0;
                    break;
                  }
                }

                __int16 v110 = v106;
                uint64_t v111 = *((_WORD *)v110 + 68);

                *((_WORD *)handle + 643) = v111;
                *((void *)handle + 127) = 1000 * nw_http3_get_idle_timeout(v110);
                *((_DWORD *)handle + 319) = nw_http3_get_keepalive_mode(v110);
                else {
                  uint64_t v112 = 0;
                }
                uint64_t v113 = *(_WORD *)(handle + 1373) & 0xFFDF | (handle[1375] << 16);
                *(_WORD *)v222 = *(_WORD *)v222 & 0xFFDF | v112;
                handle[1375] = BYTE2(v113);
                handle[1288] = nw_http3_get_sessions_to_request(v110);
                nw_http3_get_resumable_session_agent(v110, (uint64_t)(handle + 848));
                *((_DWORD *)handle + 320) = nw_protocol_get_next_instance_id();
                uint64_t v114 = v110;
                os_log_type_t v115 = *((_DWORD *)v114 + 33);

                if (((*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0x400000) == 0)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  uint64_t v116 = (os_log_s *)gLogObj;
                  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
                  {
                    v117 = *((_DWORD *)handle + 320);
                    *(_DWORD *)buf = 136447490;
                    *(void *)&uint8_t buf[4] = "nw_protocol_http3_add_input_handler";
                    *(_WORD *)&_BYTE buf[12] = 2082;
                    *(void *)&buf[14] = handle + 1289;
                    *(_WORD *)&buf[22] = 2080;
                    *(void *)&_BYTE buf[24] = " ";
                    *(_WORD *)&buf[32] = 1024;
                    *(_DWORD *)&buf[34] = v117;
                    *(_WORD *)&buf[38] = 1024;
                    *(_DWORD *)&buf[40] = v117;
                    *(_WORD *)&buf[44] = 1024;
                    *(_DWORD *)&buf[46] = v115;
                    _os_log_impl( &dword_181A5C000,  v116,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> created HTTP/3 and assigned instance ID: %u from C%u",  buf,  0x32u);
                  }
                }

                v118 = (const void *)*((void *)handle + 108);
                uint64_t v44 = (uint64_t)v221;
                if (v118)
                {
                  _Block_release(v118);
                  *((void *)handle + 108) = 0LL;
                }

                __int128 v119 = (dispatch_object_s *)*((void *)handle + 109);
                if (v119)
                {
                  dispatch_release(v119);
                  *((void *)handle + 109) = 0LL;
                }

                *((void *)handle + 108) = nw_http3_copy_resumable_session_handler(v114);
                *((void *)handle + 109) = nw_http3_copy_resumable_session_handler_queue(v114);
                v224 = 0LL;
                v225 = 0LL;
                v223 = 0LL;
                if (!nw_http3_get_initial_remote_settings( v114,  (uint64_t)&v225,  (uint64_t)&v224,  (uint64_t)&v223)) {
                  goto LABEL_232;
                }
                memset(type, 0, 63);
                __int128 v120 = v224;
                os_log_type_t v121 = v225;
                uint64_t v122 = v223;
                memset(buf, 0, 63);
                if (v225 == -1LL)
                {
                  v143 = 0LL;
                }

                else
                {
                  __src = 6LL;
                  buf[0] = 6;
                  if (v225 > 0x3F)
                  {
                    if (v225 >> 14)
                    {
                      if (v225 >> 30)
                      {
                        if (v225 >> 62)
                        {
                          BOOL v145 = (os_log_s *)__nwlog_obj();
                          os_log_type_enabled(v145, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)v228 = 136446466;
                          *(void *)&v228[4] = "_http_vle_encode";
                          *(_WORD *)&v228[12] = 2048;
                          *(void *)&v228[14] = v121;
                          v146 = (void *)_os_log_send_and_compose_impl();
                          uint64_t result = __nwlog_abort((uint64_t)v146);
                          if (result) {
                            goto LABEL_387;
                          }
                          free(v146);
                          uint64_t v123 = 0LL;
                        }

                        else
                        {
                          __src = bswap64(v225 | 0xC000000000000000LL);
                          uint64_t v123 = 8LL;
                        }
                      }

                      else
                      {
                        __src = bswap32(v225 | 0x80000000);
                        uint64_t v123 = 4LL;
                      }
                    }

                    else
                    {
                      __src = bswap32(v225 | 0x4000) >> 16;
                      uint64_t v123 = 2LL;
                    }
                  }

                  else
                  {
                    __src = v225;
                    uint64_t v123 = 1LL;
                  }

                  memcpy(&buf[1], &__src, v123);
                  v143 = v123 + 1;
                }

                __src = 1LL;
                buf[v143] = 1;
                if (v120 > 0x3F)
                {
                  if (v120 >> 14)
                  {
                    if (v120 >> 30)
                    {
                      if (v120 >> 62)
                      {
                        v148 = (os_log_s *)__nwlog_obj();
                        os_log_type_enabled(v148, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v228 = 136446466;
                        *(void *)&v228[4] = "_http_vle_encode";
                        *(_WORD *)&v228[12] = 2048;
                        *(void *)&v228[14] = v120;
                        os_log_type_t v149 = (void *)_os_log_send_and_compose_impl();
                        uint64_t result = __nwlog_abort((uint64_t)v149);
                        if (result) {
                          goto LABEL_387;
                        }
                        free(v149);
                        v147 = 0LL;
                      }

                      else
                      {
                        __src = bswap64(v120 | 0xC000000000000000LL);
                        v147 = 8LL;
                      }
                    }

                    else
                    {
                      __src = bswap32(v120 | 0x80000000);
                      v147 = 4LL;
                    }
                  }

                  else
                  {
                    __src = bswap32(v120 | 0x4000) >> 16;
                    v147 = 2LL;
                  }
                }

                else
                {
                  __src = v120;
                  v147 = 1LL;
                }

                memcpy(&buf[v143 + 1], &__src, v147);
                char v150 = v147 + v143 + 1;
                __src = 7LL;
                buf[v150] = 7;
                if (v122 <= 0x3F)
                {
                  __src = v122;
                  os_log_type_t v151 = 1LL;
LABEL_231:
                  memcpy(&buf[v150 + 1], &__src, v151);
                  v154 = v151 + v150 + 1;
                  memcpy(type, buf, v154);
                  *((void *)handle + 144) = dispatch_data_create(type, v154, 0LL, 0LL);
                  *(_WORD *)v222 |= 0x40u;
LABEL_232:
                  os_release(v114);
                  goto LABEL_233;
                }

                if (!(v122 >> 14))
                {
                  __src = bswap32(v122 | 0x4000) >> 16;
                  os_log_type_t v151 = 2LL;
                  goto LABEL_231;
                }

                if (!(v122 >> 30))
                {
                  __src = bswap32(v122 | 0x80000000);
                  os_log_type_t v151 = 4LL;
                  goto LABEL_231;
                }

                if (!(v122 >> 62))
                {
                  __src = bswap64(v122 | 0xC000000000000000LL);
                  os_log_type_t v151 = 8LL;
                  goto LABEL_231;
                }

                v152 = (os_log_s *)__nwlog_obj();
                os_log_type_enabled(v152, OS_LOG_TYPE_ERROR);
                *(_DWORD *)v228 = 136446466;
                *(void *)&v228[4] = "_http_vle_encode";
                *(_WORD *)&v228[12] = 2048;
                *(void *)&v228[14] = v122;
                v153 = (void *)_os_log_send_and_compose_impl();
                uint64_t result = __nwlog_abort((uint64_t)v153);
                if (!result)
                {
                  free(v153);
                  os_log_type_t v151 = 0LL;
                  goto LABEL_231;
                }

  if (v27) {
    free(v27);
  }
  uint64_t v67 = *(void *)a1[3].flow_id;
  p_uint64_t output_handler = &a1[1].output_handler;
  if (v67)
  {
    nw_queue_cancel_source(v67, v28);
    *(void *)a1[3].flow_id = 0LL;
  }

  __int16 v68 = *(void *)&buf[8];
  uint64_t v69 = *(_BYTE *)(*(void *)&buf[8] + 48LL);
  if ((v69 & 1) != 0)
  {
    __int16 v70 = *(void **)(*(void *)&buf[8] + 40LL);
    if (v70)
    {
      os_release(v70);
      uint64_t v69 = *(_BYTE *)(v68 + 48);
    }
  }

  *(void *)(v68 + 40) = 0LL;
  *(_BYTE *)(v68 + 48) = v69 | 1;
  os_log_type_t v71 = v166[3];
  if (v71)
  {
    if (*(_UNKNOWN **)(v71 + 40) == &nw_protocol_ref_counted_handle)
    {
      __int16 v72 = *(void *)(v71 + 88);
      if (v72)
      {
        uint64_t v73 = v72 - 1;
        *(void *)(v71 + 88) = v73;
        if (!v73)
        {
          __int16 v74 = *(void (***)(void))(v71 + 64);
          if (v74)
          {
            *(void *)(v71 + 64) = 0LL;
            v74[2](v74);
            _Block_release(v74);
          }

          if ((*(_BYTE *)(v71 + 72) & 1) != 0)
          {
            os_log_type_t v75 = *(const void **)(v71 + 64);
            if (v75) {
              _Block_release(v75);
            }
          }

          free((void *)v71);
        }
      }
    }
  }

    free(v68);
    goto LABEL_138;
  }

  *uint64_t v19 = 11;
  *(_DWORD *)(v19 + 1) = v67;
  if (v66 != -1) {
    memcpy(v19 + 5, v11, v67);
  }
  v19 += v67 + 5;
LABEL_139:
  if (!v14) {
    goto LABEL_165;
  }
  __int128 v79 = strlen(v14);
  if (!v19)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v179 = "nw_necp_append_tlv";
    BOOL v128 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v176 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v129 = (os_log_s *)__nwlog_obj();
      __int16 v130 = type;
      if (!os_log_type_enabled(v129, type)) {
        goto LABEL_316;
      }
      *(_DWORD *)buf = 136446210;
      v179 = "nw_necp_append_tlv";
      v131 = "%{public}s called with null tlv_start";
    }

    else if (v176)
    {
      v146 = (char *)__nw_create_backtrace_string();
      v129 = (os_log_s *)__nwlog_obj();
      __int16 v130 = type;
      v147 = os_log_type_enabled(v129, type);
      if (v146)
      {
        if (v147)
        {
          *(_DWORD *)buf = 136446466;
          v179 = "nw_necp_append_tlv";
          v180 = 2082;
          *(void *)v181 = v146;
          _os_log_impl( &dword_181A5C000,  v129,  v130,  "%{public}s called with null tlv_start, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v146);
        os_log_type_t v15 = v172;
LABEL_316:
        if (v128) {
          free(v128);
        }
        uint64_t v19 = 0LL;
        uint64_t v18 = v174;
        id v36 = v175;
        if ((v173 & 1) != 0) {
          goto LABEL_186;
        }
        goto LABEL_166;
      }

      os_log_type_t v15 = v172;
      if (!v147) {
        goto LABEL_316;
      }
      *(_DWORD *)buf = 136446210;
      v179 = "nw_necp_append_tlv";
      v131 = "%{public}s called with null tlv_start, no backtrace";
    }

    else
    {
      v129 = (os_log_s *)__nwlog_obj();
      __int16 v130 = type;
      os_log_type_t v15 = v172;
      if (!os_log_type_enabled(v129, type)) {
        goto LABEL_316;
      }
      *(_DWORD *)buf = 136446210;
      v179 = "nw_necp_append_tlv";
      v131 = "%{public}s called with null tlv_start, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v129, v130, v131, buf, 0xCu);
    goto LABEL_316;
  }

  BOOL v80 = (v79 + 1);
  if (v19 >= v36)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136447234;
    v179 = "nw_necp_append_tlv";
    v180 = 2048;
    *(void *)v181 = v19;
    *(_WORD *)&v181[8] = 2048;
    *(void *)v182 = v36;
    *(_WORD *)&v182[8] = 1024;
    *(_DWORD *)&v182[10] = 13;
    *(_WORD *)&v182[14] = 1024;
    *(_DWORD *)&v182[16] = v80;
    uint64_t v81 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v176 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v132 = (os_log_s *)__nwlog_obj();
      v133 = type;
      if (!os_log_type_enabled(v132, type)) {
        goto LABEL_162;
      }
      *(_DWORD *)buf = 136447234;
      v179 = "nw_necp_append_tlv";
      v180 = 2048;
      *(void *)v181 = v19;
      *(_WORD *)&v181[8] = 2048;
      *(void *)v182 = v175;
      *(_WORD *)&v182[8] = 1024;
      *(_DWORD *)&v182[10] = 13;
      *(_WORD *)&v182[14] = 1024;
      *(_DWORD *)&v182[16] = v80;
      int v84 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u";
    }

    else
    {
      if (v176)
      {
        v148 = (char *)__nw_create_backtrace_string();
        os_log_type_t v149 = (os_log_s *)__nwlog_obj();
        char v150 = type;
        os_log_type_t v151 = os_log_type_enabled(v149, type);
        if (v148)
        {
          if (v151)
          {
            *(_DWORD *)buf = 136447490;
            v179 = "nw_necp_append_tlv";
            v180 = 2048;
            *(void *)v181 = v19;
            *(_WORD *)&v181[8] = 2048;
            *(void *)v182 = v175;
            *(_WORD *)&v182[8] = 1024;
            *(_DWORD *)&v182[10] = 13;
            *(_WORD *)&v182[14] = 1024;
            *(_DWORD *)&v182[16] = v80;
            *(_WORD *)&v182[20] = 2082;
            *(void *)&v182[22] = v148;
            _os_log_impl( &dword_181A5C000,  v149,  v150,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s",  buf,  0x36u);
          }

          free(v148);
          goto LABEL_162;
        }

        if (!v151) {
          goto LABEL_162;
        }
        *(_DWORD *)buf = 136447234;
        v179 = "nw_necp_append_tlv";
        v180 = 2048;
        *(void *)v181 = v19;
        *(_WORD *)&v181[8] = 2048;
        *(void *)v182 = v175;
        *(_WORD *)&v182[8] = 1024;
        *(_DWORD *)&v182[10] = 13;
        *(_WORD *)&v182[14] = 1024;
        *(_DWORD *)&v182[16] = v80;
        int v84 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace";
        os_log_type_t v89 = v149;
        uint64_t v90 = v150;
LABEL_291:
        os_log_type_t v91 = 44;
        goto LABEL_161;
      }

      __int16 v132 = (os_log_s *)__nwlog_obj();
      v133 = type;
      if (!os_log_type_enabled(v132, type)) {
        goto LABEL_162;
      }
      *(_DWORD *)buf = 136447234;
      v179 = "nw_necp_append_tlv";
      v180 = 2048;
      *(void *)v181 = v19;
      *(_WORD *)&v181[8] = 2048;
      *(void *)v182 = v175;
      *(_WORD *)&v182[8] = 1024;
      *(_DWORD *)&v182[10] = 13;
      *(_WORD *)&v182[14] = 1024;
      *(_DWORD *)&v182[16] = v80;
      int v84 = "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded";
    }

    os_log_type_t v89 = v132;
    uint64_t v90 = v133;
    goto LABEL_291;
  }

  if (v36 - v19 < v80 + 5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136447490;
    v179 = "nw_necp_append_tlv";
    v180 = 2048;
    *(void *)v181 = v19;
    *(_WORD *)&v181[8] = 2048;
    *(void *)v182 = v80 + 5;
    *(_WORD *)&v182[8] = 2048;
    *(void *)&v182[10] = v36;
    *(_WORD *)&v182[18] = 1024;
    *(_DWORD *)&v182[20] = 13;
    *(_WORD *)&v182[24] = 1024;
    *(_DWORD *)&v182[26] = v80;
    uint64_t v81 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v176 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v82 = gLogObj;
      os_log_type_t v83 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_162;
      }
      *(_DWORD *)buf = 136447490;
      v179 = "nw_necp_append_tlv";
      v180 = 2048;
      *(void *)v181 = v19;
      *(_WORD *)&v181[8] = 2048;
      *(void *)v182 = v80 + 5;
      *(_WORD *)&v182[8] = 2048;
      *(void *)&v182[10] = v175;
      *(_WORD *)&v182[18] = 1024;
      *(_DWORD *)&v182[20] = 13;
      *(_WORD *)&v182[24] = 1024;
      *(_DWORD *)&v182[26] = v80;
      int v84 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u";
LABEL_159:
      os_log_type_t v89 = (os_log_s *)v82;
      uint64_t v90 = v83;
LABEL_160:
      os_log_type_t v91 = 54;
LABEL_161:
      _os_log_impl(&dword_181A5C000, v89, v90, v84, buf, v91);
      goto LABEL_162;
    }

    if (!v176)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v82 = gLogObj;
      os_log_type_t v83 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_162;
      }
      *(_DWORD *)buf = 136447490;
      v179 = "nw_necp_append_tlv";
      v180 = 2048;
      *(void *)v181 = v19;
      *(_WORD *)&v181[8] = 2048;
      *(void *)v182 = v80 + 5;
      *(_WORD *)&v182[8] = 2048;
      *(void *)&v182[10] = v175;
      *(_WORD *)&v182[18] = 1024;
      *(_DWORD *)&v182[20] = 13;
      *(_WORD *)&v182[24] = 1024;
      *(_DWORD *)&v182[26] = v80;
      int v84 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded";
      goto LABEL_159;
    }

    os_log_type_t v85 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v86 = (os_log_s *)gLogObj;
    unint64_t v87 = type;
    uint64_t v88 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (v85)
    {
      if (v88)
      {
        *(_DWORD *)buf = 136447746;
        v179 = "nw_necp_append_tlv";
        v180 = 2048;
        *(void *)v181 = v19;
        *(_WORD *)&v181[8] = 2048;
        *(void *)v182 = v80 + 5;
        *(_WORD *)&v182[8] = 2048;
        *(void *)&v182[10] = v175;
        *(_WORD *)&v182[18] = 1024;
        *(_DWORD *)&v182[20] = 13;
        *(_WORD *)&v182[24] = 1024;
        *(_DWORD *)&v182[26] = v80;
        *(_WORD *)&v182[30] = 2082;
        *(void *)&v182[32] = v85;
        _os_log_impl( &dword_181A5C000,  v86,  v87,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s",  buf,  0x40u);
      }

      free(v85);
      if (!v81) {
        goto LABEL_164;
      }
      goto LABEL_163;
    }

    if (v88)
    {
      *(_DWORD *)buf = 136447490;
      v179 = "nw_necp_append_tlv";
      v180 = 2048;
      *(void *)v181 = v19;
      *(_WORD *)&v181[8] = 2048;
      *(void *)v182 = v80 + 5;
      *(_WORD *)&v182[8] = 2048;
      *(void *)&v182[10] = v175;
      *(_WORD *)&v182[18] = 1024;
      *(_DWORD *)&v182[20] = 13;
      *(_WORD *)&v182[24] = 1024;
      *(_DWORD *)&v182[26] = v80;
      int v84 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace";
      os_log_type_t v89 = v86;
      uint64_t v90 = v87;
      goto LABEL_160;
    }

      if (v20) {
        free(v20);
      }
      return 0LL;
    }

    if (!v43)
    {
      int v21 = (os_log_s *)__nwlog_obj();
      uint64_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v46 = "nw_http_encrypt_standalone_aead_chunk";
        __int16 v23 = "%{public}s called with null (aead_nonce_length == cchpke_params_sizeof_aead_nonce(params)), backtrace limit exceeded";
        goto LABEL_136;
      }

      goto LABEL_137;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v21 = (os_log_s *)__nwlog_obj();
    uint64_t v22 = type;
    uint64_t v39 = os_log_type_enabled(v21, type);
    if (!backtrace_string)
    {
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v46 = "nw_http_encrypt_standalone_aead_chunk";
        __int16 v23 = "%{public}s called with null (aead_nonce_length == cchpke_params_sizeof_aead_nonce(params)), no backtrace";
        goto LABEL_136;
      }

      goto LABEL_137;
    }

    if (v39)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v46 = "nw_http_encrypt_standalone_aead_chunk";
      BOOL v47 = 2082;
      uint64_t v48 = (uint64_t)backtrace_string;
      uint64_t v31 = "%{public}s called with null (aead_nonce_length == cchpke_params_sizeof_aead_nonce(params)), dumping backtrace:%{public}s";
      goto LABEL_98;
    }

        if (v74)
        {
          uint64_t v88 = (char *)v74;
          goto LABEL_139;
        }

      goto LABEL_155;
    }

    if (!v102)
    {
      __nwlog_obj();
      os_log_type_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      int v84 = type;
      if (os_log_type_enabled(v62, type))
      {
        *(_DWORD *)buf = 136446210;
        v105 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl( &dword_181A5C000,  v62,  v84,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_137;
    }

    __int16 v74 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v67 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    __int128 v79 = type;
    BOOL v80 = os_log_type_enabled(v67, type);
    if (v74)
    {
      if (v80)
      {
        *(_DWORD *)buf = 136446466;
        v105 = "nw_endpoint_flow_find_protocol_to_join";
        v106 = 2082;
        char v107 = v74;
        _os_log_impl( &dword_181A5C000,  v67,  v79,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_121;
    }

    if (v80)
    {
      *(_DWORD *)buf = 136446210;
      v105 = "nw_endpoint_flow_find_protocol_to_join";
      _os_log_impl(&dword_181A5C000, v67, v79, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
    }

    goto LABEL_154;
  }

  os_unfair_lock_lock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  uint64_t v28 = &g_registration_list;
  do
  {
    uint64_t v28 = (uint64_t *)*v28;
    if (!v28)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
      goto LABEL_38;
    }
  }

  while (*(void *)identifier != v28[4]
       || *((void *)identifier + 1) != v28[5]
       || *((void *)identifier + 2) != v28[6]
       || *((void *)identifier + 3) != v28[7]
       || *((void *)identifier + 4) != v28[8]);
  int v33 = v28[13];
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  if (!v33)
  {
LABEL_38:
    if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v26) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v39 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(v26);
        os_log_type_t v95 = nw_endpoint_handler_dry_run_string(v26);
        BOOL v41 = nw_endpoint_handler_copy_endpoint(v26);
        logging_description = nw_endpoint_get_logging_description(v41);
        os_log_type_t v43 = nw_endpoint_handler_state_string(v26);
        uint64_t v44 = nw_endpoint_handler_mode_string(v26);
        os_log_type_t v45 = nw_endpoint_handler_copy_current_path(v26);
        *(_DWORD *)buf = 136448258;
        v105 = "nw_endpoint_flow_find_protocol_to_join";
        v106 = 2082;
        char v107 = (void *)id_string;
        v108 = 2082;
        os_log_type_t v109 = v95;
        __int16 v110 = 2082;
        uint64_t v111 = (void *)logging_description;
        uint64_t v112 = 2082;
        uint64_t v113 = v43;
        uint64_t v114 = 2082;
        os_log_type_t v115 = v44;
        uint64_t v116 = 2114;
        v117 = v45;
        v118 = 2080;
        __int128 v119 = identifier;
        __int128 v120 = 2048;
        os_log_type_t v121 = (uint64_t)identifier;
        _os_log_impl( &dword_181A5C000,  v39,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] protocol %s (%p) does not hav e accept function, cannot search for protocol to join",  buf,  0x5Cu);
      }
    }

    goto LABEL_80;
  }

  os_log_type_t v34 = v24;
  __int16 v35 = v34;
  while (1)
  {
    registered_endpoint = nw_protocol_instance_registrar_search_for_instance_to_join( (uint64_t)identifier,  a2,  v101,  v35,  v34,  v25,  v19 != 0);
    registered_endpoint = (uint64_t)nw_protocol_instance_registrar_copy_next_registered_endpoint(v35, v19 != 0);

    __int16 v35 = (void *)registered_endpoint;
  }

  if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v26) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    os_log_type_t v85 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
    {
      BOOL v86 = nw_endpoint_handler_get_id_string(v26);
      unint64_t v87 = nw_endpoint_handler_dry_run_string(v26);
      uint64_t v88 = nw_endpoint_handler_copy_endpoint(v26);
      BOOL v96 = nw_endpoint_get_logging_description(v88);
      uint64_t v94 = nw_endpoint_handler_state_string(v26);
      os_log_type_t v89 = nw_endpoint_handler_mode_string(v26);
      uint64_t v90 = nw_endpoint_handler_copy_current_path(v26);
      os_log_type_t v91 = v90;
      v105 = "nw_endpoint_flow_find_protocol_to_join";
      BOOL v92 = "invalid";
      v93 = *(const char **)(registered_endpoint + 16);
      *(_DWORD *)buf = 136448258;
      if (v93) {
        BOOL v92 = v93;
      }
      v106 = 2082;
      char v107 = (void *)v86;
      v108 = 2082;
      os_log_type_t v109 = v87;
      __int16 v110 = 2082;
      uint64_t v111 = (void *)v96;
      uint64_t v112 = 2082;
      uint64_t v113 = v94;
      uint64_t v114 = 2082;
      os_log_type_t v115 = v89;
      uint64_t v116 = 2114;
      v117 = v90;
      v118 = 2080;
      __int128 v119 = (void *)v92;
      __int128 v120 = 2048;
      os_log_type_t v121 = registered_endpoint;
      _os_log_impl( &dword_181A5C000,  v85,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] returning protocol to join %s (%p)",  buf,  0x5Cu);
    }
  }

      os_log_type_t v78 = v21[13];
      if (!v78 || (v79 = v21[14] + v21[15], BOOL v80 = v78 - v79, v78 == v79))
      {
        if (v70) {
          uint64_t v81 = v63;
        }
        else {
          uint64_t v81 = 1;
        }
        if ((v81 & 1) != 0 || v211[3] == v165)
        {
          if ((*(__int16 *)(a6 + 388) & 0x80000000) == 0 && gLogDatapath)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            v147 = (os_log_s *)gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
            {
              v148 = *(_DWORD *)(a6 + 368);
              os_log_type_t v149 = *((_DWORD *)v221 + 6);
              buf = 136447490;
              v231 = "send_data_callback";
              v232 = 2082;
              v233 = a6 + 390;
              v234 = 2080;
              v235 = " ";
              v236 = 1024;
              v237 = v148;
              v238 = 2048;
              *(void *)v239 = v21;
              *(_WORD *)&v239[8] = 1024;
              v240 = v149;
              _os_log_impl( &dword_181A5C000,  v147,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> finished writing complete frame %p, final length %u",  (uint8_t *)&buf,  0x36u);
            }
          }

          http2_output_frame_metadata_reset((uint64_t)v21, 0LL, 0LL);
          nw_frame_cache_return_frame(a6 + 200, (uint64_t)v21);
          *a5 = 0LL;
          goto LABEL_150;
        }

        BOOL v80 = 0;
      }

      if ((*(__int16 *)(a6 + 388) & 0x80000000) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        __int16 v134 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          BOOL v135 = *(_DWORD *)(a6 + 368);
          uint64_t v136 = *((_DWORD *)v221 + 6);
          buf = 136447490;
          v231 = "send_data_callback";
          v232 = 2082;
          v233 = a6 + 390;
          v234 = 2080;
          v235 = " ";
          v236 = 1024;
          v237 = v135;
          v238 = 1024;
          *(_DWORD *)v239 = v136;
          *(_WORD *)&v239[4] = 1024;
          *(_DWORD *)&v239[6] = v80;
          _os_log_impl( &dword_181A5C000,  v134,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> wrote partial frame, %u bytes, %u remaining",  (uint8_t *)&buf,  0x32u);
        }
      }

            _os_log_impl(&dword_181A5C000, v107, v108, v109, buf, 0x2Au);
            goto LABEL_138;
          }

          BOOL v86 = (nw_protocol *)*p_output_handler;
          if ((*p_output_handler & 0x40) == 0) {
            goto LABEL_162;
          }
          goto LABEL_138;
        }

        if (!v39->get_output_frames)
        {
          os_log_type_t v37 = &v315;
          goto LABEL_62;
        }

        uint64_t v40 = v36;
        BOOL v41 = output_handler->handle;
        if (v41 == &nw_protocol_ref_counted_handle)
        {
          uint64_t v42 = output_handler[1].callbacks;
          if (v42) {
            output_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v42->add_input_handler + 1);
          }
        }

        os_log_type_t v43 = a1->handle;
        if (v43 == &nw_protocol_ref_counted_handle)
        {
          uint64_t v44 = a1[1].callbacks;
          if (v44) {
            a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v44->add_input_handler + 1);
          }
        }

        if (v32)
        {
          os_log_type_t v45 = (uint64_t (*)(void))v39->get_input_frames;
          if (v45)
          {
            uint64_t v46 = v45();
LABEL_56:
            if (v43 == &nw_protocol_ref_counted_handle && a1->handle == &nw_protocol_ref_counted_handle)
            {
              uint64_t v64 = a1[1].callbacks;
              if (v64)
              {
                BOOL v65 = (nw_protocol_callbacks *)((char *)v64 - 1);
                a1[1].callbacks = v65;
                if (!v65)
                {
                  char v66 = *(void (***)(void))a1[1].flow_id;
                  if (v66)
                  {
                    *(void *)a1[1].flow_id = 0LL;
                    v66[2](v66);
                    _Block_release(v66);
                  }

                  if ((a1[1].flow_id[8] & 1) != 0)
                  {
                    uint64_t v67 = *(const void **)a1[1].flow_id;
                    if (v67) {
                      _Block_release(v67);
                    }
                  }

                  free(a1);
                }
              }
            }

            BOOL v47 = v281;
            if (v41 == &nw_protocol_ref_counted_handle)
            {
              if (v281)
              {
                if (v281->handle == &nw_protocol_ref_counted_handle)
                {
                  os_log_type_t v60 = v281[1].callbacks;
                  if (v60)
                  {
                    uint32_t v61 = (nw_protocol_callbacks *)((char *)v60 - 1);
                    v281[1].callbacks = v61;
                    if (!v61)
                    {
                      os_log_type_t v62 = *(void (***)(void))v281[1].flow_id;
                      if (v62)
                      {
                        *(void *)v281[1].flow_id = 0LL;
                        v62[2](v62);
                        _Block_release(v62);
                        BOOL v47 = v281;
                      }

                      if ((v47[1].flow_id[8] & 1) != 0)
                      {
                        uint64_t v63 = *(const void **)v47[1].flow_id;
                        if (v63)
                        {
                          _Block_release(v63);
                          BOOL v47 = v281;
                        }
                      }

                      free(v47);
                    }
                  }
                }
              }
            }

            os_log_type_t v37 = v316;
            *((_DWORD *)v316 + 6) = v46;
            id v36 = v40;
            goto LABEL_62;
          }

          v162 = output_handler;
          __nwlog_obj();
          v163 = v162->identifier->name;
          *(_DWORD *)v323 = 136446722;
          *(void *)&v323[4] = "__nw_protocol_get_input_frames";
          if (!v163) {
            v163 = "invalid";
          }
          *(_WORD *)&v323[12] = 2082;
          *(void *)&v323[14] = v163;
          *(_WORD *)&v323[22] = 2048;
          *(void *)v324 = v162;
          v164 = (const char *)_os_log_send_and_compose_impl();
          v330[0] = 16;
          v321[0] = OS_LOG_TYPE_DEFAULT;
          v277 = (char *)v164;
          if (v330[0] == 17)
          {
            v165 = (os_log_s *)__nwlog_obj();
            v166 = v330[0];
            os_log_type_t loga = v165;
            if (os_log_type_enabled(v165, (os_log_type_t)v330[0]))
            {
              v167 = v281->identifier->name;
              if (!v167) {
                v167 = "invalid";
              }
              *(_DWORD *)v323 = 136446722;
              *(void *)&v323[4] = "__nw_protocol_get_input_frames";
              *(_WORD *)&v323[12] = 2082;
              *(void *)&v323[14] = v167;
              *(_WORD *)&v323[22] = 2048;
              *(void *)v324 = v281;
              v161 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback";
LABEL_343:
              v217 = loga;
              v218 = v166;
LABEL_344:
              v219 = 32;
              goto LABEL_345;
            }

            goto LABEL_346;
          }

          if (v321[0] == OS_LOG_TYPE_DEFAULT)
          {
            v220 = (os_log_s *)__nwlog_obj();
            v166 = v330[0];
            os_log_type_t loga = v220;
            if (os_log_type_enabled(v220, (os_log_type_t)v330[0]))
            {
              v221 = v281->identifier->name;
              if (!v221) {
                v221 = "invalid";
              }
              *(_DWORD *)v323 = 136446722;
              *(void *)&v323[4] = "__nw_protocol_get_input_frames";
              *(_WORD *)&v323[12] = 2082;
              *(void *)&v323[14] = v221;
              *(_WORD *)&v323[22] = 2048;
              *(void *)v324 = v281;
              v161 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, backtrace limit exceeded";
              goto LABEL_343;
            }

LABEL_115:
  if (v30) {
    free(v30);
  }
  return 0LL;
}

        if (v42) {
          free(v42);
        }
        goto LABEL_18;
      }

      __nwlog_obj();
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      BOOL v59 = "nw_context_cancel";
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      uint64_t v55 = 0;
      if (__nwlog_fault(v9, &type, &v55))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          size_t v25 = type;
          if (os_log_type_enabled(v10, type))
          {
            *(_DWORD *)buf = 136446210;
            BOOL v59 = "nw_context_cancel";
            _os_log_impl( &dword_181A5C000,  v10,  v25,  "%{public}s called with null globals_context->is_inline",  buf,  0xCu);
          }

  if (v55) {
    free(v55);
  }
  uint64_t v2 = 0LL;
LABEL_98:

  return v2;
}

      if (v11) {
LABEL_116:
      }
        free(v11);
LABEL_117:

      return;
    }

    uint64_t v17 = *((void *)v6 - 6);
    if (!v17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v23 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v109 = "nw_protocol_implementation_input_finished";
      unint64_t v11 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v104) = 0;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v12 = (os_log_s *)(id)gLogObj;
        uint64_t v24 = type[0];
        if (os_log_type_enabled(v12, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v109 = "nw_protocol_implementation_input_finished";
          _os_log_impl( &dword_181A5C000,  v12,  v24,  "%{public}s called with null nw_protocol_get_input_handler(&instance->protocol)",  buf,  0xCu);
        }

        goto LABEL_114;
      }

      if (!(_BYTE)v104)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v12 = (os_log_s *)(id)gLogObj;
        uint64_t v44 = type[0];
        if (os_log_type_enabled(v12, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v109 = "nw_protocol_implementation_input_finished";
          _os_log_impl( &dword_181A5C000,  v12,  v44,  "%{public}s called with null nw_protocol_get_input_handler(&instance->protocol), backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_114;
      }

      id v36 = __nw_create_backtrace_string();
      if (!v36)
      {
        __nwlog_obj();
        uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v49 = type[0];
        if (os_log_type_enabled(v12, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v109 = "nw_protocol_implementation_input_finished";
          _os_log_impl( &dword_181A5C000,  v12,  v49,  "%{public}s called with null nw_protocol_get_input_handler(&instance->protocol), no backtrace",  buf,  0xCu);
        }

        goto LABEL_114;
      }

      uint64_t v31 = (char *)v36;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v32 = (os_log_s *)(id)gLogObj;
      os_log_type_t v37 = type[0];
      if (os_log_type_enabled(v32, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v109 = "nw_protocol_implementation_input_finished";
        __int16 v110 = 2082;
        uint64_t v111 = v31;
        _os_log_impl( &dword_181A5C000,  v32,  v37,  "%{public}s called with null nw_protocol_get_input_handler(&instance->protocol), dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_83;
    }

    if (gLogDatapath)
    {
      __nwlog_obj();
      int v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v109 = "nw_protocol_implementation_input_finished";
        _os_log_impl( &dword_181A5C000,  v84,  OS_LOG_TYPE_DEBUG,  "%{public}s Passing through input finished to default input handler",  buf,  0xCu);
      }

      uint64_t v17 = *((void *)v6 - 6);
      if (!v17)
      {
        __nwlog_obj();
        os_log_type_t v85 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        os_log_type_t v109 = "__nw_protocol_input_finished";
        unint64_t v11 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v104) = 0;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v86 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v109 = "__nw_protocol_input_finished";
            _os_log_impl(&dword_181A5C000, v12, v86, "%{public}s called with null protocol", buf, 0xCu);
          }

          goto LABEL_114;
        }

        if (!(_BYTE)v104)
        {
          __nwlog_obj();
          uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v101 = type[0];
          if (os_log_type_enabled(v12, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v109 = "__nw_protocol_input_finished";
            _os_log_impl( &dword_181A5C000,  v12,  v101,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_114;
        }

        os_log_type_t v71 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v96 = type[0];
        v97 = os_log_type_enabled(v12, type[0]);
        if (!v71)
        {
          if (v97)
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v109 = "__nw_protocol_input_finished";
            _os_log_impl(&dword_181A5C000, v12, v96, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
          }

          goto LABEL_114;
        }

        if (v97)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v109 = "__nw_protocol_input_finished";
          __int16 v110 = 2082;
          uint64_t v111 = v71;
          _os_log_impl( &dword_181A5C000,  v12,  v96,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        os_release(v58);
        goto LABEL_116;
      }

      os_log_type_t v60 = v58;
      uint32_t v61 = [v60 hostname];

      os_log_type_t v62 = 0LL;
    }

    uint64_t v76 = v58;
    *(void *)buf = 0LL;
    asprintf((char **)buf, "%d", __rev16([v76 port]));
    uint64_t v77 = *(void **)buf;

    if (v77)
    {
      os_log_type_t v78 = "";
      if (v62) {
        os_log_type_t v78 = v62;
      }
      if (v61) {
        os_log_type_t v78 = (const char *)v61;
      }
      __int128 v79 = (const __CFAllocator *)*MEMORY[0x189604DB0];
      BOOL v80 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, @"http://%s:%s", v78, v77);
      if (v80)
      {
        v117 = v79;
        uint64_t v81 = CFURLCreateWithString(v79, v80, 0LL);
        uint64_t v82 = *(_BYTE *)(v50 + 904);
        if ((v82 & 1) != 0)
        {
          os_log_type_t v83 = *(const void **)(v50 + 896);
          if (v83)
          {
            CFRelease(v83);
            uint64_t v82 = *(_BYTE *)(v50 + 904);
          }
        }

        *(void *)(v50 + 896) = v81;
        *(_BYTE *)(v50 + 904) = v82 | 1;
        if (v81)
        {
          _CFHTTPMessageSetResponseProxyURL();
          *(void *)buf = nw_endpoint_create_with_cfurl(*(const __CFURL **)(v50 + 896));
          nw::retained_ptr<nw_endpoint *>::operator=(v50 + 800, buf);
          int v84 = 1;
        }

        else
        {
          int v84 = 0;
        }

        __int128 v79 = v117;
      }

      else
      {
        int v84 = 0;
      }

      if (v62) {
        free(v62);
      }
      free(v77);
      if (v80) {
        CFRelease(v80);
      }
      os_release(v76);
      os_release(v56);
      a6 = v119;
      if ((v84 & 1) == 0)
      {
LABEL_117:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v88 = (os_log_s *)gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_handle_challenge";
          _os_log_impl(&dword_181A5C000, v88, OS_LOG_TYPE_ERROR, "%{public}s Unable to set proxy URL", buf, 0xCu);
        }

        goto LABEL_119;
      }

      v93 = CFHTTPAuthenticationCreateFromResponse(v79, *(CFHTTPMessageRef *)(v7 + 928));
      uint64_t v94 = *(_BYTE *)(v7 + 872);
      if ((v94 & 1) != 0)
      {
        BOOL v96 = *(void **)(v7 + 864);
        os_log_type_t v95 = v118;
        if (v96)
        {
          os_release(v96);
          uint64_t v94 = *(_BYTE *)(v7 + 872);
        }
      }

      else
      {
        os_log_type_t v95 = v118;
      }

      *(void *)(v7 + 864) = v93;
      *(_BYTE *)(v7 + 872) = v94 | 1;
      int v33 = *(void **)(v7 + 800);
      os_log_type_t v34 = v93;
      __int16 v35 = v95;
      id v36 = 1;
      os_log_type_t v37 = 1;
      goto LABEL_34;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v87 = (os_log_s *)gLogObj;
    a6 = v119;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_authentication_set_proxy_url";
      _os_log_impl(&dword_181A5C000, v87, OS_LOG_TYPE_ERROR, "%{public}s Cannot connect without port", buf, 0xCu);
    }

    if (v62) {
      free(v62);
    }
    goto LABEL_115;
  }

  _CFHTTPAuthenticationCanRecoverFromKerberosFailure();
  uint64_t v30 = _CFHTTPAuthenticationCreateFromResponseWithFlags();
  uint64_t v31 = *(_BYTE *)(v7 + 856);
  if ((v31 & 1) != 0)
  {
    os_log_type_t v32 = *(void **)(v7 + 848);
    if (v32)
    {
      os_release(v32);
      uint64_t v31 = *(_BYTE *)(v7 + 856);
    }
  }

  *(void *)(v7 + 848) = v30;
  *(_BYTE *)(v7 + 856) = v31 | 1;
  int v33 = *(void **)(v7 + 784);
  os_log_type_t v34 = (_CFHTTPAuthentication *)v30;
  __int16 v35 = a5;
  id v36 = 0;
  os_log_type_t v37 = 0;
LABEL_34:
  os_log_type_t v38 = nw_http_authentication_parse_schemes(v34, v33, v35, v36, v37);
  uint64_t v39 = (void *)v38;
  if (v38 && *(void *)(v38 + 24) != *(void *)(v38 + 16))
  {
    object_at_index = (void *)nw_array_get_object_at_index(v38, 0LL);
    BOOL v41 = nw_authentication_protection_space_get_type(object_at_index);
    uint64_t v42 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_authentication_challenge);
    os_log_type_t v43 = *(_BYTE *)(v7 + 648);
    if ((v43 & 1) != 0)
    {
      uint64_t v44 = *(void **)(v7 + 640);
      if (v44)
      {
        os_release(v44);
        os_log_type_t v43 = *(_BYTE *)(v7 + 648);
      }
    }

    *(void *)(v7 + 640) = v42;
    *(_BYTE *)(v7 + 648) = v43 | 1;
    nw_authentication_challenge_set_protection_space_array(v42, v39);
    nw_authentication_challenge_set_http_message(*(void **)(v7 + 640), *(const void **)(v7 + 928));
    if (a3 && (os_log_type_t v45 = a3, v46 = v45[2], v45, v46) && (*(_WORD *)(v7 + 1062) & 0x200) == 0)
    {
      nw_authentication_challenge_set_proposed_credential(*(void **)(v7 + 640), v45);
      if ((*(_WORD *)(v7 + 1062) & 0x10) == 0)
      {
        BOOL v47 = *(_BYTE *)(v7 + 664);
        if ((v47 & 1) != 0)
        {
          uint64_t v48 = *(void **)(v7 + 656);
          if (v48)
          {
            os_release(v48);
            BOOL v47 = *(_BYTE *)(v7 + 664);
          }
        }

        *(void *)(v7 + 656) = 0LL;
        *(_BYTE *)(v7 + 664) = v47 | 1;
        os_log_type_t v49 = *(_WORD *)(v7 + 1062);
        if ((v49 & 0x10) != 0) {
          goto LABEL_124;
        }
LABEL_75:
        if (v41 == 8)
        {
          os_log_type_t v75 = nw_http_authentication_ask_pat_for_creds(a1, a6);
LABEL_135:
          uint64_t v19 = v75;
          goto LABEL_136;
        }

        if (v41 != 4)
        {
LABEL_134:
          os_log_type_t v75 = nw_http_authentication_send_challenge(a1, a6);
          goto LABEL_135;
        }

        if (!_CFHTTPAuthenticationFailedToGetKerberosTicket())
        {
          if (!*(_DWORD *)(v7 + 1052))
          {
            *(_DWORD *)(v7 + 1052) = 1;
            if ((*(_WORD *)(v7 + 1062) & 0x10) != 0)
            {
              *(_DWORD *)(v7 + 1048) = 4;
              v97 = *(_CFHTTPAuthentication **)(v7 + 864);
              BOOL v98 = a1;
              os_log_type_t v99 = 1;
            }

            else
            {
              *(_DWORD *)(v7 + 1044) = 4;
              v97 = *(_CFHTTPAuthentication **)(v7 + 848);
              BOOL v98 = a1;
              os_log_type_t v99 = 0;
            }

            if (nw_http_authentication_apply_authorization(v98, v97, 0LL, 4, 0, v99, 0, a6))
            {
              nw_protocol_plugin_retry_begin_async(v7 + 344);
              os_log_type_t v100 = *(void **)(v7 + 832);
              v120[0] = MEMORY[0x1895F87A8];
              v120[1] = 0x40000000LL;
              v120[2] = ___ZL39nw_http_authentication_handle_challengeP11nw_protocolP21_CFHTTPAuthenticationP28nw_authentication_credential24nw_authentication_type_tbU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke_34;
              v120[3] = &unk_189BB7AF8;
              v120[4] = a6;
              v120[5] = v7;
              nw_queue_context_async(v100, v120);
              uint64_t v19 = 2LL;
            }

            else
            {
              uint64_t v19 = 1LL;
              (*(void (**)(uint64_t, void, uint64_t, void))(a6 + 16))(a6, 0LL, 1LL, 0LL);
            }

            goto LABEL_136;
          }

          goto LABEL_134;
        }

        __int16 v72 = *(void *)(a1 + 40);
        if (v72)
        {
          nw_protocol_plugin_retry_begin_async(v72 + 344);
          *(void *)buf = MEMORY[0x1895F87A8];
          *(void *)&buf[8] = 0x40000000LL;
          *(void *)&buf[16] = ___ZL45nw_http_authentication_ask_accounts_for_credsP11nw_protocolU13block_pointerFvP20nw_protocol_metadatabbE_block_invoke;
          char v126 = &unk_189BB7BF8;
          os_log_type_t v127 = a6;
          BOOL v128 = v72;
          v129 = a1;
          _CFHTTPAuthenticationAskAccountsForCreds();
          uint64_t v19 = 2LL;
LABEL_136:
          os_release(v39);
          return v19;
        }

        __nwlog_obj();
        *(_DWORD *)__int16 v130 = 136446210;
        v131 = "nw_http_authentication_ask_accounts_for_creds";
        uint64_t v111 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        uint64_t v123 = 0;
        if (__nwlog_fault(v111, &type, &v123))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            uint64_t v112 = (os_log_s *)__nwlog_obj();
            uint64_t v113 = type;
            if (os_log_type_enabled(v112, type))
            {
              *(_DWORD *)__int16 v130 = 136446210;
              v131 = "nw_http_authentication_ask_accounts_for_creds";
              uint64_t v114 = "%{public}s called with null http_authentication";
LABEL_212:
              _os_log_impl(&dword_181A5C000, v112, v113, v114, v130, 0xCu);
            }
          }

          else if (v123)
          {
            os_log_type_t v115 = (char *)__nw_create_backtrace_string();
            uint64_t v112 = (os_log_s *)__nwlog_obj();
            uint64_t v113 = type;
            uint64_t v116 = os_log_type_enabled(v112, type);
            if (v115)
            {
              if (v116)
              {
                *(_DWORD *)__int16 v130 = 136446466;
                v131 = "nw_http_authentication_ask_accounts_for_creds";
                __int16 v132 = 2082;
                v133 = v115;
                _os_log_impl( &dword_181A5C000,  v112,  v113,  "%{public}s called with null http_authentication, dumping backtrace:%{public}s",  v130,  0x16u);
              }

              free(v115);
              goto LABEL_213;
            }

            if (v116)
            {
              *(_DWORD *)__int16 v130 = 136446210;
              v131 = "nw_http_authentication_ask_accounts_for_creds";
              uint64_t v114 = "%{public}s called with null http_authentication, no backtrace";
              goto LABEL_212;
            }
          }

          else
          {
            uint64_t v112 = (os_log_s *)__nwlog_obj();
            uint64_t v113 = type;
            if (os_log_type_enabled(v112, type))
            {
              *(_DWORD *)__int16 v130 = 136446210;
              v131 = "nw_http_authentication_ask_accounts_for_creds";
              uint64_t v114 = "%{public}s called with null http_authentication, backtrace limit exceeded";
              goto LABEL_212;
            }
          }
        }

              if (v49) {
                free(v49);
              }
              int v21 = 0LL;
              goto LABEL_118;
            }

            if (__nwlog_listener_log::onceToken != -1) {
              dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
            }
            os_log_type_t v38 = (os_log_s *)(id)glistenerLogObj;
            if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
            {
              uint64_t v44 = nw_listener_get_id_string(v35);
              *(_DWORD *)BOOL v80 = 136446466;
              uint64_t v81 = "nw_listener_update_trigger_agents_on_queue";
              uint64_t v82 = 2082;
              os_log_type_t v83 = (void *)v44;
              _os_log_impl( &dword_181A5C000,  v38,  OS_LOG_TYPE_INFO,  "%{public}s [%{public}s] all triggered agents updated",  v80,  0x16u);
            }
          }

          goto LABEL_61;
        }

        __nwlog_obj();
        uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)BOOL v80 = 136446210;
        uint64_t v81 = "nw_listener_update_trigger_agents_on_queue";
        uint64_t v40 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        uint64_t v73 = 0;
        if (__nwlog_fault(v40, &type, &v73))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            BOOL v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            uint64_t v42 = type;
            if (os_log_type_enabled(v41, type))
            {
              *(_DWORD *)BOOL v80 = 136446210;
              uint64_t v81 = "nw_listener_update_trigger_agents_on_queue";
              _os_log_impl(&dword_181A5C000, v41, v42, "%{public}s xpc_array_create failed", v80, 0xCu);
            }
          }

          else if (v73)
          {
            os_log_type_t v45 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            BOOL v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            uint64_t v46 = type;
            BOOL v47 = os_log_type_enabled(v41, type);
            if (v45)
            {
              if (v47)
              {
                *(_DWORD *)BOOL v80 = 136446466;
                uint64_t v81 = "nw_listener_update_trigger_agents_on_queue";
                uint64_t v82 = 2082;
                os_log_type_t v83 = v45;
                _os_log_impl( &dword_181A5C000,  v41,  v46,  "%{public}s xpc_array_create failed, dumping backtrace:%{public}s",  v80,  0x16u);
              }

              free(v45);
              goto LABEL_98;
            }

            if (v47)
            {
              *(_DWORD *)BOOL v80 = 136446210;
              uint64_t v81 = "nw_listener_update_trigger_agents_on_queue";
              _os_log_impl(&dword_181A5C000, v41, v46, "%{public}s xpc_array_create failed, no backtrace", v80, 0xCu);
            }
          }

          else
          {
            __nwlog_obj();
            BOOL v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            BOOL v56 = type;
            if (os_log_type_enabled(v41, type))
            {
              *(_DWORD *)BOOL v80 = 136446210;
              uint64_t v81 = "nw_listener_update_trigger_agents_on_queue";
              _os_log_impl( &dword_181A5C000,  v41,  v56,  "%{public}s xpc_array_create failed, backtrace limit exceeded",  v80,  0xCu);
            }
          }
        }

            xpc_dictionary_set_BOOL(v2, "no_fallback", 1);
            if ((v1[97] & 0x80) == 0)
            {
LABEL_65:
              uint64_t v28 = *(unsigned int *)(*((void *)v1 + 13) + 103LL);
              if ((_DWORD)v28) {
                xpc_dictionary_set_uint64(v2, "multipath_service", v28);
              }
              if (v1[92]) {
                xpc_dictionary_set_uint64(v2, "data_mode", v1[92]);
              }
              uint64_t v29 = *((unsigned int *)v1 + 22);
              if ((_DWORD)v29) {
                xpc_dictionary_set_uint64(v2, "sleep_keepalive_interval", v29);
              }
              if ((v1[97] & 8) != 0) {
                xpc_dictionary_set_BOOL(v2, "custom_protocols_only", 1);
              }
              if ((*(_WORD *)(*((void *)v1 + 13) + 108LL) & 1) != 0)
              {
                xpc_dictionary_set_BOOL(v2, "discretionary", 1);
                uint64_t v30 = *((void *)v1 + 12);
                if ((v30 & 0x4000) == 0)
                {
LABEL_75:
                  if ((v30 & 0x200) == 0) {
                    goto LABEL_76;
                  }
                  goto LABEL_119;
                }
              }

              else
              {
                uint64_t v30 = *((void *)v1 + 12);
                if ((v30 & 0x4000) == 0) {
                  goto LABEL_75;
                }
              }

              xpc_dictionary_set_BOOL(v2, "local_only", 1);
              if ((*((void *)v1 + 12) & 0x200) == 0)
              {
LABEL_76:
                uint64_t v31 = v1[93];
                if (!v1[93]) {
                  goto LABEL_78;
                }
                goto LABEL_77;
              }

  if (v23) {
LABEL_116:
  }
    free(v23);
LABEL_117:
  uint64_t v69 = 0LL;
LABEL_206:

LABEL_207:
  return v69;
}

          if (v79) {
            free(v79);
          }
          *(_DWORD *)(v13 + 456) = 0;
          goto LABEL_118;
        }

        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_handle_connect_response";
        v484 = (char *)_os_log_send_and_compose_impl();
        iterate_block[0] = 16;
        type[0] = OS_LOG_TYPE_DEFAULT;
        if (iterate_block[0] == 17)
        {
          v485 = (os_log_s *)__nwlog_obj();
          v486 = iterate_block[0];
          if (!os_log_type_enabled(v485, (os_log_type_t)iterate_block[0])) {
            goto LABEL_777;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_handle_connect_response";
          v487 = "%{public}s called with null response";
          goto LABEL_775;
        }

        if (type[0] == OS_LOG_TYPE_DEFAULT)
        {
          v485 = (os_log_s *)__nwlog_obj();
          v486 = iterate_block[0];
          if (!os_log_type_enabled(v485, (os_log_type_t)iterate_block[0])) {
            goto LABEL_777;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_handle_connect_response";
          v487 = "%{public}s called with null response, backtrace limit exceeded";
          goto LABEL_775;
        }

        v500 = (char *)__nw_create_backtrace_string();
        v497 = (os_log_s *)__nwlog_obj();
        v498 = iterate_block[0];
        v503 = os_log_type_enabled(v497, (os_log_type_t)iterate_block[0]);
        if (v500)
        {
          if (!v503) {
            goto LABEL_765;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_handle_connect_response";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v500;
          v502 = "%{public}s called with null response, dumping backtrace:%{public}s";
          goto LABEL_764;
        }

        if (v503)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_handle_connect_response";
          v487 = "%{public}s called with null response, no backtrace";
          goto LABEL_790;
        }

      if (v64) {
        free(v64);
      }
      uint64_t v13 = 0LL;
LABEL_16:

      if (v13)
      {
        int v21 = v13;
LABEL_37:

        goto LABEL_38;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v22 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_socks5_connection_create";
      __int16 v23 = (char *)_os_log_send_and_compose_impl();

      LOBYTE(v88.receiver) = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if ((__nwlog_fault(v23, &v88, &type) & 1) != 0)
      {
        if (LOBYTE(v88.receiver) == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v24 = (os_log_s *)(id)gLogObj;
          receiver = (os_log_type_t)v88.receiver;
          if (os_log_type_enabled(v24, (os_log_type_t)v88.receiver))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_socks5_connection_create";
            _os_log_impl( &dword_181A5C000,  v24,  receiver,  "%{public}s [nw_socks5_connection initWithConnection:queue:shoes:] failed",  buf,  0xCu);
          }
        }

        else if (type)
        {
          int64_t v26 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v24 = (os_log_s *)(id)gLogObj;
          __int128 v27 = (os_log_type_t)v88.receiver;
          uint64_t v28 = os_log_type_enabled(v24, (os_log_type_t)v88.receiver);
          if (v26)
          {
            if (v28)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_socks5_connection_create";
              *(_WORD *)&_BYTE buf[12] = 2082;
              *(void *)&buf[14] = v26;
              _os_log_impl( &dword_181A5C000,  v24,  v27,  "%{public}s [nw_socks5_connection initWithConnection:queue:shoes:] failed, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v26);
            if (!v23) {
              goto LABEL_37;
            }
            goto LABEL_36;
          }

          if (v28)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_socks5_connection_create";
            _os_log_impl( &dword_181A5C000,  v24,  v27,  "%{public}s [nw_socks5_connection initWithConnection:queue:shoes:] failed, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v24 = (os_log_s *)(id)gLogObj;
          uint64_t v29 = (os_log_type_t)v88.receiver;
          if (os_log_type_enabled(v24, (os_log_type_t)v88.receiver))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_socks5_connection_create";
            _os_log_impl( &dword_181A5C000,  v24,  v29,  "%{public}s [nw_socks5_connection initWithConnection:queue:shoes:] failed, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

      if (!v23) {
        goto LABEL_37;
      }
LABEL_36:
      free(v23);
      goto LABEL_37;
    }

    __nwlog_obj();
    uint32_t v61 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_socks5_connection_create";
    __int16 v58 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v88.receiver) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v58, &v88, &type))
    {
      if (LOBYTE(v88.receiver) == 17)
      {
        __nwlog_obj();
        BOOL v59 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v62 = (os_log_type_t)v88.receiver;
        if (os_log_type_enabled(v59, (os_log_type_t)v88.receiver))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_create";
          _os_log_impl(&dword_181A5C000, v59, v62, "%{public}s called with null queue", buf, 0xCu);
        }

      goto LABEL_91;
    }

    if (!v92)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v49 = (os_log_s *)(id)gLogObj;
      __int16 v57 = type;
      if (os_log_type_enabled(v49, type))
      {
        else {
          __int16 v58 = off_189BBBBC0[mode];
        }
        *(_DWORD *)buf = 136446722;
        os_log_type_t v95 = "nw_endpoint_handler_get_listener_protocol_on_nw_queue";
        BOOL v96 = 2082;
        v97 = (char *)v58;
        BOOL v98 = 2082;
        os_log_type_t v99 = "flow";
        _os_log_impl( &dword_181A5C000,  v49,  v57,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
      }

      goto LABEL_115;
    }

    uint64_t v52 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v53 = (os_log_s *)(id)gLogObj;
    BOOL v54 = type;
    uint64_t v55 = os_log_type_enabled(v53, type);
    if (v52)
    {
      if (v55)
      {
        else {
          BOOL v56 = off_189BBBBC0[mode];
        }
        *(_DWORD *)buf = 136446978;
        os_log_type_t v95 = "nw_endpoint_handler_get_listener_protocol_on_nw_queue";
        BOOL v96 = 2082;
        v97 = (char *)v56;
        BOOL v98 = 2082;
        os_log_type_t v99 = "flow";
        os_log_type_t v100 = 2082;
        os_log_type_t v101 = v52;
        _os_log_impl( &dword_181A5C000,  v53,  v54,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
      }

      free(v52);
      if (!v48) {
        goto LABEL_93;
      }
      goto LABEL_92;
    }

    if (v55)
    {
      else {
        __int16 v70 = off_189BBBBC0[mode];
      }
      *(_DWORD *)buf = 136446722;
      os_log_type_t v95 = "nw_endpoint_handler_get_listener_protocol_on_nw_queue";
      BOOL v96 = 2082;
      v97 = (char *)v70;
      BOOL v98 = 2082;
      os_log_type_t v99 = "flow";
      _os_log_impl( &dword_181A5C000,  v53,  v54,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
    }

      if (v54)
      {
        os_log_type_t v45 = (char *)v54;
        goto LABEL_117;
      }

      return 0LL;
    }

    memcpy((void *)(v21 + v46), v10, v47);
    *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL) += *(_DWORD *)(*(void *)(a1[5] + 8LL) + 24LL);
LABEL_87:
    nw_frame_claim(a2, v30, *(_DWORD *)(*(void *)(a1[5] + 8LL) + 24LL), 0);
    uint64_t v22 = 0LL;
    *(void *)(*(void *)(a1[5] + 8LL) + 24LL) = 0LL;
    return v22;
  }

  *(void *)(v11 + 24) = v12 - size;
  size_t v14 = a1[10];
  if (!v14)
  {
    __int16 v23 = dispatch_data_create(v10, v13, 0LL, 0LL);
    if (v23)
    {
      uint64_t v24 = v23;
      size_t v25 = *(void *)(a1[7] + 8LL);
      int64_t v26 = *(dispatch_data_s **)(v25 + 24);
      if (v26)
      {
        __int128 v27 = dispatch_data_create_concat(v26, v24);
        uint64_t v28 = *(dispatch_object_s **)(*(void *)(a1[7] + 8LL) + 24LL);
        if (v28)
        {
          dispatch_release(v28);
          *(void *)(*(void *)(a1[7] + 8LL) + 24LL) = 0LL;
        }

        dispatch_release(v24);
        *(void *)(*(void *)(a1[7] + 8LL) + 24LL) = v27;
      }

      else
      {
        *(void *)(v25 + 24) = v24;
      }
    }

    goto LABEL_47;
  }

  os_log_type_t v15 = *(void *)(v14 + 112);
  if (v15)
  {
    if ((*(_WORD *)(v14 + 204) & 0x100) == 0
      || !g_channel_check_validity
      || g_channel_check_validity(a1[10], *(void *)(v14 + 88)))
    {
      LODWORD(v15) = *(_DWORD *)(v14 + 52);
      uint64_t v16 = *(unsigned int *)(v14 + 56);
      if ((_DWORD)v15) {
        LODWORD(v15) = v15 - (v16 + *(_DWORD *)(v14 + 60));
      }
      uint64_t v17 = *(void *)(v14 + 112) + v16;
      goto LABEL_41;
    }

    LODWORD(v15) = 0;
  }

  uint64_t v17 = 0LL;
LABEL_41:
  id v36 = *(unsigned int *)(*(void *)(a1[6] + 8LL) + 24LL);
  if (v15 < size + v36)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    size_4 = 136446210;
    int v84 = "nw_protocol_http2_get_input_frames_block_invoke";
    os_log_type_t v37 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v80 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v38 = (os_log_s *)gLogObj;
      uint64_t v39 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_61;
      }
      size_4 = 136446210;
      int v84 = "nw_protocol_http2_get_input_frames_block_invoke";
      uint64_t v40 = "%{public}s Datagram frame is too short";
    }

    else if (v80)
    {
      os_log_type_t v43 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v38 = (os_log_s *)gLogObj;
      uint64_t v39 = type;
      uint64_t v44 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v43)
      {
        if (v44)
        {
          size_4 = 136446466;
          int v84 = "nw_protocol_http2_get_input_frames_block_invoke";
          os_log_type_t v85 = 2082;
          BOOL v86 = v43;
          _os_log_impl( &dword_181A5C000,  v38,  v39,  "%{public}s Datagram frame is too short, dumping backtrace:%{public}s",  (uint8_t *)&size_4,  0x16u);
        }

        free(v43);
LABEL_61:
        if (v37)
        {
          os_log_type_t v45 = (char *)v37;
LABEL_117:
          free(v45);
          return 0LL;
        }

        return 0LL;
      }

      if (!v44) {
        goto LABEL_61;
      }
      size_4 = 136446210;
      int v84 = "nw_protocol_http2_get_input_frames_block_invoke";
      uint64_t v40 = "%{public}s Datagram frame is too short, no backtrace";
    }

    else
    {
      os_log_type_t v38 = (os_log_s *)__nwlog_obj();
      uint64_t v39 = type;
      if (!os_log_type_enabled(v38, type)) {
        goto LABEL_61;
      }
      size_4 = 136446210;
      int v84 = "nw_protocol_http2_get_input_frames_block_invoke";
      uint64_t v40 = "%{public}s Datagram frame is too short, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v38, v39, v40, (uint8_t *)&size_4, 0xCu);
    goto LABEL_61;
  }

  memcpy((void *)(v17 + v36), v10, size);
  *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL) += size;
LABEL_47:
  BOOL v41 = *(void *)(a2 + 32);
  uint64_t v42 = *(void **)(a2 + 40);
  if (v41)
  {
    *(void *)(v41 + 40) = v42;
    uint64_t v42 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(a1[8] + 8LL) = v42;
  }

  *uint64_t v42 = v41;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  nw_frame_finalize(a2);
  return *(void *)(*(void *)(a1[5] + 8LL) + 24LL) != 0LL;
}

uint64_t nw_protocol_udp_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v63 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (a1->handle == &nw_protocol_ref_counted_handle)
    {
      *(void *)os_log_type_t v49 = 0LL;
      unint64_t v50 = v49;
      int v52 = 0;
      uint64_t v51 = 0x2000000000LL;
      v43[0] = MEMORY[0x1895F87A8];
      v43[1] = 0x40000000LL;
      uint64_t v44 = ___ZL38nw_protocol_udp_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
      os_log_type_t v45 = &unk_189BB5610;
      BOOL v47 = a1;
      p_uint64_t output_handler = &a1[1].output_handler;
      uint64_t v46 = v49;
      tqh_first = a2->tqh_first;
      do
      {
        if (!tqh_first) {
          break;
        }
        uint64_t v5 = (nw_frame *)*((void *)tqh_first + 4);
        char v6 = ((uint64_t (*)(void *))v44)(v43);
        tqh_first = v5;
      }

      while ((v6 & 1) != 0);
      if (_nw_signposts_once != -1) {
        dispatch_once(&_nw_signposts_once, &__block_literal_global_13);
      }
      if (_nw_signposts_enabled && kdebug_is_enabled())
      {
        kdebug_trace();
        uint64_t output_handler = a1->output_handler;
        if (output_handler) {
          goto LABEL_11;
        }
      }

      else
      {
        uint64_t output_handler = a1->output_handler;
        if (output_handler)
        {
LABEL_11:
          handle = output_handler->handle;
          if (handle == &nw_protocol_ref_counted_handle)
          {
            callbacks = output_handler[1].callbacks;
            if (callbacks) {
              output_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
            }
          }

          uint64_t v10 = output_handler->callbacks;
          if (v10)
          {
            finalize_output_frames = (uint64_t (*)(nw_protocol *, nw_frame_array_s *))v10->finalize_output_frames;
            if (finalize_output_frames)
            {
              uint64_t v12 = finalize_output_frames(output_handler, a2);
              if (handle != &nw_protocol_ref_counted_handle)
              {
LABEL_18:
                _Block_object_dispose(v49, 8);
                return v12;
              }

void nw_protocol_udp_connected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v117 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v110 = "nw_protocol_udp_connected";
    os_log_type_t v26 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v107 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int128 v27 = (os_log_s *)__nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_207;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v110 = "nw_protocol_udp_connected";
      BOOL v29 = "%{public}s called with null protocol";
    }

    else if (v107)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int128 v27 = (os_log_s *)__nwlog_obj();
      os_log_type_t v28 = type;
      BOOL v35 = os_log_type_enabled(v27, type);
      if (backtrace_string)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v110 = "nw_protocol_udp_connected";
          __int16 v111 = 2082;
          uint64_t v112 = (nw_protocol *)backtrace_string;
          _os_log_impl( &dword_181A5C000,  v27,  v28,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_207:
        if (!v26) {
          return;
        }
        goto LABEL_208;
      }

      if (!v35) {
        goto LABEL_207;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v110 = "nw_protocol_udp_connected";
      BOOL v29 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      __int128 v27 = (os_log_s *)__nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_207;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v110 = "nw_protocol_udp_connected";
      BOOL v29 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_206;
  }

  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v110 = "nw_protocol_udp_connected";
    os_log_type_t v26 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v107 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v107)
      {
        __int128 v27 = (os_log_s *)__nwlog_obj();
        os_log_type_t v28 = type;
        if (!os_log_type_enabled(v27, type)) {
          goto LABEL_207;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v110 = "nw_protocol_udp_connected";
        BOOL v29 = "%{public}s called with null udp, backtrace limit exceeded";
        goto LABEL_206;
      }

      BOOL v36 = (char *)__nw_create_backtrace_string();
      __int128 v27 = (os_log_s *)__nwlog_obj();
      os_log_type_t v28 = type;
      BOOL v37 = os_log_type_enabled(v27, type);
      if (!v36)
      {
        if (!v37) {
          goto LABEL_207;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v110 = "nw_protocol_udp_connected";
        BOOL v29 = "%{public}s called with null udp, no backtrace";
        goto LABEL_206;
      }

      if (v37)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v110 = "nw_protocol_udp_connected";
        __int16 v111 = 2082;
        uint64_t v112 = (nw_protocol *)v36;
        BOOL v38 = "%{public}s called with null udp, dumping backtrace:%{public}s";
LABEL_140:
        _os_log_impl(&dword_181A5C000, v27, v28, v38, buf, 0x16u);
      }

LABEL_219:
  if (v69) {
    free(v69);
  }
  uint64_t v44 = 0LL;
  if (handle == &nw_protocol_ref_counted_handle)
  {
LABEL_90:
    if (default_input_handler->handle == &nw_protocol_ref_counted_handle)
    {
      os_log_type_t v60 = default_input_handler[1].callbacks;
      if (v60)
      {
        __int16 v61 = (nw_protocol_callbacks *)((char *)v60 - 1);
        default_input_handler[1].callbacks = v61;
        if (!v61)
        {
          os_log_type_t v62 = *(void (***)(void))default_input_handler[1].flow_id;
          if (v62)
          {
            *(void *)default_input_handler[1].flow_id = 0LL;
            v62[2](v62);
            _Block_release(v62);
          }

          if ((default_input_handler[1].flow_id[8] & 1) != 0)
          {
            uint64_t v63 = *(const void **)default_input_handler[1].flow_id;
            if (v63) {
              _Block_release(v63);
            }
          }

          free(default_input_handler);
        }
      }
    }
  }

                goto LABEL_220;
              }

              if (!(_BYTE)v279)
              {
                __nwlog_obj();
                v105 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                __int16 v110 = type[0];
                if (os_log_type_enabled(v105, (os_log_type_t)type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler";
                  _os_log_impl( &dword_181A5C000,  v105,  v110,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
                }

                goto LABEL_219;
              }

              char v107 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v105 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              v108 = type[0];
              os_log_type_t v109 = os_log_type_enabled(v105, (os_log_type_t)type[0]);
              if (!v107)
              {
                if (v109)
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler";
                  _os_log_impl( &dword_181A5C000,  v105,  v108,  "%{public}s called with null protocol, no backtrace",  buf,  0xCu);
                }

                goto LABEL_219;
              }

              if (v109)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "__nw_protocol_set_output_handler";
                *(_WORD *)&_BYTE buf[12] = 2082;
                *(void *)&buf[14] = v107;
                _os_log_impl( &dword_181A5C000,  v105,  v108,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v107);
            }

        goto LABEL_220;
      }

      __nwlog_obj();
      v142 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_existing";
      os_log_type_t v139 = (char *)_os_log_send_and_compose_impl();

      v213[0] = 16;
      v203 = OS_LOG_TYPE_DEFAULT;
      if (v213[0] == 17)
      {
        __nwlog_obj();
        v140 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v143 = v213[0];
        if (os_log_type_enabled(v140, (os_log_type_t)v213[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_existing";
          _os_log_impl(&dword_181A5C000, v140, v143, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v203)
      {
        v147 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v140 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v148 = v213[0];
        os_log_type_t v149 = os_log_type_enabled(v140, (os_log_type_t)v213[0]);
        if (v147)
        {
          if (v149)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_existing";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = v147;
            _os_log_impl( &dword_181A5C000,  v140,  v148,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v147);
          if (!v139) {
            goto LABEL_128;
          }
          goto LABEL_276;
        }

        if (v149)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_existing";
          _os_log_impl(&dword_181A5C000, v140, v148, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v140 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v151 = v213[0];
        if (os_log_type_enabled(v140, (os_log_type_t)v213[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_existing";
          _os_log_impl( &dword_181A5C000,  v140,  v151,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    else
    {
      __nwlog_obj();
      v138 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_existing";
      os_log_type_t v139 = (char *)_os_log_send_and_compose_impl();

      v213[0] = 16;
      v203 = OS_LOG_TYPE_DEFAULT;
      if (v213[0] == 17)
      {
        __nwlog_obj();
        v140 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v141 = v213[0];
        if (os_log_type_enabled(v140, (os_log_type_t)v213[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_existing";
          _os_log_impl(&dword_181A5C000, v140, v141, "%{public}s called with null original_endpoint_handler", buf, 0xCu);
        }
      }

      else if (v203)
      {
        os_log_type_t v144 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v140 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v145 = v213[0];
        v146 = os_log_type_enabled(v140, (os_log_type_t)v213[0]);
        if (v144)
        {
          if (v146)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_existing";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = v144;
            _os_log_impl( &dword_181A5C000,  v140,  v145,  "%{public}s called with null original_endpoint_handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v144);
LABEL_275:
          if (!v139) {
            goto LABEL_128;
          }
LABEL_276:
          free(v139);
          goto LABEL_128;
        }

        if (v146)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_existing";
          _os_log_impl( &dword_181A5C000,  v140,  v145,  "%{public}s called with null original_endpoint_handler, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v140 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v150 = v213[0];
        if (os_log_type_enabled(v140, (os_log_type_t)v213[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_existing";
          _os_log_impl( &dword_181A5C000,  v140,  v150,  "%{public}s called with null original_endpoint_handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    goto LABEL_275;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v40 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_create_with_connection";
  BOOL v41 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v198) = 0;
  if (__nwlog_fault(v41, type, &v198))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v42 = (os_log_s *)(id)gLogObj;
      os_log_type_t v43 = type[0];
      if (os_log_type_enabled(v42, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connection";
        _os_log_impl( &dword_181A5C000,  v42,  v43,  "%{public}s [nw_connection initWithEndpoint:parameters:] failed",  buf,  0xCu);
      }
    }

    else if ((_BYTE)v198)
    {
      uint64_t v44 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v42 = (os_log_s *)(id)gLogObj;
      os_log_type_t v45 = type[0];
      uint64_t v46 = os_log_type_enabled(v42, type[0]);
      if (v44)
      {
        if (v46)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_create_with_connection";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v44;
          _os_log_impl( &dword_181A5C000,  v42,  v45,  "%{public}s [nw_connection initWithEndpoint:parameters:] failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v44);
        if (!v41) {
          goto LABEL_82;
        }
        goto LABEL_81;
      }

      if (v46)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connection";
        _os_log_impl( &dword_181A5C000,  v42,  v45,  "%{public}s [nw_connection initWithEndpoint:parameters:] failed, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v42 = (os_log_s *)(id)gLogObj;
      unint64_t v50 = type[0];
      if (os_log_type_enabled(v42, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_create_with_connection";
        _os_log_impl( &dword_181A5C000,  v42,  v50,  "%{public}s [nw_connection initWithEndpoint:parameters:] failed, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  if (v41) {
LABEL_81:
  }
    free(v41);
LABEL_82:
  uint64_t v39 = 0LL;
LABEL_224:

LABEL_225:
  return v39;
}

    free(backtrace_string);
    goto LABEL_244;
  }

  __int16 v111 = (os_log_s *)__nwlog_obj();
  uint64_t v112 = type[0];
  if (os_log_type_enabled(v111, type[0]))
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_session_remove_input_handler";
    __int16 v113 = "%{public}s called with null webtransport_stream";
    goto LABEL_243;
  }

        if (v111) {
          goto LABEL_202;
        }
        goto LABEL_203;
      }

      if (!v185)
      {
        BOOL v135 = (os_log_s *)__nwlog_obj();
        uint64_t v136 = v186;
        if (!os_log_type_enabled(v135, v186)) {
          goto LABEL_219;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
        BOOL v128 = v135;
        v129 = v136;
        __int16 v130 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
LABEL_218:
        _os_log_impl(&dword_181A5C000, v128, v129, v130, buf, 0xCu);
        goto LABEL_219;
      }

      v131 = (char *)__nw_create_backtrace_string();
      __int16 v132 = (os_log_s *)__nwlog_obj();
      v133 = v186;
      __int16 v134 = os_log_type_enabled(v132, v186);
      if (!v131)
      {
        uint64_t v5 = &qword_18C45F000;
        if (!v134) {
          goto LABEL_219;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
        BOOL v128 = v132;
        v129 = v133;
        __int16 v130 = "%{public}s called with null webtransport_stream, no backtrace";
        goto LABEL_218;
      }

      if (v134)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
        v188 = 2082;
        v189 = v131;
        _os_log_impl( &dword_181A5C000,  v132,  v133,  "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v131);
      uint64_t v5 = &qword_18C45F000;
      if (v111) {
        goto LABEL_202;
      }
LABEL_203:
      v182[3] = v93;
      os_log_type_t v78 = v173;
    }
  }

  os_log_type_t v79 = *(void *)(v173 + 328);
  if (v79)
  {
    if ((*(_BYTE *)(v79 + 276) & 0x10) == 0)
    {
      if (gLogDatapath)
      {
        v169 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v169, OS_LOG_TYPE_DEBUG))
        {
          v170 = *(void *)(v79 + 88);
          if (v170) {
            v171 = *(_DWORD *)(v170 + 460);
          }
          else {
            v171 = -1;
          }
          v172 = *(void *)(v79 + 64);
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_get_next_pending_stream";
          v188 = 2082;
          v189 = (const char *)(v79 + 192);
          v190 = 2080;
          v191 = (uint64_t)" ";
          v192 = 1024;
          *(_DWORD *)v193 = v171;
          *(_WORD *)&v193[4] = 2048;
          *(void *)&v193[6] = v172;
          *(_WORD *)&v193[14] = 2048;
          *(void *)&v193[16] = v79;
          _os_log_impl( &dword_181A5C000,  v169,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%lld> found stream (%p)",  buf,  0x3Au);
        }
      }
    }
  }

  nw_protocol_set_input_handler(v173, v79);
  if ((*(_BYTE *)(v173 + 548) & 2) != 0) {
    goto LABEL_89;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  char v53 = (os_log_s *)v5[131];
  if (!os_log_type_enabled(v53, OS_LOG_TYPE_INFO)) {
    goto LABEL_89;
  }
  BOOL v80 = *(_DWORD *)(v173 + 460);
  *(_DWORD *)buf = 136446978;
  *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
  v188 = 2082;
  v189 = (const char *)(v173 + 464);
  v190 = 2080;
  v191 = (uint64_t)" ";
  v192 = 1024;
  *(_DWORD *)v193 = v80;
  uint64_t v55 = "%{public}s %{public}s%s<i%u> not destroying, still have pending streams";
LABEL_88:
  _os_log_impl(&dword_181A5C000, v53, OS_LOG_TYPE_INFO, v55, buf, 0x26u);
LABEL_89:
  nw_protocol_set_output_handler((uint64_t)a1, 0LL);
  if ((handle[276] & 0x10) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v56 = (os_log_s *)v5[131];
    if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
    {
      __int16 v57 = *((void *)handle + 11);
      if (v57) {
        __int16 v58 = *(_DWORD *)(v57 + 460);
      }
      else {
        __int16 v58 = -1;
      }
      __int16 v59 = *((void *)handle + 8);
      *(_DWORD *)buf = 136447490;
      *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
      v188 = 2082;
      v189 = handle + 192;
      v190 = 2080;
      v191 = (uint64_t)" ";
      v192 = 1024;
      *(_DWORD *)v193 = v58;
      *(_WORD *)&v193[4] = 2048;
      *(void *)&v193[6] = v59;
      *(_WORD *)&v193[14] = 2048;
      *(void *)&v193[16] = handle;
      _os_log_impl( &dword_181A5C000,  v56,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:s%lld> destroying stream %p",  buf,  0x3Au);
    }
  }

  if (*((void *)handle + 9))
  {
    if ((handle[276] & 0x10) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v60 = (os_log_s *)v5[131];
      if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
      {
        __int16 v61 = *((void *)handle + 11);
        if (v61) {
          os_log_type_t v62 = *(_DWORD *)(v61 + 460);
        }
        else {
          os_log_type_t v62 = -1;
        }
        os_log_type_t v71 = *((void *)handle + 8);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
        v188 = 2082;
        v189 = handle + 192;
        v190 = 2080;
        v191 = (uint64_t)" ";
        v192 = 1024;
        *(_DWORD *)v193 = v62;
        *(_WORD *)&v193[4] = 2048;
        *(void *)&v193[6] = v71;
        _os_log_impl( &dword_181A5C000,  v60,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:s%lld> input_frames has unread frames before destroying",  buf,  0x30u);
      }
    }
  }

  __int16 v72 = *((void *)handle + 9);
  if (v72)
  {
    do
    {
      uint64_t v73 = *(void *)(v72 + 32);
      nw_frame_finalize(v72);
      __int16 v72 = v73;
    }

    while (v73);
  }

  (*(void (**)(void, void))(*((void *)handle + 22) + 16LL))(*((void *)handle + 22), 0LL);
  BOOL v74 = (const void *)*((void *)handle + 22);
  if (v74)
  {
    _Block_release(v74);
    *((void *)handle + 22) = 0LL;
  }

  if ((handle[168] & 1) != 0)
  {
    os_log_type_t v75 = (void *)*((void *)handle + 20);
    if (v75) {
      os_release(v75);
    }
  }

  *((void *)handle + 20) = 0LL;
  if ((handle[152] & 1) != 0)
  {
    uint64_t v76 = (void *)*((void *)handle + 18);
    if (v76) {
      os_release(v76);
    }
  }

  *((void *)handle + 18) = 0LL;
  if ((handle[136] & 1) != 0)
  {
    uint64_t v77 = (void *)*((void *)handle + 16);
    if (v77) {
      os_release(v77);
    }
  }

  free(handle);
  return 1LL;
}

        if (v122) {
          free(v122);
        }
        size_t v14 = v121;
        goto LABEL_83;
      }

      __int16 v132 = v14;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v28 = *(unsigned int *)(v3 + 368);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = "http1->nonresuable_connections";
      *(_WORD *)&buf[22] = 2048;
      v140 = 1LL;
      *(_WORD *)v141 = 2048;
      *(void *)&v141[2] = v28;
      BOOL v29 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(v144) = 16;
      __int16 v134 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v29, &v144, &v134))
      {
        if (v144 == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v30 = (os_log_s *)gLogObj;
          uint64_t v31 = v144;
          if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v144))
          {
            BOOL v32 = *(unsigned int *)(v3 + 368);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            v140 = 1LL;
            *(_WORD *)v141 = 2048;
            *(void *)&v141[2] = v32;
            os_log_type_t v33 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_56:
            _os_log_impl(&dword_181A5C000, v30, v31, v33, buf, 0x2Au);
          }
        }

        else if (v134)
        {
          os_log_type_t v34 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v30 = (os_log_s *)gLogObj;
          uint64_t v31 = v144;
          BOOL v35 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v144);
          if (v34)
          {
            if (v35)
            {
              BOOL v36 = *(unsigned int *)(v3 + 368);
              *(_DWORD *)buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
              *(_WORD *)&_BYTE buf[12] = 2082;
              *(void *)&buf[14] = "http1->nonresuable_connections";
              *(_WORD *)&buf[22] = 2048;
              v140 = 1LL;
              *(_WORD *)v141 = 2048;
              *(void *)&v141[2] = v36;
              *(_WORD *)&v141[10] = 2082;
              *(void *)&v141[12] = v34;
              _os_log_impl( &dword_181A5C000,  v30,  v31,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
            }

            free(v34);
            goto LABEL_57;
          }

          if (v35)
          {
            BOOL v38 = *(unsigned int *)(v3 + 368);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            v140 = 1LL;
            *(_WORD *)v141 = 2048;
            *(void *)&v141[2] = v38;
            os_log_type_t v33 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
            goto LABEL_56;
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v30 = (os_log_s *)gLogObj;
          uint64_t v31 = v144;
          if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v144))
          {
            BOOL v37 = *(unsigned int *)(v3 + 368);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            v140 = 1LL;
            *(_WORD *)v141 = 2048;
            *(void *)&v141[2] = v37;
            os_log_type_t v33 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
            goto LABEL_56;
          }
        }
      }

            _os_log_impl(&dword_181A5C000, v69, v70, v71, buf, 0xCu);
            goto LABEL_220;
          }

    if (v108) {
      free(v108);
    }
    goto LABEL_101;
  }

  sa_family = address->sa_family;
  if (sa_family != 30)
  {
    if (sa_family == 2)
    {
      __int128 v27 = *(_DWORD *)&address->sa_data[2] != 0;
      goto LABEL_26;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v40 = (id)gLogObj;
    BOOL v41 = a1[4];
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "-[nw_ip_channel_inbox initWithPath:flow:parameters:delegate:]";
    *(_WORD *)&_BYTE buf[12] = 2112;
    *(void *)&buf[14] = v41;
    uint64_t v42 = (char *)_os_log_send_and_compose_impl();

    uu[0] = OS_LOG_TYPE_ERROR;
    uint64_t v136 = 0;
    if (__nwlog_fault(v42, uu, &v136))
    {
      if (uu[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v43 = (os_log_s *)(id)gLogObj;
        uint64_t v44 = uu[0];
        if (os_log_type_enabled(v43, uu[0]))
        {
          os_log_type_t v45 = v15[4];
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "-[nw_ip_channel_inbox initWithPath:flow:parameters:delegate:]";
          *(_WORD *)&_BYTE buf[12] = 2112;
          *(void *)&buf[14] = v45;
          _os_log_impl(&dword_181A5C000, v43, v44, "%{public}s endpoint %@ is not IPv4 or IPv6 address", buf, 0x16u);
        }
      }

      else if (v136)
      {
        uint64_t v63 = __nw_create_backtrace_string();
        if (v63)
        {
          uint64_t v64 = (char *)v63;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v65 = (os_log_s *)(id)gLogObj;
          char v66 = uu[0];
          if (os_log_type_enabled(v65, uu[0]))
          {
            uint64_t v67 = v15[4];
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "-[nw_ip_channel_inbox initWithPath:flow:parameters:delegate:]";
            *(_WORD *)&_BYTE buf[12] = 2112;
            *(void *)&buf[14] = v67;
            v138 = 2082;
            os_log_type_t v139 = v64;
            _os_log_impl( &dword_181A5C000,  v65,  v66,  "%{public}s endpoint %@ is not IPv4 or IPv6 address, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v64);
          if (!v42) {
            goto LABEL_101;
          }
          goto LABEL_91;
        }

        __nwlog_obj();
        os_log_type_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v74 = uu[0];
        if (os_log_type_enabled(v43, uu[0]))
        {
          os_log_type_t v75 = v15[4];
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "-[nw_ip_channel_inbox initWithPath:flow:parameters:delegate:]";
          *(_WORD *)&_BYTE buf[12] = 2112;
          *(void *)&buf[14] = v75;
          _os_log_impl( &dword_181A5C000,  v43,  v74,  "%{public}s endpoint %@ is not IPv4 or IPv6 address, no backtrace",  buf,  0x16u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v43 = (os_log_s *)(id)gLogObj;
        __int16 v72 = uu[0];
        if (os_log_type_enabled(v43, uu[0]))
        {
          uint64_t v73 = v15[4];
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "-[nw_ip_channel_inbox initWithPath:flow:parameters:delegate:]";
          *(_WORD *)&_BYTE buf[12] = 2112;
          *(void *)&buf[14] = v73;
          _os_log_impl( &dword_181A5C000,  v43,  v72,  "%{public}s endpoint %@ is not IPv4 or IPv6 address, backtrace limit exceeded",  buf,  0x16u);
        }
      }
    }

    if (!v42) {
      goto LABEL_101;
    }
LABEL_91:
    free(v42);
    goto LABEL_101;
  }

  BOOL v32 = !*(_DWORD *)&address->sa_data[6]
     && !*(_DWORD *)&address->sa_data[10]
     && !*(_DWORD *)&address[1].sa_len
     && *(_DWORD *)&address[1].sa_data[2] == 0;
  __int128 v27 = !v32;
LABEL_26:
  *((_BYTE *)a1 + 167) = *((_BYTE *)a1 + 167) & 0xFE | v27;
  *((_WORD *)a1 + 82) = *((_WORD *)a1[19] + 1);
  os_log_type_t v33 = v134;
  os_log_type_t v34 = *(id *)(v33[13] + 136LL);

  if (!v34)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_channel_create_with_nexus_flow";
    uint64_t v112 = (const char *)_os_log_send_and_compose_impl();
    uu[0] = OS_LOG_TYPE_ERROR;
    uint64_t v136 = 0;
    __int16 v132 = (char *)v112;
    if (uu[0] != OS_LOG_TYPE_FAULT)
    {
      if (!v136)
      {
        __int16 v113 = (os_log_s *)__nwlog_obj();
        uint64_t v114 = uu[0];
        if (!os_log_type_enabled(v113, uu[0])) {
          goto LABEL_227;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_channel_create_with_nexus_flow";
        __int16 v115 = "%{public}s called with null context, backtrace limit exceeded";
        goto LABEL_226;
      }

      BOOL v125 = (char *)__nw_create_backtrace_string();
      __int16 v113 = (os_log_s *)__nwlog_obj();
      uint64_t v114 = uu[0];
      char v126 = os_log_type_enabled(v113, uu[0]);
      if (!v125)
      {
        uint64_t v16 = &OBJC_IVAR___NWConcrete_tcp_connection_tc_event_disconnected_delivered;
        if (!v126) {
          goto LABEL_227;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_channel_create_with_nexus_flow";
        __int16 v115 = "%{public}s called with null context, no backtrace";
        goto LABEL_226;
      }

      if (v126)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_channel_create_with_nexus_flow";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = v125;
        os_log_type_t v127 = "%{public}s called with null context, dumping backtrace:%{public}s";
LABEL_183:
        _os_log_impl(&dword_181A5C000, v113, v114, v127, buf, 0x16u);
      }

      if (v115) {
        free(v115);
      }
LABEL_29:

LABEL_30:
      *(void *)os_log_type_t type = 0LL;
      v170 = 0LL;
      nw_connection_get_uuid(*(void **)(a1 + 32), (unsigned __int8 *)type);
      nw_http_connection_metadata_set_uuid(v21, (uint64_t)type);
      uint64_t v30 = v21;
      uint64_t v31 = v21[1];

      if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
      }
      BOOL v32 = nw_protocol_definition_is_equal_unsafe((uint64_t)v31, nw_protocol_copy_http_connection_definition_definition);

      if (v32)
      {
        os_log_type_t v33 = v30[4];
        if (v33) {
          v33[196] |= 2u;
        }
        goto LABEL_36;
      }

      __nwlog_obj();
      v118 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_unlisted_tracker";
      LODWORD(v159) = 12;
      v158 = buf;
      __int128 v119 = (char *)_os_log_send_and_compose_impl();

      v163 = OS_LOG_TYPE_ERROR;
      v162 = 0;
      if (v163 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        __int128 v120 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v121 = v163;
        if (os_log_type_enabled(v120, v163))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_unlisted_tracker";
          _os_log_impl(&dword_181A5C000, v120, v121, "%{public}s metadata must be http_connection", buf, 0xCu);
        }

          _os_log_impl(&dword_181A5C000, v129, OS_LOG_TYPE_DEFAULT, v128, buf, v130);
          unint64_t v50 = v363;
          os_log_type_t v49 = v58;
          goto LABEL_272;
        }

        if ((*((_BYTE *)v1 + 109) & 4) != 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          __int16 v57 = (os_log_s *)(id)gconnectionLogObj;
          if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_272;
          }
          BOOL v96 = v49;
          v366 = v50;
          v153 = v1->top_id;
          v154 = nw_endpoint_get_logging_description(v1->endpoint);
          v155 = v1->parameters;
          char v156 = nw_endpoint_handler_get_id_string(v48);
          uint64_t v157 = nw_endpoint_get_description(v96);
          v158 = nw_endpoint_get_logging_description(v366);
          *(_DWORD *)buf = 67115522;
          *(_DWORD *)v388 = v153;
          *(_WORD *)&v388[4] = 1042;
          *(_DWORD *)&v388[6] = 16;
          *(_WORD *)&v388[10] = 2098;
          *(void *)&v388[12] = v1->top_uuid;
          *(_WORD *)&v388[20] = 2082;
          *(void *)&v388[22] = v154;
          *(_WORD *)v389 = 2114;
          *(void *)&v389[2] = v155;
          v390 = 2082;
          v391 = v156;
          v392 = 1042;
          v393 = 16;
          v394 = 2098;
          v395 = v410;
          v396 = 2082;
          v397 = v157;
          v398 = 2082;
          v399 = v158;
          v400 = 2114;
          v401 = v370;
          v402 = 1024;
          *(_DWORD *)v403 = v362 / 0x3E8;
          *(_WORD *)&v403[4] = 1024;
          *(_DWORD *)&v403[6] = v362 % 0x3E8;
          LOWORD(v404[0]) = 1024;
          *(_DWORD *)((char *)v404 + 2) = v371 / 0x3E8;
          HIWORD(v404[1]) = 1024;
          v404[2] = v371 % 0x3E8;
          *(_WORD *)v405 = 1024;
          *(_DWORD *)&v405[2] = v373 / 0x3E8;
          *(_WORD *)&v405[6] = 1024;
          *(_DWORD *)&v405[8] = v373 % 0x3E8;
          *(_WORD *)&v405[12] = 1024;
          *(_DWORD *)&v405[14] = v372 / 0x3E8;
          *(_WORD *)&v405[18] = 1024;
          *(_DWORD *)&v405[20] = v372 % 0x3E8;
          *(_WORD *)&v405[24] = 1024;
          *(_DWORD *)&v405[26] = v379 / 0x3E8;
          *(_WORD *)&v405[30] = 1024;
          *(_DWORD *)&v405[32] = v379 % 0x3E8;
          *(_WORD *)&v405[36] = 2082;
          *(void *)&v405[38] = v383;
          *(_WORD *)&v405[46] = 1024;
          *(_DWORD *)&v405[48] = v382 / 0x3E8;
          *(_WORD *)&v405[52] = 1024;
          *(_DWORD *)&v405[54] = v382 % 0x3E8;
          *(_WORD *)&v405[58] = 1024;
          *(_DWORD *)&v405[60] = transport_connect_milliseconds / 0x3E8;
          *(_WORD *)&v405[64] = 1024;
          *(_DWORD *)&v405[66] = transport_connect_milliseconds % 0x3E8;
          v159 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                 "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                 "\tConnected Path: %{public}@\n"
                 "\tDuration: %u.%03us, Bonjour @%u.%03us took %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03us took %u.%03us";
          v160 = v57;
          v161 = 194;
        }

        else
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          __int16 v57 = (os_log_s *)(id)gconnectionLogObj;
          if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_272;
          }
          BOOL v96 = v49;
          v366 = v50;
          v97 = v1->top_id;
          BOOL v98 = nw_endpoint_get_logging_description(v1->endpoint);
          BOOL v99 = v1->parameters;
          os_log_type_t v100 = nw_endpoint_handler_get_id_string(v48);
          os_log_type_t v101 = nw_endpoint_get_description(v96);
          BOOL v102 = nw_endpoint_get_logging_description(v366);
          else {
            BOOL v103 = off_189BB70A8[privacy_stance - 1];
          }
          *(_DWORD *)buf = 67115778;
          *(_DWORD *)v388 = v97;
          *(_WORD *)&v388[4] = 1042;
          *(_DWORD *)&v388[6] = 16;
          *(_WORD *)&v388[10] = 2098;
          *(void *)&v388[12] = v1->top_uuid;
          *(_WORD *)&v388[20] = 2082;
          *(void *)&v388[22] = v98;
          *(_WORD *)v389 = 2114;
          *(void *)&v389[2] = v99;
          v390 = 2082;
          v391 = v100;
          v392 = 1042;
          v393 = 16;
          v394 = 2098;
          v395 = v410;
          v396 = 2082;
          v397 = v101;
          v398 = 2082;
          v399 = v102;
          v400 = 2114;
          v401 = v370;
          v402 = 2082;
          *(void *)v403 = v103;
          *(_WORD *)&v403[8] = 1024;
          v404[0] = v362 / 0x3E8;
          LOWORD(v404[1]) = 1024;
          *(_DWORD *)((char *)&v404[1] + 2) = v362 % 0x3E8;
          HIWORD(v404[2]) = 1024;
          *(_DWORD *)v405 = v371 / 0x3E8;
          *(_WORD *)&v405[4] = 1024;
          *(_DWORD *)&v405[6] = v371 % 0x3E8;
          *(_WORD *)&v405[10] = 1024;
          *(_DWORD *)&v405[12] = v373 / 0x3E8;
          *(_WORD *)&v405[16] = 1024;
          *(_DWORD *)&v405[18] = v373 % 0x3E8;
          *(_WORD *)&v405[22] = 1024;
          *(_DWORD *)&v405[24] = v372 / 0x3E8;
          *(_WORD *)&v405[28] = 1024;
          *(_DWORD *)&v405[30] = v372 % 0x3E8;
          *(_WORD *)&v405[34] = 1024;
          *(_DWORD *)&v405[36] = v379 / 0x3E8;
          *(_WORD *)&v405[40] = 1024;
          *(_DWORD *)&v405[42] = v379 % 0x3E8;
          *(_WORD *)&v405[46] = 2082;
          *(void *)&v405[48] = v383;
          *(_WORD *)&v405[56] = 1024;
          *(_DWORD *)&v405[58] = v382 / 0x3E8;
          *(_WORD *)&v405[62] = 1024;
          *(_DWORD *)&v405[64] = v382 % 0x3E8;
          *(_WORD *)&v405[68] = 1024;
          *(_DWORD *)&v405[70] = transport_connect_milliseconds / 0x3E8;
          *(_WORD *)&v405[74] = 1024;
          *(_DWORD *)&v405[76] = transport_connect_milliseconds % 0x3E8;
          v159 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                 "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                 "\tConnected Path: %{public}@\n"
                 "\tPrivacy Stance: %{public}s\n"
                 "\tDuration: %u.%03us, Bonjour @%u.%03us took %u.%03us, DNS @%u.%03us took %u.%03us, %{public}s @%u.%03us took %u.%03us";
          v160 = v57;
          v161 = 204;
        }

        _os_log_impl(&dword_181A5C000, v160, OS_LOG_TYPE_DEFAULT, v159, buf, v161);
        unint64_t v50 = v366;
        os_log_type_t v49 = v96;
      }

LABEL_234:
      if (v77) {
        free(v77);
      }
      uint64_t v51 = 0LL;
      if (v47 != &nw_protocol_ref_counted_handle) {
        goto LABEL_100;
      }
      goto LABEL_99;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v110 = "__nw_protocol_get_parameters";
    uint64_t v90 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v107 = 0;
    if (__nwlog_fault(v90, &type, &v107))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v91 = (os_log_s *)__nwlog_obj();
        os_log_type_t v92 = type;
        if (os_log_type_enabled(v91, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v110 = "__nw_protocol_get_parameters";
          v93 = "%{public}s called with null protocol";
LABEL_249:
          _os_log_impl(&dword_181A5C000, v91, v92, v93, buf, 0xCu);
        }
      }

      else if (v107)
      {
        os_log_type_t v101 = (char *)__nw_create_backtrace_string();
        os_log_type_t v91 = (os_log_s *)__nwlog_obj();
        os_log_type_t v92 = type;
        BOOL v102 = os_log_type_enabled(v91, type);
        if (v101)
        {
          if (v102)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v110 = "__nw_protocol_get_parameters";
            __int16 v111 = 2082;
            uint64_t v112 = (nw_protocol *)v101;
            _os_log_impl( &dword_181A5C000,  v91,  v92,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v101);
          goto LABEL_250;
        }

        if (v102)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v110 = "__nw_protocol_get_parameters";
          v93 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_249;
        }
      }

      else
      {
        os_log_type_t v91 = (os_log_s *)__nwlog_obj();
        os_log_type_t v92 = type;
        if (os_log_type_enabled(v91, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v110 = "__nw_protocol_get_parameters";
          v93 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_249;
        }
      }
    }

    goto LABEL_235;
  }

  uint64_t v4 = xpc_dictionary_create(0LL, 0LL, 0LL);
  uint64_t v5 = v4;
  if (!v4)
  {
    __nwlog_obj();
    uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v109 = "networkd_privileged_setup_feth_pair";
    os_log_type_t v91 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v106 = 0;
    if (__nwlog_fault(v91, &type, &v106))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v93 = type;
        if (os_log_type_enabled(v92, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v109 = "networkd_privileged_setup_feth_pair";
          _os_log_impl(&dword_181A5C000, v92, v93, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
        }
      }

      else if (v106)
      {
        os_log_type_t v100 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v101 = type;
        BOOL v102 = os_log_type_enabled(v92, type);
        if (v100)
        {
          if (v102)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v109 = "networkd_privileged_setup_feth_pair";
            __int16 v110 = 2082;
            *(void *)__int16 v111 = v100;
            _os_log_impl( &dword_181A5C000,  v92,  v101,  "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v100);
          goto LABEL_241;
        }

        if (v102)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v109 = "networkd_privileged_setup_feth_pair";
          _os_log_impl(&dword_181A5C000, v92, v101, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v105 = type;
        if (os_log_type_enabled(v92, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v109 = "networkd_privileged_setup_feth_pair";
          _os_log_impl( &dword_181A5C000,  v92,  v105,  "%{public}s xpc_dictionary_create failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

  if (default_input_handler) {
LABEL_85:
  }
    free((void *)default_input_handler);
LABEL_17:
  if (a2->output_handler != a3)
  {
    if (gLogDatapath)
    {
      uint64_t v13 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        uint64_t output_handler = a2->output_handler;
        name = "invalid";
        if (output_handler && output_handler->identifier) {
          name = output_handler->identifier->name;
        }
        identifier = (nw_protocol_identifier *)"invalid";
        if (a3)
        {
          if (a3->identifier) {
            identifier = a3->identifier;
          }
        }

        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_retry_connected";
        *(_WORD *)&_BYTE buf[12] = 2080;
        *(void *)&buf[14] = name;
        *(_WORD *)&buf[22] = 2048;
        v167 = output_handler;
        *(_WORD *)v168 = 2080;
        *(void *)&v168[2] = identifier;
        v169 = 2048;
        v170 = a3;
        _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_DEBUG,  "%{public}s connected protocol %s: %p is not our output_handler %s: %p, ignoring",  buf,  0x34u);
      }
    }

    return;
  }

  *((_DWORD *)a1 + 44) = 0;
  if (gLogDatapath)
  {
    os_log_type_t v100 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
    {
      os_log_type_t v101 = (*((unsigned __int8 *)a1 + 212) >> 4) & 1;
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_retry_send_output_frames";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = v101;
      _os_log_impl(&dword_181A5C000, v100, OS_LOG_TYPE_DEBUG, "%{public}s reissuing %{BOOL}d", buf, 0x12u);
    }
  }

  if ((*((_BYTE *)a1 + 212) & 0x10) != 0)
  {
    *((_BYTE *)a1 + 212) &= ~0x10u;
    *(void *)os_log_type_t type = 0LL;
    v163 = type;
    if (!*((_DWORD *)a1 + 47)) {
      goto LABEL_60;
    }
    uint64_t v24 = a2->output_handler;
    if (v24)
    {
      size_t v25 = *((unsigned int *)a1 + 45);
      os_log_type_t v26 = *((unsigned int *)a1 + 46);
      __int128 v27 = v24->handle;
      if (v27 == &nw_protocol_ref_counted_handle)
      {
        os_log_type_t v28 = v24[1].callbacks;
        if (v28) {
          v24[1].callbacks = (nw_protocol_callbacks *)((char *)&v28->add_input_handler + 1);
        }
      }

      BOOL v29 = a2->handle;
      if (v29 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v30 = a2[1].callbacks;
        if (v30) {
          a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v30->add_input_handler + 1);
        }
      }

      uint64_t v31 = v24->callbacks;
      if (v31)
      {
        get_output_frames = (uint64_t (*)(nw_protocol *, nw_protocol *, uint64_t, uint64_t))v31->get_output_frames;
        if (get_output_frames)
        {
          os_log_type_t v33 = get_output_frames(v24, a2, v25, v26);
          if (v29 != &nw_protocol_ref_counted_handle) {
            goto LABEL_56;
          }
          goto LABEL_55;
        }
      }

      __nwlog_obj();
      __int16 v111 = v24->identifier->name;
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_frames";
      if (!v111) {
        __int16 v111 = "invalid";
      }
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = v111;
      *(_WORD *)&buf[22] = 2048;
      v167 = v24;
      uint64_t v112 = (char *)_os_log_send_and_compose_impl();
      v165 = OS_LOG_TYPE_ERROR;
      v164 = 0;
      if (__nwlog_fault(v112, &v165, &v164))
      {
        if (v165 == OS_LOG_TYPE_FAULT)
        {
          __int16 v113 = (os_log_s *)__nwlog_obj();
          uint64_t v114 = v165;
          if (!os_log_type_enabled(v113, v165)) {
            goto LABEL_291;
          }
          __int16 v115 = v24->identifier->name;
          if (!v115) {
            __int16 v115 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_frames";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v115;
          *(_WORD *)&buf[22] = 2048;
          v167 = v24;
          uint64_t v116 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback";
LABEL_289:
          v147 = v113;
LABEL_290:
          _os_log_impl(&dword_181A5C000, v147, v114, v116, buf, 0x20u);
          goto LABEL_291;
        }

        if (!v164)
        {
          __int16 v113 = (os_log_s *)__nwlog_obj();
          uint64_t v114 = v165;
          if (!os_log_type_enabled(v113, v165)) {
            goto LABEL_291;
          }
          v146 = v24->identifier->name;
          if (!v146) {
            v146 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_frames";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v146;
          *(_WORD *)&buf[22] = 2048;
          v167 = v24;
          uint64_t v116 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, backtrace limit exceeded";
          goto LABEL_289;
        }

        char v126 = (char *)__nw_create_backtrace_string();
        os_log_type_t v127 = (os_log_s *)__nwlog_obj();
        uint64_t v114 = v165;
        v160 = v127;
        BOOL v128 = os_log_type_enabled(v127, v165);
        if (v126)
        {
          if (v128)
          {
            v129 = v24->identifier->name;
            if (!v129) {
              v129 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_frames";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = v129;
            *(_WORD *)&buf[22] = 2048;
            v167 = v24;
            *(_WORD *)v168 = 2082;
            *(void *)&v168[2] = v126;
            _os_log_impl( &dword_181A5C000,  v160,  v114,  "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v126);
        }

        else if (v128)
        {
          char v150 = v24->identifier->name;
          if (!v150) {
            char v150 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_frames";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v150;
          *(_WORD *)&buf[22] = 2048;
          v167 = v24;
          uint64_t v116 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, no backtrace";
          v147 = v160;
          goto LABEL_290;
        }
      }

      if (v117) {
        free(v117);
      }
LABEL_11:
      out_signature_length = 0LL;
      unint64_t v11 = networkd_settings_get_BOOL((const char *)nw_setting_disable_svcb);
      uint64_t v12 = (void *)MEMORY[0x1895F87A8];
      if (v11)
      {
        if ((*((_BYTE *)v3 + 346) & 0x20) == 0)
        {
          if (*((_BYTE *)v3 + 256))
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            uint64_t v13 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
              *(_WORD *)&_BYTE buf[12] = 2082;
              *(void *)&buf[14] = (char *)v3 + 256;
              _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s] Requesting SVCB disabled",  buf,  0x16u);
            }
          }

          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            BOOL v35 = (os_log_s *)(id)gLogObj;
            if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
            {
              BOOL v36 = *((_DWORD *)v3 + 85);
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = v36;
              _os_log_impl( &dword_181A5C000,  v35,  OS_LOG_TYPE_INFO,  "%{public}s [R%u] Requesting SVCB disabled",  buf,  0x12u);
            }
          }
        }

        goto LABEL_73;
      }

      size_t v14 = networkd_settings_get_BOOL((const char *)nw_setting_disable_svcb_router);
      os_log_type_t v15 = (void *)*((void *)v3 + 25);
      if (v15)
      {
        uint64_t v16 = nw_path_copy_interface(v15);

        if (v16) {
          uint64_t v17 = v14;
        }
        else {
          uint64_t v17 = 0;
        }
        if (v17)
        {
          uint64_t v18 = v16;
          uint64_t v19 = v18[24];

          if (v19 == 1 || (uint64_t v16 = v18, v20 = v18[24], v16, v20 == 3))
          {
            os_log_type_t v21 = (unsigned __int8 *)nw_path_copy_gateways(*((void **)v3 + 25));
            *(void *)buf = 0LL;
            *(void *)&buf[8] = buf;
            *(void *)&buf[16] = 0x2020000000LL;
            _BYTE buf[24] = 0;
            v149[0] = v12;
            v149[1] = 3221225472LL;
            v149[2] = ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke;
            v149[3] = &unk_189BC7960;
            uint64_t v22 = v3;
            char v150 = v22;
            os_log_type_t v151 = buf;
            nw_array_apply(v21, (uint64_t)v149);
            if (*(_BYTE *)(*(void *)&buf[8] + 24LL))
            {
              if ((*((_BYTE *)v22 + 346) & 0x20) != 0)
              {
LABEL_72:

                _Block_object_dispose(buf, 8);
                goto LABEL_73;
              }

              if (*((_BYTE *)v22 + 256))
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                os_log_type_t v23 = (os_log_s *)(id)gconnectionLogObj;
                if (!os_log_type_enabled(v23, OS_LOG_TYPE_INFO)) {
                  goto LABEL_71;
                }
                *(_DWORD *)v155 = 136446466;
                *(void *)&v155[4] = "nw_resolver_create_dns_getaddrinfo_locked";
                *(_WORD *)&v155[12] = 2082;
                *(void *)&v155[14] = (char *)v22 + 256;
                uint64_t v24 = "%{public}s [C%{public}s] Requesting SVCB disabled due to local router mitigation";
                size_t v25 = v23;
                os_log_type_t v26 = 22;
              }

              else
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                os_log_type_t v23 = (os_log_s *)(id)gLogObj;
                if (!os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
                {
LABEL_71:

                  goto LABEL_72;
                }

                uint64_t v42 = *((_DWORD *)v22 + 85);
                *(_DWORD *)v155 = 136446466;
                *(void *)&v155[4] = "nw_resolver_create_dns_getaddrinfo_locked";
                *(_WORD *)&v155[12] = 1024;
                *(_DWORD *)&v155[14] = v42;
                uint64_t v24 = "%{public}s [R%u] Requesting SVCB disabled due to local router mitigation";
                size_t v25 = v23;
                os_log_type_t v26 = 18;
              }

              _os_log_impl(&dword_181A5C000, v25, OS_LOG_TYPE_INFO, v24, v155, v26);
              goto LABEL_71;
            }

            _Block_object_dispose(buf, 8);
            uint64_t v16 = v18;
          }
        }
      }

      else
      {
        uint64_t v16 = 0LL;
      }

      if (v136)
      {
        __int128 v27 = v136;
        os_log_type_t v28 = v27->priority == 0;

        if (!v28) {
          goto LABEL_73;
        }
      }

      port = nw_endpoint_get_port(*((nw_endpoint_t *)v3 + 3));
      if (!port) {
        goto LABEL_73;
      }
      uint64_t v30 = (void *)*((void *)v3 + 2);
      if (v30)
      {
        uint64_t v31 = v30;
        BOOL v32 = v31[25];

        os_log_type_t v33 = v32;
        if (v33)
        {
          url_scheme = (const char *)nw_endpoint_get_url_scheme(v33);
          goto LABEL_57;
        }

        BOOL v37 = (void *)*((void *)v3 + 2);
      }

      else
      {
        BOOL v37 = 0LL;
      }

      if (nw_parameters_get_ip_protocol(v37) == 6)
      {
        BOOL v38 = "udp";
      }

      else
      {
        BOOL v38 = "tcp";
      }

      uint64_t v39 = getservbyport(__rev16(port), v38);
      if (!v39)
      {
LABEL_73:
        if ((*((char *)v3 + 347) & 0x80000000) == 0)
        {
          if ((*((_BYTE *)v3 + 346) & 0x20) != 0)
          {
LABEL_92:
            dnssd_getaddrinfo_add_resolver_uuid();
            goto LABEL_93;
          }

          if (*((_BYTE *)v3 + 256))
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            os_log_type_t v43 = (os_log_s *)(id)gconnectionLogObj;
            if (!os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_91;
            }
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = (char *)v3 + 256;
            *(_WORD *)&buf[22] = 1042;
            *(_DWORD *)&_BYTE buf[24] = 16;
            *(_WORD *)&buf[28] = 2098;
            *(void *)&buf[30] = (char *)v3 + 232;
            uint64_t v44 = "%{public}s [C%{public}s] Requesting resolver UUID %{public,uuid_t}.16P";
            os_log_type_t v45 = v43;
            uint64_t v46 = 38;
          }

          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v43 = (os_log_s *)(id)gLogObj;
            if (!os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
            {
LABEL_91:

              goto LABEL_92;
            }

            uint64_t v51 = *((_DWORD *)v3 + 85);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = v51;
            *(_WORD *)&buf[18] = 1042;
            *(_DWORD *)&buf[20] = 16;
            *(_WORD *)&_BYTE buf[24] = 2098;
            *(void *)&buf[26] = (char *)v3 + 232;
            uint64_t v44 = "%{public}s [R%u] Requesting resolver UUID %{public,uuid_t}.16P";
            os_log_type_t v45 = v43;
            uint64_t v46 = 34;
          }

          _os_log_impl(&dword_181A5C000, v45, OS_LOG_TYPE_DEBUG, v44, buf, v46);
          goto LABEL_91;
        }

        if ((*((_BYTE *)v3 + 346) & 0x20) != 0)
        {
LABEL_93:
          dnssd_getaddrinfo_set_use_failover();
          if (!nw_context_get_require_encrypted_name_resolution(*((void **)v3 + 4)))
          {
LABEL_112:
            os_log_type_t v62 = getpid();
            memset(v155, 0, sizeof(v155));
            v147 = 0u;
            v148 = 0u;
            uint64_t v63 = nw_copy_current_audit_token(v155);
            if (!nw_parameters_has_delegated_proc_pid(*((void **)v3 + 2), v62)
              && !nw_parameters_has_delegated_proc_uuid(*((void **)v3 + 2)))
            {
LABEL_158:
              objc_initWeak((id *)&location, v3);
              os_log_type_t v83 = v12;
              v141[1] = v12;
              v141[2] = (id)3221225472LL;
              v141[3] = ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_189;
              v141[4] = &unk_189BB6A70;
              os_log_type_t v84 = v3;
              v142 = v84;
              os_log_type_t v85 = v136;
              v143 = v85;
              os_log_type_t v144 = v6;
              dnssd_getaddrinfo_set_event_handler();
              if ((*((_BYTE *)v84 + 348) & 2) != 0)
              {
                if (nw_storage_copy_shared_token != -1) {
                  dispatch_once(&nw_storage_copy_shared_token, &__block_literal_global_44978);
                }
                BOOL v86 = (id)nw_storage_copy_shared_storage;
                BOOL v88 = (void *)*((void *)v3 + 3);
                unint64_t v87 = (void *)*((void *)v3 + 4);
                v138[0] = v83;
                v138[1] = 3221225472LL;
                v138[2] = ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_191;
                v138[3] = &unk_189BB6A98;
                objc_copyWeak(v141, (id *)&location);
                os_log_type_t v139 = v84;
                v140 = v85;
                nw_storage_lookup_items(v86, (uint64_t)"dns_cache", v88, v87, v138);

                objc_destroyWeak(v141);
              }

              objc_copyWeak(&v137, (id *)&location);
              os_log_type_t v89 = v84;
              uint64_t v90 = v85;
              dnssd_getaddrinfo_set_result_handler();
              if (v136)
              {
                os_log_type_t v91 = v90;
                os_log_type_t v92 = v6;
                if (v91->gai)
                {
                  dnssd_getaddrinfo_invalidate();
                  gai = v91->gai;
                  v91->gai = 0LL;

                  uint64_t v94 = v91->gai;
                }

                else
                {
                  uint64_t v94 = 0LL;
                }

                v91->gai = v92;
              }

              else
              {
                objc_storeStrong((id *)v89 + 6, v6);
              }

              dnssd_getaddrinfo_activate();
              if ((*((_BYTE *)v89 + 346) & 0x20) != 0) {
                goto LABEL_178;
              }
              if (*((_BYTE *)v89 + 256))
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                os_log_type_t v95 = (os_log_s *)(id)gconnectionLogObj;
                if (!os_log_type_enabled(v95, OS_LOG_TYPE_INFO)) {
                  goto LABEL_177;
                }
                logging_description = nw_endpoint_get_logging_description(*((void **)v3 + 3));
                v97 = *((_DWORD *)v3 + 20);
                BOOL v98 = *((void *)v89 + 6);
                *(_DWORD *)buf = 136447491;
                *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
                *(_WORD *)&_BYTE buf[12] = 2082;
                *(void *)&buf[14] = (char *)v89 + 256;
                *(_WORD *)&buf[22] = 2082;
                *(void *)&_BYTE buf[24] = logging_description;
                *(_WORD *)&buf[32] = 1024;
                *(_DWORD *)&buf[34] = v153;
                *(_WORD *)&buf[38] = 1024;
                *(_DWORD *)&buf[40] = v97;
                *(_WORD *)&buf[44] = 2117;
                *(void *)&buf[46] = v98;
                BOOL v99 = "%{public}s [C%{public}s] Starting host resolution %{public}s, flags %#x proto %u using %{sensitive}@";
                os_log_type_t v100 = v95;
                os_log_type_t v101 = 54;
              }

              else
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                os_log_type_t v95 = (os_log_s *)(id)gLogObj;
                if (!os_log_type_enabled(v95, OS_LOG_TYPE_INFO))
                {
LABEL_177:

LABEL_178:
                  objc_destroyWeak(&v137);

                  objc_destroyWeak((id *)&location);
LABEL_179:

                  v106 = v136;
                  goto LABEL_180;
                }

                BOOL v102 = *((_DWORD *)v89 + 85);
                BOOL v103 = nw_endpoint_get_logging_description(*((void **)v3 + 3));
                BOOL v104 = *((_DWORD *)v3 + 20);
                v105 = *((void *)v89 + 6);
                *(_DWORD *)buf = 136447491;
                *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = v102;
                *(_WORD *)&buf[18] = 2082;
                *(void *)&buf[20] = v103;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = v153;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = v104;
                *(_WORD *)&buf[40] = 2117;
                *(void *)&buf[42] = v105;
                BOOL v99 = "%{public}s [R%u] Starting host resolution %{public}s, flags %#x proto %u using %{sensitive}@";
                os_log_type_t v100 = v95;
                os_log_type_t v101 = 50;
              }

              _os_log_impl(&dword_181A5C000, v100, OS_LOG_TYPE_INFO, v99, buf, v101);
              goto LABEL_177;
            }

            if (v63)
            {
LABEL_239:
              if (nw_parameters_has_delegated_proc_audit_token(*((void **)v3 + 2), v155)
                && nw_parameters_get_effective_audit_token(*((void **)v3 + 2), &v147))
              {
                if ((*((_BYTE *)v3 + 346) & 0x20) != 0)
                {
LABEL_157:
                  BOOL v145 = v147;
                  v146 = v148;
                  dnssd_getaddrinfo_set_delegate_audit_token();
                  goto LABEL_158;
                }

                if (*((_BYTE *)v3 + 256))
                {
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                  }
                  uint64_t v64 = (os_log_s *)(id)gconnectionLogObj;
                  if (!os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG)) {
                    goto LABEL_156;
                  }
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
                  *(_WORD *)&_BYTE buf[12] = 2082;
                  *(void *)&buf[14] = (char *)v3 + 256;
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&_BYTE buf[24] = DWORD1(v148);
                  BOOL v65 = "%{public}s [C%{public}s] Delegating DNS service to audit_token_t PID %d";
                  char v66 = v64;
                  uint64_t v67 = 28;
                }

                else
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  uint64_t v64 = (os_log_s *)(id)gLogObj;
                  if (!os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
                  {
LABEL_156:

                    goto LABEL_157;
                  }

                  uint64_t v82 = *((_DWORD *)v3 + 85);
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
                  *(_WORD *)&_BYTE buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v82;
                  *(_WORD *)&buf[18] = 1024;
                  *(_DWORD *)&buf[20] = DWORD1(v148);
                  BOOL v65 = "%{public}s [R%u] Delegating DNS service to audit_token_t PID %d";
                  char v66 = v64;
                  uint64_t v67 = 24;
                }

                _os_log_impl(&dword_181A5C000, v66, OS_LOG_TYPE_DEBUG, v65, buf, v67);
                goto LABEL_156;
              }
            }

            has_delegated_proc_pid = nw_parameters_has_delegated_proc_pid(*((void **)v3 + 2), v62);
            uint64_t v69 = (void *)*((void *)v3 + 2);
            if (has_delegated_proc_pid)
            {
              pid = nw_parameters_get_pid(v69);
              if ((*((_BYTE *)v3 + 346) & 0x20) != 0)
              {
LABEL_143:
                dnssd_getaddrinfo_set_delegate_pid();
                goto LABEL_158;
              }

              if (*((_BYTE *)v3 + 256))
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                os_log_type_t v71 = (os_log_s *)(id)gconnectionLogObj;
                if (!os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG)) {
                  goto LABEL_142;
                }
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
                *(_WORD *)&_BYTE buf[12] = 2082;
                *(void *)&buf[14] = (char *)v3 + 256;
                *(_WORD *)&buf[22] = 1024;
                *(_DWORD *)&_BYTE buf[24] = pid;
                __int16 v72 = "%{public}s [C%{public}s] Delegating DNS service to PID %d";
                uint64_t v73 = v71;
                BOOL v74 = 28;
              }

              else
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                os_log_type_t v71 = (os_log_s *)(id)gLogObj;
                if (!os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
                {
LABEL_142:

                  goto LABEL_143;
                }

                os_log_type_t v79 = *((_DWORD *)v3 + 85);
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = v79;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = pid;
                __int16 v72 = "%{public}s [R%u] Delegating DNS service to PID %d";
                uint64_t v73 = v71;
                BOOL v74 = 24;
              }

              _os_log_impl(&dword_181A5C000, v73, OS_LOG_TYPE_DEBUG, v72, buf, v74);
              goto LABEL_142;
            }

            if (!nw_parameters_has_delegated_proc_uuid(v69)) {
              goto LABEL_158;
            }
            nw_parameters_get_e_proc_uuid(*((void **)v3 + 2), &location);
            if ((*((_BYTE *)v3 + 346) & 0x20) != 0)
            {
LABEL_148:
              dnssd_getaddrinfo_set_delegate_uuid();
              goto LABEL_158;
            }

            if (*((_BYTE *)v3 + 256))
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              os_log_type_t v75 = (os_log_s *)(id)gconnectionLogObj;
              if (!os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_147;
              }
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
              *(_WORD *)&_BYTE buf[12] = 2082;
              *(void *)&buf[14] = (char *)v3 + 256;
              *(_WORD *)&buf[22] = 1042;
              *(_DWORD *)&_BYTE buf[24] = 16;
              *(_WORD *)&buf[28] = 2098;
              *(void *)&buf[30] = &location;
              uint64_t v76 = "%{public}s [C%{public}s] Delegating DNS service to eUUID %{public,uuid_t}.16P";
              uint64_t v77 = v75;
              os_log_type_t v78 = 38;
            }

            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v75 = (os_log_s *)(id)gLogObj;
              if (!os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
              {
LABEL_147:

                goto LABEL_148;
              }

              BOOL v80 = *((_DWORD *)v3 + 85);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = v80;
              *(_WORD *)&buf[18] = 1042;
              *(_DWORD *)&buf[20] = 16;
              *(_WORD *)&_BYTE buf[24] = 2098;
              *(void *)&buf[26] = &location;
              uint64_t v76 = "%{public}s [R%u] Delegating DNS service to eUUID %{public,uuid_t}.16P";
              uint64_t v77 = v75;
              os_log_type_t v78 = 34;
            }

            _os_log_impl(&dword_181A5C000, v77, OS_LOG_TYPE_DEBUG, v76, buf, v78);
            goto LABEL_147;
          }

          id v52 = nw_context_copy_fallback_resolver_config(*((void **)v3 + 4));
          char v53 = v52;
          if (v52)
          {
            BOOL v54 = nw_resolver_config_copy_dictionary(v52);
            if ((*((_BYTE *)v3 + 346) & 0x20) != 0) {
              goto LABEL_111;
            }
          }

          else
          {
            BOOL v54 = 0LL;
            if ((*((_BYTE *)v3 + 346) & 0x20) != 0)
            {
LABEL_111:
              dnssd_getaddrinfo_set_need_encrypted_query();

              goto LABEL_112;
            }
          }

          if (*((_BYTE *)v3 + 256))
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            uint64_t v55 = (os_log_s *)(id)gconnectionLogObj;
            if (!os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_110;
            }
            BOOL v56 = "";
            *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
            *(_DWORD *)buf = 136446722;
            if (!v54) {
              BOOL v56 = "out";
            }
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = (char *)v3 + 256;
            *(_WORD *)&buf[22] = 2080;
            *(void *)&_BYTE buf[24] = v56;
            __int16 v57 = "%{public}s [C%{public}s] Requiring encrypted resolution with%s fallback config";
            __int16 v58 = v55;
            __int16 v59 = 32;
          }

          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v55 = (os_log_s *)(id)gLogObj;
            if (!os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
            {
LABEL_110:

              goto LABEL_111;
            }

            os_log_type_t v60 = *((_DWORD *)v3 + 85);
            __int16 v61 = "";
            *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
            *(_DWORD *)buf = 136446722;
            if (!v54) {
              __int16 v61 = "out";
            }
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = v60;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = v61;
            __int16 v57 = "%{public}s [R%u] Requiring encrypted resolution with%s fallback config";
            __int16 v58 = v55;
            __int16 v59 = 28;
          }

          _os_log_impl(&dword_181A5C000, v58, OS_LOG_TYPE_DEBUG, v57, buf, v59);
          goto LABEL_110;
        }

        if (*((_BYTE *)v3 + 256))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          BOOL v47 = (os_log_s *)(id)gconnectionLogObj;
          if (!os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_152;
          }
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = (char *)v3 + 256;
          *(_WORD *)&buf[22] = 1042;
          *(_DWORD *)&_BYTE buf[24] = 16;
          *(_WORD *)&buf[28] = 2098;
          *(void *)&buf[30] = (char *)v3 + 232;
          uint64_t v48 = "%{public}s [C%{public}s] Requesting failover from UUID %{public,uuid_t}.16P";
          os_log_type_t v49 = v47;
          unint64_t v50 = 38;
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v47 = (os_log_s *)(id)gLogObj;
          if (!os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
          {
LABEL_152:

            goto LABEL_93;
          }

          uint64_t v81 = *((_DWORD *)v3 + 85);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = v81;
          *(_WORD *)&buf[18] = 1042;
          *(_DWORD *)&buf[20] = 16;
          *(_WORD *)&_BYTE buf[24] = 2098;
          *(void *)&buf[26] = (char *)v3 + 232;
          uint64_t v48 = "%{public}s [R%u] Requesting failover from UUID %{public,uuid_t}.16P";
          os_log_type_t v49 = v47;
          unint64_t v50 = 34;
        }

        _os_log_impl(&dword_181A5C000, v49, OS_LOG_TYPE_DEBUG, v48, buf, v50);
        goto LABEL_152;
      }

      os_log_type_t v33 = 0LL;
      url_scheme = v39->s_name;
LABEL_57:

      if (url_scheme)
      {
        if (!strcmp(url_scheme, "https") || !strcmp(url_scheme, "http") || port == 80 || port == 443)
        {
          url_scheme = "https";
          port = 443;
        }

        BOOL v40 = _os_feature_enabled_impl();
        if (port == 443) {
          BOOL v41 = 1;
        }
        else {
          BOOL v41 = v40;
        }
        if (v41 == 1)
        {
          v167 = 0u;
          v168 = 0u;
          v165 = 0u;
          v166 = 0u;
          v163 = 0u;
          v164 = 0u;
          v161 = 0u;
          v162 = 0u;
          v159 = 0u;
          v160 = 0u;
          uint64_t v157 = 0u;
          v158 = 0u;
          memset(buf, 0, sizeof(buf));
          snprintf((char *)buf, 0x100uLL, "_%u._%s", port, url_scheme);
          dnssd_getaddrinfo_set_service_scheme();
          *((_BYTE *)v3 + 347) |= 2u;
        }
      }

      goto LABEL_73;
    }

    __nwlog_obj();
    uint64_t v112 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
    __int16 v113 = (char *)_os_log_send_and_compose_impl();

    v155[0] = 16;
    LOBYTE(v147) = 0;
    if (__nwlog_fault(v113, v155, &v147))
    {
      if (v155[0] == 17)
      {
        __nwlog_obj();
        uint64_t v114 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __int16 v115 = v155[0];
        if (os_log_type_enabled(v114, (os_log_type_t)v155[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
          _os_log_impl(&dword_181A5C000, v114, v115, "%{public}s called with null gai", buf, 0xCu);
        }
      }

      else
      {
        if ((_BYTE)v147)
        {
          uint64_t v123 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          int v124 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v125 = v155[0];
          char v126 = os_log_type_enabled(v124, (os_log_type_t)v155[0]);
          if (v123)
          {
            if (v126)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
              *(_WORD *)&_BYTE buf[12] = 2082;
              *(void *)&buf[14] = v123;
              _os_log_impl( &dword_181A5C000,  v124,  v125,  "%{public}s called with null gai, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v123);
          }

          else
          {
            if (v126)
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
              _os_log_impl(&dword_181A5C000, v124, v125, "%{public}s called with null gai, no backtrace", buf, 0xCu);
            }
          }

          goto LABEL_229;
        }

        __nwlog_obj();
        uint64_t v114 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __int16 v132 = v155[0];
        if (os_log_type_enabled(v114, (os_log_type_t)v155[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
          _os_log_impl( &dword_181A5C000,  v114,  v132,  "%{public}s called with null gai, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

      free(v35);
      goto LABEL_32;
    }

    __nwlog_obj();
    os_log_type_t v34 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
    BOOL v35 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v164) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v37 = type[0];
      if (os_log_type_enabled(v36, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
        _os_log_impl(&dword_181A5C000, v36, v37, "%{public}s called with null group", buf, 0xCu);
      }
    }

    else if ((_BYTE)v164)
    {
      BOOL v40 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v41 = type[0];
      uint64_t v42 = os_log_type_enabled(v36, type[0]);
      if (v40)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v40;
          _os_log_impl( &dword_181A5C000,  v36,  v41,  "%{public}s called with null group, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v40);
        goto LABEL_233;
      }

      if (v42)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
        _os_log_impl(&dword_181A5C000, v36, v41, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v110 = type[0];
      if (os_log_type_enabled(v36, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
        _os_log_impl( &dword_181A5C000,  v36,  v110,  "%{public}s called with null group, backtrace limit exceeded",  buf,  0xCu);
      }
    }

          v146 = *(id *)(a1 + 32);
          v147 = v146;
          if (v146)
          {
            nw_context_assert_queue(*((void **)v146 + 3));
            v148 = (unsigned __int8 *)v147[53];
            if (v148)
            {
              *(void *)buf = MEMORY[0x1895F87A8];
              *(void *)&buf[8] = 3221225472LL;
              *(void *)&buf[16] = ___ZL62nw_connection_take_initial_data_transfer_snapshots_on_nw_queueP24NWConcrete_nw_connection_block_invoke;
              *(void *)&_BYTE buf[24] = &unk_189BC85B0;
              *(void *)v524 = v147;
              nw_array_apply(v148, (uint64_t)buf);
            }

            goto LABEL_237;
          }

          __nwlog_obj();
          v453 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_take_initial_data_transfer_snapshots_on_nw_queue";
          v454 = (char *)_os_log_send_and_compose_impl();

          aBlock[0] = 16;
          v537[0] = 0;
          if (__nwlog_fault(v454, aBlock, v537))
          {
            if (aBlock[0] == 17)
            {
              __nwlog_obj();
              v455 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              v456 = aBlock[0];
              if (os_log_type_enabled(v455, (os_log_type_t)aBlock[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_connection_take_initial_data_transfer_snapshots_on_nw_queue";
                _os_log_impl(&dword_181A5C000, v455, v456, "%{public}s called with null connection", buf, 0xCu);
              }
            }

            else if (v537[0])
            {
              v472 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v455 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              v473 = aBlock[0];
              v474 = os_log_type_enabled(v455, (os_log_type_t)aBlock[0]);
              if (v472)
              {
                if (v474)
                {
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_connection_take_initial_data_transfer_snapshots_on_nw_queue";
                  *(_WORD *)&_BYTE buf[12] = 2082;
                  *(void *)&buf[14] = v472;
                  _os_log_impl( &dword_181A5C000,  v455,  v473,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v472);
                goto LABEL_818;
              }

              if (v474)
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_connection_take_initial_data_transfer_snapshots_on_nw_queue";
                _os_log_impl( &dword_181A5C000,  v455,  v473,  "%{public}s called with null connection, no backtrace",  buf,  0xCu);
              }
            }

            else
            {
              __nwlog_obj();
              v455 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              v492 = aBlock[0];
              if (os_log_type_enabled(v455, (os_log_type_t)aBlock[0]))
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_connection_take_initial_data_transfer_snapshots_on_nw_queue";
                _os_log_impl( &dword_181A5C000,  v455,  v492,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
              }
            }
          }

          if (gLogDatapath)
          {
            if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
            }
            v175 = (os_log_s *)gprivacy_proxyLogObj;
            if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
            {
              v176 = *(void *)(a1 + 40);
              v177 = v176 == 0;
              if (v176) {
                v178 = (const char *)(v176 + 531);
              }
              else {
                v178 = "";
              }
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_masque_add_extra_headers_to_request_block_invoke";
              *(void *)&buf[14] = v178;
              v179 = " ";
              *(_WORD *)&_BYTE buf[12] = 2082;
              if (v177) {
                v179 = "";
              }
              *(_WORD *)&buf[22] = 2080;
              *(void *)&_BYTE buf[24] = v179;
              *(_WORD *)&buf[32] = 2082;
              *(void *)&buf[34] = v3;
              _os_log_impl( &dword_181A5C000,  v175,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sUsing cached geohash hint %{public}s",  buf,  0x2Au);
            }
          }

  CFRelease(v45);
  os_log_type_t v109 = *(const void **)(a1 + 216);
  if (v109)
  {
    CFRelease(v109);
    *(void *)(a1 + 216) = 0LL;
  }

  __int16 v110 = *(const void **)(a1 + 192);
  if (v110)
  {
    CFRelease(v110);
    *(void *)(a1 + 192) = 0LL;
  }

  __int16 v111 = *(const void **)(a1 + 208);
  if (v111)
  {
    CFRelease(v111);
    *(void *)(a1 + 208) = 0LL;
  }

  uint64_t v112 = *(void **)(a1 + 160);
  if (!v112 || (__int16 v113 = (id *)os_retain(v112)) == 0LL)
  {
    uint64_t v114 = *(void **)(a1 + 152);
    if (v114)
    {
      __int16 v115 = (id *)os_retain(v114);
      if (v115)
      {
        __int16 v113 = v115;
        uint64_t v116 = nw_endpoint_copy_parent_endpoint(v115);
        if (v116)
        {
          uint64_t v117 = v116;
          do
          {
            os_release(v113);
            __int16 v113 = (id *)v117;
            uint64_t v117 = v113[14];
          }

          while (v117);
        }

        goto LABEL_247;
      }
    }

    if ((*(_WORD *)(a1 + 368) & 0x80) == 0)
    {
      int v124 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&buf[22] = 2080;
        v171 = " ";
        _os_log_impl( &dword_181A5C000,  v124,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sunable to derive the correct proxy url",  buf,  0x20u);
      }
    }

    os_log_type_t v101 = Request;
LABEL_210:
    CFRelease(v101);
    if (!v29) {
      goto LABEL_212;
    }
    goto LABEL_211;
  }

        if (v100) {
          free(v100);
        }
        goto LABEL_236;
      }

      if (*(_BYTE *)(v11 + 158) & 1 | (gLogDatapath == 0)) {
        goto LABEL_238;
      }
      BOOL v32 = (os_log_s *)__nwlog_obj();
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_238;
      }
      __int16 v70 = *(void *)(v11 + 488);
      os_log_type_t v71 = *(_DWORD *)(*(void *)(v11 + 480) + 372LL);
      __int16 v72 = *(_DWORD *)(v11 + 860);
      if (v70) {
        LODWORD(v70) = *(_DWORD *)(v70 + 424);
      }
      *(_DWORD *)buf = 136447490;
      *(void *)&uint8_t buf[4] = "nw_http1_detect_next_request";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = v11 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(void *)&_BYTE buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v71;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v72;
      *(_WORD *)&buf[44] = 1024;
      *(_DWORD *)&buf[46] = v70;
      BOOL v36 = "%{public}s %{public}s%s<i%u:c%u:s%u> read 0 frames on non-idle connection, not deferring new flow";
LABEL_78:
      _os_log_impl(&dword_181A5C000, v32, OS_LOG_TYPE_DEBUG, v36, buf, 0x32u);
      goto LABEL_238;
    }

    if ((*(_BYTE *)(v8 + 158) & 1) == 0)
    {
      v197 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v197, OS_LOG_TYPE_ERROR))
      {
        v198 = *(_DWORD *)(v8 + 372);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http1_new_flow_valid";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = v8 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&_BYTE buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v198;
        _os_log_impl( &dword_181A5C000,  v197,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> listen handler has no new_flow callback, ignoring incoming flow",  buf,  0x26u);
      }
    }

    v199 = *(unsigned __int16 *)(v11 + 872);
    v200 = v199 | (*(unsigned __int8 *)(v11 + 874) << 16);
    if ((v199 & 0x100) != 0)
    {
      if ((*(_BYTE *)(v11 + 158) & 1) != 0) {
        goto LABEL_238;
      }
      if (!gLogDatapath) {
        goto LABEL_238;
      }
      BOOL v32 = (os_log_s *)__nwlog_obj();
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_238;
      }
      v248 = *(void *)(v11 + 488);
      v249 = *(_DWORD *)(*(void *)(v11 + 480) + 372LL);
      v250 = *(_DWORD *)(v11 + 860);
      if (v248) {
        LODWORD(v248) = *(_DWORD *)(v248 + 424);
      }
      *(_DWORD *)buf = 136447490;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_close";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = v11 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(void *)&_BYTE buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v249;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v250;
      *(_WORD *)&buf[44] = 1024;
      *(_DWORD *)&buf[46] = v248;
      BOOL v36 = "%{public}s %{public}s%s<i%u:c%u:s%u> already closed";
      goto LABEL_78;
    }

    v201 = (_WORD *)(v11 + 872);
    *(_BYTE *)(v11 + 874) = BYTE2(v200);
    *(_WORD *)(v11 + 872) = v200 | 0x100;
    if ((*(_BYTE *)(v11 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v337 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v337, OS_LOG_TYPE_DEBUG))
        {
          v338 = *(void *)(v11 + 488);
          v339 = *(_DWORD *)(*(void *)(v11 + 480) + 372LL);
          v340 = *(_DWORD *)(v11 + 860);
          if (v338) {
            LODWORD(v338) = *(_DWORD *)(v338 + 424);
          }
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_close";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v11 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(void *)&_BYTE buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v339;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v340;
          *(_WORD *)&buf[44] = 1024;
          *(_DWORD *)&buf[46] = v338;
          _os_log_impl( &dword_181A5C000,  v337,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> http connection closed, increasing pool width",  buf,  0x32u);
        }
      }
    }

    v202 = *(void *)(v11 + 480);
    if (!v202)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
      v341 = (char *)_os_log_send_and_compose_impl();
      v398[0] = 16;
      v394[0] = OS_LOG_TYPE_DEFAULT;
      if (v398[0] == 17)
      {
        v342 = (os_log_s *)__nwlog_obj();
        v343 = v398[0];
        if (!os_log_type_enabled(v342, (os_log_type_t)v398[0])) {
          goto LABEL_769;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
        v344 = "%{public}s called with null http1";
      }

      else if (v394[0])
      {
        v360 = (char *)__nw_create_backtrace_string();
        v342 = (os_log_s *)__nwlog_obj();
        v343 = v398[0];
        v361 = os_log_type_enabled(v342, (os_log_type_t)v398[0]);
        if (v360)
        {
          if (v361)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = v360;
            _os_log_impl( &dword_181A5C000,  v342,  v343,  "%{public}s called with null http1, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v360);
          goto LABEL_769;
        }

        if (!v361) {
          goto LABEL_769;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
        v344 = "%{public}s called with null http1, no backtrace";
      }

      else
      {
        v342 = (os_log_s *)__nwlog_obj();
        v343 = v398[0];
        if (!os_log_type_enabled(v342, (os_log_type_t)v398[0])) {
          goto LABEL_769;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
        v344 = "%{public}s called with null http1, backtrace limit exceeded";
      }

      v382 = buf;
LABEL_768:
      _os_log_impl(&dword_181A5C000, v342, v343, v344, v382, 0xCu);
      goto LABEL_769;
    }

    v203 = (unsigned __int16)*v201;
    v204 = v203 | (*(unsigned __int8 *)(v11 + 874) << 16);
    if ((v203 & 0x800) != 0)
    {
      if ((*(_BYTE *)(v11 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v256 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v256, OS_LOG_TYPE_DEBUG))
          {
            v257 = *(void *)(v11 + 488);
            v258 = *(_DWORD *)(*(void *)(v11 + 480) + 372LL);
            v259 = *(_DWORD *)(v11 + 860);
            if (v257) {
              LODWORD(v257) = *(_DWORD *)(v257 + 424);
            }
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = v11 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(void *)&_BYTE buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v258;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v259;
            *(_WORD *)&buf[44] = 1024;
            *(_DWORD *)&buf[46] = v257;
            _os_log_impl( &dword_181A5C000,  v256,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> Connection already marked as not-reusable, ignoring",  buf,  0x32u);
          }
        }
      }

      goto LABEL_592;
    }

    *(_BYTE *)(v11 + 874) = BYTE2(v204);
    *v201 = v204 | 0x800;
    v205 = *(unsigned int *)(v202 + 368) + 1LL;
    v206 = v205 << 31 >> 31;
    *(_DWORD *)(v202 + 368) = v205;
    if (v206 == v205 && (v206 & 0x8000000000000000LL) == 0)
    {
LABEL_587:
      if ((*(_BYTE *)(v11 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v355 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v355, OS_LOG_TYPE_DEBUG))
          {
            v356 = *(void *)(v11 + 488);
            v357 = *(_DWORD *)(*(void *)(v11 + 480) + 372LL);
            v358 = *(_DWORD *)(v11 + 860);
            if (v356) {
              LODWORD(v356) = *(_DWORD *)(v356 + 424);
            }
            v359 = *(_DWORD *)(v202 + 368) + *(_DWORD *)(v202 + 364);
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = v11 + 74;
            *(_WORD *)&buf[22] = 2080;
            *(void *)&_BYTE buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v357;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v358;
            *(_WORD *)&buf[44] = 1024;
            *(_DWORD *)&buf[46] = v356;
            *(_WORD *)&buf[50] = 1024;
            *(_DWORD *)&buf[52] = v359;
            _os_log_impl( &dword_181A5C000,  v355,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u",  buf,  0x38u);
          }
        }
      }

      v309 = *(void **)(v11 + 496);
      if (!v309)
      {
        __nwlog_obj();
        *(_DWORD *)v398 = 136446210;
        *(void *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
        v341 = (char *)_os_log_send_and_compose_impl();
        v394[0] = OS_LOG_TYPE_ERROR;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        if (v394[0] == OS_LOG_TYPE_FAULT)
        {
          v342 = (os_log_s *)__nwlog_obj();
          v343 = v394[0];
          if (!os_log_type_enabled(v342, v394[0])) {
            goto LABEL_769;
          }
          *(_DWORD *)v398 = 136446210;
          *(void *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v344 = "%{public}s called with null http1_connection->context";
LABEL_767:
          v382 = v398;
          goto LABEL_768;
        }

        if (type == OS_LOG_TYPE_DEFAULT)
        {
          v342 = (os_log_s *)__nwlog_obj();
          v343 = v394[0];
          if (!os_log_type_enabled(v342, v394[0])) {
            goto LABEL_769;
          }
          *(_DWORD *)v398 = 136446210;
          *(void *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v344 = "%{public}s called with null http1_connection->context, backtrace limit exceeded";
          goto LABEL_767;
        }

        v377 = (char *)__nw_create_backtrace_string();
        v342 = (os_log_s *)__nwlog_obj();
        v343 = v394[0];
        v378 = os_log_type_enabled(v342, v394[0]);
        if (!v377)
        {
          if (!v378) {
            goto LABEL_769;
          }
          *(_DWORD *)v398 = 136446210;
          *(void *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          v344 = "%{public}s called with null http1_connection->context, no backtrace";
          goto LABEL_767;
        }

        if (v378)
        {
          *(_DWORD *)v398 = 136446466;
          *(void *)&v398[4] = "nw_http1_match_idle_connection_with_pending_stream_async";
          *(_WORD *)&v398[12] = 2082;
          *(void *)&v398[14] = v377;
          v379 = "%{public}s called with null http1_connection->context, dumping backtrace:%{public}s";
LABEL_734:
          _os_log_impl(&dword_181A5C000, v342, v343, v379, v398, 0x16u);
        }

        if (v121) {
          free(v121);
        }
        uint64_t v16 = 0;
        uint64_t v17 = 0;
LABEL_16:
        uint64_t v18 = v16 | (4 * v17);
        uint64_t v19 = *(void *)(a1 + 40);
        LODWORD(v146) = v18;
        char v20 = *(unsigned __int8 *)(v19 + 304);
        if (v20 == 30)
        {
          if (setsockopt(*(_DWORD *)(v19 + 172), 41, 36, &v146, 4u) < 0)
          {
            uint64_t v31 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v22 = (os_log_s *)gLogObj;
            if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
              goto LABEL_39;
            }
            *(_DWORD *)applier = 136446466;
            *(void *)&applier[4] = "nw_socket_service_writes_block_invoke";
            *(_WORD *)&applier[12] = 1024;
            *(_DWORD *)&applier[14] = v31;
            os_log_type_t v23 = "%{public}s setsockopt IPV6_TCLASS %{darwin.errno}d";
LABEL_38:
            _os_log_impl(&dword_181A5C000, v22, OS_LOG_TYPE_ERROR, v23, applier, 0x12u);
LABEL_39:
            if (a2)
            {
              BOOL v32 = *(_DWORD *)(a2 + 176);
              if (v32 > 3145999)
              {
                if (v32 <= 3670319)
                {
                  if (v32 == 3146000)
                  {
                    os_log_type_t v33 = 5;
                    goto LABEL_61;
                  }

                  if (v32 == 3670272)
                  {
                    os_log_type_t v33 = 3;
                    goto LABEL_61;
                  }

                  goto LABEL_62;
                }

                if (v32 == 3670320)
                {
                  os_log_type_t v33 = 2;
                  goto LABEL_61;
                }

                if (v32 == 4194688)
                {
                  os_log_type_t v33 = 4;
                  goto LABEL_61;
                }

                if (v32 != 4718992) {
                  goto LABEL_62;
                }
              }

              else
              {
                if (v32 <= 1572879)
                {
                  os_log_type_t v33 = 1;
                  if (v32 == 524432 || v32 == 1048704) {
                    goto LABEL_61;
                  }
                  goto LABEL_62;
                }

                if (v32 != 1572880)
                {
                  if (v32 == 2097184)
                  {
                    os_log_type_t v33 = 7;
                    goto LABEL_61;
                  }

                  if (v32 == 2621728)
                  {
                    os_log_type_t v33 = 6;
LABEL_61:
                    v146 = 0xFFFF00000010LL;
                    v138.msg_controllen += 16;
                    LODWORD(v147) = 4374;
                    HIDWORD(v147) = v33;
                    v138.msg_control = &v146;
                  }

LABEL_250:
    if (v90) {
      free(v90);
    }
    uint64_t v51 = 0LL;
    goto LABEL_100;
  }

  if (v69) {
    free(v69);
  }
LABEL_148:
  *(_BYTE *)(v7 + 142) &= ~2u;
  uint64_t v73 = *(void *)(v6 + 88);
  if (v73) {
    nw_protocol_plugin_retry_set_getting_input_frames(v73, (uint64_t)a1, 0);
  }
  if (*(_BYTE *)(v7 + 140) != 2)
  {
    BOOL v74 = a1;
    if (!*(_DWORD *)(v7 + 136)) {
      goto LABEL_166;
    }
    *(_DWORD *)(v7 + 136) = 0;
    os_log_type_t v75 = a1[4];
    uint64_t v76 = (void *)a1[5];
    if (v76 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v77 = a1[11];
      if (v77) {
        a1[11] = v77 + 1;
      }
    }

    if (v75)
    {
      os_log_type_t v78 = *(void **)(v75 + 40);
      if (v78 == &nw_protocol_ref_counted_handle)
      {
        os_log_type_t v79 = *(void *)(v75 + 88);
        if (v79) {
          *(void *)(v75 + 88) = v79 + 1;
        }
      }

      BOOL v80 = a1[3];
      if (v80)
      {
        uint64_t v81 = *(void (**)(void *, uint64_t))(v80 + 56);
        if (v81)
        {
          v81(a1, v75);
LABEL_162:
          BOOL v74 = a1;
          if (v78 != &nw_protocol_ref_counted_handle
            || *(_UNKNOWN **)(v75 + 40) != &nw_protocol_ref_counted_handle
            || (BOOL v104 = *(void *)(v75 + 88)) == 0
            || (v105 = v104 - 1, (*(void *)(v75 + 88) = v105) != 0LL))
          {
LABEL_164:
            if (v76 == &nw_protocol_ref_counted_handle && (_UNKNOWN *)v74[5] == &nw_protocol_ref_counted_handle)
            {
              BOOL v99 = v74[11];
              if (v99)
              {
                os_log_type_t v100 = v99 - 1;
                v74[11] = v100;
                if (!v100)
                {
                  os_log_type_t v101 = (void (**)(void))v74[8];
                  if (v101)
                  {
                    v74[8] = 0LL;
                    v101[2](v101);
                    _Block_release(v101);
                    BOOL v74 = a1;
                  }

                  BOOL v102 = v74;
                  if ((v74[9] & 1) != 0)
                  {
                    BOOL v103 = (const void *)v74[8];
                    if (v103) {
                      _Block_release(v103);
                    }
                  }

                  free(v102);
                  BOOL v74 = v102;
                }
              }
            }

                goto LABEL_251;
              }

              if (v128[0] == OS_LOG_TYPE_DEFAULT)
              {
                __nwlog_obj();
                uint64_t v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                uint64_t v116 = type[0];
                if (os_log_type_enabled(v69, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  v133 = "__nw_protocol_output_available";
                  _os_log_impl( &dword_181A5C000,  v69,  v116,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
                }

                goto LABEL_250;
              }

              unint64_t v50 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              uint64_t v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              BOOL v96 = type[0];
              v97 = os_log_type_enabled(v69, type[0]);
              if (!v50)
              {
                if (v97)
                {
                  *(_DWORD *)buf = 136446210;
                  v133 = "__nw_protocol_output_available";
                  _os_log_impl( &dword_181A5C000,  v69,  v96,  "%{public}s called with null protocol, no backtrace",  buf,  0xCu);
                }

                goto LABEL_250;
              }

              if (v97)
              {
                *(_DWORD *)buf = 136446466;
                v133 = "__nw_protocol_output_available";
                __int16 v134 = 2082;
                BOOL v135 = v50;
                _os_log_impl( &dword_181A5C000,  v69,  v96,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
              }

LABEL_100:
              free(v50);
              if (!v37) {
                goto LABEL_58;
              }
              goto LABEL_252;
            }
          }

          __nwlog_obj();
          os_log_type_t v75 = (void *)objc_claimAutoreleasedReturnValue();
          uint64_t v76 = *(const char **)(v16 + 16);
          *(_DWORD *)buf = 136446722;
          v133 = "__nw_protocol_finalize_output_frames";
          if (!v76) {
            uint64_t v76 = "invalid";
          }
          __int16 v134 = 2082;
          BOOL v135 = (void *)v76;
          uint64_t v136 = 2048;
          uint64_t v77 = v16;
          v137 = (const char *)v16;
          os_log_type_t v78 = (char *)_os_log_send_and_compose_impl();

          v128[0] = OS_LOG_TYPE_ERROR;
          os_log_type_t v127 = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v78, v128, &v127))
          {
            if (v128[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              os_log_type_t v79 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              BOOL v80 = v128[0];
              if (os_log_type_enabled(v79, v128[0]))
              {
                uint64_t v81 = *(const char **)(v77 + 16);
                if (!v81) {
                  uint64_t v81 = "invalid";
                }
                *(_DWORD *)buf = 136446722;
                v133 = "__nw_protocol_finalize_output_frames";
                __int16 v134 = 2082;
                BOOL v135 = (void *)v81;
                uint64_t v136 = 2048;
                v137 = (const char *)v77;
                _os_log_impl( &dword_181A5C000,  v79,  v80,  "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback",  buf,  0x20u);
              }

                if (v100) {
                  free(v100);
                }
                BOOL v98 = v111;
                v97 = v112;
                goto LABEL_216;
              }

LABEL_251:
            os_log_type_t v71 = (char *)v70;
LABEL_252:
            uint64_t v13 = v359;
            if (v71) {
              free(v71);
            }
            goto LABEL_45;
          case 0x19u:
            v361[0] = MEMORY[0x1895F87A8];
            v361[1] = 3221225472LL;
            v361[2] = ___ZL14nw_flow_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke_91;
            v361[3] = &unk_189BB8610;
            v363 = a1;
            v362 = v14;
            nw_endpoint_handler_access_parent_flow_handler(v362, v361);

            goto LABEL_44;
          default:
            goto LABEL_45;
        }
      }

      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      os_log_type_t v34 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        BOOL v35 = v32;

        BOOL v36 = v35;
        BOOL v37 = *((_BYTE *)v32 + 268);

        BOOL v38 = "dry-run ";
        if ((v37 & 1) == 0) {
          BOOL v38 = "";
        }
        v349 = v38;
        uint64_t v39 = nw_endpoint_handler_copy_endpoint(v36);
        v345 = nw_endpoint_get_logging_description(v39);
        BOOL v40 = v36;
        BOOL v41 = v40;
        uint64_t v42 = v356[30];
        log = v34;
        else {
          os_log_type_t v43 = off_189BBBBF0[v42];
        }
        v343 = v43;
        v340 = v39;
        uint64_t v48 = v35->id_str;

        os_log_type_t v49 = v41;
        unint64_t v50 = v49;
        uint64_t v51 = "path";
        switch(v358->mode)
        {
          case 0:
            break;
          case 1:
            uint64_t v51 = "resolver";
            break;
          case 2:
            uint64_t v51 = nw_endpoint_flow_mode_string(v49[31]);
            break;
          case 3:
            uint64_t v51 = "proxy";
            break;
          case 4:
            uint64_t v51 = "fallback";
            break;
          case 5:
            uint64_t v51 = "transform";
            break;
          default:
            uint64_t v51 = "unknown-mode";
            break;
        }

        __int16 v57 = v50;
        os_unfair_lock_lock((os_unfair_lock_t)v57 + 28);
        __int16 v58 = v57[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v57 + 28);

        __int16 v59 = v58;
        os_log_type_t v60 = v59;
        if (a3 > 0x1A) {
          __int16 v61 = "unknown";
        }
        else {
          __int16 v61 = off_189BBE330[a3];
        }
        *(_DWORD *)buf = 136448002;
        v373 = "nw_flow_notify";
        v374 = 2082;
        v375 = v48;
        v376 = 2082;
        v377 = v349;
        v378 = 2082;
        v379 = v345;
        v380 = 2082;
        v381 = v343;
        v382 = 2082;
        v383 = v51;
        v384 = 2114;
        v385 = v59;
        v386 = 2082;
        v387 = v61;
        os_log_type_t v34 = log;
        _os_log_impl( &dword_181A5C000,  log,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received notification %{public}s",  buf,  0x52u);
      }
    }

    uint64_t v13 = v359;
    size_t v14 = (NWConcrete_nw_endpoint_handler *)v356;
    goto LABEL_57;
  }

        if ((*(_BYTE *)(v25 + 158) & 1) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v129 = (os_log_s *)gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
          {
            __int16 v130 = *(_DWORD *)(v940 + 372);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http1_match_idle_connection_with_pending_stream";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = v940 + 74;
            *(_WORD *)&buf[22] = 2080;
            v961 = (uint64_t)" ";
            *(_WORD *)v962 = 1024;
            *(_DWORD *)&v962[2] = v130;
            v131 = "%{public}s %{public}s%s<i%u> cannot make new connection, waiting for other requests to finish";
LABEL_256:
            v133 = v129;
            __int16 v134 = 38;
LABEL_257:
            _os_log_impl(&dword_181A5C000, v133, OS_LOG_TYPE_DEBUG, v131, buf, v134);
            return;
          }
        }

        return;
      }

      if ((*(_BYTE *)(v106 + 158) & 1) == 0)
      {
        if (*((_BYTE *)v107 + 1537))
        {
          v742 = v107;
          v743 = (os_log_s *)__nwlog_obj();
          v744 = os_log_type_enabled(v743, OS_LOG_TYPE_DEBUG);
          char v107 = v742;
          size_t v25 = v940;
          if (v744)
          {
            v745 = v106 + 74;
            v746 = *(void *)(v106 + 256);
            v747 = *(_DWORD *)(*(void *)(v106 + 248) + 372LL);
            if (v746) {
              LODWORD(v746) = *(_DWORD *)(v746 + 860);
            }
            v106 = v939;
            v748 = *(_DWORD *)(v939 + 424);
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = v745;
            *(_WORD *)&buf[22] = 2080;
            v961 = (uint64_t)" ";
            *(_WORD *)v962 = 1024;
            *(_DWORD *)&v962[2] = v747;
            *(_WORD *)&v962[6] = 1024;
            *(_DWORD *)&v962[8] = v746;
            *(_WORD *)&v962[12] = 1024;
            *(_DWORD *)&v962[14] = v748;
            _os_log_impl( &dword_181A5C000,  v743,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> width allows new connection, creating",  buf,  0x32u);
            size_t v25 = v940;
            char v107 = v742;
          }
        }
      }

      if ((*(_WORD *)(v106 + 428) & 0x1000) == 0)
      {
LABEL_807:
        if (*(void *)(v106 + 32))
        {
          if ((*(_BYTE *)(v106 + 158) & 1) == 0)
          {
            if (*((_BYTE *)v107 + 1537))
            {
              v761 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v761, OS_LOG_TYPE_DEBUG))
              {
                v762 = v106 + 74;
                v763 = *(void *)(v106 + 256);
                v764 = *(_DWORD *)(*(void *)(v106 + 248) + 372LL);
                if (v763) {
                  LODWORD(v763) = *(_DWORD *)(v763 + 860);
                }
                v106 = v939;
                v765 = *(_DWORD *)(v939 + 424);
                v766 = *(void *)(v939 + 32);
                *(_DWORD *)buf = 136447746;
                *(void *)&uint8_t buf[4] = "nw_http1_establish_new_connection_for_stream";
                *(_WORD *)&_BYTE buf[12] = 2082;
                *(void *)&buf[14] = v762;
                *(_WORD *)&buf[22] = 2080;
                v961 = (uint64_t)" ";
                *(_WORD *)v962 = 1024;
                *(_DWORD *)&v962[2] = v764;
                *(_WORD *)&v962[6] = 1024;
                *(_DWORD *)&v962[8] = v763;
                *(_WORD *)&v962[12] = 1024;
                *(_DWORD *)&v962[14] = v765;
                *(_WORD *)&v962[18] = 2048;
                *(void *)&v962[20] = v766;
                _os_log_impl( &dword_181A5C000,  v761,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> using already established output handler %p",  buf,  0x3Cu);
              }
            }
          }

          v496 = *(_OWORD **)(v106 + 32);
          if (v496)
          {
            v497 = *(void **)(v106 + 336);
            if (v497)
            {
              v498 = *(void **)(v106 + 320);
              if (v498)
              {
                v499 = calloc(1uLL, 0x370uLL);
                if (v499) {
                  goto LABEL_814;
                }
                v772 = (os_log_s *)__nwlog_obj();
                os_log_type_enabled(v772, OS_LOG_TYPE_ERROR);
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "strict_calloc";
                *(_WORD *)&_BYTE buf[12] = 2048;
                *(void *)&buf[14] = 1LL;
                *(_WORD *)&buf[22] = 2048;
                v961 = 880LL;
                v773 = (void *)_os_log_send_and_compose_impl();
                if (!__nwlog_abort((uint64_t)v773))
                {
                  free(v773);
LABEL_814:
                  bzero(v499, 0x370uLL);
                  if (nw_protocol_http1_identifier::onceToken != -1) {
                    dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_39881);
                  }
                  v500 = v940;
                  *((void *)v499 + 2) = &nw_protocol_http1_identifier::http1_protocol_identifier;
                  if (nw_protocol_http1_get_callbacks(void)::onceToken != -1)
                  {
                    dispatch_once(&nw_protocol_http1_get_callbacks(void)::onceToken, &__block_literal_global_17_39683);
                    v500 = v940;
                  }

                  *((void *)v499 + 3) = &nw_protocol_http1_get_callbacks(void)::http1_protocol_callbacks;
                  *((_DWORD *)v499 + 46) = 3;
                  *((void *)v499 + 22) = v499;
                  *((void *)v499 + 5) = v499 + 10;
                  *((void *)v499 + 60) = v500;
                  nw_protocol_set_output_handler((uint64_t)v499, (uint64_t)v496);
                  *(void *)buf = os_retain(v497);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v499 + 47), buf);
                  *(void *)buf = os_retain(v498);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v499 + 46), buf);
                  *(void *)buf = nw_parameters_copy_context(v498);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v499 + 31), buf);
                  *((void *)v499 + 24) = *(void *)(v500 + 192);
                  v501 = MEMORY[0x1895F87A8];
                  v502 = (void *)*((void *)v499 + 62);
                  *(void *)v963 = MEMORY[0x1895F87A8];
                  *(void *)&v963[8] = 0x40000000LL;
                  *(void *)&v963[16] = ___ZL26nw_http1_connection_createP11nw_protocolP17nw_protocol_http1P11nw_endpointP13nw_parameters_block_invoke;
                  v964 = (uint64_t (*)(uint64_t, uint64_t))&__block_descriptor_tmp_40_39882;
                  v965 = (void (*)(uint64_t))v499;
                  *(void *)buf = nw_http_connection_create_metadata(v502, v963, 0LL);
                  nw::retained_ptr<nw_endpoint *>::operator=((uint64_t)(v499 + 48), buf);
                  nw_http_connection_metadata_set_version(*((void **)v499 + 96), 3);
                  nw_http_connection_metadata_set_shared_connection_pool_metadata( *((void **)v499 + 96),  *(void **)(v500 + 312));
                  *((void *)v499 + 77) = 0LL;
                  *((void *)v499 + 78) = (char *)v499 + 616;
                  *((void *)v499 + 79) = 0LL;
                  *((void *)v499 + 80) = (char *)v499 + 632;
                  *((void *)v499 + 81) = 0LL;
                  *((void *)v499 + 82) = (char *)v499 + 648;
                  *((void *)v499 + 83) = 0LL;
                  *((void *)v499 + 84) = (char *)v499 + 664;
                  *((void *)v499 + 86) = (char *)v499 + 680;
                  *((void *)v499 + 85) = 0LL;
                  nw_frame_cache_init((uint64_t)v499 + 696, (uint64_t)v499, 256, 0x40000, 16);
                  v503 = *((void *)v499 + 60);
                  if (v503)
                  {
                    *(_OWORD *)((char *)v499 + 360) = 0u;
                    *(_OWORD *)((char *)v499 + 376) = 0u;
                    *(_OWORD *)((char *)v499 + 392) = 0u;
                    *(_OWORD *)((char *)v499 + 408) = 0u;
                    *(_OWORD *)((char *)v499 + 424) = 0u;
                    *(_OWORD *)((char *)v499 + 440) = 0u;
                    *(_OWORD *)((char *)v499 + 328) = 0u;
                    *(_OWORD *)((char *)v499 + 344) = 0u;
                    *((void *)v499 + 59) = nw_http1_on_reset;
                    *((void *)v499 + 37) = nw_http1_on_message_begin;
                    *((void *)v499 + 38) = nw_http1_on_url;
                    *((void *)v499 + 48) = nw_http1_on_message_complete;
                    *((void *)v499 + 49) = nw_http1_on_url_complete;
                    *((void *)v499 + 39) = nw_http1_on_status;
                    *((void *)v499 + 40) = nw_http1_on_method;
                    *((void *)v499 + 50) = nw_http1_on_status_complete;
                    *((void *)v499 + 51) = nw_http1_on_method_complete;
                    *((void *)v499 + 42) = nw_http1_on_header_field;
                    *((void *)v499 + 43) = nw_http1_on_header_value;
                    *((void *)v499 + 53) = nw_http1_on_header_field_complete;
                    *((void *)v499 + 54) = nw_http1_on_header_value_complete;
                    *((void *)v499 + 46) = nw_http1_on_headers_complete;
                    *((void *)v499 + 47) = nw_http1_on_body;
                    *((void *)v499 + 57) = nw_http1_on_chunk_header;
                    *((void *)v499 + 58) = nw_http1_on_chunk_complete;
                    v504 = *(_BYTE *)(v503 + 376);
                    *(_OWORD *)((char *)v499 + 248) = 0u;
                    *(_OWORD *)((char *)v499 + 200) = 0u;
                    *(_OWORD *)((char *)v499 + 264) = 0u;
                    *(_OWORD *)((char *)v499 + 232) = 0u;
                    *(_OWORD *)((char *)v499 + 216) = 0u;
                    if ((v504 & 1) != 0) {
                      v505 = 1;
                    }
                    else {
                      v505 = 2;
                    }
                    *((_BYTE *)v499 + 272) = v505;
                    *((void *)v499 + 35) = 0LL;
                    *((void *)v499 + 36) = (char *)v499 + 296;
                    *((_WORD *)v499 + 139) = 16131;
                    *((void *)v499 + 31) = v499;
                    *((void *)v499 + 32) = 238LL;
                    if ((*((_BYTE *)v499 + 158) & 1) == 0)
                    {
                      v506 = (os_log_s *)__nwlog_obj();
                      if (os_log_type_enabled(v506, OS_LOG_TYPE_DEBUG))
                      {
                        v507 = *((void *)v499 + 61);
                        v508 = *(_DWORD *)(*((void *)v499 + 60) + 372LL);
                        v509 = *((_DWORD *)v499 + 215);
                        if (v507) {
                          LODWORD(v507) = *(_DWORD *)(v507 + 424);
                        }
                        *(_DWORD *)buf = 136448258;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_log_parser_version";
                        *(_WORD *)&_BYTE buf[12] = 2082;
                        *(void *)&buf[14] = (char *)v499 + 74;
                        *(_WORD *)&buf[22] = 2080;
                        v961 = (uint64_t)" ";
                        *(_WORD *)v962 = 1024;
                        *(_DWORD *)&v962[2] = v508;
                        *(_WORD *)&v962[6] = 1024;
                        *(_DWORD *)&v962[8] = v509;
                        *(_WORD *)&v962[12] = 1024;
                        *(_DWORD *)&v962[14] = v507;
                        *(_WORD *)&v962[18] = 1024;
                        *(_DWORD *)&v962[20] = 9;
                        *(_WORD *)&v962[24] = 1024;
                        *(_DWORD *)&v962[26] = 2;
                        *(_WORD *)&v962[30] = 1024;
                        *(_DWORD *)&v962[32] = 1;
                        _os_log_impl( &dword_181A5C000,  v506,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> using http parser v%u.%u.%u",  buf,  0x44u);
                      }
                    }

                    goto LABEL_827;
                  }

                  __nwlog_obj();
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                  v774 = (char *)_os_log_send_and_compose_impl();
                  v955[0] = 16;
                  LOBYTE(v943[0]) = 0;
                  if (__nwlog_fault(v774, v955, v943))
                  {
                    if (v955[0] == 17)
                    {
                      v775 = (os_log_s *)__nwlog_obj();
                      v776 = v955[0];
                      if (!os_log_type_enabled(v775, (os_log_type_t)v955[0])) {
                        goto LABEL_1519;
                      }
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                      v777 = "%{public}s called with null http1_connection->protocol_http1";
                      goto LABEL_1518;
                    }

                    if (!LOBYTE(v943[0]))
                    {
                      v775 = (os_log_s *)__nwlog_obj();
                      v776 = v955[0];
                      if (!os_log_type_enabled(v775, (os_log_type_t)v955[0])) {
                        goto LABEL_1519;
                      }
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                      v777 = "%{public}s called with null http1_connection->protocol_http1, backtrace limit exceeded";
                      goto LABEL_1518;
                    }

                    v835 = (char *)__nw_create_backtrace_string();
                    v775 = (os_log_s *)__nwlog_obj();
                    v776 = v955[0];
                    v836 = os_log_type_enabled(v775, (os_log_type_t)v955[0]);
                    if (v835)
                    {
                      if (v836)
                      {
                        *(_DWORD *)buf = 136446466;
                        *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                        *(_WORD *)&_BYTE buf[12] = 2082;
                        *(void *)&buf[14] = v835;
                        _os_log_impl( &dword_181A5C000,  v775,  v776,  "%{public}s called with null http1_connection->protocol_http1, dumping backtrace:%{public}s",  buf,  0x16u);
                      }

                      free(v835);
                      goto LABEL_1519;
                    }

                    if (v836)
                    {
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "nw_http1_connection_parser_init";
                      v777 = "%{public}s called with null http1_connection->protocol_http1, no backtrace";
LABEL_1518:
                      _os_log_impl(&dword_181A5C000, v775, v776, v777, buf, 0xCu);
                    }
                  }

        goto LABEL_251;
      }

      if (!v148)
      {
        __nwlog_obj();
        os_log_type_t v101 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v118 = type;
        if (os_log_type_enabled(v101, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
          _os_log_impl( &dword_181A5C000,  v101,  v118,  "%{public}s called with null result, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_250;
      }

      BOOL v103 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v101 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v104 = type;
      v105 = os_log_type_enabled(v101, type);
      if (!v103)
      {
        if (v105)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
          _os_log_impl(&dword_181A5C000, v101, v104, "%{public}s called with null result, no backtrace", buf, 0xCu);
        }

        goto LABEL_250;
      }

      if (v105)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = v103;
        _os_log_impl( &dword_181A5C000,  v101,  v104,  "%{public}s called with null result, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v103);
    }

          os_log_type_t v49 = v79;
          goto LABEL_272;
        }

        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        __int16 v57 = (os_log_s *)(id)gconnectionLogObj;
        if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_250;
        }
        v364 = v50;
        v357 = v79;
        v279 = v1->top_id;
        v280 = nw_endpoint_get_logging_description(v1->endpoint);
        v281 = v1->parameters;
        v282 = nw_endpoint_handler_get_id_string(v48);
        v283 = nw_endpoint_get_description(v357);
        v284 = nw_endpoint_get_logging_description(v364);
        v285 = *((void *)v386 + 1);
        v286 = *((void *)v386 + 5);
        v287 = *((void *)v386 + 6);
        v289 = *((void *)v386 + 8);
        v288 = *((void *)v386 + 9);
        v291 = *((void *)v386 + 10);
        v290 = *((void *)v386 + 11);
        v292 = *((void *)v386 + 12);
        v294 = *((void *)v386 + 14);
        v293 = *((void *)v386 + 15);
        *(void *)&v405[138] = *((void *)v386 + 13);
        *(_DWORD *)v388 = v279;
        *(void *)&v388[12] = v1->top_uuid;
        *(void *)&v388[22] = v280;
        *(void *)&v389[2] = v281;
        v391 = v282;
        *(_WORD *)&v388[4] = 1042;
        v392 = 1042;
        *(_DWORD *)&v388[6] = 16;
        v393 = 16;
        *(_WORD *)&v388[10] = 2098;
        v394 = 2098;
        v395 = v410;
        v397 = v283;
        v399 = v284;
        *(_WORD *)v389 = 2114;
        v400 = 2114;
        *(_DWORD *)v403 = v362 / 0x3E8;
        *(void *)((char *)v404 + 2) = v383;
        *(_DWORD *)v405 = v382 / 0x3E8;
        *(_DWORD *)&v405[6] = v382 % 0x3E8;
        *(_DWORD *)&v405[12] = transport_connect_milliseconds / 0x3E8;
        *(_DWORD *)&v405[18] = transport_connect_milliseconds % 0x3E8;
        *(_WORD *)&v388[20] = 2082;
        v390 = 2082;
        v396 = 2082;
        v398 = 2082;
        LOWORD(v404[0]) = 2082;
        *(_WORD *)&v405[22] = 2082;
        *(void *)&v405[24] = v80;
        *(_DWORD *)&v405[34] = handshake_ms_for_protocol / 0x3E8;
        *(_DWORD *)&v405[40] = handshake_ms_for_protocol % 0x3E8;
        *(void *)&v405[46] = v287;
        *(void *)&v405[56] = v288;
        *(void *)&v405[66] = v285;
        *(void *)&v405[76] = v286;
        *(_DWORD *)&v405[86] = v293 / 0x3E8;
        *(_DWORD *)&v405[92] = v293 % 0x3E8;
        *(void *)&v405[98] = v291;
        *(void *)&v405[108] = v289;
        *(void *)&v405[118] = v290;
        *(void *)&v405[128] = v292;
        *(_WORD *)&v405[44] = 2048;
        *(_WORD *)&v405[54] = 2048;
        *(_WORD *)&v405[64] = 2048;
        *(_WORD *)&v405[74] = 2048;
        *(_WORD *)&v405[96] = 2048;
        *(_WORD *)&v405[106] = 2048;
        *(_WORD *)&v405[116] = 2048;
        *(_WORD *)&v405[126] = 2048;
        *(_WORD *)&v405[136] = 2048;
        *(_WORD *)&v405[146] = 2048;
        *(void *)&v405[148] = v294;
        HIWORD(v404[2]) = 1024;
        *(_WORD *)&v405[4] = 1024;
        *(_WORD *)&v405[10] = 1024;
        *(_WORD *)&v405[16] = 1024;
        *(_WORD *)&v405[32] = 1024;
        *(_WORD *)&v405[38] = 1024;
        *(_WORD *)&v405[84] = 1024;
        *(_WORD *)&v405[90] = 1024;
        v402 = 1024;
        *(_WORD *)&v403[4] = 1024;
        *(_DWORD *)&v403[6] = v362 % 0x3E8;
        *(_DWORD *)buf = 67117314;
        v401 = v370;
        v295 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
               "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
               "\tConnected Path: %{public}@\n"
               "\tDuration: %u.%03us, %{public}s @%u.%03us took %u.%03us, %{public}s took %u.%03us\n"
               "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-of-or"
               "der bytes: %llu\n"
               "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
        v296 = v57;
        v297 = 280;
      }

      else
      {
        if ((*((_BYTE *)v1 + 109) & 4) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          __int16 v57 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
          {
            v364 = v50;
            v357 = v79;
            v227 = v1->top_id;
            v228 = nw_endpoint_get_logging_description(v1->endpoint);
            v229 = v1->parameters;
            v230 = nw_endpoint_handler_get_id_string(v48);
            v231 = nw_endpoint_get_description(v357);
            v232 = nw_endpoint_get_logging_description(v364);
            else {
              v233 = off_189BB70A8[privacy_stance - 1];
            }
            *(_DWORD *)buf = 67114498;
            *(_DWORD *)v388 = v227;
            *(_WORD *)&v388[4] = 1042;
            *(_DWORD *)&v388[6] = 16;
            *(_WORD *)&v388[10] = 2098;
            *(void *)&v388[12] = v1->top_uuid;
            *(_WORD *)&v388[20] = 2082;
            *(void *)&v388[22] = v228;
            *(void *)&v389[2] = v229;
            *(_WORD *)v389 = 2114;
            v390 = 2082;
            v391 = v230;
            v392 = 1042;
            v393 = 16;
            v394 = 2098;
            v395 = v410;
            v396 = 2082;
            v397 = v231;
            v398 = 2082;
            v399 = v232;
            v400 = 2114;
            v401 = v370;
            v402 = 2082;
            *(void *)v403 = v233;
            *(_WORD *)&v403[8] = 1024;
            v404[0] = v362 / 0x3E8;
            LOWORD(v404[1]) = 1024;
            *(_DWORD *)((char *)&v404[1] + 2) = v362 % 0x3E8;
            HIWORD(v404[2]) = 2082;
            *(void *)v405 = v383;
            *(_WORD *)&v405[8] = 1024;
            *(_DWORD *)&v405[10] = v382 / 0x3E8;
            *(_WORD *)&v405[14] = 1024;
            *(_DWORD *)&v405[16] = v382 % 0x3E8;
            *(_WORD *)&v405[20] = 1024;
            *(_DWORD *)&v405[22] = transport_connect_milliseconds / 0x3E8;
            *(_WORD *)&v405[26] = 1024;
            *(_DWORD *)&v405[28] = transport_connect_milliseconds % 0x3E8;
            *(_WORD *)&v405[32] = 2082;
            *(void *)&v405[34] = v80;
            *(_WORD *)&v405[42] = 1024;
            *(_DWORD *)&v405[44] = handshake_ms_for_protocol / 0x3E8;
            *(_WORD *)&v405[48] = 1024;
            *(_DWORD *)&v405[50] = handshake_ms_for_protocol % 0x3E8;
            v295 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                   "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                   "\tConnected Path: %{public}@\n"
                   "\tPrivacy Stance: %{public}s\n"
                   "\tDuration: %u.%03us, %{public}s @%u.%03us took %u.%03us, %{public}s took %u.%03us";
            v296 = v57;
            v297 = 178;
            goto LABEL_270;
          }

          goto LABEL_250;
        }

        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        __int16 v57 = (os_log_s *)(id)gconnectionLogObj;
        if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_250;
        }
        v364 = v50;
        v357 = v79;
        v310 = v1->top_id;
        v311 = nw_endpoint_get_logging_description(v1->endpoint);
        v312 = v1->parameters;
        v313 = nw_endpoint_handler_get_id_string(v48);
        v314 = nw_endpoint_get_description(v79);
        v315 = nw_endpoint_get_logging_description(v364);
        *(_DWORD *)buf = 67114242;
        *(_DWORD *)v388 = v310;
        *(_WORD *)&v388[4] = 1042;
        *(_DWORD *)&v388[6] = 16;
        *(_WORD *)&v388[10] = 2098;
        *(void *)&v388[12] = v1->top_uuid;
        *(_WORD *)&v388[20] = 2082;
        *(void *)&v388[22] = v311;
        *(void *)&v389[2] = v312;
        *(_WORD *)v389 = 2114;
        v390 = 2082;
        v391 = v313;
        v392 = 1042;
        v393 = 16;
        v394 = 2098;
        v395 = v410;
        v396 = 2082;
        v397 = v314;
        v398 = 2082;
        v399 = v315;
        v400 = 2114;
        v401 = v370;
        v402 = 1024;
        *(_DWORD *)v403 = v362 / 0x3E8;
        *(_WORD *)&v403[4] = 1024;
        *(_DWORD *)&v403[6] = v362 % 0x3E8;
        LOWORD(v404[0]) = 2082;
        *(void *)((char *)v404 + 2) = v383;
        HIWORD(v404[2]) = 1024;
        *(_DWORD *)v405 = v382 / 0x3E8;
        *(_WORD *)&v405[4] = 1024;
        *(_DWORD *)&v405[6] = v382 % 0x3E8;
        *(_WORD *)&v405[10] = 1024;
        *(_DWORD *)&v405[12] = transport_connect_milliseconds / 0x3E8;
        *(_WORD *)&v405[16] = 1024;
        *(_DWORD *)&v405[18] = transport_connect_milliseconds % 0x3E8;
        *(_WORD *)&v405[22] = 2082;
        *(void *)&v405[24] = v80;
        *(_WORD *)&v405[32] = 1024;
        *(_DWORD *)&v405[34] = handshake_ms_for_protocol / 0x3E8;
        *(_WORD *)&v405[38] = 1024;
        *(_DWORD *)&v405[40] = handshake_ms_for_protocol % 0x3E8;
        v295 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
               "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
               "\tConnected Path: %{public}@\n"
               "\tDuration: %u.%03us, %{public}s @%u.%03us took %u.%03us, %{public}s took %u.%03us";
        v296 = v57;
        v297 = 168;
      }
    }

    else
    {
      if (!v386)
      {
        if ((*((_BYTE *)v1 + 109) & 4) != 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          __int16 v57 = (os_log_s *)(id)gconnectionLogObj;
          if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_272;
          }
          v171 = v49;
          v368 = v50;
          v304 = v1->top_id;
          v305 = nw_endpoint_get_logging_description(v1->endpoint);
          v306 = v1->parameters;
          v307 = nw_endpoint_handler_get_id_string(v48);
          v308 = nw_endpoint_get_description(v171);
          v309 = nw_endpoint_get_logging_description(v368);
          *(_DWORD *)buf = 67113474;
          *(_DWORD *)v388 = v304;
          *(_WORD *)&v388[4] = 1042;
          *(_DWORD *)&v388[6] = 16;
          *(void *)&v388[12] = v1->top_uuid;
          *(_WORD *)&v388[10] = 2098;
          *(void *)&v388[22] = v305;
          *(_WORD *)&v388[20] = 2082;
          *(void *)&v389[2] = v306;
          *(_WORD *)v389 = 2114;
          v390 = 2082;
          v391 = v307;
          v392 = 1042;
          v393 = 16;
          v394 = 2098;
          v395 = v410;
          v396 = 2082;
          v397 = v308;
          v398 = 2082;
          v399 = v309;
          v400 = 2114;
          v401 = v370;
          v402 = 1024;
          *(_DWORD *)v403 = v362 / 0x3E8;
          *(_WORD *)&v403[4] = 1024;
          *(_DWORD *)&v403[6] = v362 % 0x3E8;
          LOWORD(v404[0]) = 2082;
          *(void *)((char *)v404 + 2) = v383;
          HIWORD(v404[2]) = 1024;
          *(_DWORD *)v405 = v382 / 0x3E8;
          *(_WORD *)&v405[4] = 1024;
          *(_DWORD *)&v405[6] = v382 % 0x3E8;
          *(_WORD *)&v405[10] = 1024;
          *(_DWORD *)&v405[12] = transport_connect_milliseconds / 0x3E8;
          *(_WORD *)&v405[16] = 1024;
          *(_DWORD *)&v405[18] = transport_connect_milliseconds % 0x3E8;
          v276 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                 "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                 "\tConnected Path: %{public}@\n"
                 "\tDuration: %u.%03us, %{public}s @%u.%03us took %u.%03us";
          v277 = v57;
          v278 = 146;
        }

        else
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          __int16 v57 = (os_log_s *)(id)gconnectionLogObj;
          if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_272;
          }
          v171 = v49;
          v368 = v50;
          v220 = v1->top_id;
          v221 = nw_endpoint_get_logging_description(v1->endpoint);
          v222 = v1->parameters;
          v223 = nw_endpoint_handler_get_id_string(v48);
          v224 = nw_endpoint_get_description(v171);
          v225 = nw_endpoint_get_logging_description(v368);
          else {
            v226 = off_189BB70A8[privacy_stance - 1];
          }
          *(_DWORD *)buf = 67113730;
          *(_DWORD *)v388 = v220;
          *(_WORD *)&v388[4] = 1042;
          *(_DWORD *)&v388[6] = 16;
          *(void *)&v388[12] = v1->top_uuid;
          *(_WORD *)&v388[10] = 2098;
          *(void *)&v388[22] = v221;
          *(_WORD *)&v388[20] = 2082;
          *(void *)&v389[2] = v222;
          *(_WORD *)v389 = 2114;
          v390 = 2082;
          v391 = v223;
          v392 = 1042;
          v393 = 16;
          v394 = 2098;
          v395 = v410;
          v396 = 2082;
          v397 = v224;
          v398 = 2082;
          v399 = v225;
          v400 = 2114;
          v401 = v370;
          v402 = 2082;
          *(void *)v403 = v226;
          *(_WORD *)&v403[8] = 1024;
          v404[0] = v362 / 0x3E8;
          LOWORD(v404[1]) = 1024;
          *(_DWORD *)((char *)&v404[1] + 2) = v362 % 0x3E8;
          HIWORD(v404[2]) = 2082;
          *(void *)v405 = v383;
          *(_WORD *)&v405[8] = 1024;
          *(_DWORD *)&v405[10] = v382 / 0x3E8;
          *(_WORD *)&v405[14] = 1024;
          *(_DWORD *)&v405[16] = v382 % 0x3E8;
          *(_WORD *)&v405[20] = 1024;
          *(_DWORD *)&v405[22] = transport_connect_milliseconds / 0x3E8;
          *(_WORD *)&v405[26] = 1024;
          *(_DWORD *)&v405[28] = transport_connect_milliseconds % 0x3E8;
          v276 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
                 "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
                 "\tConnected Path: %{public}@\n"
                 "\tPrivacy Stance: %{public}s\n"
                 "\tDuration: %u.%03us, %{public}s @%u.%03us took %u.%03us";
          v277 = v57;
          v278 = 156;
        }

        goto LABEL_267;
      }

      if ((*((_BYTE *)v1 + 109) & 4) != 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        __int16 v57 = (os_log_s *)(id)gconnectionLogObj;
        if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_272;
        }
        v364 = v50;
        v255 = v1->top_id;
        v256 = nw_endpoint_get_logging_description(v1->endpoint);
        v381 = v1->parameters;
        v257 = nw_endpoint_handler_get_id_string(v48);
        v377 = nw_endpoint_get_description(v49);
        v258 = nw_endpoint_get_logging_description(v364);
        v259 = *((void *)v386 + 1);
        v260 = *((void *)v386 + 5);
        v261 = *((void *)v386 + 6);
        v263 = *((void *)v386 + 8);
        v262 = *((void *)v386 + 9);
        v265 = *((void *)v386 + 10);
        v264 = *((void *)v386 + 11);
        v267 = *((void *)v386 + 12);
        v266 = *((void *)v386 + 13);
        v268 = *((void *)v386 + 14);
        v269 = *((void *)v386 + 15);
        *(_DWORD *)buf = 67116546;
        *(_DWORD *)v388 = v255;
        *(_WORD *)&v388[4] = 1042;
        *(_DWORD *)&v388[6] = 16;
        *(_WORD *)&v388[10] = 2098;
        *(void *)&v388[12] = v1->top_uuid;
        *(_WORD *)&v388[20] = 2082;
        *(void *)&v388[22] = v256;
        *(_WORD *)v389 = 2114;
        *(void *)&v389[2] = v381;
        v390 = 2082;
        v391 = v257;
        v392 = 1042;
        v393 = 16;
        v394 = 2098;
        v395 = v410;
        v396 = 2082;
        v397 = v377;
        v398 = 2082;
        v399 = v258;
        v400 = 2114;
        v401 = v370;
        v402 = 1024;
        *(_DWORD *)v403 = v362 / 0x3E8;
        *(_WORD *)&v403[4] = 1024;
        *(_DWORD *)&v403[6] = v362 % 0x3E8;
        LOWORD(v404[0]) = 2082;
        *(void *)((char *)v404 + 2) = v383;
        HIWORD(v404[2]) = 1024;
        *(_DWORD *)v405 = v382 / 0x3E8;
        *(_WORD *)&v405[4] = 1024;
        *(_DWORD *)&v405[6] = v382 % 0x3E8;
        *(_WORD *)&v405[10] = 1024;
        *(_DWORD *)&v405[12] = transport_connect_milliseconds / 0x3E8;
        *(_WORD *)&v405[16] = 1024;
        *(_DWORD *)&v405[18] = transport_connect_milliseconds % 0x3E8;
        *(_WORD *)&v405[22] = 2048;
        *(void *)&v405[24] = v261;
        *(_WORD *)&v405[32] = 2048;
        *(void *)&v405[34] = v262;
        *(_WORD *)&v405[42] = 2048;
        *(void *)&v405[44] = v259;
        *(_WORD *)&v405[52] = 2048;
        *(void *)&v405[54] = v260;
        *(_WORD *)&v405[62] = 1024;
        *(_DWORD *)&v405[64] = v269 / 0x3E8;
        *(_WORD *)&v405[68] = 1024;
        *(_DWORD *)&v405[70] = v269 % 0x3E8;
        *(_WORD *)&v405[74] = 2048;
        *(void *)&v405[76] = v265;
        *(_WORD *)&v405[84] = 2048;
        *(void *)&v405[86] = v263;
        *(_WORD *)&v405[94] = 2048;
        *(void *)&v405[96] = v264;
        *(_WORD *)&v405[104] = 2048;
        *(void *)&v405[106] = v267;
        *(_WORD *)&v405[114] = 2048;
        *(void *)&v405[116] = v266;
        *(_WORD *)&v405[124] = 2048;
        *(void *)&v405[126] = v268;
        v217 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
               "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
               "\tConnected Path: %{public}@\n"
               "\tDuration: %u.%03us, %{public}s @%u.%03us took %u.%03us\n"
               "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-of-or"
               "der bytes: %llu\n"
               "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
        v218 = v57;
        v219 = 258;
LABEL_264:
        _os_log_impl(&dword_181A5C000, v218, OS_LOG_TYPE_DEFAULT, v217, buf, v219);
LABEL_271:
        unint64_t v50 = v364;
        goto LABEL_272;
      }

      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      __int16 v57 = (os_log_s *)(id)gconnectionLogObj;
      if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_272;
      }
      v364 = v50;
      v147 = v1->top_id;
      v357 = v49;
      v148 = nw_endpoint_get_logging_description(v1->endpoint);
      os_log_type_t v149 = v1->parameters;
      char v150 = nw_endpoint_handler_get_id_string(v48);
      os_log_type_t v151 = nw_endpoint_get_description(v49);
      v380 = nw_endpoint_get_logging_description(v364);
      else {
        v152 = off_189BB70A8[privacy_stance - 1];
      }
      v336 = *((void *)v386 + 1);
      v338 = *((void *)v386 + 5);
      v337 = *((void *)v386 + 6);
      v340 = *((void *)v386 + 8);
      v339 = *((void *)v386 + 9);
      v341 = *((void *)v386 + 10);
      v342 = *((void *)v386 + 11);
      v344 = *((void *)v386 + 12);
      v343 = *((void *)v386 + 13);
      v345 = *((void *)v386 + 14);
      v346 = *((void *)v386 + 15);
      *(_DWORD *)buf = 67116802;
      *(_DWORD *)v388 = v147;
      *(_WORD *)&v388[4] = 1042;
      *(_DWORD *)&v388[6] = 16;
      *(_WORD *)&v388[10] = 2098;
      *(void *)&v388[12] = v1->top_uuid;
      *(_WORD *)&v388[20] = 2082;
      *(void *)&v388[22] = v148;
      *(_WORD *)v389 = 2114;
      *(void *)&v389[2] = v149;
      v390 = 2082;
      v391 = v150;
      v392 = 1042;
      v393 = 16;
      v394 = 2098;
      v395 = v410;
      v396 = 2082;
      v397 = v151;
      v398 = 2082;
      v399 = v380;
      v400 = 2114;
      v401 = v370;
      v402 = 2082;
      *(void *)v403 = v152;
      *(_WORD *)&v403[8] = 1024;
      v404[0] = v362 / 0x3E8;
      LOWORD(v404[1]) = 1024;
      *(_DWORD *)((char *)&v404[1] + 2) = v362 % 0x3E8;
      HIWORD(v404[2]) = 2082;
      *(void *)v405 = v383;
      *(_WORD *)&v405[8] = 1024;
      *(_DWORD *)&v405[10] = v382 / 0x3E8;
      *(_WORD *)&v405[14] = 1024;
      *(_DWORD *)&v405[16] = v382 % 0x3E8;
      *(_WORD *)&v405[20] = 1024;
      *(_DWORD *)&v405[22] = transport_connect_milliseconds / 0x3E8;
      *(_WORD *)&v405[26] = 1024;
      *(_DWORD *)&v405[28] = transport_connect_milliseconds % 0x3E8;
      *(_WORD *)&v405[32] = 2048;
      *(void *)&v405[34] = v337;
      *(_WORD *)&v405[42] = 2048;
      *(void *)&v405[44] = v339;
      *(_WORD *)&v405[52] = 2048;
      *(void *)&v405[54] = v336;
      *(_WORD *)&v405[62] = 2048;
      *(void *)&v405[64] = v338;
      *(_WORD *)&v405[72] = 1024;
      *(_DWORD *)&v405[74] = v346 / 0x3E8;
      *(_WORD *)&v405[78] = 1024;
      *(_DWORD *)&v405[80] = v346 % 0x3E8;
      *(_WORD *)&v405[84] = 2048;
      *(void *)&v405[86] = v341;
      *(_WORD *)&v405[94] = 2048;
      *(void *)&v405[96] = v340;
      *(_WORD *)&v405[104] = 2048;
      *(void *)&v405[106] = v342;
      *(_WORD *)&v405[114] = 2048;
      *(void *)&v405[116] = v344;
      *(_WORD *)&v405[124] = 2048;
      *(void *)&v405[126] = v343;
      *(_WORD *)&v405[134] = 2048;
      *(void *)&v405[136] = v345;
      v295 = "[C%u %{public,uuid_t}.16P %{public}s %{public}@] cancelled\n"
             "\t[C%{public}s %{public,uuid_t}.16P %{public}s<->%{public}s]\n"
             "\tConnected Path: %{public}@\n"
             "\tPrivacy Stance: %{public}s\n"
             "\tDuration: %u.%03us, %{public}s @%u.%03us took %u.%03us\n"
             "\tbytes in/out: %llu/%llu, packets in/out: %llu/%llu, rtt: %u.%03us, retransmitted bytes: %llu, out-of-orde"
             "r bytes: %llu\n"
             "\tecn packets sent/acked/marked/lost: %llu/%llu/%llu/%llu";
      v296 = v57;
      v297 = 268;
    }

      if (v138) {
        free(v138);
      }
      uint64_t v3 = v243;
      if ((*v5 & 0x1000) == 0)
      {
        BOOL v8 = v137;
        goto LABEL_187;
      }

      BOOL v8 = v137;
      if (*(void *)(v245 + 136) && os_channel_packet_free())
      {
        nw_channel_check_defunct(v245);
        BOOL v8 = v237;
        goto LABEL_269;
      }

      goto LABEL_187;
    }

    os_packet_get_flow_uuid();
    if (((*v5 & 0x100) == 0
       || (unint64_t v11 = *(void *)(v245 + 280)) == 0
       || (node = nw_hash_table_get_node(v11, (uint64_t)v257, 16LL)) == 0)
      && ((uint64_t v13 = *(void *)(v245 + 272)) == 0 || (node = *(void *)(v13 + 56)) == 0)
      || (size_t v14 = *(void *)(node + 16)) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v16 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        v254 = "nw_channel_add_input_frames";
        v255 = 1042;
        LODWORD(v256[0]) = 16;
        WORD2(v256[0]) = 2098;
        *(void *)((char *)v256 + 6) = v257;
        _os_log_impl( &dword_181A5C000,  v16,  OS_LOG_TYPE_DEBUG,  "%{public}s Failed to find client for slot (%{public,uuid_t}.16P)",  buf,  0x1Cu);
      }

      if ((*v5 & 0x1000) != 0)
      {
        uint64_t v17 = v245;
        if (*(void *)(v245 + 136))
        {
        }
      }

      goto LABEL_187;
    }

    os_log_type_t v15 = *(void *)(v14 + 56);
    v236 = *(void *)(node + 16);
    v242 = v15 && (*(unsigned __int8 *)(v15 + 153) >> 2) & 1;
    uint64_t v18 = *(_WORD *)(v3 + 204) & 0xFF7F | (*(unsigned __int8 *)(v3 + 206) << 16);
    *(_WORD *)(v3 + 204) &= ~0x80u;
    *(_BYTE *)(v3 + 206) = BYTE2(v18);
    buflet_count = os_packet_get_buflet_count();
    if (buflet_count) {
      break;
    }
    __int16 v61 = v236;
    if ((*(_WORD *)(v3 + 204) & 0x80) != 0)
    {
      v234 = v6;
      LOWORD(v6) = 0;
      os_log_type_t v62 = v3;
      goto LABEL_91;
    }

void nw_protocol_udp_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v29 = "nw_protocol_udp_disconnected";
    uint64_t v18 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v29 = "nw_protocol_udp_disconnected";
      os_log_type_t v21 = "%{public}s called with null protocol";
      goto LABEL_66;
    }

    if (!v26)
    {
      uint64_t v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v29 = "nw_protocol_udp_disconnected";
      os_log_type_t v21 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_66;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v19 = (os_log_s *)__nwlog_obj();
    os_log_type_t v20 = type;
    BOOL v23 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (!v23) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v29 = "nw_protocol_udp_disconnected";
      os_log_type_t v21 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_66;
    }

    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v29 = "nw_protocol_udp_disconnected";
      __int16 v30 = 2082;
      uint64_t v31 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v19,  v20,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_67:
    if (!v18) {
      return;
    }
    goto LABEL_68;
  }

  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v29 = "nw_protocol_udp_disconnected";
    uint64_t v18 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v29 = "nw_protocol_udp_disconnected";
      os_log_type_t v21 = "%{public}s called with null udp";
      goto LABEL_66;
    }

    if (!v26)
    {
      uint64_t v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = type;
      if (!os_log_type_enabled(v19, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v29 = "nw_protocol_udp_disconnected";
      os_log_type_t v21 = "%{public}s called with null udp, backtrace limit exceeded";
      goto LABEL_66;
    }

    uint64_t v24 = (char *)__nw_create_backtrace_string();
    uint64_t v19 = (os_log_s *)__nwlog_obj();
    os_log_type_t v20 = type;
    BOOL v25 = os_log_type_enabled(v19, type);
    if (v24)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v29 = "nw_protocol_udp_disconnected";
        __int16 v30 = 2082;
        uint64_t v31 = v24;
        _os_log_impl( &dword_181A5C000,  v19,  v20,  "%{public}s called with null udp, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v24);
      if (!v18) {
        return;
      }
LABEL_68:
      uint64_t v17 = (nw_protocol *)v18;
LABEL_38:
      free(v17);
      return;
    }

    if (v25)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v29 = "nw_protocol_udp_disconnected";
      os_log_type_t v21 = "%{public}s called with null udp, no backtrace";
LABEL_66:
      _os_log_impl(&dword_181A5C000, v19, v20, v21, buf, 0xCu);
      goto LABEL_67;
    }

    goto LABEL_67;
  }

  if (_nw_signposts_once != -1) {
    dispatch_once(&_nw_signposts_once, &__block_literal_global_13);
  }
  a1[2].uint64_t output_handler = 0LL;
  a1[2].handle = 0LL;
  default_input_handler = a1->default_input_handler;
  if (default_input_handler)
  {
    callbacks = default_input_handler->callbacks;
    if (callbacks)
    {
      disconnected = (void (*)(nw_protocol *, nw_protocol *))callbacks->disconnected;
      if (disconnected)
      {
        handle = default_input_handler->handle;
        if (handle == &nw_protocol_ref_counted_handle)
        {
          uint64_t v7 = default_input_handler[1].callbacks;
          if (v7) {
            default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v7->add_input_handler + 1);
          }
        }

        if (a1->handle == &nw_protocol_ref_counted_handle)
        {
          BOOL v8 = a1[1].callbacks;
          if (v8) {
            a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v8->add_input_handler + 1);
          }
          disconnected(default_input_handler, a1);
          if (a1->handle == &nw_protocol_ref_counted_handle)
          {
            uint64_t v9 = a1[1].callbacks;
            if (v9)
            {
              uint64_t v10 = (nw_protocol_callbacks *)((char *)v9 - 1);
              a1[1].callbacks = v10;
              if (!v10)
              {
                unint64_t v11 = *(void (***)(void))a1[1].flow_id;
                if (v11)
                {
                  *(void *)a1[1].flow_id = 0LL;
                  v11[2](v11);
                  _Block_release(v11);
                }

                if ((a1[1].flow_id[8] & 1) != 0)
                {
                  uint64_t v12 = *(const void **)a1[1].flow_id;
                  if (v12) {
                    _Block_release(v12);
                  }
                }

                free(a1);
              }
            }
          }
        }

        else
        {
          disconnected(default_input_handler, a1);
        }

        if (handle == &nw_protocol_ref_counted_handle
          && default_input_handler->handle == &nw_protocol_ref_counted_handle)
        {
          uint64_t v13 = default_input_handler[1].callbacks;
          if (v13)
          {
            size_t v14 = (nw_protocol_callbacks *)((char *)v13 - 1);
            default_input_handler[1].callbacks = v14;
            if (!v14)
            {
              os_log_type_t v15 = *(void (***)(void))default_input_handler[1].flow_id;
              if (v15)
              {
                *(void *)default_input_handler[1].flow_id = 0LL;
                v15[2](v15);
                _Block_release(v15);
              }

              if ((default_input_handler[1].flow_id[8] & 1) != 0)
              {
                uint64_t v16 = *(const void **)default_input_handler[1].flow_id;
                if (v16) {
                  _Block_release(v16);
                }
              }

              uint64_t v17 = default_input_handler;
              goto LABEL_38;
            }
          }
        }
      }
    }
  }

void nw_protocol_udp_link_state(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v56 = *MEMORY[0x1895F89C0];
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v53 = "nw_protocol_udp_link_state";
    BOOL v38 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v39 = (os_log_s *)__nwlog_obj();
      os_log_type_t v40 = type;
      if (!os_log_type_enabled(v39, type)) {
        goto LABEL_118;
      }
      *(_DWORD *)buf = 136446210;
      char v53 = "nw_protocol_udp_link_state";
      BOOL v41 = "%{public}s called with null link_info";
    }

    else if (v50)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v39 = (os_log_s *)__nwlog_obj();
      os_log_type_t v40 = type;
      BOOL v43 = os_log_type_enabled(v39, type);
      if (backtrace_string)
      {
        if (v43)
        {
          *(_DWORD *)buf = 136446466;
          char v53 = "nw_protocol_udp_link_state";
          __int16 v54 = 2082;
          uint64_t v55 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v39,  v40,  "%{public}s called with null link_info, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_118:
        if (!v38) {
          return;
        }
        goto LABEL_119;
      }

      if (!v43) {
        goto LABEL_118;
      }
      *(_DWORD *)buf = 136446210;
      char v53 = "nw_protocol_udp_link_state";
      BOOL v41 = "%{public}s called with null link_info, no backtrace";
    }

    else
    {
      uint64_t v39 = (os_log_s *)__nwlog_obj();
      os_log_type_t v40 = type;
      if (!os_log_type_enabled(v39, type)) {
        goto LABEL_118;
      }
      *(_DWORD *)buf = 136446210;
      char v53 = "nw_protocol_udp_link_state";
      BOOL v41 = "%{public}s called with null link_info, backtrace limit exceeded";
    }

    goto LABEL_117;
  }

  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v53 = "nw_protocol_udp_link_state";
    BOOL v38 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v50)
      {
        uint64_t v39 = (os_log_s *)__nwlog_obj();
        os_log_type_t v40 = type;
        if (!os_log_type_enabled(v39, type)) {
          goto LABEL_118;
        }
        *(_DWORD *)buf = 136446210;
        char v53 = "nw_protocol_udp_link_state";
        BOOL v41 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_117;
      }

      uint64_t v44 = (char *)__nw_create_backtrace_string();
      uint64_t v39 = (os_log_s *)__nwlog_obj();
      os_log_type_t v40 = type;
      BOOL v45 = os_log_type_enabled(v39, type);
      if (!v44)
      {
        if (!v45) {
          goto LABEL_118;
        }
        *(_DWORD *)buf = 136446210;
        char v53 = "nw_protocol_udp_link_state";
        BOOL v41 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_117;
      }

      if (v45)
      {
        *(_DWORD *)buf = 136446466;
        char v53 = "nw_protocol_udp_link_state";
        __int16 v54 = 2082;
        uint64_t v55 = v44;
        uint64_t v46 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_98:
        _os_log_impl(&dword_181A5C000, v39, v40, v46, buf, 0x16u);
      }

uint64_t nw_protocol_udp_updated_path(nw_protocol *a1, nw_protocol *a2, nw_path *object)
{
  uint64_t v115 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v108 = "nw_protocol_udp_updated_path";
    uint64_t v63 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v103) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v64 = (os_log_s *)__nwlog_obj();
      os_log_type_t v65 = type[0];
      if (!os_log_type_enabled(v64, type[0])) {
        goto LABEL_194;
      }
      *(_DWORD *)buf = 136446210;
      v108 = "nw_protocol_udp_updated_path";
      char v66 = "%{public}s called with null protocol";
LABEL_193:
      _os_log_impl(&dword_181A5C000, v64, v65, v66, buf, 0xCu);
      goto LABEL_194;
    }

    if (!(_BYTE)v103)
    {
      uint64_t v64 = (os_log_s *)__nwlog_obj();
      os_log_type_t v65 = type[0];
      if (os_log_type_enabled(v64, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_protocol_udp_updated_path";
        char v66 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_193;
      }

      goto LABEL_194;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v64 = (os_log_s *)__nwlog_obj();
    os_log_type_t v65 = type[0];
    BOOL v79 = os_log_type_enabled(v64, type[0]);
    if (!backtrace_string)
    {
      if (v79)
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_protocol_udp_updated_path";
        char v66 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_193;
      }

      goto LABEL_194;
    }

    if (!v79) {
      goto LABEL_157;
    }
    *(_DWORD *)buf = 136446466;
    v108 = "nw_protocol_udp_updated_path";
    __int16 v109 = 2082;
    __int16 v110 = (nw_protocol *)backtrace_string;
    BOOL v80 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_156:
    _os_log_impl(&dword_181A5C000, v64, v65, v80, buf, 0x16u);
    goto LABEL_157;
  }

  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v108 = "nw_protocol_udp_updated_path";
    uint64_t v63 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v103) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v64 = (os_log_s *)__nwlog_obj();
      os_log_type_t v65 = type[0];
      if (!os_log_type_enabled(v64, type[0])) {
        goto LABEL_194;
      }
      *(_DWORD *)buf = 136446210;
      v108 = "nw_protocol_udp_updated_path";
      char v66 = "%{public}s called with null udp";
      goto LABEL_193;
    }

    if (!(_BYTE)v103)
    {
      uint64_t v64 = (os_log_s *)__nwlog_obj();
      os_log_type_t v65 = type[0];
      if (os_log_type_enabled(v64, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_protocol_udp_updated_path";
        char v66 = "%{public}s called with null udp, backtrace limit exceeded";
        goto LABEL_193;
      }

      goto LABEL_194;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v64 = (os_log_s *)__nwlog_obj();
    os_log_type_t v65 = type[0];
    BOOL v81 = os_log_type_enabled(v64, type[0]);
    if (!backtrace_string)
    {
      if (v81)
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_protocol_udp_updated_path";
        char v66 = "%{public}s called with null udp, no backtrace";
        goto LABEL_193;
      }

      goto LABEL_194;
    }

    if (!v81) {
      goto LABEL_157;
    }
    *(_DWORD *)buf = 136446466;
    v108 = "nw_protocol_udp_updated_path";
    __int16 v109 = 2082;
    __int16 v110 = (nw_protocol *)backtrace_string;
    BOOL v80 = "%{public}s called with null udp, dumping backtrace:%{public}s";
    goto LABEL_156;
  }

  if (object)
  {
    if (gLogDatapath)
    {
      uint64_t v67 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
      {
        int output_handler_context_low = LOWORD(a1[2].output_handler_context);
        int v69 = WORD1(a1[2].output_handler_context);
        *(_DWORD *)buf = 136446978;
        v108 = "nw_protocol_udp_updated_path";
        __int16 v109 = 2082;
        __int16 v110 = a1 + 3;
        __int16 v111 = 1024;
        *(_DWORD *)uint64_t v112 = output_handler_context_low;
        *(_WORD *)&v112[4] = 1024;
        *(_DWORD *)&v112[6] = v69;
        _os_log_impl(&dword_181A5C000, v67, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s udp[%u,%u]", buf, 0x22u);
      }
    }

    default_input_handler = a1[1].default_input_handler;
    a1[1].default_input_handler = (nw_protocol *)os_retain(object);
    if (default_input_handler) {
      os_release(default_input_handler);
    }
    output_handler_context = a1[1].output_handler_context;
    if (a2)
    {
      handle = a2->handle;
      if (handle == &nw_protocol_ref_counted_handle)
      {
        callbacks = a2[1].callbacks;
        if (callbacks) {
          a2[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
        }
      }

      uint64_t v10 = a2->callbacks;
      if (v10)
      {
        get_parameters = (uint64_t (*)(nw_protocol *))v10->get_parameters;
        if (get_parameters)
        {
          uint64_t v12 = (void *)get_parameters(a2);
          if (handle != &nw_protocol_ref_counted_handle) {
            goto LABEL_15;
          }
          goto LABEL_14;
        }
      }

      __nwlog_obj();
      identifier = a2->identifier;
      *(_DWORD *)buf = 136446722;
      v108 = "__nw_protocol_get_parameters";
      if (!identifier) {
        identifier = (nw_protocol_identifier *)"invalid";
      }
      __int16 v109 = 2082;
      __int16 v110 = (nw_protocol *)identifier;
      __int16 v111 = 2048;
      *(void *)uint64_t v112 = a2;
      __int16 v58 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v103) = 0;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __int16 v59 = (os_log_s *)__nwlog_obj();
        os_log_type_t v60 = type[0];
        if (!os_log_type_enabled(v59, type[0])) {
          goto LABEL_169;
        }
        __int16 v61 = a2->identifier;
        if (!v61) {
          __int16 v61 = (nw_protocol_identifier *)"invalid";
        }
        *(_DWORD *)buf = 136446722;
        v108 = "__nw_protocol_get_parameters";
        __int16 v109 = 2082;
        __int16 v110 = (nw_protocol *)v61;
        __int16 v111 = 2048;
        *(void *)uint64_t v112 = a2;
        os_log_type_t v62 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback";
      }

      else
      {
        if ((_BYTE)v103)
        {
          BOOL v74 = (char *)__nw_create_backtrace_string();
          os_log_type_t v75 = (os_log_s *)__nwlog_obj();
          os_log_type_t v60 = type[0];
          log = v75;
          BOOL v76 = os_log_type_enabled(v75, type[0]);
          if (v74)
          {
            if (v76)
            {
              uint64_t v77 = a2->identifier;
              if (!v77) {
                uint64_t v77 = (nw_protocol_identifier *)"invalid";
              }
              *(_DWORD *)buf = 136446978;
              v108 = "__nw_protocol_get_parameters";
              __int16 v109 = 2082;
              __int16 v110 = (nw_protocol *)v77;
              __int16 v111 = 2048;
              *(void *)uint64_t v112 = a2;
              *(_WORD *)&v112[8] = 2082;
              __int16 v113 = v74;
              _os_log_impl( &dword_181A5C000,  log,  v60,  "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, dumping backtrace:%{public}s",  buf,  0x2Au);
            }

            free(v74);
          }

          else if (v76)
          {
            uint64_t v90 = a2->identifier;
            if (!v90) {
              uint64_t v90 = (nw_protocol_identifier *)"invalid";
            }
            *(_DWORD *)buf = 136446722;
            v108 = "__nw_protocol_get_parameters";
            __int16 v109 = 2082;
            __int16 v110 = (nw_protocol *)v90;
            __int16 v111 = 2048;
            *(void *)uint64_t v112 = a2;
            os_log_type_t v62 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, no backtrace";
            BOOL v86 = log;
            goto LABEL_168;
          }

LABEL_227:
                      if (v92) {
                        free(v92);
                      }
                      goto LABEL_49;
                    }
                  }
                }
              }

      if (v76) {
        free(v76);
      }
      uint64_t v19 = 0;
      goto LABEL_29;
    }

    __nwlog_obj();
    buf = 136446210;
    __int16 v113 = "__nw_protocol_notify";
    uint64_t v4 = _os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    __int16 v110 = 0;
    if (__nwlog_fault((const char *)v4, type, &v110))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v73 = (os_log_s *)__nwlog_obj();
        BOOL v74 = type[0];
        if (!os_log_type_enabled(v73, type[0])) {
          goto LABEL_222;
        }
        buf = 136446210;
        __int16 v113 = "__nw_protocol_notify";
        os_log_type_t v75 = "%{public}s called with null protocol";
        goto LABEL_221;
      }

      if (!v110)
      {
        uint64_t v73 = (os_log_s *)__nwlog_obj();
        BOOL v74 = type[0];
        if (!os_log_type_enabled(v73, type[0])) {
          goto LABEL_222;
        }
        buf = 136446210;
        __int16 v113 = "__nw_protocol_notify";
        os_log_type_t v75 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_221;
      }

      os_log_type_t v94 = (char *)__nw_create_backtrace_string();
      uint64_t v73 = (os_log_s *)__nwlog_obj();
      BOOL v74 = type[0];
      os_log_type_t v95 = os_log_type_enabled(v73, type[0]);
      if (v94)
      {
        if (v95)
        {
          buf = 136446466;
          __int16 v113 = "__nw_protocol_notify";
          int v114 = 2082;
          uint64_t v115 = v94;
          _os_log_impl( &dword_181A5C000,  v73,  v74,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  (uint8_t *)&buf,  0x16u);
        }

        free(v94);
        if (v4) {
          goto LABEL_77;
        }
        goto LABEL_18;
      }

      if (v95)
      {
        buf = 136446210;
        __int16 v113 = "__nw_protocol_notify";
        os_log_type_t v75 = "%{public}s called with null protocol, no backtrace";
LABEL_221:
        _os_log_impl(&dword_181A5C000, v73, v74, v75, (uint8_t *)&buf, 0xCu);
      }
    }

  if (v100) {
    free(v100);
  }
  uint64_t v24 = 0LL;
LABEL_13:

  if (!v24)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v36 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
    *(_WORD *)&_BYTE buf[12] = 2114;
    *(void *)&buf[14] = v15;
    BOOL v37 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v167) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v38 = (os_log_s *)(id)gLogObj;
      uint64_t v39 = type[0];
      if (os_log_type_enabled(v38, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
        *(_WORD *)&_BYTE buf[12] = 2114;
        *(void *)&buf[14] = v15;
        _os_log_impl( &dword_181A5C000,  v38,  v39,  "%{public}s nw_framer_create_protocol_for_definition(%{public}@) failed",  buf,  0x16u);
      }
    }

    else
    {
      if ((_BYTE)v167)
      {
        uint64_t v63 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v64 = (os_log_s *)(id)gLogObj;
        os_log_type_t v65 = type[0];
        char v66 = os_log_type_enabled(v64, type[0]);
        if (v63)
        {
          if (v66)
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
            *(_WORD *)&_BYTE buf[12] = 2114;
            *(void *)&buf[14] = v15;
            *(_WORD *)&buf[22] = 2082;
            v172 = v63;
            _os_log_impl( &dword_181A5C000,  v64,  v65,  "%{public}s nw_framer_create_protocol_for_definition(%{public}@) failed, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v63);
          if (!v37) {
            goto LABEL_85;
          }
          goto LABEL_84;
        }

        if (v66)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_framer_prepend_application_protocol_inner";
          *(_WORD *)&_BYTE buf[12] = 2114;
          *(void *)&buf[14] = v15;
          _os_log_impl( &dword_181A5C000,  v64,  v65,  "%{public}s nw_framer_create_protocol_for_definition(%{public}@) failed, no backtrace",  buf,  0x16u);
        }

LABEL_83:
        if (!v37)
        {
LABEL_85:
          BOOL v41 = 0LL;
          goto LABEL_86;
        }

                free(v122);
              }
            }

        os_release(v21);
        if (!v22)
        {
LABEL_231:
          if (v12) {
            os_release(v12);
          }
          goto LABEL_233;
        }

  int v89 = v146;
  if (v92) {
    free(v92);
  }
  os_log_type_t v33 = 0LL;
LABEL_156:

  return v33;
}

        _os_log_impl(&dword_181A5C000, v77, v78, v80, buf, 0x2Au);
        goto LABEL_228;
      }

      uint64_t v77 = (os_log_s *)__nwlog_obj();
      os_log_type_t v78 = v268[0];
      if (os_log_type_enabled(v77, (os_log_type_t)v268[0]))
      {
        BOOL v79 = *(unsigned int *)(v69 + 368);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = "http1->nonresuable_connections";
        *(_WORD *)&buf[22] = 2048;
        *(void *)&_BYTE buf[24] = 1LL;
        *(_WORD *)&buf[32] = 2048;
        *(void *)&buf[34] = v79;
        BOOL v80 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
        goto LABEL_227;
      }

    free(v58);
    if (!v52) {
      return;
    }
LABEL_236:
    free(v52);
    return;
  }

  if (output_frames)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446466;
    v108 = "nw_http1_connection_send_final_chunk";
    __int16 v109 = 1024;
    *(_DWORD *)__int16 v110 = v36;
    uint64_t v48 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    BOOL v104 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v49 = (os_log_s *)__nwlog_obj();
      char v50 = type[0];
      if (!os_log_type_enabled(v49, type[0])) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136446466;
      v108 = "nw_http1_connection_send_final_chunk";
      __int16 v109 = 1024;
      *(_DWORD *)__int16 v110 = v36;
      uint64_t v51 = "%{public}s output handler reported %u frames to write, but array is empty";
    }

    else if (v104)
    {
      uint64_t v56 = (char *)__nw_create_backtrace_string();
      os_log_type_t v49 = (os_log_s *)__nwlog_obj();
      char v50 = type[0];
      __int16 v57 = os_log_type_enabled(v49, type[0]);
      if (v56)
      {
        if (v57)
        {
          *(_DWORD *)buf = 136446722;
          v108 = "nw_http1_connection_send_final_chunk";
          __int16 v109 = 1024;
          *(_DWORD *)__int16 v110 = v36;
          *(_WORD *)&v110[4] = 2082;
          *(void *)&v110[6] = v56;
          _os_log_impl( &dword_181A5C000,  v49,  v50,  "%{public}s output handler reported %u frames to write, but array is empty, dumping backtrace:%{public}s",  buf,  0x1Cu);
        }

        free(v56);
        goto LABEL_88;
      }

      if (!v57)
      {
LABEL_88:
        if (v48) {
          free(v48);
        }
        goto LABEL_90;
      }

      *(_DWORD *)buf = 136446466;
      v108 = "nw_http1_connection_send_final_chunk";
      __int16 v109 = 1024;
      *(_DWORD *)__int16 v110 = v36;
      uint64_t v51 = "%{public}s output handler reported %u frames to write, but array is empty, no backtrace";
    }

    else
    {
      os_log_type_t v49 = (os_log_s *)__nwlog_obj();
      char v50 = type[0];
      if (!os_log_type_enabled(v49, type[0])) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 136446466;
      v108 = "nw_http1_connection_send_final_chunk";
      __int16 v109 = 1024;
      *(_DWORD *)__int16 v110 = v36;
      uint64_t v51 = "%{public}s output handler reported %u frames to write, but array is empty, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v49, v50, v51, buf, 0x12u);
    goto LABEL_88;
  }

    if (v122) {
      free(v122);
    }
    goto LABEL_186;
  }

  os_unfair_lock_lock(v2 + 2);
  os_unfair_lock_opaque = v3[18]._os_unfair_lock_opaque;
  if (!os_unfair_lock_opaque)
  {
    if (!*(void *)&v3[4]._os_unfair_lock_opaque)
    {
      os_unfair_lock_unlock(v3 + 2);
      if (!nw_parameters_get_logging_disabled(*(void *)&v3[10]._os_unfair_lock_opaque))
      {
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
        }
        __int16 v6 = (os_log_s *)(id)gbrowserLogObj;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          __int128 v27 = v3[48]._os_unfair_lock_opaque;
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_browser_start";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = v27;
          _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_ERROR,  "%{public}s [B%u] The browser's client_queue is not set. You must set this browser's client_queue using nw_br owser_set_queue() in order to successfully start it.",  buf,  0x12u);
        }

        goto LABEL_41;
      }

      goto LABEL_186;
    }

    if (!*(void *)&v3[14]._os_unfair_lock_opaque
      && !*(void *)&v3[16]._os_unfair_lock_opaque
      && !nw_parameters_get_logging_disabled(*(void *)&v3[10]._os_unfair_lock_opaque))
    {
      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
      }
      uint64_t v8 = (os_log_s *)(id)gbrowserLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v9 = v3[48]._os_unfair_lock_opaque;
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_browser_start";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v9;
        _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_ERROR,  "%{public}s [B%u] The browser does not have any callback handlers set. You must set callback handlers if you wi sh to receive updates from the browser.",  buf,  0x12u);
      }
    }

    objc_storeStrong((id *)&v3[12], browser);
    uint64_t v10 = xpc_dictionary_create(0LL, 0LL, 0LL);
    unint64_t v11 = *(void **)&v3[38]._os_unfair_lock_opaque;
    *(void *)&v3[38]._os_unfair_lock_opaque = v10;

    uint64_t v12 = xpc_dictionary_create(0LL, 0LL, 0LL);
    id v13 = *(void **)&v3[40]._os_unfair_lock_opaque;
    *(void *)&v3[40]._os_unfair_lock_opaque = v12;

    uint64_t v14 = nw_array_create();
    uint64_t v15 = *(void **)&v3[34]._os_unfair_lock_opaque;
    *(void *)&v3[34]._os_unfair_lock_opaque = v14;

    uint64_t v16 = nw_array_create();
    uint64_t v17 = *(void **)&v3[36]._os_unfair_lock_opaque;
    *(void *)&v3[36]._os_unfair_lock_opaque = v16;

    uint64_t v18 = nw_dictionary_create();
    uint64_t v19 = *(void **)&v3[42]._os_unfair_lock_opaque;
    *(void *)&v3[42]._os_unfair_lock_opaque = v18;

    switch(v3[6]._os_unfair_lock_opaque)
    {
      case 0u:
        if (nw_parameters_get_logging_disabled(*(void *)&v3[10]._os_unfair_lock_opaque)) {
          goto LABEL_152;
        }
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
        }
        uint64_t v20 = (id)gbrowserLogObj;
        uint64_t v21 = v3[48]._os_unfair_lock_opaque;
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_browser_start";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v21;
        uint64_t v22 = (char *)_os_log_send_and_compose_impl();

        type[0] = 16;
        v145[0] = 0;
        if (type[0] == 17)
        {
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
          }
          BOOL v23 = (os_log_s *)(id)gbrowserLogObj;
          uint64_t v24 = type[0];
          if (os_log_type_enabled(v23, (os_log_type_t)type[0]))
          {
            uint64_t v25 = v3[48]._os_unfair_lock_opaque;
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_browser_start";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = v25;
            _os_log_impl( &dword_181A5C000,  v23,  v24,  "%{public}s [B%u] nw_browser_start called on an invalid browser",  buf,  0x12u);
          }

      if (!v46) {
        return 0LL;
      }
      uint64_t v21 = (char *)v46;
LABEL_60:
      free(v21);
      return 0LL;
    }

    if (!v96)
    {
      BOOL v47 = (os_log_s *)__nwlog_obj();
      uint64_t v48 = buf;
      if (os_log_type_enabled(v47, (os_log_type_t)buf))
      {
        *(_DWORD *)__str = 136446210;
        *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
        os_log_type_t v49 = "%{public}s called with null (response_nonce_length == exported_secret_length), backtrace limit exceeded";
        goto LABEL_226;
      }

      goto LABEL_227;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v47 = (os_log_s *)__nwlog_obj();
    uint64_t v48 = buf;
    __int16 v68 = os_log_type_enabled(v47, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (v68)
      {
        *(_DWORD *)__str = 136446210;
        *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
        os_log_type_t v49 = "%{public}s called with null (response_nonce_length == exported_secret_length), no backtrace";
        goto LABEL_226;
      }

      goto LABEL_227;
    }

    if (v68)
    {
      *(_DWORD *)__str = 136446466;
      *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
      *(_WORD *)&__str[12] = 2082;
      *(void *)&__str[14] = backtrace_string;
      __int16 v58 = "%{public}s called with null (response_nonce_length == exported_secret_length), dumping backtrace:%{public}s";
      goto LABEL_172;
    }

    free(v111);
    goto LABEL_274;
  }

  unint64_t v11 = *(void *)(a2 + 16);
  if (v11) {
    uint64_t v12 = 10;
  }
  else {
    uint64_t v12 = 9;
  }
  if (v11 <= 1) {
    id v13 = 0;
  }
  else {
    id v13 = v11 - 1;
  }
  uint64_t v14 = (v13 + v12);
  if (0xFFFFFFFFLL - a4 < v14)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v15 = *(_DWORD *)(a6 + 368);
    buf = 136446978;
    v231 = "send_data_callback";
    v232 = 2082;
    v233 = a6 + 390;
    v234 = 2080;
    v235 = " ";
    v236 = 1024;
    v237 = v15;
    uint64_t v16 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(v224) = 16;
    LOBYTE(v220) = 0;
    if (__nwlog_fault(v16, &v224, &v220))
    {
      if (v224 == 17)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v17 = (os_log_s *)gconnectionLogObj;
        uint64_t v18 = v224;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, (os_log_type_t)v224))
        {
          uint64_t v19 = *(_DWORD *)(a6 + 368);
          buf = 136446978;
          v231 = "send_data_callback";
          v232 = 2082;
          v233 = a6 + 390;
          v234 = 2080;
          v235 = " ";
          v236 = 1024;
          v237 = v19;
          uint64_t v20 = "%{public}s %{public}s%s<i%u> bytes_to_send overflow";
LABEL_87:
          _os_log_impl(&dword_181A5C000, v17, v18, v20, (uint8_t *)&buf, 0x26u);
        }
      }

      else if ((_BYTE)v220)
      {
        BOOL v36 = (char *)__nw_create_backtrace_string();
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v17 = (os_log_s *)gconnectionLogObj;
        uint64_t v18 = v224;
        BOOL v37 = os_log_type_enabled((os_log_t)gconnectionLogObj, (os_log_type_t)v224);
        if (!v36)
        {
          if (!v37) {
            goto LABEL_88;
          }
          id v52 = *(_DWORD *)(a6 + 368);
          buf = 136446978;
          v231 = "send_data_callback";
          v232 = 2082;
          v233 = a6 + 390;
          v234 = 2080;
          v235 = " ";
          v236 = 1024;
          v237 = v52;
          uint64_t v20 = "%{public}s %{public}s%s<i%u> bytes_to_send overflow, no backtrace";
          goto LABEL_87;
        }

        if (v37)
        {
          BOOL v38 = *(_DWORD *)(a6 + 368);
          buf = 136447234;
          v231 = "send_data_callback";
          v232 = 2082;
          v233 = a6 + 390;
          v234 = 2080;
          v235 = " ";
          v236 = 1024;
          v237 = v38;
          v238 = 2082;
          *(void *)v239 = v36;
          _os_log_impl( &dword_181A5C000,  v17,  v18,  "%{public}s %{public}s%s<i%u> bytes_to_send overflow, dumping backtrace:%{public}s",  (uint8_t *)&buf,  0x30u);
        }

        free(v36);
      }

      else
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v17 = (os_log_s *)gconnectionLogObj;
        uint64_t v18 = v224;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, (os_log_type_t)v224))
        {
          uint64_t v42 = *(_DWORD *)(a6 + 368);
          buf = 136446978;
          v231 = "send_data_callback";
          v232 = 2082;
          v233 = a6 + 390;
          v234 = 2080;
          v235 = " ";
          v236 = 1024;
          v237 = v42;
          uint64_t v20 = "%{public}s %{public}s%s<i%u> bytes_to_send overflow, backtrace limit exceeded";
          goto LABEL_87;
        }
      }
    }

  *(_OWORD *)os_log_type_t type = *(_OWORD *)a1->flow_id;
  LODWORD(a1[3].default_input_handler) = net_flowhash((int *)type, 0x10u, flowhash_seed) & 0xFFFF0F00;
  default_input_handler = a1->default_input_handler;
  if (!default_input_handler)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v157 = "__nw_protocol_get_path";
    __int16 v134 = (char *)_os_log_send_and_compose_impl();
    v154 = OS_LOG_TYPE_ERROR;
    v153 = 0;
    if (v154 == OS_LOG_TYPE_FAULT)
    {
      BOOL v135 = (os_log_s *)__nwlog_obj();
      uint64_t v136 = v154;
      if (!os_log_type_enabled(v135, v154)) {
        goto LABEL_369;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v157 = "__nw_protocol_get_path";
      v137 = "%{public}s called with null protocol";
    }

    else if (v153)
    {
      BOOL v145 = (char *)__nw_create_backtrace_string();
      BOOL v135 = (os_log_s *)__nwlog_obj();
      uint64_t v136 = v154;
      v146 = os_log_type_enabled(v135, v154);
      if (v145)
      {
        if (v146)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v157 = "__nw_protocol_get_path";
          v158 = 2082;
          v159 = (nw_protocol_identifier *)v145;
          _os_log_impl( &dword_181A5C000,  v135,  v136,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v145);
        goto LABEL_369;
      }

      if (!v146)
      {
LABEL_369:
        if (v134) {
          free(v134);
        }
        goto LABEL_241;
      }

      *(_DWORD *)buf = 136446210;
      uint64_t v157 = "__nw_protocol_get_path";
      v137 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      BOOL v135 = (os_log_s *)__nwlog_obj();
      uint64_t v136 = v154;
      if (!os_log_type_enabled(v135, v154)) {
        goto LABEL_369;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v157 = "__nw_protocol_get_path";
      v137 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v135, v136, v137, buf, 0xCu);
    goto LABEL_369;
  }

  os_log_type_t v91 = default_input_handler->handle;
  if (v91 == &nw_protocol_ref_counted_handle)
  {
    os_log_type_t v92 = default_input_handler[1].callbacks;
    if (v92) {
      default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v92->add_input_handler + 1);
    }
  }

  v93 = default_input_handler->callbacks;
  if (!v93 || (get_path = (uint64_t (*)(nw_protocol *))v93->get_path) == 0LL)
  {
    __nwlog_obj();
    name = default_input_handler->identifier->name;
    *(_DWORD *)buf = 136446722;
    uint64_t v157 = "__nw_protocol_get_path";
    if (!name) {
      name = "invalid";
    }
    v158 = 2082;
    v159 = (nw_protocol_identifier *)name;
    v160 = 2048;
    v161 = default_input_handler;
    uint64_t v123 = (char *)_os_log_send_and_compose_impl();
    v154 = OS_LOG_TYPE_ERROR;
    v153 = 0;
    if (__nwlog_fault(v123, &v154, &v153))
    {
      if (v154 == OS_LOG_TYPE_FAULT)
      {
        int v124 = (os_log_s *)__nwlog_obj();
        BOOL v125 = v154;
        if (!os_log_type_enabled(v124, v154)) {
          goto LABEL_334;
        }
        char v126 = default_input_handler->identifier->name;
        if (!v126) {
          char v126 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v157 = "__nw_protocol_get_path";
        v158 = 2082;
        v159 = (nw_protocol_identifier *)v126;
        v160 = 2048;
        v161 = default_input_handler;
        os_log_type_t v127 = "%{public}s protocol %{public}s (%p) has invalid get_path callback";
LABEL_333:
        _os_log_impl(&dword_181A5C000, v124, v125, v127, buf, 0x20u);
        goto LABEL_334;
      }

      if (!v153)
      {
        int v124 = (os_log_s *)__nwlog_obj();
        BOOL v125 = v154;
        if (!os_log_type_enabled(v124, v154)) {
          goto LABEL_334;
        }
        v147 = default_input_handler->identifier->name;
        if (!v147) {
          v147 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v157 = "__nw_protocol_get_path";
        v158 = 2082;
        v159 = (nw_protocol_identifier *)v147;
        v160 = 2048;
        v161 = default_input_handler;
        os_log_type_t v127 = "%{public}s protocol %{public}s (%p) has invalid get_path callback, backtrace limit exceeded";
        goto LABEL_333;
      }

      v138 = (char *)__nw_create_backtrace_string();
      int v124 = (os_log_s *)__nwlog_obj();
      BOOL v125 = v154;
      os_log_type_t v139 = os_log_type_enabled(v124, v154);
      if (!v138)
      {
        if (!v139) {
          goto LABEL_334;
        }
        v148 = default_input_handler->identifier->name;
        if (!v148) {
          v148 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v157 = "__nw_protocol_get_path";
        v158 = 2082;
        v159 = (nw_protocol_identifier *)v148;
        v160 = 2048;
        v161 = default_input_handler;
        os_log_type_t v127 = "%{public}s protocol %{public}s (%p) has invalid get_path callback, no backtrace";
        goto LABEL_333;
      }

      if (v139)
      {
        v140 = default_input_handler->identifier->name;
        if (!v140) {
          v140 = "invalid";
        }
        *(_DWORD *)buf = 136446978;
        uint64_t v157 = "__nw_protocol_get_path";
        v158 = 2082;
        v159 = (nw_protocol_identifier *)v140;
        v160 = 2048;
        v161 = default_input_handler;
        v162 = 2082;
        v163 = v138;
        _os_log_impl( &dword_181A5C000,  v124,  v125,  "%{public}s protocol %{public}s (%p) has invalid get_path callback, dumping backtrace:%{public}s",  buf,  0x2Au);
      }

      free(v138);
    }

void nw_protocol_udp_get_message_properties(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v16 = "nw_protocol_udp_get_message_properties";
    int v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v16 = "nw_protocol_udp_get_message_properties";
      uint64_t v8 = "%{public}s called with null protocol";
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v16 = "nw_protocol_udp_get_message_properties";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_36:
        if (!v5) {
          return;
        }
LABEL_37:
        free(v5);
        return;
      }

      if (!v10) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v16 = "nw_protocol_udp_get_message_properties";
      uint64_t v8 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      __int16 v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v16 = "nw_protocol_udp_get_message_properties";
      uint64_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

BOOL nw_protocol_udp_copy_info(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v36 = "nw_protocol_udp_copy_info";
    __int16 v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v36 = "nw_protocol_udp_copy_info";
        uint64_t v20 = "%{public}s called with null protocol";
LABEL_66:
        _os_log_impl(&dword_181A5C000, v18, v19, v20, buf, 0xCu);
      }

void nw_protocol_udp_error(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v41 = "nw_protocol_udp_error";
    uint64_t default_input_handler = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (v38)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v14 = (os_log_s *)__nwlog_obj();
        os_log_type_t v15 = type;
        BOOL v33 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v33)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v41 = "nw_protocol_udp_error";
            __int16 v42 = 2082;
            BOOL v43 = backtrace_string;
            os_log_type_t v19 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
            goto LABEL_33;
          }

BOOL ___ZL24__nw_signpost_is_enabledv_block_invoke()
{
  BOOL result = networkd_settings_get_BOOL((const char *)nw_setting_enable_signposts);
  _nw_signposts_enabled = result;
  return result;
}

uint64_t ___ZL38nw_protocol_udp_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t v102 = *MEMORY[0x1895F89C0];
  nw_frame_unclaim(a2, a2, 8u, 0);
  unsigned int v93 = 0;
  uint64_t v4 = nw_frame_unclaimed_bytes(a2, &v93);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(v6 + 64);
    if (v7) {
      ++*(void *)(v7 + 120);
    }
    *(_DWORD *)uint64_t v4 = *(_DWORD *)(v6 + 88);
    *(_WORD *)(v4 + 4) = bswap32((unsigned __int16)v93) >> 16;
    if (a2)
    {
      if (*(_DWORD *)(a2 + 176)) {
        goto LABEL_30;
      }
      int v8 = *(_DWORD *)(v6 + 80);
      if (v8 > 499)
      {
        if (v8 <= 699)
        {
          if (v8 == 500)
          {
            int v8 = 2621728;
            goto LABEL_29;
          }

          if (v8 == 600)
          {
            int v8 = 3146000;
            goto LABEL_29;
          }
        }

        else
        {
          switch(v8)
          {
            case 700:
              int v8 = 3670272;
              goto LABEL_29;
            case 800:
              int v8 = 4194688;
              goto LABEL_29;
            case 900:
              int v8 = 4718992;
              goto LABEL_29;
          }
        }
      }

      else if (v8 <= 199)
      {
        if (!v8) {
          goto LABEL_29;
        }
        if (v8 == 100)
        {
          int v8 = 524432;
          goto LABEL_29;
        }
      }

      else
      {
        switch(v8)
        {
          case 200:
            int v8 = 1048704;
            goto LABEL_29;
          case 300:
            int v8 = 1572880;
            goto LABEL_29;
          case 400:
            int v8 = 2097184;
LABEL_29:
            *(_DWORD *)(a2 + 176) = v8;
            goto LABEL_30;
        }
      }

      int v8 = 0;
      goto LABEL_29;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v97 = "__nw_frame_get_service_class";
    uint64_t v40 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v94 = 0;
    if (__nwlog_fault(v40, &type, &v94))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v41 = (os_log_s *)__nwlog_obj();
        os_log_type_t v42 = type;
        if (!os_log_type_enabled(v41, type)) {
          goto LABEL_136;
        }
        *(_DWORD *)buf = 136446210;
        v97 = "__nw_frame_get_service_class";
        BOOL v43 = "%{public}s called with null frame";
LABEL_135:
        _os_log_impl(&dword_181A5C000, v41, v42, v43, buf, 0xCu);
        goto LABEL_136;
      }

      if (!v94)
      {
        uint64_t v41 = (os_log_s *)__nwlog_obj();
        os_log_type_t v42 = type;
        if (!os_log_type_enabled(v41, type)) {
          goto LABEL_136;
        }
        *(_DWORD *)buf = 136446210;
        v97 = "__nw_frame_get_service_class";
        BOOL v43 = "%{public}s called with null frame, backtrace limit exceeded";
        goto LABEL_135;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v41 = (os_log_s *)__nwlog_obj();
      os_log_type_t v42 = type;
      BOOL v45 = os_log_type_enabled(v41, type);
      if (!backtrace_string)
      {
        if (!v45) {
          goto LABEL_136;
        }
        *(_DWORD *)buf = 136446210;
        v97 = "__nw_frame_get_service_class";
        BOOL v43 = "%{public}s called with null frame, no backtrace";
        goto LABEL_135;
      }

      if (v45)
      {
        *(_DWORD *)buf = 136446466;
        v97 = "__nw_frame_get_service_class";
        __int16 v98 = 2082;
        BOOL v99 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v41,  v42,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
    }

LABEL_206:
              if (v54) {
                free(v54);
              }
              uint64_t v22 = 0LL;
              uint64_t v21 = *(void *)(*(void *)(a1 + 48) + 72LL);
              goto LABEL_57;
            }

            __nwlog_obj();
            *(_DWORD *)buf = 136446210;
            v97 = "__nw_frame_check_validity";
            __int16 v58 = (char *)_os_log_send_and_compose_impl();
            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v94 = 0;
            if (__nwlog_fault(v58, &type, &v94))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                __int16 v59 = (os_log_s *)__nwlog_obj();
                os_log_type_t v60 = type;
                if (!os_log_type_enabled(v59, type)) {
                  goto LABEL_212;
                }
                *(_DWORD *)buf = 136446210;
                v97 = "__nw_frame_check_validity";
                __int16 v61 = "%{public}s called with null frame";
                goto LABEL_211;
              }

              if (!v94)
              {
                __int16 v59 = (os_log_s *)__nwlog_obj();
                os_log_type_t v60 = type;
                if (!os_log_type_enabled(v59, type)) {
                  goto LABEL_212;
                }
                *(_DWORD *)buf = 136446210;
                v97 = "__nw_frame_check_validity";
                __int16 v61 = "%{public}s called with null frame, backtrace limit exceeded";
                goto LABEL_211;
              }

              os_log_type_t v78 = (char *)__nw_create_backtrace_string();
              __int16 v59 = (os_log_s *)__nwlog_obj();
              os_log_type_t v60 = type;
              BOOL v79 = os_log_type_enabled(v59, type);
              if (v78)
              {
                if (v79)
                {
                  *(_DWORD *)buf = 136446466;
                  v97 = "__nw_frame_check_validity";
                  __int16 v98 = 2082;
                  BOOL v99 = v78;
                  _os_log_impl( &dword_181A5C000,  v59,  v60,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v78);
                goto LABEL_212;
              }

              if (v79)
              {
                *(_DWORD *)buf = 136446210;
                v97 = "__nw_frame_check_validity";
                __int16 v61 = "%{public}s called with null frame, no backtrace";
LABEL_211:
                _os_log_impl(&dword_181A5C000, v59, v60, v61, buf, 0xCu);
              }
            }

        if (v162) {
          free(v162);
        }
        **(_DWORD **)(a1 + 88) = -1;
LABEL_209:
        v176 = *(void *)(*(void *)(a1 + 32) + 8LL);
        v177 = *(unsigned int *)(v176 + 24) + 1LL;
        v178 = v177 << 31 >> 31;
        *(_DWORD *)(v176 + 24) = v177;
        if (v178 != v177 || v178 < 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v179 = (_DWORD *)*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = "count";
          *(_WORD *)&buf[22] = 2048;
          v292 = 1LL;
          v293 = 2048;
          v294 = v179;
          v180 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          v288 = 0;
          if (__nwlog_fault(v180, &type, &v288))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              v181 = (os_log_s *)__nwlog_obj();
              v182 = type;
              if (os_log_type_enabled(v181, type))
              {
                v183 = (_DWORD *)*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                *(_WORD *)&_BYTE buf[12] = 2082;
                *(void *)&buf[14] = "count";
                *(_WORD *)&buf[22] = 2048;
                v292 = 1LL;
                v293 = 2048;
                v294 = v183;
                v184 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_224:
                _os_log_impl(&dword_181A5C000, v181, v182, v184, buf, 0x2Au);
              }
            }

            else if (v288)
            {
              v185 = (char *)__nw_create_backtrace_string();
              v181 = (os_log_s *)__nwlog_obj();
              v182 = type;
              v186 = os_log_type_enabled(v181, type);
              if (v185)
              {
                if (v186)
                {
                  v187 = (_DWORD *)*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
                  *(_DWORD *)buf = 136447234;
                  *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                  *(_WORD *)&_BYTE buf[12] = 2082;
                  *(void *)&buf[14] = "count";
                  *(_WORD *)&buf[22] = 2048;
                  v292 = 1LL;
                  v293 = 2048;
                  v294 = v187;
                  v295 = 2082;
                  v296 = v185;
                  _os_log_impl( &dword_181A5C000,  v181,  v182,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                }

                free(v185);
                goto LABEL_225;
              }

              if (v186)
              {
                v189 = (_DWORD *)*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                *(_WORD *)&_BYTE buf[12] = 2082;
                *(void *)&buf[14] = "count";
                *(_WORD *)&buf[22] = 2048;
                v292 = 1LL;
                v293 = 2048;
                v294 = v189;
                v184 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                goto LABEL_224;
              }
            }

            else
            {
              v181 = (os_log_s *)__nwlog_obj();
              v182 = type;
              if (os_log_type_enabled(v181, type))
              {
                v188 = (_DWORD *)*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                *(_WORD *)&_BYTE buf[12] = 2082;
                *(void *)&buf[14] = "count";
                *(_WORD *)&buf[22] = 2048;
                v292 = 1LL;
                v293 = 2048;
                v294 = v188;
                v184 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                goto LABEL_224;
              }
            }
          }

    goto LABEL_207;
  }

  __nwlog_obj();
  __int16 v68 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
  int v69 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v131) = 0;
  if (__nwlog_fault(v69, type, &v131))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v70 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v71 = type[0];
      if (os_log_type_enabled(v70, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
        _os_log_impl(&dword_181A5C000, v70, v71, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if ((_BYTE)v131)
    {
      BOOL v82 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v70 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v83 = type[0];
      BOOL v84 = os_log_type_enabled(v70, type[0]);
      if (v82)
      {
        if (v84)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
          uint64_t v136 = 2082;
          v137 = v82;
          _os_log_impl( &dword_181A5C000,  v70,  v83,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v82);
        goto LABEL_193;
      }

      if (v84)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
        _os_log_impl(&dword_181A5C000, v70, v83, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v70 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v95 = type[0];
      if (os_log_type_enabled(v70, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_notify";
        _os_log_impl( &dword_181A5C000,  v70,  v95,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

        if (v132) {
          free(v132);
        }
        goto LABEL_34;
      }
    }
  }
}

            if (v76) {
              free(v76);
            }
            __int16 v14 = v75;
            goto LABEL_94;
          }

            if (v76) {
              free(v76);
            }
            goto LABEL_95;
          }

            *(_DWORD *)(a2 + 140) = v16;
            if (*(void *)(a2 + 80)) {
              __assert_rtn("header_out_begin_literal", "lsqpack.c", 3177, "!read_ctx->hbrc_out.xhdr");
            }
            v133 = *(_DWORD *)(a2 + 148);
            if (*(_DWORD *)(a2 + 152)) {
              __int16 v134 = v16 >> 1;
            }
            else {
              __int16 v134 = 0;
            }
            BOOL v135 = 4 * (*(_DWORD *)a1 & 1LL);
            uint64_t v136 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 8LL))( *(void *)(a2 + 32),  0LL,  v135 + v134 + v16);
            *(void *)(a2 + 80) = v136;
            if (!v136)
            {
              v161 = 3719;
              goto LABEL_348;
            }

            *(_BYTE *)(v136 + 35) = v135;
            if (v133) {
              *(_BYTE *)(v136 + 33) |= 0x40u;
            }
            *(void *)(a2 + 88) = 0LL;
            if (*(_DWORD *)(a2 + 152))
            {
              *(_DWORD *)(a2 + 184) = 0;
              v137 = 9;
            }

            else
            {
              v137 = 10;
            }

            *(_DWORD *)(a2 + 136) = v137;
            goto LABEL_5;
          }

          if ((v11 & 0x10) == 0)
          {
            *(_DWORD *)(a2 + 148) = v11 & 8;
            *(_DWORD *)(a2 + 160) = 0;
            *(_DWORD *)(a2 + 136) = 11;
            int v9 = 3LL;
LABEL_55:
            uint64_t v7 = v10 + 1;
            os_log_type_t v48 = *v10;
            os_log_type_t v49 = ~(-1 << v9);
            __int16 v16 = v48 & v49;
            if ((v48 & v49) >= v49)
            {
              uint64_t v17 = 0;
              BOOL v47 = 1;
              do
              {
                if (v7 >= v8)
                {
                  if ((v47 & 1) != 0) {
                    os_log_type_t v144 = 0;
                  }
                  else {
                    os_log_type_t v144 = *(_DWORD *)(a2 + 168);
                  }
                  v160 = v144 + (_DWORD)v7 - (_DWORD)v10;
                  if (v160 >= 0xB)
                  {
                    v161 = 3802;
                    goto LABEL_349;
                  }

                  goto LABEL_340;
                }

    if (v91) {
      free(v91);
    }
LABEL_208:

    goto LABEL_102;
  }

  v135.receiver = a1;
  v135.super_class = (Class)&OBJC_CLASS___nw_ip_channel_inbox;
  __int16 v14 = (id *)objc_msgSendSuper2(&v135, sel_initWithDelegate_, v12);
  a1 = v14;
  if (!v14) {
    goto LABEL_103;
  }
  char v15 = v14;
  objc_storeStrong(v14 + 8, a2);
  __int16 v16 = &OBJC_IVAR___NWConcrete_tcp_connection_tc_event_disconnected_delivered;
  objc_storeStrong(a1 + 9, a3);
  objc_storeStrong(a1 + 6, a4);
  uint64_t v17 = (id *)v11;
  __int16 v18 = v17[2];

  uint64_t v19 = a1[5];
  a1[5] = v18;

  uint64_t v20 = v17;
  uint64_t v21 = v20[4];

  uint64_t v22 = a1[4];
  a1[4] = v21;

  if (!a1[4])
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v28 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "-[nw_ip_channel_inbox initWithPath:flow:parameters:delegate:]";
    *(_WORD *)&_BYTE buf[12] = 2114;
    *(void *)&buf[14] = v20;
    BOOL v29 = (char *)_os_log_send_and_compose_impl();

    uu[0] = OS_LOG_TYPE_ERROR;
    uint64_t v136 = 0;
    if (__nwlog_fault(v29, uu, &v136))
    {
      if (uu[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v30 = (os_log_s *)(id)gLogObj;
        BOOL v31 = uu[0];
        if (os_log_type_enabled(v30, uu[0]))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "-[nw_ip_channel_inbox initWithPath:flow:parameters:delegate:]";
          *(_WORD *)&_BYTE buf[12] = 2114;
          *(void *)&buf[14] = v20;
          _os_log_impl( &dword_181A5C000,  v30,  v31,  "%{public}s flow (%{public}@) does not specify local endpoint",  buf,  0x16u);
        }
      }

      else if (v136)
      {
        __int16 v46 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v30 = (os_log_s *)(id)gLogObj;
        BOOL v47 = uu[0];
        os_log_type_t v48 = os_log_type_enabled(v30, uu[0]);
        if (v46)
        {
          if (v48)
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "-[nw_ip_channel_inbox initWithPath:flow:parameters:delegate:]";
            *(_WORD *)&_BYTE buf[12] = 2114;
            *(void *)&buf[14] = v20;
            v138 = 2082;
            os_log_type_t v139 = v46;
            _os_log_impl( &dword_181A5C000,  v30,  v47,  "%{public}s flow (%{public}@) does not specify local endpoint, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v46);
          if (!v29) {
            goto LABEL_101;
          }
          goto LABEL_82;
        }

        if (v48)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "-[nw_ip_channel_inbox initWithPath:flow:parameters:delegate:]";
          *(_WORD *)&_BYTE buf[12] = 2114;
          *(void *)&buf[14] = v20;
          _os_log_impl( &dword_181A5C000,  v30,  v47,  "%{public}s flow (%{public}@) does not specify local endpoint, no backtrace",  buf,  0x16u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v30 = (os_log_s *)(id)gLogObj;
        __int16 v68 = uu[0];
        if (os_log_type_enabled(v30, uu[0]))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "-[nw_ip_channel_inbox initWithPath:flow:parameters:delegate:]";
          *(_WORD *)&_BYTE buf[12] = 2114;
          *(void *)&buf[14] = v20;
          _os_log_impl( &dword_181A5C000,  v30,  v68,  "%{public}s flow (%{public}@) does not specify local endpoint, backtrace limit exceeded",  buf,  0x16u);
        }
      }
    }

    if (!v29) {
      goto LABEL_101;
    }
LABEL_82:
    free(v29);
    goto LABEL_101;
  }

  protocol_level = nw_path_flow_get_protocol_level(v20);
  *((_DWORD *)a1 + 14) = protocol_level;
  if (!protocol_level)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v24 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "-[nw_ip_channel_inbox initWithPath:flow:parameters:delegate:]";
      _os_log_impl( &dword_181A5C000,  v24,  OS_LOG_TYPE_ERROR,  "%{public}s flow level undefined, using internet-level",  buf,  0xCu);
    }

    *((_DWORD *)a1 + 14) = 2;
  }

  address = nw_endpoint_get_address((nw_endpoint_t)a1[4]);
  a1[19] = (id)address;
  if (!address)
  {
    __nwlog_obj();
    os_log_type_t v106 = (void *)objc_claimAutoreleasedReturnValue();
    char v107 = a1[4];
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "-[nw_ip_channel_inbox initWithPath:flow:parameters:delegate:]";
    *(_WORD *)&_BYTE buf[12] = 2112;
    *(void *)&buf[14] = v107;
    v108 = (char *)_os_log_send_and_compose_impl();

    uu[0] = OS_LOG_TYPE_ERROR;
    uint64_t v136 = 0;
    if (__nwlog_fault(v108, uu, &v136))
    {
      if (uu[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        __int16 v109 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __int16 v110 = uu[0];
        if (os_log_type_enabled(v109, uu[0]))
        {
          __int16 v111 = v15[4];
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "-[nw_ip_channel_inbox initWithPath:flow:parameters:delegate:]";
          *(_WORD *)&_BYTE buf[12] = 2112;
          *(void *)&buf[14] = v111;
          _os_log_impl(&dword_181A5C000, v109, v110, "%{public}s endpoint %@ is not an address", buf, 0x16u);
        }
      }

      else if (v136)
      {
        uint64_t v117 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        __int16 v109 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v118 = uu[0];
        __int128 v119 = os_log_type_enabled(v109, uu[0]);
        if (v117)
        {
          if (v119)
          {
            __int128 v120 = v15[4];
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "-[nw_ip_channel_inbox initWithPath:flow:parameters:delegate:]";
            *(_WORD *)&_BYTE buf[12] = 2112;
            *(void *)&buf[14] = v120;
            v138 = 2082;
            os_log_type_t v139 = v117;
            _os_log_impl( &dword_181A5C000,  v109,  v118,  "%{public}s endpoint %@ is not an address, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v117);
          goto LABEL_219;
        }

        if (v119)
        {
          v131 = v15[4];
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "-[nw_ip_channel_inbox initWithPath:flow:parameters:delegate:]";
          *(_WORD *)&_BYTE buf[12] = 2112;
          *(void *)&buf[14] = v131;
          _os_log_impl( &dword_181A5C000,  v109,  v118,  "%{public}s endpoint %@ is not an address, no backtrace",  buf,  0x16u);
        }
      }

      else
      {
        __nwlog_obj();
        __int16 v109 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v129 = uu[0];
        if (os_log_type_enabled(v109, uu[0]))
        {
          __int16 v130 = v15[4];
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "-[nw_ip_channel_inbox initWithPath:flow:parameters:delegate:]";
          *(_WORD *)&_BYTE buf[12] = 2112;
          *(void *)&buf[14] = v130;
          _os_log_impl( &dword_181A5C000,  v109,  v129,  "%{public}s endpoint %@ is not an address, backtrace limit exceeded",  buf,  0x16u);
        }
      }
    }

      if (!v40) {
        return 0LL;
      }
      uint64_t v35 = (char *)v40;
      goto LABEL_37;
    }

    if (!v79)
    {
      uint64_t v41 = (os_log_s *)__nwlog_obj();
      os_log_type_t v42 = type;
      if (os_log_type_enabled(v41, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v82 = "nw_http_decrypt_oblivious_request";
        BOOL v43 = "%{public}s called with null (request_length > (hdr_length + tag_length + enc_length)), backtrace limit exceeded";
        goto LABEL_205;
      }

      goto LABEL_206;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v41 = (os_log_s *)__nwlog_obj();
    os_log_type_t v42 = type;
    __int16 v61 = os_log_type_enabled(v41, type);
    if (!backtrace_string)
    {
      if (v61)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v82 = "nw_http_decrypt_oblivious_request";
        BOOL v43 = "%{public}s called with null (request_length > (hdr_length + tag_length + enc_length)), no backtrace";
        goto LABEL_205;
      }

      goto LABEL_206;
    }

    if (v61)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v82 = "nw_http_decrypt_oblivious_request";
      uint64_t v83 = 2082;
      BOOL v84 = (uint64_t)backtrace_string;
      __int16 v46 = "%{public}s called with null (request_length > (hdr_length + tag_length + enc_length)), dumping backtrace:%{public}s";
      goto LABEL_131;
    }

          if (!v52) {
            goto LABEL_208;
          }
          goto LABEL_207;
        }

        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v40 = *(_DWORD *)(v11 + 368);
        *(_DWORD *)buf = 136447234;
        __int16 v111 = "nw_protocol_http2_frame_output_finalizer";
        uint64_t v112 = 2082;
        *(void *)__int16 v113 = v11 + 390;
        *(_WORD *)&v113[8] = 2080;
        *(void *)&v113[10] = " ";
        *(_WORD *)&v113[18] = 1024;
        *(_DWORD *)&v113[20] = v40;
        *(_WORD *)&v113[24] = 2048;
        *(void *)&v113[26] = a1;
        BOOL v31 = (const char *)_os_log_send_and_compose_impl();
        LOBYTE(type) = 16;
        LOBYTE(v108) = 0;
        if (type == 17)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v41 = (os_log_s *)gconnectionLogObj;
          os_log_type_t v42 = type;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, (os_log_type_t)type))
          {
            BOOL v43 = *(_DWORD *)(v11 + 368);
            *(_DWORD *)buf = 136447234;
            __int16 v111 = "nw_protocol_http2_frame_output_finalizer";
            uint64_t v112 = 2082;
            *(void *)__int16 v113 = v11 + 390;
            *(_WORD *)&v113[8] = 2080;
            *(void *)&v113[10] = " ";
            *(_WORD *)&v113[18] = 1024;
            *(_DWORD *)&v113[20] = v43;
            *(_WORD *)&v113[24] = 2048;
            *(void *)&v113[26] = a1;
            uint64_t v35 = "%{public}s %{public}s%s<i%u> stream not found for frame %p";
LABEL_137:
            os_log_type_t v65 = v41;
            char v66 = v42;
            BOOL v67 = 48;
            goto LABEL_138;
          }
        }

        else if ((_BYTE)v108)
        {
          BOOL v47 = (char *)__nw_create_backtrace_string();
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v41 = (os_log_s *)gconnectionLogObj;
          os_log_type_t v42 = type;
          os_log_type_t v48 = os_log_type_enabled((os_log_t)gconnectionLogObj, (os_log_type_t)type);
          if (v47)
          {
            if (v48)
            {
              os_log_type_t v49 = *(_DWORD *)(v11 + 368);
              *(_DWORD *)buf = 136447490;
              __int16 v111 = "nw_protocol_http2_frame_output_finalizer";
              uint64_t v112 = 2082;
              *(void *)__int16 v113 = v11 + 390;
              *(_WORD *)&v113[8] = 2080;
              *(void *)&v113[10] = " ";
              *(_WORD *)&v113[18] = 1024;
              *(_DWORD *)&v113[20] = v49;
              *(_WORD *)&v113[24] = 2048;
              *(void *)&v113[26] = a1;
              *(_WORD *)&v113[34] = 2082;
              *(void *)&v113[36] = v47;
              _os_log_impl( &dword_181A5C000,  v41,  v42,  "%{public}s %{public}s%s<i%u> stream not found for frame %p, dumping backtrace:%{public}s",  buf,  0x3Au);
            }

            free(v47);
            if (!v31) {
              goto LABEL_142;
            }
LABEL_140:
            BOOL v79 = (char *)v31;
LABEL_141:
            free(v79);
            goto LABEL_142;
          }

          if (v48)
          {
            os_log_type_t v78 = *(_DWORD *)(v11 + 368);
            *(_DWORD *)buf = 136447234;
            __int16 v111 = "nw_protocol_http2_frame_output_finalizer";
            uint64_t v112 = 2082;
            *(void *)__int16 v113 = v11 + 390;
            *(_WORD *)&v113[8] = 2080;
            *(void *)&v113[10] = " ";
            *(_WORD *)&v113[18] = 1024;
            *(_DWORD *)&v113[20] = v78;
            *(_WORD *)&v113[24] = 2048;
            *(void *)&v113[26] = a1;
            uint64_t v35 = "%{public}s %{public}s%s<i%u> stream not found for frame %p, no backtrace";
            goto LABEL_137;
          }
        }

        else
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v41 = (os_log_s *)gconnectionLogObj;
          os_log_type_t v42 = type;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, (os_log_type_t)type))
          {
            __int16 v68 = *(_DWORD *)(v11 + 368);
            *(_DWORD *)buf = 136447234;
            __int16 v111 = "nw_protocol_http2_frame_output_finalizer";
            uint64_t v112 = 2082;
            *(void *)__int16 v113 = v11 + 390;
            *(_WORD *)&v113[8] = 2080;
            *(void *)&v113[10] = " ";
            *(_WORD *)&v113[18] = 1024;
            *(_DWORD *)&v113[20] = v68;
            *(_WORD *)&v113[24] = 2048;
            *(void *)&v113[26] = a1;
            uint64_t v35 = "%{public}s %{public}s%s<i%u> stream not found for frame %p, backtrace limit exceeded";
            goto LABEL_137;
          }
        }
      }

      else
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v30 = *(_DWORD *)(v11 + 368);
        *(_DWORD *)buf = 136446978;
        __int16 v111 = "nw_protocol_http2_frame_output_finalizer";
        uint64_t v112 = 2082;
        *(void *)__int16 v113 = v11 + 390;
        *(_WORD *)&v113[8] = 2080;
        *(void *)&v113[10] = " ";
        *(_WORD *)&v113[18] = 1024;
        *(_DWORD *)&v113[20] = v30;
        BOOL v31 = (const char *)_os_log_send_and_compose_impl();
        LOBYTE(type) = 16;
        LOBYTE(v108) = 0;
        if (__nwlog_fault(v31, &type, &v108))
        {
          if (type == 17)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            int v32 = (os_log_s *)gconnectionLogObj;
            uint64_t v33 = type;
            if (!os_log_type_enabled((os_log_t)gconnectionLogObj, (os_log_type_t)type)) {
              goto LABEL_139;
            }
            BOOL v34 = *(_DWORD *)(v11 + 368);
            *(_DWORD *)buf = 136446978;
            __int16 v111 = "nw_protocol_http2_frame_output_finalizer";
            uint64_t v112 = 2082;
            *(void *)__int16 v113 = v11 + 390;
            *(_WORD *)&v113[8] = 2080;
            *(void *)&v113[10] = " ";
            *(_WORD *)&v113[18] = 1024;
            *(_DWORD *)&v113[20] = v34;
            uint64_t v35 = "%{public}s %{public}s%s<i%u> input_protocol not found";
          }

          else if ((_BYTE)v108)
          {
            __int16 v44 = (char *)__nw_create_backtrace_string();
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            int v32 = (os_log_s *)gconnectionLogObj;
            uint64_t v33 = type;
            BOOL v45 = os_log_type_enabled((os_log_t)gconnectionLogObj, (os_log_type_t)type);
            if (v44)
            {
              if (v45)
              {
                __int16 v46 = *(_DWORD *)(v11 + 368);
                *(_DWORD *)buf = 136447234;
                __int16 v111 = "nw_protocol_http2_frame_output_finalizer";
                uint64_t v112 = 2082;
                *(void *)__int16 v113 = v11 + 390;
                *(_WORD *)&v113[8] = 2080;
                *(void *)&v113[10] = " ";
                *(_WORD *)&v113[18] = 1024;
                *(_DWORD *)&v113[20] = v46;
                *(_WORD *)&v113[24] = 2082;
                *(void *)&v113[26] = v44;
                _os_log_impl( &dword_181A5C000,  v32,  v33,  "%{public}s %{public}s%s<i%u> input_protocol not found, dumping backtrace:%{public}s",  buf,  0x30u);
              }

              free(v44);
              goto LABEL_139;
            }

            if (!v45) {
              goto LABEL_139;
            }
            os_log_type_t v64 = *(_DWORD *)(v11 + 368);
            *(_DWORD *)buf = 136446978;
            __int16 v111 = "nw_protocol_http2_frame_output_finalizer";
            uint64_t v112 = 2082;
            *(void *)__int16 v113 = v11 + 390;
            *(_WORD *)&v113[8] = 2080;
            *(void *)&v113[10] = " ";
            *(_WORD *)&v113[18] = 1024;
            *(_DWORD *)&v113[20] = v64;
            uint64_t v35 = "%{public}s %{public}s%s<i%u> input_protocol not found, no backtrace";
          }

          else
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            int v32 = (os_log_s *)gconnectionLogObj;
            uint64_t v33 = type;
            if (!os_log_type_enabled((os_log_t)gconnectionLogObj, (os_log_type_t)type)) {
              goto LABEL_139;
            }
            os_log_type_t v56 = *(_DWORD *)(v11 + 368);
            *(_DWORD *)buf = 136446978;
            __int16 v111 = "nw_protocol_http2_frame_output_finalizer";
            uint64_t v112 = 2082;
            *(void *)__int16 v113 = v11 + 390;
            *(_WORD *)&v113[8] = 2080;
            *(void *)&v113[10] = " ";
            *(_WORD *)&v113[18] = 1024;
            *(_DWORD *)&v113[20] = v56;
            uint64_t v35 = "%{public}s %{public}s%s<i%u> input_protocol not found, backtrace limit exceeded";
          }

          os_log_type_t v65 = v32;
          char v66 = v33;
          BOOL v67 = 38;
LABEL_138:
          _os_log_impl(&dword_181A5C000, v65, v66, v35, buf, v67);
        }
      }

LABEL_184:
    if (v46) {
      free(v46);
    }
    *(_WORD *)(*(void *)(a1 + 48) + 94LL) &= ~0x100u;
    BOOL v82 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
    {
      uint64_t v83 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 136446722;
      v97 = "nw_protocol_udp_finalize_output_frames_block_invoke";
      if (v83) {
        BOOL v84 = (const char *)(v83 + 96);
      }
      else {
        BOOL v84 = "";
      }
      __int16 v98 = 2082;
      BOOL v99 = (void *)v84;
      __int16 v100 = 1024;
      int v101 = 22;
      _os_log_impl( &dword_181A5C000,  v82,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s udp set internet checksum offload failed (err %d)",  buf,  0x1Cu);
    }

    goto LABEL_44;
  }

  BOOL v36 = (os_log_s *)__nwlog_obj();
  if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
  {
    uint64_t v37 = *(void *)(a1 + 48);
    if (v37) {
      char v38 = (const char *)(v37 + 96);
    }
    else {
      char v38 = "";
    }
    *(_DWORD *)buf = 136446466;
    v97 = "nw_protocol_udp_finalize_output_frames_block_invoke";
    __int16 v98 = 2082;
    BOOL v99 = (void *)v38;
    _os_log_impl( &dword_181A5C000,  v36,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s UDP frame is no longer valid",  buf,  0x16u);
  }

  uint64_t v39 = *(void *)(a1 + 48);
  if (v39)
  {
    *(void *)(v39 + 64) = 0LL;
    *(void *)(v39 + 72) = 0LL;
  }

  return 1LL;
}

        if (!v38) {
          goto LABEL_138;
        }
        goto LABEL_185;
      }

      __nwlog_obj();
      __int16 v58 = (void *)objc_claimAutoreleasedReturnValue();
      __int16 v59 = networkd_privileged_result_to_string(v36);
      *(_DWORD *)buf = 136446722;
      BOOL v91 = "networkd_privileged_reload_managed_network_settings";
      char v92 = 2048;
      *(void *)unsigned int v93 = v36;
      *(_WORD *)&v93[8] = 2082;
      *(void *)&v93[10] = v59;
      char v38 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v88 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __int16 v61 = type;
        if (os_log_type_enabled(v60, type))
        {
          *(_DWORD *)buf = 136446722;
          BOOL v91 = "networkd_privileged_reload_managed_network_settings";
          char v92 = 2048;
          *(void *)unsigned int v93 = v36;
          *(_WORD *)&v93[8] = 2082;
          *(void *)&v93[10] = v59;
          _os_log_impl( &dword_181A5C000,  v60,  v61,  "%{public}s received internal failure result code: [%lld] %{public}s",  buf,  0x20u);
        }
      }

      else if (v88)
      {
        os_log_type_t v72 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v73 = type;
        BOOL v74 = os_log_type_enabled(v60, type);
        if (v72)
        {
          if (v74)
          {
            *(_DWORD *)buf = 136446978;
            BOOL v91 = "networkd_privileged_reload_managed_network_settings";
            char v92 = 2048;
            *(void *)unsigned int v93 = v36;
            *(_WORD *)&v93[8] = 2082;
            *(void *)&v93[10] = v59;
            char v94 = 2082;
            os_log_type_t v95 = v72;
            _os_log_impl( &dword_181A5C000,  v60,  v73,  "%{public}s received internal failure result code: [%lld] %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v72);
          goto LABEL_184;
        }

        if (v74)
        {
          *(_DWORD *)buf = 136446722;
          BOOL v91 = "networkd_privileged_reload_managed_network_settings";
          char v92 = 2048;
          *(void *)unsigned int v93 = v36;
          *(_WORD *)&v93[8] = 2082;
          *(void *)&v93[10] = v59;
          _os_log_impl( &dword_181A5C000,  v60,  v73,  "%{public}s received internal failure result code: [%lld] %{public}s, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v78 = type;
        if (os_log_type_enabled(v60, type))
        {
          *(_DWORD *)buf = 136446722;
          BOOL v91 = "networkd_privileged_reload_managed_network_settings";
          char v92 = 2048;
          *(void *)unsigned int v93 = v36;
          *(_WORD *)&v93[8] = 2082;
          *(void *)&v93[10] = v59;
          _os_log_impl( &dword_181A5C000,  v60,  v78,  "%{public}s received internal failure result code: [%lld] %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }
      }

      goto LABEL_184;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v10 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    BOOL v91 = "networkd_privileged_reload_managed_network_settings";
    int v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v88 = 0;
    if (__nwlog_fault(v11, &type, &v88))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v12 = (os_log_s *)(id)gLogObj;
        uint64_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v91 = "networkd_privileged_reload_managed_network_settings";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s received NULL response", buf, 0xCu);
        }
      }

      else if (v88)
      {
        uint64_t v20 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v12 = (os_log_s *)(id)gLogObj;
        uint64_t v21 = type;
        uint64_t v22 = os_log_type_enabled(v12, type);
        if (v20)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v91 = "networkd_privileged_reload_managed_network_settings";
            char v92 = 2082;
            *(void *)unsigned int v93 = v20;
            _os_log_impl( &dword_181A5C000,  v12,  v21,  "%{public}s received NULL response, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v20);
          if (!v11) {
            goto LABEL_79;
          }
          goto LABEL_78;
        }

        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v91 = "networkd_privileged_reload_managed_network_settings";
          _os_log_impl(&dword_181A5C000, v12, v21, "%{public}s received NULL response, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unint64_t v12 = (os_log_s *)(id)gLogObj;
        uint64_t v30 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v91 = "networkd_privileged_reload_managed_network_settings";
          _os_log_impl( &dword_181A5C000,  v12,  v30,  "%{public}s received NULL response, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v11)
    {
LABEL_79:
      __int16 v46 = 0LL;
LABEL_176:

      goto LABEL_177;
    }

  if (v32) {
    free(v32);
  }
  return 0LL;
}

              goto LABEL_191;
            }

            if (!LOBYTE(v111[0]))
            {
              __nwlog_obj();
              os_log_type_t v72 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              BOOL v82 = v107[0];
              if (os_log_type_enabled(v72, (os_log_type_t)v107[0]))
              {
                *(_DWORD *)os_log_type_t type = 136446210;
                *(void *)&os_log_type_t type[4] = "nw_http_cookie_options_get_allow_only_partitioned_cookies";
                _os_log_impl( &dword_181A5C000,  v72,  v82,  "%{public}s protocol options are not http_cookie, backtrace limit exceeded",  type,  0xCu);
              }

              goto LABEL_184;
            }

            BOOL v79 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            BOOL v77 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            BOOL v86 = v107[0];
            BOOL v80 = os_log_type_enabled(v77, (os_log_type_t)v107[0]);
            if (v79)
            {
              if (v80)
              {
                *(_DWORD *)os_log_type_t type = 136446466;
                *(void *)&os_log_type_t type[4] = "nw_http_cookie_options_get_allow_only_partitioned_cookies";
                *(_WORD *)&type[12] = 2082;
                *(void *)&type[14] = v79;
                _os_log_impl( &dword_181A5C000,  v77,  v86,  "%{public}s protocol options are not http_cookie, dumping backtrace:%{public}s",  type,  0x16u);
              }

              free(v79);
              if (!v71) {
                goto LABEL_193;
              }
              goto LABEL_192;
            }

            if (v80)
            {
              *(_DWORD *)os_log_type_t type = 136446210;
              *(void *)&os_log_type_t type[4] = "nw_http_cookie_options_get_allow_only_partitioned_cookies";
              _os_log_impl( &dword_181A5C000,  v77,  v86,  "%{public}s protocol options are not http_cookie, no backtrace",  type,  0xCu);
            }

            goto LABEL_190;
          }
        }

        else
        {
          __nwlog_obj();
          os_log_type_t v70 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)os_log_type_t type = 136446210;
          *(void *)&os_log_type_t type[4] = "nw_http_cookie_options_get_allow_only_partitioned_cookies";
          os_log_type_t v71 = (char *)_os_log_send_and_compose_impl();

          v107[0] = 16;
          LOBYTE(v111[0]) = 0;
          if (v107[0] == 17)
          {
            __nwlog_obj();
            os_log_type_t v72 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            BOOL v73 = v107[0];
            if (os_log_type_enabled(v72, (os_log_type_t)v107[0]))
            {
              *(_DWORD *)os_log_type_t type = 136446210;
              *(void *)&os_log_type_t type[4] = "nw_http_cookie_options_get_allow_only_partitioned_cookies";
              _os_log_impl(&dword_181A5C000, v72, v73, "%{public}s called with null options", type, 0xCu);
            }

            goto LABEL_184;
          }

          if (!LOBYTE(v111[0]))
          {
            __nwlog_obj();
            os_log_type_t v72 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            BOOL v81 = v107[0];
            if (os_log_type_enabled(v72, (os_log_type_t)v107[0]))
            {
              *(_DWORD *)os_log_type_t type = 136446210;
              *(void *)&os_log_type_t type[4] = "nw_http_cookie_options_get_allow_only_partitioned_cookies";
              _os_log_impl( &dword_181A5C000,  v72,  v81,  "%{public}s called with null options, backtrace limit exceeded",  type,  0xCu);
            }

            goto LABEL_184;
          }

          BOOL v76 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          BOOL v77 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v85 = v107[0];
          os_log_type_t v78 = os_log_type_enabled(v77, (os_log_type_t)v107[0]);
          if (!v76)
          {
            if (v78)
            {
              *(_DWORD *)os_log_type_t type = 136446210;
              *(void *)&os_log_type_t type[4] = "nw_http_cookie_options_get_allow_only_partitioned_cookies";
              _os_log_impl(&dword_181A5C000, v77, v85, "%{public}s called with null options, no backtrace", type, 0xCu);
            }

    if (v101) {
      free(v101);
    }
    goto LABEL_39;
  }

    if (v61) {
      free(v61);
    }
LABEL_186:
    if (!v29)
    {
LABEL_212:
      free(v40);
      if ((*(_WORD *)(a1 + 368) & 0x80) != 0) {
        return 0LL;
      }
      goto LABEL_213;
    }
                  }
                }

                else if ((v132 & 1) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                  }
                  v133 = (os_log_s *)(id)gconnectionLogObj;
                  if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR))
                  {
                    v177 = nw_endpoint_handler_get_id_string(v129);
                    v178 = nw_endpoint_handler_dry_run_string(v129);
                    v179 = nw_endpoint_handler_copy_endpoint(v129);
                    v180 = nw_endpoint_get_logging_description(v179);
                    v181 = nw_endpoint_handler_state_string(v129);
                    v182 = nw_endpoint_handler_mode_string(v129);
                    v183 = nw_endpoint_handler_copy_current_path(v129);
                    *(_DWORD *)buf = 136447746;
                    v286 = "nw_endpoint_fallback_receive_report";
                    v287 = 2082;
                    v288 = (void *)v177;
                    v289 = 2082;
                    v290 = v178;
                    v291 = 2082;
                    v292 = v180;
                    v293 = 2082;
                    v294 = v181;
                    v295 = 2082;
                    v296 = v182;
                    v297 = 2114;
                    v298 = v183;
                    _os_log_impl( &dword_181A5C000,  v133,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] could not assert fallback agent",  buf,  0x48u);
                  }

                  goto LABEL_184;
                }
              }

              else if ((nw_endpoint_handler_get_logging_disabled(v129) & 1) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                v133 = (os_log_s *)(id)gconnectionLogObj;
                if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR))
                {
                  os_log_type_t v149 = nw_endpoint_handler_get_id_string(v129);
                  char v150 = nw_endpoint_handler_dry_run_string(v129);
                  os_log_type_t v151 = nw_endpoint_handler_copy_endpoint(v129);
                  v152 = nw_endpoint_get_logging_description(v151);
                  v153 = nw_endpoint_handler_state_string(v129);
                  v154 = nw_endpoint_handler_mode_string(v129);
                  v155 = nw_endpoint_handler_copy_current_path(v129);
                  *(_DWORD *)buf = 136447746;
                  v286 = "nw_endpoint_fallback_receive_report";
                  v287 = 2082;
                  v288 = (void *)v149;
                  v289 = 2082;
                  v290 = v150;
                  v291 = 2082;
                  v292 = v152;
                  v293 = 2082;
                  v294 = v153;
                  v295 = 2082;
                  v296 = v154;
                  v297 = 2114;
                  v298 = v155;
                  _os_log_impl( &dword_181A5C000,  v133,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] could not get fallback agent",  buf,  0x48u);
                }

                goto LABEL_184;
              }

        if (v31) {
          goto LABEL_185;
        }
        return;
      }

      if (type == OS_LOG_TYPE_DEFAULT)
      {
        os_log_type_t v48 = (os_log_s *)__nwlog_obj();
        os_log_type_t v49 = __src;
        if (os_log_type_enabled(v48, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v83 = "_http_safe_append";
          char v50 = "%{public}s called with null data, backtrace limit exceeded";
          goto LABEL_216;
        }

        goto LABEL_217;
      }

      BOOL v73 = (char *)__nw_create_backtrace_string();
      os_log_type_t v48 = (os_log_s *)__nwlog_obj();
      os_log_type_t v49 = __src;
      BOOL v74 = os_log_type_enabled(v48, (os_log_type_t)__src);
      if (!v73)
      {
        if (v74)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v83 = "_http_safe_append";
          char v50 = "%{public}s called with null data, no backtrace";
          goto LABEL_216;
        }

        goto LABEL_217;
      }

      if (v74)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v83 = "_http_safe_append";
        BOOL v84 = 2082;
        uint64_t v85 = v73;
        BOOL v75 = "%{public}s called with null data, dumping backtrace:%{public}s";
LABEL_155:
        _os_log_impl(&dword_181A5C000, v48, v49, v75, buf, 0x16u);
      }
    }

    free(v73);
    goto LABEL_217;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v83 = "nw_http_fillout_binary_message_inner_block_invoke";
  BOOL v31 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v80 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    int v32 = (os_log_s *)__nwlog_obj();
    uint64_t v33 = type;
    if (!os_log_type_enabled(v32, type)) {
      goto LABEL_184;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v83 = "nw_http_fillout_binary_message_inner_block_invoke";
    BOOL v34 = "%{public}s called with null cursor";
    goto LABEL_183;
  }

  if (!v80)
  {
    int v32 = (os_log_s *)__nwlog_obj();
    uint64_t v33 = type;
    if (!os_log_type_enabled(v32, type)) {
      goto LABEL_184;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v83 = "nw_http_fillout_binary_message_inner_block_invoke";
    BOOL v34 = "%{public}s called with null cursor, backtrace limit exceeded";
    goto LABEL_183;
  }

  uint64_t v51 = (char *)__nw_create_backtrace_string();
  int v32 = (os_log_s *)__nwlog_obj();
  uint64_t v33 = type;
  __int16 v54 = os_log_type_enabled(v32, type);
  if (!v51)
  {
    if (!v54) {
      goto LABEL_184;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v83 = "nw_http_fillout_binary_message_inner_block_invoke";
    BOOL v34 = "%{public}s called with null cursor, no backtrace";
    goto LABEL_183;
  }

  if (v54) {
    goto LABEL_106;
  }
LABEL_107:
  free(v51);
  if (v31) {
LABEL_185:
  }
    free(v31);
}

        if (v31) {
          goto LABEL_185;
        }
        return;
      }

      if (type == OS_LOG_TYPE_DEFAULT)
      {
        os_log_type_t v48 = (os_log_s *)__nwlog_obj();
        os_log_type_t v49 = __src;
        if (os_log_type_enabled(v48, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v83 = "_http_safe_append";
          char v50 = "%{public}s called with null data, backtrace limit exceeded";
          goto LABEL_216;
        }

        goto LABEL_217;
      }

      BOOL v73 = (char *)__nw_create_backtrace_string();
      os_log_type_t v48 = (os_log_s *)__nwlog_obj();
      os_log_type_t v49 = __src;
      BOOL v74 = os_log_type_enabled(v48, (os_log_type_t)__src);
      if (!v73)
      {
        if (v74)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v83 = "_http_safe_append";
          char v50 = "%{public}s called with null data, no backtrace";
          goto LABEL_216;
        }

        goto LABEL_217;
      }

      if (v74)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v83 = "_http_safe_append";
        BOOL v84 = 2082;
        uint64_t v85 = v73;
        BOOL v75 = "%{public}s called with null data, dumping backtrace:%{public}s";
LABEL_155:
        _os_log_impl(&dword_181A5C000, v48, v49, v75, buf, 0x16u);
      }
    }

    free(v73);
    goto LABEL_217;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v83 = "nw_http_fillout_binary_message_inner_block_invoke";
  BOOL v31 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v80 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    int v32 = (os_log_s *)__nwlog_obj();
    uint64_t v33 = type;
    if (!os_log_type_enabled(v32, type)) {
      goto LABEL_184;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v83 = "nw_http_fillout_binary_message_inner_block_invoke";
    BOOL v34 = "%{public}s called with null cursor";
    goto LABEL_183;
  }

  if (!v80)
  {
    int v32 = (os_log_s *)__nwlog_obj();
    uint64_t v33 = type;
    if (!os_log_type_enabled(v32, type)) {
      goto LABEL_184;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v83 = "nw_http_fillout_binary_message_inner_block_invoke";
    BOOL v34 = "%{public}s called with null cursor, backtrace limit exceeded";
    goto LABEL_183;
  }

  uint64_t v51 = (char *)__nw_create_backtrace_string();
  int v32 = (os_log_s *)__nwlog_obj();
  uint64_t v33 = type;
  __int16 v54 = os_log_type_enabled(v32, type);
  if (!v51)
  {
    if (!v54) {
      goto LABEL_184;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v83 = "nw_http_fillout_binary_message_inner_block_invoke";
    BOOL v34 = "%{public}s called with null cursor, no backtrace";
    goto LABEL_183;
  }

  if (v54) {
    goto LABEL_106;
  }
LABEL_107:
  free(v51);
  if (v31) {
LABEL_185:
  }
    free(v31);
}

        if (v31) {
          goto LABEL_185;
        }
        return;
      }

      if (type == OS_LOG_TYPE_DEFAULT)
      {
        os_log_type_t v48 = (os_log_s *)__nwlog_obj();
        os_log_type_t v49 = __src;
        if (os_log_type_enabled(v48, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v83 = "_http_safe_append";
          char v50 = "%{public}s called with null data, backtrace limit exceeded";
          goto LABEL_216;
        }

        goto LABEL_217;
      }

      BOOL v73 = (char *)__nw_create_backtrace_string();
      os_log_type_t v48 = (os_log_s *)__nwlog_obj();
      os_log_type_t v49 = __src;
      BOOL v74 = os_log_type_enabled(v48, (os_log_type_t)__src);
      if (!v73)
      {
        if (v74)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v83 = "_http_safe_append";
          char v50 = "%{public}s called with null data, no backtrace";
          goto LABEL_216;
        }

        goto LABEL_217;
      }

      if (v74)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v83 = "_http_safe_append";
        BOOL v84 = 2082;
        uint64_t v85 = v73;
        BOOL v75 = "%{public}s called with null data, dumping backtrace:%{public}s";
LABEL_155:
        _os_log_impl(&dword_181A5C000, v48, v49, v75, buf, 0x16u);
      }
    }

    free(v73);
    goto LABEL_217;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v83 = "nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke";
  BOOL v31 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v80 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    int v32 = (os_log_s *)__nwlog_obj();
    uint64_t v33 = type;
    if (!os_log_type_enabled(v32, type)) {
      goto LABEL_184;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v83 = "nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke";
    BOOL v34 = "%{public}s called with null cursor";
    goto LABEL_183;
  }

  if (!v80)
  {
    int v32 = (os_log_s *)__nwlog_obj();
    uint64_t v33 = type;
    if (!os_log_type_enabled(v32, type)) {
      goto LABEL_184;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v83 = "nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke";
    BOOL v34 = "%{public}s called with null cursor, backtrace limit exceeded";
    goto LABEL_183;
  }

  uint64_t v51 = (char *)__nw_create_backtrace_string();
  int v32 = (os_log_s *)__nwlog_obj();
  uint64_t v33 = type;
  __int16 v54 = os_log_type_enabled(v32, type);
  if (!v51)
  {
    if (!v54) {
      goto LABEL_184;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v83 = "nw_http_fillout_indeterminate_binary_message_body_chunk_block_invoke";
    BOOL v34 = "%{public}s called with null cursor, no backtrace";
    goto LABEL_183;
  }

  if (v54) {
    goto LABEL_106;
  }
LABEL_107:
  free(v51);
  if (v31) {
LABEL_185:
  }
    free(v31);
}

      free(v125);
      __int16 v16 = &OBJC_IVAR___NWConcrete_tcp_connection_tc_event_disconnected_delivered;
      goto LABEL_227;
    }

    __int16 v113 = (os_log_s *)__nwlog_obj();
    int v114 = uu[0];
    if (!os_log_type_enabled(v113, uu[0])) {
      goto LABEL_227;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_channel_create_with_nexus_flow";
    uint64_t v115 = "%{public}s called with null context";
LABEL_226:
    _os_log_impl(&dword_181A5C000, v113, v114, v115, buf, 0xCu);
LABEL_227:
    if (v132) {
      free(v132);
    }
    goto LABEL_31;
  }

  uint64_t v35 = a1[9];
  if (!v35)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_channel_create_with_nexus_flow";
    uint64_t v116 = (const char *)_os_log_send_and_compose_impl();
    uu[0] = OS_LOG_TYPE_ERROR;
    uint64_t v136 = 0;
    __int16 v132 = (char *)v116;
    if (uu[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v113 = (os_log_s *)__nwlog_obj();
      int v114 = uu[0];
      if (!os_log_type_enabled(v113, uu[0])) {
        goto LABEL_227;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_create_with_nexus_flow";
      uint64_t v115 = "%{public}s called with null flow";
      goto LABEL_226;
    }

    if (!v136)
    {
      __int16 v113 = (os_log_s *)__nwlog_obj();
      int v114 = uu[0];
      if (!os_log_type_enabled(v113, uu[0])) {
        goto LABEL_227;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_create_with_nexus_flow";
      uint64_t v115 = "%{public}s called with null flow, backtrace limit exceeded";
      goto LABEL_226;
    }

    BOOL v125 = (char *)__nw_create_backtrace_string();
    __int16 v113 = (os_log_s *)__nwlog_obj();
    int v114 = uu[0];
    BOOL v128 = os_log_type_enabled(v113, uu[0]);
    if (v125)
    {
      if (v128)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_channel_create_with_nexus_flow";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = v125;
        os_log_type_t v127 = "%{public}s called with null flow, dumping backtrace:%{public}s";
        goto LABEL_183;
      }

      goto LABEL_184;
    }

    __int16 v16 = &OBJC_IVAR___NWConcrete_tcp_connection_tc_event_disconnected_delivered;
    if (!v128) {
      goto LABEL_227;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_channel_create_with_nexus_flow";
    uint64_t v115 = "%{public}s called with null flow, no backtrace";
    goto LABEL_226;
  }

  memset(uu, 0, 16);
  BOOL v36 = v35;
  uint64_t v37 = *((_DWORD *)v36 + 42);
  if (uuid_is_null((const unsigned __int8 *)v36 + 128))
  {

    __int16 v16 = &OBJC_IVAR___NWConcrete_tcp_connection_tc_event_disconnected_delivered;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v38 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_channel_create_with_nexus_flow";
      *(_WORD *)&_BYTE buf[12] = 2114;
      *(void *)&buf[14] = v36;
      _os_log_impl( &dword_181A5C000,  v38,  OS_LOG_TYPE_ERROR,  "%{public}s nw_path_flow_get_nexus_instance for %{public}@ returned false",  buf,  0x16u);
    }

    os_log_type_t v56 = 0LL;
    goto LABEL_183;
  }

    if (!v9) {
      return 0LL;
    }
LABEL_185:
    free(v9);
    return 0LL;
  }

  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_socket_connect";
    int v9 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(type.sae_srcif) = 16;
    LOBYTE(v160) = 0;
    if (__nwlog_fault(v9, &type, &v160))
    {
      if (LOBYTE(type.sae_srcif) == 17)
      {
        uint64_t v10 = (os_log_s *)__nwlog_obj();
        sae_srcif = type.sae_srcif;
        if (os_log_type_enabled(v10, type.sae_srcif))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_socket_connect";
          unint64_t v12 = "%{public}s called with null socket_handler";
          goto LABEL_183;
        }
      }

      else if ((_BYTE)v160)
      {
        uint64_t v13 = (char *)__nw_create_backtrace_string();
        uint64_t v10 = (os_log_s *)__nwlog_obj();
        sae_srcif = type.sae_srcif;
        v143 = os_log_type_enabled(v10, type.sae_srcif);
        if (v13)
        {
          if (v143)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_socket_connect";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = v13;
            char v15 = "%{public}s called with null socket_handler, dumping backtrace:%{public}s";
            goto LABEL_20;
          }

        free(v53);
        goto LABEL_24;
      }

      __nwlog_obj();
      os_log_type_t v52 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_alt_svc_enumerate";
      char v53 = (char *)_os_log_send_and_compose_impl();

      v114[0] = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (v114[0] == 17)
      {
        __nwlog_obj();
        __int16 v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v55 = v114[0];
        if (os_log_type_enabled(v54, (os_log_type_t)v114[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_alt_svc_enumerate";
          _os_log_impl(&dword_181A5C000, v54, v55, "%{public}s called with null hostname", buf, 0xCu);
        }
      }

      else if (type)
      {
        BOOL v73 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        __int16 v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v74 = v114[0];
        BOOL v75 = os_log_type_enabled(v54, (os_log_type_t)v114[0]);
        if (v73)
        {
          if (v75)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http_alt_svc_enumerate";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = v73;
            _os_log_impl( &dword_181A5C000,  v54,  v74,  "%{public}s called with null hostname, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v73);
          goto LABEL_183;
        }

        if (v75)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_alt_svc_enumerate";
          _os_log_impl(&dword_181A5C000, v54, v74, "%{public}s called with null hostname, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        __int16 v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v83 = v114[0];
        if (os_log_type_enabled(v54, (os_log_type_t)v114[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_alt_svc_enumerate";
          _os_log_impl( &dword_181A5C000,  v54,  v83,  "%{public}s called with null hostname, backtrace limit exceeded",  buf,  0xCu);
        }
      }

    if (v68) {
      free(v68);
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    os_log_type_t v88 = *(_DWORD *)(v11 + 176);
    unint64_t v87 = *(_DWORD *)(v11 + 180);
    *(_DWORD *)buf = 136447490;
    os_log_type_t v106 = "nw_protocol_http2_get_output_frames";
    char v107 = 2082;
    v108 = (char *)(v11 + 191);
    __int16 v109 = 2080;
    __int16 v110 = " ";
    __int16 v111 = 1024;
    uint64_t v112 = v87;
    __int16 v113 = 1024;
    *(_DWORD *)int v114 = v88;
    *(_WORD *)&v114[4] = 1024;
    *(_DWORD *)&v114[6] = v32;
    int v89 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    int v103 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v90 = (os_log_s *)gconnectionLogObj;
      BOOL v91 = type;
      if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
        goto LABEL_209;
      }
      unsigned int v93 = *(_DWORD *)(v11 + 176);
      char v92 = *(_DWORD *)(v11 + 180);
      *(_DWORD *)buf = 136447490;
      os_log_type_t v106 = "nw_protocol_http2_get_output_frames";
      char v107 = 2082;
      v108 = (char *)(v11 + 191);
      __int16 v109 = 2080;
      __int16 v110 = " ";
      __int16 v111 = 1024;
      uint64_t v112 = v92;
      __int16 v113 = 1024;
      *(_DWORD *)int v114 = v93;
      *(_WORD *)&v114[4] = 1024;
      *(_DWORD *)&v114[6] = v32;
      char v94 = "%{public}s %{public}s%s<i%u:s%d> failed to create/reuse output frame of length %u";
    }

    else if (v103)
    {
      os_log_type_t v95 = (char *)__nw_create_backtrace_string();
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v90 = (os_log_s *)gconnectionLogObj;
      BOOL v91 = type;
      BOOL v96 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
      if (v95)
      {
        if (v96)
        {
          __int16 v98 = *(_DWORD *)(v11 + 176);
          v97 = *(_DWORD *)(v11 + 180);
          *(_DWORD *)buf = 136447746;
          os_log_type_t v106 = "nw_protocol_http2_get_output_frames";
          char v107 = 2082;
          v108 = (char *)(v11 + 191);
          __int16 v109 = 2080;
          __int16 v110 = " ";
          __int16 v111 = 1024;
          uint64_t v112 = v97;
          __int16 v113 = 1024;
          *(_DWORD *)int v114 = v98;
          *(_WORD *)&v114[4] = 1024;
          *(_DWORD *)&v114[6] = v32;
          *(_WORD *)&v114[10] = 2082;
          *(void *)&v114[12] = v95;
          _os_log_impl( &dword_181A5C000,  v90,  v91,  "%{public}s %{public}s%s<i%u:s%d> failed to create/reuse output frame of length %u, dumping backtrace:%{public}s",  buf,  0x3Cu);
        }

        free(v95);
        goto LABEL_209;
      }

      if (!v96)
      {
LABEL_209:
        if (v89) {
          free(v89);
        }
        return 0LL;
      }

      uint64_t v102 = *(_DWORD *)(v11 + 176);
      int v101 = *(_DWORD *)(v11 + 180);
      *(_DWORD *)buf = 136447490;
      os_log_type_t v106 = "nw_protocol_http2_get_output_frames";
      char v107 = 2082;
      v108 = (char *)(v11 + 191);
      __int16 v109 = 2080;
      __int16 v110 = " ";
      __int16 v111 = 1024;
      uint64_t v112 = v101;
      __int16 v113 = 1024;
      *(_DWORD *)int v114 = v102;
      *(_WORD *)&v114[4] = 1024;
      *(_DWORD *)&v114[6] = v32;
      char v94 = "%{public}s %{public}s%s<i%u:s%d> failed to create/reuse output frame of length %u, no backtrace";
    }

    else
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v90 = (os_log_s *)gconnectionLogObj;
      BOOL v91 = type;
      if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
        goto LABEL_209;
      }
      __int16 v100 = *(_DWORD *)(v11 + 176);
      BOOL v99 = *(_DWORD *)(v11 + 180);
      *(_DWORD *)buf = 136447490;
      os_log_type_t v106 = "nw_protocol_http2_get_output_frames";
      char v107 = 2082;
      v108 = (char *)(v11 + 191);
      __int16 v109 = 2080;
      __int16 v110 = " ";
      __int16 v111 = 1024;
      uint64_t v112 = v99;
      __int16 v113 = 1024;
      *(_DWORD *)int v114 = v100;
      *(_WORD *)&v114[4] = 1024;
      *(_DWORD *)&v114[6] = v32;
      char v94 = "%{public}s %{public}s%s<i%u:s%d> failed to create/reuse output frame of length %u, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v90, v91, v94, buf, 0x32u);
    goto LABEL_209;
  }

  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
  }
  __int16 v14 = gconnectionLogObj;
  BOOL result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR);
  if (result)
  {
    uint64_t v25 = *((_DWORD *)handle + 92);
    *(_DWORD *)buf = 136447490;
    os_log_type_t v106 = "nw_protocol_http2_get_output_frames";
    char v107 = 2082;
    v108 = handle + 390;
    __int16 v109 = 2080;
    __int16 v110 = " ";
    __int16 v111 = 1024;
    uint64_t v112 = v25;
    __int16 v113 = 1042;
    *(_DWORD *)int v114 = 16;
    *(_WORD *)&v114[4] = 2098;
    *(void *)&v114[6] = a2;
    __int16 v18 = "%{public}s %{public}s%s<i%u> cannot find hash table entry for %{public,uuid_t}.16P";
    goto LABEL_30;
  }

  return result;
}

uint64_t ___ZL33nw_protocol_udp_get_output_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke( uint64_t a1, uint64_t a2)
{
  return 1LL;
}

uint64_t ___ZL32nw_protocol_udp_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke( void *a1, uint64_t a2)
{
  uint64_t v67 = *MEMORY[0x1895F89C0];
  unsigned int v56 = 0;
  uint64_t v4 = nw_frame_unclaimed_bytes(a2, &v56);
  if (!v4) {
    goto LABEL_89;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v60 = "__nw_frame_check_validity";
    __int16 v46 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v57 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v47 = (os_log_s *)__nwlog_obj();
      os_log_type_t v48 = type;
      if (!os_log_type_enabled(v47, type)) {
        goto LABEL_87;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v60 = "__nw_frame_check_validity";
      os_log_type_t v49 = "%{public}s called with null frame";
    }

    else if (v57)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v47 = (os_log_s *)__nwlog_obj();
      os_log_type_t v48 = type;
      BOOL v51 = os_log_type_enabled(v47, type);
      if (backtrace_string)
      {
        if (v51)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v60 = "__nw_frame_check_validity";
          __int16 v61 = 2082;
          os_log_type_t v62 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v47,  v48,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_87;
      }

      if (!v51)
      {
LABEL_87:
        if (v46) {
          free(v46);
        }
        goto LABEL_89;
      }

      *(_DWORD *)buf = 136446210;
      os_log_type_t v60 = "__nw_frame_check_validity";
      os_log_type_t v49 = "%{public}s called with null frame, no backtrace";
    }

    else
    {
      BOOL v47 = (os_log_s *)__nwlog_obj();
      os_log_type_t v48 = type;
      if (!os_log_type_enabled(v47, type)) {
        goto LABEL_87;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v60 = "__nw_frame_check_validity";
      os_log_type_t v49 = "%{public}s called with null frame, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v47, v48, v49, buf, 0xCu);
    goto LABEL_87;
  }

  uint64_t v5 = (unsigned __int16 *)v4;
  if ((*(_WORD *)(a2 + 204) & 0x100) == 0
    || !g_channel_check_validity
    || (g_channel_check_validity(a2, *(void *)(a2 + 88)) & 1) != 0)
  {
    uint64_t v6 = a1[5];
    uint64_t v7 = *(void **)(v6 + 64);
    if (v7) {
      ++*v7;
    }
    BOOL v8 = v56 < 8;
    if (v56 <= 7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v9 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = a1[5];
        int v11 = (const char *)(v10 + 96);
        if (!v10) {
          int v11 = "";
        }
        *(_DWORD *)buf = 136446722;
        os_log_type_t v60 = "nw_protocol_udp_get_input_frames_block_invoke";
        __int16 v61 = 2082;
        os_log_type_t v62 = (void *)v11;
        __int16 v63 = 1024;
        unsigned int v64 = v56;
        _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s Received UDP packet shorter than header %u",  buf,  0x1Cu);
      }

      uint64_t v6 = a1[5];
      uint64_t v12 = *(void *)(v6 + 64);
      if (v12) {
        ++*(void *)(v12 + 8);
      }
    }

    unsigned int v13 = *v5;
    unsigned int v14 = *(unsigned __int16 *)(v6 + 90);
    if (v13 != v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v15 = (os_log_s *)gLogObj;
      BOOL v16 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
      uint64_t v6 = a1[5];
      if (v16)
      {
        os_log_type_t v60 = "nw_protocol_udp_get_input_frames_block_invoke";
        __int16 v61 = 2082;
        *(_DWORD *)buf = 136446978;
        if (v6) {
          uint64_t v17 = (const char *)(v6 + 96);
        }
        else {
          uint64_t v17 = "";
        }
        os_log_type_t v62 = (void *)v17;
        __int16 v63 = 1024;
        unsigned int v64 = __rev16(v13);
        __int16 v65 = 1024;
        unsigned int v66 = __rev16(v14);
        _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s Received remote port %u != %u",  buf,  0x22u);
        uint64_t v6 = a1[5];
      }

      BOOL v8 = 1;
    }

    unsigned int v18 = v5[1];
    unsigned int v19 = *(unsigned __int16 *)(v6 + 88);
    if (v18 != v19)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v20 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        unsigned int v21 = __rev16(v19);
        unsigned int v22 = __rev16(v18);
        uint64_t v23 = a1[5];
        os_log_type_t v60 = "nw_protocol_udp_get_input_frames_block_invoke";
        __int16 v61 = 2082;
        *(_DWORD *)buf = 136446978;
        if (v23) {
          uint64_t v24 = (const char *)(v23 + 96);
        }
        else {
          uint64_t v24 = "";
        }
        os_log_type_t v62 = (void *)v24;
        __int16 v63 = 1024;
        unsigned int v64 = v22;
        __int16 v65 = 1024;
        unsigned int v66 = v21;
        _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s Received local port %u != %u",  buf,  0x22u);
      }

      BOOL v8 = 1;
    }

    unsigned int v25 = bswap32(v5[2]) >> 16;
    if (v56 >= v25)
    {
      uint64_t v29 = a1[5];
      if ((*(_WORD *)(v29 + 94) & 4) != 0) {
        goto LABEL_48;
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v26 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        uint64_t v27 = a1[5];
        int v28 = "";
        if (v27) {
          int v28 = (const char *)(v27 + 96);
        }
        *(_DWORD *)buf = 136446978;
        os_log_type_t v60 = "nw_protocol_udp_get_input_frames_block_invoke";
        __int16 v61 = 2082;
        os_log_type_t v62 = (void *)v28;
        __int16 v63 = 1024;
        unsigned int v64 = v25;
        __int16 v65 = 1024;
        unsigned int v66 = v56;
        _os_log_impl( &dword_181A5C000,  v26,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s Received length %u > %u",  buf,  0x22u);
      }

      uint64_t v29 = a1[5];
      uint64_t v30 = *(void *)(v29 + 64);
      if (v30) {
        ++*(void *)(v30 + 24);
      }
      BOOL v8 = 1;
      if ((*(_WORD *)(v29 + 94) & 4) != 0)
      {
LABEL_48:
        __int16 v35 = *(_WORD *)(v29 + 94);
        if ((v35 & 0x40) != 0 || !v5[3])
        {
          if (!v8) {
            goto LABEL_54;
          }
        }

        else if (((v8 | udp_validate_cksum_internal( a2,  v56,  (unsigned __int16 *)(v29 + 48),  (unsigned __int16 *)(v29 + 32),  (v35 & 4) == 0,  v29) ^ 1) & 1) == 0)
        {
          __int16 v35 = *(_WORD *)(a1[5] + 94LL);
LABEL_54:
          if ((v35 & 0x20) != 0)
          {
            nw_frame_set_metadata(a2, 0LL, 1, 1);
          }

          else
          {
            singleton = nw_protocol_metadata_create_singleton((void *)g_udp_definition);
            if (singleton)
            {
              char v38 = singleton;
              nw_frame_set_metadata(a2, (nw_protocol_metadata *)singleton, 1, 1);
              os_release(v38);
            }
          }

          nw_frame_claim(a2, v37, 8, v56 - v25);
          uint64_t v39 = a1[7];
          *(void *)(a2 + 32) = 0LL;
          uint64_t v40 = *(uint64_t **)(v39 + 8);
          *(void *)(a2 + 40) = v40;
          uint64_t *v40 = a2;
          *(void *)(v39 + 8) = a2 + 32;
          ++*(_DWORD *)(*(void *)(a1[4] + 8LL) + 24LL);
          uint64_t v41 = a1[5];
          if (v41)
          {
            uint64_t v42 = *(void *)(v41 + 72);
            if (v42)
            {
              ++*(void *)(v42 + 16);
              uint64_t v43 = a1[5];
              if (v43)
              {
                uint64_t v44 = *(void *)(v43 + 72);
                if (v44) {
                  *(void *)(v44 + 24) += *(unsigned int *)(a2 + 52);
                }
              }
            }
          }

          if (_nw_signposts_once != -1) {
            dispatch_once(&_nw_signposts_once, &__block_literal_global_13);
          }
          if (v56 >= 9) {
            *(void *)(a1[5] + 8LL) = v56 + *(void *)(a1[5] + 8LL) - 8LL;
          }
          return 1LL;
        }

        nw_frame_finalize(a2);
        return 1LL;
      }
    }

    if (!v5[3])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v31 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        uint64_t v32 = a1[5];
        if (v32) {
          uint64_t v33 = (const char *)(v32 + 96);
        }
        else {
          uint64_t v33 = "";
        }
        *(_DWORD *)buf = 136446466;
        os_log_type_t v60 = "nw_protocol_udp_get_input_frames_block_invoke";
        __int16 v61 = 2082;
        os_log_type_t v62 = (void *)v33;
        _os_log_impl( &dword_181A5C000,  v31,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s Received an IPv6 packet with zero checksum",  buf,  0x16u);
      }

      uint64_t v29 = a1[5];
      uint64_t v34 = *(void *)(v29 + 64);
      if (v34) {
        ++*(void *)(v34 + 16);
      }
      BOOL v8 = 1;
    }

    goto LABEL_48;
  }

uint64_t udp_validate_cksum_internal( uint64_t a1, uint64_t a2, unsigned __int16 *a3, unsigned __int16 *a4, int a5, uint64_t a6)
{
  uint64_t v67 = *MEMORY[0x1895F89C0];
  char v52 = 0;
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned int v56 = "__nw_frame_get_internet_checksum";
    BOOL v36 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v51) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v37 = (os_log_s *)__nwlog_obj();
      os_log_type_t v38 = type[0];
      if (!os_log_type_enabled(v37, type[0])) {
        goto LABEL_90;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v56 = "__nw_frame_get_internet_checksum";
      uint64_t v39 = "%{public}s called with null frame";
    }

    else if ((_BYTE)v51)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v37 = (os_log_s *)__nwlog_obj();
      os_log_type_t v38 = type[0];
      BOOL v45 = os_log_type_enabled(v37, type[0]);
      if (backtrace_string)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v56 = "__nw_frame_get_internet_checksum";
          __int16 v57 = 2082;
          __int16 v58 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v37,  v38,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_90;
      }

      if (!v45)
      {
LABEL_90:
        if (v36) {
          free(v36);
        }
        goto LABEL_5;
      }

      *(_DWORD *)buf = 136446210;
      unsigned int v56 = "__nw_frame_get_internet_checksum";
      uint64_t v39 = "%{public}s called with null frame, no backtrace";
    }

    else
    {
      uint64_t v37 = (os_log_s *)__nwlog_obj();
      os_log_type_t v38 = type[0];
      if (!os_log_type_enabled(v37, type[0])) {
        goto LABEL_90;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v56 = "__nw_frame_get_internet_checksum";
      uint64_t v39 = "%{public}s called with null frame, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v37, v38, v39, buf, 0xCu);
    goto LABEL_90;
  }

  if ((*(_WORD *)(a1 + 204) & 0x100) == 0
    || !g_channel_get_internet_checksum_handler
    || g_channel_get_internet_checksum_handler(a1, &v52, &v51, &v50))
  {
    goto LABEL_5;
  }

  int v16 = *(unsigned __int16 *)(a1 + 204);
  if ((~v16 & 0x1800) == 0)
  {
    int v13 = v50;
    goto LABEL_44;
  }

  if (!v52)
  {
LABEL_5:
    *(_DWORD *)os_log_type_t type = 0;
    unsigned __int16 v50 = ~(unsigned __int16)inet_cksum(a1, 0, a2, (int *)type);
    if (!*(_DWORD *)type)
    {
LABEL_10:
      unsigned int v12 = a2;
      goto LABEL_11;
    }

    if (a1)
    {
      if ((*(_WORD *)(a1 + 204) & 0x100) == 0
        || !g_channel_check_validity
        || (g_channel_check_validity(a1, *(void *)(a1 + 88)) & 1) != 0)
      {
        goto LABEL_10;
      }

double __nw_protocol_udp_identifier_block_invoke()
{
  unk_18C45ED8C = 0LL;
  unk_18C45ED84 = 0LL;
  dword_18C45ED9C = 0;
  unk_18C45ED94 = 0LL;
  nw_protocol_udp_identifier::identifier = 7365749;
  *(void *)&double result = 0x100000003LL;
  qword_18C45EDA0 = 0x100000003LL;
  return result;
}

int *nw_protocol_udp_identifier()
{
  if (nw_protocol_udp_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_udp_identifier::onceToken, &__block_literal_global_24);
  }
  return &nw_protocol_udp_identifier::identifier;
}

uint64_t udp_validate_cksum(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = *(unsigned __int8 *)(a3 + 1);
  if (v4 == 2) {
    uint64_t v5 = (unsigned __int16 *)(a3 + 4);
  }
  else {
    uint64_t v5 = (unsigned __int16 *)(a3 + 8);
  }
  if (*(_BYTE *)(a4 + 1) == 2) {
    uint64_t v6 = (unsigned __int16 *)(a4 + 4);
  }
  else {
    uint64_t v6 = (unsigned __int16 *)(a4 + 8);
  }
  return udp_validate_cksum_internal(a1, a2, v5, v6, v4 == 30, 0LL);
}

void nw::zlib_encoder::~zlib_encoder(nw::zlib_encoder *this)
{
  *(void *)this = off_189BB5640;
  deflateEnd((z_streamp)((char *)this + 8));
}

{
  *(void *)this = off_189BB5640;
  deflateEnd((z_streamp)((char *)this + 8));
  operator delete(this);
}

uint64_t nw::zlib_encoder::encode(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  *(void *)(a1 + 8) = a2;
  int v9 = (z_stream *)(a1 + 8);
  *(_DWORD *)(a1 + 16) = a3;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a5, a3);
  if (v10)
  {
    uint64_t v11 = 0LL;
    *(void *)(a1 + 32) = v10;
    if (a4) {
      int v12 = 4;
    }
    else {
      int v12 = 0;
    }
    while (1)
    {
      *(_DWORD *)(a1 + 40) = a3;
      int v13 = deflate(v9, v12);
      if (v13)
      {
        int v14 = v13;
        if (v13 != -5)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v18 = (os_log_s *)gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            uint64_t v19 = zError(v14);
            *(_DWORD *)buf = 136446466;
            uint64_t v32 = "encode";
            __int16 v33 = 2080;
            uint64_t v34 = (void *)v19;
            _os_log_impl(&dword_181A5C000, v18, OS_LOG_TYPE_ERROR, "%{public}s deflate returned %s", buf, 0x16u);
          }

          return -1LL;
        }
      }

      uint64_t v15 = *(unsigned int *)(a1 + 40);
      int v16 = (void *)(a3 - v15);
      if (gLogDatapath)
      {
        log = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v32 = "encode";
          __int16 v33 = 2048;
          uint64_t v34 = v16;
          _os_log_impl( &dword_181A5C000,  log,  OS_LOG_TYPE_DEBUG,  "%{public}s writing %zu bytes of compressed data",  buf,  0x16u);
        }

        v11 += (uint64_t)v16;
        if (*(_DWORD *)(a1 + 40)) {
          return v11;
        }
      }

      else
      {
        v11 += (uint64_t)v16;
        if ((_DWORD)v15) {
          return v11;
        }
      }

      uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a5, a3);
      if (!v17) {
        break;
      }
      *(void *)(a1 + 32) = v17;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v32 = "encode";
    int v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v32 = "encode";
      uint64_t v24 = "%{public}s called with null out_bytes";
LABEL_33:
      _os_log_impl(&dword_181A5C000, v22, v23, v24, buf, 0xCu);
      goto LABEL_34;
    }

    if (!v29)
    {
      int v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v32 = "encode";
      uint64_t v24 = "%{public}s called with null out_bytes, backtrace limit exceeded";
      goto LABEL_33;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v22 = (os_log_s *)__nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v26 = os_log_type_enabled(v22, type);
    if (!backtrace_string)
    {
      if (!v26) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v32 = "encode";
      uint64_t v24 = "%{public}s called with null out_bytes, no backtrace";
      goto LABEL_33;
    }

    if (!v26) {
      goto LABEL_28;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v32 = "encode";
    __int16 v33 = 2082;
    uint64_t v34 = backtrace_string;
    goto LABEL_27;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v32 = "encode";
  int v21 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v29 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    int v22 = (os_log_s *)__nwlog_obj();
    os_log_type_t v23 = type;
    if (!os_log_type_enabled(v22, type)) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v32 = "encode";
    uint64_t v24 = "%{public}s called with null out_bytes";
    goto LABEL_33;
  }

  if (!v29)
  {
    int v22 = (os_log_s *)__nwlog_obj();
    os_log_type_t v23 = type;
    if (!os_log_type_enabled(v22, type)) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v32 = "encode";
    uint64_t v24 = "%{public}s called with null out_bytes, backtrace limit exceeded";
    goto LABEL_33;
  }

  backtrace_string = (char *)__nw_create_backtrace_string();
  int v22 = (os_log_s *)__nwlog_obj();
  os_log_type_t v23 = type;
  BOOL v27 = os_log_type_enabled(v22, type);
  if (!backtrace_string)
  {
    if (!v27) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v32 = "encode";
    uint64_t v24 = "%{public}s called with null out_bytes, no backtrace";
    goto LABEL_33;
  }

  if (v27)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v32 = "encode";
    __int16 v33 = 2082;
    uint64_t v34 = backtrace_string;
LABEL_27:
    _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s called with null out_bytes, dumping backtrace:%{public}s",  buf,  0x16u);
  }

void nw::brotli_encoder::~brotli_encoder(nw::brotli_encoder *this)
{
  *(void *)this = off_189BB5668;
  compression_stream_destroy((compression_stream *)((char *)this + 8));
}

{
  *(void *)this = off_189BB5668;
  compression_stream_destroy((compression_stream *)((char *)this + 8));
  operator delete(this);
}

uint64_t nw::brotli_encoder::encode(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 16) = 0x4000LL;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a5, 0x4000LL);
  if (v8)
  {
    for (uint64_t i = 0LL; ; i += 0x4000LL)
    {
      *(void *)(a1 + 8) = v8;
      compression_status v10 = compression_stream_process((compression_stream *)(a1 + 8), a4);
      if (v10)
      {
        if (v10 == COMPRESSION_STATUS_ERROR) {
          return -1LL;
        }
        uint64_t v11 = *(void *)(a1 + 16);
        return i - v11 + 0x4000;
      }

      uint64_t v11 = *(void *)(a1 + 16);
      if (v11) {
        return i - v11 + 0x4000;
      }
      *(void *)(a1 + 16) = 0x4000LL;
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a5, 0x4000LL);
      if (!v8) {
        break;
      }
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v12 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136446210;
      uint64_t v15 = "encode";
      goto LABEL_14;
    }
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v12 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136446210;
      uint64_t v15 = "encode";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v12, OS_LOG_TYPE_ERROR, "%{public}s allocation failed", (uint8_t *)&v14, 0xCu);
    }
  }

  return -1LL;
}

void nw::zlib_decoder::~zlib_decoder(nw::zlib_decoder *this)
{
  *(void *)this = off_189BB5690;
  inflateEnd((z_streamp)((char *)this + 8));
}

{
  *(void *)this = off_189BB5690;
  inflateEnd((z_streamp)((char *)this + 8));
  operator delete(this);
}

uint64_t nw::zlib_decoder::decode(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _BYTE *a5, uint64_t a6)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  *(void *)(a1 + 8) = a2;
  compression_status v10 = (z_stream *)(a1 + 8);
  *(_DWORD *)(a1 + 16) = a3;
  uint64_t v11 = 0LL;
  for (*(void *)(a1 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a6, 0x4000LL);
        ;
        *(void *)(a1 + 32) = v14)
  {
    *(_DWORD *)(a1 + 40) = 0x4000;
    int v12 = inflate(v10, 0);
    int v13 = v12;
    if (v12 != -5 && v12)
    {
      if (v12 != 1) {
        goto LABEL_13;
      }
      goto LABEL_16;
    }

    if (*(_DWORD *)(a1 + 40)) {
      break;
    }
    if (gLogDatapath)
    {
      log = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        __int16 v33 = "decode";
        __int16 v34 = 2048;
        uint64_t v35 = 0x4000LL;
        __int16 v36 = 1024;
        int v37 = v13;
        _os_log_impl( &dword_181A5C000,  log,  OS_LOG_TYPE_DEBUG,  "%{public}s delivering %zu bytes of uncompressed data %d",  buf,  0x1Cu);
      }
    }

    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a6, 0x4000LL);
    if (!v14)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      __int16 v33 = "decode";
      int v21 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v30 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v22 = (os_log_s *)__nwlog_obj();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v33 = "decode";
          uint64_t v24 = "%{public}s called with null out_bytes";
          goto LABEL_39;
        }

        goto LABEL_40;
      }

      if (v30)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v22 = (os_log_s *)__nwlog_obj();
        os_log_type_t v23 = type;
        BOOL v26 = os_log_type_enabled(v22, type);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v33 = "decode";
            __int16 v34 = 2082;
            uint64_t v35 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s called with null out_bytes, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_40;
        }

        if (!v26)
        {
LABEL_40:
          if (v21) {
            free(v21);
          }
          return 0LL;
        }

        *(_DWORD *)buf = 136446210;
        __int16 v33 = "decode";
        uint64_t v24 = "%{public}s called with null out_bytes, no backtrace";
      }

      else
      {
        int v22 = (os_log_s *)__nwlog_obj();
        os_log_type_t v23 = type;
        if (!os_log_type_enabled(v22, type)) {
          goto LABEL_40;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v33 = "decode";
        uint64_t v24 = "%{public}s called with null out_bytes, backtrace limit exceeded";
      }

void nw::brotli_decoder::~brotli_decoder(nw::brotli_decoder *this)
{
  *(void *)this = off_189BB56B8;
  compression_stream_destroy((compression_stream *)((char *)this + 8));
}

{
  *(void *)this = off_189BB56B8;
  compression_stream_destroy((compression_stream *)((char *)this + 8));
  operator delete(this);
}

uint64_t nw::brotli_decoder::decode(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _BYTE *a5, uint64_t a6)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 16) = 0x4000LL;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a6, 0x4000LL);
  if (v10)
  {
    for (uint64_t i = 0LL; ; i += 0x4000LL)
    {
      *(void *)(a1 + 8) = v10;
      compression_status v12 = compression_stream_process((compression_stream *)(a1 + 8), 0);
      if (v12) {
        break;
      }
      if (*(void *)(a1 + 16))
      {
        if (a4)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v14 = (os_log_s *)gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            int v16 = 136446210;
            uint64_t v17 = "decode";
            _os_log_impl(&dword_181A5C000, v14, OS_LOG_TYPE_ERROR, "%{public}s truncated data", (uint8_t *)&v16, 0xCu);
          }
        }

        return i - *(void *)(a1 + 16) + 0x4000;
      }

      *(void *)(a1 + 16) = 0x4000LL;
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a6, 0x4000LL);
      if (!v10)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v13 = (os_log_s *)gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          int v16 = 136446210;
          uint64_t v17 = "decode";
LABEL_18:
          _os_log_impl(&dword_181A5C000, v13, OS_LOG_TYPE_ERROR, "%{public}s allocation failed", (uint8_t *)&v16, 0xCu);
        }

        return -1LL;
      }
    }

    if (v12 == COMPRESSION_STATUS_ERROR) {
      return -1LL;
    }
    if (v12 == COMPRESSION_STATUS_END) {
      *a5 = 1;
    }
    return i - *(void *)(a1 + 16) + 0x4000;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v13 = (os_log_s *)gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
  {
    int v16 = 136446210;
    uint64_t v17 = "decode";
    goto LABEL_18;
  }

  return -1LL;
}

BOOL nw_decoder_create_gzip()
{
  uint64_t v0 = (char *)calloc(1uLL, 0x80uLL);
  if (v0) {
    goto LABEL_2;
  }
  uint64_t v2 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  int v3 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v3);
  if (!result)
  {
    free(v3);
LABEL_2:
    *(void *)uint64_t v0 = off_189BB5690;
    *((_DWORD *)v0 + 30) = 31;
    inflateInit2_((z_streamp)(v0 + 8), 31, "1.2.12", 112);
    return (BOOL)v0;
  }

  __break(1u);
  return result;
}

BOOL nw_decoder_create_deflate()
{
  uint64_t v0 = (char *)calloc(1uLL, 0x80uLL);
  if (v0) {
    goto LABEL_2;
  }
  uint64_t v2 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  int v3 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v3);
  if (!result)
  {
    free(v3);
LABEL_2:
    *(void *)uint64_t v0 = off_189BB5690;
    *((_DWORD *)v0 + 30) = 15;
    inflateInit2_((z_streamp)(v0 + 8), 15, "1.2.12", 112);
    return (BOOL)v0;
  }

  __break(1u);
  return result;
}

BOOL nw_decoder_create_raw_deflate()
{
  uint64_t v0 = (char *)calloc(1uLL, 0x80uLL);
  if (v0) {
    goto LABEL_2;
  }
  uint64_t v2 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  int v3 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v3);
  if (!result)
  {
    free(v3);
LABEL_2:
    *(void *)uint64_t v0 = off_189BB5690;
    *((_DWORD *)v0 + 30) = -15;
    inflateInit2_((z_streamp)(v0 + 8), -15, "1.2.12", 112);
    return (BOOL)v0;
  }

  __break(1u);
  return result;
}

BOOL nw_decoder_create_brotli()
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  uint64_t v0 = (char *)calloc(1uLL, 0x30uLL);
  if (!v0)
  {
    int v3 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    uint64_t v6 = "strict_calloc";
    __int16 v7 = 2048;
    uint64_t v8 = 1LL;
    __int16 v9 = 2048;
    uint64_t v10 = 48LL;
    int v4 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v4);
    if (result)
    {
      __break(1u);
      return result;
    }

    free(v4);
  }

  *(void *)uint64_t v0 = off_189BB56B8;
  if (compression_stream_init((compression_stream *)(v0 + 8), COMPRESSION_STREAM_DECODE, (compression_algorithm)0xB02u))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v6 = "brotli_decoder";
      _os_log_impl(&dword_181A5C000, v1, OS_LOG_TYPE_ERROR, "%{public}s init failed", buf, 0xCu);
    }
  }

  return (BOOL)v0;
}

const char *nw_browse_result_get_description(void *a1, int a2)
{
  int v3 = a1;
  int v4 = v3;
  if (v3)
  {
    os_unfair_lock_lock(v3 + 12);
    if (a2)
    {
      uint64_t v5 = (const char **)&v4[10];
      if (!*(void *)&v4[10]._os_unfair_lock_opaque)
      {
        BOOL interfaces_description_locked = nw_browse_result_get_interfaces_description_locked((NWConcrete_nw_browse_result *)v4);
        id v7 = *(id *)&v4[2]._os_unfair_lock_opaque;
        logging_description = nw_endpoint_get_logging_description(v7);
        asprintf((char **)&v4[10], "%s@%s", logging_description, (const char *)interfaces_description_locked);
LABEL_8:
      }
    }

    else
    {
      uint64_t v5 = (const char **)&v4[8];
      if (!*(void *)&v4[8]._os_unfair_lock_opaque)
      {
        BOOL interfaces_description_locked = nw_browse_result_get_interfaces_description_locked((NWConcrete_nw_browse_result *)v4);
        id v7 = *(id *)&v4[2]._os_unfair_lock_opaque;
        description = nw_endpoint_get_description(v7);
        asprintf((char **)&v4[8], "%s@%s", description, (const char *)interfaces_description_locked);
        goto LABEL_8;
      }
    }

    os_unfair_lock_unlock(v4 + 12);
    __int16 v9 = *v5;
    goto LABEL_12;
  }

  __int16 v9 = "<NULL>";
LABEL_12:

  return v9;
}

void sub_181CC7694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_browse_result_get_interfaces_description_locked(NWConcrete_nw_browse_result *a1)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  uint64_t v16 = 0LL;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000LL;
  uint64_t v19 = 3LL;
  uint64_t v2 = *((void *)v1 + 2);
  if (v2) {
    uint64_t v3 = (uint64_t)(*(void *)(v2 + 24) - *(void *)(v2 + 16)) >> 3;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = MEMORY[0x1895F87A8];
  v15[0] = MEMORY[0x1895F87A8];
  v15[1] = 3221225472LL;
  v15[2] = ___ZL50nw_browse_result_get_interfaces_description_lockedP27NWConcrete_nw_browse_result_block_invoke;
  v15[3] = &unk_189BC93C8;
  v15[4] = &v16;
  v15[5] = v3;
  nw_array_apply((unsigned __int8 *)v2, (uint64_t)v15);
  size_t v5 = v17[3];
  if (!v5)
  {
    __nwlog_obj();
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    int v20 = 136446210;
    int v21 = "strict_malloc";
    uint64_t v11 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v11);
    if (result) {
      goto LABEL_11;
    }
    free(v11);
  }

  uint64_t v6 = malloc(v5);
  if (v6)
  {
LABEL_6:
    *uint64_t v6 = 91;
    id v7 = (unsigned __int8 *)*((void *)v1 + 2);
    v14[0] = v4;
    v14[1] = 3221225472LL;
    v14[2] = ___ZL50nw_browse_result_get_interfaces_description_lockedP27NWConcrete_nw_browse_result_block_invoke_2;
    v14[3] = &unk_189BB8F88;
    v14[4] = &v16;
    v14[5] = v6;
    v14[6] = v3;
    nw_array_apply(v7, (uint64_t)v14);
    uint64_t v8 = v17;
    *((_BYTE *)v6 + v17[3] - 2) = 93;
    *((_BYTE *)v6 + v8[3] - 1) = 0;
    _Block_object_dispose(&v16, 8);

    return (BOOL)v6;
  }

  __nwlog_obj();
  compression_status v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
  int v20 = 136446466;
  int v21 = "strict_malloc";
  __int16 v22 = 2048;
  size_t v23 = v5;
  int v13 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v13);
  if (!result)
  {
    free(v13);
    goto LABEL_6;
  }

uint64_t ___ZL50nw_browse_result_get_interfaces_description_lockedP27NWConcrete_nw_browse_result_block_invoke( uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a3) {
    size_t v5 = (const char *)(a3 + 104);
  }
  else {
    size_t v5 = 0LL;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += strlen(v5);
  if (*(void *)(a1 + 40) - 1LL > a2) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += 2LL;
  }
  return 1LL;
}

BOOL ___ZL50nw_browse_result_get_interfaces_description_lockedP27NWConcrete_nw_browse_result_block_invoke_2( void *a1, unint64_t a2, void *a3)
{
  size_t v5 = a3;
  uint64_t v6 = v5;
  if (v5) {
    id v7 = v5 + 104;
  }
  else {
    id v7 = 0LL;
  }
  uint64_t v8 = (_BYTE *)a1[5];
  unint64_t v9 = *(void *)(*(void *)(a1[4] + 8LL) + 24LL);
  if (v8)
  {
    if (v5) {
      goto LABEL_6;
    }
  }

  else
  {
    __nwlog_obj();
    int v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
    __int16 v22 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v22);
    if (result) {
      goto LABEL_52;
    }
    free(v22);
    if (v6)
    {
LABEL_6:
      if (v9) {
        goto LABEL_7;
      }
      goto LABEL_11;
    }
  }

  __nwlog_obj();
  size_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
  uint64_t v24 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v24);
  if (result) {
    goto LABEL_52;
  }
  free(v24);
  if (v9)
  {
LABEL_7:
    uint64_t v10 = &v8[v9];
    while (*v8)
    {
      ++v8;
      if (!--v9)
      {
        uint64_t v8 = v10;
        goto LABEL_11;
      }
    }

    if (v6)
    {
      if (v9 >= 2)
      {
LABEL_17:
        uint64_t v14 = 0LL;
        while (1)
        {
          int v15 = v7[v14];
          v8[v14] = v15;
          if (!v15) {
            goto LABEL_22;
          }
          --v9;
          ++v14;
          if (v9 <= 1)
          {
            v8 += v14;
            break;
          }
        }
      }
    }

    else
    {
      __nwlog_obj();
      char v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v29, OS_LOG_TYPE_ERROR);
      char v30 = (void *)_os_log_send_and_compose_impl();

      BOOL result = __nwlog_abort((uint64_t)v30);
      if (result) {
        goto LABEL_52;
      }
      free(v30);
      if (v9 >= 2) {
        goto LABEL_17;
      }
    }

    *uint64_t v8 = 0;
    goto LABEL_22;
  }

NWConcrete_nw_browse_result *nw_browse_result_create(void *a1)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  id v2 = a1;
  if (v2)
  {
    uint64_t v3 = objc_alloc(&OBJC_CLASS___NWConcrete_nw_browse_result);
    id v4 = v2;
    if (!v3)
    {
LABEL_7:

      goto LABEL_8;
    }

    v30.os_log_type_t receiver = v3;
    v30.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_browse_result;
    id v5 = objc_msgSendSuper2(&v30, sel_init);
    uint64_t v6 = (uint64_t *)v5;
    if (v5)
    {
      objc_storeStrong((id *)v5 + 1, a1);
      BOOL v7 = nw_array_create();
      uint64_t v8 = (void *)v6[2];
      v6[2] = v7;

      unint64_t v9 = (void *)v6[3];
      v6[3] = 0LL;

      id v10 = nw_endpoint_copy_interface(v4);
      if (v10)
      {
        nw_array_append(v6[2], v10);
        nw_endpoint_set_interface(v4, 0LL);
      }

      uint64_t v3 = v6;

      goto LABEL_7;
    }

    __nwlog_obj();
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v32 = "-[NWConcrete_nw_browse_result initWithEndpoint:]";
    unint64_t v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if ((__nwlog_fault(v17, &type, &v28) & 1) != 0)
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v32 = "-[NWConcrete_nw_browse_result initWithEndpoint:]";
          _os_log_impl(&dword_181A5C000, v18, v19, "%{public}s [super init] failed", buf, 0xCu);
        }
      }

      else if (v28)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = type;
        BOOL v25 = os_log_type_enabled(v18, type);
        if (backtrace_string)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v32 = "-[NWConcrete_nw_browse_result initWithEndpoint:]";
            __int16 v33 = 2082;
            __int16 v34 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v18,  v24,  "%{public}s [super init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_44;
        }

        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v32 = "-[NWConcrete_nw_browse_result initWithEndpoint:]";
          _os_log_impl(&dword_181A5C000, v18, v24, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v32 = "-[NWConcrete_nw_browse_result initWithEndpoint:]";
          _os_log_impl( &dword_181A5C000,  v18,  v27,  "%{public}s [super init] failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181CC8498(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_browse_result_get_endpoint(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = v1[1];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v16 = "nw_browse_result_get_endpoint";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_browse_result_get_endpoint";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null result", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v16 = "nw_browse_result_get_endpoint";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null result, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_browse_result_get_endpoint";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null result, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_browse_result_get_endpoint";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null result, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

nw_endpoint_t nw_browse_result_copy_endpoint(nw_browse_result_t result)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (result) {
    return (nw_endpoint_t)nw_endpoint_copy(*((void **)result + 1));
  }
  __nwlog_obj();
  id v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v13 = "nw_browse_result_copy_endpoint";
  id v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v3, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_browse_result_copy_endpoint";
        _os_log_impl(&dword_181A5C000, v4, v5, "%{public}s called with null result", buf, 0xCu);
      }
    }

    else if (v10)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          char v13 = "nw_browse_result_copy_endpoint";
          __int16 v14 = 2082;
          int v15 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v4,  v7,  "%{public}s called with null result, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_19;
      }

      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_browse_result_copy_endpoint";
        _os_log_impl(&dword_181A5C000, v4, v7, "%{public}s called with null result, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_browse_result_copy_endpoint";
        _os_log_impl( &dword_181A5C000,  v4,  v9,  "%{public}s called with null result, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

NWConcrete_nw_browse_result *nw_browse_result_create_mutable_copy(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_endpoint_copy(*((void **)v1 + 1));
    id v4 = nw_browse_result_create(v3);

    uint64_t v5 = v2[2];
    if (!v5 || *(void *)(v5 + 16) == *(void *)(v5 + 24))
    {
      uint64_t v5 = nw_array_create();
    }

    else
    {
      uint64_t v6 = nw_array_create();
      if (v6 != v5)
      {
        uint64_t v7 = v6;
        std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>( v6 + 16,  *(void ***)(v5 + 16),  *(void ***)(v5 + 24),  (uint64_t)(*(void *)(v5 + 24) - *(void *)(v5 + 16)) >> 3);
        uint64_t v5 = v7;
      }
    }

    BOOL v8 = (void *)*((void *)v4 + 2);
    *((void *)v4 + 2) = v5;

    uint64_t v9 = v2[3];
    if (v9) {
      nw_txt_record_t v10 = nw_txt_record_create_with_bytes(*(const uint8_t **)(v9 + 8), *(void *)(v9 + 16));
    }
    else {
      nw_txt_record_t v10 = 0LL;
    }
    BOOL v11 = (void *)*((void *)v4 + 3);
    *((void *)v4 + 3) = v10;

    *((_BYTE *)v4 + 52) &= ~1u;
    goto LABEL_11;
  }

  __nwlog_obj();
  char v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v24 = "nw_browse_result_create_mutable_copy";
  __int16 v14 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (__nwlog_fault(v14, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_browse_result_create_mutable_copy";
        _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s called with null result", buf, 0xCu);
      }
    }

    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v24 = "nw_browse_result_create_mutable_copy";
          __int16 v25 = 2082;
          os_log_type_t v26 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v15,  v18,  "%{public}s called with null result, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_28;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_browse_result_create_mutable_copy";
        _os_log_impl(&dword_181A5C000, v15, v18, "%{public}s called with null result, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_browse_result_create_mutable_copy";
        _os_log_impl( &dword_181A5C000,  v15,  v20,  "%{public}s called with null result, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181CC8D38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_browse_result_set_txt_record_object(void *a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    if ((*((_BYTE *)v3 + 52) & 1) != 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_browse_result_set_txt_record_object";
        _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_ERROR,  "%{public}s browse_result was marked immutable",  buf,  0xCu);
      }
    }

    else
    {
      objc_storeStrong(v3 + 3, a2);
    }

    goto LABEL_7;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_browse_result_set_txt_record_object";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_browse_result_set_txt_record_object";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null result", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_browse_result_set_txt_record_object";
          __int16 v18 = 2082;
          BOOL v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null result, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_browse_result_set_txt_record_object";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null result, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_browse_result_set_txt_record_object";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null result, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

nw_txt_record_t nw_browse_result_copy_txt_record_object(nw_browse_result_t result)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = result;
  id v2 = v1;
  if (v1)
  {
    id v3 = (nw_txt_record *)v1[3];
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_browse_result_copy_txt_record_object";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_result_copy_txt_record_object";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null result", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_browse_result_copy_txt_record_object";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null result, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_result_copy_txt_record_object";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null result, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_result_copy_txt_record_object";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null result, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

size_t nw_browse_result_get_interfaces_count(nw_browse_result_t result)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (!result)
  {
    __nwlog_obj();
    id v3 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v14 = "nw_browse_result_get_interfaces_count";
    id v4 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (__nwlog_fault(v4, &type, &v11))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v6 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)buf = 136446210;
          char v14 = "nw_browse_result_get_interfaces_count";
          _os_log_impl(&dword_181A5C000, v5, v6, "%{public}s called with null result", buf, 0xCu);
        }
      }

      else if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)buf = 136446466;
            char v14 = "nw_browse_result_get_interfaces_count";
            __int16 v15 = 2082;
            os_log_type_t v16 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v5,  v8,  "%{public}s called with null result, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (v9)
        {
          *(_DWORD *)buf = 136446210;
          char v14 = "nw_browse_result_get_interfaces_count";
          _os_log_impl(&dword_181A5C000, v5, v8, "%{public}s called with null result, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)buf = 136446210;
          char v14 = "nw_browse_result_get_interfaces_count";
          _os_log_impl( &dword_181A5C000,  v5,  v10,  "%{public}s called with null result, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

BOOL nw_browse_result_remove_interface(void *a1, void *a2)
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    __int16 v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_browse_result_remove_interface";
    os_log_type_t v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (__nwlog_fault(v16, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browse_result_remove_interface";
          _os_log_impl(&dword_181A5C000, v17, v26, "%{public}s called with null result", buf, 0xCu);
        }

        goto LABEL_35;
      }

      if (!v38)
      {
        __nwlog_obj();
        uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browse_result_remove_interface";
          _os_log_impl( &dword_181A5C000,  v17,  v33,  "%{public}s called with null result, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_35;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type;
      BOOL v30 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browse_result_remove_interface";
          _os_log_impl(&dword_181A5C000, v17, v29, "%{public}s called with null result, no backtrace", buf, 0xCu);
        }

        goto LABEL_35;
      }

      if (v30)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_browse_result_remove_interface";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v17,  v29,  "%{public}s called with null result, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_25;
    }

    goto LABEL_36;
  }

  if (!v4)
  {
    __nwlog_obj();
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_browse_result_remove_interface";
    os_log_type_t v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (__nwlog_fault(v16, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browse_result_remove_interface";
          _os_log_impl(&dword_181A5C000, v17, v28, "%{public}s called with null interface", buf, 0xCu);
        }

        goto LABEL_35;
      }

      if (!v38)
      {
        __nwlog_obj();
        uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browse_result_remove_interface";
          _os_log_impl( &dword_181A5C000,  v17,  v34,  "%{public}s called with null interface, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_35;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v31 = type;
      BOOL v32 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browse_result_remove_interface";
          _os_log_impl(&dword_181A5C000, v17, v31, "%{public}s called with null interface, no backtrace", buf, 0xCu);
        }

        goto LABEL_35;
      }

      if (v32)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_browse_result_remove_interface";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v17,  v31,  "%{public}s called with null interface, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_25;
    }

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

BOOL __nw_browse_result_remove_interface_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  BOOL v6 = nw_interface_shallow_compare(v5, *(void **)(a1 + 32));
  if (v6) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
  }

  return !v6;
}

BOOL nw_browse_result_insert_interface(void *a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    char v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v31 = "nw_browse_result_insert_interface";
    char v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v31 = "nw_browse_result_insert_interface";
        _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s called with null result", buf, 0xCu);
      }

      goto LABEL_47;
    }

    if (!v28)
    {
      __nwlog_obj();
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v31 = "nw_browse_result_insert_interface";
        _os_log_impl( &dword_181A5C000,  v15,  v24,  "%{public}s called with null result, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_47;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v20 = type;
    BOOL v21 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v31 = "nw_browse_result_insert_interface";
        _os_log_impl(&dword_181A5C000, v15, v20, "%{public}s called with null result, no backtrace", buf, 0xCu);
      }

      goto LABEL_47;
    }

    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v31 = "nw_browse_result_insert_interface";
      __int16 v32 = 2082;
      os_log_type_t v33 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v15,  v20,  "%{public}s called with null result, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_35;
  }

  if (!v4)
  {
    __nwlog_obj();
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v31 = "nw_browse_result_insert_interface";
    char v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v31 = "nw_browse_result_insert_interface";
        _os_log_impl(&dword_181A5C000, v15, v18, "%{public}s called with null interface", buf, 0xCu);
      }

BOOL __nw_browse_result_insert_interface_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  return !nw_interface_shallow_compare(a3, *(void **)(a1 + 32));
}

nw_browse_result_change_t nw_browse_result_get_changes( nw_browse_result_t old_result, nw_browse_result_t new_result)
{
  unint64_t v3 = old_result;
  unint64_t v4 = new_result;
  id v5 = (void *)v4;
  if (v3 | v4)
  {
    if (v3 || !v4)
    {
      if (!v3 || v4)
      {
        uint64_t v7 = (nw_browse_result *)(id)v3;
        os_log_type_t v8 = v5;
        size_t interfaces_count = nw_browse_result_get_interfaces_count(v7);
        size_t v10 = nw_browse_result_get_interfaces_count(v8);
        if (interfaces_count >= v10)
        {
          if (interfaces_count <= v10)
          {
            if (interfaces_count == v10)
            {
              nw_browse_result_copy_interfaces((NWConcrete_nw_browse_result *)v7);
              BOOL v12 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue();
              v21[0] = MEMORY[0x1895F87A8];
              v21[1] = 3221225472LL;
              v21[2] = __nw_browse_result_get_changes_block_invoke;
              v21[3] = &unk_189BC85B0;
              os_log_type_t v22 = v8;
              BOOL v13 = nw_array_apply(v12, (uint64_t)v21);

              if (v13) {
                uint64_t v11 = 0LL;
              }
              else {
                uint64_t v11 = 24LL;
              }
            }

            else
            {
              uint64_t v11 = 0LL;
            }
          }

          else
          {
            uint64_t v11 = 16LL;
          }
        }

        else
        {
          uint64_t v11 = 8LL;
        }

        char v14 = nw_browse_result_copy_txt_record_object(v7);
        id v15 = nw_browse_result_copy_txt_record_object(v8);
        BOOL is_equal = nw_txt_record_is_equal(v14, v15);
        endpoint = (nw_endpoint *)nw_browse_result_get_endpoint(v7);
        nw_endpoint_type_t type = nw_endpoint_get_type(endpoint);
        unint64_t v19 = v11 | 0x20;
        if (is_equal) {
          unint64_t v19 = v11;
        }
        if (type == 6) {
          v19 |= 0x22uLL;
        }
        if (v19 <= 1) {
          nw_browse_result_change_t v6 = 1LL;
        }
        else {
          nw_browse_result_change_t v6 = v19;
        }
      }

      else
      {
        nw_browse_result_change_t v6 = 4LL;
      }
    }

    else
    {
      nw_browse_result_change_t v6 = 2LL;
    }
  }

  else
  {
    nw_browse_result_change_t v6 = 1LL;
  }

  return v6;
}

void sub_181CCA600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_browse_result_copy_interfaces(NWConcrete_nw_browse_result *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = *((id *)v1 + 2);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_browse_result_copy_interfaces";
  nw_browse_result_change_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_result_copy_interfaces";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null result", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_browse_result_copy_interfaces";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null result, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_result_copy_interfaces";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null result, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_result_copy_interfaces";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null result, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL __nw_browse_result_get_changes_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  nw_browse_result_copy_interfaces(*(NWConcrete_nw_browse_result **)(a1 + 32));
  id v5 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1895F87A8];
  v9[1] = 3221225472LL;
  v9[2] = __nw_browse_result_get_changes_block_invoke_2;
  v9[3] = &unk_189BC85B0;
  id v6 = v4;
  id v10 = v6;
  BOOL v7 = !nw_array_apply(v5, (uint64_t)v9);

  return v7;
}

BOOL __nw_browse_result_get_changes_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  return !nw_interface_shallow_compare(*(void **)(a1 + 32), a3);
}

void nw_browse_result_enumerate_interfaces( nw_browse_result_t result, nw_browse_result_enumerate_interface_t enumerator)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  nw_browse_result_t v3 = result;
  nw_browse_result_enumerate_interface_t v4 = enumerator;
  id v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v27 = "nw_browse_result_enumerate_interfaces";
    id v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        id v27 = "nw_browse_result_enumerate_interfaces";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null result", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          id v27 = "nw_browse_result_enumerate_interfaces";
          __int16 v28 = 2082;
          os_log_type_t v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null result, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v9) {
          goto LABEL_4;
        }
LABEL_39:
        free(v9);
        goto LABEL_4;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        id v27 = "nw_browse_result_enumerate_interfaces";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null result, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        id v27 = "nw_browse_result_enumerate_interfaces";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null result, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_browse_result_enumerate_interfaces_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t nw_browse_result_mark_immutable(uint64_t result)
{
  if (result) {
    *(_BYTE *)(result + 52) |= 1u;
  }
  return result;
}

void nw_browse_result_set_discovered_from_path(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_browse_result_enumerate_interface_t v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 2;
    }
    else {
      char v5 = 0;
    }
    *((_BYTE *)v3 + 52) = *((_BYTE *)v3 + 52) & 0xFD | v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_browse_result_set_discovered_from_path";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_browse_result_set_discovered_from_path";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null result", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_browse_result_set_discovered_from_path";
          __int16 v18 = 2082;
          BOOL v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null result, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_browse_result_set_discovered_from_path";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null result, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_browse_result_set_discovered_from_path";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null result, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_browse_result_get_discovered_from_path(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[52] >> 1) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_browse_result_get_discovered_from_path";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_browse_result_get_discovered_from_path";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null result", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_browse_result_get_discovered_from_path";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null result, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_browse_result_get_discovered_from_path";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null result, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_browse_result_get_discovered_from_path";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null result, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_browse_result_get_change_description(uint64_t a1)
{
  uint64_t v145 = *MEMORY[0x1895F89C0];
  id v2 = (char *)calloc(0x6BuLL, 1uLL);
  if (v2)
  {
    if (a1)
    {
      if ((a1 & 1) == 0)
      {
        if ((a1 & 2) == 0) {
          goto LABEL_5;
        }
        goto LABEL_16;
      }

LABEL_224:
      uint64_t v104 = 0LL;
      unint64_t v105 = 107LL;
      while (1)
      {
        os_log_type_t v106 = &v2[v104];
        if (!v2[v104]) {
          break;
        }
        ++v104;
        if (!--v105) {
          goto LABEL_235;
        }
      }

      if (v105 < 2)
      {
LABEL_234:
        char *v106 = 0;
      }

      else
      {
        unint64_t v107 = v105 - 2;
        uint64_t v108 = 106 - v104;
        unint64_t v109 = 105 - v104;
        if (v109 >= 0xB) {
          unint64_t v109 = 11LL;
        }
        memcpy(v106, "<identical>", v109 + 1);
        os_log_type_t v106 = v2 + 106;
        while (v107 <= 0xA)
        {
          if (!--v108) {
            goto LABEL_234;
          }
        }
      }

  if (v91) {
    free(v91);
  }
  return 0LL;
}

    goto LABEL_225;
  }

  if (a2)
  {
    nw_browse_result_enumerate_interface_t v4 = xpc_dictionary_create(0LL, 0LL, 0LL);
    char v5 = v4;
    if (v4)
    {
      xpc_dictionary_set_uint64(v4, (const char *)networkd_privileged_key_type, 0x12uLL);
      xpc_dictionary_set_string(v5, (const char *)networkd_privileged_key_interface_name, a1);
      xpc_dictionary_set_string(v5, (const char *)networkd_privileged_key_second_interface_name, a2);
      id v6 = networkd_privileged_send_sync_inner((uint64_t)"networkd_privileged_teardown_feth_pair", v5);
      BOOL v7 = v6;
      if (!v6)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v14 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        unint64_t v101 = "networkd_privileged_teardown_feth_pair";
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        unint64_t v98 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v15 = (os_log_s *)(id)gLogObj;
          unint64_t v16 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            unint64_t v101 = "networkd_privileged_teardown_feth_pair";
            _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s received NULL response", buf, 0xCu);
          }

          goto LABEL_76;
        }

        if (!v98)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v15 = (os_log_s *)(id)gLogObj;
          unint64_t v33 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            unint64_t v101 = "networkd_privileged_teardown_feth_pair";
            _os_log_impl( &dword_181A5C000,  v15,  v33,  "%{public}s received NULL response, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_76;
        }

        id v23 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v15 = (os_log_s *)(id)gLogObj;
        uint64_t v24 = type;
        unint64_t v25 = os_log_type_enabled(v15, type);
        if (!v23)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446210;
            unint64_t v101 = "networkd_privileged_teardown_feth_pair";
            _os_log_impl(&dword_181A5C000, v15, v24, "%{public}s received NULL response, no backtrace", buf, 0xCu);
          }

          goto LABEL_76;
        }

        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v101 = "networkd_privileged_teardown_feth_pair";
          uint64_t v102 = 2082;
          *(void *)int v103 = v23;
          _os_log_impl( &dword_181A5C000,  v15,  v24,  "%{public}s received NULL response, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        goto LABEL_28;
      }

      Class = object_getClass(v6);
      if (Class != (Class)MEMORY[0x1895F9250])
      {
        if (Class != (Class)MEMORY[0x1895F9268])
        {
          uint64_t v9 = (char *)MEMORY[0x186E12534](v7);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          unint64_t v10 = (id)gLogObj;
          *(_DWORD *)buf = 136446466;
          unint64_t v101 = "networkd_privileged_teardown_feth_pair";
          uint64_t v102 = 2082;
          *(void *)int v103 = v9;
          BOOL v11 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          unint64_t v98 = 0;
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            unint64_t v12 = (os_log_s *)(id)gLogObj;
            uint64_t v13 = type;
            if (os_log_type_enabled(v12, type))
            {
              *(_DWORD *)buf = 136446466;
              unint64_t v101 = "networkd_privileged_teardown_feth_pair";
              uint64_t v102 = 2082;
              *(void *)int v103 = v9;
              _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s received unknown type XPC %{public}s", buf, 0x16u);
            }

        if (v87) {
          free(v87);
        }
        unint64_t v45 = 0LL;
        goto LABEL_47;
      }

      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        unint64_t v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v85 = type[0];
        if (os_log_type_enabled(v84, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_context_get_active_instance_count_for_hash_table";
          _os_log_impl(&dword_181A5C000, v84, v85, "%{public}s called with null hash_table", buf, 0xCu);
        }
      }

      else if (v133)
      {
        unint64_t v107 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        unint64_t v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __int128 v120 = type[0];
        uint64_t v108 = os_log_type_enabled(v84, type[0]);
        if (v107)
        {
          if (v108)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_context_get_active_instance_count_for_hash_table";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = v107;
            _os_log_impl( &dword_181A5C000,  v84,  v120,  "%{public}s called with null hash_table, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v107);
          goto LABEL_217;
        }

        if (v108)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_context_get_active_instance_count_for_hash_table";
          _os_log_impl(&dword_181A5C000, v84, v120, "%{public}s called with null hash_table, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        unint64_t v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v118 = type[0];
        if (os_log_type_enabled(v84, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_context_get_active_instance_count_for_hash_table";
          _os_log_impl( &dword_181A5C000,  v84,  v118,  "%{public}s called with null hash_table, backtrace limit exceeded",  buf,  0xCu);
        }
      }

LABEL_217:
      uint64_t v83 = (char *)v123;
      goto LABEL_218;
    }

    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unint64_t v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v81 = type[0];
      if (os_log_type_enabled(v80, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_get_active_instance_count_for_hash_table";
        _os_log_impl(&dword_181A5C000, v80, v81, "%{public}s called with null hash_table", buf, 0xCu);
      }
    }

    else
    {
      if (!v133)
      {
        __nwlog_obj();
        uint64_t v116 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v117 = type[0];
        if (os_log_type_enabled(v116, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_context_get_active_instance_count_for_hash_table";
          _os_log_impl( &dword_181A5C000,  v116,  v117,  "%{public}s called with null hash_table, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_210;
      }

      unint64_t v105 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unint64_t v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v121 = type[0];
      os_log_type_t v106 = os_log_type_enabled(v80, type[0]);
      if (v105)
      {
        if (v106)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_context_get_active_instance_count_for_hash_table";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v105;
          _os_log_impl( &dword_181A5C000,  v80,  v121,  "%{public}s called with null hash_table, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v105);
        goto LABEL_210;
      }

      if (v106)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_get_active_instance_count_for_hash_table";
        _os_log_impl(&dword_181A5C000, v80, v121, "%{public}s called with null hash_table, no backtrace", buf, 0xCu);
      }
    }

LABEL_210:
    unint64_t v79 = (char *)v125;
    goto LABEL_211;
  }

              unint64_t v12 = 1LL;
              if (!v34) {
                goto LABEL_79;
              }
              goto LABEL_78;
            }

            __nwlog_obj();
            uint64_t v89 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_hsts_storage_should_upgrade";
            unint64_t v90 = (char *)_os_log_send_and_compose_impl();

            v128[0] = 16;
            os_log_type_t v121 = OS_LOG_TYPE_DEFAULT;
            if (__nwlog_fault(v90, v128, &v121))
            {
              if (v128[0] == 17)
              {
                __nwlog_obj();
                BOOL v91 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                unint64_t v92 = v128[0];
                if (os_log_type_enabled(v91, (os_log_type_t)v128[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_hsts_storage_should_upgrade";
                  _os_log_impl(&dword_181A5C000, v91, v92, "%{public}s called with null storage", buf, 0xCu);
                }
              }

              else if (v121)
              {
                size_t v94 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                BOOL v91 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v95 = v128[0];
                BOOL v96 = os_log_type_enabled(v91, (os_log_type_t)v128[0]);
                if (v94)
                {
                  if (v96)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_hsts_storage_should_upgrade";
                    *(_WORD *)&_BYTE buf[12] = 2082;
                    *(void *)&buf[14] = v94;
                    _os_log_impl( &dword_181A5C000,  v91,  v95,  "%{public}s called with null storage, dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(v94);
                  goto LABEL_222;
                }

                if (v96)
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_hsts_storage_should_upgrade";
                  _os_log_impl( &dword_181A5C000,  v91,  v95,  "%{public}s called with null storage, no backtrace",  buf,  0xCu);
                }
              }

              else
              {
                __nwlog_obj();
                BOOL v91 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                uint64_t v97 = v128[0];
                if (os_log_type_enabled(v91, (os_log_type_t)v128[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_hsts_storage_should_upgrade";
                  _os_log_impl( &dword_181A5C000,  v91,  v97,  "%{public}s called with null storage, backtrace limit exceeded",  buf,  0xCu);
                }
              }
            }

        v137 = *(_DWORD **)(v5 + 784);
        v138 = v137[2] - 1;
        v137[2] = v138;
        if (!v138) {
          free(v137);
        }
        *(void *)(v5 + 784) = 0LL;
LABEL_231:
        nw_http3_fail_all_streams(*(void *)(v142 + 40), 513LL);
        return 0LL;
      }

      unint64_t v16 = &v3[v32];
      *(_DWORD *)(v5 + 808) += v32;
      *(_DWORD *)(v5 + 804) += v30;
      goto LABEL_7;
    case 6:
      if (!*(_DWORD *)(v5 + 736)) {
        goto LABEL_78;
      }
      __int16 v17 = 0;
      size_t v14 = *(void *)(v5 + 752);
      uint64_t v15 = *(_DWORD *)(v5 + 740);
      unint64_t v16 = v3;
      goto LABEL_101;
    case 7:
      if (!*(_DWORD *)(v5 + 736)) {
        goto LABEL_98;
      }
      __int16 v17 = 0;
      size_t v14 = *(void *)(v5 + 752);
      uint64_t v15 = *(_DWORD *)(v5 + 740);
      unint64_t v16 = v3;
      goto LABEL_163;
    case 8:
      if (!*(_DWORD *)(v5 + 736)) {
        goto LABEL_95;
      }
      __int16 v17 = 0;
      size_t v14 = *(void *)(v5 + 752);
      uint64_t v15 = *(_DWORD *)(v5 + 740);
      unint64_t v16 = v3;
      goto LABEL_178;
    case 9:
      unint64_t v35 = *(unsigned int *)(v5 + 768);
      uint64_t v36 = *(unsigned int *)(v5 + 792);
      else {
        unint64_t v37 = (v35 - v36);
      }
      uint64_t v38 = lsqpack_huff_decode( v3,  v37,  (char *)(*(void *)(v5 + 776) + *(unsigned int *)(v5 + 788) + 28LL),  (*(_DWORD *)(v5 + 784) - *(_DWORD *)(v5 + 788)),  v143,  v37 + v36 == v35);
      uint64_t v40 = v38;
      uint64_t v41 = v39;
      if ((_DWORD)v38 == 2)
      {
        unint64_t v71 = (2 * *(_DWORD *)(v5 + 784));
        *(_DWORD *)(v5 + 784) = v71;
        uint64_t v72 = realloc(*(void **)(v5 + 776), v71 + 28);
        if (!v72) {
          goto LABEL_231;
        }
        *(void *)(v5 + 776) = v72;
      }

      else if ((_DWORD)v38 != 1)
      {
        if ((_DWORD)v38) {
          goto LABEL_231;
        }
        unint64_t v16 = &v3[v39];
        **(_DWORD **)(v5 + 776) = *(_DWORD *)(v5 + 788) + HIDWORD(v38);
        BOOL v11 = 11;
        goto LABEL_6;
      }

      unint64_t v16 = &v3[v41];
      *(_DWORD *)(v5 + 792) += v41;
      unint64_t v73 = HIDWORD(v40);
      goto LABEL_93;
    case 0xA:
      unint64_t v42 = *(_DWORD *)(v5 + 768);
      if (*(_DWORD *)(v5 + 784) < v42) {
        __assert_rtn("lsqpack_dec_enc_in", "lsqpack.c", 4809, "WONR.alloced_len >= WONR.str_len");
      }
      unint64_t v43 = *(unsigned int *)(v5 + 788);
      uint64_t v44 = v42 - v43;
      else {
        unint64_t v45 = v44;
      }
      memcpy((void *)(*(void *)(v5 + 776) + v43 + 28), v3, v45);
      unint64_t v46 = *(_DWORD *)(v5 + 788) + v45;
      *(_DWORD *)(v5 + 788) = v46;
      unint64_t v16 = &v3[v45];
      if (v46 != *(_DWORD *)(v5 + 768)) {
        goto LABEL_7;
      }
      **(_DWORD **)(v5 + 776) = v46;
      BOOL v11 = 11;
      goto LABEL_6;
    case 0xB:
      *(_BYTE *)(v5 + 796) = *v3 >> 7;
      *(_DWORD *)(v5 + 736) = 0;
      *(_DWORD *)(v5 + 728) = 12;
      unint64_t v10 = 7;
      goto LABEL_60;
    case 0xC:
      if (*(_DWORD *)(v5 + 736))
      {
        __int16 v17 = 0;
        size_t v14 = *(void *)(v5 + 752);
        uint64_t v15 = *(_DWORD *)(v5 + 740);
        unint64_t v16 = v3;
        while (1)
        {
          char v126 = *v16++;
          v14 += (unint64_t)(v126 & 0x7F) << v15;
          v15 += 7;
          if ((v126 & 0x80) == 0) {
            break;
          }
LABEL_204:
          if (v16 >= v7)
          {
LABEL_210:
            if ((v17 & 1) != 0) {
              v129 = 0;
            }
            else {
              v129 = *(_DWORD *)(v5 + 744);
            }
            __int16 v130 = v129 + (_DWORD)v16 - (_DWORD)v3;
            if (v130 >= 0xB) {
              goto LABEL_231;
            }
            goto LABEL_214;
          }
        }

        if (v15 > 0x3F || v14 >> 24 != 0) {
          goto LABEL_231;
        }
      }

      else
      {
LABEL_60:
        unint64_t v16 = v3 + 1;
        uint64_t v47 = *v3;
        size_t v48 = ~(-1 << v10);
        size_t v14 = v47 & v48;
        if ((v47 & v48) >= v48)
        {
          uint64_t v15 = 0;
          __int16 v17 = 1;
          goto LABEL_204;
        }
      }

      *(_DWORD *)(v5 + 768) = v14;
      uint64_t v64 = *(const char **)(v5 + 776);
      BOOL v128 = *(_BYTE *)(v5 + 796);
      *os_log_type_t v8 = 0LL;
      if ((_DWORD)v14)
      {
        if (!v128)
        {
          BOOL v11 = 14;
          goto LABEL_6;
        }

        *(_DWORD *)(v5 + 728) = 13;
        *(_DWORD *)(v5 + 760) = 0;
        goto LABEL_7;
      }

      unint64_t v63 = 0;
LABEL_207:
      *((_DWORD *)v64 + 1) = v63;
      *((_DWORD *)*v9 + 2) = 1;
      goto LABEL_221;
    case 0xD:
      uint64_t v49 = *(unsigned int *)(v5 + 768);
      unint64_t v50 = *(unsigned int *)(v5 + 792);
      else {
        unsigned __int16 v51 = (v49 - v50);
      }
      unint64_t v52 = lsqpack_huff_decode( v3,  v51,  (char *)(*(void *)(v5 + 776) + *(unsigned int *)(v5 + 788) + **(unsigned int **)(v5 + 776) + 28LL),  (*(_DWORD *)(v5 + 784) - *(_DWORD *)(v5 + 788) - **(_DWORD **)(v5 + 776)),  v143,  v51 + v50 == v49);
      uint64_t v53 = v52;
      uint64_t v55 = v54;
      if ((_DWORD)v52 == 2)
      {
        BOOL v74 = *(_DWORD *)(v5 + 784);
        if (!v74) {
          __assert_rtn("lsqpack_dec_enc_in", "lsqpack.c", 4885, "WONR.alloced_len");
        }
        uint64_t v75 = (2 * v74);
        *(_DWORD *)(v5 + 784) = v75;
        unint64_t v76 = realloc(*(void **)(v5 + 776), v75 + 28);
        if (!v76) {
          goto LABEL_231;
        }
        *(void *)(v5 + 776) = v76;
      }

      else if ((_DWORD)v52 != 1)
      {
        if ((_DWORD)v52) {
          goto LABEL_231;
        }
        *((_DWORD *)*v9 + 1) = *(_DWORD *)v8 + HIDWORD(v52);
        *((_DWORD *)*v9 + 2) = 1;
        if (!lsqpack_dec_push_entry(v144, *v9))
        {
          unint64_t v16 = &v3[v55];
LABEL_208:
          *(_DWORD *)(v5 + 728) = 0;
          *(void *)(v5 + 776) = 0LL;
          goto LABEL_7;
        }

      if (v119) {
        free(v119);
      }
LABEL_36:

LABEL_37:
      uint64_t v34 = v21;
      unint64_t v35 = v21[1];

      if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
      }
      uint64_t v36 = nw_protocol_definition_is_equal_unsafe((uint64_t)v35, nw_protocol_copy_http_connection_definition_definition);

      if (v36)
      {
        unint64_t v37 = v34[4];
        if (v37) {
          v37[196] |= 8u;
        }
        goto LABEL_43;
      }

      __nwlog_obj();
      uint64_t v122 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_used_tfo";
      LODWORD(v159) = 12;
      v158 = buf;
      uint64_t v123 = (char *)_os_log_send_and_compose_impl();

      v163 = OS_LOG_TYPE_ERROR;
      v162 = 0;
      if (v163 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v124 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v125 = v163;
        if (os_log_type_enabled(v124, v163))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_used_tfo";
          _os_log_impl(&dword_181A5C000, v124, v125, "%{public}s metadata must be http_connection", buf, 0xCu);
        }

LABEL_211:
    uint64_t v97 = 0LL;
    unint64_t v98 = 107LL;
    while (1)
    {
      BOOL v91 = &v2[v97];
      if (!v2[v97]) {
        break;
      }
      ++v97;
      if (!--v98) {
        return (BOOL)v2;
      }
    }

    if (v98 >= 2)
    {
      unint64_t v99 = v98 - 2;
      uint64_t v100 = 106 - v97;
      unint64_t v101 = 105 - v97;
      if (v101 >= 9) {
        unint64_t v101 = 9LL;
      }
      memcpy(v91, "<invalid>", v101 + 1);
      BOOL v91 = v2 + 106;
      while (v99 <= 8)
      {
        if (!--v100) {
          goto LABEL_221;
        }
      }

      return (BOOL)v2;
    }

    goto LABEL_221;
  }

  __nwlog_obj();
  nw_browse_result_enumerate_interface_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v140 = "strict_calloc";
  __int16 v141 = 2048;
  uint64_t v142 = 107LL;
  __int16 v143 = 2048;
  uint64_t v144 = 1LL;
  char v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (result) {
    goto LABEL_268;
  }
  free(v5);
  if (!a1)
  {
    __nwlog_obj();
    os_log_type_t v95 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v95, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v140 = "_strict_strlcat";
    BOOL v96 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v96);
    if (result) {
      goto LABEL_268;
    }
    free(v96);
    goto LABEL_211;
  }

  if ((a1 & 1) != 0)
  {
    __nwlog_obj();
    uint64_t v102 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v102, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v140 = "_strict_strlcat";
    int v103 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v103);
    if (result) {
      goto LABEL_268;
    }
    free(v103);
    goto LABEL_224;
  }

  if ((a1 & 2) == 0)
  {
LABEL_5:
    char v3 = 0;
    if ((a1 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_41;
  }

  __nwlog_obj();
  BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v140 = "_strict_strlcat";
  os_log_type_t v8 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v8);
  if (result) {
    goto LABEL_268;
  }
  free(v8);
LABEL_16:
  uint64_t v9 = 0LL;
  unint64_t v10 = 107LL;
  while (1)
  {
    BOOL v11 = &v2[v9];
    if (!v2[v9]) {
      break;
    }
    ++v9;
    if (!--v10) {
      goto LABEL_28;
    }
  }

  if (v10 < 2)
  {
LABEL_27:
    *BOOL v11 = 0;
  }

  else
  {
    unint64_t v12 = v10 - 2;
    uint64_t v13 = 106 - v9;
    if (v9 == 105) {
      size_t v14 = 1LL;
    }
    else {
      size_t v14 = 2LL;
    }
    memcpy(v11, "<", v14);
    BOOL v11 = v2 + 106;
    while (!v12)
    {
      if (!--v13) {
        goto LABEL_27;
      }
    }
  }

  if (v68) {
    free(v68);
  }
LABEL_49:
  if (v27 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v23 + 40) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v47 = *(void *)(v23 + 88);
    if (v47)
    {
      size_t v48 = v47 - 1;
      *(void *)(v23 + 88) = v48;
      if (!v48)
      {
        uint64_t v49 = *(void (***)(void))(v23 + 64);
        if (v49)
        {
          *(void *)(v23 + 64) = 0LL;
          v49[2](v49);
          _Block_release(v49);
        }

        if ((*(_BYTE *)(v23 + 72) & 1) != 0)
        {
          unint64_t v50 = *(const void **)(v23 + 64);
          if (v50) {
            _Block_release(v50);
          }
        }

        free((void *)v23);
      }
    }
  }

  if (v25 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v24 + 40) == &nw_protocol_ref_counted_handle)
  {
    unsigned __int16 v51 = *(void *)(v24 + 88);
    if (v51)
    {
      unint64_t v52 = v51 - 1;
      *(void *)(v24 + 88) = v52;
      if (!v52)
      {
        uint64_t v53 = *(void (***)(void))(v24 + 64);
        if (v53)
        {
          *(void *)(v24 + 64) = 0LL;
          v53[2](v53);
          _Block_release(v53);
        }

        if ((*(_BYTE *)(v24 + 72) & 1) != 0)
        {
          unint64_t v54 = *(const void **)(v24 + 64);
          if (v54) {
            _Block_release(v54);
          }
        }

        goto LABEL_101;
      }
    }
  }

          free(v88);
          goto LABEL_212;
        }

        __nwlog_obj();
        uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)handler = 136446210;
        *(void *)&handler[4] = "nw_connection_group_copy_workloop";
        unint64_t v84 = (char *)_os_log_send_and_compose_impl();

        buf[0] = 16;
        type[0] = 0;
        if (__nwlog_fault(v84, buf, type))
        {
          if (buf[0] == 17)
          {
            __nwlog_obj();
            uint64_t v85 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            unint64_t v86 = buf[0];
            if (os_log_type_enabled(v85, (os_log_type_t)buf[0]))
            {
              *(_DWORD *)handler = 136446210;
              *(void *)&handler[4] = "nw_connection_group_copy_workloop";
              _os_log_impl(&dword_181A5C000, v85, v86, "%{public}s called with null parameters", handler, 0xCu);
            }
          }

          else if (type[0])
          {
            unint64_t v98 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            uint64_t v85 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            unint64_t v99 = buf[0];
            uint64_t v100 = os_log_type_enabled(v85, (os_log_type_t)buf[0]);
            if (v98)
            {
              if (v100)
              {
                *(_DWORD *)handler = 136446466;
                *(void *)&handler[4] = "nw_connection_group_copy_workloop";
                *(_WORD *)&handler[12] = 2082;
                *(void *)&handler[14] = v98;
                _os_log_impl( &dword_181A5C000,  v85,  v99,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  handler,  0x16u);
              }

              free(v98);
              goto LABEL_201;
            }

            if (v100)
            {
              *(_DWORD *)handler = 136446210;
              *(void *)&handler[4] = "nw_connection_group_copy_workloop";
              _os_log_impl( &dword_181A5C000,  v85,  v99,  "%{public}s called with null parameters, no backtrace",  handler,  0xCu);
            }
          }

          else
          {
            __nwlog_obj();
            uint64_t v85 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            uint64_t v117 = buf[0];
            if (os_log_type_enabled(v85, (os_log_type_t)buf[0]))
            {
              *(_DWORD *)handler = 136446210;
              *(void *)&handler[4] = "nw_connection_group_copy_workloop";
              _os_log_impl( &dword_181A5C000,  v85,  v117,  "%{public}s called with null parameters, backtrace limit exceeded",  handler,  0xCu);
            }
          }
        }

        if (v89) {
          free(v89);
        }
        goto LABEL_73;
      }
    }

    unint64_t v33 = (id *)v4;
    char v126 = v24;
    if (v33)
    {
      objc_storeStrong(v33 + 22, v24);
LABEL_50:

      goto LABEL_52;
    }

    __nwlog_obj();
    uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v127 = 136446210LL;
    *(_DWORD *)objects = 136446210;
    uint64_t v21 = "nw_parameters_set_custom_proxy_config_array";
    *(void *)&objects[4] = "nw_parameters_set_custom_proxy_config_array";
    LODWORD(v117) = 12;
    int v114 = objects;
    id v2 = 16LL;
    uint64_t v24 = (id)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v128 = 0;
    if (__nwlog_fault((const char *)v24, &type, &v128))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        unint64_t v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v2 = type;
        if (os_log_type_enabled(v84, type))
        {
          *(_DWORD *)objects = 136446210;
          *(void *)&objects[4] = "nw_parameters_set_custom_proxy_config_array";
          _os_log_impl( &dword_181A5C000,  v84,  (os_log_type_t)v2,  "%{public}s called with null parameters",  objects,  0xCu);
        }
      }

      else if (v128)
      {
        id v2 = (unint64_t)__nw_create_backtrace_string();
        __nwlog_obj();
        unint64_t v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v100 = type;
        unint64_t v101 = os_log_type_enabled(v84, type);
        if (v2)
        {
          if (v101)
          {
            *(_DWORD *)objects = 136446466;
            *(void *)&objects[4] = "nw_parameters_set_custom_proxy_config_array";
            *(_WORD *)&objects[12] = 2082;
            *(void *)&objects[14] = v2;
            _os_log_impl( &dword_181A5C000,  v84,  v100,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  objects,  0x16u);
          }

          free((void *)v2);
          goto LABEL_200;
        }

        if (v101)
        {
          *(_DWORD *)objects = 136446210;
          *(void *)&objects[4] = "nw_parameters_set_custom_proxy_config_array";
          _os_log_impl( &dword_181A5C000,  v84,  v100,  "%{public}s called with null parameters, no backtrace",  objects,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        unint64_t v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v2 = type;
        if (os_log_type_enabled(v84, type))
        {
          *(_DWORD *)objects = 136446210;
          *(void *)&objects[4] = "nw_parameters_set_custom_proxy_config_array";
          _os_log_impl( &dword_181A5C000,  v84,  (os_log_type_t)v2,  "%{public}s called with null parameters, backtrace limit exceeded",  objects,  0xCu);
        }
      }
    }

    free(v84);
    goto LABEL_212;
  }

  unint64_t v26 = (char *)nw_http_create_oblivious_request( a2,  (*(unsigned __int8 *)(a1 + 348) >> 1) & 1,  (*(unsigned __int8 *)(a1 + 348) >> 2) & 1,  v20,  v16,  (v25 >> 1) & 1,  bytes_ptr,  length,  &v128);
LABEL_112:
  if (v24) {
    free(v24);
  }
  if (v26)
  {
    unint64_t v63 = *(void **)(a2 + 128);
    if (!v63)
    {
      unint64_t v69 = v128;
      *(void *)(a2 + 128) = v26;
      *(void *)(a2 + 136) = v69;
      *(void *)(a2 + 144) = 0LL;
      goto LABEL_124;
    }

    uint64_t v64 = *(void *)(a2 + 136);
    uint64_t v66 = v128 + v64;
    size_t v65 = v128 + v64 == 0;
    *(void *)(a2 + 136) = v128 + v64;
    if (v65)
    {
      unint64_t v88 = (os_log_s *)__nwlog_obj();
      os_log_type_enabled(v88, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "_strict_reallocf";
      uint64_t v89 = (void *)_os_log_send_and_compose_impl();
      free(v89);
      unint64_t v63 = *(void **)(a2 + 128);
    }

    unint64_t v67 = (char *)reallocf(v63, v66);
    if (v67)
    {
LABEL_118:
      *(void *)(a2 + 128) = v67;
      memcpy(&v67[v64], v26, v128);
LABEL_124:
      if (v16 >= v116)
      {
        v117[0] = MEMORY[0x1895F87A8];
        v117[1] = 0x40000000LL;
        v118 = (uint64_t (*)(void *))___ZL33nw_protocol_ohttp_prepare_requestP17nw_protocol_ohttpP16nw_ohttp_context_block_invoke_2;
        __int128 v119 = &__block_descriptor_tmp_36_28727;
        __int128 v120 = a2;
        BOOL v74 = *(void *)(a2 + 24);
        do
        {
          if (!v74) {
            break;
          }
          uint64_t v75 = *(void *)(v74 + 16);
          unint64_t v76 = v118(v117);
          BOOL v74 = v75;
        }

        while ((v76 & 1) != 0);
      }

      else
      {
        uint64_t v70 = *(void *)(a2 + 152);
        *(void *)(a2 + 152) = v70 + v16;
        if (__CFADD__(v70, v16))
        {
          if (gLogDatapath)
          {
            unint64_t v109 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v109, OS_LOG_TYPE_DEBUG))
            {
              __int16 v110 = *(void *)(a2 + 152);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_prepare_request";
              *(_WORD *)&_BYTE buf[12] = 2082;
              *(void *)&buf[14] = "ohttp_context->cumulative_request_length";
              *(_WORD *)&buf[22] = 2048;
              v140 = v16;
              __int16 v141 = 2048;
              uint64_t v142 = v110;
              _os_log_impl( &dword_181A5C000,  v109,  OS_LOG_TYPE_DEBUG,  "%{public}s Overflow: %{public}s, increment %llu, result %llu",  buf,  0x2Au);
            }
          }

          *(void *)(a2 + 152) = -1LL;
        }

        *(void *)buf = 0LL;
        *(void *)&buf[8] = buf;
        LODWORD(v140) = 0;
        *(void *)&buf[16] = 0x2000000000LL;
        v121[0] = MEMORY[0x1895F87A8];
        v121[1] = 0x40000000LL;
        uint64_t v122 = (uint64_t (*)(void *))___ZL33nw_protocol_ohttp_prepare_requestP17nw_protocol_ohttpP16nw_ohttp_context_block_invoke_34;
        uint64_t v123 = &unk_189BBB478;
        int v124 = buf;
        BOOL v125 = v16;
        char v126 = a2;
        os_log_type_t v127 = a1;
        unint64_t v71 = *(void *)(a2 + 24);
        do
        {
          if (!v71) {
            break;
          }
          uint64_t v72 = *(void *)(v71 + 16);
          unint64_t v73 = v122(v121);
          unint64_t v71 = v72;
        }

        while ((v73 & 1) != 0);
        _Block_object_dispose(buf, 8);
      }

      if ((*(_BYTE *)(a1 + 348) & 2) == 0)
      {
        *(void *)buf = 0LL;
        *(void *)&buf[8] = 0LL;
        snprintf(buf, 0x10uLL, "%zu", *(void *)(a2 + 136));
        unint64_t v77 = nw_http_metadata_copy_request(*(void **)(a1 + 304));
        nw_http_fields_append(v77, (uint64_t)"Content-Length", (uint64_t)buf);
        if (v77) {
          os_release(v77);
        }
      }

      *(_DWORD *)(a2 + 224) = 1;
      nw_protocol_ohttp_send_request(a1);
      return;
    }

    unint64_t v90 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v90, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "_strict_reallocf";
    *(_WORD *)&_BYTE buf[12] = 2048;
    *(void *)&buf[14] = v66;
    BOOL v91 = (void *)_os_log_send_and_compose_impl();
    if (!__nwlog_abort((uint64_t)v91))
    {
      free(v91);
      goto LABEL_118;
    }

      if (!v94) {
        goto LABEL_90;
      }
LABEL_212:
      free(v94);
      goto LABEL_90;
    }

    *((_DWORD *)handle + 111) = 3;
    uint64_t v58 = *((void *)handle + 6);
    if (v58)
    {
      unint64_t v59 = *(void *)(v58 + 40);
      if (v59)
      {
        *((void *)handle + 52) = v59;
        return;
      }

      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_http2_setup_placeholder_stream";
      uint64_t v72 = (char *)_os_log_send_and_compose_impl();
      v112[0] = 16;
      LOBYTE(v106[0]) = 0;
      if (v112[0] == 17)
      {
        unint64_t v73 = (os_log_s *)__nwlog_obj();
        BOOL v74 = v112[0];
        if (os_log_type_enabled(v73, (os_log_type_t)v112[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_http2_setup_placeholder_stream";
          uint64_t v75 = "%{public}s called with null webtransport_stream";
          goto LABEL_152;
        }

        goto LABEL_153;
      }

      if (!LOBYTE(v106[0]))
      {
        unint64_t v73 = (os_log_s *)__nwlog_obj();
        BOOL v74 = v112[0];
        if (os_log_type_enabled(v73, (os_log_type_t)v112[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_http2_setup_placeholder_stream";
          uint64_t v75 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
          goto LABEL_152;
        }

        goto LABEL_153;
      }

      uint64_t v83 = (char *)__nw_create_backtrace_string();
      unint64_t v73 = (os_log_s *)__nwlog_obj();
      BOOL v74 = v112[0];
      int v103 = os_log_type_enabled(v73, (os_log_type_t)v112[0]);
      if (!v83)
      {
        if (v103)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_http2_setup_placeholder_stream";
          uint64_t v75 = "%{public}s called with null webtransport_stream, no backtrace";
          goto LABEL_152;
        }

        goto LABEL_153;
      }

      if (v103)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_http2_setup_placeholder_stream";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = v83;
        uint64_t v85 = "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s";
        goto LABEL_141;
      }

    free(v29);
    goto LABEL_212;
  }

  unint64_t v45 = v44;
  unint64_t v46 = CFURLCreateWithString(v41, v44, 0LL);
  if (!v46)
  {
    if ((*(_WORD *)(a1 + 368) & 0x80) != 0) {
      goto LABEL_209;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = a1 + 284;
    *(_WORD *)&buf[22] = 2080;
    v171 = " ";
    unint64_t v67 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v161[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v67, type, v161))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __int16 v68 = (os_log_s *)__nwlog_obj();
        unint64_t v69 = type[0];
        if (!os_log_type_enabled(v68, type[0])) {
          goto LABEL_207;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&buf[22] = 2080;
        v171 = " ";
        uint64_t v70 = "%{public}s %{public}s%sCFURLCreateWithString failed";
LABEL_206:
        _os_log_impl(&dword_181A5C000, v68, v69, v70, buf, 0x20u);
        goto LABEL_207;
      }

      if (v161[0] == OS_LOG_TYPE_DEFAULT)
      {
        __int16 v68 = (os_log_s *)__nwlog_obj();
        unint64_t v69 = type[0];
        if (!os_log_type_enabled(v68, type[0])) {
          goto LABEL_207;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&buf[22] = 2080;
        v171 = " ";
        uint64_t v70 = "%{public}s %{public}s%sCFURLCreateWithString failed, backtrace limit exceeded";
        goto LABEL_206;
      }

      unint64_t v73 = (char *)__nw_create_backtrace_string();
      __int16 v68 = (os_log_s *)__nwlog_obj();
      unint64_t v69 = type[0];
      BOOL v74 = os_log_type_enabled(v68, type[0]);
      if (!v73)
      {
        if (!v74) {
          goto LABEL_207;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&buf[22] = 2080;
        v171 = " ";
        uint64_t v70 = "%{public}s %{public}s%sCFURLCreateWithString failed, no backtrace";
        goto LABEL_206;
      }

      if (v74)
      {
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_http_connect_create_request";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = a1 + 284;
        *(_WORD *)&buf[22] = 2080;
        v171 = " ";
        LOWORD(v172) = 2082;
        *(void *)((char *)&v172 + 2) = v73;
        _os_log_impl( &dword_181A5C000,  v68,  v69,  "%{public}s %{public}s%sCFURLCreateWithString failed, dumping backtrace:%{public}s",  buf,  0x2Au);
      }

      free(v73);
    }

      if (v4) {
        free((void *)v4);
      }
      return 0LL;
    }

    if (!LOBYTE(v85[0]))
    {
      uint64_t v32 = (os_log_s *)__nwlog_obj();
      unint64_t v33 = v86[0];
      if (os_log_type_enabled(v32, (os_log_type_t)v86[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_socket_copy_info";
        uint64_t v34 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_181;
      }

      goto LABEL_211;
    }

    backtrace_string = __nw_create_backtrace_string();
    uint64_t v32 = (os_log_s *)__nwlog_obj();
    unint64_t v33 = v86[0];
    uint64_t v72 = os_log_type_enabled(v32, (os_log_type_t)v86[0]);
    if (!backtrace_string)
    {
      if (v72)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_socket_copy_info";
        uint64_t v34 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_181;
      }

      goto LABEL_211;
    }

    if (v72)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_socket_copy_info";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      uint64_t v58 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_144:
      _os_log_impl(&dword_181A5C000, v32, v33, v58, buf, 0x16u);
    }

LABEL_268:
  __break(1u);
  return result;
}

              if (v104) {
                free(v104);
              }
              uint64_t v41 = v135;
LABEL_66:
              unint64_t v43 = v40 + v26 - v41;
              if (!__CFADD__(v40, v26 - v41))
              {
                uint64_t v49 = log;
                if (!(_DWORD)v43) {
                  goto LABEL_109;
                }
                goto LABEL_108;
              }

              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              *(_DWORD *)buf = 136446978;
              v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
              uint64_t v44 = v26 - (unint64_t)v41;
              __int16 v141 = 2082;
              uint64_t v142 = "unused_bytes";
              __int16 v143 = 2048;
              uint64_t v144 = (const char *)v44;
              uint64_t v145 = 2048;
              *(void *)v146 = v43;
              unint64_t v45 = (char *)_os_log_send_and_compose_impl();
              v138 = OS_LOG_TYPE_ERROR;
              v137 = 0;
              if (__nwlog_fault(v45, &v138, &v137))
              {
                if (v138 == OS_LOG_TYPE_FAULT)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  unint64_t v46 = (os_log_s *)gLogObj;
                  uint64_t v47 = v138;
                  if (!os_log_type_enabled((os_log_t)gLogObj, v138)) {
                    goto LABEL_106;
                  }
                  *(_DWORD *)buf = 136446978;
                  v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
                  __int16 v141 = 2082;
                  uint64_t v142 = "unused_bytes";
                  __int16 v143 = 2048;
                  uint64_t v144 = (const char *)v44;
                  uint64_t v145 = 2048;
                  *(void *)v146 = v43;
                  size_t v48 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
                  goto LABEL_105;
                }

                if (!v137)
                {
                  unint64_t v46 = (os_log_s *)__nwlog_obj();
                  uint64_t v47 = v138;
                  if (!os_log_type_enabled(v46, v138)) {
                    goto LABEL_106;
                  }
                  *(_DWORD *)buf = 136446978;
                  v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
                  __int16 v141 = 2082;
                  uint64_t v142 = "unused_bytes";
                  __int16 v143 = 2048;
                  uint64_t v144 = (const char *)v44;
                  uint64_t v145 = 2048;
                  *(void *)v146 = v43;
                  size_t v48 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                  goto LABEL_105;
                }

                unint64_t v56 = (char *)__nw_create_backtrace_string();
                unint64_t v46 = (os_log_s *)__nwlog_obj();
                uint64_t v47 = v138;
                __int16 v57 = os_log_type_enabled(v46, v138);
                if (v56)
                {
                  if (v57)
                  {
                    *(_DWORD *)buf = 136447234;
                    v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
                    __int16 v141 = 2082;
                    uint64_t v142 = "unused_bytes";
                    __int16 v143 = 2048;
                    uint64_t v144 = (const char *)v44;
                    uint64_t v145 = 2048;
                    *(void *)v146 = v43;
                    *(_WORD *)&v146[8] = 2082;
                    v147 = v56;
                    _os_log_impl( &dword_181A5C000,  v46,  v47,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                  }

                  free(v56);
                  uint64_t v41 = v135;
                  goto LABEL_106;
                }

                uint64_t v41 = v135;
                if (v57)
                {
                  *(_DWORD *)buf = 136446978;
                  v140 = "nw_protocol_http1_finalize_output_frames_block_invoke";
                  __int16 v141 = 2082;
                  uint64_t v142 = "unused_bytes";
                  __int16 v143 = 2048;
                  uint64_t v144 = (const char *)v44;
                  uint64_t v145 = 2048;
                  *(void *)v146 = v43;
                  size_t v48 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
LABEL_105:
                  _os_log_impl(&dword_181A5C000, v46, v47, v48, buf, 0x2Au);
                }
              }

  if (v109) {
    free(v109);
  }
  p_uint64_t output_handler = v539;
LABEL_271:
  *(_DWORD *)os_log_type_t type = 0;
  if (nw_parameters_get_prohibit_cellular(v95)) {
    *(_DWORD *)type |= 4u;
  }
  os_log_type_t v127 = v95;
  BOOL v128 = (*(_WORD *)(*((void *)v67 + 13) + 100LL) & 1) == 0;

  if (!v128) {
    *(_DWORD *)type |= 8u;
  }
  v129 = v127;
  __int16 v130 = (*(_WORD *)(*((void *)v67 + 13) + 100LL) & 2) == 0;

  if (v130)
  {
    if (!*(_DWORD *)type) {
      goto LABEL_288;
    }
  }

  else
  {
    *(_DWORD *)type |= 0x10u;
  }

  if (setsockopt(*(_DWORD *)&a1[4].flow_id[12], 0xFFFF, 4225, type, 4u))
  {
    unint64_t v45 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    v131 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v553 = "nw_socket_set_common_sockopts";
      v554 = 2080;
      *(void *)v555 = (char *)a1 + 404;
      *(_WORD *)&v555[8] = 1024;
      *(_DWORD *)&v555[10] = v45;
      _os_log_impl( &dword_181A5C000,  v131,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt SO_RESTRICT_DENY_EXPENSIVE failed %{darwin.errno}d",  buf,  0x1Cu);
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v47 = (os_log_s *)gLogObj;
    if ((_DWORD)v45 == 22)
    {
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v553 = "nw_socket_set_common_sockopts";
        v554 = 1024;
        *(_DWORD *)v555 = 22;
        size_t v48 = "%{public}s setsockopt SO_RESTRICT_DENY_EXPENSIVE failed %{darwin.errno}d";
        goto LABEL_287;
      }

      goto LABEL_327;
    }

    *(_DWORD *)buf = 136446466;
    v553 = "nw_socket_set_common_sockopts";
    v554 = 1024;
    *(_DWORD *)v555 = v45;
    unsigned __int16 v51 = (char *)_os_log_send_and_compose_impl();
    v548[0] = OS_LOG_TYPE_ERROR;
    v547[0] = OS_LOG_TYPE_DEFAULT;
    if (v548[0] == OS_LOG_TYPE_FAULT)
    {
      unint64_t v52 = (os_log_s *)__nwlog_obj();
      uint64_t v53 = v548[0];
      if (!os_log_type_enabled(v52, v548[0])) {
        goto LABEL_325;
      }
      *(_DWORD *)buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      v554 = 1024;
      *(_DWORD *)v555 = v45;
      unint64_t v54 = "%{public}s setsockopt SO_RESTRICT_DENY_EXPENSIVE failed %{darwin.errno}d";
      goto LABEL_324;
    }

    if (v547[0] == OS_LOG_TYPE_DEFAULT)
    {
      unint64_t v52 = (os_log_s *)__nwlog_obj();
      uint64_t v53 = v548[0];
      if (!os_log_type_enabled(v52, v548[0])) {
        goto LABEL_325;
      }
      *(_DWORD *)buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      v554 = 1024;
      *(_DWORD *)v555 = v45;
      unint64_t v54 = "%{public}s setsockopt SO_RESTRICT_DENY_EXPENSIVE failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_324;
    }

    v138 = (char *)__nw_create_backtrace_string();
    unint64_t v52 = (os_log_s *)__nwlog_obj();
    uint64_t v53 = v548[0];
    os_log_type_t v139 = os_log_type_enabled(v52, v548[0]);
    if (!v138)
    {
      if (!v139) {
        goto LABEL_325;
      }
      *(_DWORD *)buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      v554 = 1024;
      *(_DWORD *)v555 = v45;
      unint64_t v54 = "%{public}s setsockopt SO_RESTRICT_DENY_EXPENSIVE failed %{darwin.errno}d, no backtrace";
      goto LABEL_324;
    }

    if (v139)
    {
      *(_DWORD *)buf = 136446722;
      v553 = "nw_socket_set_common_sockopts";
      v554 = 1024;
      *(_DWORD *)v555 = v45;
      *(_WORD *)&v555[4] = 2082;
      *(void *)&v555[6] = v138;
      _os_log_impl( &dword_181A5C000,  v52,  v53,  "%{public}s setsockopt SO_RESTRICT_DENY_EXPENSIVE failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
    }

    free(v138);
LABEL_325:
    if (!v51) {
      goto LABEL_327;
    }
LABEL_326:
    free(v51);
    goto LABEL_327;
  }

        goto LABEL_269;
      }

      if (!v148)
      {
        __nwlog_obj();
        int v124 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v129 = type;
        if (os_log_type_enabled(v124, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
          _os_log_impl( &dword_181A5C000,  v124,  v129,  "%{public}s called with null result, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_268;
      }

      char v126 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v124 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v127 = type;
      BOOL v128 = os_log_type_enabled(v124, type);
      if (!v126)
      {
        if (v128)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
          _os_log_impl(&dword_181A5C000, v124, v127, "%{public}s called with null result, no backtrace", buf, 0xCu);
        }

        goto LABEL_268;
      }

      if (v128)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = v126;
        _os_log_impl( &dword_181A5C000,  v124,  v127,  "%{public}s called with null result, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v126);
    }

                v175 = nghttp2_submit_data();
                if (!v175)
                {
                  if (((*v146 | (*((unsigned __int8 *)v146 + 2) << 16)) & 0x80000) == 0 && *((_BYTE *)v8 + 1537))
                  {
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                    }
                    v181 = (os_log_s *)gconnectionLogObj;
                    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
                    {
                      v182 = *(_DWORD *)(v142 + 176);
                      v183 = *(_DWORD *)(v142 + 180);
                      v184 = *(_DWORD *)(a4 + 52);
                      if (v184) {
                        v184 -= *(_DWORD *)(a4 + 56) + *(_DWORD *)(a4 + 60);
                      }
                      LODWORD(buf[0]) = 136447746;
                      *(void *)((char *)buf + 4) = "nw_http2_submit_data";
                      WORD2(buf[1]) = 2082;
                      *(void *)((char *)&buf[1] + 6) = v142 + 191;
                      HIWORD(buf[2]) = 2080;
                      *(void *)&v370 = " ";
                      WORD4(v370) = 1024;
                      *(_DWORD *)((char *)&v370 + 10) = v183;
                      HIWORD(v370) = 1024;
                      LODWORD(v371[0]) = v182;
                      WORD2(v371[0]) = 1024;
                      *(_DWORD *)((char *)v371 + 6) = v184;
                      WORD1(v371[1]) = 1024;
                      HIDWORD(v371[1]) = v143;
                      _os_log_impl( &dword_181A5C000,  v181,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> submitted %u bytes on stream %d",  (uint8_t *)buf,  0x38u);
                    }
                  }

                  return 1LL;
                }

                v176 = v175;
                if (v175 == -510)
                {
                  if (((*v146 | (*((unsigned __int8 *)v146 + 2) << 16)) & 0x80000) == 0)
                  {
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                    }
                    v185 = (os_log_s *)gconnectionLogObj;
                    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
                    {
                      v187 = *(_DWORD *)(v142 + 176);
                      v186 = *(_DWORD *)(v142 + 180);
                      LODWORD(buf[0]) = 136447490;
                      *(void *)((char *)buf + 4) = "nw_http2_submit_data";
                      WORD2(buf[1]) = 2082;
                      *(void *)((char *)&buf[1] + 6) = v142 + 191;
                      HIWORD(buf[2]) = 2080;
                      *(void *)&v370 = " ";
                      WORD4(v370) = 1024;
                      *(_DWORD *)((char *)&v370 + 10) = v186;
                      HIWORD(v370) = 1024;
                      LODWORD(v371[0]) = v187;
                      WORD2(v371[0]) = 1024;
                      *(_DWORD *)((char *)v371 + 6) = v143;
                      _os_log_impl( &dword_181A5C000,  v185,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:s%d> stream %d is closed, cannot send frames",  (uint8_t *)buf,  0x32u);
                    }
                  }

                  goto LABEL_637;
                }

                if (v175 == -529)
                {
                  if (((*v146 | (*((unsigned __int8 *)v146 + 2) << 16)) & 0x80000) == 0 && *((_BYTE *)v8 + 1537))
                  {
                    if (__nwlog_connection_log::onceToken != -1) {
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                    }
                    v177 = (os_log_s *)gconnectionLogObj;
                    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
                    {
                      v178 = *(_DWORD *)(v142 + 176);
                      v179 = *(_DWORD *)(v142 + 180);
                      v180 = *(_DWORD *)(a4 + 52);
                      if (v180) {
                        v180 -= *(_DWORD *)(a4 + 56) + *(_DWORD *)(a4 + 60);
                      }
                      LODWORD(buf[0]) = 136447746;
                      *(void *)((char *)buf + 4) = "nw_http2_submit_data";
                      WORD2(buf[1]) = 2082;
                      *(void *)((char *)&buf[1] + 6) = v142 + 191;
                      HIWORD(buf[2]) = 2080;
                      *(void *)&v370 = " ";
                      WORD4(v370) = 1024;
                      *(_DWORD *)((char *)&v370 + 10) = v179;
                      HIWORD(v370) = 1024;
                      LODWORD(v371[0]) = v178;
                      WORD2(v371[0]) = 1024;
                      *(_DWORD *)((char *)v371 + 6) = v143;
                      WORD1(v371[1]) = 1024;
                      HIDWORD(v371[1]) = v180;
                      _os_log_impl( &dword_181A5C000,  v177,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> already have data outgoing on stream %d, cannot send %u bytes",  (uint8_t *)buf,  0x38u);
                    }
                  }

void sub_181CCD538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_ws_ping_request *nw_ws_ping_request_create(void *a1, void *a2, void *a3)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  id v6 = a1;
  id v7 = a2;
  id v8 = a3;
  if (v6)
  {
    uint64_t v9 = objc_alloc(&OBJC_CLASS___NWConcrete_nw_ws_ping_request);
    id v10 = v6;
    id v11 = v7;
    id v12 = v8;
    if (!v9)
    {
LABEL_5:

      goto LABEL_6;
    }

    v35.os_log_type_t receiver = v9;
    v35.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_ws_ping_request;
    uint64_t v13 = (NWConcrete_nw_ws_ping_request *)objc_msgSendSuper2(&v35, sel_init);
    uint64_t v9 = v13;
    if (v13)
    {
      objc_storeStrong((id *)&v13->contents, a1);
      objc_storeStrong((id *)&v9->client_queue, a2);
      size_t v14 = _Block_copy(v12);
      id pong_handler = v9->pong_handler;
      v9->id pong_handler = v14;

      goto LABEL_5;
    }

    __nwlog_obj();
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    unint64_t v37 = "-[NWConcrete_nw_ws_ping_request initWithContents:queue:handler:]";
    unint64_t v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if ((__nwlog_fault(v22, &type, &v33) & 1) != 0)
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v37 = "-[NWConcrete_nw_ws_ping_request initWithContents:queue:handler:]";
          _os_log_impl(&dword_181A5C000, v23, v24, "%{public}s [super init] failed", buf, 0xCu);
        }
      }

      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v29 = type;
        BOOL v30 = os_log_type_enabled(v23, type);
        if (backtrace_string)
        {
          if (v30)
          {
            *(_DWORD *)buf = 136446466;
            unint64_t v37 = "-[NWConcrete_nw_ws_ping_request initWithContents:queue:handler:]";
            __int16 v38 = 2082;
            unint64_t v39 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v23,  v29,  "%{public}s [super init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }

        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v37 = "-[NWConcrete_nw_ws_ping_request initWithContents:queue:handler:]";
          _os_log_impl(&dword_181A5C000, v23, v29, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v37 = "-[NWConcrete_nw_ws_ping_request initWithContents:queue:handler:]";
          _os_log_impl( &dword_181A5C000,  v23,  v32,  "%{public}s [super init] failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181CCDE8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_ws_ping_request_copy_client_queue(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = v1[2];
    goto LABEL_3;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  unint64_t v16 = "nw_ws_ping_request_copy_client_queue";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_ws_ping_request_copy_client_queue";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null ping_request", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v16 = "nw_ws_ping_request_copy_client_queue";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null ping_request, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_ws_ping_request_copy_client_queue";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null ping_request, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_ws_ping_request_copy_client_queue";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null ping_request, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void *nw_ws_ping_request_copy_pong_handler(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = _Block_copy(v1[3]);
    goto LABEL_3;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  unint64_t v16 = "nw_ws_ping_request_copy_pong_handler";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_ws_ping_request_copy_pong_handler";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null ping_request", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v16 = "nw_ws_ping_request_copy_pong_handler";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null ping_request, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_ws_ping_request_copy_pong_handler";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null ping_request, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_ws_ping_request_copy_pong_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null ping_request, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_shoes_metadata_copy_remote_endpoint(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    id v1 = a1;
    id v2 = *((id *)v1 + 1);

    if (nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_shoes_get_definition(void)::proxy_definition))
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2000000000LL;
      uint64_t v18 = 0LL;
      v14[0] = MEMORY[0x1895F87A8];
      v14[1] = 0x40000000LL;
      v14[2] = __nw_shoes_metadata_copy_remote_endpoint_block_invoke;
      v14[3] = &unk_189BB56F8;
      v14[4] = buf;
      id v3 = (void **)*((void *)v1 + 4);
      if (v3)
      {
        __nw_shoes_metadata_copy_remote_endpoint_block_invoke((uint64_t)v14, v3);
        uint64_t v4 = *(void *)(*(void *)&buf[8] + 24LL);
      }

      else
      {
        uint64_t v4 = 0LL;
      }

      _Block_object_dispose(buf, 8);
      return v4;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_shoes_metadata_copy_remote_endpoint";
    id v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_shoes_metadata_copy_remote_endpoint";
        uint64_t v9 = "%{public}s metadata must be shoes";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    if (!v15)
    {
      id v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_shoes_metadata_copy_remote_endpoint";
        uint64_t v9 = "%{public}s metadata must be shoes, backtrace limit exceeded";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    id v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_shoes_metadata_copy_remote_endpoint";
        uint64_t v9 = "%{public}s metadata must be shoes, no backtrace";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_shoes_metadata_copy_remote_endpoint";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      os_log_type_t v12 = "%{public}s metadata must be shoes, dumping backtrace:%{public}s";
      goto LABEL_26;
    }

    goto LABEL_27;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_shoes_metadata_copy_remote_endpoint";
  id v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v15)
    {
      id v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_shoes_metadata_copy_remote_endpoint";
        uint64_t v9 = "%{public}s called with null metadata, backtrace limit exceeded";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    id v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_shoes_metadata_copy_remote_endpoint";
        uint64_t v9 = "%{public}s called with null metadata, no backtrace";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_shoes_metadata_copy_remote_endpoint";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      os_log_type_t v12 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
LABEL_26:
      _os_log_impl(&dword_181A5C000, v7, v8, v12, buf, 0x16u);
    }

uint64_t __nw_shoes_metadata_copy_remote_endpoint_block_invoke(uint64_t a1, void **a2)
{
  if (*a2) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = os_retain(*a2);
  }
  return 1LL;
}

BOOL ___ZL32nw_protocol_shoes_get_definitionv_block_invoke()
{
  if (nw_protocol_shoes_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_shoes_identifier::onceToken, &__block_literal_global_345);
  }
  nw_protocol_shoes_get_definition(void)::proxy_definition = (uint64_t)nw_protocol_definition_create_with_identifier((__int128 *)&g_shoes_protocol_identifier);
  nw_protocol_definition_set_metadata_allocator( (void *)nw_protocol_shoes_get_definition(void)::proxy_definition,  (uint64_t)nw_shoes_allocate_metadata,  (uint64_t)nw_shoes_deallocate_metadata);
  nw_protocol_definition_set_metadata_comparator( (void *)nw_protocol_shoes_get_definition(void)::proxy_definition,  (uint64_t)nw_shoes_compare_metadata);
  nw_protocol_definition_set_is_proxy((void *)nw_protocol_shoes_get_definition(void)::proxy_definition);
  return nw_protocol_register_handle( (uint64_t)&g_shoes_protocol_identifier,  (void *)nw_protocol_shoes_get_definition(void)::proxy_definition,  (uint64_t)nw_protocol_shoes_create,  0LL);
}

BOOL nw_shoes_allocate_metadata(nw_protocol_definition *a1)
{
  id v1 = calloc(1uLL, 0x10uLL);
  if (v1) {
    return (BOOL)v1;
  }
  id v3 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  uint64_t v4 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v4);
  if (!result)
  {
    free(v4);
    return (BOOL)v1;
  }

  __break(1u);
  return result;
}

void nw_shoes_deallocate_metadata(nw_protocol_definition *a1, void **a2)
{
  if (*a2)
  {
    os_release(*a2);
    *a2 = 0LL;
  }

  id v3 = a2[1];
  if (v3) {
    os_release(v3);
  }
  free(a2);
}

uint64_t nw_shoes_compare_metadata(uint64_t a1, void **a2, void **a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    if (a3) {
      return nw_endpoint_is_equal(*a2, *a3, 31LL);
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v15 = "nw_shoes_compare_metadata";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (__nwlog_fault(v4, &type, &v12))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v5 = (os_log_s *)__nwlog_obj();
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_32;
        }
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_shoes_compare_metadata";
        id v7 = "%{public}s called with null handle2";
        goto LABEL_31;
      }

      if (!v12)
      {
        char v5 = (os_log_s *)__nwlog_obj();
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_32;
        }
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_shoes_compare_metadata";
        id v7 = "%{public}s called with null handle2, backtrace limit exceeded";
        goto LABEL_31;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      char v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v11 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v15 = "nw_shoes_compare_metadata";
          __int16 v16 = 2082;
          __int16 v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null handle2, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v4) {
          return 0LL;
        }
        goto LABEL_33;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_shoes_compare_metadata";
        id v7 = "%{public}s called with null handle2, no backtrace";
LABEL_31:
        _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
      }
    }
  }

  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v15 = "nw_shoes_compare_metadata";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      char v15 = "nw_shoes_compare_metadata";
      id v7 = "%{public}s called with null handle1";
      goto LABEL_31;
    }

    if (!v12)
    {
      char v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      char v15 = "nw_shoes_compare_metadata";
      id v7 = "%{public}s called with null handle1, backtrace limit exceeded";
      goto LABEL_31;
    }

    os_log_type_t v8 = (char *)__nw_create_backtrace_string();
    char v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (!v8)
    {
      if (!v9) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      char v15 = "nw_shoes_compare_metadata";
      id v7 = "%{public}s called with null handle1, no backtrace";
      goto LABEL_31;
    }

    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      char v15 = "nw_shoes_compare_metadata";
      __int16 v16 = 2082;
      __int16 v17 = v8;
      _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null handle1, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v8);
  }

BOOL nw_protocol_shoes_create( const nw_protocol_identifier *a1, nw_object *a2, nw_endpoint *a3, nw_parameters *a4)
{
  char v5 = calloc(1uLL, 0xF0uLL);
  if (!v5)
  {
    os_log_type_t v8 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    BOOL v9 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v9);
    if (result)
    {
      __break(1u);
      return result;
    }

    free(v9);
  }

  __int128 v5[2] = &g_shoes_protocol_identifier;
  v5[3] = &g_shoes_protocol_callbacks;
  v5[5] = v5;
  if (a3) {
    os_log_type_t v6 = os_retain(a3);
  }
  else {
    os_log_type_t v6 = 0LL;
  }
  v5[13] = v6;
  return (BOOL)v5;
}

double __nw_protocol_shoes_identifier_block_invoke()
{
  unk_18C5A26A6 = 0LL;
  unk_18C5A269E = 0LL;
  word_18C5A26B6 = 0;
  unk_18C5A26AE = 0LL;
  strcpy((char *)&g_shoes_protocol_identifier, "shoes");
  *(void *)&double result = 0x100000005LL;
  qword_18C5A26B8 = 0x100000005LL;
  qword_18C5A2780 = (uint64_t)nw_protocol_default_output_finished;
  unk_18C5A2788 = nw_protocol_default_get_output_local;
  qword_18C5A27C0 = (uint64_t)nw_protocol_default_reset;
  unk_18C5A27C8 = nw_protocol_default_input_flush;
  qword_18C5A2770 = (uint64_t)nw_protocol_default_supports_external_data;
  unk_18C5A2778 = nw_protocol_default_input_finished;
  qword_18C5A2750 = (uint64_t)nw_protocol_default_register_notification;
  unk_18C5A2758 = nw_protocol_default_unregister_notification;
  qword_18C5A2760 = (uint64_t)nw_protocol_default_notify;
  unk_18C5A2768 = nw_protocol_default_updated_path;
  qword_18C5A27B0 = (uint64_t)nw_protocol_default_remove_listen_handler;
  unk_18C5A27B8 = nw_protocol_default_get_message_properties;
  g_shoes_protocol_callbacks = (uint64_t)nw_protocol_shoes_add_input_handler;
  *(void *)algn_18C5A26C8 = nw_protocol_shoes_remove_input_handler;
  qword_18C5A2700 = (uint64_t)nw_protocol_shoes_input_available;
  unk_18C5A2708 = nw_protocol_default_output_available;
  qword_18C5A2710 = (uint64_t)nw_protocol_shoes_get_input_frames;
  unk_18C5A2718 = nw_protocol_shoes_get_output_frames;
  qword_18C5A2720 = (uint64_t)nw_protocol_shoes_finalize_output_frames;
  unk_18C5A2728 = nw_protocol_default_link_state;
  qword_18C5A2790 = (uint64_t)nw_protocol_default_get_output_interface;
  unk_18C5A2798 = nw_protocol_shoes_waiting_for_output;
  qword_18C5A26D0 = (uint64_t)nw_protocol_default_replace_input_handler;
  unk_18C5A26D8 = nw_protocol_shoes_connect;
  qword_18C5A26E0 = (uint64_t)nw_protocol_default_disconnect;
  unk_18C5A26E8 = nw_protocol_shoes_connected;
  qword_18C5A26F0 = (uint64_t)nw_protocol_default_disconnected;
  unk_18C5A26F8 = nw_protocol_shoes_error;
  qword_18C5A2730 = (uint64_t)nw_protocol_shoes_get_parameters;
  unk_18C5A2738 = nw_protocol_shoes_get_path;
  qword_18C5A27A0 = (uint64_t)nw_protocol_shoes_copy_info;
  unk_18C5A27A8 = nw_protocol_default_add_listen_handler;
  qword_18C5A2740 = (uint64_t)nw_protocol_shoes_get_local_endpoint;
  unk_18C5A2748 = nw_protocol_shoes_get_remote_endpoint;
  return result;
}

BOOL nw_protocol_shoes_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v36 = "nw_protocol_shoes_add_input_handler";
    unint64_t v25 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v36 = "nw_protocol_shoes_add_input_handler";
        unint64_t v28 = "%{public}s called with null protocol";
LABEL_56:
        _os_log_impl(&dword_181A5C000, v26, v27, v28, buf, 0xCu);
      }

uint64_t nw_protocol_shoes_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v27 = "nw_protocol_shoes_remove_input_handler";
    char v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v24)
      {
        id v17 = (os_log_s *)__nwlog_obj();
        os_log_type_t v18 = type;
        if (!os_log_type_enabled(v17, type)) {
          goto LABEL_53;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_protocol_shoes_remove_input_handler";
        BOOL v19 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_52;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      id v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v21 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (!v21) {
          goto LABEL_53;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_protocol_shoes_remove_input_handler";
        BOOL v19 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_52;
      }

      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v27 = "nw_protocol_shoes_remove_input_handler";
        __int16 v28 = 2082;
        os_log_type_t v29 = backtrace_string;
        unint64_t v22 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_42:
        _os_log_impl(&dword_181A5C000, v17, v18, v22, buf, 0x16u);
      }

void nw_protocol_shoes_input_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v92 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v84 = "nw_protocol_shoes_input_available";
    unint64_t v67 = (char *)_os_log_send_and_compose_impl();
    v79[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (v79[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v68 = (os_log_s *)__nwlog_obj();
      os_log_type_t v69 = v79[0];
      if (!os_log_type_enabled(v68, v79[0])) {
        goto LABEL_153;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v84 = "nw_protocol_shoes_input_available";
      uint64_t v70 = "%{public}s called with null protocol";
      goto LABEL_152;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __int16 v68 = (os_log_s *)__nwlog_obj();
      os_log_type_t v69 = v79[0];
      if (!os_log_type_enabled(v68, v79[0])) {
        goto LABEL_153;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v84 = "nw_protocol_shoes_input_available";
      uint64_t v70 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_152;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v68 = (os_log_s *)__nwlog_obj();
    os_log_type_t v69 = v79[0];
    BOOL v72 = os_log_type_enabled(v68, v79[0]);
    if (!backtrace_string)
    {
      if (!v72) {
        goto LABEL_153;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v84 = "nw_protocol_shoes_input_available";
      uint64_t v70 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_152;
    }

    if (v72)
    {
      *(_DWORD *)buf = 136446466;
      unint64_t v84 = "nw_protocol_shoes_input_available";
      __int16 v85 = 2082;
      unint64_t v86 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v68,  v69,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_153:
    if (!v67) {
      return;
    }
    goto LABEL_154;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v84 = "nw_protocol_shoes_input_available";
    unint64_t v67 = (char *)_os_log_send_and_compose_impl();
    v79[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (v79[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v68 = (os_log_s *)__nwlog_obj();
      os_log_type_t v69 = v79[0];
      if (!os_log_type_enabled(v68, v79[0])) {
        goto LABEL_153;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v84 = "nw_protocol_shoes_input_available";
      uint64_t v70 = "%{public}s called with null shoes";
      goto LABEL_152;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __int16 v68 = (os_log_s *)__nwlog_obj();
      os_log_type_t v69 = v79[0];
      if (!os_log_type_enabled(v68, v79[0])) {
        goto LABEL_153;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v84 = "nw_protocol_shoes_input_available";
      uint64_t v70 = "%{public}s called with null shoes, backtrace limit exceeded";
      goto LABEL_152;
    }

    unint64_t v73 = (char *)__nw_create_backtrace_string();
    __int16 v68 = (os_log_s *)__nwlog_obj();
    os_log_type_t v69 = v79[0];
    BOOL v74 = os_log_type_enabled(v68, v79[0]);
    if (v73)
    {
      if (v74)
      {
        *(_DWORD *)buf = 136446466;
        unint64_t v84 = "nw_protocol_shoes_input_available";
        __int16 v85 = 2082;
        unint64_t v86 = v73;
        _os_log_impl( &dword_181A5C000,  v68,  v69,  "%{public}s called with null shoes, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v73);
      if (!v67) {
        return;
      }
LABEL_154:
      free(v67);
      return;
    }

    if (v74)
    {
      *(_DWORD *)buf = 136446210;
      unint64_t v84 = "nw_protocol_shoes_input_available";
      uint64_t v70 = "%{public}s called with null shoes, no backtrace";
LABEL_152:
      _os_log_impl(&dword_181A5C000, v68, v69, v70, buf, 0xCu);
      goto LABEL_153;
    }

    goto LABEL_153;
  }

  uint64_t default_input_handler = a1->default_input_handler;
  if (!default_input_handler)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v5 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      unint64_t v84 = "nw_protocol_shoes_input_available";
      __int16 v85 = 2082;
      unint64_t v86 = handle + 151;
      nw_endpoint_type_t v6 = "%{public}s %{public}s No input handler";
      id v7 = (os_log_s *)v5;
LABEL_91:
      os_log_type_t v55 = OS_LOG_TYPE_ERROR;
LABEL_92:
      uint32_t v56 = 22;
LABEL_93:
      _os_log_impl(&dword_181A5C000, v7, v55, v6, buf, v56);
    }

    return;
  }

  if (handle[150] == 6)
  {
    ((void (*)(void))default_input_handler->callbacks->input_available)();
    return;
  }

  uint64_t output_handler = a1->output_handler;
  *(void *)unint64_t v79 = 0LL;
  unint64_t v80 = v79;
  if (((unsigned int (*)(void))output_handler->callbacks->get_input_frames)())
  {
    uint64_t v9 = *(void *)v79;
    if (*(void *)v79)
    {
      do
      {
        BOOL v11 = (void *)(v9 + 32);
        uint64_t v12 = *(void *)(v9 + 32);
        if (v12 || *(void *)(v9 + 40))
        {
          if (!*(void *)(v9 + 112)) {
            goto LABEL_24;
          }
        }

        else
        {
          uint64_t v12 = 0LL;
          if (!*(void *)(v9 + 112)) {
            goto LABEL_24;
          }
        }

        if ((*(_WORD *)(v9 + 204) & 0x100) == 0
          || !g_channel_check_validity
          || g_channel_check_validity(v9, *(void *)(v9 + 88)))
        {
          int v14 = *(_DWORD *)(v9 + 52);
          uint64_t v13 = *(unsigned int *)(v9 + 56);
          if (v14) {
            int v15 = v14 - (v13 + *(_DWORD *)(v9 + 60));
          }
          else {
            int v15 = 0;
          }
          uint64_t v16 = *(void *)(v9 + 112) + v13;
          goto LABEL_25;
        }

uint64_t nw_protocol_shoes_get_input_frames( nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, uint64_t a5, nw_frame_array_s *a6)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned __int16 v25 = "nw_protocol_shoes_get_input_frames";
    int v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v22)
      {
        int v15 = (os_log_s *)__nwlog_obj();
        os_log_type_t v16 = type;
        if (!os_log_type_enabled(v15, type)) {
          goto LABEL_41;
        }
        *(_DWORD *)buf = 136446210;
        unsigned __int16 v25 = "nw_protocol_shoes_get_input_frames";
        id v17 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_40;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v19 = os_log_type_enabled(v15, type);
      if (!backtrace_string)
      {
        if (!v19) {
          goto LABEL_41;
        }
        *(_DWORD *)buf = 136446210;
        unsigned __int16 v25 = "nw_protocol_shoes_get_input_frames";
        id v17 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_40;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        unsigned __int16 v25 = "nw_protocol_shoes_get_input_frames";
        __int16 v26 = 2082;
        os_log_type_t v27 = backtrace_string;
        char v20 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_30:
        _os_log_impl(&dword_181A5C000, v15, v16, v20, buf, 0x16u);
      }

uint64_t nw_protocol_shoes_get_output_frames( nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v63 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v55 = "nw_protocol_shoes_get_output_frames";
    uint64_t v37 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v52 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v52)
      {
        __int16 v38 = (os_log_s *)__nwlog_obj();
        os_log_type_t v39 = type;
        if (!os_log_type_enabled(v38, type)) {
          goto LABEL_82;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v55 = "nw_protocol_shoes_get_output_frames";
        nw_endpoint_type_t v40 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_81;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v38 = (os_log_s *)__nwlog_obj();
      os_log_type_t v39 = type;
      BOOL v42 = os_log_type_enabled(v38, type);
      if (!backtrace_string)
      {
        if (!v42) {
          goto LABEL_82;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v55 = "nw_protocol_shoes_get_output_frames";
        nw_endpoint_type_t v40 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_81;
      }

      if (v42)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v55 = "nw_protocol_shoes_get_output_frames";
        __int16 v56 = 2082;
        uint64_t v57 = backtrace_string;
        unint64_t v43 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_67:
        _os_log_impl(&dword_181A5C000, v38, v39, v43, buf, 0x16u);
      }

uint64_t nw_protocol_shoes_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    size_t v23 = "nw_protocol_shoes_finalize_output_frames";
    unsigned int v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      size_t v23 = "nw_protocol_shoes_finalize_output_frames";
      int v15 = "%{public}s called with null protocol";
      goto LABEL_51;
    }

    if (!v20)
    {
      uint64_t v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      size_t v23 = "nw_protocol_shoes_finalize_output_frames";
      int v15 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_51;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v13 = (os_log_s *)__nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v17 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (!v17) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      size_t v23 = "nw_protocol_shoes_finalize_output_frames";
      int v15 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_51;
    }

    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      size_t v23 = "nw_protocol_shoes_finalize_output_frames";
      __int16 v24 = 2082;
      unsigned __int16 v25 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_52:
    if (!v12) {
      return 0LL;
    }
LABEL_53:
    free(v12);
    return 0LL;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    size_t v23 = "nw_protocol_shoes_finalize_output_frames";
    unsigned int v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      size_t v23 = "nw_protocol_shoes_finalize_output_frames";
      int v15 = "%{public}s called with null shoes";
      goto LABEL_51;
    }

    if (!v20)
    {
      uint64_t v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      size_t v23 = "nw_protocol_shoes_finalize_output_frames";
      int v15 = "%{public}s called with null shoes, backtrace limit exceeded";
      goto LABEL_51;
    }

    uint64_t v18 = (char *)__nw_create_backtrace_string();
    uint64_t v13 = (os_log_s *)__nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v19 = os_log_type_enabled(v13, type);
    if (v18)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        size_t v23 = "nw_protocol_shoes_finalize_output_frames";
        __int16 v24 = 2082;
        unsigned __int16 v25 = v18;
        _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s called with null shoes, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v18);
      if (!v12) {
        return 0LL;
      }
      goto LABEL_53;
    }

    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      size_t v23 = "nw_protocol_shoes_finalize_output_frames";
      int v15 = "%{public}s called with null shoes, no backtrace";
LABEL_51:
      _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0xCu);
      goto LABEL_52;
    }

    goto LABEL_52;
  }

  int v3 = *((unsigned __int8 *)handle + 150);
  if (v3 == 6) {
    return (*(uint64_t (**)(void))(*(void *)(handle[4] + 24LL) + 96LL))();
  }
  if (v3 == 4)
  {
    tqh_first = a2->tqh_first;
    unsigned int v5 = *((_DWORD *)handle + 35);
    if (a2->tqh_first)
    {
      while (v5)
      {
        uint64_t v8 = (uint64_t)tqh_first;
        tqh_first = (nw_frame *)*((void *)tqh_first + 4);
        if (!tqh_first && !*(void *)(v8 + 40)) {
          tqh_first = 0LL;
        }
        int v9 = *(_DWORD *)(v8 + 52);
        if (v9)
        {
          unsigned int v10 = v9 - (*(_DWORD *)(v8 + 56) + *(_DWORD *)(v8 + 60));
          if (v10 < v5) {
            unsigned int v7 = 0;
          }
          else {
            unsigned int v7 = v5;
          }
          if (v10 < v5 && v9 != 0) {
            unsigned int v7 = v9 - (*(_DWORD *)(v8 + 56) + *(_DWORD *)(v8 + 60));
          }
        }

        else
        {
          unsigned int v7 = 0;
        }

        nw_frame_unclaim(v8, (uint64_t)a2, v7, 0);
        unsigned int v5 = *((_DWORD *)handle + 35) - v7;
        *((_DWORD *)handle + 35) = v5;
        if (!tqh_first) {
          goto LABEL_6;
        }
      }

      goto LABEL_7;
    }

BOOL nw_protocol_shoes_waiting_for_output(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = a1->handle;
    if (handle) {
      return handle[150] == 2;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v15 = "nw_protocol_shoes_waiting_for_output";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        int v15 = "nw_protocol_shoes_waiting_for_output";
        unsigned int v7 = "%{public}s called with null shoes";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (!v12)
    {
      unsigned int v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        int v15 = "nw_protocol_shoes_waiting_for_output";
        unsigned int v7 = "%{public}s called with null shoes, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    unsigned int v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v11 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        int v15 = "nw_protocol_shoes_waiting_for_output";
        unsigned int v7 = "%{public}s called with null shoes, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      int v15 = "nw_protocol_shoes_waiting_for_output";
      __int16 v16 = 2082;
      BOOL v17 = backtrace_string;
      unsigned int v10 = "%{public}s called with null shoes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }

    goto LABEL_22;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v15 = "nw_protocol_shoes_waiting_for_output";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v12)
    {
      unsigned int v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        int v15 = "nw_protocol_shoes_waiting_for_output";
        unsigned int v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    unsigned int v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        int v15 = "nw_protocol_shoes_waiting_for_output";
        unsigned int v7 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      int v15 = "nw_protocol_shoes_waiting_for_output";
      __int16 v16 = 2082;
      BOOL v17 = backtrace_string;
      unsigned int v10 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v5, v6, v10, buf, 0x16u);
    }

uint64_t nw_protocol_shoes_connect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v17 = "nw_protocol_shoes_connect";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v17 = "nw_protocol_shoes_connect";
      BOOL v9 = "%{public}s called with null protocol";
    }

    else
    {
      if (!v14)
      {
        unsigned int v7 = (os_log_s *)__nwlog_obj();
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_36;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_protocol_shoes_connect";
        BOOL v9 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_35;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_protocol_shoes_connect";
          __int16 v18 = 2082;
          BOOL v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v6) {
          return 0LL;
        }
        goto LABEL_37;
      }

      if (!v11) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v17 = "nw_protocol_shoes_connect";
      BOOL v9 = "%{public}s called with null protocol, no backtrace";
    }

void nw_protocol_shoes_connected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v103 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v91 = "nw_protocol_shoes_connected";
    char v52 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v102) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (v102 == 17)
    {
      os_log_type_t v53 = (os_log_s *)__nwlog_obj();
      os_log_type_t v54 = v102;
      if (!os_log_type_enabled(v53, (os_log_type_t)v102)) {
        goto LABEL_106;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v91 = "nw_protocol_shoes_connected";
      os_log_type_t v55 = "%{public}s called with null protocol";
    }

    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v53 = (os_log_s *)__nwlog_obj();
      os_log_type_t v54 = v102;
      BOOL v57 = os_log_type_enabled(v53, (os_log_type_t)v102);
      if (backtrace_string)
      {
        if (v57)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v91 = "nw_protocol_shoes_connected";
          __int16 v92 = 2082;
          uint64_t v93 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v53,  v54,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_106:
        if (!v52) {
          return;
        }
LABEL_107:
        free(v52);
        return;
      }

      if (!v57) {
        goto LABEL_106;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v91 = "nw_protocol_shoes_connected";
      os_log_type_t v55 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      os_log_type_t v53 = (os_log_s *)__nwlog_obj();
      os_log_type_t v54 = v102;
      if (!os_log_type_enabled(v53, (os_log_type_t)v102)) {
        goto LABEL_106;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v91 = "nw_protocol_shoes_connected";
      os_log_type_t v55 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

void sub_181CD3FC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181CD3FE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_shoes_error(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v22 = "nw_protocol_shoes_error";
    unsigned int v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v12 = (os_log_s *)__nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      char v22 = "nw_protocol_shoes_error";
      char v14 = "%{public}s called with null protocol";
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v12 = (os_log_s *)__nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          char v22 = "nw_protocol_shoes_error";
          __int16 v23 = 2082;
          __int16 v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v11) {
          return;
        }
LABEL_41:
        free(v11);
        return;
      }

      if (!v16) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      char v22 = "nw_protocol_shoes_error";
      char v14 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      char v12 = (os_log_s *)__nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      char v22 = "nw_protocol_shoes_error";
      char v14 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

void *nw_protocol_shoes_get_parameters(nw_protocol *a1)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_shoes_get_parameters";
    unsigned int v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_51;
      }
      *(_DWORD *)buf = 136446210;
      char v19 = "nw_protocol_shoes_get_parameters";
      id v10 = "%{public}s called with null protocol";
LABEL_50:
      _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
      goto LABEL_51;
    }

    if (!v16)
    {
      BOOL v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        char v19 = "nw_protocol_shoes_get_parameters";
        id v10 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_50;
      }

      goto LABEL_51;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v8 = (os_log_s *)__nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v12 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        char v19 = "nw_protocol_shoes_get_parameters";
        id v10 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_50;
      }

      goto LABEL_51;
    }

    if (!v12) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446466;
    char v19 = "nw_protocol_shoes_get_parameters";
    __int16 v20 = 2082;
    uint64_t v21 = backtrace_string;
    os_log_type_t v13 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_36:
    _os_log_impl(&dword_181A5C000, v8, v9, v13, buf, 0x16u);
    goto LABEL_37;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_shoes_get_parameters";
    unsigned int v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_51;
      }
      *(_DWORD *)buf = 136446210;
      char v19 = "nw_protocol_shoes_get_parameters";
      id v10 = "%{public}s called with null shoes";
      goto LABEL_50;
    }

    if (!v16)
    {
      BOOL v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        char v19 = "nw_protocol_shoes_get_parameters";
        id v10 = "%{public}s called with null shoes, backtrace limit exceeded";
        goto LABEL_50;
      }

      goto LABEL_51;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v8 = (os_log_s *)__nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v14 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        char v19 = "nw_protocol_shoes_get_parameters";
        id v10 = "%{public}s called with null shoes, no backtrace";
        goto LABEL_50;
      }

      goto LABEL_51;
    }

    if (!v14) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446466;
    char v19 = "nw_protocol_shoes_get_parameters";
    __int16 v20 = 2082;
    uint64_t v21 = backtrace_string;
    os_log_type_t v13 = "%{public}s called with null shoes, dumping backtrace:%{public}s";
    goto LABEL_36;
  }

  uint64_t default_input_handler = a1->default_input_handler;
  if (default_input_handler)
  {
    int v3 = (void *)handle[9];
    if (!v3)
    {
      uint64_t v4 = (void *)((uint64_t (*)(void))default_input_handler->callbacks->get_parameters)();
      int v3 = v4;
      if ((*((_BYTE *)handle + 235) & 1) != 0)
      {
        if (!nw_parameters_get_tfo(v4))
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          unsigned int v5 = (os_log_s *)gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446466;
            char v19 = "nw_protocol_shoes_get_parameters";
            __int16 v20 = 2082;
            uint64_t v21 = (char *)handle + 151;
            _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s SHOES enabling TFO on parameters since we are using TLS",  buf,  0x16u);
          }

          nw_parameters_set_tfo(v3, 1);
        }

        nw_parameters_set_fast_open_force_enable(v3, 1);
      }
    }

    return v3;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v19 = "nw_protocol_shoes_get_parameters";
  unsigned int v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v16)
    {
      BOOL v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        char v19 = "nw_protocol_shoes_get_parameters";
        id v10 = "%{public}s called with null protocol->default_input_handler, backtrace limit exceeded";
        goto LABEL_50;
      }

      goto LABEL_51;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v8 = (os_log_s *)__nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v15 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        char v19 = "nw_protocol_shoes_get_parameters";
        id v10 = "%{public}s called with null protocol->default_input_handler, no backtrace";
        goto LABEL_50;
      }

      goto LABEL_51;
    }

    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      char v19 = "nw_protocol_shoes_get_parameters";
      __int16 v20 = 2082;
      uint64_t v21 = backtrace_string;
      os_log_type_t v13 = "%{public}s called with null protocol->default_input_handler, dumping backtrace:%{public}s";
      goto LABEL_36;
    }

void *nw_protocol_shoes_get_path(nw_protocol *a1)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v20 = "nw_protocol_shoes_get_path";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v20 = "nw_protocol_shoes_get_path";
      unsigned int v11 = "%{public}s called with null protocol";
LABEL_51:
      _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
      goto LABEL_52;
    }

    if (!v17)
    {
      os_log_type_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "nw_protocol_shoes_get_path";
        unsigned int v11 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_51;
      }

      goto LABEL_52;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v13 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "nw_protocol_shoes_get_path";
        unsigned int v11 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_51;
      }

      goto LABEL_52;
    }

    if (!v13) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v20 = "nw_protocol_shoes_get_path";
    __int16 v21 = 2082;
    uint64_t v22 = backtrace_string;
    BOOL v14 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_37:
    _os_log_impl(&dword_181A5C000, v9, v10, v14, buf, 0x16u);
    goto LABEL_38;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v20 = "nw_protocol_shoes_get_path";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v20 = "nw_protocol_shoes_get_path";
      unsigned int v11 = "%{public}s called with null shoes";
      goto LABEL_51;
    }

    if (!v17)
    {
      os_log_type_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "nw_protocol_shoes_get_path";
        unsigned int v11 = "%{public}s called with null shoes, backtrace limit exceeded";
        goto LABEL_51;
      }

      goto LABEL_52;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v15 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "nw_protocol_shoes_get_path";
        unsigned int v11 = "%{public}s called with null shoes, no backtrace";
        goto LABEL_51;
      }

      goto LABEL_52;
    }

    if (!v15) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v20 = "nw_protocol_shoes_get_path";
    __int16 v21 = 2082;
    uint64_t v22 = backtrace_string;
    BOOL v14 = "%{public}s called with null shoes, dumping backtrace:%{public}s";
    goto LABEL_37;
  }

  uint64_t default_input_handler = a1->default_input_handler;
  if (default_input_handler)
  {
    int v3 = (void *)((uint64_t (*)(void))default_input_handler->callbacks->get_path)();
    id v4 = nw_path_copy_parameters(v3);
    unsigned int v5 = v4;
    if ((handle[235] & 1) != 0)
    {
      if (!nw_parameters_get_tfo(v4))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v6 = (os_log_s *)gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          __int16 v20 = "nw_protocol_shoes_get_path";
          __int16 v21 = 2082;
          uint64_t v22 = handle + 151;
          _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s SHOES enabling TFO on path parameters since we are using TLS",  buf,  0x16u);
        }

        nw_parameters_set_tfo(v5, 1);
      }

      nw_parameters_set_fast_open_force_enable(v5, 1);
    }

    if (v5) {
      os_release(v5);
    }
    return v3;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v20 = "nw_protocol_shoes_get_path";
  BOOL v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v17)
    {
      os_log_type_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "nw_protocol_shoes_get_path";
        unsigned int v11 = "%{public}s called with null protocol->default_input_handler, backtrace limit exceeded";
        goto LABEL_51;
      }

      goto LABEL_52;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v16 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "nw_protocol_shoes_get_path";
        unsigned int v11 = "%{public}s called with null protocol->default_input_handler, no backtrace";
        goto LABEL_51;
      }

      goto LABEL_52;
    }

    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v20 = "nw_protocol_shoes_get_path";
      __int16 v21 = 2082;
      uint64_t v22 = backtrace_string;
      BOOL v14 = "%{public}s called with null protocol->default_input_handler, dumping backtrace:%{public}s";
      goto LABEL_37;
    }

uint64_t nw_protocol_shoes_copy_info(uint64_t a1, int a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v20 = "nw_protocol_shoes_copy_info";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "nw_protocol_shoes_copy_info";
        BOOL v12 = "%{public}s called with null protocol";
LABEL_40:
        _os_log_impl(&dword_181A5C000, v10, v11, v12, buf, 0xCu);
      }

uint64_t nw_protocol_shoes_get_remote_endpoint(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = a1->handle;
    if (handle) {
      return handle[13];
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v14 = "nw_protocol_shoes_get_remote_endpoint";
    int v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_shoes_get_remote_endpoint";
        uint64_t v6 = "%{public}s called with null shoes";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (!v11)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_shoes_get_remote_endpoint";
        uint64_t v6 = "%{public}s called with null shoes, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_shoes_get_remote_endpoint";
        uint64_t v6 = "%{public}s called with null shoes, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v14 = "nw_protocol_shoes_get_remote_endpoint";
      __int16 v15 = 2082;
      BOOL v16 = backtrace_string;
      os_log_type_t v9 = "%{public}s called with null shoes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }

    goto LABEL_22;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v14 = "nw_protocol_shoes_get_remote_endpoint";
  int v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_shoes_get_remote_endpoint";
        uint64_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_shoes_get_remote_endpoint";
        uint64_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v14 = "nw_protocol_shoes_get_remote_endpoint";
      __int16 v15 = 2082;
      BOOL v16 = backtrace_string;
      os_log_type_t v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v4, v5, v9, buf, 0x16u);
    }

uint64_t nw_protocol_shoes_get_local_endpoint(nw_protocol *a1)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_shoes_get_local_endpoint";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        char v19 = "nw_protocol_shoes_get_local_endpoint";
        char v11 = "%{public}s called with null protocol";
LABEL_46:
        _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
      }

uint64_t nw_protocol_shoes_send_request_inner(nw_protocol *a1)
{
  uint64_t v66 = *MEMORY[0x1895F89C0];
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)os_log_type_t v55 = 136446210;
    *(void *)&v55[4] = "nw_protocol_shoes_send_request_inner";
    BOOL v37 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    v58[0] = 0;
    if (__nwlog_fault(v37, buf, v58))
    {
      if (buf[0] == 17)
      {
        __int16 v38 = (os_log_s *)__nwlog_obj();
        os_log_type_t v39 = buf[0];
        if (os_log_type_enabled(v38, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v55 = 136446210;
          *(void *)&v55[4] = "nw_protocol_shoes_send_request_inner";
          BOOL v40 = "%{public}s called with null shoes";
LABEL_76:
          _os_log_impl(&dword_181A5C000, v38, v39, v40, v55, 0xCu);
        }
      }

      else if (v58[0])
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __int16 v38 = (os_log_s *)__nwlog_obj();
        os_log_type_t v39 = buf[0];
        BOOL v46 = os_log_type_enabled(v38, (os_log_type_t)buf[0]);
        if (backtrace_string)
        {
          if (v46)
          {
            *(_DWORD *)os_log_type_t v55 = 136446466;
            *(void *)&v55[4] = "nw_protocol_shoes_send_request_inner";
            *(_WORD *)&v55[12] = 2082;
            *(void *)&v55[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v38,  v39,  "%{public}s called with null shoes, dumping backtrace:%{public}s",  v55,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_77;
        }

        if (v46)
        {
          *(_DWORD *)os_log_type_t v55 = 136446210;
          *(void *)&v55[4] = "nw_protocol_shoes_send_request_inner";
          BOOL v40 = "%{public}s called with null shoes, no backtrace";
          goto LABEL_76;
        }
      }

      else
      {
        __int16 v38 = (os_log_s *)__nwlog_obj();
        os_log_type_t v39 = buf[0];
        if (os_log_type_enabled(v38, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)os_log_type_t v55 = 136446210;
          *(void *)&v55[4] = "nw_protocol_shoes_send_request_inner";
          BOOL v40 = "%{public}s called with null shoes, backtrace limit exceeded";
          goto LABEL_76;
        }
      }
    }

BOOL nw_shoes_create_request(uint64_t a1)
{
  uint64_t v108 = *MEMORY[0x1895F89C0];
  nw_endpoint_t v2 = (nw_endpoint_t)nw_endpoint_copy_proxy_original_endpoint(*(void **)(a1 + 96));
  if (!v2) {
    nw_endpoint_t v2 = *(nw_endpoint_t *)(a1 + 96);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  char v3 = &qword_18C45F000;
  uint64_t v4 = (os_log_s *)gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    __int16 v100 = "nw_shoes_create_request";
    __int16 v101 = 2082;
    uint64_t v102 = a1 + 151;
    __int16 v103 = 2112;
    uint64_t v104 = (const char *)v2;
    _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s Sending request for endpoint %@",  buf,  0x20u);
  }

  nw_endpoint_type_t type = nw_endpoint_get_type(v2);
  uint64_t v95 = 0LL;
  __int16 v96 = &v95;
  uint64_t v97 = 0x2000000000LL;
  char v98 = 0;
  int v94 = 0;
  __int16 v93 = 0;
  uint64_t v6 = (void *)(*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 48) + 24LL) + 112LL))();
  nw_endpoint_type_t v90 = type;
  if (!v6)
  {
    unsigned int v22 = 0;
    uint64_t v23 = *(void **)(a1 + 112);
    char v24 = 1;
    int v25 = 261;
    if (!v23)
    {
      __s = 0LL;
      unsigned int v26 = 0;
      int v86 = 0;
      unsigned int alternate_port = 0;
      char v88 = 1;
      int v21 = 0;
      goto LABEL_53;
    }

    int v21 = 0;
    unsigned int v26 = 0;
    int v86 = 0;
    unsigned int alternate_port = 0;
    string_ptr = xpc_string_get_string_ptr(v23);
    if (string_ptr) {
      goto LABEL_51;
    }
    goto LABEL_43;
  }

  unsigned int v7 = v6;
  unsigned int v8 = *(_DWORD *)(v7[13] + 72LL);

  if (v8) {
    int v9 = 268;
  }
  else {
    int v9 = 261;
  }
  uint64_t v10 = v7;
  BOOL v11 = (*(_WORD *)(v7[13] + 108LL) & 0x200) == 0;

  if (!v11)
  {
    unsigned int v17 = 0;
    goto LABEL_25;
  }

  uint64_t v12 = v10;
  BOOL v13 = (*(_WORD *)(v7[13] + 100LL) & 1) == 0;

  if (!v13) {
    *((_BYTE *)v96 + 24) |= 0x80u;
  }
  uint64_t v14 = v12;
  BOOL v15 = (*(_WORD *)(v7[13] + 100LL) & 2) == 0;

  if (!v15) {
    *((_BYTE *)v96 + 24) |= 0x10u;
  }
  iterate_block[0] = MEMORY[0x1895F87A8];
  iterate_block[1] = 0x40000000LL;
  iterate_block[2] = ___ZL23nw_shoes_create_requestP18_nw_protocol_shoes_block_invoke;
  iterate_block[3] = &unk_189BB58D0;
  iterate_block[4] = &v95;
  nw_parameters_iterate_prohibited_interface_types((nw_parameters_t)v14, iterate_block);
  unsigned int v16 = *(unsigned __int16 *)(a1 + 144);
  unsigned int v17 = __rev16(v16);
  __int16 v93 = v17;
  if (v16) {
    *((_BYTE *)v96 + 24) |= 6u;
  }
  uint64_t v18 = v14;
  int v19 = *(_DWORD *)(v7[13] + 92LL);

  if (!v19) {
    goto LABEL_25;
  }
  next_hop_required_interface_nw_endpoint_type_t type = nw_parameters_get_next_hop_required_interface_type(v18);
  if (next_hop_required_interface_type == 3)
  {
    int v21 = 4;
    goto LABEL_31;
  }

  if (next_hop_required_interface_type == 2)
  {
    int v21 = 2;
    goto LABEL_31;
  }

  if (next_hop_required_interface_type != 1)
  {
LABEL_25:
    int v21 = 0;
    if (*((_BYTE *)v96 + 24)) {
      int v25 = v9 + 4;
    }
    else {
      int v25 = v9;
    }
    goto LABEL_35;
  }

  int v21 = 1;
LABEL_31:
  int v94 = v21;
  if (*((_BYTE *)v96 + 24)) {
    int v29 = v9 + 4;
  }
  else {
    int v29 = v9;
  }
  int v25 = v29 + 7;
LABEL_35:
  int v30 = v10;
  BOOL v31 = *(_DWORD *)(v7[13] + 103LL) == 0;

  if (v31)
  {
    unsigned int alternate_port = 0;
    int v86 = 0;
    char v24 = 1;
    unsigned int v26 = v8;
    uint64_t v32 = *(void **)(a1 + 112);
    if (!v32) {
      goto LABEL_46;
    }
    goto LABEL_42;
  }

  unsigned int v26 = v8;
  if (nw_shoes_is_multipath_allowed(void)::isAllowed != 1)
  {
    unsigned int alternate_port = 0;
    int v86 = 0;
    char v24 = 1;
    uint64_t v32 = *(void **)(a1 + 112);
    if (!v32) {
      goto LABEL_46;
    }
LABEL_42:
    unsigned int v22 = v17;
    char v3 = &qword_18C45F000;
    nw_endpoint_type_t type = v90;
    string_ptr = xpc_string_get_string_ptr(v32);
    if (string_ptr) {
      goto LABEL_51;
    }
    goto LABEL_43;
  }

  unsigned int alternate_port = nw_endpoint_get_alternate_port(v2);
  char v24 = 0;
  v25 += 6;
  int v86 = 2;
  uint64_t v32 = *(void **)(a1 + 112);
  if (v32) {
    goto LABEL_42;
  }
LABEL_46:
  char v33 = v30;
  int v34 = (const char *)v33[14];

  if (v34)
  {
    string_ptr = v34;
    unsigned int v22 = v17;
    char v3 = &qword_18C45F000;
    unsigned int v26 = v8;
    nw_endpoint_type_t type = v90;
    goto LABEL_51;
  }

  unsigned int v26 = v8;
  if (nw_utilities_get_self_bundle_id::onceToken != -1) {
    dispatch_once(&nw_utilities_get_self_bundle_id::onceToken, &__block_literal_global_7);
  }
  unsigned int v22 = v17;
  nw_endpoint_type_t type = v90;
  string_ptr = (const char *)nw_utilities_get_self_bundle_id::bundle_identifier_string;
  char v3 = &qword_18C45F000;
  if (nw_utilities_get_self_bundle_id::bundle_identifier_string)
  {
LABEL_51:
    __s = (char *)string_ptr;
    char v88 = 0;
    v25 += strlen(string_ptr) + 3;
    if (!v22) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }

uint64_t ___ZL22nw_protocol_shoes_sendP11nw_protocolPhj_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

uint64_t ___ZL23nw_shoes_create_requestP18_nw_protocol_shoes_block_invoke(uint64_t a1, int a2)
{
  if (a2 == 1)
  {
    char v2 = 32;
    goto LABEL_5;
  }

  if (a2 == 2)
  {
    char v2 = 64;
LABEL_5:
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) |= v2;
  }

  return 1LL;
}

void ___ZL29nw_shoes_is_multipath_allowedv_block_invoke()
{
  uint64_t v0 = (void *)nw_utilities_copy_local_entitlement_value("com.apple.developer.networking.multipath_extended");
  if (v0)
  {
    id v1 = v0;
    if (object_getClass(v0) == (Class)MEMORY[0x1895F9228] && xpc_BOOL_get_value(v1)) {
      nw_shoes_is_multipath_allowed(void)::isAllowed = 1;
    }
    xpc_release(v1);
  }

BOOL nw_shoes_read_into_buffer(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  v32[2] = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void *)(a1 + 120);
  if (!v4) {
    return 0LL;
  }
  unsigned int v7 = 0;
  if (a2)
  {
    uint64_t v8 = a2 + a4;
    while (1)
    {
      if (!v4) {
        goto LABEL_44;
      }
      uint64_t v9 = *(void *)(v4 + 32);
      if (v9 || *(void *)(v4 + 40))
      {
        if (*(void *)(v4 + 112)) {
          goto LABEL_10;
        }
      }

      else
      {
        uint64_t v9 = 0LL;
        if (*(void *)(v4 + 112))
        {
LABEL_10:
          if ((*(_WORD *)(v4 + 204) & 0x100) == 0
            || !g_channel_check_validity
            || g_channel_check_validity(v4, *(void *)(v4 + 88)))
          {
            int v10 = *(_DWORD *)(v4 + 52);
            if (v10)
            {
              uint64_t v11 = *(unsigned int *)(v4 + 56);
              unsigned int v12 = v10 - (v11 + *(_DWORD *)(v4 + 60));
              if (v12)
              {
                if (v12 >= a3 - v7) {
                  size_t v13 = a3 - v7;
                }
                else {
                  size_t v13 = v12;
                }
                memcpy((void *)(v8 + v7), (const void *)(*(void *)(v4 + 112) + v11), v13);
                *(_DWORD *)(a1 + 136) += v13;
                v7 += v13;
                nw_frame_claim(v4, v14, v13, 0);
              }
            }
          }
        }
      }

      int v15 = *(_DWORD *)(v4 + 52);
      if (!v15 || v15 == *(_DWORD *)(v4 + 56) + *(_DWORD *)(v4 + 60)) {
        uint64_t v4 = v9;
      }
      if (v7 == a3) {
        goto LABEL_43;
      }
    }
  }

  while (v4)
  {
    uint64_t v16 = *(void *)(v4 + 32);
    if (v16 || *(void *)(v4 + 40))
    {
      if (*(void *)(v4 + 112)) {
        goto LABEL_30;
      }
    }

    else
    {
      uint64_t v16 = 0LL;
      if (*(void *)(v4 + 112))
      {
LABEL_30:
        if ((*(_WORD *)(v4 + 204) & 0x100) == 0
          || !g_channel_check_validity
          || g_channel_check_validity(v4, *(void *)(v4 + 88)))
        {
          int v17 = *(_DWORD *)(v4 + 52);
          if (v17)
          {
            unsigned int v18 = v17 - (*(_DWORD *)(v4 + 56) + *(_DWORD *)(v4 + 60));
            if (v18)
            {
              if (v18 >= a3 - v7) {
                int v19 = a3 - v7;
              }
              else {
                int v19 = v18;
              }
              *(_DWORD *)(a1 + 136) += v19;
              v7 += v19;
              nw_frame_claim(v4, a2, v19, 0);
            }
          }
        }
      }
    }

    int v20 = *(_DWORD *)(v4 + 52);
    if (!v20 || v20 == *(_DWORD *)(v4 + 56) + *(_DWORD *)(v4 + 60)) {
      uint64_t v4 = v16;
    }
    if (v7 == a3)
    {
LABEL_43:
      unsigned int v7 = a3;
      break;
    }
  }

void nw_shoes_read_reply_tlvs(uint64_t a1, unsigned __int8 *a2, unsigned int a3, char a4)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a2 && a3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v8 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446722;
      unsigned int v12 = "nw_shoes_read_reply_tlvs";
      __int16 v13 = 2082;
      uint64_t v14 = a1 + 151;
      __int16 v15 = 1024;
      unsigned int v16 = a3;
      _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s received shoes tlv(s) with total tlv buffer length %u",  buf,  0x1Cu);
    }

    v9[0] = MEMORY[0x1895F87A8];
    v9[1] = 0x40000000LL;
    v9[2] = ___ZL24nw_shoes_read_reply_tlvsP18_nw_protocol_shoesPhtb_block_invoke;
    v9[3] = &__block_descriptor_tmp_33;
    void v9[4] = a1;
    char v10 = a4;
    nw_shoes_tlv_parser(a2, a3, v9);
  }

void ___ZL24nw_shoes_read_reply_tlvsP18_nw_protocol_shoesPhtb_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v92 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v4 = (os_log_s *)gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5) {
      uint64_t v6 = (const char *)(v5 + 151);
    }
    else {
      uint64_t v6 = "";
    }
    unint64_t v7 = *a2;
    if (v7 > 9) {
      uint64_t v8 = "unknown";
    }
    else {
      uint64_t v8 = off_189BB5958[v7];
    }
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_shoes_read_reply_tlvs_block_invoke";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = v6;
    *(_WORD *)&buf[22] = 2082;
    *(void *)&__int128 v87 = v8;
    _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s processing shoes tlv: %{public}s",  buf,  0x20u);
  }

  int v9 = *a2;
  if (v9 == 8)
  {
    unsigned int v36 = *(unsigned __int16 *)(a2 + 1);
    unsigned int v37 = __rev16(v36);
    int v38 = a2[4];
    if (v38 == 2 && v36 != 4096)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v39 = (os_log_s *)gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
        return;
      }
      uint64_t v40 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_shoes_read_reply_tlvs_block_invoke";
      if (v40) {
        size_t v41 = (const char *)(v40 + 151);
      }
      else {
        size_t v41 = "";
      }
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = v41;
      *(_WORD *)&buf[22] = 1024;
      LODWORD(v87) = v37;
      WORD2(v87) = 2048;
      *(void *)((char *)&v87 + 6) = 16LL;
      BOOL v42 = "%{public}s %{public}s Invalid TLV length (%u != %zu)";
      goto LABEL_86;
    }

    if (v38 == 30 && v36 != 7168)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v39 = (os_log_s *)gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
        return;
      }
      uint64_t v48 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_shoes_read_reply_tlvs_block_invoke";
      if (v48) {
        size_t v49 = (const char *)(v48 + 151);
      }
      else {
        size_t v49 = "";
      }
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = v49;
      *(_WORD *)&buf[22] = 1024;
      LODWORD(v87) = v37;
      WORD2(v87) = 2048;
      *(void *)((char *)&v87 + 6) = 28LL;
      BOOL v42 = "%{public}s %{public}s Invalid TLV length (%u != %zu)";
      goto LABEL_86;
    }

    nw_endpoint_t address = nw_endpoint_create_address((const sockaddr *)(a2 + 3));
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v55 = (os_log_s *)gLogObj;
    if (address)
    {
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v56 = *(void *)(a1 + 32);
        if (v56) {
          unsigned int v57 = (const char *)(v56 + 151);
        }
        else {
          unsigned int v57 = "";
        }
        description = nw_endpoint_get_description(address);
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_shoes_read_reply_tlvs_block_invoke";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = v57;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&__int128 v87 = description;
        _os_log_impl( &dword_181A5C000,  v55,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s detected resolved_endpoint endpoint for outer connection: %s",  buf,  0x20u);
      }

      BOOL v59 = *(void **)(*(void *)(a1 + 32) + 88LL);
      if (!v59)
      {
        *(void *)(*(void *)(a1 + 32) + 88LL) = nw_shoes_create_metadata();
        BOOL v59 = *(void **)(*(void *)(a1 + 32) + 88LL);
        if (!v59)
        {
          __nwlog_obj();
          *(_DWORD *)char v88 = 136446210;
          char v89 = "nw_shoes_metadata_add_resolved_endpoint";
          unsigned __int16 v73 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v84 = 0;
          if (type == OS_LOG_TYPE_FAULT)
          {
            BOOL v74 = (os_log_s *)__nwlog_obj();
            os_log_type_t v75 = type;
            if (!os_log_type_enabled(v74, type)) {
              goto LABEL_178;
            }
            *(_DWORD *)char v88 = 136446210;
            char v89 = "nw_shoes_metadata_add_resolved_endpoint";
            __int16 v76 = "%{public}s called with null metadata";
            goto LABEL_177;
          }

          if (!v84)
          {
            BOOL v74 = (os_log_s *)__nwlog_obj();
            os_log_type_t v75 = type;
            if (!os_log_type_enabled(v74, type)) {
              goto LABEL_178;
            }
            *(_DWORD *)char v88 = 136446210;
            char v89 = "nw_shoes_metadata_add_resolved_endpoint";
            __int16 v76 = "%{public}s called with null metadata, backtrace limit exceeded";
            goto LABEL_177;
          }

          backtrace_string = (char *)__nw_create_backtrace_string();
          BOOL v74 = (os_log_s *)__nwlog_obj();
          os_log_type_t v75 = type;
          BOOL v81 = os_log_type_enabled(v74, type);
          if (!backtrace_string)
          {
            if (!v81) {
              goto LABEL_178;
            }
            *(_DWORD *)char v88 = 136446210;
            char v89 = "nw_shoes_metadata_add_resolved_endpoint";
            __int16 v76 = "%{public}s called with null metadata, no backtrace";
            goto LABEL_177;
          }

          if (v81)
          {
            *(_DWORD *)char v88 = 136446466;
            char v89 = "nw_shoes_metadata_add_resolved_endpoint";
            __int16 v90 = 2082;
            uint64_t v91 = backtrace_string;
            unsigned int v79 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
            goto LABEL_153;
          }

          goto LABEL_154;
        }
      }

      id v60 = v59;
      id v61 = *((id *)v60 + 1);

      if (nw_protocol_definition_is_equal_unsafe( (uint64_t)v61,  nw_protocol_shoes_get_definition(void)::proxy_definition))
      {
        *(void *)buf = MEMORY[0x1895F87A8];
        *(void *)&buf[8] = 0x40000000LL;
        *(void *)&buf[16] = ___ZL39nw_shoes_metadata_add_resolved_endpointP20nw_protocol_metadataP11nw_endpoint_block_invoke;
        *(void *)&__int128 v87 = &__block_descriptor_tmp_40;
        *((void *)&v87 + 1) = address;
        uint64_t v62 = *((void *)v60 + 4);
        if (v62) {
          ___ZL39nw_shoes_metadata_add_resolved_endpointP20nw_protocol_metadataP11nw_endpoint_block_invoke( (uint64_t)buf,  v62);
        }
        goto LABEL_113;
      }

      __nwlog_obj();
      *(_DWORD *)char v88 = 136446210;
      char v89 = "nw_shoes_metadata_add_resolved_endpoint";
      unsigned __int16 v73 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v84 = 0;
      if (__nwlog_fault(v73, &type, &v84))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          BOOL v74 = (os_log_s *)__nwlog_obj();
          os_log_type_t v75 = type;
          if (!os_log_type_enabled(v74, type)) {
            goto LABEL_178;
          }
          *(_DWORD *)char v88 = 136446210;
          char v89 = "nw_shoes_metadata_add_resolved_endpoint";
          __int16 v76 = "%{public}s metadata must be shoes";
LABEL_177:
          _os_log_impl(&dword_181A5C000, v74, v75, v76, v88, 0xCu);
          goto LABEL_178;
        }

        if (!v84)
        {
          BOOL v74 = (os_log_s *)__nwlog_obj();
          os_log_type_t v75 = type;
          if (!os_log_type_enabled(v74, type)) {
            goto LABEL_178;
          }
          *(_DWORD *)char v88 = 136446210;
          char v89 = "nw_shoes_metadata_add_resolved_endpoint";
          __int16 v76 = "%{public}s metadata must be shoes, backtrace limit exceeded";
          goto LABEL_177;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v74 = (os_log_s *)__nwlog_obj();
        os_log_type_t v75 = type;
        BOOL v78 = os_log_type_enabled(v74, type);
        if (!backtrace_string)
        {
          if (!v78) {
            goto LABEL_178;
          }
          *(_DWORD *)char v88 = 136446210;
          char v89 = "nw_shoes_metadata_add_resolved_endpoint";
          __int16 v76 = "%{public}s metadata must be shoes, no backtrace";
          goto LABEL_177;
        }

        if (v78)
        {
          *(_DWORD *)char v88 = 136446466;
          char v89 = "nw_shoes_metadata_add_resolved_endpoint";
          __int16 v90 = 2082;
          uint64_t v91 = backtrace_string;
          unsigned int v79 = "%{public}s metadata must be shoes, dumping backtrace:%{public}s";
LABEL_153:
          _os_log_impl(&dword_181A5C000, v74, v75, v79, v88, 0x16u);
        }

void nw_shoes_notify_interface_denied(const char *a1, double a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  double client = gotLoadHelper_x8__network_usage_policy_create_client(a2);
  if (!*(void *)(v3 + 24))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v15 = "nw_shoes_notify_interface_denied";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_21;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v15 = "nw_shoes_notify_interface_denied";
      unint64_t v7 = "%{public}s called with null is_network_usage_policy_available()";
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v11 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v15 = "nw_shoes_notify_interface_denied";
          __int16 v16 = 2082;
          uint64_t v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null is_network_usage_policy_available(), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (!v11) {
        goto LABEL_21;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v15 = "nw_shoes_notify_interface_denied";
      unint64_t v7 = "%{public}s called with null is_network_usage_policy_available(), no backtrace";
    }

    else
    {
      uint64_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_21;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v15 = "nw_shoes_notify_interface_denied";
      unint64_t v7 = "%{public}s called with null is_network_usage_policy_available(), backtrace limit exceeded";
    }

id *nw_shoes_create_metadata(void)
{
  return nw_protocol_metadata_create_singleton((void *)nw_protocol_shoes_get_definition(void)::proxy_definition);
}

uint64_t ___ZL37nw_shoes_metadata_set_remote_endpointP20nw_protocol_metadataP11nw_endpoint_block_invoke( uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3) {
    uint64_t v3 = os_retain(v3);
  }
  *a2 = v3;
  return 1LL;
}

uint64_t ___ZL39nw_shoes_metadata_add_resolved_endpointP20nw_protocol_metadataP11nw_endpoint_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (!v3)
  {
    uint64_t v3 = nw_array_create();
    *(void *)(a2 + 8) = v3;
  }

  nw_array_append(v3, *(void **)(a1 + 32));
  return 1LL;
}

uint64_t ___ZL40nw_shoes_get_network_usage_policy_clientv_block_invoke(double a1)
{
  uint64_t result = network_usage_policy_create_client_delayInitStub(a1);
  nw_shoes_get_network_usage_policy_client(void)::shared_policy_double client = result;
  return result;
}

void nw_shoes_metadata_enumerate_resolved_endpoints(void *a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_shoes_metadata_enumerate_resolved_endpoints";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v19 = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (v19 == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = v19;
      if (!os_log_type_enabled(v9, v19)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_shoes_metadata_enumerate_resolved_endpoints";
      BOOL v11 = "%{public}s called with null metadata";
    }

    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = v19;
      BOOL v13 = os_log_type_enabled(v9, v19);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_shoes_metadata_enumerate_resolved_endpoints";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8) {
          return;
        }
LABEL_39:
        free(v8);
        return;
      }

      if (!v13) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_shoes_metadata_enumerate_resolved_endpoints";
      BOOL v11 = "%{public}s called with null metadata, no backtrace";
    }

    else
    {
      BOOL v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = v19;
      if (!os_log_type_enabled(v9, v19)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_shoes_metadata_enumerate_resolved_endpoints";
      BOOL v11 = "%{public}s called with null metadata, backtrace limit exceeded";
    }

uint64_t __nw_shoes_metadata_enumerate_resolved_endpoints_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a2 + 8);
  if (v3) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = os_retain(v3);
  }
  return 1LL;
}

uint64_t __nw_shoes_metadata_enumerate_resolved_endpoints_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void nw_protocol_shoes_parameters_set_udp(void *a1)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    xpc_object_t v2 = xpc_BOOL_create(1);
    nw_parameters_set_protocol_value(a1, "UDP", v2);
    if (v2) {
      xpc_release(v2);
    }
    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v12 = "nw_protocol_shoes_parameters_set_udp";
  id v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      char v12 = "nw_protocol_shoes_parameters_set_udp";
      uint64_t v6 = "%{public}s called with null protocol_parameters";
      goto LABEL_17;
    }

    if (!v9)
    {
      id v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      char v12 = "nw_protocol_shoes_parameters_set_udp";
      uint64_t v6 = "%{public}s called with null protocol_parameters, backtrace limit exceeded";
      goto LABEL_17;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    id v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446466;
        char v12 = "nw_protocol_shoes_parameters_set_udp";
        __int16 v13 = 2082;
        id v14 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_18;
    }

    if (v8)
    {
      *(_DWORD *)buf = 136446210;
      char v12 = "nw_protocol_shoes_parameters_set_udp";
      uint64_t v6 = "%{public}s called with null protocol_parameters, no backtrace";
LABEL_17:
      _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
    }
  }

void nw_protocol_shoes_parameters_set_udp_associate_supported(void *a1)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    xpc_object_t v2 = xpc_BOOL_create(1);
    nw_parameters_set_protocol_value(a1, "UDPAssociateSupported", v2);
    if (v2) {
      xpc_release(v2);
    }
    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v12 = "nw_protocol_shoes_parameters_set_udp_associate_supported";
  id v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      char v12 = "nw_protocol_shoes_parameters_set_udp_associate_supported";
      uint64_t v6 = "%{public}s called with null protocol_parameters";
      goto LABEL_17;
    }

    if (!v9)
    {
      id v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      char v12 = "nw_protocol_shoes_parameters_set_udp_associate_supported";
      uint64_t v6 = "%{public}s called with null protocol_parameters, backtrace limit exceeded";
      goto LABEL_17;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    id v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446466;
        char v12 = "nw_protocol_shoes_parameters_set_udp_associate_supported";
        __int16 v13 = 2082;
        id v14 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_18;
    }

    if (v8)
    {
      *(_DWORD *)buf = 136446210;
      char v12 = "nw_protocol_shoes_parameters_set_udp_associate_supported";
      uint64_t v6 = "%{public}s called with null protocol_parameters, no backtrace";
LABEL_17:
      _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
    }
  }

void nw_protocol_shoes_parameters_set_fixed_bundle_id(void *a1, char *string)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    xpc_object_t v3 = xpc_string_create(string);
    nw_parameters_set_protocol_value(a1, "FixedBundleID", v3);
    if (v3) {
      xpc_release(v3);
    }
    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v13 = "nw_protocol_shoes_parameters_set_fixed_bundle_id";
  id v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v13 = "nw_protocol_shoes_parameters_set_fixed_bundle_id";
      unint64_t v7 = "%{public}s called with null protocol_parameters";
      goto LABEL_17;
    }

    if (!v10)
    {
      os_log_type_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v13 = "nw_protocol_shoes_parameters_set_fixed_bundle_id";
      unint64_t v7 = "%{public}s called with null protocol_parameters, backtrace limit exceeded";
      goto LABEL_17;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v13 = "nw_protocol_shoes_parameters_set_fixed_bundle_id";
        __int16 v14 = 2082;
        uint64_t v15 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_18;
    }

    if (v9)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v13 = "nw_protocol_shoes_parameters_set_fixed_bundle_id";
      unint64_t v7 = "%{public}s called with null protocol_parameters, no backtrace";
LABEL_17:
      _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
    }
  }

void *nw_protocol_shoes_copy_definition()
{
  uint64_t result = (void *)nw_protocol_shoes_get_definition(void)::proxy_definition;
  return result;
}

BOOL nw_protocol_http_sniffing_create(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  os_log_type_t v6 = (char *)calloc(1uLL, 0x228uLL);
  if (!v6)
  {
    uint64_t v15 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    os_log_type_t v19 = "strict_calloc";
    __int16 v20 = 2048;
    uint64_t v21 = 1LL;
    __int16 v22 = 2048;
    uint64_t v23 = 552LL;
    uint64_t v16 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v16);
    if (result)
    {
      __break(1u);
      return result;
    }

    free(v16);
  }

  bzero(v6, 0x228uLL);
  if (gLogDatapath)
  {
    uint64_t v17 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      os_log_type_t v19 = "nw_protocol_http_sniffing_create";
      __int16 v20 = 2082;
      uint64_t v21 = (uint64_t)(v6 + 114);
      __int16 v22 = 2080;
      uint64_t v23 = (uint64_t)" ";
      _os_log_impl(&dword_181A5C000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
    }
  }

  if (nw_protocol_http_sniffing_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_sniffing_identifier::onceToken, &__block_literal_global_498);
  }
  *((void *)v6 + 2) = &nw_protocol_http_sniffing_identifier::protocol_identifier;
  *((void *)v6 + 3) = &nw_protocol_http_sniffing_get_callbacks(void)::protocol_callbacks;
  *((void *)v6 + 5) = v6;
  if (a3) {
    a3 = os_retain(a3);
  }
  char v7 = v6[472];
  if ((v7 & 1) != 0)
  {
    BOOL v8 = (void *)*((void *)v6 + 58);
    if (v8)
    {
      os_release(v8);
      char v7 = v6[472];
    }
  }

  *((void *)v6 + 58) = a3;
  v6[472] = v7 | 1;
  if (a4)
  {
    BOOL v9 = os_retain(a4);
    char v10 = v6[488];
    if ((v10 & 1) == 0) {
      goto LABEL_18;
    }
LABEL_16:
    BOOL v11 = (void *)*((void *)v6 + 60);
    if (v11)
    {
      os_release(v11);
      char v10 = v6[488];
    }

    goto LABEL_18;
  }

  BOOL v9 = 0LL;
  char v10 = v6[488];
  if ((v10 & 1) != 0) {
    goto LABEL_16;
  }
LABEL_18:
  *((void *)v6 + 60) = v9;
  v6[488] = v10 | 1;
  v6[548] |= 1u;
  *((void *)v6 + 54) = 0LL;
  *((void *)v6 + 55) = v6 + 432;
  if (nw_protocol_copy_http_sniffing_definition_onceToken[0] != -1) {
    dispatch_once(nw_protocol_copy_http_sniffing_definition_onceToken, &__block_literal_global_35);
  }
  id v12 = (id)nw_protocol_copy_http_sniffing_definition_http_sniffing_definition;
  __int16 v13 = nw_parameters_copy_protocol_options_for_definition(a4, v12);
  *((void *)v6 + 8) = v6 + 104;
  nw_protocol_plugin_name_set_callbacks((uint64_t)v6, (uint64_t)nw_protocol_http_sniffing_create::$_0::__invoke);
  *((void *)v6 + 10) = v6 + 200;
  nw_protocol_plugin_reset_set_callbacks((uint64_t)v6, (uint64_t)nw_protocol_http_sniffing_create::$_1::__invoke);
  *((void *)v6 + 11) = v6 + 216;
  nw_protocol_plugin_retry_set_callbacks( (uint64_t)v6,  (uint64_t)nw_protocol_http_sniffing_create::$_2::__invoke,  (uint64_t)nw_protocol_http_sniffing_create::$_3::__invoke,  (uint64_t)nw_protocol_http_sniffing_create::$_4::__invoke,  (uint64_t)nw_protocol_http_sniffing_create::$_5::__invoke);
  if (v13) {
    os_release(v13);
  }
  if (v12) {
    os_release(v12);
  }
  return (BOOL)v6;
}

uint64_t nw_protocol_http_sniffing_create::$_0::__invoke( nw_protocol_http_sniffing_create::$_0 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1LL;
}

void nw_protocol_http_sniffing_create::$_1::__invoke( nw_protocol_http_sniffing_create::$_1 *this, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (!this)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v17 = "operator()";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = "operator()";
      BOOL v9 = "%{public}s called with null protocol";
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "operator()";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_36:
        if (!v6) {
          return;
        }
LABEL_37:
        free(v6);
        return;
      }

      if (!v11) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = "operator()";
      BOOL v9 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      char v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = "operator()";
      BOOL v9 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

uint64_t nw_protocol_http_sniffing_create::$_2::__invoke( nw_protocol_http_sniffing_create::$_2 *this, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (this)
  {
    uint64_t v3 = *((void *)this + 5);
    if (v3)
    {
      uint64_t result = 0LL;
      *(_BYTE *)(v3 + 548) |= 2u;
      return result;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v16 = "operator()";
    os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "operator()";
        os_log_type_t v8 = "%{public}s called with null http_sniffing";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (!v13)
    {
      os_log_type_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "operator()";
        os_log_type_t v8 = "%{public}s called with null http_sniffing, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v6 = (os_log_s *)__nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v12 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "operator()";
        os_log_type_t v8 = "%{public}s called with null http_sniffing, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v16 = "operator()";
      __int16 v17 = 2082;
      __int16 v18 = backtrace_string;
      BOOL v11 = "%{public}s called with null http_sniffing, dumping backtrace:%{public}s";
      goto LABEL_21;
    }

    goto LABEL_22;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v16 = "operator()";
  os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v13)
    {
      os_log_type_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "operator()";
        os_log_type_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v6 = (os_log_s *)__nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v10 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "operator()";
        os_log_type_t v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v16 = "operator()";
      __int16 v17 = 2082;
      __int16 v18 = backtrace_string;
      BOOL v11 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v6, v7, v11, buf, 0x16u);
    }

uint64_t nw_protocol_http_sniffing_create::$_3::__invoke( nw_protocol_http_sniffing_create::$_3 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1LL;
}

uint64_t nw_protocol_http_sniffing_create::$_4::__invoke( nw_protocol_http_sniffing_create::$_4 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1LL;
}

uint64_t nw_protocol_http_sniffing_create::$_5::__invoke( nw_protocol_http_sniffing_create::$_5 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1LL;
}

void ___ZL39nw_protocol_http_sniffing_get_callbacksv_block_invoke()
{
  qword_18C593000 = (uint64_t)nw_protocol_common_get_parameters;
  unk_18C593008 = nw_protocol_common_get_path;
  qword_18C593010 = (uint64_t)nw_protocol_common_get_local_endpoint;
  unk_18C593018 = nw_protocol_common_get_remote_endpoint;
  qword_18C592FA0 = (uint64_t)nw_protocol_common_replace_input_handler;
  unk_18C592FA8 = nw_protocol_common_connect;
  qword_18C592FB0 = (uint64_t)nw_protocol_common_disconnect;
  unk_18C592FB8 = nw_protocol_common_connected;
  qword_18C592FD0 = (uint64_t)nw_protocol_common_input_available;
  unk_18C592FD8 = nw_protocol_common_output_available;
  qword_18C593050 = (uint64_t)nw_protocol_common_output_finished;
  unk_18C593058 = nw_protocol_common_get_output_local_endpoint;
  qword_18C593098 = (uint64_t)nw_protocol_common_input_flush;
  qword_18C592FC0 = (uint64_t)nw_protocol_common_disconnected;
  unk_18C592FC8 = nw_protocol_common_error;
  qword_18C593088 = (uint64_t)nw_protocol_common_get_message_properties;
  unk_18C593090 = nw_protocol_common_reset;
  qword_18C593070 = (uint64_t)nw_protocol_common_copy_info;
  qword_18C593040 = (uint64_t)nw_protocol_common_supports_external_data;
  unk_18C593048 = nw_protocol_common_input_finished;
  qword_18C593060 = (uint64_t)nw_protocol_common_get_output_interface;
  unk_18C593068 = nw_protocol_common_waiting_for_output;
  qword_18C593020 = (uint64_t)nw_protocol_common_register_notification;
  unk_18C593028 = nw_protocol_common_unregister_notification;
  qword_18C593030 = (uint64_t)nw_protocol_common_notify;
  unk_18C593038 = nw_protocol_common_updated_path;
  qword_18C592FF0 = (uint64_t)nw_protocol_common_finalize_output_frames;
  unk_18C592FF8 = nw_protocol_common_link_state;
  qword_18C592FE0 = (uint64_t)nw_protocol_http_sniffing_get_input_frames;
  unk_18C592FE8 = nw_protocol_common_get_output_frames;
  nw_protocol_http_sniffing_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_common_add_input_handler;
  *(void *)algn_18C592F98 = nw_protocol_http_sniffing_remove_input_handler;
}

uint64_t nw_protocol_http_sniffing_get_input_frames( nw_protocol *a1, nw_protocol *a2, uint64_t a3, uint64_t a4, uint64_t a5, nw_frame_array_s *a6)
{
  uint64_t v69 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_sniffing_get_input_frames";
    unsigned int v44 = (char *)_os_log_send_and_compose_impl();
    v62[0] = 16;
    __p.__r_.__value_.__s.__data_[0] = 0;
    if (v62[0] != 17)
    {
      if (!__p.__r_.__value_.__s.__data_[0])
      {
        int v45 = (os_log_s *)__nwlog_obj();
        os_log_type_t v46 = v62[0];
        if (!os_log_type_enabled(v45, (os_log_type_t)v62[0])) {
          goto LABEL_105;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_sniffing_get_input_frames";
        BOOL v47 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_104;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = v62[0];
      BOOL v50 = os_log_type_enabled(v45, (os_log_type_t)v62[0]);
      if (!backtrace_string)
      {
        if (!v50) {
          goto LABEL_105;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_sniffing_get_input_frames";
        BOOL v47 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_104;
      }

      if (v50)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_sniffing_get_input_frames";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        unsigned int v51 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_92:
        _os_log_impl(&dword_181A5C000, v45, v46, v51, buf, 0x16u);
      }

uint64_t nw_protocol_http_sniffing_remove_input_handler(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      v15[0] = MEMORY[0x1895F87A8];
      v15[1] = 0x40000000LL;
      v15[2] = ___ZL46nw_protocol_http_sniffing_remove_input_handlerP11nw_protocolS0_b_block_invoke;
      v15[3] = &__block_descriptor_tmp_147;
      v15[4] = handle;
      v13[0] = MEMORY[0x1895F87A8];
      v13[1] = 0x40000000LL;
      v13[2] = ___ZL46nw_protocol_http_sniffing_remove_input_handlerP11nw_protocolS0_b_block_invoke_148;
      v13[3] = &__block_descriptor_tmp_149;
      char v14 = a3;
      v13[4] = handle;
      return nw_protocol_common_remove_input_handler_with_cleanup_blocks(a1, a2, a3, (uint64_t)v15, (uint64_t)v13);
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_protocol_http_sniffing_remove_input_handler";
    os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v17 = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = v17;
      if (os_log_type_enabled(v6, v17))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_http_sniffing_remove_input_handler";
        os_log_type_t v8 = "%{public}s called with null http_sniffing";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (!v16)
    {
      os_log_type_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = v17;
      if (os_log_type_enabled(v6, v17))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_http_sniffing_remove_input_handler";
        os_log_type_t v8 = "%{public}s called with null http_sniffing, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v6 = (os_log_s *)__nwlog_obj();
    os_log_type_t v7 = v17;
    BOOL v12 = os_log_type_enabled(v6, v17);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_http_sniffing_remove_input_handler";
        os_log_type_t v8 = "%{public}s called with null http_sniffing, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v19 = "nw_protocol_http_sniffing_remove_input_handler";
      __int16 v20 = 2082;
      uint64_t v21 = backtrace_string;
      BOOL v11 = "%{public}s called with null http_sniffing, dumping backtrace:%{public}s";
      goto LABEL_21;
    }

    goto LABEL_22;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v19 = "nw_protocol_http_sniffing_remove_input_handler";
  os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v17 = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (v17 != OS_LOG_TYPE_FAULT)
  {
    if (!v16)
    {
      os_log_type_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = v17;
      if (os_log_type_enabled(v6, v17))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_http_sniffing_remove_input_handler";
        os_log_type_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v6 = (os_log_s *)__nwlog_obj();
    os_log_type_t v7 = v17;
    BOOL v10 = os_log_type_enabled(v6, v17);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_protocol_http_sniffing_remove_input_handler";
        os_log_type_t v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v19 = "nw_protocol_http_sniffing_remove_input_handler";
      __int16 v20 = 2082;
      uint64_t v21 = backtrace_string;
      BOOL v11 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v6, v7, v11, buf, 0x16u);
    }

void ___ZL46nw_protocol_http_sniffing_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(_BYTE *)(v2 + 336);
  if ((v3 & 1) != 0)
  {
    char v4 = *(const void **)(v2 + 328);
    if (v4)
    {
      _Block_release(v4);
      char v3 = *(_BYTE *)(v2 + 336);
    }
  }

  *(void *)(v2 + 328) = 0LL;
  *(_BYTE *)(v2 + 336) = v3 | 1;
  char v5 = *(_BYTE *)(v2 + 384);
  if ((v5 & 1) != 0)
  {
    os_log_type_t v6 = *(const void **)(v2 + 376);
    if (v6)
    {
      _Block_release(v6);
      char v5 = *(_BYTE *)(v2 + 384);
    }
  }

  *(void *)(v2 + 376) = 0LL;
  *(_BYTE *)(v2 + 384) = v5 | 1;
  uint64_t v7 = *(void *)(a1 + 32);
  if ((*(_BYTE *)(v7 + 198) & 1) == 0)
  {
    if (!gLogDatapath) {
      goto LABEL_9;
    }
    BOOL v11 = (os_log_s *)__nwlog_obj();
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);
    uint64_t v7 = *(void *)(a1 + 32);
    if (v12)
    {
      *(_DWORD *)char v14 = 136446722;
      *(void *)&v14[4] = "nw_protocol_http_sniffing_remove_input_handler_block_invoke";
      *(_WORD *)&v14[12] = 2082;
      *(void *)&v14[14] = v7 + 114;
      *(_WORD *)&v14[22] = 2080;
      BOOL v15 = " ";
      _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sfinalizing pending input frames",  v14,  0x20u);
      uint64_t v7 = *(void *)(a1 + 32);
    }
  }

  if (gLogDatapath)
  {
    unsigned int v13 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v19 = "nw_protocol_finalize_temp_frame_array";
      _os_log_impl(&dword_181A5C000, v13, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
    }
  }

void ___ZL46nw_protocol_http_sniffing_remove_input_handlerP11nw_protocolS0_b_block_invoke_148(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  if (!*(_BYTE *)(a1 + 40)) {
    return;
  }
  uint64_t v1 = *(void *)(a1 + 32);
  if ((*(_BYTE *)(v1 + 198) & 1) == 0)
  {
    if (gLogDatapath)
    {
      os_log_type_t v6 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        int v7 = 136446722;
        uint64_t v8 = "nw_http_sniffing_destroy";
        __int16 v9 = 2082;
        uint64_t v10 = v1 + 114;
        __int16 v11 = 2080;
        BOOL v12 = " ";
        _os_log_impl(&dword_181A5C000, v6, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", (uint8_t *)&v7, 0x20u);
      }
    }
  }

  uint64_t v2 = *(void **)(v1 + 520);
  if (v2)
  {
    *(void *)(v1 + 528) = v2;
    operator delete(v2);
  }

  if (*(char *)(v1 + 519) < 0)
  {
    operator delete(*(void **)(v1 + 496));
    if ((*(_BYTE *)(v1 + 488) & 1) == 0) {
      goto LABEL_12;
    }
LABEL_10:
    char v3 = *(void **)(v1 + 480);
    if (v3) {
      os_release(v3);
    }
    goto LABEL_12;
  }

  if ((*(_BYTE *)(v1 + 488) & 1) != 0) {
    goto LABEL_10;
  }
LABEL_12:
  *(void *)(v1 + 480) = 0LL;
  if ((*(_BYTE *)(v1 + 472) & 1) != 0)
  {
    char v4 = *(void **)(v1 + 464);
    if (v4) {
      os_release(v4);
    }
  }

  *(void *)(v1 + 464) = 0LL;
  if ((*(_BYTE *)(v1 + 456) & 1) != 0)
  {
    char v5 = *(void **)(v1 + 448);
    if (v5) {
      os_release(v5);
    }
  }

  *(void *)(v1 + 448) = 0LL;
  nw_protocol_plugin_retry::~nw_protocol_plugin_retry((nw_protocol_plugin_retry *)(v1 + 216));
  free((void *)v1);
}

void nw_protocol_plugin_retry::~nw_protocol_plugin_retry(nw_protocol_plugin_retry *this)
{
  if ((*((_BYTE *)this + 168) & 1) != 0)
  {
    uint64_t v2 = (const void *)*((void *)this + 20);
    if (v2) {
      _Block_release(v2);
    }
  }

  *((void *)this + 20) = 0LL;
  if ((*((_BYTE *)this + 120) & 1) != 0)
  {
    char v3 = (const void *)*((void *)this + 14);
    if (v3) {
      _Block_release(v3);
    }
  }

  *((void *)this + 14) = 0LL;
  if ((*((_BYTE *)this + 104) & 1) != 0)
  {
    char v4 = (void *)*((void *)this + 12);
    if (v4) {
      os_release(v4);
    }
  }

  *((void *)this + 12) = 0LL;
  if ((*((_BYTE *)this + 88) & 1) != 0)
  {
    char v5 = (void *)*((void *)this + 10);
    if (v5) {
      os_release(v5);
    }
  }

  *((void *)this + 10) = 0LL;
  if ((*((_BYTE *)this + 72) & 1) != 0)
  {
    os_log_type_t v6 = (void *)*((void *)this + 8);
    if (v6) {
      os_release(v6);
    }
  }

  *((void *)this + 8) = 0LL;
  if ((*((_BYTE *)this + 56) & 1) != 0)
  {
    int v7 = (void *)*((void *)this + 6);
    if (v7) {
      os_release(v7);
    }
  }

  *((void *)this + 6) = 0LL;
  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
    uint64_t v8 = (void *)*((void *)this + 4);
    if (v8) {
      os_release(v8);
    }
  }

  *((void *)this + 4) = 0LL;
  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    __int16 v9 = (void *)*((void *)this + 2);
    if (v9) {
      os_release(v9);
    }
  }

  *((void *)this + 2) = 0LL;
  if ((*((_BYTE *)this + 8) & 1) != 0 && *(void *)this) {
    os_release(*(void **)this);
  }
  *(void *)this = 0LL;
}

uint64_t ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  char v3 = *(void **)(a2 + 40);
  if (v2)
  {
    *(void *)(v2 + 40) = v3;
    char v3 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(*(void *)(a1 + 32) + 8LL) = v3;
  }

  *char v3 = v2;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  nw_frame_finalize(a2);
  return 1LL;
}

__n128 __Block_byref_object_copy__519(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0LL;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    uint64_t v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }

  *(void *)(a1 + 40) = 0LL;
}

BOOL ___ZL42nw_protocol_http_sniffing_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke( void *a1, uint64_t a2)
{
  uint64_t v164 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    char v4 = nw_frame_copy_metadata_for_protocol(a2, *(void *)(*(void *)(a1[4] + 8LL) + 40LL));
    char v5 = v4;
    uint64_t v6 = a1[6];
    char v7 = *(_BYTE *)(v6 + 456);
    if ((v7 & 1) != 0)
    {
      uint64_t v8 = *(void **)(v6 + 448);
      if (v8)
      {
        os_release(v8);
        char v7 = *(_BYTE *)(v6 + 456);
      }
    }

    *(void *)(v6 + 448) = v5;
    *(_BYTE *)(v6 + 456) = v7 | 1;
    uint64_t v9 = a1[6];
    if (v9)
    {
      client_metadata_in_parameters = nw_http_messaging_options_find_or_create_client_metadata_in_parameters( *(void **)(v9 + 480),  v9);
      if (client_metadata_in_parameters)
      {
        __int16 v11 = client_metadata_in_parameters;
        nw_http_client_metadata_set_sniffed_media_type(client_metadata_in_parameters, 0LL);
        os_release(v11);
      }

      goto LABEL_10;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_sniffing_reset_sniffed_media_type";
    __int16 v105 = (char *)_os_log_send_and_compose_impl();
    type.__r_.__value_.__s.__data_[0] = 16;
    LOBYTE(v151[0]) = 0;
    if (__nwlog_fault(v105, &type, v151))
    {
      if (type.__r_.__value_.__s.__data_[0] == 17)
      {
        os_log_type_t v106 = (os_log_s *)__nwlog_obj();
        os_log_type_t v107 = type.__r_.__value_.__s.__data_[0];
        if (!os_log_type_enabled(v106, (os_log_type_t)type.__r_.__value_.__s.__data_[0])) {
          goto LABEL_260;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_sniffing_reset_sniffed_media_type";
        uint64_t v108 = "%{public}s called with null http_sniffing";
        goto LABEL_259;
      }

      if (!LOBYTE(v151[0]))
      {
        os_log_type_t v106 = (os_log_s *)__nwlog_obj();
        os_log_type_t v107 = type.__r_.__value_.__s.__data_[0];
        if (!os_log_type_enabled(v106, (os_log_type_t)type.__r_.__value_.__s.__data_[0])) {
          goto LABEL_260;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_sniffing_reset_sniffed_media_type";
        uint64_t v108 = "%{public}s called with null http_sniffing, backtrace limit exceeded";
        goto LABEL_259;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v106 = (os_log_s *)__nwlog_obj();
      os_log_type_t v107 = type.__r_.__value_.__s.__data_[0];
      BOOL v114 = os_log_type_enabled(v106, (os_log_type_t)type.__r_.__value_.__s.__data_[0]);
      if (backtrace_string)
      {
        if (v114)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_sniffing_reset_sniffed_media_type";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v106,  v107,  "%{public}s called with null http_sniffing, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_260;
      }

      if (v114)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_sniffing_reset_sniffed_media_type";
        uint64_t v108 = "%{public}s called with null http_sniffing, no backtrace";
LABEL_259:
        _os_log_impl(&dword_181A5C000, v106, v107, v108, buf, 0xCu);
      }
    }

LABEL_279:
                if (v30) {
                  free(v30);
                }
                LOBYTE(v26) = 0;
LABEL_47:
                *(_BYTE *)(a1[6] + 548LL) = *(_BYTE *)(a1[6] + 548LL) & 0xFE | v26;
                uint64_t v35 = a1[6];
                if ((*(_BYTE *)(v35 + 548) & 1) != 0)
                {
                  unsigned __int8 v36 = (void **)(v35 + 496);
                  if (*(char *)(v35 + 519) < 0)
                  {
                    if ((v149.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                      unsigned int v37 = &v149;
                    }
                    else {
                      unsigned int v37 = (std::string *)v149.__r_.__value_.__r.__words[0];
                    }
                    if ((v149.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                      size_t v38 = v149.__r_.__value_.__s.__size_;
                    }
                    else {
                      size_t v38 = v149.__r_.__value_.__l.__size_;
                    }
                    std::string::__assign_no_alias<false>(v36, v37, v38);
                  }

                  else
                  {
                    if ((v149.__r_.__value_.__s.__size_ & 0x80) == 0)
                    {
                      *(_OWORD *)unsigned __int8 v36 = *(_OWORD *)&v149.__r_.__value_.__l.__data_;
                      *(void *)(v35 + 512) = v149.__r_.__value_.__l.__cap_;
                      *(void *)(a1[6] + 528LL) = *(void *)(a1[6] + 520LL);
LABEL_63:
                      char v5 = 0LL;
LABEL_64:
                      uint64_t v40 = *(void *)(a2 + 64);
                      if (v40) {
                        int v41 = (*(unsigned __int8 *)(v40 + 66) >> 6) & 1;
                      }
                      else {
                        int v41 = 0;
                      }
                      uint64_t v42 = a1[6];
                      if (!*(void *)(v42 + 448) || (*(_BYTE *)(v42 + 548) & 1) == 0) {
                        goto LABEL_136;
                      }
                      if (!*(void *)(a2 + 112)
                        || (*(_WORD *)(a2 + 204) & 0x100) != 0
                        && g_channel_check_validity
                        && !g_channel_check_validity(a2, *(void *)(a2 + 88)))
                      {
                        goto LABEL_110;
                      }

                      int v43 = *(_DWORD *)(a2 + 52);
                      if (!v43) {
                        goto LABEL_110;
                      }
                      uint64_t v44 = *(unsigned int *)(a2 + 56);
                      unsigned int v45 = v43 - (v44 + *(_DWORD *)(a2 + 60));
                      if (!v45) {
                        goto LABEL_110;
                      }
                      os_log_type_t v46 = (void *)a1[6];
                      BOOL v47 = (char *)v46[66];
                      uint64_t v48 = (char *)v46[65];
                      unsigned int v49 = (_DWORD)v48 - (_DWORD)v47 + 512;
                      int64_t v50 = v49 >= v45 ? v45 : v49;
                      if (!(_DWORD)v50)
                      {
LABEL_110:
                        uint64_t v74 = a1[6];
                        if (*(void *)(v74 + 528) - *(void *)(v74 + 520) > 0x1FFuLL) {
                          int v75 = 1;
                        }
                        else {
                          int v75 = v41;
                        }
                        if (v75 == 1)
                        {
                          if ((*(_BYTE *)(v74 + 548) & 1) != 0)
                          {
                            *(_BYTE *)(v74 + 548) &= ~1u;
                            nw_http_sniffing_guess_media_type(&type, v74);
                            std::string::size_type v76 = type.__r_.__value_.__s.__size_;
                            unsigned __int8 v77 = type.__r_.__value_.__s.__size_;
                            if ((type.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                              std::string::size_type v76 = type.__r_.__value_.__l.__size_;
                            }
                            if (v76)
                            {
                              if ((*(_BYTE *)(v74 + 198) & 1) == 0)
                              {
                                if (gLogDatapath)
                                {
                                  __int16 v132 = (os_log_s *)__nwlog_obj();
                                  if (os_log_type_enabled(v132, OS_LOG_TYPE_DEBUG))
                                  {
                                    p_std::string type = &type;
                                    if ((type.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                                      p_std::string type = (std::string *)type.__r_.__value_.__r.__words[0];
                                    }
                                    *(_DWORD *)buf = 136446978;
                                    *(void *)&uint8_t buf[4] = "nw_http_sniffing_stop";
                                    *(_WORD *)&_BYTE buf[12] = 2082;
                                    *(void *)&buf[14] = v74 + 114;
                                    *(_WORD *)&buf[22] = 2080;
                                    v160 = (__n128 (*)(uint64_t, uint64_t))" ";
                                    LOWORD(v161) = 2080;
                                    *(void *)((char *)&v161 + 2) = p_type;
                                    _os_log_impl( &dword_181A5C000,  v132,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%smedia type %s",  buf,  0x2Au);
                                  }
                                }
                              }

                              BOOL v78 = nw_http_messaging_options_find_or_create_client_metadata_in_parameters( *(void **)(v74 + 480),  v74);
                              unsigned __int8 v77 = type.__r_.__value_.__s.__size_;
                              if (v78)
                              {
                                unsigned int v79 = v78;
                                if ((type.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                                  BOOL v80 = &type;
                                }
                                else {
                                  BOOL v80 = (std::string *)type.__r_.__value_.__r.__words[0];
                                }
                                nw_http_client_metadata_set_sniffed_media_type(v78, (uint64_t)v80);
                                os_release(v79);
                                unsigned __int8 v77 = type.__r_.__value_.__s.__size_;
                              }
                            }

                            if ((v77 & 0x80) != 0) {
                              operator delete(type.__r_.__value_.__l.__data_);
                            }
                            goto LABEL_135;
                          }

                          __nwlog_obj();
                          *(_DWORD *)buf = 136446210;
                          *(void *)&uint8_t buf[4] = "nw_http_sniffing_stop";
                          int v124 = (char *)_os_log_send_and_compose_impl();
                          type.__r_.__value_.__s.__data_[0] = 16;
                          LOBYTE(v151[0]) = 0;
                          if (__nwlog_fault(v124, &type, v151))
                          {
                            if (type.__r_.__value_.__s.__data_[0] == 17)
                            {
                              BOOL v125 = (os_log_s *)__nwlog_obj();
                              os_log_type_t v126 = type.__r_.__value_.__s.__data_[0];
                              if (!os_log_type_enabled(v125, (os_log_type_t)type.__r_.__value_.__s.__data_[0])) {
                                goto LABEL_285;
                              }
                              *(_DWORD *)buf = 136446210;
                              *(void *)&uint8_t buf[4] = "nw_http_sniffing_stop";
                              os_log_type_t v127 = "%{public}s called with null http_sniffing->active";
                              goto LABEL_284;
                            }

                            if (!LOBYTE(v151[0]))
                            {
                              BOOL v125 = (os_log_s *)__nwlog_obj();
                              os_log_type_t v126 = type.__r_.__value_.__s.__data_[0];
                              if (!os_log_type_enabled(v125, (os_log_type_t)type.__r_.__value_.__s.__data_[0])) {
                                goto LABEL_285;
                              }
                              *(_DWORD *)buf = 136446210;
                              *(void *)&uint8_t buf[4] = "nw_http_sniffing_stop";
                              os_log_type_t v127 = "%{public}s called with null http_sniffing->active, backtrace limit exceeded";
                              goto LABEL_284;
                            }

                            uint64_t v136 = (char *)__nw_create_backtrace_string();
                            BOOL v125 = (os_log_s *)__nwlog_obj();
                            os_log_type_t v126 = type.__r_.__value_.__s.__data_[0];
                            BOOL v137 = os_log_type_enabled(v125, (os_log_type_t)type.__r_.__value_.__s.__data_[0]);
                            if (v136)
                            {
                              if (v137)
                              {
                                *(_DWORD *)buf = 136446466;
                                *(void *)&uint8_t buf[4] = "nw_http_sniffing_stop";
                                *(_WORD *)&_BYTE buf[12] = 2082;
                                *(void *)&buf[14] = v136;
                                _os_log_impl( &dword_181A5C000,  v125,  v126,  "%{public}s called with null http_sniffing->active, dumping backtrace:%{public}s",  buf,  0x16u);
                              }

                              free(v136);
                              goto LABEL_285;
                            }

                            if (v137)
                            {
                              *(_DWORD *)buf = 136446210;
                              *(void *)&uint8_t buf[4] = "nw_http_sniffing_stop";
                              os_log_type_t v127 = "%{public}s called with null http_sniffing->active, no backtrace";
LABEL_284:
                              _os_log_impl(&dword_181A5C000, v125, v126, v127, buf, 0xCu);
                            }
                          }

              if (v152) {
                free(v152);
              }
              char v66 = 0LL;
              goto LABEL_102;
            }

            unsigned int v79 = v7;
            if (v7)
            {
              BOOL v80 = v79;
              BOOL v81 = (*((_BYTE *)v79 + 268) & 0x20) == 0;

              if (v81)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                int v82 = (os_log_s *)(id)gconnectionLogObj;
                if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
                {
                  id v83 = nw_endpoint_handler_get_id_string(v80);
                  char v84 = nw_endpoint_handler_dry_run_string(v80);
                  uint64_t v85 = nw_endpoint_handler_copy_endpoint(v80);
                  int v86 = nw_endpoint_get_logging_description(v85);
                  uint64_t v87 = nw_endpoint_handler_state_string(v80);
                  int v88 = nw_endpoint_handler_mode_string(v80);
                  int v89 = nw_endpoint_handler_copy_current_path(v80);
                  *(_DWORD *)buf = 136447746;
                  v219 = "nw_endpoint_flow_rebuild_stack";
                  v220 = 2082;
                  v221 = (char *)v83;
                  v222 = 2082;
                  v223 = (nw_protocol *)v84;
                  v224 = 2082;
                  v225 = (void *)v86;
                  v226 = 2082;
                  v227 = v87;
                  v228 = 2082;
                  v229 = v88;
                  v230 = 2114;
                  v231 = v89;
                  _os_log_impl( &dword_181A5C000,  v82,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] unable to setup channel",  buf,  0x48u);
                }
              }

              goto LABEL_237;
            }

            __nwlog_obj();
            v191 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            v219 = "nw_endpoint_handler_get_logging_disabled";
            v192 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(v214) = 0;
            if (__nwlog_fault(v192, type, &v214))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v193 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                v194 = type[0];
                if (os_log_type_enabled(v193, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  v219 = "nw_endpoint_handler_get_logging_disabled";
                  _os_log_impl(&dword_181A5C000, v193, v194, "%{public}s called with null handler", buf, 0xCu);
                }
              }

              else if ((_BYTE)v214)
              {
                v197 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v193 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                v198 = type[0];
                v199 = os_log_type_enabled(v193, type[0]);
                if (v197)
                {
                  if (v199)
                  {
                    *(_DWORD *)buf = 136446466;
                    v219 = "nw_endpoint_handler_get_logging_disabled";
                    v220 = 2082;
                    v221 = v197;
                    _os_log_impl( &dword_181A5C000,  v193,  v198,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(v197);
                  goto LABEL_288;
                }

                if (v199)
                {
                  *(_DWORD *)buf = 136446210;
                  v219 = "nw_endpoint_handler_get_logging_disabled";
                  _os_log_impl( &dword_181A5C000,  v193,  v198,  "%{public}s called with null handler, no backtrace",  buf,  0xCu);
                }
              }

              else
              {
                __nwlog_obj();
                v193 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                v200 = type[0];
                if (os_log_type_enabled(v193, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  v219 = "nw_endpoint_handler_get_logging_disabled";
                  _os_log_impl( &dword_181A5C000,  v193,  v200,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
                }
              }
            }

    if (v104)
    {
      os_log_type_t v126 = (char *)v104;
      goto LABEL_281;
    }

    return 4294966394LL;
  }

  log = *(os_log_t *)(a6 + 240);
  v170 = v24;
  v171 = v14 + a4;
  id v28 = v27(v25, a6, (v14 + a4), (v14 + a4), 0xFFFFFFFFLL, v229);
  if (!v28 || !v229[0])
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    int v124 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_67;
    }
    BOOL v125 = *(_DWORD *)(a6 + 368);
    buf = 136446978;
    v231 = "send_data_callback";
    v232 = 2082;
    v233 = a6 + 390;
    v234 = 2080;
    v235 = " ";
    v236 = 1024;
    v237 = v125;
    int v33 = "%{public}s %{public}s%s<i%u> got back zero frames, cannot send data, returning NGHTTP2_ERR_WOULDBLOCK";
    int v34 = (os_log_s *)v124;
    uint64_t v35 = 38;
    goto LABEL_261;
  }

  unsigned int v29 = v28;
  buf = 0;
  nw_frame_array_get_frame_count(v229, 1, &buf);
  uint64_t v30 = buf;
  if ((*(__int16 *)(a6 + 388) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    objecta = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      BOOL v123 = *(_DWORD *)(a6 + 368);
      buf = 136447490;
      v231 = "send_data_callback";
      v232 = 2082;
      v233 = a6 + 390;
      v234 = 2080;
      v235 = " ";
      v236 = 1024;
      v237 = v123;
      v238 = 1024;
      *(_DWORD *)v239 = v29;
      *(_WORD *)&v239[4] = 1024;
      *(_DWORD *)&v239[6] = v30;
      _os_log_impl( &dword_181A5C000,  objecta,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> got back %u frames from output handler (%u bytes)",  (uint8_t *)&buf,  0x32u);
    }
  }

  if (v30 < v171)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v31 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_67;
    }
    os_log_type_t v32 = *(_DWORD *)(a6 + 368);
    buf = 136447490;
    v231 = "send_data_callback";
    v232 = 2082;
    v233 = a6 + 390;
    v234 = 2080;
    v235 = " ";
    v236 = 1024;
    v237 = v32;
    v238 = 1024;
    *(_DWORD *)v239 = v30;
    *(_WORD *)&v239[4] = 1024;
    *(_DWORD *)&v239[6] = v171;
    int v33 = "%{public}s %{public}s%s<i%u> got back fewer bytes than necessary (%u / %u), returing E_WOULDBLOCK";
    int v34 = (os_log_s *)v31;
    uint64_t v35 = 50;
LABEL_261:
    _os_log_impl(&dword_181A5C000, v34, OS_LOG_TYPE_DEBUG, v33, (uint8_t *)&buf, v35);
LABEL_67:
    *(_WORD *)(a6 + 388) |= 0x2000u;
    return 4294966792LL;
  }

  v224 = 0LL;
  v225 = &v224;
  v227 = 0;
  v226 = 0x2000000000LL;
  v220 = 0LL;
  v221 = &v220;
  v223 = 0;
  v222 = 0x2000000000LL;
  v218[0] = 0LL;
  v218[1] = v218;
  v219 = 0;
  v218[2] = 0x2000000000LL;
  v217 = 0;
  v215 = &v214;
  v216 = 0x2000000000LL;
  v210 = 0LL;
  v211 = &v210;
  v212 = 0x2000000000LL;
  v213 = 0LL;
  v214 = 0LL;
  v208[0] = 0LL;
  v208[1] = v208;
  v208[2] = 0x2000000000LL;
  v209 = 0;
  v206[0] = 0LL;
  v206[1] = v206;
  v206[2] = 0x2000000000LL;
  v207 = 0;
  v204[0] = 0LL;
  v204[1] = v204;
  v204[2] = 0x2000000000LL;
  v205 = 0;
  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
  }
  int v43 = (id)nw_protocol_copy_http_definition_http_definition;
  std::string::size_type size = (size_t)nw_frame_copy_metadata_for_protocol((uint64_t)v21, (uint64_t)v43);
  object = (void *)size;
  if (v43)
  {
    os_release(v43);
    std::string::size_type size = (size_t)object;
  }

  if (!size)
  {
    capsule_std::string type = 0LL;
    unint64_t v55 = 0LL;
    uint64_t v48 = 0;
    LOBYTE(v51) = 0;
    BOOL v47 = 0;
    LOBYTE(v56) = 0;
    LOBYTE(v50) = 0;
    size_t v57 = 0LL;
    size_t v58 = 0LL;
LABEL_117:
    v174[0] = MEMORY[0x1895F87A8];
    v174[1] = 0x40000000LL;
    v175 = ___ZL18send_data_callbackP15nghttp2_sessionP13nghttp2_framePKhmP19nghttp2_data_sourcePv_block_invoke_82067;
    v176 = &unk_189BC8088;
    v185 = a3;
    v186 = a6;
    v198 = v171;
    v187 = a2;
    v188 = a4;
    v177 = &v224;
    v178 = &v220;
    v199 = v50;
    uint64_t v62 = v58;
    v189 = v58;
    v190 = capsule_type;
    v200 = v56;
    v179 = v208;
    v180 = v206;
    v201 = v47;
    v202 = v51;
    v191 = v55;
    v192 = 0LL;
    uint64_t v63 = v48;
    v203 = v48;
    v193 = v57;
    v194 = size;
    v165 = size;
    v181 = v204;
    v182 = &v210;
    v195 = v21;
    v196 = v229;
    v197 = v170;
    v183 = v218;
    v184 = &v214;
    __int128 v64 = v229[0];
    char v65 = v57;
    do
    {
      if (!v64) {
        break;
      }
      char v66 = *(void *)(v64 + 32);
      unint64_t v67 = ((uint64_t (*)(void *))v175)(v174);
      __int128 v64 = v66;
    }

    while ((v67 & 1) != 0);
    if (v65) {
      dispatch_release(v65);
    }
    if (object) {
      os_release(object);
    }
    if ((*(_WORD *)(a6 + 388) & 0x100) != 0 || log)
    {
      uint64_t v70 = v62;
      if ((*(_WORD *)(a6 + 388) & 0x8000) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        BOOL v137 = gconnectionLogObj;
        v138 = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
        uint64_t v70 = v62;
        if (v138)
        {
          os_log_type_t v139 = *(_DWORD *)(a6 + 368);
          v140 = *((_DWORD *)v225 + 6);
          os_log_type_t v141 = *((_DWORD *)v215 + 6);
          buf = 136447490;
          v231 = "send_data_callback";
          v232 = 2082;
          v233 = a6 + 390;
          v234 = 2080;
          v235 = " ";
          v236 = 1024;
          v237 = v139;
          v238 = 1024;
          *(_DWORD *)v239 = v140;
          *(_WORD *)&v239[4] = 1024;
          *(_DWORD *)&v239[6] = v141;
          int v75 = "%{public}s %{public}s%s<i%u> wrote %u bytes (pending %u frames)";
          std::string::size_type v76 = (os_log_s *)v137;
          unsigned __int8 v77 = 50;
          goto LABEL_299;
        }
      }

          if (v195) {
            free(v195);
          }
          *((_DWORD *)v313 + 6) = -1;
          goto LABEL_282;
        }

        while (1)
        {
          *(void *)std::string type = 0LL;
          v305 = type;
          v306 = 0x2000000000LL;
          v307 = 0LL;
          v300 = 0LL;
          v301 = &v300;
          v302 = 0x2000000000LL;
          v303 = 0;
          v326[0] = 0LL;
          v326[1] = 0LL;
          v299[0] = 0LL;
          v299[1] = v299;
          v299[2] = 0x2000000000LL;
          v299[3] = v326;
          v297[0] = 0LL;
          v297[1] = v297;
          v297[2] = 0x2000000000LL;
          v298 = 0;
          v293 = 0LL;
          v294 = &v293;
          v295 = 0x2000000000LL;
          v296 = 0;
          v289 = 0LL;
          v290 = &v289;
          v291 = 0x2000000000LL;
          v292 = -1LL;
          v285 = 0LL;
          v286 = &v285;
          v287 = 0x2000000000LL;
          v288 = 0LL;
          v281 = 0LL;
          v282 = &v281;
          v283 = 0x2000000000LL;
          v284 = 0LL;
          v269[0] = v15;
          v269[1] = 0x40000000LL;
          v270 = ___ZL34nw_protocol_http2_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
          v271 = &unk_189BC7ED0;
          v272 = &v300;
          v273 = v297;
          v274 = v299;
          v275 = &v289;
          v276 = &v293;
          v277 = &v285;
          v278 = &v281;
          v279 = handle;
          v280 = v14;
          os_log_type_t v46 = *(void *)v14;
          do
          {
            if (!v46) {
              break;
            }
            BOOL v47 = *(void *)(v46 + 32);
            uint64_t v48 = v270(v269, v46);
            os_log_type_t v46 = v47;
          }

          while (v48);
          if (!*((_BYTE *)v301 + 24)) {
            goto LABEL_112;
          }
          unsigned int v49 = 0;
          int64_t v50 = *((unsigned __int16 *)v294 + 12);
          unsigned int v51 = v286[3];
          uint64_t v52 = v51 + v50;
          unint64_t v53 = *(void *)v14;
          while (v53)
          {
            size_t v57 = *(_DWORD *)(v53 + 52);
            if (v57) {
              v57 -= *(_DWORD *)(v53 + 56) + *(_DWORD *)(v53 + 60);
            }
            unint64_t v53 = *(void *)(v53 + 32);
            uint64_t v54 = __CFADD__(v49, v57);
            unint64_t v55 = v49 + v57;
            v49 += v57;
            if (v54) {
              size_t v56 = -1;
            }
            else {
              size_t v56 = v55;
            }
            if (v56 >= v52) {
              goto LABEL_63;
            }
          }

          if (v49 < v52) {
            goto LABEL_112;
          }
LABEL_63:
          *(void *)v265 = 0LL;
          v266 = v265;
          v267 = 0x2000000000LL;
          v268 = v50;
          v261 = 0LL;
          v262 = &v261;
          v263 = 0x2000000000LL;
          v264 = v51;
          if (((*(unsigned __int16 *)(v14 + 188) | (*(unsigned __int8 *)(v14 + 190) << 16)) & 0x80000) == 0
            && gLogDatapath)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            v159 = (os_log_s *)gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
            {
              __int128 v161 = *(_DWORD *)(v14 + 176);
              v160 = *(_DWORD *)(v14 + 180);
              uint64_t v162 = v290[3];
              uint64_t v163 = v286[3];
              *(_DWORD *)buf = 136447746;
              v317 = "nw_protocol_http2_get_input_frames";
              v318 = 2082;
              v319 = (const char *)(v14 + 191);
              v320 = 2080;
              v321 = (uint64_t)" ";
              v322 = 1024;
              *(_DWORD *)v323 = v160;
              *(_WORD *)&v323[4] = 1024;
              *(_DWORD *)&v323[6] = v161;
              *(_WORD *)&v323[10] = 2048;
              *(void *)&v323[12] = v162;
              *(_WORD *)&v323[20] = 2048;
              *(void *)&v323[22] = v163;
              _os_log_impl( &dword_181A5C000,  v159,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> Receiving capsule type 0x%llx length %llu",  buf,  0x40u);
            }
          }

          size_t v58 = 0LL;
          v259[0] = 0LL;
          v259[1] = v259;
          v260 = 0;
          v259[2] = 0x2000000000LL;
          if (!v290[3])
          {
            BOOL v59 = (*(unsigned __int8 *)(v14 + 190) >> 3) & 1;
            if (!gLogDatapath) {
              LOBYTE(v59) = 1;
            }
            if (v282[3])
            {
              if ((v59 & 1) != 0)
              {
                size_t v58 = 0LL;
              }

              else
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                v167 = (os_log_s *)gconnectionLogObj;
                if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
                {
                  v169 = *(_DWORD *)(v14 + 176);
                  v168 = *(_DWORD *)(v14 + 180);
                  v170 = v282[3];
                  *(_DWORD *)buf = 136447490;
                  v317 = "nw_protocol_http2_get_input_frames";
                  v318 = 2082;
                  v319 = (const char *)(v14 + 191);
                  v320 = 2080;
                  v321 = (uint64_t)" ";
                  v322 = 1024;
                  *(_DWORD *)v323 = v168;
                  *(_WORD *)&v323[4] = 1024;
                  *(_DWORD *)&v323[6] = v169;
                  *(_WORD *)&v323[10] = 2048;
                  *(void *)&v323[12] = v170;
                  _os_log_impl( &dword_181A5C000,  v167,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> Receiving capsule datagram non-zero context ID %llu",  buf,  0x36u);
                }

                size_t v58 = 0LL;
                id v15 = MEMORY[0x1895F87A8];
              }
            }

            else
            {
              if ((v59 & 1) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                v171 = (os_log_s *)gconnectionLogObj;
                v172 = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
                id v15 = MEMORY[0x1895F87A8];
                if (v172)
                {
                  v174 = *(_DWORD *)(v14 + 176);
                  v173 = *(_DWORD *)(v14 + 180);
                  *(_DWORD *)buf = 136447234;
                  v317 = "nw_protocol_http2_get_input_frames";
                  v318 = 2082;
                  v319 = (const char *)(v14 + 191);
                  v320 = 2080;
                  v321 = (uint64_t)" ";
                  v322 = 1024;
                  *(_DWORD *)v323 = v173;
                  *(_WORD *)&v323[4] = 1024;
                  *(_DWORD *)&v323[6] = v174;
                  _os_log_impl( &dword_181A5C000,  v171,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> Receiving capsule datagram with zero context ID",  buf,  0x2Cu);
                }
              }

              size_t v58 = http2_create_input_frame((uint64_t)handle, v14, *((unsigned int *)v286 + 6));
            }
          }

          v248[0] = v15;
          v248[1] = 0x40000000LL;
          v249 = (uint64_t (*)(void *))___ZL34nw_protocol_http2_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_63;
          v250 = &unk_189BC7EF8;
          v255 = v14;
          v256 = a1;
          v251 = v265;
          v252 = &v261;
          v253 = v259;
          v254 = type;
          v257 = v58;
          v258 = handle;
          size_t v60 = *(void *)v14;
          do
          {
            if (!v60) {
              break;
            }
            size_t v61 = *(void *)(v60 + 32);
            uint64_t v62 = v249(v248);
            size_t v60 = v61;
          }

          while ((v62 & 1) != 0);
          uint64_t v63 = (dispatch_object_s *)*((void *)v305 + 3);
          if (!v63 || !v262[3]) {
            goto LABEL_105;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          __int128 v64 = *((_DWORD *)handle + 92);
          char v65 = v262[3];
          *(_DWORD *)buf = 136447234;
          v317 = "nw_protocol_http2_get_input_frames";
          v318 = 2082;
          v319 = handle + 390;
          v320 = 2080;
          v321 = (uint64_t)" ";
          v322 = 1024;
          *(_DWORD *)v323 = v64;
          *(_WORD *)&v323[4] = 2048;
          *(void *)&v323[6] = v65;
          char v66 = (char *)_os_log_send_and_compose_impl();
          v247 = OS_LOG_TYPE_ERROR;
          v246 = 0;
          if (__nwlog_fault(v66, &v247, &v246))
          {
            if (v247 == OS_LOG_TYPE_FAULT)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              unint64_t v67 = gconnectionLogObj;
              __int128 v68 = v247;
              if (os_log_type_enabled((os_log_t)gconnectionLogObj, v247))
              {
                char v69 = *((_DWORD *)handle + 92);
                uint64_t v70 = v262[3];
                *(_DWORD *)buf = 136447234;
                v317 = "nw_protocol_http2_get_input_frames";
                v318 = 2082;
                v319 = handle + 390;
                v320 = 2080;
                v321 = (uint64_t)" ";
                v322 = 1024;
                *(_DWORD *)v323 = v69;
                *(_WORD *)&v323[4] = 2048;
                *(void *)&v323[6] = v70;
                uint64_t v71 = (os_log_s *)v67;
                uint64_t v72 = v68;
                unsigned __int16 v73 = "%{public}s %{public}s%s<i%u> Read capsule data, but still have remaining length %llu";
LABEL_100:
                _os_log_impl(&dword_181A5C000, v71, v72, v73, buf, 0x30u);
              }
            }

            else if (v246)
            {
              uint64_t v74 = (char *)__nw_create_backtrace_string();
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              int v75 = (os_log_s *)gconnectionLogObj;
              std::string::size_type v76 = v247;
              unsigned __int8 v77 = os_log_type_enabled((os_log_t)gconnectionLogObj, v247);
              if (!v74)
              {
                if (!v77) {
                  goto LABEL_101;
                }
                char v84 = *((_DWORD *)handle + 92);
                uint64_t v85 = v262[3];
                *(_DWORD *)buf = 136447234;
                v317 = "nw_protocol_http2_get_input_frames";
                v318 = 2082;
                v319 = handle + 390;
                v320 = 2080;
                v321 = (uint64_t)" ";
                v322 = 1024;
                *(_DWORD *)v323 = v84;
                *(_WORD *)&v323[4] = 2048;
                *(void *)&v323[6] = v85;
                uint64_t v71 = v75;
                uint64_t v72 = v76;
                unsigned __int16 v73 = "%{public}s %{public}s%s<i%u> Read capsule data, but still have remaining length %llu, no backtrace";
                goto LABEL_100;
              }

              if (v77)
              {
                BOOL v78 = *((_DWORD *)handle + 92);
                unsigned int v79 = v262[3];
                *(_DWORD *)buf = 136447490;
                v317 = "nw_protocol_http2_get_input_frames";
                v318 = 2082;
                v319 = handle + 390;
                v320 = 2080;
                v321 = (uint64_t)" ";
                v322 = 1024;
                *(_DWORD *)v323 = v78;
                *(_WORD *)&v323[4] = 2048;
                *(void *)&v323[6] = v79;
                *(_WORD *)&v323[14] = 2082;
                *(void *)&v323[16] = v74;
                _os_log_impl( &dword_181A5C000,  v75,  v76,  "%{public}s %{public}s%s<i%u> Read capsule data, but still have remaining length %llu, dumping backtrace:%{public}s",  buf,  0x3Au);
              }

              free(v74);
            }

            else
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              BOOL v80 = gconnectionLogObj;
              BOOL v81 = v247;
              if (os_log_type_enabled((os_log_t)gconnectionLogObj, v247))
              {
                int v82 = *((_DWORD *)handle + 92);
                id v83 = v262[3];
                *(_DWORD *)buf = 136447234;
                v317 = "nw_protocol_http2_get_input_frames";
                v318 = 2082;
                v319 = handle + 390;
                v320 = 2080;
                v321 = (uint64_t)" ";
                v322 = 1024;
                *(_DWORD *)v323 = v82;
                *(_WORD *)&v323[4] = 2048;
                *(void *)&v323[6] = v83;
                uint64_t v71 = (os_log_s *)v80;
                uint64_t v72 = v81;
                unsigned __int16 v73 = "%{public}s %{public}s%s<i%u> Read capsule data, but still have remaining length %llu, backtrace limit exceeded";
                goto LABEL_100;
              }
            }
          }

LABEL_293:
                        if (v129) {
                          free(v129);
                        }
                        goto LABEL_134;
                      }

                      unsigned int v51 = (const void *)(*(void *)(a2 + 112) + v44);
                      uint64_t v52 = v46[67];
                      if (v52 - (uint64_t)v47 >= v50)
                      {
                        memmove(v47, v51, v50);
                        v46[66] = &v47[v50];
                        goto LABEL_110;
                      }

                      unint64_t v53 = v47 - v48;
                      uint64_t v54 = v47 - v48 + v50;
                      if (v54 < 0) {
                        abort();
                      }
                      unint64_t v55 = v52 - (void)v48;
                      if (2 * v55 > v54) {
                        uint64_t v54 = 2 * v55;
                      }
                      if (v55 >= 0x3FFFFFFFFFFFFFFFLL) {
                        size_t v56 = 0x7FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        size_t v56 = v54;
                      }
                      size_t __src = v56;
                      uint64_t v144 = (void *)a1[6];
                      if (v56) {
                        size_t v56 = (size_t)operator new(v56);
                      }
                      *(void *)uint64_t v145 = v56;
                      size_t v57 = v56 + v53;
                      memcpy((void *)(v56 + v53), v51, v50);
                      if (v48 == v47)
                      {
                        __int128 v64 = v47;
                        size_t v61 = v57;
                        uint64_t v62 = *(void *)v145;
                        size_t v58 = __src;
                        size_t v60 = v57;
                        uint64_t v63 = v144;
LABEL_99:
                        uint64_t v70 = (char *)(v60 + v50);
                        uint64_t v71 = v62 + v58;
                        uint64_t v72 = v64 - v47;
                        if (v64 != v47) {
                          memmove(v70, v47, v64 - v47);
                        }
                        unsigned __int16 v73 = (void *)v63[65];
                        v63[65] = v61;
                        v63[66] = &v70[v72];
                        v63[67] = v71;
                        if (v73) {
                          operator delete(v73);
                        }
                        goto LABEL_110;
                      }

                      size_t v58 = __src;
                      if (v53 >= 0x20)
                      {
                        uint64_t v62 = *(void *)v145;
                        BOOL v59 = v47;
                        size_t v60 = v57;
                        size_t v61 = v57;
                        uint64_t v63 = v144;
                        if ((unint64_t)&v48[-*(void *)v145] >= 0x20)
                        {
                          BOOL v59 = &v47[-(v53 & 0xFFFFFFFFFFFFFFE0LL)];
                          char v65 = v47 - 16;
                          char v66 = (_OWORD *)(*(void *)v145 + v47 - 16 - v48);
                          unint64_t v67 = v53 & 0xFFFFFFFFFFFFFFE0LL;
                          do
                          {
                            __int128 v68 = *(_OWORD *)v65;
                            *(v66 - 1) = *((_OWORD *)v65 - 1);
                            *char v66 = v68;
                            v65 -= 32;
                            v66 -= 2;
                            v67 -= 32LL;
                          }

                          while (v67);
                          size_t v61 = v60 - (v53 & 0xFFFFFFFFFFFFFFE0LL);
                          if (v53 == (v53 & 0xFFFFFFFFFFFFFFE0LL)) {
                            goto LABEL_98;
                          }
                        }
                      }

                      else
                      {
                        BOOL v59 = v47;
                        size_t v60 = v57;
                        size_t v61 = v57;
                        uint64_t v63 = v144;
                        uint64_t v62 = *(void *)v145;
                      }

                      do
                      {
                        char v69 = *--v59;
                        *(_BYTE *)--size_t v61 = v69;
                      }

                      while (v59 != v48);
LABEL_98:
                      __int128 v64 = (_BYTE *)v63[66];
                      goto LABEL_99;
                    }

                    std::string::__assign_no_alias<true>( v36,  v149.__r_.__value_.__l.__data_,  v149.__r_.__value_.__l.__size_);
                  }
                }

                int v39 = (char)v149.__r_.__value_.__s.__size_;
                *(void *)(a1[6] + 528LL) = *(void *)(a1[6] + 520LL);
                if (v39 < 0) {
                  operator delete(v149.__r_.__value_.__l.__data_);
                }
                goto LABEL_63;
              }

              if (!LOBYTE(v151[0]))
              {
                uint64_t v31 = (os_log_s *)__nwlog_obj();
                os_log_type_t v32 = type.__r_.__value_.__s.__data_[0];
                if (os_log_type_enabled(v31, (os_log_type_t)type.__r_.__value_.__s.__data_[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http_sniffing_should_sniff";
                  int v33 = "%{public}s called with null header_fields, backtrace limit exceeded";
                  goto LABEL_278;
                }

                goto LABEL_279;
              }

              v118 = (char *)__nw_create_backtrace_string();
              uint64_t v31 = (os_log_s *)__nwlog_obj();
              os_log_type_t v32 = type.__r_.__value_.__s.__data_[0];
              BOOL v135 = os_log_type_enabled(v31, (os_log_type_t)type.__r_.__value_.__s.__data_[0]);
              if (!v118)
              {
                if (v135)
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_http_sniffing_should_sniff";
                  int v33 = "%{public}s called with null header_fields, no backtrace";
                  goto LABEL_278;
                }

                goto LABEL_279;
              }

              if (v135)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http_sniffing_should_sniff";
                *(_WORD *)&_BYTE buf[12] = 2082;
                *(void *)&buf[14] = v118;
                __int128 v120 = "%{public}s called with null header_fields, dumping backtrace:%{public}s";
                goto LABEL_230;
              }

          if (v132) {
            free(v132);
          }
          size_t v58 = 0LL;
          goto LABEL_70;
        }

        char v65 = v47[8];
        if (!v65) {
          goto LABEL_86;
        }
        if (nw_group_descriptor_get_type(v65) == 2)
        {
LABEL_82:
          unint64_t v67 = v37[11];
          *(void *)v180 = MEMORY[0x1895F87A8];
          *(void *)&v180[8] = 3221225472LL;
          *(void *)&v180[16] = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_2_168;
          v181 = (char *)&unk_189BB7400;
          v182 = v47;
          nw_listener_set_new_connection_handler(v67, v180);

          goto LABEL_105;
        }

        char v66 = v47[8];
        if (!v66) {
          goto LABEL_86;
        }
        if (!v47[8])
        {
LABEL_86:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v71 = (id)gLogObj;
          *(_DWORD *)v180 = 136446210;
          *(void *)&v180[4] = "nw_connection_group_set_up_and_start_listener_locked";
          uint64_t v72 = (char *)_os_log_send_and_compose_impl();

          handler[0] = 16;
          v169[0] = OS_LOG_TYPE_DEFAULT;
          if (handler[0] == 17)
          {
            __nwlog_obj();
            unsigned __int16 v73 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            uint64_t v74 = handler[0];
            if (os_log_type_enabled(v73, (os_log_type_t)handler[0]))
            {
              *(_DWORD *)v180 = 136446210;
              *(void *)&v180[4] = "nw_connection_group_set_up_and_start_listener_locked";
              _os_log_impl(&dword_181A5C000, v73, v74, "%{public}s Group descriptor is not set", v180, 0xCu);
            }
          }

          else if (v169[0])
          {
            int v75 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            unsigned __int16 v73 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            std::string::size_type v76 = handler[0];
            unsigned __int8 v77 = os_log_type_enabled(v73, (os_log_type_t)handler[0]);
            if (v75)
            {
              if (v77)
              {
                *(_DWORD *)v180 = 136446466;
                *(void *)&v180[4] = "nw_connection_group_set_up_and_start_listener_locked";
                *(_WORD *)&v180[12] = 2082;
                *(void *)&v180[14] = v75;
                _os_log_impl( &dword_181A5C000,  v73,  v76,  "%{public}s Group descriptor is not set, dumping backtrace:%{public}s",  v180,  0x16u);
              }

              free(v75);
              if (!v72) {
                goto LABEL_105;
              }
              goto LABEL_104;
            }

            if (v77)
            {
              *(_DWORD *)v180 = 136446210;
              *(void *)&v180[4] = "nw_connection_group_set_up_and_start_listener_locked";
              _os_log_impl( &dword_181A5C000,  v73,  v76,  "%{public}s Group descriptor is not set, no backtrace",  v180,  0xCu);
            }
          }

          else
          {
            __nwlog_obj();
            unsigned __int16 v73 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            BOOL v78 = handler[0];
            if (os_log_type_enabled(v73, (os_log_type_t)handler[0]))
            {
              *(_DWORD *)v180 = 136446210;
              *(void *)&v180[4] = "nw_connection_group_set_up_and_start_listener_locked";
              _os_log_impl( &dword_181A5C000,  v73,  v78,  "%{public}s Group descriptor is not set, backtrace limit exceeded",  v180,  0xCu);
            }
          }

          goto LABEL_102;
        }

        __nwlog_obj();
        __int128 v68 = (void *)objc_claimAutoreleasedReturnValue();
        char v69 = nw_group_descriptor_get_type(v47[8]);
        if (v69 > 4) {
          uint64_t v70 = "unknown";
        }
        else {
          uint64_t v70 = off_189BB74C8[v69];
        }
        *(_DWORD *)v180 = 136446466;
        *(void *)&v180[4] = "nw_connection_group_set_up_and_start_listener_locked";
        *(_WORD *)&v180[12] = 2080;
        *(void *)&v180[14] = v70;
        uint64_t v72 = (char *)_os_log_send_and_compose_impl();

        handler[0] = 16;
        v169[0] = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v72, handler, v169))
        {
          if (handler[0] == 17)
          {
            __nwlog_obj();
            unsigned __int16 v73 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            unsigned int v79 = handler[0];
            if (os_log_type_enabled(v73, (os_log_type_t)handler[0]))
            {
              BOOL v80 = nw_group_descriptor_get_type(v47[8]);
              if (v80 > 4) {
                BOOL v81 = "unknown";
              }
              else {
                BOOL v81 = off_189BB74C8[v80];
              }
              *(_DWORD *)v180 = 136446466;
              *(void *)&v180[4] = "nw_connection_group_set_up_and_start_listener_locked";
              *(_WORD *)&v180[12] = 2080;
              *(void *)&v180[14] = v81;
              _os_log_impl(&dword_181A5C000, v73, v79, "%{public}s Unsupported group descriptor type: %s", v180, 0x16u);
            }

              goto LABEL_294;
            }

            if (!v134)
            {
              __nwlog_obj();
              __int128 v68 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v126 = v135;
              if (os_log_type_enabled(v68, v135))
              {
                os_log_type_t v127 = a2->identifier;
                if (!v127) {
                  os_log_type_t v127 = (nw_protocol_identifier *)"invalid";
                }
                *(_DWORD *)buf = 136446722;
                os_log_type_t v141 = "__nw_protocol_disconnected";
                BOOL v142 = 2082;
                os_log_type_t v143 = (nw_protocol *)v127;
                uint64_t v144 = 2048;
                uint64_t v145 = a2;
                _os_log_impl( &dword_181A5C000,  v68,  v126,  "%{public}s protocol %{public}s (%p) has invalid disconnected callback, backtrace limit exceeded",  buf,  0x20u);
              }

              goto LABEL_293;
            }

            int v86 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            __int128 v68 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            std::string::value_type v111 = v135;
            uint64_t v112 = os_log_type_enabled(v68, v135);
            if (!v86)
            {
              if (v112)
              {
                BOOL v128 = a2->identifier;
                if (!v128) {
                  BOOL v128 = (nw_protocol_identifier *)"invalid";
                }
                *(_DWORD *)buf = 136446722;
                os_log_type_t v141 = "__nw_protocol_disconnected";
                BOOL v142 = 2082;
                os_log_type_t v143 = (nw_protocol *)v128;
                uint64_t v144 = 2048;
                uint64_t v145 = a2;
                _os_log_impl( &dword_181A5C000,  v68,  v111,  "%{public}s protocol %{public}s (%p) has invalid disconnected callback, no backtrace",  buf,  0x20u);
              }

              goto LABEL_293;
            }

            if (v112)
            {
              __int16 v113 = a2->identifier;
              if (!v113) {
                __int16 v113 = (nw_protocol_identifier *)"invalid";
              }
              *(_DWORD *)buf = 136446978;
              os_log_type_t v141 = "__nw_protocol_disconnected";
              BOOL v142 = 2082;
              os_log_type_t v143 = (nw_protocol *)v113;
              uint64_t v144 = 2048;
              uint64_t v145 = a2;
              os_log_type_t v146 = 2082;
              v147 = v86;
              _os_log_impl( &dword_181A5C000,  v68,  v111,  "%{public}s protocol %{public}s (%p) has invalid disconnected callback, dumping backtrace:%{public}s",  buf,  0x2Au);
            }

              if (stackc) {
                free(stackc);
              }
              goto LABEL_181;
            }

            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            __int128 v120 = (id)gLogObj;
            *(_DWORD *)v213 = 136446210;
            v214 = "nw_endpoint_handler_create_with_existing";
            os_log_type_t v121 = (const char *)_os_log_send_and_compose_impl();

            v203 = OS_LOG_TYPE_ERROR;
            v202 = 0;
            BOOL v122 = (char *)v121;
            if ((__nwlog_fault(v121, &v203, &v202) & 1) == 0)
            {
LABEL_199:
              if (v122) {
                free(v122);
              }
              goto LABEL_201;
            }

            if (v203 == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              BOOL v123 = (os_log_s *)(id)gLogObj;
              int v124 = v203;
              if (os_log_type_enabled(v123, v203))
              {
                *(_DWORD *)v213 = 136446210;
                v214 = "nw_endpoint_handler_create_with_existing";
                _os_log_impl( &dword_181A5C000,  v123,  v124,  "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed",  v213,  0xCu);
              }
            }

            else if (v202)
            {
              BOOL v125 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              BOOL v123 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v126 = v203;
              os_log_type_t v127 = os_log_type_enabled(v123, v203);
              if (v125)
              {
                if (v127)
                {
                  *(_DWORD *)v213 = 136446466;
                  v214 = "nw_endpoint_handler_create_with_existing";
                  v215 = 2082;
                  v216 = v125;
                  _os_log_impl( &dword_181A5C000,  v123,  v126,  "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed, dumping backtrace:%{public}s",  v213,  0x16u);
                }

                free(v125);
                goto LABEL_198;
              }

              if (v127)
              {
                *(_DWORD *)v213 = 136446210;
                v214 = "nw_endpoint_handler_create_with_existing";
                _os_log_impl( &dword_181A5C000,  v123,  v126,  "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed, no backtrace",  v213,  0xCu);
              }
            }

            else
            {
              __nwlog_obj();
              BOOL v123 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              BOOL v128 = v203;
              if (os_log_type_enabled(v123, v203))
              {
                *(_DWORD *)v213 = 136446210;
                v214 = "nw_endpoint_handler_create_with_existing";
                _os_log_impl( &dword_181A5C000,  v123,  v128,  "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed, backtrace limit exceeded",  v213,  0xCu);
              }
            }

LABEL_198:
            BOOL v122 = (char *)v121;
            goto LABEL_199;
          }

          v176 = v30->parameters;
          v167 = nw_parameters_copy_effective_proxy_config(v176);
          if (!v167)
          {
            if ((v26[67] & 0x20) != 0)
            {
LABEL_159:

              goto LABEL_177;
            }

            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            BOOL v78 = (os_log_s *)(id)gconnectionLogObj;
            if (!os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
            {
LABEL_158:

              goto LABEL_159;
            }

            id_string = nw_endpoint_handler_get_id_string(v26);
            __int128 v161 = nw_endpoint_handler_dry_run_string(v26);
            stack = v78;
            v159 = id_string;
            optionsb = nw_endpoint_handler_copy_endpoint(v26);
            BOOL v80 = nw_endpoint_get_logging_description(optionsb);
            BOOL v81 = nw_endpoint_handler_state_string(v26);
            int v82 = nw_endpoint_handler_mode_string(v26);
            id v83 = nw_endpoint_handler_copy_current_path(v26);
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_existing";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = v159;
            *(_WORD *)&buf[22] = 2082;
            v205 = v161;
            *(_WORD *)v206 = 2082;
            *(void *)&v206[2] = v80;
            v207 = 2082;
            v208 = (void *)v81;
            v209 = 2082;
            v210 = v82;
            v211 = 2114;
            v212 = v83;
            _os_log_impl( &dword_181A5C000,  stack,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] no effective proxy config",  buf,  0x48u);

LABEL_157:
            BOOL v78 = stack;
            goto LABEL_158;
          }

          uint64_t v31 = (id *)v27;
          stack = (os_log_s *)v31[19];

          options = nw_protocol_stack_copy_transport_protocol(stack);
          v160 = nw_protocol_stack_copy_internet_protocol(stack);
          os_log_type_t v32 = v167;
          LODWORD(v31) = v32[38];

          if ((_DWORD)v31 != 1)
          {
LABEL_156:
            nw_parameters_log_protocol_instances(v176);

            goto LABEL_157;
          }

          *(_DWORD *)v213 = 4;
          nw_proxy_config_remove_protocols_from_stack(v32, stack);
          int v33 = nw_protocol_options_copy_definition(options);
          int v34 = nw_proxy_config_copy_protocol_stack(v32, v33, v213);

          if (!v34)
          {
LABEL_155:

            goto LABEL_156;
          }

          if (*(_DWORD *)v213 == 2)
          {
            unsigned __int8 v36 = stack;
            nw_protocol_stack_append_application_protocol(stack, options);
            uint64_t v35 = v160;
          }

          else
          {
            uint64_t v35 = options;
            unsigned __int8 v36 = stack;
            if (*(_DWORD *)v213 != 3) {
              goto LABEL_152;
            }
          }

          nw_protocol_stack_append_application_protocol(v36, v35);
LABEL_152:
          *(void *)buf = v18;
          *(void *)&buf[8] = 3221225472LL;
          *(void *)&buf[16] = __nw_endpoint_handler_create_with_existing_block_invoke;
          v205 = (const char *)&unk_189BC5C80;
          BOOL v101 = v36;
          *(void *)v206 = v101;
          nw_protocol_stack_iterate_application_protocols((nw_protocol_stack_t)v34, buf);
          uint64_t v102 = nw_protocol_stack_copy_transport_protocol((nw_protocol_stack_t)v34);
          if (v102)
          {
            nw_protocol_stack_set_original_proxied_transport_protocol(v101, options);
            nw_protocol_stack_set_transport_protocol(v101, v102);
          }

          goto LABEL_155;
        }

        if ((v26[67] & 0x20) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          unint64_t v55 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
          {
            if ((v26[67] & 1) != 0) {
              size_t v56 = "dry-run ";
            }
            else {
              size_t v56 = "";
            }
            size_t v57 = nw_endpoint_handler_copy_endpoint(v185);
            size_t v58 = nw_endpoint_get_logging_description(v57);
            BOOL v59 = v185[30];
            v177 = v58;
            else {
              size_t v60 = off_189BBBBF0[v59];
            }
            v174 = v60;
            v181 = v56;
            char v66 = v185;
            unint64_t v67 = (os_unfair_lock_s *)v66;
            os_log_type_t loga = v57;
            __int128 v68 = "path";
            switch(v185[29])
            {
              case 0:
                break;
              case 1:
                __int128 v68 = "resolver";
                break;
              case 2:
                __int128 v68 = nw_endpoint_flow_mode_string(*((void **)v66 + 31));
                break;
              case 3:
                __int128 v68 = "proxy";
                break;
              case 4:
                __int128 v68 = "fallback";
                break;
              case 5:
                __int128 v68 = "transform";
                break;
              default:
                __int128 v68 = "unknown-mode";
                break;
            }

            char v84 = v67 + 28;
            uint64_t v85 = v67;
            os_unfair_lock_lock(v67 + 28);
            int v86 = v85[8];
            os_unfair_lock_unlock(v84);

            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_create_with_existing";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = v185 + 42;
            *(_WORD *)&buf[22] = 2082;
            v205 = v181;
            *(_WORD *)v206 = 2082;
            *(void *)&v206[2] = v177;
            v207 = 2082;
            v208 = (void *)v174;
            v209 = 2082;
            v210 = v68;
            v211 = 2114;
            v212 = v86;
            _os_log_impl( &dword_181A5C000,  v55,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Existing endpoint handler not eligible for peel-off",  buf,  0x48u);
          }
        }

              v269 = nw_endpoint_handler_get_minimize_logging(v471);
              v270 = nw_endpoint_handler_get_logging_disabled(v471);
              if (v269)
              {
                if ((v270 & 1) != 0) {
                  goto LABEL_302;
                }
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                v258 = (os_log_s *)(id)gconnectionLogObj;
                if (os_log_type_enabled(v258, OS_LOG_TYPE_DEBUG))
                {
                  v394 = nw_endpoint_handler_get_id_string(v471);
                  v395 = nw_endpoint_handler_dry_run_string(v471);
                  v396 = nw_endpoint_handler_copy_endpoint(v471);
                  v397 = nw_endpoint_get_logging_description(v396);
                  v398 = nw_endpoint_handler_state_string(v471);
                  v399 = nw_endpoint_handler_mode_string(v471);
                  v400 = nw_endpoint_handler_copy_current_path(v471);
                  v401 = *((_BYTE *)loga + 97);
                  v402 = nw_endpoint_handler_get_id_string(v474);
                  *(_DWORD *)buf = 136448770;
                  v481 = "nw_endpoint_proxy_receive_report";
                  v403 = "";
                  v483 = (uint64_t)v394;
                  v482 = 2082;
                  if ((v401 & 4) == 0) {
                    v403 = " during establishment";
                  }
                  v484 = 2082;
                  v485 = (uint64_t)v395;
                  v486 = 2082;
                  v487 = v397;
                  v488 = 2082;
                  v489 = v398;
                  v490 = 2082;
                  v491 = v399;
                  v492 = 2114;
                  v493 = v400;
                  v494 = 1024;
                  *(_DWORD *)v495 = error_code;
                  *(_WORD *)&v495[4] = 2082;
                  *(void *)&v495[6] = v403;
                  *(_WORD *)&v495[14] = 2082;
                  *(void *)&v495[16] = v402;
                  *(_WORD *)&v495[24] = 2114;
                  *(void *)&v495[26] = v461;
                  _os_log_impl( &dword_181A5C000,  v258,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy faile d with error %d%{public}s, allowed to fail open ([C%{public}s] %{public}@)",  buf,  0x6Cu);
                }

                goto LABEL_301;
              }

              if ((v270 & 1) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                v258 = (os_log_s *)(id)gconnectionLogObj;
                if (os_log_type_enabled(v258, OS_LOG_TYPE_INFO))
                {
                  v271 = nw_endpoint_handler_get_id_string(v471);
                  v272 = nw_endpoint_handler_dry_run_string(v471);
                  v273 = nw_endpoint_handler_copy_endpoint(v471);
                  v274 = nw_endpoint_get_logging_description(v273);
                  v275 = nw_endpoint_handler_state_string(v471);
                  v276 = nw_endpoint_handler_mode_string(v471);
                  v277 = nw_endpoint_handler_copy_current_path(v471);
                  v278 = *((_BYTE *)loga + 97);
                  v279 = nw_endpoint_handler_get_id_string(v474);
                  *(_DWORD *)buf = 136448770;
                  v481 = "nw_endpoint_proxy_receive_report";
                  v280 = "";
                  v483 = (uint64_t)v271;
                  v482 = 2082;
                  if ((v278 & 4) == 0) {
                    v280 = " during establishment";
                  }
                  v484 = 2082;
                  v485 = (uint64_t)v272;
                  v486 = 2082;
                  v487 = v274;
                  v488 = 2082;
                  v489 = v275;
                  v490 = 2082;
                  v491 = v276;
                  v492 = 2114;
                  v493 = v277;
                  v494 = 1024;
                  *(_DWORD *)v495 = error_code;
                  *(_WORD *)&v495[4] = 2082;
                  *(void *)&v495[6] = v280;
                  *(_WORD *)&v495[14] = 2082;
                  *(void *)&v495[16] = v279;
                  *(_WORD *)&v495[24] = 2114;
                  *(void *)&v495[26] = v461;
                  _os_log_impl( &dword_181A5C000,  v258,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Privacy proxy faile d with error %d%{public}s, allowed to fail open ([C%{public}s] %{public}@)",  buf,  0x6Cu);
                }

                goto LABEL_301;
              }

LABEL_247:
    if (!v109)
    {
LABEL_249:
      memset(&v149, 0, sizeof(v149));
      uint64_t v23 = a1[6];
      goto LABEL_24;
    }

  v118 = v113;
  BOOL v119 = [v118 type];

  if (v119 == 2)
  {
    if ((*(_WORD *)(a1 + 368) & 0x100) != 0) {
      __int128 v120 = "https";
    }
    else {
      __int128 v120 = "http";
    }
    os_log_type_t v121 = nw_endpoint_get_hostname((nw_endpoint_t)v118);
    port = nw_endpoint_get_port((nw_endpoint_t)v118);
    BOOL v123 = CFStringCreateWithFormat(v41, 0LL, @"%s://%s:%d/", v120, v121, port);
    goto LABEL_262;
  }

  if (nw_endpoint_get_type((nw_endpoint_t)v118) == nw_endpoint_type_address)
  {
    BOOL v125 = nw_endpoint_copy_address_string((nw_endpoint_t)v118);
    if (v125)
    {
      os_log_type_t v126 = v125;
      if ((*(_WORD *)(a1 + 368) & 0x100) != 0) {
        os_log_type_t v127 = "https";
      }
      else {
        os_log_type_t v127 = "http";
      }
      BOOL v128 = nw_endpoint_get_port((nw_endpoint_t)v118);
      BOOL v123 = CFStringCreateWithFormat(v41, 0LL, @"%s://%s:%d/", v127, v126, v128);
      free(v126);
LABEL_262:
      os_release(v118);
      if (v123)
      {
        *(void *)(a1 + 216) = CFURLCreateWithString(v41, v123, 0LL);
        CFRelease(v123);
      }

      goto LABEL_265;
    }
  }

  os_release(v118);
LABEL_265:
  *(void *)(a1 + 192) = CFRetain(Request);
  if (v29) {
    free(v29);
  }
  free(v40);
LABEL_7:
  if ((*(_WORD *)(a1 + 368) & 0x80) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v5 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_http_connect_send_request";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = a1 + 284;
      *(_WORD *)&buf[22] = 2080;
      v171 = " ";
      LOWORD(v172) = 2048;
      *(void *)((char *)&v172 + 2) = Request;
      _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sSending http_message %p",  buf,  0x2Au);
    }
  }

  uint64_t v6 = CFHTTPMessageCopySerializedMessage(Request);
  if (!v6)
  {
    if ((*(_WORD *)(a1 + 368) & 0x80) != 0)
    {
LABEL_120:
      if (Request) {
        CFRelease(Request);
      }
      return 0LL;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v30 = a1 + 284;
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_http_connect_send_request";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = a1 + 284;
    *(_WORD *)&buf[22] = 2080;
    v171 = " ";
    uint64_t v31 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v161[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v31, type, v161))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v32 = (os_log_s *)gLogObj;
        int v33 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_118;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_send_request";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = v30;
        *(_WORD *)&buf[22] = 2080;
        v171 = " ";
        int v34 = "%{public}s %{public}s%sCFHTTPMessageCopySerializedMessage failed";
        goto LABEL_117;
      }

      if (v161[0] == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v32 = (os_log_s *)gLogObj;
        int v33 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_118;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_send_request";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = v30;
        *(_WORD *)&buf[22] = 2080;
        v171 = " ";
        int v34 = "%{public}s %{public}s%sCFHTTPMessageCopySerializedMessage failed, backtrace limit exceeded";
        goto LABEL_117;
      }

      uint64_t v52 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v32 = (os_log_s *)gLogObj;
      int v33 = type[0];
      unint64_t v53 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (v52)
      {
        if (v53)
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http_connect_send_request";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v30;
          *(_WORD *)&buf[22] = 2080;
          v171 = " ";
          LOWORD(v172) = 2082;
          *(void *)((char *)&v172 + 2) = v52;
          _os_log_impl( &dword_181A5C000,  v32,  v33,  "%{public}s %{public}s%sCFHTTPMessageCopySerializedMessage failed, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v52);
        goto LABEL_118;
      }

      if (v53)
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_send_request";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = v30;
        *(_WORD *)&buf[22] = 2080;
        v171 = " ";
        int v34 = "%{public}s %{public}s%sCFHTTPMessageCopySerializedMessage failed, no backtrace";
LABEL_117:
        _os_log_impl(&dword_181A5C000, v32, v33, v34, buf, 0x20u);
      }
    }

      free(v154);
      if (!v144)
      {
LABEL_335:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http1_error";
        std::string v148 = (char *)_os_log_send_and_compose_impl();
        v237[0] = 16;
        LOBYTE(v231) = 0;
        if (v237[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          std::string v149 = (os_log_s *)gLogObj;
          char v150 = v237[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v237[0])) {
            goto LABEL_371;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_error";
          os_log_type_t v151 = "%{public}s called with null http1";
        }

        else if ((_BYTE)v231)
        {
          v191 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          std::string v149 = (os_log_s *)gLogObj;
          char v150 = v237[0];
          v192 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v237[0]);
          if (v191)
          {
            if (v192)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_protocol_http1_error";
              *(_WORD *)&_BYTE buf[12] = 2082;
              *(void *)&buf[14] = v191;
              _os_log_impl( &dword_181A5C000,  v149,  v150,  "%{public}s called with null http1, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v191);
LABEL_371:
            if (!v148) {
              return;
            }
            goto LABEL_372;
          }

          if (!v192) {
            goto LABEL_371;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_error";
          os_log_type_t v151 = "%{public}s called with null http1, no backtrace";
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          std::string v149 = (os_log_s *)gLogObj;
          char v150 = v237[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v237[0])) {
            goto LABEL_371;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_error";
          os_log_type_t v151 = "%{public}s called with null http1, backtrace limit exceeded";
        }

        goto LABEL_370;
      }

        free(v100);
        goto LABEL_248;
      }

      uint64_t v95 = v18;
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v140 = "nw_http1_connection_write_chunk_header";
      __int16 v100 = (char *)_os_log_send_and_compose_impl();
      v138 = OS_LOG_TYPE_ERROR;
      BOOL v137 = 0;
      if (v138 == OS_LOG_TYPE_FAULT)
      {
        BOOL v101 = (os_log_s *)__nwlog_obj();
        uint64_t v102 = v138;
        if (!os_log_type_enabled(v101, v138)) {
          goto LABEL_246;
        }
        *(_DWORD *)buf = 136446210;
        v140 = "nw_http1_connection_write_chunk_header";
        int v103 = "%{public}s called with null buffer";
        goto LABEL_244;
      }

      if (!v137)
      {
        BOOL v101 = (os_log_s *)__nwlog_obj();
        uint64_t v102 = v138;
        if (!os_log_type_enabled(v101, v138)) {
          goto LABEL_246;
        }
        *(_DWORD *)buf = 136446210;
        v140 = "nw_http1_connection_write_chunk_header";
        int v103 = "%{public}s called with null buffer, backtrace limit exceeded";
        goto LABEL_244;
      }

      uint64_t v115 = (char *)__nw_create_backtrace_string();
      BOOL v119 = (os_log_s *)__nwlog_obj();
      uint64_t v102 = v138;
      __int16 v132 = v119;
      __int128 v120 = os_log_type_enabled(v119, v138);
      if (v115)
      {
        if (!v120) {
          goto LABEL_197;
        }
        *(_DWORD *)buf = 136446466;
        v140 = "nw_http1_connection_write_chunk_header";
        os_log_type_t v141 = 2082;
        BOOL v142 = v115;
        v118 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
        goto LABEL_196;
      }

      if (!v120) {
        goto LABEL_246;
      }
      *(_DWORD *)buf = 136446210;
      v140 = "nw_http1_connection_write_chunk_header";
      int v103 = "%{public}s called with null buffer, no backtrace";
    }

    else
    {
      uint64_t v95 = 0;
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v140 = "nw_http1_connection_write_chunk_header";
      __int16 v100 = (char *)_os_log_send_and_compose_impl();
      v138 = OS_LOG_TYPE_ERROR;
      BOOL v137 = 0;
      if (v138 == OS_LOG_TYPE_FAULT)
      {
        BOOL v101 = (os_log_s *)__nwlog_obj();
        uint64_t v102 = v138;
        if (!os_log_type_enabled(v101, v138)) {
          goto LABEL_246;
        }
        *(_DWORD *)buf = 136446210;
        v140 = "nw_http1_connection_write_chunk_header";
        int v103 = "%{public}s called with null size";
LABEL_244:
        os_log_type_t v131 = v101;
LABEL_245:
        _os_log_impl(&dword_181A5C000, v131, v102, v103, buf, 0xCu);
        goto LABEL_246;
      }

      if (!v137)
      {
        BOOL v101 = (os_log_s *)__nwlog_obj();
        uint64_t v102 = v138;
        if (!os_log_type_enabled(v101, v138)) {
          goto LABEL_246;
        }
        *(_DWORD *)buf = 136446210;
        v140 = "nw_http1_connection_write_chunk_header";
        int v103 = "%{public}s called with null size, backtrace limit exceeded";
        goto LABEL_244;
      }

      uint64_t v115 = (char *)__nw_create_backtrace_string();
      uint64_t v116 = (os_log_s *)__nwlog_obj();
      uint64_t v102 = v138;
      __int16 v132 = v116;
      BOOL v117 = os_log_type_enabled(v116, v138);
      if (v115)
      {
        if (!v117) {
          goto LABEL_197;
        }
        *(_DWORD *)buf = 136446466;
        v140 = "nw_http1_connection_write_chunk_header";
        os_log_type_t v141 = 2082;
        BOOL v142 = v115;
        v118 = "%{public}s called with null size, dumping backtrace:%{public}s";
        goto LABEL_196;
      }

      if (!v117) {
        goto LABEL_246;
      }
      *(_DWORD *)buf = 136446210;
      v140 = "nw_http1_connection_write_chunk_header";
      int v103 = "%{public}s called with null size, no backtrace";
    }

            __break(1u);
            JUMPOUT(0x182402484LL);
          }

          if ((*(_WORD *)(a1 + 397) & 0x80) != 0) {
            return 0LL;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v16 = gconnectionLogObj;
          if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR)) {
            return 0LL;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_socket_copy_info";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = a1 + 404;
          uint64_t v17 = "%{public}s %{public}s Can't get TCP_INFO on a multipath socket";
LABEL_106:
          uint64_t v26 = (os_log_s *)v16;
          id v27 = OS_LOG_TYPE_ERROR;
          goto LABEL_107;
        }
      }

      char v4 = 0LL;
      if ((*(_WORD *)(a1 + 397) & 0x80) != 0 || !gLogDatapath) {
        return (void *)v4;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v25 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_socket_copy_info";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = a1 + 404;
        uint64_t v17 = "%{public}s %{public}s ignoring tcp_info request for non-TCP socket";
LABEL_72:
        uint64_t v26 = (os_log_s *)v25;
        id v27 = OS_LOG_TYPE_DEBUG;
LABEL_107:
        _os_log_impl(&dword_181A5C000, v26, v27, v17, buf, 0x16u);
      }

      return 0LL;
    case 2:
      if (*(_DWORD *)(a1 + 272) != 2 || (BOOL v12 = *(unsigned __int8 *)(a1 + 400), v12 != 30) && v12 != 2)
      {
        char v4 = 0LL;
        if ((*(_WORD *)(a1 + 397) & 0x80) != 0 || !gLogDatapath) {
          return (void *)v4;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v25 = gconnectionLogObj;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG)) {
          return 0LL;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_socket_copy_info";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = a1 + 404;
        uint64_t v17 = "%{public}s %{public}s ignoring tcp_connection_info request for non-TCP socket";
        goto LABEL_72;
      }

      *(_DWORD *)int v86 = 112;
      if (((*(unsigned __int16 *)(a1 + 397) | (*(unsigned __int8 *)(a1 + 399) << 16)) & 0x20000) == 0)
      {
        char v4 = (uint64_t)malloc(0x70uLL);
        if (!v4)
        {
          BOOL v80 = (os_log_s *)__nwlog_obj();
          os_log_type_enabled(v80, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "strict_malloc";
          *(_WORD *)&_BYTE buf[12] = 2048;
          *(void *)&buf[14] = 112LL;
          BOOL v81 = (void *)_os_log_send_and_compose_impl();
          free(v81);
        }

        if (getsockopt(*(_DWORD *)(a1 + 268), 6, 262, (void *)v4, (socklen_t *)v86))
        {
          std::string::size_type v13 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          id v14 = (os_log_s *)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_socket_copy_info";
            *(_WORD *)&_BYTE buf[12] = 2080;
            *(void *)&buf[14] = a1 + 404;
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&_BYTE buf[24] = v13;
            _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_ERROR,  "%{public}s %s getsockopt TCP_CONNECTION_INFO failed %{darwin.errno}d",  buf,  0x1Cu);
          }

          id v15 = (os_log_s *)__nwlog_obj();
          uint64_t v10 = v15;
          if (v13 == 102)
          {
            if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
              goto LABEL_211;
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_socket_copy_info";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 102;
            __int16 v11 = "%{public}s getsockopt TCP_CONNECTION_INFO failed %{darwin.errno}d";
            goto LABEL_34;
          }

          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_socket_copy_info";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = v13;
          uint64_t v62 = (const char *)_os_log_send_and_compose_impl();
          LOBYTE(v85[0]) = 16;
          LOBYTE(v84) = 0;
          if (LOBYTE(v85[0]) == 17)
          {
            uint64_t v63 = (os_log_s *)__nwlog_obj();
            __int128 v64 = v85[0];
            if (os_log_type_enabled(v63, v85[0]))
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_socket_copy_info";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = v13;
              char v65 = "%{public}s getsockopt TCP_CONNECTION_INFO failed %{darwin.errno}d";
LABEL_207:
              _os_log_impl(&dword_181A5C000, v63, v64, v65, buf, 0x12u);
            }
            }

            os_log_type_t v107 = (char *)v351;
          }

          if (v107) {
            free(v107);
          }
          int64_t v50 = 0;
          if ((v46 & 1) != 0) {
LABEL_87:
          }
            nw::release_if_needed<nw_protocol *>((uint64_t *)v370);
LABEL_88:
          if ((v374 & 1) != 0)
          {
            nw::release_if_needed<nw_protocol *>((uint64_t *)v373);
            if ((v376 & 1) == 0) {
              goto LABEL_90;
            }
          }

          else if ((v376 & 1) == 0)
          {
LABEL_90:
            if ((v50 & 1) == 0) {
              goto LABEL_674;
            }
LABEL_94:
            unsigned int v51 = *(void *)(v359 + 32);
            uint64_t v52 = v51 == v10 || v51 == 0;
            __int16 v11 = 1;
            if (v52 && v51 != protocol_for_definition)
            {
              if (v51)
              {
                if (*(_UNKNOWN **)(v51 + 40) == &nw_protocol_ref_counted_handle)
                {
                  int v82 = *(void *)(v51 + 88);
                  if (v82)
                  {
                    id v83 = v82 - 1;
                    *(void *)(v51 + 88) = v83;
                    if (!v83)
                    {
                      char v84 = *(void (***)(void))(v51 + 64);
                      if (v84)
                      {
                        *(void *)(v51 + 64) = 0LL;
                        v84[2](v84);
                        _Block_release(v84);
                      }

                      if ((*(_BYTE *)(v51 + 72) & 1) != 0)
                      {
                        uint64_t v85 = *(const void **)(v51 + 64);
                        if (v85) {
                          _Block_release(v85);
                        }
                      }

                      free((void *)v51);
                    }
                  }
                }
              }

              *(void *)(v359 + 32) = protocol_for_definition;
              if (*(_UNKNOWN **)(protocol_for_definition + 40) == &nw_protocol_ref_counted_handle)
              {
                unint64_t v53 = *(void *)(protocol_for_definition + 88);
                if (v53) {
                  *(void *)(protocol_for_definition + 88) = v53 + 1;
                }
              }
            }

            size_t v21 = protocol_for_definition;
            goto LABEL_141;
          }

          nw::release_if_needed<nw_protocol *>((uint64_t *)v375);
          if ((v50 & 1) == 0) {
            goto LABEL_674;
          }
          goto LABEL_94;
        }

        if (!v21)
        {
          if (*(_UNKNOWN **)(v10 + 40) == &nw_protocol_ref_counted_handle)
          {
            int v86 = *(void *)(v10 + 88);
            if (v86) {
              *(void *)(v10 + 88) = v86 + 1;
            }
            *(void *)v375 = v10;
            char v65 = v376 | 1;
          }

          else
          {
            *(void *)v375 = v10;
            char v65 = v376 & 0xFE;
          }

          v376 = v65;
          if (v359)
          {
            if (*(_UNKNOWN **)(v359 + 40) == &nw_protocol_ref_counted_handle)
            {
              int v88 = *(void *)(v359 + 88);
              if (v88) {
                *(void *)(v359 + 88) = v88 + 1;
              }
              *(void *)v373 = v359;
              uint64_t v87 = v374 | 1;
            }

            else
            {
              *(void *)v373 = v359;
              uint64_t v87 = v374 & 0xFE;
            }

            v374 = v87;
            int v89 = *(void *)(v10 + 24);
            if (v89)
            {
              __int16 v90 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v89 + 8);
              if (v90)
              {
                uint64_t v91 = v90(v10, v359, 1LL);
                if ((v374 & 1) != 0) {
                  goto LABEL_206;
                }
                goto LABEL_207;
              }
            }

            __nwlog_obj();
            v133 = (void *)objc_claimAutoreleasedReturnValue();
            uint64_t v134 = *(const char **)(v10 + 16);
            if (!v134) {
              uint64_t v134 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            v378 = "__nw_protocol_remove_input_handler";
            v379 = 2082;
            v380 = (char *)v134;
            v381 = 2048;
            v382 = (const char *)v10;
            BOOL v135 = (char *)_os_log_send_and_compose_impl();

            v370[0] = OS_LOG_TYPE_ERROR;
            std::string type = OS_LOG_TYPE_DEFAULT;
            if (__nwlog_fault(v135, v370, &type))
            {
              if (v370[0] == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                uint64_t v136 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                BOOL v137 = v370[0];
                if (os_log_type_enabled(v136, v370[0]))
                {
                  v138 = *(const char **)(v10 + 16);
                  if (!v138) {
                    v138 = "invalid";
                  }
                  *(_DWORD *)buf = 136446722;
                  v378 = "__nw_protocol_remove_input_handler";
                  v379 = 2082;
                  v380 = (char *)v138;
                  v381 = 2048;
                  v382 = (const char *)v10;
                  _os_log_impl( &dword_181A5C000,  v136,  v137,  "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback",  buf,  0x20u);
                }

                goto LABEL_300;
              }

              if (type)
              {
                uint64_t v155 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                char v156 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                v355 = v370[0];
                uint64_t v157 = os_log_type_enabled(v156, v370[0]);
                if (v155)
                {
                  if (v157)
                  {
                    char v158 = *(const char **)(v10 + 16);
                    if (!v158) {
                      char v158 = "invalid";
                    }
                    *(_DWORD *)buf = 136446978;
                    v378 = "__nw_protocol_remove_input_handler";
                    v379 = 2082;
                    v380 = (char *)v158;
                    v381 = 2048;
                    v382 = (const char *)v10;
                    v383 = 2082;
                    v384 = v155;
                    _os_log_impl( &dword_181A5C000,  v156,  v355,  "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, dumping backtrace:%{public}s",  buf,  0x2Au);
                  }

                  free(v155);
                }

                else
                {
                  if (v157)
                  {
                    v170 = *(const char **)(v10 + 16);
                    if (!v170) {
                      v170 = "invalid";
                    }
                    *(_DWORD *)buf = 136446722;
                    v378 = "__nw_protocol_remove_input_handler";
                    v379 = 2082;
                    v380 = (char *)v170;
                    v381 = 2048;
                    v382 = (const char *)v10;
                    _os_log_impl( &dword_181A5C000,  v156,  v355,  "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, no backtrace",  buf,  0x20u);
                  }
                }
              }

              else
              {
                __nwlog_obj();
                uint64_t v136 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                v167 = v370[0];
                if (os_log_type_enabled(v136, v370[0]))
                {
                  v168 = *(const char **)(v10 + 16);
                  if (!v168) {
                    v168 = "invalid";
                  }
                  *(_DWORD *)buf = 136446722;
                  v378 = "__nw_protocol_remove_input_handler";
                  v379 = 2082;
                  v380 = (char *)v168;
                  v381 = 2048;
                  v382 = (const char *)v10;
                  _os_log_impl( &dword_181A5C000,  v136,  v167,  "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, backtrace limit exceeded",  buf,  0x20u);
                }

LABEL_248:
    free(v109);
    goto LABEL_249;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_http_sniffing_get_input_frames_block_invoke";
  __int16 v96 = (char *)_os_log_send_and_compose_impl();
  type.__r_.__value_.__s.__data_[0] = 16;
  LOBYTE(v151[0]) = 0;
  if (__nwlog_fault(v96, &type, v151))
  {
    if (type.__r_.__value_.__s.__data_[0] == 17)
    {
      uint64_t v97 = (os_log_s *)__nwlog_obj();
      os_log_type_t v98 = type.__r_.__value_.__s.__data_[0];
      if (!os_log_type_enabled(v97, (os_log_type_t)type.__r_.__value_.__s.__data_[0])) {
        goto LABEL_213;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_sniffing_get_input_frames_block_invoke";
      unint64_t v99 = "%{public}s called with null frame";
      goto LABEL_212;
    }

    if (!LOBYTE(v151[0]))
    {
      uint64_t v97 = (os_log_s *)__nwlog_obj();
      os_log_type_t v98 = type.__r_.__value_.__s.__data_[0];
      if (!os_log_type_enabled(v97, (os_log_type_t)type.__r_.__value_.__s.__data_[0])) {
        goto LABEL_213;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_sniffing_get_input_frames_block_invoke";
      unint64_t v99 = "%{public}s called with null frame, backtrace limit exceeded";
      goto LABEL_212;
    }

    __int16 v100 = (char *)__nw_create_backtrace_string();
    uint64_t v97 = (os_log_s *)__nwlog_obj();
    os_log_type_t v98 = type.__r_.__value_.__s.__data_[0];
    BOOL v101 = os_log_type_enabled(v97, (os_log_type_t)type.__r_.__value_.__s.__data_[0]);
    if (v100)
    {
      if (v101)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_sniffing_get_input_frames_block_invoke";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = v100;
        _os_log_impl( &dword_181A5C000,  v97,  v98,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v100);
      goto LABEL_213;
    }

    if (v101)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_sniffing_get_input_frames_block_invoke";
      unint64_t v99 = "%{public}s called with null frame, no backtrace";
LABEL_212:
      _os_log_impl(&dword_181A5C000, v97, v98, v99, buf, 0xCu);
    }
  }

                  goto LABEL_249;
                }

                if (!v142)
                {
                  __nwlog_obj();
                  uint64_t v112 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v127 = v137[0];
                  if (os_log_type_enabled(v112, v137[0]))
                  {
                    *(_DWORD *)std::string type = 136446210;
                    *(void *)&os_log_type_t type[4] = "nw_connection_group_copy_workloop";
                    _os_log_impl( &dword_181A5C000,  v112,  v127,  "%{public}s called with null workloop, backtrace limit exceeded",  type,  0xCu);
                  }

                  goto LABEL_248;
                }

                BOOL v122 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                uint64_t v112 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                v129 = v137[0];
                int v124 = os_log_type_enabled(v112, v137[0]);
                if (!v122)
                {
                  if (v124)
                  {
                    *(_DWORD *)std::string type = 136446210;
                    *(void *)&os_log_type_t type[4] = "nw_connection_group_copy_workloop";
                    _os_log_impl( &dword_181A5C000,  v112,  v129,  "%{public}s called with null workloop, no backtrace",  type,  0xCu);
                  }

                  goto LABEL_248;
                }

                if (v124)
                {
                  *(_DWORD *)std::string type = 136446466;
                  *(void *)&os_log_type_t type[4] = "nw_connection_group_copy_workloop";
                  *(_WORD *)&type[12] = 2082;
                  *(void *)&type[14] = v122;
                  _os_log_impl( &dword_181A5C000,  v112,  v129,  "%{public}s called with null workloop, dumping backtrace:%{public}s",  type,  0x16u);
                }

                goto LABEL_227;
              }
            }

            else
            {
              __nwlog_obj();
              std::string::value_type v111 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)std::string type = 136446210;
              *(void *)&os_log_type_t type[4] = "nw_connection_group_copy_workloop";
              os_log_type_t v131 = (char *)_os_log_send_and_compose_impl();

              v137[0] = OS_LOG_TYPE_ERROR;
              BOOL v142 = 0;
              if (__nwlog_fault(v131, v137, &v142))
              {
                if (v137[0] == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  uint64_t v112 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  __int16 v113 = v137[0];
                  if (os_log_type_enabled(v112, v137[0]))
                  {
                    *(_DWORD *)std::string type = 136446210;
                    *(void *)&os_log_type_t type[4] = "nw_connection_group_copy_workloop";
                    _os_log_impl(&dword_181A5C000, v112, v113, "%{public}s called with null context", type, 0xCu);
                  }

                  goto LABEL_248;
                }

                if (!v142)
                {
                  __nwlog_obj();
                  uint64_t v112 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v126 = v137[0];
                  if (os_log_type_enabled(v112, v137[0]))
                  {
                    *(_DWORD *)std::string type = 136446210;
                    *(void *)&os_log_type_t type[4] = "nw_connection_group_copy_workloop";
                    _os_log_impl( &dword_181A5C000,  v112,  v126,  "%{public}s called with null context, backtrace limit exceeded",  type,  0xCu);
                  }

                  goto LABEL_248;
                }

                BOOL v122 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                uint64_t v112 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                BOOL v128 = v137[0];
                BOOL v123 = os_log_type_enabled(v112, v137[0]);
                if (!v122)
                {
                  if (v123)
                  {
                    *(_DWORD *)std::string type = 136446210;
                    *(void *)&os_log_type_t type[4] = "nw_connection_group_copy_workloop";
                    _os_log_impl( &dword_181A5C000,  v112,  v128,  "%{public}s called with null context, no backtrace",  type,  0xCu);
                  }

                  goto LABEL_248;
                }

                if (v123)
                {
                  *(_DWORD *)std::string type = 136446466;
                  *(void *)&os_log_type_t type[4] = "nw_connection_group_copy_workloop";
                  *(_WORD *)&type[12] = 2082;
                  *(void *)&type[14] = v122;
                  _os_log_impl( &dword_181A5C000,  v112,  v128,  "%{public}s called with null context, dumping backtrace:%{public}s",  type,  0x16u);
                }

    if (v102) {
      free(v102);
    }
    goto LABEL_250;
  }

  int v94 = (char)a1[2].handle;
  if ((v94 & 1) != 0)
  {
    uint64_t v95 = a1[2].output_handler;
    if (v95)
    {
      os_release(v95);
      int v94 = (char)a1[2].handle;
    }
  }

  __n128 result = 0LL;
  a1[2].uint64_t output_handler = 0LL;
  LOBYTE(a1[2].handle) = v94 | 1;
  *(_DWORD *)&a1[4].flow_id[12] = -1;
  return result;
}

  if (((*(unsigned __int16 *)(a3 + 188) | (*(unsigned __int8 *)(a3 + 190) << 16)) & 0x80000) == 0
    && *((_BYTE *)v8 + 1537))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    int v124 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      BOOL v125 = a4;
      os_log_type_t v126 = v8;
      BOOL v128 = *(_DWORD *)(a3 + 176);
      os_log_type_t v127 = *(_DWORD *)(a3 + 180);
      *(_DWORD *)buf = 0;
      nw_frame_array_get_frame_count((uint64_t *)(a3 + 16), 0, buf);
      v129 = *(_DWORD *)buf;
      *(_DWORD *)buf = 136447490;
      v153 = "nw_http2_drain_next_frame_for_stream";
      v154 = 2082;
      uint64_t v155 = a3 + 191;
      char v156 = 2080;
      *(void *)uint64_t v157 = " ";
      *(_WORD *)&v157[8] = 1024;
      *(_DWORD *)&v157[10] = v127;
      char v158 = 1024;
      v159 = v128;
      uint64_t v8 = v126;
      a4 = v125;
      v160 = 1024;
      *(_DWORD *)__int128 v161 = v129;
      _os_log_impl( &dword_181A5C000,  v124,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> stream now has %u bytes pending",  buf,  0x32u);
    }
  }

  if (a4) {
    nw_http2_session_send(a1);
  }
  BOOL v117 = *v9;
  if ((_DWORD)v15)
  {
    v118 = *(unsigned __int16 *)(a3 + 188) | (*(unsigned __int8 *)(a3 + 190) << 16);
    if (v117)
    {
      if ((v118 & 0x80000) != 0)
      {
LABEL_265:
        if (((*(unsigned __int16 *)(a3 + 188) | (*(unsigned __int8 *)(a3 + 190) << 16)) & 0x80000) == 0
          && *((_BYTE *)v8 + 1537))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v133 = (os_log_s *)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            BOOL v135 = *(_DWORD *)(a3 + 176);
            uint64_t v134 = *(_DWORD *)(a3 + 180);
            *(_DWORD *)buf = 136447746;
            v153 = "nw_http2_set_stream_output_available_pending";
            v154 = 2082;
            uint64_t v155 = a3 + 191;
            char v156 = 2080;
            *(void *)uint64_t v157 = " ";
            *(_WORD *)&v157[8] = 1024;
            *(_DWORD *)&v157[10] = v134;
            char v158 = 1024;
            v159 = v135;
            v160 = 1024;
            *(_DWORD *)__int128 v161 = v135;
            *(_WORD *)&v161[4] = 1024;
            *(_DWORD *)&v161[6] = 0;
            _os_log_impl( &dword_181A5C000,  v133,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> called for stream %d, needs output available: %{BOOL}d",  buf,  0x38u);
          }
        }

        os_log_type_t v121 = *(unsigned __int16 *)(a3 + 188);
        __int128 v120 = a3 + 188;
        BOOL v122 = *(unsigned __int8 *)(v120 + 2);
        *(_WORD *)__int128 v120 = v121 & 0xFFDF;
        *(_BYTE *)(v120 + 2) = (v121 & 0xFFFFFFDF | (v122 << 16)) >> 16;
        return v15;
      }

LABEL_213:
  if (v96) {
    free(v96);
  }
  return a2 != 0;
}

        unsigned int v37 = (os_log_s *)__nwlog_obj();
        size_t v38 = type;
        if (!os_log_type_enabled(v37, type)) {
          goto LABEL_299;
        }
        int v103 = a2->identifier;
        if (!v103) {
          int v103 = (nw_protocol_identifier *)"invalid";
        }
        *(_DWORD *)buf = 136446722;
        v129 = "__nw_protocol_disconnected";
        __int16 v130 = 2082;
        os_log_type_t v131 = (nw_protocol *)v103;
        __int16 v132 = 2048;
        v133 = a2;
        uint64_t v104 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback";
        goto LABEL_298;
      }

    if (v129) {
      free(v129);
    }
    a1 = 0LL;
    goto LABEL_102;
  }

  __nwlog_obj();
  os_log_type_t v126 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v164 = "-[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]";
  std::string::size_type v13 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v154) = 0;
  if (__nwlog_fault(v13, type, &v154))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v127 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v164 = "-[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]";
        _os_log_impl(&dword_181A5C000, v14, v127, "%{public}s called with null _descriptor", buf, 0xCu);
      }

      goto LABEL_99;
    }

    if (!(_BYTE)v154)
    {
      __nwlog_obj();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v139 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v164 = "-[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]";
        _os_log_impl( &dword_181A5C000,  v14,  v139,  "%{public}s called with null _descriptor, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_99;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v134 = type[0];
    BOOL v135 = os_log_type_enabled(v14, type[0]);
    if (!backtrace_string)
    {
      if (v135)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v164 = "-[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]";
        _os_log_impl(&dword_181A5C000, v14, v134, "%{public}s called with null _descriptor, no backtrace", buf, 0xCu);
      }

      goto LABEL_99;
    }

    if (v135)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v164 = "-[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]";
      v165 = 2082;
      *(void *)v166 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v14,  v134,  "%{public}s called with null _descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_25;
  }

        if (v111) {
          free(v111);
        }
        char v19 = 1LL;
        goto LABEL_136;
      }

      int v89 = *(_BYTE *)(v7 + 680);
      if ((v89 & 1) != 0)
      {
        __int16 v90 = *(void **)(v7 + 672);
        if (v90)
        {
          os_release(v90);
          int v89 = *(_BYTE *)(v7 + 680);
        }
      }

      *(void *)(v7 + 672) = 0LL;
      *(_BYTE *)(v7 + 680) = v89 | 1;
      unsigned int v49 = *(_WORD *)(v7 + 1062);
      if ((v49 & 0x10) == 0) {
        goto LABEL_75;
      }
    }

    else
    {
      if (v41 != 4)
      {
        __int128 v68 = *(void **)(v7 + 688);
        if (v68)
        {
          char v69 = nw_authentication_credential_storage_copy_default_credential(v68, *(void **)(v7 + 640));
          if (v69)
          {
            uint64_t v70 = v69;
            uint64_t v71 = v70[3];

            if (v71) {
              nw_authentication_challenge_set_proposed_credential(*(void **)(v7 + 640), v70);
            }
            os_release(v70);
          }
        }
      }

      unsigned int v49 = *(_WORD *)(v7 + 1062);
      if ((v49 & 0x10) == 0) {
        goto LABEL_75;
      }
    }

          if (v80) {
            free(v80);
          }

          goto LABEL_64;
        }

        id v27 = nw_protocol_stack_copy_transport_protocol(v26);
        if (nw_protocol_options_is_tls(v27))
        {
          id v28 = v27;
        }

        else
        {
          if (!nw_protocol_options_is_quic(v27))
          {
            if (!nw_protocol_options_is_tcp(v27))
            {
LABEL_40:
              if (v27) {
                os_release(v27);
              }
              goto LABEL_42;
            }

              if (v112) {
                free(v112);
              }

              goto LABEL_152;
            }

            if (!nw_parameters_get_logging_disabled(*(void *)&v36[10]._os_unfair_lock_opaque))
            {
              if (__nwlog_browser_log::onceToken[0] != -1) {
                dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
              }
              size_t v58 = (os_log_s *)(id)gbrowserLogObj;
              if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
              {
                BOOL v59 = v36[48]._os_unfair_lock_opaque;
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_browser_start_dns_browser_locked";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = v59;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = pid;
                *(_WORD *)&_BYTE buf[24] = 1024;
                *(_DWORD *)&buf[26] = Connection;
                _os_log_impl( &dword_181A5C000,  v58,  OS_LOG_TYPE_ERROR,  "%{public}s [B%u] DNSServiceCreateDelegateConnection(..., epid=%u, NULL) failed: %d",  buf,  0x1Eu);
              }
            }
          }

          else
          {
            pid = 0;
            Connection = 0;
          }

          if (nw_parameters_has_delegated_proc_uuid(*(void **)&v36[10]._os_unfair_lock_opaque))
          {
            if (Connection && !nw_parameters_get_logging_disabled(*(void *)&v36[10]._os_unfair_lock_opaque))
            {
              if (__nwlog_browser_log::onceToken[0] != -1) {
                dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
              }
              uint64_t v71 = (os_log_s *)(id)gbrowserLogObj;
              if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
              {
                uint64_t v72 = v36[48]._os_unfair_lock_opaque;
                string_for_dns_service_error = nwlog_get_string_for_dns_service_error(Connection);
                *(_DWORD *)buf = 136447234;
                *(void *)&uint8_t buf[4] = "nw_browser_start_dns_browser_locked";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = v72;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = pid;
                *(_WORD *)&_BYTE buf[24] = 2082;
                *(void *)&buf[26] = string_for_dns_service_error;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = Connection;
                _os_log_impl( &dword_181A5C000,  v71,  OS_LOG_TYPE_ERROR,  "%{public}s [B%u] Delegating DNS service to PID %d returned failure %{public}s(%d), falling back to eUUID",  buf,  0x28u);
              }
            }

            nw_parameters_get_e_proc_uuid(*(void **)&v36[10]._os_unfair_lock_opaque, type);
            if (!nw_parameters_get_logging_disabled(*(void *)&v36[10]._os_unfair_lock_opaque))
            {
              if (__nwlog_browser_log::onceToken[0] != -1) {
                dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
              }
              uint64_t v74 = (os_log_s *)(id)gbrowserLogObj;
              if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
              {
                int v75 = v36[48]._os_unfair_lock_opaque;
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_browser_start_dns_browser_locked";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = v75;
                _os_log_impl( &dword_181A5C000,  v74,  OS_LOG_TYPE_DEBUG,  "%{public}s [B%u] Delegating DNS service to eUUID",  buf,  0x12u);
              }
            }

            Connection = DNSServiceCreateDelegateConnection();
            if (Connection && !nw_parameters_get_logging_disabled(*(void *)&v36[10]._os_unfair_lock_opaque))
            {
              if (__nwlog_browser_log::onceToken[0] != -1) {
                dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
              }
              std::string::size_type v76 = (os_log_s *)(id)gbrowserLogObj;
              if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
              {
                unsigned __int8 v77 = v36[48]._os_unfair_lock_opaque;
                *(_DWORD *)buf = 136447234;
                *(void *)&uint8_t buf[4] = "nw_browser_start_dns_browser_locked";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = v77;
                *(_WORD *)&buf[18] = 1040;
                *(_DWORD *)&buf[20] = 16;
                *(_WORD *)&_BYTE buf[24] = 2096;
                *(void *)&buf[26] = type;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = Connection;
                _os_log_impl( &dword_181A5C000,  v76,  OS_LOG_TYPE_ERROR,  "%{public}s [B%u] DNSServiceCreateDelegateConnection(..., 0, %{uuid_t}.16P) failed: %d",  buf,  0x28u);
              }
            }
          }

          goto LABEL_139;
        }

        int v39 = "nw_browser_start_dns_browser_locked";
        if (nw_parameters_get_logging_disabled(*(void *)&v36[10]._os_unfair_lock_opaque)) {
          goto LABEL_150;
        }
        if (__nwlog_browser_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
        }
        uint64_t v40 = (id)gbrowserLogObj;
        int v41 = v36[48]._os_unfair_lock_opaque;
        uint64_t v42 = nw_browse_descriptor_get_type(*(void **)&v36[8]._os_unfair_lock_opaque);
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_browser_start_dns_browser_locked";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v41;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v42;
        int v43 = (char *)_os_log_send_and_compose_impl();

        type[0] = 16;
        v145[0] = 0;
        if (type[0] == 17)
        {
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
          }
          uint64_t v44 = (os_log_s *)(id)gbrowserLogObj;
          unsigned int v45 = type[0];
          if (os_log_type_enabled(v44, (os_log_type_t)type[0]))
          {
            os_log_type_t v46 = v36[48]._os_unfair_lock_opaque;
            BOOL v47 = nw_browse_descriptor_get_type(*(void **)&v36[8]._os_unfair_lock_opaque);
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_browser_start_dns_browser_locked";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = v46;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v47;
            _os_log_impl( &dword_181A5C000,  v44,  v45,  "%{public}s [B%u] unknown browser.cppode of operation for type %d",  buf,  0x18u);
          }
        }

        else if (v145[0])
        {
          size_t v60 = __nw_create_backtrace_string();
          if (v60)
          {
            size_t v61 = (char *)v60;
            if (__nwlog_browser_log::onceToken[0] != -1) {
              dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
            }
            uint64_t v62 = (os_log_s *)(id)gbrowserLogObj;
            uint64_t v63 = type[0];
            if (os_log_type_enabled(v62, (os_log_type_t)type[0]))
            {
              __int128 v64 = v36[48]._os_unfair_lock_opaque;
              char v65 = nw_browse_descriptor_get_type(*(void **)&v36[8]._os_unfair_lock_opaque);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_browser_start_dns_browser_locked";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = v64;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v65;
              *(_WORD *)&_BYTE buf[24] = 2082;
              *(void *)&buf[26] = v61;
              _os_log_impl( &dword_181A5C000,  v62,  v63,  "%{public}s [B%u] unknown browser.cppode of operation for type %d, dumping backtrace:%{public}s",  buf,  0x22u);
            }

            free(v61);
            goto LABEL_148;
          }

          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
          }
          uint64_t v44 = (os_log_s *)(id)gbrowserLogObj;
          uint64_t v87 = type[0];
          if (os_log_type_enabled(v44, (os_log_type_t)type[0]))
          {
            int v88 = v36[48]._os_unfair_lock_opaque;
            int v89 = nw_browse_descriptor_get_type(*(void **)&v36[8]._os_unfair_lock_opaque);
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_browser_start_dns_browser_locked";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = v88;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v89;
            _os_log_impl( &dword_181A5C000,  v44,  v87,  "%{public}s [B%u] unknown browser.cppode of operation for type %d, no backtrace",  buf,  0x18u);
          }
        }

        else
        {
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
          }
          uint64_t v44 = (os_log_s *)(id)gbrowserLogObj;
          BOOL v78 = type[0];
          if (os_log_type_enabled(v44, (os_log_type_t)type[0]))
          {
            unsigned int v79 = v36[48]._os_unfair_lock_opaque;
            BOOL v80 = nw_browse_descriptor_get_type(*(void **)&v36[8]._os_unfair_lock_opaque);
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_browser_start_dns_browser_locked";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = v79;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v80;
            _os_log_impl( &dword_181A5C000,  v44,  v78,  "%{public}s [B%u] unknown browser.cppode of operation for type %d, backtrace limit exceeded",  buf,  0x18u);
          }
        }

LABEL_148:
        if (v43) {
          free(v43);
        }
        goto LABEL_150;
      default:
        goto LABEL_152;
    }
  }

  char v5 = v3 + 2;
  if (os_unfair_lock_opaque == 3)
  {
    os_unfair_lock_unlock(v5);
    if (!nw_parameters_get_logging_disabled(*(void *)&v3[10]._os_unfair_lock_opaque))
    {
      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
      }
      uint64_t v6 = (os_log_s *)(id)gbrowserLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        char v7 = v3[48]._os_unfair_lock_opaque;
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_browser_start";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v7;
        _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_ERROR,  "%{public}s [B%u] The browser has already been cancelled and cannot be started again. You must create a new bro wser object and start it.",  buf,  0x12u);
      }

          free(v77);
          goto LABEL_214;
        }

        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_save_output_handler";
        size_t v56 = (char *)_os_log_send_and_compose_impl();
        v101[0] = 16;
        LOBYTE(v91) = 0;
        if (v101[0] == 17)
        {
          size_t v57 = (os_log_s *)__nwlog_obj();
          size_t v58 = v101[0];
          if (!os_log_type_enabled(v57, (os_log_type_t)v101[0])) {
            goto LABEL_199;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http3_save_output_handler";
          BOOL v59 = "%{public}s called with null quic_protocol";
          goto LABEL_198;
        }

        if (!(_BYTE)v91)
        {
          size_t v57 = (os_log_s *)__nwlog_obj();
          size_t v58 = v101[0];
          if (!os_log_type_enabled(v57, (os_log_type_t)v101[0])) {
            goto LABEL_199;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http3_save_output_handler";
          BOOL v59 = "%{public}s called with null quic_protocol, backtrace limit exceeded";
          goto LABEL_198;
        }

        uint64_t v74 = (char *)__nw_create_backtrace_string();
        size_t v57 = (os_log_s *)__nwlog_obj();
        size_t v58 = v101[0];
        int v75 = os_log_type_enabled(v57, (os_log_type_t)v101[0]);
        if (v74)
        {
          if (v75)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http3_save_output_handler";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = v74;
            _os_log_impl( &dword_181A5C000,  v57,  v58,  "%{public}s called with null quic_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v74);
          if (!v56)
          {
LABEL_42:
            nw_http3_setup_connection_if_needed(*((void *)handle + 42));
            *v5 |= 2u;
            unsigned int v29 = *((void *)handle + 42);
            if (v29)
            {
              if ((*(_WORD *)(v29 + 1373) & 0x61) != 0x20 || !uuid_is_null((const unsigned __int8 *)(v29 + 848)))
              {
                if (!*(void *)(v29 + 976))
                {
                  uint64_t v30 = mach_continuous_approximate_time();
                  if (v30 <= 1) {
                    uint64_t v31 = 1LL;
                  }
                  else {
                    uint64_t v31 = v30;
                  }
                  *(void *)(v29 + 976) = v31;
                }

                nw_http3_stream_connect_lower((uint64_t)handle);
              }

    uint64_t v163 = v382;
    uint64_t v164 = v380;
    if (v166) {
      free(v166);
    }
LABEL_215:
    v174 = (nw_path *)nw_endpoint_handler_copy_connected_path(v155);
    v175 = (NWConcrete_nw_path *)v174;
    if (!v174)
    {
LABEL_240:
      v163->transport_protocol = nw_parameters_get_ip_protocol(v381);
      if (nw_parameters_get_ip_protocol(v381) == 6 && !nw_parameters_get_multipath(v381))
      {
        v424 = 0LL;
        v422 = 0u;
        v423 = 0u;
        v420 = 0u;
        v421 = 0u;
        v418 = 0u;
        v419 = 0u;
        v416 = 0u;
        v417 = 0u;
        v414 = 0u;
        v415 = 0u;
        v412 = 0u;
        memset(v413, 0, sizeof(v413));
        memset(buf, 0, sizeof(buf));
        v179 = v152;
        nw_context_assert_queue(v378->context);
        v180 = v179;
        if (nw_parameters_get_ip_protocol(v164->parameters) == 6)
        {
          v181 = nw_endpoint_handler_fillout_tcp_info(v180[18], buf);

          uint64_t v163 = v382;
          if (v181)
          {
            v182 = *(void *)((char *)v413 + 12);
            v382->bytes_in = *(void *)((char *)&v413[2] + 12);
            v382->bytes_out = v182;
            *(_OWORD *)&v382->bytes_duplicate = *(_OWORD *)((char *)&v413[3] + 4);
            v382->bytes_retransmitted = *(void *)((char *)&v413[1] + 4);
            v382->packets_in = *(void *)((char *)&v413[2] + 4);
            v382->packets_out = *(void *)((char *)v413 + 4);
            v183 = vrev64q_s32(*(int32x4_t *)&buf[5]);
            v183.i64[0] = *(void *)&buf[5];
            *(int32x4_t *)&v382->current_rtt_msecs = v183;
            v382->syn_retransmission_count = BYTE12(v413[4]);
            if (nw_parameters_get_tfo(v381) && (BYTE4(v414) & 8) != 0) {
              *(_DWORD *)((char *)v382 + 1706) |= 0x100000u;
            }
          }
        }

        else
        {

          uint64_t v163 = v382;
        }
      }

      if (nw_parameters_get_ip_protocol(v381) == 6)
      {
        if (nw_endpoint_handler_is_multipath(v152[18]))
        {
          *(void *)buf = 0LL;
          if (nw_connection_get_mptcpinfo_for_connected_endpoint_on_nw_queue(v152, (uint64_t)buf))
          {
            v186 = *(int ***)buf;
            if (*(void *)buf)
            {
              if (**(void **)buf)
              {
                v187 = *(void *)(**(void **)buf + 32LL);
                if (v187)
                {
                  v184.i32[0] = 0;
                  v185.i32[0] = *(_BYTE *)(v187 + 116) & 1;
                  v188 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v185, v184), 0);
                  v189 = *(int8x16_t *)(v187 + 120);
                  v190 = (int64x2_t)vandq_s8(v189, v188);
                  v191 = (int64x2_t)vbicq_s8(v189, v188);
                  v192 = *(int8x16_t *)(v187 + 48);
                  v193 = vdup_n_s32((*(_BYTE *)(v187 + 44) & 1) == 0);
                  v194.i64[0] = v193.u32[0];
                  v194.i64[1] = v193.u32[1];
                  v195 = (int32x4_t)vcltzq_s64(vshlq_n_s64(v194, 0x3FuLL));
                  v196 = (int64x2_t)vandq_s8(v192, (int8x16_t)v195);
                  v197 = (int64x2_t)vbicq_s8(v192, (int8x16_t)v195);
                  v195.i32[0] = *(_BYTE *)(v187 + 188) & 1;
                  v198 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v195, v184), 0);
                  v199 = *(int8x16_t *)(v187 + 192);
                  v200 = (int64x2_t)vandq_s8(v199, v198);
                  v201 = (int32x4_t)vbicq_s8(v199, v198);
                  v202 = vaddq_s64(v191, (int64x2_t)v201);
                  v201.i32[0] = *(_BYTE *)(v187 + 260) & 1;
                  v203 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v201, v184), 0);
                  v204 = *(int8x16_t *)(v187 + 264);
                  v205 = (int64x2_t)vandq_s8(v204, v203);
                  v206 = vaddq_s64(v197, vaddq_s64(v202, (int64x2_t)vbicq_s8(v204, v203)));
                  v207 = vaddq_s64(v196, vaddq_s64(vaddq_s64(v190, v200), v205));
                  v208 = *(unsigned int *)((char *)v163 + 1706);
                  v209 = v208 & 0xFFFFFFFFFFBFFFFFLL | ((unint64_t)*((unsigned __int16 *)v163 + 855) << 32);
                  *(_DWORD *)((char *)v163 + 1706) = v208 & 0xFFBFFFFF | ((*(_DWORD *)(v187 + 328) & 1) << 22);
                  *((_WORD *)v163 + 855) = WORD2(v209);
                  *(int8x16_t *)&v163->multipath_bytes_in_cell = vextq_s8((int8x16_t)v206, (int8x16_t)v206, 8uLL);
                  *(int8x16_t *)&v163->multipath_bytes_in_wifuint64_t i = vextq_s8((int8x16_t)v207, (int8x16_t)v207, 8uLL);
                  *(_OWORD *)&v163->multipath_bytes_in_initial = *(_OWORD *)(v187 + 24);
                  v210 = (int8x16_t)vaddq_s64(v206, v207);
                  *(int8x16_t *)&v163->bytes_in = vextq_s8(v210, v210, 8uLL);
                  v163->mptcp_version = 0;
                  v211 = **v186;
                  if ((v211 & 0x500) == 0x100)
                  {
                    if ((v211 & 0x1000) != 0) {
                      v212 = 2;
                    }
                    else {
                      v212 = 1;
                    }
                    v163->mptcp_version = v212;
                  }
                }
              }
            }

            freemptcpinfo(v186);
          }
        }
      }

      *(void *)v425 = 0LL;
      v389 = 0LL;
      v410 = 0;
      v163->transport_protocol = 253;
      nw_connection_fillout_data_transfer_snapshot_on_nw_queue(v152, (uint64_t *)v425, &v389, &v410, 0);
      v213 = *(void *)v425;
      if (*(void *)v425 && v389)
      {
        v163->bytes_in = *(void *)(*(void *)v425 + 48LL);
        v163->bytes_out = *(void *)(v213 + 72);
        *(_OWORD *)&v163->bytes_duplicate = *(_OWORD *)(v213 + 56);
        *(_OWORD *)&v163->bytes_retransmitted = *(_OWORD *)(v213 + 80);
        *(_OWORD *)&v163->ecn_capable_packets_acked = *(_OWORD *)(v213 + 96);
        v163->ecn_capable_packets_lost = *(void *)(v213 + 112);
        *(_OWORD *)&v163->packets_in = *(_OWORD *)(v213 + 8);
        *(_OWORD *)&v163->ect0_packets_in = *(_OWORD *)(v213 + 24);
        v163->packets_out = *(void *)(v213 + 40);
        v214 = vuzp1q_s32(*(int32x4_t *)(v213 + 120), *(int32x4_t *)(v213 + 136));
        *(int32x4_t *)&v163->current_rtt_msecs = vuzp2q_s32( (int32x4_t)vextq_s8((int8x16_t)v214, (int8x16_t)v214, 4uLL),  v214);
        v163->syn_retransmission_count = 0;
        if (!v410) {
          goto LABEL_287;
        }
        goto LABEL_285;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v215 = (id)gLogObj;
      buf[0] = 136446210;
      *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
      v216 = (void *)_os_log_send_and_compose_impl();

      std::string type = OS_LOG_TYPE_ERROR;
      v387 = 0;
      if (__nwlog_fault((const char *)v216, &type, &v387))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v217 = (os_log_s *)(id)gLogObj;
          v218 = type;
          if (os_log_type_enabled(v217, type))
          {
            buf[0] = 136446210;
            *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
            _os_log_impl( &dword_181A5C000,  v217,  v218,  "%{public}s nw_connection_fillout_data_transfer_snapshot_on_nw_queue failed",  (uint8_t *)buf,  0xCu);
          }
        }

        else if (v387)
        {
          v219 = __nw_create_backtrace_string();
          if (v219)
          {
            v220 = (char *)v219;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v221 = (os_log_s *)(id)gLogObj;
            v222 = type;
            if (os_log_type_enabled(v221, type))
            {
              buf[0] = 136446466;
              *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
              LOWORD(buf[3]) = 2082;
              *(void *)((char *)&buf[3] + 2) = v220;
              _os_log_impl( &dword_181A5C000,  v221,  v222,  "%{public}s nw_connection_fillout_data_transfer_snapshot_on_nw_queue failed, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x16u);
            }

            free(v220);
            if (!v216)
            {
LABEL_284:
              v213 = *(void *)v425;
              if (!v410)
              {
LABEL_287:

                os_log_type_t v131 = v382;
                goto LABEL_288;
              }

    goto LABEL_214;
  }

  uint64_t v10 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_agent);
  if (v10)
  {
    __int16 v11 = nw_network_agent_open_control_socket();
    if ((v11 & 0x80000000) == 0)
    {
      BOOL v12 = v11;
      std::string::size_type v13 = *(unsigned __int8 *)a1;
      *((_BYTE *)v10 + 20) = v13;
      if (v13)
      {
        id v14 = *((unsigned __int8 *)a1 + 1);
        *((_BYTE *)v10 + 21) = v14;
        if (v14)
        {
          id v15 = *((unsigned __int8 *)a1 + 2);
          *((_BYTE *)v10 + 22) = v15;
          if (v15)
          {
            uint64_t v16 = *((unsigned __int8 *)a1 + 3);
            *((_BYTE *)v10 + 23) = v16;
            if (v16)
            {
              uint64_t v17 = *((unsigned __int8 *)a1 + 4);
              *((_BYTE *)v10 + 24) = v17;
              if (v17)
              {
                uint64_t v18 = *((unsigned __int8 *)a1 + 5);
                *((_BYTE *)v10 + 25) = v18;
                if (v18)
                {
                  char v19 = *((unsigned __int8 *)a1 + 6);
                  *((_BYTE *)v10 + 26) = v19;
                  if (v19)
                  {
                    uint64_t v20 = *((unsigned __int8 *)a1 + 7);
                    *((_BYTE *)v10 + 27) = v20;
                    if (v20)
                    {
                      size_t v21 = *((unsigned __int8 *)a1 + 8);
                      *((_BYTE *)v10 + 28) = v21;
                      if (v21)
                      {
                        uint64_t v22 = *((unsigned __int8 *)a1 + 9);
                        *((_BYTE *)v10 + 29) = v22;
                        if (v22)
                        {
                          uint64_t v23 = *((unsigned __int8 *)a1 + 10);
                          *((_BYTE *)v10 + 30) = v23;
                          if (v23)
                          {
                            uint64_t v24 = *((unsigned __int8 *)a1 + 11);
                            *((_BYTE *)v10 + 31) = v24;
                            if (v24)
                            {
                              uint64_t v25 = *((unsigned __int8 *)a1 + 12);
                              *((_BYTE *)v10 + 32) = v25;
                              if (v25)
                              {
                                uint64_t v26 = *((unsigned __int8 *)a1 + 13);
                                *((_BYTE *)v10 + 33) = v26;
                                if (v26)
                                {
                                  id v27 = *((unsigned __int8 *)a1 + 14);
                                  *((_BYTE *)v10 + 34) = v27;
                                  if (v27)
                                  {
                                    id v28 = *((unsigned __int8 *)a1 + 15);
                                    *((_BYTE *)v10 + 35) = v28;
                                    if (v28)
                                    {
                                      unsigned int v29 = *((unsigned __int8 *)a1 + 16);
                                      *((_BYTE *)v10 + 36) = v29;
                                      if (v29)
                                      {
                                        uint64_t v30 = *((unsigned __int8 *)a1 + 17);
                                        *((_BYTE *)v10 + 37) = v30;
                                        if (v30)
                                        {
                                          uint64_t v31 = *((unsigned __int8 *)a1 + 18);
                                          *((_BYTE *)v10 + 38) = v31;
                                          if (v31)
                                          {
                                            os_log_type_t v32 = *((unsigned __int8 *)a1 + 19);
                                            *((_BYTE *)v10 + 39) = v32;
                                            if (v32)
                                            {
                                              int v33 = *((unsigned __int8 *)a1 + 20);
                                              *((_BYTE *)v10 + 40) = v33;
                                              if (v33)
                                              {
                                                int v34 = *((unsigned __int8 *)a1 + 21);
                                                *((_BYTE *)v10 + 41) = v34;
                                                if (v34)
                                                {
                                                  uint64_t v35 = *((unsigned __int8 *)a1 + 22);
                                                  *((_BYTE *)v10 + 42) = v35;
                                                  if (v35)
                                                  {
                                                    unsigned __int8 v36 = *((unsigned __int8 *)a1 + 23);
                                                    *((_BYTE *)v10 + 43) = v36;
                                                    if (v36)
                                                    {
                                                      unsigned int v37 = *((unsigned __int8 *)a1 + 24);
                                                      *((_BYTE *)v10 + 44) = v37;
                                                      if (v37)
                                                      {
                                                        size_t v38 = *((unsigned __int8 *)a1 + 25);
                                                        *((_BYTE *)v10 + 45) = v38;
                                                        if (v38)
                                                        {
                                                          int v39 = *((unsigned __int8 *)a1 + 26);
                                                          *((_BYTE *)v10 + 46) = v39;
                                                          if (v39)
                                                          {
                                                            uint64_t v40 = *((unsigned __int8 *)a1 + 27);
                                                            *((_BYTE *)v10 + 47) = v40;
                                                            if (v40)
                                                            {
                                                              int v41 = *((unsigned __int8 *)a1 + 28);
                                                              *((_BYTE *)v10 + 48) = v41;
                                                              if (v41)
                                                              {
                                                                uint64_t v42 = *((unsigned __int8 *)a1 + 29);
                                                                *((_BYTE *)v10 + 49) = v42;
                                                                if (v42)
                                                                {
                                                                  int v43 = *((unsigned __int8 *)a1 + 30);
                                                                  *((_BYTE *)v10 + 50) = v43;
                                                                  if (v43) {
                                                                    *((_BYTE *)v10 + 51) = 0;
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      uint64_t v44 = *(unsigned __int8 *)a2;
      *((_BYTE *)v10 + 52) = v44;
      if (v44)
      {
        unsigned int v45 = *((unsigned __int8 *)a2 + 1);
        *((_BYTE *)v10 + 53) = v45;
        if (v45)
        {
          os_log_type_t v46 = *((unsigned __int8 *)a2 + 2);
          *((_BYTE *)v10 + 54) = v46;
          if (v46)
          {
            BOOL v47 = *((unsigned __int8 *)a2 + 3);
            *((_BYTE *)v10 + 55) = v47;
            if (v47)
            {
              uint64_t v48 = *((unsigned __int8 *)a2 + 4);
              *((_BYTE *)v10 + 56) = v48;
              if (v48)
              {
                unsigned int v49 = *((unsigned __int8 *)a2 + 5);
                *((_BYTE *)v10 + 57) = v49;
                if (v49)
                {
                  int64_t v50 = *((unsigned __int8 *)a2 + 6);
                  *((_BYTE *)v10 + 58) = v50;
                  if (v50)
                  {
                    unsigned int v51 = *((unsigned __int8 *)a2 + 7);
                    *((_BYTE *)v10 + 59) = v51;
                    if (v51)
                    {
                      uint64_t v52 = *((unsigned __int8 *)a2 + 8);
                      *((_BYTE *)v10 + 60) = v52;
                      if (v52)
                      {
                        unint64_t v53 = *((unsigned __int8 *)a2 + 9);
                        *((_BYTE *)v10 + 61) = v53;
                        if (v53)
                        {
                          uint64_t v54 = *((unsigned __int8 *)a2 + 10);
                          *((_BYTE *)v10 + 62) = v54;
                          if (v54)
                          {
                            unint64_t v55 = *((unsigned __int8 *)a2 + 11);
                            *((_BYTE *)v10 + 63) = v55;
                            if (v55)
                            {
                              size_t v56 = *((unsigned __int8 *)a2 + 12);
                              *((_BYTE *)v10 + 64) = v56;
                              if (v56)
                              {
                                size_t v57 = *((unsigned __int8 *)a2 + 13);
                                *((_BYTE *)v10 + 65) = v57;
                                if (v57)
                                {
                                  size_t v58 = *((unsigned __int8 *)a2 + 14);
                                  *((_BYTE *)v10 + 66) = v58;
                                  if (v58)
                                  {
                                    BOOL v59 = *((unsigned __int8 *)a2 + 15);
                                    *((_BYTE *)v10 + 67) = v59;
                                    if (v59)
                                    {
                                      size_t v60 = *((unsigned __int8 *)a2 + 16);
                                      *((_BYTE *)v10 + 68) = v60;
                                      if (v60)
                                      {
                                        size_t v61 = *((unsigned __int8 *)a2 + 17);
                                        *((_BYTE *)v10 + 69) = v61;
                                        if (v61)
                                        {
                                          uint64_t v62 = *((unsigned __int8 *)a2 + 18);
                                          *((_BYTE *)v10 + 70) = v62;
                                          if (v62)
                                          {
                                            uint64_t v63 = *((unsigned __int8 *)a2 + 19);
                                            *((_BYTE *)v10 + 71) = v63;
                                            if (v63)
                                            {
                                              __int128 v64 = *((unsigned __int8 *)a2 + 20);
                                              *((_BYTE *)v10 + 72) = v64;
                                              if (v64)
                                              {
                                                char v65 = *((unsigned __int8 *)a2 + 21);
                                                *((_BYTE *)v10 + 73) = v65;
                                                if (v65)
                                                {
                                                  char v66 = *((unsigned __int8 *)a2 + 22);
                                                  *((_BYTE *)v10 + 74) = v66;
                                                  if (v66)
                                                  {
                                                    unint64_t v67 = *((unsigned __int8 *)a2 + 23);
                                                    *((_BYTE *)v10 + 75) = v67;
                                                    if (v67)
                                                    {
                                                      __int128 v68 = *((unsigned __int8 *)a2 + 24);
                                                      *((_BYTE *)v10 + 76) = v68;
                                                      if (v68)
                                                      {
                                                        char v69 = *((unsigned __int8 *)a2 + 25);
                                                        *((_BYTE *)v10 + 77) = v69;
                                                        if (v69)
                                                        {
                                                          uint64_t v70 = *((unsigned __int8 *)a2 + 26);
                                                          *((_BYTE *)v10 + 78) = v70;
                                                          if (v70)
                                                          {
                                                            uint64_t v71 = *((unsigned __int8 *)a2 + 27);
                                                            *((_BYTE *)v10 + 79) = v71;
                                                            if (v71)
                                                            {
                                                              uint64_t v72 = *((unsigned __int8 *)a2 + 28);
                                                              *((_BYTE *)v10 + 80) = v72;
                                                              if (v72)
                                                              {
                                                                unsigned __int16 v73 = *((unsigned __int8 *)a2 + 29);
                                                                *((_BYTE *)v10 + 81) = v73;
                                                                if (v73)
                                                                {
                                                                  uint64_t v74 = *((unsigned __int8 *)a2 + 30);
                                                                  *((_BYTE *)v10 + 82) = v74;
                                                                  if (v74) {
                                                                    *((_BYTE *)v10 + 83) = 0;
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      if (a3)
      {
        int v75 = (char *)v10 + 84;
        std::string::size_type v76 = 128LL;
        while (1)
        {
          unsigned __int8 v77 = *(unsigned __int8 *)a3;
          os_log_s *v75 = v77;
          if (!v77) {
            break;
          }
          ++v75;
          ++a3;
          if ((unint64_t)--v76 <= 1)
          {
            os_log_s *v75 = 0;
            break;
          }
        }
      }

      objc_storeStrong((id *)v10 + 27, a4);
      BOOL v78 = nw_fd_wrapper_create(v12);
      nw_fd_wrapper_guard(v78);
      objc_storeStrong((id *)v10 + 105, v78);
      unsigned int v79 = dispatch_source_create(MEMORY[0x1895F8B60], v12, 0LL, v9);
      objc_initWeak((id *)location, v10);
      BOOL v80 = MEMORY[0x1895F87A8];
      handler[0] = MEMORY[0x1895F87A8];
      handler[1] = 3221225472LL;
      handler[2] = __nw_agent_create_block_invoke;
      handler[3] = &unk_189BC93A0;
      v138 = v78;
      BOOL v81 = v78;
      dispatch_source_set_cancel_handler(v79, handler);
      v134[0] = v80;
      v134[1] = 3221225472LL;
      v134[2] = __nw_agent_create_block_invoke_2;
      v134[3] = &unk_189BC75C0;
      objc_copyWeak(&v136, (id *)location);
      int v82 = v79;
      BOOL v135 = v82;
      dispatch_source_set_event_handler(v82, v134);
      id v83 = (void *)*((void *)v10 + 106);
      *((void *)v10 + 106) = v82;
      char v84 = v82;

      dispatch_resume(v84);
      uint64_t v85 = v10;

      objc_destroyWeak(&v136);
      objc_destroyWeak((id *)location);
      goto LABEL_80;
    }

    __nwlog_obj();
    int v103 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)location = 136446210;
    *(void *)&location[4] = "nw_agent_create";
    __int16 v100 = (char *)_os_log_send_and_compose_impl();

    std::string type = OS_LOG_TYPE_ERROR;
    os_log_type_t v139 = 0;
    if (__nwlog_fault(v100, &type, &v139))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v101 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v104 = type;
        if (os_log_type_enabled(v101, type))
        {
          *(_DWORD *)location = 136446210;
          *(void *)&location[4] = "nw_agent_create";
          _os_log_impl(&dword_181A5C000, v101, v104, "%{public}s called with null (fd >= 0)", location, 0xCu);
        }

                            nw::release_if_needed<nw_protocol *>(&v350);
                            goto LABEL_214;
                          }
                        }

                        else if ((v353 & 1) == 0)
                        {
                          goto LABEL_161;
                        }

                        nw::release_if_needed<nw_protocol *>((uint64_t *)type);
                        goto LABEL_161;
                      }

          nw::release_if_needed<nw_protocol *>((uint64_t *)&v214);
          if (handle != &nw_protocol_ref_counted_handle)
          {
LABEL_45:
            if ((v51 & 1) != 0) {
              goto LABEL_46;
            }
            goto LABEL_215;
          }

void nw_http_sniffing_guess_media_type(std::string *a1, uint64_t a2)
{
  uint64_t v84 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    a1->__r_.__value_.__r.__words[0] = 0LL;
    a1->__r_.__value_.__l.__size_ = 0LL;
    a1->__r_.__value_.__l.__cap_ = 0LL;
    if (!*(void *)(a2 + 448)) {
      return;
    }
    char v4 = (std::string *)(a2 + 496);
    if (*(char *)(a2 + 519) < 0)
    {
      if (!*(void *)(a2 + 504)) {
        goto LABEL_11;
      }
    }

    else if (!*(_BYTE *)(a2 + 519))
    {
LABEL_11:
      nw_http_sniffing_copy_mime_type_for_unknown(&buf, a2);
LABEL_12:
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      std::string::size_type cap = buf.__r_.__value_.__l.__cap_;
      goto LABEL_15;
    }

    mime_type_to_class();
    char v5 = std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::find<std::string>(a2 + 496);
    mime_type_to_class();
    if (!v5)
    {
      if (v4 != a1)
      {
        char v8 = *(_BYTE *)(a2 + 519);
        if ((char)a1->__r_.__value_.__s.__size_ < 0)
        {
          if (v8 >= 0) {
            int v39 = (void *)(a2 + 496);
          }
          else {
            int v39 = *(void **)(a2 + 496);
          }
          if (v8 >= 0) {
            size_t v40 = *(unsigned __int8 *)(a2 + 519);
          }
          else {
            size_t v40 = *(void *)(a2 + 504);
          }
          std::string::__assign_no_alias<false>((void **)&a1->__r_.__value_.__l.__data_, v39, v40);
        }

        else
        {
          if ((*(_BYTE *)(a2 + 519) & 0x80) == 0)
          {
            *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
            std::string::size_type cap = *(void *)(a2 + 512);
LABEL_15:
            a1->__r_.__value_.__l.__cap_ = cap;
            goto LABEL_16;
          }

          std::string::__assign_no_alias<true>(a1, *(void **)(a2 + 496), *(void *)(a2 + 504));
        }
      }

void nw_http_sniffing_copy_mime_type_for_unknown(std::string *a1, uint64_t a2)
{
  if (*(void *)(a2 + 520) == *(void *)(a2 + 528))
  {
    uint64_t v6 = (const void *)kNWMIMETypeTextPlain;
    size_t v7 = strlen((const char *)kNWMIMETypeTextPlain);
    if (v7 >= 0x7FFFFFFFFFFFFFF8LL) {
      abort();
    }
    size_t v8 = v7;
    if (v7 >= 0x17)
    {
      uint64_t v26 = (v7 & 0xFFFFFFFFFFFFFFF8LL) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v26 = v7 | 7;
      }
      uint64_t v27 = v26 + 1;
      id v28 = (std::string *)operator new(v26 + 1);
      a1->__r_.__value_.__l.__size_ = v8;
      a1->__r_.__value_.__l.__cap_ = v27 | 0x8000000000000000LL;
      a1->__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
      a1 = v28;
    }

    else
    {
      a1->__r_.__value_.__s.__size_ = v7;
      if (!v7) {
        goto LABEL_62;
      }
    }

    memmove(a1, v6, v8);
LABEL_62:
    a1->__r_.__value_.__s.__data_[v8] = 0;
    return;
  }

  {
    sScriptableTypeRules(void)::rules = (uint64_t)"\xFF\xFF\xDF\xDF\xDF\xDF\xDF\xDF\xDF\xFF\xDF\xDF\xDF\xDF\xFF";
    unk_18C5A2840 = "<!DOCTYPE HTML ";
    qword_18C5A2848 = 15LL;
    unk_18C5A2850 = kNWMIMETypeTextHTML;
    qword_18C5A2858 = (uint64_t)"\xFF\xDF\xDF\xDF\xDF\xFF";
    unk_18C5A2860 = "<HTML ";
    qword_18C5A2868 = 6LL;
    unk_18C5A2870 = kNWMIMETypeTextHTML;
    qword_18C5A2878 = (uint64_t)"\xFF\xDF\xDF\xDF\xDF\xFF";
    unk_18C5A2880 = "<HEAD ";
    qword_18C5A2888 = 6LL;
    unk_18C5A2890 = kNWMIMETypeTextHTML;
    qword_18C5A2898 = (uint64_t)"\xFF\xDF\xDF\xDF\xDF\xDF\xDF\xFF";
    unk_18C5A28A0 = "<SCRIPT ";
    qword_18C5A28A8 = 8LL;
    unk_18C5A28B0 = kNWMIMETypeTextHTML;
    qword_18C5A28B8 = (uint64_t)"\xFF\xDF\xDF\xDF\xDF\xDF\xDF\xFF";
    unk_18C5A28C0 = "<IFRAME ";
    qword_18C5A28C8 = 8LL;
    unk_18C5A28D0 = kNWMIMETypeTextHTML;
    qword_18C5A28D8 = (uint64_t)"\xFF\xDF\xDF\xFF";
    unk_18C5A28E0 = "<H1 ";
    qword_18C5A28E8 = 4LL;
    unk_18C5A28F0 = kNWMIMETypeTextHTML;
    qword_18C5A28F8 = (uint64_t)"\xFF\xDF\xDF\xDF\xFF";
    unk_18C5A2900 = "<DIV ";
    qword_18C5A2908 = 5LL;
    unk_18C5A2910 = kNWMIMETypeTextHTML;
    qword_18C5A2918 = (uint64_t)"\xFF\xDF\xDF\xDF\xDF\xFF";
    unk_18C5A2920 = "<FONT ";
    qword_18C5A2928 = 6LL;
    unk_18C5A2930 = kNWMIMETypeTextHTML;
    qword_18C5A2938 = (uint64_t)"\xFF\xDF\xDF\xDF\xDF\xDF\xFF";
    unk_18C5A2940 = "<TABLE ";
    qword_18C5A2948 = 7LL;
    unk_18C5A2950 = kNWMIMETypeTextHTML;
    qword_18C5A2958 = (uint64_t)"\xFF\xDF\xFF";
    unk_18C5A2960 = "<A ";
    qword_18C5A2968 = 3LL;
    unk_18C5A2970 = kNWMIMETypeTextHTML;
    qword_18C5A2978 = (uint64_t)"\xFF\xDF\xDF\xDF\xDF\xDF\xFF";
    unk_18C5A2980 = "<STYLE ";
    qword_18C5A2988 = 7LL;
    unk_18C5A2990 = kNWMIMETypeTextHTML;
    qword_18C5A2998 = (uint64_t)"\xFF\xDF\xDF\xDF\xDF\xDF\xFF";
    unk_18C5A29A0 = "<TITLE ";
    qword_18C5A29A8 = 7LL;
    unk_18C5A29B0 = kNWMIMETypeTextHTML;
    qword_18C5A29B8 = (uint64_t)"\xFF\xDF\xFF";
    unk_18C5A29C0 = "<B ";
    qword_18C5A29C8 = 3LL;
    unk_18C5A29D0 = kNWMIMETypeTextHTML;
    qword_18C5A29D8 = (uint64_t)"\xFF\xDF\xDF\xDF\xDF\xFF";
    unk_18C5A29E0 = "<BODY ";
    qword_18C5A29E8 = 6LL;
    unk_18C5A29F0 = kNWMIMETypeTextHTML;
    qword_18C5A29F8 = (uint64_t)"\xFF\xDF\xDF\xFF";
    unk_18C5A2A00 = "<BR ";
    qword_18C5A2A08 = 4LL;
    unk_18C5A2A10 = kNWMIMETypeTextHTML;
    qword_18C5A2A18 = (uint64_t)"\xFF\xDF\xFF";
    unk_18C5A2A20 = "<P ";
    qword_18C5A2A28 = 3LL;
    unk_18C5A2A30 = kNWMIMETypeTextHTML;
    qword_18C5A2A38 = 0LL;
    qword_18C5A2A40 = (uint64_t)"<!--";
    qword_18C5A2A48 = 4LL;
    qword_18C5A2A50 = kNWMIMETypeTextHTML;
    qword_18C5A2A58 = (uint64_t)"\xFF\xDF\xDF\xDF\xDF\xFF";
    qword_18C5A2A60 = (uint64_t)"<META ";
    qword_18C5A2A68 = 6LL;
    qword_18C5A2A70 = kNWMIMETypeTextHTML;
    qword_18C5A2A78 = 0LL;
    qword_18C5A2A80 = (uint64_t)"<?xml";
    qword_18C5A2A88 = 5LL;
    qword_18C5A2A90 = (uint64_t)"text/xml";
    qword_18C5A2A98 = 0LL;
    qword_18C5A2AA0 = (uint64_t)"%PDF-";
    qword_18C5A2AA8 = 5LL;
    qword_18C5A2AB0 = (uint64_t)"application/pdf";
    qword_18C5A2AC8 = 0LL;
    xmmword_18C5A2AB8 = 0u;
    qword_18C5A2AD0 = (uint64_t)"";
  }

  nw_http_sniffing_get_mime_type_for_rule_array( a1,  *(void *)(a2 + 520),  *(void *)(a2 + 528),  &sScriptableTypeRules(void)::rules,  1);
  LODWORD(v5) = (char)a1->__r_.__value_.__s.__size_;
  if ((v5 & 0x80000000) != 0)
  {
    if (a1->__r_.__value_.__l.__size_)
    {
LABEL_5:
      if ((v5 & 0x80) == 0) {
        goto LABEL_6;
      }
      goto LABEL_21;
    }
  }

  else if (a1->__r_.__value_.__s.__size_)
  {
    goto LABEL_5;
  }

  {
    sNonScriptableTypeRules(void)::rules = 0LL;
    *(void *)algn_18C5A2AE8 = "%!PS-Adobe-";
    qword_18C5A2AF0 = 11LL;
    unk_18C5A2AF8 = "application/postscript";
    qword_18C5A2B00 = (uint64_t)&unk_182667116;
    unk_18C5A2B08 = &unk_18266711B;
    qword_18C5A2B10 = 4LL;
    unk_18C5A2B18 = kNWMIMETypeTextPlain;
    qword_18C5A2B20 = (uint64_t)&unk_182667116;
    unk_18C5A2B28 = &unk_182667120;
    qword_18C5A2B30 = 4LL;
    unk_18C5A2B38 = kNWMIMETypeTextPlain;
    qword_18C5A2B40 = (uint64_t)&unk_182667125;
    unk_18C5A2B48 = &unk_18266712A;
    qword_18C5A2B50 = 4LL;
    unk_18C5A2B58 = kNWMIMETypeTextPlain;
    qword_18C5A2B60 = 0LL;
    unk_18C5A2B68 = &unk_182665FC8;
    qword_18C5A2B70 = 7LL;
    unk_18C5A2B78 = "application/x-rar-compressed";
    qword_18C5A2B80 = 0LL;
    unk_18C5A2B88 = "PK\x03\x04";
    qword_18C5A2B90 = 4LL;
    unk_18C5A2B98 = "application/zip";
    qword_18C5A2BA0 = 0LL;
    unk_18C5A2BA8 = "\x1F\x8B\b";
    qword_18C5A2BB0 = 3LL;
    unk_18C5A2BB8 = "application/x-gzip";
    qword_18C5A2BC0 = 0LL;
    unk_18C5A2BC8 = 0LL;
    qword_18C5A2BD0 = 0LL;
    unk_18C5A2BD8 = "";
  }

  nw_http_sniffing_get_mime_type_for_rule_array( &v29,  *(void *)(a2 + 520),  *(void *)(a2 + 528),  &sNonScriptableTypeRules(void)::rules,  1);
  *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
  std::string::size_type cap = v29.__r_.__value_.__l.__cap_;
  a1->__r_.__value_.__l.__cap_ = v29.__r_.__value_.__l.__cap_;
  std::string::size_type v5 = HIBYTE(cap);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((_BYTE)v5) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }

void mime_type_to_class(void)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  {
    int v12 = 0;
    std::pair<std::string const,mime_type_class>::pair[abi:nn180100]<char const*&,mime_type_class,0>( v13,  (char *)kNWMIMETypeTextHTML,  &v12);
    int v11 = 0;
    std::pair<std::string const,mime_type_class>::pair[abi:nn180100]<char const*&,mime_type_class,0>( v15,  (char *)kNWMIMETypeApplicationXML,  &v11);
    int v10 = 0;
    std::pair<std::string const,mime_type_class>::pair[abi:nn180100]<char const*&,mime_type_class,0>( v17,  (char *)kNWMIMETypeApplicationXML,  &v10);
    int v9 = 1;
    std::pair<std::string const,mime_type_class>::pair[abi:nn180100]<char const*&,mime_type_class,0>( v19,  (char *)kNWMIMETypeTextPlain,  &v9);
    int v8 = 2;
    std::pair<std::string const,mime_type_class>::pair[abi:nn180100]<char const*&,mime_type_class,0>( v21,  (char *)kNWMIMETypeImageJPEG,  &v8);
    int v7 = 2;
    std::pair<std::string const,mime_type_class>::pair[abi:nn180100]<char const*&,mime_type_class,0>( v23,  (char *)kNWMIMETypeImageGIF,  &v7);
    int v6 = 2;
    std::pair<std::string const,mime_type_class>::pair[abi:nn180100]<char const*&,mime_type_class,0>( v25,  (char *)kNWMIMETypeImagePNG,  &v6);
    int v5 = 2;
    std::pair<std::string const,mime_type_class>::pair[abi:nn180100]<char const*&,mime_type_class,0>( v27,  (char *)kNWMIMETypeImageICO,  &v5);
    int v4 = 2;
    std::pair<std::string const,mime_type_class>::pair[abi:nn180100]<char const*&,mime_type_class,0>( v29,  (char *)kNWMIMETypeImageBMP,  &v4);
    int v3 = 3;
    std::pair<std::string const,mime_type_class>::pair[abi:nn180100]<char const*&,mime_type_class,0>( v31,  (char *)kNWMIMETypeUnknownUnknown,  &v3);
    int v2 = 3;
    std::pair<std::string const,mime_type_class>::pair[abi:nn180100]<char const*&,mime_type_class,0>( v33,  (char *)kNWMIMETypeApplicationUnknown,  &v2);
    int v1 = 3;
    std::pair<std::string const,mime_type_class>::pair[abi:nn180100]<char const*&,mime_type_class,0>( __p,  (char *)kNWMIMETypeAsteriskAsterisk,  &v1);
    mime_type_to_class(void)::instance = 0u;
    *(_OWORD *)&qword_18C5A2818 = 0u;
    dword_18C5A2828 = 1065353216;
    std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,mime_type_class> const&>( (uint64_t)v13,  (uint64_t)v13);
    std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,mime_type_class> const&>( (uint64_t)v15,  (uint64_t)v15);
    std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,mime_type_class> const&>( (uint64_t)v17,  (uint64_t)v17);
    std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,mime_type_class> const&>( (uint64_t)v19,  (uint64_t)v19);
    std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,mime_type_class> const&>( (uint64_t)v21,  (uint64_t)v21);
    std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,mime_type_class> const&>( (uint64_t)v23,  (uint64_t)v23);
    std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,mime_type_class> const&>( (uint64_t)v25,  (uint64_t)v25);
    std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,mime_type_class> const&>( (uint64_t)v27,  (uint64_t)v27);
    std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,mime_type_class> const&>( (uint64_t)v29,  (uint64_t)v29);
    std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,mime_type_class> const&>( (uint64_t)v31,  (uint64_t)v31);
    std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,mime_type_class> const&>( (uint64_t)v33,  (uint64_t)v33);
    std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,mime_type_class> const&>( (uint64_t)__p,  (uint64_t)__p);
    if (v36 < 0)
    {
      operator delete(__p[0]);
      if ((v34 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v32 & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_19;
      }
    }

    else if ((v34 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }

    operator delete(v33[0]);
    if ((v32 & 0x80000000) == 0)
    {
LABEL_7:
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_20;
    }

uint64_t *std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::find<std::string>( uint64_t a1)
{
  int v1 = *(char *)(a1 + 23);
  if (v1 >= 0) {
    int v2 = (uint64_t *)a1;
  }
  else {
    int v2 = *(uint64_t **)a1;
  }
  if (v1 >= 0) {
    unint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    unint64_t v3 = *(void *)(a1 + 8);
  }
  unint64_t v4 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v2, v3);
  unint64_t v5 = *((void *)&mime_type_to_class(void)::instance + 1);
  if (*((void *)&mime_type_to_class(void)::instance + 1))
  {
    unint64_t v6 = v4;
    uint8x8_t v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&mime_type_to_class(void)::instance + 8));
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v8 = v4;
    }

    else
    {
      unint64_t v8 = (*((void *)&mime_type_to_class(void)::instance + 1) - 1LL) & v4;
    }

    int v9 = *(uint64_t ***)(mime_type_to_class(void)::instance + 8 * v8);
    if (v9)
    {
      int v10 = *v9;
      if (*v9)
      {
        if (v7.u32[0] < 2uLL)
        {
          uint64_t v11 = *((void *)&mime_type_to_class(void)::instance + 1) - 1LL;
          while (1)
          {
            uint64_t v17 = v10[1];
            if (v6 == v17)
            {
              uint64_t v18 = *((unsigned __int8 *)v10 + 39);
              if ((v18 & 0x80u) == 0LL) {
                uint64_t v19 = *((unsigned __int8 *)v10 + 39);
              }
              else {
                uint64_t v19 = v10[3];
              }
              if (v19 == v3)
              {
                if ((v18 & 0x80) != 0)
                {
                }

                else
                {
                  if (!*((_BYTE *)v10 + 39)) {
                    return v10;
                  }
                  uint64_t v20 = 0LL;
                  while (*((unsigned __int8 *)v10 + v20 + 16) == *((unsigned __int8 *)v2 + v20))
                  {
                    if (v18 == ++v20) {
                      return v10;
                    }
                  }
                }
              }
            }

            else if ((v17 & v11) != v8)
            {
              return 0LL;
            }

            __n128 result = 0LL;
            int v10 = (uint64_t *)*v10;
            if (!v10) {
              return result;
            }
          }
        }

        while (1)
        {
          unint64_t v13 = v10[1];
          if (v6 == v13)
          {
            uint64_t v14 = *((unsigned __int8 *)v10 + 39);
            if ((v14 & 0x80u) == 0LL) {
              uint64_t v15 = *((unsigned __int8 *)v10 + 39);
            }
            else {
              uint64_t v15 = v10[3];
            }
            if (v15 == v3)
            {
              if ((v14 & 0x80) != 0)
              {
              }

              else
              {
                if (!*((_BYTE *)v10 + 39)) {
                  return v10;
                }
                uint64_t v16 = 0LL;
                while (*((unsigned __int8 *)v10 + v16 + 16) == *((unsigned __int8 *)v2 + v16))
                {
                  if (v14 == ++v16) {
                    return v10;
                  }
                }
              }
            }
          }

          else
          {
            if (v13 >= v5) {
              v13 %= v5;
            }
            if (v13 != v8) {
              return 0LL;
            }
          }

          __n128 result = 0LL;
          int v10 = (uint64_t *)*v10;
          if (!v10) {
            return result;
          }
        }
      }
    }
  }

  return 0LL;
}

void std::string::__init_copy_ctor_external( std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  unint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8LL) {
      abort();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    unint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__l.__cap_ = v7 | 0x8000000000000000LL;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    unint64_t v5 = v8;
  }

  else
  {
    this->__r_.__value_.__s.__size_ = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

void *std::string::__assign_no_alias<true>(void *__dst, void *__src, size_t __len)
{
  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7LL <= 0x800000000000001ELL) {
      abort();
    }
    size_t v7 = 44LL;
    if (__len > 0x2C) {
      size_t v7 = __len;
    }
    size_t v8 = (v7 | 7) + 1;
    std::string::size_type v6 = operator new(v8);
    memcpy(v6, __src, __len);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000LL;
    *std::string __dst = v6;
  }

  else
  {
    *((_BYTE *)__dst + 23) = __len;
    std::string::size_type v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      std::string::size_type v6 = __dst;
    }
  }

  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

std::string *nw_http_sniffing_get_mime_type_for_rule_array( std::string *result, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  result->__r_.__value_.__r.__words[0] = 0LL;
  result->__r_.__value_.__l.__size_ = 0LL;
  result->__r_.__value_.__l.__cap_ = 0LL;
  if (a2 != a3)
  {
    unint64_t v5 = 512LL;
    std::string::size_type v6 = (_BYTE *)a4[1];
    if (v6)
    {
      uint64_t v7 = 0LL;
      char v8 = 0;
      unint64_t v9 = 0LL;
      uint64_t v10 = 0LL;
      if ((a5 & 1) != 0)
      {
        uint64_t v11 = a4;
        while (1)
        {
          unint64_t v13 = a4[4 * v7 + 2];
          if (v5 >= v13)
          {
            int v14 = *v6;
            if (v14 != 60)
            {
              uint64_t v15 = a2;
              if (!v13) {
                goto LABEL_7;
              }
              goto LABEL_18;
            }

            if ((v8 & 1) != 0)
            {
              if (!v10) {
                goto LABEL_36;
              }
            }

            else
            {
              if (!v5) {
                goto LABEL_35;
              }
              uint64_t v19 = 0LL;
              while (1)
              {
                uint64_t v10 = a2 + v19;
                if (v5 == ++v19) {
                  goto LABEL_35;
                }
              }

              if (*(_BYTE *)(a2 + v19) != 60)
              {
LABEL_35:
                uint64_t v10 = 0LL;
LABEL_36:
                char v8 = 1;
                goto LABEL_9;
              }

              unint64_t v9 = v5 - v19;
            }

            char v8 = 1;
            uint64_t v15 = v10;
            if (v9 >= v13)
            {
              if (!v13)
              {
LABEL_7:
                uint64_t v12 = 0LL;
                goto LABEL_8;
              }

uint64_t nw_http_sniffing_get_mime_type_for_complex_nonscriptable_type_rules(uint64_t result, uint64_t a2)
{
  *(void *)__n128 result = 0LL;
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  int v2 = *(unsigned __int16 **)(a2 + 520);
  unint64_t v3 = *(unsigned __int16 **)(a2 + 528);
  if (v2 == v3) {
    return result;
  }
  unint64_t v4 = (char *)v3 - (char *)v2;
  if (v4 >= 0x200) {
    unint64_t v4 = 512LL;
  }
  if (v4 < 4)
  {
    int v6 = 0;
    goto LABEL_13;
  }

  BOOL v5 = *v2 == 17481 && *((_BYTE *)v2 + 2) == 51;
  if (v5 && *((char *)v2 + 3) <= 31)
  {
    int v6 = 10;
    *(_BYTE *)(result + 23) = 10;
    *(_WORD *)(result + 8) = 26469;
    *(void *)__n128 result = *(void *)"audio/mpeg";
LABEL_13:
    BOOL v7 = v4 > 7;
    goto LABEL_14;
  }

  if (v4 < 8)
  {
    BOOL v7 = 0;
    int v6 = 0;
    goto LABEL_42;
  }

  if (*((_DWORD *)v2 + 1) == 1987014509 || *((_DWORD *)v2 + 1) == 1952539757 || *((_DWORD *)v2 + 1) == 1701079415)
  {
    int v6 = 15;
    *(_BYTE *)(result + 23) = 15;
    qmemcpy((void *)result, "video/quicktime", 15);
    goto LABEL_66;
  }

  int v6 = 0;
  BOOL v7 = 1;
LABEL_14:
  BOOL v8 = v4 > 0xB;
  int v9 = v6;
  if (v6 || v4 < 0xC) {
    goto LABEL_20;
  }
  if (*(_BYTE *)v2 || *((_BYTE *)v2 + 1) || *((_DWORD *)v2 + 1) != 1887007846) {
    goto LABEL_19;
  }
  if (v2[4] == 28781 && *((_BYTE *)v2 + 10) == 52)
  {
    if (*((unsigned __int8 *)v2 + 11) - 49 <= 1)
    {
LABEL_107:
      int v6 = 9;
      *(_BYTE *)(result + 23) = 9;
      *(_WORD *)(result + 8) = 52;
      int v14 = "video/mp4";
      goto LABEL_65;
    }

std::string *__cdecl std::string::__assign_external( std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(v6) = (char)this->__r_.__value_.__s.__size_;
  if ((v6 & 0x80000000) != 0)
  {
    std::string::size_type cap = this->__r_.__value_.__l.__cap_;
    unint64_t v8 = (cap & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__n > v8)
    {
      size_t v11 = 0x7FFFFFFFFFFFFFF7LL;
      if (0x7FFFFFFFFFFFFFF7LL - (cap & 0x7FFFFFFFFFFFFFFFLL) >= __n - v8)
      {
        int v9 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v8 > 0x3FFFFFFFFFFFFFF2LL)
        {
LABEL_15:
          BOOL v7 = operator new(v11);
          memcpy(v7, __s, __n);
          if (v8 != 22) {
            operator delete(v9);
          }
          this->__r_.__value_.__l.__cap_ = v11 | 0x8000000000000000LL;
          this->__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
LABEL_23:
          this->__r_.__value_.__l.__size_ = __n;
          goto LABEL_24;
        }

void **std::string::__assign_no_alias<false>(void **a1, void *__src, size_t __len)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) <= __len)
  {
    size_t v9 = 0x7FFFFFFFFFFFFFF7LL;
    if (0x7FFFFFFFFFFFFFF7LL - v7 < __len - v7 + 1) {
      abort();
    }
    unint64_t v10 = v7 - 1;
    size_t v11 = a1;
    if ((v6 & 0x8000000000000000LL) != 0) {
      size_t v11 = *a1;
    }
    if (v10 <= 0x3FFFFFFFFFFFFFF2LL)
    {
      unint64_t v12 = 2 * v10;
      if (__len > 2 * v10) {
        unint64_t v12 = __len;
      }
      uint64_t v13 = (v12 & 0xFFFFFFFFFFFFFFF8LL) + 8;
      if ((v12 | 7) != 0x17) {
        uint64_t v13 = v12 | 7;
      }
      if (v12 >= 0x17) {
        size_t v9 = v13 + 1;
      }
      else {
        size_t v9 = 23LL;
      }
    }

    int v14 = operator new(v9);
    unint64_t v8 = v14;
    if (__len) {
      memcpy(v14, __src, __len);
    }
    if (v10 != 22) {
      operator delete(v11);
    }
    a1[1] = (void *)__len;
    a1[2] = (void *)(v9 | 0x8000000000000000LL);
    *a1 = v8;
  }

  else
  {
    unint64_t v8 = *a1;
    a1[1] = (void *)__len;
    if (__len) {
      memmove(v8, __src, __len);
    }
  }

  *((_BYTE *)v8 + __len) = 0;
  return a1;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]( uint64_t *a1, unint64_t a2)
{
  if (a2 > 0x20)
  {
    if (a2 <= 0x40)
    {
      uint64_t v5 = *(uint64_t *)((char *)a1 + a2 - 16);
      uint64_t v6 = *a1 - 0x3C5A37A36834CED9LL * (v5 + a2);
      uint64_t v8 = a1[2];
      uint64_t v7 = a1[3];
      uint64_t v9 = __ROR8__(v6 + v7, 52);
      uint64_t v10 = v6 + a1[1];
      uint64_t v11 = __ROR8__(v10, 7);
      uint64_t v12 = v10 + v8;
      uint64_t v13 = *(uint64_t *)((char *)a1 + a2 - 32) + v8;
      uint64_t v14 = *(uint64_t *)((char *)a1 + a2 - 8) + v7;
      uint64_t v15 = __ROR8__(v14 + v13, 52);
      uint64_t v16 = v11 + __ROR8__(*a1 - 0x3C5A37A36834CED9LL * (v5 + a2), 37) + v9;
      uint64_t v17 = __ROR8__(v13, 37);
      uint64_t v18 = *(uint64_t *)((char *)a1 + a2 - 24) + v13;
      uint64_t v19 = __ROR8__(v18, 7);
      uint64_t v20 = v16 + __ROR8__(v12, 31);
      uint64_t v21 = v18 + v5;
      uint64_t v22 = v21 + v14;
      unint64_t v23 = 0x9AE16A3B2F90404FLL;
      unint64_t v24 = 0xC3A5C85C97CB3127LL * (v22 + v20) - 0x651E95C4D06FBFB1LL * (v12 + v7 + v17 + v19 + v15 + __ROR8__(v21, 31));
      unint64_t v25 = v20 - 0x3C5A37A36834CED9LL * (v24 ^ (v24 >> 47));
      return (v25 ^ (v25 >> 47)) * v23;
    }

    unint64_t v32 = 0x9DDFEA08EB382D69LL;
    uint64_t v33 = *(uint64_t *)((char *)a1 + a2 - 48);
    uint64_t v34 = *(uint64_t *)((char *)a1 + a2 - 40);
    uint64_t v35 = *(uint64_t *)((char *)a1 + a2 - 24);
    uint64_t v37 = *(uint64_t *)((char *)a1 + a2 - 64);
    uint64_t v36 = *(uint64_t *)((char *)a1 + a2 - 56);
    uint64_t v38 = *(uint64_t *)((char *)a1 + a2 - 16);
    uint64_t v39 = *(uint64_t *)((char *)a1 + a2 - 8);
    unint64_t v40 = v36 + v38;
    unint64_t v41 = 0x9DDFEA08EB382D69LL
        * (v35 ^ ((0x9DDFEA08EB382D69LL * (v35 ^ (v33 + a2))) >> 47) ^ (0x9DDFEA08EB382D69LL * (v35 ^ (v33 + a2))));
    unint64_t v42 = 0x9DDFEA08EB382D69LL * (v41 ^ (v41 >> 47));
    unint64_t v43 = v37 + a2 + v36 + v33;
    uint64_t v44 = v43 + v34;
    unint64_t v45 = __ROR8__(v43, 44) + v37 + a2 + __ROR8__(v34 + v37 + a2 - 0x622015F714C7D297LL * (v41 ^ (v41 >> 47)), 21);
    uint64_t v46 = v36 + v38 + *(uint64_t *)((char *)a1 + a2 - 32) - 0x4B6D499041670D8DLL;
    uint64_t v47 = v46 + v35 + v38;
    uint64_t v48 = __ROR8__(v47, 44);
    uint64_t v49 = v47 + v39;
    uint64_t v50 = v48 + v46 + __ROR8__(v46 + v34 + v39, 21);
    uint64_t v52 = *a1;
    unsigned int v51 = a1 + 4;
    unint64_t v53 = v52 - 0x4B6D499041670D8DLL * v34;
    uint64_t v54 = -(uint64_t)((a2 - 1) & 0xFFFFFFFFFFFFFFC0LL);
    do
    {
      uint64_t v55 = *(v51 - 3);
      uint64_t v56 = v53 + v44 + v40 + v55;
      uint64_t v57 = v51[2];
      uint64_t v58 = v51[3];
      uint64_t v59 = v51[1];
      unint64_t v40 = v59 + v44 - 0x4B6D499041670D8DLL * __ROR8__(v40 + v45 + v57, 42);
      uint64_t v60 = v42 + v49;
      uint64_t v61 = *(v51 - 2);
      uint64_t v62 = *(v51 - 1);
      uint64_t v63 = *(v51 - 4) - 0x4B6D499041670D8DLL * v45;
      uint64_t v64 = v63 + v49 + v62;
      uint64_t v65 = v63 + v55 + v61;
      uint64_t v44 = v65 + v62;
      uint64_t v66 = __ROR8__(v65, 44) + v63;
      unint64_t v67 = (0xB492B66FBE98F273LL * __ROR8__(v56, 37)) ^ v50;
      unint64_t v53 = 0xB492B66FBE98F273LL * __ROR8__(v60, 33);
      unint64_t v45 = v66 + __ROR8__(v64 + v67, 21);
      unint64_t v68 = v53 + v50 + *v51;
      uint64_t v49 = v68 + v59 + v57 + v58;
      uint64_t v50 = __ROR8__(v68 + v59 + v57, 44) + v68 + __ROR8__(v40 + v61 + v68 + v58, 21);
      v51 += 8;
      unint64_t v42 = v67;
      v54 += 64LL;
    }

    while (v54);
    unint64_t v69 = v53
        - 0x622015F714C7D297LL
        * ((0x9DDFEA08EB382D69LL
          * (v50 ^ ((0x9DDFEA08EB382D69LL * (v50 ^ v45)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v50 ^ v45)))) ^ ((0x9DDFEA08EB382D69LL * (v50 ^ ((0x9DDFEA08EB382D69LL * (v50 ^ v45)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v50 ^ v45)))) >> 47));
    unint64_t v70 = 0x9DDFEA08EB382D69LL
        * (v69 ^ (v67
                - 0x4B6D499041670D8DLL * (v40 ^ (v40 >> 47))
                - 0x622015F714C7D297LL
                * ((0x9DDFEA08EB382D69LL
                  * (v49 ^ ((0x9DDFEA08EB382D69LL * (v49 ^ v44)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v49 ^ v44)))) ^ ((0x9DDFEA08EB382D69LL * (v49 ^ ((0x9DDFEA08EB382D69LL * (v49 ^ v44)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v49 ^ v44)))) >> 47))));
    unint64_t v71 = 0x9DDFEA08EB382D69LL * (v69 ^ (v70 >> 47) ^ v70);
    goto LABEL_13;
  }

  if (a2 > 0x10)
  {
    uint64_t v26 = a1[1];
    unint64_t v27 = 0xB492B66FBE98F273LL * *a1;
    uint64_t v28 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8), 30) + __ROR8__(v27 - v26, 43);
    unint64_t v29 = v27 + a2 + __ROR8__(v26 ^ 0xC949D7C7509E6557LL, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8);
    unint64_t v23 = 0x9DDFEA08EB382D69LL;
    unint64_t v30 = 0x9DDFEA08EB382D69LL * ((v28 - 0x3C5A37A36834CED9LL * *(uint64_t *)((char *)a1 + a2 - 16)) ^ v29);
    unint64_t v31 = v29 ^ (v30 >> 47) ^ v30;
LABEL_8:
    unint64_t v25 = 0x9DDFEA08EB382D69LL * v31;
    return (v25 ^ (v25 >> 47)) * v23;
  }

  if (a2 >= 9)
  {
    uint64_t v2 = *(uint64_t *)((char *)a1 + a2 - 8);
    uint64_t v3 = __ROR8__(v2 + a2, a2);
    return (0x9DDFEA08EB382D69LL
          * ((0x9DDFEA08EB382D69LL
            * (v3 ^ ((0x9DDFEA08EB382D69LL * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v3 ^ *a1)))) ^ ((0x9DDFEA08EB382D69LL * (v3 ^ ((0x9DDFEA08EB382D69LL * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v3 ^ *a1)))) >> 47))) ^ v2;
  }

  if (a2 >= 4)
  {
    uint64_t v72 = *(unsigned int *)((char *)a1 + a2 - 4);
    unint64_t v23 = 0x9DDFEA08EB382D69LL;
    unint64_t v73 = 0x9DDFEA08EB382D69LL * (((8 * *(_DWORD *)a1) + a2) ^ v72);
    unint64_t v31 = v72 ^ (v73 >> 47) ^ v73;
    goto LABEL_8;
  }

  unint64_t v32 = 0x9AE16A3B2F90404FLL;
  if (a2)
  {
    unint64_t v71 = (0xC949D7C7509E6557LL * (a2 + 4LL * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                   * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
LABEL_13:
    v32 *= v71 ^ (v71 >> 47);
  }

  return v32;
}

_DWORD *std::pair<std::string const,mime_type_class>::pair[abi:nn180100]<char const*&,mime_type_class,0>( _DWORD *a1, char *__s, _DWORD *a3)
{
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8LL) {
    abort();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *((void *)a1 + 1) = v7;
    *((void *)a1 + 2) = v10 | 0x8000000000000000LL;
    *(void *)a1 = v8;
  }

  else
  {
    *((_BYTE *)a1 + 23) = v6;
    uint64_t v8 = a1;
    if (!v6) {
      goto LABEL_9;
    }
  }

  memmove(v8, __s, v7);
LABEL_9:
  *((_BYTE *)v8 + v7) = 0;
  a1[6] = *a3;
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,mime_type_class>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mime_type_class>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mime_type_class>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mime_type_class>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,mime_type_class> const&>( uint64_t a1, uint64_t a2)
{
  int v4 = *(char *)(a1 + 23);
  if (v4 >= 0) {
    uint64_t v5 = (uint64_t *)a1;
  }
  else {
    uint64_t v5 = *(uint64_t **)a1;
  }
  if (v4 >= 0) {
    unint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    unint64_t v6 = *(void *)(a1 + 8);
  }
  unint64_t v7 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v5, v6);
  unint64_t v8 = v7;
  unint64_t v9 = *((void *)&mime_type_to_class(void)::instance + 1);
  if (*((void *)&mime_type_to_class(void)::instance + 1))
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&mime_type_to_class(void)::instance + 8));
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v2 = v7;
    }

    else
    {
      unint64_t v2 = (*((void *)&mime_type_to_class(void)::instance + 1) - 1LL) & v7;
    }

    uint64_t v11 = *(uint64_t ***)(mime_type_to_class(void)::instance + 8 * v2);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v18 = v12[1];
            if (v18 == v8)
            {
              uint64_t v19 = *((unsigned __int8 *)v12 + 39);
              if ((v19 & 0x80u) == 0LL) {
                uint64_t v20 = *((unsigned __int8 *)v12 + 39);
              }
              else {
                uint64_t v20 = v12[3];
              }
              if (v20 == v6)
              {
                uint64_t v21 = (const void **)(v12 + 2);
                if ((v19 & 0x80) != 0)
                {
                  if (!memcmp(*v21, v5, v12[3])) {
                    return;
                  }
                }

                else
                {
                  if (!*((_BYTE *)v12 + 39)) {
                    return;
                  }
                  for (uint64_t i = v5; *(unsigned __int8 *)v21 == *(unsigned __int8 *)i; uint64_t i = (uint64_t *)((char *)i + 1))
                  {
                    uint64_t v21 = (const void **)((char *)v21 + 1);
                    if (!--v19) {
                      return;
                    }
                  }
                }
              }
            }

            else if ((v18 & (v9 - 1)) != v2)
            {
              goto LABEL_49;
            }

            uint64_t v12 = (uint64_t *)*v12;
            if (!v12) {
              goto LABEL_49;
            }
          }
        }

        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            uint64_t v14 = *((unsigned __int8 *)v12 + 39);
            if ((v14 & 0x80u) == 0LL) {
              uint64_t v15 = *((unsigned __int8 *)v12 + 39);
            }
            else {
              uint64_t v15 = v12[3];
            }
            if (v15 == v6)
            {
              uint64_t v16 = (const void **)(v12 + 2);
              if ((v14 & 0x80) != 0)
              {
                if (!memcmp(*v16, v5, v12[3])) {
                  return;
                }
              }

              else
              {
                if (!*((_BYTE *)v12 + 39)) {
                  return;
                }
                for (j = v5; *(unsigned __int8 *)v16 == *(unsigned __int8 *)j; j = (uint64_t *)((char *)j + 1))
                {
                  uint64_t v16 = (const void **)((char *)v16 + 1);
                  if (!--v14) {
                    return;
                  }
                }
              }
            }
          }

          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v2) {
              break;
            }
          }

          uint64_t v12 = (uint64_t *)*v12;
        }

        while (v12);
      }
    }
  }

void std::__throw_bad_array_new_length[abi:nn180100]()
{
}

__n128 __Block_byref_object_copy__19(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 48) = 0LL;
  *(void *)(a2 + 56) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__20(uint64_t a1)
{
}

uint64_t ___ZL31nw_http_sniffing_get_media_typeP25nw_protocol_http_sniffingP20nw_protocol_metadata_block_invoke( uint64_t a1, int a2, int a3, char *__s, uint64_t a5)
{
  if (a5)
  {
    unint64_t v8 = strchr(__s, 59);
    uint64_t v9 = v8 - __s;
    if (!v8) {
      uint64_t v9 = a5;
    }
    uint64_t v10 = v9 - 1;
    uint64_t v11 = MEMORY[0x1895F8770];
    do
    {
      while (1)
      {
        if (v10 == -1)
        {
          size_t v15 = 0LL;
          HIBYTE(v26) = 0;
          p_dst = &__dst;
          goto LABEL_17;
        }

        uint64_t v13 = v10;
        unsigned int v14 = __s[v10];
        if ((v14 & 0x80000000) == 0) {
          break;
        }
        int v12 = __maskrune(v14, 0x4000uLL);
        uint64_t v10 = v13 - 1;
        if (!v12) {
          goto LABEL_9;
        }
      }

      --v10;
    }

    while ((*(_DWORD *)(v11 + 4LL * v14 + 60) & 0x4000) != 0);
LABEL_9:
    size_t v15 = v13 + 1;
    if (v15 >= 0x17)
    {
      uint64_t v17 = (v15 & 0xFFFFFFFFFFFFFFF8LL) + 8;
      if ((v15 | 7) != 0x17) {
        uint64_t v17 = v15 | 7;
      }
      uint64_t v18 = v17 + 1;
      p_dst = (__int128 *)operator new(v17 + 1);
      *((void *)&__dst + 1) = v15;
      int64_t v26 = v18 | 0x8000000000000000LL;
      *(void *)&__int128 __dst = p_dst;
    }

    else
    {
      HIBYTE(v26) = v13 + 1;
      p_dst = &__dst;
    }

    memcpy(p_dst, __s, v15);
LABEL_17:
    *((_BYTE *)p_dst + v15) = 0;
    size_t v19 = HIBYTE(v26);
    int v20 = SHIBYTE(v26);
    if (v26 < 0) {
      size_t v19 = *((void *)&__dst + 1);
    }
    if (v19)
    {
      uint64_t v21 = *(void *)(*(void *)(a1 + 32) + 8LL);
      uint64_t v22 = (void **)(v21 + 40);
      if ((*(char *)(v21 + 63) & 0x80000000) == 0)
      {
        if ((SHIBYTE(v26) & 0x80000000) == 0)
        {
          *(_OWORD *)uint64_t v22 = __dst;
          *(void *)(v21 + 56) = v26;
          return 1LL;
        }

        std::string::__assign_no_alias<true>(v22, (void *)__dst, *((size_t *)&__dst + 1));
LABEL_30:
        operator delete((void *)__dst);
        return 1LL;
      }

      if (v26 >= 0) {
        unint64_t v23 = &__dst;
      }
      else {
        unint64_t v23 = (__int128 *)__dst;
      }
      std::string::__assign_no_alias<false>(v22, v23, v19);
    }

    if ((v20 & 0x80000000) == 0) {
      return 1LL;
    }
    goto LABEL_30;
  }

  return 1LL;
}

uint64_t ___ZL29nw_http_sniffing_should_sniffP25nw_protocol_http_sniffingNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEP20nw_protocol_metadata_block_invoke( uint64_t result, char *a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    __n128 result = strcasecmp(a2, "nosniff");
    if (!(_DWORD)result) {
      *(_BYTE *)(*(void *)(*(void *)(v2 + 32) + 8LL) + 24LL) = 1;
    }
  }

  return result;
}

uint64_t ___ZL29nw_http_sniffing_should_sniffP25nw_protocol_http_sniffingNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEP20nw_protocol_metadata_block_invoke_2( uint64_t a1, int a2, int a3, char *__big)
{
  uint64_t v5 = strcasestr(__big, "charset=");
  if (!v5) {
    return 1LL;
  }
  unint64_t v6 = v5;
  unint64_t v7 = v5 + 8;
  uint64_t v8 = 8LL;
  do
  {
    uint64_t v9 = v8;
    char is_valid_token_char = nw_http_is_valid_token_char(v6[v8]);
    uint64_t v8 = v9 + 1;
  }

  while ((is_valid_token_char & 1) != 0);
  size_t v11 = v9 - 8;
  if (v11 >= 0x17)
  {
    uint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v13 = v11 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (__int128 *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v11;
    unint64_t v19 = v14 | 0x8000000000000000LL;
    *(void *)&__int128 __dst = p_dst;
  }

  else
  {
    HIBYTE(v19) = v9 - 8;
    p_dst = &__dst;
    if (!v11) {
      goto LABEL_12;
    }
  }

  memmove(p_dst, v7, v11);
LABEL_12:
  *((_BYTE *)p_dst + v11) = 0;
  uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v16 = v15 + 40;
  *(_OWORD *)uint64_t v16 = __dst;
  *(void *)(v16 + 16) = v19;
  return 1LL;
}

double __nw_protocol_http_sniffing_identifier_block_invoke()
{
  *(void *)&double result = 0x100000005LL;
  qword_18C592860 = 0x100000005LL;
  return result;
}

uint64_t networkd_privileged_get_kernel_socket_internal(uint64_t a1)
{
  uint64_t v102 = *MEMORY[0x1895F89C0];
  xpc_object_t v2 = xpc_dictionary_create(0LL, 0LL, 0LL);
  uint64_t v3 = v2;
  if (v2)
  {
    xpc_dictionary_set_uint64(v2, (const char *)networkd_privileged_key_type, a1);
    xpc_object_t v4 = networkd_privileged_send_sync_inner((uint64_t)"networkd_privileged_get_kernel_socket_internal", v3);
    uint64_t v5 = v4;
    if (!v4)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (id)gLogObj;
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
      unint64_t v7 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v94 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v13 = (os_log_s *)(id)gLogObj;
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
          _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s received NULL response", buf, 0xCu);
        }

        goto LABEL_175;
      }

      if (!v94)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v13 = (os_log_s *)(id)gLogObj;
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
          _os_log_impl( &dword_181A5C000,  v13,  v31,  "%{public}s received NULL response, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_175;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v13 = (os_log_s *)(id)gLogObj;
      os_log_type_t v22 = type;
      BOOL v23 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)std::string buf = 136446210;
          uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
          _os_log_impl(&dword_181A5C000, v13, v22, "%{public}s received NULL response, no backtrace", buf, 0xCu);
        }

        goto LABEL_175;
      }

      if (v23)
      {
        *(_DWORD *)std::string buf = 136446466;
        uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
        __int16 v98 = 2082;
        *(void *)unint64_t v99 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v13,  v22,  "%{public}s received NULL response, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_26;
    }

    Class Class = object_getClass(v4);
    if (Class != (Class)MEMORY[0x1895F9250])
    {
      if (Class != (Class)MEMORY[0x1895F9268])
      {
        unint64_t v7 = (char *)MEMORY[0x186E12534](v5);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v8 = (id)gLogObj;
        *(_DWORD *)std::string buf = 136446466;
        uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
        __int16 v98 = 2082;
        *(void *)unint64_t v99 = v7;
        uint64_t v9 = (const char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v94 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v10 = (os_log_s *)(id)gLogObj;
          os_log_type_t v11 = type;
          if (os_log_type_enabled(v10, type))
          {
            *(_DWORD *)std::string buf = 136446466;
            uint64_t v97 = "networkd_privileged_get_kernel_socket_internal";
            __int16 v98 = 2082;
            *(void *)unint64_t v99 = v7;
            _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s received unknown type XPC %{public}s", buf, 0x16u);
          }

void sub_181CE2B94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

xpc_object_t networkd_privileged_send_sync_inner(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  xpc_object_t v4 = (_xpc_connection_s *)networkd_privileged_copy_connection();
  uint64_t v5 = v4;
  if (v4)
  {
    xpc_object_t v6 = xpc_connection_send_message_with_reply_sync(v4, v3);
    if (v6 == (xpc_object_t)MEMORY[0x1895F9198])
    {
      __nwlog_obj();
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        int v14 = 136446722;
        uint64_t v15 = "networkd_privileged_send_sync_inner";
        __int16 v16 = 2082;
        uint64_t v17 = a1;
        __int16 v18 = 1024;
        int v19 = 1;
        _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, retrying (%u)",  (uint8_t *)&v14,  0x1Cu);
      }

      xpc_object_t v9 = (xpc_object_t)MEMORY[0x1895F9198];
      xpc_object_t v6 = xpc_connection_send_message_with_reply_sync(v5, v3);

      if (v6 == v9)
      {
        __nwlog_obj();
        uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          int v14 = 136446722;
          uint64_t v15 = "networkd_privileged_send_sync_inner";
          __int16 v16 = 2082;
          uint64_t v17 = a1;
          __int16 v18 = 1024;
          int v19 = 2;
          _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, retrying (%u)",  (uint8_t *)&v14,  0x1Cu);
        }

        xpc_object_t v6 = xpc_connection_send_message_with_reply_sync(v5, v3);
        if (v6 == v9)
        {
          __nwlog_obj();
          os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            int v14 = 136446722;
            uint64_t v15 = "networkd_privileged_send_sync_inner";
            __int16 v16 = 2082;
            uint64_t v17 = a1;
            __int16 v18 = 1024;
            int v19 = 3;
            _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, retrying (%u)",  (uint8_t *)&v14,  0x1Cu);
          }

          xpc_object_t v6 = xpc_connection_send_message_with_reply_sync(v5, v3);
          if (v6 == v9)
          {
            __nwlog_obj();
            id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
            {
              int v14 = 136446722;
              uint64_t v15 = "networkd_privileged_send_sync_inner";
              __int16 v16 = 2082;
              uint64_t v17 = a1;
              __int16 v18 = 1024;
              int v19 = 4;
              _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, retrying (%u)",  (uint8_t *)&v14,  0x1Cu);
            }

            xpc_object_t v6 = xpc_connection_send_message_with_reply_sync(v5, v3);
            if (v6 == v9)
            {
              __nwlog_obj();
              uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
              {
                int v14 = 136446722;
                uint64_t v15 = "networkd_privileged_send_sync_inner";
                __int16 v16 = 2082;
                uint64_t v17 = a1;
                __int16 v18 = 1024;
                int v19 = 5;
                _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, retrying (%u)",  (uint8_t *)&v14,  0x1Cu);
              }

              xpc_object_t v6 = (xpc_object_t)MEMORY[0x1895F9198];
            }
          }
        }
      }
    }
  }

  else
  {
    xpc_object_t v6 = 0LL;
  }

  return v6;
}

void sub_181CE2F4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *networkd_privileged_result_to_string(uint64_t a1)
{
  switch(a1)
  {
    case 0xFFFFFC12:
      double result = "FailureParseAgent";
      break;
    case 0xFFFFFC13:
      double result = "FailureCreateXPCFD";
      break;
    case 0xFFFFFC14:
      double result = "FailureCreateKernelSocket";
      break;
    case 0xFFFFFC15:
      double result = "FailureInvalidType";
      break;
    case 0xFFFFFC16:
      double result = "FailureMissingEntitlement";
      break;
    case 0xFFFFFC17:
      double result = "FailureUnknown";
      break;
    default:
      if ((_DWORD)a1) {
        return "Unknown";
      }
      double result = "Success";
      break;
  }

  return result;
}

id networkd_privileged_copy_connection(void)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v0 = (id)networkd_privileged_copy_queue(void)::networkdPrivilegedQueue;
  int v1 = v0;
  if (!v0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "networkd_privileged_copy_connection";
    xpc_object_t v4 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v4, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v5 = (os_log_s *)(id)gLogObj;
        os_log_type_t v6 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = "networkd_privileged_copy_connection";
          _os_log_impl(&dword_181A5C000, v5, v6, "%{public}s networkd_privileged_copy_queue failed", buf, 0xCu);
        }
      }

      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v5 = (os_log_s *)(id)gLogObj;
        os_log_type_t v9 = type;
        BOOL v10 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)std::string buf = 136446466;
            *(void *)&uint8_t buf[4] = "networkd_privileged_copy_connection";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v5,  v9,  "%{public}s networkd_privileged_copy_queue failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          if (!v4) {
            goto LABEL_12;
          }
          goto LABEL_11;
        }

        if (v10)
        {
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = "networkd_privileged_copy_connection";
          _os_log_impl( &dword_181A5C000,  v5,  v9,  "%{public}s networkd_privileged_copy_queue failed, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v5 = (os_log_s *)(id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = "networkd_privileged_copy_connection";
          _os_log_impl( &dword_181A5C000,  v5,  v11,  "%{public}s networkd_privileged_copy_queue failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v4)
    {
LABEL_12:
      id v2 = 0LL;
      goto LABEL_13;
    }

uint64_t __Block_byref_object_copy__642(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__643(uint64_t a1)
{
}

void ___ZL35networkd_privileged_copy_connectionv_block_invoke(uint64_t a1)
{
  id v2 = (void *)_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection;
  if (_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection) {
    goto LABEL_2;
  }
  xpc_connection_t mach_service = xpc_connection_create_mach_service( (const char *)networkd_privileged_service,  *(dispatch_queue_t *)(a1 + 32),  2uLL);
  xpc_object_t v4 = (void *)_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection;
  _ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection = (uint64_t)mach_service;

  if (_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection)
  {
    Class Class = object_getClass((id)_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection);
    os_log_type_t v6 = (void *)_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection;
    if (Class == (Class)MEMORY[0x1895F9238])
    {
      id v7 = (id)_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection;
      id v8 = (_xpc_connection_s *)_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection;
      handler[0] = MEMORY[0x1895F87A8];
      handler[1] = 3221225472LL;
      handler[2] = ___ZL35networkd_privileged_copy_connectionv_block_invoke_2;
      handler[3] = &unk_189BB5B98;
      id v9 = v7;
      id v11 = v9;
      xpc_connection_set_event_handler(v8, handler);
      xpc_connection_resume((xpc_connection_t)_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection);

      id v2 = (void *)_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection;
      if (!_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection) {
        return;
      }
      goto LABEL_2;
    }

    if (_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection)
    {
      _ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection = 0LL;

      id v2 = (void *)_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection;
      if (_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection) {
LABEL_2:
      }
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), v2);
    }
  }

void sub_181CE34D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZL35networkd_privileged_copy_connectionv_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  Class Class = object_getClass(v3);
  BOOL v5 = Class != (Class)MEMORY[0x1895F9268]
    || _ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection == 0;
  if (!v5 && *(void *)(a1 + 32) == _ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection)
  {
    xpc_connection_cancel((xpc_connection_t)_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection);
    id v8 = (void *)_ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection;
    _ZZZL35networkd_privileged_copy_connectionvEUb7_E29sNetworkdPrivilegedConnection = 0LL;
  }

  else if (Class == (Class)MEMORY[0x1895F9250])
  {
    os_log_type_t v6 = (void *)MEMORY[0x186E12534](v3);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136446722;
      BOOL v10 = "networkd_privileged_copy_connection_block_invoke_2";
      __int16 v11 = 2082;
      uint64_t v12 = networkd_privileged_service;
      __int16 v13 = 2082;
      int v14 = v6;
      _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_ERROR,  "%{public}s unexpected message from %{public}s: %{public}s",  (uint8_t *)&v9,  0x20u);
    }

    if (v6) {
      free(v6);
    }
  }
}

void sub_181CE3650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL30networkd_privileged_copy_queuev_block_invoke()
{
  id v2 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue();
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.network.xpc_to_privileged_helper", v2);
  int v1 = (void *)networkd_privileged_copy_queue(void)::networkdPrivilegedQueue;
  networkd_privileged_copy_queue(void)::networkdPrivilegedQueue = (uint64_t)v0;
}

BOOL networkd_privileged_set_agent_on_interface_internal( const char *a1, const unsigned __int8 *a2, BOOL a3, int a4)
{
  uint64_t v114 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    xpc_object_t v8 = xpc_dictionary_create(0LL, 0LL, 0LL);
    int v9 = v8;
    if (v8)
    {
      if (a4) {
        uint64_t v10 = 14LL;
      }
      else {
        uint64_t v10 = 8LL;
      }
      xpc_dictionary_set_uint64(v8, (const char *)networkd_privileged_key_type, v10);
      xpc_dictionary_set_string(v9, (const char *)networkd_privileged_key_interface_name, a1);
      xpc_dictionary_set_uuid(v9, (const char *)networkd_privileged_key_agent_uuid, a2);
      xpc_dictionary_set_BOOL(v9, (const char *)networkd_privileged_key_remove, a3);
      xpc_object_t v11 = networkd_privileged_send_sync_inner((uint64_t)"networkd_privileged_set_agent_on_interface_internal", v9);
      uint64_t v12 = v11;
      if (v11)
      {
        Class Class = object_getClass(v11);
        if (Class != (Class)MEMORY[0x1895F9250])
        {
          if (Class != (Class)MEMORY[0x1895F9268])
          {
            int v14 = (void *)MEMORY[0x186E12534](v12);
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v15 = (id)gLogObj;
            *(_DWORD *)std::string buf = 136446466;
            unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
            __int16 v110 = 2082;
            *(void *)std::string::value_type v111 = v14;
            __int16 v16 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v106 = 0;
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v17 = (os_log_s *)(id)gLogObj;
              os_log_type_t v18 = type;
              if (os_log_type_enabled(v17, type))
              {
                *(_DWORD *)std::string buf = 136446466;
                unint64_t v109 = "networkd_privileged_set_agent_on_interface_internal";
                __int16 v110 = 2082;
                *(void *)std::string::value_type v111 = v14;
                _os_log_impl(&dword_181A5C000, v17, v18, "%{public}s received unknown type XPC %{public}s", buf, 0x16u);
              }

void sub_181CE524C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL networkd_privileged_setup_feth_pair(const char *a1, const char *a2)
{
  uint64_t v114 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    os_log_type_t v84 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    unint64_t v109 = "networkd_privileged_setup_feth_pair";
    BOOL v85 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v106 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v86 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v87 = type;
      if (os_log_type_enabled(v86, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        unint64_t v109 = "networkd_privileged_setup_feth_pair";
        _os_log_impl(&dword_181A5C000, v86, v87, "%{public}s called with null ifname1", buf, 0xCu);
      }
    }

    else if (v106)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v86 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v95 = type;
      BOOL v96 = os_log_type_enabled(v86, type);
      if (backtrace_string)
      {
        if (v96)
        {
          *(_DWORD *)std::string buf = 136446466;
          unint64_t v109 = "networkd_privileged_setup_feth_pair";
          __int16 v110 = 2082;
          *(void *)std::string::value_type v111 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v86,  v95,  "%{public}s called with null ifname1, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v85) {
          return 0LL;
        }
        goto LABEL_236;
      }

      if (v96)
      {
        *(_DWORD *)std::string buf = 136446210;
        unint64_t v109 = "networkd_privileged_setup_feth_pair";
        _os_log_impl(&dword_181A5C000, v86, v95, "%{public}s called with null ifname1, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v86 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v103 = type;
      if (os_log_type_enabled(v86, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        unint64_t v109 = "networkd_privileged_setup_feth_pair";
        _os_log_impl( &dword_181A5C000,  v86,  v103,  "%{public}s called with null ifname1, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_234;
  }

  if (!a2)
  {
    __nwlog_obj();
    BOOL v88 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    unint64_t v109 = "networkd_privileged_setup_feth_pair";
    BOOL v85 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v106 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v86 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v89 = type;
      if (os_log_type_enabled(v86, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        unint64_t v109 = "networkd_privileged_setup_feth_pair";
        _os_log_impl(&dword_181A5C000, v86, v89, "%{public}s called with null ifname2", buf, 0xCu);
      }
    }

    else if (v106)
    {
      os_log_type_t v97 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v86 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v98 = type;
      BOOL v99 = os_log_type_enabled(v86, type);
      if (v97)
      {
        if (v99)
        {
          *(_DWORD *)std::string buf = 136446466;
          unint64_t v109 = "networkd_privileged_setup_feth_pair";
          __int16 v110 = 2082;
          *(void *)std::string::value_type v111 = v97;
          _os_log_impl( &dword_181A5C000,  v86,  v98,  "%{public}s called with null ifname2, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v97);
LABEL_235:
        if (!v85) {
          return 0LL;
        }
LABEL_236:
        free(v85);
        return 0LL;
      }

      if (v99)
      {
        *(_DWORD *)std::string buf = 136446210;
        unint64_t v109 = "networkd_privileged_setup_feth_pair";
        _os_log_impl(&dword_181A5C000, v86, v98, "%{public}s called with null ifname2, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v86 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v104 = type;
      if (os_log_type_enabled(v86, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        unint64_t v109 = "networkd_privileged_setup_feth_pair";
        _os_log_impl( &dword_181A5C000,  v86,  v104,  "%{public}s called with null ifname2, backtrace limit exceeded",  buf,  0xCu);
      }
    }

LABEL_187:
      if (!v42) {
        goto LABEL_140;
      }
      goto LABEL_188;
    }

    __nwlog_obj();
    uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v63 = networkd_privileged_result_to_string(v40);
    *(_DWORD *)std::string buf = 136446722;
    unint64_t v109 = "networkd_privileged_setup_feth_pair";
    __int16 v110 = 2048;
    *(void *)std::string::value_type v111 = v40;
    *(_WORD *)&v111[8] = 2082;
    *(void *)&v111[10] = v63;
    uint64_t v42 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v106 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v64 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v65 = type;
      if (os_log_type_enabled(v64, type))
      {
        *(_DWORD *)std::string buf = 136446722;
        unint64_t v109 = "networkd_privileged_setup_feth_pair";
        __int16 v110 = 2048;
        *(void *)std::string::value_type v111 = v40;
        *(_WORD *)&v111[8] = 2082;
        *(void *)&v111[10] = v63;
        _os_log_impl( &dword_181A5C000,  v64,  v65,  "%{public}s received internal failure result code: [%lld] %{public}s",  buf,  0x20u);
      }
    }

    else if (v106)
    {
      os_log_type_t v76 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v64 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v77 = type;
      BOOL v78 = os_log_type_enabled(v64, type);
      if (v76)
      {
        if (v78)
        {
          *(_DWORD *)std::string buf = 136446978;
          unint64_t v109 = "networkd_privileged_setup_feth_pair";
          __int16 v110 = 2048;
          *(void *)std::string::value_type v111 = v40;
          *(_WORD *)&v111[8] = 2082;
          *(void *)&v111[10] = v63;
          __int16 v112 = 2082;
          __int16 v113 = v76;
          _os_log_impl( &dword_181A5C000,  v64,  v77,  "%{public}s received internal failure result code: [%lld] %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v76);
        goto LABEL_187;
      }

      if (v78)
      {
        *(_DWORD *)std::string buf = 136446722;
        unint64_t v109 = "networkd_privileged_setup_feth_pair";
        __int16 v110 = 2048;
        *(void *)std::string::value_type v111 = v40;
        *(_WORD *)&v111[8] = 2082;
        *(void *)&v111[10] = v63;
        _os_log_impl( &dword_181A5C000,  v64,  v77,  "%{public}s received internal failure result code: [%lld] %{public}s, no backtrace",  buf,  0x20u);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v64 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v82 = type;
      if (os_log_type_enabled(v64, type))
      {
        *(_DWORD *)std::string buf = 136446722;
        unint64_t v109 = "networkd_privileged_setup_feth_pair";
        __int16 v110 = 2048;
        *(void *)std::string::value_type v111 = v40;
        *(_WORD *)&v111[8] = 2082;
        *(void *)&v111[10] = v63;
        _os_log_impl( &dword_181A5C000,  v64,  v82,  "%{public}s received internal failure result code: [%lld] %{public}s, backtrace limit exceeded",  buf,  0x20u);
      }
    }

    goto LABEL_187;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v14 = (id)gLogObj;
  *(_DWORD *)std::string buf = 136446210;
  unint64_t v109 = "networkd_privileged_setup_feth_pair";
  id v15 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v106 = 0;
  if (__nwlog_fault(v15, &type, &v106))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v16 = (os_log_s *)(id)gLogObj;
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        unint64_t v109 = "networkd_privileged_setup_feth_pair";
        _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s received NULL response", buf, 0xCu);
      }
    }

    else if (v106)
    {
      id v24 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v16 = (os_log_s *)(id)gLogObj;
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v16, type);
      if (v24)
      {
        if (v26)
        {
          *(_DWORD *)std::string buf = 136446466;
          unint64_t v109 = "networkd_privileged_setup_feth_pair";
          __int16 v110 = 2082;
          *(void *)std::string::value_type v111 = v24;
          _os_log_impl( &dword_181A5C000,  v16,  v25,  "%{public}s received NULL response, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v24);
        if (!v15) {
          goto LABEL_81;
        }
        goto LABEL_80;
      }

      if (v26)
      {
        *(_DWORD *)std::string buf = 136446210;
        unint64_t v109 = "networkd_privileged_setup_feth_pair";
        _os_log_impl(&dword_181A5C000, v16, v25, "%{public}s received NULL response, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v16 = (os_log_s *)(id)gLogObj;
      os_log_type_t v34 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        unint64_t v109 = "networkd_privileged_setup_feth_pair";
        _os_log_impl( &dword_181A5C000,  v16,  v34,  "%{public}s received NULL response, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  if (v15) {
LABEL_80:
  }
    free(v15);
LABEL_81:
  BOOL v50 = 0LL;
LABEL_178:

LABEL_179:
  return v50;
}

      if (v73) {
        free(v73);
      }
      **(_DWORD **)(a1 + 40) = 0;
      goto LABEL_190;
    }

    if (!gLogDatapath) {
      return 0LL;
    }
    uint8x8_t v41 = (os_log_s *)__nwlog_obj();
    if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG)) {
      return 0LL;
    }
    uint64_t v42 = **(_DWORD **)(a1 + 56);
    *(_DWORD *)std::string buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = v16;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v42;
    os_log_type_t v43 = "%{public}s not delivering frame with length %u maximum bytes %u";
    os_log_type_t v44 = v41;
    os_log_type_t v45 = 24;
LABEL_344:
    _os_log_impl(&dword_181A5C000, v44, OS_LOG_TYPE_DEBUG, v43, buf, v45);
    return 0LL;
  }

  if (gLogDatapath)
  {
    v273 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v273, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(void *)&buf[14] = v290;
      _os_log_impl( &dword_181A5C000,  v273,  OS_LOG_TYPE_DEBUG,  "%{public}s delivering frame %p with unknown metadata",  buf,  0x16u);
    }
  }

  id v24 = v290;
  os_log_type_t v25 = v290 + 8;
  BOOL v26 = *((void *)v290 + 4);
  id v27 = (void *)*((void *)v290 + 5);
  if (v26)
  {
    *(void *)(v26 + 40) = v27;
    id v27 = (void *)*((void *)v24 + 5);
  }

  else
  {
    *(void *)(*(void *)(a1 + 64) + 8LL) = v27;
  }

  os_log_s *v27 = v26;
  *os_log_type_t v25 = 0LL;
  v25[1] = 0LL;
  int v46 = *(void *)(a1 + 72);
  uint64_t v47 = v290;
  os_log_type_t v48 = v290;
  *((void *)v290 + 4) = 0LL;
  BOOL v49 = *(void **)(v46 + 8);
  *((void *)v47 + 5) = v49;
  const char *v49 = v47;
  *(void *)(v46 + 8) = v48 + 8;
  BOOL v50 = *(unsigned int **)(a1 + 80);
  os_log_type_t v51 = *v50 >= v16;
  *v50 -= v16;
  if (!v51)
  {
    if (gLogDatapath)
    {
      v276 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v276, OS_LOG_TYPE_DEBUG))
      {
        v277 = (_DWORD *)**(unsigned int **)(a1 + 80);
        *(_DWORD *)std::string buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = "minimum_bytes";
        *(_WORD *)&buf[22] = 2048;
        v292 = v16;
        v293 = 2048;
        v294 = v277;
        _os_log_impl( &dword_181A5C000,  v276,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  buf,  0x2Au);
      }
    }

    **(_DWORD **)(a1 + 80) = 0;
  }

  BOOL v52 = *(unsigned int **)(a1 + 56);
  os_log_type_t v51 = *v52 >= v16;
  *v52 -= v16;
  if (!v51)
  {
    if (gLogDatapath)
    {
      v278 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v278, OS_LOG_TYPE_DEBUG))
      {
        v279 = (_DWORD *)**(unsigned int **)(a1 + 56);
        *(_DWORD *)std::string buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = "maximum_bytes";
        *(_WORD *)&buf[22] = 2048;
        v292 = v16;
        v293 = 2048;
        v294 = v279;
        _os_log_impl( &dword_181A5C000,  v278,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  buf,  0x2Au);
      }
    }

    **(_DWORD **)(a1 + 56) = 0;
  }

  BOOL v53 = *(_DWORD **)(a1 + 40);
  if (!(*v53)--)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v55 = (_DWORD *)**(unsigned int **)(a1 + 40);
    *(_DWORD *)std::string buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = "maximum_frame_count";
    *(_WORD *)&buf[22] = 2048;
    v292 = 1LL;
    v293 = 2048;
    v294 = v55;
    BOOL v56 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v288 = 0;
    if (__nwlog_fault(v56, &type, &v288))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v57 = (os_log_s *)gLogObj;
        os_log_type_t v58 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          BOOL v59 = (_DWORD *)**(unsigned int **)(a1 + 40);
          *(_DWORD *)std::string buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = "maximum_frame_count";
          *(_WORD *)&buf[22] = 2048;
          v292 = 1LL;
          v293 = 2048;
          v294 = v59;
          os_log_type_t v60 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_132:
          _os_log_impl(&dword_181A5C000, v57, v58, v60, buf, 0x2Au);
        }
      }

      else if (v288)
      {
        os_log_type_t v84 = (char *)__nw_create_backtrace_string();
        id v57 = (os_log_s *)__nwlog_obj();
        os_log_type_t v58 = type;
        BOOL v85 = os_log_type_enabled(v57, type);
        if (v84)
        {
          if (v85)
          {
            os_log_type_t v86 = (_DWORD *)**(unsigned int **)(a1 + 40);
            *(_DWORD *)std::string buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = "maximum_frame_count";
            *(_WORD *)&buf[22] = 2048;
            v292 = 1LL;
            v293 = 2048;
            v294 = v86;
            v295 = 2082;
            v296 = v84;
            _os_log_impl( &dword_181A5C000,  v57,  v58,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v84);
          goto LABEL_133;
        }

        if (v85)
        {
          BOOL v125 = (_DWORD *)**(unsigned int **)(a1 + 40);
          *(_DWORD *)std::string buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = "maximum_frame_count";
          *(_WORD *)&buf[22] = 2048;
          v292 = 1LL;
          v293 = 2048;
          v294 = v125;
          os_log_type_t v60 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          goto LABEL_132;
        }
      }

      else
      {
        id v57 = (os_log_s *)__nwlog_obj();
        os_log_type_t v58 = type;
        if (os_log_type_enabled(v57, type))
        {
          os_log_type_t v107 = (_DWORD *)**(unsigned int **)(a1 + 40);
          *(_DWORD *)std::string buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = "maximum_frame_count";
          *(_WORD *)&buf[22] = 2048;
          v292 = 1LL;
          v293 = 2048;
          v294 = v107;
          os_log_type_t v60 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_132;
        }
      }
    }

    goto LABEL_188;
  }

  int v9 = __n + 42;
  if (__n == -42LL)
  {
    __nwlog_obj();
    BOOL v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v56, OS_LOG_TYPE_ERROR);
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v116 = "strict_malloc";
    id v57 = (void *)_os_log_send_and_compose_impl();

    double result = __nwlog_abort((uint64_t)v57);
    if (result) {
      goto LABEL_197;
    }
    free(v57);
  }

  id v10 = malloc(v9);
  if (v10) {
    goto LABEL_7;
  }
  __nwlog_obj();
  os_log_type_t v58 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v58, OS_LOG_TYPE_ERROR);
  *(_DWORD *)std::string buf = 136446466;
  uint64_t v116 = "strict_malloc";
  BOOL v117 = 2048;
  v118 = v9;
  BOOL v59 = (void *)_os_log_send_and_compose_impl();

  double result = __nwlog_abort((uint64_t)v59);
  if (!result)
  {
    free(v59);
LABEL_7:
    xpc_object_t v11 = (id *)v103;
    os_log_type_t v101 = v11[1];

    uint64_t v12 = nw_protocol_definition_get_identifier(v101);
    os_log_type_t v13 = *((_OWORD *)v12 + 1);
    *id v10 = *(_OWORD *)v12;
    v10[1] = v13;
    *((void *)v10 + 4) = *((void *)v12 + 4);
    id v14 = __n;
    *((_WORD *)v10 + 20) = __n;
    memcpy((char *)v10 + 42, __src, v14);
    id v15 = (char *)v107[3];
    if (v15)
    {
      if (a3)
      {
        if ((unint64_t)v15 < a3)
        {
          __int16 v16 = v9 + 5LL;
          if (a3 - (unint64_t)v15 >= v16)
          {
            *id v15 = 5;
            *(_DWORD *)(v15 + 1) = v9;
            if ((_DWORD)v9) {
              memcpy(v15 + 5, v10, v9);
            }
            BOOL v31 = &v15[v16];
            goto LABEL_65;
          }

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v17 = (id)gLogObj;
          *(_DWORD *)std::string buf = 136447490;
          uint64_t v116 = "nw_necp_append_tlv";
          BOOL v117 = 2048;
          v118 = (size_t)v15;
          BOOL v119 = 2048;
          __int128 v120 = v9 + 5LL;
          os_log_type_t v121 = 2048;
          *(void *)BOOL v122 = a3;
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)BOOL v123 = 5;
          *(_WORD *)&v123[4] = 1024;
          *(_DWORD *)&v123[6] = v9;
          os_log_type_t v18 = (const char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          std::string::value_type v111 = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v18, type, &v111))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              id v19 = (os_log_s *)(id)gLogObj;
              id v20 = type[0];
              if (os_log_type_enabled(v19, type[0]))
              {
                *(_DWORD *)std::string buf = 136447490;
                uint64_t v116 = "nw_necp_append_tlv";
                BOOL v117 = 2048;
                v118 = (size_t)v15;
                BOOL v119 = 2048;
                __int128 v120 = v9 + 5LL;
                os_log_type_t v121 = 2048;
                *(void *)BOOL v122 = a3;
                *(_WORD *)&v122[8] = 1024;
                *(_DWORD *)BOOL v123 = 5;
                *(_WORD *)&v123[4] = 1024;
                *(_DWORD *)&v123[6] = v9;
                _os_log_impl( &dword_181A5C000,  v19,  v20,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u",  buf,  0x36u);
              }
            }

            else if (v111)
            {
              BOOL v36 = __nw_create_backtrace_string();
              if (v36)
              {
                id v37 = (char *)v36;
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                os_log_type_t v38 = (os_log_s *)(id)gLogObj;
                os_log_type_t v39 = type[0];
                if (os_log_type_enabled(v38, type[0]))
                {
                  *(_DWORD *)std::string buf = 136447746;
                  uint64_t v116 = "nw_necp_append_tlv";
                  BOOL v117 = 2048;
                  v118 = (size_t)v15;
                  BOOL v119 = 2048;
                  __int128 v120 = v9 + 5LL;
                  os_log_type_t v121 = 2048;
                  *(void *)BOOL v122 = a3;
                  *(_WORD *)&v122[8] = 1024;
                  *(_DWORD *)BOOL v123 = 5;
                  *(_WORD *)&v123[4] = 1024;
                  *(_DWORD *)&v123[6] = v9;
                  int v124 = 2082;
                  BOOL v125 = v37;
                  _os_log_impl( &dword_181A5C000,  v38,  v39,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s",  buf,  0x40u);
                }

                free(v37);
                if (!v18) {
                  goto LABEL_64;
                }
LABEL_62:
                os_log_type_t v45 = (char *)v18;
LABEL_63:
                free(v45);
                goto LABEL_64;
              }

              __nwlog_obj();
              id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v44 = type[0];
              if (os_log_type_enabled(v19, type[0]))
              {
                *(_DWORD *)std::string buf = 136447490;
                uint64_t v116 = "nw_necp_append_tlv";
                BOOL v117 = 2048;
                v118 = (size_t)v15;
                BOOL v119 = 2048;
                __int128 v120 = v9 + 5LL;
                os_log_type_t v121 = 2048;
                *(void *)BOOL v122 = a3;
                *(_WORD *)&v122[8] = 1024;
                *(_DWORD *)BOOL v123 = 5;
                *(_WORD *)&v123[4] = 1024;
                *(_DWORD *)&v123[6] = v9;
                _os_log_impl( &dword_181A5C000,  v19,  v44,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace",  buf,  0x36u);
              }
            }

            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              id v19 = (os_log_s *)(id)gLogObj;
              uint8x8_t v41 = type[0];
              if (os_log_type_enabled(v19, type[0]))
              {
                *(_DWORD *)std::string buf = 136447490;
                uint64_t v116 = "nw_necp_append_tlv";
                BOOL v117 = 2048;
                v118 = (size_t)v15;
                BOOL v119 = 2048;
                __int128 v120 = v9 + 5LL;
                os_log_type_t v121 = 2048;
                *(void *)BOOL v122 = a3;
                *(_WORD *)&v122[8] = 1024;
                *(_DWORD *)BOOL v123 = 5;
                *(_WORD *)&v123[4] = 1024;
                *(_DWORD *)&v123[6] = v9;
                _os_log_impl( &dword_181A5C000,  v19,  v41,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded",  buf,  0x36u);
              }
            }

            goto LABEL_60;
          }

        os_log_type_t v73 = (os_log_s *)__nwlog_obj();
        os_log_type_t v74 = type[0];
        if (!os_log_type_enabled(v73, type[0])) {
          goto LABEL_212;
        }
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
        BOOL v75 = "%{public}s called with null http1";
LABEL_201:
        os_log_type_t v105 = buf;
LABEL_211:
        _os_log_impl(&dword_181A5C000, v73, v74, v75, v105, 0xCu);
        goto LABEL_212;
      }

      uint64_t v42 = v40 | (v39 << 16);
      if ((v42 & 0x800) != 0)
      {
        if ((*(_BYTE *)(v9 + 158) & 1) != 0 || !gLogDatapath) {
          goto LABEL_81;
        }
        goto LABEL_54;
      }

      *(_BYTE *)(v9 + 874) = BYTE2(v42);
      *id v15 = v42 | 0xC00;
      os_log_type_t v43 = *(unsigned int *)(v41 + 368) + 1LL;
      os_log_type_t v44 = v43 << 31 >> 31;
      *(_DWORD *)(v41 + 368) = v43;
      if (v44 == v43 && (v44 & 0x8000000000000000LL) == 0)
      {
LABEL_98:
        if ((*(_BYTE *)(v9 + 158) & 1) == 0)
        {
          if (gLogDatapath)
          {
            BOOL v100 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
            {
              os_log_type_t v101 = *(void *)(v9 + 488);
              BOOL v102 = *(_DWORD *)(*(void *)(v9 + 480) + 372LL);
              os_log_type_t v103 = *(_DWORD *)(v9 + 860);
              if (v101) {
                LODWORD(v101) = *(_DWORD *)(v101 + 424);
              }
              os_log_type_t v104 = *(_DWORD *)(v41 + 368) + *(_DWORD *)(v41 + 364);
              *(_DWORD *)std::string buf = 136447746;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
              *(_WORD *)&_BYTE buf[12] = 2082;
              *(void *)&buf[14] = v9 + 74;
              *(_WORD *)&buf[22] = 2080;
              unint64_t v109 = (uint64_t)" ";
              *(_WORD *)__int16 v110 = 1024;
              *(_DWORD *)&v110[2] = v102;
              *(_WORD *)&v110[6] = 1024;
              *(_DWORD *)&v110[8] = v103;
              LOWORD(v111) = 1024;
              *(_DWORD *)((char *)&v111 + 2) = v101;
              HIWORD(v111) = 1024;
              __int16 v112 = v104;
              _os_log_impl( &dword_181A5C000,  v100,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection marked as not-reusable, increased pool width to %u",  buf,  0x38u);
            }
          }
        }

        os_log_type_t v63 = *(void **)(v9 + 496);
        if (v63)
        {
          BOOL v64 = *(void *)(v9 + 480);
          if (v64) {
            goto LABEL_80;
          }
          goto LABEL_102;
        }

    if (v89) {
      free(v89);
    }
LABEL_189:
    BOOL v36 = v201;
LABEL_190:

LABEL_191:
    os_log_type_t v80 = 0LL;
LABEL_192:

LABEL_193:
    ++v15;
  }

  while (v15 < v11->policy_result.num_netagents);
LABEL_231:

  uint64_t v115 = v11;
  flows = (unsigned __int8 *)v115->flows;
  length[0] = MEMORY[0x1895F87A8];
  length[1] = 3221225472LL;
  length[2] = (size_t)___ZL22nw_path_snapshot_flowsP18NWConcrete_nw_path_block_invoke;
  length[3] = (size_t)&unk_189BC85B0;
  BOOL v117 = v115;
  length[4] = (size_t)v117;
  nw_array_apply(flows, (uint64_t)length);

  v118 = v117;
  BOOL v119 = v118;
  if ((*((_BYTE *)v118 + 473) & 0x30) != 0
    || nw_parameters_get_required_interface_index(v118[2])
    || nw_parameters_get_multipath(v119[2]) && nw_parameters_multipath_fallback_allowed(v119[2]))
  {
    goto LABEL_351;
  }

  __int128 v120 = v11->network_agent_dictionary;
  if (!v120) {
    goto LABEL_351;
  }
  *(void *)out = 0LL;
  *(void *)&out[8] = out;
  *(_DWORD *)&out[24] = 0;
  *(void *)&out[16] = 0x2020000000LL;
  v244 = 0LL;
  v245 = &v244;
  v246 = 0x2020000000LL;
  v247 = 0;
  os_log_type_t type = 0LL;
  p_os_log_type_t type = &type;
  v242 = 0x2020000000LL;
  v243 = 0;
  v236 = 0LL;
  v237 = &v236;
  v238 = 0x2020000000LL;
  v239 = 0;
  v232 = 0LL;
  v233 = &v232;
  v234 = 0x2020000000LL;
  v235 = 0;
  v228 = 0LL;
  v229 = &v228;
  v230 = 0x2020000000LL;
  v231 = 0;
  v224 = 0LL;
  v225 = &v224;
  v226 = 0x2020000000LL;
  v227 = 0LL;
  v220 = 0LL;
  v221 = &v220;
  v222 = 0x2020000000LL;
  v223 = 0LL;
  v216 = 0LL;
  v217 = &v216;
  v218 = 0x2020000000LL;
  v219 = 0LL;
  v212 = 0LL;
  v213 = &v212;
  v215 = 0;
  v214 = 0x2020000000LL;
  length[0] = MEMORY[0x1895F87A8];
  length[1] = 3221225472LL;
  length[2] = (size_t)___ZL25nw_path_snapshot_fallbackP18NWConcrete_nw_path_block_invoke;
  length[3] = (size_t)&unk_189BC53A8;
  length[5] = (size_t)&v228;
  v209 = v119;
  length[4] = (size_t)v209;
  length[6] = (size_t)&v244;
  length[7] = (size_t)&type;
  length[8] = (size_t)&v236;
  length[9] = (size_t)&v232;
  length[10] = (size_t)out;
  length[11] = (size_t)&v224;
  length[12] = (size_t)&v220;
  length[13] = (size_t)&v216;
  length[14] = (size_t)&v212;
  xpc_dictionary_apply(v120, length);
  if (!*((_BYTE *)v229 + 24)) {
    goto LABEL_348;
  }
  *((_DWORD *)v209 + 93) = *((_DWORD *)v213 + 6);
  os_log_type_t v121 = *(_DWORD *)(*(void *)&out[8] + 24LL);
  if (!v121)
  {
    v129 = v209[14];
    v209[14] = 0LL;
    goto LABEL_275;
  }

  BOOL v122 = nw_interface_create_with_index(v121);
  BOOL v123 = v122;
  if (!v122)
  {
    __nwlog_obj();
    int v124 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v124, OS_LOG_TYPE_INFO))
    {
      __int16 v130 = *(_DWORD *)(*(void *)&out[8] + 24LL);
      *(_DWORD *)std::string buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_path_snapshot_fallback";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = v130;
      _os_log_impl( &dword_181A5C000,  v124,  OS_LOG_TYPE_INFO,  "%{public}s Unable to create fallback interface using index %d",  buf,  0x12u);
    }

    goto LABEL_258;
  }

  if (nw_interface_is_expensive(v122) && nw_parameters_get_prohibit_expensive((nw_parameters_t)v119[2]))
  {
    __nwlog_obj();
    int v124 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v124, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_path_snapshot_fallback";
      *(_WORD *)&_BYTE buf[12] = 2114;
      *(void *)&buf[14] = v123;
      _os_log_impl( &dword_181A5C000,  v124,  OS_LOG_TYPE_INFO,  "%{public}s Fallback to expensive interface %{public}@ prohibited by parameters",  buf,  0x16u);
    }

    goto LABEL_258;
  }

  if (nw_interface_is_constrained(v123)
    && nw_parameters_get_prohibit_constrained((nw_parameters_t)v119[2]))
  {
    __nwlog_obj();
    int v124 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v124, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_path_snapshot_fallback";
      *(_WORD *)&_BYTE buf[12] = 2114;
      *(void *)&buf[14] = v123;
      _os_log_impl( &dword_181A5C000,  v124,  OS_LOG_TYPE_INFO,  "%{public}s Fallback to constrained interface %{public}@ prohibited by parameters",  buf,  0x16u);
    }

    goto LABEL_258;
  }

  if (nw_interface_is_ultra_constrained(v123)
    && (nw_parameters_get_allow_ultra_constrained(v119[2]) & 1) == 0)
  {
    if ((nw_path_is_ultra_constrained_allowed(void)::is_allowed & 1) == 0)
    {
      __nwlog_obj();
      int v124 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v124, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_snapshot_fallback";
        *(_WORD *)&_BYTE buf[12] = 2114;
        *(void *)&buf[14] = v123;
        _os_log_impl( &dword_181A5C000,  v124,  OS_LOG_TYPE_INFO,  "%{public}s Fallback to ultra constrained interface %{public}@ not allowed by parameters",  buf,  0x16u);
      }

      goto LABEL_258;
    }
  }

  if (nw_interface_get_type((nw_interface_t)v123) == nw_interface_type_cellular
    && (nw_parameters_get_prohibit_cellular(v119[2])
     || !*((_BYTE *)v233 + 24)
     && !*((_BYTE *)v237 + 24)
     && nw_parameters_get_no_cellular_fallback(v119[2])))
  {
    __nwlog_obj();
    int v124 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v124, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_path_snapshot_fallback";
      *(_WORD *)&_BYTE buf[12] = 2114;
      *(void *)&buf[14] = v123;
      _os_log_impl( &dword_181A5C000,  v124,  OS_LOG_TYPE_INFO,  "%{public}s Fallback to cellular interface %{public}@ prohibited by parameters",  buf,  0x16u);
    }

  if (v374)
  {
    os_log_type_t v151 = MEMORY[0x1895F87A8];
    v394[0] = MEMORY[0x1895F87A8];
    v394[1] = 3221225472LL;
    v394[2] = ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_48;
    v394[3] = &unk_189BC7260;
    v152 = v126;
    v395 = v152;
    v396 = v131;
    nw_endpoint_handler_access_resolver_handler(v377, v394);
    v390[0] = v151;
    v390[1] = 3221225472LL;
    v391 = ___ZL49nw_connection_stats_fill_in_nw_report_on_nw_queueP24NWConcrete_nw_connectionP22nw_connection_report_s_block_invoke_50;
    v392 = &__block_descriptor_40_e42_v16__0__NSObject_OS_nw_endpoint_handler__8l;
    v393 = v131;
    v153 = v377;
    v154 = v390;
    uint64_t v155 = v153;
    char v156 = v155;
    while (1)
    {
      char v156 = v156;
      uint64_t v157 = v156->mode;

      if (v157 == 5) {
        break;
      }
      char v158 = v156;
      char v156 = (NWConcrete_nw_endpoint_handler *)v158[9];

      if (!v156) {
        goto LABEL_193;
      }
    }

    v391((uint64_t)v154, v156);
LABEL_193:

    v159 = nw_endpoint_handler_copy_endpoint(v155);
    v160 = v159;
    if (v159)
    {
      __int128 v161 = v159;
      uint64_t v162 = -[nw_endpoint type](v161, "type");

      os_log_type_t v104 = v162 == 1;
      uint64_t v163 = v382;
      uint64_t v164 = v380;
      if (v104) {
        v382->connected_int address_family = nw_endpoint_get_address(v161)->sa_family;
      }
      goto LABEL_215;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v165 = (id)gLogObj;
    buf[0] = 136446210;
    *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
    v166 = (char *)_os_log_send_and_compose_impl();

    v425[0] = 16;
    LOBYTE(v389) = 0;
    if (__nwlog_fault(v166, v425, &v389))
    {
      if (v425[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v167 = (os_log_s *)(id)gLogObj;
        v168 = v425[0];
        if (os_log_type_enabled(v167, (os_log_type_t)v425[0]))
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
          _os_log_impl( &dword_181A5C000,  v167,  v168,  "%{public}s called with null connected_endpoint",  (uint8_t *)buf,  0xCu);
        }
      }

      else
      {
        if ((_BYTE)v389)
        {
          v169 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v170 = (os_log_s *)(id)gLogObj;
          v171 = v425[0];
          v172 = os_log_type_enabled(v170, (os_log_type_t)v425[0]);
          if (v169)
          {
            if (v172)
            {
              buf[0] = 136446466;
              *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
              LOWORD(buf[3]) = 2082;
              *(void *)((char *)&buf[3] + 2) = v169;
              _os_log_impl( &dword_181A5C000,  v170,  v171,  "%{public}s called with null connected_endpoint, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x16u);
            }

            free(v169);
          }

          else
          {
            if (v172)
            {
              buf[0] = 136446210;
              *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
              _os_log_impl( &dword_181A5C000,  v170,  v171,  "%{public}s called with null connected_endpoint, no backtrace",  (uint8_t *)buf,  0xCu);
            }
          }

          goto LABEL_213;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v167 = (os_log_s *)(id)gLogObj;
        v173 = v425[0];
        if (os_log_type_enabled(v167, (os_log_type_t)v425[0]))
        {
          buf[0] = 136446210;
          *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
          _os_log_impl( &dword_181A5C000,  v167,  v173,  "%{public}s called with null connected_endpoint, backtrace limit exceeded",  (uint8_t *)buf,  0xCu);
        }
      }
    }

    free(backtrace_string);
    if (!v45) {
      goto LABEL_80;
    }
    goto LABEL_79;
  }

  if (!v143)
  {
    __nwlog_obj();
    __int16 v113 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
    os_log_type_t v45 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v150 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v106 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v114 = type;
      if (os_log_type_enabled(v106, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_181A5C000, v106, v114, "%{public}s called with null endpoint", buf, 0xCu);
      }

      goto LABEL_203;
    }

    if (!v150)
    {
      __nwlog_obj();
      char v106 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v125 = type;
      if (os_log_type_enabled(v106, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl( &dword_181A5C000,  v106,  v125,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_203;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    int v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v119 = type;
    __int128 v120 = os_log_type_enabled(v46, type);
    if (backtrace_string)
    {
      if (v120)
      {
        *(_DWORD *)std::string buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        v153 = 2082;
        v154 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v46,  v119,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_187;
    }

    if (v120)
    {
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      _os_log_impl(&dword_181A5C000, v46, v119, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
    }

          BOOL v137 = v48;
          v138 = (*((_BYTE *)v137 + 268) & 0x20) == 0;

          if (v138)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            os_log_type_t v139 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
            {
              v140 = v137;

              os_log_type_t v141 = v140;
              BOOL v142 = (*((_BYTE *)v137 + 268) & 1) == 0;

              if (v142) {
                os_log_type_t v143 = "";
              }
              else {
                os_log_type_t v143 = "dry-run ";
              }
              uint64_t v144 = nw_endpoint_handler_copy_endpoint(v141);
              uint64_t v145 = nw_endpoint_get_logging_description(v144);
              os_log_type_t v146 = v141;
              v147 = v146;
              std::string v148 = v42->state;
              else {
                std::string v149 = off_189BBBBF0[v148];
              }

              char v150 = v147;
              os_log_type_t v151 = v150;
              v152 = v6[29];
              v153 = "path";
              switch(v152)
              {
                case 0u:
                  break;
                case 1u:
                  v153 = "resolver";
                  break;
                case 2u:
                  v153 = nw_endpoint_flow_mode_string(v150[31]);
                  break;
                case 3u:
                  v153 = "proxy";
                  break;
                case 4u:
                  v153 = "fallback";
                  break;
                case 5u:
                  v153 = "transform";
                  break;
                default:
                  v153 = "unknown-mode";
                  break;
              }

              v154 = v151;
              os_unfair_lock_lock((os_unfair_lock_t)v154 + 28);
              uint64_t v155 = v154[8];
              os_unfair_lock_unlock((os_unfair_lock_t)v154 + 28);

              *(_DWORD *)std::string buf = 136448002;
              v358 = "nw_endpoint_handler_append_and_start_application_protocol";
              v359 = 2082;
              v360 = v140 + 168;
              v361 = 2082;
              v362 = v143;
              v363 = 2082;
              v364 = (void *)v145;
              v365 = 2082;
              v366 = v149;
              v367 = 2082;
              v368 = v153;
              v369 = 2114;
              v370 = v155;
              v371 = 2114;
              v372 = v347;
              _os_log_impl( &dword_181A5C000,  v139,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to attach protocol %{public}@",  buf,  0x52u);
            }
          }

          goto LABEL_206;
        }

        __nwlog_obj();
        os_log_type_t v98 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)std::string buf = 136446466;
        v358 = "nw_protocol_utilities_add_input_handler";
        v359 = 2048;
        v360 = (char *)v51;
        BOOL v99 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v353) = 0;
        if (__nwlog_fault(v99, type, &v353))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            BOOL v100 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v101 = type[0];
            if (os_log_type_enabled(v100, type[0]))
            {
              *(_DWORD *)std::string buf = 136446466;
              v358 = "nw_protocol_utilities_add_input_handler";
              v359 = 2048;
              v360 = (char *)v51;
              _os_log_impl(&dword_181A5C000, v100, v101, "%{public}s Cannot add input handler %p to itself", buf, 0x16u);
            }
          }

          else if ((_BYTE)v353)
          {
            os_log_type_t v107 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            BOOL v100 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            uint64_t v108 = type[0];
            unint64_t v109 = os_log_type_enabled(v100, type[0]);
            if (v107)
            {
              if (v109)
              {
                *(_DWORD *)std::string buf = 136446722;
                v358 = "nw_protocol_utilities_add_input_handler";
                v359 = 2048;
                v360 = (char *)v51;
                v361 = 2082;
                v362 = v107;
                _os_log_impl( &dword_181A5C000,  v100,  v108,  "%{public}s Cannot add input handler %p to itself, dumping backtrace:%{public}s",  buf,  0x20u);
              }

              free(v107);
              goto LABEL_185;
            }

            if (v109)
            {
              *(_DWORD *)std::string buf = 136446466;
              v358 = "nw_protocol_utilities_add_input_handler";
              v359 = 2048;
              v360 = (char *)v51;
              _os_log_impl( &dword_181A5C000,  v100,  v108,  "%{public}s Cannot add input handler %p to itself, no backtrace",  buf,  0x16u);
            }
          }

          else
          {
            __nwlog_obj();
            BOOL v100 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            uint64_t v134 = type[0];
            if (os_log_type_enabled(v100, type[0]))
            {
              *(_DWORD *)std::string buf = 136446466;
              v358 = "nw_protocol_utilities_add_input_handler";
              v359 = 2048;
              v360 = (char *)v51;
              _os_log_impl( &dword_181A5C000,  v100,  v134,  "%{public}s Cannot add input handler %p to itself, backtrace limit exceeded",  buf,  0x16u);
            }
          }
        }

    if (v80) {
      free(v80);
    }
LABEL_61:
    os_log_type_t v51 = *(void *)(v5 + 24);
    if (!v51 || (id v37 = *(void (**)(uint64_t, void))(v51 + 48)) == 0LL)
    {
      __nwlog_obj();
      BOOL v52 = *(const char **)(v5 + 16);
      if (!v52) {
        BOOL v52 = "invalid";
      }
      *(_DWORD *)std::string buf = 136446466;
      BOOL v100 = "nw_protocol_http2_input_finished_block_invoke";
      os_log_type_t v101 = 2082;
      BOOL v102 = v52;
      os_log_type_t v39 = (const char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v97 = 0;
      if (__nwlog_fault(v39, &type, &v97))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v40 = (os_log_s *)__nwlog_obj();
          uint8x8_t v41 = type;
          if (!os_log_type_enabled(v40, type)) {
            goto LABEL_180;
          }
          uint64_t v42 = *(const char **)(v5 + 16);
          if (!v42) {
            uint64_t v42 = "invalid";
          }
          goto LABEL_50;
        }

        if (v97)
        {
          os_log_type_t v73 = (char *)__nw_create_backtrace_string();
          uint64_t v40 = (os_log_s *)__nwlog_obj();
          uint8x8_t v41 = type;
          os_log_type_t v89 = os_log_type_enabled(v40, type);
          if (v73)
          {
            if (!v89)
            {
LABEL_113:
              free(v73);
              if (!v39) {
                return 1LL;
              }
LABEL_181:
              os_log_type_t v71 = (char *)v39;
              goto LABEL_105;
            }

            BOOL v75 = *(const char **)(v5 + 16);
            if (!v75) {
              BOOL v75 = "invalid";
            }
LABEL_112:
            *(_DWORD *)std::string buf = 136446722;
            BOOL v100 = "nw_protocol_http2_input_finished_block_invoke";
            os_log_type_t v101 = 2082;
            BOOL v102 = v75;
            os_log_type_t v103 = 2082;
            os_log_type_t v104 = v73;
            _os_log_impl( &dword_181A5C000,  v40,  v41,  "%{public}s protocol %{public}s has invalid disconnected callback, dumping backtrace:%{public}s",  buf,  0x20u);
            goto LABEL_113;
          }

          if (!v89) {
            goto LABEL_180;
          }
          BOOL v88 = *(const char **)(v5 + 16);
          if (!v88) {
            BOOL v88 = "invalid";
          }
LABEL_178:
          *(_DWORD *)std::string buf = 136446466;
          BOOL v100 = "nw_protocol_http2_input_finished_block_invoke";
          os_log_type_t v101 = 2082;
          BOOL v102 = v88;
          os_log_type_t v43 = "%{public}s protocol %{public}s has invalid disconnected callback, no backtrace";
          goto LABEL_179;
        }

        uint64_t v40 = (os_log_s *)__nwlog_obj();
        uint8x8_t v41 = type;
        if (!os_log_type_enabled(v40, type)) {
          goto LABEL_180;
        }
        BOOL v78 = *(const char **)(v5 + 16);
        if (!v78) {
          BOOL v78 = "invalid";
        }
LABEL_126:
        *(_DWORD *)std::string buf = 136446466;
        BOOL v100 = "nw_protocol_http2_input_finished_block_invoke";
        os_log_type_t v101 = 2082;
        BOOL v102 = v78;
        os_log_type_t v43 = "%{public}s protocol %{public}s has invalid disconnected callback, backtrace limit exceeded";
        goto LABEL_179;
      }

    free(backtrace_string);
    goto LABEL_363;
  }

  a1->uint64_t default_input_handler = a2;
  if (a2->handle == &nw_protocol_ref_counted_handle)
  {
    callbacks = a2[1].callbacks;
    if (callbacks) {
      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
    }
  }

  nw_protocol_set_flow_id_from_protocol(a1, a2);
  if (a2->output_handler)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    xpc_object_t v6 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v157 = "nw_protocol_ipv6_add_input_handler";
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEBUG,  "%{public}s Output handler already exists for protocol being added as input handler",  buf,  0xCu);
    }
  }

  else
  {
    a2->uint64_t output_handler = a1;
    if (a1->handle == &nw_protocol_ref_counted_handle)
    {
      xpc_object_t v11 = a1[1].callbacks;
      if (v11) {
        a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v11->add_input_handler + 1);
      }
    }
  }

  handle = a2->handle;
  if (handle == &nw_protocol_ref_counted_handle)
  {
    os_log_type_t v13 = a2[1].callbacks;
    if (v13) {
      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v13->add_input_handler + 1);
    }
  }

  id v14 = a2->callbacks;
  if (v14)
  {
    get_parameters = (uint64_t (*)(nw_protocol *))v14->get_parameters;
    if (get_parameters)
    {
      __int16 v16 = (void *)get_parameters(a2);
      if (handle != &nw_protocol_ref_counted_handle) {
        goto LABEL_30;
      }
      goto LABEL_29;
    }
  }

  __nwlog_obj();
  BOOL v56 = a2->identifier;
  if (!v56) {
    BOOL v56 = (nw_protocol_identifier *)"invalid";
  }
  *(_DWORD *)std::string buf = 136446722;
  uint64_t v157 = "__nw_protocol_get_parameters";
  char v158 = 2082;
  v159 = v56;
  v160 = 2048;
  __int128 v161 = a2;
  id v57 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  v154 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v57, type, &v154))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v58 = (os_log_s *)__nwlog_obj();
      BOOL v59 = type[0];
      if (!os_log_type_enabled(v58, type[0])) {
        goto LABEL_209;
      }
      os_log_type_t v60 = a2->identifier;
      if (!v60) {
        os_log_type_t v60 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)std::string buf = 136446722;
      uint64_t v157 = "__nw_protocol_get_parameters";
      char v158 = 2082;
      v159 = v60;
      v160 = 2048;
      __int128 v161 = a2;
      BOOL v61 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback";
LABEL_208:
      _os_log_impl(&dword_181A5C000, v58, v59, v61, buf, 0x20u);
      goto LABEL_209;
    }

    if (v154 == OS_LOG_TYPE_DEFAULT)
    {
      os_log_type_t v58 = (os_log_s *)__nwlog_obj();
      BOOL v59 = type[0];
      if (!os_log_type_enabled(v58, type[0])) {
        goto LABEL_209;
      }
      os_log_type_t v84 = a2->identifier;
      if (!v84) {
        os_log_type_t v84 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)std::string buf = 136446722;
      uint64_t v157 = "__nw_protocol_get_parameters";
      char v158 = 2082;
      v159 = v84;
      v160 = 2048;
      __int128 v161 = a2;
      BOOL v61 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, backtrace limit exceeded";
      goto LABEL_208;
    }

    uint64_t v72 = (char *)__nw_create_backtrace_string();
    os_log_type_t v58 = (os_log_s *)__nwlog_obj();
    BOOL v59 = type[0];
    os_log_type_t v73 = os_log_type_enabled(v58, type[0]);
    if (!v72)
    {
      if (!v73) {
        goto LABEL_209;
      }
      os_log_type_t v86 = a2->identifier;
      if (!v86) {
        os_log_type_t v86 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)std::string buf = 136446722;
      uint64_t v157 = "__nw_protocol_get_parameters";
      char v158 = 2082;
      v159 = v86;
      v160 = 2048;
      __int128 v161 = a2;
      BOOL v61 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, no backtrace";
      goto LABEL_208;
    }

    if (v73)
    {
      os_log_type_t v74 = a2->identifier;
      if (!v74) {
        os_log_type_t v74 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)std::string buf = 136446978;
      uint64_t v157 = "__nw_protocol_get_parameters";
      char v158 = 2082;
      v159 = v74;
      v160 = 2048;
      __int128 v161 = a2;
      uint64_t v162 = 2082;
      uint64_t v163 = v72;
      _os_log_impl( &dword_181A5C000,  v58,  v59,  "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, dumping backtrace:%{public}s",  buf,  0x2Au);
    }

    free(v72);
  }

    next_slot = os_channel_get_next_slot();
    if (next_slot)
    {
      id v7 = v8;
      if (v6 < 0x20) {
        continue;
      }
    }

    goto LABEL_269;
  }

  v233 = v8;
  v234 = v6;
  LODWORD(v6) = 0;
  id v19 = 0;
  while (1)
  {
    next_buflet = os_packet_get_next_buflet();
    if (!next_buflet)
    {
      v118 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136446210;
        v254 = "nw_channel_add_input_frames";
        _os_log_impl( &dword_181A5C000,  v118,  OS_LOG_TYPE_ERROR,  "%{public}s os_packet_get_next_buflet() returns NULL",  buf,  0xCu);
      }

      id v27 = v3;
      BOOL v5 = v238;
      xpc_object_t v6 = v234;
      os_log_type_t v65 = v243;
      goto LABEL_98;
    }

    id v24 = next_buflet;
    data_offset = os_buflet_get_data_offset();
    object_nw_endpoint_t address = os_buflet_get_object_address();
    id v27 = v3;
    if (!v3)
    {
      nw_channel_allocate_frames((void *)v245);
      id v27 = *(void *)(v245 + 288);
      if (!v27)
      {
        os_log_type_t v63 = v245;
        BOOL v64 = *(void *)(v245 + 152);
        if (!v64 || *(_DWORD *)(v64 + 124) != 4)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v66 = (os_log_s *)gLogObj;
          BOOL v5 = v238;
          xpc_object_t v6 = v234;
          os_log_type_t v65 = v243;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)std::string buf = 136446210;
            v254 = "nw_channel_add_input_frames";
            _os_log_impl( &dword_181A5C000,  v66,  OS_LOG_TYPE_INFO,  "%{public}s nw_channel_allocate_frames() is out of frames",  buf,  0xCu);
          }

          id v27 = 0LL;
          goto LABEL_98;
        }

        id v27 = 0LL;
        BOOL v5 = v238;
        xpc_object_t v6 = v234;
        os_log_type_t v65 = v243;
        goto LABEL_99;
      }
    }

    os_log_type_t v28 = node;
    data_length = os_buflet_get_data_length();
    os_log_type_t v30 = object_address + data_offset;
    BOOL v31 = v245;
    nw_frame_reset(v27, v30, data_length, (uint64_t)nw_channel_finalize_input_frame, v245);
    if (v242) {
      nw_frame_set_metadata(v27, 0LL, 1, 1);
    }
    if ((*(_WORD *)(v27 + 204) & 4) != 0)
    {
      *(void *)(v27 + 208) = v10;
      *(void *)(v27 + 216) = v24;
      *(_BYTE *)(v27 + 232) = *(_BYTE *)(v27 + 232) & 0xFE | ((*v238 & 0x400) != 0);
    }

    id v32 = os_packet_increment_use_count();
    if (v32) {
      break;
    }
    os_log_type_t v33 = *(unsigned __int16 *)(v27 + 204);
    os_log_type_t v34 = *(unsigned __int8 *)(v27 + 206);
    *(_WORD *)(v27 + 204) = v33 | 0x2000;
    if (!v19)
    {
      if ((*v238 & 0x400) == 0 || os_packet_get_aggregation_type() != 2)
      {
LABEL_78:
        goto LABEL_80;
      }

      *(_WORD *)(v243 + 204) |= 0x80u;
      segment_count = os_packet_get_segment_count();
      if (segment_count)
      {
        if ((*(_WORD *)(v243 + 204) & 0x40) == 0)
        {
          *(_BYTE *)(v243 + 200) = segment_count;
          goto LABEL_78;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)std::string buf = 136446210;
        v254 = "__nw_frame_set_segment_count";
        os_log_type_t v43 = (const char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        v252 = OS_LOG_TYPE_DEFAULT;
        v240 = (char *)v43;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v44 = gLogObj;
          os_log_type_t v45 = type[0];
          if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
          {
            *(_DWORD *)std::string buf = 136446210;
            v254 = "__nw_frame_set_segment_count";
            uint64_t v40 = (os_log_s *)v44;
            uint8x8_t v41 = v45;
            uint64_t v42 = "%{public}s Attempt to set segment-count on a chain-member";
            goto LABEL_74;
          }

void sub_181CE6F98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void networkd_privileged_teardown_feth_pair(const char *a1, const char *a2)
{
  uint64_t v106 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    os_log_type_t v76 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    os_log_type_t v101 = "networkd_privileged_teardown_feth_pair";
    os_log_type_t v77 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v98 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v78 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v79 = type;
      if (os_log_type_enabled(v78, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v101 = "networkd_privileged_teardown_feth_pair";
        _os_log_impl(&dword_181A5C000, v78, v79, "%{public}s called with null ifname1", buf, 0xCu);
      }
    }

    else if (v98)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v78 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v87 = type;
      BOOL v88 = os_log_type_enabled(v78, type);
      if (backtrace_string)
      {
        if (v88)
        {
          *(_DWORD *)std::string buf = 136446466;
          os_log_type_t v101 = "networkd_privileged_teardown_feth_pair";
          __int16 v102 = 2082;
          *(void *)os_log_type_t v103 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v78,  v87,  "%{public}s called with null ifname1, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_225;
      }

      if (v88)
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v101 = "networkd_privileged_teardown_feth_pair";
        _os_log_impl(&dword_181A5C000, v78, v87, "%{public}s called with null ifname1, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v78 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v95 = type;
      if (os_log_type_enabled(v78, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v101 = "networkd_privileged_teardown_feth_pair";
        _os_log_impl( &dword_181A5C000,  v78,  v95,  "%{public}s called with null ifname1, backtrace limit exceeded",  buf,  0xCu);
      }
    }

LABEL_177:
        if (!v39) {
          goto LABEL_135;
        }
        goto LABEL_178;
      }

      __nwlog_obj();
      BOOL v56 = (void *)objc_claimAutoreleasedReturnValue();
      id v57 = networkd_privileged_result_to_string(v37);
      *(_DWORD *)std::string buf = 136446722;
      os_log_type_t v101 = "networkd_privileged_teardown_feth_pair";
      __int16 v102 = 2048;
      *(void *)os_log_type_t v103 = v37;
      *(_WORD *)&v103[8] = 2082;
      *(void *)&v103[10] = v57;
      os_log_type_t v39 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v98 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v58 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v59 = type;
        if (os_log_type_enabled(v58, type))
        {
          *(_DWORD *)std::string buf = 136446722;
          os_log_type_t v101 = "networkd_privileged_teardown_feth_pair";
          __int16 v102 = 2048;
          *(void *)os_log_type_t v103 = v37;
          *(_WORD *)&v103[8] = 2082;
          *(void *)&v103[10] = v57;
          _os_log_impl( &dword_181A5C000,  v58,  v59,  "%{public}s received internal failure result code: [%lld] %{public}s",  buf,  0x20u);
        }
      }

      else if (v98)
      {
        os_log_type_t v69 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v58 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v70 = type;
        BOOL v71 = os_log_type_enabled(v58, type);
        if (v69)
        {
          if (v71)
          {
            *(_DWORD *)std::string buf = 136446978;
            os_log_type_t v101 = "networkd_privileged_teardown_feth_pair";
            __int16 v102 = 2048;
            *(void *)os_log_type_t v103 = v37;
            *(_WORD *)&v103[8] = 2082;
            *(void *)&v103[10] = v57;
            __int16 v104 = 2082;
            os_log_type_t v105 = v69;
            _os_log_impl( &dword_181A5C000,  v58,  v70,  "%{public}s received internal failure result code: [%lld] %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v69);
          goto LABEL_177;
        }

        if (v71)
        {
          *(_DWORD *)std::string buf = 136446722;
          os_log_type_t v101 = "networkd_privileged_teardown_feth_pair";
          __int16 v102 = 2048;
          *(void *)os_log_type_t v103 = v37;
          *(_WORD *)&v103[8] = 2082;
          *(void *)&v103[10] = v57;
          _os_log_impl( &dword_181A5C000,  v58,  v70,  "%{public}s received internal failure result code: [%lld] %{public}s, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v58 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v75 = type;
        if (os_log_type_enabled(v58, type))
        {
          *(_DWORD *)std::string buf = 136446722;
          os_log_type_t v101 = "networkd_privileged_teardown_feth_pair";
          __int16 v102 = 2048;
          *(void *)os_log_type_t v103 = v37;
          *(_WORD *)&v103[8] = 2082;
          *(void *)&v103[10] = v57;
          _os_log_impl( &dword_181A5C000,  v58,  v75,  "%{public}s received internal failure result code: [%lld] %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }
      }

      goto LABEL_177;
    }

    __nwlog_obj();
    os_log_type_t v82 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    os_log_type_t v101 = "networkd_privileged_teardown_feth_pair";
    id v83 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v98 = 0;
    if (__nwlog_fault(v83, &type, &v98))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v85 = type;
        if (os_log_type_enabled(v84, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v101 = "networkd_privileged_teardown_feth_pair";
          _os_log_impl(&dword_181A5C000, v84, v85, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
        }
      }

      else if (v98)
      {
        BOOL v92 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v93 = type;
        BOOL v94 = os_log_type_enabled(v84, type);
        if (v92)
        {
          if (v94)
          {
            *(_DWORD *)std::string buf = 136446466;
            os_log_type_t v101 = "networkd_privileged_teardown_feth_pair";
            __int16 v102 = 2082;
            *(void *)os_log_type_t v103 = v92;
            _os_log_impl( &dword_181A5C000,  v84,  v93,  "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v92);
          goto LABEL_230;
        }

        if (v94)
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v101 = "networkd_privileged_teardown_feth_pair";
          _os_log_impl(&dword_181A5C000, v84, v93, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v97 = type;
        if (os_log_type_enabled(v84, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v101 = "networkd_privileged_teardown_feth_pair";
          _os_log_impl( &dword_181A5C000,  v84,  v97,  "%{public}s xpc_dictionary_create failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

          free(v47);
          goto LABEL_178;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v42 = (id)gLogObj;
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v163 = "nw_parameters_create_secure_http_messaging";
        os_log_type_t v43 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        v160 = 0;
        if (__nwlog_fault(v43, &type, &v160))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v44 = (os_log_s *)(id)gLogObj;
            BOOL v45 = type;
            if (os_log_type_enabled(v44, type))
            {
              *(_DWORD *)std::string buf = 136446210;
              uint64_t v163 = "nw_parameters_create_secure_http_messaging";
              _os_log_impl(&dword_181A5C000, v44, v45, "%{public}s nw_quic_create_stream_options failed", buf, 0xCu);
            }

            os_log_type_t v27 = v184;
            os_log_type_t v29 = v180;
LABEL_178:
            __int16 v112 = -[NWConcrete_nw_endpoint_handler initWithEndpoint:parameters:reportCallback:context:parent:identifier:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_endpoint_handler),  v29->endpoint,  v27,  nw_connection_endpoint_report_on_nw_queue,  v186,  0LL,  v25);
            os_log_type_t v87 = v112;
            if (v112)
            {
              *((_DWORD *)v112 + 29) = 2;
              __int16 v113 = v112[9];
              uint64_t v114 = *((_BYTE *)log + 32);
              uint64_t v115 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_endpoint_flow);
              *((_BYTE *)v115 + 32) = v114 & 2 | *((_BYTE *)v115 + 32) & 0xFC | (v113 == 0LL);
              uint64_t v116 = v87[31];
              v87[31] = v115;

              BOOL v117 = (id *)v87[31];
              v179 = log;
              if (v117)
              {
                v118 = v117;
                objc_storeStrong(v117 + 5, obj);
LABEL_181:

                BOOL v119 = v87;
LABEL_201:

                goto LABEL_202;
              }

              v118 = 0LL;
              __nwlog_obj();
              v152 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)v213 = 136446210;
              v214 = "nw_endpoint_flow_set_clone_flow";
              stackc = (char *)_os_log_send_and_compose_impl();

              v203 = OS_LOG_TYPE_ERROR;
              v202 = 0;
              if (__nwlog_fault(stackc, &v203, &v202))
              {
                if (v203 == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v153 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  v154 = v203;
                  if (os_log_type_enabled(v153, v203))
                  {
                    *(_DWORD *)v213 = 136446210;
                    v214 = "nw_endpoint_flow_set_clone_flow";
                    _os_log_impl(&dword_181A5C000, v153, v154, "%{public}s called with null endpoint_flow", v213, 0xCu);
                  }
                }

                else if (v202)
                {
                  uint64_t v155 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v153 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  char v156 = v203;
                  uint64_t v157 = os_log_type_enabled(v153, v203);
                  if (v155)
                  {
                    if (v157)
                    {
                      *(_DWORD *)v213 = 136446466;
                      v214 = "nw_endpoint_flow_set_clone_flow";
                      v215 = 2082;
                      v216 = v155;
                      _os_log_impl( &dword_181A5C000,  v153,  v156,  "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s",  v213,  0x16u);
                    }

                    free(v155);
                    goto LABEL_293;
                  }

                  if (v157)
                  {
                    *(_DWORD *)v213 = 136446210;
                    v214 = "nw_endpoint_flow_set_clone_flow";
                    _os_log_impl( &dword_181A5C000,  v153,  v156,  "%{public}s called with null endpoint_flow, no backtrace",  v213,  0xCu);
                  }
                }

                else
                {
                  __nwlog_obj();
                  v153 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  char v158 = v203;
                  if (os_log_type_enabled(v153, v203))
                  {
                    *(_DWORD *)v213 = 136446210;
                    v214 = "nw_endpoint_flow_set_clone_flow";
                    _os_log_impl( &dword_181A5C000,  v153,  v158,  "%{public}s called with null endpoint_flow, backtrace limit exceeded",  v213,  0xCu);
                  }
                }
              }

  if (v77) {
    free(v77);
  }
  os_log_type_t v59 = 0LL;
LABEL_123:

  return v59;
}

    _os_log_impl(&dword_181A5C000, v69, v70, v71, buf, 0xCu);
    goto LABEL_178;
  }

  if ((handle[548] & 0x40) == 0)
  {
    nw_protocol_add_input_handler((uint64_t)a1->protocol_handler, (uint64_t)handle);
    goto LABEL_69;
  }

  parameters = (void *)nw_protocol_get_parameters((uint64_t)handle);
  if (parameters)
  {
    os_log_type_t v28 = parameters;
    nw_parameters_log_protocol_instances(parameters);
    os_log_type_t v29 = v28;
    BOOL v30 = (nw_protocol_stack *)v29[19];

    v100[0] = 0LL;
    v100[1] = v100;
    v100[2] = 0x2000000000LL;
    os_log_type_t v101 = 0;
    *(void *)std::string buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3802000000LL;
    os_log_type_t v107 = __Block_byref_object_copy__33539;
    uint64_t v108 = __Block_byref_object_dispose__33540;
    unint64_t v109 = 0LL;
    LOBYTE(v110) = v110 | 1;
    *(void *)os_log_type_t type = v10;
    BOOL v94 = 0x40000000LL;
    os_log_type_t v95 = ___ZL45nw_webtransport_session_add_to_http_messagingP23nw_webtransport_sessionP11nw_protocolS2__block_invoke;
    os_log_type_t v96 = &unk_189BBC648;
    os_log_type_t v97 = v100;
    char v98 = buf;
    BOOL v99 = handle;
    nw_protocol_stack_iterate_application_protocols(v30, type);
    id v31 = *(void **)(*(void *)&buf[8] + 40LL);
    if (v31)
    {
      if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72514);
      }
      os_log_type_t v32 = (id)nw_protocol_copy_http_messaging_definition_definition;
      os_log_type_t v33 = v31;
      v33[2] = protocol_handler;

      if (v32) {
        os_release(v32);
      }
      id v34 = (void *)nw_protocol_get_parameters((uint64_t)protocol_handler);
      if (!v34) {
        goto LABEL_63;
      }
      os_log_type_t v35 = v34;
      BOOL v36 = (nw_protocol_stack *)v35[19];

      uint64_t v37 = v29;
      os_log_type_t v38 = (nw_protocol_stack *)v29[19];

      os_log_type_t v39 = nw_protocol_stack_copy_transport_protocol(v36);
      uint64_t v40 = nw_protocol_stack_copy_transport_protocol(v38);
      os_log_type_t v41 = v40;
      if (v39)
      {
        if (v40)
        {
          os_log_type_t v42 = nw_protocol_options_copy_definition(v39);
          if (nw_protocol_options_matches_definition(v41, v42))
          {
            protocol_handle = nw_protocol_options_get_protocol_handle(v39);
            nw_parameters_set_protocol_instance(v41, v44, protocol_handle);
          }

          os_release(v41);
        }

        os_log_type_t v41 = v39;
      }

      else if (!v40)
      {
LABEL_59:
        if (v38) {
          os_release(v38);
        }
        if (v36) {
          os_release(v36);
        }
LABEL_63:
        nw_protocol_set_output_handler((uint64_t)handle, 0LL);
        nw_protocol_add_input_handler((uint64_t)protocol_handler, (uint64_t)handle);
LABEL_64:
        _Block_object_dispose(buf, 8);
        if ((v110 & 1) != 0 && v109) {
          os_release(v109);
        }
        _Block_object_dispose(v100, 8);
        if (v30) {
          os_release(v30);
        }
        goto LABEL_69;
      }

      os_release(v41);
      goto LABEL_59;
    }

    __nwlog_obj();
    *(_DWORD *)__int16 v102 = 136446210;
    os_log_type_t v103 = "nw_webtransport_session_add_to_http_messaging";
    BOOL v78 = (char *)_os_log_send_and_compose_impl();
    BOOL v92 = OS_LOG_TYPE_ERROR;
    BOOL v91 = 0;
    if (__nwlog_fault(v78, &v92, &v91))
    {
      if (v92 == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v79 = (os_log_s *)__nwlog_obj();
        os_log_type_t v80 = v92;
        if (!os_log_type_enabled(v79, v92)) {
          goto LABEL_183;
        }
        *(_DWORD *)__int16 v102 = 136446210;
        os_log_type_t v103 = "nw_webtransport_session_add_to_http_messaging";
        os_log_type_t v81 = "%{public}s called with null options";
        goto LABEL_182;
      }

      if (!v91)
      {
        os_log_type_t v79 = (os_log_s *)__nwlog_obj();
        os_log_type_t v80 = v92;
        if (!os_log_type_enabled(v79, v92)) {
          goto LABEL_183;
        }
        *(_DWORD *)__int16 v102 = 136446210;
        os_log_type_t v103 = "nw_webtransport_session_add_to_http_messaging";
        os_log_type_t v81 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_182;
      }

      BOOL v88 = (char *)__nw_create_backtrace_string();
      os_log_type_t v79 = (os_log_s *)__nwlog_obj();
      os_log_type_t v80 = v92;
      os_log_type_t v89 = os_log_type_enabled(v79, v92);
      if (v88)
      {
        if (v89)
        {
          *(_DWORD *)__int16 v102 = 136446466;
          os_log_type_t v103 = "nw_webtransport_session_add_to_http_messaging";
          __int16 v104 = 2082;
          os_log_type_t v105 = v88;
          _os_log_impl( &dword_181A5C000,  v79,  v80,  "%{public}s called with null options, dumping backtrace:%{public}s",  v102,  0x16u);
        }

        free(v88);
        goto LABEL_183;
      }

      if (v89)
      {
        *(_DWORD *)__int16 v102 = 136446210;
        os_log_type_t v103 = "nw_webtransport_session_add_to_http_messaging";
        os_log_type_t v81 = "%{public}s called with null options, no backtrace";
LABEL_182:
        _os_log_impl(&dword_181A5C000, v79, v80, v81, v102, 0xCu);
      }
    }

      if (v34) {
        free(v34);
      }
      return 0LL;
    }

    if (!(_BYTE)v80)
    {
      os_log_type_t v35 = (os_log_s *)__nwlog_obj();
      BOOL v36 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)std::string buf = 136446210;
        BOOL v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
        uint64_t v37 = "%{public}s called with null buffer, backtrace limit exceeded";
        goto LABEL_176;
      }

      goto LABEL_177;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v35 = (os_log_s *)__nwlog_obj();
    BOOL v36 = type[0];
    os_log_type_t v39 = os_log_type_enabled(v35, type[0]);
    if (!backtrace_string)
    {
      if (v39)
      {
        *(_DWORD *)std::string buf = 136446210;
        BOOL v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
        uint64_t v37 = "%{public}s called with null buffer, no backtrace";
        goto LABEL_176;
      }

      goto LABEL_177;
    }

    if (v39)
    {
      *(_DWORD *)std::string buf = 136446466;
      BOOL v91 = "nw_http_fillout_indeterminate_binary_message_body_chunk";
      BOOL v92 = 2082;
      os_log_type_t v93 = backtrace_string;
      uint64_t v40 = "%{public}s called with null buffer, dumping backtrace:%{public}s";
LABEL_97:
      _os_log_impl(&dword_181A5C000, v35, v36, v40, buf, 0x16u);
    }

  __break(1u);
}

      goto LABEL_178;
    }

    if (!v108)
    {
      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
      }
      os_log_type_t v60 = (os_log_s *)(id)gbrowserLogObj;
      BOOL v92 = type;
      if (os_log_type_enabled(v60, type))
      {
        os_log_type_t v93 = *((_DWORD *)v5 + 48);
        *(_DWORD *)std::string buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_browser_remove_result_locked";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v93;
        _os_log_impl( &dword_181A5C000,  v60,  v92,  "%{public}s [B%u] new: failed to remove from new_results, backtrace limit exceeded",  buf,  0x12u);
      }

      goto LABEL_177;
    }

    os_log_type_t v87 = __nw_create_backtrace_string();
    if (!v87)
    {
      if (__nwlog_browser_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
      }
      os_log_type_t v60 = (os_log_s *)(id)gbrowserLogObj;
      BOOL v94 = type;
      if (os_log_type_enabled(v60, type))
      {
        os_log_type_t v95 = *((_DWORD *)v5 + 48);
        *(_DWORD *)std::string buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_browser_remove_result_locked";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v95;
        _os_log_impl( &dword_181A5C000,  v60,  v94,  "%{public}s [B%u] new: failed to remove from new_results, no backtrace",  buf,  0x12u);
      }

      goto LABEL_177;
    }

    os_log_type_t v66 = (char *)v87;
    if (__nwlog_browser_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
    }
    os_log_type_t v67 = (os_log_s *)(id)gbrowserLogObj;
    BOOL v88 = type;
    if (os_log_type_enabled(v67, type))
    {
      os_log_type_t v89 = *((_DWORD *)v5 + 48);
      *(_DWORD *)std::string buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_browser_remove_result_locked";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = v89;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v66;
      _os_log_impl( &dword_181A5C000,  v67,  v88,  "%{public}s [B%u] new: failed to remove from new_results, dumping backtrace:%{public}s",  buf,  0x1Cu);
    }

              if (!v95) {
                goto LABEL_81;
              }
LABEL_178:
              free(v95);
              goto LABEL_81;
            }
          }

          else
          {
          }
        }

        else if (nw_endpoint_handler_get_minimize_logging(v3))
        {
          if (v5[79] != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v40 = (id)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)v40, OS_LOG_TYPE_DEBUG))
          {
            id_string = nw_endpoint_handler_get_id_string(v3);
            __int16 v102 = nw_endpoint_handler_dry_run_string(v3);
            os_log_type_t v103 = nw_endpoint_handler_copy_endpoint(v3);
            logging_description = nw_endpoint_get_logging_description(v103);
            os_log_type_t v105 = nw_endpoint_handler_state_string(v3);
            uint64_t v106 = nw_endpoint_handler_mode_string(v3);
            os_log_type_t v107 = nw_endpoint_handler_copy_current_path(v3);
            *(_DWORD *)std::string buf = 136447746;
            v133 = "nw_endpoint_handler_remove_all_interface_options";
            uint64_t v134 = 2082;
            id_str = (void *)id_string;
            uint64_t v136 = 2082;
            BOOL v137 = v102;
            v138 = 2082;
            os_log_type_t v139 = (void *)logging_description;
            v140 = 2082;
            os_log_type_t v141 = v105;
            BOOL v142 = 2082;
            os_log_type_t v143 = v106;
            uint64_t v144 = 2114;
            uint64_t v145 = v107;
            _os_log_impl( &dword_181A5C000,  (os_log_t)v40,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Skipping removing all int erface option details, no active flow registration",  buf,  0x48u);
          }
        }

        else
        {
          BOOL v50 = v3;
          id v51 = (*((_BYTE *)v50 + 268) & 0x20) == 0;

          if (!v51)
          {
LABEL_108:

            id v20 = v125;
            goto LABEL_109;
          }

          if (v5[79] != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v40 = (id)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)v40, OS_LOG_TYPE_INFO))
          {
            os_log_type_t v52 = v50;

            BOOL v53 = v52;
            os_log_type_t v54 = (*((_BYTE *)v50 + 268) & 1) == 0;

            if (v54) {
              BOOL v55 = "";
            }
            else {
              BOOL v55 = "dry-run ";
            }
            BOOL v56 = nw_endpoint_handler_copy_endpoint(v53);
            id v57 = nw_endpoint_get_logging_description(v56);
            os_log_type_t v58 = v53;
            os_log_type_t v59 = v58;
            os_log_type_t v60 = v58[30];
            else {
              os_log_type_t v61 = off_189BBBBF0[v60];
            }

            BOOL v68 = v59;
            os_log_type_t v69 = "path";
            switch(v3->mode)
            {
              case 0:
                break;
              case 1:
                os_log_type_t v69 = "resolver";
                break;
              case 2:
                os_log_type_t v69 = nw_endpoint_flow_mode_string(v68[31]);
                break;
              case 3:
                os_log_type_t v69 = "proxy";
                break;
              case 4:
                os_log_type_t v69 = "fallback";
                break;
              case 5:
                os_log_type_t v69 = "transform";
                break;
              default:
                os_log_type_t v69 = "unknown-mode";
                break;
            }

            int v124 = v69;

            os_log_type_t v70 = v52;
            BOOL v71 = (os_log_s *)v40;
            os_log_type_t v72 = v56;
            os_log_type_t v73 = v61;
            os_log_type_t v74 = v55;
            os_log_type_t v75 = v57;
            os_log_type_t v76 = v68;
            os_unfair_lock_lock((os_unfair_lock_t)v76 + 28);
            os_log_type_t v77 = v76[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v76 + 28);

            BOOL v78 = v75;
            os_log_type_t v79 = v72;
            uint64_t v40 = v71;
            *(_DWORD *)std::string buf = 136447746;
            v133 = "nw_endpoint_handler_remove_all_interface_options";
            uint64_t v134 = 2082;
            id_str = v70->id_str;
            uint64_t v136 = 2082;
            BOOL v137 = v74;
            v138 = 2082;
            os_log_type_t v139 = (void *)v78;
            v140 = 2082;
            os_log_type_t v141 = v73;
            BOOL v142 = 2082;
            os_log_type_t v143 = v124;
            uint64_t v144 = 2114;
            uint64_t v145 = v77;
            _os_log_impl( &dword_181A5C000,  v71,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Skipping removing all int erface option details, no active flow registration",  buf,  0x48u);
          }
        }

              if (v60) {
                free(v60);
              }
              os_release(v39);
              goto LABEL_208;
            }

            if (((*(unsigned __int16 *)(v19 + 188) | (*(unsigned __int8 *)(v19 + 190) << 16)) & 0x80000) == 0
              && gLogDatapath)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              id v57 = (os_log_s *)gconnectionLogObj;
              if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
              {
                os_log_type_t v59 = *(_DWORD *)(v19 + 176);
                os_log_type_t v58 = *(_DWORD *)(v19 + 180);
                *(_DWORD *)std::string buf = 136447490;
                std::string::value_type v111 = "nw_http2_save_metadata_from_frame";
                __int16 v112 = 2082;
                *(void *)__int16 v113 = v19 + 191;
                *(_WORD *)&v113[8] = 2080;
                *(void *)&v113[10] = " ";
                *(_WORD *)&v113[18] = 1024;
                *(_DWORD *)&v113[20] = v58;
                *(_WORD *)&v113[24] = 1024;
                *(_DWORD *)&v113[26] = v59;
                *(_WORD *)&v113[30] = 2048;
                *(void *)&v113[32] = a1;
                _os_log_impl( &dword_181A5C000,  v57,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> no http metadata on frame %p, sending body data only",  buf,  0x36u);
              }
            }

void sub_181CE8C8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *networkd_privileged_type_to_string(int a1)
{
  else {
    return off_189BB5C28[a1 - 2];
  }
}

void networkd_privileged_send_async_inner(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v10 = a2;
  id v7 = a3;
  id v8 = a4;
  id v9 = networkd_privileged_copy_connection();
  if (v9) {
    networkd_privileged_send_async_inner_rec(a1, v9, v10, v7, v8, 1u);
  }
}

void sub_181CE8D78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void networkd_privileged_send_async_inner_rec( uint64_t a1, void *a2, void *a3, void *a4, void *a5, unsigned int a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = v14;
  if (a6 >= 6)
  {
    (*((void (**)(id, void))v14 + 2))(v14, MEMORY[0x1895F9198]);
  }

  else
  {
    v16[0] = MEMORY[0x1895F87A8];
    v16[1] = 3221225472LL;
    _OWORD v16[2] = ___ZL40networkd_privileged_send_async_inner_recPKcPU24objcproto13OS_xpc_object8NSObjectS3_PU28objcproto17OS_dispatch_queueS1_U13block_pointerFvS3_Ej_block_invoke;
    v16[3] = &unk_189BB5BE8;
    id v20 = v14;
    uint64_t v21 = a1;
    unsigned int v22 = a6;
    os_log_type_t v17 = (_xpc_connection_s *)v11;
    id v18 = v12;
    id v19 = (dispatch_queue_s *)v13;
    xpc_connection_send_message_with_reply(v17, v18, v19, v16);
  }
}

void sub_181CE8EC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL40networkd_privileged_send_async_inner_recPKcPU24objcproto13OS_xpc_object8NSObjectS3_PU28objcproto17OS_dispatch_queueS1_U13block_pointerFvS3_Ej_block_invoke( uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  if (v3 == (id)MEMORY[0x1895F9198])
  {
    __nwlog_obj();
    xpc_object_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 64);
      int v6 = *(_DWORD *)(a1 + 72);
      int v7 = 136446722;
      id v8 = "networkd_privileged_send_async_inner_rec_block_invoke";
      __int16 v9 = 2082;
      uint64_t v10 = v5;
      __int16 v11 = 1024;
      int v12 = v6;
      _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, retrying (%u)",  (uint8_t *)&v7,  0x1Cu);
    }

    networkd_privileged_send_async_inner_rec( *(void *)(a1 + 64),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  (*(_DWORD *)(a1 + 72) + 1));
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
}

void sub_181CE901C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __networkd_privileged_check_mobile_asset_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v80 = *MEMORY[0x1895F89C0];
  id v2 = a2;
  id v3 = v2;
  if (!v2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    *(_DWORD *)std::string buf = 136446210;
    os_log_type_t v75 = "networkd_privileged_check_mobile_asset_block_invoke";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v72 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v11 = (os_log_s *)(id)gLogObj;
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v75 = "networkd_privileged_check_mobile_asset_block_invoke";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s received NULL response", buf, 0xCu);
      }

      goto LABEL_73;
    }

    if (!v72)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v11 = (os_log_s *)(id)gLogObj;
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v75 = "networkd_privileged_check_mobile_asset_block_invoke";
        _os_log_impl( &dword_181A5C000,  v11,  v29,  "%{public}s received NULL response, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_73;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v11 = (os_log_s *)(id)gLogObj;
    os_log_type_t v20 = type;
    BOOL v21 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v75 = "networkd_privileged_check_mobile_asset_block_invoke";
        _os_log_impl(&dword_181A5C000, v11, v20, "%{public}s received NULL response, no backtrace", buf, 0xCu);
      }

      goto LABEL_73;
    }

    if (v21)
    {
      *(_DWORD *)std::string buf = 136446466;
      os_log_type_t v75 = "networkd_privileged_check_mobile_asset_block_invoke";
      __int16 v76 = 2082;
      *(void *)os_log_type_t v77 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s received NULL response, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_25;
  }

  Class Class = object_getClass(v2);
  if (Class == (Class)MEMORY[0x1895F9250])
  {
    xpc_dictionary_get_value(v3, (const char *)networkd_privileged_key_result);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    id v14 = v13;
    if (!v13)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v27 = (id)gLogObj;
      *(_DWORD *)std::string buf = 136446210;
      os_log_type_t v75 = "networkd_privileged_check_mobile_asset_block_invoke";
      os_log_type_t v16 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v72 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v17 = (os_log_s *)(id)gLogObj;
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v75 = "networkd_privileged_check_mobile_asset_block_invoke";
          _os_log_impl(&dword_181A5C000, v17, v28, "%{public}s received response without result code", buf, 0xCu);
        }

        goto LABEL_131;
      }

      if (!v72)
      {
        __nwlog_obj();
        os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v57 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v75 = "networkd_privileged_check_mobile_asset_block_invoke";
          _os_log_impl( &dword_181A5C000,  v17,  v57,  "%{public}s received response without result code, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_131;
      }

      os_log_type_t v39 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v42 = type;
      BOOL v43 = os_log_type_enabled(v17, type);
      if (!v39)
      {
        if (v43)
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v75 = "networkd_privileged_check_mobile_asset_block_invoke";
          _os_log_impl( &dword_181A5C000,  v17,  v42,  "%{public}s received response without result code, no backtrace",  buf,  0xCu);
        }

        goto LABEL_131;
      }

      if (v43)
      {
        *(_DWORD *)std::string buf = 136446466;
        os_log_type_t v75 = "networkd_privileged_check_mobile_asset_block_invoke";
        __int16 v76 = 2082;
        *(void *)os_log_type_t v77 = v39;
        _os_log_impl( &dword_181A5C000,  v17,  v42,  "%{public}s received response without result code, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_80;
    }

    if (object_getClass(v13) != (Class)MEMORY[0x1895F9280])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v15 = (id)gLogObj;
      *(_DWORD *)std::string buf = 136446210;
      os_log_type_t v75 = "networkd_privileged_check_mobile_asset_block_invoke";
      os_log_type_t v16 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v72 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v17 = (os_log_s *)(id)gLogObj;
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v75 = "networkd_privileged_check_mobile_asset_block_invoke";
          _os_log_impl(&dword_181A5C000, v17, v18, "%{public}s received invalid result type", buf, 0xCu);
        }

void sub_181CEA72C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __networkd_privileged_run_probes_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v80 = *MEMORY[0x1895F89C0];
  id v2 = a2;
  id v3 = v2;
  if (!v2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    *(_DWORD *)std::string buf = 136446210;
    os_log_type_t v75 = "networkd_privileged_run_probes_block_invoke";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v72 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v11 = (os_log_s *)(id)gLogObj;
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v75 = "networkd_privileged_run_probes_block_invoke";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s received NULL response", buf, 0xCu);
      }

      goto LABEL_73;
    }

    if (!v72)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v11 = (os_log_s *)(id)gLogObj;
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v75 = "networkd_privileged_run_probes_block_invoke";
        _os_log_impl( &dword_181A5C000,  v11,  v29,  "%{public}s received NULL response, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_73;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v11 = (os_log_s *)(id)gLogObj;
    os_log_type_t v20 = type;
    BOOL v21 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v75 = "networkd_privileged_run_probes_block_invoke";
        _os_log_impl(&dword_181A5C000, v11, v20, "%{public}s received NULL response, no backtrace", buf, 0xCu);
      }

      goto LABEL_73;
    }

    if (v21)
    {
      *(_DWORD *)std::string buf = 136446466;
      os_log_type_t v75 = "networkd_privileged_run_probes_block_invoke";
      __int16 v76 = 2082;
      *(void *)os_log_type_t v77 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s received NULL response, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_25;
  }

  Class Class = object_getClass(v2);
  if (Class == (Class)MEMORY[0x1895F9250])
  {
    xpc_dictionary_get_value(v3, (const char *)networkd_privileged_key_result);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    id v14 = v13;
    if (!v13)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v27 = (id)gLogObj;
      *(_DWORD *)std::string buf = 136446210;
      os_log_type_t v75 = "networkd_privileged_run_probes_block_invoke";
      os_log_type_t v16 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v72 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v17 = (os_log_s *)(id)gLogObj;
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v75 = "networkd_privileged_run_probes_block_invoke";
          _os_log_impl(&dword_181A5C000, v17, v28, "%{public}s received response without result code", buf, 0xCu);
        }

        goto LABEL_131;
      }

      if (!v72)
      {
        __nwlog_obj();
        os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v57 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v75 = "networkd_privileged_run_probes_block_invoke";
          _os_log_impl( &dword_181A5C000,  v17,  v57,  "%{public}s received response without result code, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_131;
      }

      os_log_type_t v39 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v42 = type;
      BOOL v43 = os_log_type_enabled(v17, type);
      if (!v39)
      {
        if (v43)
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v75 = "networkd_privileged_run_probes_block_invoke";
          _os_log_impl( &dword_181A5C000,  v17,  v42,  "%{public}s received response without result code, no backtrace",  buf,  0xCu);
        }

        goto LABEL_131;
      }

      if (v43)
      {
        *(_DWORD *)std::string buf = 136446466;
        os_log_type_t v75 = "networkd_privileged_run_probes_block_invoke";
        __int16 v76 = 2082;
        *(void *)os_log_type_t v77 = v39;
        _os_log_impl( &dword_181A5C000,  v17,  v42,  "%{public}s received response without result code, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_80;
    }

    if (object_getClass(v13) != (Class)MEMORY[0x1895F9280])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v15 = (id)gLogObj;
      *(_DWORD *)std::string buf = 136446210;
      os_log_type_t v75 = "networkd_privileged_run_probes_block_invoke";
      os_log_type_t v16 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v72 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v17 = (os_log_s *)(id)gLogObj;
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v75 = "networkd_privileged_run_probes_block_invoke";
          _os_log_impl(&dword_181A5C000, v17, v18, "%{public}s received invalid result type", buf, 0xCu);
        }

void sub_181CEBE54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __networkd_privileged_set_opportunistic_async_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void __networkd_privileged_set_opportunistic_async_block_invoke_41(uint64_t a1, void *a2)
{
  uint64_t v89 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  xpc_object_t v4 = v3;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (id)gLogObj;
    *(_DWORD *)std::string buf = 136446210;
    os_log_type_t v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v81 = 0;
    if (__nwlog_fault(v12, &type, &v81))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v13 = (os_log_s *)(id)gLogObj;
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
          _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s received NULL response", buf, 0xCu);
        }
      }

      else if (v81)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v13 = (os_log_s *)(id)gLogObj;
        os_log_type_t v22 = type;
        BOOL v23 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v23)
          {
            *(_DWORD *)std::string buf = 136446466;
            os_log_type_t v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
            __int16 v85 = 2082;
            *(void *)os_log_type_t v86 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v13,  v22,  "%{public}s received NULL response, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          if (!v12) {
            goto LABEL_78;
          }
          goto LABEL_77;
        }

        if (v23)
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
          _os_log_impl(&dword_181A5C000, v13, v22, "%{public}s received NULL response, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v13 = (os_log_s *)(id)gLogObj;
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
          _os_log_impl( &dword_181A5C000,  v13,  v31,  "%{public}s received NULL response, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v12) {
      goto LABEL_78;
    }
LABEL_77:
    free(v12);
    goto LABEL_78;
  }

  Class Class = object_getClass(v3);
  if (Class != (Class)MEMORY[0x1895F9250])
  {
    if (Class != (Class)MEMORY[0x1895F9268])
    {
      id v6 = (void *)MEMORY[0x186E12534](v4);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v7 = (id)gLogObj;
      *(_DWORD *)std::string buf = 136446466;
      os_log_type_t v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
      __int16 v85 = 2082;
      *(void *)os_log_type_t v86 = v6;
      id v8 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v81 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = (os_log_s *)(id)gLogObj;
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)std::string buf = 136446466;
          os_log_type_t v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
          __int16 v85 = 2082;
          *(void *)os_log_type_t v86 = v6;
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s received unknown type XPC %{public}s", buf, 0x16u);
        }

void sub_181CED6E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL networkd_privileged_set_settings(const char *a1, void *a2, const char *a3)
{
  uint64_t v110 = *MEMORY[0x1895F89C0];
  id v5 = a2;
  if (a1)
  {
    xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
    id v7 = v6;
    if (v6)
    {
      xpc_dictionary_set_uint64(v6, (const char *)networkd_privileged_key_type, 0xAuLL);
      xpc_dictionary_set_string(v7, (const char *)networkd_privileged_key_settings_key, a1);
      xpc_dictionary_set_value(v7, (const char *)networkd_privileged_key_settings_value, v5);
      if (a3 && *a3) {
        xpc_dictionary_set_string(v7, (const char *)networkd_privileged_key_settings_file_prefix, a3);
      }
      xpc_object_t v8 = networkd_privileged_send_sync_inner((uint64_t)"networkd_privileged_set_settings", v7);
      os_log_type_t v9 = v8;
      if (v8)
      {
        Class Class = object_getClass(v8);
        if (Class != (Class)MEMORY[0x1895F9250])
        {
          if (Class != (Class)MEMORY[0x1895F9268])
          {
            id v11 = (void *)MEMORY[0x186E12534](v9);
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v12 = (id)gLogObj;
            *(_DWORD *)std::string buf = 136446466;
            os_log_type_t v105 = "networkd_privileged_set_settings";
            __int16 v106 = 2082;
            *(void *)os_log_type_t v107 = v11;
            uint64_t v13 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v102 = 0;
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v14 = (os_log_s *)(id)gLogObj;
              os_log_type_t v15 = type;
              if (os_log_type_enabled(v14, type))
              {
                *(_DWORD *)std::string buf = 136446466;
                os_log_type_t v105 = "networkd_privileged_set_settings";
                __int16 v106 = 2082;
                *(void *)os_log_type_t v107 = v11;
                _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s received unknown type XPC %{public}s", buf, 0x16u);
              }

void sub_181CEF264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL networkd_privileged_reload_managed_network_settings()
{
  uint64_t v96 = *MEMORY[0x1895F89C0];
  xpc_object_t v0 = xpc_dictionary_create(0LL, 0LL, 0LL);
  int v1 = v0;
  if (v0)
  {
    xpc_dictionary_set_uint64(v0, (const char *)networkd_privileged_key_type, 9uLL);
    xpc_object_t v2 = networkd_privileged_send_sync_inner((uint64_t)"networkd_privileged_reload_managed_network_settings", v1);
    id v3 = v2;
    if (v2)
    {
      Class Class = object_getClass(v2);
      if (Class != (Class)MEMORY[0x1895F9250])
      {
        if (Class != (Class)MEMORY[0x1895F9268])
        {
          id v5 = (void *)MEMORY[0x186E12534](v3);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v6 = (id)gLogObj;
          *(_DWORD *)std::string buf = 136446466;
          BOOL v91 = "networkd_privileged_reload_managed_network_settings";
          __int16 v92 = 2082;
          *(void *)os_log_type_t v93 = v5;
          id v7 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v88 = 0;
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            xpc_object_t v8 = (os_log_s *)(id)gLogObj;
            os_log_type_t v9 = type;
            if (os_log_type_enabled(v8, type))
            {
              *(_DWORD *)std::string buf = 136446466;
              BOOL v91 = "networkd_privileged_reload_managed_network_settings";
              __int16 v92 = 2082;
              *(void *)os_log_type_t v93 = v5;
              _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s received unknown type XPC %{public}s", buf, 0x16u);
            }

LABEL_174:
            int v42 = 1;
            goto LABEL_175;
          }

    if (v91) {
      free(v91);
    }
    os_log_type_t v25 = (uint64_t)v90;
    os_log_type_t v26 = a9;
    id v28 = v89;
    os_log_type_t v60 = v117;
    if (!v117) {
      goto LABEL_73;
    }
    goto LABEL_70;
  }

  if (gLogDatapath)
  {
    os_log_type_t v41 = a2;
    int v42 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
    {
      os_log_type_t v43 = "invalid";
      if (v41 && v41[2]) {
        os_log_type_t v43 = (const char *)v41[2];
      }
      *(_DWORD *)std::string buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(void *)&buf[14] = v41;
      *(_WORD *)&buf[22] = 2080;
      BOOL v125 = v43;
      _os_log_impl( &dword_181A5C000,  v42,  OS_LOG_TYPE_DEBUG,  "%{public}s short circuiting because protocol %p:%s has already handled eof",  buf,  0x20u);
    }
  }

    if (v62) {
      free(v62);
    }
    goto LABEL_157;
  }

  if ((v3->flow_in_connected & 0x10000000) != 0) {
    goto LABEL_157;
  }
  os_log_type_t v85 = 0LL;
  if (v3->flow_registration && !nw_protocol_implementation_lookup_path_by_protocol(v3, a2, &v85))
  {
    if ((SBYTE5(v4->flow_in_connected) & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v60 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_read";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = (char *)&v4->flow_in_connected + 7;
        *(_WORD *)&buf[22] = 2080;
        __int16 v94 = (nw_protocol *)" ";
        LOWORD(v95) = 2048;
        *(void *)((char *)&v95 + 2) = a2;
        _os_log_impl( &dword_181A5C000,  v60,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sCould not find path state for protocol %p",  buf,  0x2Au);
      }
    }

    goto LABEL_157;
  }

  id v5 = BYTE4(v4->flow_in_connected);
  while (1)
  {
    BYTE4(v4->flow_in_connected) = v5 & 0xDF;
    BYTE3(v4->flow_in_connected) |= 0x10u;
    var10 = (void (*)(NWConcrete_nw_protocol_instance *))v4->parent_definition->extended_state->var10;
    if (var10) {
      var10(v4);
    }
    id v7 = v85;
    xpc_object_t v8 = v4;
    if (!v4->parent_definition->extended_state->var7)
    {
      __nwlog_obj();
      BOOL v33 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_input_internal";
      os_log_type_t v34 = (char *)_os_log_send_and_compose_impl();

      LOBYTE(v91) = 16;
      v89[0] = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v34, &v91, v89))
      {
        if (v91 == 17)
        {
          __nwlog_obj();
          os_log_type_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v36 = v91;
          if (os_log_type_enabled(v35, (os_log_type_t)v91))
          {
            *(_DWORD *)std::string buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_input_internal";
            _os_log_impl( &dword_181A5C000,  v35,  v36,  "%{public}s called with null instance->parent_definition->extended_state->handle_inbound",  buf,  0xCu);
          }
        }

        else if (v89[0])
        {
          BOOL v48 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          id v49 = v91;
          os_log_type_t v50 = os_log_type_enabled(v35, (os_log_type_t)v91);
          if (v48)
          {
            if (v50)
            {
              *(_DWORD *)std::string buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_input_internal";
              *(_WORD *)&_BYTE buf[12] = 2082;
              *(void *)&buf[14] = v48;
              _os_log_impl( &dword_181A5C000,  v35,  v49,  "%{public}s called with null instance->parent_definition->extended_state->handle_inbound, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v48);
            goto LABEL_140;
          }

          if (v50)
          {
            *(_DWORD *)std::string buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_input_internal";
            _os_log_impl( &dword_181A5C000,  v35,  v49,  "%{public}s called with null instance->parent_definition->extended_state->handle_inbound, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          os_log_type_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v56 = v91;
          if (os_log_type_enabled(v35, (os_log_type_t)v91))
          {
            *(_DWORD *)std::string buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_input_internal";
            _os_log_impl( &dword_181A5C000,  v35,  v56,  "%{public}s called with null instance->parent_definition->extended_state->handle_inbound, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

            goto LABEL_112;
          }

          if (!v212)
          {
            __nwlog_obj();
            __int16 v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            uint64_t v134 = type[0];
            if (os_log_type_enabled(v92, type[0]))
            {
              *(_DWORD *)std::string buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_protocol_utilities_add_input_handler";
              v215 = 2048;
              v216 = (uint64_t)v6;
              _os_log_impl( &dword_181A5C000,  v92,  v134,  "%{public}s Cannot add input handler %p to itself, backtrace limit exceeded",  buf,  0x16u);
            }

            goto LABEL_174;
          }

          __int16 v104 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v105 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          __int16 v106 = type[0];
          os_log_type_t v107 = os_log_type_enabled(v105, type[0]);
          if (v104)
          {
            if (v107)
            {
              *(_DWORD *)std::string buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_protocol_utilities_add_input_handler";
              v215 = 2048;
              v216 = (uint64_t)v6;
              v217 = 2082;
              v218 = (uint64_t)v104;
              _os_log_impl( &dword_181A5C000,  v105,  v106,  "%{public}s Cannot add input handler %p to itself, dumping backtrace:%{public}s",  buf,  0x20u);
            }

            free(v104);
            if (!v91) {
              goto LABEL_114;
            }
            goto LABEL_113;
          }

          if (v107)
          {
            *(_DWORD *)std::string buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_utilities_add_input_handler";
            v215 = 2048;
            v216 = (uint64_t)v6;
            _os_log_impl( &dword_181A5C000,  v105,  v106,  "%{public}s Cannot add input handler %p to itself, no backtrace",  buf,  0x16u);
          }

    _os_log_impl(&dword_181A5C000, v93, OS_LOG_TYPE_DEBUG, v97, buf, 0x32u);
    goto LABEL_175;
  }

  if (v92 != 4)
  {
    if ((*(_BYTE *)(v12 + 158) & 1) != 0) {
      goto LABEL_175;
    }
    os_log_type_t v93 = (os_log_s *)__nwlog_obj();
    if (!os_log_type_enabled(v93, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_175;
    }
    std::string::value_type v111 = *(void *)(v12 + 488);
    __int16 v112 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
    __int16 v113 = *(_DWORD *)(v12 + 860);
    if (v111) {
      LODWORD(v111) = *(_DWORD *)(v111 + 424);
    }
    *(_DWORD *)std::string buf = 136447490;
    *(void *)&uint8_t buf[4] = "nw_http1_update_connection_input_state";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = v12 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(void *)&_BYTE buf[24] = " ";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v112;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&buf[40] = v113;
    LOWORD(v265) = 1024;
    *(_DWORD *)((char *)&v265 + 2) = v111;
    os_log_type_t v97 = "%{public}s %{public}s%s<i%u:c%u:s%u> no change to http1 connection state";
    goto LABEL_174;
  }

  if (v90 | v91)
  {
    if (!v90) {
      goto LABEL_175;
    }
    if (v91) {
      goto LABEL_175;
    }
    *(_DWORD *)(v12 + 864) = 3;
    if ((*(_BYTE *)(v12 + 158) & 1) != 0) {
      goto LABEL_175;
    }
    os_log_type_t v93 = (os_log_s *)__nwlog_obj();
    if (!os_log_type_enabled(v93, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_175;
    }
    v118 = *(void *)(v12 + 488);
    BOOL v119 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
    __int128 v120 = *(_DWORD *)(v12 + 860);
    if (v118) {
      LODWORD(v118) = *(_DWORD *)(v118 + 424);
    }
    *(_DWORD *)std::string buf = 136447490;
    *(void *)&uint8_t buf[4] = "nw_http1_update_connection_input_state";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = v12 + 74;
    *(_WORD *)&buf[22] = 2080;
    *(void *)&_BYTE buf[24] = " ";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v119;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&buf[40] = v120;
    LOWORD(v265) = 1024;
    *(_DWORD *)((char *)&v265 + 2) = v118;
    os_log_type_t v97 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: stream pending";
    goto LABEL_174;
  }

  *(_DWORD *)(v12 + 864) = 2;
  if ((*(_BYTE *)(v12 + 158) & 1) == 0)
  {
    os_log_type_t v93 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v93, OS_LOG_TYPE_DEBUG))
    {
      __int16 v94 = *(void *)(v12 + 488);
      BOOL v95 = *(_DWORD *)(*(void *)(v12 + 480) + 372LL);
      uint64_t v96 = *(_DWORD *)(v12 + 860);
      if (v94) {
        LODWORD(v94) = *(_DWORD *)(v94 + 424);
      }
      *(_DWORD *)std::string buf = 136447490;
      *(void *)&uint8_t buf[4] = "nw_http1_update_connection_input_state";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = v12 + 74;
      *(_WORD *)&buf[22] = 2080;
      *(void *)&_BYTE buf[24] = " ";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v95;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v96;
      LOWORD(v265) = 1024;
      *(_DWORD *)((char *)&v265 + 2) = v94;
      os_log_type_t v97 = "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: stream complete";
      goto LABEL_174;
    }
  }

    free(v91);
    a4 = v90;
    goto LABEL_226;
  }

  v147 = a4;
  os_log_type_t v20 = *(void *)(v19 + 32);
  if (!v20)
  {
    __nwlog_obj();
    *(_DWORD *)std::string buf = 136446210;
    v153 = "nw_http2_submit_data";
    os_log_type_t v83 = (char *)_os_log_send_and_compose_impl();
    v149[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    a4 = v147;
    if (__nwlog_fault(v83, v149, &type))
    {
      if (v149[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v84 = (os_log_s *)__nwlog_obj();
        os_log_type_t v85 = v149[0];
        if (os_log_type_enabled(v84, v149[0]))
        {
          *(_DWORD *)std::string buf = 136446210;
          v153 = "nw_http2_submit_data";
          BOOL v86 = "%{public}s called with null stream";
LABEL_231:
          _os_log_impl(&dword_181A5C000, v84, v85, v86, buf, 0xCu);
        }
      }

      else if (type)
      {
        uint64_t v96 = (char *)__nw_create_backtrace_string();
        os_log_type_t v84 = (os_log_s *)__nwlog_obj();
        os_log_type_t v85 = v149[0];
        os_log_type_t v97 = os_log_type_enabled(v84, v149[0]);
        if (v96)
        {
          if (v97)
          {
            *(_DWORD *)std::string buf = 136446466;
            v153 = "nw_http2_submit_data";
            v154 = 2082;
            uint64_t v155 = (uint64_t)v96;
            _os_log_impl( &dword_181A5C000,  v84,  v85,  "%{public}s called with null stream, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v96);
          a4 = v147;
          goto LABEL_232;
        }

        a4 = v147;
        if (v97)
        {
          *(_DWORD *)std::string buf = 136446210;
          v153 = "nw_http2_submit_data";
          BOOL v86 = "%{public}s called with null stream, no backtrace";
          goto LABEL_231;
        }
      }

      else
      {
        os_log_type_t v84 = (os_log_s *)__nwlog_obj();
        os_log_type_t v85 = v149[0];
        a4 = v147;
        if (os_log_type_enabled(v84, v149[0]))
        {
          *(_DWORD *)std::string buf = 136446210;
          v153 = "nw_http2_submit_data";
          BOOL v86 = "%{public}s called with null stream, backtrace limit exceeded";
          goto LABEL_231;
        }
      }
    }

          _os_log_impl(&dword_181A5C000, v93, v94, v95, buf, 0x12u);
          goto LABEL_175;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v91 = gLogObj;
        __int16 v92 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          *(_DWORD *)std::string buf = 136446466;
          v254 = "nw_channel_add_input_frames";
          v255 = 1024;
          LODWORD(v256[0]) = v6;
          os_log_type_t v93 = (os_log_s *)v91;
          __int16 v94 = v92;
          BOOL v95 = "%{public}s Chained packet-length is too big: %u";
          goto LABEL_174;
        }
      }

void sub_181CF0B78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void networkd_privileged_set_constrained(const char *a1, BOOL a2)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    xpc_object_t v4 = xpc_dictionary_create(0LL, 0LL, 0LL);
    id v5 = v4;
    if (v4)
    {
      xpc_dictionary_set_uint64(v4, (const char *)networkd_privileged_key_type, 0xFuLL);
      xpc_dictionary_set_BOOL(v5, (const char *)networkd_privileged_key_constrained, a2);
      xpc_dictionary_set_string(v5, (const char *)networkd_privileged_key_interface_name, a1);
      id v6 = networkd_privileged_copy_connection();
      if (v6)
      {
        id v7 = (id)networkd_privileged_copy_queue(void)::networkdPrivilegedQueue;
        v32[0] = MEMORY[0x1895F87A8];
        v32[1] = 3221225472LL;
        v32[2] = __networkd_privileged_set_constrained_block_invoke;
        void v32[3] = &unk_189BB5B98;
        id v33 = v5;
        networkd_privileged_send_async_inner((uint64_t)"networkd_privileged_set_constrained", v33, v7, v32);

LABEL_7:
LABEL_8:

        return;
      }

      __nwlog_obj();
      id v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)std::string buf = 136446210;
      id v37 = "networkd_privileged_set_constrained";
      id v17 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v34 = 0;
      if (__nwlog_fault(v17, &type, &v34))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v19 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)std::string buf = 136446210;
            id v37 = "networkd_privileged_set_constrained";
            _os_log_impl(&dword_181A5C000, v18, v19, "%{public}s Unable to connect to networkd privileged", buf, 0xCu);
          }
        }

        else if (v34)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v27 = type;
          BOOL v28 = os_log_type_enabled(v18, type);
          if (backtrace_string)
          {
            if (v28)
            {
              *(_DWORD *)std::string buf = 136446466;
              id v37 = "networkd_privileged_set_constrained";
              __int16 v38 = 2082;
              os_log_type_t v39 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v18,  v27,  "%{public}s Unable to connect to networkd privileged, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(backtrace_string);
            goto LABEL_62;
          }

          if (v28)
          {
            *(_DWORD *)std::string buf = 136446210;
            id v37 = "networkd_privileged_set_constrained";
            _os_log_impl( &dword_181A5C000,  v18,  v27,  "%{public}s Unable to connect to networkd privileged, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v31 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)std::string buf = 136446210;
            id v37 = "networkd_privileged_set_constrained";
            _os_log_impl( &dword_181A5C000,  v18,  v31,  "%{public}s Unable to connect to networkd privileged, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

void sub_181CF1340( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __networkd_privileged_set_constrained_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v85 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  xpc_object_t v4 = v3;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (id)gLogObj;
    *(_DWORD *)std::string buf = 136446210;
    os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v77 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (os_log_s *)(id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s received NULL response", buf, 0xCu);
      }

      goto LABEL_72;
    }

    if (!v77)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (os_log_s *)(id)gLogObj;
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
        _os_log_impl( &dword_181A5C000,  v12,  v30,  "%{public}s received NULL response, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_72;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v12 = (os_log_s *)(id)gLogObj;
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
        _os_log_impl(&dword_181A5C000, v12, v21, "%{public}s received NULL response, no backtrace", buf, 0xCu);
      }

      goto LABEL_72;
    }

    if (v22)
    {
      *(_DWORD *)std::string buf = 136446466;
      os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
      __int16 v81 = 2082;
      *(void *)os_log_type_t v82 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v12,  v21,  "%{public}s received NULL response, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_25;
  }

  Class Class = object_getClass(v3);
  if (Class == (Class)MEMORY[0x1895F9250])
  {
    xpc_dictionary_get_value(v4, (const char *)networkd_privileged_key_result);
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v15 = v14;
    if (!v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v28 = (id)gLogObj;
      *(_DWORD *)std::string buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
      id v17 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (os_log_s *)(id)gLogObj;
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
          _os_log_impl(&dword_181A5C000, v18, v29, "%{public}s received response without result code", buf, 0xCu);
        }

        goto LABEL_133;
      }

      if (!v77)
      {
        __nwlog_obj();
        os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v60 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
          _os_log_impl( &dword_181A5C000,  v18,  v60,  "%{public}s received response without result code, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_133;
      }

      __int16 v38 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v41 = type;
      BOOL v42 = os_log_type_enabled(v18, type);
      if (!v38)
      {
        if (v42)
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
          _os_log_impl( &dword_181A5C000,  v18,  v41,  "%{public}s received response without result code, no backtrace",  buf,  0xCu);
        }

        goto LABEL_133;
      }

      if (v42)
      {
        *(_DWORD *)std::string buf = 136446466;
        os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = v38;
        _os_log_impl( &dword_181A5C000,  v18,  v41,  "%{public}s received response without result code, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_79;
    }

    if (object_getClass(v14) != (Class)MEMORY[0x1895F9280])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v16 = (id)gLogObj;
      *(_DWORD *)std::string buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
      id v17 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (os_log_s *)(id)gLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_constrained_block_invoke";
          _os_log_impl(&dword_181A5C000, v18, v19, "%{public}s received invalid result type", buf, 0xCu);
        }

void sub_181CF2B20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void networkd_privileged_set_ultra_constrained(const char *a1, BOOL a2)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    xpc_object_t v4 = xpc_dictionary_create(0LL, 0LL, 0LL);
    id v5 = v4;
    if (v4)
    {
      xpc_dictionary_set_uint64(v4, (const char *)networkd_privileged_key_type, 0x16uLL);
      xpc_dictionary_set_BOOL(v5, (const char *)networkd_privileged_key_constrained, a2);
      xpc_dictionary_set_string(v5, (const char *)networkd_privileged_key_interface_name, a1);
      id v6 = networkd_privileged_copy_connection();
      if (v6)
      {
        id v7 = (id)networkd_privileged_copy_queue(void)::networkdPrivilegedQueue;
        v32[0] = MEMORY[0x1895F87A8];
        v32[1] = 3221225472LL;
        v32[2] = __networkd_privileged_set_ultra_constrained_block_invoke;
        void v32[3] = &unk_189BB5B98;
        id v33 = v5;
        networkd_privileged_send_async_inner((uint64_t)"networkd_privileged_set_ultra_constrained", v33, v7, v32);

LABEL_7:
LABEL_8:

        return;
      }

      __nwlog_obj();
      id v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)std::string buf = 136446210;
      os_log_type_t v37 = "networkd_privileged_set_ultra_constrained";
      id v17 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v34 = 0;
      if (__nwlog_fault(v17, &type, &v34))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v19 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)std::string buf = 136446210;
            os_log_type_t v37 = "networkd_privileged_set_ultra_constrained";
            _os_log_impl(&dword_181A5C000, v18, v19, "%{public}s Unable to connect to networkd privileged", buf, 0xCu);
          }
        }

        else if (v34)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v27 = type;
          BOOL v28 = os_log_type_enabled(v18, type);
          if (backtrace_string)
          {
            if (v28)
            {
              *(_DWORD *)std::string buf = 136446466;
              os_log_type_t v37 = "networkd_privileged_set_ultra_constrained";
              __int16 v38 = 2082;
              os_log_type_t v39 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v18,  v27,  "%{public}s Unable to connect to networkd privileged, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(backtrace_string);
            goto LABEL_62;
          }

          if (v28)
          {
            *(_DWORD *)std::string buf = 136446210;
            os_log_type_t v37 = "networkd_privileged_set_ultra_constrained";
            _os_log_impl( &dword_181A5C000,  v18,  v27,  "%{public}s Unable to connect to networkd privileged, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v31 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)std::string buf = 136446210;
            os_log_type_t v37 = "networkd_privileged_set_ultra_constrained";
            _os_log_impl( &dword_181A5C000,  v18,  v31,  "%{public}s Unable to connect to networkd privileged, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

void sub_181CF32E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __networkd_privileged_set_ultra_constrained_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v85 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  xpc_object_t v4 = v3;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (id)gLogObj;
    *(_DWORD *)std::string buf = 136446210;
    os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v77 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (os_log_s *)(id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s received NULL response", buf, 0xCu);
      }

      goto LABEL_72;
    }

    if (!v77)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (os_log_s *)(id)gLogObj;
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
        _os_log_impl( &dword_181A5C000,  v12,  v30,  "%{public}s received NULL response, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_72;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v12 = (os_log_s *)(id)gLogObj;
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
        _os_log_impl(&dword_181A5C000, v12, v21, "%{public}s received NULL response, no backtrace", buf, 0xCu);
      }

      goto LABEL_72;
    }

    if (v22)
    {
      *(_DWORD *)std::string buf = 136446466;
      os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
      __int16 v81 = 2082;
      *(void *)os_log_type_t v82 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v12,  v21,  "%{public}s received NULL response, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_25;
  }

  Class Class = object_getClass(v3);
  if (Class == (Class)MEMORY[0x1895F9250])
  {
    xpc_dictionary_get_value(v4, (const char *)networkd_privileged_key_result);
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v15 = v14;
    if (!v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v28 = (id)gLogObj;
      *(_DWORD *)std::string buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
      id v17 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (os_log_s *)(id)gLogObj;
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
          _os_log_impl(&dword_181A5C000, v18, v29, "%{public}s received response without result code", buf, 0xCu);
        }

        goto LABEL_133;
      }

      if (!v77)
      {
        __nwlog_obj();
        os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v60 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
          _os_log_impl( &dword_181A5C000,  v18,  v60,  "%{public}s received response without result code, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_133;
      }

      __int16 v38 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v41 = type;
      BOOL v42 = os_log_type_enabled(v18, type);
      if (!v38)
      {
        if (v42)
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
          _os_log_impl( &dword_181A5C000,  v18,  v41,  "%{public}s received response without result code, no backtrace",  buf,  0xCu);
        }

        goto LABEL_133;
      }

      if (v42)
      {
        *(_DWORD *)std::string buf = 136446466;
        os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = v38;
        _os_log_impl( &dword_181A5C000,  v18,  v41,  "%{public}s received response without result code, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_79;
    }

    if (object_getClass(v14) != (Class)MEMORY[0x1895F9280])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v16 = (id)gLogObj;
      *(_DWORD *)std::string buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
      id v17 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (os_log_s *)(id)gLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
          _os_log_impl(&dword_181A5C000, v18, v19, "%{public}s received invalid result type", buf, 0xCu);
        }

void sub_181CF4AC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void networkd_privileged_set_expensive(const char *a1, BOOL a2)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    xpc_object_t v4 = xpc_dictionary_create(0LL, 0LL, 0LL);
    id v5 = v4;
    if (v4)
    {
      xpc_dictionary_set_uint64(v4, (const char *)networkd_privileged_key_type, 0x10uLL);
      xpc_dictionary_set_BOOL(v5, (const char *)networkd_privileged_key_expensive, a2);
      xpc_dictionary_set_string(v5, (const char *)networkd_privileged_key_interface_name, a1);
      id v6 = networkd_privileged_copy_connection();
      if (v6)
      {
        id v7 = (id)networkd_privileged_copy_queue(void)::networkdPrivilegedQueue;
        v32[0] = MEMORY[0x1895F87A8];
        v32[1] = 3221225472LL;
        v32[2] = __networkd_privileged_set_expensive_block_invoke;
        void v32[3] = &unk_189BB5B98;
        id v33 = v5;
        networkd_privileged_send_async_inner((uint64_t)"networkd_privileged_set_expensive", v33, v7, v32);

LABEL_7:
LABEL_8:

        return;
      }

      __nwlog_obj();
      id v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)std::string buf = 136446210;
      os_log_type_t v37 = "networkd_privileged_set_expensive";
      id v17 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v34 = 0;
      if (__nwlog_fault(v17, &type, &v34))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v19 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)std::string buf = 136446210;
            os_log_type_t v37 = "networkd_privileged_set_expensive";
            _os_log_impl(&dword_181A5C000, v18, v19, "%{public}s Unable to connect to networkd privileged", buf, 0xCu);
          }
        }

        else if (v34)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v27 = type;
          BOOL v28 = os_log_type_enabled(v18, type);
          if (backtrace_string)
          {
            if (v28)
            {
              *(_DWORD *)std::string buf = 136446466;
              os_log_type_t v37 = "networkd_privileged_set_expensive";
              __int16 v38 = 2082;
              os_log_type_t v39 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v18,  v27,  "%{public}s Unable to connect to networkd privileged, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(backtrace_string);
            goto LABEL_62;
          }

          if (v28)
          {
            *(_DWORD *)std::string buf = 136446210;
            os_log_type_t v37 = "networkd_privileged_set_expensive";
            _os_log_impl( &dword_181A5C000,  v18,  v27,  "%{public}s Unable to connect to networkd privileged, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v31 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)std::string buf = 136446210;
            os_log_type_t v37 = "networkd_privileged_set_expensive";
            _os_log_impl( &dword_181A5C000,  v18,  v31,  "%{public}s Unable to connect to networkd privileged, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

void sub_181CF5280( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __networkd_privileged_set_expensive_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v85 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  xpc_object_t v4 = v3;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (id)gLogObj;
    *(_DWORD *)std::string buf = 136446210;
    os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v77 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (os_log_s *)(id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s received NULL response", buf, 0xCu);
      }

      goto LABEL_72;
    }

    if (!v77)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (os_log_s *)(id)gLogObj;
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
        _os_log_impl( &dword_181A5C000,  v12,  v30,  "%{public}s received NULL response, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_72;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v12 = (os_log_s *)(id)gLogObj;
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
        _os_log_impl(&dword_181A5C000, v12, v21, "%{public}s received NULL response, no backtrace", buf, 0xCu);
      }

      goto LABEL_72;
    }

    if (v22)
    {
      *(_DWORD *)std::string buf = 136446466;
      os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
      __int16 v81 = 2082;
      *(void *)os_log_type_t v82 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v12,  v21,  "%{public}s received NULL response, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_25;
  }

  Class Class = object_getClass(v3);
  if (Class == (Class)MEMORY[0x1895F9250])
  {
    xpc_dictionary_get_value(v4, (const char *)networkd_privileged_key_result);
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v15 = v14;
    if (!v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v28 = (id)gLogObj;
      *(_DWORD *)std::string buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
      id v17 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (os_log_s *)(id)gLogObj;
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
          _os_log_impl(&dword_181A5C000, v18, v29, "%{public}s received response without result code", buf, 0xCu);
        }

        goto LABEL_133;
      }

      if (!v77)
      {
        __nwlog_obj();
        os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v60 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
          _os_log_impl( &dword_181A5C000,  v18,  v60,  "%{public}s received response without result code, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_133;
      }

      __int16 v38 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v41 = type;
      BOOL v42 = os_log_type_enabled(v18, type);
      if (!v38)
      {
        if (v42)
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
          _os_log_impl( &dword_181A5C000,  v18,  v41,  "%{public}s received response without result code, no backtrace",  buf,  0xCu);
        }

        goto LABEL_133;
      }

      if (v42)
      {
        *(_DWORD *)std::string buf = 136446466;
        os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = v38;
        _os_log_impl( &dword_181A5C000,  v18,  v41,  "%{public}s received response without result code, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_79;
    }

    if (object_getClass(v14) != (Class)MEMORY[0x1895F9280])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v16 = (id)gLogObj;
      *(_DWORD *)std::string buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
      id v17 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (os_log_s *)(id)gLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_expensive_block_invoke";
          _os_log_impl(&dword_181A5C000, v18, v19, "%{public}s received invalid result type", buf, 0xCu);
        }

void sub_181CF6A60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void networkd_privileged_set_throughput_estimates(const char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
    id v7 = v6;
    if (v6)
    {
      xpc_dictionary_set_uint64(v6, (const char *)networkd_privileged_key_type, 0x13uLL);
      xpc_dictionary_set_uint64(v7, (const char *)networkd_privileged_key_upload, a2);
      xpc_dictionary_set_uint64(v7, (const char *)networkd_privileged_key_download, a3);
      xpc_dictionary_set_string(v7, (const char *)networkd_privileged_key_interface_name, a1);
      id v8 = networkd_privileged_copy_connection();
      if (v8)
      {
        id v9 = (id)networkd_privileged_copy_queue(void)::networkdPrivilegedQueue;
        v34[0] = MEMORY[0x1895F87A8];
        v34[1] = 3221225472LL;
        v34[2] = __networkd_privileged_set_throughput_estimates_block_invoke;
        v34[3] = &unk_189BB5BC0;
        char v36 = a2;
        char v37 = a3;
        id v35 = v7;
        networkd_privileged_send_async_inner((uint64_t)"networkd_privileged_set_throughput_estimates", v35, v9, v34);

LABEL_7:
LABEL_8:

        return;
      }

      __nwlog_obj();
      os_log_type_t v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)std::string buf = 136446210;
      os_log_type_t v41 = "networkd_privileged_set_throughput_estimates";
      os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v38 = 0;
      if (__nwlog_fault(v19, &type, &v38))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v21 = type;
          if (os_log_type_enabled(v20, type))
          {
            *(_DWORD *)std::string buf = 136446210;
            os_log_type_t v41 = "networkd_privileged_set_throughput_estimates";
            _os_log_impl(&dword_181A5C000, v20, v21, "%{public}s Unable to connect to networkd privileged", buf, 0xCu);
          }
        }

        else if (v38)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v29 = type;
          BOOL v30 = os_log_type_enabled(v20, type);
          if (backtrace_string)
          {
            if (v30)
            {
              *(_DWORD *)std::string buf = 136446466;
              os_log_type_t v41 = "networkd_privileged_set_throughput_estimates";
              __int16 v42 = 2082;
              os_log_type_t v43 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v20,  v29,  "%{public}s Unable to connect to networkd privileged, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(backtrace_string);
            goto LABEL_62;
          }

          if (v30)
          {
            *(_DWORD *)std::string buf = 136446210;
            os_log_type_t v41 = "networkd_privileged_set_throughput_estimates";
            _os_log_impl( &dword_181A5C000,  v20,  v29,  "%{public}s Unable to connect to networkd privileged, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v33 = type;
          if (os_log_type_enabled(v20, type))
          {
            *(_DWORD *)std::string buf = 136446210;
            os_log_type_t v41 = "networkd_privileged_set_throughput_estimates";
            _os_log_impl( &dword_181A5C000,  v20,  v33,  "%{public}s Unable to connect to networkd privileged, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

void sub_181CF7240( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __networkd_privileged_set_throughput_estimates_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v84 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  xpc_object_t v4 = v3;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (id)gLogObj;
    *(_DWORD *)std::string buf = 136446210;
    os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
    xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v77 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (os_log_s *)(id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s received NULL response", buf, 0xCu);
      }

      goto LABEL_72;
    }

    if (!v77)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (os_log_s *)(id)gLogObj;
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
        _os_log_impl( &dword_181A5C000,  v12,  v30,  "%{public}s received NULL response, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_72;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v12 = (os_log_s *)(id)gLogObj;
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
        _os_log_impl(&dword_181A5C000, v12, v21, "%{public}s received NULL response, no backtrace", buf, 0xCu);
      }

      goto LABEL_72;
    }

    if (v22)
    {
      *(_DWORD *)std::string buf = 136446466;
      os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
      __int16 v81 = 2082;
      *(void *)os_log_type_t v82 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v12,  v21,  "%{public}s received NULL response, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_25;
  }

  Class Class = object_getClass(v3);
  if (Class == (Class)MEMORY[0x1895F9250])
  {
    xpc_dictionary_get_value(v4, (const char *)networkd_privileged_key_result);
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v15 = v14;
    if (!v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v28 = (id)gLogObj;
      *(_DWORD *)std::string buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
      os_log_type_t v17 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (os_log_s *)(id)gLogObj;
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
          _os_log_impl(&dword_181A5C000, v18, v29, "%{public}s received response without result code", buf, 0xCu);
        }

        goto LABEL_131;
      }

      if (!v77)
      {
        __nwlog_obj();
        os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v60 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
          _os_log_impl( &dword_181A5C000,  v18,  v60,  "%{public}s received response without result code, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_131;
      }

      char v38 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v41 = type;
      BOOL v42 = os_log_type_enabled(v18, type);
      if (!v38)
      {
        if (v42)
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
          _os_log_impl( &dword_181A5C000,  v18,  v41,  "%{public}s received response without result code, no backtrace",  buf,  0xCu);
        }

        goto LABEL_131;
      }

      if (v42)
      {
        *(_DWORD *)std::string buf = 136446466;
        os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = v38;
        _os_log_impl( &dword_181A5C000,  v18,  v41,  "%{public}s received response without result code, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_79;
    }

    if (object_getClass(v14) != (Class)MEMORY[0x1895F9280])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v16 = (id)gLogObj;
      *(_DWORD *)std::string buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
      os_log_type_t v17 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (os_log_s *)(id)gLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
          _os_log_impl(&dword_181A5C000, v18, v19, "%{public}s received invalid result type", buf, 0xCu);
        }

void sub_181CF8A08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void networkd_privileged_set_radio_type(const char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
    id v7 = v6;
    if (v6)
    {
      xpc_dictionary_set_uint64(v6, (const char *)networkd_privileged_key_type, 0x14uLL);
      xpc_dictionary_set_uint64(v7, (const char *)networkd_privileged_key_radio_type, a2);
      xpc_dictionary_set_uint64(v7, (const char *)networkd_privileged_key_radio_channel, a3);
      xpc_dictionary_set_string(v7, (const char *)networkd_privileged_key_interface_name, a1);
      id v8 = networkd_privileged_copy_connection();
      if (v8)
      {
        id v9 = (id)networkd_privileged_copy_queue(void)::networkdPrivilegedQueue;
        v34[0] = MEMORY[0x1895F87A8];
        v34[1] = 3221225472LL;
        v34[2] = __networkd_privileged_set_radio_type_block_invoke;
        v34[3] = &unk_189BB5BC0;
        char v36 = a2;
        char v37 = a3;
        id v35 = v7;
        networkd_privileged_send_async_inner((uint64_t)"networkd_privileged_set_radio_type", v35, v9, v34);

LABEL_7:
LABEL_8:

        return;
      }

      __nwlog_obj();
      os_log_type_t v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)std::string buf = 136446210;
      os_log_type_t v41 = "networkd_privileged_set_radio_type";
      os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v38 = 0;
      if (__nwlog_fault(v19, &type, &v38))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v21 = type;
          if (os_log_type_enabled(v20, type))
          {
            *(_DWORD *)std::string buf = 136446210;
            os_log_type_t v41 = "networkd_privileged_set_radio_type";
            _os_log_impl(&dword_181A5C000, v20, v21, "%{public}s Unable to connect to networkd privileged", buf, 0xCu);
          }
        }

        else if (v38)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v29 = type;
          BOOL v30 = os_log_type_enabled(v20, type);
          if (backtrace_string)
          {
            if (v30)
            {
              *(_DWORD *)std::string buf = 136446466;
              os_log_type_t v41 = "networkd_privileged_set_radio_type";
              __int16 v42 = 2082;
              os_log_type_t v43 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v20,  v29,  "%{public}s Unable to connect to networkd privileged, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(backtrace_string);
            goto LABEL_62;
          }

          if (v30)
          {
            *(_DWORD *)std::string buf = 136446210;
            os_log_type_t v41 = "networkd_privileged_set_radio_type";
            _os_log_impl( &dword_181A5C000,  v20,  v29,  "%{public}s Unable to connect to networkd privileged, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v33 = type;
          if (os_log_type_enabled(v20, type))
          {
            *(_DWORD *)std::string buf = 136446210;
            os_log_type_t v41 = "networkd_privileged_set_radio_type";
            _os_log_impl( &dword_181A5C000,  v20,  v33,  "%{public}s Unable to connect to networkd privileged, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

void sub_181CF91E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __networkd_privileged_set_radio_type_block_invoke(uint64_t a1, void *a2)
{
  *(void *)&v83[11] = *MEMORY[0x1895F89C0];
  id v3 = a2;
  xpc_object_t v4 = v3;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (id)gLogObj;
    *(_DWORD *)std::string buf = 136446210;
    os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
    xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v77 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (os_log_s *)(id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s received NULL response", buf, 0xCu);
      }

      goto LABEL_72;
    }

    if (!v77)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (os_log_s *)(id)gLogObj;
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
        _os_log_impl( &dword_181A5C000,  v12,  v30,  "%{public}s received NULL response, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_72;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v12 = (os_log_s *)(id)gLogObj;
    os_log_type_t v21 = type;
    BOOL v22 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
        _os_log_impl(&dword_181A5C000, v12, v21, "%{public}s received NULL response, no backtrace", buf, 0xCu);
      }

      goto LABEL_72;
    }

    if (v22)
    {
      *(_DWORD *)std::string buf = 136446466;
      os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
      __int16 v81 = 2082;
      *(void *)os_log_type_t v82 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v12,  v21,  "%{public}s received NULL response, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_25;
  }

  Class Class = object_getClass(v3);
  if (Class == (Class)MEMORY[0x1895F9250])
  {
    xpc_dictionary_get_value(v4, (const char *)networkd_privileged_key_result);
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v15 = v14;
    if (!v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v28 = (id)gLogObj;
      *(_DWORD *)std::string buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
      os_log_type_t v17 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (os_log_s *)(id)gLogObj;
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
          _os_log_impl(&dword_181A5C000, v18, v29, "%{public}s received response without result code", buf, 0xCu);
        }

        goto LABEL_131;
      }

      if (!v77)
      {
        __nwlog_obj();
        os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v60 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
          _os_log_impl( &dword_181A5C000,  v18,  v60,  "%{public}s received response without result code, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_131;
      }

      char v38 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v41 = type;
      BOOL v42 = os_log_type_enabled(v18, type);
      if (!v38)
      {
        if (v42)
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
          _os_log_impl( &dword_181A5C000,  v18,  v41,  "%{public}s received response without result code, no backtrace",  buf,  0xCu);
        }

        goto LABEL_131;
      }

      if (v42)
      {
        *(_DWORD *)std::string buf = 136446466;
        os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
        __int16 v81 = 2082;
        *(void *)os_log_type_t v82 = v38;
        _os_log_impl( &dword_181A5C000,  v18,  v41,  "%{public}s received response without result code, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_79;
    }

    if (object_getClass(v14) != (Class)MEMORY[0x1895F9280])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v16 = (id)gLogObj;
      *(_DWORD *)std::string buf = 136446210;
      os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
      os_log_type_t v17 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v77 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (os_log_s *)(id)gLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v80 = "networkd_privileged_set_radio_type_block_invoke";
          _os_log_impl(&dword_181A5C000, v18, v19, "%{public}s received invalid result type", buf, 0xCu);
        }

void sub_181CFA9C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_protocol_http_redirect_create(uint64_t a1, uint64_t a2, dispatch_object_s *a3, void *a4)
{
  uint64_t v74 = *MEMORY[0x1895F89C0];
  xpc_object_t v6 = (dispatch_object_s **)calloc(1uLL, 0x2B8uLL);
  if (!v6)
  {
    uint64_t v34 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
    *(_DWORD *)std::string buf = 136446722;
    *(void *)&uint8_t buf[4] = "strict_calloc";
    *(_WORD *)&_BYTE buf[12] = 2048;
    *(void *)&buf[14] = 1LL;
    *(_WORD *)&buf[22] = 2048;
    uint64_t v71 = 696LL;
    id v35 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v35);
    if (result)
    {
      __break(1u);
      return result;
    }

    free(v35);
  }

  bzero(v6, 0x2B8uLL);
  if (gLogDatapath)
  {
    char v36 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_redirect_create";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = (char *)v6 + 114;
      *(_WORD *)&buf[22] = 2080;
      uint64_t v71 = (uint64_t)" ";
      _os_log_impl(&dword_181A5C000, v36, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
    }
  }

  if (nw_protocol_http_redirect_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_redirect_identifier::onceToken, &__block_literal_global_926);
  }
  v6[2] = (dispatch_object_s *)nw_protocol_http_redirect_identifier::protocol_identifier;
  v6[3] = (dispatch_object_s *)&nw_protocol_http_redirect_get_callbacks(void)::protocol_callbacks;
  v6[5] = (dispatch_object_s *)v6;
  if (a3) {
    a3 = (dispatch_object_s *)os_retain(a3);
  }
  char v7 = *((_BYTE *)v6 + 648);
  if ((v7 & 1) != 0)
  {
    id v8 = v6[80];
    if (v8)
    {
      os_release(v8);
      char v7 = *((_BYTE *)v6 + 648);
    }
  }

  v6[80] = a3;
  *((_BYTE *)v6 + 648) = v7 | 1;
  if (a4)
  {
    id v9 = (dispatch_object_s *)os_retain(a4);
    char v10 = *((_BYTE *)v6 + 664);
    if ((v10 & 1) == 0) {
      goto LABEL_18;
    }
  }

  else
  {
    id v9 = 0LL;
    char v10 = *((_BYTE *)v6 + 664);
    if ((v10 & 1) == 0) {
      goto LABEL_18;
    }
  }

  id v11 = v6[82];
  if (v11)
  {
    os_release(v11);
    char v10 = *((_BYTE *)v6 + 664);
  }

void sub_181CFB878( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void nw_protocol_http_redirect_create::$_0::__invoke( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v128 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)BOOL v122 = 136446210;
    *(void *)&v122[4] = "operator()";
    os_log_type_t v59 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v99) = 0;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v99)
      {
        os_log_type_t v60 = (os_log_s *)__nwlog_obj();
        os_log_type_t v61 = type[0];
        if (!os_log_type_enabled(v60, type[0])) {
          goto LABEL_180;
        }
        *(_DWORD *)BOOL v122 = 136446210;
        *(void *)&v122[4] = "operator()";
        os_log_type_t v62 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_179;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v60 = (os_log_s *)__nwlog_obj();
      os_log_type_t v61 = type[0];
      BOOL v68 = os_log_type_enabled(v60, type[0]);
      if (!backtrace_string)
      {
        if (!v68) {
          goto LABEL_180;
        }
        *(_DWORD *)BOOL v122 = 136446210;
        *(void *)&v122[4] = "operator()";
        os_log_type_t v62 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_179;
      }

      if (v68)
      {
        *(_DWORD *)BOOL v122 = 136446466;
        *(void *)&v122[4] = "operator()";
        *(_WORD *)&v122[12] = 2082;
        *(void *)&v122[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v60,  v61,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  v122,  0x16u);
      }

      free(backtrace_string);
LABEL_180:
      if (v59) {
        goto LABEL_181;
      }
      return;
    }

    os_log_type_t v60 = (os_log_s *)__nwlog_obj();
    os_log_type_t v61 = type[0];
    if (!os_log_type_enabled(v60, type[0])) {
      goto LABEL_180;
    }
    *(_DWORD *)BOOL v122 = 136446210;
    *(void *)&v122[4] = "operator()";
    os_log_type_t v62 = "%{public}s called with null protocol";
    goto LABEL_179;
  }

  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)BOOL v122 = 136446210;
    *(void *)&v122[4] = "operator()";
    os_log_type_t v59 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v99) = 0;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v99)
      {
        os_log_type_t v60 = (os_log_s *)__nwlog_obj();
        os_log_type_t v61 = type[0];
        if (!os_log_type_enabled(v60, type[0])) {
          goto LABEL_180;
        }
        *(_DWORD *)BOOL v122 = 136446210;
        *(void *)&v122[4] = "operator()";
        os_log_type_t v62 = "%{public}s called with null http_redirect, backtrace limit exceeded";
        goto LABEL_179;
      }

      char v69 = (char *)__nw_create_backtrace_string();
      os_log_type_t v60 = (os_log_s *)__nwlog_obj();
      os_log_type_t v61 = type[0];
      BOOL v70 = os_log_type_enabled(v60, type[0]);
      if (!v69)
      {
        if (!v70) {
          goto LABEL_180;
        }
        *(_DWORD *)BOOL v122 = 136446210;
        *(void *)&v122[4] = "operator()";
        os_log_type_t v62 = "%{public}s called with null http_redirect, no backtrace";
        goto LABEL_179;
      }

      if (!v70) {
        goto LABEL_134;
      }
      *(_DWORD *)BOOL v122 = 136446466;
      *(void *)&v122[4] = "operator()";
      *(_WORD *)&v122[12] = 2082;
      *(void *)&v122[14] = v69;
      uint64_t v71 = "%{public}s called with null http_redirect, dumping backtrace:%{public}s";
      goto LABEL_133;
    }

    os_log_type_t v60 = (os_log_s *)__nwlog_obj();
    os_log_type_t v61 = type[0];
    if (!os_log_type_enabled(v60, type[0])) {
      goto LABEL_180;
    }
    *(_DWORD *)BOOL v122 = 136446210;
    *(void *)&v122[4] = "operator()";
    os_log_type_t v62 = "%{public}s called with null http_redirect";
LABEL_179:
    _os_log_impl(&dword_181A5C000, v60, v61, v62, v122, 0xCu);
    goto LABEL_180;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)BOOL v122 = 136446210;
    *(void *)&v122[4] = "operator()";
    os_log_type_t v59 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v99) = 0;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v99)
      {
        os_log_type_t v60 = (os_log_s *)__nwlog_obj();
        os_log_type_t v61 = type[0];
        if (!os_log_type_enabled(v60, type[0])) {
          goto LABEL_180;
        }
        *(_DWORD *)BOOL v122 = 136446210;
        *(void *)&v122[4] = "operator()";
        os_log_type_t v62 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_179;
      }

      char v69 = (char *)__nw_create_backtrace_string();
      os_log_type_t v60 = (os_log_s *)__nwlog_obj();
      os_log_type_t v61 = type[0];
      BOOL v72 = os_log_type_enabled(v60, type[0]);
      if (!v69)
      {
        if (!v72) {
          goto LABEL_180;
        }
        *(_DWORD *)BOOL v122 = 136446210;
        *(void *)&v122[4] = "operator()";
        os_log_type_t v62 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_179;
      }

      if (!v72) {
        goto LABEL_134;
      }
      *(_DWORD *)BOOL v122 = 136446466;
      *(void *)&v122[4] = "operator()";
      *(_WORD *)&v122[12] = 2082;
      *(void *)&v122[14] = v69;
      uint64_t v71 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_133;
    }

    os_log_type_t v60 = (os_log_s *)__nwlog_obj();
    os_log_type_t v61 = type[0];
    if (!os_log_type_enabled(v60, type[0])) {
      goto LABEL_180;
    }
    *(_DWORD *)BOOL v122 = 136446210;
    *(void *)&v122[4] = "operator()";
    os_log_type_t v62 = "%{public}s called with null other_protocol";
    goto LABEL_179;
  }

  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)BOOL v122 = 136446210;
    *(void *)&v122[4] = "operator()";
    os_log_type_t v59 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v99) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v60 = (os_log_s *)__nwlog_obj();
      os_log_type_t v61 = type[0];
      if (!os_log_type_enabled(v60, type[0])) {
        goto LABEL_180;
      }
      *(_DWORD *)BOOL v122 = 136446210;
      *(void *)&v122[4] = "operator()";
      os_log_type_t v62 = "%{public}s called with null metadata";
      goto LABEL_179;
    }

    if (!(_BYTE)v99)
    {
      os_log_type_t v60 = (os_log_s *)__nwlog_obj();
      os_log_type_t v61 = type[0];
      if (!os_log_type_enabled(v60, type[0])) {
        goto LABEL_180;
      }
      *(_DWORD *)BOOL v122 = 136446210;
      *(void *)&v122[4] = "operator()";
      os_log_type_t v62 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_179;
    }

    char v69 = (char *)__nw_create_backtrace_string();
    os_log_type_t v60 = (os_log_s *)__nwlog_obj();
    os_log_type_t v61 = type[0];
    BOOL v73 = os_log_type_enabled(v60, type[0]);
    if (!v69)
    {
      if (!v73) {
        goto LABEL_180;
      }
      *(_DWORD *)BOOL v122 = 136446210;
      *(void *)&v122[4] = "operator()";
      os_log_type_t v62 = "%{public}s called with null metadata, no backtrace";
      goto LABEL_179;
    }

    if (!v73) {
      goto LABEL_134;
    }
    *(_DWORD *)BOOL v122 = 136446466;
    *(void *)&v122[4] = "operator()";
    *(_WORD *)&v122[12] = 2082;
    *(void *)&v122[14] = v69;
    uint64_t v71 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
LABEL_133:
    _os_log_impl(&dword_181A5C000, v60, v61, v71, v122, 0x16u);
    goto LABEL_134;
  }

  if (a5)
  {
    id v8 = nw_http_metadata_copy_response(a3);
    if (v8)
    {
      id v9 = v8;
      char v10 = *(_BYTE *)(v5 + 584);
      if ((v10 & 1) != 0)
      {
        id v11 = *(void **)(v5 + 576);
        if (v11)
        {
          os_release(v11);
          char v10 = *(_BYTE *)(v5 + 584);
        }
      }

      *(void *)(v5 + 576) = 0LL;
      *(_BYTE *)(v5 + 584) = v10 | 1;
      id v12 = v9;
      int status_code = _nw_http_response_get_status_code();

      unsigned int v14 = status_code - 301;
      if ((*(_BYTE *)(v5 + 692) & 0x10) == 0)
      {
        if (*(_BYTE *)(v5 + 198) & 1 | (gLogDatapath == 0)) {
          goto LABEL_14;
        }
        char v77 = (os_log_s *)__nwlog_obj();
        if (!os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_14;
        }
        *(_DWORD *)BOOL v122 = 136446722;
        *(void *)&v122[4] = "nw_http_redirect_process";
        *(_WORD *)&v122[12] = 2082;
        *(void *)&v122[14] = v5 + 114;
        *(_WORD *)&v122[22] = 2080;
        BOOL v123 = " ";
        char v29 = "%{public}s %{public}s%sNot redirecting because no longer handling inbound reply";
        os_log_type_t v30 = v77;
        os_log_type_t v31 = OS_LOG_TYPE_DEBUG;
LABEL_39:
        _os_log_impl(&dword_181A5C000, v30, v31, v29, v122, 0x20u);
LABEL_14:
        os_release(v12);
LABEL_15:
        (*(void (**)(uint64_t, uint64_t, void *))(a5 + 16))(a5, 1LL, a3);
        return;
      }

      if (!(*(_BYTE *)(v5 + 198) & 1 | (gLogDatapath == 0)))
      {
        os_log_type_t v78 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
        {
          int v79 = *(_DWORD *)(v5 + 688);
          *(_DWORD *)BOOL v122 = 136446978;
          *(void *)&v122[4] = "nw_http_redirect_process";
          *(_WORD *)&v122[12] = 2082;
          *(void *)&v122[14] = v5 + 114;
          *(_WORD *)&v122[22] = 2080;
          BOOL v123 = " ";
          LOWORD(v124) = 1024;
          *(_DWORD *)((char *)&v124 + 2) = v79;
          _os_log_impl( &dword_181A5C000,  v78,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%scalled with redirect_limit %u",  v122,  0x26u);
        }
      }

      if (!*(_DWORD *)(v5 + 688))
      {
        if ((*(_BYTE *)(v5 + 198) & 1) != 0) {
          goto LABEL_14;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v28 = gLogObj;
        if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
          goto LABEL_14;
        }
        *(_DWORD *)BOOL v122 = 136446722;
        *(void *)&v122[4] = "nw_http_redirect_process";
        *(_WORD *)&v122[12] = 2082;
        *(void *)&v122[14] = v5 + 114;
        *(_WORD *)&v122[22] = 2080;
        BOOL v123 = " ";
        char v29 = "%{public}s %{public}s%sNot redirecting because we reached the limit";
        os_log_type_t v30 = (os_log_s *)v28;
        os_log_type_t v31 = OS_LOG_TYPE_INFO;
        goto LABEL_39;
      }

      uint64_t v99 = 0LL;
      os_log_type_t v100 = &v99;
      uint64_t v101 = 0x3802000000LL;
      char v102 = __Block_byref_object_copy__937;
      os_log_type_t v103 = __Block_byref_object_dispose__938;
      id v15 = nw_http_metadata_copy_response(a3);
      *(void *)os_log_type_t type = 0LL;
      std::string::value_type v111 = type;
      uint64_t v112 = 0x2000000000LL;
      __int16 v113 = 0LL;
      uint64_t v16 = MEMORY[0x1895F87A8];
      *(void *)BOOL v122 = MEMORY[0x1895F87A8];
      *(void *)&v122[8] = 0x40000000LL;
      *(void *)&v122[16] = ___ZL30nw_http_redirect_copy_endpointP25nw_protocol_http_redirectP20nw_protocol_metadata_block_invoke;
      BOOL v123 = (const char *)&unk_189BB5DB0;
      int v124 = type;
      BOOL v125 = (os_log_type_t *)v5;
      nw_http_fields_access_value_by_name(v15, (unint64_t)"Location", v122);
      os_log_type_t v17 = (void *)*((void *)v111 + 3);
      if (v17)
      {
        url_scheme = (const char *)nw_endpoint_get_url_scheme(v17);
        if (!strcasecmp(url_scheme, "https") || !strcasecmp(url_scheme, "http"))
        {
          hostname = nw_endpoint_get_hostname(*((nw_endpoint_t *)v111 + 3));
          if (!hostname || !*hostname)
          {
            if ((*(_BYTE *)(v5 + 198) & 1) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v20 = (os_log_s *)gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)std::string buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_http_redirect_copy_endpoint";
                *(_WORD *)&_BYTE buf[12] = 2082;
                *(void *)&buf[14] = v5 + 114;
                *(_WORD *)&buf[22] = 2080;
                v118 = (uint64_t (*)(uint64_t, uint64_t))" ";
                _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sinvalid http URL without hostname",  buf,  0x20u);
              }
            }

            os_log_type_t v21 = (void *)*((void *)v111 + 3);
            if (v21)
            {
              os_release(v21);
              *((void *)v111 + 3) = 0LL;
            }
          }
        }
      }

      char v22 = (void *)*((void *)v111 + 3);
      _Block_object_dispose(type, 8);
      if (v15) {
        os_release(v15);
      }
      __int16 v104 = v22;
      v105 |= 1u;
      if (!v100[5])
      {
        if ((*(_BYTE *)(v5 + 198) & 1) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v32 = (os_log_s *)gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)BOOL v122 = 136446722;
            *(void *)&v122[4] = "nw_http_redirect_process";
            *(_WORD *)&v122[12] = 2082;
            *(void *)&v122[14] = v5 + 114;
            *(_WORD *)&v122[22] = 2080;
            BOOL v123 = " ";
            _os_log_impl( &dword_181A5C000,  v32,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sUnable to create endpoint from redirect headers",  v122,  0x20u);
            BOOL v33 = 0;
            goto LABEL_219;
          }
        }

LABEL_216:
      if (v80) {
        free(v80);
      }
      goto LABEL_218;
    }

    __nwlog_obj();
    *(_DWORD *)BOOL v122 = 136446210;
    *(void *)&v122[4] = "nw_http_redirect_process";
    os_log_type_t v63 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v99) = 0;
    if (__nwlog_fault(v63, type, &v99))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v64 = (os_log_s *)__nwlog_obj();
        os_log_type_t v65 = type[0];
        if (!os_log_type_enabled(v64, type[0])) {
          goto LABEL_185;
        }
        *(_DWORD *)BOOL v122 = 136446210;
        *(void *)&v122[4] = "nw_http_redirect_process";
        os_log_type_t v66 = "%{public}s called with null response";
        goto LABEL_184;
      }

      if (!(_BYTE)v99)
      {
        os_log_type_t v64 = (os_log_s *)__nwlog_obj();
        os_log_type_t v65 = type[0];
        if (!os_log_type_enabled(v64, type[0])) {
          goto LABEL_185;
        }
        *(_DWORD *)BOOL v122 = 136446210;
        *(void *)&v122[4] = "nw_http_redirect_process";
        os_log_type_t v66 = "%{public}s called with null response, backtrace limit exceeded";
        goto LABEL_184;
      }

      os_log_type_t v75 = (char *)__nw_create_backtrace_string();
      os_log_type_t v64 = (os_log_s *)__nwlog_obj();
      os_log_type_t v65 = type[0];
      BOOL v76 = os_log_type_enabled(v64, type[0]);
      if (v75)
      {
        if (v76)
        {
          *(_DWORD *)BOOL v122 = 136446466;
          *(void *)&v122[4] = "nw_http_redirect_process";
          *(_WORD *)&v122[12] = 2082;
          *(void *)&v122[14] = v75;
          _os_log_impl( &dword_181A5C000,  v64,  v65,  "%{public}s called with null response, dumping backtrace:%{public}s",  v122,  0x16u);
        }

        free(v75);
        goto LABEL_185;
      }

      if (v76)
      {
        *(_DWORD *)BOOL v122 = 136446210;
        *(void *)&v122[4] = "nw_http_redirect_process";
        os_log_type_t v66 = "%{public}s called with null response, no backtrace";
LABEL_184:
        _os_log_impl(&dword_181A5C000, v64, v65, v66, v122, 0xCu);
      }
    }

          free((void *)v75);
LABEL_217:
          BOOL v74 = a1;
          goto LABEL_164;
        }
      }

      __nwlog_obj();
      std::string v148 = (const char *)a1[2];
      LODWORD(buf[0]) = 136446722;
      *(void *)((char *)buf + 4) = "__nw_protocol_error";
      if (!v148) {
        std::string v148 = "invalid";
      }
      WORD2(buf[1]) = 2082;
      *(void *)((char *)&buf[1] + 6) = v148;
      HIWORD(buf[2]) = 2048;
      v261 = (unint64_t)a1;
      std::string v149 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v258[0]) = 0;
      if (__nwlog_fault(v149, type, v258))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          char v150 = (os_log_s *)__nwlog_obj();
          os_log_type_t v151 = type[0];
          if (!os_log_type_enabled(v150, type[0])) {
            goto LABEL_470;
          }
          v152 = (const char *)a1[2];
          if (!v152) {
            v152 = "invalid";
          }
          LODWORD(buf[0]) = 136446722;
          *(void *)((char *)buf + 4) = "__nw_protocol_error";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = v152;
          HIWORD(buf[2]) = 2048;
          v261 = (unint64_t)a1;
          v153 = "%{public}s protocol %{public}s (%p) has invalid error callback";
          goto LABEL_469;
        }

        if (!LOBYTE(v258[0]))
        {
          char v150 = (os_log_s *)__nwlog_obj();
          os_log_type_t v151 = type[0];
          if (!os_log_type_enabled(v150, type[0])) {
            goto LABEL_470;
          }
          v197 = (const char *)a1[2];
          if (!v197) {
            v197 = "invalid";
          }
          LODWORD(buf[0]) = 136446722;
          *(void *)((char *)buf + 4) = "__nw_protocol_error";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = v197;
          HIWORD(buf[2]) = 2048;
          v261 = (unint64_t)a1;
          v153 = "%{public}s protocol %{public}s (%p) has invalid error callback, backtrace limit exceeded";
          goto LABEL_469;
        }

        v172 = (char *)__nw_create_backtrace_string();
        char v150 = (os_log_s *)__nwlog_obj();
        os_log_type_t v151 = type[0];
        v173 = os_log_type_enabled(v150, type[0]);
        if (v172)
        {
          if (v173)
          {
            v174 = (const char *)a1[2];
            if (!v174) {
              v174 = "invalid";
            }
            LODWORD(buf[0]) = 136446978;
            *(void *)((char *)buf + 4) = "__nw_protocol_error";
            WORD2(buf[1]) = 2082;
            *(void *)((char *)&buf[1] + 6) = v174;
            HIWORD(buf[2]) = 2048;
            v261 = (unint64_t)a1;
            LOWORD(v262[0]) = 2082;
            *(void *)((char *)v262 + 2) = v172;
            _os_log_impl( &dword_181A5C000,  v150,  v151,  "%{public}s protocol %{public}s (%p) has invalid error callback, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x2Au);
          }

          free(v172);
          goto LABEL_470;
        }

        if (v173)
        {
          v199 = (const char *)a1[2];
          if (!v199) {
            v199 = "invalid";
          }
          LODWORD(buf[0]) = 136446722;
          *(void *)((char *)buf + 4) = "__nw_protocol_error";
          WORD2(buf[1]) = 2082;
          *(void *)((char *)&buf[1] + 6) = v199;
          HIWORD(buf[2]) = 2048;
          v261 = (unint64_t)a1;
          v153 = "%{public}s protocol %{public}s (%p) has invalid error callback, no backtrace";
LABEL_469:
          _os_log_impl(&dword_181A5C000, v150, v151, v153, (uint8_t *)buf, 0x20u);
        }
      }

    if (!v81) {
      goto LABEL_15;
    }
    os_log_type_t v51 = (nw_protocol *)v81;
    goto LABEL_94;
  }

  __nwlog_obj();
  *(_DWORD *)std::string buf = 136446210;
  *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
  uint64_t default_input_handler = _os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  v165 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault((const char *)default_input_handler, type, &v165))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v78 = (os_log_s *)__nwlog_obj();
      int v79 = type[0];
      if (!os_log_type_enabled(v78, type[0])) {
        goto LABEL_234;
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
      os_log_type_t v80 = "%{public}s called with null protocol";
    }

    else if (v165)
    {
      BOOL v95 = (char *)__nw_create_backtrace_string();
      os_log_type_t v78 = (os_log_s *)__nwlog_obj();
      int v79 = type[0];
      uint64_t v96 = os_log_type_enabled(v78, type[0]);
      if (v95)
      {
        if (v96)
        {
          *(_DWORD *)std::string buf = 136446466;
          *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v95;
          _os_log_impl( &dword_181A5C000,  v78,  v79,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v95);
        if (default_input_handler) {
          goto LABEL_85;
        }
        goto LABEL_17;
      }

      if (!v96) {
        goto LABEL_234;
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
      os_log_type_t v80 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      os_log_type_t v78 = (os_log_s *)__nwlog_obj();
      int v79 = type[0];
      if (!os_log_type_enabled(v78, type[0])) {
        goto LABEL_234;
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
      os_log_type_t v80 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v78, v79, v80, buf, 0xCu);
  }

            if (v93) {
              free(v93);
            }
            goto LABEL_125;
          }

          __nwlog_obj();
          uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)objects = 136446210;
          *(void *)&objects[4] = "nw_parameters_set_main_document_cfurl";
          LODWORD(v11_Block_object_dispose(va, 8) = 12;
          uint64_t v115 = objects;
          BOOL v125 = (const char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          uint64_t v128 = 0;
          os_log_type_t v86 = (char *)v125;
          if (!__nwlog_fault(v125, &type, &v128))
          {
LABEL_206:
            if (v86) {
              free(v86);
            }
            goto LABEL_99;
          }

          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            os_log_type_t v87 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            __int128 v120 = type;
            if (os_log_type_enabled(v87, type))
            {
              *(_DWORD *)objects = 136446210;
              *(void *)&objects[4] = "nw_parameters_set_main_document_cfurl";
              _os_log_impl(&dword_181A5C000, v87, v120, "%{public}s called with null parameters", objects, 0xCu);
            }
          }

          else
          {
            if (v128)
            {
              char v102 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              char v121 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              HIDWORD(v11_Block_object_dispose(va, 8) = type;
              os_log_type_t v103 = os_log_type_enabled(v121, type);
              if (v102)
              {
                if (v103)
                {
                  *(_DWORD *)objects = 136446466;
                  *(void *)&objects[4] = "nw_parameters_set_main_document_cfurl";
                  *(_WORD *)&objects[12] = 2082;
                  *(void *)&objects[14] = v102;
                  _os_log_impl( &dword_181A5C000,  v121,  BYTE4(v118),  "%{public}s called with null parameters, dumping backtrace:%{public}s",  objects,  0x16u);
                }

                free(v102);
              }

              else
              {
                if (v103)
                {
                  *(_DWORD *)objects = 136446210;
                  *(void *)&objects[4] = "nw_parameters_set_main_document_cfurl";
                  _os_log_impl( &dword_181A5C000,  v121,  BYTE4(v118),  "%{public}s called with null parameters, no backtrace",  objects,  0xCu);
                }
              }

              goto LABEL_205;
            }

            __nwlog_obj();
            os_log_type_t v87 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            BOOL v122 = type;
            if (os_log_type_enabled(v87, type))
            {
              *(_DWORD *)objects = 136446210;
              *(void *)&objects[4] = "nw_parameters_set_main_document_cfurl";
              _os_log_impl( &dword_181A5C000,  v87,  v122,  "%{public}s called with null parameters, backtrace limit exceeded",  objects,  0xCu);
            }
          }

LABEL_205:
          os_log_type_t v86 = (char *)v125;
          goto LABEL_206;
        }

        int v49 = v4;
        char v50 = v49;
        if (v49)
        {
          *((void *)v49 + 12) |= 0x80000000000uLL;
LABEL_73:

          goto LABEL_74;
        }

        __nwlog_obj();
        char v88 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)objects = 136446210;
        *(void *)&objects[4] = "nw_parameters_set_prevents_system_http_proxy_authentication";
        LODWORD(v11_Block_object_dispose(va, 8) = 12;
        uint64_t v115 = objects;
        BOOL v89 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        uint64_t v128 = 0;
        if (__nwlog_fault(v89, &type, &v128))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            os_log_type_t v90 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            BOOL v91 = type;
            if (os_log_type_enabled(v90, type))
            {
              *(_DWORD *)objects = 136446210;
              *(void *)&objects[4] = "nw_parameters_set_prevents_system_http_proxy_authentication";
              _os_log_impl(&dword_181A5C000, v90, v91, "%{public}s called with null parameters", objects, 0xCu);
            }
          }

          else if (v128)
          {
            __int16 v104 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            os_log_type_t v90 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            char v105 = type;
            __int16 v106 = os_log_type_enabled(v90, type);
            if (v104)
            {
              if (v106)
              {
                *(_DWORD *)objects = 136446466;
                *(void *)&objects[4] = "nw_parameters_set_prevents_system_http_proxy_authentication";
                *(_WORD *)&objects[12] = 2082;
                *(void *)&objects[14] = v104;
                _os_log_impl( &dword_181A5C000,  v90,  v105,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  objects,  0x16u);
              }

              free(v104);
              goto LABEL_211;
            }

            if (v106)
            {
              *(_DWORD *)objects = 136446210;
              *(void *)&objects[4] = "nw_parameters_set_prevents_system_http_proxy_authentication";
              _os_log_impl( &dword_181A5C000,  v90,  v105,  "%{public}s called with null parameters, no backtrace",  objects,  0xCu);
            }
          }

          else
          {
            __nwlog_obj();
            os_log_type_t v90 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            std::string::value_type v111 = type;
            if (os_log_type_enabled(v90, type))
            {
              *(_DWORD *)objects = 136446210;
              *(void *)&objects[4] = "nw_parameters_set_prevents_system_http_proxy_authentication";
              _os_log_impl( &dword_181A5C000,  v90,  v111,  "%{public}s called with null parameters, backtrace limit exceeded",  objects,  0xCu);
            }
          }
        }

    nw_endpoint_handler_report(v471, v9, a4, v472);
    goto LABEL_217;
  }

  objc_storeStrong(v43, a1);
  os_log_type_t v151 = nw_endpoint_handler_copy_endpoint(v471);
  if (!v151 || !v461) {
    goto LABEL_189;
  }
  v152 = v461;
  v153 = (void *)v152[18];
  if (!v153)
  {
LABEL_188:

    goto LABEL_189;
  }

  v154 = xpc_array_get_count(v153) == 0;

  if (v154)
  {
LABEL_189:
    nw_endpoint_handler_report(v471, v474, a4, v472);
    v167 = v471;
    v167->state = 3;

    v169 = *((void *)loga + 11);
    if (v169)
    {
      nw_queue_cancel_source(v169, v168);
      *((void *)loga + 11) = 0LL;
    }

    nw_endpoint_handler_report(v167, 0LL, a4, 0LL);
    v170 = (unsigned __int8 *)*((void *)loga + 1);
    v475[0] = MEMORY[0x1895F87A8];
    v475[1] = 3221225472LL;
    v475[2] = ___ZL32nw_endpoint_proxy_receive_reportP30NWConcrete_nw_endpoint_handler26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_error8NSObjectPU23objcproto12OS_nw_objectS5__block_invoke;
    v475[3] = &unk_189BC5030;
    v476 = loga;
    v477 = v474;
    nw_array_apply(v170, (uint64_t)v475);

LABEL_192:
LABEL_217:

    goto LABEL_218;
  }

  uint64_t v155 = nw_endpoint_copy_cname_array(v151);
  v152 = v155;
  if (!v155 || v155[3] == v155[2]) {
    goto LABEL_188;
  }
  char v156 = nw_endpoint_handler_copy_association(v471, 0);
  if (!v156)
  {
LABEL_187:

    goto LABEL_188;
  }

  uint64_t v157 = nw_protocol_copy_proxy_definition();
  v465 = (os_log_t)v156;
  cached_content_for_protocol = nw_association_get_cached_content_for_protocol(v156, v157);

  if (cached_content_for_protocol || (cached_content_for_protocol = (uint64_t)calloc(1uLL, 8uLL)) != 0)
  {
LABEL_180:
    obja = (id)(4
              * networkd_settings_get_int64_with_default((const char *)nw_setting_proxy_fallback_cache_seconds, 1800LL));
    if ((nw_endpoint_handler_get_logging_disabled(v471) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v159 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v159, OS_LOG_TYPE_DEBUG))
      {
        v160 = nw_endpoint_handler_get_id_string(v471);
        v454 = nw_endpoint_handler_dry_run_string(v471);
        v459 = nw_endpoint_handler_copy_endpoint(v471);
        __int128 v161 = nw_endpoint_get_logging_description(v459);
        uint64_t v162 = nw_endpoint_handler_state_string(v471);
        uint64_t v163 = nw_endpoint_handler_mode_string(v471);
        uint64_t v164 = nw_endpoint_handler_copy_current_path(v471);
        *(_DWORD *)std::string buf = 136448002;
        v481 = "nw_endpoint_proxy_receive_report";
        v482 = 2082;
        v483 = (uint64_t)v160;
        v484 = 2082;
        v485 = (uint64_t)v454;
        v486 = 2082;
        v487 = v161;
        v488 = 2082;
        v489 = v162;
        v490 = 2082;
        v491 = v163;
        v492 = 2114;
        v493 = v164;
        v494 = 2048;
        *(void *)v495 = obja;
        _os_log_impl( &dword_181A5C000,  v159,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Endpoint has alias array, ext ending cache for %lld seconds",  buf,  0x52u);
      }
    }

    v165 = nw_protocol_copy_proxy_definition();
    v166 = time(0LL);
    nw_association_set_cached_content_for_protocol(v465, v165, cached_content_for_protocol, (uint64_t)obja + v166);

    char v156 = v465;
    goto LABEL_187;
  }

  __nwlog_obj();
  v411 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v411, OS_LOG_TYPE_ERROR);
  *(_DWORD *)std::string buf = 136446722;
  v481 = "strict_calloc";
  v482 = 2048;
  v483 = 1LL;
  v484 = 2048;
  v485 = 8LL;
  v412 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v412);
  if (!result)
  {
    free(v412);
    cached_content_for_protocol = 0LL;
    goto LABEL_180;
  }

  __break(1u);
  return result;
}

        if (v109) {
          goto LABEL_199;
        }
        goto LABEL_200;
      }

      if (!v183)
      {
        v133 = (os_log_s *)__nwlog_obj();
        uint64_t v134 = v184;
        if (!os_log_type_enabled(v133, v184)) {
          goto LABEL_216;
        }
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
        uint64_t v126 = v133;
        char v127 = v134;
        uint64_t v128 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
LABEL_215:
        _os_log_impl(&dword_181A5C000, v126, v127, v128, buf, 0xCu);
        goto LABEL_216;
      }

      v129 = (char *)__nw_create_backtrace_string();
      __int16 v130 = (os_log_s *)__nwlog_obj();
      os_log_type_t v131 = v184;
      __int16 v132 = os_log_type_enabled(v130, v184);
      if (!v129)
      {
        uint64_t v5 = &qword_18C45F000;
        if (!v132) {
          goto LABEL_216;
        }
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
        uint64_t v126 = v130;
        char v127 = v131;
        uint64_t v128 = "%{public}s called with null webtransport_stream, no backtrace";
        goto LABEL_215;
      }

      if (v132)
      {
        *(_DWORD *)std::string buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
        v186 = 2082;
        v187 = v129;
        _os_log_impl( &dword_181A5C000,  v130,  v131,  "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v129);
      uint64_t v5 = &qword_18C45F000;
      if (v109) {
        goto LABEL_199;
      }
LABEL_200:
      v180[3] = v91;
      BOOL v76 = v171;
    }
  }

  char v77 = *(void *)(v171 + 328);
  if (v77)
  {
    if ((*(_BYTE *)(v77 + 276) & 0x10) == 0)
    {
      if (gLogDatapath)
      {
        v167 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v167, OS_LOG_TYPE_DEBUG))
        {
          v168 = *(void *)(v77 + 88);
          if (v168) {
            v169 = *(_DWORD *)(v168 + 460);
          }
          else {
            v169 = -1;
          }
          v170 = *(void *)(v77 + 64);
          *(_DWORD *)std::string buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_get_next_pending_stream";
          v186 = 2082;
          v187 = (const char *)(v77 + 192);
          v188 = 2080;
          v189 = (uint64_t)" ";
          v190 = 1024;
          *(_DWORD *)v191 = v169;
          *(_WORD *)&v191[4] = 2048;
          *(void *)&v191[6] = v170;
          *(_WORD *)&v191[14] = 2048;
          *(void *)&v191[16] = v77;
          _os_log_impl( &dword_181A5C000,  v167,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%lld> found stream (%p)",  buf,  0x3Au);
        }
      }
    }
  }

  nw_protocol_set_input_handler(v171, v77);
  if ((*(_BYTE *)(v171 + 548) & 2) != 0) {
    goto LABEL_86;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v51 = (os_log_s *)v5[131];
  if (!os_log_type_enabled(v51, OS_LOG_TYPE_INFO)) {
    goto LABEL_86;
  }
  os_log_type_t v78 = *(_DWORD *)(v171 + 460);
  *(_DWORD *)std::string buf = 136446978;
  *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
  v186 = 2082;
  v187 = (const char *)(v171 + 464);
  v188 = 2080;
  v189 = (uint64_t)" ";
  v190 = 1024;
  *(_DWORD *)v191 = v78;
  BOOL v53 = "%{public}s %{public}s%s<i%u> not destroying, still have pending streams";
LABEL_85:
  _os_log_impl(&dword_181A5C000, v51, OS_LOG_TYPE_INFO, v53, buf, 0x26u);
LABEL_86:
  nw_protocol_set_output_handler((uint64_t)a1, 0LL);
  if ((handle[276] & 0x10) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v54 = (os_log_s *)v5[131];
    if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
    {
      os_log_type_t v55 = *((void *)handle + 11);
      if (v55) {
        BOOL v56 = *(_DWORD *)(v55 + 460);
      }
      else {
        BOOL v56 = -1;
      }
      os_log_type_t v57 = *((void *)handle + 8);
      *(_DWORD *)std::string buf = 136447490;
      *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
      v186 = 2082;
      v187 = handle + 192;
      v188 = 2080;
      v189 = (uint64_t)" ";
      v190 = 1024;
      *(_DWORD *)v191 = v56;
      *(_WORD *)&v191[4] = 2048;
      *(void *)&v191[6] = v57;
      *(_WORD *)&v191[14] = 2048;
      *(void *)&v191[16] = handle;
      _os_log_impl( &dword_181A5C000,  v54,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:s%lld> destroying stream %p",  buf,  0x3Au);
    }
  }

  if (*((void *)handle + 9))
  {
    if ((handle[276] & 0x10) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v58 = (os_log_s *)v5[131];
      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
      {
        os_log_type_t v59 = *((void *)handle + 11);
        if (v59) {
          os_log_type_t v60 = *(_DWORD *)(v59 + 460);
        }
        else {
          os_log_type_t v60 = -1;
        }
        char v69 = *((void *)handle + 8);
        *(_DWORD *)std::string buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
        v186 = 2082;
        v187 = handle + 192;
        v188 = 2080;
        v189 = (uint64_t)" ";
        v190 = 1024;
        *(_DWORD *)v191 = v60;
        *(_WORD *)&v191[4] = 2048;
        *(void *)&v191[6] = v69;
        _os_log_impl( &dword_181A5C000,  v58,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:s%lld> input_frames has unread frames before destroying",  buf,  0x30u);
      }
    }
  }

  BOOL v70 = *((void *)handle + 9);
  if (v70)
  {
    do
    {
      uint64_t v71 = *(void *)(v70 + 32);
      nw_frame_finalize(v70);
      BOOL v70 = v71;
    }

    while (v71);
  }

  (*(void (**)(void, void))(*((void *)handle + 22) + 16LL))(*((void *)handle + 22), 0LL);
  BOOL v72 = (const void *)*((void *)handle + 22);
  if (v72)
  {
    _Block_release(v72);
    *((void *)handle + 22) = 0LL;
  }

  if ((handle[168] & 1) != 0)
  {
    BOOL v73 = (void *)*((void *)handle + 20);
    if (v73) {
      os_release(v73);
    }
  }

  *((void *)handle + 20) = 0LL;
  if ((handle[152] & 1) != 0)
  {
    BOOL v74 = (void *)*((void *)handle + 18);
    if (v74) {
      os_release(v74);
    }
  }

  *((void *)handle + 1_Block_object_dispose(va, 8) = 0LL;
  if ((handle[136] & 1) != 0)
  {
    os_log_type_t v75 = (void *)*((void *)handle + 16);
    if (v75) {
      os_release(v75);
    }
  }

  free(handle);
  return 1LL;
}

        if (v109) {
          goto LABEL_199;
        }
        goto LABEL_200;
      }

      if (!v183)
      {
        v133 = (os_log_s *)__nwlog_obj();
        uint64_t v134 = v184;
        if (!os_log_type_enabled(v133, v184)) {
          goto LABEL_216;
        }
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
        uint64_t v126 = v133;
        char v127 = v134;
        uint64_t v128 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
LABEL_215:
        _os_log_impl(&dword_181A5C000, v126, v127, v128, buf, 0xCu);
        goto LABEL_216;
      }

      v129 = (char *)__nw_create_backtrace_string();
      __int16 v130 = (os_log_s *)__nwlog_obj();
      os_log_type_t v131 = v184;
      __int16 v132 = os_log_type_enabled(v130, v184);
      if (!v129)
      {
        uint64_t v5 = &qword_18C45F000;
        if (!v132) {
          goto LABEL_216;
        }
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
        uint64_t v126 = v130;
        char v127 = v131;
        uint64_t v128 = "%{public}s called with null webtransport_stream, no backtrace";
        goto LABEL_215;
      }

      if (v132)
      {
        *(_DWORD *)std::string buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
        v186 = 2082;
        v187 = v129;
        _os_log_impl( &dword_181A5C000,  v130,  v131,  "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v129);
      uint64_t v5 = &qword_18C45F000;
      if (v109) {
        goto LABEL_199;
      }
LABEL_200:
      v180[3] = v91;
      BOOL v76 = v171;
    }
  }

  char v77 = *(void *)(v171 + 328);
  if (v77)
  {
    if ((*(_BYTE *)(v77 + 276) & 0x10) == 0)
    {
      if (gLogDatapath)
      {
        v167 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v167, OS_LOG_TYPE_DEBUG))
        {
          v168 = *(void *)(v77 + 88);
          if (v168) {
            v169 = *(_DWORD *)(v168 + 460);
          }
          else {
            v169 = -1;
          }
          v170 = *(void *)(v77 + 64);
          *(_DWORD *)std::string buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_get_next_pending_stream";
          v186 = 2082;
          v187 = (const char *)(v77 + 192);
          v188 = 2080;
          v189 = (uint64_t)" ";
          v190 = 1024;
          *(_DWORD *)v191 = v169;
          *(_WORD *)&v191[4] = 2048;
          *(void *)&v191[6] = v170;
          *(_WORD *)&v191[14] = 2048;
          *(void *)&v191[16] = v77;
          _os_log_impl( &dword_181A5C000,  v167,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%lld> found stream (%p)",  buf,  0x3Au);
        }
      }
    }
  }

  nw_protocol_set_input_handler(v171, v77);
  if ((*(_BYTE *)(v171 + 548) & 2) != 0) {
    goto LABEL_86;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v51 = (os_log_s *)v5[131];
  if (!os_log_type_enabled(v51, OS_LOG_TYPE_INFO)) {
    goto LABEL_86;
  }
  os_log_type_t v78 = *(_DWORD *)(v171 + 460);
  *(_DWORD *)std::string buf = 136446978;
  *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
  v186 = 2082;
  v187 = (const char *)(v171 + 464);
  v188 = 2080;
  v189 = (uint64_t)" ";
  v190 = 1024;
  *(_DWORD *)v191 = v78;
  BOOL v53 = "%{public}s %{public}s%s<i%u> not destroying, still have pending streams";
LABEL_85:
  _os_log_impl(&dword_181A5C000, v51, OS_LOG_TYPE_INFO, v53, buf, 0x26u);
LABEL_86:
  nw_protocol_set_output_handler((uint64_t)a1, 0LL);
  if ((handle[276] & 0x10) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v54 = (os_log_s *)v5[131];
    if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
    {
      os_log_type_t v55 = *((void *)handle + 11);
      if (v55) {
        BOOL v56 = *(_DWORD *)(v55 + 460);
      }
      else {
        BOOL v56 = -1;
      }
      os_log_type_t v57 = *((void *)handle + 8);
      *(_DWORD *)std::string buf = 136447490;
      *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
      v186 = 2082;
      v187 = handle + 192;
      v188 = 2080;
      v189 = (uint64_t)" ";
      v190 = 1024;
      *(_DWORD *)v191 = v56;
      *(_WORD *)&v191[4] = 2048;
      *(void *)&v191[6] = v57;
      *(_WORD *)&v191[14] = 2048;
      *(void *)&v191[16] = handle;
      _os_log_impl( &dword_181A5C000,  v54,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:s%lld> destroying stream %p",  buf,  0x3Au);
    }
  }

  if (*((void *)handle + 9))
  {
    if ((handle[276] & 0x10) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v58 = (os_log_s *)v5[131];
      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
      {
        os_log_type_t v59 = *((void *)handle + 11);
        if (v59) {
          os_log_type_t v60 = *(_DWORD *)(v59 + 460);
        }
        else {
          os_log_type_t v60 = -1;
        }
        char v69 = *((void *)handle + 8);
        *(_DWORD *)std::string buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
        v186 = 2082;
        v187 = handle + 192;
        v188 = 2080;
        v189 = (uint64_t)" ";
        v190 = 1024;
        *(_DWORD *)v191 = v60;
        *(_WORD *)&v191[4] = 2048;
        *(void *)&v191[6] = v69;
        _os_log_impl( &dword_181A5C000,  v58,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:s%lld> input_frames has unread frames before destroying",  buf,  0x30u);
      }
    }
  }

  BOOL v70 = *((void *)handle + 9);
  if (v70)
  {
    do
    {
      uint64_t v71 = *(void *)(v70 + 32);
      nw_frame_finalize(v70);
      BOOL v70 = v71;
    }

    while (v71);
  }

  (*(void (**)(void, void))(*((void *)handle + 22) + 16LL))(*((void *)handle + 22), 0LL);
  BOOL v72 = (const void *)*((void *)handle + 22);
  if (v72)
  {
    _Block_release(v72);
    *((void *)handle + 22) = 0LL;
  }

  if ((handle[168] & 1) != 0)
  {
    BOOL v73 = (void *)*((void *)handle + 20);
    if (v73) {
      os_release(v73);
    }
  }

  *((void *)handle + 20) = 0LL;
  if ((handle[152] & 1) != 0)
  {
    BOOL v74 = (void *)*((void *)handle + 18);
    if (v74) {
      os_release(v74);
    }
  }

  *((void *)handle + 1_Block_object_dispose(va, 8) = 0LL;
  if ((handle[136] & 1) != 0)
  {
    os_log_type_t v75 = (void *)*((void *)handle + 16);
    if (v75) {
      os_release(v75);
    }
  }

  free(handle);
  return 1LL;
}

  __break(1u);
  return result;
}

      if (v100) {
        free(v100);
      }
      goto LABEL_193;
    }

    if (strcmp(v18 + 16, "Network") || strcmp(v18 + 48, "PathOverride")) {
      goto LABEL_193;
    }
    id v32 = *((unsigned int *)v18 + 53);
    if (!(_DWORD)v32)
    {
      __nwlog_obj();
      os_log_type_t v107 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(length[0]) = 136446210;
      *(size_t *)((char *)length + 4) = (size_t)"nw_path_override_info_create_from_data";
      v196 = length;
      char v108 = (char *)_os_log_send_and_compose_impl();

      LOBYTE(type) = 16;
      LOBYTE(v236) = 0;
      if (__nwlog_fault(v108, &type, &v236))
      {
        if (type == 17)
        {
          __nwlog_obj();
          unint64_t v109 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v110 = type;
          if (os_log_type_enabled(v109, (os_log_type_t)type))
          {
            LODWORD(length[0]) = 136446210;
            *(size_t *)((char *)length + 4) = (size_t)"nw_path_override_info_create_from_data";
            _os_log_impl( &dword_181A5C000,  v109,  v110,  "%{public}s called with null (data_length > 0)",  (uint8_t *)length,  0xCu);
          }
        }

        else if ((_BYTE)v236)
        {
          std::string::value_type v111 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          unint64_t v109 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v112 = type;
          __int16 v113 = os_log_type_enabled(v109, (os_log_type_t)type);
          if (v111)
          {
            if (v113)
            {
              LODWORD(length[0]) = 136446466;
              *(size_t *)((char *)length + 4) = (size_t)"nw_path_override_info_create_from_data";
              WORD2(length[1]) = 2082;
              *(size_t *)((char *)&length[1] + 6) = (size_t)v111;
              _os_log_impl( &dword_181A5C000,  v109,  v112,  "%{public}s called with null (data_length > 0), dumping backtrace:%{public}s",  (uint8_t *)length,  0x16u);
            }

            free(v111);
            goto LABEL_229;
          }

          if (v113)
          {
            LODWORD(length[0]) = 136446210;
            *(size_t *)((char *)length + 4) = (size_t)"nw_path_override_info_create_from_data";
            _os_log_impl( &dword_181A5C000,  v109,  v112,  "%{public}s called with null (data_length > 0), no backtrace",  (uint8_t *)length,  0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          unint64_t v109 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v114 = type;
          if (os_log_type_enabled(v109, (os_log_type_t)type))
          {
            LODWORD(length[0]) = 136446210;
            *(size_t *)((char *)length + 4) = (size_t)"nw_path_override_info_create_from_data";
            _os_log_impl( &dword_181A5C000,  v109,  v114,  "%{public}s called with null (data_length > 0), backtrace limit exceeded",  (uint8_t *)length,  0xCu);
          }
        }
      }

    _os_log_impl(&dword_181A5C000, v123, v124, v125, buf, 0x12u);
    goto LABEL_217;
  }

  char v121 = (os_log_s *)__nwlog_obj();
  BOOL v122 = type[0];
  if (os_log_type_enabled(v121, type[0]))
  {
    *(_DWORD *)std::string buf = 136446466;
    v254 = "nw_channel_add_input_frames";
    v255 = 1024;
    LODWORD(v256[0]) = v119;
    BOOL v123 = v121;
    int v124 = v122;
    BOOL v125 = "%{public}s os_packet_increment_use_count() %{darwin.errno}d";
    goto LABEL_216;
  }

void nw_protocol_http_redirect_create::$_1::__invoke(uint64_t a1, int a2, void *object, int a4, uint64_t a5)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)std::string buf = 136446210;
    os_log_type_t v30 = "operator()";
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_72;
      }
      *(_DWORD *)std::string buf = 136446210;
      os_log_type_t v30 = "operator()";
      os_log_type_t v19 = "%{public}s called with null protocol";
    }

    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v21 = os_log_type_enabled(v17, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)std::string buf = 136446466;
          os_log_type_t v30 = "operator()";
          __int16 v31 = 2082;
          id v32 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v17,  v18,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_72:
        if (!v16) {
          return;
        }
        goto LABEL_73;
      }

      if (!v21) {
        goto LABEL_72;
      }
      *(_DWORD *)std::string buf = 136446210;
      os_log_type_t v30 = "operator()";
      os_log_type_t v19 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      os_log_type_t v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_72;
      }
      *(_DWORD *)std::string buf = 136446210;
      os_log_type_t v30 = "operator()";
      os_log_type_t v19 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_71;
  }

  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)std::string buf = 136446210;
    os_log_type_t v30 = "operator()";
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v27)
      {
        os_log_type_t v17 = (os_log_s *)__nwlog_obj();
        os_log_type_t v18 = type;
        if (!os_log_type_enabled(v17, type)) {
          goto LABEL_72;
        }
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v30 = "operator()";
        os_log_type_t v19 = "%{public}s called with null http_redirect, backtrace limit exceeded";
        goto LABEL_71;
      }

      char v22 = (char *)__nw_create_backtrace_string();
      os_log_type_t v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v23 = os_log_type_enabled(v17, type);
      if (!v22)
      {
        if (!v23) {
          goto LABEL_72;
        }
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v30 = "operator()";
        os_log_type_t v19 = "%{public}s called with null http_redirect, no backtrace";
        goto LABEL_71;
      }

      if (!v23) {
        goto LABEL_53;
      }
      *(_DWORD *)std::string buf = 136446466;
      os_log_type_t v30 = "operator()";
      __int16 v31 = 2082;
      id v32 = v22;
      os_log_type_t v24 = "%{public}s called with null http_redirect, dumping backtrace:%{public}s";
      goto LABEL_52;
    }

    os_log_type_t v17 = (os_log_s *)__nwlog_obj();
    os_log_type_t v18 = type;
    if (!os_log_type_enabled(v17, type)) {
      goto LABEL_72;
    }
    *(_DWORD *)std::string buf = 136446210;
    os_log_type_t v30 = "operator()";
    os_log_type_t v19 = "%{public}s called with null http_redirect";
LABEL_71:
    _os_log_impl(&dword_181A5C000, v17, v18, v19, buf, 0xCu);
    goto LABEL_72;
  }

  if (!object)
  {
    __nwlog_obj();
    *(_DWORD *)std::string buf = 136446210;
    os_log_type_t v30 = "operator()";
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_72;
      }
      *(_DWORD *)std::string buf = 136446210;
      os_log_type_t v30 = "operator()";
      os_log_type_t v19 = "%{public}s called with null metadata";
      goto LABEL_71;
    }

    if (!v27)
    {
      os_log_type_t v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_72;
      }
      *(_DWORD *)std::string buf = 136446210;
      os_log_type_t v30 = "operator()";
      os_log_type_t v19 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_71;
    }

    char v22 = (char *)__nw_create_backtrace_string();
    os_log_type_t v17 = (os_log_s *)__nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v25 = os_log_type_enabled(v17, type);
    if (!v22)
    {
      if (!v25) {
        goto LABEL_72;
      }
      *(_DWORD *)std::string buf = 136446210;
      os_log_type_t v30 = "operator()";
      os_log_type_t v19 = "%{public}s called with null metadata, no backtrace";
      goto LABEL_71;
    }

    if (!v25) {
      goto LABEL_53;
    }
    *(_DWORD *)std::string buf = 136446466;
    os_log_type_t v30 = "operator()";
    __int16 v31 = 2082;
    id v32 = v22;
    os_log_type_t v24 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
LABEL_52:
    _os_log_impl(&dword_181A5C000, v17, v18, v24, buf, 0x16u);
    goto LABEL_53;
  }

  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)std::string buf = 136446210;
    os_log_type_t v30 = "operator()";
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_72;
      }
      *(_DWORD *)std::string buf = 136446210;
      os_log_type_t v30 = "operator()";
      os_log_type_t v19 = "%{public}s called with null completion";
      goto LABEL_71;
    }

    if (!v27)
    {
      os_log_type_t v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_72;
      }
      *(_DWORD *)std::string buf = 136446210;
      os_log_type_t v30 = "operator()";
      os_log_type_t v19 = "%{public}s called with null completion, backtrace limit exceeded";
      goto LABEL_71;
    }

    char v22 = (char *)__nw_create_backtrace_string();
    os_log_type_t v17 = (os_log_s *)__nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v26 = os_log_type_enabled(v17, type);
    if (!v22)
    {
      if (!v26) {
        goto LABEL_72;
      }
      *(_DWORD *)std::string buf = 136446210;
      os_log_type_t v30 = "operator()";
      os_log_type_t v19 = "%{public}s called with null completion, no backtrace";
      goto LABEL_71;
    }

    if (v26)
    {
      *(_DWORD *)std::string buf = 136446466;
      os_log_type_t v30 = "operator()";
      __int16 v31 = 2082;
      id v32 = v22;
      os_log_type_t v24 = "%{public}s called with null completion, dumping backtrace:%{public}s";
      goto LABEL_52;
    }

uint64_t nw_protocol_http_redirect_create::$_2::__invoke( nw_protocol_http_redirect_create::$_2 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 0LL;
}

uint64_t nw_protocol_http_redirect_create::$_3::__invoke( nw_protocol_http_redirect_create::$_3 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1LL;
}

uint64_t nw_protocol_http_redirect_create::$_4::__invoke( nw_protocol_http_redirect_create::$_4 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1LL;
}

uint64_t nw_protocol_http_redirect_create::$_5::__invoke( nw_protocol_http_redirect_create::$_5 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1LL;
}

uint64_t nw_protocol_http_redirect_create::$_6::__invoke( nw_protocol_http_redirect_create::$_6 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1LL;
}

uint64_t __Block_byref_object_copy__937(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(result + 4_Block_object_dispose(va, 8) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0LL;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__938(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    xpc_object_t v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }

  *(void *)(a1 + 40) = 0LL;
}

void ___ZL30nw_http_redirect_copy_endpointP25nw_protocol_http_redirectP20nw_protocol_metadata_block_invoke( uint64_t a1, _BYTE *a2)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  if (!a2) {
    return;
  }
  parameters = (void *)nw_protocol_get_parameters(*(void *)(a1 + 40));
  id v5 = nw_parameters_copy_url_endpoint(parameters);
  if (v5)
  {
    xpc_object_t v6 = v5;
    CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL);
    uint64_t v8 = *a2;
    if (*a2)
    {
      id v9 = a2 + 1;
      do
      {
        while (!memchr( "!#$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]_abcdefghijklmnopqrstuvwxyz~",
                   v8,
                   0x56uLL))
        {
          CFStringAppendFormat(Mutable, 0LL, @"%%%02X", v8);
          unsigned int v10 = *v9++;
          uint64_t v8 = v10;
          if (!v10) {
            goto LABEL_8;
          }
        }

        *(_WORD *)chars = v8;
        CFStringAppendCharacters(Mutable, (const UniChar *)chars, 1LL);
        unsigned int v11 = *v9++;
        uint64_t v8 = v11;
      }

      while (v11);
    }

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(result + 4_Block_object_dispose(va, 8) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0LL;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    xpc_object_t v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }

  *(void *)(a1 + 40) = 0LL;
}

uint64_t __Block_byref_object_copy__32(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(result + 4_Block_object_dispose(va, 8) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0LL;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__33(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    xpc_object_t v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }

  *(void *)(a1 + 40) = 0LL;
}

void ___ZL30nw_http_redirect_copy_metadataP25nw_protocol_http_redirectP11nw_endpointP20nw_protocol_metadatab_block_invoke( uint64_t a1, uint64_t a2)
{
  url = nw_endpoint_get_url(*(nw_endpoint_t *)(a1 + 40));
  uint64_t v5 = nw_http_request_create_from_url(a2, (uint64_t)url);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
  char v7 = *(_BYTE *)(v6 + 48);
  if ((v7 & 1) != 0)
  {
    uint64_t v8 = *(void **)(v6 + 40);
    if (v8)
    {
      os_release(v8);
      char v7 = *(_BYTE *)(v6 + 48);
    }
  }

  *(void *)(v6 + 40) = v5;
  *(_BYTE *)(v6 + 4_Block_object_dispose(va, 8) = v7 | 1;
}

void ___ZL30nw_http_redirect_copy_metadataP25nw_protocol_http_redirectP11nw_endpointP20nw_protocol_metadatab_block_invoke_2( uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  v4[0] = MEMORY[0x1895F87A8];
  v4[1] = 0x40000000LL;
  v4[2] = ___ZL30nw_http_redirect_copy_metadataP25nw_protocol_http_redirectP11nw_endpointP20nw_protocol_metadatab_block_invoke_3;
  v4[3] = &unk_189BB5E00;
  v4[4] = v2;
  v4[5] = a2;
  nw_http_request_access_authority(v3, v4);
}

uint64_t ___ZL30nw_http_redirect_copy_metadataP25nw_protocol_http_redirectP11nw_endpointP20nw_protocol_metadatab_block_invoke_4( uint64_t a1, char *a2, unint64_t a3, uint64_t a4)
{
  if (!*(_BYTE *)(a1 + 56)
    || (a3 < 9 || strncasecmp(a2, "content-", 8uLL)) && strcasecmp(a2, "digest") && strcasecmp(a2, "Last-Modified"))
  {
    if ((char v7 = *(_BYTE *)(*(void *)(a1 + 48) + 692LL), (v7 & 2) != 0)
      && *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)
      || strcasecmp(a2, "Cookie"))
    {
      if (strcasecmp(a2, "Authorization")
        && strcasecmp(a2, "Proxy-Authorization")
        && ((v7 & 4) != 0 || strcasecmp(a2, "Accept-Encoding"))
        && (*(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) || strcasecmp(a2, "Origin")))
      {
        nw_http_fields_append(*(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), (uint64_t)a2, a4);
      }
    }
  }

  return 1LL;
}

uint64_t ___ZL24nw_http_redirect_processP25nw_protocol_http_redirectP20nw_protocol_metadata_block_invoke( uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v3 = MEMORY[0x1895F87A8];
  uint64_t v4 = 0x40000000LL;
  uint64_t v5 = ___ZL24nw_http_redirect_processP25nw_protocol_http_redirectP20nw_protocol_metadata_block_invoke_2;
  uint64_t v6 = &__block_descriptor_tmp_19;
  uint64_t v7 = v1;
  return (*(uint64_t (**)(void))(*(void *)(v1 + 592) + 16LL))();
}

void nw_http_redirect_reissue(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v59 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v41[0]) = 16;
    LOBYTE(v44) = 0;
    if (LOBYTE(v41[0]) == 17)
    {
      CFRange v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = v41[0];
      if (!os_log_type_enabled(v26, v41[0])) {
        goto LABEL_88;
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
      uint64_t v28 = "%{public}s called with null http_redirect";
    }

    else if ((_BYTE)v44)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      CFRange v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = v41[0];
      BOOL v30 = os_log_type_enabled(v26, v41[0]);
      if (backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)std::string buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v26,  v27,  "%{public}s called with null http_redirect, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_88:
        if (!v25) {
          return;
        }
        goto LABEL_89;
      }

      if (!v30) {
        goto LABEL_88;
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
      uint64_t v28 = "%{public}s called with null http_redirect, no backtrace";
    }

    else
    {
      CFRange v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = v41[0];
      if (!os_log_type_enabled(v26, v41[0])) {
        goto LABEL_88;
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
      uint64_t v28 = "%{public}s called with null http_redirect, backtrace limit exceeded";
    }

    goto LABEL_87;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v41[0]) = 16;
    LOBYTE(v44) = 0;
    if (LOBYTE(v41[0]) != 17)
    {
      if (!(_BYTE)v44)
      {
        CFRange v26 = (os_log_s *)__nwlog_obj();
        os_log_type_t v27 = v41[0];
        if (!os_log_type_enabled(v26, v41[0])) {
          goto LABEL_88;
        }
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
        uint64_t v28 = "%{public}s called with null endpoint, backtrace limit exceeded";
        goto LABEL_87;
      }

      __int16 v31 = (char *)__nw_create_backtrace_string();
      CFRange v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = v41[0];
      BOOL v32 = os_log_type_enabled(v26, v41[0]);
      if (!v31)
      {
        if (!v32) {
          goto LABEL_88;
        }
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
        uint64_t v28 = "%{public}s called with null endpoint, no backtrace";
        goto LABEL_87;
      }

      if (!v32) {
        goto LABEL_69;
      }
      *(_DWORD *)std::string buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = v31;
      __int16 v33 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
      goto LABEL_68;
    }

    CFRange v26 = (os_log_s *)__nwlog_obj();
    os_log_type_t v27 = v41[0];
    if (!os_log_type_enabled(v26, v41[0])) {
      goto LABEL_88;
    }
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
    uint64_t v28 = "%{public}s called with null endpoint";
LABEL_87:
    _os_log_impl(&dword_181A5C000, v26, v27, v28, buf, 0xCu);
    goto LABEL_88;
  }

  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v41[0]) = 16;
    LOBYTE(v44) = 0;
    if (LOBYTE(v41[0]) == 17)
    {
      CFRange v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = v41[0];
      if (!os_log_type_enabled(v26, v41[0])) {
        goto LABEL_88;
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
      uint64_t v28 = "%{public}s called with null orig_request_metadata";
      goto LABEL_87;
    }

    if (!(_BYTE)v44)
    {
      CFRange v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = v41[0];
      if (!os_log_type_enabled(v26, v41[0])) {
        goto LABEL_88;
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
      uint64_t v28 = "%{public}s called with null orig_request_metadata, backtrace limit exceeded";
      goto LABEL_87;
    }

    __int16 v31 = (char *)__nw_create_backtrace_string();
    CFRange v26 = (os_log_s *)__nwlog_obj();
    os_log_type_t v27 = v41[0];
    BOOL v34 = os_log_type_enabled(v26, v41[0]);
    if (!v31)
    {
      if (!v34) {
        goto LABEL_88;
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
      uint64_t v28 = "%{public}s called with null orig_request_metadata, no backtrace";
      goto LABEL_87;
    }

    if (!v34) {
      goto LABEL_69;
    }
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = v31;
    __int16 v33 = "%{public}s called with null orig_request_metadata, dumping backtrace:%{public}s";
LABEL_68:
    _os_log_impl(&dword_181A5C000, v26, v27, v33, buf, 0x16u);
    goto LABEL_69;
  }

  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v41[0]) = 16;
    LOBYTE(v44) = 0;
    if (LOBYTE(v41[0]) == 17)
    {
      CFRange v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = v41[0];
      if (!os_log_type_enabled(v26, v41[0])) {
        goto LABEL_88;
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
      uint64_t v28 = "%{public}s called with null _request_metadata";
      goto LABEL_87;
    }

    if (!(_BYTE)v44)
    {
      CFRange v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = v41[0];
      if (!os_log_type_enabled(v26, v41[0])) {
        goto LABEL_88;
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
      uint64_t v28 = "%{public}s called with null _request_metadata, backtrace limit exceeded";
      goto LABEL_87;
    }

    __int16 v31 = (char *)__nw_create_backtrace_string();
    CFRange v26 = (os_log_s *)__nwlog_obj();
    os_log_type_t v27 = v41[0];
    BOOL v35 = os_log_type_enabled(v26, v41[0]);
    if (!v31)
    {
      if (!v35) {
        goto LABEL_88;
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
      uint64_t v28 = "%{public}s called with null _request_metadata, no backtrace";
      goto LABEL_87;
    }

    if (v35)
    {
      *(_DWORD *)std::string buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http_redirect_reissue";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = v31;
      __int16 v33 = "%{public}s called with null _request_metadata, dumping backtrace:%{public}s";
      goto LABEL_68;
    }

uint64_t __Block_byref_object_copy__14_943(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(result + 4_Block_object_dispose(va, 8) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0LL;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__15_944(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    uint64_t v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }

  *(void *)(a1 + 40) = 0LL;
}

uint64_t ___ZL24nw_http_redirect_reissueP25nw_protocol_http_redirectP11nw_endpointP13nw_parametersP20nw_protocol_metadataS6__block_invoke( uint64_t a1, uint64_t *a2)
{
  nw_frame_set_metadata( *a2,  *(nw_protocol_metadata **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL),  0,  (*(_BYTE *)(*(void *)(a1 + 40) + 692LL) & 8) == 0);
  return 1LL;
}

uint64_t ___ZL24nw_http_redirect_reissueP25nw_protocol_http_redirectP11nw_endpointP13nw_parametersP20nw_protocol_metadataS6__block_invoke_2( void *a1)
{
  if (nw_protocol_copy_http_client_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52);
  }
  id v2 = (id)nw_protocol_copy_http_client_definition_definition;
  identifier = nw_protocol_definition_get_identifier(v2);
  if (v2) {
    os_release(v2);
  }
  uint64_t v4 = a1[6];
  do
  {
    uint64_t v4 = *(void *)(v4 + 48);
    if (!v4) {
      return 1LL;
    }
  }

  while (!nw_protocols_are_equal(*(void **)(v4 + 16), identifier));
  uint64_t v5 = nw_parameters_copy_protocol_options_legacy(*(void **)(*(void *)(a1[4] + 8LL) + 40LL), (nw_protocol *)v4);
  uint64_t v6 = nw_http_client_options_copy_resend_handler(v5);
  BOOL v7 = v6 == 0LL;
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1[5];
    uint64_t v10 = *(void *)(a1[4] + 8LL);
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 0x40000000LL;
    void v12[2] = ___ZL24nw_http_redirect_reissueP25nw_protocol_http_redirectP11nw_endpointP13nw_parametersP20nw_protocol_metadataS6__block_invoke_3;
    v12[3] = &unk_189BB5EA0;
    v12[4] = v9;
    (*((void (**)(void *, void, void *))v6 + 2))(v6, *(void *)(v10 + 40), v12);
    _Block_release(v8);
  }

  if (v5) {
    os_release(v5);
  }
  return v7;
}

void ___ZL24nw_http_redirect_reissueP25nw_protocol_http_redirectP11nw_endpointP13nw_parametersP20nw_protocol_metadataS6__block_invoke_4( uint64_t a1)
{
}

void nw_http_redirect_destroy(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if ((*(_BYTE *)(a1 + 198) & 1) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v14 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 136446722;
        BOOL v16 = "nw_http_redirect_destroy";
        __int16 v17 = 2082;
        uint64_t v18 = a1 + 114;
        __int16 v19 = 2080;
        os_log_type_t v20 = " ";
        _os_log_impl(&dword_181A5C000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", (uint8_t *)&v15, 0x20u);
      }
    }
  }

  if (*(_DWORD *)(a1 + 552))
  {
    *(_BYTE *)(a1 + 556) |= 0x40u;
    if ((*(_BYTE *)(a1 + 198) & 1) == 0 && gLogDatapath)
    {
      id v2 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 136446722;
        BOOL v16 = "nw_http_redirect_destroy";
        __int16 v17 = 2082;
        uint64_t v18 = a1 + 114;
        __int16 v19 = 2080;
        os_log_type_t v20 = " ";
        _os_log_impl( &dword_181A5C000,  v2,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sdeferring destroy because the request is being reissued",  (uint8_t *)&v15,  0x20u);
      }
    }
  }

  else
  {
    if ((*(_BYTE *)(a1 + 680) & 1) != 0)
    {
      uint64_t v3 = *(void **)(a1 + 672);
      if (v3) {
        os_release(v3);
      }
    }

    *(void *)(a1 + 672) = 0LL;
    if ((*(_BYTE *)(a1 + 664) & 1) != 0)
    {
      uint64_t v4 = *(void **)(a1 + 656);
      if (v4) {
        os_release(v4);
      }
    }

    *(void *)(a1 + 656) = 0LL;
    if ((*(_BYTE *)(a1 + 648) & 1) != 0)
    {
      uint64_t v5 = *(void **)(a1 + 640);
      if (v5) {
        os_release(v5);
      }
    }

    *(void *)(a1 + 640) = 0LL;
    if ((*(_BYTE *)(a1 + 632) & 1) != 0)
    {
      uint64_t v6 = *(void **)(a1 + 624);
      if (v6) {
        os_release(v6);
      }
    }

    *(void *)(a1 + 624) = 0LL;
    if ((*(_BYTE *)(a1 + 616) & 1) != 0)
    {
      BOOL v7 = *(dispatch_object_s **)(a1 + 608);
      if (v7) {
        dispatch_release(v7);
      }
    }

    *(void *)(a1 + 60_Block_object_dispose(va, 8) = 0LL;
    if ((*(_BYTE *)(a1 + 600) & 1) != 0)
    {
      uint64_t v8 = *(const void **)(a1 + 592);
      if (v8) {
        _Block_release(v8);
      }
    }

    *(void *)(a1 + 592) = 0LL;
    if ((*(_BYTE *)(a1 + 584) & 1) != 0)
    {
      uint64_t v9 = *(void **)(a1 + 576);
      if (v9) {
        os_release(v9);
      }
    }

    *(void *)(a1 + 576) = 0LL;
    if ((*(_BYTE *)(a1 + 568) & 1) != 0)
    {
      uint64_t v10 = *(void **)(a1 + 560);
      if (v10) {
        os_release(v10);
      }
    }

    *(void *)(a1 + 560) = 0LL;
    nw_protocol_plugin_retry::~nw_protocol_plugin_retry((nw_protocol_plugin_retry *)(a1 + 344));
    if ((*(_BYTE *)(a1 + 288) & 1) != 0)
    {
      unsigned int v11 = *(void **)(a1 + 280);
      if (v11) {
        os_release(v11);
      }
    }

    *(void *)(a1 + 280) = 0LL;
    if ((*(_BYTE *)(a1 + 272) & 1) != 0)
    {
      BOOL v12 = *(void **)(a1 + 264);
      if (v12) {
        os_release(v12);
      }
    }

    *(void *)(a1 + 264) = 0LL;
    if ((*(_BYTE *)(a1 + 256) & 1) != 0)
    {
      int v13 = *(void **)(a1 + 248);
      if (v13) {
        os_release(v13);
      }
    }

    free((void *)a1);
  }

void ___ZL24nw_http_redirect_reissueP25nw_protocol_http_redirectP11nw_endpointP13nw_parametersP20nw_protocol_metadataS6__block_invoke_3( uint64_t a1, nw_content_context_t context)
{
}

void ___ZL24nw_http_redirect_processP25nw_protocol_http_redirectP20nw_protocol_metadata_block_invoke_2( uint64_t a1, void *object, void *a3, void *a4)
{
  v22[0] = 0LL;
  v22[1] = v22;
  v22[2] = 0x3802000000LL;
  v22[3] = __Block_byref_object_copy__937;
  void v22[4] = __Block_byref_object_dispose__938;
  if (object)
  {
    BOOL v7 = os_retain(object);
    char v8 = v24 | 1;
  }

  else
  {
    BOOL v7 = 0LL;
    char v8 = -1;
  }

  uint64_t v23 = v7;
  char v24 = v8;
  v19[0] = 0LL;
  v19[1] = v19;
  v19[2] = 0x3802000000LL;
  v19[3] = __Block_byref_object_copy__14_943;
  v19[4] = __Block_byref_object_dispose__15_944;
  if (a3)
  {
    uint64_t v9 = os_retain(a3);
    char v10 = v21 | 1;
  }

  else
  {
    uint64_t v9 = 0LL;
    char v10 = -1;
  }

  os_log_type_t v20 = v9;
  char v21 = v10;
  v16[0] = 0LL;
  v16[1] = v16;
  _OWORD v16[2] = 0x3802000000LL;
  v16[3] = __Block_byref_object_copy__12;
  void v16[4] = __Block_byref_object_dispose__13;
  if (a4)
  {
    unsigned int v11 = os_retain(a4);
    char v12 = v18 | 1;
  }

  else
  {
    unsigned int v11 = 0LL;
    char v12 = -1;
  }

  objecta = v11;
  char v18 = v12;
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(void **)(v13 + 672);
  v15[0] = MEMORY[0x1895F87A8];
  v15[1] = 0x40000000LL;
  v15[2] = ___ZL24nw_http_redirect_processP25nw_protocol_http_redirectP20nw_protocol_metadata_block_invoke_16;
  v15[3] = &unk_189BB5D18;
  v15[4] = v16;
  void v15[5] = v22;
  void v15[6] = v19;
  v15[7] = v13;
  nw_queue_context_async_if_needed(v14, v15);
  _Block_object_dispose(v16, 8);
  if ((v18 & 1) != 0 && objecta) {
    os_release(objecta);
  }
  _Block_object_dispose(v19, 8);
  if ((v21 & 1) != 0 && v20) {
    os_release(v20);
  }
  _Block_object_dispose(v22, 8);
  if ((v24 & 1) != 0)
  {
    if (v23) {
      os_release(v23);
    }
  }

void ___ZL24nw_http_redirect_processP25nw_protocol_http_redirectP20nw_protocol_metadata_block_invoke_16( void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (nw_protocol_plugin_retry_end_async(a1[7] + 344LL))
  {
    uint64_t v2 = a1[7];
    if (*(void *)(*(void *)(a1[4] + 8LL) + 40LL))
    {
      if ((*(_BYTE *)(v2 + 198) & 1) == 0)
      {
        if (gLogDatapath)
        {
          uint64_t v9 = (os_log_s *)__nwlog_obj();
          BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
          uint64_t v2 = a1[7];
          if (v10)
          {
            int v13 = 136446722;
            uint64_t v14 = "nw_http_redirect_process_block_invoke";
            __int16 v15 = 2082;
            uint64_t v16 = v2 + 114;
            __int16 v17 = 2080;
            char v18 = " ";
            _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sReceived new request metadata from redirect handler",  (uint8_t *)&v13,  0x20u);
            uint64_t v2 = a1[7];
          }
        }
      }

      nw_protocol_plugin_metadata_resume_input(v2 + 200, 3);
      id v3 = nw_context_copy_registered_endpoint(*(void **)(a1[7] + 672LL), *(void **)(*(void *)(a1[5] + 8LL) + 40LL));
      nw_http_redirect_reissue( a1[7],  v3,  *(void **)(*(void *)(a1[6] + 8LL) + 40LL),  *(void *)(a1[7] + 560LL),  *(void **)(*(void *)(a1[4] + 8LL) + 40LL));
      if (v3) {
        os_release(v3);
      }
    }

    else
    {
      uint64_t v5 = *(void *)(v2 + 48);
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 24);
        if (v6)
        {
          if (*(void *)(v6 + 64))
          {
            if ((*(_BYTE *)(v2 + 198) & 1) == 0)
            {
              if (gLogDatapath)
              {
                unsigned int v11 = (os_log_s *)__nwlog_obj();
                BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);
                uint64_t v2 = a1[7];
                if (v12)
                {
                  int v13 = 136446722;
                  uint64_t v14 = "nw_http_redirect_process_block_invoke";
                  __int16 v15 = 2082;
                  uint64_t v16 = v2 + 114;
                  __int16 v17 = 2080;
                  char v18 = " ";
                  _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sReceived no request metadata from redirect handler",  (uint8_t *)&v13,  0x20u);
                  uint64_t v2 = a1[7];
                }
              }
            }

            nw_protocol_plugin_metadata_resume_input(v2 + 200, 1);
            *(_BYTE *)(a1[7] + 692LL) &= ~0x10u;
            nw_protocol_input_available(*(void **)(a1[7] + 48LL), a1[7]);
          }
        }
      }
    }
  }

  else
  {
    uint64_t v4 = a1[7];
    if ((*(_BYTE *)(v4 + 198) & 1) == 0)
    {
      if (gLogDatapath)
      {
        BOOL v7 = (os_log_s *)__nwlog_obj();
        BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
        uint64_t v4 = a1[7];
        if (v8)
        {
          int v13 = 136446722;
          uint64_t v14 = "nw_http_redirect_process_block_invoke";
          __int16 v15 = 2082;
          uint64_t v16 = v4 + 114;
          __int16 v17 = 2080;
          char v18 = " ";
          _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sDeferred destroy when coming back from callout",  (uint8_t *)&v13,  0x20u);
          uint64_t v4 = a1[7];
        }
      }
    }

    nw_http_redirect_destroy(v4);
  }

const char *___ZL30nw_http_redirect_copy_metadataP25nw_protocol_http_redirectP11nw_endpointP20nw_protocol_metadatab_block_invoke_3( uint64_t a1, const char *a2)
{
  BOOL result = *(const char **)(a1 + 40);
  if (a2 && result)
  {
    BOOL result = (const char *)strcmp(result, a2);
    BOOL v4 = (_DWORD)result == 0;
  }

  else
  {
    BOOL v4 = result == a2;
  }

  char v5 = v4;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v5;
  return result;
}

uint64_t __Block_byref_object_copy__23(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(result + 4_Block_object_dispose(va, 8) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0LL;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__24(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    uint64_t v2 = *(const void **)(a1 + 40);
    if (v2) {
      CFRelease(v2);
    }
  }

  *(void *)(a1 + 40) = 0LL;
}

void ___ZL30nw_http_redirect_copy_endpointP25nw_protocol_http_redirectP20nw_protocol_metadata_block_invoke_25( uint64_t a1, char *__s)
{
  CFIndex v4 = strlen(__s);
  CFURLRef v5 = CFURLCreateAbsoluteURLWithBytes( (CFAllocatorRef)*MEMORY[0x189604DB0],  (const UInt8 *)__s,  v4,  0x600u,  *(CFURLRef *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL),  0);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
  char v7 = *(_BYTE *)(v6 + 48);
  if ((v7 & 1) != 0)
  {
    BOOL v8 = *(const void **)(v6 + 40);
    if (v8)
    {
      CFRelease(v8);
      char v7 = *(_BYTE *)(v6 + 48);
    }
  }

  *(void *)(v6 + 40) = v5;
  *(_BYTE *)(v6 + 4_Block_object_dispose(va, 8) = v7 | 1;
}

void ___ZL39nw_protocol_http_redirect_get_callbacksv_block_invoke()
{
  qword_18C592DA8 = (uint64_t)nw_protocol_common_get_input_frames;
  unk_18C592DB0 = nw_protocol_common_get_output_frames;
  qword_18C592DC8 = (uint64_t)nw_protocol_common_get_parameters;
  unk_18C592DD0 = nw_protocol_common_get_path;
  qword_18C592DD8 = (uint64_t)nw_protocol_common_get_local_endpoint;
  unk_18C592DE0 = nw_protocol_common_get_remote_endpoint;
  qword_18C592D68 = (uint64_t)nw_protocol_common_replace_input_handler;
  unk_18C592D70 = nw_protocol_common_connect;
  qword_18C592D78 = (uint64_t)nw_protocol_common_disconnect;
  unk_18C592D80 = nw_protocol_common_connected;
  qword_18C592D98 = (uint64_t)nw_protocol_common_input_available;
  unk_18C592DA0 = nw_protocol_common_output_available;
  qword_18C592E18 = (uint64_t)nw_protocol_common_output_finished;
  unk_18C592E20 = nw_protocol_common_get_output_local_endpoint;
  qword_18C592E60 = (uint64_t)nw_protocol_common_input_flush;
  qword_18C592D88 = (uint64_t)nw_protocol_common_disconnected;
  unk_18C592D90 = nw_protocol_common_error;
  qword_18C592E50 = (uint64_t)nw_protocol_common_get_message_properties;
  unk_18C592E58 = nw_protocol_common_reset;
  qword_18C592E38 = (uint64_t)nw_protocol_common_copy_info;
  qword_18C592E08 = (uint64_t)nw_protocol_common_supports_external_data;
  unk_18C592E10 = nw_protocol_common_input_finished;
  qword_18C592E28 = (uint64_t)nw_protocol_common_get_output_interface;
  unk_18C592E30 = nw_protocol_common_waiting_for_output;
  qword_18C592DE8 = (uint64_t)nw_protocol_common_register_notification;
  unk_18C592DF0 = nw_protocol_common_unregister_notification;
  qword_18C592DF8 = (uint64_t)nw_protocol_common_notify;
  unk_18C592E00 = nw_protocol_common_updated_path;
  qword_18C592DB8 = (uint64_t)nw_protocol_common_finalize_output_frames;
  unk_18C592DC0 = nw_protocol_common_link_state;
  nw_protocol_http_redirect_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_common_add_input_handler;
  unk_18C592D60 = nw_protocol_http_redirect_remove_input_handler;
}

uint64_t nw_protocol_http_redirect_remove_input_handler(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      v15[0] = MEMORY[0x1895F87A8];
      v15[1] = 0x40000000LL;
      v15[2] = ___ZL46nw_protocol_http_redirect_remove_input_handlerP11nw_protocolS0_b_block_invoke;
      v15[3] = &__block_descriptor_tmp_51;
      v15[4] = handle;
      v13[0] = MEMORY[0x1895F87A8];
      v13[1] = 0x40000000LL;
      v13[2] = ___ZL46nw_protocol_http_redirect_remove_input_handlerP11nw_protocolS0_b_block_invoke_2;
      v13[3] = &__block_descriptor_tmp_52;
      char v14 = a3;
      v13[4] = handle;
      return nw_protocol_common_remove_input_handler_with_cleanup_blocks(a1, a2, a3, (uint64_t)v15, (uint64_t)v13);
    }

    __nwlog_obj();
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v19 = "nw_protocol_http_redirect_remove_input_handler";
    CFURLRef v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v17 = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = v17;
      if (os_log_type_enabled(v6, v17))
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v19 = "nw_protocol_http_redirect_remove_input_handler";
        BOOL v8 = "%{public}s called with null http_redirect";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (!v16)
    {
      uint64_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = v17;
      if (os_log_type_enabled(v6, v17))
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v19 = "nw_protocol_http_redirect_remove_input_handler";
        BOOL v8 = "%{public}s called with null http_redirect, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v6 = (os_log_s *)__nwlog_obj();
    os_log_type_t v7 = v17;
    BOOL v12 = os_log_type_enabled(v6, v17);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v19 = "nw_protocol_http_redirect_remove_input_handler";
        BOOL v8 = "%{public}s called with null http_redirect, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v12)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v19 = "nw_protocol_http_redirect_remove_input_handler";
      __int16 v20 = 2082;
      char v21 = backtrace_string;
      unsigned int v11 = "%{public}s called with null http_redirect, dumping backtrace:%{public}s";
      goto LABEL_21;
    }

    goto LABEL_22;
  }

  __nwlog_obj();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v19 = "nw_protocol_http_redirect_remove_input_handler";
  CFURLRef v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v17 = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (v17 != OS_LOG_TYPE_FAULT)
  {
    if (!v16)
    {
      uint64_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = v17;
      if (os_log_type_enabled(v6, v17))
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v19 = "nw_protocol_http_redirect_remove_input_handler";
        BOOL v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v6 = (os_log_s *)__nwlog_obj();
    os_log_type_t v7 = v17;
    BOOL v10 = os_log_type_enabled(v6, v17);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v19 = "nw_protocol_http_redirect_remove_input_handler";
        BOOL v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v10)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v19 = "nw_protocol_http_redirect_remove_input_handler";
      __int16 v20 = 2082;
      char v21 = backtrace_string;
      unsigned int v11 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v6, v7, v11, buf, 0x16u);
    }

void ___ZL46nw_protocol_http_redirect_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 32);
  if (gLogDatapath)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v8 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v9 = 136446210;
      BOOL v10 = "nw_protocol_plugin_metadata_teardown";
      _os_log_impl(&dword_181A5C000, v8, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&v9, 0xCu);
    }
  }

  nw_protocol_plugin_metadata_reset((uint64_t *)(v2 + 200));
  *(void *)(v2 + 32_Block_object_dispose(va, 8) = 0LL;
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = *(_BYTE *)(v3 + 464);
  if ((v4 & 1) != 0)
  {
    CFURLRef v5 = *(const void **)(v3 + 456);
    if (v5)
    {
      _Block_release(v5);
      char v4 = *(_BYTE *)(v3 + 464);
    }
  }

  *(void *)(v3 + 456) = 0LL;
  *(_BYTE *)(v3 + 464) = v4 | 1;
  char v6 = *(_BYTE *)(v3 + 512);
  if ((v6 & 1) != 0)
  {
    os_log_type_t v7 = *(const void **)(v3 + 504);
    if (v7)
    {
      _Block_release(v7);
      char v6 = *(_BYTE *)(v3 + 512);
    }
  }

  *(void *)(v3 + 504) = 0LL;
  *(_BYTE *)(v3 + 512) = v6 | 1;
}

void ___ZL46nw_protocol_http_redirect_remove_input_handlerP11nw_protocolS0_b_block_invoke_2(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40)) {
    nw_http_redirect_destroy(*(void *)(a1 + 32));
  }
}

double __nw_protocol_http_redirect_identifier_block_invoke()
{
  *(void *)&double result = 0x100000005LL;
  qword_18C5927F8 = 0x100000005LL;
  return result;
}

void nw_context_dealloc(NWConcrete_nw_context *a1, int a2)
{
  uint64_t v84 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  char v4 = v3;
  if (!v3 || *((_DWORD *)v3 + 31) != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    CFURLRef v5 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136446466;
      char v77 = "nw_context_dealloc";
      __int16 v78 = 2114;
      __uint64_t v79 = (__uint64_t)v4;
      _os_log_impl(&dword_181A5C000, v5, OS_LOG_TYPE_INFO, "%{public}s Deallocating context %{public}@", buf, 0x16u);
    }
  }

  __uint64_t v75 = 0LL;
  pthread_threadid_np(0LL, &v75);
  if (*((_DWORD *)v4 + 30) == 4)
  {
    __int16 v46 = (unint64_t *)((char *)v4 + 112);
    __uint64_t v47 = v75;
    while (1)
    {
      unint64_t v48 = __ldaxr(v46);
      if (v48) {
        break;
      }
      if (!__stlxr(v47, v46))
      {
        char v49 = 1;
        goto LABEL_77;
      }
    }

    char v49 = 0;
    __clrex();
LABEL_77:
    if ((v49 & 1) == 0)
    {
      __nwlog_obj();
      BOOL v54 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)std::string buf = 136446722;
      char v77 = "nw_context_dealloc";
      __int16 v78 = 2048;
      __uint64_t v79 = v75;
      __int16 v80 = 2048;
      unint64_t v70 = v48;
      unint64_t v81 = v48;
      os_log_type_t v55 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v73 = 0;
      if (__nwlog_fault(v55, &type, &v73))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          BOOL v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v57 = type;
          if (os_log_type_enabled(v56, type))
          {
            *(_DWORD *)std::string buf = 136446722;
            char v77 = "nw_context_dealloc";
            __int16 v78 = 2048;
            __uint64_t v79 = v75;
            __int16 v80 = 2048;
            unint64_t v81 = v70;
            _os_log_impl( &dword_181A5C000,  v56,  v57,  "%{public}s Entering call, current TID=%llu, inline TID is already set to %llu",  buf,  0x20u);
          }
        }

        else if (v73)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          BOOL v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v63 = type;
          BOOL v64 = os_log_type_enabled(v56, type);
          if (backtrace_string)
          {
            if (v64)
            {
              *(_DWORD *)std::string buf = 136446978;
              char v77 = "nw_context_dealloc";
              __int16 v78 = 2048;
              __uint64_t v79 = v75;
              __int16 v80 = 2048;
              unint64_t v81 = v70;
              __int16 v82 = 2082;
              __int16 v83 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v56,  v63,  "%{public}s Entering call, current TID=%llu, inline TID is already set to %llu, dumping backtrace:%{public}s",  buf,  0x2Au);
            }

            free(backtrace_string);
            goto LABEL_109;
          }

          if (v64)
          {
            *(_DWORD *)std::string buf = 136446722;
            char v77 = "nw_context_dealloc";
            __int16 v78 = 2048;
            __uint64_t v79 = v75;
            __int16 v80 = 2048;
            unint64_t v81 = v70;
            _os_log_impl( &dword_181A5C000,  v56,  v63,  "%{public}s Entering call, current TID=%llu, inline TID is already set to %llu, no backtrace",  buf,  0x20u);
          }
        }

        else
        {
          __nwlog_obj();
          BOOL v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v68 = type;
          if (os_log_type_enabled(v56, type))
          {
            *(_DWORD *)std::string buf = 136446722;
            char v77 = "nw_context_dealloc";
            __int16 v78 = 2048;
            __uint64_t v79 = v75;
            __int16 v80 = 2048;
            unint64_t v81 = v70;
            _os_log_impl( &dword_181A5C000,  v56,  v68,  "%{public}s Entering call, current TID=%llu, inline TID is already set to %llu, backtrace limit exceeded",  buf,  0x20u);
          }
        }
      }

void sub_181D009E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
}

void ___ZL18nw_context_deallocP21NWConcrete_nw_contextb_block_invoke(uint64_t a1)
{
}

uint64_t ___ZL26nw_context_dealloc_globalsP21NWConcrete_nw_context_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  nw_hash_node_get_object(a2);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue();
  extra = (uint64_t *)nw_hash_node_get_extra(a2);
  uint64_t v5 = *extra;
  id v6 = v3;
  os_log_type_t v7 = v6;
  if (!v6)
  {
    __nwlog_obj();
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    __int16 v33 = "nw_protocol_definition_deallocate_globals";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v33 = "nw_protocol_definition_deallocate_globals";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null definition", buf, 0xCu);
      }
    }

    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)std::string buf = 136446466;
          __int16 v33 = "nw_protocol_definition_deallocate_globals";
          __int16 v34 = 2082;
          BOOL v35 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v20,  "%{public}s called with null definition, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v12) {
          goto LABEL_5;
        }
LABEL_56:
        free(v12);
        goto LABEL_5;
      }

      if (v21)
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v33 = "nw_protocol_definition_deallocate_globals";
        _os_log_impl(&dword_181A5C000, v13, v20, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v33 = "nw_protocol_definition_deallocate_globals";
        _os_log_impl( &dword_181A5C000,  v13,  v27,  "%{public}s called with null definition, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181D01130(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_context_purge_endpoints(NWConcrete_nw_context *a1, int a2)
{
  uint64_t v138 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  char v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v61 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_context_purge_endpoints";
    os_log_type_t v55 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v133 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v63 = type[0];
      if (os_log_type_enabled(v62, type[0]))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_purge_endpoints";
        _os_log_impl(&dword_181A5C000, v62, v63, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v133)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v92 = type[0];
      BOOL v93 = os_log_type_enabled(v62, type[0]);
      if (backtrace_string)
      {
        if (v93)
        {
          *(_DWORD *)std::string buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_context_purge_endpoints";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v62,  v92,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_176:
        __uint64_t v50 = 0LL;
        if (!v55) {
          goto LABEL_60;
        }
        goto LABEL_182;
      }

      if (v93)
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_purge_endpoints";
        _os_log_impl(&dword_181A5C000, v62, v92, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v111 = type[0];
      if (os_log_type_enabled(v62, type[0]))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_purge_endpoints";
        _os_log_impl( &dword_181A5C000,  v62,  v111,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_176;
  }

  uint64_t v5 = v3;
  id v6 = v5;
  if ((*((_BYTE *)v5 + 136) & 8) == 0) {
    dispatch_assert_queue_V2(*((dispatch_queue_t *)v5 + 1));
  }

  if ((*((_BYTE *)v6 + 136) & 0x24) == 0)
  {
    __uint64_t v50 = v4;
    __nwlog_obj();
    BOOL v64 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_context_purge_endpoints";
    os_log_type_t v55 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v133 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v65 = type[0];
      if (os_log_type_enabled(v56, type[0]))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_purge_endpoints";
        _os_log_impl( &dword_181A5C000,  v56,  v65,  "%{public}s called with null (context->is_implicit || context->is_isolated_context)",  buf,  0xCu);
      }

      goto LABEL_180;
    }

    if (!v133)
    {
      __nwlog_obj();
      BOOL v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v112 = type[0];
      if (os_log_type_enabled(v56, type[0]))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_purge_endpoints";
        _os_log_impl( &dword_181A5C000,  v56,  v112,  "%{public}s called with null (context->is_implicit || context->is_isolated_context), backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_180;
    }

    char v58 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v94 = type[0];
    BOOL v95 = os_log_type_enabled(v56, type[0]);
    if (!v58)
    {
      if (v95)
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_purge_endpoints";
        _os_log_impl( &dword_181A5C000,  v56,  v94,  "%{public}s called with null (context->is_implicit || context->is_isolated_context), no backtrace",  buf,  0xCu);
      }

      goto LABEL_180;
    }

    if (v95)
    {
      *(_DWORD *)std::string buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_context_purge_endpoints";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = v58;
      _os_log_impl( &dword_181A5C000,  v56,  v94,  "%{public}s called with null (context->is_implicit || context->is_isolated_context), dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_123;
  }

  uint64_t v7 = *((void *)v6 + 3);
  if (!*(void *)(v7 + 32) || !*(void *)(v7 + 40) || !*(void *)(v7 + 48))
  {
    __uint64_t v50 = v4;
    __nwlog_obj();
    BOOL v54 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_context_purge_endpoints";
    os_log_type_t v55 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v133 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v57 = type[0];
      if (os_log_type_enabled(v56, type[0]))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_purge_endpoints";
        _os_log_impl( &dword_181A5C000,  v56,  v57,  "%{public}s called with null (context->cache->address_endpoints != NULL && context->cache->host_endpoints != NU LL && context->cache->other_endpoints != NULL)",  buf,  0xCu);
      }

void sub_181D02A98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL36nw_context_purge_endpoint_hash_tableP21NWConcrete_nw_contextP13nw_hash_tablePKc_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  object = (char *)nw_hash_node_get_object(a2);
  v27[0] = MEMORY[0x1895F87A8];
  v27[1] = 3221225472LL;
  v27[2] = ___ZL36nw_context_purge_endpoint_hash_tableP21NWConcrete_nw_contextP13nw_hash_tablePKc_block_invoke_2;
  v27[3] = &unk_189BB8550;
  os_log_type_t v29 = object;
  id v28 = *(id *)(a1 + 32);
  nw_hash_table_apply(object, (uint64_t)v27);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v6 = (id)gLogObj;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 48);
  *(_DWORD *)std::string buf = 136446978;
  uint64_t v31 = "nw_context_purge_endpoint_hash_table_block_invoke";
  __int16 v32 = 2114;
  uint64_t v33 = v7;
  __int16 v34 = 2080;
  uint64_t v35 = v8;
  __int16 v36 = 2048;
  uint64_t v37 = a2;
  unsigned int v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (__nwlog_fault(v9, &type, &v25))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned int v10 = (os_log_s *)(id)gLogObj;
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        uint64_t v13 = *(void *)(a1 + 48);
        *(_DWORD *)std::string buf = 136446978;
        uint64_t v31 = "nw_context_purge_endpoint_hash_table_block_invoke";
        __int16 v32 = 2114;
        uint64_t v33 = v12;
        __int16 v34 = 2080;
        uint64_t v35 = v13;
        __int16 v36 = 2048;
        uint64_t v37 = a2;
        _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s %{public}@ failed to remove %s hash table for node %p",  buf,  0x2Au);
      }
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned int v10 = (os_log_s *)(id)gLogObj;
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v17)
        {
          uint64_t v18 = *(void *)(a1 + 32);
          uint64_t v19 = *(void *)(a1 + 48);
          *(_DWORD *)std::string buf = 136447234;
          uint64_t v31 = "nw_context_purge_endpoint_hash_table_block_invoke";
          __int16 v32 = 2114;
          uint64_t v33 = v18;
          __int16 v34 = 2080;
          uint64_t v35 = v19;
          __int16 v36 = 2048;
          uint64_t v37 = a2;
          __int16 v38 = 2082;
          uint64_t v39 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v16,  "%{public}s %{public}@ failed to remove %s hash table for node %p, dumping backtrace:%{public}s",  buf,  0x34u);
        }

        free(backtrace_string);
        if (v9) {
          goto LABEL_9;
        }
        goto LABEL_10;
      }

      if (v17)
      {
        uint64_t v23 = *(void *)(a1 + 32);
        uint64_t v24 = *(void *)(a1 + 48);
        *(_DWORD *)std::string buf = 136446978;
        uint64_t v31 = "nw_context_purge_endpoint_hash_table_block_invoke";
        __int16 v32 = 2114;
        uint64_t v33 = v23;
        __int16 v34 = 2080;
        uint64_t v35 = v24;
        __int16 v36 = 2048;
        uint64_t v37 = a2;
        _os_log_impl( &dword_181A5C000,  v10,  v16,  "%{public}s %{public}@ failed to remove %s hash table for node %p, no backtrace",  buf,  0x2Au);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned int v10 = (os_log_s *)(id)gLogObj;
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        uint64_t v21 = *(void *)(a1 + 32);
        uint64_t v22 = *(void *)(a1 + 48);
        *(_DWORD *)std::string buf = 136446978;
        uint64_t v31 = "nw_context_purge_endpoint_hash_table_block_invoke";
        __int16 v32 = 2114;
        uint64_t v33 = v21;
        __int16 v34 = 2080;
        uint64_t v35 = v22;
        __int16 v36 = 2048;
        uint64_t v37 = a2;
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s %{public}@ failed to remove %s hash table for node %p, backtrace limit exceeded",  buf,  0x2Au);
      }
    }
  }

  if (v9) {
LABEL_9:
  }
    free(v9);
LABEL_10:

  return 1LL;
}

uint64_t ___ZL51nw_context_get_active_instance_count_for_hash_tableP21NWConcrete_nw_contextP13nw_hash_table_block_invoke( uint64_t a1, uint64_t a2)
{
  object = (char *)nw_hash_node_get_object(a2);
  v7[0] = MEMORY[0x1895F87A8];
  v7[1] = 3221225472LL;
  v7[2] = ___ZL51nw_context_get_active_instance_count_for_hash_tableP21NWConcrete_nw_contextP13nw_hash_table_block_invoke_2;
  v7[3] = &unk_189BC8650;
  __int128 v6 = *(_OWORD *)(a1 + 32);
  id v4 = (id)v6;
  __int128 v8 = v6;
  nw_hash_table_apply(object, (uint64_t)v7);

  return 1LL;
}

uint64_t ___ZL26nw_context_purge_endpointsP21NWConcrete_nw_contextb_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 40));
}

uint64_t ___ZL51nw_context_get_active_instance_count_for_hash_tableP21NWConcrete_nw_contextP13nw_hash_table_block_invoke_2( uint64_t a1, uint64_t a2)
{
  id v3 = (id)nw_hash_node_get_object(a2);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) += nw_context_endpoint_get_active_instance_count( *(void **)(a1 + 32),  v3);

  return 1LL;
}

void sub_181D02FEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_context_copy_globals_context(NWConcrete_nw_context *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if ((*((_BYTE *)v1 + 136) & 5) != 0)
  {
    id v3 = (NWConcrete_nw_context *)*((void *)v1 + 5);
    if (!v3) {
      id v3 = v1;
    }
  }

  else
  {
    if (nw_context_copy_implicit_context::onceToken != -1) {
      dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
    }
    id v3 = (NWConcrete_nw_context *)nw_context_copy_implicit_context::implicit_context;
  }

  id v4 = v3;
  if (*((void *)v4 + 4)) {
    goto LABEL_11;
  }
  uint64_t v5 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init(v5);
  __int128 v6 = (os_log_s *)(id)gLogObj;
  os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  uint64_t v7 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v7);
  if (!result)
  {
    free(v7);
LABEL_11:

    return (BOOL)v4;
  }

  __break(1u);
  return result;
}

uint64_t __nw_context_endpoint_get_active_instance_count_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v3 = (id)nw_hash_node_get_object(a2);
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v19 = "nw_endpoint_get_active_instance_count";
    __int128 v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v8, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        unsigned int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          uint64_t v19 = "nw_endpoint_get_active_instance_count";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }

      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        unsigned int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)std::string buf = 136446466;
            uint64_t v19 = "nw_endpoint_get_active_instance_count";
            __int16 v20 = 2082;
            uint64_t v21 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (v13)
        {
          *(_DWORD *)std::string buf = 136446210;
          uint64_t v19 = "nw_endpoint_get_active_instance_count";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        unsigned int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          uint64_t v19 = "nw_endpoint_get_active_instance_count";
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181D03434(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_context_get_isolate_protocol_cache(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    BOOL v3 = (*((_BYTE *)v1 + 136) & 3) != 0;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)std::string buf = 136446210;
  char v16 = "nw_context_get_isolate_protocol_cache";
  __int128 v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        char v16 = "nw_context_get_isolate_protocol_cache";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)std::string buf = 136446466;
          char v16 = "nw_context_get_isolate_protocol_cache";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)std::string buf = 136446210;
        char v16 = "nw_context_get_isolate_protocol_cache";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        char v16 = "nw_context_get_isolate_protocol_cache";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void __nw_context_copy_implicit_context_block_invoke()
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  BOOL v0 = -[NWConcrete_nw_context initWithIdentifier:]( objc_alloc(&OBJC_CLASS___NWConcrete_nw_context),  "Default Network Context");
  id v1 = (void *)nw_context_copy_implicit_context::implicit_context;
  nw_context_copy_implicit_context::implicit_context = v0;

  uint64_t v2 = (_DWORD *)nw_context_copy_implicit_context::implicit_context;
  *(_BYTE *)(nw_context_copy_implicit_context::implicit_context + 136) |= 4u;
  BOOL v3 = getenv("DEFAULT_NETWORK_PRIVACY_LEVEL");
  if (v3)
  {
    id v4 = v3;
    if (!strcasecmp(v3, "public"))
    {
      int v6 = 1;
      goto LABEL_11;
    }

    if (strcasecmp(v4, "private"))
    {
      if (!strcasecmp(v4, "sensitive"))
      {
        int v6 = 3;
        goto LABEL_11;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        int v7 = 136446466;
        os_log_type_t v8 = "nw_context_get_default_implicit_level";
        __int16 v9 = 2082;
        os_log_type_t v10 = v4;
        _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_ERROR,  "%{public}s Unsupported privacy level: %{public}s",  (uint8_t *)&v7,  0x16u);
      }

      uint64_t v2 = (_DWORD *)nw_context_copy_implicit_context::implicit_context;
    }
  }

  int v6 = 2;
LABEL_11:
  v2[31] = v6;
  nw_context_activate(v2);
}

void *nw_context_endpoint_table_get_key(os_unfair_lock_s *a1, unsigned int *a2)
{
  BOOL some_node = nw_hash_table_get_some_node(a1);
  nw_hash_node_get_object(some_node);
  BOOL v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

uint64_t nw_context_endpoint_key_hash(void *a1)
{
  return [a1 getHash];
}

uint64_t nw_context_endpoint_table_matches_key(os_unfair_lock_s *a1, void *a2)
{
  BOOL v3 = a2;
  BOOL some_node = nw_hash_table_get_some_node(a1);
  nw_hash_node_get_object(some_node);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t is_equal = nw_endpoint_is_equal(v3, v5, 0LL);

  return is_equal;
}

void sub_181D03918(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_context_endpoint_table_release(os_unfair_lock_s *a1, uint64_t a2)
{
  if (a1) {
    _nw_hash_table_release(a1, a2);
  }
}

BOOL nw_context_object_matches_key(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t nw_context_timer_object_get_key(void *a1, unsigned int *a2)
{
  return a1[3];
}

BOOL nw_context_timer_object_matches_key(void *a1, const void *a2)
{
  return a1[3] == (void)a2;
}

uint64_t ___ZL36nw_context_purge_endpoint_hash_tableP21NWConcrete_nw_contextP13nw_hash_tablePKc_block_invoke_2( uint64_t a1, uint64_t a2)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  id v4 = (id)nw_hash_node_get_object(a2);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v5 = (id)gLogObj;
  uint64_t v6 = *(void *)(a1 + 32);
  *(_DWORD *)std::string buf = 136446978;
  BOOL v26 = "nw_context_purge_endpoint_hash_table_block_invoke_2";
  __int16 v27 = 2114;
  uint64_t v28 = v6;
  __int16 v29 = 2082;
  logging_description = nw_endpoint_get_logging_description(v4);
  __int16 v31 = 2048;
  uint64_t v32 = a2;
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (__nwlog_fault(v7, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (os_log_s *)(id)gLogObj;
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        uint64_t v10 = *(void *)(a1 + 32);
        uint64_t v11 = nw_endpoint_get_logging_description(v4);
        *(_DWORD *)std::string buf = 136446978;
        BOOL v26 = "nw_context_purge_endpoint_hash_table_block_invoke";
        __int16 v27 = 2114;
        uint64_t v28 = v10;
        __int16 v29 = 2082;
        logging_description = v11;
        __int16 v31 = 2048;
        uint64_t v32 = a2;
        _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s %{public}@ failed to remove endpoint %{public}s for node %p",  buf,  0x2Au);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (os_log_s *)(id)gLogObj;
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v15)
        {
          uint64_t v16 = *(void *)(a1 + 32);
          __int16 v17 = nw_endpoint_get_logging_description(v4);
          *(_DWORD *)std::string buf = 136447234;
          BOOL v26 = "nw_context_purge_endpoint_hash_table_block_invoke";
          __int16 v27 = 2114;
          uint64_t v28 = v16;
          __int16 v29 = 2082;
          logging_description = v17;
          __int16 v31 = 2048;
          uint64_t v32 = a2;
          __int16 v33 = 2082;
          __int16 v34 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v14,  "%{public}s %{public}@ failed to remove endpoint %{public}s for node %p, dumping backtrace:%{public}s",  buf,  0x34u);
        }

        free(backtrace_string);
        if (v7) {
          goto LABEL_9;
        }
        goto LABEL_10;
      }

      if (v15)
      {
        uint64_t v21 = *(void *)(a1 + 32);
        uint64_t v22 = nw_endpoint_get_logging_description(v4);
        *(_DWORD *)std::string buf = 136446978;
        BOOL v26 = "nw_context_purge_endpoint_hash_table_block_invoke";
        __int16 v27 = 2114;
        uint64_t v28 = v21;
        __int16 v29 = 2082;
        logging_description = v22;
        __int16 v31 = 2048;
        uint64_t v32 = a2;
        _os_log_impl( &dword_181A5C000,  v8,  v14,  "%{public}s %{public}@ failed to remove endpoint %{public}s for node %p, no backtrace",  buf,  0x2Au);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (os_log_s *)(id)gLogObj;
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        uint64_t v19 = *(void *)(a1 + 32);
        __int16 v20 = nw_endpoint_get_logging_description(v4);
        *(_DWORD *)std::string buf = 136446978;
        BOOL v26 = "nw_context_purge_endpoint_hash_table_block_invoke";
        __int16 v27 = 2114;
        uint64_t v28 = v19;
        __int16 v29 = 2082;
        logging_description = v20;
        __int16 v31 = 2048;
        uint64_t v32 = a2;
        _os_log_impl( &dword_181A5C000,  v8,  v18,  "%{public}s %{public}@ failed to remove endpoint %{public}s for node %p, backtrace limit exceeded",  buf,  0x2Au);
      }
    }
  }

  if (v7) {
LABEL_9:
  }
    free(v7);
LABEL_10:

  return 1LL;
}

void sub_181D03D88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_context_cancel(void *a1)
{
  uint64_t v66 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    __uint64_t v56 = 0LL;
    pthread_threadid_np(0LL, &v56);
    if (*((_DWORD *)v1 + 30) != 4) {
      goto LABEL_3;
    }
    __int16 v20 = (unint64_t *)(v1 + 112);
    __uint64_t v21 = v56;
    while (1)
    {
      unint64_t v22 = __ldaxr(v20);
      if (v22) {
        break;
      }
      if (!__stlxr(v21, v20))
      {
        char v23 = 1;
        goto LABEL_50;
      }
    }

    char v23 = 0;
    __clrex();
LABEL_50:
    if ((v23 & 1) != 0)
    {
LABEL_3:
      if (*((_DWORD *)v1 + 31) != 4)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v2 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 136446466;
          os_log_type_t v59 = "nw_context_cancel";
          __int16 v60 = 2114;
          __uint64_t v61 = (__uint64_t)v1;
          _os_log_impl(&dword_181A5C000, v2, OS_LOG_TYPE_INFO, "%{public}s Cancelling context %{public}@", buf, 0x16u);
        }
      }

      uint64_t v3 = nw_context_copy_globals_context((NWConcrete_nw_context *)v1);
      id v4 = (void *)v3;
      if ((*(_BYTE *)(v3 + 136) & 8) != 0)
      {
        uint64_t v5 = *(void *)(v3 + 32);
        uint64_t v6 = *(void *)(v5 + 100);
        if (v6 && *(void *)(v6 + 24) != *(void *)(v6 + 16)
          || (uint64_t v7 = *(void *)(v5 + 116)) != 0 && *(void *)(v7 + 24) != *(void *)(v7 + 16))
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v8 = (id)gLogObj;
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v59 = "nw_context_cancel";
          os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v55 = 0;
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v10 = (os_log_s *)(id)gLogObj;
            os_log_type_t v11 = type;
            if (os_log_type_enabled(v10, type))
            {
              *(_DWORD *)std::string buf = 136446210;
              os_log_type_t v59 = "nw_context_cancel";
              _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s Calling cancel context while blocks remain on the inline queues",  buf,  0xCu);
            }
          }

          else if (v55)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v10 = (os_log_s *)(id)gLogObj;
            os_log_type_t v13 = type;
            BOOL v14 = os_log_type_enabled(v10, type);
            if (backtrace_string)
            {
              if (v14)
              {
                *(_DWORD *)std::string buf = 136446466;
                os_log_type_t v59 = "nw_context_cancel";
                __int16 v60 = 2082;
                __uint64_t v61 = (__uint64_t)backtrace_string;
                _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s Calling cancel context while blocks remain on the inline queues, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(backtrace_string);
              if (!v9) {
                goto LABEL_33;
              }
              goto LABEL_32;
            }

            if (v14)
            {
              *(_DWORD *)std::string buf = 136446210;
              os_log_type_t v59 = "nw_context_cancel";
              _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s Calling cancel context while blocks remain on the inline queues, no backtrace",  buf,  0xCu);
            }
          }

          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v10 = (os_log_s *)(id)gLogObj;
            os_log_type_t v15 = type;
            if (os_log_type_enabled(v10, type))
            {
              *(_DWORD *)std::string buf = 136446210;
              os_log_type_t v59 = "nw_context_cancel";
              _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s Calling cancel context while blocks remain on the inline queues, backtrace limit exceeded",  buf,  0xCu);
            }
          }

          goto LABEL_30;
        }

        *(_BYTE *)(v3 + 136) |= 0x10u;
        if ((v1[136] & 8) == 0) {
          goto LABEL_18;
        }
        __uint64_t v36 = v56;
        uint64_t v37 = (unint64_t *)(v1 + 112);
        while (1)
        {
          unint64_t v38 = __ldaxr(v37);
          if (v38 != v36) {
            break;
          }
          if (!__stlxr(0LL, v37))
          {
            char v39 = 1;
            goto LABEL_71;
          }
        }

        char v39 = 0;
        __clrex();
LABEL_71:
        if ((v39 & 1) != 0)
        {
LABEL_18:
          nw_context_dealloc((NWConcrete_nw_context *)v1, 1);
          goto LABEL_33;
        }

        __nwlog_obj();
        uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)std::string buf = 136446722;
        os_log_type_t v59 = "nw_context_cancel";
        __int16 v60 = 2048;
        __uint64_t v61 = v56;
        __int16 v62 = 2048;
        unint64_t v41 = v38;
        unint64_t v63 = v38;
        BOOL v42 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v55 = 0;
        if (__nwlog_fault(v42, &type, &v55))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            char v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v44 = type;
            if (os_log_type_enabled(v43, type))
            {
              *(_DWORD *)std::string buf = 136446722;
              os_log_type_t v59 = "nw_context_cancel";
              __int16 v60 = 2048;
              __uint64_t v61 = v56;
              __int16 v62 = 2048;
              unint64_t v63 = v41;
              _os_log_impl( &dword_181A5C000,  v43,  v44,  "%{public}s Exiting call, expected inline TID to be %llu but got %llu",  buf,  0x20u);
            }
          }

          else if (v55)
          {
            __uint64_t v50 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            char v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v51 = type;
            BOOL v52 = os_log_type_enabled(v43, type);
            if (v50)
            {
              if (v52)
              {
                *(_DWORD *)std::string buf = 136446978;
                os_log_type_t v59 = "nw_context_cancel";
                __int16 v60 = 2048;
                __uint64_t v61 = v56;
                __int16 v62 = 2048;
                unint64_t v63 = v41;
                __int16 v64 = 2082;
                os_log_type_t v65 = v50;
                _os_log_impl( &dword_181A5C000,  v43,  v51,  "%{public}s Exiting call, expected inline TID to be %llu but got %llu, dumping backtrace:%{public}s",  buf,  0x2Au);
              }

              free(v50);
              goto LABEL_115;
            }

            if (v52)
            {
              *(_DWORD *)std::string buf = 136446722;
              os_log_type_t v59 = "nw_context_cancel";
              __int16 v60 = 2048;
              __uint64_t v61 = v56;
              __int16 v62 = 2048;
              unint64_t v63 = v41;
              _os_log_impl( &dword_181A5C000,  v43,  v51,  "%{public}s Exiting call, expected inline TID to be %llu but got %llu, no backtrace",  buf,  0x20u);
            }
          }

          else
          {
            __nwlog_obj();
            char v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v54 = type;
            if (os_log_type_enabled(v43, type))
            {
              *(_DWORD *)std::string buf = 136446722;
              os_log_type_t v59 = "nw_context_cancel";
              __int16 v60 = 2048;
              __uint64_t v61 = v56;
              __int16 v62 = 2048;
              unint64_t v63 = v41;
              _os_log_impl( &dword_181A5C000,  v43,  v54,  "%{public}s Exiting call, expected inline TID to be %llu but got %llu, backtrace limit exceeded",  buf,  0x20u);
            }
          }
        }

void sub_181D04B10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_context_queue_block(void *a1, void *a2)
{
  uint64_t v51 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  uint64_t v6 = v4;
  if (v3)
  {
    if (v4)
    {
      uint64_t v7 = nw_context_copy_globals_context(v3);

      if ((*(_BYTE *)(v7 + 136) & 8) != 0)
      {
        if ((*(_BYTE *)(v7 + 136) & 0x10) != 0)
        {
          uint64_t v3 = (NWConcrete_nw_context *)v7;
          v6[2](v6);
          goto LABEL_7;
        }

        uint64_t v10 = *(void *)(*(void *)(v7 + 32) + 100LL);
        os_log_type_t v11 = _Block_copy(v6);
        nw_array_append(v10, v11);

        goto LABEL_6;
      }

      __nwlog_obj(v8, v9);
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)std::string buf = 136446210;
      os_log_type_t v48 = "nw_context_queue_block";
      os_log_type_t v25 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v45 = 0;
      uint64_t v26 = __nwlog_fault(v25, &type, &v45);
      if ((_DWORD)v26)
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj(v26, v27);
          uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v29 = type;
          if (os_log_type_enabled(v28, type))
          {
            *(_DWORD *)std::string buf = 136446210;
            os_log_type_t v48 = "nw_context_queue_block";
            _os_log_impl(&dword_181A5C000, v28, v29, "%{public}s called with null context->is_inline", buf, 0xCu);
          }
        }

        else if (v45)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj(backtrace_string, v39);
          uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v40 = type;
          BOOL v41 = os_log_type_enabled(v28, type);
          if (backtrace_string)
          {
            if (v41)
            {
              *(_DWORD *)std::string buf = 136446466;
              os_log_type_t v48 = "nw_context_queue_block";
              __int16 v49 = 2082;
              __uint64_t v50 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v28,  v40,  "%{public}s called with null context->is_inline, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(backtrace_string);
            goto LABEL_62;
          }

          if (v41)
          {
            *(_DWORD *)std::string buf = 136446210;
            os_log_type_t v48 = "nw_context_queue_block";
            _os_log_impl( &dword_181A5C000,  v28,  v40,  "%{public}s called with null context->is_inline, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          __nwlog_obj(v26, v27);
          uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v44 = type;
          if (os_log_type_enabled(v28, type))
          {
            *(_DWORD *)std::string buf = 136446210;
            os_log_type_t v48 = "nw_context_queue_block";
            _os_log_impl( &dword_181A5C000,  v28,  v44,  "%{public}s called with null context->is_inline, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

void sub_181D0524C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_context_queue_source_block(void *a1, void *a2)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  uint64_t v6 = v4;
  if (v3)
  {
    uint64_t v7 = nw_context_copy_globals_context(v3);

    if ((*(_BYTE *)(v7 + 136) & 8) != 0)
    {
      uint64_t v10 = *(void *)(*(void *)(v7 + 32) + 116LL);
      os_log_type_t v11 = _Block_copy(v6);
      nw_array_append(v10, v11);

      goto LABEL_4;
    }

    __nwlog_obj(v8, v9);
    os_log_type_t v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    BOOL v37 = "nw_context_queue_source_block";
    os_log_type_t v19 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    uint64_t v20 = __nwlog_fault(v19, &type, &v34);
    if (!(_DWORD)v20) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj(v20, v21);
      unint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        BOOL v37 = "nw_context_queue_source_block";
        _os_log_impl(&dword_181A5C000, v22, v23, "%{public}s called with null context->is_inline", buf, 0xCu);
      }
    }

    else if (v34)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj(backtrace_string, v29);
      unint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v30 = type;
      BOOL v31 = os_log_type_enabled(v22, type);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)std::string buf = 136446466;
          BOOL v37 = "nw_context_queue_source_block";
          __int16 v38 = 2082;
          uint64_t v39 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v22,  v30,  "%{public}s called with null context->is_inline, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_39;
      }

      if (v31)
      {
        *(_DWORD *)std::string buf = 136446210;
        BOOL v37 = "nw_context_queue_source_block";
        _os_log_impl( &dword_181A5C000,  v22,  v30,  "%{public}s called with null context->is_inline, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj(v20, v21);
      unint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v33 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        BOOL v37 = "nw_context_queue_source_block";
        _os_log_impl( &dword_181A5C000,  v22,  v33,  "%{public}s called with null context->is_inline, backtrace limit exceeded",  buf,  0xCu);
      }
    }

LABEL_39:
    if (v19) {
      free(v19);
    }

    goto LABEL_4;
  }

  __nwlog_obj(v4, v5);
  os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)std::string buf = 136446210;
  BOOL v37 = "nw_context_queue_source_block";
  os_log_type_t v13 = (void *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v34 = 0;
  uint64_t v14 = __nwlog_fault(v13, &type, &v34);
  if ((_DWORD)v14)
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj(v14, v15);
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        BOOL v37 = "nw_context_queue_source_block";
        _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v34)
    {
      uint64_t v24 = (char *)__nw_create_backtrace_string();
      __nwlog_obj(v24, v25);
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = type;
      BOOL v27 = os_log_type_enabled(v16, type);
      if (v24)
      {
        if (v27)
        {
          *(_DWORD *)std::string buf = 136446466;
          BOOL v37 = "nw_context_queue_source_block";
          __int16 v38 = 2082;
          uint64_t v39 = v24;
          _os_log_impl( &dword_181A5C000,  v16,  v26,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v24);
        goto LABEL_34;
      }

      if (v27)
      {
        *(_DWORD *)std::string buf = 136446210;
        BOOL v37 = "nw_context_queue_source_block";
        _os_log_impl(&dword_181A5C000, v16, v26, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj(v14, v15);
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        BOOL v37 = "nw_context_queue_source_block";
        _os_log_impl( &dword_181A5C000,  v16,  v32,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181D05740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_context_dequeue_source_block(void *a1, void *a2)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  uint64_t v6 = v4;
  if (v3)
  {
    uint64_t v7 = nw_context_copy_globals_context(v3);

    if ((*(_BYTE *)(v7 + 136) & 8) != 0)
    {
      uint64_t v10 = *(void *)(*(void *)(v7 + 32) + 116LL);
      os_log_type_t v11 = _Block_copy(v6);
      nw_array_remove_object(v10, (uint64_t)v11);

      goto LABEL_4;
    }

    __nwlog_obj(v8, v9);
    os_log_type_t v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    BOOL v37 = "nw_context_dequeue_source_block";
    os_log_type_t v19 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    uint64_t v20 = __nwlog_fault(v19, &type, &v34);
    if (!(_DWORD)v20) {
      goto LABEL_39;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj(v20, v21);
      unint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        BOOL v37 = "nw_context_dequeue_source_block";
        _os_log_impl(&dword_181A5C000, v22, v23, "%{public}s called with null context->is_inline", buf, 0xCu);
      }
    }

    else if (v34)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj(backtrace_string, v29);
      unint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v30 = type;
      BOOL v31 = os_log_type_enabled(v22, type);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)std::string buf = 136446466;
          BOOL v37 = "nw_context_dequeue_source_block";
          __int16 v38 = 2082;
          uint64_t v39 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v22,  v30,  "%{public}s called with null context->is_inline, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_39;
      }

      if (v31)
      {
        *(_DWORD *)std::string buf = 136446210;
        BOOL v37 = "nw_context_dequeue_source_block";
        _os_log_impl( &dword_181A5C000,  v22,  v30,  "%{public}s called with null context->is_inline, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj(v20, v21);
      unint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v33 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        BOOL v37 = "nw_context_dequeue_source_block";
        _os_log_impl( &dword_181A5C000,  v22,  v33,  "%{public}s called with null context->is_inline, backtrace limit exceeded",  buf,  0xCu);
      }
    }

LABEL_39:
    if (v19) {
      free(v19);
    }

    goto LABEL_4;
  }

  __nwlog_obj(v4, v5);
  os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)std::string buf = 136446210;
  BOOL v37 = "nw_context_dequeue_source_block";
  os_log_type_t v13 = (void *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v34 = 0;
  uint64_t v14 = __nwlog_fault(v13, &type, &v34);
  if ((_DWORD)v14)
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj(v14, v15);
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        BOOL v37 = "nw_context_dequeue_source_block";
        _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v34)
    {
      uint64_t v24 = (char *)__nw_create_backtrace_string();
      __nwlog_obj(v24, v25);
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = type;
      BOOL v27 = os_log_type_enabled(v16, type);
      if (v24)
      {
        if (v27)
        {
          *(_DWORD *)std::string buf = 136446466;
          BOOL v37 = "nw_context_dequeue_source_block";
          __int16 v38 = 2082;
          uint64_t v39 = v24;
          _os_log_impl( &dword_181A5C000,  v16,  v26,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v24);
        goto LABEL_34;
      }

      if (v27)
      {
        *(_DWORD *)std::string buf = 136446210;
        BOOL v37 = "nw_context_dequeue_source_block";
        _os_log_impl(&dword_181A5C000, v16, v26, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj(v14, v15);
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        BOOL v37 = "nw_context_dequeue_source_block";
        _os_log_impl( &dword_181A5C000,  v16,  v32,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181D05C34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_context_run_queued_blocks_inline(void *a1)
{
  uint64_t v80 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    os_log_type_t v73 = "nw_context_run_queued_blocks_inline";
    uint64_t v29 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v70) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v29, &v70, &type))
    {
      if (v70 == 17)
      {
        __nwlog_obj();
        os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v31 = v70;
        if (os_log_type_enabled(v30, (os_log_type_t)v70))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v73 = "nw_context_run_queued_blocks_inline";
          _os_log_impl(&dword_181A5C000, v30, v31, "%{public}s called with null context", buf, 0xCu);
        }
      }

      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v53 = v70;
        BOOL v54 = os_log_type_enabled(v30, (os_log_type_t)v70);
        if (backtrace_string)
        {
          if (v54)
          {
            *(_DWORD *)std::string buf = 136446466;
            os_log_type_t v73 = "nw_context_run_queued_blocks_inline";
            __int16 v74 = 2082;
            __uint64_t v75 = (__uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v30,  v53,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_77;
        }

        if (v54)
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v73 = "nw_context_run_queued_blocks_inline";
          _os_log_impl(&dword_181A5C000, v30, v53, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v58 = v70;
        if (os_log_type_enabled(v30, (os_log_type_t)v70))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v73 = "nw_context_run_queued_blocks_inline";
          _os_log_impl( &dword_181A5C000,  v30,  v58,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181D067F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_context_run_queued_blocks_inline_block_invoke_2(int a1, int a2, void *aBlock)
{
  uint64_t v3 = (void (**)(void))_Block_copy(aBlock);
  v3[2]();

  return 1LL;
}

void sub_181D06854(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_context_run_queued_blocks_inline_block_invoke(int a1, int a2, void *aBlock)
{
  uint64_t v3 = (void (**)(void))_Block_copy(aBlock);
  v3[2]();

  return 1LL;
}

void sub_181D06898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_context_set_privacy_level_internal_block_invoke(uint64_t a1)
{
  *(_DWORD *)(*(void *)(a1 + 32) + 124LL) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(*(void *)(a1 + 32) + 137LL) = *(_BYTE *)(*(void *)(a1 + 32) + 137LL) & 0xFE | *(_BYTE *)(a1 + 44);
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(os_unfair_lock_s **)(v2 + 40);
  if (v3)
  {
    os_unfair_lock_lock(v3 + 20);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 40LL) + 124LL) = *(_DWORD *)(a1 + 40);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 40LL) + 137LL) = *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 40LL)
                                                                            + 137LL) & 0xFE | *(_BYTE *)(a1 + 44);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 32) + 40LL) + 80LL));
    uint64_t v2 = *(void *)(a1 + 32);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 80));
}

uint64_t nw_context_get_do_not_log_trackers(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if ((v1[34]._os_unfair_lock_opaque & 0x48) == 0x40 && !dispatch_workloop_is_current())
    {
      os_unfair_lock_lock(v2 + 20);
      uint64_t v3 = BYTE1(v2[34]._os_unfair_lock_opaque) & 1;
      os_unfair_lock_unlock(v2 + 20);
    }

    else
    {
      uint64_t v3 = BYTE1(v2[34]._os_unfair_lock_opaque) & 1;
    }
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  return v3;
}

void nw_context_set_idle_handler(void *a1, void *a2, void *a3)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  uint64_t v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v5)
  {
    if (((_BYTE)v5[17] & 0x48) == 0x40 && !dispatch_workloop_is_current())
    {
      v22[0] = MEMORY[0x1895F87A8];
      v22[1] = 3221225472LL;
      v22[2] = __nw_context_set_idle_handler_block_invoke;
      v22[3] = &unk_189BC50A8;
      uint64_t v23 = v5;
      id v24 = v6;
      id v25 = v7;
      nw_queue_context_async(v23, v22);
    }

    else
    {
      objc_storeStrong(v5 + 8, a2);
      uint64_t v8 = _Block_copy(v7);
      id v9 = v5[9];
      v5[9] = v8;

      uint64_t v10 = (id *)v5[5];
      if (v10)
      {
        objc_storeStrong(v10 + 8, a2);
        BOOL v11 = _Block_copy(v7);
        uint64_t v12 = v5[5];
        uint64_t v13 = (void *)v12[9];
        v12[9] = v11;
      }
    }

    goto LABEL_7;
  }

  __nwlog_obj();
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v29 = "nw_context_set_idle_handler";
  uint64_t v15 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (__nwlog_fault(v15, &type, &v26))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v29 = "nw_context_set_idle_handler";
        _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v16, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)std::string buf = 136446466;
          uint64_t v29 = "nw_context_set_idle_handler";
          __int16 v30 = 2082;
          os_log_type_t v31 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v16,  v19,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }

      if (v20)
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v29 = "nw_context_set_idle_handler";
        _os_log_impl(&dword_181A5C000, v16, v19, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v29 = "nw_context_set_idle_handler";
        _os_log_impl( &dword_181A5C000,  v16,  v21,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181D06D60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_context_set_idle_handler_block_invoke(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(a1 + 48));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 72);
  *(void *)(v3 + 72) = v2;

  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(os_unfair_lock_s **)(v5 + 40);
  if (v6)
  {
    os_unfair_lock_lock(v6 + 20);
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 40LL) + 64LL), *(id *)(a1 + 40));
    id v7 = _Block_copy(*(const void **)(a1 + 48));
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 40LL);
    id v9 = *(void **)(v8 + 72);
    *(void *)(v8 + 72) = v7;

    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 32) + 40LL) + 80LL));
    uint64_t v5 = *(void *)(a1 + 32);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 80));
}

void nw_context_require_encrypted_name_resolution(void *a1, uint64_t a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a3;
  if (!v5)
  {
    __nwlog_obj();
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    id v25 = "nw_context_require_encrypted_name_resolution";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v23 = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v11, &v23, &v22))
    {
      if (v23 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = v23;
        if (os_log_type_enabled(v12, v23))
        {
          *(_DWORD *)std::string buf = 136446210;
          id v25 = "nw_context_require_encrypted_name_resolution";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null context", buf, 0xCu);
        }
      }

      else if (v22)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = v23;
        BOOL v16 = os_log_type_enabled(v12, v23);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)std::string buf = 136446466;
            id v25 = "nw_context_require_encrypted_name_resolution";
            __int16 v26 = 2082;
            BOOL v27 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_30;
        }

        if (v16)
        {
          *(_DWORD *)std::string buf = 136446210;
          id v25 = "nw_context_require_encrypted_name_resolution";
          _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v17 = v23;
        if (os_log_type_enabled(v12, v23))
        {
          *(_DWORD *)std::string buf = 136446210;
          id v25 = "nw_context_require_encrypted_name_resolution";
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181D071C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void nw_context_update_default_required_encrypted_name_resolution(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  id v2 = a2;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v3 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = "";
    if (!v2) {
      uint64_t v4 = "out";
    }
    int v11 = 136446466;
    uint64_t v12 = "nw_context_update_default_required_encrypted_name_resolution";
    __int16 v13 = 2080;
    uint64_t v14 = v4;
    _os_log_impl( &dword_181A5C000,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}s Requiring default encrypted resolution with%s fallback config",  (uint8_t *)&v11,  0x16u);
  }

  if (v2)
  {
    id v5 = nw_resolver_config_copy_plist_data_ref(v2);
    id v6 = v5;
    if (v5)
    {
      CFDataGetBytePtr(v5);
      CFDataGetLength(v6);
      char v7 = 0;
      goto LABEL_10;
    }
  }

  else
  {
    id v6 = 0LL;
  }

  char v7 = 1;
LABEL_10:
  int v8 = DNSServiceSetResolverDefaults();
  if (v8)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v9 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      string_for_dns_service_error = nwlog_get_string_for_dns_service_error(v8);
      int v11 = 136446466;
      uint64_t v12 = "nw_context_update_default_required_encrypted_name_resolution";
      __int16 v13 = 2082;
      uint64_t v14 = string_for_dns_service_error;
      _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_ERROR,  "%{public}s DNSServiceSetResolverDefaults failed: %{public}s",  (uint8_t *)&v11,  0x16u);
    }
  }

  if ((v7 & 1) == 0) {
    CFRelease(v6);
  }
}

void sub_181D073E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_context_require_encrypted_name_resolution_block_invoke(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 136LL) = *(_BYTE *)(*(void *)(a1 + 32) + 136LL) & 0x7F | (*(_BYTE *)(a1 + 48) << 7);
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 48LL), *(id *)(a1 + 40));
  uint64_t v2 = *(void *)(a1 + 32);
  if ((*(_BYTE *)(v2 + 136) & 4) != 0)
  {
    nw_context_update_default_required_encrypted_name_resolution(*(unsigned __int8 *)(a1 + 48), *(void **)(a1 + 40));
    uint64_t v2 = *(void *)(a1 + 32);
  }

  uint64_t v3 = *(os_unfair_lock_s **)(v2 + 40);
  if (v3)
  {
    os_unfair_lock_lock(v3 + 20);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 40LL) + 136LL) = *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 40LL)
                                                                            + 136LL) & 0x7F | (*(_BYTE *)(a1 + 48) << 7);
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 40LL) + 48LL), *(id *)(a1 + 40));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 32) + 40LL) + 80LL));
    uint64_t v2 = *(void *)(a1 + 32);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 80));
}

id nw_context_copy_fallback_resolver_config(void *a1)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    int v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    id v19 = "nw_context_copy_fallback_resolver_config";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v9, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          id v19 = "nw_context_copy_fallback_resolver_config";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null context", buf, 0xCu);
        }
      }

      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)std::string buf = 136446466;
            id v19 = "nw_context_copy_fallback_resolver_config";
            __int16 v20 = 2082;
            char v21 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_30;
        }

        if (v14)
        {
          *(_DWORD *)std::string buf = 136446210;
          id v19 = "nw_context_copy_fallback_resolver_config";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          id v19 = "nw_context_copy_fallback_resolver_config";
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181D077E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_context_add_proxy(void *a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  char v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    BOOL v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    char v34 = "nw_context_add_proxy";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v32 = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (v32 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = v32;
      if (os_log_type_enabled(v16, v32))
      {
        *(_DWORD *)std::string buf = 136446210;
        char v34 = "nw_context_add_proxy";
        _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = v32;
      BOOL v22 = os_log_type_enabled(v16, v32);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)std::string buf = 136446466;
          char v34 = "nw_context_add_proxy";
          __int16 v35 = 2082;
          os_log_type_t v36 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v16,  v21,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_46:
        if (!v15) {
          goto LABEL_12;
        }
LABEL_47:
        free(v15);
        goto LABEL_12;
      }

      if (v22)
      {
        *(_DWORD *)std::string buf = 136446210;
        char v34 = "nw_context_add_proxy";
        _os_log_impl(&dword_181A5C000, v16, v21, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = v32;
      if (os_log_type_enabled(v16, v32))
      {
        *(_DWORD *)std::string buf = 136446210;
        char v34 = "nw_context_add_proxy";
        _os_log_impl( &dword_181A5C000,  v16,  v26,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181D07D84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_context_add_proxy_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 56LL);
  if (!v2)
  {
    BOOL v3 = nw_array_create();
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 56);
    *(void *)(v4 + 56) = v3;

    uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 56LL);
  }

  nw_array_append(v2, *(void **)(a1 + 40));
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL v7 = *(os_unfair_lock_s **)(v6 + 40);
  if (v7)
  {
    os_unfair_lock_lock(v7 + 20);
    uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 40LL) + 56LL);
    if (!v8)
    {
      BOOL v9 = nw_array_create();
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 40LL);
      BOOL v11 = *(void **)(v10 + 56);
      *(void *)(v10 + 56) = v9;

      uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 40LL) + 56LL);
    }

    nw_array_append(v8, *(void **)(a1 + 40));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 32) + 40LL) + 80LL));
    uint64_t v6 = *(void *)(a1 + 32);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 80));
}

void nw_context_clear_proxies(void *a1)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if ((v1[17] & 0x48) == 0x40 && !dispatch_workloop_is_current())
    {
      v14[0] = MEMORY[0x1895F87A8];
      v14[1] = 3221225472LL;
      v14[2] = __nw_context_clear_proxies_block_invoke;
      v14[3] = &unk_189BC93A0;
      os_log_type_t v15 = v2;
      nw_queue_context_async(v15, v14);
    }

    else
    {
      BOOL v3 = (void *)v2[7];
      v2[7] = 0LL;

      uint64_t v4 = v2[5];
      if (v4)
      {
        id v5 = *(void **)(v4 + 56);
        *(void *)(v4 + 56) = 0LL;
      }
    }

    goto LABEL_7;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)std::string buf = 136446210;
  os_log_type_t v19 = "nw_context_clear_proxies";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v7, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v19 = "nw_context_clear_proxies";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)std::string buf = 136446466;
          os_log_type_t v19 = "nw_context_clear_proxies";
          __int16 v20 = 2082;
          os_log_type_t v21 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }

      if (v12)
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v19 = "nw_context_clear_proxies";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v19 = "nw_context_clear_proxies";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181D08180( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_context_clear_proxies_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = *(void **)(v2 + 56);
  *(void *)(v2 + 56) = 0LL;

  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(os_unfair_lock_s **)(v4 + 40);
  if (v5)
  {
    os_unfair_lock_lock(v5 + 20);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 40LL);
    BOOL v7 = *(void **)(v6 + 56);
    *(void *)(v6 + 56) = 0LL;

    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 32) + 40LL) + 80LL));
    uint64_t v4 = *(void *)(a1 + 32);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 80));
}

void *nw_context_copy_proxy_configs(void *a1)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if ((v1[34]._os_unfair_lock_opaque & 0x48) == 0x40 && !dispatch_workloop_is_current())
    {
      os_unfair_lock_lock(v2 + 20);
      uint64_t v6 = *(void **)&v2[14]._os_unfair_lock_opaque;
      if (!v6 || v6[2] == v6[3])
      {
        BOOL v7 = nw_context_copy_globals_context((NWConcrete_nw_context *)v2);
        uint64_t v4 = *(id *)(v7 + 56);
      }

      else
      {
        uint64_t v4 = v6;
      }

      os_unfair_lock_unlock(v2 + 20);
    }

    else
    {
      BOOL v3 = *(void **)&v2[14]._os_unfair_lock_opaque;
      if (!v3 || v3[2] == v3[3])
      {
        BOOL v5 = nw_context_copy_globals_context((NWConcrete_nw_context *)v2);
        uint64_t v4 = *(id *)(v5 + 56);
      }

      else
      {
        uint64_t v4 = v3;
      }
    }

    goto LABEL_13;
  }

  __nwlog_obj();
  os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)std::string buf = 136446210;
  __int16 v20 = "nw_context_copy_proxy_configs";
  uint64_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v20 = "nw_context_copy_proxy_configs";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)std::string buf = 136446466;
          __int16 v20 = "nw_context_copy_proxy_configs";
          __int16 v21 = 2082;
          uint64_t v22 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_30;
      }

      if (v15)
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v20 = "nw_context_copy_proxy_configs";
        _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v20 = "nw_context_copy_proxy_configs";
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181D08554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_context_enumerate_proxy_configs(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  BOOL v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    BOOL v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    os_log_type_t v26 = "nw_context_enumerate_proxy_configs";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v26 = "nw_context_enumerate_proxy_configs";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)std::string buf = 136446466;
          os_log_type_t v26 = "nw_context_enumerate_proxy_configs";
          __int16 v27 = 2082;
          uint64_t v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8) {
          goto LABEL_4;
        }
LABEL_39:
        free(v8);
        goto LABEL_4;
      }

      if (v15)
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v26 = "nw_context_enumerate_proxy_configs";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v26 = "nw_context_enumerate_proxy_configs";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181D08A6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_context_enumerate_proxy_configs_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void nw_context_set_isolate_protocol_stack(void *a1, char a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    os_log_type_t v19 = "nw_context_set_isolate_protocol_stack";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v9, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v19 = "nw_context_set_isolate_protocol_stack";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null context", buf, 0xCu);
        }
      }

      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)std::string buf = 136446466;
            os_log_type_t v19 = "nw_context_set_isolate_protocol_stack";
            __int16 v20 = 2082;
            __int16 v21 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }

        if (v14)
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v19 = "nw_context_set_isolate_protocol_stack";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v19 = "nw_context_set_isolate_protocol_stack";
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void nw_context_set_scheduling_mode(void *a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    BOOL v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    BOOL v18 = "nw_context_set_scheduling_mode";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v8, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          BOOL v18 = "nw_context_set_scheduling_mode";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null context", buf, 0xCu);
        }
      }

      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)std::string buf = 136446466;
            BOOL v18 = "nw_context_set_scheduling_mode";
            __int16 v19 = 2082;
            __int16 v20 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }

        if (v13)
        {
          *(_DWORD *)std::string buf = 136446210;
          BOOL v18 = "nw_context_set_scheduling_mode";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          BOOL v18 = "nw_context_set_scheduling_mode";
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void nw_context_set_protocol_cache_limits(void *a1, int a2, int a3, int a4)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  BOOL v7 = a1;
  uint64_t v8 = v7;
  if (!v7)
  {
    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v22 = "nw_context_set_protocol_cache_limits";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v12, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          uint64_t v22 = "nw_context_set_protocol_cache_limits";
          _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null context", buf, 0xCu);
        }
      }

      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        BOOL v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)std::string buf = 136446466;
            uint64_t v22 = "nw_context_set_protocol_cache_limits";
            __int16 v23 = 2082;
            os_log_type_t v24 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }

        if (v17)
        {
          *(_DWORD *)std::string buf = 136446210;
          uint64_t v22 = "nw_context_set_protocol_cache_limits";
          _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          uint64_t v22 = "nw_context_set_protocol_cache_limits";
          _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

uint64_t nw_context_get_scheduling_mode(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[30];
    goto LABEL_3;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)std::string buf = 136446210;
  os_log_type_t v16 = "nw_context_get_scheduling_mode";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v16 = "nw_context_get_scheduling_mode";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)std::string buf = 136446466;
          os_log_type_t v16 = "nw_context_get_scheduling_mode";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v16 = "nw_context_get_scheduling_mode";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v16 = "nw_context_get_scheduling_mode";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_context_get_isolate_protocol_stack(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((_BYTE *)v1 + 136) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)std::string buf = 136446210;
  os_log_type_t v16 = "nw_context_get_isolate_protocol_stack";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v16 = "nw_context_get_isolate_protocol_stack";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)std::string buf = 136446466;
          os_log_type_t v16 = "nw_context_get_isolate_protocol_stack";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v16 = "nw_context_get_isolate_protocol_stack";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v16 = "nw_context_get_isolate_protocol_stack";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_context_get_sensitive_redacted(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1 && (int v3 = *((_DWORD *)v1 + 31), (v3 - 2) >= 2))
  {
    BOOL v4 = v3 != 1;
  }

  else
  {
    if (nwlog_get_sensitive_redacted::onceToken != -1) {
      dispatch_once(&nwlog_get_sensitive_redacted::onceToken, &__block_literal_global_59);
    }
    BOOL v4 = nwlog_get_sensitive_redacted::sensitiveRedacted != 0;
  }

  return v4;
}

void nw_context_set_tracker_lookup_callback(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  int v3 = a1;
  id v4 = a2;
  char v5 = v4;
  if (v3)
  {
    uint64_t v6 = _Block_copy(v4);
    BOOL v7 = (void *)v3[16];
    v3[16] = v6;

    if (v3[5])
    {
      os_log_type_t v8 = _Block_copy(v5);
      uint64_t v9 = v3[5];
      os_log_type_t v10 = *(void **)(v9 + 128);
      *(void *)(v9 + 12_Block_object_dispose(va, 8) = v8;
    }

    goto LABEL_4;
  }

  __nwlog_obj();
  BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v22 = "nw_context_set_tracker_lookup_callback";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v22 = "nw_context_set_tracker_lookup_callback";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)std::string buf = 136446466;
          uint64_t v22 = "nw_context_set_tracker_lookup_callback";
          __int16 v23 = 2082;
          os_log_type_t v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v17)
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v22 = "nw_context_set_tracker_lookup_callback";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v22 = "nw_context_set_tracker_lookup_callback";
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void ___ZL28nw_context_start_purge_timerP21NWConcrete_nw_context_block_invoke(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t globals_for_channel = nw_context_get_globals_for_channel(v2);
    id v4 = (os_unfair_lock_s *)(globals_for_channel + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(globals_for_channel + 16));
    uint64_t v5 = *(void *)globals_for_channel;
    if (*(void *)globals_for_channel)
    {
      *(void *)os_log_type_t type = 0LL;
      char v15 = type;
      uint64_t v16 = 0x2000000000LL;
      uint64_t v17 = 0LL;
      *(void *)std::string buf = MEMORY[0x1895F87A8];
      *(void *)&buf[8] = 0x40000000LL;
      *(void *)&buf[16] = __nw_channel_purge_idle_block_invoke;
      __int16 v20 = &unk_189BC8D00;
      uint64_t v21 = type;
      nw_dictionary_apply(v5, (uint64_t)buf);
      os_unfair_lock_unlock(v4);
      uint64_t v6 = (unsigned __int8 *)*((void *)v15 + 3);
      if (v6)
      {
        nw_array_apply(v6, (uint64_t)&__block_literal_global_86677);
        BOOL v7 = (void *)*((void *)v15 + 3);
        if (v7)
        {
          os_release(v7);
          *((void *)v15 + 3) = 0LL;
        }
      }

      _Block_object_dispose(type, 8);
    }

    else
    {
      os_unfair_lock_unlock(v4);
    }

    goto LABEL_8;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_channel_purge_idle";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v8, type, &v18))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v9 = (os_log_s *)gLogObj;
      os_log_type_t v10 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_23;
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_purge_idle";
      BOOL v11 = "%{public}s called with null context";
      goto LABEL_22;
    }

    if (!v18)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v9 = (os_log_s *)gLogObj;
      os_log_type_t v10 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_23;
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_purge_idle";
      BOOL v11 = "%{public}s called with null context, backtrace limit exceeded";
      goto LABEL_22;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v9 = (os_log_s *)gLogObj;
    os_log_type_t v10 = type[0];
    BOOL v13 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
    if (backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)std::string buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_channel_purge_idle";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_23;
    }

    if (v13)
    {
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_purge_idle";
      BOOL v11 = "%{public}s called with null context, no backtrace";
LABEL_22:
      _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
    }
  }

uint64_t nw_context_endpoint_matches_key(void *a1, void *a2)
{
  return nw_endpoint_is_equal(a1, a2, 31LL);
}

uint64_t nw_context_get_cache_count(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = v1;
    if (((_BYTE)v1[17] & 8) == 0) {
      dispatch_assert_queue_V2(v1[1]);
    }
    BOOL v3 = nw_context_copy_cache_context(v2);

    uint64_t v4 = *(unsigned int *)(*(void *)(v3 + 24) + 68LL);
    return v4;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v17 = "nw_context_get_cache_count";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v17 = "nw_context_get_cache_count";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)std::string buf = 136446466;
          uint64_t v17 = "nw_context_get_cache_count";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v17 = "nw_context_get_cache_count";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v17 = "nw_context_get_cache_count";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181D0A2F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_context_set_association_dormant_delay(void *a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    __int16 v23 = "nw_context_set_association_dormant_delay";
    BOOL v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v23 = "nw_context_set_association_dormant_delay";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)std::string buf = 136446466;
          __int16 v23 = "nw_context_set_association_dormant_delay";
          __int16 v24 = 2082;
          uint64_t v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7) {
          goto LABEL_4;
        }
LABEL_39:
        free(v7);
        goto LABEL_4;
      }

      if (v14)
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v23 = "nw_context_set_association_dormant_delay";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v23 = "nw_context_set_association_dormant_delay";
        _os_log_impl( &dword_181A5C000,  v8,  v18,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t nw_context_get_context_purge_delay(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 13);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)std::string buf = 136446210;
  os_log_type_t v16 = "nw_context_get_context_purge_delay";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v16 = "nw_context_get_context_purge_delay";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)std::string buf = 136446466;
          os_log_type_t v16 = "nw_context_get_context_purge_delay";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v16 = "nw_context_get_context_purge_delay";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v16 = "nw_context_get_context_purge_delay";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_context_set_context_purge_delay(void *a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    __int16 v23 = "nw_context_set_context_purge_delay";
    BOOL v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v23 = "nw_context_set_context_purge_delay";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)std::string buf = 136446466;
          __int16 v23 = "nw_context_set_context_purge_delay";
          __int16 v24 = 2082;
          uint64_t v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7) {
          goto LABEL_4;
        }
LABEL_39:
        free(v7);
        goto LABEL_4;
      }

      if (v14)
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v23 = "nw_context_set_context_purge_delay";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v23 = "nw_context_set_context_purge_delay";
        _os_log_impl( &dword_181A5C000,  v8,  v18,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void nw_context_reset_timer_block_with_time(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v102 = *MEMORY[0x1895F89C0];
  id v7 = a1;
  id v8 = a4;
  os_log_type_t v10 = v8;
  if (!v7)
  {
    __nwlog_obj(v8, v9);
    __int16 v60 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    os_log_type_t v97 = "nw_context_reset_timer_block_with_time";
    os_log_type_t v61 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t v95 = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v62 = __nwlog_fault(v61, &v95, &type);
    if ((_DWORD)v62)
    {
      if (v95 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj(v62, v63);
        os_log_type_t v64 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v65 = v95;
        if (os_log_type_enabled(v64, v95))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v97 = "nw_context_reset_timer_block_with_time";
          _os_log_impl(&dword_181A5C000, v64, v65, "%{public}s called with null context", buf, 0xCu);
        }
      }

      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj(backtrace_string, v76);
        os_log_type_t v64 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v77 = v95;
        BOOL v78 = os_log_type_enabled(v64, v95);
        if (backtrace_string)
        {
          if (v78)
          {
            *(_DWORD *)std::string buf = 136446466;
            os_log_type_t v97 = "nw_context_reset_timer_block_with_time";
            __int16 v98 = 2082;
            uint64_t v99 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v64,  v77,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_119;
        }

        if (v78)
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v97 = "nw_context_reset_timer_block_with_time";
          _os_log_impl(&dword_181A5C000, v64, v77, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj(v62, v63);
        os_log_type_t v64 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v88 = v95;
        if (os_log_type_enabled(v64, v95))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v97 = "nw_context_reset_timer_block_with_time";
          _os_log_impl( &dword_181A5C000,  v64,  v88,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181D0BC40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void nw_context_cleanup_timer(NWConcrete_nw_context *a1)
{
  id v1 = a1;
  uint64_t v2 = *((void *)v1 + 4);
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v5 = nw_hash_table_count(*(void *)(v2 + 24), v4);
  if (v3) {
    BOOL v7 = (_DWORD)v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
LABEL_11:

    return;
  }

  int v8 = v5;
  if (v3)
  {
    __nwlog_obj(v5, v6);
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    id v11 = (void *)_os_log_send_and_compose_impl();

    free(v11);
    if (!v8) {
      goto LABEL_8;
    }
  }

  else if (!(_DWORD)v5)
  {
LABEL_8:
    uint64_t v9 = (void *)*((void *)v1 + 4);
    if (*v9)
    {
      nw_queue_cancel_source(*v9, v6);
      **((void **)v1 + 4) = 0LL;
      uint64_t v9 = (void *)*((void *)v1 + 4);
    }

    void v9[4] = -1LL;
    goto LABEL_11;
  }

  __nwlog_obj(v5, v6);
  os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
  uint64_t v13 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v13))
  {
    free(v13);
    goto LABEL_8;
  }

void sub_181D0BE68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_context_reset_timer_block_with_time_block_invoke(uint64_t a1)
{
  id v18 = *(id *)(a1 + 32);
  nw_context_assert_queue(v18);
  id v1 = v18;
  uint64_t v2 = (uint64_t *)*((void *)v18 + 4);
  v2[4] = -1LL;
  uint64_t v3 = *v2;
  if (*v2)
  {
    if (v2[1])
    {
      do
      {
        dispatch_time_t v8 = dispatch_time(0x8000000000000000LL, 0LL);
        uint64_t v9 = (uint64_t *)*((void *)v18 + 4);
        uint64_t v10 = v9[1];
        dispatch_time_t v11 = *(void *)(v10 + 16);
        if (v11 > v8)
        {
          nw_queue_set_timer_values(*v9, v11, 0xFFFFFFFFFFFFFFFFLL, 0LL);
          id v1 = v18;
          *(void *)(*((void *)v18 + 4) + 32LL) = *(void *)(v10 + 16);
          goto LABEL_18;
        }

        os_log_type_t v12 = (void (**)(void))_Block_copy(*(const void **)(v10 + 32));
        uint64_t v13 = *(void **)(v10 + 32);
        *(void *)(v10 + 32) = 0LL;

        char v14 = *(_BYTE *)(v10 + 40) | 1;
        *(_BYTE *)(v10 + 40) = v14;
        if (v12)
        {
          v12[2](v12);
          char v14 = *(_BYTE *)(v10 + 40);
        }

        *(_BYTE *)(v10 + 40) = v14 & 0xFE;
        if (!*(void *)(v10 + 32))
        {
          id v15 = v18;
          if ((*(_BYTE *)(v10 + 40) & 1) == 0)
          {
            uint64_t v16 = *(void *)v10;
            char v17 = *(void **)(v10 + 8);
            if (*(void *)v10)
            {
              *(void *)(v16 + _Block_object_dispose(va, 8) = v17;
              char v17 = *(void **)(v10 + 8);
              uint64_t v4 = v18;
            }

            else
            {
              uint64_t v4 = v18;
              *(void *)(*((void *)v18 + 4) + 16LL) = v17;
            }

            *char v17 = v16;
            *(void *)uint64_t v10 = 0LL;
            *(void *)(v10 + _Block_object_dispose(va, 8) = 0LL;
            BOOL node = nw_hash_table_get_node(*(void *)(v4[4] + 24LL), *(void *)(v10 + 24), 0LL);
            nw_hash_table_remove_node(*(void *)(*((void *)v18 + 4) + 24LL), node);
            uint64_t v6 = *(void **)(v10 + 32);
            *(void *)(v10 + 32) = 0LL;

            free((void *)v10);
          }
        }

        BOOL v7 = (uint64_t *)*((void *)v18 + 4);
      }

      while (v7[1]);
      uint64_t v3 = *v7;
    }

    nw_queue_set_timer_values(v3, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
    nw_context_cleanup_timer((NWConcrete_nw_context *)v18);
    id v1 = v18;
  }

void sub_181D0C020( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void nw_context_reset_timer_block(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v9 = a1;
  id v7 = a4;
  if (a3 == -1) {
    dispatch_time_t v8 = -1LL;
  }
  else {
    dispatch_time_t v8 = dispatch_time(0x8000000000000000LL, 1000000 * a3);
  }
  nw_context_reset_timer_block_with_time(v9, a2, v8, v7);
}

void sub_181D0C0C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t nw_context_1024k_buffer_manager(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = nw_context_copy_globals_context(v1);

    uint64_t v4 = *(void *)(*(void *)(v3 + 32) + 132LL);
    if (!v4)
    {
      *(void *)(*(void *)(v3 + 32) + 132LL) = nw_mem_buffer_manager_initialize( *(dispatch_object_s **)(v3 + 8),  aNwcontextbuffe_2,  dword_18C58F488,  (unsigned __int16)word_18C58F48C);
      uint64_t v4 = *(void *)(*(void *)(v3 + 32) + 132LL);
    }

    goto LABEL_4;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)std::string buf = 136446210;
  char v17 = "nw_context_1024k_buffer_manager";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      dispatch_time_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        char v17 = "nw_context_1024k_buffer_manager";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      dispatch_time_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)std::string buf = 136446466;
          char v17 = "nw_context_1024k_buffer_manager";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v12)
      {
        *(_DWORD *)std::string buf = 136446210;
        char v17 = "nw_context_1024k_buffer_manager";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      dispatch_time_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        char v17 = "nw_context_1024k_buffer_manager";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181D0C3A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_context_1024k_buffer_length()
{
  return dword_18C58F488;
}

uint64_t nw_context_512k_buffer_manager(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = nw_context_copy_globals_context(v1);

    uint64_t v4 = *(void *)(*(void *)(v3 + 32) + 140LL);
    if (!v4)
    {
      *(void *)(*(void *)(v3 + 32) + 140LL) = nw_mem_buffer_manager_initialize( *(dispatch_object_s **)(v3 + 8),  aNwcontextbuffe_3,  dword_18C58F440,  (unsigned __int16)word_18C58F444);
      uint64_t v4 = *(void *)(*(void *)(v3 + 32) + 140LL);
    }

    goto LABEL_4;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)std::string buf = 136446210;
  char v17 = "nw_context_512k_buffer_manager";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      dispatch_time_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        char v17 = "nw_context_512k_buffer_manager";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      dispatch_time_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)std::string buf = 136446466;
          char v17 = "nw_context_512k_buffer_manager";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v12)
      {
        *(_DWORD *)std::string buf = 136446210;
        char v17 = "nw_context_512k_buffer_manager";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      dispatch_time_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        char v17 = "nw_context_512k_buffer_manager";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181D0C690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_context_512k_buffer_length()
{
  return dword_18C58F440;
}

uint64_t nw_context_128k_buffer_manager(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = nw_context_copy_globals_context(v1);

    uint64_t v4 = *(void *)(*(void *)(v3 + 32) + 148LL);
    if (!v4)
    {
      *(void *)(*(void *)(v3 + 32) + 148LL) = nw_mem_buffer_manager_initialize( *(dispatch_object_s **)(v3 + 8),  aNwcontextbuffe_4,  dword_18C58F3F8,  (unsigned __int16)word_18C58F3FC);
      uint64_t v4 = *(void *)(*(void *)(v3 + 32) + 148LL);
    }

    goto LABEL_4;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)std::string buf = 136446210;
  char v17 = "nw_context_128k_buffer_manager";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      dispatch_time_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        char v17 = "nw_context_128k_buffer_manager";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      dispatch_time_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)std::string buf = 136446466;
          char v17 = "nw_context_128k_buffer_manager";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v12)
      {
        *(_DWORD *)std::string buf = 136446210;
        char v17 = "nw_context_128k_buffer_manager";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      dispatch_time_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        char v17 = "nw_context_128k_buffer_manager";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181D0C978(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_context_128k_buffer_length()
{
  return dword_18C58F3F8;
}

uint64_t nw_context_64k_buffer_manager(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = nw_context_copy_globals_context(v1);

    uint64_t v4 = *(void *)(*(void *)(v3 + 32) + 156LL);
    if (!v4)
    {
      *(void *)(*(void *)(v3 + 32) + 156LL) = nw_mem_buffer_manager_initialize( *(dispatch_object_s **)(v3 + 8),  aNwcontextbuffe_5,  dword_18C58F3B0,  (unsigned __int16)word_18C58F3B4);
      uint64_t v4 = *(void *)(*(void *)(v3 + 32) + 156LL);
    }

    goto LABEL_4;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)std::string buf = 136446210;
  char v17 = "nw_context_64k_buffer_manager";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      dispatch_time_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        char v17 = "nw_context_64k_buffer_manager";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      dispatch_time_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)std::string buf = 136446466;
          char v17 = "nw_context_64k_buffer_manager";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v12)
      {
        *(_DWORD *)std::string buf = 136446210;
        char v17 = "nw_context_64k_buffer_manager";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      dispatch_time_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        char v17 = "nw_context_64k_buffer_manager";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181D0CC60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_context_64k_buffer_length()
{
  return dword_18C58F3B0;
}

void nw_context_set_input_byte_cap(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  id v7 = a1;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = v9;
  if (!v7)
  {
    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    unint64_t v38 = "nw_context_set_input_byte_cap";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v36 = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (v36 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = v36;
      if (os_log_type_enabled(v13, v36))
      {
        *(_DWORD *)std::string buf = 136446210;
        unint64_t v38 = "nw_context_set_input_byte_cap";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null requested_context", buf, 0xCu);
      }
    }

    else if (v35)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = v36;
      BOOL v21 = os_log_type_enabled(v13, v36);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)std::string buf = 136446466;
          unint64_t v38 = "nw_context_set_input_byte_cap";
          __int16 v39 = 2082;
          uint64_t v40 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v20,  "%{public}s called with null requested_context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v12) {
          goto LABEL_5;
        }
LABEL_56:
        free(v12);
        goto LABEL_5;
      }

      if (v21)
      {
        *(_DWORD *)std::string buf = 136446210;
        unint64_t v38 = "nw_context_set_input_byte_cap";
        _os_log_impl( &dword_181A5C000,  v13,  v20,  "%{public}s called with null requested_context, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = v36;
      if (os_log_type_enabled(v13, v36))
      {
        *(_DWORD *)std::string buf = 136446210;
        unint64_t v38 = "nw_context_set_input_byte_cap";
        _os_log_impl( &dword_181A5C000,  v13,  v27,  "%{public}s called with null requested_context, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181D0D3C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void __nw_context_set_input_byte_cap_block_invoke(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  BOOL v2 = nw_context_copy_globals_context(*(NWConcrete_nw_context **)(a1 + 32));
  uint64_t v3 = *(void *)(v2 + 32);
  if (*(void *)(v3 + 76))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v4 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(*(void *)(v2 + 32) + 76LL);
      uint64_t v6 = *(void *)(a1 + 56);
      int v10 = 136446722;
      os_log_type_t v11 = "nw_context_set_input_byte_cap_block_invoke";
      __int16 v12 = 2048;
      uint64_t v13 = v5;
      __int16 v14 = 2048;
      uint64_t v15 = v6;
      _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_ERROR,  "%{public}s Context already has input byte cap of %llu bytes, ignoring request to cap at %llu bytes",  (uint8_t *)&v10,  0x20u);
    }
  }

  else
  {
    g_some_context_has_std::string::size_type cap = 1;
    *(void *)(v3 + 76) = *(void *)(a1 + 56);
    objc_storeStrong((id *)(v3 + 84), *(id *)(a1 + 40));
    id v7 = _Block_copy(*(const void **)(a1 + 48));
    uint64_t v8 = *(void *)(v2 + 32);
    id v9 = *(void **)(v8 + 92);
    *(void *)(v8 + 92) = v7;
  }
}

void sub_181D0FDC0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, id location)
{
}

void sub_181D0FF78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_181D100FC(_Unwind_Exception *a1)
{
}

void sub_181D10140()
{
}

void sub_181D103C8(_Unwind_Exception *a1)
{
}

void sub_181D1086C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181D11B50(_Unwind_Exception *a1)
{
}

void sub_181D11E08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1683(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__1684(uint64_t a1)
{
}

void sub_181D12CD8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32)
{
}

void sub_181D13BE0(_Unwind_Exception *a1)
{
}

void sub_181D15868( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32)
{
}

void sub_181D17194(_Unwind_Exception *a1)
{
}

void sub_181D17378( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

void sub_181D18F9C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_ethernet_channel;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__1953(uint64_t a1, uint64_t a2)
{
  BOOL result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__1954(uint64_t a1)
{
}

void sub_181D19FC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181D1C000(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181D1D540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_ethernet_channel_cancel(nw_ethernet_channel_t ethernet_channel)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  uint64_t v1 = ethernet_channel;
  uint64_t v2 = (uint64_t)v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 2);
    if (*(_BYTE *)(v2 + 112))
    {
      *(_BYTE *)(v2 + 114) = 1;
    }

    else if (!*(_BYTE *)(v2 + 113))
    {
      *(_WORD *)(v2 + 113) = 1;
      -[NWConcrete_nw_ethernet_channel updateClientState:error:](v2, 5, 0LL);
      -[NWConcrete_nw_ethernet_channel close](v2);
    }

    os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 8));
    goto LABEL_7;
  }

  __nwlog_obj();
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v14 = "nw_ethernet_channel_cancel";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v14 = "nw_ethernet_channel_cancel";
        _os_log_impl(&dword_181A5C000, v5, v6, "%{public}s called with null ethernet_channel", buf, 0xCu);
      }
    }

    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)std::string buf = 136446466;
          uint64_t v14 = "nw_ethernet_channel_cancel";
          __int16 v15 = 2082;
          uint64_t v16 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v8,  "%{public}s called with null ethernet_channel, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }

      if (v9)
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v14 = "nw_ethernet_channel_cancel";
        _os_log_impl(&dword_181A5C000, v5, v8, "%{public}s called with null ethernet_channel, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v14 = "nw_ethernet_channel_cancel";
        _os_log_impl( &dword_181A5C000,  v5,  v10,  "%{public}s called with null ethernet_channel, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181D1D850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_ethernet_channel_t nw_ethernet_channel_create(uint16_t ether_type, nw_interface_t interface)
{
  uint64_t v3 = interface;
  uint64_t v4 = -[NWConcrete_nw_ethernet_channel initWithEtherType:interface:parameters:]( objc_alloc(&OBJC_CLASS___NWConcrete_nw_ethernet_channel),  ether_type,  v3,  0LL);
  uint64_t v5 = v4;
  if (v4) {
    os_log_type_t v6 = v4;
  }

  return (nw_ethernet_channel_t)v5;
}

void sub_181D1D8BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_ethernet_channel_t nw_ethernet_channel_create_with_parameters( uint16_t ether_type, nw_interface_t interface, nw_parameters_t parameters)
{
  uint64_t v5 = interface;
  os_log_type_t v6 = parameters;
  id v7 = -[NWConcrete_nw_ethernet_channel initWithEtherType:interface:parameters:]( objc_alloc(&OBJC_CLASS___NWConcrete_nw_ethernet_channel),  ether_type,  v5,  v6);
  os_log_type_t v8 = v7;
  if (v7) {
    BOOL v9 = v7;
  }

  return (nw_ethernet_channel_t)v8;
}

void sub_181D1D93C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_ethernet_channel_set_state_changed_handler( nw_ethernet_channel_t ethernet_channel, nw_ethernet_channel_state_changed_handler_t handler)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  nw_ethernet_channel_t v3 = ethernet_channel;
  nw_ethernet_channel_state_changed_handler_t v4 = handler;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    os_log_type_t v25 = "nw_ethernet_channel_set_state_changed_handler";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v25 = "nw_ethernet_channel_set_state_changed_handler";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null ethernet_channel", buf, 0xCu);
      }
    }

    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)std::string buf = 136446466;
          os_log_type_t v25 = "nw_ethernet_channel_set_state_changed_handler";
          __int16 v26 = 2082;
          os_log_type_t v27 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null ethernet_channel, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }

      if (v16)
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v25 = "nw_ethernet_channel_set_state_changed_handler";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null ethernet_channel, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v25 = "nw_ethernet_channel_set_state_changed_handler";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null ethernet_channel, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void nw_ethernet_channel_set_queue(nw_ethernet_channel_t ethernet_channel, dispatch_queue_t queue)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  nw_ethernet_channel_t v3 = ethernet_channel;
  nw_ethernet_channel_state_changed_handler_t v4 = queue;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    os_log_type_t v23 = "nw_ethernet_channel_set_queue";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v23 = "nw_ethernet_channel_set_queue";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null ethernet_channel", buf, 0xCu);
      }
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)std::string buf = 136446466;
          os_log_type_t v23 = "nw_ethernet_channel_set_queue";
          __int16 v24 = 2082;
          os_log_type_t v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null ethernet_channel, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v7) {
          goto LABEL_6;
        }
LABEL_41:
        free(v7);
        goto LABEL_6;
      }

      if (v14)
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v23 = "nw_ethernet_channel_set_queue";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null ethernet_channel, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v23 = "nw_ethernet_channel_set_queue";
        _os_log_impl( &dword_181A5C000,  v8,  v18,  "%{public}s called with null ethernet_channel, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint32_t nw_ethernet_channel_get_maximum_payload_size(nw_ethernet_channel_t ethernet_channel)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  uint64_t v1 = ethernet_channel;
  uint64_t v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 2);
    if (BYTE1(v2[28]._os_unfair_lock_opaque) || (nw_ethernet_channel_state_changed_handler_t v4 = *(void **)&v2[4]._os_unfair_lock_opaque) == 0LL)
    {
      uint32_t v3 = 0;
    }

    else
    {
      uint64_t v5 = v4;
      uint32_t v3 = v5[15];
    }

    os_unfair_lock_unlock(v2 + 2);
    goto LABEL_7;
  }

  __nwlog_obj();
  id v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)std::string buf = 136446210;
  os_log_type_t v18 = "nw_ethernet_channel_get_maximum_payload_size";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v18 = "nw_ethernet_channel_get_maximum_payload_size";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null ethernet_channel", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)std::string buf = 136446466;
          os_log_type_t v18 = "nw_ethernet_channel_get_maximum_payload_size";
          __int16 v19 = 2082;
          char v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null ethernet_channel, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }

      if (v13)
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v18 = "nw_ethernet_channel_get_maximum_payload_size";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null ethernet_channel, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v18 = "nw_ethernet_channel_get_maximum_payload_size";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null ethernet_channel, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_ethernet_channel_start(nw_ethernet_channel_t ethernet_channel)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  uint64_t v1 = ethernet_channel;
  uint64_t v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 2);
    if (!BYTE1(v2[28]._os_unfair_lock_opaque))
    {
      uint32_t v3 = *(void **)&v2[18]._os_unfair_lock_opaque;
      uint64_t v4 = MEMORY[0x1895F87A8];
      v18[0] = MEMORY[0x1895F87A8];
      v18[1] = 3221225472LL;
      v18[2] = __nw_ethernet_channel_start_block_invoke;
      v18[3] = &unk_189BC8678;
      uint64_t v5 = v2;
      __int16 v19 = v5;
      nw_path_evaluator_set_update_handler(v3, 0LL, v18);
      id v6 = v5[8];
      if (!v6)
      {
        if (nw_context_copy_implicit_context::onceToken != -1) {
          dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
        }
        id v6 = (id)nw_context_copy_implicit_context::implicit_context;
      }

      v16[0] = v4;
      v16[1] = 3221225472LL;
      _OWORD v16[2] = __nw_ethernet_channel_start_block_invoke_6;
      v16[3] = &unk_189BC93A0;
      id v7 = v5;
      BOOL v17 = v7;
      nw_queue_context_async(v6, v16);
      -[NWConcrete_nw_ethernet_channel updateClientState:error:]((uint64_t)v7, 1, 0LL);
      os_unfair_lock_unlock(v2 + 2);
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)std::string buf = 136446210;
  os_log_type_t v23 = "nw_ethernet_channel_start";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v21 = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v9, &v21, &v20))
  {
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = v21;
      if (os_log_type_enabled(v10, v21))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v23 = "nw_ethernet_channel_start";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null ethernet_channel", buf, 0xCu);
      }
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = v21;
      BOOL v14 = os_log_type_enabled(v10, v21);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)std::string buf = 136446466;
          os_log_type_t v23 = "nw_ethernet_channel_start";
          __int16 v24 = 2082;
          os_log_type_t v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null ethernet_channel, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }

      if (v14)
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v23 = "nw_ethernet_channel_start";
        _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null ethernet_channel, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = v21;
      if (os_log_type_enabled(v10, v21))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v23 = "nw_ethernet_channel_start";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null ethernet_channel, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181D1E95C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23)
{
  _Unwind_Resume(a1);
}

void __nw_ethernet_channel_start_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4 && *(void *)(v4 + 152))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v5 = (os_log_s *)(id)gLogObj;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_8;
    }
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(v6 + 24);
    uint64_t v8 = v6 + 115;
    LODWORD(v6) = *(_DWORD *)(v6 + 168);
    int v14 = 136447490;
    os_log_type_t v15 = "nw_ethernet_channel_start_block_invoke";
    __int16 v16 = 2080;
    uint64_t v17 = v7;
    __int16 v18 = 1042;
    *(_DWORD *)__int16 v19 = 16;
    *(_WORD *)&v19[4] = 2098;
    *(void *)&v19[6] = v8;
    __int16 v20 = 1024;
    int v21 = v6;
    __int16 v22 = 2114;
    id v23 = v3;
    os_log_type_t v9 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] Handling new path %{public}@";
    os_log_type_t v10 = v5;
    uint32_t v11 = 54;
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v5 = (os_log_s *)(id)gLogObj;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_8;
    }
    uint64_t v12 = *(void *)(a1 + 32);
    int v14 = 136446722;
    os_log_type_t v15 = "nw_ethernet_channel_start_block_invoke";
    __int16 v16 = 2114;
    uint64_t v17 = v12;
    __int16 v18 = 2114;
    *(void *)__int16 v19 = v3;
    os_log_type_t v9 = "%{public}s [%{public}@] Handling new path %{public}@";
    os_log_type_t v10 = v5;
    uint32_t v11 = 32;
  }

  _os_log_impl(&dword_181A5C000, v10, OS_LOG_TYPE_DEBUG, v9, (uint8_t *)&v14, v11);
LABEL_8:

  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8LL));
  uint64_t v13 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v13 + 113))
  {
    nw_ethernet_channel_handle_path_update_locked((void *)v13, v3);
    uint64_t v13 = *(void *)(a1 + 32);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 8));
}

void sub_181D1EB7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_ethernet_channel_start_block_invoke_6(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 113))
  {
    id v3 = *(os_unfair_lock_s **)(v2 + 72);
    if (v3)
    {
      uint64_t v4 = v3 + 24;
      uint64_t v5 = v3;
      os_unfair_lock_lock(v4);
      id v6 = v5[6];
      os_unfair_lock_unlock(v4);
    }

    else
    {
      id v6 = 0LL;
    }

    nw_ethernet_channel_handle_path_update_locked((void *)v2, v6);

    uint64_t v2 = *(void *)(a1 + 32);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 8));
}

void sub_181D1EC2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_ethernet_channel_handle_path_update_locked(void *a1, void *a2)
{
  uint64_t v47 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_path_get_status((nw_path_t)v4) == nw_path_status_satisfied)
  {
    uint64_t v5 = MEMORY[0x1895F87A8];
    v33[0] = MEMORY[0x1895F87A8];
    v33[1] = 3221225472LL;
    v33[2] = ___ZL45nw_ethernet_channel_handle_path_update_lockedP30NWConcrete_nw_ethernet_channelPU21objcproto10OS_nw_path8NSObject_block_invoke;
    v33[3] = &unk_189BB8AB0;
    id v6 = v3;
    uint64_t v34 = v6;
    nw_path_enumerate_interface_options(v4, v33);
    id v7 = v6[8];
    if (!v7)
    {
      if (nw_context_copy_implicit_context::onceToken != -1) {
        dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
      }
      id v7 = (id)nw_context_copy_implicit_context::implicit_context;
    }

    v31[0] = v5;
    v31[1] = 3221225472LL;
    v31[2] = ___ZL45nw_ethernet_channel_handle_path_update_lockedP30NWConcrete_nw_ethernet_channelPU21objcproto10OS_nw_path8NSObject_block_invoke_126;
    v31[3] = &unk_189BC93A0;
    uint64_t v8 = v6;
    id v32 = v8;
    nw_queue_context_async(v7, v31);
    os_log_type_t v9 = (unsigned __int8 *)nw_path_copy_flows(v4);
    id v10 = v8[19];
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint32_t v11 = (os_log_s *)(id)gLogObj;
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);
    if (v10)
    {
      if (v12)
      {
        if (v9) {
          uint64_t v13 = (*((void *)v9 + 3) - *((void *)v9 + 2)) >> 3;
        }
        else {
          LODWORD(v13) = 0;
        }
        int v24 = *((_DWORD *)v8 + 42);
        os_log_type_t v25 = (id *)v8[3];
        *(_DWORD *)std::string buf = 136447490;
        os_log_type_t v36 = "nw_ethernet_channel_handle_path_update_locked";
        __int16 v37 = 2080;
        unint64_t v38 = v25;
        __int16 v39 = 1042;
        int v40 = 16;
        __int16 v41 = 2098;
        uint64_t v42 = (char *)v8 + 115;
        __int16 v43 = 1024;
        int v44 = v24;
        __int16 v45 = 1024;
        int v46 = v13;
        uint64_t v26 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] Ethernet Channel handle update: got %d flows from path";
        os_log_type_t v27 = v11;
        uint32_t v28 = 50;
LABEL_31:
        _os_log_impl(&dword_181A5C000, v27, OS_LOG_TYPE_DEBUG, v26, buf, v28);
      }
    }

    else if (v12)
    {
      if (v9) {
        uint64_t v23 = (*((void *)v9 + 3) - *((void *)v9 + 2)) >> 3;
      }
      else {
        LODWORD(v23) = 0;
      }
      *(_DWORD *)std::string buf = 136446722;
      os_log_type_t v36 = "nw_ethernet_channel_handle_path_update_locked";
      __int16 v37 = 2114;
      unint64_t v38 = v8;
      __int16 v39 = 1024;
      int v40 = v23;
      uint64_t v26 = "%{public}s [%{public}@] Ethernet Channel handle update: got %d flows from path";
      os_log_type_t v27 = v11;
      uint32_t v28 = 28;
      goto LABEL_31;
    }

    v29[0] = v5;
    v29[1] = 3221225472LL;
    v29[2] = ___ZL45nw_ethernet_channel_handle_path_update_lockedP30NWConcrete_nw_ethernet_channelPU21objcproto10OS_nw_path8NSObject_block_invoke_127;
    v29[3] = &unk_189BC85B0;
    id v30 = v8;
    nw_array_apply(v9, (uint64_t)v29);

    __int16 v22 = v34;
    goto LABEL_33;
  }

  if (v3 && *((void *)v3 + 19))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v14 = (os_log_s *)(id)gLogObj;
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_17;
    }
    os_log_type_t v15 = (id *)*((void *)v3 + 3);
    int v16 = *((_DWORD *)v3 + 42);
    *(_DWORD *)std::string buf = 136447234;
    os_log_type_t v36 = "nw_ethernet_channel_handle_path_update_locked";
    __int16 v37 = 2080;
    unint64_t v38 = v15;
    __int16 v39 = 1042;
    int v40 = 16;
    __int16 v41 = 2098;
    uint64_t v42 = v3 + 115;
    __int16 v43 = 1024;
    int v44 = v16;
    uint64_t v17 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] Ethernet Channel - path not satisfied, closing flow";
    __int16 v18 = v14;
    uint32_t v19 = 44;
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v14 = (os_log_s *)(id)gLogObj;
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_17;
    }
    *(_DWORD *)std::string buf = 136446466;
    os_log_type_t v36 = "nw_ethernet_channel_handle_path_update_locked";
    __int16 v37 = 2114;
    unint64_t v38 = (id *)v3;
    uint64_t v17 = "%{public}s [%{public}@] Ethernet Channel - path not satisfied, closing flow";
    __int16 v18 = v14;
    uint32_t v19 = 22;
  }

  _os_log_impl(&dword_181A5C000, v18, OS_LOG_TYPE_DEBUG, v17, buf, v19);
LABEL_17:

  __int16 v20 = (void *)*((void *)v3 + 10);
  if (v20)
  {
    nw_path_flow_registration_close(v20);
    int v21 = (void *)*((void *)v3 + 10);
    *((void *)v3 + 10) = 0LL;
  }

  if (*((void *)v3 + 11)) {
    -[NWConcrete_nw_ethernet_channel closeChannel:]((uint64_t)v3, 0);
  }
  __int16 v22 = (id *)*((void *)v3 + 2);
  if (!v22 || !*((_DWORD *)v22 + 2))
  {
    *((void *)v3 + 2) = 0LL;
LABEL_33:
  }
}

void sub_181D1F0C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL45nw_ethernet_channel_handle_path_update_lockedP30NWConcrete_nw_ethernet_channelPU21objcproto10OS_nw_path8NSObject_block_invoke( uint64_t a1, void *a2, const unsigned __int8 *a3, void *a4)
{
  uint64_t v118 = *MEMORY[0x1895F89C0];
  uint64_t v8 = a2;
  id v9 = a4;
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(v10 + 16);
  uint32_t v11 = (id *)(v10 + 16);
  uint64_t v12 = v13;
  if (!v13)
  {
    objc_storeStrong(v11, a2);
    uint64_t v15 = *(void *)(a1 + 32);
    if (v15 && *(void *)(v15 + 152))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v16 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v17 = *(void *)(a1 + 32);
        uint64_t v18 = *(void *)(v17 + 24);
        uint64_t v19 = v17 + 115;
        int v20 = *(_DWORD *)(v17 + 168);
        int v21 = v8 + 26;
        if (v8)
        {
          int v43 = v8[2];
        }

        else
        {
          int v21 = 0LL;
          int v43 = 0;
        }

        *(_DWORD *)std::string buf = 136447746;
        unint64_t v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
        __int16 v110 = 2080;
        uint64_t v111 = v18;
        __int16 v112 = 1042;
        *(_DWORD *)os_log_type_t v113 = 16;
        *(_WORD *)&v113[4] = 2098;
        *(void *)&v113[6] = v19;
        __int16 v114 = 1024;
        *(_DWORD *)os_log_type_t v115 = v20;
        *(_WORD *)&v115[4] = 2080;
        *(void *)&v115[6] = v21;
        *(_WORD *)&v115[14] = 1024;
        *(_DWORD *)&v115[16] = v43;
        __int16 v39 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] Ethernet Channel handle update: updating inte"
              "rface to %s (idx %d)";
        int v40 = v16;
        uint32_t v41 = 60;
LABEL_35:
        _os_log_impl(&dword_181A5C000, v40, OS_LOG_TYPE_DEBUG, v39, buf, v41);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v16 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v32 = *(void *)(a1 + 32);
        id v33 = v8 + 26;
        if (v8)
        {
          int v38 = v8[2];
        }

        else
        {
          id v33 = 0LL;
          int v38 = 0;
        }

        *(_DWORD *)std::string buf = 136446978;
        unint64_t v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
        __int16 v110 = 2114;
        uint64_t v111 = v32;
        __int16 v112 = 2080;
        *(void *)os_log_type_t v113 = v33;
        *(_WORD *)&v113[8] = 1024;
        *(_DWORD *)&v113[10] = v38;
        __int16 v39 = "%{public}s [%{public}@] Ethernet Channel handle update: updating interface to %s (idx %d)";
        int v40 = v16;
        uint32_t v41 = 38;
        goto LABEL_35;
      }
    }

    goto LABEL_37;
  }

  int v14 = *(_DWORD *)(v12 + 8);
  if (!v8)
  {
    if (!v14) {
      goto LABEL_37;
    }
LABEL_12:
    uint64_t v22 = *(void *)(*(void *)(a1 + 32) + 152LL);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v23 = (os_log_s *)(id)gLogObj;
    BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
    if (v22)
    {
      if (v24)
      {
        uint64_t v25 = *(void *)(a1 + 32);
        uint64_t v26 = v25 + 115;
        uint64_t v27 = *(void *)(v25 + 16);
        uint64_t v28 = v27 + 104;
        if (v27) {
          LODWORD(v27) = *(_DWORD *)(v27 + 8);
        }
        else {
          uint64_t v28 = 0LL;
        }
        uint64_t v29 = *(void *)(v25 + 24);
        int v30 = *(_DWORD *)(v25 + 168);
        id v31 = v8 + 26;
        if (v8)
        {
          int v42 = v8[2];
        }

        else
        {
          id v31 = 0LL;
          int v42 = 0;
        }

        *(_DWORD *)std::string buf = 136448258;
        unint64_t v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
        __int16 v110 = 2080;
        uint64_t v111 = v29;
        __int16 v112 = 1042;
        *(_DWORD *)os_log_type_t v113 = 16;
        *(_WORD *)&v113[4] = 2098;
        *(void *)&v113[6] = v26;
        __int16 v114 = 1024;
        *(_DWORD *)os_log_type_t v115 = v30;
        *(_WORD *)&v115[4] = 2080;
        *(void *)&v115[6] = v28;
        *(_WORD *)&v115[14] = 1024;
        *(_DWORD *)&v115[16] = v27;
        __int16 v116 = 2080;
        *(void *)os_log_type_t v117 = v31;
        *(_WORD *)&v117[8] = 1024;
        *(_DWORD *)&v117[10] = v42;
        _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_ERROR,  "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] Ethernet Channel handle update: mismatched interf ace %s (idx %d) != %s (idx %d)",  buf,  0x4Cu);
      }
    }

    else if (v24)
    {
      uint64_t v34 = *(void *)(a1 + 32);
      uint64_t v35 = *(void *)(v34 + 16);
      uint64_t v36 = v35 + 104;
      if (v35) {
        LODWORD(v35) = *(_DWORD *)(v35 + 8);
      }
      else {
        uint64_t v36 = 0LL;
      }
      __int16 v37 = v8 + 26;
      if (v8)
      {
        int v62 = v8[2];
      }

      else
      {
        __int16 v37 = 0LL;
        int v62 = 0;
      }

      *(_DWORD *)std::string buf = 136447490;
      unint64_t v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
      __int16 v110 = 2114;
      uint64_t v111 = v34;
      __int16 v112 = 2080;
      *(void *)os_log_type_t v113 = v36;
      *(_WORD *)&v113[8] = 1024;
      *(_DWORD *)&v113[10] = v35;
      __int16 v114 = 2080;
      *(void *)os_log_type_t v115 = v37;
      *(_WORD *)&v115[8] = 1024;
      *(_DWORD *)&v115[10] = v62;
      _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}@] Ethernet Channel handle update: mismatched interface %s (idx %d) != %s (idx %d)",  buf,  0x36u);
    }

    goto LABEL_58;
  }

  if (v14 != v8[2]) {
    goto LABEL_12;
  }
LABEL_37:
  int is_null = uuid_is_null(a3);
  uint64_t v45 = *(void *)(a1 + 32);
  if (is_null)
  {
    if (v45 && *(void *)(v45 + 152))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v23 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        uint64_t v46 = *(void *)(a1 + 32);
        uint64_t v47 = *(void *)(v46 + 24);
        uint64_t v48 = v46 + 115;
        LODWORD(v46) = *(_DWORD *)(v46 + 168);
        *(_DWORD *)std::string buf = 136447234;
        unint64_t v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
        __int16 v110 = 2080;
        uint64_t v111 = v47;
        __int16 v112 = 1042;
        *(_DWORD *)os_log_type_t v113 = 16;
        *(_WORD *)&v113[4] = 2098;
        *(void *)&v113[6] = v48;
        __int16 v114 = 1024;
        *(_DWORD *)os_log_type_t v115 = v46;
        _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_ERROR,  "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] Ethernet Channel handle update: no nexus agent",  buf,  0x2Cu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v23 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        uint64_t v49 = *(void *)(a1 + 32);
        *(_DWORD *)std::string buf = 136446466;
        unint64_t v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
        __int16 v110 = 2114;
        uint64_t v111 = v49;
        _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}@] Ethernet Channel handle update: no nexus agent",  buf,  0x16u);
      }
    }

void sub_181D1FFBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL45nw_ethernet_channel_handle_path_update_lockedP30NWConcrete_nw_ethernet_channelPU21objcproto10OS_nw_path8NSObject_block_invoke_126( uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 113))
  {
    uint64_t v2 = *(void **)(v1 + 72);
    if (v2) {
      nw_path_evaluator_force_update(v2, 0LL);
    }
  }

uint64_t ___ZL45nw_ethernet_channel_handle_path_update_lockedP30NWConcrete_nw_ethernet_channelPU21objcproto10OS_nw_path8NSObject_block_invoke_127( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v75 = *MEMORY[0x1895F89C0];
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(v6 + 88);
  id v8 = v5;
  id v9 = v8;
  if (v7)
  {
    memset(uu1, 0, 16);
    memset(uu2, 0, sizeof(uu2));
    __int128 v72 = 0uLL;
    memset(v71, 0, sizeof(v71));
    if (!v8) {
      goto LABEL_7;
    }
    uint64_t v10 = *(void **)(v6 + 88);
    if (!v10) {
      goto LABEL_7;
    }
    uint32_t v11 = v10;
    if (uuid_is_null(v11 + 128)
      || (*(_OWORD *)uu1 = *((_OWORD *)v11 + 8), v11, uint32_t v11 = v9, uuid_is_null(v11 + 128)))
    {

LABEL_7:
      uint64_t v6 = *(void *)(a1 + 32);
      goto LABEL_8;
    }

    *(_OWORD *)uu2 = *((_OWORD *)v11 + 8);

    uint64_t v35 = *(void *)(v6 + 152);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v36 = (os_log_s *)(id)gLogObj;
    BOOL v37 = os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG);
    if (v35)
    {
      if (v37)
      {
        uint64_t v38 = *(void *)(v6 + 24);
        int v39 = *(_DWORD *)(v6 + 168);
        int v57 = 136447746;
        int v58 = "-[NWConcrete_nw_ethernet_channel matchesNexusInstance:]";
        __int16 v59 = 2080;
        uint64_t v60 = v38;
        __int16 v61 = 1042;
        int v62 = 16;
        __int16 v63 = 2098;
        uint64_t v64 = (unsigned __int8 *)(v6 + 115);
        __int16 v65 = 1024;
        int v66 = v39;
        __int16 v67 = 1042;
        int v68 = 16;
        __int16 v69 = 2098;
        os_log_type_t v70 = uu2;
        int v40 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] matching Nexus instance %{public, uuid_t}.16P";
        uint32_t v41 = v36;
        uint32_t v42 = 60;
LABEL_40:
        _os_log_impl(&dword_181A5C000, v41, OS_LOG_TYPE_DEBUG, v40, (uint8_t *)&v57, v42);
      }
    }

    else if (v37)
    {
      int v57 = 136446978;
      int v58 = "-[NWConcrete_nw_ethernet_channel matchesNexusInstance:]";
      __int16 v59 = 2114;
      uint64_t v60 = v6;
      __int16 v61 = 1042;
      int v62 = 16;
      __int16 v63 = 2098;
      uint64_t v64 = uu2;
      int v40 = "%{public}s [%{public}@] matching Nexus instance %{public, uuid_t}.16P";
      uint32_t v41 = v36;
      uint32_t v42 = 38;
      goto LABEL_40;
    }

    int v43 = v11;
    if (uuid_is_null(v43 + 144))
    {

      goto LABEL_7;
    }

    *(_OWORD *)uint64_t v71 = *((_OWORD *)v43 + 9);

    uint64_t v44 = *(void *)(v6 + 152);
    __nwlog_obj();
    uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v46 = os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG);
    if (v44)
    {
      if (!v46) {
        goto LABEL_51;
      }
      uint64_t v47 = *(void *)(v6 + 24);
      int v48 = *(_DWORD *)(v6 + 168);
      int v57 = 136447746;
      int v58 = "-[NWConcrete_nw_ethernet_channel matchesNexusInstance:]";
      __int16 v59 = 2080;
      uint64_t v60 = v47;
      __int16 v61 = 1042;
      int v62 = 16;
      __int16 v63 = 2098;
      uint64_t v64 = (unsigned __int8 *)(v6 + 115);
      __int16 v65 = 1024;
      int v66 = v48;
      __int16 v67 = 1042;
      int v68 = 16;
      __int16 v69 = 2098;
      os_log_type_t v70 = v71;
      uint64_t v49 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] matching flow id %{public, uuid_t}.16P";
      __uint64_t v50 = v45;
      uint32_t v51 = 60;
    }

    else
    {
      if (!v46) {
        goto LABEL_51;
      }
      int v57 = 136446978;
      int v58 = "-[NWConcrete_nw_ethernet_channel matchesNexusInstance:]";
      __int16 v59 = 2114;
      uint64_t v60 = v6;
      __int16 v61 = 1042;
      int v62 = 16;
      __int16 v63 = 2098;
      uint64_t v64 = v71;
      uint64_t v49 = "%{public}s [%{public}@] matching flow id %{public, uuid_t}.16P";
      __uint64_t v50 = v45;
      uint32_t v51 = 38;
    }

    _os_log_impl(&dword_181A5C000, v50, OS_LOG_TYPE_DEBUG, v49, (uint8_t *)&v57, v51);
LABEL_51:

    BOOL v52 = uuid_compare((const unsigned __int8 *)&v72, v71) == 0;
    uint64_t v6 = *(void *)(a1 + 32);
    if (v52)
    {
      if (v6 && *(void *)(v6 + 152))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v26 = (os_log_s *)(id)gLogObj;
        if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_34;
        }
        uint64_t v53 = *(void *)(a1 + 32);
        uint64_t v54 = *(void *)(v53 + 24);
        os_log_type_t v55 = (unsigned __int8 *)(v53 + 115);
        LODWORD(v53) = *(_DWORD *)(v53 + 168);
        int v57 = 136447234;
        int v58 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
        __int16 v59 = 2080;
        uint64_t v60 = v54;
        __int16 v61 = 1042;
        int v62 = 16;
        __int16 v63 = 2098;
        uint64_t v64 = v55;
        __int16 v65 = 1024;
        int v66 = v53;
        int v30 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] Ethernet Channel handle update: flow already exists";
        goto LABEL_29;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v26 = (os_log_s *)(id)gLogObj;
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_34;
      }
      uint64_t v56 = *(void *)(a1 + 32);
      int v57 = 136446466;
      int v58 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
      __int16 v59 = 2114;
      uint64_t v60 = v56;
      int v30 = "%{public}s [%{public}@] Ethernet Channel handle update: flow already exists";
      goto LABEL_32;
    }

void sub_181D207E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_ethernet_channel_set_receive_handler( nw_ethernet_channel_t ethernet_channel, nw_ethernet_channel_receive_handler_t handler)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  nw_ethernet_channel_t v3 = ethernet_channel;
  nw_ethernet_channel_receive_handler_t v4 = handler;
  if (v3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 2);
    if (!*((_BYTE *)v3 + 113))
    {
      id v5 = _Block_copy(v4);
      uint64_t v6 = (void *)*((void *)v3 + 7);
      *((void *)v3 + 7) = v5;
    }

    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 2);
    goto LABEL_5;
  }

  __nwlog_obj();
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v18 = "nw_ethernet_channel_set_receive_handler";
  id v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v18 = "nw_ethernet_channel_set_receive_handler";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null ethernet_channel", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)std::string buf = 136446466;
          uint64_t v18 = "nw_ethernet_channel_set_receive_handler";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null ethernet_channel, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v13)
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v18 = "nw_ethernet_channel_set_receive_handler";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null ethernet_channel, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v18 = "nw_ethernet_channel_set_receive_handler";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null ethernet_channel, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_ethernet_channel_send( nw_ethernet_channel_t ethernet_channel, dispatch_data_t content, uint16_t vlan_tag, unsigned __int8 *remote_address, nw_ethernet_channel_send_completion_t completion)
{
  uint64_t v77 = *MEMORY[0x1895F89C0];
  nw_ethernet_channel_t v7 = ethernet_channel;
  id v8 = content;
  id v9 = completion;
  if (!v7)
  {
    __nwlog_obj();
    char v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_ethernet_channel_send";
    int v16 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v69[0] = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type[0];
      if (os_log_type_enabled(v17, type[0]))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_ethernet_channel_send";
        _os_log_impl(&dword_181A5C000, v17, v18, "%{public}s called with null ethernet_channel", buf, 0xCu);
      }
    }

    else if (v69[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type[0];
      BOOL v23 = os_log_type_enabled(v17, type[0]);
      if (backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)std::string buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_ethernet_channel_send";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v17,  v22,  "%{public}s called with null ethernet_channel, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_52:
        if (!v16) {
          goto LABEL_11;
        }
LABEL_53:
        free(v16);
        goto LABEL_11;
      }

      if (v23)
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_ethernet_channel_send";
        _os_log_impl( &dword_181A5C000,  v17,  v22,  "%{public}s called with null ethernet_channel, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v30 = type[0];
      if (os_log_type_enabled(v17, type[0]))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_ethernet_channel_send";
        _os_log_impl( &dword_181A5C000,  v17,  v30,  "%{public}s called with null ethernet_channel, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181D225C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

BOOL ___ZL24send_data_on_ring_lockedP30NWConcrete_nw_ethernet_channelPU27objcproto16OS_dispatch_data8NSObjecttPh_block_invoke( uint64_t a1, void *a2, uint64_t a3, const void *a4, size_t a5)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  id v8 = a2;
  uint64_t v9 = *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  if (v9 + a5 <= *(unsigned int *)(a1 + 64))
  {
    memcpy((void *)(*(void *)(a1 + 56) + v9), a4, a5);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) += a5;
    BOOL v20 = 1LL;
    goto LABEL_15;
  }

  uint64_t v10 = *(void *)(a1 + 32);
  if (v10 && *(void *)(v10 + 152))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint32_t v11 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = *(void *)(v12 + 24);
      uint64_t v14 = v12 + 115;
      LODWORD(v12) = *(_DWORD *)(v12 + 168);
      int v22 = 136447490;
      BOOL v23 = "send_data_on_ring_locked_block_invoke";
      __int16 v24 = 2080;
      uint64_t v25 = v13;
      __int16 v26 = 1042;
      *(_DWORD *)uint64_t v27 = 16;
      *(_WORD *)&void v27[4] = 2098;
      *(void *)&v27[6] = v14;
      __int16 v28 = 1024;
      int v29 = v12;
      __int16 v30 = 2112;
      os_log_type_t v31 = @"TX buffer no space";
      char v15 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>]  %@";
      int v16 = v11;
      uint32_t v17 = 54;
LABEL_8:
      _os_log_impl(&dword_181A5C000, v16, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&v22, v17);
    }
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint32_t v11 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      int v22 = 136446722;
      BOOL v23 = "send_data_on_ring_locked_block_invoke";
      __int16 v24 = 2114;
      uint64_t v25 = v18;
      __int16 v26 = 2112;
      *(void *)uint64_t v27 = @"TX buffer no space";
      char v15 = "%{public}s [%{public}@]  %@";
      int v16 = v11;
      uint32_t v17 = 32;
      goto LABEL_8;
    }
  }

  if (*(void *)(*(void *)(a1 + 32) + 152LL))
  {
    if (*(void *)(a1 + 48)) {
      os_channel_packet_free();
    }
  }

  __int16 v19 = -[NWConcrete_nw_error initWithDomain:code:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_error), 1, 55);
  BOOL v20 = v19 != 0LL;

LABEL_15:
  return v20;
}

void sub_181D228B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_copy_swift_tls_definition()
{
  return 0LL;
}

uint64_t nw_tls_set_fallback()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_set_fallback";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_fallback";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_fallback not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_fallback";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_fallback not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_fallback";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_fallback not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_set_fallback";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_set_fallback not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_get_fallback()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_get_fallback";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_fallback";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_fallback not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_fallback";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_fallback not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_fallback";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_fallback not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_get_fallback";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_get_fallback not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_set_false_start()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_set_false_start";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_false_start";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_false_start not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_false_start";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_false_start not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_false_start";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_false_start not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_set_false_start";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_set_false_start not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_get_false_start()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_get_false_start";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_false_start";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_false_start not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_false_start";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_false_start not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_false_start";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_false_start not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_get_false_start";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_get_false_start not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_set_session_resumption_enabled()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_set_session_resumption_enabled";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_session_resumption_enabled";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_session_resumption_enabled not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_session_resumption_enabled";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_session_resumption_enabled not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_session_resumption_enabled";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_session_resumption_enabled not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_set_session_resumption_enabled";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_set_session_resumption_enabled not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_set_session_ticket_enabled()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_set_session_ticket_enabled";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_session_ticket_enabled";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_session_ticket_enabled not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_session_ticket_enabled";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_session_ticket_enabled not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_session_ticket_enabled";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_session_ticket_enabled not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_set_session_ticket_enabled";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_set_session_ticket_enabled not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_set_npn_enabled()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_set_npn_enabled";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_npn_enabled";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_npn_enabled not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_npn_enabled";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_npn_enabled not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_npn_enabled";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_npn_enabled not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_set_npn_enabled";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_set_npn_enabled not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_set_minimum_protocol_version()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_set_minimum_protocol_version";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_minimum_protocol_version";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_minimum_protocol_version not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_minimum_protocol_version";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_minimum_protocol_version not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_minimum_protocol_version";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_minimum_protocol_version not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_set_minimum_protocol_version";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_set_minimum_protocol_version not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_get_minimum_protocol_version()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_get_minimum_protocol_version";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_minimum_protocol_version";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_minimum_protocol_version not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_minimum_protocol_version";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_minimum_protocol_version not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_minimum_protocol_version";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_minimum_protocol_version not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_get_minimum_protocol_version";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_get_minimum_protocol_version not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_set_maximum_protocol_version()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_set_maximum_protocol_version";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_maximum_protocol_version";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_maximum_protocol_version not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_maximum_protocol_version";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_maximum_protocol_version not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_maximum_protocol_version";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_maximum_protocol_version not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_set_maximum_protocol_version";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_set_maximum_protocol_version not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_get_maximum_protocol_version()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_get_maximum_protocol_version";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_maximum_protocol_version";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_maximum_protocol_version not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_maximum_protocol_version";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_maximum_protocol_version not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_maximum_protocol_version";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_maximum_protocol_version not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_get_maximum_protocol_version";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_get_maximum_protocol_version not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_set_minimum_ssl_protocol()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_set_minimum_ssl_protocol";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_minimum_ssl_protocol";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_minimum_ssl_protocol not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_minimum_ssl_protocol";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_minimum_ssl_protocol not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_minimum_ssl_protocol";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_minimum_ssl_protocol not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_set_minimum_ssl_protocol";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_set_minimum_ssl_protocol not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_get_minimum_ssl_protocol()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_get_minimum_ssl_protocol";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_minimum_ssl_protocol";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_minimum_ssl_protocol not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_minimum_ssl_protocol";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_minimum_ssl_protocol not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_minimum_ssl_protocol";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_minimum_ssl_protocol not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_get_minimum_ssl_protocol";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_get_minimum_ssl_protocol not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_set_maximum_ssl_protocol()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_set_maximum_ssl_protocol";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_maximum_ssl_protocol";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_maximum_ssl_protocol not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_maximum_ssl_protocol";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_maximum_ssl_protocol not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_maximum_ssl_protocol";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_maximum_ssl_protocol not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_set_maximum_ssl_protocol";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_set_maximum_ssl_protocol not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_get_maximum_ssl_protocol()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_get_maximum_ssl_protocol";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_maximum_ssl_protocol";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_maximum_ssl_protocol not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_maximum_ssl_protocol";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_maximum_ssl_protocol not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_maximum_ssl_protocol";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_maximum_ssl_protocol not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_get_maximum_ssl_protocol";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_get_maximum_ssl_protocol not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_get_peer_hostname()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_get_peer_hostname";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_peer_hostname";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_peer_hostname not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_peer_hostname";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_peer_hostname not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_peer_hostname";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_peer_hostname not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_get_peer_hostname";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_get_peer_hostname not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_set_peer_hostname()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_set_peer_hostname";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_peer_hostname";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_peer_hostname not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_peer_hostname";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_peer_hostname not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_peer_hostname";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_peer_hostname not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_set_peer_hostname";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_set_peer_hostname not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_set_psk_secret()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_set_psk_secret";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_psk_secret";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_psk_secret not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_psk_secret";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_psk_secret not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_psk_secret";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_psk_secret not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_set_psk_secret";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_set_psk_secret not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_set_psk_identity()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_set_psk_identity";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_psk_identity";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_psk_identity not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_psk_identity";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_psk_identity not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_psk_identity";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_psk_identity not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_set_psk_identity";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_set_psk_identity not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_set_psk_identity_hint()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_set_psk_identity_hint";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_psk_identity_hint";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_psk_identity_hint not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_psk_identity_hint";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_psk_identity_hint not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_psk_identity_hint";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_psk_identity_hint not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_set_psk_identity_hint";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_set_psk_identity_hint not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_set_ciphersuites()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_set_ciphersuites";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_ciphersuites";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_ciphersuites not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_ciphersuites";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_ciphersuites not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_ciphersuites";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_ciphersuites not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_set_ciphersuites";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_set_ciphersuites not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_get_negotiated_cipher_spec()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_get_negotiated_cipher_spec";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_negotiated_cipher_spec";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_negotiated_cipher_spec not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_negotiated_cipher_spec";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_negotiated_cipher_spec not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_negotiated_cipher_spec";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_negotiated_cipher_spec not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_get_negotiated_cipher_spec";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_get_negotiated_cipher_spec not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_set_dh_parameters()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_set_dh_parameters";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_dh_parameters";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_dh_parameters not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_dh_parameters";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_dh_parameters not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_dh_parameters";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_dh_parameters not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_set_dh_parameters";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_set_dh_parameters not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_set_alpn_data()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_set_alpn_data";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_alpn_data";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_alpn_data not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_alpn_data";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_alpn_data not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_alpn_data";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_alpn_data not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_set_alpn_data";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_set_alpn_data not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_get_peer_alpn_data()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_get_peer_alpn_data";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_peer_alpn_data";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_peer_alpn_data not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_peer_alpn_data";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_peer_alpn_data not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_peer_alpn_data";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_peer_alpn_data not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_get_peer_alpn_data";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_get_peer_alpn_data not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_set_npn_data()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_set_npn_data";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_npn_data";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_npn_data not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_npn_data";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_npn_data not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_npn_data";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_npn_data not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_set_npn_data";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_set_npn_data not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_get_peer_npn_data()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_get_peer_npn_data";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_peer_npn_data";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_peer_npn_data not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_peer_npn_data";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_peer_npn_data not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_peer_npn_data";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_peer_npn_data not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_get_peer_npn_data";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_get_peer_npn_data not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_copy_peer_certificates()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_copy_peer_certificates";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_copy_peer_certificates";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_copy_peer_certificates not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_copy_peer_certificates";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_copy_peer_certificates not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_copy_peer_certificates";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_copy_peer_certificates not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_copy_peer_certificates";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_copy_peer_certificates not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_set_peer_rsa_public_key()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_set_peer_rsa_public_key";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_peer_rsa_public_key";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_peer_rsa_public_key not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_peer_rsa_public_key";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_peer_rsa_public_key not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_peer_rsa_public_key";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_peer_rsa_public_key not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_set_peer_rsa_public_key";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_set_peer_rsa_public_key not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_set_peer_ec_public_key()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_set_peer_ec_public_key";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_peer_ec_public_key";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_peer_ec_public_key not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_peer_ec_public_key";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_peer_ec_public_key not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_peer_ec_public_key";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_peer_ec_public_key not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_set_peer_ec_public_key";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_set_peer_ec_public_key not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_get_peer_ocsp_response()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_get_peer_ocsp_response";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_peer_ocsp_response";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_peer_ocsp_response not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_peer_ocsp_response";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_peer_ocsp_response not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_peer_ocsp_response";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_peer_ocsp_response not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_get_peer_ocsp_response";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_get_peer_ocsp_response not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_set_peer_trust()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_set_peer_trust";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_peer_trust";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_peer_trust not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_peer_trust";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_peer_trust not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_peer_trust";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_peer_trust not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_set_peer_trust";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_set_peer_trust not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_set_client_auth()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_set_client_auth";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_client_auth";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_client_auth not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_client_auth";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_client_auth not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_client_auth";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_client_auth not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_set_client_auth";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_set_client_auth not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_set_client_auth_type()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_set_client_auth_type";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_client_auth_type";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_client_auth_type not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_client_auth_type";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_client_auth_type not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_client_auth_type";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_client_auth_type not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_set_client_auth_type";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_set_client_auth_type not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_get_negotiated_protocol_version()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_get_negotiated_protocol_version";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_negotiated_protocol_version";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_negotiated_protocol_version not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_negotiated_protocol_version";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_negotiated_protocol_version not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_negotiated_protocol_version";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_negotiated_protocol_version not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_get_negotiated_protocol_version";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_get_negotiated_protocol_version not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_get_negotiated_ssl_protocol()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_get_negotiated_ssl_protocol";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_negotiated_ssl_protocol";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_negotiated_ssl_protocol not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_negotiated_ssl_protocol";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_negotiated_ssl_protocol not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_get_negotiated_ssl_protocol";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_get_negotiated_ssl_protocol not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_get_negotiated_ssl_protocol";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_get_negotiated_ssl_protocol not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_set_config()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_set_config";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_config";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_config not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_config";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_config not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_config";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_config not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_set_config";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_set_config not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_create_peer_acceptable_distinguished_names()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_create_peer_acceptable_distinguished_names";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_create_peer_acceptable_distinguished_names";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_create_peer_acceptable_distinguished_names not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_create_peer_acceptable_distinguished_names";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_create_peer_acceptable_distinguished_names not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_create_peer_acceptable_distinguished_names";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_create_peer_acceptable_distinguished_names not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_create_peer_acceptable_distinguished_names";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_create_peer_acceptable_distinguished_names not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_create_peer_trust()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_create_peer_trust";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_create_peer_trust";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_create_peer_trust not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_create_peer_trust";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_create_peer_trust not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_create_peer_trust";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_create_peer_trust not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_create_peer_trust";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_create_peer_trust not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_fetch_peer_public_key()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_fetch_peer_public_key";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_fetch_peer_public_key";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_fetch_peer_public_key not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_fetch_peer_public_key";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_fetch_peer_public_key not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_fetch_peer_public_key";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_fetch_peer_public_key not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_fetch_peer_public_key";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_fetch_peer_public_key not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

uint64_t nw_tls_set_identity_from_array()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v10 = "nw_tls_set_identity_from_array";
  BOOL v0 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v0, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_identity_from_array";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_identity_from_array not implemented";
LABEL_14:
      _os_log_impl(&dword_181A5C000, v1, v2, v3, buf, 0xCu);
      goto LABEL_15;
    }

    if (!v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v1 = (os_log_s *)gLogObj;
      os_log_type_t v2 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_identity_from_array";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_identity_from_array not implemented, backtrace limit exceeded";
      goto LABEL_14;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v1 = (os_log_s *)gLogObj;
    os_log_type_t v2 = type;
    BOOL v5 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v5) {
        goto LABEL_15;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = "nw_tls_set_identity_from_array";
      nw_ethernet_channel_t v3 = "%{public}s nw_tls_set_identity_from_array not implemented, no backtrace";
      goto LABEL_14;
    }

    if (v5)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v10 = "nw_tls_set_identity_from_array";
      __int16 v11 = 2082;
      uint64_t v12 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v1,  v2,  "%{public}s nw_tls_set_identity_from_array not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
  }

void sub_181D292BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181D29844(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181D2A294(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181D2A3AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_181D2A470(_Unwind_Exception *a1)
{
}

void sub_181D2A594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181D2A5FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.os_log_type_t receiver = v10;
  a9.super_class = (Class)&OBJC_CLASS___NWCandidate;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_181D2A6C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_candidate_manager_inject(NWConcrete_nw_candidate_manager *a1, NWCandidate *a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  nw_ethernet_channel_t v3 = a1;
  nw_ethernet_channel_receive_handler_t v4 = a2;
  BOOL v5 = v4;
  if (v4)
  {
    if ((*((_BYTE *)v4 + 40) & 8) != 0)
    {
      if (__nwlog_candidate_manager_log::onceToken != -1) {
        dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
      }
      uint64_t v10 = (os_log_s *)(id)gcandidate_managerLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t log_id = v3->log_id;
        *(_DWORD *)std::string buf = 136446722;
        __int16 v24 = "nw_candidate_manager_inject";
        __int16 v25 = 2048;
        __int16 v26 = (char *)log_id;
        __int16 v27 = 2112;
        __int16 v28 = v5;
        _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_DEFAULT,  "%{public}s [CM%zu] Candidate %@ already injected, skipping",  buf,  0x20u);
      }
    }

    else
    {
      if (v3->add_eligible_details)
      {
        __int128 type = 0uLL;
        nw_path_get_nexus_agent_uuid(v4->current_path, &type);
        nw_interface_option_details_set_nexus_agent(v5->details, &type);
        details = v5->details;
        id v7 = nw_path_copy_interface(v5->current_path);
        nw_interface_option_details_set_interface(details, v7);

        if (__nwlog_candidate_manager_log::onceToken != -1) {
          dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
        }
        id v8 = (os_log_s *)(id)gcandidate_managerLogObj;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          unint64_t v9 = v3->log_id;
          *(_DWORD *)std::string buf = 136446722;
          __int16 v24 = "nw_candidate_manager_inject";
          __int16 v25 = 2048;
          __int16 v26 = (char *)v9;
          __int16 v27 = 2112;
          __int16 v28 = v5;
          _os_log_impl(&dword_181A5C000, v8, OS_LOG_TYPE_INFO, "%{public}s [CM%zu] adding %@", buf, 0x20u);
        }

        (*((void (**)(void))v3->add_eligible_details + 2))();
        *((_BYTE *)v5 + 40) |= 8u;
        goto LABEL_19;
      }

      if (__nwlog_candidate_manager_log::onceToken != -1) {
        dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
      }
      uint64_t v10 = (os_log_s *)(id)gcandidate_managerLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        unint64_t v12 = v3->log_id;
        *(_DWORD *)std::string buf = 136446722;
        __int16 v24 = "nw_candidate_manager_inject";
        __int16 v25 = 2048;
        __int16 v26 = (char *)v12;
        __int16 v27 = 2112;
        __int16 v28 = v5;
        _os_log_impl(&dword_181A5C000, v10, OS_LOG_TYPE_ERROR, "%{public}s [CM%zu] Failed to add %@", buf, 0x20u);
      }
    }

    goto LABEL_19;
  }

  __nwlog_obj();
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)std::string buf = 136446210;
  __int16 v24 = "nw_candidate_manager_inject";
  uint64_t v14 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(type) = 16;
  char v21 = 0;
  if (__nwlog_fault(v14, &type, &v21))
  {
    if (type == 17)
    {
      __nwlog_obj();
      char v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, (os_log_type_t)type))
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v24 = "nw_candidate_manager_inject";
        _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s called with null candidate", buf, 0xCu);
      }
    }

    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v15, (os_log_type_t)type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)std::string buf = 136446466;
          __int16 v24 = "nw_candidate_manager_inject";
          __int16 v25 = 2082;
          __int16 v26 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v15,  v18,  "%{public}s called with null candidate, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_36;
      }

      if (v19)
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v24 = "nw_candidate_manager_inject";
        _os_log_impl(&dword_181A5C000, v15, v18, "%{public}s called with null candidate, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v15, (os_log_type_t)type))
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v24 = "nw_candidate_manager_inject";
        _os_log_impl( &dword_181A5C000,  v15,  v20,  "%{public}s called with null candidate, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181D2ABBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_candidate_manager_remove(NWConcrete_nw_candidate_manager *a1, NWCandidate *a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  nw_ethernet_channel_t v3 = a1;
  nw_ethernet_channel_receive_handler_t v4 = a2;
  BOOL v5 = v4;
  if (v4)
  {
    if (v4->details)
    {
      if (v3->remove_eligible_details)
      {
        if (__nwlog_candidate_manager_log::onceToken != -1) {
          dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
        }
        uint64_t v6 = (os_log_s *)(id)gcandidate_managerLogObj;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t log_id = v3->log_id;
          *(_DWORD *)std::string buf = 136446722;
          int v22 = "nw_candidate_manager_remove";
          __int16 v23 = 2048;
          __int16 v24 = (char *)log_id;
          __int16 v25 = 2112;
          __int16 v26 = v5;
          _os_log_impl(&dword_181A5C000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s [CM%zu] Removing %@", buf, 0x20u);
        }

        *((_BYTE *)v5 + 40) &= ~8u;
        (*((void (**)(void))v3->remove_eligible_details + 2))();
        goto LABEL_19;
      }

      if (__nwlog_candidate_manager_log::onceToken != -1) {
        dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
      }
      id v8 = (os_log_s *)(id)gcandidate_managerLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        unint64_t v10 = v3->log_id;
        *(_DWORD *)std::string buf = 136446722;
        int v22 = "nw_candidate_manager_remove";
        __int16 v23 = 2048;
        __int16 v24 = (char *)v10;
        __int16 v25 = 2112;
        __int16 v26 = v5;
        _os_log_impl(&dword_181A5C000, v8, OS_LOG_TYPE_ERROR, "%{public}s [CM%zu] Unable to remove %@", buf, 0x20u);
      }
    }

    else
    {
      if (__nwlog_candidate_manager_log::onceToken != -1) {
        dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
      }
      id v8 = (os_log_s *)(id)gcandidate_managerLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        unint64_t v9 = v3->log_id;
        *(_DWORD *)std::string buf = 136446722;
        int v22 = "nw_candidate_manager_remove";
        __int16 v23 = 2048;
        __int16 v24 = (char *)v9;
        __int16 v25 = 2112;
        __int16 v26 = v5;
        _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_INFO,  "%{public}s [CM%zu] Candidate %@ not injected, skipping",  buf,  0x20u);
      }
    }

    goto LABEL_19;
  }

  __nwlog_obj();
  __int16 v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)std::string buf = 136446210;
  int v22 = "nw_candidate_manager_remove";
  unint64_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        int v22 = "nw_candidate_manager_remove";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null candidate", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)std::string buf = 136446466;
          int v22 = "nw_candidate_manager_remove";
          __int16 v23 = 2082;
          __int16 v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null candidate, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_36;
      }

      if (v17)
      {
        *(_DWORD *)std::string buf = 136446210;
        int v22 = "nw_candidate_manager_remove";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null candidate, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        int v22 = "nw_candidate_manager_remove";
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null candidate, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181D2B074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181D2B57C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_candidate_manager_get_next_id(void)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  do
    unsigned int v0 = __ldaxr(&nw_candidate_manager_get_next_id(void)::s_last_id);
  while (__stlxr(v0 + 1, &nw_candidate_manager_get_next_id(void)::s_last_id));
  uint64_t result = v0 + 1;
  if (v0 == -1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v2 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136446466;
      nw_ethernet_channel_receive_handler_t v4 = "nw_candidate_manager_get_next_id";
      __int16 v5 = 1024;
      int v6 = 0;
      _os_log_impl( &dword_181A5C000,  v2,  OS_LOG_TYPE_ERROR,  "%{public}s reached %u agent ids, wrapping",  (uint8_t *)&v3,  0x12u);
    }

    return nw_candidate_manager_get_next_id();
  }

  return result;
}

id nw_candidate_manager_create_raw(void *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    id v2 = -[NWConcrete_nw_candidate_manager init:]( objc_alloc(&OBJC_CLASS___NWConcrete_nw_candidate_manager),  "init:",  v1);
    goto LABEL_3;
  }

  __nwlog_obj();
  nw_ethernet_channel_receive_handler_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)std::string buf = 136446210;
  char v15 = "nw_candidate_manager_create_raw";
  __int16 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        char v15 = "nw_candidate_manager_create_raw";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)std::string buf = 136446466;
          char v15 = "nw_candidate_manager_create_raw";
          __int16 v16 = 2082;
          BOOL v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)std::string buf = 136446210;
        char v15 = "nw_candidate_manager_create_raw";
        _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        char v15 = "nw_candidate_manager_create_raw";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181D2BAE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *nw_candidate_manager_create(const unsigned __int8 *a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  nw_ethernet_channel_receive_handler_t v4 = v3;
  if (!a1)
  {
    __nwlog_obj();
    BOOL v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    __int16 v26 = "nw_candidate_manager_create";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    out[0] = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (out[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = out[0];
      if (os_log_type_enabled(v12, out[0]))
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v26 = "nw_candidate_manager_create";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null session_id", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = out[0];
      BOOL v18 = os_log_type_enabled(v12, out[0]);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)std::string buf = 136446466;
          __int16 v26 = "nw_candidate_manager_create";
          __int16 v27 = 2082;
          __int16 v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null session_id, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v11) {
          goto LABEL_44;
        }
        goto LABEL_43;
      }

      if (v18)
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v26 = "nw_candidate_manager_create";
        _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null session_id, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = out[0];
      if (os_log_type_enabled(v12, out[0]))
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v26 = "nw_candidate_manager_create";
        _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null session_id, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_41;
  }

  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    __int16 v26 = "nw_candidate_manager_create";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    out[0] = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (out[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = out[0];
      if (os_log_type_enabled(v12, out[0]))
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v26 = "nw_candidate_manager_create";
        _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v24)
    {
      char v19 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = out[0];
      BOOL v21 = os_log_type_enabled(v12, out[0]);
      if (v19)
      {
        if (v21)
        {
          *(_DWORD *)std::string buf = 136446466;
          __int16 v26 = "nw_candidate_manager_create";
          __int16 v27 = 2082;
          __int16 v28 = v19;
          _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v19);
LABEL_42:
        if (!v11)
        {
LABEL_44:
          __int16 v5 = 0LL;
          goto LABEL_8;
        }

void sub_181D2C0A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_candidate_manager_set_bonjour_service(void *a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  __int16 v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    id v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    __int16 v25 = "nw_candidate_manager_set_bonjour_service";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v25 = "nw_candidate_manager_set_bonjour_service";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null manager", buf, 0xCu);
      }
    }

    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)std::string buf = 136446466;
          __int16 v25 = "nw_candidate_manager_set_bonjour_service";
          __int16 v26 = 2082;
          __int16 v27 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null manager, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v9) {
          goto LABEL_5;
        }
LABEL_40:
        free(v9);
        goto LABEL_5;
      }

      if (v16)
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v25 = "nw_candidate_manager_set_bonjour_service";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null manager, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v25 = "nw_candidate_manager_set_bonjour_service";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null manager, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181D2C5AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_candidate_manager_create_with_connection(void *a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  __int16 v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    __int16 v30 = "nw_candidate_manager_create_with_connection";
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v30 = "nw_candidate_manager_create_with_connection";
        _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s called with null connection", buf, 0xCu);
      }
    }

    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)std::string buf = 136446466;
          __int16 v30 = "nw_candidate_manager_create_with_connection";
          __int16 v31 = 2082;
          uint64_t v32 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v15,  v20,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v14) {
          goto LABEL_47;
        }
        goto LABEL_46;
      }

      if (v21)
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v30 = "nw_candidate_manager_create_with_connection";
        _os_log_impl(&dword_181A5C000, v15, v20, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v30 = "nw_candidate_manager_create_with_connection";
        _os_log_impl( &dword_181A5C000,  v15,  v25,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_44;
  }

  if (v4)
  {
    id v6 = v4;
    int v7 = [v6 type];

    if (v7 != 3)
    {
      __nwlog_obj();
      os_log_type_t v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)std::string buf = 136446210;
      __int16 v30 = "nw_candidate_manager_create_with_connection";
      os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v27 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          __int16 v30 = "nw_candidate_manager_create_with_connection";
          _os_log_impl( &dword_181A5C000,  v15,  v18,  "%{public}s called with null (bonjour_endpoint == nullptr || nw_endpoint_get_type((nw_endpoint_t)bonjour_endp oint) == nw_endpoint_type_bonjour_service)",  buf,  0xCu);
        }
      }

      else if (v27)
      {
        char v22 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v23 = type;
        BOOL v24 = os_log_type_enabled(v15, type);
        if (v22)
        {
          if (v24)
          {
            *(_DWORD *)std::string buf = 136446466;
            __int16 v30 = "nw_candidate_manager_create_with_connection";
            __int16 v31 = 2082;
            uint64_t v32 = v22;
            _os_log_impl( &dword_181A5C000,  v15,  v23,  "%{public}s called with null (bonjour_endpoint == nullptr || nw_endpoint_get_type((nw_endpoint_t)bonjour_en dpoint) == nw_endpoint_type_bonjour_service), dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v22);
LABEL_45:
          if (!v14)
          {
LABEL_47:
            id v8 = 0LL;
            goto LABEL_11;
          }

void sub_181D2CB9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_candidate_manager_set_connection(NWConcrete_nw_candidate_manager *a1, NWConcrete_nw_connection *a2)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    objc_storeStrong((id *)&v3->connection, a2);
    uint64_t v5 = MEMORY[0x1895F87A8];
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = ___ZL35nw_candidate_manager_set_connectionP31NWConcrete_nw_candidate_managerP24NWConcrete_nw_connection_block_invoke;
    aBlock[3] = &unk_189BB6240;
    id v6 = v3;
    os_log_type_t v25 = v6;
    int v7 = v4;
    os_log_type_t v26 = v7;
    id v8 = _Block_copy(aBlock);
    id add_eligible_details = v6->add_eligible_details;
    v6->id add_eligible_details = v8;

    v21[0] = v5;
    v21[1] = 3221225472LL;
    v21[2] = ___ZL35nw_candidate_manager_set_connectionP31NWConcrete_nw_candidate_managerP24NWConcrete_nw_connection_block_invoke_145;
    v21[3] = &unk_189BB6240;
    BOOL v10 = v6;
    char v22 = v10;
    os_log_type_t v23 = v7;
    os_log_type_t v11 = _Block_copy(v21);
    id remove_eligible_details = v10->remove_eligible_details;
    v10->id remove_eligible_details = v11;

    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)std::string buf = 136446210;
  __int16 v30 = "nw_candidate_manager_set_connection";
  os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v28 = OS_LOG_TYPE_ERROR;
  char v27 = 0;
  if (__nwlog_fault(v14, &v28, &v27))
  {
    if (v28 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = v28;
      if (os_log_type_enabled(v15, v28))
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v30 = "nw_candidate_manager_set_connection";
        _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s called with null manager", buf, 0xCu);
      }
    }

    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = v28;
      BOOL v19 = os_log_type_enabled(v15, v28);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)std::string buf = 136446466;
          __int16 v30 = "nw_candidate_manager_set_connection";
          __int16 v31 = 2082;
          uint64_t v32 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v15,  v18,  "%{public}s called with null manager, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v19)
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v30 = "nw_candidate_manager_set_connection";
        _os_log_impl(&dword_181A5C000, v15, v18, "%{public}s called with null manager, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = v28;
      if (os_log_type_enabled(v15, v28))
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v30 = "nw_candidate_manager_set_connection";
        _os_log_impl( &dword_181A5C000,  v15,  v20,  "%{public}s called with null manager, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_candidate_manager_set_state(void *a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (v3->state != (_DWORD)a2)
    {
      if (__nwlog_candidate_manager_log::onceToken != -1) {
        dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
      }
      uint64_t v5 = (os_log_s *)(id)gcandidate_managerLogObj;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t log_id = v4->log_id;
        uint64_t state = v4->state;
        else {
          id v8 = off_189BB6318[state];
        }
        os_log_type_t v9 = off_189BB6318[a2];
        *(_DWORD *)std::string buf = 136446978;
        char v22 = "nw_candidate_manager_set_state";
        __int16 v23 = 2048;
        BOOL v24 = (char *)log_id;
        __int16 v25 = 2080;
        os_log_type_t v26 = v8;
        __int16 v27 = 2080;
        os_log_type_t v28 = v9;
        _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_DEFAULT,  "%{public}s [CM%zu] Changing candidate_manager state changed from %s -> %s",  buf,  0x2Au);
      }

      v4->uint64_t state = a2;
      if ((_DWORD)a2 == 2
        && (nw_parameters_get_server_mode(v4->parameters) & 1) == 0
        && nw_parameters_get_include_peer_to_peer(v4->parameters))
      {
        nw_candidate_manager_monitor_interface_use(v4);
      }

      state_handler = (void (**)(id, uint64_t, void))v4->state_handler;
      if (state_handler) {
        state_handler[2](state_handler, a2, 0LL);
      }
    }

    goto LABEL_16;
  }

  __nwlog_obj();
  os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)std::string buf = 136446210;
  char v22 = "nw_candidate_manager_set_state";
  char v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        char v22 = "nw_candidate_manager_set_state";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null candidate_manager", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)std::string buf = 136446466;
          char v22 = "nw_candidate_manager_set_state";
          __int16 v23 = 2082;
          BOOL v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null candidate_manager, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_33;
      }

      if (v17)
      {
        *(_DWORD *)std::string buf = 136446210;
        char v22 = "nw_candidate_manager_set_state";
        _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null candidate_manager, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        char v22 = "nw_candidate_manager_set_state";
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null candidate_manager, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181D2D2F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_candidate_manager_monitor_interface_use(NWConcrete_nw_candidate_manager *a1)
{
  id v1 = a1;
  id v2 = v1;
  connection = v1->connection;
  if (connection && (*((_BYTE *)v1 + 184) & 4) == 0)
  {
    *((_BYTE *)v1 + 184) |= 4u;
    v4[0] = MEMORY[0x1895F87A8];
    v4[1] = 3221225472LL;
    v4[2] = ___ZL42nw_candidate_manager_monitor_interface_useP31NWConcrete_nw_candidate_manager_block_invoke;
    v4[3] = &unk_189BB62D8;
    uint64_t v5 = v1;
    nw_connection_set_interface_use_callback(connection, v4);
  }
}

void sub_181D2D3A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZL42nw_candidate_manager_monitor_interface_useP31NWConcrete_nw_candidate_manager_block_invoke( uint64_t a1, uint64_t a2, int a3, void *a4, void *a5)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  id v8 = a4;
  id v9 = a5;
  BOOL v10 = v9;
  if (a3)
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
    }
    os_log_type_t v11 = (os_log_s *)(id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8LL);
      *(_DWORD *)std::string buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_candidate_manager_monitor_interface_use_block_invoke";
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(void *)&buf[14] = v12;
      _os_log_impl(&dword_181A5C000, v11, OS_LOG_TYPE_INFO, "%{public}s [CM%zu] Connection cancelled", buf, 0x16u);
    }

    nw_candidate_manager_stop_lost_path_timer(*(NWConcrete_nw_candidate_manager **)(a1 + 32));
    goto LABEL_26;
  }

  if (v9)
  {
    os_log_type_t v13 = v9;
    int v14 = v13[25];

    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
    }
    os_log_type_t v15 = (os_log_s *)(id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 8LL);
      *(_DWORD *)std::string buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_candidate_manager_monitor_interface_use_block_invoke";
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(void *)&buf[14] = v16;
      *(_WORD *)&_BYTE buf[22] = 2080;
      uint64_t v43 = v13 + 26;
      _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_DEFAULT,  "%{public}s [CM%zu] Changed to working path over interface %s",  buf,  0x20u);
    }

    nw_candidate_manager_stop_lost_path_timer(*(NWConcrete_nw_candidate_manager **)(a1 + 32));
    BOOL v17 = *(NWConcrete_nw_candidate_manager **)(a1 + 32);
    if (v14 == 1002) {
      goto LABEL_13;
    }
    os_log_type_t v20 = v17;
    BOOL v21 = v20;
    if (v20)
    {
      awdl_service_resolver = v20->awdl_service_resolver;
      if (awdl_service_resolver)
      {
        nw_resolver_cancel(awdl_service_resolver);
        __int16 v23 = v21->awdl_service_resolver;
        v21->awdl_service_resolver = 0LL;
      }

void sub_181D2DA80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

void nw_candidate_manager_stop_lost_path_timer(NWConcrete_nw_candidate_manager *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
    }
    id v2 = (os_log_s *)(id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t log_id = v1->log_id;
      *(_DWORD *)std::string buf = 136446466;
      BOOL v17 = "nw_candidate_manager_stop_lost_path_timer";
      __int16 v18 = 2048;
      uint64_t v19 = (char *)log_id;
      _os_log_impl(&dword_181A5C000, v2, OS_LOG_TYPE_DEFAULT, "%{public}s [CM%zu] Stopping lost path timer", buf, 0x16u);
    }

    uint64_t lost_path_timer = (uint64_t)v1->lost_path_timer;
    if (lost_path_timer)
    {
      nw_queue_cancel_source(lost_path_timer, v4);
      v1->uint64_t lost_path_timer = 0LL;
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)std::string buf = 136446210;
  BOOL v17 = "nw_candidate_manager_stop_lost_path_timer";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        BOOL v17 = "nw_candidate_manager_stop_lost_path_timer";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null candidate_manager", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)std::string buf = 136446466;
          BOOL v17 = "nw_candidate_manager_stop_lost_path_timer";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null candidate_manager, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }

      if (v12)
      {
        *(_DWORD *)std::string buf = 136446210;
        BOOL v17 = "nw_candidate_manager_stop_lost_path_timer";
        _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null candidate_manager, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        BOOL v17 = "nw_candidate_manager_stop_lost_path_timer";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null candidate_manager, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181D2DDEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL42nw_candidate_manager_start_lost_path_timerP31NWConcrete_nw_candidate_manager_block_invoke( uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (__nwlog_candidate_manager_log::onceToken != -1) {
    dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
  }
  id v2 = (os_log_s *)(id)gcandidate_managerLogObj;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8LL);
    int v4 = 136446466;
    uint64_t v5 = "nw_candidate_manager_start_lost_path_timer_block_invoke";
    __int16 v6 = 2048;
    uint64_t v7 = v3;
    _os_log_impl( &dword_181A5C000,  v2,  OS_LOG_TYPE_DEFAULT,  "%{public}s [CM%zu] Lost path timer timed out, falling back to AWDL",  (uint8_t *)&v4,  0x16u);
  }

  nw_candidate_manager_stop_lost_path_timer(*(NWConcrete_nw_candidate_manager **)(a1 + 32));
  nw_candidate_manager_start_awdl_resolver(*(NWConcrete_nw_candidate_manager **)(a1 + 32));
}

void nw_candidate_manager_start_ids_internal(void *a1, void *a2)
{
  uint64_t v49 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    char v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v44 = "nw_candidate_manager_start_ids_internal";
    __int16 v23 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v44 = "nw_candidate_manager_start_ids_internal";
        _os_log_impl(&dword_181A5C000, v24, v25, "%{public}s called with null candidate_manager", buf, 0xCu);
      }
    }

    else if (v41)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type;
      BOOL v30 = os_log_type_enabled(v24, type);
      if (backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)std::string buf = 136446466;
          uint64_t v44 = "nw_candidate_manager_start_ids_internal";
          __int16 v45 = 2082;
          uint64_t v46 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v24,  v29,  "%{public}s called with null candidate_manager, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_49:
        if (!v23) {
          goto LABEL_15;
        }
LABEL_50:
        free(v23);
        goto LABEL_15;
      }

      if (v30)
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v44 = "nw_candidate_manager_start_ids_internal";
        _os_log_impl( &dword_181A5C000,  v24,  v29,  "%{public}s called with null candidate_manager, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v34 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v44 = "nw_candidate_manager_start_ids_internal";
        _os_log_impl( &dword_181A5C000,  v24,  v34,  "%{public}s called with null candidate_manager, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181D2E5EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, void *a23)
{
  _Unwind_Resume(a1);
}

void nw_candidate_manager_start_awdl_resolver(NWConcrete_nw_candidate_manager *a1)
{
  uint64_t v50 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    id v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v43 = "nw_candidate_manager_start_awdl_resolver";
    id v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v43 = "nw_candidate_manager_start_awdl_resolver";
        _os_log_impl(&dword_181A5C000, v21, v22, "%{public}s called with null manager", buf, 0xCu);
      }
    }

    else if (v40)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      BOOL v29 = os_log_type_enabled(v21, type);
      if (backtrace_string)
      {
        if (v29)
        {
          *(_DWORD *)std::string buf = 136446466;
          uint64_t v43 = "nw_candidate_manager_start_awdl_resolver";
          __int16 v44 = 2082;
          __int16 v45 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v21,  v28,  "%{public}s called with null manager, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_70:
        if (!v20) {
          goto LABEL_20;
        }
LABEL_71:
        free(v20);
        goto LABEL_20;
      }

      if (v29)
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v43 = "nw_candidate_manager_start_awdl_resolver";
        _os_log_impl(&dword_181A5C000, v21, v28, "%{public}s called with null manager, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v43 = "nw_candidate_manager_start_awdl_resolver";
        _os_log_impl( &dword_181A5C000,  v21,  v35,  "%{public}s called with null manager, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181D2EF48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void ___ZL40nw_candidate_manager_start_awdl_resolverP31NWConcrete_nw_candidate_manager_block_invoke( uint64_t a1, int a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  uint64_t v5 = a3;
  if (__nwlog_candidate_manager_log::onceToken != -1) {
    dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
  }
  id v6 = (os_log_s *)(id)gcandidate_managerLogObj;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(v7 + 8);
    xpc_object_t v9 = "invalid";
    if (a2 == 2) {
      xpc_object_t v9 = "complete";
    }
    xpc_object_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 40);
    *(void *)&uint8_t buf[4] = "nw_candidate_manager_start_awdl_resolver_block_invoke";
    *(_DWORD *)std::string buf = 136447234;
    *(_WORD *)&_BYTE buf[12] = 2048;
    if (a2 == 1) {
      xpc_object_t v9 = "in-progress";
    }
    *(void *)&buf[14] = v8;
    *(_WORD *)&_BYTE buf[22] = 2112;
    id v20 = v10;
    *(_WORD *)id v21 = 2082;
    *(void *)&v21[2] = v9;
    *(_WORD *)&v21[10] = 2112;
    *(void *)&v21[12] = v5;
    _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}s [CM%zu] %@ %{public}s resolves to %@",  buf,  0x34u);
  }

  *(void *)std::string buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000LL;
  id v20 = __Block_byref_object_copy__2761;
  *(void *)id v21 = __Block_byref_object_dispose__2762;
  *(void *)&v21[8] = 0LL;
  if (v5)
  {
    v18[0] = MEMORY[0x1895F87A8];
    v18[1] = 3221225472LL;
    v18[2] = ___ZL40nw_candidate_manager_start_awdl_resolverP31NWConcrete_nw_candidate_manager_block_invoke_162;
    v18[3] = &unk_189BC50D0;
    void v18[4] = buf;
    nw_array_apply(v5, (uint64_t)v18);
    id v11 = *(void **)(*(void *)&buf[8] + 40LL);
  }

  else
  {
    id v11 = 0LL;
  }

  if ((nw_endpoint_is_equal(*(void **)(*(void *)(a1 + 32) + 64LL), v11, 1LL) & 1) == 0)
  {
    nw_candidate_manager_remove_hostname_resolver(*(void **)(a1 + 32), *(void **)(*(void *)(a1 + 32) + 64LL));
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 64LL), *(id *)(*(void *)&buf[8] + 40LL));
    BOOL v12 = *(void **)(a1 + 32);
    os_log_type_t v13 = (void *)v12[8];
    if (v13)
    {
      if (!v12[11])
      {
        uint64_t v14 = [MEMORY[0x189603FC8] dictionary];
        uint64_t v15 = *(void *)(a1 + 32);
        uint64_t v16 = *(void **)(v15 + 88);
        *(void *)(v15 + 8_Block_object_dispose(va, 8) = v14;

        BOOL v12 = *(void **)(a1 + 32);
        os_log_type_t v13 = (void *)v12[8];
      }

      nw_candidate_manager_resolver_for_service_resolved_endpoint(v12, v13);
      BOOL v17 = (void *)objc_claimAutoreleasedReturnValue();
      [*(id *)(*(void *)(a1 + 32) + 88) setObject:v17 forKeyedSubscript:*(void *)(*(void *)(a1 + 32) + 64)];
    }
  }

  _Block_object_dispose(buf, 8);
}

void sub_181D2F21C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2761(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__2762(uint64_t a1)
{
}

uint64_t ___ZL40nw_candidate_manager_start_awdl_resolverP31NWConcrete_nw_candidate_manager_block_invoke_162( uint64_t a1, int a2, id obj)
{
  return 0LL;
}

void nw_candidate_manager_remove_hostname_resolver(void *a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    os_log_type_t v35 = "nw_candidate_manager_remove_hostname_resolver";
    os_log_type_t v25 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (__nwlog_fault(v25, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v35 = "nw_candidate_manager_remove_hostname_resolver";
          _os_log_impl(&dword_181A5C000, v26, v27, "%{public}s called with null manager", buf, 0xCu);
        }
      }

      else if (v32)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v29 = type;
        BOOL v30 = os_log_type_enabled(v26, type);
        if (backtrace_string)
        {
          if (v30)
          {
            *(_DWORD *)std::string buf = 136446466;
            os_log_type_t v35 = "nw_candidate_manager_remove_hostname_resolver";
            __int16 v36 = 2082;
            os_log_type_t v37 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v26,  v29,  "%{public}s called with null manager, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_56;
        }

        if (v30)
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v35 = "nw_candidate_manager_remove_hostname_resolver";
          _os_log_impl(&dword_181A5C000, v26, v29, "%{public}s called with null manager, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v35 = "nw_candidate_manager_remove_hostname_resolver";
          _os_log_impl( &dword_181A5C000,  v26,  v31,  "%{public}s called with null manager, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181D2F96C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_endpoint_t *nw_candidate_manager_resolver_for_service_resolved_endpoint(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  id v5 = v3[10];
  BOOL v6 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v5,  0,  0);

  uint64_t v7 = (nw_interface *)nw_endpoint_copy_interface(v4);
  nw_parameters_require_interface((nw_parameters_t)v6, v7);

  nw_parameters_set_preferred_interface_subtypes((void *)v6, 0LL);
  nw_parameters_set_multipath_service((nw_parameters_t)v6, nw_multipath_service_disabled);
  evaluator_for_nw_endpoint_t endpoint = nw_path_create_evaluator_for_endpoint(v4, (void *)v6);
  id v9 = (os_unfair_lock_s *)evaluator_for_endpoint;
  if (evaluator_for_endpoint)
  {
    xpc_object_t v10 = evaluator_for_endpoint;
    os_unfair_lock_lock(v9 + 24);
    id v11 = v10[6];
    os_unfair_lock_unlock(v9 + 24);
  }

  else
  {
    id v11 = 0LL;
  }

  BOOL v12 = nw_resolver_create_with_path(v11);

  if (v12)
  {
    v18[0] = MEMORY[0x1895F87A8];
    v18[1] = 3221225472LL;
    v18[2] = ___ZL59nw_candidate_manager_resolver_for_service_resolved_endpointP31NWConcrete_nw_candidate_managerPU25objcproto14OS_nw_endpoint8NSObject_block_invoke;
    v18[3] = &unk_189BB6268;
    os_log_type_t v13 = v3;
    id v19 = v13;
    id v14 = v4;
    id v20 = v14;
    id v21 = (id)v6;
    nw_resolver_set_update_handler(v12, 0LL, v18);
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
    }
    uint64_t v15 = (os_log_s *)(id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      id v16 = v13[1];
      *(_DWORD *)std::string buf = 136446978;
      __int16 v23 = "nw_candidate_manager_resolver_for_service_resolved_endpoint";
      __int16 v24 = 2048;
      id v25 = v16;
      __int16 v26 = 2112;
      os_log_type_t v27 = v12;
      __int16 v28 = 2112;
      id v29 = v14;
      _os_log_impl(&dword_181A5C000, v15, OS_LOG_TYPE_DEBUG, "%{public}s [CM%zu] Adding %@ for %@", buf, 0x2Au);
    }
  }

  return v12;
}

void sub_181D2FBFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void ___ZL59nw_candidate_manager_resolver_for_service_resolved_endpointP31NWConcrete_nw_candidate_managerPU25objcproto14OS_nw_endpoint8NSObject_block_invoke( id *a1, int a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  id v5 = a3;
  if (__nwlog_candidate_manager_log::onceToken != -1) {
    dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
  }
  BOOL v6 = (os_log_s *)(id)gcandidate_managerLogObj;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = a1[5];
    uint64_t v8 = "invalid";
    if (a2 == 2) {
      uint64_t v8 = "complete";
    }
    uint64_t v9 = *((void *)a1[4] + 1);
    uint64_t v15 = "nw_candidate_manager_resolver_for_service_resolved_endpoint_block_invoke";
    *(_DWORD *)std::string buf = 136447234;
    __int16 v16 = 2048;
    if (a2 == 1) {
      uint64_t v8 = "in-progress";
    }
    uint64_t v17 = v9;
    __int16 v18 = 2112;
    id v19 = v7;
    __int16 v20 = 2082;
    id v21 = v8;
    __int16 v22 = 2112;
    __int16 v23 = v5;
    _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}s [CM%zu] %@ %{public}s resolves to %@",  buf,  0x34u);
  }

  if (v5)
  {
    v10[0] = MEMORY[0x1895F87A8];
    v10[1] = 3221225472LL;
    v10[2] = ___ZL59nw_candidate_manager_resolver_for_service_resolved_endpointP31NWConcrete_nw_candidate_managerPU25objcproto14OS_nw_endpoint8NSObject_block_invoke_152;
    v10[3] = &unk_189BC6DB0;
    id v11 = a1[6];
    id v12 = a1[5];
    id v13 = a1[4];
    nw_array_apply(v5, (uint64_t)v10);
  }
}

uint64_t ___ZL59nw_candidate_manager_resolver_for_service_resolved_endpointP31NWConcrete_nw_candidate_managerPU25objcproto14OS_nw_endpoint8NSObject_block_invoke_152( void **a1, uint64_t a2, void *a3)
{
  uint64_t v51 = *MEMORY[0x1895F89C0];
  id v4 = a3;
  evaluator_for_nw_endpoint_t endpoint = nw_path_create_evaluator_for_endpoint(v4, a1[4]);
  id v6 = nw_endpoint_copy_interface(a1[5]);
  if (v6)
  {
    id v7 = a1[6];
    id v8 = v4;
    id v47 = v6;
    uint64_t v9 = evaluator_for_endpoint;
    xpc_object_t v10 = (os_unfair_lock_s *)v9;
    if (v7)
    {
      if (v8)
      {
        if (v9)
        {
          nw_endpoint_set_interface(v8, 0LL);
          id v11 = v10;
          os_unfair_lock_lock(v10 + 24);
          id v12 = v11[6];
          os_unfair_lock_unlock(v10 + 24);

          if (nw_path_is_direct(v12))
          {
            id v13 = v47;
            int v14 = v13[24];

            if (v14 == 3)
            {
              char v15 = 10;
LABEL_12:
              *(void *)std::string buf = 0LL;
              *(void *)&buf[8] = 0LL;
              nw_path_get_nexus_agent_uuid(v12, buf);
              char v20 = v15;
              id v21 = v47;
              __int16 v22 = nw_interface_option_details_create(v47, buf, v8, v20, 0LL, -1);
              nw_interface_option_details_set_evaluator(v22, v11);
              nw_candidate_create(v7, v22, v11);
              __int16 v23 = (NWCandidate *)objc_claimAutoreleasedReturnValue();
              nw_candidate_manager_process_candidate_internal(v7, v23);

LABEL_13:
              goto LABEL_14;
            }

            __int16 v16 = v13;
            int v17 = v13[24];

            if (v17 == 1)
            {
              __int16 v18 = v16;
              int v19 = v18[25];

              if (v19 == 1001)
              {
                char v15 = -1;
              }

              else
              {
                id v25 = v18;
                int v26 = v18[25];

                if (v26 == 1002) {
                  char v15 = 0;
                }
                else {
                  char v15 = -2;
                }
              }

              goto LABEL_12;
            }
          }

          char v15 = -2;
          goto LABEL_12;
        }

        __nwlog_obj();
        os_log_type_t v33 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_bonjour_candidate";
        __int16 v28 = (char *)_os_log_send_and_compose_impl();

        id v21 = v47;
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v48 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v34 = type;
          if (os_log_type_enabled(v29, type))
          {
            *(_DWORD *)std::string buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_bonjour_candidate";
            _os_log_impl(&dword_181A5C000, v29, v34, "%{public}s called with null evaluator", buf, 0xCu);
          }

void sub_181D306E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

id nw_candidate_create(void *a1, void *a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v5)
  {
    if (v6)
    {
      id v8 = -[NWCandidate initCandidate:forManager:evaluator:]( objc_alloc(&OBJC_CLASS___NWCandidate),  "initCandidate:forManager:evaluator:",  v6,  v5,  v7);
      goto LABEL_4;
    }

    __nwlog_obj();
    int v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    int v26 = "nw_candidate_create";
    id v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v11, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          int v26 = "nw_candidate_create";
          _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null details", buf, 0xCu);
        }

void sub_181D30C28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_candidate_manager_process_candidate_internal( NWConcrete_nw_candidate_manager *a1, NWCandidate *a2)
{
  uint64_t v61 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
      if (__nwlog_candidate_manager_log::onceToken != -1) {
        dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
      }
      id v6 = (os_log_s *)(id)gcandidate_managerLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        unint64_t log_id = v3->log_id;
        *(_DWORD *)std::string buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_candidate_internal";
        *(_WORD *)&_BYTE buf[12] = 2048;
        *(void *)&buf[14] = log_id;
        *(_WORD *)&_BYTE buf[22] = 2112;
        uint32_t v58 = v5;
        _os_log_impl(&dword_181A5C000, v6, OS_LOG_TYPE_INFO, "%{public}s [CM%zu] Checking candidate %@", buf, 0x20u);
      }

      uint64_t v47 = 0LL;
      char v48 = &v47;
      uint64_t v49 = 0x2020000000LL;
      char v50 = 0;
      candidates = (unsigned __int8 *)v3->candidates;
      uint64_t v9 = MEMORY[0x1895F87A8];
      v44[0] = MEMORY[0x1895F87A8];
      v44[1] = 3221225472LL;
      v44[2] = ___ZL47nw_candidate_manager_process_candidate_internalP31NWConcrete_nw_candidate_managerP11NWCandidate_block_invoke;
      uint64_t v44[3] = &unk_189BC7960;
      xpc_object_t v10 = v5;
      os_log_type_t v45 = v10;
      os_log_type_t v46 = &v47;
      nw_array_apply(candidates, (uint64_t)v44);
      if (*((_BYTE *)v48 + 24))
      {
        if (__nwlog_candidate_manager_log::onceToken != -1) {
          dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
        }
        id v11 = (os_log_s *)(id)gcandidate_managerLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          unint64_t v12 = v3->log_id;
          *(_DWORD *)std::string buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_candidate_internal";
          *(_WORD *)&_BYTE buf[12] = 2048;
          *(void *)&buf[14] = v12;
          *(_WORD *)&_BYTE buf[22] = 2112;
          uint32_t v58 = v10;
          _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_INFO,  "%{public}s [CM%zu] Candidate %@ already collected, ignoring",  buf,  0x20u);
        }
      }

      else
      {
        original_remote_nw_endpoint_t endpoint = v3->original_remote_endpoint;
        id v14 = nw_interface_option_details_copy_remote_endpoint(v10->details);
        LODWORD(original_remote_endpoint) = nw_endpoint_is_equal(original_remote_endpoint, v14, 0LL);

        if (!(_DWORD)original_remote_endpoint)
        {
          nw_array_append((uint64_t)v3->candidates, v10);
          -[NWCandidate startEvaluator](v10, "startEvaluator");
          if (-[NWCandidate isEligible](v10, "isEligible"))
          {
            nw_candidate_manager_inject(v3, v10);
          }

          else if ((*((_BYTE *)v10 + 40) & 2) != 0 {
                 || (*((_BYTE *)v3 + 184) & 2) == 0
          }
                 || v3->connection
                 || (id v18 = nw_interface_option_details_copy_interface(v10->details),
                     BOOL v19 = nw_interface_get_subtype(v18) == 1002,
                     v18,
                     !v19))
          {
            if (__nwlog_candidate_manager_log::onceToken != -1) {
              dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
            }
            uint64_t v29 = (os_log_s *)(id)gcandidate_managerLogObj;
            if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
            {
              unint64_t v30 = v3->log_id;
              *(_DWORD *)std::string buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_candidate_internal";
              *(_WORD *)&_BYTE buf[12] = 2048;
              *(void *)&buf[14] = v30;
              *(_WORD *)&_BYTE buf[22] = 2112;
              uint32_t v58 = v10;
              _os_log_impl( &dword_181A5C000,  v29,  OS_LOG_TYPE_INFO,  "%{public}s [CM%zu] Candidate %@ not eligible",  buf,  0x20u);
            }
          }

          else
          {
            BOOL v20 = v3;
            os_log_type_t v21 = v10;
            os_log_type_t v22 = (nw_endpoint *)nw_interface_option_details_copy_remote_endpoint(v10->details);
            nw_connection_t v23 = nw_connection_create(v22, v20[10]);

            *(void *)std::string buf = v9;
            *(void *)&buf[8] = 3221225472LL;
            *(void *)&buf[16] = ___ZL28nw_candidate_manager_connectP31NWConcrete_nw_candidate_managerP11NWCandidate_block_invoke;
            uint32_t v58 = (NWCandidate *)&unk_189BC9490;
            uint64_t v24 = v20;
            uint64_t v59 = v24;
            id v25 = v23;
            uint64_t v60 = v25;
            nw_connection_set_state_changed_handler((nw_connection_t)v25, buf);
            nw_candidate_manager_set_connection(v24, v25);
            *((_BYTE *)v10 + 40) |= 1u;
            if (__nwlog_candidate_manager_log::onceToken != -1) {
              dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
            }
            int v26 = (os_log_s *)(id)gcandidate_managerLogObj;
            if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
            {
              unint64_t v27 = v24->log_id;
              *(_DWORD *)uint64_t v51 = 136446722;
              BOOL v52 = "nw_candidate_manager_connect";
              __int16 v53 = 2048;
              unint64_t v54 = v27;
              __int16 v55 = 2112;
              uint64_t v56 = v25;
              _os_log_impl( &dword_181A5C000,  v26,  OS_LOG_TYPE_INFO,  "%{public}s [CM%zu] Created outgoing connection %@",  v51,  0x20u);
            }

            new_connection_handler = (void (**)(id, NWConcrete_nw_connection *))v24->new_connection_handler;
            if (new_connection_handler) {
              new_connection_handler[2](new_connection_handler, v25);
            }
          }

          uint64_t v16 = 1LL;
          goto LABEL_19;
        }

        if (__nwlog_candidate_manager_log::onceToken != -1) {
          dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
        }
        id v11 = (os_log_s *)(id)gcandidate_managerLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          unint64_t v15 = v3->log_id;
          *(_DWORD *)std::string buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_candidate_internal";
          *(_WORD *)&_BYTE buf[12] = 2048;
          *(void *)&buf[14] = v15;
          *(_WORD *)&_BYTE buf[22] = 2112;
          uint32_t v58 = v10;
          _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_INFO,  "%{public}s [CM%zu] Candidate %@ matches original, ignoring",  buf,  0x20u);
        }
      }

      uint64_t v16 = 0LL;
LABEL_19:

      _Block_object_dispose(&v47, 8);
      goto LABEL_20;
    }

    __nwlog_obj();
    os_log_type_t v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_candidate_internal";
    os_log_type_t v32 = (char *)_os_log_send_and_compose_impl();

    v51[0] = 16;
    LOBYTE(v47) = 0;
    if (__nwlog_fault(v32, v51, &v47))
    {
      if (v51[0] == 17)
      {
        __nwlog_obj();
        os_log_type_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v36 = v51[0];
        if (os_log_type_enabled(v33, (os_log_type_t)v51[0]))
        {
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_candidate_manager_process_candidate_internal";
          _os_log_impl(&dword_181A5C000, v33, v36, "%{public}s called with null new_candidate", buf, 0xCu);
        }

void sub_181D315B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, id a31, id a32)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

BOOL ___ZL47nw_candidate_manager_process_candidate_internalP31NWConcrete_nw_candidate_managerP11NWCandidate_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = *(void **)(a1 + 32);
  unint64_t v6 = (unint64_t)v4;
  unint64_t v7 = v5;
  if (v6 | v7)
  {
    id v8 = (void *)v7;
    if (!v6 || !v7)
    {

      goto LABEL_8;
    }

    int v9 = [*(id *)(v6 + 16) isEqual:*(void *)(v7 + 16)];

    if (!v9) {
      goto LABEL_8;
    }
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
LABEL_8:
  BOOL v10 = *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) == 0;

  return v10;
}

void sub_181D316D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL28nw_candidate_manager_connectP31NWConcrete_nw_candidate_managerP11NWCandidate_block_invoke( uint64_t a1, int a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v5 = a3;
  if (a2 == 3)
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
    }
    unint64_t v6 = (os_log_s *)(id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8LL);
      int v19 = 136446722;
      BOOL v20 = "nw_candidate_manager_connect_block_invoke";
      __int16 v21 = 2048;
      uint64_t v22 = v8;
      __int16 v23 = 2112;
      uint64_t v24 = v7;
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_INFO,  "%{public}s [CM%zu] Outgoing connection %@ is ready",  (uint8_t *)&v19,  0x20u);
    }

    int v9 = *(nw_connection **)(a1 + 40);
    if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55294);
    }
    BOOL v10 = (nw_protocol_definition *)(id)nw_protocol_copy_quic_stream_definition::quic_definition;
    nw_protocol_metadata_t v11 = nw_connection_copy_protocol_metadata(v9, v10);

    if (!v11) {
      goto LABEL_19;
    }
    unint64_t v12 = v11;
    if (nw_protocol_metadata_is_quic_connection(v12))
    {
    }

    else
    {
      BOOL is_quic_stream = nw_protocol_metadata_is_quic_stream(v12);

      if (!is_quic_stream)
      {
LABEL_19:
        nw_candidate_manager_set_state(*(void *)(a1 + 32), 2LL);

        goto LABEL_20;
      }
    }

    id v18 = nw_quic_stream_copy_connection_metadata(v12);
    nw_quic_connection_set_keepalive(v18, 10);

    goto LABEL_19;
  }

  if ((a2 & 0xFFFFFFFE) == 4)
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
    }
    os_log_type_t v13 = (os_log_s *)(id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      id v14 = off_189BB9C00[a2];
      uint64_t v15 = *(void *)(a1 + 40);
      uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 8LL);
      int v19 = 136447234;
      BOOL v20 = "nw_candidate_manager_connect_block_invoke";
      __int16 v21 = 2048;
      uint64_t v22 = v16;
      __int16 v23 = 2112;
      uint64_t v24 = v15;
      __int16 v25 = 2080;
      int v26 = v14;
      __int16 v27 = 2112;
      id v28 = v5;
      _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_INFO,  "%{public}s [CM%zu] Outgoing connection %@ to endpoint disconnected, state=%s, error=%@",  (uint8_t *)&v19,  0x34u);
    }

    nw_candidate_manager_cancel(*(void *)(a1 + 32));
  }

void sub_181D3198C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_candidate_manager_cancel(void *a1)
{
  uint64_t v50 = *MEMORY[0x1895F89C0];
  os_log_type_t v36 = a1;
  if (v36)
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
    }
    id v1 = (os_log_s *)(id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t log_id = v36->log_id;
      *(_DWORD *)std::string buf = 136446722;
      os_log_type_t v45 = "nw_candidate_manager_cancel";
      __int16 v46 = 2048;
      uint64_t v47 = (char *)log_id;
      __int16 v48 = 2112;
      uint64_t v49 = v36;
      _os_log_impl( &dword_181A5C000,  v1,  OS_LOG_TYPE_DEFAULT,  "%{public}s [CM%zu] Cancelling candidate_manager %@",  buf,  0x20u);
    }

    nw_candidate_manager_set_state(v36, 4LL);
    nw_candidate_manager_stop_lost_path_timer(v36);
    listener = v36->listener;
    if (listener)
    {
      nw_listener_cancel(listener);
      id v4 = v36->listener;
      v36->listener = 0LL;
    }

    awdl_service_resolver = v36->awdl_service_resolver;
    if (awdl_service_resolver)
    {
      nw_resolver_cancel(awdl_service_resolver);
      unint64_t v6 = v36->awdl_service_resolver;
      v36->awdl_service_resolver = 0LL;
    }

    service_resolver = v36->service_resolver;
    if (service_resolver)
    {
      nw_resolver_cancel(service_resolver);
      uint64_t v8 = v36->service_resolver;
      v36->service_resolver = 0LL;
    }

    hostname_resolvers = v36->hostname_resolvers;
    if (hostname_resolvers)
    {
      -[NSMutableDictionary allValues](hostname_resolvers, "allValues");
      BOOL v10 = (void *)objc_claimAutoreleasedReturnValue();
      nw_protocol_metadata_t v11 = v36->hostname_resolvers;
      v36->hostname_resolvers = 0LL;

      __int128 v39 = 0u;
      __int128 v40 = 0u;
      __int128 v37 = 0u;
      __int128 v38 = 0u;
      id v12 = v10;
      uint64_t v13 = [v12 countByEnumeratingWithState:&v37 objects:v43 count:16];
      if (v13)
      {
        uint64_t v14 = *(void *)v38;
        do
        {
          uint64_t v15 = 0LL;
          do
          {
            if (*(void *)v38 != v14) {
              objc_enumerationMutation(v12);
            }
            uint64_t v16 = *(NWConcrete_nw_candidate_manager **)(*((void *)&v37 + 1) + 8 * v15);
            if (__nwlog_candidate_manager_log::onceToken != -1) {
              dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
            }
            os_log_type_t v17 = (os_log_s *)(id)gcandidate_managerLogObj;
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
            {
              unint64_t v18 = v36->log_id;
              *(_DWORD *)std::string buf = 136446722;
              os_log_type_t v45 = "nw_candidate_manager_cancel";
              __int16 v46 = 2048;
              uint64_t v47 = (char *)v18;
              __int16 v48 = 2112;
              uint64_t v49 = v16;
              _os_log_impl(&dword_181A5C000, v17, OS_LOG_TYPE_DEBUG, "%{public}s [CM%zu] Removed %@", buf, 0x20u);
            }

            nw_resolver_cancel(v16);
            ++v15;
          }

          while (v13 != v15);
          uint64_t v13 = [v12 countByEnumeratingWithState:&v37 objects:v43 count:16];
        }

        while (v13);
      }
    }

    connection = (nw_connection *)v36->connection;
    if (connection)
    {
      nw_connection_cancel(connection);
      BOOL v20 = v36->connection;
      v36->connection = 0LL;
    }

    nw_candidate_manager_stop_ids(v36);
    candidates = v36->candidates;
    v36->candidates = 0LL;

    id state_handler = v36->state_handler;
    v36->id state_handler = 0LL;

    id new_connection_handler = v36->new_connection_handler;
    v36->id new_connection_handler = 0LL;

    parameters = v36->parameters;
    v36->parameters = 0LL;

    id add_eligible_details = v36->add_eligible_details;
    v36->id add_eligible_details = 0LL;

    id remove_eligible_details = v36->remove_eligible_details;
    v36->id remove_eligible_details = 0LL;

    id modify_ids_parameters = v36->modify_ids_parameters;
    v36->id modify_ids_parameters = 0LL;

    goto LABEL_28;
  }

  __nwlog_obj();
  id v28 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)std::string buf = 136446210;
  os_log_type_t v45 = "nw_candidate_manager_cancel";
  uint64_t v29 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v41 = 0;
  if (__nwlog_fault(v29, &type, &v41))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v45 = "nw_candidate_manager_cancel";
        _os_log_impl(&dword_181A5C000, v30, v31, "%{public}s called with null candidate_manager", buf, 0xCu);
      }
    }

    else if (v41)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v33 = type;
      BOOL v34 = os_log_type_enabled(v30, type);
      if (backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)std::string buf = 136446466;
          os_log_type_t v45 = "nw_candidate_manager_cancel";
          __int16 v46 = 2082;
          uint64_t v47 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v30,  v33,  "%{public}s called with null candidate_manager, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_45;
      }

      if (v34)
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v45 = "nw_candidate_manager_cancel";
        _os_log_impl( &dword_181A5C000,  v30,  v33,  "%{public}s called with null candidate_manager, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      unint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v45 = "nw_candidate_manager_cancel";
        _os_log_impl( &dword_181A5C000,  v30,  v35,  "%{public}s called with null candidate_manager, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181D31F8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void nw_candidate_manager_stop_ids(NWConcrete_nw_candidate_manager *a1)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1->ids_path_evaluator)
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
    }
    id v2 = (os_log_s *)(id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t log_id = v1->log_id;
      *(_DWORD *)std::string buf = 136446466;
      BOOL v10 = "nw_candidate_manager_stop_ids";
      __int16 v11 = 2048;
      unint64_t v12 = log_id;
      _os_log_impl( &dword_181A5C000,  v2,  OS_LOG_TYPE_DEFAULT,  "%{public}s [CM%zu] Stopping IDS path evaluator",  buf,  0x16u);
    }

    nw_path_evaluator_cancel(v1->ids_path_evaluator);
    ids_path_evaluator = v1->ids_path_evaluator;
    v1->ids_path_evaluator = 0LL;
  }

  uint64_t ids_resolve_registrations = (uint64_t)v1->ids_resolve_registrations;
  if (ids_resolve_registrations)
  {
    v7[0] = MEMORY[0x1895F87A8];
    v7[1] = 3221225472LL;
    v7[2] = ___ZL29nw_candidate_manager_stop_idsP31NWConcrete_nw_candidate_manager_block_invoke;
    v7[3] = &unk_189BC5058;
    uint64_t v8 = v1;
    nw_dictionary_apply(ids_resolve_registrations, (uint64_t)v7);
  }

  ids_nw_endpoint_t endpoint = v1->ids_endpoint;
  v1->ids_nw_endpoint_t endpoint = 0LL;
}

void sub_181D32128(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL29nw_candidate_manager_stop_idsP31NWConcrete_nw_candidate_manager_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  id v5 = a3;
  if (__nwlog_candidate_manager_log::onceToken != -1) {
    dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
  }
  unint64_t v6 = (os_log_s *)(id)gcandidate_managerLogObj;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8LL);
    int v9 = 136446722;
    BOOL v10 = "nw_candidate_manager_stop_ids_block_invoke";
    __int16 v11 = 2048;
    uint64_t v12 = v7;
    __int16 v13 = 2082;
    uint64_t v14 = a2;
    _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_INFO,  "%{public}s [CM%zu] closed resolver flow to %{public}s",  (uint8_t *)&v9,  0x20u);
  }

  nw_path_flow_registration_close(v5);
  return 1LL;
}

void sub_181D32258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_candidate_manager_start_ids_internal_block_invoke(uint64_t a1)
{
}

void __nw_candidate_manager_start_ids_internal_block_invoke_2(uint64_t a1, void *a2)
{
}

void nw_candidate_manager_handle_ids_path(void *a1, void *a2)
{
  uint64_t v94 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  uint64_t v61 = a2;
  uint64_t v59 = v3;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v43 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    os_log_type_t v89 = "nw_candidate_manager_handle_ids_path";
    os_log_type_t v44 = (char *)_os_log_send_and_compose_impl();

    v73[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v77[0]) = 0;
    if (__nwlog_fault(v44, v73, v77))
    {
      if (v73[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v46 = v73[0];
        if (os_log_type_enabled(v45, v73[0]))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v89 = "nw_candidate_manager_handle_ids_path";
          _os_log_impl(&dword_181A5C000, v45, v46, "%{public}s called with null manager", buf, 0xCu);
        }
      }

      else
      {
        if (LOBYTE(v77[0]))
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          __int16 v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v49 = v73[0];
          BOOL v50 = os_log_type_enabled(v48, v73[0]);
          if (backtrace_string)
          {
            if (v50)
            {
              *(_DWORD *)std::string buf = 136446466;
              os_log_type_t v89 = "nw_candidate_manager_handle_ids_path";
              __int16 v90 = 2082;
              uint32_t v91 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v48,  v49,  "%{public}s called with null manager, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(backtrace_string);
          }

          else
          {
            if (v50)
            {
              *(_DWORD *)std::string buf = 136446210;
              os_log_type_t v89 = "nw_candidate_manager_handle_ids_path";
              _os_log_impl(&dword_181A5C000, v48, v49, "%{public}s called with null manager, no backtrace", buf, 0xCu);
            }
          }

          goto LABEL_75;
        }

        __nwlog_obj();
        os_log_type_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v51 = v73[0];
        if (os_log_type_enabled(v45, v73[0]))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v89 = "nw_candidate_manager_handle_ids_path";
          _os_log_impl( &dword_181A5C000,  v45,  v51,  "%{public}s called with null manager, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181D32CC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, void *a30, uint64_t a31, char a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, id a37)
{
  _Block_object_dispose(&a32, 8);
  _Unwind_Resume(a1);
}

void ___ZL36nw_candidate_manager_handle_ids_pathP31NWConcrete_nw_candidate_managerPU21objcproto10OS_nw_path8NSObject_block_invoke( uint64_t a1, unsigned __int8 *uu)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  memset(out, 0, 37);
  uuid_unparse(uu, out);
  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL))
  {
    id v4 = nw_dictionary_create();
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }

  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(v7 + 24);
  if (v8)
  {
    int v9 = nw_dictionary_copy_value(v8, (uint64_t)out);
    if (v9)
    {
      BOOL v10 = v9;
      nw_dictionary_set_value(*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), out, v9);

      return;
    }

    uint64_t v7 = *(void *)(a1 + 32);
  }

  int v17 = 0;
  __int16 v11 = nw_path_evaluator_create_flow_inner(*(void **)(v7 + 176), 0, 0, 0, 1, uu, 0LL, 0, &v17);
  id v12 = v11;
  if (v17 || !v11)
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
    }
    uint64_t v15 = (os_log_s *)(id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 8LL);
      *(_DWORD *)std::string buf = 136446722;
      uint64_t v19 = "nw_candidate_manager_handle_ids_path_block_invoke";
      __int16 v20 = 2048;
      uint64_t v21 = v16;
      __int16 v22 = 1024;
      int v23 = v17;
      _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_ERROR,  "%{public}s [CM%zu] nw_path_evaluator_create_flow failed: %{darwin.errno}d",  buf,  0x1Cu);
    }
  }

  else
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
    }
    __int16 v13 = (os_log_s *)(id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 8LL);
      *(_DWORD *)std::string buf = 136446978;
      uint64_t v19 = "nw_candidate_manager_handle_ids_path_block_invoke";
      __int16 v20 = 2048;
      uint64_t v21 = v14;
      __int16 v22 = 1040;
      int v23 = 16;
      __int16 v24 = 2096;
      id v25 = uu;
      _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_INFO,  "%{public}s [CM%zu] created resolver flow to %{uuid_t}.16P",  buf,  0x26u);
    }

    nw_dictionary_set_value(*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), out, v12);
  }
}

uint64_t ___ZL41nw_candidate_manager_handle_ids_endpointsP31NWConcrete_nw_candidate_managerPU22objcproto11OS_nw_array8NSObject_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  v100[2] = *MEMORY[0x1895F89C0];
  id v4 = a3;
  nw_endpoint_t endpoint = v4;
  if ([*(id *)(a1 + 32) containsObject:v4])
  {
    [*(id *)(a1 + 32) removeObject:v4];
    goto LABEL_52;
  }

  id v85 = *(id *)(a1 + 40);
  nw_txt_record_t v5 = nw_endpoint_copy_txt_record(v4);
  nw_txt_record_t v6 = v5;
  uint64_t v84 = a1;
  if (!v5)
  {
    __nwlog_obj();
    __int128 v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)access_unint64_t value = 136446210;
    *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
    os_log_type_t v38 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v100[0]) = 16;
    LOBYTE(v99) = 0;
    if (__nwlog_fault(v38, v100, &v99))
    {
      if (LOBYTE(v100[0]) == 17)
      {
        __nwlog_obj();
        id v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v40 = v100[0];
        if (os_log_type_enabled(v39, v100[0]))
        {
          *(_DWORD *)access_unint64_t value = 136446210;
          *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
          _os_log_impl(&dword_181A5C000, v39, v40, "%{public}s called with null metadata", access_value, 0xCu);
        }
      }

      else if ((_BYTE)v99)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v60 = v100[0];
        BOOL v61 = os_log_type_enabled(v39, v100[0]);
        if (backtrace_string)
        {
          if (v61)
          {
            *(_DWORD *)access_unint64_t value = 136446466;
            *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
            *(_WORD *)&access_value[12] = 2082;
            *(void *)&access_value[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v39,  v60,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  access_value,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_136;
        }

        if (v61)
        {
          *(_DWORD *)access_unint64_t value = 136446210;
          *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
          _os_log_impl( &dword_181A5C000,  v39,  v60,  "%{public}s called with null metadata, no backtrace",  access_value,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        id v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v76 = v100[0];
        if (os_log_type_enabled(v39, v100[0]))
        {
          *(_DWORD *)access_unint64_t value = 136446210;
          *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
          _os_log_impl( &dword_181A5C000,  v39,  v76,  "%{public}s called with null metadata, backtrace limit exceeded",  access_value,  0xCu);
        }
      }
    }

LABEL_160:
    if (v56) {
      free(v56);
    }
    __int16 v22 = 0LL;
    goto LABEL_41;
  }

  id v12 = evaluator_for_client_id;
  os_unfair_lock_lock((os_unfair_lock_t)evaluator_for_client_id + 24);
  __int16 v13 = (nw_path *)v12[6];
  os_unfair_lock_unlock((os_unfair_lock_t)evaluator_for_client_id + 24);

  if (v13)
  {
    nw_endpoint_t v14 = nw_path_copy_effective_remote_endpoint(v13);
    if (v14)
    {
      nw_endpoint_t v15 = v14;
      __int128 v99 = 0uLL;
      nw_path_get_nexus_agent_uuid(v13, &v99);
      uint64_t v16 = v88;
      BOOL v17 = nw_path_uses_interface_type(v13, nw_interface_type_cellular);
      id v18 = nw_path_copy_interface(v13);
      uint64_t v19 = v18;
      if (v16 == 2) {
        char v20 = -6;
      }
      else {
        char v20 = -5;
      }
      uint64_t v21 = nw_interface_option_details_create(v18, &v99, v15, v20 - v17, 0LL, -1);
      nw_interface_option_details_set_local_cid(v21, v90);
      nw_interface_option_details_set_remote_cid(v21, v89);
      nw_interface_option_details_set_evaluator(v21, v12);
      nw_candidate_create(v85, v21, v12);
      __int16 v22 = (NWCandidate *)objc_claimAutoreleasedReturnValue();
      if (__nwlog_candidate_manager_log::onceToken != -1) {
        dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
      }
      int v23 = (os_log_s *)(id)gcandidate_managerLogObj;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v82 = *((void *)v85 + 1);
        __int16 v24 = nw_path_copy_effective_local_endpoint(v13);
        id v25 = nw_path_copy_effective_remote_endpoint(v13);
        else {
          id v28 = "unknown";
        }
        else {
          os_log_type_t v32 = off_189BC9540[v88];
        }
        *(_DWORD *)access_unint64_t value = 136447746;
        *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
        *(_WORD *)&access_value[12] = 2048;
        *(void *)&access_value[14] = v82;
        *(_WORD *)&access_value[22] = 2112;
        *(void *)__int16 v92 = v24;
        *(_WORD *)&v92[8] = 2112;
        *(void *)&v92[10] = v25;
        __int16 v93 = 2080;
        uint64_t v94 = v28;
        __int16 v95 = 2080;
        int v96 = v32;
        __int16 v97 = 2112;
        __int16 v98 = v22;
        _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_DEFAULT,  "%{public}s [CM%zu] %@<->%@ %s<->%s %@",  access_value,  0x48u);
      }
    }

    else
    {
      if (__nwlog_candidate_manager_log::onceToken != -1) {
        dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
      }
      unint64_t v30 = (os_log_s *)(id)gcandidate_managerLogObj;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        uint64_t v31 = *((void *)v85 + 1);
        *(_DWORD *)access_unint64_t value = 136446722;
        *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
        *(_WORD *)&access_value[12] = 2048;
        *(void *)&access_value[14] = v31;
        *(_WORD *)&access_value[22] = 2112;
        *(void *)__int16 v92 = v13;
        _os_log_impl( &dword_181A5C000,  v30,  OS_LOG_TYPE_ERROR,  "%{public}s [CM%zu] %@ has no effective remote endpoint",  access_value,  0x20u);
      }

      nw_endpoint_t v15 = 0LL;
      __int16 v22 = 0LL;
    }
  }

  else
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
    }
    nw_endpoint_t v15 = (nw_endpoint_t)(id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v29 = *((void *)v85 + 1);
      *(_DWORD *)access_unint64_t value = 136446722;
      *(void *)&access_value[4] = "nw_candidate_manager_candidate_for_ids_resolved_endpoint";
      *(_WORD *)&access_value[12] = 2048;
      *(void *)&access_value[14] = v29;
      *(_WORD *)&access_value[22] = 2112;
      *(void *)__int16 v92 = v12;
      _os_log_impl(&dword_181A5C000, v15, OS_LOG_TYPE_ERROR, "%{public}s [CM%zu] %@ has no path", access_value, 0x20u);
    }

    __int16 v22 = 0LL;
  }

LABEL_41:
LABEL_42:

LABEL_43:
  nw_txt_record_t v6 = v83;
LABEL_44:

  if (nw_candidate_manager_process_candidate_internal( *(NWConcrete_nw_candidate_manager **)(v84 + 40),  v22))
  {
    [*(id *)(*(void *)(v84 + 40) + 32) setObject:v22 forKeyedSubscript:endpoint];
  }

  else
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
    }
    id v33 = (os_log_s *)(id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      uint64_t v34 = *(void *)(*(void *)(v84 + 40) + 8LL);
      nw_txt_record_t v35 = nw_endpoint_copy_txt_record(endpoint);
      *(_DWORD *)access_unint64_t value = 136446978;
      *(void *)&access_value[4] = "nw_candidate_manager_handle_ids_endpoints_block_invoke";
      *(_WORD *)&access_value[12] = 2048;
      *(void *)&access_value[14] = v34;
      *(_WORD *)&access_value[22] = 2112;
      *(void *)__int16 v92 = endpoint;
      *(_WORD *)&v92[8] = 2112;
      *(void *)&v92[10] = v35;
      _os_log_impl( &dword_181A5C000,  v33,  OS_LOG_TYPE_ERROR,  "%{public}s [CM%zu] duplicate endpoint: %@, metadata:%@",  access_value,  0x2Au);
    }
  }

  id v4 = endpoint;
LABEL_52:

  return 1LL;
}

              if (v52) {
                free(v52);
              }
              goto LABEL_33;
            }

            __nwlog_obj();
            BOOL v61 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)std::string buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_error";
            id v28 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(v7_Block_object_dispose(va, 8) = 0;
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              uint64_t v62 = type[0];
              if (os_log_type_enabled(v29, type[0]))
              {
                *(_DWORD *)std::string buf = 136446210;
                *(void *)&uint8_t buf[4] = "__nw_protocol_error";
                _os_log_impl(&dword_181A5C000, v29, v62, "%{public}s called with null protocol", buf, 0xCu);
              }

              goto LABEL_142;
            }

            if (!(_BYTE)v78)
            {
              __nwlog_obj();
              uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              BOOL v72 = type[0];
              if (os_log_type_enabled(v29, type[0]))
              {
                *(_DWORD *)std::string buf = 136446210;
                *(void *)&uint8_t buf[4] = "__nw_protocol_error";
                _os_log_impl( &dword_181A5C000,  v29,  v72,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
              }

              goto LABEL_142;
            }

            os_log_type_t v43 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            BOOL v67 = type[0];
            uint64_t v68 = os_log_type_enabled(v29, type[0]);
            if (!v43)
            {
              if (v68)
              {
                *(_DWORD *)std::string buf = 136446210;
                *(void *)&uint8_t buf[4] = "__nw_protocol_error";
                _os_log_impl( &dword_181A5C000,  v29,  v67,  "%{public}s called with null protocol, no backtrace",  buf,  0xCu);
              }

              goto LABEL_142;
            }

            if (v68)
            {
              *(_DWORD *)std::string buf = 136446466;
              *(void *)&uint8_t buf[4] = "__nw_protocol_error";
              nw_txt_record_t v83 = 2082;
              uint64_t v84 = v43;
              _os_log_impl( &dword_181A5C000,  v29,  v67,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
            }
          }

          else
          {
            __nwlog_obj();
            nw_txt_record_t v35 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)std::string buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
            id v28 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(v7_Block_object_dispose(va, 8) = 0;
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              id v36 = type[0];
              if (os_log_type_enabled(v29, type[0]))
              {
                *(_DWORD *)std::string buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
                _os_log_impl(&dword_181A5C000, v29, v36, "%{public}s called with null other_protocol", buf, 0xCu);
              }

              goto LABEL_142;
            }

            if (!(_BYTE)v78)
            {
              __nwlog_obj();
              uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v60 = type[0];
              if (os_log_type_enabled(v29, type[0]))
              {
                *(_DWORD *)std::string buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
                _os_log_impl( &dword_181A5C000,  v29,  v60,  "%{public}s called with null other_protocol, backtrace limit exceeded",  buf,  0xCu);
              }

              goto LABEL_142;
            }

            os_log_type_t v43 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v48 = type[0];
            os_log_type_t v49 = os_log_type_enabled(v29, type[0]);
            if (!v43)
            {
              if (v49)
              {
                *(_DWORD *)std::string buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
                _os_log_impl( &dword_181A5C000,  v29,  v48,  "%{public}s called with null other_protocol, no backtrace",  buf,  0xCu);
              }

              goto LABEL_142;
            }

            if (v49)
            {
              *(_DWORD *)std::string buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
              nw_txt_record_t v83 = 2082;
              uint64_t v84 = v43;
              _os_log_impl( &dword_181A5C000,  v29,  v48,  "%{public}s called with null other_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
            }
          }
        }

        else
        {
          __nwlog_obj();
          id v33 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
          id v28 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v7_Block_object_dispose(va, 8) = 0;
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            uint64_t v34 = type[0];
            if (os_log_type_enabled(v29, type[0]))
            {
              *(_DWORD *)std::string buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
              _os_log_impl( &dword_181A5C000,  v29,  v34,  "%{public}s called with null instance->parent_definition->extended_state",  buf,  0xCu);
            }

            goto LABEL_142;
          }

          if (!(_BYTE)v78)
          {
            __nwlog_obj();
            uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            uint64_t v59 = type[0];
            if (os_log_type_enabled(v29, type[0]))
            {
              *(_DWORD *)std::string buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
              _os_log_impl( &dword_181A5C000,  v29,  v59,  "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded",  buf,  0xCu);
            }

            goto LABEL_142;
          }

          os_log_type_t v43 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v46 = type[0];
          uint64_t v47 = os_log_type_enabled(v29, type[0]);
          if (!v43)
          {
            if (v47)
            {
              *(_DWORD *)std::string buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
              _os_log_impl( &dword_181A5C000,  v29,  v46,  "%{public}s called with null instance->parent_definition->extended_state, no backtrace",  buf,  0xCu);
            }

            goto LABEL_142;
          }

          if (v47)
          {
            *(_DWORD *)std::string buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
            nw_txt_record_t v83 = 2082;
            uint64_t v84 = v43;
            _os_log_impl( &dword_181A5C000,  v29,  v46,  "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s",  buf,  0x16u);
          }
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
        id v28 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v7_Block_object_dispose(va, 8) = 0;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v32 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)std::string buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
            _os_log_impl( &dword_181A5C000,  v29,  v32,  "%{public}s called with null instance->parent_definition",  buf,  0xCu);
          }

          goto LABEL_142;
        }

        if (!(_BYTE)v78)
        {
          __nwlog_obj();
          uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v58 = type[0];
          if (os_log_type_enabled(v29, type[0]))
          {
            *(_DWORD *)std::string buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
            _os_log_impl( &dword_181A5C000,  v29,  v58,  "%{public}s called with null instance->parent_definition, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_142;
        }

        os_log_type_t v43 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v44 = type[0];
        os_log_type_t v45 = os_log_type_enabled(v29, type[0]);
        if (!v43)
        {
          if (v45)
          {
            *(_DWORD *)std::string buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
            _os_log_impl( &dword_181A5C000,  v29,  v44,  "%{public}s called with null instance->parent_definition, no backtrace",  buf,  0xCu);
          }

          goto LABEL_142;
        }

        if (v45)
        {
          *(_DWORD *)std::string buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
          nw_txt_record_t v83 = 2082;
          uint64_t v84 = v43;
          _os_log_impl( &dword_181A5C000,  v29,  v44,  "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s",  buf,  0x16u);
        }
      }

      free(v43);
      if (!v28) {
        goto LABEL_37;
      }
      goto LABEL_144;
    }

    __nwlog_obj();
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
    id v28 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v7_Block_object_dispose(va, 8) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      unint64_t v30 = type[0];
      if (os_log_type_enabled(v29, type[0]))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
        _os_log_impl(&dword_181A5C000, v29, v30, "%{public}s called with null instance", buf, 0xCu);
      }
    }

    else if ((_BYTE)v78)
    {
      os_log_type_t v40 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v41 = type[0];
      uint64_t v42 = os_log_type_enabled(v29, type[0]);
      if (v40)
      {
        if (v42)
        {
          *(_DWORD *)std::string buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
          nw_txt_record_t v83 = 2082;
          uint64_t v84 = v40;
          _os_log_impl( &dword_181A5C000,  v29,  v41,  "%{public}s called with null instance, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v40);
LABEL_143:
        if (!v28) {
          goto LABEL_37;
        }
LABEL_144:
        free(v28);
        goto LABEL_37;
      }

      if (v42)
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
        _os_log_impl(&dword_181A5C000, v29, v41, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      int v57 = type[0];
      if (os_log_type_enabled(v29, type[0]))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_error";
        _os_log_impl( &dword_181A5C000,  v29,  v57,  "%{public}s called with null instance, backtrace limit exceeded",  buf,  0xCu);
      }
    }

            goto LABEL_76;
          }

          if (!v91)
          {
            __nwlog_obj();
            os_log_type_t v71 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            nw_txt_record_t v83 = type;
            if (os_log_type_enabled(v71, type))
            {
              *(_DWORD *)std::string buf = 136446210;
              uint64_t v94 = "nw_read_request_create_with_buffer";
              _os_log_impl( &dword_181A5C000,  v71,  v83,  "%{public}s called with null buffer, backtrace limit exceeded",  buf,  0xCu);
            }

            goto LABEL_160;
          }

          os_log_type_t v78 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v71 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v79 = type;
          os_log_type_t v80 = os_log_type_enabled(v71, type);
          if (!v78)
          {
            if (v80)
            {
              *(_DWORD *)std::string buf = 136446210;
              uint64_t v94 = "nw_read_request_create_with_buffer";
              _os_log_impl(&dword_181A5C000, v71, v79, "%{public}s called with null buffer, no backtrace", buf, 0xCu);
            }

            goto LABEL_160;
          }

          if (v80)
          {
            *(_DWORD *)std::string buf = 136446466;
            uint64_t v94 = "nw_read_request_create_with_buffer";
            __int16 v95 = 2082;
            *(void *)int v96 = v78;
            _os_log_impl( &dword_181A5C000,  v71,  v79,  "%{public}s called with null buffer, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v78);
        }

    if (v60) {
      free(v60);
    }
    goto LABEL_162;
  }

  if (v4 != 1)
  {
    id v28 = *a2;
    if (v28 != a1)
    {
      if (v28 >= a1) {
        return 0LL;
      }
      __nwlog_obj();
      os_log_type_t v76 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 136446978;
        os_log_type_t v81 = "nw_path_verify_tlv_length";
        uint64_t v82 = 1024;
        nw_txt_record_t v83 = 202;
        uint64_t v84 = 1024;
        id v85 = a1;
        __int16 v86 = 1024;
        LODWORD(v87) = v28;
        _os_log_impl( &dword_181A5C000,  v76,  OS_LOG_TYPE_DEBUG,  "%{public}s Permitting TLV of type %u with larger length %u, should be %u",  buf,  0x1Eu);
      }
    }

    if (v28 > 8)
    {
      uint64_t v29 = dispatch_data_create(v5, v28 - 8, 0LL, 0LL);
      if (v29)
      {
        unint64_t v30 = v29;
        custom = nw_browse_descriptor_create_custom(v4, v29, 0LL);

        return (nw_browse_descriptor_t)custom;
      }
    }

    return 0LL;
  }

  uint64_t v7 = strnlen((const char *)a2 + 8, a1 - 8);
  if (v7 >= v6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v31 = (id)gLogObj;
    *(_DWORD *)std::string buf = 136447234;
    os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
    uint64_t v82 = 1024;
    nw_txt_record_t v83 = 202;
    uint64_t v84 = 1024;
    id v85 = a1;
    __int16 v86 = 2080;
    char v87 = "nw_path_copy_browse_descriptor_from_tlv";
    uint64_t v88 = 1024;
    os_log_type_t v89 = 1900;
    __int16 v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v78 = 0;
    if (__nwlog_fault(v11, &type, &v78))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)std::string buf = 136447234;
          os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
          uint64_t v82 = 1024;
          nw_txt_record_t v83 = 202;
          uint64_t v84 = 1024;
          id v85 = a1;
          __int16 v86 = 2080;
          char v87 = "nw_path_copy_browse_descriptor_from_tlv";
          uint64_t v88 = 1024;
          os_log_type_t v89 = 1900;
          _os_log_impl( &dword_181A5C000,  v12,  v32,  "%{public}s TLV of type %d has invalid length %u (%s:%d)",  buf,  0x28u);
        }

        goto LABEL_25;
      }

      if (!v78)
      {
        __nwlog_obj();
        id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __int16 v55 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)std::string buf = 136447234;
          os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
          uint64_t v82 = 1024;
          nw_txt_record_t v83 = 202;
          uint64_t v84 = 1024;
          id v85 = a1;
          __int16 v86 = 2080;
          char v87 = "nw_path_copy_browse_descriptor_from_tlv";
          uint64_t v88 = 1024;
          os_log_type_t v89 = 1900;
          _os_log_impl( &dword_181A5C000,  v12,  v55,  "%{public}s TLV of type %d has invalid length %u (%s:%d), backtrace limit exceeded",  buf,  0x28u);
        }

        goto LABEL_25;
      }

      id v39 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v40 = type;
      char v41 = os_log_type_enabled(v12, type);
      if (!v39)
      {
        if (v41)
        {
          *(_DWORD *)std::string buf = 136447234;
          os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
          uint64_t v82 = 1024;
          nw_txt_record_t v83 = 202;
          uint64_t v84 = 1024;
          id v85 = a1;
          __int16 v86 = 2080;
          char v87 = "nw_path_copy_browse_descriptor_from_tlv";
          uint64_t v88 = 1024;
          os_log_type_t v89 = 1900;
          _os_log_impl( &dword_181A5C000,  v12,  v40,  "%{public}s TLV of type %d has invalid length %u (%s:%d), no backtrace",  buf,  0x28u);
        }

        goto LABEL_25;
      }

      if (v41)
      {
        *(_DWORD *)std::string buf = 136447490;
        os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
        uint64_t v82 = 1024;
        nw_txt_record_t v83 = 202;
        uint64_t v84 = 1024;
        id v85 = a1;
        __int16 v86 = 2080;
        char v87 = "nw_path_copy_browse_descriptor_from_tlv";
        uint64_t v88 = 1024;
        os_log_type_t v89 = 1900;
        __int16 v90 = 2082;
        uint32_t v91 = v39;
        _os_log_impl( &dword_181A5C000,  v12,  v40,  "%{public}s TLV of type %d has invalid length %u (%s:%d), dumping backtrace:%{public}s",  buf,  0x32u);
      }

      goto LABEL_110;
    }
  }

  else
  {
    uint64_t v8 = &v5[v7 + 1];
    if (strnlen(v8, v6 - (v7 + 1)) + v7 + 1 < v6) {
      return nw_browse_descriptor_create_bonjour_service(v5, v8);
    }
    __nwlog_obj();
    nw_txt_record_t v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136447234;
    os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
    uint64_t v82 = 1024;
    nw_txt_record_t v83 = 202;
    uint64_t v84 = 1024;
    id v85 = a1;
    __int16 v86 = 2080;
    char v87 = "nw_path_copy_browse_descriptor_from_tlv";
    uint64_t v88 = 1024;
    os_log_type_t v89 = 1907;
    __int16 v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v78 = 0;
    if (__nwlog_fault(v11, &type, &v78))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v36 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)std::string buf = 136447234;
          os_log_type_t v81 = "nw_path_copy_browse_descriptor_from_tlv";
          uint64_t v82 = 1024;
          nw_txt_record_t v83 = 202;
          uint64_t v84 = 1024;
          id v85 = a1;
          __int16 v86 = 2080;
          char v87 = "nw_path_copy_browse_descriptor_from_tlv";
          uint64_t v88 = 1024;
          os_log_type_t v89 = 1907;
          _os_log_impl( &dword_181A5C000,  v12,  v36,  "%{public}s TLV of type %d has invalid length %u (%s:%d)",  buf,  0x28u);
        }

                                __int16 v110 = (void *)v305;
                                lsqpack_enc_cleanup(v305 + 256);
                                lsqpack_dec_cleanup(v305 + 496);
                                uint64_t v111 = *(void **)(v305 + 1216);
                                if (v111)
                                {
                                  __int16 v112 = *(void **)(v305 + 1224);
                                  if (v112) {
                                    nw_association_unregister(v111, v112);
                                  }
                                }

                                os_log_type_t v113 = *(void **)(v305 + 1208);
                                if (v113)
                                {
                                  os_release(v113);
                                  *(void *)(v305 + 120_Block_object_dispose(va, 8) = 0LL;
                                }

                                __int16 v114 = *(void **)(v305 + 1216);
                                if (v114)
                                {
                                  os_release(v114);
                                  *(void *)(v305 + 1216) = 0LL;
                                }

                                os_log_type_t v115 = *(void **)(v305 + 1224);
                                if (v115)
                                {
                                  os_release(v115);
                                  *(void *)(v305 + 1224) = 0LL;
                                }

                                __int16 v116 = *(void **)(v305 + 1232);
                                if (v116)
                                {
                                  os_release(v116);
                                  *(void *)(v305 + 1232) = 0LL;
                                }

                                os_log_type_t v117 = *(void **)(v305 + 1096);
                                if (v117)
                                {
                                  os_release(v117);
                                  *(void *)(v305 + 1096) = 0LL;
                                }

                                uint64_t v118 = *(void **)(v305 + 1104);
                                if (v118)
                                {
                                  os_release(v118);
                                  *(void *)(v305 + 1104) = 0LL;
                                }

                                os_log_type_t v119 = *(void **)(v305 + 1112);
                                if (v119)
                                {
                                  os_release(v119);
                                  *(void *)(v305 + 1112) = 0LL;
                                }

                                os_log_type_t v120 = *(void **)(v305 + 1120);
                                if (v120)
                                {
                                  os_release(v120);
                                  *(void *)(v305 + 1120) = 0LL;
                                }

                                os_log_type_t v121 = *(void **)(v305 + 1128);
                                if (v121)
                                {
                                  os_release(v121);
                                  *(void *)(v305 + 112_Block_object_dispose(va, 8) = 0LL;
                                }

                                os_log_type_t v122 = *(void **)(v305 + 1256);
                                if (v122)
                                {
                                  os_release(v122);
                                  *(void *)(v305 + 1256) = 0LL;
                                }

                                BOOL v123 = *(dispatch_object_s **)(v305 + 1176);
                                if (v123)
                                {
                                  dispatch_release(v123);
                                  *(void *)(v305 + 1176) = 0LL;
                                }

                                uint64_t v124 = *(dispatch_object_s **)(v305 + 1184);
                                if (v124)
                                {
                                  dispatch_release(v124);
                                  *(void *)(v305 + 1184) = 0LL;
                                }

                                BOOL v125 = *(dispatch_object_s **)(v305 + 1192);
                                if (v125)
                                {
                                  dispatch_release(v125);
                                  *(void *)(v305 + 1192) = 0LL;
                                }

                                uint64_t v126 = *(dispatch_object_s **)(v305 + 1160);
                                if (v126)
                                {
                                  dispatch_release(v126);
                                  *(void *)(v305 + 1160) = 0LL;
                                }

                                char v127 = *(dispatch_object_s **)(v305 + 1168);
                                if (v127)
                                {
                                  dispatch_release(v127);
                                  *(void *)(v305 + 116_Block_object_dispose(va, 8) = 0LL;
                                }

                                BOOL v128 = *(dispatch_object_s **)(v305 + 1152);
                                if (v128)
                                {
                                  dispatch_release(v128);
                                  *(void *)(v305 + 1152) = 0LL;
                                }

                                v129 = *(dispatch_object_s **)(v305 + 1136);
                                if (v129)
                                {
                                  dispatch_release(v129);
                                  *(void *)(v305 + 1136) = 0LL;
                                }

                                __int16 v130 = *(dispatch_object_s **)(v305 + 1144);
                                if (v130)
                                {
                                  dispatch_release(v130);
                                  *(void *)(v305 + 1144) = 0LL;
                                }

                                uint64_t v131 = *(dispatch_object_s **)(v305 + 1200);
                                if (v131)
                                {
                                  dispatch_release(v131);
                                  *(void *)(v305 + 1200) = 0LL;
                                }

                                uint64_t v132 = *(const void **)(v305 + 864);
                                if (v132)
                                {
                                  _Block_release(v132);
                                  *(void *)(v305 + 864) = 0LL;
                                }

                                char v133 = *(dispatch_object_s **)(v305 + 872);
                                if (v133)
                                {
                                  dispatch_release(v133);
                                  *(void *)(v305 + 872) = 0LL;
                                }

                                (*(void (**)(void, void))(*(void *)(v305 + 1040) + 16LL))( *(void *)(v305 + 1040),  0LL);
                                uint64_t v134 = *(const void **)(v305 + 1040);
                                if (v134) {
                                  _Block_release(v134);
                                }
                                goto LABEL_207;
                              }

                              BOOL v72 = (void *)(v71 + 104);
                              if (gLogDatapath)
                              {
                                v234 = (os_log_s *)__nwlog_obj();
                                if (os_log_type_enabled(v234, OS_LOG_TYPE_DEBUG))
                                {
                                  *(_DWORD *)std::string buf = 136446210;
                                  *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
                                  _os_log_impl( &dword_181A5C000,  v234,  OS_LOG_TYPE_DEBUG,  "%{public}s called",  buf,  0xCu);
                                }
                              }

                              *(void *)std::string buf = v38;
                              *(void *)&buf[8] = v39[397];
                              *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_60412;
                              v309 = (const char *)&__block_descriptor_tmp_26_60413;
                              v310 = v72;
                              LOBYTE(v311) = 0;
                              __int16 v73 = *v72;
                              do
                              {
                                if (!v73) {
                                  break;
                                }
                                os_log_type_t v74 = *(void *)(v73 + 32);
                                BOOL v75 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
                                __int16 v73 = v74;
                              }

                              while ((v75 & 1) != 0);
                              os_log_type_t v76 = *(void *)(v2 + 1080);
                              os_log_type_t v77 = *(void *)(v76 + 32);
                              if (v77)
                              {
                                os_log_type_t v78 = *(void *)(v77 + 24);
                                if (v78)
                                {
                                  os_log_type_t v79 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
                                  if (v79)
                                  {
                                    v79(v77, v76);
LABEL_102:
                                    nw_protocol_http3_uni_stream_destroy(*(void *)(v2 + 1080));
                                    *(void *)(v2 + 1080) = 0LL;
                                    goto LABEL_103;
                                  }
                                }
                              }

                              __nwlog_obj();
                              v174 = *(void *)(*(void *)(v2 + 1080) + 32LL);
                              v175 = "invalid";
                              if (v174)
                              {
                                v176 = *(const char **)(v174 + 16);
                                if (v176) {
                                  v175 = v176;
                                }
                              }

                              *(_DWORD *)std::string buf = 136446466;
                              *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                              *(_WORD *)&_BYTE buf[12] = 2082;
                              *(void *)&buf[14] = v175;
                              v177 = (char *)_os_log_send_and_compose_impl();
                              os_log_type_t type = OS_LOG_TYPE_ERROR;
                              v306 = 0;
                              if (__nwlog_fault(v177, &type, &v306))
                              {
                                if (type == OS_LOG_TYPE_FAULT)
                                {
                                  v178 = (os_log_s *)__nwlog_obj();
                                  v179 = type;
                                  if (os_log_type_enabled(v178, type))
                                  {
                                    v180 = *(void *)(*(void *)(v305 + 1080) + 32LL);
                                    v181 = "invalid";
                                    if (v180)
                                    {
                                      v182 = *(const char **)(v180 + 16);
                                      if (v182) {
                                        v181 = v182;
                                      }
                                    }

                                    *(_DWORD *)std::string buf = 136446466;
                                    *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                                    *(_WORD *)&_BYTE buf[12] = 2082;
                                    *(void *)&buf[14] = v181;
                                    v183 = "%{public}s protocol %{public}s has invalid remove_input_handler callback";
LABEL_409:
                                    _os_log_impl(&dword_181A5C000, v178, v179, v183, buf, 0x16u);
                                  }
                                }

                                else if (v306)
                                {
                                  v221 = (char *)__nw_create_backtrace_string();
                                  v178 = (os_log_s *)__nwlog_obj();
                                  v179 = type;
                                  v222 = os_log_type_enabled(v178, type);
                                  if (v221)
                                  {
                                    if (v222)
                                    {
                                      v223 = *(void *)(*(void *)(v305 + 1080) + 32LL);
                                      v224 = "invalid";
                                      if (v223)
                                      {
                                        v225 = *(const char **)(v223 + 16);
                                        if (v225) {
                                          v224 = v225;
                                        }
                                      }

                                      *(_DWORD *)std::string buf = 136446722;
                                      *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                                      *(_WORD *)&_BYTE buf[12] = 2082;
                                      *(void *)&buf[14] = v224;
                                      *(_WORD *)&_BYTE buf[22] = 2082;
                                      v309 = v221;
                                      _os_log_impl( &dword_181A5C000,  v178,  v179,  "%{public}s protocol %{public}s has invalid remove_input_handler callback, dumpin g backtrace:%{public}s",  buf,  0x20u);
                                    }

                                    free(v221);
                                    goto LABEL_410;
                                  }

                                  if (v222)
                                  {
                                    v270 = *(void *)(*(void *)(v305 + 1080) + 32LL);
                                    v271 = "invalid";
                                    if (v270)
                                    {
                                      v272 = *(const char **)(v270 + 16);
                                      if (v272) {
                                        v271 = v272;
                                      }
                                    }

                                    *(_DWORD *)std::string buf = 136446466;
                                    *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                                    *(_WORD *)&_BYTE buf[12] = 2082;
                                    *(void *)&buf[14] = v271;
                                    v183 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, no backtrace";
                                    goto LABEL_409;
                                  }
                                }

                                else
                                {
                                  v178 = (os_log_s *)__nwlog_obj();
                                  v179 = type;
                                  if (os_log_type_enabled(v178, type))
                                  {
                                    v252 = *(void *)(*(void *)(v305 + 1080) + 32LL);
                                    v253 = "invalid";
                                    if (v252)
                                    {
                                      v254 = *(const char **)(v252 + 16);
                                      if (v254) {
                                        v253 = v254;
                                      }
                                    }

                                    *(_DWORD *)std::string buf = 136446466;
                                    *(void *)&uint8_t buf[4] = "nw_http3_teardown_uni_streams";
                                    *(_WORD *)&_BYTE buf[12] = 2082;
                                    *(void *)&buf[14] = v253;
                                    v183 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, bac"
                                           "ktrace limit exceeded";
                                    goto LABEL_409;
                                  }
                                }
                              }

                *(_DWORD *)(v92 + 268) |= 1u;
                ++*(_DWORD *)(a1 + 624);
                *(void *)std::string buf = MEMORY[0x1895F87A8];
                *(void *)&buf[8] = 0x40000000LL;
                *(void *)&buf[16] = ___ZL32nw_http3_stream_serialize_fieldsP24nw_protocol_http3_streamP20nw_protocol_metadata_block_invoke;
                v427 = (__n128 (*)(uint64_t, uint64_t))&unk_189BC4488;
                v428 = v409;
                v429 = v399;
                *(void *)v430 = &v404;
                *(void *)&v430[8] = v408;
                *(void *)&v430[16] = v398;
                v431 = &v400;
                v436 = a1;
                v437 = v92 + 256;
                v432 = &v413;
                v433 = type;
                v434 = &v390;
                v435 = &v394;
                nw_http_metadata_enumerate_modern_header_fields_combined(v19, buf);
                __int16 v116 = lsqpack_enc_end_header(v92 + 256, (uint64_t)__src);
                if ((v116 & 0x8000000000000000LL) == 0)
                {
                  os_log_type_t v117 = v116;
                  memcpy((void *)(v94 - v116 + 22), __src, v116);
                  *(void *)(a1 + 520) = dispatch_data_create_subrange( (dispatch_data_t)v395[3],  22 - v117,  v117 + v405[3] - 22);
                  uint64_t v118 = (dispatch_object_s *)v395[3];
                  if (v118)
                  {
                    dispatch_release(v118);
                    v395[3] = 0LL;
                  }

                  os_log_type_t v119 = v401[3];
                  BOOL v17 = v369;
                  BOOL v64 = log;
                  if (v119) {
                    subrange = dispatch_data_create_subrange((dispatch_data_t)v391[3], 0LL, v119);
                  }
                  else {
                    subrange = 0LL;
                  }
                  *(void *)(a1 + 52_Block_object_dispose(va, 8) = subrange;
                  BOOL v125 = (dispatch_object_s *)v391[3];
                  if (v125)
                  {
                    dispatch_release(v125);
                    v391[3] = 0LL;
                  }

    os_log_type_t v60 = nw_endpoint_get_address((nw_endpoint_t)address_with_port);
    std::string v149 = 1;
    goto LABEL_161;
  }

  int v57 = connect(*(_DWORD *)&a1[4].flow_id[12], v41, v41->sa_len);
  if ((v57 & 0x80000000) == 0)
  {
    os_log_type_t v58 = 0LL;
    uint64_t v59 = "connect";
    goto LABEL_230;
  }

  os_log_type_t v58 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  *(_WORD *)v5 |= 2u;
  uint64_t v59 = "connect";
LABEL_231:
  uint64_t v53 = 1LL;
  if (v57 < 0 && (_DWORD)v58 != 36)
  {
    if ((_DWORD)v58 == 47 && LODWORD(a1[4].identifier) == 2)
    {
      uint64_t v111 = v41->sa_family;
      if (v111 == 30)
      {
      }

      else if (v111 == 2 && (*(_DWORD *)&v41->sa_data[2] & 0xF0) == 0xE0)
      {
LABEL_238:
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        __int16 v112 = gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_socket_connect";
          *(_WORD *)&_BYTE buf[12] = 2080;
          *(void *)&buf[14] = (char *)a1 + 404;
          *(_WORD *)&_BYTE buf[22] = 2082;
          *(void *)&v170 = v59;
          WORD4(v170) = 1024;
          *(_DWORD *)((char *)&v170 + 10) = 47;
          os_log_type_t v113 = "%{public}s %s %{public}s failed: multicast addresses not supported on stream sockets %{darwin.errno}d";
          __int16 v114 = (os_log_s *)v112;
LABEL_262:
          _os_log_impl(&dword_181A5C000, v114, OS_LOG_TYPE_ERROR, v113, buf, 0x26u);
        }

        goto LABEL_263;
      }
    }

    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    __int16 v116 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
    {
      os_log_type_t v117 = *(_DWORD *)&a1[4].flow_id[12];
      uint64_t v47 = (*(_WORD *)v5 & 0x8000) == 0;
      *(_DWORD *)std::string buf = 136447490;
      *(void *)&uint8_t buf[4] = "nw_socket_connect";
      if (v47) {
        uint64_t v118 = "";
      }
      else {
        uint64_t v118 = ", tfo";
      }
      *(_WORD *)&_BYTE buf[12] = 2080;
      *(void *)&buf[14] = (char *)a1 + 404;
      *(_WORD *)&_BYTE buf[22] = 2082;
      *(void *)&v170 = v59;
      WORD4(v170) = 1024;
      *(_DWORD *)((char *)&v170 + 10) = v117;
      HIWORD(v170) = 2082;
      *(void *)object = v118;
      *(_WORD *)&object[8] = 1024;
      LODWORD(v172) = v58;
      _os_log_impl( &dword_181A5C000,  v116,  OS_LOG_TYPE_ERROR,  "%{public}s %s %{public}s failed (fd %d%{public}s) %{darwin.errno}d",  buf,  0x36u);
    }

    switch((int)v58)
    {
      case 1:
      case 6:
      case 13:
      case 49:
      case 50:
      case 51:
      case 60:
      case 61:
      case 64:
      case 65:
      case 102:
        os_log_type_t v119 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
        {
          os_log_type_t v120 = *(_WORD *)v5;
          *(void *)&uint8_t buf[4] = "nw_socket_connect";
          *(_DWORD *)std::string buf = 136446978;
          *(_WORD *)&_BYTE buf[12] = 2082;
          if (v120 < 0) {
            os_log_type_t v121 = " (tfo)";
          }
          else {
            os_log_type_t v121 = "";
          }
          *(void *)&buf[14] = v59;
          *(_WORD *)&_BYTE buf[22] = 2082;
          *(void *)&v170 = v121;
          WORD4(v170) = 1024;
          *(_DWORD *)((char *)&v170 + 10) = v58;
          os_log_type_t v113 = "%{public}s %{public}s failed%{public}s %{darwin.errno}d";
          __int16 v114 = v119;
          goto LABEL_262;
        }

        goto LABEL_263;
      default:
        __nwlog_obj();
        os_log_type_t v122 = *(_WORD *)&a1[6].flow_id[13];
        *(_DWORD *)std::string buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_socket_connect";
        *(_WORD *)&_BYTE buf[12] = 2082;
        if (v122 < 0) {
          BOOL v123 = " (tfo)";
        }
        else {
          BOOL v123 = "";
        }
        *(void *)&buf[14] = v59;
        *(_WORD *)&_BYTE buf[22] = 2082;
        *(void *)&v170 = v123;
        WORD4(v170) = 1024;
        *(_DWORD *)((char *)&v170 + 10) = v58;
        uint64_t v124 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(type.sae_srcif) = 16;
        LOBYTE(v160) = 0;
        if ((__nwlog_fault(v124, &type, &v160) & 1) == 0) {
          goto LABEL_332;
        }
        if (LOBYTE(type.sae_srcif) == 17)
        {
          BOOL v125 = (os_log_s *)__nwlog_obj();
          uint64_t v126 = type.sae_srcif;
          if (!os_log_type_enabled(v125, type.sae_srcif)) {
            goto LABEL_332;
          }
          if ((*(_WORD *)v5 & 0x8000) != 0) {
            char v127 = " (tfo)";
          }
          else {
            char v127 = "";
          }
          *(_DWORD *)std::string buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_socket_connect";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v59;
          *(_WORD *)&_BYTE buf[22] = 2082;
          *(void *)&v170 = v127;
          WORD4(v170) = 1024;
          *(_DWORD *)((char *)&v170 + 10) = v58;
          BOOL v128 = "%{public}s %{public}s failed%{public}s %{darwin.errno}d";
        }

        else if ((_BYTE)v160)
        {
          uint64_t v138 = (char *)__nw_create_backtrace_string();
          BOOL v125 = (os_log_s *)__nwlog_obj();
          uint64_t v126 = type.sae_srcif;
          os_log_type_t v139 = os_log_type_enabled(v125, type.sae_srcif);
          if (v138)
          {
            if (v139)
            {
              if ((*(_WORD *)v5 & 0x8000) != 0) {
                v140 = " (tfo)";
              }
              else {
                v140 = "";
              }
              *(_DWORD *)std::string buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_socket_connect";
              *(_WORD *)&_BYTE buf[12] = 2082;
              *(void *)&buf[14] = v59;
              *(_WORD *)&_BYTE buf[22] = 2082;
              *(void *)&v170 = v140;
              WORD4(v170) = 1024;
              *(_DWORD *)((char *)&v170 + 10) = v58;
              HIWORD(v170) = 2082;
              *(void *)object = v138;
              _os_log_impl( &dword_181A5C000,  v125,  v126,  "%{public}s %{public}s failed%{public}s %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x30u);
            }

            free(v138);
            goto LABEL_332;
          }

          if (!v139)
          {
LABEL_332:
            if (v124) {
              free(v124);
            }
LABEL_263:
            nw_socket_internal_error((uint64_t)v153, v58);
            return 0LL;
          }

          if ((*(_WORD *)v5 & 0x8000) != 0) {
            uint64_t v145 = " (tfo)";
          }
          else {
            uint64_t v145 = "";
          }
          *(_DWORD *)std::string buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_socket_connect";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v59;
          *(_WORD *)&_BYTE buf[22] = 2082;
          *(void *)&v170 = v145;
          WORD4(v170) = 1024;
          *(_DWORD *)((char *)&v170 + 10) = v58;
          BOOL v128 = "%{public}s %{public}s failed%{public}s %{darwin.errno}d, no backtrace";
        }

        else
        {
          BOOL v125 = (os_log_s *)__nwlog_obj();
          uint64_t v126 = type.sae_srcif;
          if (!os_log_type_enabled(v125, type.sae_srcif)) {
            goto LABEL_332;
          }
          if ((*(_WORD *)v5 & 0x8000) != 0) {
            uint64_t v144 = " (tfo)";
          }
          else {
            uint64_t v144 = "";
          }
          *(_DWORD *)std::string buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_socket_connect";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v59;
          *(_WORD *)&_BYTE buf[22] = 2082;
          *(void *)&v170 = v144;
          WORD4(v170) = 1024;
          *(_DWORD *)((char *)&v170 + 10) = v58;
          BOOL v128 = "%{public}s %{public}s failed%{public}s %{darwin.errno}d, backtrace limit exceeded";
        }

        _os_log_impl(&dword_181A5C000, v125, v126, v128, buf, 0x26u);
        goto LABEL_332;
    }
  }

  return v53;
}

        if (*(_BYTE *)(a2 + *v8)) {
          __int128 v99 = 0LL;
        }
LABEL_162:
        *(_BYTE *)(a1 + 61) = v99 != 0;
        goto LABEL_4;
      case 9u:
        *(_BYTE *)(a1 + 64) |= 8u;
        os_log_type_t v119 = *v3;
        os_log_type_t v120 = *(void *)(a2 + v119);
        if (v120 == -1LL || v120 >= *(void *)(a2 + *v6))
        {
          BOOL v123 = 0LL;
LABEL_164:
          *(_BYTE *)(a2 + *v_Block_object_dispose(va, 8) = 1;
          goto LABEL_165;
        }

        os_log_type_t v121 = v120 + 1;
        os_log_type_t v122 = *(_BYTE *)(*(void *)(a2 + *v10) + v120);
        *(void *)(a2 + v119) = v121;
        BOOL v123 = v122 & 0x7F;
        if ((v122 & 0x80) == 0) {
          goto LABEL_165;
        }
        uint64_t v124 = *v3;
        BOOL v125 = *(void *)(a2 + v124);
        if (v125 == -1LL || v125 >= *(void *)(a2 + *v6)) {
          goto LABEL_164;
        }
        uint64_t v126 = v125 + 1;
        char v127 = *(char *)(*(void *)(a2 + *v10) + v125);
        *(void *)(a2 + v124) = v126;
        v123 |= (unint64_t)(v127 & 0x7F) << 7;
        if ((v127 & 0x80000000) == 0) {
          goto LABEL_165;
        }
        BOOL v128 = *v3;
        v129 = *(void *)(a2 + v128);
        if (v129 == -1LL || v129 >= *(void *)(a2 + *v6)) {
          goto LABEL_164;
        }
        __int16 v130 = v129 + 1;
        uint64_t v131 = *(char *)(*(void *)(a2 + *v10) + v129);
        *(void *)(a2 + v12_Block_object_dispose(va, 8) = v130;
        v123 |= (unint64_t)(v131 & 0x7F) << 14;
        if ((v131 & 0x80000000) == 0) {
          goto LABEL_165;
        }
        uint64_t v132 = *v3;
        char v133 = *(void *)(a2 + v132);
        if (v133 == -1LL || v133 >= *(void *)(a2 + *v6)) {
          goto LABEL_164;
        }
        uint64_t v134 = v133 + 1;
        __int128 v135 = *(char *)(*(void *)(a2 + *v10) + v133);
        *(void *)(a2 + v132) = v134;
        v123 |= (unint64_t)(v135 & 0x7F) << 21;
        if ((v135 & 0x80000000) == 0) {
          goto LABEL_165;
        }
        uint64_t v136 = *v3;
        BOOL v137 = *(void *)(a2 + v136);
        if (v137 == -1LL || v137 >= *(void *)(a2 + *v6)) {
          goto LABEL_164;
        }
        uint64_t v138 = v137 + 1;
        os_log_type_t v139 = *(char *)(*(void *)(a2 + *v10) + v137);
        *(void *)(a2 + v136) = v138;
        v123 |= (unint64_t)(v139 & 0x7F) << 28;
        if ((v139 & 0x80000000) == 0) {
          goto LABEL_165;
        }
        v190 = *v3;
        v191 = *(void *)(a2 + v190);
        if (v191 == -1LL || v191 >= *(void *)(a2 + *v6)) {
          goto LABEL_164;
        }
        v192 = v191 + 1;
        v193 = *(char *)(*(void *)(a2 + *v10) + v191);
        *(void *)(a2 + v190) = v192;
        v123 |= (unint64_t)(v193 & 0x7F) << 35;
        if (v193 < 0)
        {
          v230 = *v3;
          v231 = *(void *)(a2 + v230);
          if (v231 == -1LL || v231 >= *(void *)(a2 + *v6)) {
            goto LABEL_164;
          }
          v232 = v231 + 1;
          v233 = *(char *)(*(void *)(a2 + *v10) + v231);
          *(void *)(a2 + v230) = v232;
          v123 |= (unint64_t)(v233 & 0x7F) << 42;
          if (v233 < 0)
          {
            v234 = *v3;
            v235 = *(void *)(a2 + v234);
            if (v235 == -1LL || v235 >= *(void *)(a2 + *v6)) {
              goto LABEL_164;
            }
            v236 = v235 + 1;
            v237 = *(char *)(*(void *)(a2 + *v10) + v235);
            *(void *)(a2 + v234) = v236;
            v123 |= (unint64_t)(v237 & 0x7F) << 49;
            if (v237 < 0)
            {
              v238 = *v3;
              v239 = *(void *)(a2 + v238);
              if (v239 == -1LL || v239 >= *(void *)(a2 + *v6)) {
                goto LABEL_164;
              }
              v240 = v239 + 1;
              v241 = *(char *)(*(void *)(a2 + *v10) + v239);
              *(void *)(a2 + v23_Block_object_dispose(va, 8) = v240;
              v123 |= (unint64_t)(v241 & 0x7F) << 56;
              if (v241 < 0)
              {
                v242 = *v3;
                v243 = *(void *)(a2 + v242);
                if (v243 == -1LL || v243 >= *(void *)(a2 + *v6)) {
                  goto LABEL_164;
                }
                v244 = v243 + 1;
                v245 = *(unsigned __int8 *)(*(void *)(a2 + *v10) + v243);
                *(void *)(a2 + v242) = v244;
                if ((v245 & 0x80) != 0)
                {
                  BOOL v123 = 0LL;
                  goto LABEL_167;
                }

                v123 |= v245 << 63;
              }
            }
          }
        }

            if (!v86)
            {
LABEL_162:

              goto LABEL_35;
            }

void sub_181D34358( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

BOOL nw_txt_record_get_key_data_value(void *a1, const char *a2, void **a3)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  nw_txt_record_t v5 = a1;
  if (a2)
  {
    if (a3)
    {
      nw_txt_record_t v6 = *a3;
      *a3 = 0LL;

      access_value[0] = MEMORY[0x1895F87A8];
      access_value[1] = 3221225472LL;
      access_value[2] = ___ZL32nw_txt_record_get_key_data_valuePU27objcproto16OS_nw_txt_record8NSObjectPKcPU8__strongPU27objcproto16OS_dispatch_dataS__block_invoke;
      access_value[3] = &__block_descriptor_40_e19_B36__0r_8i16r_20Q28l;
      access_value[4] = a3;
      BOOL v7 = nw_txt_record_access_key(v5, a2, access_value);
      goto LABEL_4;
    }

    __nwlog_obj();
    __int16 v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    int v26 = "nw_txt_record_get_key_data_value";
    id v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        __int16 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          int v26 = "nw_txt_record_get_key_data_value";
          _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null out_value", buf, 0xCu);
        }

void sub_181D348EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL34nw_txt_record_get_key_uint64_valuePU27objcproto16OS_nw_txt_record8NSObjectPKcPy_block_invoke( uint64_t a1, uint64_t a2, int a3, const char *a4, uint64_t a5)
{
  BOOL result = 0LL;
  v10[2] = *MEMORY[0x1895F89C0];
  *(void *)__str = 0LL;
  v10[0] = 0LL;
  *(void *)((char *)v10 + 5) = 0LL;
  if (a3 == 4 && a4)
  {
    if (snprintf(__str, 0x15uLL, "%.*s", a5, a4) <= 20)
    {
      __endptr = 0LL;
      **(void **)(a1 + 32) = strtoull(__str, &__endptr, 0);
      return __endptr - __str == a5;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

BOOL ___ZL32nw_txt_record_get_key_uuid_valuePU27objcproto16OS_nw_txt_record8NSObjectPKcPh_block_invoke( uint64_t a1, uint64_t a2, int a3, const char *a4, int a5)
{
  BOOL result = 0LL;
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (a3 == 4 && a4) {
    return snprintf(__str, 0x25uLL, "%.*s", a5, a4) <= 36 && uuid_parse(__str, *(unsigned __int8 **)(a1 + 32)) == 0;
  }
  return result;
}

BOOL ___ZL32nw_txt_record_get_key_data_valuePU27objcproto16OS_nw_txt_record8NSObjectPKcPU8__strongPU27objcproto16OS_dispatch_dataS__block_invoke( uint64_t a1, uint64_t a2, int a3, uint64_t a4, unint64_t a5)
{
  BOOL result = 0LL;
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if ((a5 & 1) != 0 || a3 != 4 || !a4 || a5 < 2) {
    return result;
  }
  uint64_t v9 = calloc(1uLL, a5 >> 1);
  if (!v9)
  {
    __nwlog_obj();
    os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
    *(_DWORD *)std::string buf = 136446722;
    char v23 = "strict_calloc";
    __int16 v24 = 2048;
    uint64_t v25 = 1LL;
    __int16 v26 = 2048;
    unint64_t v27 = a5 >> 1;
    os_log_type_t v21 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v21);
    if (result)
    {
      __break(1u);
      return result;
    }

    free(v21);
  }

  unint64_t v10 = 0LL;
  while (1)
  {
    int v12 = *(unsigned __int8 *)(a4 + v10);
    char v13 = v12 - 48;
    if ((v12 - 97) <= 5)
    {
      char v13 = v12 - 87;
LABEL_12:
      unint64_t v14 = v10 >> 1;
      if ((v10 & 1) == 0) {
        goto LABEL_13;
      }
      goto LABEL_7;
    }

    char v13 = v12 - 55;
    unint64_t v14 = v10 >> 1;
    if ((v10 & 1) == 0)
    {
LABEL_13:
      char v11 = 16 * v13;
      goto LABEL_8;
    }

void ___ZL35nw_candidate_manager_set_connectionP31NWConcrete_nw_candidate_managerP24NWConcrete_nw_connection_block_invoke( uint64_t a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  if (__nwlog_candidate_manager_log::onceToken != -1) {
    dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
  }
  id v4 = (os_log_s *)(id)gcandidate_managerLogObj;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
    *(_DWORD *)std::string buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_candidate_manager_set_connection_block_invoke";
    *(_WORD *)&_BYTE buf[12] = 2048;
    *(void *)&buf[14] = v6;
    *(_WORD *)&_BYTE buf[22] = 2112;
    *(void *)&_BYTE buf[24] = v3;
    LOWORD(v31) = 2112;
    *(void *)((char *)&v31 + 2) = v5;
    _os_log_impl(&dword_181A5C000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s [CM%zu] Injecting %@ into %@", buf, 0x2Au);
  }

  BOOL v7 = *(id *)(a1 + 40);
  id v8 = v3;
  uint64_t v9 = v8;
  if (!v7)
  {
    __nwlog_obj();
    unint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_add_extra_interface_option";
    dispatch_data_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_add_extra_interface_option";
        _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null connection", buf, 0xCu);
      }
    }

    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v16, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)std::string buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_add_extra_interface_option";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v16,  v21,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_49:
        if (!v15) {
          goto LABEL_15;
        }
LABEL_50:
        free(v15);
        goto LABEL_15;
      }

      if (v22)
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_add_extra_interface_option";
        _os_log_impl(&dword_181A5C000, v16, v21, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_add_extra_interface_option";
        _os_log_impl( &dword_181A5C000,  v16,  v26,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181D35368( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void ___ZL35nw_candidate_manager_set_connectionP31NWConcrete_nw_candidate_managerP24NWConcrete_nw_connection_block_invoke_145( uint64_t a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  if (__nwlog_candidate_manager_log::onceToken != -1) {
    dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
  }
  id v4 = (os_log_s *)(id)gcandidate_managerLogObj;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
    *(_DWORD *)std::string buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_candidate_manager_set_connection_block_invoke";
    *(_WORD *)&_BYTE buf[12] = 2048;
    *(void *)&buf[14] = v6;
    *(_WORD *)&_BYTE buf[22] = 2112;
    *(void *)&_BYTE buf[24] = v3;
    LOWORD(v31) = 2112;
    *(void *)((char *)&v31 + 2) = v5;
    _os_log_impl(&dword_181A5C000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s [CM%zu] Removing %@ from %@", buf, 0x2Au);
  }

  BOOL v7 = *(id *)(a1 + 40);
  id v8 = v3;
  uint64_t v9 = v8;
  if (!v7)
  {
    __nwlog_obj();
    unint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_remove_extra_interface_option";
    dispatch_data_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_remove_extra_interface_option";
        _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null connection", buf, 0xCu);
      }
    }

    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v16, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)std::string buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_remove_extra_interface_option";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v16,  v21,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_49:
        if (!v15) {
          goto LABEL_15;
        }
LABEL_50:
        free(v15);
        goto LABEL_15;
      }

      if (v22)
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_remove_extra_interface_option";
        _os_log_impl(&dword_181A5C000, v16, v21, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_remove_extra_interface_option";
        _os_log_impl( &dword_181A5C000,  v16,  v26,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181D35A10( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

const char *nw_candidate_manager_state_to_string(unsigned int a1)
{
  if (a1 > 4) {
    return "unknown-state";
  }
  else {
    return off_189BB6318[a1];
  }
}

void nw_candidate_manager_set_state_changed_handler(void *a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (v3)
  {
    if (v4)
    {
      if (*((_DWORD *)v3 + 38) != 4)
      {
        int v12 = _Block_copy(v4);
        char v13 = (void *)v3[20];
        v3[20] = v12;

        goto LABEL_34;
      }

      if (__nwlog_candidate_manager_log::onceToken != -1) {
        dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
      }
      id v6 = (id)gcandidate_managerLogObj;
      BOOL v7 = (char *)v3[1];
      *(_DWORD *)std::string buf = 136446466;
      __int128 v37 = "nw_candidate_manager_set_state_changed_handler";
      __int16 v38 = 2048;
      id v39 = v7;
      id v8 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v34 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_candidate_manager_log::onceToken != -1) {
          dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
        }
        uint64_t v9 = (os_log_s *)(id)gcandidate_managerLogObj;
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          char v11 = (char *)v3[1];
          *(_DWORD *)std::string buf = 136446466;
          __int128 v37 = "nw_candidate_manager_set_state_changed_handler";
          __int16 v38 = 2048;
          id v39 = v11;
          _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s [CM%zu] Cannot set state changed handler after cancel",  buf,  0x16u);
        }
      }

      else if (v34)
      {
        backtrace_string = __nw_create_backtrace_string();
        if (backtrace_string)
        {
          dispatch_data_t v15 = (char *)backtrace_string;
          if (__nwlog_candidate_manager_log::onceToken != -1) {
            dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
          }
          os_log_type_t v16 = (os_log_s *)(id)gcandidate_managerLogObj;
          os_log_type_t v17 = type;
          if (os_log_type_enabled(v16, type))
          {
            os_log_type_t v18 = (char *)v3[1];
            *(_DWORD *)std::string buf = 136446722;
            __int128 v37 = "nw_candidate_manager_set_state_changed_handler";
            __int16 v38 = 2048;
            id v39 = v18;
            __int16 v40 = 2082;
            char v41 = v15;
            _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s [CM%zu] Cannot set state changed handler after cancel, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v15);
          if (v8) {
            goto LABEL_33;
          }
          goto LABEL_34;
        }

        if (__nwlog_candidate_manager_log::onceToken != -1) {
          dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
        }
        uint64_t v9 = (os_log_s *)(id)gcandidate_managerLogObj;
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v9, type))
        {
          BOOL v22 = (char *)v3[1];
          *(_DWORD *)std::string buf = 136446466;
          __int128 v37 = "nw_candidate_manager_set_state_changed_handler";
          __int16 v38 = 2048;
          id v39 = v22;
          _os_log_impl( &dword_181A5C000,  v9,  v21,  "%{public}s [CM%zu] Cannot set state changed handler after cancel, no backtrace",  buf,  0x16u);
        }
      }

      else
      {
        if (__nwlog_candidate_manager_log::onceToken != -1) {
          dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
        }
        uint64_t v9 = (os_log_s *)(id)gcandidate_managerLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          os_log_type_t v20 = (char *)v3[1];
          *(_DWORD *)std::string buf = 136446466;
          __int128 v37 = "nw_candidate_manager_set_state_changed_handler";
          __int16 v38 = 2048;
          id v39 = v20;
          _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s [CM%zu] Cannot set state changed handler after cancel, backtrace limit exceeded",  buf,  0x16u);
        }
      }

      goto LABEL_31;
    }

    __nwlog_obj();
    BOOL v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    __int128 v37 = "nw_candidate_manager_set_state_changed_handler";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (__nwlog_fault(v8, &type, &v34))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          __int128 v37 = "nw_candidate_manager_set_state_changed_handler";
          _os_log_impl(&dword_181A5C000, v9, v26, "%{public}s called with null handler", buf, 0xCu);
        }

void nw_candidate_manager_set_add_block(void *a1, const void *a2)
{
  id v3 = a1;
  id v4 = _Block_copy(a2);
  id v5 = (id)v3[14];
  v3[14] = v4;
}

void nw_candidate_manager_set_remove_block(void *a1, const void *a2)
{
  id v3 = a1;
  id v4 = _Block_copy(a2);
  id v5 = (id)v3[15];
  v3[15] = v4;
}

void nw_candidate_manager_set_modify_ids_parameters_block(void *a1, const void *a2)
{
  id v3 = a1;
  id v4 = _Block_copy(a2);
  id v5 = (id)v3[16];
  v3[16] = v4;
}

void nw_candidate_manager_set_new_connection_handler(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    os_log_type_t v27 = "nw_candidate_manager_set_new_connection_handler";
    char v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v27 = "nw_candidate_manager_set_new_connection_handler";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null candidate_manager", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)std::string buf = 136446466;
          os_log_type_t v27 = "nw_candidate_manager_set_new_connection_handler";
          __int16 v28 = 2082;
          BOOL v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null candidate_manager, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_44:
        if (!v11) {
          goto LABEL_10;
        }
LABEL_45:
        free(v11);
        goto LABEL_10;
      }

      if (v18)
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v27 = "nw_candidate_manager_set_new_connection_handler";
        _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null candidate_manager, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v27 = "nw_candidate_manager_set_new_connection_handler";
        _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null candidate_manager, backtrace limit exceeded",  buf,  0xCu);
      }
    }

BOOL nw_candidate_manager_start_client(void *a1, int a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    BOOL v21 = "nw_candidate_manager_start_client";
    char v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v11, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          BOOL v21 = "nw_candidate_manager_start_client";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null candidate_manager", buf, 0xCu);
        }
      }

      else if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)std::string buf = 136446466;
            BOOL v21 = "nw_candidate_manager_start_client";
            __int16 v22 = 2082;
            os_log_type_t v23 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null candidate_manager, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }

        if (v16)
        {
          *(_DWORD *)std::string buf = 136446210;
          BOOL v21 = "nw_candidate_manager_start_client";
          _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null candidate_manager, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          BOOL v21 = "nw_candidate_manager_start_client";
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null candidate_manager, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181D36BDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_candidate_manager_start_bonjour_service_resolve(void *a1)
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    char v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    __int128 v37 = "nw_candidate_manager_start_bonjour_service_resolve";
    os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        __int128 v37 = "nw_candidate_manager_start_bonjour_service_resolve";
        _os_log_impl(&dword_181A5C000, v20, v21, "%{public}s called with null manager", buf, 0xCu);
      }
    }

    else if (v34)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)std::string buf = 136446466;
          __int128 v37 = "nw_candidate_manager_start_bonjour_service_resolve";
          __int16 v38 = 2082;
          id v39 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v20,  v25,  "%{public}s called with null manager, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_51:
        if (!v19) {
          goto LABEL_17;
        }
LABEL_52:
        free(v19);
        goto LABEL_17;
      }

      if (v26)
      {
        *(_DWORD *)std::string buf = 136446210;
        __int128 v37 = "nw_candidate_manager_start_bonjour_service_resolve";
        _os_log_impl(&dword_181A5C000, v20, v25, "%{public}s called with null manager, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        __int128 v37 = "nw_candidate_manager_start_bonjour_service_resolve";
        _os_log_impl( &dword_181A5C000,  v20,  v30,  "%{public}s called with null manager, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181D372AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_candidate_manager_start_bonjour_service_resolve_block_invoke(uint64_t a1, int a2, void *a3)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  id v5 = a3;
  if (__nwlog_candidate_manager_log::onceToken != -1) {
    dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
  }
  BOOL v6 = (os_log_s *)(id)gcandidate_managerLogObj;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(v7 + 8);
    uint64_t v9 = *(void *)(v7 + 40);
    id v10 = "invalid";
    os_log_type_t v31 = "nw_candidate_manager_start_bonjour_service_resolve_block_invoke";
    if (a2 == 2) {
      id v10 = "complete";
    }
    __int16 v32 = 2048;
    *(_DWORD *)std::string buf = 136447234;
    if (a2 == 1) {
      id v10 = "in-progress";
    }
    uint64_t v33 = v8;
    __int16 v34 = 2112;
    uint64_t v35 = v9;
    __int16 v36 = 2082;
    __int128 v37 = v10;
    __int16 v38 = 2112;
    id v39 = v5;
    _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}s [CM%zu] %@ %{public}s resolves to %@",  buf,  0x34u);
  }

  char v11 = *(id *)(a1 + 32);
  id v12 = (unsigned __int8 *)v5;
  os_log_type_t v13 = (void *)v11[11];
  if (!v13)
  {
    uint64_t v17 = [MEMORY[0x189603FC8] dictionary];
    char v18 = (void *)v11[11];
    v11[11] = v17;

    id v16 = 0LL;
    if (!v12) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }

  unint64_t v14 = (void *)MEMORY[0x189603FA8];
  [v13 allKeys];
  id v15 = (void *)objc_claimAutoreleasedReturnValue();
  [v14 arrayWithArray:v15];
  id v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
LABEL_16:
    v27[0] = MEMORY[0x1895F87A8];
    v27[1] = 3221225472LL;
    v27[2] = ___ZL54nw_candidate_manager_handle_service_resolved_endpointsP31NWConcrete_nw_candidate_managerPU22objcproto11OS_nw_array8NSObject_block_invoke;
    v27[3] = &unk_189BC5030;
    id v28 = v16;
    BOOL v29 = v11;
    nw_array_apply(v12, (uint64_t)v27);
  }

void sub_181D375E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL54nw_candidate_manager_handle_service_resolved_endpointsP31NWConcrete_nw_candidate_managerPU22objcproto11OS_nw_array8NSObject_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if ([*(id *)(a1 + 32) containsObject:v4])
  {
    [*(id *)(a1 + 32) removeObject:v4];
  }

  else
  {
    nw_candidate_manager_resolver_for_service_resolved_endpoint(*(void *)(a1 + 40), v4);
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    [*(id *)(*(void *)(a1 + 40) + 88) setObject:v5 forKeyedSubscript:v4];
  }

  return 1LL;
}

void sub_181D376B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_candidate_manager_start_advertise(void *a1, int a2)
{
  uint64_t v72 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = (id *)v3;
  if (!v3)
  {
    __nwlog_obj();
    id v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    os_log_type_t v66 = "nw_candidate_manager_start_advertise";
    BOOL v29 = (char *)_os_log_send_and_compose_impl();

    __str[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v29, __str, &type))
    {
      if (__str[0] == 17)
      {
        __nwlog_obj();
        os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v31 = __str[0];
        if (os_log_type_enabled(v30, (os_log_type_t)__str[0]))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v66 = "nw_candidate_manager_start_advertise";
          _os_log_impl(&dword_181A5C000, v30, v31, "%{public}s called with null candidate_manager", buf, 0xCu);
        }
      }

      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v33 = __str[0];
        BOOL v34 = os_log_type_enabled(v30, (os_log_type_t)__str[0]);
        if (backtrace_string)
        {
          if (v34)
          {
            *(_DWORD *)std::string buf = 136446466;
            os_log_type_t v66 = "nw_candidate_manager_start_advertise";
            __int16 v67 = 2082;
            uint64_t v68 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v30,  v33,  "%{public}s called with null candidate_manager, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_45;
        }

        if (v34)
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v66 = "nw_candidate_manager_start_advertise";
          _os_log_impl( &dword_181A5C000,  v30,  v33,  "%{public}s called with null candidate_manager, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v35 = __str[0];
        if (os_log_type_enabled(v30, (os_log_type_t)__str[0]))
        {
          *(_DWORD *)std::string buf = 136446210;
          os_log_type_t v66 = "nw_candidate_manager_start_advertise";
          _os_log_impl( &dword_181A5C000,  v30,  v35,  "%{public}s called with null candidate_manager, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181D383A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23)
{
  _Unwind_Resume(a1);
}

void __nw_candidate_manager_start_advertise_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  v9[0] = MEMORY[0x1895F87A8];
  v9[1] = 3221225472LL;
  v9[2] = __nw_candidate_manager_start_advertise_block_invoke_2;
  v9[3] = &unk_189BC9490;
  id v10 = *(id *)(a1 + 32);
  id v4 = (NWConcrete_nw_connection *)v3;
  char v11 = v4;
  nw_connection_set_state_changed_handler((nw_connection_t)v4, v9);
  if (__nwlog_candidate_manager_log::onceToken != -1) {
    dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
  }
  id v5 = (os_log_s *)(id)gcandidate_managerLogObj;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
    *(_DWORD *)std::string buf = 136446722;
    os_log_type_t v13 = "nw_candidate_manager_start_advertise_block_invoke";
    __int16 v14 = 2048;
    uint64_t v15 = v6;
    __int16 v16 = 2112;
    uint64_t v17 = v4;
    _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_INFO,  "%{public}s [CM%zu] Received incoming connection %@",  buf,  0x20u);
  }

  uint64_t v7 = *(NWConcrete_nw_candidate_manager **)(a1 + 32);
  if (v7->connection)
  {
    id new_connection_handler = (void (**)(id, NWConcrete_nw_connection *))v7->new_connection_handler;
    if (!new_connection_handler) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }

  nw_candidate_manager_set_connection(v7, v4);
  id new_connection_handler = *(void (***)(id, NWConcrete_nw_connection *))(*(void *)(a1 + 32) + 168LL);
  if (new_connection_handler) {
LABEL_9:
  }
    new_connection_handler[2](new_connection_handler, v4);
LABEL_10:
}

void sub_181D385CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void __nw_candidate_manager_start_advertise_block_invoke_134(uint64_t a1, int a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v5 = a3;
  uint64_t v6 = v5;
  if (a2 == 2)
  {
    int port = nw_listener_get_port(*(nw_listener_t *)(a1 + 32));
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
    }
    uint64_t v8 = (os_log_s *)(id)gcandidate_managerLogObj;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO)) {
      goto LABEL_12;
    }
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
    int v14 = 136446722;
    uint64_t v15 = "nw_candidate_manager_start_advertise_block_invoke";
    __int16 v16 = 2048;
    uint64_t v17 = v9;
    __int16 v18 = 1024;
    LODWORD(v19) = port;
    id v10 = "%{public}s [CM%zu] Listener entered ready state, using port %d";
    char v11 = v8;
    uint32_t v12 = 28;
LABEL_11:
    _os_log_impl(&dword_181A5C000, v11, OS_LOG_TYPE_INFO, v10, (uint8_t *)&v14, v12);
LABEL_12:

    goto LABEL_13;
  }

  if (v5)
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
    }
    uint64_t v8 = (os_log_s *)(id)gcandidate_managerLogObj;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO)) {
      goto LABEL_12;
    }
    uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8LL);
    int v14 = 136446722;
    uint64_t v15 = "nw_candidate_manager_start_advertise_block_invoke";
    __int16 v16 = 2048;
    uint64_t v17 = v13;
    __int16 v18 = 2112;
    id v19 = v6;
    id v10 = "%{public}s [CM%zu] Listener failed with error '%@'";
    char v11 = v8;
    uint32_t v12 = 32;
    goto LABEL_11;
  }

void sub_181D387BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_candidate_manager_start_advertise_block_invoke_2(uint64_t a1, int a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v5 = a3;
  uint64_t v6 = v5;
  if (a2 == 3)
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
    }
    uint64_t v7 = (os_log_s *)(id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8LL);
      int v19 = 136446722;
      uint64_t v20 = "nw_candidate_manager_start_advertise_block_invoke_2";
      __int16 v21 = 2048;
      uint64_t v22 = v9;
      __int16 v23 = 2112;
      uint64_t v24 = v8;
      _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_INFO,  "%{public}s [CM%zu] Incoming connection %@ entered ready state",  (uint8_t *)&v19,  0x20u);
    }

    id v10 = *(nw_connection **)(a1 + 40);
    if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55294);
    }
    char v11 = (nw_protocol_definition *)(id)nw_protocol_copy_quic_stream_definition::quic_definition;
    nw_protocol_metadata_t v12 = nw_connection_copy_protocol_metadata(v10, v11);

    if (!v12) {
      goto LABEL_19;
    }
    uint64_t v13 = v12;
    if (nw_protocol_metadata_is_quic_connection(v13))
    {
    }

    else
    {
      BOOL is_quic_stream = nw_protocol_metadata_is_quic_stream(v13);

      if (!is_quic_stream)
      {
LABEL_19:
        nw_candidate_manager_set_state(*(void **)(a1 + 32), 2LL);

        goto LABEL_20;
      }
    }

    id v18 = nw_quic_stream_copy_connection_metadata(v13);
    nw_quic_connection_set_keepalive(v18, 10);

    goto LABEL_19;
  }

  if (v5)
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
    }
    int v14 = (os_log_s *)(id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = *(void *)(a1 + 40);
      uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 8LL);
      int v19 = 136446978;
      uint64_t v20 = "nw_candidate_manager_start_advertise_block_invoke";
      __int16 v21 = 2048;
      uint64_t v22 = v16;
      __int16 v23 = 2112;
      uint64_t v24 = v15;
      __int16 v25 = 2112;
      __int128 v26 = v6;
      _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_INFO,  "%{public}s [CM%zu] Incoming connection %@ failed with error '%@'",  (uint8_t *)&v19,  0x2Au);
    }

    nw_candidate_manager_cancel(*(void **)(a1 + 32));
  }

void sub_181D38A50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_candidate_manager_set_internet_fallback(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    if (nw_parameters_get_local_only(v3->parameters))
    {
      if (__nwlog_candidate_manager_log::onceToken != -1) {
        dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
      }
      id v5 = (os_log_s *)(id)gcandidate_managerLogObj;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        unint64_t log_id = v3->log_id;
        *(_DWORD *)std::string buf = 136446466;
        id v18 = "nw_candidate_manager_set_internet_fallback";
        __int16 v19 = 2048;
        uint64_t v20 = (char *)log_id;
        _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_ERROR,  "%{public}s [CM%zu] Can't set Internet fallback with local only parameters",  buf,  0x16u);
      }
    }

    if (v4)
    {
      if (nw_parameters_get_server_mode(v3->parameters))
      {
        nw_candidate_manager_start_ids_internal(v3, v4);
      }

      else
      {
        objc_storeStrong((id *)&v3->ids_endpoint, a2);
        nw_candidate_manager_monitor_interface_use(v3);
      }
    }

    else
    {
      nw_candidate_manager_stop_ids(v3);
    }

    goto LABEL_13;
  }

  __nwlog_obj();
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)std::string buf = 136446210;
  id v18 = "nw_candidate_manager_set_internet_fallback";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        id v18 = "nw_candidate_manager_set_internet_fallback";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null candidate_manager", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)std::string buf = 136446466;
          id v18 = "nw_candidate_manager_set_internet_fallback";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null candidate_manager, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_30;
      }

      if (v13)
      {
        *(_DWORD *)std::string buf = 136446210;
        id v18 = "nw_candidate_manager_set_internet_fallback";
        _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null candidate_manager, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        id v18 = "nw_candidate_manager_set_internet_fallback";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null candidate_manager, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181D38E0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_candidate_manager_set_original_path(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    __int16 v25 = "nw_candidate_manager_set_original_path";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v25 = "nw_candidate_manager_set_original_path";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null candidate_manager", buf, 0xCu);
      }
    }

    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)std::string buf = 136446466;
          __int16 v25 = "nw_candidate_manager_set_original_path";
          __int16 v26 = 2082;
          uint64_t v27 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null candidate_manager, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v9) {
          goto LABEL_8;
        }
LABEL_43:
        free(v9);
        goto LABEL_8;
      }

      if (v16)
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v25 = "nw_candidate_manager_set_original_path";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null candidate_manager, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        __int16 v25 = "nw_candidate_manager_set_original_path";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null candidate_manager, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void nw_candidate_manager_remove_injected_paths(void *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    if (__nwlog_candidate_manager_log::onceToken != -1) {
      dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
    }
    id v2 = (os_log_s *)(id)gcandidate_managerLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      unint64_t log_id = v1->log_id;
      *(_DWORD *)std::string buf = 136446466;
      os_log_type_t v15 = "nw_candidate_manager_remove_injected_paths";
      __int16 v16 = 2048;
      uint64_t v17 = (char *)log_id;
      _os_log_impl(&dword_181A5C000, v2, OS_LOG_TYPE_INFO, "%{public}s [CM%zu] Removing injected paths", buf, 0x16u);
    }

    nw_candidate_manager_stop_ids(v1);
    nw_connection_remove_all_interface_options(v1->connection);
    goto LABEL_7;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)std::string buf = 136446210;
  os_log_type_t v15 = "nw_candidate_manager_remove_injected_paths";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v15 = "nw_candidate_manager_remove_injected_paths";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null candidate_manager", buf, 0xCu);
      }
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)std::string buf = 136446466;
          os_log_type_t v15 = "nw_candidate_manager_remove_injected_paths";
          __int16 v16 = 2082;
          uint64_t v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null candidate_manager, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }

      if (v10)
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v15 = "nw_candidate_manager_remove_injected_paths";
        _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null candidate_manager, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v15 = "nw_candidate_manager_remove_injected_paths";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null candidate_manager, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181D396A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_endpoint_t nw_candidate_manager_encode_ids_path(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  os_log_type_t v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (v7)
  {
    nw_endpoint_t v11 = nw_path_copy_effective_remote_endpoint(v7);
    if (v11)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v12 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136446210;
        BOOL v34 = "nw_candidate_manager_encode_ids_path";
        _os_log_impl(&dword_181A5C000, v12, OS_LOG_TYPE_ERROR, "%{public}s Not supported", buf, 0xCu);
      }

      os_log_type_t v13 = v11;
LABEL_6:

      goto LABEL_7;
    }

    __nwlog_obj();
    BOOL v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    BOOL v34 = "nw_candidate_manager_encode_ids_path";
    os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (__nwlog_fault(v20, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          BOOL v34 = "nw_candidate_manager_encode_ids_path";
          _os_log_impl(&dword_181A5C000, v21, v22, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }

      else if (v31)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v27 = type;
        BOOL v28 = os_log_type_enabled(v21, type);
        if (backtrace_string)
        {
          if (v28)
          {
            *(_DWORD *)std::string buf = 136446466;
            BOOL v34 = "nw_candidate_manager_encode_ids_path";
            __int16 v35 = 2082;
            __int16 v36 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v21,  v27,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_43;
        }

        if (v28)
        {
          *(_DWORD *)std::string buf = 136446210;
          BOOL v34 = "nw_candidate_manager_encode_ids_path";
          _os_log_impl(&dword_181A5C000, v21, v27, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)std::string buf = 136446210;
          BOOL v34 = "nw_candidate_manager_encode_ids_path";
          _os_log_impl( &dword_181A5C000,  v21,  v30,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

uint64_t nw_candidate_manager_encode_ids_connection( void *a1, void *a2, void *a3, uint64_t a4, void *a5, unsigned int a6, void *a7)
{
  return nw_candidate_endpoint_for_ids_connection(a1, a2, a3, a5, a6, a7);
}

uint64_t nw_candidate_endpoint_for_ids_connection( void *a1, void *a2, void *a3, void *a4, unsigned int a5, void *a6)
{
  __str[4] = *MEMORY[0x1895F89C0];
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v178 = a4;
  v176 = v11;
  v177 = a6;
  v174 = v12;
  v175 = v13;
  if (!v11)
  {
    __nwlog_obj();
    os_log_type_t v115 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
    __int16 v116 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    LOBYTE(__str[0]) = 0;
    if (type[0] == 17)
    {
      __nwlog_obj();
      os_log_type_t v117 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v118 = type[0];
      if (os_log_type_enabled(v117, (os_log_type_t)type[0]))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_181A5C000, v117, v118, "%{public}s called with null connection", buf, 0xCu);
      }

      goto LABEL_315;
    }

    if (!LOBYTE(__str[0]))
    {
      __nwlog_obj();
      os_log_type_t v117 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v163 = type[0];
      if (os_log_type_enabled(v117, (os_log_type_t)type[0]))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl( &dword_181A5C000,  v117,  v163,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_315;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v117 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v140 = type[0];
    BOOL v141 = os_log_type_enabled(v117, (os_log_type_t)type[0]);
    if (!backtrace_string)
    {
      if (v141)
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_181A5C000, v117, v140, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }

      goto LABEL_315;
    }

    if (v141)
    {
      *(_DWORD *)std::string buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v117,  v140,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_246;
  }

  if (!v12)
  {
    __nwlog_obj();
    os_log_type_t v119 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
    __int16 v116 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    LOBYTE(__str[0]) = 0;
    if (type[0] == 17)
    {
      __nwlog_obj();
      os_log_type_t v117 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v120 = type[0];
      if (os_log_type_enabled(v117, (os_log_type_t)type[0]))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_181A5C000, v117, v120, "%{public}s called with null client_parameters", buf, 0xCu);
      }

      goto LABEL_315;
    }

    if (!LOBYTE(__str[0]))
    {
      __nwlog_obj();
      os_log_type_t v117 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v164 = type[0];
      if (os_log_type_enabled(v117, (os_log_type_t)type[0]))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl( &dword_181A5C000,  v117,  v164,  "%{public}s called with null client_parameters, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_315;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v117 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v142 = type[0];
    BOOL v143 = os_log_type_enabled(v117, (os_log_type_t)type[0]);
    if (!backtrace_string)
    {
      if (v143)
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl( &dword_181A5C000,  v117,  v142,  "%{public}s called with null client_parameters, no backtrace",  buf,  0xCu);
      }

      goto LABEL_315;
    }

    if (v143)
    {
      *(_DWORD *)std::string buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v117,  v142,  "%{public}s called with null client_parameters, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_246;
  }

  if (!v13)
  {
    __nwlog_obj();
    os_log_type_t v121 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
    __int16 v116 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    LOBYTE(__str[0]) = 0;
    if (type[0] == 17)
    {
      __nwlog_obj();
      os_log_type_t v117 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v122 = type[0];
      if (os_log_type_enabled(v117, (os_log_type_t)type[0]))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_181A5C000, v117, v122, "%{public}s called with null lcid", buf, 0xCu);
      }

      goto LABEL_315;
    }

    if (!LOBYTE(__str[0]))
    {
      __nwlog_obj();
      os_log_type_t v117 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v165 = type[0];
      if (os_log_type_enabled(v117, (os_log_type_t)type[0]))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl( &dword_181A5C000,  v117,  v165,  "%{public}s called with null lcid, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_315;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v117 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v144 = type[0];
    BOOL v145 = os_log_type_enabled(v117, (os_log_type_t)type[0]);
    if (!backtrace_string)
    {
      if (v145)
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_181A5C000, v117, v144, "%{public}s called with null lcid, no backtrace", buf, 0xCu);
      }

      goto LABEL_315;
    }

    if (v145)
    {
      *(_DWORD *)std::string buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v117,  v144,  "%{public}s called with null lcid, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_246;
  }

  if (!v178)
  {
    __nwlog_obj();
    BOOL v123 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
    __int16 v116 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    LOBYTE(__str[0]) = 0;
    if (type[0] == 17)
    {
      __nwlog_obj();
      os_log_type_t v117 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v124 = type[0];
      if (os_log_type_enabled(v117, (os_log_type_t)type[0]))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_181A5C000, v117, v124, "%{public}s called with null rcid", buf, 0xCu);
      }

      goto LABEL_315;
    }

    if (!LOBYTE(__str[0]))
    {
      __nwlog_obj();
      os_log_type_t v117 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v166 = type[0];
      if (os_log_type_enabled(v117, (os_log_type_t)type[0]))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl( &dword_181A5C000,  v117,  v166,  "%{public}s called with null rcid, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_315;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v117 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v146 = type[0];
    BOOL v147 = os_log_type_enabled(v117, (os_log_type_t)type[0]);
    if (!backtrace_string)
    {
      if (v147)
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_181A5C000, v117, v146, "%{public}s called with null rcid, no backtrace", buf, 0xCu);
      }

      goto LABEL_315;
    }

    if (v147)
    {
      *(_DWORD *)std::string buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v117,  v146,  "%{public}s called with null rcid, dumping backtrace:%{public}s",  buf,  0x16u);
    }

LABEL_317:
        free(v116);
        goto LABEL_318;
      }

      if (v150)
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl(&dword_181A5C000, v117, v149, "%{public}s called with null completion, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v117 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v167 = type[0];
      if (os_log_type_enabled(v117, (os_log_type_t)type[0]))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
        _os_log_impl( &dword_181A5C000,  v117,  v167,  "%{public}s called with null completion, backtrace limit exceeded",  buf,  0xCu);
      }
    }

          if (v98) {
            free(v98);
          }
          goto LABEL_64;
        }

        __nwlog_obj();
        BOOL v111 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)std::string buf = 136446210;
        os_log_type_t v169 = "__nw_protocol_connect";
        os_log_type_t v112 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v163[0] = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v112, type, v163))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            os_log_type_t v113 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            __int16 v114 = type[0];
            if (os_log_type_enabled(v113, type[0]))
            {
              *(_DWORD *)std::string buf = 136446210;
              os_log_type_t v169 = "__nw_protocol_connect";
              _os_log_impl(&dword_181A5C000, v113, v114, "%{public}s called with null protocol", buf, 0xCu);
            }
          }

          else if (v163[0])
          {
            v129 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            os_log_type_t v113 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v130 = type[0];
            uint64_t v131 = os_log_type_enabled(v113, type[0]);
            if (v129)
            {
              if (v131)
              {
                *(_DWORD *)std::string buf = 136446466;
                os_log_type_t v169 = "__nw_protocol_connect";
                os_log_type_t v170 = 2082;
                os_log_type_t v171 = v129;
                _os_log_impl( &dword_181A5C000,  v113,  v130,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v129);
              goto LABEL_350;
            }

            if (v131)
            {
              *(_DWORD *)std::string buf = 136446210;
              os_log_type_t v169 = "__nw_protocol_connect";
              _os_log_impl( &dword_181A5C000,  v113,  v130,  "%{public}s called with null protocol, no backtrace",  buf,  0xCu);
            }
          }

          else
          {
            __nwlog_obj();
            os_log_type_t v113 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v149 = type[0];
            if (os_log_type_enabled(v113, type[0]))
            {
              *(_DWORD *)std::string buf = 136446210;
              os_log_type_t v169 = "__nw_protocol_connect";
              _os_log_impl( &dword_181A5C000,  v113,  v149,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
            }
          }
        }

              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v229 = (os_log_s *)gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
              {
                v230 = *(void *)(v87 + 256);
                v231 = *(_DWORD *)(*(void *)(v87 + 248) + 372LL);
                if (v230) {
                  LODWORD(v230) = *(_DWORD *)(v230 + 860);
                }
                v232 = *(_DWORD *)(v87 + 424);
                *(_DWORD *)std::string buf = 136448258;
                *(void *)&uint8_t buf[4] = "nw_http1_start_new_connection_for_stream";
                *(_WORD *)&_BYTE buf[12] = 2082;
                *(void *)&buf[14] = v87 + 74;
                *(_WORD *)&_BYTE buf[22] = 2080;
                v608 = (uint64_t)" ";
                *(_WORD *)v609 = 1024;
                *(_DWORD *)&v609[2] = v231;
                *(_WORD *)&v609[6] = 1024;
                *(_DWORD *)&v609[8] = v230;
                *(_WORD *)&v609[12] = 1024;
                *(_DWORD *)&v609[14] = v232;
                *(_WORD *)&v609[18] = 2048;
                *(void *)&v609[20] = v41;
                *(_WORD *)&v609[28] = 1024;
                *(_DWORD *)&v609[30] = v232;
                *(_WORD *)&v609[34] = 2048;
                *(void *)&v609[36] = v87;
                _os_log_impl( &dword_181A5C000,  v229,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> created new connection %p for stream %u (%p)",  buf,  0x4Cu);
              }

              goto LABEL_321;
            }

            v428 = v38;
            __nwlog_obj();
            *(_DWORD *)std::string buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
            v451 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(aBlock) = 0;
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              v452 = (os_log_s *)__nwlog_obj();
              v453 = type[0];
              if (!os_log_type_enabled(v452, type[0])) {
                goto LABEL_831;
              }
              *(_DWORD *)std::string buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
              v454 = "%{public}s called with null http1_stream->protocol_http1";
            }

            else if ((_BYTE)aBlock)
            {
              v520 = (char *)__nw_create_backtrace_string();
              v452 = (os_log_s *)__nwlog_obj();
              v453 = type[0];
              v521 = os_log_type_enabled(v452, type[0]);
              if (v520)
              {
                if (v521)
                {
                  *(_DWORD *)std::string buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&_BYTE buf[12] = 2082;
                  *(void *)&buf[14] = v520;
                  _os_log_impl( &dword_181A5C000,  v452,  v453,  "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v520);
                goto LABEL_831;
              }

              if (!v521)
              {
LABEL_831:
                if (v451) {
                  free(v451);
                }
                goto LABEL_813;
              }

              *(_DWORD *)std::string buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
              v454 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
            }

            else
            {
              v452 = (os_log_s *)__nwlog_obj();
              v453 = type[0];
              if (!os_log_type_enabled(v452, type[0])) {
                goto LABEL_831;
              }
              *(_DWORD *)std::string buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
              v454 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
            }

            _os_log_impl(&dword_181A5C000, v452, v453, v454, buf, 0xCu);
            goto LABEL_831;
          }

          v446 = v38;
          __nwlog_obj();
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
          v447 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(aBlock) = 0;
          if (__nwlog_fault(v447, type, &aBlock))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              v448 = (os_log_s *)__nwlog_obj();
              v449 = type[0];
              if (!os_log_type_enabled(v448, type[0])) {
                goto LABEL_824;
              }
              *(_DWORD *)std::string buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
              v450 = "%{public}s called with null parameters";
LABEL_823:
              _os_log_impl(&dword_181A5C000, v448, v449, v450, buf, 0xCu);
              goto LABEL_824;
            }

            if (!(_BYTE)aBlock)
            {
              v448 = (os_log_s *)__nwlog_obj();
              v449 = type[0];
              if (!os_log_type_enabled(v448, type[0])) {
                goto LABEL_824;
              }
              *(_DWORD *)std::string buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
              v450 = "%{public}s called with null parameters, backtrace limit exceeded";
              goto LABEL_823;
            }

            v518 = (char *)__nw_create_backtrace_string();
            v448 = (os_log_s *)__nwlog_obj();
            v449 = type[0];
            v519 = os_log_type_enabled(v448, type[0]);
            if (!v518)
            {
              if (!v519) {
                goto LABEL_824;
              }
              *(_DWORD *)std::string buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
              v450 = "%{public}s called with null parameters, no backtrace";
              goto LABEL_823;
            }

            if (v519)
            {
              *(_DWORD *)std::string buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association";
              *(_WORD *)&_BYTE buf[12] = 2082;
              *(void *)&buf[14] = v518;
              _os_log_impl( &dword_181A5C000,  v448,  v449,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v518);
          }

            v208 = *(void *)(*(void *)(v9[9] + 8LL) + 24LL);
            if (v208 < *(void *)(*(void *)(v9[8] + 8LL) + 24LL) + *(void *)(*(void *)(v9[7] + 8LL) + 24LL))
            {
              v209 = *(dispatch_data_s **)(*(void *)(v9[12] + 8LL) + 24LL);
              *(void *)(*(void *)(v9[12] + 8LL) + 24LL) = dispatch_data_create_subrange(v209, 0LL, v208);
              if (v209) {
                dispatch_release(v209);
              }
            }

            *(void *)(*(void *)(v9[8] + 8LL) + 24LL) += 512LL;
            alloc = (dispatch_data_s *)dispatch_data_create_alloc();
            v210 = *(dispatch_data_s **)(*(void *)(v9[12] + 8LL) + 24LL);
            *(void *)(*(void *)(v9[12] + 8LL) + 24LL) = dispatch_data_create_concat(v210, alloc);
            if (v210) {
              dispatch_release(v210);
            }
            int v40 = v285;
            id v41 = v286;
            if (alloc) {
LABEL_27:
            }
              dispatch_release(alloc);
LABEL_28:
            *(void *)(*(void *)(*v40 + 8LL) + 24LL) = *(void *)(*(void *)(*v41 + 8LL) + 24LL);
            continue;
          }

    if (v129) {
      free(v129);
    }
LABEL_129:
    BOOL v70 = v62;
    if ((*(__int16 *)(a6 + 388) & 0x80000000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      os_log_type_t v71 = gconnectionLogObj;
      os_log_type_t v72 = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
      BOOL v70 = v62;
      if (v72)
      {
        id v73 = *(_DWORD *)(a6 + 368);
        os_log_type_t v74 = *((_DWORD *)v225 + 6);
        std::string buf = 136447234;
        v231 = "send_data_callback";
        v232 = 2082;
        v233 = a6 + 390;
        v234 = 2080;
        v235 = " ";
        v236 = 1024;
        v237 = v73;
        v238 = 1024;
        *(_DWORD *)v239 = v74;
        BOOL v75 = "%{public}s %{public}s%s<i%u> wrote %u bytes";
        os_log_type_t v76 = (os_log_s *)v71;
        id v77 = 44;
LABEL_299:
        _os_log_impl(&dword_181A5C000, v76, OS_LOG_TYPE_DEBUG, v75, (uint8_t *)&buf, v77);
        BOOL v70 = v62;
        goto LABEL_137;
      }
    }

    goto LABEL_137;
  }

  int v45 = (void *)size;
  if (!nw_http_metadata_is_capsule((void *)size))
  {
    capsule_os_log_type_t type = 0LL;
    os_log_type_t v55 = 0LL;
    os_log_type_t v48 = 0;
    LOBYTE(v51) = 0;
    os_log_type_t v47 = 0;
    LOBYTE(v56) = 0;
    LOBYTE(v50) = 0;
    size_t size = 0LL;
    int v57 = 0LL;
    os_log_type_t v58 = 0LL;
    goto LABEL_117;
  }

  capsule_os_log_type_t type = nw_http_metadata_get_capsule_type(v45);
  size_t size = (size_t)nw_http_metadata_copy_capsule_data(v45);
  BOOL v162 = size;
  if (size) {
    size_t size = dispatch_data_get_size((dispatch_data_t)size);
  }
  os_log_type_t v47 = capsule_type == 0;
  os_log_type_t v48 = (size | capsule_type) == 0;
  if (!(size | capsule_type))
  {
    int v49 = v21[13];
    if (v49) {
      v49 -= v21[14] + v21[15];
    }
    size_t size = v49;
LABEL_84:
    capsule_os_log_type_t type = 0LL;
    BOOL v50 = 1;
    os_log_type_t v51 = 1;
    goto LABEL_106;
  }

  if (capsule_type < 0x40)
  {
    if (capsule_type)
    {
      os_log_type_t v51 = 0;
      BOOL v50 = 1;
      goto LABEL_106;
    }

    goto LABEL_84;
  }

  if (capsule_type >> 14)
  {
    if (capsule_type >> 30)
    {
      if (capsule_type >> 62)
      {
        os_log_type_t v158 = capsule_type == 0;
        v160 = (size | capsule_type) == 0;
        os_log_type_t v163 = size;
        BOOL v156 = (os_log_s *)__nwlog_obj();
        os_log_type_enabled(v156, OS_LOG_TYPE_ERROR);
        std::string buf = 136446466;
        v231 = "_http_vle_encode";
        v232 = 2048;
        v233 = capsule_type;
        nw_endpoint_t v59 = (void *)_os_log_send_and_compose_impl();
        BOOL result = __nwlog_abort((uint64_t)v59);
        if ((_DWORD)result) {
          goto LABEL_324;
        }
        free(v59);
        BOOL v50 = 0;
        capsule_os_log_type_t type = 0LL;
        os_log_type_t v51 = 0;
        os_log_type_t v47 = v158;
        os_log_type_t v48 = v160;
        size_t size = v163;
      }

      else
      {
        os_log_type_t v51 = 0;
        capsule_os_log_type_t type = bswap64(capsule_type | 0xC000000000000000LL);
        BOOL v50 = 8;
      }
    }

    else
    {
      os_log_type_t v51 = 0;
      capsule_os_log_type_t type = bswap32(capsule_type | 0x80000000);
      BOOL v50 = 4;
    }
  }

  else
  {
    os_log_type_t v51 = 0;
    capsule_os_log_type_t type = bswap32(capsule_type | 0x4000) >> 16;
    BOOL v50 = 2;
  }

LABEL_315:
    goto LABEL_316;
  }

  id v14 = nw_connection_copy_connected_path(v11);
  id v179 = v14;
  if (!v14)
  {
    __nwlog_obj();
    char v127 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
    BOOL v128 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    LOBYTE(__str[0]) = 0;
    if (__nwlog_fault(v128, type, __str))
    {
      if (type[0] == 17)
      {
        __nwlog_obj();
        v129 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v130 = type[0];
        if (os_log_type_enabled(v129, (os_log_type_t)type[0]))
        {
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
          _os_log_impl(&dword_181A5C000, v129, v130, "%{public}s called with null path", buf, 0xCu);
        }
      }

      else if (LOBYTE(__str[0]))
      {
        os_log_type_t v151 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v129 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v152 = type[0];
        BOOL v153 = os_log_type_enabled(v129, (os_log_type_t)type[0]);
        if (v151)
        {
          if (v153)
          {
            *(_DWORD *)std::string buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = v151;
            _os_log_impl( &dword_181A5C000,  v129,  v152,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v151);
          goto LABEL_322;
        }

        if (v153)
        {
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
          _os_log_impl(&dword_181A5C000, v129, v152, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v129 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v168 = type[0];
        if (os_log_type_enabled(v129, (os_log_type_t)type[0]))
        {
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_candidate_endpoint_for_ids_connection";
          _os_log_impl( &dword_181A5C000,  v129,  v168,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

                  if (v148) {
                    free(v148);
                  }
                  if (v122 != &nw_protocol_ref_counted_handle) {
                    goto LABEL_211;
                  }
LABEL_210:
                  nw::release_if_needed<nw_protocol *>((uint64_t *)&v205);
LABEL_211:
                  if (v114 == &nw_protocol_ref_counted_handle) {
                    nw::release_if_needed<nw_protocol *>((uint64_t *)v214);
                  }
LABEL_213:
                  id v9 = 1LL;
                  goto LABEL_195;
                }

                __nwlog_obj();
                os_log_type_t v155 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)std::string buf = 136446210;
                *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                BOOL v156 = (char *)_os_log_send_and_compose_impl();

                v214[0] = 16;
                LOBYTE(v205) = 0;
                if (__nwlog_fault(v156, v214, &v205))
                {
                  if (v214[0] == 17)
                  {
                    __nwlog_obj();
                    uint64_t v157 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    os_log_type_t v158 = v214[0];
                    if (os_log_type_enabled(v157, (os_log_type_t)v214[0]))
                    {
                      *(_DWORD *)std::string buf = 136446210;
                      *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                      _os_log_impl(&dword_181A5C000, v157, v158, "%{public}s called with null protocol", buf, 0xCu);
                    }
                  }

                  else if ((_BYTE)v205)
                  {
                    os_log_type_t v163 = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    uint64_t v157 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    os_log_type_t v164 = v214[0];
                    os_log_type_t v165 = os_log_type_enabled(v157, (os_log_type_t)v214[0]);
                    if (v163)
                    {
                      if (v165)
                      {
                        *(_DWORD *)std::string buf = 136446466;
                        *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                        *(_WORD *)&_BYTE buf[12] = 2082;
                        *(void *)&buf[14] = v163;
                        _os_log_impl( &dword_181A5C000,  v157,  v164,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
                      }

                      free(v163);
                      goto LABEL_325;
                    }

                    if (v165)
                    {
                      *(_DWORD *)std::string buf = 136446210;
                      *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                      _os_log_impl( &dword_181A5C000,  v157,  v164,  "%{public}s called with null protocol, no backtrace",  buf,  0xCu);
                    }
                  }

                  else
                  {
                    __nwlog_obj();
                    uint64_t v157 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    os_log_type_t v172 = v214[0];
                    if (os_log_type_enabled(v157, (os_log_type_t)v214[0]))
                    {
                      *(_DWORD *)std::string buf = 136446210;
                      *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                      _os_log_impl( &dword_181A5C000,  v157,  v172,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
                    }
                  }
                }

            if (v123) {
              free(v123);
            }
            goto LABEL_23;
          }

          goto LABEL_82;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v24 = (id)gLogObj;
        *(_DWORD *)std::string buf = 136446210;
        BOOL v141 = "nw_protocol_implementation_disconnect";
        size_t v25 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v136) = 0;
        if (__nwlog_fault(v25, type, &v136))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            __int16 v26 = (os_log_s *)(id)gLogObj;
            os_log_type_t v27 = type[0];
            if (os_log_type_enabled(v26, type[0]))
            {
              *(_DWORD *)std::string buf = 136446210;
              BOOL v141 = "nw_protocol_implementation_disconnect";
              _os_log_impl( &dword_181A5C000,  v26,  v27,  "%{public}s called with null instance->parent_definition->stop",  buf,  0xCu);
            }
          }

          else if ((_BYTE)v136)
          {
            os_log_type_t v30 = __nw_create_backtrace_string();
            if (v30)
            {
              BOOL v31 = (nw_protocol *)v30;
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              size_t v32 = (os_log_s *)(id)gLogObj;
              __int16 v33 = type[0];
              if (os_log_type_enabled(v32, type[0]))
              {
                *(_DWORD *)std::string buf = 136446466;
                BOOL v141 = "nw_protocol_implementation_disconnect";
                os_log_type_t v142 = 2082;
                BOOL v143 = v31;
                _os_log_impl( &dword_181A5C000,  v32,  v33,  "%{public}s called with null instance->parent_definition->stop, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v31);
              if (!v25) {
                goto LABEL_82;
              }
              goto LABEL_81;
            }

            __nwlog_obj();
            __int16 v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v46 = type[0];
            if (os_log_type_enabled(v26, type[0]))
            {
              *(_DWORD *)std::string buf = 136446210;
              BOOL v141 = "nw_protocol_implementation_disconnect";
              _os_log_impl( &dword_181A5C000,  v26,  v46,  "%{public}s called with null instance->parent_definition->stop, no backtrace",  buf,  0xCu);
            }
          }

          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            __int16 v26 = (os_log_s *)(id)gLogObj;
            int v40 = type[0];
            if (os_log_type_enabled(v26, type[0]))
            {
              *(_DWORD *)std::string buf = 136446210;
              BOOL v141 = "nw_protocol_implementation_disconnect";
              _os_log_impl( &dword_181A5C000,  v26,  v40,  "%{public}s called with null instance->parent_definition->stop, backtrace limit exceeded",  buf,  0xCu);
            }
          }
        }

        if (!v25)
        {
LABEL_82:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v47 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
          {
            os_log_type_t v48 = v6;
            else {
              int v49 = (uint64_t)a2;
            }

            *(_DWORD *)std::string buf = 136446466;
            BOOL v141 = "nw_protocol_implementation_disconnect";
            os_log_type_t v142 = 2048;
            BOOL v143 = (nw_protocol *)v49;
            _os_log_impl( &dword_181A5C000,  v47,  OS_LOG_TYPE_DEBUG,  "%{public}s Flow %llx stopping immediately, sending disconnected",  buf,  0x16u);
          }

          if (a2)
          {
            if (a2->handle == &nw_protocol_ref_counted_handle)
            {
              callbacks = a2[1].callbacks;
              if (callbacks) {
                a2[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
              }
              *(void *)os_log_type_t type = a2;
              BOOL v50 = v139 | 1;
            }

            else
            {
              *(void *)os_log_type_t type = a2;
              BOOL v50 = v139 & 0xFE;
            }

            os_log_type_t v139 = v50;
            if (*(v6 - 7) == &nw_protocol_ref_counted_handle)
            {
              BOOL v53 = (uint64_t)*(v6 - 1);
              if (v53) {
                *(v6 - 1) = (void *)(v53 + 1);
              }
              os_log_type_t v52 = -1;
            }

            else
            {
              os_log_type_t v52 = 0;
            }

            os_log_type_t v136 = v6 - 12;
            BOOL v137 = v52;
            int v54 = a2->callbacks;
            if (v54)
            {
              disconnected = (void (*)(nw_protocol *, void **))v54->disconnected;
              if (disconnected)
              {
                disconnected(a2, v6 - 12);
                os_log_type_t v52 = v137;
                goto LABEL_101;
              }
            }

            __nwlog_obj();
            uint64_t v101 = (void *)objc_claimAutoreleasedReturnValue();
            identifier = a2->identifier;
            *(_DWORD *)std::string buf = 136446722;
            BOOL v141 = "__nw_protocol_disconnected";
            if (!identifier) {
              identifier = (nw_protocol_identifier *)"invalid";
            }
            os_log_type_t v142 = 2082;
            BOOL v143 = (nw_protocol *)identifier;
            os_log_type_t v144 = 2048;
            BOOL v145 = a2;
            uint64_t v67 = (void *)_os_log_send_and_compose_impl();

            __int128 v135 = OS_LOG_TYPE_ERROR;
            uint64_t v134 = 0;
            if (!__nwlog_fault((const char *)v67, &v135, &v134))
            {
LABEL_294:
              if (v67) {
                free(v67);
              }
LABEL_101:
              if ((v52 & 1) == 0)
              {
LABEL_127:
                if ((v139 & 1) != 0) {
                  nw::release_if_needed<nw_protocol *>((uint64_t *)type);
                }
                goto LABEL_129;
              }

    if (v104) {
      free(v104);
    }
    goto LABEL_317;
  }

  if (!(*(_BYTE *)(v11 + 158) & 1 | (gLogDatapath == 0)))
  {
    __int16 v16 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      id v83 = *(void *)(v11 + 488);
      os_log_type_t v84 = *(_DWORD *)(*(void *)(v11 + 480) + 372LL);
      os_log_type_t v85 = *(_DWORD *)(v11 + 860);
      if (v83) {
        LODWORD(v83) = *(_DWORD *)(v83 + 424);
      }
      *(_DWORD *)std::string buf = 136447490;
      *(void *)&uint8_t buf[4] = "nw_http1_detect_next_request";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = v11 + 74;
      *(_WORD *)&_BYTE buf[22] = 2080;
      *(void *)&_BYTE buf[24] = " ";
      *(_WORD *)&_BYTE buf[32] = 1024;
      *(_DWORD *)&buf[34] = v84;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v85;
      *(_WORD *)&buf[44] = 1024;
      *(_DWORD *)&buf[46] = v83;
      os_log_type_t v20 = "%{public}s %{public}s%s<i%u:c%u:s%u> read 0 frames on non-idle connection, not deferring new flow";
      goto LABEL_270;
    }
  }

                free(v153);
                if (!v83) {
                  goto LABEL_431;
                }
                goto LABEL_430;
              }

                                          free(v193);
                                          goto LABEL_326;
                                        }

                                        if (__nwlog_connection_log::onceToken != -1) {
                                          dispatch_once( &__nwlog_connection_log::onceToken,  &__block_literal_global_24_44325);
                                        }
                                        v222 = (os_log_s *)(id)gconnectionLogObj;
                                        v277 = type[0];
                                        if (os_log_type_enabled(v222, type[0]))
                                        {
                                          logl = v222;
                                          v278 = nw_endpoint_handler_get_id_string(v45);
                                          v279 = nw_endpoint_handler_dry_run_string(v45);
                                          v280 = nw_endpoint_handler_copy_endpoint(v45);
                                          v281 = nw_endpoint_get_logging_description(v280);
                                          v282 = v45;
                                          v283 = nw_endpoint_handler_state_string(v45);
                                          v284 = nw_endpoint_handler_mode_string(v282);
                                          v285 = nw_endpoint_handler_copy_current_path(v282);
                                          *(_DWORD *)std::string buf = 136447746;
                                          v355 = "nw_endpoint_start_tls_while_connected";
                                          v356 = 2082;
                                          v357 = (char *)v278;
                                          v358 = 2082;
                                          v359 = v279;
                                          v360 = 2082;
                                          v361 = (void *)v281;
                                          v362 = 2082;
                                          v363 = v283;
                                          v364 = 2082;
                                          v365 = v284;
                                          v366 = 2114;
                                          v367 = v285;
                                          _os_log_impl( &dword_181A5C000,  logl,  v277,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public }@)] Failed to repair protocol stack: Could not add old input_protocol, no backtrace",  buf,  0x48u);

                                          v222 = logl;
                                        }
                                      }

                                      else
                                      {
                                        if (__nwlog_connection_log::onceToken != -1) {
                                          dispatch_once( &__nwlog_connection_log::onceToken,  &__block_literal_global_24_44325);
                                        }
                                        v222 = (os_log_s *)(id)gconnectionLogObj;
                                        v268 = type[0];
                                        if (os_log_type_enabled(v222, type[0]))
                                        {
                                          logk = v222;
                                          v269 = nw_endpoint_handler_get_id_string(v45);
                                          v270 = nw_endpoint_handler_dry_run_string(v45);
                                          v271 = nw_endpoint_handler_copy_endpoint(v45);
                                          v272 = nw_endpoint_get_logging_description(v271);
                                          v273 = v45;
                                          v274 = nw_endpoint_handler_state_string(v45);
                                          v275 = nw_endpoint_handler_mode_string(v273);
                                          v276 = nw_endpoint_handler_copy_current_path(v273);
                                          *(_DWORD *)std::string buf = 136447746;
                                          v355 = "nw_endpoint_start_tls_while_connected";
                                          v356 = 2082;
                                          v357 = (char *)v269;
                                          v358 = 2082;
                                          v359 = v270;
                                          v360 = 2082;
                                          v361 = (void *)v272;
                                          v362 = 2082;
                                          v363 = v274;
                                          v364 = 2082;
                                          v365 = v275;
                                          v366 = 2114;
                                          v367 = v276;
                                          _os_log_impl( &dword_181A5C000,  logk,  v268,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public }@)] Failed to repair protocol stack: Could not add old input_protocol, back trace limit exceeded",  buf,  0x48u);

                                          v222 = logk;
                                        }
                                      }

LABEL_322:
    os_log_type_t v113 = 0LL;
    if (v128) {
      free(v128);
    }
    uint64_t v96 = 0LL;
    goto LABEL_180;
  }

  id v15 = v12;
  __int16 v16 = (NWConcrete_nw_parameters *)-[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v15,  0,  0);

  nw_parameters_set_required_netagent_classes(v16, 0LL, 0LL);
  uint64_t v17 = (nw_interface *)nw_path_copy_interface(v14);
  nw_parameters_require_interface((nw_parameters_t)v16, v17);

  os_log_type_t v18 = nw_path_copy_effective_local_endpoint((nw_path_t)v14);
  nw_parameters_set_local_endpoint((nw_parameters_t)v16, v18);

  nw_parameters_set_reuse_local_address((nw_parameters_t)v16, 1);
  BOOL v19 = v175;
  size_t size = dispatch_data_get_size(v19);
  unsigned int v173 = a5;
  if (!size)
  {
    __nwlog_obj();
    uint64_t v131 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_candidate_manager_ids_quic_demux";
    os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    LOBYTE(__str[0]) = 0;
    if (type[0] == 17)
    {
      __nwlog_obj();
      __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v132 = type[0];
      if (os_log_type_enabled(v23, (os_log_type_t)type[0]))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_manager_ids_quic_demux";
        _os_log_impl( &dword_181A5C000,  v23,  v132,  "%{public}s called with null dispatch_data_get_size(dst_cid)",  buf,  0xCu);
      }

      goto LABEL_327;
    }

    if (!LOBYTE(__str[0]))
    {
      __nwlog_obj();
      __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v169 = type[0];
      if (os_log_type_enabled(v23, (os_log_type_t)type[0]))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_manager_ids_quic_demux";
        _os_log_impl( &dword_181A5C000,  v23,  v169,  "%{public}s called with null dispatch_data_get_size(dst_cid), backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_327;
    }

    v154 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v155 = type[0];
    BOOL v156 = os_log_type_enabled(v23, (os_log_type_t)type[0]);
    if (!v154)
    {
      if (v156)
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_candidate_manager_ids_quic_demux";
        _os_log_impl( &dword_181A5C000,  v23,  v155,  "%{public}s called with null dispatch_data_get_size(dst_cid), no backtrace",  buf,  0xCu);
      }

      goto LABEL_327;
    }

    if (v156)
    {
      *(_DWORD *)std::string buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_candidate_manager_ids_quic_demux";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = v154;
      _os_log_impl( &dword_181A5C000,  v23,  v155,  "%{public}s called with null dispatch_data_get_size(dst_cid), dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v154);
    goto LABEL_35;
  }

  *(void *)&uu[9] = 0LL;
  *(void *)&uu[1] = 0LL;
  int v187 = 0;
  *(void *)&v184[9] = 0LL;
  *(void *)&v184[1] = 0LL;
  int v185 = 0;
  if (size >= 0x15)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v21 = (id)gLogObj;
    *(_DWORD *)std::string buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_candidate_manager_ids_quic_demux";
    *(_WORD *)&_BYTE buf[12] = 2048;
    *(void *)&buf[14] = dispatch_data_get_size(v19);
    *(_WORD *)&_BYTE buf[22] = 1024;
    *(_DWORD *)&_BYTE buf[24] = 20;
    os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();

    type[0] = 16;
    LOBYTE(__str[0]) = 0;
    if (type[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v23 = (os_log_s *)(id)gLogObj;
      os_log_type_t v24 = type[0];
      if (os_log_type_enabled(v23, (os_log_type_t)type[0]))
      {
        size_t v25 = dispatch_data_get_size(v19);
        *(_DWORD *)std::string buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_candidate_manager_ids_quic_demux";
        *(_WORD *)&_BYTE buf[12] = 2048;
        *(void *)&buf[14] = v25;
        *(_WORD *)&_BYTE buf[22] = 1024;
        *(_DWORD *)&_BYTE buf[24] = 20;
        _os_log_impl(&dword_181A5C000, v23, v24, "%{public}s connection id length %zu is too large (> %d)", buf, 0x1Cu);
      }

            free(v196);
            goto LABEL_323;
          }

          if (applier[0] == 17)
          {
            __nwlog_obj();
            v197 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v202 = applier[0];
            if (os_log_type_enabled(v197, (os_log_type_t)applier[0]))
            {
              *(_DWORD *)std::string buf = 136446210;
              *(void *)&uint8_t buf[4] = "nwsc_save_remote_pub_key";
              _os_log_impl(&dword_181A5C000, v197, v202, "%{public}s called with null endpoint", buf, 0xCu);
            }

          goto LABEL_323;
        }

        if (!v165)
        {
          __nwlog_obj();
          os_log_type_t v105 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v155 = type;
          if (os_log_type_enabled(v105, type))
          {
            *(_DWORD *)std::string buf = 136446210;
            os_log_type_t v171 = "nw_necp_append_tlv";
            _os_log_impl( &dword_181A5C000,  v105,  v155,  "%{public}s called with null beyond, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_322;
        }

        os_log_type_t v132 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v105 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __int128 v135 = type;
        os_log_type_t v136 = os_log_type_enabled(v105, type);
        if (!v132)
        {
          if (v136)
          {
            *(_DWORD *)std::string buf = 136446210;
            os_log_type_t v171 = "nw_necp_append_tlv";
            _os_log_impl(&dword_181A5C000, v105, v135, "%{public}s called with null beyond, no backtrace", buf, 0xCu);
          }

          goto LABEL_322;
        }

        if (v136)
        {
          *(_DWORD *)std::string buf = 136446466;
          os_log_type_t v171 = "nw_necp_append_tlv";
          os_log_type_t v172 = 2082;
          *(void *)unsigned int v173 = v132;
          _os_log_impl( &dword_181A5C000,  v105,  v135,  "%{public}s called with null beyond, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        goto LABEL_242;
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v103 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)std::string buf = 136446210;
      os_log_type_t v171 = "nw_necp_append_tlv";
      os_log_type_t v104 = (const char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v165 = 0;
      if (__nwlog_fault(v104, &type, &v165))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v105 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          id v106 = type;
          if (os_log_type_enabled(v105, type))
          {
            *(_DWORD *)std::string buf = 136446210;
            os_log_type_t v171 = "nw_necp_append_tlv";
            _os_log_impl(&dword_181A5C000, v105, v106, "%{public}s called with null tlv_start", buf, 0xCu);
          }

          goto LABEL_322;
        }

        if (!v165)
        {
          __nwlog_obj();
          os_log_type_t v105 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v154 = type;
          if (os_log_type_enabled(v105, type))
          {
            *(_DWORD *)std::string buf = 136446210;
            os_log_type_t v171 = "nw_necp_append_tlv";
            _os_log_impl( &dword_181A5C000,  v105,  v154,  "%{public}s called with null tlv_start, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_322;
        }

        os_log_type_t v132 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v105 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v133 = type;
        uint64_t v134 = os_log_type_enabled(v105, type);
        if (!v132)
        {
          if (v134)
          {
            *(_DWORD *)std::string buf = 136446210;
            os_log_type_t v171 = "nw_necp_append_tlv";
            _os_log_impl(&dword_181A5C000, v105, v133, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
          }

          goto LABEL_322;
        }

        if (v134)
        {
          *(_DWORD *)std::string buf = 136446466;
          os_log_type_t v171 = "nw_necp_append_tlv";
          os_log_type_t v172 = 2082;
          *(void *)unsigned int v173 = v132;
          _os_log_impl( &dword_181A5C000,  v105,  v133,  "%{public}s called with null tlv_start, dumping backtrace:%{public}s",  buf,  0x16u);
        }

          goto LABEL_349;
        }

        if (!v287)
        {
          __nwlog_obj();
          v251 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v268 = type;
          if (os_log_type_enabled(v251, type))
          {
            v269 = a2->identifier;
            if (!v269) {
              v269 = (nw_protocol_identifier *)"invalid";
            }
            *(_DWORD *)std::string buf = 136446722;
            v292 = "__nw_protocol_connect";
            v293 = 2082;
            v294 = (char *)v269;
            v295 = 2048;
            v296 = a2;
            _os_log_impl( &dword_181A5C000,  v251,  v268,  "%{public}s protocol %{public}s (%p) has invalid connect callback, backtrace limit exceeded",  buf,  0x20u);
          }

          goto LABEL_322;
        }

        v254 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v255 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v256 = type;
        v257 = os_log_type_enabled(v255, type);
        if (v254)
        {
          if (v257)
          {
            v258 = a2->identifier;
            if (!v258) {
              v258 = (nw_protocol_identifier *)"invalid";
            }
            *(_DWORD *)std::string buf = 136446978;
            v292 = "__nw_protocol_connect";
            v293 = 2082;
            v294 = (char *)v258;
            v295 = 2048;
            v296 = a2;
            v297 = 2082;
            v298 = v254;
            _os_log_impl( &dword_181A5C000,  v255,  v256,  "%{public}s protocol %{public}s (%p) has invalid connect callback, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v254);
        }

        else
        {
          if (v257)
          {
            v270 = a2->identifier;
            if (!v270) {
              v270 = (nw_protocol_identifier *)"invalid";
            }
            *(_DWORD *)std::string buf = 136446722;
            v292 = "__nw_protocol_connect";
            v293 = 2082;
            v294 = (char *)v270;
            v295 = 2048;
            v296 = a2;
            _os_log_impl( &dword_181A5C000,  v255,  v256,  "%{public}s protocol %{public}s (%p) has invalid connect callback, no backtrace",  buf,  0x20u);
          }
        }
      }

    if (v193)
    {
      v177 = (char *)v193;
      goto LABEL_274;
    }

LABEL_327:
      goto LABEL_35;
    }

    if (!LOBYTE(__str[0]))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v23 = (os_log_s *)(id)gLogObj;
      os_log_type_t v36 = type[0];
      if (os_log_type_enabled(v23, (os_log_type_t)type[0]))
      {
        size_t v37 = dispatch_data_get_size(v19);
        *(_DWORD *)std::string buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_candidate_manager_ids_quic_demux";
        *(_WORD *)&_BYTE buf[12] = 2048;
        *(void *)&buf[14] = v37;
        *(_WORD *)&_BYTE buf[22] = 1024;
        *(_DWORD *)&_BYTE buf[24] = 20;
        _os_log_impl( &dword_181A5C000,  v23,  v36,  "%{public}s connection id length %zu is too large (> %d), backtrace limit exceeded",  buf,  0x1Cu);
      }

      goto LABEL_327;
    }

    BOOL v28 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v29 = (os_log_s *)(id)gLogObj;
    os_log_type_t v30 = type[0];
    BOOL v31 = os_log_type_enabled(v29, (os_log_type_t)type[0]);
    if (v28)
    {
      if (v31)
      {
        size_t v32 = dispatch_data_get_size(v19);
        *(_DWORD *)std::string buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_candidate_manager_ids_quic_demux";
        *(_WORD *)&_BYTE buf[12] = 2048;
        *(void *)&buf[14] = v32;
        *(_WORD *)&_BYTE buf[22] = 1024;
        *(_DWORD *)&_BYTE buf[24] = 20;
        *(_WORD *)&buf[28] = 2082;
        *(void *)&buf[30] = v28;
        _os_log_impl( &dword_181A5C000,  v29,  v30,  "%{public}s connection id length %zu is too large (> %d), dumping backtrace:%{public}s",  buf,  0x26u);
      }

      free(v28);
      if (!v22) {
        goto LABEL_37;
      }
      goto LABEL_36;
    }

    if (v31)
    {
      size_t v38 = dispatch_data_get_size(v19);
      *(_DWORD *)std::string buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_candidate_manager_ids_quic_demux";
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(void *)&buf[14] = v38;
      *(_WORD *)&_BYTE buf[22] = 1024;
      *(_DWORD *)&_BYTE buf[24] = 20;
      _os_log_impl( &dword_181A5C000,  v29,  v30,  "%{public}s connection id length %zu is too large (> %d), no backtrace",  buf,  0x1Cu);
    }

LABEL_35:
    if (!v22)
    {
LABEL_37:
      options = 0LL;
      goto LABEL_38;
    }

                  goto LABEL_328;
                }

                BOOL v128 = v7[405];
                if (a1->default_input_handler)
                {
                  if (v128 < 0) {
                    goto LABEL_330;
                  }
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v129 = (id)gLogObj;
                  *(_DWORD *)std::string buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                  *(_WORD *)&_BYTE buf[12] = 2082;
                  *(void *)&buf[14] = v7 + 407;
                  v281 = 2080;
                  v282 = (nw_protocol *)" ";
                  os_log_type_t v130 = (char *)_os_log_send_and_compose_impl();

                  type[0] = 16;
                  LOBYTE(v279) = 0;
                  if (type[0] == 17)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    uint64_t v131 = (os_log_s *)(id)gLogObj;
                    os_log_type_t v132 = type[0];
                    if (os_log_type_enabled(v131, (os_log_type_t)type[0]))
                    {
                      *(_DWORD *)std::string buf = 136446722;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                      *(_WORD *)&_BYTE buf[12] = 2082;
                      *(void *)&buf[14] = v7 + 407;
                      v281 = 2080;
                      v282 = (nw_protocol *)" ";
                      _os_log_impl( &dword_181A5C000,  v131,  v132,  "%{public}s %{public}s%sProtocol instance already has default input handler",  buf,  0x20u);
                    }
                  }

                  else if ((_BYTE)v279)
                  {
                    BOOL v137 = (char *)__nw_create_backtrace_string();
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    uint64_t v131 = (os_log_s *)(id)gLogObj;
                    os_log_type_t v138 = type[0];
                    os_log_type_t v139 = os_log_type_enabled(v131, (os_log_type_t)type[0]);
                    if (v137)
                    {
                      if (v139)
                      {
                        *(_DWORD *)std::string buf = 136446978;
                        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                        *(_WORD *)&_BYTE buf[12] = 2082;
                        *(void *)&buf[14] = v7 + 407;
                        v281 = 2080;
                        v282 = (nw_protocol *)" ";
                        v283 = 2082;
                        *(void *)v284 = v137;
                        _os_log_impl( &dword_181A5C000,  v131,  v138,  "%{public}s %{public}s%sProtocol instance already has default input handler, dumping backtrace:%{public}s",  buf,  0x2Au);
                      }

                      free(v137);
                      if (!v130) {
                        goto LABEL_330;
                      }
                      goto LABEL_329;
                    }

                    if (v139)
                    {
                      *(_DWORD *)std::string buf = 136446722;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                      *(_WORD *)&_BYTE buf[12] = 2082;
                      *(void *)&buf[14] = v7 + 407;
                      v281 = 2080;
                      v282 = (nw_protocol *)" ";
                      _os_log_impl( &dword_181A5C000,  v131,  v138,  "%{public}s %{public}s%sProtocol instance already has default input handler, no backtrace",  buf,  0x20u);
                    }
                  }

                  else
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    uint64_t v131 = (os_log_s *)(id)gLogObj;
                    os_log_type_t v164 = type[0];
                    if (os_log_type_enabled(v131, (os_log_type_t)type[0]))
                    {
                      *(_DWORD *)std::string buf = 136446722;
                      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                      *(_WORD *)&_BYTE buf[12] = 2082;
                      *(void *)&buf[14] = v7 + 407;
                      v281 = 2080;
                      v282 = (nw_protocol *)" ";
                      _os_log_impl( &dword_181A5C000,  v131,  v164,  "%{public}s %{public}s%sProtocol instance already has default input handler, backtrace limit exceeded",  buf,  0x20u);
                    }
                  }

                  goto LABEL_327;
                }

                if ((v128 & 0x80000000) == 0 && gLogDatapath)
                {
                  __nwlog_obj();
                  v200 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v200, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)std::string buf = 136446722;
                    *(void *)&uint8_t buf[4] = "nw_protocol_implementation_add_input_handler";
                    *(_WORD *)&_BYTE buf[12] = 2082;
                    *(void *)&buf[14] = v7 + 407;
                    v281 = 2080;
                    v282 = (nw_protocol *)" ";
                    _os_log_impl( &dword_181A5C000,  v200,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sProtocol add input handler",  buf,  0x20u);
                  }

                  uint64_t default_input_handler = a1->default_input_handler;
                  if (default_input_handler != a2)
                  {
                    if (default_input_handler)
                    {
                      if (default_input_handler->handle == &nw_protocol_ref_counted_handle)
                      {
                        v202 = default_input_handler[1].callbacks;
                        if (v202)
                        {
                          v203 = (nw_protocol_callbacks *)((char *)v202 - 1);
                          default_input_handler[1].callbacks = v203;
                          if (!v203)
                          {
                            v204 = *(void (***)(void))default_input_handler[1].flow_id;
                            if (v204)
                            {
                              *(void *)default_input_handler[1].flow_id = 0LL;
                              v204[2](v204);
                              _Block_release(v204);
                            }

                            if ((default_input_handler[1].flow_id[8] & 1) != 0)
                            {
                              v205 = *(const void **)default_input_handler[1].flow_id;
                              if (v205) {
                                _Block_release(v205);
                              }
                            }

                            free(default_input_handler);
                          }
                        }
                      }
                    }

                    goto LABEL_275;
                  }
                }

                else if (a2)
                {
LABEL_275:
                  a1->uint64_t default_input_handler = a2;
                  if (a2)
                  {
                    if (a2->handle == &nw_protocol_ref_counted_handle)
                    {
                      char v133 = a2[1].callbacks;
                      if (v133) {
                        a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v133->add_input_handler + 1);
                      }
                    }

                    nw_protocol_set_flow_id_from_protocol(a1, a2);
                    goto LABEL_430;
                  }

                  nw_protocol_set_flow_id_from_protocol(a1, 0LL);
                  goto LABEL_332;
                }

                nw_protocol_set_flow_id_from_protocol(a1, a2);
                if (a2)
                {
LABEL_430:
                  if (!a2->output_handler)
                  {
                    a2->uint64_t output_handler = a1;
                    if (a1->handle == &nw_protocol_ref_counted_handle)
                    {
                      v206 = a1[1].callbacks;
                      if (v206) {
                        a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v206->add_input_handler + 1);
                      }
                    }
                  }

                  goto LABEL_434;
                }

    free(v69);
    goto LABEL_334;
  }

  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)std::string buf = 136446210;
    id v178 = "nw_protocol_http1_get_output_frames";
    nw_endpoint_t v61 = (char *)_os_log_send_and_compose_impl();
    v176 = OS_LOG_TYPE_ERROR;
    v175 = 0;
    if (v176 == OS_LOG_TYPE_FAULT)
    {
      nw_endpoint_t v62 = (os_log_s *)__nwlog_obj();
      char v63 = v176;
      if (!os_log_type_enabled(v62, v176)) {
        goto LABEL_334;
      }
      *(_DWORD *)std::string buf = 136446210;
      id v178 = "nw_protocol_http1_get_output_frames";
      BOOL v64 = "%{public}s called with null return_array";
      goto LABEL_332;
    }

    if (!v175)
    {
      nw_endpoint_t v62 = (os_log_s *)__nwlog_obj();
      char v63 = v176;
      if (!os_log_type_enabled(v62, v176)) {
        goto LABEL_334;
      }
      *(_DWORD *)std::string buf = 136446210;
      id v178 = "nw_protocol_http1_get_output_frames";
      BOOL v64 = "%{public}s called with null return_array, backtrace limit exceeded";
      goto LABEL_332;
    }

    uint64_t v69 = (char *)__nw_create_backtrace_string();
    nw_endpoint_t v62 = (os_log_s *)__nwlog_obj();
    char v63 = v176;
    BOOL v128 = os_log_type_enabled(v62, v176);
    if (!v69)
    {
      if (!v128) {
        goto LABEL_334;
      }
      *(_DWORD *)std::string buf = 136446210;
      id v178 = "nw_protocol_http1_get_output_frames";
      BOOL v64 = "%{public}s called with null return_array, no backtrace";
      goto LABEL_332;
    }

    if (v128)
    {
      *(_DWORD *)std::string buf = 136446466;
      id v178 = "nw_protocol_http1_get_output_frames";
      id v179 = 2082;
      *(void *)char v180 = v69;
      os_log_type_t v71 = "%{public}s called with null return_array, dumping backtrace:%{public}s";
      goto LABEL_326;
    }

    goto LABEL_327;
  }

  if (v12 != 2)
  {
    if (v12 != 3) {
      goto LABEL_318;
    }
    uint64_t v17 = *((void *)handle + 2);
    if (v17)
    {
      os_log_type_t v18 = (uint64_t *)(v17 + 488);
      goto LABEL_18;
    }

    __nwlog_obj();
    *(_DWORD *)std::string buf = 136446210;
    id v178 = "nw_http1_get_stream_for_protocol";
    v129 = (char *)_os_log_send_and_compose_impl();
    v176 = OS_LOG_TYPE_ERROR;
    v175 = 0;
    if (__nwlog_fault(v129, &v176, &v175))
    {
      if (v176 == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v130 = (os_log_s *)__nwlog_obj();
        uint64_t v131 = v176;
        if (!os_log_type_enabled(v130, v176)) {
          goto LABEL_316;
        }
        *(_DWORD *)std::string buf = 136446210;
        id v178 = "nw_http1_get_stream_for_protocol";
        os_log_type_t v132 = "%{public}s called with null handle->http1_connection";
        goto LABEL_315;
      }

      if (!v175)
      {
        os_log_type_t v130 = (os_log_s *)__nwlog_obj();
        uint64_t v131 = v176;
        if (!os_log_type_enabled(v130, v176)) {
          goto LABEL_316;
        }
        *(_DWORD *)std::string buf = 136446210;
        id v178 = "nw_http1_get_stream_for_protocol";
        os_log_type_t v132 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_315;
      }

      __int128 v135 = (char *)__nw_create_backtrace_string();
      os_log_type_t v130 = (os_log_s *)__nwlog_obj();
      uint64_t v131 = v176;
      os_log_type_t v136 = os_log_type_enabled(v130, v176);
      if (v135)
      {
        if (v136)
        {
          *(_DWORD *)std::string buf = 136446466;
          id v178 = "nw_http1_get_stream_for_protocol";
          id v179 = 2082;
          *(void *)char v180 = v135;
          _os_log_impl( &dword_181A5C000,  v130,  v131,  "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v135);
        goto LABEL_316;
      }

      if (v136)
      {
        *(_DWORD *)std::string buf = 136446210;
        id v178 = "nw_http1_get_stream_for_protocol";
        os_log_type_t v132 = "%{public}s called with null handle->http1_connection, no backtrace";
LABEL_315:
        _os_log_impl(&dword_181A5C000, v130, v131, v132, buf, 0xCu);
      }
    }

      os_log_type_t v79 = 0LL;
      os_log_type_t v80 = 0LL;
      os_log_type_t v81 = 2;
      v305 = 1;
      id v83 = 4LL;
    }

    else
    {
      id v83 = 0LL;
      v305 = 1;
LABEL_355:
      v308 = 1;
      LODWORD(v26) = 1;
      os_log_type_t v79 = 3LL;
    }

      os_log_type_t v71 = (uint64_t)p_output_handler;
LABEL_328:
      BOOL v70 = v45;
      goto LABEL_329;
    }

    *(_DWORD *)std::string buf = 136446466;
    v553 = "nw_socket_set_common_sockopts";
    v554 = 1024;
    *(_DWORD *)v555 = v45;
    os_log_type_t v51 = (char *)_os_log_send_and_compose_impl();
    uu[0] = 16;
    LOBYTE(v556) = 0;
    if (uu[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v52 = (os_log_s *)gLogObj;
      BOOL v53 = uu[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)uu[0])) {
        goto LABEL_325;
      }
      *(_DWORD *)std::string buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      v554 = 1024;
      *(_DWORD *)v555 = v45;
      int v54 = "%{public}s FIONBIO failed %{darwin.errno}d";
    }

    else if ((_BYTE)v556)
    {
      os_log_type_t v55 = (char *)__nw_create_backtrace_string();
      os_log_type_t v52 = (os_log_s *)__nwlog_obj();
      BOOL v53 = uu[0];
      int v56 = os_log_type_enabled(v52, (os_log_type_t)uu[0]);
      if (v55)
      {
        if (v56)
        {
          *(_DWORD *)std::string buf = 136446722;
          v553 = "nw_socket_set_common_sockopts";
          v554 = 1024;
          *(_DWORD *)v555 = v45;
          *(_WORD *)&v555[4] = 2082;
          *(void *)&v555[6] = v55;
          _os_log_impl( &dword_181A5C000,  v52,  v53,  "%{public}s FIONBIO failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
        }

        free(v55);
        if (!v51) {
          goto LABEL_327;
        }
        goto LABEL_326;
      }

      if (!v56) {
        goto LABEL_325;
      }
      *(_DWORD *)std::string buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      v554 = 1024;
      *(_DWORD *)v555 = v45;
      int v54 = "%{public}s FIONBIO failed %{darwin.errno}d, no backtrace";
    }

    else
    {
      os_log_type_t v52 = (os_log_s *)__nwlog_obj();
      BOOL v53 = uu[0];
      if (!os_log_type_enabled(v52, (os_log_type_t)uu[0])) {
        goto LABEL_325;
      }
      *(_DWORD *)std::string buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      v554 = 1024;
      *(_DWORD *)v555 = v45;
      int v54 = "%{public}s FIONBIO failed %{darwin.errno}d, backtrace limit exceeded";
    }

                      if (v182) {
                        free(v182);
                      }
                      goto LABEL_206;
                    }

void sub_181D3C794( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20, void *a21)
{
  _Unwind_Resume(a1);
}

BOOL nw_txt_record_set_key_data_value(void *a1, const char *a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  uint64_t v6 = a3;
  size_t size = dispatch_data_get_size(v6);
  if (strlen(a2) + 2 * size >= 0x100)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    *(_DWORD *)std::string buf = 136446722;
    BOOL v31 = "nw_txt_record_set_key_data_value";
    __int16 v32 = 2080;
    uint64_t v33 = (uint64_t)a2;
    __int16 v34 = 2048;
    size_t v35 = dispatch_data_get_size(v6);
    id v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (__nwlog_fault(v9, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v10 = (os_log_s *)(id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          size_t v12 = dispatch_data_get_size(v6);
          *(_DWORD *)std::string buf = 136446722;
          BOOL v31 = "nw_txt_record_set_key_data_value";
          __int16 v32 = 2080;
          uint64_t v33 = (uint64_t)a2;
          __int16 v34 = 2048;
          size_t v35 = v12;
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s Key %s + data value length %zu too large", buf, 0x20u);
        }
      }

      else if (v28)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v10 = (os_log_s *)(id)gLogObj;
        os_log_type_t v17 = type;
        BOOL v18 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v18)
          {
            size_t v19 = dispatch_data_get_size(v6);
            *(_DWORD *)std::string buf = 136446978;
            BOOL v31 = "nw_txt_record_set_key_data_value";
            __int16 v32 = 2080;
            uint64_t v33 = (uint64_t)a2;
            __int16 v34 = 2048;
            size_t v35 = v19;
            __int16 v36 = 2082;
            size_t v37 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s Key %s + data value length %zu too large, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(backtrace_string);
          if (!v9) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }

        if (v18)
        {
          size_t v22 = dispatch_data_get_size(v6);
          *(_DWORD *)std::string buf = 136446722;
          BOOL v31 = "nw_txt_record_set_key_data_value";
          __int16 v32 = 2080;
          uint64_t v33 = (uint64_t)a2;
          __int16 v34 = 2048;
          size_t v35 = v22;
          _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s Key %s + data value length %zu too large, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v10 = (os_log_s *)(id)gLogObj;
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          size_t v21 = dispatch_data_get_size(v6);
          *(_DWORD *)std::string buf = 136446722;
          BOOL v31 = "nw_txt_record_set_key_data_value";
          __int16 v32 = 2080;
          uint64_t v33 = (uint64_t)a2;
          __int16 v34 = 2048;
          size_t v35 = v21;
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s Key %s + data value length %zu too large, backtrace limit exceeded",  buf,  0x20u);
        }
      }
    }

    if (!v9)
    {
LABEL_9:
      BOOL v13 = 0LL;
LABEL_14:

      return v13;
    }

void sub_181D3CDC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL32nw_txt_record_set_key_data_valuePU27objcproto16OS_nw_txt_record8NSObjectPKcPU27objcproto16OS_dispatch_dataS__block_invoke( uint64_t a1, uint64_t a2, unint64_t a3, char *a4, uint64_t a5)
{
  if (a5)
  {
    uint64_t v5 = 2 * a3;
    do
    {
      if (a3 >= *(void *)(a1 + 32)) {
        break;
      }
      *(_BYTE *)(*(void *)(a1 + 40) + v5) = nw_printf_write_data::hex_chars[(unint64_t)*a4 >> 4];
      char v6 = *a4++;
      *(_BYTE *)(*(void *)(a1 + 40) + v5 + 1) = nw_printf_write_data::hex_chars[v6 & 0xF];
      v5 += 2LL;
      ++a3;
      --a5;
    }

    while (a5);
  }

  return 1LL;
}

uint64_t nw_protocol_fulfill_frame_request( void *a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, unsigned int *a6, _BYTE *a7)
{
  uint64_t v89 = *MEMORY[0x1895F89C0];
  if (a6) {
    *a6 = 0;
  }
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
    __int16 v34 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v73[0] = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      size_t v35 = (os_log_s *)__nwlog_obj();
      os_log_type_t v36 = type[0];
      if (!os_log_type_enabled(v35, type[0])) {
        goto LABEL_91;
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
      size_t v37 = "%{public}s called with null source_array";
LABEL_90:
      _os_log_impl(&dword_181A5C000, v35, v36, v37, buf, 0xCu);
      goto LABEL_91;
    }

    if (!v73[0])
    {
      size_t v35 = (os_log_s *)__nwlog_obj();
      os_log_type_t v36 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
        size_t v37 = "%{public}s called with null source_array, backtrace limit exceeded";
        goto LABEL_90;
      }

      goto LABEL_91;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    size_t v35 = (os_log_s *)__nwlog_obj();
    os_log_type_t v36 = type[0];
    BOOL v40 = os_log_type_enabled(v35, type[0]);
    if (!backtrace_string)
    {
      if (v40)
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
        size_t v37 = "%{public}s called with null source_array, no backtrace";
        goto LABEL_90;
      }

      goto LABEL_91;
    }

    if (!v40) {
      goto LABEL_77;
    }
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    id v41 = "%{public}s called with null source_array, dumping backtrace:%{public}s";
LABEL_76:
    _os_log_impl(&dword_181A5C000, v35, v36, v41, buf, 0x16u);
    goto LABEL_77;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
    __int16 v34 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v73[0] = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      size_t v35 = (os_log_s *)__nwlog_obj();
      os_log_type_t v36 = type[0];
      if (!os_log_type_enabled(v35, type[0])) {
        goto LABEL_91;
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
      size_t v37 = "%{public}s called with null destination_array";
      goto LABEL_90;
    }

    if (!v73[0])
    {
      size_t v35 = (os_log_s *)__nwlog_obj();
      os_log_type_t v36 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
        size_t v37 = "%{public}s called with null destination_array, backtrace limit exceeded";
        goto LABEL_90;
      }

      goto LABEL_91;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    size_t v35 = (os_log_s *)__nwlog_obj();
    os_log_type_t v36 = type[0];
    BOOL v42 = os_log_type_enabled(v35, type[0]);
    if (!backtrace_string)
    {
      if (v42)
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
        size_t v37 = "%{public}s called with null destination_array, no backtrace";
        goto LABEL_90;
      }

      goto LABEL_91;
    }

    if (!v42) {
      goto LABEL_77;
    }
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    id v41 = "%{public}s called with null destination_array, dumping backtrace:%{public}s";
    goto LABEL_76;
  }

  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
    __int16 v34 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v73[0] = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      size_t v35 = (os_log_s *)__nwlog_obj();
      os_log_type_t v36 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_fulfill_frame_request";
        size_t v37 = "%{public}s called with null metadata_complete";
        goto LABEL_90;
      }

__n128 __Block_byref_object_copy__3159(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

BOOL ___ZL35__nw_protocol_fulfill_frame_requestP16nw_frame_array_sS0_bbjjjPjPb_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t v118 = *MEMORY[0x1895F89C0];
  unsigned int v4 = nw_frame_unclaimed_length((_DWORD *)a2);
  unsigned int v6 = v4;
  int v7 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  id v8 = &qword_18C45F000;
  uint64_t v9 = v7 + v4;
  if (__CFADD__(v7, v4))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)std::string buf = 136446978;
    BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
    __int16 v112 = 2082;
    *(void *)os_log_type_t v113 = "bytes_count_with_this_frame";
    *(_WORD *)&v113[8] = 2048;
    uint64_t v114 = v6;
    *(_WORD *)os_log_type_t v115 = 2048;
    *(void *)&v115[2] = v9;
    id v10 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v109 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v10, type, &v109))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v11 = (os_log_s *)gLogObj;
        os_log_type_t v12 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          *(_DWORD *)std::string buf = 136446978;
          BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
          __int16 v112 = 2082;
          *(void *)os_log_type_t v113 = "bytes_count_with_this_frame";
          *(_WORD *)&v113[8] = 2048;
          uint64_t v114 = v6;
          *(_WORD *)os_log_type_t v115 = 2048;
          *(void *)&v115[2] = v9;
          BOOL v13 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_18:
          _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0x2Au);
        }
      }

      else if (v109)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v11 = (os_log_s *)gLogObj;
        os_log_type_t v12 = type[0];
        BOOL v15 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)std::string buf = 136447234;
            BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
            __int16 v112 = 2082;
            *(void *)os_log_type_t v113 = "bytes_count_with_this_frame";
            *(_WORD *)&v113[8] = 2048;
            uint64_t v114 = v6;
            *(_WORD *)os_log_type_t v115 = 2048;
            *(void *)&v115[2] = v9;
            __int16 v116 = 2082;
            os_log_type_t v117 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(backtrace_string);
          id v8 = &qword_18C45F000;
          goto LABEL_19;
        }

        id v8 = &qword_18C45F000;
        if (v15)
        {
          *(_DWORD *)std::string buf = 136446978;
          BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
          __int16 v112 = 2082;
          *(void *)os_log_type_t v113 = "bytes_count_with_this_frame";
          *(_WORD *)&v113[8] = 2048;
          uint64_t v114 = v6;
          *(_WORD *)os_log_type_t v115 = 2048;
          *(void *)&v115[2] = v9;
          BOOL v13 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          goto LABEL_18;
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v11 = (os_log_s *)gLogObj;
        os_log_type_t v12 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          *(_DWORD *)std::string buf = 136446978;
          BOOL v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
          __int16 v112 = 2082;
          *(void *)os_log_type_t v113 = "bytes_count_with_this_frame";
          *(_WORD *)&v113[8] = 2048;
          uint64_t v114 = v6;
          *(_WORD *)os_log_type_t v115 = 2048;
          *(void *)&v115[2] = v9;
          BOOL v13 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_18;
        }
      }
    }

uint64_t ___ZL35__nw_protocol_fulfill_frame_requestP16nw_frame_array_sS0_bbjjjPjPb_block_invoke_25( uint64_t a1, void *a2)
{
  if (!a2) {
    return 1LL;
  }
  if (!*(_BYTE *)(a1 + 48))
  {
    uint64_t v3 = a2[2];
    unsigned int v4 = (void *)a2[3];
    id v2 = a2 + 2;
    if (v3)
    {
      *(void *)(v3 + 24) = v4;
      unsigned int v4 = (void *)a2[3];
LABEL_8:
      void *v4 = v3;
      goto LABEL_9;
    }

void nw_protocol_plugin_metadata_get_and_process_frames( uint64_t a1, void *a2, uint64_t a3, int a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, unsigned int *a8, _DWORD *a9, uint64_t a10, uint64_t *a11)
{
  uint64_t v136 = *MEMORY[0x1895F89C0];
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
    uint64_t v67 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v117) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v68 = (os_log_s *)__nwlog_obj();
      os_log_type_t v69 = type[0];
      if (!os_log_type_enabled(v68, type[0])) {
        goto LABEL_163;
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
      uint64_t v70 = "%{public}s called with null input_protocol";
    }

    else if ((_BYTE)v117)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v68 = (os_log_s *)__nwlog_obj();
      os_log_type_t v69 = type[0];
      BOOL v78 = os_log_type_enabled(v68, type[0]);
      if (backtrace_string)
      {
        if (v78)
        {
          *(_DWORD *)std::string buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v68,  v69,  "%{public}s called with null input_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_163:
        if (!v67) {
          return;
        }
        goto LABEL_164;
      }

      if (!v78) {
        goto LABEL_163;
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
      uint64_t v70 = "%{public}s called with null input_protocol, no backtrace";
    }

    else
    {
      uint64_t v68 = (os_log_s *)__nwlog_obj();
      os_log_type_t v69 = type[0];
      if (!os_log_type_enabled(v68, type[0])) {
        goto LABEL_163;
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
      uint64_t v70 = "%{public}s called with null input_protocol, backtrace limit exceeded";
    }

    goto LABEL_162;
  }

  if (!a10)
  {
    __nwlog_obj();
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
    uint64_t v67 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v117) = 0;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v117)
      {
        uint64_t v68 = (os_log_s *)__nwlog_obj();
        os_log_type_t v69 = type[0];
        if (!os_log_type_enabled(v68, type[0])) {
          goto LABEL_163;
        }
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
        uint64_t v70 = "%{public}s called with null processor, backtrace limit exceeded";
        goto LABEL_162;
      }

      uint64_t v79 = (char *)__nw_create_backtrace_string();
      uint64_t v68 = (os_log_s *)__nwlog_obj();
      os_log_type_t v69 = type[0];
      BOOL v80 = os_log_type_enabled(v68, type[0]);
      if (!v79)
      {
        if (!v80) {
          goto LABEL_163;
        }
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
        uint64_t v70 = "%{public}s called with null processor, no backtrace";
        goto LABEL_162;
      }

      if (v80)
      {
        *(_DWORD *)std::string buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_get_and_process_frames";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = v79;
        uint64_t v81 = "%{public}s called with null processor, dumping backtrace:%{public}s";
LABEL_122:
        _os_log_impl(&dword_181A5C000, v68, v69, v81, buf, 0x16u);
      }

uint64_t __nw_protocol_plugin_metadata_process_frames_block_invoke(uint64_t a1, _DWORD *a2)
{
  uint64_t v297 = *MEMORY[0x1895F89C0];
  v290 = a2;
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
    v257 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v288 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v258 = (os_log_s *)__nwlog_obj();
      os_log_type_t v259 = type;
      if (!os_log_type_enabled(v258, type)) {
        goto LABEL_364;
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
      v260 = "%{public}s called with null frame";
    }

    else if (v288)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v258 = (os_log_s *)__nwlog_obj();
      os_log_type_t v259 = type;
      BOOL v263 = os_log_type_enabled(v258, type);
      if (backtrace_string)
      {
        if (v263)
        {
          *(_DWORD *)std::string buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v258,  v259,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_364;
      }

      if (!v263)
      {
LABEL_364:
        if (v257) {
          free(v257);
        }
        return 0LL;
      }

      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
      v260 = "%{public}s called with null frame, no backtrace";
    }

    else
    {
      v258 = (os_log_s *)__nwlog_obj();
      os_log_type_t v259 = type;
      if (!os_log_type_enabled(v258, type)) {
        goto LABEL_364;
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
      v260 = "%{public}s called with null frame, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v258, v259, v260, buf, 0xCu);
    goto LABEL_364;
  }

  if (!**(_DWORD **)(a1 + 40))
  {
    if (!gLogDatapath) {
      return 0LL;
    }
    v264 = (os_log_s *)__nwlog_obj();
    if (!os_log_type_enabled(v264, OS_LOG_TYPE_DEBUG)) {
      return 0LL;
    }
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
    id v43 = "%{public}s stopping after reaching maximum frame count";
    uint64_t v44 = v264;
    uint32_t v45 = 12;
    goto LABEL_344;
  }

  uint64_t v3 = a2;
  if (gLogDatapath)
  {
    v261 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v261, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(void *)&buf[14] = v3;
      _os_log_impl(&dword_181A5C000, v261, OS_LOG_TYPE_DEBUG, "%{public}s processing frame %p", buf, 0x16u);
      uint64_t v3 = v290;
    }
  }

  unsigned int v4 = nw_frame_copy_metadata_for_protocol((uint64_t)v3, *(void *)(*(void *)(a1 + 48) + 80LL));
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = *(unsigned __int8 *)(a1 + 120);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = 48LL;
    if (!*(_BYTE *)(a1 + 120)) {
      uint64_t v8 = 64LL;
    }
    if (*(void **)(v7 + v8) == v4 || (*(_BYTE *)(v7 + 142) & 1) == 0)
    {
      BOOL v9 = v6 == 0;
      uint64_t v10 = 140LL;
      if (v9) {
        uint64_t v10 = 141LL;
      }
      BOOL v11 = 0LL;
      switch(*(_BYTE *)(v7 + v10))
      {
        case 0:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
          os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v288 = 0;
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            BOOL v13 = (os_log_s *)gLogObj;
            os_log_type_t v14 = type;
            if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
              goto LABEL_128;
            }
            *(_DWORD *)std::string buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
            BOOL v15 = "%{public}s current metadata processor result must not be unknown";
LABEL_127:
            _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0xCu);
            goto LABEL_128;
          }

          if (!v288)
          {
            BOOL v13 = (os_log_s *)__nwlog_obj();
            os_log_type_t v14 = type;
            if (!os_log_type_enabled(v13, type)) {
              goto LABEL_128;
            }
            *(_DWORD *)std::string buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
            BOOL v15 = "%{public}s current metadata processor result must not be unknown, backtrace limit exceeded";
            goto LABEL_127;
          }

          uint64_t v82 = (char *)__nw_create_backtrace_string();
          BOOL v13 = (os_log_s *)__nwlog_obj();
          os_log_type_t v14 = type;
          BOOL v83 = os_log_type_enabled(v13, type);
          if (!v82)
          {
            if (!v83) {
              goto LABEL_128;
            }
            *(_DWORD *)std::string buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
            BOOL v15 = "%{public}s current metadata processor result must not be unknown, no backtrace";
            goto LABEL_127;
          }

          if (v83)
          {
            *(_DWORD *)std::string buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = v82;
            _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s current metadata processor result must not be unknown, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v82);
LABEL_128:
          if (v12) {
            free(v12);
          }
LABEL_281:
          BOOL v11 = 1LL;
          break;
        case 1:
          unsigned int v28 = nw_frame_unclaimed_length(v290);
          if (v28 > **(_DWORD **)(a1 + 56))
          {
            if (!*(_BYTE *)(a1 + 120))
            {
              if (gLogDatapath)
              {
                uint32_t v91 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
                {
                  int v92 = **(_DWORD **)(a1 + 56);
                  *(_DWORD *)std::string buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                  *(_WORD *)&_BYTE buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v28;
                  *(_WORD *)&buf[18] = 1024;
                  *(_DWORD *)&buf[20] = v92;
                  _os_log_impl( &dword_181A5C000,  v91,  OS_LOG_TYPE_DEBUG,  "%{public}s not delivering frame with length %u maximum bytes %u",  buf,  0x18u);
                }
              }

              goto LABEL_313;
            }

            if (gLogDatapath)
            {
              v282 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v282, OS_LOG_TYPE_DEBUG))
              {
                int v283 = **(_DWORD **)(a1 + 56);
                *(_DWORD *)std::string buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                *(_WORD *)&_BYTE buf[12] = 2048;
                *(void *)&buf[14] = v290;
                *(_WORD *)&_BYTE buf[22] = 1024;
                LODWORD(v292) = v283;
                _os_log_impl( &dword_181A5C000,  v282,  OS_LOG_TYPE_DEBUG,  "%{public}s splitting frame %p that is part of handled message by offset %d",  buf,  0x1Cu);
              }
            }

            uint64_t v29 = v290;
            uint64_t v30 = v290 + 8;
            uint64_t v31 = *((void *)v290 + 4);
            char v32 = (void *)*((void *)v290 + 5);
            if (v31)
            {
              *(void *)(v31 + 40) = v32;
              char v32 = (void *)*((void *)v29 + 5);
            }

            else
            {
              *(void *)(*(void *)(a1 + 64) + 8LL) = v32;
            }

            *char v32 = v31;
            *uint64_t v30 = 0LL;
            v30[1] = 0LL;
            uint64_t v108 = nw_frame_split((uint64_t *)&v290, **(_DWORD **)(a1 + 56));
            os_log_type_t v109 = *(uint64_t **)(a1 + 64);
            os_log_type_t v110 = v290;
            uint64_t v111 = *v109;
            __int16 v112 = v290;
            *((void *)v290 + 4) = *v109;
            os_log_type_t v113 = v112 + 8;
            if (v111) {
              uint64_t v114 = (void *)(v111 + 40);
            }
            else {
              uint64_t v114 = v109 + 1;
            }
            *uint64_t v114 = v113;
            uint64_t *v109 = (uint64_t)v110;
            *((void *)v110 + 5) = v109;
            uint64_t v115 = *(void *)(a1 + 72);
            *(void *)(v108 + 32) = 0LL;
            __int16 v116 = *(uint64_t **)(v115 + 8);
            *(void *)(v108 + 40) = v116;
            *__int16 v116 = v108;
            *(void *)(v115 + _Block_object_dispose(va, 8) = v108 + 32;
            **(_DWORD **)(a1 + 80) = 0;
            **(_DWORD **)(a1 + 56) = 0;
            uint64_t v117 = *(_DWORD **)(a1 + 40);
            if ((*v117)--)
            {
LABEL_292:
              v225 = *(_DWORD **)(a1 + 88);
              int v226 = **(_DWORD **)(a1 + 56);
              BOOL v51 = __CFADD__(*v225, v226);
              *v225 += v226;
              if (!v51) {
                goto LABEL_311;
              }
              __nwlog_obj();
              uint64_t v227 = **(unsigned int **)(a1 + 56);
              v228 = (_DWORD *)**(unsigned int **)(a1 + 88);
              *(_DWORD *)std::string buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
              *(_WORD *)&_BYTE buf[12] = 2082;
              *(void *)&buf[14] = "moved_bytes";
              *(_WORD *)&_BYTE buf[22] = 2048;
              uint64_t v292 = v227;
              __int16 v293 = 2048;
              v294 = v228;
              v229 = (char *)_os_log_send_and_compose_impl();
              os_log_type_t type = OS_LOG_TYPE_ERROR;
              char v288 = 0;
              if (__nwlog_fault(v229, &type, &v288))
              {
                if (type == OS_LOG_TYPE_FAULT)
                {
                  v230 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v231 = type;
                  if (os_log_type_enabled(v230, type))
                  {
                    uint64_t v232 = **(unsigned int **)(a1 + 56);
                    v233 = (_DWORD *)**(unsigned int **)(a1 + 88);
                    *(_DWORD *)std::string buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                    *(_WORD *)&_BYTE buf[12] = 2082;
                    *(void *)&buf[14] = "moved_bytes";
                    *(_WORD *)&_BYTE buf[22] = 2048;
                    uint64_t v292 = v232;
                    __int16 v293 = 2048;
                    v294 = v233;
                    v234 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_307:
                    _os_log_impl(&dword_181A5C000, v230, v231, v234, buf, 0x2Au);
                  }
                }

                else if (v288)
                {
                  v235 = (char *)__nw_create_backtrace_string();
                  v230 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v231 = type;
                  BOOL v236 = os_log_type_enabled(v230, type);
                  if (v235)
                  {
                    if (v236)
                    {
                      uint64_t v237 = **(unsigned int **)(a1 + 56);
                      v238 = (_DWORD *)**(unsigned int **)(a1 + 88);
                      *(_DWORD *)std::string buf = 136447234;
                      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                      *(_WORD *)&_BYTE buf[12] = 2082;
                      *(void *)&buf[14] = "moved_bytes";
                      *(_WORD *)&_BYTE buf[22] = 2048;
                      uint64_t v292 = v237;
                      __int16 v293 = 2048;
                      v294 = v238;
                      __int16 v295 = 2082;
                      v296 = v235;
                      _os_log_impl( &dword_181A5C000,  v230,  v231,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                    }

                    free(v235);
                    goto LABEL_308;
                  }

                  if (v236)
                  {
                    uint64_t v241 = **(unsigned int **)(a1 + 56);
                    v242 = (_DWORD *)**(unsigned int **)(a1 + 88);
                    *(_DWORD *)std::string buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                    *(_WORD *)&_BYTE buf[12] = 2082;
                    *(void *)&buf[14] = "moved_bytes";
                    *(_WORD *)&_BYTE buf[22] = 2048;
                    uint64_t v292 = v241;
                    __int16 v293 = 2048;
                    v294 = v242;
                    v234 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                    goto LABEL_307;
                  }
                }

                else
                {
                  v230 = (os_log_s *)__nwlog_obj();
                  os_log_type_t v231 = type;
                  if (os_log_type_enabled(v230, type))
                  {
                    uint64_t v239 = **(unsigned int **)(a1 + 56);
                    v240 = (_DWORD *)**(unsigned int **)(a1 + 88);
                    *(_DWORD *)std::string buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                    *(_WORD *)&_BYTE buf[12] = 2082;
                    *(void *)&buf[14] = "moved_bytes";
                    *(_WORD *)&_BYTE buf[22] = 2048;
                    uint64_t v292 = v239;
                    __int16 v293 = 2048;
                    v294 = v240;
                    v234 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                    goto LABEL_307;
                  }
                }
              }

LABEL_308:
              if (v229) {
                free(v229);
              }
              **(_DWORD **)(a1 + 8_Block_object_dispose(va, 8) = -1;
LABEL_311:
              uint64_t v243 = *(void *)(*(void *)(a1 + 32) + 8LL);
              uint64_t v244 = *(unsigned int *)(v243 + 24) + 1LL;
              uint64_t v245 = v244 << 31 >> 31;
              *(_DWORD *)(v243 + 24) = v244;
              if (v245 == v244 && (v245 & 0x8000000000000000LL) == 0)
              {
LABEL_313:
                BOOL v11 = 0LL;
                break;
              }

              __nwlog_obj();
              v246 = (_DWORD *)*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
              *(_DWORD *)std::string buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
              *(_WORD *)&_BYTE buf[12] = 2082;
              *(void *)&buf[14] = "count";
              *(_WORD *)&_BYTE buf[22] = 2048;
              uint64_t v292 = 1LL;
              __int16 v293 = 2048;
              v294 = v246;
              v247 = (char *)_os_log_send_and_compose_impl();
              os_log_type_t type = OS_LOG_TYPE_ERROR;
              char v288 = 0;
              if (type == OS_LOG_TYPE_FAULT)
              {
                v248 = (os_log_s *)__nwlog_obj();
                os_log_type_t v249 = type;
                if (os_log_type_enabled(v248, type))
                {
                  v250 = (_DWORD *)*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
                  *(_DWORD *)std::string buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                  *(_WORD *)&_BYTE buf[12] = 2082;
                  *(void *)&buf[14] = "count";
                  *(_WORD *)&_BYTE buf[22] = 2048;
                  uint64_t v292 = 1LL;
                  __int16 v293 = 2048;
                  v294 = v250;
                  v251 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_327:
                  _os_log_impl(&dword_181A5C000, v248, v249, v251, buf, 0x2Au);
                }
              }

              else if (v288)
              {
                v252 = (char *)__nw_create_backtrace_string();
                v248 = (os_log_s *)__nwlog_obj();
                os_log_type_t v249 = type;
                BOOL v253 = os_log_type_enabled(v248, type);
                if (v252)
                {
                  if (v253)
                  {
                    v254 = (_DWORD *)*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
                    *(_DWORD *)std::string buf = 136447234;
                    *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                    *(_WORD *)&_BYTE buf[12] = 2082;
                    *(void *)&buf[14] = "count";
                    *(_WORD *)&_BYTE buf[22] = 2048;
                    uint64_t v292 = 1LL;
                    __int16 v293 = 2048;
                    v294 = v254;
                    __int16 v295 = 2082;
                    v296 = v252;
                    _os_log_impl( &dword_181A5C000,  v248,  v249,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                  }

                  free(v252);
                  goto LABEL_328;
                }

                if (v253)
                {
                  v256 = (_DWORD *)*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
                  *(_DWORD *)std::string buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                  *(_WORD *)&_BYTE buf[12] = 2082;
                  *(void *)&buf[14] = "count";
                  *(_WORD *)&_BYTE buf[22] = 2048;
                  uint64_t v292 = 1LL;
                  __int16 v293 = 2048;
                  v294 = v256;
                  v251 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                  goto LABEL_327;
                }
              }

              else
              {
                v248 = (os_log_s *)__nwlog_obj();
                os_log_type_t v249 = type;
                if (os_log_type_enabled(v248, type))
                {
                  v255 = (_DWORD *)*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
                  *(_DWORD *)std::string buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                  *(_WORD *)&_BYTE buf[12] = 2082;
                  *(void *)&buf[14] = "count";
                  *(_WORD *)&_BYTE buf[22] = 2048;
                  uint64_t v292 = 1LL;
                  __int16 v293 = 2048;
                  v294 = v255;
                  v251 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                  goto LABEL_327;
                }
              }

                  goto LABEL_309;
                }

                        goto LABEL_309;
                      }

                      if (!(_BYTE)v231)
                      {
                        __nwlog_obj();
                        uint64_t v157 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                        os_log_type_t v182 = uu;
                        if (os_log_type_enabled(v157, (os_log_type_t)uu))
                        {
                          v183 = (const char *)*((void *)v89 + 2);
                          if (!v183) {
                            v183 = "invalid";
                          }
                          *(_DWORD *)std::string buf = 136446722;
                          *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                          *(_WORD *)&_BYTE buf[12] = 2082;
                          *(void *)&buf[14] = v183;
                          *(_WORD *)&_BYTE buf[22] = 2048;
                          uint64_t v239 = v89;
                          _os_log_impl( &dword_181A5C000,  v157,  v182,  "%{public}s protocol %{public}s (%p) has invalid connect callback, backtrace limit exceeded",  buf,  0x20u);
                        }

                        goto LABEL_308;
                      }

                      os_log_type_t v166 = (char *)__nw_create_backtrace_string();
                      __nwlog_obj();
                      uint64_t v157 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      os_log_type_t v167 = uu;
                      os_log_type_t v168 = os_log_type_enabled(v157, (os_log_type_t)uu);
                      if (!v166)
                      {
                        if (v168)
                        {
                          v184 = (const char *)*((void *)v89 + 2);
                          if (!v184) {
                            v184 = "invalid";
                          }
                          *(_DWORD *)std::string buf = 136446722;
                          *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                          *(_WORD *)&_BYTE buf[12] = 2082;
                          *(void *)&buf[14] = v184;
                          *(_WORD *)&_BYTE buf[22] = 2048;
                          uint64_t v239 = v89;
                          _os_log_impl( &dword_181A5C000,  v157,  v167,  "%{public}s protocol %{public}s (%p) has invalid connect callback, no backtrace",  buf,  0x20u);
                        }

                        goto LABEL_308;
                      }

                      if (v168)
                      {
                        BOOL v169 = (const char *)*((void *)v89 + 2);
                        if (!v169) {
                          BOOL v169 = "invalid";
                        }
                        *(_DWORD *)std::string buf = 136446978;
                        *(void *)&uint8_t buf[4] = "__nw_protocol_connect";
                        *(_WORD *)&_BYTE buf[12] = 2082;
                        *(void *)&buf[14] = v169;
                        *(_WORD *)&_BYTE buf[22] = 2048;
                        uint64_t v239 = v89;
                        v240 = 2082;
                        uint64_t v241 = v166;
                        _os_log_impl( &dword_181A5C000,  v157,  v167,  "%{public}s protocol %{public}s (%p) has invalid connect callback, dumping backtrace:%{public}s",  buf,  0x2Au);
                      }

                      free(v166);
                    }

                  os_log_type_t v14 = v143;
                  if (v106) {
                    free(v106);
                  }
                  goto LABEL_132;
                }

                uint64_t v21 = v16 >> 7;
                if ((v20 & 2) == 0)
                {
                  LOBYTE(v16) = v16 | 0x10;
                  v13[402] = v16;
                  uint64_t v20 = *((unsigned __int16 *)output_handler_context + 42);
                }

                uint64_t v141 = a2;
                if ((v20 & 0x800) != 0)
                {
                  uint64_t v17 = output_handler_context[19];
                  uint64_t v21 = 1;
                  if ((_DWORD)v18 == 1 && v17 < a3)
                  {
                    maximum_datagram_size_t size = nw_path_get_maximum_datagram_size(*((void **)v13 + 36));
                    uint64_t v23 = output_handler_context[20];
                    if (!v23)
                    {
                      maximum_message_size_t size = nw_protocol_instance_get_maximum_message_size(v14, 0LL);
                      uint64_t v23 = maximum_message_size - v17;
                      if (maximum_message_size <= v17) {
                        uint64_t v23 = output_handler_context[20];
                      }
                      else {
                        output_handler_context[20] = v23;
                      }
                    }

                    uint64_t v39 = v23 + v17;
                    int v40 = maximum_datagram_size - v23;
                    if (maximum_datagram_size > v39) {
                      uint64_t v17 = v40;
                    }
                    uint64_t v20 = *((unsigned __int16 *)output_handler_context + 42);
                    LOBYTE(v16) = v14[402];
                    uint64_t v21 = 1;
                  }
                }

                uint64_t v26 = (char *)(output_handler_context + 8);
                os_log_type_t v142 = (v20 >> 10) & 1;
                uint64_t v25 = v21 != 0;
                if ((v16 & 0x40) != 0)
                {
                  BOOL v27 = output_handler_context + 18;
                  uint64_t v41 = output_handler_context[18];
                  if (v41 < a3)
                  {
                    if ((v14[405] & 0x80000000) == 0 && gLogDatapath)
                    {
                      __nwlog_obj();
                      BOOL v135 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v135, OS_LOG_TYPE_DEBUG))
                      {
                        uint64_t v136 = *v27;
                        *(_DWORD *)std::string buf = 136447234;
                        os_log_type_t v151 = "nw_protocol_implementation_get_output_frames";
                        os_log_type_t v152 = 2082;
                        BOOL v153 = (nw_protocol_identifier *)(v143 + 407);
                        v154 = 2080;
                        BOOL v155 = (nw_protocol *)" ";
                        BOOL v156 = 1024;
                        *(_DWORD *)uint64_t v157 = a3;
                        *(_WORD *)&v157[4] = 1024;
                        *(_DWORD *)&v157[6] = v136;
                        _os_log_impl( &dword_181A5C000,  v135,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sFlow is flow controlled below %u bytes (limit %u bytes), returning 0 frames",  buf,  0x2Cu);
                      }

                      LOWORD(v20) = *((_WORD *)output_handler_context + 42);
                      os_log_type_t v14 = v143;
                    }

                    uint64_t v30 = 0LL;
                    *((_WORD *)output_handler_context + 42) = v20 | 0x80;
                    goto LABEL_137;
                  }

                  *((_WORD *)output_handler_context + 42) = v20 & 0xFF7F;
                  if (v41 >= a4) {
                    unsigned int v28 = a4;
                  }
                  else {
                    unsigned int v28 = v41;
                  }
                }

                else
                {
                  BOOL v27 = 0LL;
                  unsigned int v28 = a4;
                }

                a5 = v18;
              }

              else
              {
                uint64_t v141 = a2;
                os_log_type_t v142 = (v13[403] >> 1) & 1;
                uint64_t v25 = (v16 & 0x80u) != 0;
                if ((v16 & 0x40) != 0)
                {
                  BOOL v27 = v13 + 104;
                  uint64_t v29 = *((_DWORD *)v13 + 26);
                  if (v29 < a3)
                  {
                    if ((v13[405] & 0x80000000) == 0 && gLogDatapath)
                    {
                      __nwlog_obj();
                      BOOL v125 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v125, OS_LOG_TYPE_DEBUG))
                      {
                        os_log_type_t v126 = *((_DWORD *)v143 + 26);
                        *(_DWORD *)std::string buf = 136447234;
                        os_log_type_t v151 = "nw_protocol_implementation_get_output_frames";
                        os_log_type_t v152 = 2082;
                        BOOL v153 = (nw_protocol_identifier *)(v143 + 407);
                        v154 = 2080;
                        BOOL v155 = (nw_protocol *)" ";
                        BOOL v156 = 1024;
                        *(_DWORD *)uint64_t v157 = a3;
                        *(_WORD *)&v157[4] = 1024;
                        *(_DWORD *)&v157[6] = v126;
                        _os_log_impl( &dword_181A5C000,  v125,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sConnection is flow controlled below %u bytes (limit %u bytes), returning 0 frames",  buf,  0x2Cu);
                      }

                      os_log_type_t v14 = v143;
                    }

                    uint64_t v30 = 0LL;
                    v14[404] |= 0x80u;
                    goto LABEL_137;
                  }

                  uint64_t v26 = 0LL;
                  v13[404] &= ~0x80u;
                  if (v29 >= a4) {
                    unsigned int v28 = a4;
                  }
                  else {
                    unsigned int v28 = v29;
                  }
                }

                else
                {
                  uint64_t v26 = 0LL;
                  BOOL v27 = 0LL;
                  unsigned int v28 = a4;
                }
              }

              int v42 = *((void *)v14 + 10);
              id v43 = *((void *)v14 + 11);
              if (*((_OWORD *)v14 + 5) != 0LL)
              {
                uint64_t v44 = 0xFFFFFFFFLL - (v42 + v43);
                uint32_t v45 = v28 + v42 + v43;
                if (v44 >= v28) {
                  unsigned int v28 = v45;
                }
                else {
                  unsigned int v28 = -1;
                }
              }

              uint64_t v140 = v28;
              if (v25)
              {
                if (v17 + 1 >= 2) {
                  uint64_t v46 = v17;
                }
                else {
                  uint64_t v46 = 9216;
                }
                if (v28 >= v46) {
                  os_log_type_t v47 = v46;
                }
                else {
                  os_log_type_t v47 = v28;
                }
                if ((int)v47 * (int)a5 < a3)
                {
                  if ((v14[405] & 0x80000000) == 0)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    uint64_t v48 = (os_log_s *)(id)gLogObj;
                    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
                    {
                      uint64_t v49 = "s";
                      *(_DWORD *)std::string buf = 136448002;
                      os_log_type_t v151 = "nw_protocol_implementation_get_output_frames";
                      os_log_type_t v152 = 2082;
                      BOOL v153 = (nw_protocol_identifier *)(v14 + 407);
                      BOOL v155 = (nw_protocol *)" ";
                      v154 = 2080;
                      if ((_DWORD)a5 == 1) {
                        uint64_t v49 = "";
                      }
                      BOOL v156 = 1024;
                      *(_DWORD *)uint64_t v157 = v47;
                      *(_WORD *)&v157[4] = 1024;
                      *(_DWORD *)&v157[6] = a3;
                      os_log_type_t v158 = 1024;
                      int v159 = a4;
                      uint64_t v160 = 1024;
                      os_log_type_t v161 = a5;
                      BOOL v162 = 2080;
                      os_log_type_t v163 = v49;
                      _os_log_impl( &dword_181A5C000,  v48,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sCannot return %u/%u/%u bytes in %u datagram%s, returning 0 frames",  buf,  0x42u);
                    }

                    os_log_type_t v14 = v143;
                  }

                  if (v26) {
                    *((_WORD *)v26 + 26) |= 0x1000u;
                  }
                  else {
                    v14[403] |= 1u;
                  }
                  if (v141->handle == &nw_protocol_ref_counted_handle)
                  {
                    os_log_type_t v69 = v141[1].callbacks;
                    if (v69) {
                      v141[1].callbacks = (nw_protocol_callbacks *)((char *)&v69->add_input_handler + 1);
                    }
                    uint64_t v68 = -1;
                  }

                  else
                  {
                    uint64_t v68 = 0;
                  }

                  *(void *)os_log_type_t type = v141;
                  BOOL v149 = v68;
                  if (*((_UNKNOWN **)v14 - 7) == &nw_protocol_ref_counted_handle)
                  {
                    uint64_t v70 = *((void *)v14 - 1);
                    if (v70) {
                      *((void *)v14 - 1) = v70 + 1;
                    }
                    uint64_t v35 = -1;
                  }

                  else
                  {
                    uint64_t v35 = 0;
                  }

                  os_log_type_t v146 = v14 - 96;
                  BOOL v147 = v35;
                  __int16 v71 = v141->callbacks;
                  if (v71)
                  {
                    uint64_t v72 = (void (*)(nw_protocol *, char *, uint64_t))v71->error;
                    if (v72)
                    {
                      v72(v141, v14 - 96, 40LL);
                      goto LABEL_131;
                    }
                  }

                  __nwlog_obj();
                  os_log_type_t v110 = (void *)objc_claimAutoreleasedReturnValue();
                  name = v141->identifier->name;
                  *(_DWORD *)std::string buf = 136446722;
                  os_log_type_t v151 = "__nw_protocol_error";
                  if (!name) {
                    name = "invalid";
                  }
                  os_log_type_t v152 = 2082;
                  BOOL v153 = (nw_protocol_identifier *)name;
                  v154 = 2048;
                  BOOL v155 = v141;
                  os_log_type_t v106 = (char *)_os_log_send_and_compose_impl();

                  os_log_type_t v145 = OS_LOG_TYPE_ERROR;
                  os_log_type_t v144 = 0;
                  if (__nwlog_fault(v106, &v145, &v144))
                  {
                    if (v145 == OS_LOG_TYPE_FAULT)
                    {
                      __nwlog_obj();
                      char v107 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      __int16 v112 = v145;
                      if (os_log_type_enabled(v107, v145))
                      {
                        os_log_type_t v113 = v141->identifier->name;
                        if (!v113) {
                          os_log_type_t v113 = "invalid";
                        }
                        *(_DWORD *)std::string buf = 136446722;
                        os_log_type_t v151 = "__nw_protocol_error";
                        os_log_type_t v152 = 2082;
                        BOOL v153 = (nw_protocol_identifier *)v113;
                        v154 = 2048;
                        BOOL v155 = v141;
                        _os_log_impl( &dword_181A5C000,  v107,  v112,  "%{public}s protocol %{public}s (%p) has invalid error callback",  buf,  0x20u);
                      }

  free(v91);
  if (v85) {
LABEL_328:
  }
    free(v85);
}

      std::string v148 = *(void *)(*((void *)&uu + 1) + 24LL);
      if (v148)
      {
        BOOL v149 = v129;
        while (*v149)
        {
          ++v149;
          if (!--v148) {
            goto LABEL_319;
          }
        }

        if (v148 < 2)
        {
LABEL_318:
          *BOOL v149 = 0;
        }

        else
        {
          BOOL v150 = 0LL;
          os_log_type_t v151 = v148 - 1;
          while (1)
          {
            os_log_type_t v152 = v112[v150];
            v149[v150] = v152;
            if (!v152) {
              break;
            }
            if (v151 == ++v150)
            {
              v149 += v150;
              goto LABEL_318;
            }
          }
        }
      }

LABEL_289:
            if (v120) {
              free(v120);
            }
            **(_DWORD **)(a1 + 40) = 0;
            goto LABEL_292;
          }

          if (gLogDatapath)
          {
            v281 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v281, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)std::string buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
              *(_WORD *)&_BYTE buf[12] = 2048;
              *(void *)&buf[14] = v290;
              _os_log_impl( &dword_181A5C000,  v281,  OS_LOG_TYPE_DEBUG,  "%{public}s delivering frame %p that is part of handled message",  buf,  0x16u);
            }
          }

          BOOL v78 = v290;
          uint64_t v79 = v290 + 8;
          uint64_t v80 = *((void *)v290 + 4);
          uint64_t v81 = (void *)*((void *)v290 + 5);
          if (v80)
          {
            *(void *)(v80 + 40) = v81;
            uint64_t v81 = (void *)*((void *)v78 + 5);
          }

          else
          {
            *(void *)(*(void *)(a1 + 64) + 8LL) = v81;
          }

          *uint64_t v81 = v80;
          void *v79 = 0LL;
          v79[1] = 0LL;
          uint64_t v93 = *(void *)(a1 + 72);
          os_log_type_t v94 = v290;
          BOOL v95 = v290;
          *((void *)v290 + 4) = 0LL;
          BOOL v96 = *(void **)(v93 + 8);
          *((void *)v94 + 5) = v96;
          void *v96 = v94;
          *(void *)(v93 + _Block_object_dispose(va, 8) = v95 + 8;
          BOOL v97 = *(unsigned int **)(a1 + 80);
          BOOL v51 = *v97 >= v28;
          *v97 -= v28;
          if (!v51)
          {
            if (gLogDatapath)
            {
              v284 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v284, OS_LOG_TYPE_DEBUG))
              {
                v285 = (_DWORD *)**(unsigned int **)(a1 + 80);
                *(_DWORD *)std::string buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                *(_WORD *)&_BYTE buf[12] = 2082;
                *(void *)&buf[14] = "minimum_bytes";
                *(_WORD *)&_BYTE buf[22] = 2048;
                uint64_t v292 = v28;
                __int16 v293 = 2048;
                v294 = v285;
                _os_log_impl( &dword_181A5C000,  v284,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  buf,  0x2Au);
              }
            }

            **(_DWORD **)(a1 + 80) = 0;
          }

          uint64_t v98 = *(unsigned int **)(a1 + 56);
          BOOL v51 = *v98 >= v28;
          *v98 -= v28;
          if (!v51)
          {
            if (gLogDatapath)
            {
              v286 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v286, OS_LOG_TYPE_DEBUG))
              {
                v287 = (_DWORD *)**(unsigned int **)(a1 + 56);
                *(_DWORD *)std::string buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                *(_WORD *)&_BYTE buf[12] = 2082;
                *(void *)&buf[14] = "maximum_bytes";
                *(_WORD *)&_BYTE buf[22] = 2048;
                uint64_t v292 = v28;
                __int16 v293 = 2048;
                v294 = v287;
                _os_log_impl( &dword_181A5C000,  v286,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  buf,  0x2Au);
              }
            }

            **(_DWORD **)(a1 + 56) = 0;
          }

          uint64_t v99 = *(_DWORD **)(a1 + 40);
          if ((*v99)--) {
            goto LABEL_241;
          }
          __nwlog_obj();
          uint64_t v101 = (_DWORD *)**(unsigned int **)(a1 + 40);
          *(_DWORD *)std::string buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = "maximum_frame_count";
          *(_WORD *)&_BYTE buf[22] = 2048;
          uint64_t v292 = 1LL;
          __int16 v293 = 2048;
          v294 = v101;
          BOOL v102 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v288 = 0;
          if (type == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v103 = (os_log_s *)__nwlog_obj();
            os_log_type_t v104 = type;
            if (!os_log_type_enabled(v103, type)) {
              goto LABEL_238;
            }
            int v105 = (_DWORD *)**(unsigned int **)(a1 + 40);
            *(_DWORD *)std::string buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = "maximum_frame_count";
            *(_WORD *)&_BYTE buf[22] = 2048;
            uint64_t v292 = 1LL;
            __int16 v293 = 2048;
            v294 = v105;
            os_log_type_t v106 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_237:
            _os_log_impl(&dword_181A5C000, v103, v104, v106, buf, 0x2Au);
            goto LABEL_238;
          }

          if (!v288)
          {
            os_log_type_t v103 = (os_log_s *)__nwlog_obj();
            os_log_type_t v104 = type;
            if (!os_log_type_enabled(v103, type)) {
              goto LABEL_238;
            }
            v193 = (_DWORD *)**(unsigned int **)(a1 + 40);
            *(_DWORD *)std::string buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = "maximum_frame_count";
            *(_WORD *)&_BYTE buf[22] = 2048;
            uint64_t v292 = 1LL;
            __int16 v293 = 2048;
            v294 = v193;
            os_log_type_t v106 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
            goto LABEL_237;
          }

          v154 = (char *)__nw_create_backtrace_string();
          os_log_type_t v103 = (os_log_s *)__nwlog_obj();
          os_log_type_t v104 = type;
          BOOL v155 = os_log_type_enabled(v103, type);
          if (!v154)
          {
            if (!v155) {
              goto LABEL_238;
            }
            v194 = (_DWORD *)**(unsigned int **)(a1 + 40);
            *(_DWORD *)std::string buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = "maximum_frame_count";
            *(_WORD *)&_BYTE buf[22] = 2048;
            uint64_t v292 = 1LL;
            __int16 v293 = 2048;
            v294 = v194;
            os_log_type_t v106 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
            goto LABEL_237;
          }

          if (v155)
          {
            BOOL v156 = (_DWORD *)**(unsigned int **)(a1 + 40);
            *(_DWORD *)std::string buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = "maximum_frame_count";
            *(_WORD *)&_BYTE buf[22] = 2048;
            uint64_t v292 = 1LL;
            __int16 v293 = 2048;
            v294 = v156;
            __int16 v295 = 2082;
            v296 = v154;
            _os_log_impl( &dword_181A5C000,  v103,  v104,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v154);
LABEL_238:
          if (v102) {
            free(v102);
          }
          **(_DWORD **)(a1 + 40) = 0;
LABEL_241:
          v195 = *(_DWORD **)(a1 + 88);
          BOOL v51 = __CFADD__(*v195, v28);
          *v195 += v28;
          if (!v51) {
            goto LABEL_260;
          }
          __nwlog_obj();
          uint64_t v196 = v28;
          v197 = (_DWORD *)**(unsigned int **)(a1 + 88);
          *(_DWORD *)std::string buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = "moved_bytes";
          *(_WORD *)&_BYTE buf[22] = 2048;
          uint64_t v292 = v28;
          __int16 v293 = 2048;
          v294 = v197;
          v198 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v288 = 0;
          if (type == OS_LOG_TYPE_FAULT)
          {
            v199 = (os_log_s *)__nwlog_obj();
            os_log_type_t v200 = type;
            if (!os_log_type_enabled(v199, type)) {
              goto LABEL_257;
            }
            v201 = (_DWORD *)**(unsigned int **)(a1 + 88);
            *(_DWORD *)std::string buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = "moved_bytes";
            *(_WORD *)&_BYTE buf[22] = 2048;
            uint64_t v292 = v196;
            __int16 v293 = 2048;
            v294 = v201;
            v202 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_256:
            _os_log_impl(&dword_181A5C000, v199, v200, v202, buf, 0x2Au);
            goto LABEL_257;
          }

          if (!v288)
          {
            v199 = (os_log_s *)__nwlog_obj();
            os_log_type_t v200 = type;
            if (!os_log_type_enabled(v199, type)) {
              goto LABEL_257;
            }
            v206 = (_DWORD *)**(unsigned int **)(a1 + 88);
            *(_DWORD *)std::string buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = "moved_bytes";
            *(_WORD *)&_BYTE buf[22] = 2048;
            uint64_t v292 = v196;
            __int16 v293 = 2048;
            v294 = v206;
            v202 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
            goto LABEL_256;
          }

          v203 = (char *)__nw_create_backtrace_string();
          v199 = (os_log_s *)__nwlog_obj();
          os_log_type_t v200 = type;
          BOOL v204 = os_log_type_enabled(v199, type);
          if (!v203)
          {
            if (!v204) {
              goto LABEL_257;
            }
            v207 = (_DWORD *)**(unsigned int **)(a1 + 88);
            *(_DWORD *)std::string buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = "moved_bytes";
            *(_WORD *)&_BYTE buf[22] = 2048;
            uint64_t v292 = v196;
            __int16 v293 = 2048;
            v294 = v207;
            v202 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
            goto LABEL_256;
          }

          if (v204)
          {
            v205 = (_DWORD *)**(unsigned int **)(a1 + 88);
            *(_DWORD *)std::string buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = "moved_bytes";
            *(_WORD *)&_BYTE buf[22] = 2048;
            uint64_t v292 = v196;
            __int16 v293 = 2048;
            v294 = v205;
            __int16 v295 = 2082;
            v296 = v203;
            _os_log_impl( &dword_181A5C000,  v199,  v200,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v203);
LABEL_257:
          if (v198) {
            free(v198);
          }
          **(_DWORD **)(a1 + 8_Block_object_dispose(va, 8) = -1;
LABEL_260:
          uint64_t v208 = *(void *)(*(void *)(a1 + 32) + 8LL);
          uint64_t v209 = *(unsigned int *)(v208 + 24) + 1LL;
          uint64_t v210 = v209 << 31 >> 31;
          *(_DWORD *)(v208 + 24) = v209;
          if (v210 == v209 && (v210 & 0x8000000000000000LL) == 0) {
            goto LABEL_279;
          }
          __nwlog_obj();
          v211 = (_DWORD *)*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
          *(_DWORD *)std::string buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = "count";
          *(_WORD *)&_BYTE buf[22] = 2048;
          uint64_t v292 = 1LL;
          __int16 v293 = 2048;
          v294 = v211;
          v212 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v288 = 0;
          if (type == OS_LOG_TYPE_FAULT)
          {
            v213 = (os_log_s *)__nwlog_obj();
            os_log_type_t v214 = type;
            if (!os_log_type_enabled(v213, type)) {
              goto LABEL_276;
            }
            v215 = (_DWORD *)*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
            *(_DWORD *)std::string buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = "count";
            *(_WORD *)&_BYTE buf[22] = 2048;
            uint64_t v292 = 1LL;
            __int16 v293 = 2048;
            v294 = v215;
            v216 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_275:
            _os_log_impl(&dword_181A5C000, v213, v214, v216, buf, 0x2Au);
            goto LABEL_276;
          }

          if (!v288)
          {
            v213 = (os_log_s *)__nwlog_obj();
            os_log_type_t v214 = type;
            if (!os_log_type_enabled(v213, type)) {
              goto LABEL_276;
            }
            v220 = (_DWORD *)*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
            *(_DWORD *)std::string buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = "count";
            *(_WORD *)&_BYTE buf[22] = 2048;
            uint64_t v292 = 1LL;
            __int16 v293 = 2048;
            v294 = v220;
            v216 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
            goto LABEL_275;
          }

          v217 = (char *)__nw_create_backtrace_string();
          v213 = (os_log_s *)__nwlog_obj();
          os_log_type_t v214 = type;
          BOOL v218 = os_log_type_enabled(v213, type);
          if (!v217)
          {
            if (!v218) {
              goto LABEL_276;
            }
            v221 = (_DWORD *)*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
            *(_DWORD *)std::string buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = "count";
            *(_WORD *)&_BYTE buf[22] = 2048;
            uint64_t v292 = 1LL;
            __int16 v293 = 2048;
            v294 = v221;
            v216 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
            goto LABEL_275;
          }

          if (v218)
          {
            v219 = (_DWORD *)*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
            *(_DWORD *)std::string buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = "count";
            *(_WORD *)&_BYTE buf[22] = 2048;
            uint64_t v292 = 1LL;
            __int16 v293 = 2048;
            v294 = v219;
            __int16 v295 = 2082;
            v296 = v217;
            _os_log_impl( &dword_181A5C000,  v213,  v214,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v217);
LABEL_276:
          if (v212) {
            free(v212);
          }
          *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = -1;
LABEL_279:
          **(_DWORD **)(a1 + 80) = 0;
          BOOL v11 = 1LL;
          break;
        case 2:
          break;
        case 3:
          int is_metadata_complete = nw_frame_is_metadata_complete((uint64_t)v290);
          if (gLogDatapath)
          {
            v280 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v280, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)std::string buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
              *(_WORD *)&_BYTE buf[12] = 2048;
              *(void *)&buf[14] = v290;
              _os_log_impl( &dword_181A5C000,  v280,  OS_LOG_TYPE_DEBUG,  "%{public}s discarding frame %p that is part of handled message",  buf,  0x16u);
            }
          }

          BOOL v34 = v290;
          uint64_t v35 = v290 + 8;
          uint64_t v36 = *((void *)v290 + 4);
          size_t v37 = (void *)*((void *)v290 + 5);
          if (v36)
          {
            *(void *)(v36 + 40) = v37;
            size_t v37 = (void *)*((void *)v34 + 5);
          }

          else
          {
            *(void *)(*(void *)(a1 + 64) + 8LL) = v37;
          }

          *size_t v37 = v36;
          *uint64_t v35 = 0LL;
          v35[1] = 0LL;
          nw_frame_finalize((uint64_t)v290);
          if (is_metadata_complete)
          {
            int v87 = *(void (**)(void))(*(void *)(a1 + 48) + 120LL);
            if (v87) {
              v87(*(void *)(a1 + 96));
            }
          }

          goto LABEL_281;
        default:
          goto LABEL_45;
      }

          goto LABEL_290;
        }

        if (!v176)
        {
          __nwlog_obj();
          os_log_type_t v106 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v139 = v177;
          if (os_log_type_enabled(v106, v177))
          {
            *(_DWORD *)std::string buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_content_context_set_connection";
            _os_log_impl( &dword_181A5C000,  v106,  v139,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_289;
        }

        os_log_type_t v122 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v106 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v151 = v177;
        os_log_type_t v124 = os_log_type_enabled(v106, v177);
        if (!v122)
        {
          if (v124)
          {
            *(_DWORD *)std::string buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_content_context_set_connection";
            _os_log_impl( &dword_181A5C000,  v106,  v151,  "%{public}s called with null connection, no backtrace",  buf,  0xCu);
          }

          goto LABEL_289;
        }

        if (v124)
        {
          *(_DWORD *)std::string buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_content_context_set_connection";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v122;
          _os_log_impl( &dword_181A5C000,  v106,  v151,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }
      }

      else
      {
        __nwlog_obj();
        int v105 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_content_context_set_connection";
        os_log_type_t v152 = (void *)_os_log_send_and_compose_impl();

        uint64_t v177 = OS_LOG_TYPE_ERROR;
        uint64_t v176 = 0;
        if (v177 == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v106 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          char v107 = v177;
          if (os_log_type_enabled(v106, v177))
          {
            *(_DWORD *)std::string buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_content_context_set_connection";
            _os_log_impl(&dword_181A5C000, v106, v107, "%{public}s called with null context", buf, 0xCu);
          }

          goto LABEL_289;
        }

        if (!v176)
        {
          __nwlog_obj();
          os_log_type_t v106 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v138 = v177;
          if (os_log_type_enabled(v106, v177))
          {
            *(_DWORD *)std::string buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_content_context_set_connection";
            _os_log_impl( &dword_181A5C000,  v106,  v138,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_289;
        }

        os_log_type_t v122 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v106 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v150 = v177;
        int v123 = os_log_type_enabled(v106, v177);
        if (!v122)
        {
          if (v123)
          {
            *(_DWORD *)std::string buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_content_context_set_connection";
            _os_log_impl(&dword_181A5C000, v106, v150, "%{public}s called with null context, no backtrace", buf, 0xCu);
          }

          goto LABEL_289;
        }

        if (v123)
        {
          *(_DWORD *)std::string buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_content_context_set_connection";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v122;
          _os_log_impl( &dword_181A5C000,  v106,  v150,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }
      }

      free(v122);
      goto LABEL_290;
    }

    if (!logging_disabled)
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
      }
      BOOL v78 = (os_log_s *)(id)gconnection_groupLogObj;
      if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v79 = *(_DWORD *)(*(void *)(a1 + 32) + 168LL);
        uint64_t v80 = dispatch_data_get_size(data);
        *(_DWORD *)std::string buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_connection_group_read_on_connection_block_invoke";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v79;
        *(_WORD *)&buf[18] = 2048;
        *(void *)&buf[20] = v80;
        _os_log_impl( &dword_181A5C000,  v78,  OS_LOG_TYPE_DEFAULT,  "%{public}s [G%u] oversized message is %zu bytes and not yet complete, rejecting as error",  buf,  0x1Cu);
      }
    }

    if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 56LL)))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
      }
      uint64_t v81 = (os_log_s *)(id)gconnection_groupLogObj;
      if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
      {
        uint64_t v82 = *(void *)(a1 + 40);
        BOOL v83 = *(_DWORD *)(*(void *)(a1 + 32) + 168LL);
        *(_DWORD *)std::string buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_connection_group_read_on_connection_block_invoke";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v83;
        *(_WORD *)&buf[18] = 2112;
        *(void *)&buf[20] = v82;
        _os_log_impl( &dword_181A5C000,  v81,  OS_LOG_TYPE_INFO,  "%{public}s [G%u] failing connection %@ due to oversized message",  buf,  0x1Cu);
      }
    }

    uint64_t v84 = *(void **)(a1 + 40);
    uint64_t v23 = *(id *)(a1 + 32);
    BOOL v85 = v84;
    uint64_t v25 = v85;
    if (v23)
    {
      if (v85)
      {
        if (!nw_parameters_get_logging_disabled(*((void *)v23 + 7)))
        {
          if (__nwlog_connection_group_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
          }
          int v86 = (os_log_s *)(id)gconnection_groupLogObj;
          if (os_log_type_enabled(v86, OS_LOG_TYPE_INFO))
          {
            int v87 = *((_DWORD *)v23 + 42);
            *(_DWORD *)std::string buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = v87;
            *(_WORD *)&buf[18] = 2112;
            *(void *)&buf[20] = v25;
            _os_log_impl( &dword_181A5C000,  v86,  OS_LOG_TYPE_INFO,  "%{public}s [G%u] cancelling connection %@",  buf,  0x1Cu);
          }
        }

        nw_connection_cancel(v25);
        if (!nw_parameters_get_logging_disabled(*((void *)v23 + 7)))
        {
          if (__nwlog_connection_group_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
          }
          int v88 = (os_log_s *)(id)gconnection_groupLogObj;
          if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
          {
            BOOL v89 = *((_DWORD *)v23 + 42);
            *(_DWORD *)std::string buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = v89;
            *(_WORD *)&buf[18] = 2112;
            *(void *)&buf[20] = v25;
            _os_log_impl(&dword_181A5C000, v88, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] cancelled %@", buf, 0x1Cu);
          }
        }

        goto LABEL_32;
      }

      __nwlog_obj();
      BOOL v128 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
      uint64_t v35 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v164) = 0;
      if (__nwlog_fault(v35, type, &v164))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v126 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v129 = type[0];
          if (os_log_type_enabled(v126, type[0]))
          {
            *(_DWORD *)std::string buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
            _os_log_impl(&dword_181A5C000, v126, v129, "%{public}s called with null connection", buf, 0xCu);
          }
        }

        else if ((_BYTE)v164)
        {
          BOOL v143 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v126 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v144 = type[0];
          os_log_type_t v145 = os_log_type_enabled(v126, type[0]);
          if (v143)
          {
            if (v145)
            {
              *(_DWORD *)std::string buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
              *(_WORD *)&_BYTE buf[12] = 2082;
              *(void *)&buf[14] = v143;
              _os_log_impl( &dword_181A5C000,  v126,  v144,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v143);
            if (!v35) {
              goto LABEL_32;
            }
            goto LABEL_234;
          }

          if (v145)
          {
            *(_DWORD *)std::string buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
            _os_log_impl( &dword_181A5C000,  v126,  v144,  "%{public}s called with null connection, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          os_log_type_t v126 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v149 = type[0];
          if (os_log_type_enabled(v126, type[0]))
          {
            *(_DWORD *)std::string buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_connection_group_cancel_and_remove_connection";
            _os_log_impl( &dword_181A5C000,  v126,  v149,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
          }
        }

        goto LABEL_311;
      }

      if (v134)
      {
        os_log_type_t v142 = (os_log_s *)__nwlog_obj();
        os_log_type_enabled(v142, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v205 = 136446210;
        *(void *)&v205[4] = "_strict_strlcpy";
        BOOL v143 = (void *)_os_log_send_and_compose_impl();
        BOOL result = __nwlog_abort((uint64_t)v143);
        if ((_DWORD)result) {
          goto LABEL_429;
        }
        free(v143);
      }

LABEL_282:
      os_release(v5);
      return v11;
    }

    if (gLogDatapath)
    {
      v270 = (os_log_s *)__nwlog_obj();
      BOOL v271 = os_log_type_enabled(v270, OS_LOG_TYPE_DEBUG);
      int v6 = *(unsigned __int8 *)(a1 + 120);
      if (v271)
      {
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
        *(_DWORD *)std::string buf = 136446722;
        if (v6) {
          v272 = "input";
        }
        else {
          v272 = "output";
        }
        *(_WORD *)&_BYTE buf[12] = 2048;
        *(void *)&buf[14] = v290;
        *(_WORD *)&_BYTE buf[22] = 2080;
        uint64_t v292 = (uint64_t)v272;
        _os_log_impl( &dword_181A5C000,  v270,  OS_LOG_TYPE_DEBUG,  "%{public}s frame %p begins a %s new message",  buf,  0x20u);
        int v6 = *(unsigned __int8 *)(a1 + 120);
      }
    }

    uint64_t v21 = *(void *)(a1 + 48);
    if (v6)
    {
      char v22 = *(_BYTE *)(v21 + 56);
      if ((v22 & 1) != 0)
      {
        uint64_t v23 = *(void **)(v21 + 48);
        if (v23)
        {
          os_release(v23);
          char v22 = *(_BYTE *)(v21 + 56);
        }
      }

      *(void *)(v21 + 4_Block_object_dispose(va, 8) = v5;
      *(_BYTE *)(v21 + 56) = v22 | 1;
      *(_BYTE *)(*(void *)(a1 + 48) + 140LL) = 0;
    }

    else
    {
      char v38 = *(_BYTE *)(v21 + 72);
      if ((v38 & 1) != 0)
      {
        uint64_t v39 = *(void **)(v21 + 64);
        if (v39)
        {
          os_release(v39);
          char v38 = *(_BYTE *)(v21 + 72);
        }
      }

      *(void *)(v21 + 64) = v5;
      *(_BYTE *)(v21 + 72) = v38 | 1;
      *(_BYTE *)(*(void *)(a1 + 48) + 141LL) = 0;
    }

    uint64_t v5 = 0LL;
LABEL_45:
    if (nw_frame_unclaimed_length(v290))
    {
      int v40 = 0;
      if (!gLogDatapath) {
        goto LABEL_49;
      }
    }

    else
    {
      int v40 = nw_frame_is_metadata_complete((uint64_t)v290);
      if (!gLogDatapath) {
        goto LABEL_49;
      }
    }

    v265 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v265, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v266 = *(void *)(a1 + 96);
      v267 = "invalid";
      if (v266)
      {
        v268 = *(const char **)(v266 + 16);
        if (v268) {
          v267 = v268;
        }
      }

      v269 = "input";
      if (!*(_BYTE *)(a1 + 120)) {
        v269 = "output";
      }
      *(_DWORD *)std::string buf = 136447234;
      *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
      *(_WORD *)&_BYTE buf[12] = 2080;
      *(void *)&buf[14] = v267;
      *(_WORD *)&_BYTE buf[22] = 2080;
      uint64_t v292 = (uint64_t)v269;
      __int16 v293 = 2048;
      v294 = v290;
      __int16 v295 = 1024;
      LODWORD(v296) = v40;
      _os_log_impl( &dword_181A5C000,  v265,  OS_LOG_TYPE_DEBUG,  "%{public}s calling %s processor with %s frame %p metadata_only %{BOOL}d",  buf,  0x30u);
    }

  if (v78) {
    free(v78);
  }
LABEL_39:
  if (v19 == &nw_protocol_ref_counted_handle && a1->handle == &nw_protocol_ref_counted_handle)
  {
    uint64_t v59 = a1[1].callbacks;
    if (v59)
    {
      uint64_t v60 = (nw_protocol_callbacks *)((char *)v59 - 1);
      a1[1].callbacks = v60;
      if (!v60)
      {
        uint64_t v61 = *(void (***)(void))a1[1].flow_id;
        if (v61)
        {
          *(void *)a1[1].flow_id = 0LL;
          v61[2](v61);
          _Block_release(v61);
        }

        if ((a1[1].flow_id[8] & 1) != 0)
        {
          uint64_t v62 = *(const void **)a1[1].flow_id;
          if (v62) {
            _Block_release(v62);
          }
        }

        free(a1);
      }
    }
  }

  if (v17 == &nw_protocol_ref_counted_handle && v16->handle == &nw_protocol_ref_counted_handle)
  {
    uint64_t v23 = v16[1].callbacks;
    if (v23)
    {
      int v24 = (nw_protocol_callbacks *)((char *)v23 - 1);
      v16[1].callbacks = v24;
      if (!v24)
      {
        uint64_t v25 = *(void (***)(void))v16[1].flow_id;
        if (v25)
        {
          *(void *)v16[1].flow_id = 0LL;
          v25[2](v25);
          _Block_release(v25);
        }

        if ((v16[1].flow_id[8] & 1) != 0)
        {
          uint64_t v26 = *(const void **)v16[1].flow_id;
          if (v26) {
            _Block_release(v26);
          }
        }

        BOOL v27 = v16;
        goto LABEL_121;
      }
    }
  }

          if (v136) {
            free(v136);
          }
          goto LABEL_284;
        }

        os_log_type_t v73 = *(void **)(a3 + 24);
        if (nw_protocol_udp_identifier::onceToken != -1) {
          dispatch_once(&nw_protocol_udp_identifier::onceToken, &__block_literal_global_24);
        }
        os_log_type_t v74 = (__int128 *)&nw_protocol_udp_identifier::identifier;
        os_log_type_t v75 = 4;
      }

      uint64_t v76 = nw_channel_get_stats_region(*(void *)(a3 + 48), v75);
      nw_path_flow_registration_set_stats_region(v73, 3, v74, v76);
      goto LABEL_87;
    }

    __nwlog_obj();
    uint64_t v114 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
    char v107 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v223) = 0;
    if (__nwlog_fault(v107, type, &v223))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v108 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v115 = type[0];
        if (os_log_type_enabled(v108, type[0]))
        {
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_instance_bring_up_channel";
          _os_log_impl(&dword_181A5C000, v108, v115, "%{public}s called with null new_path", buf, 0xCu);
        }

            if (v194) {
              free(v194);
            }
            LODWORD(v190) = -1;
            *(_DWORD *)(v580 + 360) = -1;
            int v87 = v579;
            uint64_t v68 = &qword_18C45F000;
LABEL_285:
            *((_DWORD *)v41 + 215) = v190;
            if ((*((_BYTE *)v41 + 158) & 1) == 0)
            {
              if (*((_BYTE *)v68 + 1537))
              {
                v459 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v459, OS_LOG_TYPE_DEBUG))
                {
                  v460 = *((void *)v41 + 61);
                  v461 = *(_DWORD *)(*((void *)v41 + 60) + 372LL);
                  v462 = *((_DWORD *)v41 + 215);
                  if (v460) {
                    LODWORD(v460) = *(_DWORD *)(v460 + 424);
                  }
                  v463 = *(_DWORD *)(v580 + 336);
                  *(_DWORD *)std::string buf = 136448002;
                  *(void *)&uint8_t buf[4] = "nw_http1_add_connection_for_output_handler";
                  *(_WORD *)&_BYTE buf[12] = 2082;
                  *(void *)&buf[14] = (char *)v41 + 74;
                  *(_WORD *)&_BYTE buf[22] = 2080;
                  v608 = (uint64_t)" ";
                  *(_WORD *)v609 = 1024;
                  *(_DWORD *)&v609[2] = v461;
                  *(_WORD *)&v609[6] = 1024;
                  *(_DWORD *)&v609[8] = v462;
                  *(_WORD *)&v609[12] = 1024;
                  *(_DWORD *)&v609[14] = v460;
                  *(_WORD *)&v609[18] = 2048;
                  *(void *)&v609[20] = v41;
                  *(_WORD *)&v609[28] = 1024;
                  *(_DWORD *)&v609[30] = v463;
                  _os_log_impl( &dword_181A5C000,  v459,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> added connection %p, now have %u connections",  buf,  0x42u);
                  int v87 = v579;
                }
              }
            }

            if (*(void *)(v87 + 248))
            {
              if (*((void *)v41 + 61))
              {
                __nwlog_obj();
                v205 = *((void *)v41 + 61);
                *(_DWORD *)std::string buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                *(_WORD *)&_BYTE buf[12] = 2048;
                *(void *)&buf[14] = v41;
                *(_WORD *)&_BYTE buf[22] = 2048;
                v608 = v205;
                v206 = (char *)_os_log_send_and_compose_impl();
                type[0] = OS_LOG_TYPE_ERROR;
                LOBYTE(aBlock) = 0;
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  v207 = (os_log_s *)__nwlog_obj();
                  uint64_t v208 = type[0];
                  if (!os_log_type_enabled(v207, type[0])) {
                    goto LABEL_314;
                  }
                  uint64_t v209 = *((void *)v41 + 61);
                  *(_DWORD *)std::string buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&_BYTE buf[12] = 2048;
                  *(void *)&buf[14] = v41;
                  *(_WORD *)&_BYTE buf[22] = 2048;
                  v608 = v209;
                  uint64_t v210 = "%{public}s Connection %p already has a stream (%p)";
                }

                else if ((_BYTE)aBlock)
                {
                  v223 = v38;
                  v224 = (char *)__nw_create_backtrace_string();
                  v207 = (os_log_s *)__nwlog_obj();
                  uint64_t v208 = type[0];
                  v225 = os_log_type_enabled(v207, type[0]);
                  if (v224)
                  {
                    if (v225)
                    {
                      int v226 = *((void *)v41 + 61);
                      *(_DWORD *)std::string buf = 136446978;
                      *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                      *(_WORD *)&_BYTE buf[12] = 2048;
                      *(void *)&buf[14] = v41;
                      *(_WORD *)&_BYTE buf[22] = 2048;
                      v608 = v226;
                      *(_WORD *)v609 = 2082;
                      *(void *)&v609[2] = v224;
                      _os_log_impl( &dword_181A5C000,  v207,  v208,  "%{public}s Connection %p already has a stream (%p), dumping backtrace:%{public}s",  buf,  0x2Au);
                    }

                    free(v224);
                    char v38 = v223;
                    goto LABEL_314;
                  }

                  char v38 = v223;
                  if (!v225)
                  {
LABEL_314:
                    if (v206) {
                      free(v206);
                    }
                    goto LABEL_316;
                  }

                  v228 = *((void *)v41 + 61);
                  *(_DWORD *)std::string buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&_BYTE buf[12] = 2048;
                  *(void *)&buf[14] = v41;
                  *(_WORD *)&_BYTE buf[22] = 2048;
                  v608 = v228;
                  uint64_t v210 = "%{public}s Connection %p already has a stream (%p), no backtrace";
                }

                else
                {
                  v207 = (os_log_s *)__nwlog_obj();
                  uint64_t v208 = type[0];
                  if (!os_log_type_enabled(v207, type[0])) {
                    goto LABEL_314;
                  }
                  uint64_t v227 = *((void *)v41 + 61);
                  *(_DWORD *)std::string buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
                  *(_WORD *)&_BYTE buf[12] = 2048;
                  *(void *)&buf[14] = v41;
                  *(_WORD *)&_BYTE buf[22] = 2048;
                  v608 = v227;
                  uint64_t v210 = "%{public}s Connection %p already has a stream (%p), backtrace limit exceeded";
                }

                _os_log_impl(&dword_181A5C000, v207, v208, v210, buf, 0x20u);
                goto LABEL_314;
              }

              *(void *)(v87 + 256) = v41;
              *((void *)v41 + 61) = v87;
              nw_protocol_set_output_handler(v87, *((void *)v41 + 4));
              nw_protocol_set_input_handler((uint64_t)v41, *(void *)(v87 + 48));
              *(_OWORD *)int v87 = *v41;
              v211 = v578[5];
              v213 = v578[2];
              v212 = v578[3];
              v41[8] = v578[4];
              v41[9] = v211;
              v41[6] = v213;
              v41[7] = v212;
              os_log_type_t v214 = v578[1];
              v41[4] = *v578;
              void v41[5] = v214;
              nw_http_transaction_metadata_set_connection_metadata(*(void **)(v87 + 352), *((void **)v41 + 96));
              *((_WORD *)v41 + 436) &= 0xFFD7u;
              *((_DWORD *)v41 + 216) = 1;
              if ((*((_BYTE *)v41 + 158) & 1) == 0)
              {
                v215 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v215, OS_LOG_TYPE_DEBUG))
                {
                  v216 = *((void *)v41 + 61);
                  v217 = *(_DWORD *)(*((void *)v41 + 60) + 372LL);
                  BOOL v218 = *((_DWORD *)v41 + 215);
                  if (v216) {
                    LODWORD(v216) = *(_DWORD *)(v216 + 424);
                  }
                  *(_DWORD *)std::string buf = 136447490;
                  *(void *)&uint8_t buf[4] = "nw_http1_update_connection_input_state";
                  *(_WORD *)&_BYTE buf[12] = 2082;
                  *(void *)&buf[14] = (char *)v41 + 74;
                  *(_WORD *)&_BYTE buf[22] = 2080;
                  v608 = (uint64_t)" ";
                  *(_WORD *)v609 = 1024;
                  *(_DWORD *)&v609[2] = v217;
                  *(_WORD *)&v609[6] = 1024;
                  *(_DWORD *)&v609[8] = v218;
                  *(_WORD *)&v609[12] = 1024;
                  *(_DWORD *)&v609[14] = v216;
                  _os_log_impl( &dword_181A5C000,  v215,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> connection input state: reading",  buf,  0x32u);
                }
              }

              if ((*(_BYTE *)(v87 + 158) & 1) != 0
                || (v219 = (os_log_s *)__nwlog_obj(), !os_log_type_enabled(v219, OS_LOG_TYPE_INFO)))
              {
LABEL_316:
                if ((*(_BYTE *)(v87 + 158) & 1) != 0) {
                  goto LABEL_321;
                }
                goto LABEL_317;
              }

              v220 = *(void *)(v87 + 256);
              v221 = *(_DWORD *)(*(void *)(v87 + 248) + 372LL);
              if (v220) {
                LODWORD(v220) = *(_DWORD *)(v220 + 860);
              }
              v222 = *(_DWORD *)(v87 + 424);
              *(_DWORD *)std::string buf = 136448002;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_associate_with_connection";
              *(_WORD *)&_BYTE buf[12] = 2082;
              *(void *)&buf[14] = v87 + 74;
              *(_WORD *)&_BYTE buf[22] = 2080;
              v608 = (uint64_t)" ";
              *(_WORD *)v609 = 1024;
              *(_DWORD *)&v609[2] = v221;
              *(_WORD *)&v609[6] = 1024;
              *(_DWORD *)&v609[8] = v220;
              *(_WORD *)&v609[12] = 1024;
              *(_DWORD *)&v609[14] = v222;
              *(_WORD *)&v609[18] = 2048;
              *(void *)&v609[20] = v87;
              *(_WORD *)&v609[28] = 2048;
              *(void *)&v609[30] = v41;
              _os_log_impl( &dword_181A5C000,  v219,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) now using connection %p",  buf,  0x46u);
              if ((*(_BYTE *)(v87 + 158) & 1) != 0)
              {
LABEL_321:
                nw_http_transaction_metadata_set_first_on_connection(*(void **)(v87 + 352));
                v233 = nw_protocol_copy_info((uint64_t)v38, 255);
                v234 = (void *)v233;
                if (v233
                  && (v235 = *(void *)(v233 + 24), *(void *)(v233 + 16) != v235)
                  && (BOOL v236 = *(void **)(v235 - 8)) != 0LL)
                {
                  uint64_t v237 = (nw_protocol_metadata *)os_retain(v236);
                  v238 = v237;
                  if (v237 && nw_protocol_metadata_is_tls(v237))
                  {
                    v238 = v238;
                    nw_http_connection_metadata_set_sec_metadata(*((void **)v41 + 96), v238);
                    os_release(v238);
                    nw_protocol_connect((uint64_t)v38, (uint64_t)v41);
                    goto LABEL_330;
                  }
                }

                else
                {
                  v238 = 0LL;
                }

                if (v41)
                {
                  nw_protocol_connect((uint64_t)v38, (uint64_t)v41);
                  if (!v238) {
                    goto LABEL_331;
                  }
                  goto LABEL_330;
                }

                v423 = (uint64_t)v38;
                __nwlog_obj();
                *(_DWORD *)std::string buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                v424 = (char *)_os_log_send_and_compose_impl();
                type[0] = OS_LOG_TYPE_ERROR;
                LOBYTE(aBlock) = 0;
                if (__nwlog_fault(v424, type, &aBlock))
                {
                  if (type[0] == OS_LOG_TYPE_FAULT)
                  {
                    v425 = (os_log_s *)__nwlog_obj();
                    v426 = type[0];
                    if (!os_log_type_enabled(v425, type[0])) {
                      goto LABEL_767;
                    }
                    *(_DWORD *)std::string buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                    v427 = "%{public}s called with null connection";
LABEL_766:
                    _os_log_impl(&dword_181A5C000, v425, v426, v427, buf, 0xCu);
                    goto LABEL_767;
                  }

                  if (!(_BYTE)aBlock)
                  {
                    v425 = (os_log_s *)__nwlog_obj();
                    v426 = type[0];
                    if (!os_log_type_enabled(v425, type[0])) {
                      goto LABEL_767;
                    }
                    *(_DWORD *)std::string buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                    v427 = "%{public}s called with null connection, backtrace limit exceeded";
                    goto LABEL_766;
                  }

                  v475 = (char *)__nw_create_backtrace_string();
                  v425 = (os_log_s *)__nwlog_obj();
                  v426 = type[0];
                  v476 = os_log_type_enabled(v425, type[0]);
                  if (!v475)
                  {
                    if (!v476) {
                      goto LABEL_767;
                    }
                    *(_DWORD *)std::string buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                    v427 = "%{public}s called with null connection, no backtrace";
                    goto LABEL_766;
                  }

                  if (v476)
                  {
                    *(_DWORD *)std::string buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_http1_get_output_protocol";
                    *(_WORD *)&_BYTE buf[12] = 2082;
                    *(void *)&buf[14] = v475;
                    _os_log_impl( &dword_181A5C000,  v425,  v426,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(v475);
                }

                                                    if (*(_BYTE *)(a2 + *v8)) {
                                                      os_log_type_t v58 = 0;
                                                    }
                                                    goto LABEL_284;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }

                                *(_BYTE *)(a2 + *v_Block_object_dispose(va, 8) = 1;
                                goto LABEL_282;
                              case 2u:
                                *(_BYTE *)(a1 + 44) |= 0x10u;
                                uint64_t v209 = *v3;
                                uint64_t v210 = *(void *)(a2 + v209);
                                if (v210 == -1LL || v210 >= *(void *)(a2 + *v6))
                                {
                                  v213 = 0;
LABEL_286:
                                  *(_BYTE *)(a2 + *v_Block_object_dispose(va, 8) = 1;
                                  goto LABEL_287;
                                }

                                v211 = v210 + 1;
                                v212 = *(_BYTE *)(*(void *)(a2 + *v10) + v210);
                                *(void *)(a2 + v209) = v211;
                                v213 = v212 & 0x7F;
                                if ((v212 & 0x80) == 0) {
                                  goto LABEL_287;
                                }
                                os_log_type_t v214 = *v3;
                                v215 = *(void *)(a2 + v214);
                                if (v215 == -1LL || v215 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_286;
                                }
                                v216 = *(char *)(*(void *)(a2 + *v10) + v215);
                                *(void *)(a2 + v214) = v215 + 1;
                                v213 = v213 & 0xFFFFC07F | ((v216 & 0x7F) << 7);
                                if ((v216 & 0x80000000) == 0) {
                                  goto LABEL_287;
                                }
                                v217 = *v3;
                                BOOL v218 = *(void *)(a2 + v217);
                                if (v218 == -1LL || v218 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_286;
                                }
                                v219 = *(char *)(*(void *)(a2 + *v10) + v218);
                                *(void *)(a2 + v217) = v218 + 1;
                                v213 = v213 & 0xFFE03FFF | ((v219 & 0x7F) << 14);
                                if ((v219 & 0x80000000) == 0) {
                                  goto LABEL_287;
                                }
                                v220 = *v3;
                                v221 = *(void *)(a2 + v220);
                                if (v221 == -1LL || v221 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_286;
                                }
                                v222 = *(char *)(*(void *)(a2 + *v10) + v221);
                                *(void *)(a2 + v220) = v221 + 1;
                                v213 = v213 & 0xF01FFFFF | ((v222 & 0x7F) << 21);
                                if ((v222 & 0x80000000) == 0) {
                                  goto LABEL_287;
                                }
                                v223 = *v3;
                                v224 = *(void *)(a2 + v223);
                                if (v224 == -1LL || v224 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_286;
                                }
                                v225 = v224 + 1;
                                int v226 = *(char *)(*(void *)(a2 + *v10) + v224);
                                *(void *)(a2 + v223) = v225;
                                v213 |= v226 << 28;
                                if ((v226 & 0x80000000) == 0) {
                                  goto LABEL_287;
                                }
                                uint64_t v227 = *v3;
                                v228 = *(void *)(a2 + v227);
                                if (v228 == -1LL || v228 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_286;
                                }
                                v229 = v228 + 1;
                                v230 = *(char *)(*(void *)(a2 + *v10) + v228);
                                *(void *)(a2 + v227) = v229;
                                if ((v230 & 0x80000000) == 0) {
                                  goto LABEL_287;
                                }
                                os_log_type_t v231 = *v3;
                                uint64_t v232 = *(void *)(a2 + v231);
                                if (v232 == -1LL || v232 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_286;
                                }
                                v233 = v232 + 1;
                                v234 = *(char *)(*(void *)(a2 + *v10) + v232);
                                *(void *)(a2 + v231) = v233;
                                if ((v234 & 0x80000000) == 0) {
                                  goto LABEL_287;
                                }
                                v235 = *v3;
                                BOOL v236 = *(void *)(a2 + v235);
                                if (v236 == -1LL || v236 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_286;
                                }
                                uint64_t v237 = v236 + 1;
                                v238 = *(char *)(*(void *)(a2 + *v10) + v236);
                                *(void *)(a2 + v235) = v237;
                                if ((v238 & 0x80000000) == 0) {
                                  goto LABEL_287;
                                }
                                uint64_t v239 = *v3;
                                v240 = *(void *)(a2 + v239);
                                if (v240 == -1LL || v240 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_286;
                                }
                                uint64_t v241 = v240 + 1;
                                v242 = *(char *)(*(void *)(a2 + *v10) + v240);
                                *(void *)(a2 + v239) = v241;
                                if ((v242 & 0x80000000) == 0) {
                                  goto LABEL_287;
                                }
                                uint64_t v243 = *v3;
                                uint64_t v244 = *(void *)(a2 + v243);
                                if (v244 == -1LL || v244 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_286;
                                }
                                uint64_t v245 = v244 + 1;
                                v246 = *(char *)(*(void *)(a2 + *v10) + v244);
                                *(void *)(a2 + v243) = v245;
                                if (v246 < 0)
                                {
                                  v213 = 0;
                                  goto LABEL_289;
                                }

void nw_protocol_plugin_metadata_report_transfer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (!(_DWORD)a4) {
    return;
  }
  if (a3)
  {
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 112);
    if (v5) {
      v5(a2, a3, a4, a5);
    }
    return;
  }

  __nwlog_obj();
  *(_DWORD *)std::string buf = 136446210;
  BOOL v15 = "nw_protocol_plugin_metadata_report_transfer";
  int v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_19;
      }
      *(_DWORD *)std::string buf = 136446210;
      BOOL v15 = "nw_protocol_plugin_metadata_report_transfer";
      BOOL v9 = "%{public}s called with null metadata";
      goto LABEL_18;
    }

    if (!v12)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_19;
      }
      *(_DWORD *)std::string buf = 136446210;
      BOOL v15 = "nw_protocol_plugin_metadata_report_transfer";
      BOOL v9 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_18;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled(v7, type);
    if (backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)std::string buf = 136446466;
        BOOL v15 = "nw_protocol_plugin_metadata_report_transfer";
        __int16 v16 = 2082;
        uint64_t v17 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_19;
    }

    if (v11)
    {
      *(_DWORD *)std::string buf = 136446210;
      BOOL v15 = "nw_protocol_plugin_metadata_report_transfer";
      BOOL v9 = "%{public}s called with null metadata, no backtrace";
LABEL_18:
      _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
    }
  }

void __nw_protocol_plugin_metadata_process_frames_block_invoke_30( uint64_t a1, unsigned int a2, nw_protocol_metadata *a3)
{
  uint64_t v156 = *MEMORY[0x1895F89C0];
  if (gLogDatapath)
  {
    os_log_type_t v130 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v130, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v131 = *(void *)(a1 + 48);
      uint64_t v132 = "invalid";
      if (v131)
      {
        uint64_t v133 = *(const char **)(v131 + 16);
        if (v133) {
          uint64_t v132 = v133;
        }
      }

      if (a2 > 3) {
        uint64_t v134 = "invalid";
      }
      else {
        uint64_t v134 = off_189BB6488[a2];
      }
      BOOL v135 = "input";
      uint64_t v136 = *(char **)(a1 + 56);
      if (!*(_BYTE *)(a1 + 120)) {
        BOOL v135 = "output";
      }
      *(_DWORD *)std::string buf = 136447234;
      std::string v148 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
      __int16 v149 = 2080;
      *(void *)BOOL v150 = v132;
      *(_WORD *)&v150[8] = 2080;
      uint64_t v151 = (uint64_t)v134;
      __int16 v152 = 2080;
      BOOL v153 = v135;
      __int16 v154 = 2048;
      BOOL v155 = v136;
      _os_log_impl( &dword_181A5C000,  v130,  OS_LOG_TYPE_DEBUG,  "%{public}s %s processor returned result %s for %s frame %p",  buf,  0x34u);
    }
  }

  uint64_t v6 = *(void *)(a1 + 64);
  if (*(_BYTE *)(a1 + 120))
  {
    *(_BYTE *)(v6 + 140) = a2;
    if (a2 > 3) {
      return;
    }
  }

  else
  {
    *(_BYTE *)(v6 + 141) = a2;
  }

  switch(a2)
  {
    case 0u:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)std::string buf = 136446210;
      std::string v148 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t v146 = OS_LOG_TYPE_DEFAULT;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = (os_log_s *)gLogObj;
        os_log_type_t v9 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_62;
        }
        *(_DWORD *)std::string buf = 136446210;
        std::string v148 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
        uint64_t v10 = "%{public}s metadata processor result must not be unknown";
LABEL_61:
        _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
        goto LABEL_62;
      }

      if (v146 == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = (os_log_s *)gLogObj;
        os_log_type_t v9 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_62;
        }
        *(_DWORD *)std::string buf = 136446210;
        std::string v148 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
        uint64_t v10 = "%{public}s metadata processor result must not be unknown, backtrace limit exceeded";
        goto LABEL_61;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (os_log_s *)gLogObj;
      os_log_type_t v9 = type[0];
      BOOL v26 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (!backtrace_string)
      {
        if (!v26) {
          goto LABEL_62;
        }
        *(_DWORD *)std::string buf = 136446210;
        std::string v148 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
        uint64_t v10 = "%{public}s metadata processor result must not be unknown, no backtrace";
        goto LABEL_61;
      }

      if (v26)
      {
        *(_DWORD *)std::string buf = 136446466;
        std::string v148 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
        __int16 v149 = 2082;
        *(void *)BOOL v150 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s metadata processor result must not be unknown, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
LABEL_62:
      if (v7) {
        free(v7);
      }
      return;
    case 1u:
      unsigned int v11 = nw_frame_unclaimed_length(*(_DWORD **)(a1 + 56));
      if (v11 <= **(_DWORD **)(a1 + 72))
      {
        uint64_t v19 = 48LL;
        if (!*(_BYTE *)(a1 + 120)) {
          uint64_t v19 = 64LL;
        }
        if (*(nw_protocol_metadata **)(*(void *)(a1 + 64) + v19) != a3)
        {
          uint64_t v20 = *(void *)(a1 + 56);
          int is_metadata_complete = nw_frame_is_metadata_complete(v20);
          nw_frame_set_metadata(v20, a3, 0, is_metadata_complete);
        }

        uint64_t v22 = *(void *)(a1 + 56);
        uint64_t v23 = *(void *)(v22 + 32);
        int v24 = *(void **)(v22 + 40);
        if (v23)
        {
          *(void *)(v23 + 40) = v24;
          int v24 = *(void **)(v22 + 40);
        }

        else
        {
          *(void *)(*(void *)(a1 + 80) + 8LL) = v24;
        }

        *int v24 = v23;
        *(void *)(v22 + 32) = 0LL;
        *(void *)(v22 + 40) = 0LL;
        uint64_t v30 = *(void *)(a1 + 88);
        uint64_t v31 = *(void *)(a1 + 56);
        *(void *)(v31 + 32) = 0LL;
        char v32 = *(void **)(v30 + 8);
        *(void *)(v31 + 40) = v32;
        *char v32 = v31;
        *(void *)(v30 + _Block_object_dispose(va, 8) = v31 + 32;
        BOOL v33 = *(unsigned int **)(a1 + 96);
        BOOL v34 = *v33 >= v11;
        *v33 -= v11;
        if (!v34)
        {
          if (gLogDatapath)
          {
            uint64_t v140 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v140, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v141 = (const char *)**(unsigned int **)(a1 + 96);
              *(_DWORD *)std::string buf = 136446978;
              std::string v148 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
              __int16 v149 = 2082;
              *(void *)BOOL v150 = "minimum_bytes";
              *(_WORD *)&v150[8] = 2048;
              uint64_t v151 = v11;
              __int16 v152 = 2048;
              BOOL v153 = v141;
              _os_log_impl( &dword_181A5C000,  v140,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  buf,  0x2Au);
            }
          }

          **(_DWORD **)(a1 + 96) = 0;
        }

        uint64_t v35 = *(unsigned int **)(a1 + 72);
        BOOL v34 = *v35 >= v11;
        *v35 -= v11;
        if (!v34)
        {
          if (gLogDatapath)
          {
            os_log_type_t v142 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v142, OS_LOG_TYPE_DEBUG))
            {
              BOOL v143 = (const char *)**(unsigned int **)(a1 + 72);
              *(_DWORD *)std::string buf = 136446978;
              std::string v148 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
              __int16 v149 = 2082;
              *(void *)BOOL v150 = "maximum_bytes";
              *(_WORD *)&v150[8] = 2048;
              uint64_t v151 = v11;
              __int16 v152 = 2048;
              BOOL v153 = v143;
              _os_log_impl( &dword_181A5C000,  v142,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  buf,  0x2Au);
            }
          }

          **(_DWORD **)(a1 + 72) = 0;
        }

        uint64_t v36 = *(_DWORD **)(a1 + 104);
        if ((*v36)--)
        {
LABEL_82:
          os_log_type_t v69 = *(_DWORD **)(a1 + 112);
          BOOL v34 = __CFADD__(*v69, v11);
          *v69 += v11;
          if (!v34) {
            goto LABEL_101;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v70 = v11;
          __int16 v71 = (const char *)**(unsigned int **)(a1 + 112);
          *(_DWORD *)std::string buf = 136446978;
          std::string v148 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
          __int16 v149 = 2082;
          *(void *)BOOL v150 = "moved_bytes";
          *(_WORD *)&v150[8] = 2048;
          uint64_t v151 = v11;
          __int16 v152 = 2048;
          BOOL v153 = v71;
          uint64_t v72 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          os_log_type_t v146 = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v72, type, &v146))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v73 = (os_log_s *)gLogObj;
              os_log_type_t v74 = type[0];
              if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
              {
                os_log_type_t v75 = (const char *)**(unsigned int **)(a1 + 112);
                *(_DWORD *)std::string buf = 136446978;
                std::string v148 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                __int16 v149 = 2082;
                *(void *)BOOL v150 = "moved_bytes";
                *(_WORD *)&v150[8] = 2048;
                uint64_t v151 = v70;
                __int16 v152 = 2048;
                BOOL v153 = v75;
                uint64_t v76 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_97:
                _os_log_impl(&dword_181A5C000, v73, v74, v76, buf, 0x2Au);
              }
            }

            else if (v146)
            {
              BOOL v77 = (char *)__nw_create_backtrace_string();
              os_log_type_t v73 = (os_log_s *)__nwlog_obj();
              os_log_type_t v74 = type[0];
              BOOL v78 = os_log_type_enabled(v73, type[0]);
              if (v77)
              {
                if (v78)
                {
                  uint64_t v79 = (const char *)**(unsigned int **)(a1 + 112);
                  *(_DWORD *)std::string buf = 136447234;
                  std::string v148 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                  __int16 v149 = 2082;
                  *(void *)BOOL v150 = "moved_bytes";
                  *(_WORD *)&v150[8] = 2048;
                  uint64_t v151 = v70;
                  __int16 v152 = 2048;
                  BOOL v153 = v79;
                  __int16 v154 = 2082;
                  BOOL v155 = v77;
                  _os_log_impl( &dword_181A5C000,  v73,  v74,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                }

                free(v77);
                goto LABEL_98;
              }

              if (v78)
              {
                uint64_t v81 = (const char *)**(unsigned int **)(a1 + 112);
                *(_DWORD *)std::string buf = 136446978;
                std::string v148 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                __int16 v149 = 2082;
                *(void *)BOOL v150 = "moved_bytes";
                *(_WORD *)&v150[8] = 2048;
                uint64_t v151 = v70;
                __int16 v152 = 2048;
                BOOL v153 = v81;
                uint64_t v76 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                goto LABEL_97;
              }
            }

            else
            {
              os_log_type_t v73 = (os_log_s *)__nwlog_obj();
              os_log_type_t v74 = type[0];
              if (os_log_type_enabled(v73, type[0]))
              {
                uint64_t v80 = (const char *)**(unsigned int **)(a1 + 112);
                *(_DWORD *)std::string buf = 136446978;
                std::string v148 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                __int16 v149 = 2082;
                *(void *)BOOL v150 = "moved_bytes";
                *(_WORD *)&v150[8] = 2048;
                uint64_t v151 = v70;
                __int16 v152 = 2048;
                BOOL v153 = v80;
                uint64_t v76 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                goto LABEL_97;
              }
            }
          }

LABEL_168:
      *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
      return;
    case 2u:
      goto LABEL_168;
    case 3u:
      int v15 = nw_frame_is_metadata_complete(*(void *)(a1 + 56));
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(void *)(v16 + 32);
      uint64_t v18 = *(void **)(v16 + 40);
      if (v17)
      {
        *(void *)(v17 + 40) = v18;
        uint64_t v18 = *(void **)(v16 + 40);
      }

      else
      {
        *(void *)(*(void *)(a1 + 80) + 8LL) = v18;
      }

      *uint64_t v18 = v17;
      *(void *)(v16 + 32) = 0LL;
      *(void *)(v16 + 40) = 0LL;
      nw_frame_finalize(*(void *)(a1 + 56));
      if (v15)
      {
        BOOL v27 = *(void (**)(void))(*(void *)(a1 + 64) + 120LL);
        if (v27) {
          v27(*(void *)(a1 + 48));
        }
      }

      return;
    default:
      return;
  }

        if (v51) {
          free(v51);
        }
        uint32_t v45 = 0LL;
        goto LABEL_198;
      }

      __nwlog_obj();
      os_log_type_t v54 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_input_frames";
      uint64_t v51 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v115) = 0;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v55 = type[0];
        if (os_log_type_enabled(v52, type[0]))
        {
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_input_frames";
          _os_log_impl(&dword_181A5C000, v52, v55, "%{public}s called with null instance->parent_definition", buf, 0xCu);
        }

        goto LABEL_167;
      }

      if (!(_BYTE)v115)
      {
        __nwlog_obj();
        uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v92 = type[0];
        if (os_log_type_enabled(v52, type[0]))
        {
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_input_frames";
          _os_log_impl( &dword_181A5C000,  v52,  v92,  "%{public}s called with null instance->parent_definition, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_167;
      }

      os_log_type_t v69 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v72 = type[0];
      os_log_type_t v73 = os_log_type_enabled(v52, type[0]);
      if (!v69)
      {
        if (v73)
        {
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_input_frames";
          _os_log_impl( &dword_181A5C000,  v52,  v72,  "%{public}s called with null instance->parent_definition, no backtrace",  buf,  0xCu);
        }

        goto LABEL_167;
      }

      if (v73)
      {
        *(_DWORD *)std::string buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_input_frames";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = v69;
        _os_log_impl( &dword_181A5C000,  v52,  v72,  "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s",  buf,  0x16u);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_input_frames";
      uint64_t v51 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v115) = 0;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v53 = type[0];
        if (os_log_type_enabled(v52, type[0]))
        {
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_input_frames";
          _os_log_impl(&dword_181A5C000, v52, v53, "%{public}s called with null instance", buf, 0xCu);
        }

        goto LABEL_167;
      }

      if (!(_BYTE)v115)
      {
        __nwlog_obj();
        uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint32_t v91 = type[0];
        if (os_log_type_enabled(v52, type[0]))
        {
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_input_frames";
          _os_log_impl( &dword_181A5C000,  v52,  v91,  "%{public}s called with null instance, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_167;
      }

      os_log_type_t v69 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v70 = type[0];
      __int16 v71 = os_log_type_enabled(v52, type[0]);
      if (!v69)
      {
        if (v71)
        {
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_input_frames";
          _os_log_impl(&dword_181A5C000, v52, v70, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }

        goto LABEL_167;
      }

      if (v71)
      {
        *(_DWORD *)std::string buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_input_frames";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = v69;
        _os_log_impl( &dword_181A5C000,  v52,  v70,  "%{public}s called with null instance, dumping backtrace:%{public}s",  buf,  0x16u);
      }
    }

      goto LABEL_169;
    }

    if (!v124)
    {
      __nwlog_obj();
      os_log_type_t v73 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v114 = type;
      if (os_log_type_enabled(v73, type))
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v127 = "nw_flow_replay_add_candidate_output_handler";
        _os_log_impl( &dword_181A5C000,  v73,  v114,  "%{public}s called with null candidate_output_handler, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_168;
    }

    uint32_t v91 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v73 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v92 = type;
    uint64_t v93 = os_log_type_enabled(v73, type);
    if (!v91)
    {
      if (v93)
      {
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v127 = "nw_flow_replay_add_candidate_output_handler";
        _os_log_impl( &dword_181A5C000,  v73,  v92,  "%{public}s called with null candidate_output_handler, no backtrace",  buf,  0xCu);
      }

      goto LABEL_168;
    }

    if (v93)
    {
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v127 = "nw_flow_replay_add_candidate_output_handler";
      BOOL v128 = 2082;
      v129 = v91;
      _os_log_impl( &dword_181A5C000,  v73,  v92,  "%{public}s called with null candidate_output_handler, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v91);
LABEL_169:
    if (!v72)
    {
LABEL_171:
      uint64_t v16 = 0LL;
      goto LABEL_172;
    }

        if (v70) {
          free(v70);
        }
        *(void *)(v17 + 200) = -1LL;
        uint64_t v20 = v259;
        if (!v54) {
          goto LABEL_171;
        }
LABEL_140:
        uint64_t v60 = 0LL;
        uint64_t v61 = size;
        if (*(void *)(v17 + 216)) {
          goto LABEL_141;
        }
LABEL_177:
        if (!v49) {
          goto LABEL_253;
        }
        if (v61)
        {
          if (*(void *)(v17 + 80))
          {
            __int16 v90 = *(_BYTE *)(v17 + 228);
            if ((v90 & 8) == 0) {
              goto LABEL_181;
            }
LABEL_194:
            if ((v90 & 4) != 0)
            {
              uint64_t v21 = v264;
            }

            else
            {
              v257 = v60;
              v261 = v20;
              uint64_t v98 = v61;
              v254 = v61;
              do
              {
                int v283 = 0;
                v278 = 0LL;
                __size[0] = 0LL;
                v282 = 0LL;
                int v99 = nw_http_access_body_chunk_from_indeterminate_binary_message( v49,  v98,  (v90 & 0x10) == 0,  &v278,  &v283,  (char **)__size,  &v282);
                uint64_t v49 = (_DWORD *)__size[0];
                uint64_t v98 = v282;
                if (v283)
                {
                  *(_BYTE *)(v17 + 228) |= 4u;
                  uint64_t v100 = nw_http_copy_trailer_fields_from_indeterminate_binary_message((const char *)v49, v98);
                  if (v100)
                  {
                    uint64_t v101 = (void *)v100;
                    if ((*(_BYTE *)(a1 + 348) & 1) == 0)
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      BOOL v102 = (os_log_s *)gLogObj;
                      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)std::string buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
                        *(_WORD *)&_BYTE buf[12] = 2082;
                        *(void *)&buf[14] = a1 + 349;
                        *(_WORD *)&_BYTE buf[22] = 2080;
                        v285 = (uint64_t)" ";
                        _os_log_impl( &dword_181A5C000,  v102,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sReceived trailer fields from binary HTTP",  buf,  0x20u);
                      }
                    }

                    nw_http_metadata_set_trailer_fields(*(void **)(v17 + 80), v101);
                    os_release(v101);
                  }
                }

                os_log_type_t v103 = v278;
                if (v283 || v278)
                {
                  *(_BYTE *)(v17 + 228) |= 0x10u;
                  if (v99)
                  {
                    if (v103)
                    {
                      os_log_type_t v104 = *(void **)(v17 + 160);
                      if (v104)
                      {
                        uint64_t v105 = *(void *)(v17 + 168);
                        os_log_type_t v106 = v105 + v103;
                        *(void *)(v17 + 16_Block_object_dispose(va, 8) = v106;
                        if (!v106)
                        {
                          BOOL v109 = (os_log_s *)__nwlog_obj();
                          os_log_type_enabled(v109, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)std::string buf = 136446210;
                          *(void *)&uint8_t buf[4] = "_strict_reallocf";
                          uint64_t v110 = (void *)_os_log_send_and_compose_impl();
                          free(v110);
                          os_log_type_t v104 = *(void **)(v17 + 160);
                        }

                        char v107 = (char *)reallocf(v104, v106);
                        if (!v107)
                        {
                          v268 = (os_log_s *)__nwlog_obj();
                          os_log_type_enabled(v268, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)std::string buf = 136446466;
                          *(void *)&uint8_t buf[4] = "_strict_reallocf";
                          *(_WORD *)&_BYTE buf[12] = 2048;
                          *(void *)&buf[14] = v106;
                          uint64_t v111 = (void *)_os_log_send_and_compose_impl();
                          free(v111);
                        }

                        *(void *)(v17 + 160) = v107;
                        memcpy(&v107[v105], v99, v278);
                        uint64_t v61 = v254;
                      }

                      else
                      {
                        *(void *)(v17 + 16_Block_object_dispose(va, 8) = v103;
                        uint64_t v108 = malloc(v103);
                        if (!v108)
                        {
                          v269 = (os_log_s *)__nwlog_obj();
                          os_log_type_enabled(v269, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)std::string buf = 136446466;
                          *(void *)&uint8_t buf[4] = "strict_malloc";
                          *(_WORD *)&_BYTE buf[12] = 2048;
                          *(void *)&buf[14] = v103;
                          uint64_t v112 = (void *)_os_log_send_and_compose_impl();
                          free(v112);
                          os_log_type_t v103 = v278;
                        }

                        *(void *)(v17 + 160) = v108;
                        memcpy(v108, v99, v103);
                      }
                    }
                  }
                }

                __int16 v90 = *(_BYTE *)(v17 + 228);
              }

              while ((v90 & 4) == 0 && v49 && v98);
              if ((*(_BYTE *)(v17 + 228) & 4) != 0)
              {
                uint64_t v20 = v261;
                uint64_t v21 = v264;
                uint64_t v60 = v257;
              }

              else
              {
                uint64_t v20 = v261;
                uint64_t v21 = v264;
                uint64_t v60 = v257;
                if (v98)
                {
                  if (v61 > v98)
                  {
                    subrange = dispatch_data_create_subrange(*(dispatch_data_t *)(v17 + 208), v61 - v98, v98);
                    uint64_t v114 = *(dispatch_object_s **)(v17 + 208);
                    if (v114) {
                      dispatch_release(v114);
                    }
                    *(void *)(v17 + 20_Block_object_dispose(va, 8) = subrange;
                    __int16 v90 = *(_BYTE *)(v17 + 228) | 0x10;
                    uint64_t v60 = v257;
                  }

                  goto LABEL_242;
                }
              }
            }

            uint64_t v118 = *(dispatch_object_s **)(v17 + 208);
            if (v118)
            {
              dispatch_release(v118);
              *(void *)(v17 + 20_Block_object_dispose(va, 8) = 0LL;
              __int16 v90 = *(_BYTE *)(v17 + 228);
            }

            v90 |= 0x10u;
            goto LABEL_242;
          }

          v278 = 0LL;
          LOBYTE(__size[0]) = 0;
          BOOL v96 = nw_http_copy_metadata_from_binary_message(v49, v61, &v278, (BOOL *)__size);
          if (v96)
          {
            *(void *)(v17 + 80) = v96;
            BOOL v97 = v278;
            __int16 v90 = *(_BYTE *)(v17 + 228) & 0xF7 | (8 * LOBYTE(__size[0]));
            *(_BYTE *)(v17 + 22_Block_object_dispose(va, 8) = v90;
            *(_DWORD *)(v17 + 224) = 4;
            *(void *)(v17 + 16_Block_object_dispose(va, 8) = v97;
            *(void *)(v17 + 176) = 0LL;
            if ((v90 & 8) != 0) {
              goto LABEL_194;
            }
LABEL_181:
            v260 = v20;
            uint32_t v91 = *(void *)(v17 + 168);
            v278 = v91;
            if (v91)
            {
              v256 = v60;
              BOOL v92 = (char *)calloc(1uLL, v91);
              if (v92)
              {
                if (nw_http_fillout_body_from_binary_message(v49, v61, v92, v91, &v278)) {
                  goto LABEL_184;
                }
                free(v92);
LABEL_234:
                uint64_t v20 = v260;
                uint64_t v21 = v264;
                if ((*(_BYTE *)(a1 + 348) & 1) == 0)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  uint64_t v117 = (os_log_s *)gLogObj;
                  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)std::string buf = 136446722;
                    *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_parse_binary_http_response";
                    *(_WORD *)&_BYTE buf[12] = 2082;
                    *(void *)&buf[14] = a1 + 349;
                    *(_WORD *)&_BYTE buf[22] = 2080;
                    v285 = (uint64_t)" ";
                    _os_log_impl( &dword_181A5C000,  v117,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sFailed to fill out body content",  buf,  0x20u);
                  }
                }

                uint64_t v60 = v256;
                goto LABEL_270;
              }

              os_log_type_t v164 = (os_log_s *)__nwlog_obj();
              os_log_type_enabled(v164, OS_LOG_TYPE_ERROR);
              *(_DWORD *)std::string buf = 136446722;
              *(void *)&uint8_t buf[4] = "strict_calloc";
              *(_WORD *)&_BYTE buf[12] = 2048;
              *(void *)&buf[14] = 1LL;
              *(_WORD *)&_BYTE buf[22] = 2048;
              v285 = v91;
              uint64_t v165 = (void *)_os_log_send_and_compose_impl();
              free(v165);
              if (!nw_http_fillout_body_from_binary_message(v49, v61, 0LL, v278, &v278)) {
                goto LABEL_234;
              }
LABEL_184:
              *(void *)(v17 + 160) = v92;
              __int16 v90 = *(_BYTE *)(v17 + 228);
              uint64_t v60 = v256;
            }

            v90 |= 4u;
            *(_BYTE *)(v17 + 22_Block_object_dispose(va, 8) = v90;
            uint64_t v93 = *(dispatch_object_s **)(v17 + 208);
            uint64_t v20 = v260;
            uint64_t v21 = v264;
            if (v93)
            {
              dispatch_release(v93);
              *(void *)(v17 + 20_Block_object_dispose(va, 8) = 0LL;
              __int16 v90 = *(_BYTE *)(v17 + 228);
            }

          if (v94) {
            free(v94);
          }
          uint64_t v53 = 0LL;
          goto LABEL_83;
        }

        if (v225)
        {
          char v107 = (char *)__nw_create_backtrace_string();
          uint64_t v114 = (os_log_s *)__nwlog_obj();
          uint64_t v115 = v226;
          os_log_type_t logc = v114;
          uint64_t v116 = os_log_type_enabled(v114, v226);
          if (v107)
          {
            if (v116)
            {
              *(_DWORD *)uint64_t v227 = 136446466;
              *(void *)&v227[4] = "nw_http_encoding_create_inbound_frame";
              *(_WORD *)&v227[12] = 2082;
              *(void *)&v227[14] = v107;
              uint64_t v111 = logc;
              uint64_t v112 = v115;
              os_log_type_t v113 = "%{public}s called with null frame, dumping backtrace:%{public}s";
LABEL_157:
              _os_log_impl(&dword_181A5C000, v111, v112, v113, v227, 0x16u);
            }

            goto LABEL_158;
          }

          if (!v116) {
            goto LABEL_168;
          }
          *(_DWORD *)uint64_t v227 = 136446210;
          *(void *)&v227[4] = "nw_http_encoding_create_inbound_frame";
          BOOL v97 = logc;
          uint64_t v98 = v115;
          int v99 = "%{public}s called with null frame, no backtrace";
        }

        else
        {
          char v119 = (os_log_s *)__nwlog_obj();
          os_log_type_t v120 = v226;
          if (!os_log_type_enabled(v119, v226)) {
            goto LABEL_168;
          }
          *(_DWORD *)uint64_t v227 = 136446210;
          *(void *)&v227[4] = "nw_http_encoding_create_inbound_frame";
          BOOL v97 = v119;
          uint64_t v98 = v120;
          int v99 = "%{public}s called with null frame, backtrace limit exceeded";
        }
      }

      else
      {
        __nwlog_obj();
        *(_DWORD *)uint64_t v227 = 136446210;
        *(void *)&v227[4] = "nw_http_encoding_create_inbound_frame";
        os_log_type_t v94 = (char *)_os_log_send_and_compose_impl();
        int v226 = OS_LOG_TYPE_ERROR;
        v225 = 0;
        if (v226 == OS_LOG_TYPE_FAULT)
        {
          BOOL v95 = (os_log_s *)__nwlog_obj();
          BOOL v96 = v226;
          if (os_log_type_enabled(v95, v226))
          {
            *(_DWORD *)uint64_t v227 = 136446210;
            *(void *)&v227[4] = "nw_http_encoding_create_inbound_frame";
            BOOL v97 = v95;
            uint64_t v98 = v96;
            int v99 = "%{public}s called with null http_encoding";
            goto LABEL_167;
          }

          goto LABEL_168;
        }

        if (v225)
        {
          char v107 = (char *)__nw_create_backtrace_string();
          uint64_t v108 = (os_log_s *)__nwlog_obj();
          BOOL v109 = v226;
          logb = v108;
          uint64_t v110 = os_log_type_enabled(v108, v226);
          if (v107)
          {
            if (v110)
            {
              *(_DWORD *)uint64_t v227 = 136446466;
              *(void *)&v227[4] = "nw_http_encoding_create_inbound_frame";
              *(_WORD *)&v227[12] = 2082;
              *(void *)&v227[14] = v107;
              uint64_t v111 = logb;
              uint64_t v112 = v109;
              os_log_type_t v113 = "%{public}s called with null http_encoding, dumping backtrace:%{public}s";
              goto LABEL_157;
            }

    goto LABEL_169;
  }

  unsigned int v4 = __n + 42;
  if (__n == -42LL)
  {
    __nwlog_obj();
    int v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v40, OS_LOG_TYPE_ERROR);
    *(_DWORD *)std::string buf = 136446210;
    BOOL v95 = "strict_malloc";
    os_log_type_t v41 = (void *)_os_log_send_and_compose_impl();

    free(v41);
  }

  uint64_t v5 = malloc(v4);
  if (v5) {
    goto LABEL_5;
  }
  __nwlog_obj();
  uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v46, OS_LOG_TYPE_ERROR);
  *(_DWORD *)std::string buf = 136446466;
  BOOL v95 = "strict_malloc";
  BOOL v96 = 2048;
  BOOL v97 = v4;
  uint64_t v47 = (void *)_os_log_send_and_compose_impl();

  if (__nwlog_abort((uint64_t)v47))
  {
LABEL_178:
    __break(1u);
    return;
  }

  free(v47);
LABEL_5:
  uint64_t v83 = nw_protocol_options_copy_definition(options);
  uint64_t v6 = nw_protocol_definition_get_identifier(v83);
  uint64_t v7 = *((_OWORD *)v6 + 1);
  *uint64_t v5 = *(_OWORD *)v6;
  v5[1] = v7;
  *((void *)v5 + 4) = *((void *)v6 + 4);
  os_log_type_t v8 = __n;
  *((_WORD *)v5 + 20) = __n;
  memcpy((char *)v5 + 42, v3, v8);
  os_log_type_t v9 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (!v9)
  {
    __nwlog_obj();
    uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136446210;
    BOOL v95 = "nw_necp_append_tlv";
    uint64_t v49 = (const char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    __int16 v90 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v49, type, &v90))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v51 = type[0];
        if (os_log_type_enabled(v50, type[0]))
        {
          *(_DWORD *)std::string buf = 136446210;
          BOOL v95 = "nw_necp_append_tlv";
          _os_log_impl(&dword_181A5C000, v50, v51, "%{public}s called with null tlv_start", buf, 0xCu);
        }

        goto LABEL_163;
      }

      if (v90 == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        uint64_t v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v78 = type[0];
        if (os_log_type_enabled(v50, type[0]))
        {
          *(_DWORD *)std::string buf = 136446210;
          BOOL v95 = "nw_necp_append_tlv";
          _os_log_impl( &dword_181A5C000,  v50,  v78,  "%{public}s called with null tlv_start, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_163;
      }

      uint64_t v63 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v64 = type[0];
      BOOL v65 = os_log_type_enabled(v50, type[0]);
      if (!v63)
      {
        if (v65)
        {
          *(_DWORD *)std::string buf = 136446210;
          BOOL v95 = "nw_necp_append_tlv";
          _os_log_impl(&dword_181A5C000, v50, v64, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
        }

        goto LABEL_163;
      }

      if (v65)
      {
        *(_DWORD *)std::string buf = 136446466;
        BOOL v95 = "nw_necp_append_tlv";
        BOOL v96 = 2082;
        BOOL v97 = (size_t)v63;
        _os_log_impl( &dword_181A5C000,  v50,  v64,  "%{public}s called with null tlv_start, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      if (v47) {
        free(v47);
      }
      __int16 v90 = 0LL;
LABEL_13:

      BOOL v97 = 0LL;
      uint64_t v98 = &v97;
      int v99 = 0x2000000000LL;
      uint64_t v100 = 0;
      if (!v90)
      {
LABEL_25:
        if ((*((_BYTE *)handle + 198) & 1) == 0)
        {
          if (gLogDatapath)
          {
            uint64_t v50 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v51 = *((unsigned __int8 *)v98 + 24);
              *(_DWORD *)std::string buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
              *(_WORD *)&_BYTE buf[12] = 2082;
              *(void *)&buf[14] = (char *)handle + 114;
              *(_WORD *)&_BYTE buf[22] = 2080;
              uint64_t v111 = (uint64_t (*)(uint64_t, uint64_t))" ";
              LOWORD(v112) = 1024;
              *(_DWORD *)((char *)&v112 + 2) = v51;
              _os_log_impl( &dword_181A5C000,  v50,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sfound alternative %{BOOL}d",  buf,  0x26u);
            }
          }
        }

        if (*((_BYTE *)v98 + 24))
        {
LABEL_40:
          uint64_t v30 = nw_parameters_copy_context(handle[27]);
          uint64_t v31 = nw_context_copy_registered_endpoint(v30, (void *)v102[5]);
          char v32 = *((_BYTE *)handle + 208);
          if ((v32 & 1) != 0)
          {
            BOOL v34 = handle[25];
            BOOL v33 = (uint64_t)v89;
            if (v34)
            {
              os_release(v34);
              char v32 = *((_BYTE *)handle + 208);
            }
          }

          else
          {
            BOOL v33 = (uint64_t)v89;
          }

          handle[25] = v31;
          *((_BYTE *)handle + 20_Block_object_dispose(va, 8) = v32 | 1;
          uint64_t v35 = *(void *)(v33 + 32);
          if (v35)
          {
            uint64_t v36 = nw_protocol_connect(v35, v33);
            if (!v30)
            {
LABEL_47:
              _Block_object_dispose(&v97, 8);
              if (v90) {
                os_release(v90);
              }
              os_release(object);
LABEL_50:
              _Block_object_dispose(&v101, 8);
              if ((v107 & 1) != 0 && v106) {
                os_release(v106);
              }
              return v36;
            }
          }

          else
          {
            if ((*((_BYTE *)handle + 198) & 1) == 0)
            {
              if (gLogDatapath)
              {
                uint64_t v72 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)std::string buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
                  *(_WORD *)&_BYTE buf[12] = 2082;
                  *(void *)&buf[14] = (char *)handle + 114;
                  *(_WORD *)&_BYTE buf[22] = 2080;
                  uint64_t v111 = (uint64_t (*)(uint64_t, uint64_t))" ";
                  _os_log_impl( &dword_181A5C000,  v72,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sconnect bottom protocol, resuming child handler",  buf,  0x20u);
                }
              }
            }

            buf[0] = 0;
            uint64_t v36 = 1LL;
            nw_protocol_notify(handle[6], (uint64_t)handle, 23);
            if (!v30) {
              goto LABEL_47;
            }
          }

          os_release(v30);
          goto LABEL_47;
        }

        int v24 = object;
        uint64_t v25 = nw_protocol_options_copy_definition(v24);
        if (nw_protocol_copy_http_alt_svc_definition_onceToken != -1) {
          dispatch_once(&nw_protocol_copy_http_alt_svc_definition_onceToken, &__block_literal_global_14_72923);
        }
        BOOL v26 = nw_protocol_definition_is_equal( v25,  (nw_protocol_definition_t)nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition);

        if (v26)
        {
          *(void *)uint64_t v114 = 0LL;
          *(void *)&v114[8] = v114;
          *(void *)&v114[16] = 0x2020000000LL;
          v114[24] = 0;
          *(void *)std::string buf = MEMORY[0x1895F87A8];
          *(void *)&buf[8] = 3221225472LL;
          *(void *)&buf[16] = __nw_http_alt_svc_options_get_assumes_http3_capable_block_invoke;
          uint64_t v111 = (uint64_t (*)(uint64_t, uint64_t))&unk_189BC60A8;
          uint64_t v112 = v114;
          nw_protocol_options_access_handle(v24, buf);
          BOOL v27 = *(_BYTE *)(*(void *)&v114[8] + 24LL) == 0;
          _Block_object_dispose(v114, 8);

          if (!v27) {
            goto LABEL_40;
          }
          goto LABEL_32;
        }

        __nwlog_obj();
        uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)uint64_t v114 = 136446210;
        *(void *)&v114[4] = "nw_http_alt_svc_options_get_assumes_http3_capable";
        os_log_type_t v69 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        uint64_t v108 = 0;
        if (__nwlog_fault(v69, &type, &v108))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            uint64_t v70 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            __int16 v71 = type;
            if (os_log_type_enabled(v70, type))
            {
              *(_DWORD *)uint64_t v114 = 136446210;
              *(void *)&v114[4] = "nw_http_alt_svc_options_get_assumes_http3_capable";
              _os_log_impl(&dword_181A5C000, v70, v71, "%{public}s protocol options are not http_alt_svc", v114, 0xCu);
            }
          }

          else if (v108)
          {
            uint64_t v80 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            uint64_t v70 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            uint64_t v81 = type;
            uint64_t v82 = os_log_type_enabled(v70, type);
            if (v80)
            {
              if (v82)
              {
                *(_DWORD *)uint64_t v114 = 136446466;
                *(void *)&v114[4] = "nw_http_alt_svc_options_get_assumes_http3_capable";
                *(_WORD *)&v114[12] = 2082;
                *(void *)&v114[14] = v80;
                _os_log_impl( &dword_181A5C000,  v70,  v81,  "%{public}s protocol options are not http_alt_svc, dumping backtrace:%{public}s",  v114,  0x16u);
              }

              free(v80);
              goto LABEL_191;
            }

            if (v82)
            {
              *(_DWORD *)uint64_t v114 = 136446210;
              *(void *)&v114[4] = "nw_http_alt_svc_options_get_assumes_http3_capable";
              _os_log_impl( &dword_181A5C000,  v70,  v81,  "%{public}s protocol options are not http_alt_svc, no backtrace",  v114,  0xCu);
            }
          }

          else
          {
            __nwlog_obj();
            uint64_t v70 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            BOOL v85 = type;
            if (os_log_type_enabled(v70, type))
            {
              *(_DWORD *)uint64_t v114 = 136446210;
              *(void *)&v114[4] = "nw_http_alt_svc_options_get_assumes_http3_capable";
              _os_log_impl( &dword_181A5C000,  v70,  v85,  "%{public}s protocol options are not http_alt_svc, backtrace limit exceeded",  v114,  0xCu);
            }
          }
        }

    if (v79) {
      free(v79);
    }
    return 0LL;
  }

  if ((v41 & 1) != 0) {
    return 0LL;
  }
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
  }
  int v42 = (os_log_s *)gconnectionLogObj;
  BOOL result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
  {
    uint32_t v45 = *(_DWORD *)(v11 + 176);
    uint64_t v44 = *(_DWORD *)(v11 + 180);
    *(_DWORD *)std::string buf = 136447746;
    uint64_t v98 = "on_data_chunk_recv_callback";
    int v99 = 2082;
    uint64_t v100 = (const char *)(v11 + 191);
    uint64_t v101 = 2080;
    BOOL v102 = " ";
    os_log_type_t v103 = 1024;
    *(_DWORD *)os_log_type_t v104 = v44;
    *(_WORD *)&v104[4] = 1024;
    *(_DWORD *)&v104[6] = v45;
    uint64_t v105 = 2048;
    *(void *)os_log_type_t v106 = *(void *)v95;
    *(_WORD *)&v106[8] = 1024;
    *(_DWORD *)&_BYTE v106[10] = v45;
    _os_log_impl( &dword_181A5C000,  v42,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> suppressing input_available on protocol %p for stream %d that is not yet open",  buf,  0x3Cu);
    return 0LL;
  }

  return result;
}

              if (!v31) {
                goto LABEL_48;
              }
              goto LABEL_78;
            }

uint64_t nw_protocol_plugin_metadata_get_input_frames( void *a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t *a6)
{
  uint64_t v272 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
    uint64_t v132 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v258[0]) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v133 = (os_log_s *)__nwlog_obj();
      os_log_type_t v134 = type[0];
      if (!os_log_type_enabled(v133, type[0])) {
        goto LABEL_414;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
      BOOL v135 = "%{public}s called with null protocol";
      goto LABEL_413;
    }

    if (!LOBYTE(v258[0]))
    {
      uint64_t v133 = (os_log_s *)__nwlog_obj();
      os_log_type_t v134 = type[0];
      if (!os_log_type_enabled(v133, type[0])) {
        goto LABEL_414;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
      BOOL v135 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_413;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v133 = (os_log_s *)__nwlog_obj();
    os_log_type_t v134 = type[0];
    BOOL v137 = os_log_type_enabled(v133, type[0]);
    if (!backtrace_string)
    {
      if (!v137) {
        goto LABEL_414;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
      BOOL v135 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_413;
    }

    if (!v137) {
      goto LABEL_320;
    }
    LODWORD(buf[0]) = 136446466;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
    WORD2(buf[1]) = 2082;
    *(void *)((char *)&buf[1] + 6) = backtrace_string;
    uint64_t v138 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_319:
    _os_log_impl(&dword_181A5C000, v133, v134, v138, (uint8_t *)buf, 0x16u);
    goto LABEL_320;
  }

  uint64_t v6 = a1[5];
  if (!v6)
  {
    __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
    uint64_t v132 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v258[0]) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v133 = (os_log_s *)__nwlog_obj();
      os_log_type_t v134 = type[0];
      if (!os_log_type_enabled(v133, type[0])) {
        goto LABEL_414;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
      BOOL v135 = "%{public}s called with null protocol->handle";
      goto LABEL_413;
    }

    if (!LOBYTE(v258[0]))
    {
      uint64_t v133 = (os_log_s *)__nwlog_obj();
      os_log_type_t v134 = type[0];
      if (!os_log_type_enabled(v133, type[0])) {
        goto LABEL_414;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
      BOOL v135 = "%{public}s called with null protocol->handle, backtrace limit exceeded";
      goto LABEL_413;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v133 = (os_log_s *)__nwlog_obj();
    os_log_type_t v134 = type[0];
    BOOL v139 = os_log_type_enabled(v133, type[0]);
    if (!backtrace_string)
    {
      if (!v139) {
        goto LABEL_414;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
      BOOL v135 = "%{public}s called with null protocol->handle, no backtrace";
      goto LABEL_413;
    }

    if (!v139) {
      goto LABEL_320;
    }
    LODWORD(buf[0]) = 136446466;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
    WORD2(buf[1]) = 2082;
    *(void *)((char *)&buf[1] + 6) = backtrace_string;
    uint64_t v138 = "%{public}s called with null protocol->handle, dumping backtrace:%{public}s";
    goto LABEL_319;
  }

  uint64_t v7 = *(void *)(v6 + 72);
  if (!v7)
  {
    __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
    uint64_t v132 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v258[0]) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v133 = (os_log_s *)__nwlog_obj();
      os_log_type_t v134 = type[0];
      if (!os_log_type_enabled(v133, type[0])) {
        goto LABEL_414;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
      BOOL v135 = "%{public}s called with null metadata_plugin";
      goto LABEL_413;
    }

    if (!LOBYTE(v258[0]))
    {
      uint64_t v133 = (os_log_s *)__nwlog_obj();
      os_log_type_t v134 = type[0];
      if (!os_log_type_enabled(v133, type[0])) {
        goto LABEL_414;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
      BOOL v135 = "%{public}s called with null metadata_plugin, backtrace limit exceeded";
      goto LABEL_413;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v133 = (os_log_s *)__nwlog_obj();
    os_log_type_t v134 = type[0];
    BOOL v140 = os_log_type_enabled(v133, type[0]);
    if (!backtrace_string)
    {
      if (!v140) {
        goto LABEL_414;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
      BOOL v135 = "%{public}s called with null metadata_plugin, no backtrace";
      goto LABEL_413;
    }

    if (!v140) {
      goto LABEL_320;
    }
    LODWORD(buf[0]) = 136446466;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
    WORD2(buf[1]) = 2082;
    *(void *)((char *)&buf[1] + 6) = backtrace_string;
    uint64_t v138 = "%{public}s called with null metadata_plugin, dumping backtrace:%{public}s";
    goto LABEL_319;
  }

  if (!a2)
  {
    __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
    uint64_t v132 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v258[0]) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v133 = (os_log_s *)__nwlog_obj();
      os_log_type_t v134 = type[0];
      if (!os_log_type_enabled(v133, type[0])) {
        goto LABEL_414;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
      BOOL v135 = "%{public}s called with null input_protocol";
      goto LABEL_413;
    }

    if (!LOBYTE(v258[0]))
    {
      uint64_t v133 = (os_log_s *)__nwlog_obj();
      os_log_type_t v134 = type[0];
      if (!os_log_type_enabled(v133, type[0])) {
        goto LABEL_414;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
      BOOL v135 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_413;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v133 = (os_log_s *)__nwlog_obj();
    os_log_type_t v134 = type[0];
    BOOL v141 = os_log_type_enabled(v133, type[0]);
    if (!backtrace_string)
    {
      if (!v141) {
        goto LABEL_414;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
      BOOL v135 = "%{public}s called with null input_protocol, no backtrace";
      goto LABEL_413;
    }

    if (!v141) {
      goto LABEL_320;
    }
    LODWORD(buf[0]) = 136446466;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
    WORD2(buf[1]) = 2082;
    *(void *)((char *)&buf[1] + 6) = backtrace_string;
    uint64_t v138 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
    goto LABEL_319;
  }

  if (!a6)
  {
    __nwlog_obj();
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
    uint64_t v132 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v258[0]) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v133 = (os_log_s *)__nwlog_obj();
      os_log_type_t v134 = type[0];
      if (!os_log_type_enabled(v133, type[0])) {
        goto LABEL_414;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
      BOOL v135 = "%{public}s called with null return_array";
      goto LABEL_413;
    }

    if (!LOBYTE(v258[0]))
    {
      uint64_t v133 = (os_log_s *)__nwlog_obj();
      os_log_type_t v134 = type[0];
      if (!os_log_type_enabled(v133, type[0])) {
        goto LABEL_414;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
      BOOL v135 = "%{public}s called with null return_array, backtrace limit exceeded";
      goto LABEL_413;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v133 = (os_log_s *)__nwlog_obj();
    os_log_type_t v134 = type[0];
    BOOL v147 = os_log_type_enabled(v133, type[0]);
    if (backtrace_string)
    {
      if (v147)
      {
        LODWORD(buf[0]) = 136446466;
        *(void *)((char *)buf + 4) = "nw_protocol_plugin_metadata_get_input_frames";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = backtrace_string;
        uint64_t v138 = "%{public}s called with null return_array, dumping backtrace:%{public}s";
        goto LABEL_319;
      }