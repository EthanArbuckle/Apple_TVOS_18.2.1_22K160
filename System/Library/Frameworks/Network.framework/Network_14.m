void sub_181ED4F80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  v4 = v3;

  _Unwind_Resume(a1);
}

void ___ZL49nw_socks5_connection_drain_and_cancel_in_on_queueP31NWConcrete_nw_socks5_connectionbU13block_pointerFvvE_block_invoke( uint64_t a1, void *a2, uint64_t a3, int a4, void *a5)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  v8 = a2;
  id v9 = a5;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v10 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    if (v8) {
      size_t size = dispatch_data_get_size(v8);
    }
    else {
      size_t size = 0LL;
    }
    v13 = "not_";
    int v15 = 136447234;
    v16 = "nw_socks5_connection_drain_and_cancel_in_on_queue_block_invoke";
    uint64_t v18 = v11;
    __int16 v17 = 2114;
    if (a4) {
      v13 = "is_";
    }
    __int16 v19 = 2048;
    size_t v20 = size;
    __int16 v21 = 2082;
    v22 = v13;
    __int16 v23 = 2114;
    id v24 = v9;
    _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_INFO,  "%{public}s %{public}@ drained inner %zu bytes %{public}s_complete error %{public}@",  (uint8_t *)&v15,  0x34u);
  }

  if (v9) {
    uint64_t v14 = 0LL;
  }
  else {
    uint64_t v14 = a4 ^ 1u;
  }
  nw_socks5_connection_drain_and_cancel_in_on_queue(*(void *)(a1 + 32), v14, *(void *)(a1 + 40));
}

void sub_181ED5128(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_socks5_connection_cancel_block_invoke(uint64_t a1)
{
}

uint64_t **nw::object::operator new()
{
  uint64_t v47 = *MEMORY[0x1895F89C0];
  os_unfair_lock_lock((os_unfair_lock_t)&dword_18C45F5F8);
  uint64_t v0 = qword_18C45F5D8;
  if (!qword_18C45F5D8)
  {
    qword_18C45F5D8 = 72LL;
    Class Class = objc_getClass((const char *)nw_string::_class(void)::instance);
    if (Class)
    {
      v2 = Class;
      v3 = sel_registerName("dealloc");
      v4 = imp_implementationWithBlock(&__block_literal_global_16301);
      class_replaceMethod(v2, v3, v4, "");
LABEL_4:
      uint64_t v0 = qword_18C45F5D8;
      goto LABEL_5;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "init";
    __int16 v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (__nwlog_fault(v21, &type, &v37))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v22 = (os_log_s *)__nwlog_obj();
        os_log_type_t v23 = type;
        if (!os_log_type_enabled(v22, type)) {
          goto LABEL_105;
        }
        *(_DWORD *)buf = 136446210;
        v40 = "init";
        id v24 = "%{public}s called with null objc_cls";
        goto LABEL_104;
      }

      if (!v37)
      {
        v22 = (os_log_s *)__nwlog_obj();
        os_log_type_t v23 = type;
        if (!os_log_type_enabled(v22, type)) {
          goto LABEL_105;
        }
        *(_DWORD *)buf = 136446210;
        v40 = "init";
        id v24 = "%{public}s called with null objc_cls, backtrace limit exceeded";
        goto LABEL_104;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v31 = os_log_type_enabled(v22, type);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "init";
          __int16 v41 = 2082;
          v42 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s called with null objc_cls, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_105;
      }

      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "init";
        id v24 = "%{public}s called with null objc_cls, no backtrace";
LABEL_104:
        _os_log_impl(&dword_181A5C000, v22, v23, v24, buf, 0xCu);
      }
    }

void ___ZN2nw6object9class_def4initEm_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  v3 = nw::object::cls(*(uint64_t **)(a2 + 16));
  uint64_t v4 = nw::object::class_def::lookup_method(v3, nw::object::__destroy_def_instance, qword_18C45F470);
  if (v5) {
    BOOL v6 = (v5 & 1 | v4) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  int v7 = !v6;
  if (v4) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8)
  {
    uint64_t v9 = (void (*)(void *))v4;
    v10 = (void *)(a2 + (v5 >> 1));
    if ((v5 & 1) != 0) {
      uint64_t v9 = *(void (**)(void *))(*v10 + v9);
    }
    v9(v10);
    return;
  }

  nw::object::cls(*(uint64_t **)(a2 + 16));
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446466;
  size_t v20 = "bad_method_lookup";
  __int16 v21 = 2080;
  v22 = "object::destroy";
  uint64_t v11 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v11, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (os_log_s *)gLogObj;
      os_log_type_t v13 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_28;
      }
      *(_DWORD *)buf = 136446466;
      size_t v20 = "bad_method_lookup";
      __int16 v21 = 2080;
      v22 = "object::destroy";
      uint64_t v14 = "%{public}s unable to lookup %s";
      goto LABEL_27;
    }

    if (!v17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (os_log_s *)gLogObj;
      os_log_type_t v13 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_28;
      }
      *(_DWORD *)buf = 136446466;
      size_t v20 = "bad_method_lookup";
      __int16 v21 = 2080;
      v22 = "object::destroy";
      uint64_t v14 = "%{public}s unable to lookup %s, backtrace limit exceeded";
      goto LABEL_27;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = (os_log_s *)gLogObj;
    os_log_type_t v13 = type;
    BOOL v16 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446722;
        size_t v20 = "bad_method_lookup";
        __int16 v21 = 2080;
        v22 = "object::destroy";
        __int16 v23 = 2082;
        id v24 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s unable to lookup %s, dumping backtrace:%{public}s",  buf,  0x20u);
      }

      free(backtrace_string);
      goto LABEL_28;
    }

    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      size_t v20 = "bad_method_lookup";
      __int16 v21 = 2080;
      v22 = "object::destroy";
      uint64_t v14 = "%{public}s unable to lookup %s, no backtrace";
LABEL_27:
      _os_log_impl(&dword_181A5C000, v12, v13, v14, buf, 0x16u);
    }
  }

void nw::object::class_def::setup(void *a1, int64x2_t *a2)
{
  uint64_t v4 = a1[14];
  if (v4) {
    nw::object::class_def::setup(v4, a2);
  }
  unint64_t v5 = a2[2].u64[0];
  uint64_t v6 = a2[2].i64[1];
  unint64_t v7 = v5 + v6;
  unint64_t v8 = (v5 + v6) >> 8;
  uint64_t v9 = (unint64_t *)a2->i64[1];
  v10 = (unint64_t *)a2[1].i64[0];
  uint64_t v11 = (char *)&v9[v8];
  if (v10 == v9) {
    uint64_t v12 = 0LL;
  }
  else {
    uint64_t v12 = *(void *)v11 + 16LL * v7;
  }
  unint64_t v13 = a1[12];
  uint64_t v14 = a1[9];
  uint64_t v15 = v14 + 8 * (v13 >> 8);
  if (a1[10] == v14)
  {
    BOOL v16 = 0LL;
    unint64_t v18 = 0LL;
    v419 = (uint64_t *)(v14 + 8 * ((a1[13] + v13) >> 8));
  }

  else
  {
    BOOL v16 = (char *)(*(void *)v15 + 16LL * v13);
    unint64_t v17 = a1[13] + v13;
    v419 = (uint64_t *)(v14 + 8 * (v17 >> 8));
    unint64_t v18 = *v419 + 16LL * v17;
    if ((char *)v18 != v16)
    {
      unint64_t j = ((16LL * v17) >> 4) + 32 * ((void)v419 - v15) - ((uint64_t)&v16[-*(void *)v15] >> 4);
      goto LABEL_11;
    }
  }

  unint64_t j = 0LL;
LABEL_11:
  unint64_t v20 = v5 >> 8;
  __int16 v21 = (char *)&v9[v5 >> 8];
  int64_t v22 = (char *)v10 - (char *)v9;
  if (v10 == v9)
  {
    uint64_t v23 = 0LL;
    if (v12) {
      goto LABEL_13;
    }
  }

  else
  {
    uint64_t v23 = *(void *)v21 + 16LL * v5;
    if (v12 != v23)
    {
LABEL_13:
      unint64_t v24 = ((v12 - *(void *)v11) >> 4) + 32 * (v11 - v21) - ((v23 - *(void *)v21) >> 4);
      goto LABEL_16;
    }
  }

  unint64_t v24 = 0LL;
LABEL_16:
  if (v24 >= v6 - v24)
  {
    uint64_t v34 = 32 * v22 - 1;
    uint64_t v35 = (char *)v10 - (char *)v9;
    if (v10 == v9) {
      uint64_t v34 = 0LL;
    }
    unint64_t v36 = v34 - v7;
    BOOL v37 = j >= v36;
    unint64_t v38 = j - v36;
    if (v38 == 0 || !v37) {
      goto LABEL_420;
    }
    uint64_t v408 = v15;
    if (v10 == v9) {
      unint64_t v39 = v38 + 1;
    }
    else {
      unint64_t v39 = v38;
    }
    if ((_BYTE)v39) {
      unint64_t v40 = (v39 >> 8) + 1;
    }
    else {
      unint64_t v40 = v39 >> 8;
    }
    if (v40 >= v20) {
      uint64_t v15 = v5 >> 8;
    }
    else {
      uint64_t v15 = v40;
    }
    unint64_t v411 = j;
    unint64_t v412 = v24;
    if (v40 > v20)
    {
      unint64_t j = v40 - v15;
      uint64_t v41 = a2[1].i64[1] - a2->i64[0];
      uint64_t v42 = v35 >> 3;
      if (v40 - v15 > (v41 >> 3) - (v35 >> 3))
      {
        unint64_t v43 = v41 >> 2;
        if (v43 <= j + v42) {
          size_t v44 = j + v42;
        }
        else {
          size_t v44 = v43;
        }
        unint64_t v409 = v18;
        if (v44)
        {
          __int16 v45 = (unint64_t *)calloc(v44, 8uLL);
          if (!v45)
          {
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }
        }

        else
        {
          __int16 v45 = 0LL;
        }

        uint64_t v406 = v15 << 8;
        v236 = (char *)&v45[v42 - v15];
        v237 = (char *)&v45[v44];
        v10 = (unint64_t *)v236;
        while (1)
        {
          v239 = calloc(0x100uLL, 0x10uLL);
          if (!v239) {
            goto LABEL_54;
          }
          unint64_t v18 = (unint64_t)v239;
          __srcc = v45;
          if (v236 > (char *)v45)
          {
            uint64_t v240 = (v236 - (char *)v45) >> 3;
            if (v240 >= -1) {
              uint64_t v241 = v240 + 1;
            }
            else {
              uint64_t v241 = v240 + 2;
            }
            uint64_t v242 = v241 >> 1;
            v243 = &v236[-8 * (v241 >> 1)];
            v244 = v237;
            if (v237 != v236)
            {
              memmove(v243, v236, v237 - v236);
              v244 = v236;
            }

            uint64_t v238 = -v242;
            v10 = (unint64_t *)&v243[v237 - v236];
            v236 = &v244[8 * v238];
            __int16 v45 = __srcc;
            goto LABEL_329;
          }

          else {
            size_t v245 = (v237 - (char *)v45) >> 2;
          }
          v246 = (char *)calloc(v245, 8uLL);
          if (!v246) {
            goto LABEL_54;
          }
          __int16 v45 = (unint64_t *)v246;
          size_t v247 = v245 >> 2;
          v248 = (unint64_t *)&v246[8 * (v245 >> 2)];
          v10 = v248;
          int64_t v249 = v237 - v236;
          if (v237 != v236)
          {
            v10 = (unint64_t *)((char *)v248 + (v249 & 0xFFFFFFFFFFFFFFF8LL));
            unint64_t v250 = v249 - 8;
            if (v250 >= 0x38)
            {
              uint64_t v252 = 8 * v247;
              if ((unint64_t)(&v246[8 * v247] - v236) >= 0x20)
              {
                uint64_t v253 = (v250 >> 3) + 1;
                uint64_t v254 = v253 & 0x3FFFFFFFFFFFFFFCLL;
                v251 = &v248[v254];
                v255 = (__int128 *)(v236 + 16);
                v256 = &v246[v252 + 16];
                uint64_t v257 = v253 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  __int128 v258 = *v255;
                  *((_OWORD *)v256 - 1) = *(v255 - 1);
                  *(_OWORD *)v256 = v258;
                  v255 += 2;
                  v256 += 32;
                  v257 -= 4LL;
                }

                while (v257);
                if (v253 == (v253 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_352;
                }
                v236 += v254 * 8;
              }

              else
              {
                v251 = (unint64_t *)&v246[8 * (v245 >> 2)];
              }
            }

            else
            {
              v251 = (unint64_t *)&v246[8 * (v245 >> 2)];
            }

            do
            {
              unint64_t v259 = *(void *)v236;
              v236 += 8;
              *v251++ = v259;
            }

            while (v251 != v10);
          }

LABEL_352:
          v237 = &v246[8 * v245];
          if (__srcc)
          {
            v236 = &v246[8 * (v245 >> 2)];
            free(__srcc);
          }

          else
          {
            v236 = (char *)v248;
          }

                  __nwlog_obj();
                  uint64_t v138 = *((void *)handle + 9);
                  uint64_t v139 = "invalid";
                  if (v138)
                  {
                    uint64_t v140 = *(const char **)(v138 + 16);
                    if (v140) {
                      uint64_t v139 = v140;
                    }
                  }

                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v139;
                  uint64_t v141 = (char *)_os_log_send_and_compose_impl();
                  v174[0] = 16;
                  uint64_t v170 = 0;
                  if (v174[0] == 17)
                  {
                    v142 = (os_log_s *)__nwlog_obj();
                    v143 = v174[0];
                    if (!os_log_type_enabled(v142, (os_log_type_t)v174[0])) {
                      goto LABEL_381;
                    }
                    size_t v144 = *((void *)v162 + 9);
                    v145 = "invalid";
                    if (v144)
                    {
                      unint64_t v146 = *(const char **)(v144 + 16);
                      if (v146) {
                        v145 = v146;
                      }
                    }

                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v145;
                    size_t v147 = "%{public}s protocol %{public}s has invalid connected callback";
                  }

                  else if (v170)
                  {
                    uint64_t v148 = (char *)__nw_create_backtrace_string();
                    v142 = (os_log_s *)__nwlog_obj();
                    v143 = v174[0];
                    unint64_t v149 = os_log_type_enabled(v142, (os_log_type_t)v174[0]);
                    if (v148)
                    {
                      if (v149)
                      {
                        v150 = *((void *)v162 + 9);
                        uint64_t v151 = "invalid";
                        if (v150)
                        {
                          uint64_t v152 = *(const char **)(v150 + 16);
                          if (v152) {
                            uint64_t v151 = v152;
                          }
                        }

                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
                        *(_WORD *)&buf[12] = 2082;
                        *(void *)&buf[14] = v151;
                        *(_WORD *)&buf[22] = 2082;
                        v172 = v148;
                        _os_log_impl( &dword_181A5C000,  v142,  v143,  "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s",  buf,  0x20u);
                      }

                      free(v148);
                      goto LABEL_381;
                    }

                    if (!v149)
                    {
LABEL_381:
                      if (v141) {
                        free(v141);
                      }
                      goto LABEL_296;
                    }

                    uint64_t v156 = *((void *)v162 + 9);
                    __int128 v157 = "invalid";
                    if (v156)
                    {
                      uint64_t v158 = *(const char **)(v156 + 16);
                      if (v158) {
                        __int128 v157 = v158;
                      }
                    }

                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v157;
                    size_t v147 = "%{public}s protocol %{public}s has invalid connected callback, no backtrace";
                  }

                  else
                  {
                    v142 = (os_log_s *)__nwlog_obj();
                    v143 = v174[0];
                    if (!os_log_type_enabled(v142, (os_log_type_t)v174[0])) {
                      goto LABEL_381;
                    }
                    uint64_t v153 = *((void *)v162 + 9);
                    v154 = "invalid";
                    if (v153)
                    {
                      v155 = *(const char **)(v153 + 16);
                      if (v155) {
                        v154 = v155;
                      }
                    }

                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v154;
                    size_t v147 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
                  }

                  _os_log_impl(&dword_181A5C000, v142, v143, v147, buf, 0x16u);
                  goto LABEL_381;
                }
              }
            }

            __nwlog_obj();
            uint64_t v116 = *((void *)handle + 9);
            uint64_t v117 = "invalid";
            if (v116)
            {
              uint64_t v118 = *(const char **)(v116 + 16);
              if (v118) {
                uint64_t v117 = v118;
              }
            }

            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v117;
            uint64_t v119 = (char *)_os_log_send_and_compose_impl();
            v174[0] = 16;
            uint64_t v170 = 0;
            if (__nwlog_fault(v119, v174, &v170))
            {
              if (v174[0] == 17)
              {
                v120 = (os_log_s *)__nwlog_obj();
                v121 = v174[0];
                if (!os_log_type_enabled(v120, (os_log_type_t)v174[0])) {
                  goto LABEL_349;
                }
                uint64_t v122 = *((void *)v162 + 9);
                size_t v123 = "invalid";
                if (v122)
                {
                  v124 = *(const char **)(v122 + 16);
                  if (v124) {
                    size_t v123 = v124;
                  }
                }

                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v123;
                v125 = "%{public}s protocol %{public}s has invalid connected callback";
LABEL_348:
                _os_log_impl(&dword_181A5C000, v120, v121, v125, buf, 0x16u);
                goto LABEL_349;
              }

              if (!v170)
              {
                v120 = (os_log_s *)__nwlog_obj();
                v121 = v174[0];
                if (!os_log_type_enabled(v120, (os_log_type_t)v174[0])) {
                  goto LABEL_349;
                }
                uint64_t v132 = *((void *)v162 + 9);
                v133 = "invalid";
                if (v132)
                {
                  v134 = *(const char **)(v132 + 16);
                  if (v134) {
                    v133 = v134;
                  }
                }

                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v133;
                v125 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
                goto LABEL_348;
              }

              uint64_t v127 = (char *)__nw_create_backtrace_string();
              v120 = (os_log_s *)__nwlog_obj();
              v121 = v174[0];
              unint64_t v128 = os_log_type_enabled(v120, (os_log_type_t)v174[0]);
              if (!v127)
              {
                if (!v128) {
                  goto LABEL_349;
                }
                uint64_t v135 = *((void *)v162 + 9);
                __int128 v136 = "invalid";
                if (v135)
                {
                  uint64_t v137 = *(const char **)(v135 + 16);
                  if (v137) {
                    __int128 v136 = v137;
                  }
                }

                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v136;
                v125 = "%{public}s protocol %{public}s has invalid connected callback, no backtrace";
                goto LABEL_348;
              }

              if (v128)
              {
                v129 = *((void *)v162 + 9);
                uint64_t v130 = "invalid";
                if (v129)
                {
                  uint64_t v131 = *(const char **)(v129 + 16);
                  if (v131) {
                    uint64_t v130 = v131;
                  }
                }

                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_http_connect_process_response";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v130;
                *(_WORD *)&buf[22] = 2082;
                v172 = v127;
                _os_log_impl( &dword_181A5C000,  v120,  v121,  "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s",  buf,  0x20u);
              }

              free(v127);
            }

LABEL_329:
          *v10++ = v18;
          if (!--j)
          {
            unint64_t j = a2->u64[1];
            if (!v15)
            {
              unint64_t v18 = (unint64_t)v236;
LABEL_357:
              uint64_t v260 = a2[1].i64[0];
              if (v260 == j)
              {
LABEL_358:
                v261 = (void *)a2->i64[0];
                a2->i64[0] = (uint64_t)v45;
                a2->i64[1] = v18;
                a2[1].i64[0] = (uint64_t)v10;
                a2[1].i64[1] = (uint64_t)v237;
                a2[2].i64[0] -= v406;
                unint64_t v18 = v409;
                if (v261)
                {
                  free(v261);
                  v10 = (unint64_t *)a2[1].i64[0];
                }

                  v229 = (os_log_s *)__nwlog_obj();
                  v230 = type[0];
                  if (!os_log_type_enabled(v229, type[0])) {
                    goto LABEL_589;
                  }
                  v231 = *(unsigned int *)(v9 + 352);
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http1_create_connection_for_stream_if_allowed";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "http1->pending_output_handler_count";
                  *(_WORD *)&buf[22] = 2048;
                  v783 = 1LL;
                  *(_WORD *)v784 = 2048;
                  *(void *)&v784[2] = v231;
                  v232 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_588:
                  _os_log_impl(&dword_181A5C000, v229, v230, v232, buf, 0x2Au);
                  goto LABEL_589;
                }

                goto LABEL_589;
              }

    if (v182) {
      free(v182);
    }
    *(_DWORD *)(v8 + 340) = 0;
  }

  uint64_t v192 = (unsigned __int16)*v171;
  unint64_t v193 = (v192 | (*(unsigned __int8 *)(v170 + 874) << 16)) & 0xFFF7FFFF;
  unint64_t *v171 = v192;
  *(_BYTE *)(v170 + 874) = BYTE2(v193);
  if ((*(_BYTE *)(v170 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v252 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v252, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v253 = *(void *)(v170 + 488);
        uint64_t v254 = *(_DWORD *)(*(void *)(v170 + 480) + 372LL);
        v255 = *(_DWORD *)(v170 + 860);
        if (v253) {
          LODWORD(v253) = *(_DWORD *)(v253 + 424);
        }
        v256 = *(_DWORD *)(v8 + 340);
        *(_DWORD *)buf = 136448002;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v170 + 74;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&buf[24] = " ";
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v254;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v255;
        *(_WORD *)&buf[44] = 1024;
        *(_DWORD *)&buf[46] = v253;
        *(_WORD *)&buf[50] = 2048;
        *(void *)&buf[52] = v170;
        *(_WORD *)&buf[60] = 1024;
        *(_DWORD *)&buf[62] = v256;
        _os_log_impl( &dword_181A5C000,  v252,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> removed idle connection %p, now have %u idle connections",  buf,  0x42u);
      }
    }
  }

  if (*(void *)(v170 + 784))
  {
    if ((*(_BYTE *)(v170 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        uint64_t v260 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v260, OS_LOG_TYPE_DEBUG))
        {
          v261 = *(void *)(v170 + 488);
          uint64_t v262 = *(_DWORD *)(*(void *)(v170 + 480) + 372LL);
          uint64_t v263 = *(_DWORD *)(v170 + 860);
          if (v261) {
            LODWORD(v261) = *(_DWORD *)(v261 + 424);
          }
          *(_DWORD *)buf = 136447746;
          *(void *)&uint8_t buf[4] = "nw_http1_remove_idle_connection";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v170 + 74;
          *(_WORD *)&buf[22] = 2080;
          *(void *)&buf[24] = " ";
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v262;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v263;
          *(_WORD *)&buf[44] = 1024;
          *(_DWORD *)&buf[46] = v261;
          *(_WORD *)&buf[50] = 2048;
          *(void *)&buf[52] = v170;
          _os_log_impl( &dword_181A5C000,  v260,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> deactivating destroy timer for connection %p",  buf,  0x3Cu);
        }
      }
    }

    nw_queue_cancel_source(*(void *)(v170 + 784), v159);
    *(void *)(v170 + 784) = 0LL;
  }

            if (v194) {
              free(v194);
            }
            goto LABEL_206;
          }

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          *(_DWORD *)buf = 136446210;
          v364 = "nw_http1_connection_write_chunk_header";
          unint64_t v100 = (char *)_os_log_send_and_compose_impl();
          LOBYTE(__len[1]) = 16;
          type[0] = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v100, &__len[1], type))
          {
            if (LOBYTE(__len[1]) == 17)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v101 = gLogObj;
              uint64_t v102 = __len[1];
              if (os_log_type_enabled((os_log_t)gLogObj, __len[1]))
              {
                *(_DWORD *)buf = 136446210;
                v364 = "nw_http1_connection_write_chunk_header";
                uint64_t v103 = (os_log_s *)v101;
                uint64_t v104 = v102;
                v105 = "%{public}s called with null size";
LABEL_198:
                _os_log_impl(&dword_181A5C000, v103, v104, v105, buf, 0xCu);
              }
            }

            else if (type[0])
            {
              uint64_t v119 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v120 = (os_log_s *)gLogObj;
              v121 = __len[1];
              uint64_t v122 = os_log_type_enabled((os_log_t)gLogObj, __len[1]);
              if (v119)
              {
                if (v122)
                {
                  *(_DWORD *)buf = 136446466;
                  v364 = "nw_http1_connection_write_chunk_header";
                  uint64_t v365 = 2082;
                  *(void *)v366 = v119;
                  _os_log_impl( &dword_181A5C000,  v120,  v121,  "%{public}s called with null size, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v119);
                goto LABEL_199;
              }

              if (v122)
              {
                *(_DWORD *)buf = 136446210;
                v364 = "nw_http1_connection_write_chunk_header";
                uint64_t v103 = v120;
                uint64_t v104 = v121;
                v105 = "%{public}s called with null size, no backtrace";
                goto LABEL_198;
              }
            }

            else
            {
              size_t v123 = (os_log_s *)__nwlog_obj();
              v124 = __len[1];
              if (os_log_type_enabled(v123, __len[1]))
              {
                *(_DWORD *)buf = 136446210;
                v364 = "nw_http1_connection_write_chunk_header";
                uint64_t v103 = v123;
                uint64_t v104 = v124;
                v105 = "%{public}s called with null size, backtrace limit exceeded";
                goto LABEL_198;
              }
            }
          }

  if (v193) {
    free(v193);
  }
  size_t v44 = 0LL;
  unint64_t v43 = 0LL;
LABEL_60:
  nw_protocol_output_finished(v44, v43);
  __int16 v45 = a1[6];
  if (!v45)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
    v114 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(type) = 16;
    LOBYTE(v213) = 0;
    if (type == 17)
    {
      unint64_t v115 = (os_log_s *)__nwlog_obj();
      uint64_t v116 = type;
      if (!os_log_type_enabled(v115, (os_log_type_t)type)) {
        goto LABEL_338;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
      uint64_t v117 = "%{public}s called with null http1";
    }

    else if ((_BYTE)v213)
    {
      uint64_t v166 = (char *)__nw_create_backtrace_string();
      unint64_t v115 = (os_log_s *)__nwlog_obj();
      uint64_t v116 = type;
      unint64_t v167 = os_log_type_enabled(v115, (os_log_type_t)type);
      if (v166)
      {
        if (v167)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v166;
          _os_log_impl( &dword_181A5C000,  v115,  v116,  "%{public}s called with null http1, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v166);
LABEL_338:
        if (!v114) {
          return;
        }
LABEL_339:
        free(v114);
        return;
      }

      if (!v167) {
        goto LABEL_338;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
      uint64_t v117 = "%{public}s called with null http1, no backtrace";
    }

    else
    {
      unint64_t v115 = (os_log_s *)__nwlog_obj();
      uint64_t v116 = type;
      if (!os_log_type_enabled(v115, (os_log_type_t)type)) {
        goto LABEL_338;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
      uint64_t v117 = "%{public}s called with null http1, backtrace limit exceeded";
    }

                    free(v151);
                    goto LABEL_330;
                  }

LABEL_419:
                uint64_t v6 = a2[2].i64[1];
                uint64_t v9 = (unint64_t *)a2->i64[1];
                unint64_t v7 = a2[2].i64[0] + v6;
                unint64_t v8 = v7 >> 8;
                uint64_t v15 = v408;
                unint64_t j = v411;
                unint64_t v24 = v412;
LABEL_420:
                v307 = &v9[v8];
                if (v10 == v9) {
                  v308 = 0LL;
                }
                else {
                  v308 = (char *)(*v307 + 16LL * v7);
                }
                unint64_t v338 = v6 - v24;
                if (v6 - v24 >= j)
                {
                  v341 = v308;
                  v342 = &v9[v8];
                  if (!j) {
                    return;
                  }
                }

                else
                {
                  if (v338 >= j >> 1)
                  {
                    uint64_t v339 = v6 - v24 - j + ((uint64_t)(v18 - *v419) >> 4);
                    if (v339 < 1)
                    {
                      unint64_t v348 = 255 - v339;
                      unsigned __int8 v349 = ~(_BYTE)v348;
                      v419 -= v348 >> 8;
                      uint64_t v350 = *v419;
                      goto LABEL_467;
                    }

                    v419 += (unint64_t)v339 >> 8;
                    uint64_t v340 = *v419;
LABEL_456:
                    v343 = (char *)(v340 + 16LL * v339);
LABEL_468:
                    v341 = v308;
                    v342 = v307;
                  }

                  else
                  {
                    if (v338)
                    {
                      uint64_t v339 = v338 + ((uint64_t)&v16[-*(void *)v15] >> 4);
                      if (v339 >= 1)
                      {
                        v419 = (uint64_t *)(v15 + 8 * ((unint64_t)v339 >> 8));
                        uint64_t v340 = *v419;
                        goto LABEL_456;
                      }

                      unint64_t v351 = 255 - v339;
                      unsigned __int8 v349 = ~(_BYTE)v351;
                      v419 = (uint64_t *)(v15 - 8 * (v351 >> 8));
                      uint64_t v350 = *v419;
LABEL_467:
                      v343 = (char *)(v350 + 16LL * v349);
                    }

                    else
                    {
                      v419 = (uint64_t *)v15;
                      v343 = v16;
                    }

LABEL_457:
                    v344 = v419;
                    v345 = v343;
                    v342 = v307;
                    v341 = v308;
                    do
                    {
                      *v341++ = *(_OWORD *)v345;
                      if ((_OWORD *)((char *)v341 - *v342) == (_OWORD *)4096)
                      {
                        v346 = (_OWORD *)v342[1];
                        ++v342;
                        v341 = v346;
                      }

                      v345 += 16;
                      if (&v345[-*v344] == (char *)4096)
                      {
                        v347 = (char *)v344[1];
                        ++v344;
                        v345 = v347;
                      }

                      ++a2[2].i64[1];
                    }

                    while (v345 != (char *)v18);
                  }

                  unint64_t j = v338;
                  unint64_t v18 = (unint64_t)v343;
                  if (!v338) {
                    return;
                  }
                }

                uint64_t v352 = ((uint64_t)&v308[-*v307] >> 4) - j;
                if (v352 < 1)
                {
                  unint64_t v355 = 255 - v352;
                  v353 = &v307[-(v355 >> 8)];
                  v354 = (char *)(*v353 + 16LL * ~(_BYTE)v355);
                  if (v354 == v308) {
                    goto LABEL_480;
                  }
                }

                else
                {
                  v353 = &v307[(unint64_t)v352 >> 8];
                  v354 = (char *)(*v353 + 16LL * v352);
                  if (v354 == v308) {
                    goto LABEL_480;
                  }
                }

                v356 = v353;
                v357 = v354;
                do
                {
                  *v341++ = *(_OWORD *)v357;
                  if ((_OWORD *)((char *)v341 - *v342) == (_OWORD *)4096)
                  {
                    v358 = (_OWORD *)v342[1];
                    ++v342;
                    v341 = v358;
                  }

                  v357 += 16;
                  if (&v357[-*v356] == (char *)4096)
                  {
                    v359 = (char *)v356[1];
                    ++v356;
                    v357 = v359;
                  }

                  ++a2[2].i64[1];
                }

                while (v357 != v308);
LABEL_480:
                if (j >= v338) {
                  goto LABEL_523;
                }
                v360 = (char *)*v307;
                uint64_t v361 = ((uint64_t)&v308[-*v307] >> 4) - v338;
                if (v361 < 1)
                {
                  unint64_t v378 = 255 - v361;
                  v362 = &v307[-(v378 >> 8)];
                  uint64_t v363 = *v362 + 16LL * ~(_BYTE)v378;
                  if (v362 == v353) {
                    goto LABEL_513;
                  }
LABEL_483:
                  v364 = (_BYTE *)*v353;
                  if ((char *)*v353 != v354)
                  {
                    while (1)
                    {
                      uint64_t v365 = (v308 - v360) >> 4;
                      if ((v354 - v364) >> 4 < v365) {
                        uint64_t v365 = (v354 - v364) >> 4;
                      }
                      v354 -= 16 * v365;
                      v308 -= 16 * v365;
                      if (v365) {
                        memmove(v308, v354, 16 * v365);
                      }
                      if (v354 == v364) {
                        break;
                      }
                      v366 = (char *)*--v307;
                      v360 = v366;
                      v308 = v366 + 4096;
                    }

                    v360 = (char *)*v307;
                    if ((char *)(*v307 + 4096) == v308)
                    {
                      v367 = (char *)v307[1];
                      ++v307;
                      v360 = v367;
                      v308 = v367;
                    }
                  }

                  for (i = v353 - 1; i != v362; --i)
                  {
                    v369 = (_BYTE *)*i;
                    v370 = (char *)(*i + 4096);
                    while (1)
                    {
                      uint64_t v371 = (v308 - v360) >> 4;
                      if ((v370 - v369) >> 4 < v371) {
                        uint64_t v371 = (v370 - v369) >> 4;
                      }
                      v370 -= 16 * v371;
                      v308 -= 16 * v371;
                      if (v371) {
                        memmove(v308, v370, 16 * v371);
                      }
                      if (v370 == v369) {
                        break;
                      }
                      v372 = (char *)*--v307;
                      v360 = v372;
                      v308 = v372 + 4096;
                    }

                    v360 = (char *)*v307;
                    if ((char *)(*v307 + 4096) == v308)
                    {
                      v373 = (char *)v307[1];
                      ++v307;
                      v360 = v373;
                      v308 = v373;
                    }
                  }

                  v374 = (char *)(*v362 + 4096);
                  if (v374 == (char *)v363)
                  {
LABEL_523:
                    if ((uint64_t *)v15 == v419)
                    {
                      if (v16 != (char *)v18)
                      {
                        v402 = (char *)*v307;
                        v401 = (uint64_t *)(v307 - 1);
                        uint64_t v400 = (uint64_t)v402;
                        while (1)
                        {
                          uint64_t v403 = (uint64_t)&v308[-v400] >> 4;
                          v18 -= 16 * v403;
                          if (v403) {
                            memmove(&v308[-16 * v403], (const void *)v18, 16 * v403);
                          }
                          uint64_t v404 = *v401--;
                          uint64_t v400 = v404;
                          v308 = (char *)(v404 + 4096);
                        }
                      }
                    }

                    else
                    {
                      uint64_t v382 = *v419;
                      if (*v419 != v18)
                      {
                        unint64_t v383 = *v307;
                        while (1)
                        {
                          uint64_t v384 = (uint64_t)&v308[-v383] >> 4;
                          v18 -= 16 * v384;
                          v308 -= 16 * v384;
                          if (v384) {
                            memmove(v308, (const void *)v18, 16 * v384);
                          }
                          if (v18 == v382) {
                            break;
                          }
                          unint64_t v385 = *--v307;
                          unint64_t v383 = v385;
                          v308 = (char *)(v385 + 4096);
                        }

                        if ((char *)(*v307 + 4096) == v308)
                        {
                          v386 = (char *)v307[1];
                          ++v307;
                          v308 = v386;
                        }
                      }

                      v387 = v419 - 1;
                      if (v419 - 1 != (uint64_t *)v15)
                      {
                        v388 = (char *)*v307;
                        do
                        {
                          v389 = (_BYTE *)*v387;
                          v390 = (char *)(*v387 + 4096);
                          while (1)
                          {
                            uint64_t v391 = (v308 - v388) >> 4;
                            if ((v390 - v389) >> 4 < v391) {
                              uint64_t v391 = (v390 - v389) >> 4;
                            }
                            v390 -= 16 * v391;
                            v308 -= 16 * v391;
                            if (v391) {
                              memmove(v308, v390, 16 * v391);
                            }
                            if (v390 == v389) {
                              break;
                            }
                            v392 = (char *)*--v307;
                            v388 = v392;
                            v308 = v392 + 4096;
                          }

                          v388 = (char *)*v307;
                          if ((char *)(*v307 + 4096) == v308)
                          {
                            v393 = (char *)v307[1];
                            ++v307;
                            v388 = v393;
                            v308 = v393;
                          }

                          --v387;
                        }

                        while (v387 != (uint64_t *)v15);
                      }

                      v394 = (_BYTE *)(*(void *)v15 + 4096LL);
                      if (v394 != v16)
                      {
                        v397 = (char *)*v307;
                        v396 = (uint64_t *)(v307 - 1);
                        uint64_t v395 = (uint64_t)v397;
                        while (1)
                        {
                          uint64_t v398 = (uint64_t)&v308[-v395] >> 4;
                          if ((v394 - v16) >> 4 < v398) {
                            uint64_t v398 = (v394 - v16) >> 4;
                          }
                          v394 -= 16 * v398;
                          if (v398) {
                            memmove(&v308[-16 * v398], v394, 16 * v398);
                          }
                          if (v394 == v16) {
                            break;
                          }
                          uint64_t v399 = *v396--;
                          uint64_t v395 = v399;
                          v308 = (char *)(v399 + 4096);
                        }
                      }
                    }

                    return;
                  }

                  unint64_t v375 = *v307;
                  while (1)
                  {
                    uint64_t v376 = (uint64_t)&v308[-v375] >> 4;
                    v374 -= 16 * v376;
                    v308 -= 16 * v376;
                    if (v376) {
                      memmove(v308, v374, 16 * v376);
                    }
                    unint64_t v377 = *--v307;
                    unint64_t v375 = v377;
                    v308 = (char *)(v377 + 4096);
                  }
                }

                else
                {
                  v362 = &v307[(unint64_t)v361 >> 8];
                  uint64_t v363 = *v362 + 16LL * v361;
                  if (v362 != v353) {
                    goto LABEL_483;
                  }
LABEL_513:
                  while (1)
                  {
                    uint64_t v380 = (v308 - v360) >> 4;
                    v354 -= 16 * v380;
                    v308 -= 16 * v380;
                    if (v380) {
                      memmove(v308, v354, 16 * v380);
                    }
                    v379 = (char *)*--v307;
                    v360 = v379;
                    v308 = v379 + 4096;
                  }
                }

                if ((char *)(*v307 + 4096) == v308)
                {
                  v381 = (char *)v307[1];
                  ++v307;
                  v308 = v381;
                }

                goto LABEL_523;
              }

              while (2)
              {
                if ((unint64_t *)v18 != v45)
                {
LABEL_387:
                  uint64_t v281 = *(void *)(v260 - 8);
                  v260 -= 8LL;
                  *(void *)(v18 - 8) = v281;
                  v18 -= 8LL;
                  if (v260 == a2->i64[1]) {
                    goto LABEL_358;
                  }
                  continue;
                }

                break;
              }

              if (v10 < (unint64_t *)v237)
              {
                uint64_t v282 = (v237 - (char *)v10) >> 3;
                if (v282 >= -1) {
                  uint64_t v283 = v282 + 1;
                }
                else {
                  uint64_t v283 = v282 + 2;
                }
                uint64_t v284 = v283 >> 1;
                unint64_t v18 = (unint64_t)&v45[v283 >> 1];
                v285 = v45;
                if (v10 != v45)
                {
                  memmove((void *)v18, v45, (char *)v10 - (char *)v45);
                  v285 = v10;
                }

                v10 = &v285[v284];
                goto LABEL_387;
              }

              unint64_t j = (unint64_t)v45;
              else {
                size_t v286 = (v237 - (char *)v45) >> 2;
              }
              v287 = (char *)calloc(v286, 8uLL);
              if (!v287) {
                goto LABEL_54;
              }
              v288 = (unint64_t *)v287;
              unint64_t v289 = (v286 + 3) >> 2;
              unint64_t v18 = (unint64_t)&v287[8 * v289];
              v237 = &v287[8 * v286];
              unint64_t v291 = (unint64_t)v10 - j;
              BOOL v290 = v10 == (unint64_t *)j;
              v10 = (unint64_t *)v18;
              if (!v290)
              {
                v10 = (unint64_t *)(v18 + (v291 & 0xFFFFFFFFFFFFFFF8LL));
                unint64_t v292 = v291 - 8;
                v293 = (unint64_t *)&v287[8 * v289];
                v294 = (unint64_t *)j;
                if (v292 >= 0x38)
                {
                  uint64_t v295 = 8 * v289;
                  v293 = (unint64_t *)&v287[8 * v289];
                  v294 = (unint64_t *)j;
                  if ((unint64_t)v293 - j >= 0x20)
                  {
                    uint64_t v296 = (v292 >> 3) + 1;
                    uint64_t v297 = 8 * (v296 & 0x3FFFFFFFFFFFFFFCLL);
                    v293 = (unint64_t *)(v18 + v297);
                    v298 = (__int128 *)(j + 16);
                    v299 = &v287[v295 + 16];
                    uint64_t v300 = v296 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      __int128 v301 = *v298;
                      *((_OWORD *)v299 - 1) = *(v298 - 1);
                      *(_OWORD *)v299 = v301;
                      v298 += 2;
                      v299 += 32;
                      v300 -= 4LL;
                    }

                    while (v300);
                    if (v296 != (v296 & 0x3FFFFFFFFFFFFFFCLL))
                    {
                      v294 = (unint64_t *)(j + v297);
                      goto LABEL_406;
                    }

          if ((*(_BYTE *)(a1 + 292) & 0x20) != 0)
          {
            *(_BYTE *)(a1 + 292) &= ~0x20u;
            nw_protocol_ohttp_deliver_response(a1, a1 + 64);
          }

          v235 = *(char **)(a1 + 296);
          uint64_t v6 = v265;
          if (v235)
          {
            v270[0] = MEMORY[0x1895F87A8];
            v270[1] = 0x40000000LL;
            v270[2] = ___ZL34nw_protocol_ohttp_process_responseP17nw_protocol_ohttp_block_invoke_26;
            v270[3] = &__block_descriptor_tmp_27_28838;
            v270[4] = a1;
            nw_hash_table_apply(v235, (uint64_t)v270);
          }

          goto LABEL_461;
        }

        unint64_t v20 = v3 - v21;
      }

      if (v20 + v21 > v3)
      {
        if ((v18 & 1) == 0)
        {
          uint64_t v194 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v194, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_process_response";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = a1 + 349;
            *(_WORD *)&buf[22] = 2080;
            v285 = (uint64_t)" ";
            v195 = "%{public}s %{public}s%sNot enough bytes to parse complete chunk";
            goto LABEL_455;
          }
        }

        goto LABEL_457;
      }

      if ((v18 & 4) != 0 && *(void *)v17 != v38)
      {
        unint64_t v40 = *(char **)(a1 + 296);
        if (!v40) {
          goto LABEL_538;
        }
        uint64_t v278 = 0LL;
        __int128 v279 = &v278;
        unint64_t v280 = 0x2000000000LL;
        uint64_t v281 = 0LL;
        *(void *)buf = MEMORY[0x1895F87A8];
        *(void *)&buf[8] = 0x40000000LL;
        *(void *)&buf[16] = ___ZL44nw_protocol_ohttp_get_context_for_context_idP17nw_protocol_ohttpy_block_invoke;
        v285 = (uint64_t)&unk_189BBB270;
        *(void *)size_t v286 = &v278;
        *(void *)&v286[8] = v38;
        nw_hash_table_apply(v40, (uint64_t)buf);
        unint64_t v17 = v279[3];
        _Block_object_dispose(&v278, 8);
        unint64_t v18 = *(_BYTE *)(a1 + 348);
        if (!v17)
        {
LABEL_538:
          if ((v18 & 1) == 0)
          {
            v205 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v205, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_protocol_ohttp_process_response";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = a1 + 349;
              *(_WORD *)&buf[22] = 2080;
              v285 = (uint64_t)" ";
              *(_WORD *)size_t v286 = 2048;
              *(void *)&v286[2] = v38;
              _os_log_impl( &dword_181A5C000,  v205,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sFailed to find context for ID %llu",  buf,  0x2Au);
            }
          }

          uint64_t v197 = v265;
          if (gLogDatapath)
          {
            v251 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v251, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
              _os_log_impl(&dword_181A5C000, v251, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
            }
          }

          *(void *)buf = MEMORY[0x1895F87A8];
          *(void *)&buf[8] = 0x40000000LL;
          *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_28822;
          v285 = (uint64_t)&__block_descriptor_tmp_15_28823;
          *(void *)size_t v286 = a1 + 328;
          v286[8] = 1;
          uint64_t v206 = *v266;
          do
          {
            if (!v206) {
              break;
            }
            uint64_t v207 = *(void *)(v206 + 32);
            v208 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
            uint64_t v206 = v207;
          }

          while ((v208 & 1) != 0);
LABEL_392:
          if (v197)
          {
            unint64_t v193 = v197;
            goto LABEL_394;
          }

      if (!v200) {
        goto LABEL_309;
      }
      goto LABEL_458;
    }

    __nwlog_obj();
    uint64_t v130 = *(unsigned int *)(v125 + 368);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = "http1->nonresuable_connections";
    *(_WORD *)&buf[22] = 2048;
    *(void *)&buf[24] = 1LL;
    *(_WORD *)&buf[32] = 2048;
    *(void *)&buf[34] = v130;
    uint64_t v131 = (char *)_os_log_send_and_compose_impl();
    v237[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v131, v237, &type))
    {
      if (v237[0] == 17)
      {
        uint64_t v132 = (os_log_s *)__nwlog_obj();
        v133 = v237[0];
        if (os_log_type_enabled(v132, (os_log_type_t)v237[0]))
        {
          v134 = *(unsigned int *)(v125 + 368);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          *(void *)&buf[24] = 1LL;
          *(_WORD *)&buf[32] = 2048;
          *(void *)&buf[34] = v134;
          uint64_t v135 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_299:
          uint64_t v178 = v132;
          v179 = v133;
LABEL_300:
          _os_log_impl(&dword_181A5C000, v178, v179, v135, buf, 0x2Au);
        }
      }

      else if (type)
      {
        __int128 v164 = (char *)__nw_create_backtrace_string();
        uint64_t v165 = (os_log_s *)__nwlog_obj();
        uint64_t v166 = v237[0];
        unint64_t v167 = os_log_type_enabled(v165, (os_log_type_t)v237[0]);
        if (v164)
        {
          if (v167)
          {
            unsigned __int8 v168 = *(unsigned int *)(v125 + 368);
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "http1->nonresuable_connections";
            *(_WORD *)&buf[22] = 2048;
            *(void *)&buf[24] = 1LL;
            *(_WORD *)&buf[32] = 2048;
            *(void *)&buf[34] = v168;
            *(_WORD *)&buf[42] = 2082;
            *(void *)v236 = v164;
            _os_log_impl( &dword_181A5C000,  v165,  v166,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v164);
          goto LABEL_301;
        }

        if (v167)
        {
          v190 = *(unsigned int *)(v125 + 368);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          *(void *)&buf[24] = 1LL;
          *(_WORD *)&buf[32] = 2048;
          *(void *)&buf[34] = v190;
          uint64_t v135 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          uint64_t v178 = v165;
          v179 = v166;
          goto LABEL_300;
        }
      }

      else
      {
        uint64_t v132 = (os_log_s *)__nwlog_obj();
        v133 = v237[0];
        if (os_log_type_enabled(v132, (os_log_type_t)v237[0]))
        {
          uint64_t v177 = *(unsigned int *)(v125 + 368);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "http1->nonresuable_connections";
          *(_WORD *)&buf[22] = 2048;
          *(void *)&buf[24] = 1LL;
          *(_WORD *)&buf[32] = 2048;
          *(void *)&buf[34] = v177;
          uint64_t v135 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_299;
        }
      }
    }

      if (v217) {
        free(v217);
      }
LABEL_459:

      _Block_object_dispose(out, 8);
      v198 = *v114;
      uint64_t v116 = lock;
    }
  }

  if (v198 == 18)
  {
    *(void *)out = 0LL;
    *(void *)&out[8] = out;
    *(void *)&out[16] = 0x3032000000LL;
    *(void *)&out[24] = __Block_byref_object_copy__79337;
    *(void *)&out[32] = __Block_byref_object_dispose__79338;
    *(void *)&out[40] = 0LL;
    v310[0] = MEMORY[0x1895F87A8];
    v310[1] = 3221225472LL;
    v311 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_181;
    unint64_t v312 = &unk_189BC9210;
    uint64_t v314 = out;
    uint64_t v313 = v298;
    v232 = v313;
    uint64_t v233 = v310;
    os_unfair_lock_lock(v116);
    v311((uint64_t)v233);
    os_unfair_lock_unlock(v116);

    uint64_t v234 = *(void *)(*(void *)&out[8] + 40LL);
    if (v234)
    {
      v307[0] = MEMORY[0x1895F87A8];
      v307[1] = 3221225472LL;
      v307[2] = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_2_182;
      v307[3] = &unk_189BC7780;
      v308 = v232;
      v309 = v296;
      (*(void (**)(uint64_t, NWConcrete_nw_agent_client *, BOOL, void *))(v234 + 16))( v234,  v309,  v294,  v307);

      goto LABEL_481;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v235 = (id)gLogObj;
    *(_DWORD *)v413 = 136446210;
    v414 = "nw_agent_read_message_on_queue";
    v236 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    unint64_t v405 = 0;
    if (__nwlog_fault(v236, &type, &v405))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v237 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v238 = type;
        if (os_log_type_enabled(v237, type))
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_181A5C000, v237, v238, "%{public}s No handler for ADD_GROUP_MEMBERS", v413, 0xCu);
        }

        goto LABEL_478;
      }

      if (v405)
      {
        v239 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v237 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v240 = type;
        uint64_t v241 = os_log_type_enabled(v237, type);
        if (v239)
        {
          if (v241)
          {
            *(_DWORD *)v413 = 136446466;
            v414 = "nw_agent_read_message_on_queue";
            v415 = 2082;
            v416 = v239;
            _os_log_impl( &dword_181A5C000,  v237,  v240,  "%{public}s No handler for ADD_GROUP_MEMBERS, dumping backtrace:%{public}s",  v413,  0x16u);
          }

          free(v239);
          goto LABEL_479;
        }

        if (v241)
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl( &dword_181A5C000,  v237,  v240,  "%{public}s No handler for ADD_GROUP_MEMBERS, no backtrace",  v413,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v237 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v242 = type;
        if (os_log_type_enabled(v237, type))
        {
          *(_DWORD *)v413 = 136446210;
          v414 = "nw_agent_read_message_on_queue";
          _os_log_impl( &dword_181A5C000,  v237,  v242,  "%{public}s No handler for ADD_GROUP_MEMBERS, backtrace limit exceeded",  v413,  0xCu);
        }
      }

LABEL_408:
                    free((void *)j);
LABEL_409:
                    __int16 v45 = v288;
                    goto LABEL_387;
                  }
                }

                do
                {
LABEL_406:
                  unint64_t v302 = *v294++;
                  *v293++ = v302;
                }

                while (v293 != v10);
              }

              if (j) {
                goto LABEL_408;
              }
              goto LABEL_409;
            }

            while (2)
            {
              if (v10 != (unint64_t *)v237)
              {
                unint64_t v18 = (unint64_t)v236;
                goto LABEL_361;
              }

              __srcd = v45;
              if (v236 > (char *)v45)
              {
                uint64_t v262 = (v236 - (char *)v45) >> 3;
                if (v262 >= -1) {
                  uint64_t v263 = v262 + 1;
                }
                else {
                  uint64_t v263 = v262 + 2;
                }
                uint64_t v264 = v263 >> 1;
                v265 = &v236[-8 * (v263 >> 1)];
                v266 = v237;
                if (v237 != v236)
                {
                  memmove(v265, v236, v237 - v236);
                  v266 = v236;
                }

                v10 = (unint64_t *)&v265[v237 - v236];
                unint64_t v18 = (unint64_t)&v266[-8 * v264];
                goto LABEL_361;
              }

              else {
                size_t v267 = (v237 - (char *)v45) >> 2;
              }
              v268 = (char *)calloc(v267, 8uLL);
              if (!v268) {
                goto LABEL_54;
              }
              __int16 v45 = (unint64_t *)v268;
              size_t v269 = v267 >> 2;
              unint64_t v18 = (unint64_t)&v268[8 * (v267 >> 2)];
              v10 = (unint64_t *)v18;
              int64_t v270 = v237 - v236;
              if (v237 != v236)
              {
                v10 = (unint64_t *)(v18 + (v270 & 0xFFFFFFFFFFFFFFF8LL));
                unint64_t v271 = v270 - 8;
                if (v271 >= 0x38)
                {
                  uint64_t v273 = 8 * v269;
                  if ((unint64_t)(&v268[8 * v269] - v236) < 0x20)
                  {
                    v272 = (unint64_t *)&v268[8 * (v267 >> 2)];
                    goto LABEL_383;
                  }

                  uint64_t v274 = (v271 >> 3) + 1;
                  uint64_t v275 = 8 * (v274 & 0x3FFFFFFFFFFFFFFCLL);
                  v272 = (unint64_t *)(v18 + v275);
                  v276 = (__int128 *)(v236 + 16);
                  v277 = &v268[v273 + 16];
                  uint64_t v278 = v274 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    __int128 v279 = *v276;
                    *((_OWORD *)v277 - 1) = *(v276 - 1);
                    *(_OWORD *)v277 = v279;
                    v276 += 2;
                    v277 += 32;
                    v278 -= 4LL;
                  }

                  while (v278);
                  if (v274 != (v274 & 0x3FFFFFFFFFFFFFFCLL))
                  {
                    v236 += v275;
                    goto LABEL_383;
                  }
                }

                else
                {
                  v272 = (unint64_t *)&v268[8 * (v267 >> 2)];
                  do
                  {
LABEL_383:
                    unint64_t v280 = *(void *)v236;
                    v236 += 8;
                    *v272++ = v280;
                  }

                  while (v272 != v10);
                }
              }

              v237 = &v268[8 * v267];
              if (__srcd) {
                free(__srcd);
              }
LABEL_361:
              *v10++ = *(void *)j;
              unint64_t j = a2->i64[1] + 8;
              a2->i64[1] = j;
              v236 = (char *)v18;
              if (!--v15) {
                goto LABEL_357;
              }
              continue;
            }
          }
        }
      }

      if (j)
      {
        while (a2[1].i64[1] != a2[1].i64[0])
        {
          unint64_t v82 = v24;
          v83 = calloc(0x100uLL, 0x10uLL);
          if (!v83) {
            goto LABEL_54;
          }
          v420 = v83;
          std::__split_buffer<void (nw::object::**)(void),nw::c_allocator<void (nw::object::**)(void)>>::push_back( a2,  &v420);
          --j;
          unint64_t v24 = v82;
          if (!j)
          {
            v10 = (unint64_t *)a2[1].i64[0];
            goto LABEL_417;
          }
        }

        uint64_t v303 = 0LL;
        v15 += j;
        while (1)
        {
          v304 = calloc(0x100uLL, 0x10uLL);
          if (!v304) {
            goto LABEL_54;
          }
          v420 = v304;
          std::__split_buffer<void (nw::object::**)(void),nw::c_allocator<void (nw::object::**)(void)>>::push_front( (const void **)a2,  &v420);
          v10 = (unint64_t *)a2[1].i64[0];
          else {
            uint64_t v305 = 256LL;
          }
          uint64_t v306 = v305 + a2[2].i64[0];
          a2[2].i64[0] = v306;
          if (j == ++v303) {
            goto LABEL_418;
          }
        }
      }

LABEL_417:
      uint64_t v306 = a2[2].i64[0];
LABEL_418:
      a2[2].i64[0] = v306 - (v15 << 8);
      if (!v15) {
        goto LABEL_419;
      }
      while (1)
      {
        v310 = (unint64_t *)a2->i64[1];
        unint64_t v312 = *v310;
        v311 = v310 + 1;
        unint64_t j = v312;
        a2->i64[1] = (uint64_t)v311;
        if (v10 == (unint64_t *)a2[1].i64[1])
        {
          uint64_t v313 = (uint64_t)v311 - a2->i64[0];
          if ((unint64_t)v311 <= a2->i64[0])
          {
            else {
              size_t v320 = ((uint64_t)v10 - a2->i64[0]) >> 2;
            }
            v321 = calloc(v320, 8uLL);
            if (!v321) {
              goto LABEL_54;
            }
            size_t v322 = v320 >> 2;
            v323 = (unint64_t *)&v321[8 * (v320 >> 2)];
            v324 = (unint64_t *)a2->i64[1];
            v10 = v323;
            uint64_t v325 = a2[1].i64[0] - (void)v324;
            if (v325)
            {
              v10 = (unint64_t *)((char *)v323 + (v325 & 0xFFFFFFFFFFFFFFF8LL));
              unint64_t v326 = v325 - 8;
              if (v326 >= 0x38)
              {
                uint64_t v328 = 8 * v322;
                unint64_t v329 = &v321[8 * v322] - (_BYTE *)v324;
                v327 = (unint64_t *)&v321[8 * (v320 >> 2)];
                if (v329 < 0x20) {
                  goto LABEL_443;
                }
                uint64_t v330 = (v326 >> 3) + 1;
                uint64_t v331 = v330 & 0x3FFFFFFFFFFFFFFCLL;
                v327 = &v323[v331];
                v332 = (__int128 *)(v324 + 2);
                v333 = &v321[v328 + 16];
                uint64_t v334 = v330 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  __int128 v335 = *v332;
                  *(v333 - 1) = *(v332 - 1);
                  _OWORD *v333 = v335;
                  v332 += 2;
                  v333 += 2;
                  v334 -= 4LL;
                }

                while (v334);
                if (v330 != (v330 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  v324 = (unint64_t *)((char *)v324 + v331 * 8);
                  goto LABEL_443;
                }
              }

              else
              {
                v327 = (unint64_t *)&v321[8 * (v320 >> 2)];
                do
                {
LABEL_443:
                  unint64_t v336 = *v324++;
                  *v327++ = v336;
                }

                while (v327 != v10);
              }
            }

            v337 = (void *)a2->i64[0];
            a2->i64[0] = (uint64_t)v321;
            a2->i64[1] = (uint64_t)v323;
            a2[1].i64[0] = (uint64_t)v10;
            a2[1].i64[1] = (uint64_t)&v321[8 * v320];
            if (v337)
            {
              free(v337);
              v10 = (unint64_t *)a2[1].i64[0];
            }

            goto LABEL_423;
          }

          uint64_t v314 = v313 >> 3;
          BOOL v53 = v313 >> 3 < -1;
          uint64_t v315 = (v313 >> 3) + 2;
          if (v53) {
            uint64_t v316 = v315;
          }
          else {
            uint64_t v316 = v314 + 1;
          }
          uint64_t v317 = v316 >> 1;
          v318 = &v311[-(v316 >> 1)];
          int64_t v319 = (char *)v10 - (char *)v311;
          if (v10 != v311)
          {
            memmove(&v311[-(v316 >> 1)], v311, (char *)v10 - (char *)v311);
            v10 = (unint64_t *)a2->i64[1];
          }

          v309 = &v10[-v317];
          v10 = (unint64_t *)((char *)v318 + v319);
          a2->i64[1] = (uint64_t)v309;
          a2[1].i64[0] = (uint64_t)v318 + v319;
        }

    free(v159);
    goto LABEL_418;
  }

  if (!stack)
  {
    stack = v225;
    if (!stack)
    {
      __nwlog_obj();
      uint64_t v203 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
      v204 = (char *)_os_log_send_and_compose_impl();

      v245[0] = 16;
      v244 = 0;
      if (__nwlog_fault(v204, v245, &v244))
      {
        if (v245[0] == 17)
        {
          __nwlog_obj();
          v205 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v206 = v245[0];
          if (os_log_type_enabled(v205, (os_log_type_t)v245[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
            _os_log_impl(&dword_181A5C000, v205, v206, "%{public}s called with null stack", buf, 0xCu);
          }
        }

        else if (v244)
        {
          uint64_t v211 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v205 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v212 = v245[0];
          v213 = os_log_type_enabled(v205, (os_log_type_t)v245[0]);
          if (v211)
          {
            if (v213)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v211;
              _os_log_impl( &dword_181A5C000,  v205,  v212,  "%{public}s called with null stack, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v211);
            goto LABEL_509;
          }

          if (v213)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
            _os_log_impl(&dword_181A5C000, v205, v212, "%{public}s called with null stack, no backtrace", buf, 0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          v205 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v219 = v245[0];
          if (os_log_type_enabled(v205, (os_log_type_t)v245[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_proxy_config_create_with_agent_data_extended";
            _os_log_impl( &dword_181A5C000,  v205,  v219,  "%{public}s called with null stack, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

    if (!v88)
    {
LABEL_419:
      v199[3] = 0LL;
      goto LABEL_420;
    }
          }

LABEL_423:
        unint64_t *v10 = j;
        v10 = (unint64_t *)(a2[1].i64[0] + 8);
        a2[1].i64[0] = (uint64_t)v10;
        if (!--v15) {
          goto LABEL_419;
        }
      }
    }

    a2[2].i64[0] = v5 - (v15 << 8);
    if (!v15) {
      goto LABEL_419;
    }
    while (1)
    {
      v48 = (unint64_t *)a2->i64[1];
      unint64_t v50 = *v48;
      v49 = v48 + 1;
      unint64_t j = v50;
      a2->i64[1] = (uint64_t)v49;
      if (v10 == (unint64_t *)a2[1].i64[1])
      {
        uint64_t v51 = (uint64_t)v49 - a2->i64[0];
        if ((unint64_t)v49 <= a2->i64[0])
        {
          else {
            size_t v59 = ((uint64_t)v10 - a2->i64[0]) >> 2;
          }
          v60 = calloc(v59, 8uLL);
          if (!v60) {
            goto LABEL_54;
          }
          size_t v61 = v59 >> 2;
          v62 = (unint64_t *)&v60[8 * (v59 >> 2)];
          v63 = (unint64_t *)a2->i64[1];
          v10 = v62;
          uint64_t v64 = a2[1].i64[0] - (void)v63;
          if (v64)
          {
            v10 = (unint64_t *)((char *)v62 + (v64 & 0xFFFFFFFFFFFFFFF8LL));
            unint64_t v65 = v64 - 8;
            if (v65 >= 0x38)
            {
              uint64_t v67 = 8 * v61;
              unint64_t v68 = &v60[8 * v61] - (_BYTE *)v63;
              v66 = (unint64_t *)&v60[8 * (v59 >> 2)];
              if (v68 < 0x20) {
                goto LABEL_81;
              }
              uint64_t v69 = (v65 >> 3) + 1;
              uint64_t v70 = v69 & 0x3FFFFFFFFFFFFFFCLL;
              v66 = &v62[v70];
              v71 = (__int128 *)(v63 + 2);
              v72 = &v60[v67 + 16];
              uint64_t v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                __int128 v74 = *v71;
                *(v72 - 1) = *(v71 - 1);
                _OWORD *v72 = v74;
                v71 += 2;
                v72 += 2;
                v73 -= 4LL;
              }

              while (v73);
              if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
              {
                v63 = (unint64_t *)((char *)v63 + v70 * 8);
                goto LABEL_81;
              }
            }

            else
            {
              v66 = (unint64_t *)&v60[8 * (v59 >> 2)];
              do
              {
LABEL_81:
                unint64_t v75 = *v63++;
                *v66++ = v75;
              }

              while (v66 != v10);
            }
          }

          v76 = (void *)a2->i64[0];
          a2->i64[0] = (uint64_t)v60;
          a2->i64[1] = (uint64_t)v62;
          a2[1].i64[0] = (uint64_t)v10;
          a2[1].i64[1] = (uint64_t)&v60[8 * v59];
          if (v76)
          {
            free(v76);
            v10 = (unint64_t *)a2[1].i64[0];
          }

          goto LABEL_61;
        }

        uint64_t v52 = v51 >> 3;
        BOOL v53 = v51 >> 3 < -1;
        uint64_t v54 = (v51 >> 3) + 2;
        if (v53) {
          uint64_t v55 = v54;
        }
        else {
          uint64_t v55 = v52 + 1;
        }
        uint64_t v56 = v55 >> 1;
        v57 = &v49[-(v55 >> 1)];
        int64_t v58 = (char *)v10 - (char *)v49;
        if (v10 != v49)
        {
          memmove(&v49[-(v55 >> 1)], v49, (char *)v10 - (char *)v49);
          v10 = (unint64_t *)a2->i64[1];
        }

        uint64_t v47 = &v10[-v56];
        v10 = (unint64_t *)((char *)v57 + v58);
        a2->i64[1] = (uint64_t)v47;
        a2[1].i64[0] = (uint64_t)v57 + v58;
      }

uint64_t NWPBBrowseDescriptorReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x189611CF0];
  uint64_t v4 = (int)*MEMORY[0x189611CF0];
  unint64_t v5 = *(void *)(a2 + v4);
  uint64_t v6 = (int *)MEMORY[0x189611CE8];
  unint64_t v7 = *(void *)(a2 + (int)*MEMORY[0x189611CE8]);
  unint64_t v8 = (int *)MEMORY[0x189611CE0];
  if (v5 < v7)
  {
    v10 = (int *)MEMORY[0x189611CD8];
    while (1)
    {
      uint64_t v12 = (_BYTE *)(a2 + *v8);
      if (*v12) {
        return *(_BYTE *)(a2 + *v8) == 0;
      }
      if (v5 >= v7) {
        break;
      }
      char v13 = *(_BYTE *)(*(void *)(a2 + *v10) + v5);
      *(void *)(a2 + (int)v4) = v5 + 1;
      unint64_t v14 = v13 & 0x7F;
      if ((v13 & 0x80) == 0) {
        goto LABEL_39;
      }
      uint64_t v15 = *v3;
      unint64_t v16 = *(void *)(a2 + v15);
      if (v16 == -1LL || v16 >= *(void *)(a2 + *v6)) {
        goto LABEL_37;
      }
      unint64_t v17 = v16 + 1;
      int v18 = *(char *)(*(void *)(a2 + *v10) + v16);
      *(void *)(a2 + v15) = v17;
      v14 |= (unint64_t)(v18 & 0x7F) << 7;
      if ((v18 & 0x80000000) == 0) {
        goto LABEL_39;
      }
      uint64_t v19 = *v3;
      unint64_t v20 = *(void *)(a2 + v19);
      if (v20 == -1LL || v20 >= *(void *)(a2 + *v6)) {
        goto LABEL_37;
      }
      unint64_t v21 = v20 + 1;
      int v22 = *(char *)(*(void *)(a2 + *v10) + v20);
      *(void *)(a2 + v19) = v21;
      v14 |= (unint64_t)(v22 & 0x7F) << 14;
      if ((v22 & 0x80000000) == 0) {
        goto LABEL_39;
      }
      uint64_t v23 = *v3;
      unint64_t v24 = *(void *)(a2 + v23);
      if (v24 == -1LL || v24 >= *(void *)(a2 + *v6)) {
        goto LABEL_37;
      }
      unint64_t v25 = v24 + 1;
      int v26 = *(char *)(*(void *)(a2 + *v10) + v24);
      *(void *)(a2 + v23) = v25;
      v14 |= (unint64_t)(v26 & 0x7F) << 21;
      if ((v26 & 0x80000000) == 0) {
        goto LABEL_39;
      }
      uint64_t v27 = *v3;
      unint64_t v28 = *(void *)(a2 + v27);
      if (v28 == -1LL || v28 >= *(void *)(a2 + *v6)) {
        goto LABEL_37;
      }
      unint64_t v29 = v28 + 1;
      int v30 = *(char *)(*(void *)(a2 + *v10) + v28);
      *(void *)(a2 + v27) = v29;
      v14 |= (unint64_t)(v30 & 0x7F) << 28;
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_39;
      }
      uint64_t v31 = *v3;
      unint64_t v32 = *(void *)(a2 + v31);
      if (v32 == -1LL || v32 >= *(void *)(a2 + *v6)) {
        goto LABEL_37;
      }
      unint64_t v33 = v32 + 1;
      int v34 = *(char *)(*(void *)(a2 + *v10) + v32);
      *(void *)(a2 + v31) = v33;
      if ((v34 & 0x80000000) == 0) {
        goto LABEL_39;
      }
      uint64_t v35 = *v3;
      unint64_t v36 = *(void *)(a2 + v35);
      if (v36 == -1LL || v36 >= *(void *)(a2 + *v6)) {
        goto LABEL_37;
      }
      unint64_t v37 = v36 + 1;
      int v38 = *(char *)(*(void *)(a2 + *v10) + v36);
      *(void *)(a2 + v35) = v37;
      if ((v38 & 0x80000000) == 0) {
        goto LABEL_39;
      }
      uint64_t v39 = *v3;
      unint64_t v40 = *(void *)(a2 + v39);
      if (v40 == -1LL || v40 >= *(void *)(a2 + *v6)) {
        goto LABEL_37;
      }
      unint64_t v41 = v40 + 1;
      int v42 = *(char *)(*(void *)(a2 + *v10) + v40);
      *(void *)(a2 + v39) = v41;
      if ((v42 & 0x80000000) == 0) {
        goto LABEL_39;
      }
      uint64_t v43 = *v3;
      unint64_t v44 = *(void *)(a2 + v43);
      if (v44 == -1LL || v44 >= *(void *)(a2 + *v6)) {
        goto LABEL_37;
      }
      unint64_t v45 = v44 + 1;
      int v46 = *(char *)(*(void *)(a2 + *v10) + v44);
      *(void *)(a2 + v43) = v45;
      if ((v46 & 0x80000000) == 0) {
        goto LABEL_39;
      }
      uint64_t v47 = *v3;
      unint64_t v48 = *(void *)(a2 + v47);
      if (v48 == -1LL || v48 >= *(void *)(a2 + *v6))
      {
LABEL_37:
        uint64_t v12 = (_BYTE *)(a2 + *v8);
        goto LABEL_38;
      }

      unint64_t v49 = v48 + 1;
      int v50 = *(char *)(*(void *)(a2 + *v10) + v48);
      *(void *)(a2 + v47) = v49;
      if (v50 < 0)
      {
        unint64_t v14 = 0LL;
        int v51 = *(unsigned __int8 *)(a2 + *v8);
        goto LABEL_41;
      }

void ___ZL21nw_flow_service_readsP30NWConcrete_nw_endpoint_handlerP27NWConcrete_nw_endpoint_flowP16nw_flow_protocolb_block_invoke( uint64_t a1, void *a2, void *a3, BOOL a4, void *a5)
{
  uint64_t v60 = *MEMORY[0x1895F89C0];
  uint64_t v9 = a2;
  id v10 = a3;
  id v11 = a5;
  if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    unint64_t v20 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      uint64_t v35 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      unint64_t v36 = id_string;
      nw_endpoint_t v37 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      logging_description = nw_endpoint_get_logging_description(v37);
      uint64_t v23 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      unint64_t v24 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      id v25 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      if (v9) {
        size_t size = dispatch_data_get_size(v9);
      }
      else {
        size_t size = 0LL;
      }
      *(_DWORD *)buf = 136448514;
      unint64_t v41 = "nw_flow_service_reads_block_invoke";
      __int16 v42 = 2082;
      uint64_t v43 = (char *)v36;
      __int16 v44 = 2082;
      unint64_t v45 = v35;
      __int16 v46 = 2082;
      uint64_t v47 = logging_description;
      __int16 v48 = 2082;
      unint64_t v49 = v23;
      __int16 v50 = 2082;
      int v51 = v24;
      __int16 v52 = 2114;
      id v53 = v25;
      __int16 v54 = 2048;
      size_t v55 = size;
      __int16 v56 = 2048;
      id v57 = v10;
      __int16 v58 = 2114;
      id v59 = v11;
      _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Got final data length %zu, cont ext %p, error %{public}@",  buf,  0x66u);
    }
  }

  uint64_t v12 = *(void *)(a1 + 40);
  int v13 = *(unsigned __int8 *)(a1 + 48);
  unint64_t v14 = v9;
  id v15 = v10;
  id v16 = v11;
  if (v12)
  {
    if (!*(void *)(v12 + 312))
    {
      BOOL v17 = nw_array_create();
      int v18 = *(void **)(v12 + 312);
      *(void *)(v12 + 312) = v17;
    }

    nw_flow_final_read_create(v14, v15, v13 != 0, a4, v16);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
    nw_array_append(*(void *)(v12 + 312), v19);

    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  unint64_t v41 = "nw_flow_append_final_read";
  unint64_t v28 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v38 = 0;
  if (__nwlog_fault(v28, &type, &v38))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v41 = "nw_flow_append_final_read";
        _os_log_impl(&dword_181A5C000, v29, v30, "%{public}s called with null flow_protocol", buf, 0xCu);
      }
    }

    else if (v38)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = type;
      BOOL v33 = os_log_type_enabled(v29, type);
      if (backtrace_string)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v41 = "nw_flow_append_final_read";
          __int16 v42 = 2082;
          uint64_t v43 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v29,  v32,  "%{public}s called with null flow_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_32;
      }

      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v41 = "nw_flow_append_final_read";
        _os_log_impl(&dword_181A5C000, v29, v32, "%{public}s called with null flow_protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      unint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v34 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v41 = "nw_flow_append_final_read";
        _os_log_impl( &dword_181A5C000,  v29,  v34,  "%{public}s called with null flow_protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181ED880C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__16468(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__16469(uint64_t a1)
{
}

BOOL ___ZL28nw_flow_process_input_framesP30NWConcrete_nw_endpoint_handlerP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sbbb_block_invoke( uint64_t a1, unsigned __int8 *a2, void *a3)
{
  id v6 = a3;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a3);
  unint64_t v7 = *(_BYTE **)(a1 + 40);
  if (v7)
  {
    if (a2) {
      goto LABEL_3;
    }
  }

  else
  {
    __nwlog_obj();
    unint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v45, OS_LOG_TYPE_ERROR);
    __int16 v46 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v46);
    if (result)
    {
LABEL_45:
      __break(1u);
      return result;
    }

    free(v46);
    if (a2) {
      goto LABEL_3;
    }
  }

  __nwlog_obj();
  uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
  __int16 v48 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v48);
  if (result) {
    goto LABEL_45;
  }
  free(v48);
LABEL_3:
  int v8 = *a2;
  *unint64_t v7 = v8;
  if (v8)
  {
    int v9 = a2[1];
    v7[1] = v9;
    if (v9)
    {
      int v10 = a2[2];
      v7[2] = v10;
      if (v10)
      {
        int v11 = a2[3];
        v7[3] = v11;
        if (v11)
        {
          int v12 = a2[4];
          v7[4] = v12;
          if (v12)
          {
            int v13 = a2[5];
            v7[5] = v13;
            if (v13)
            {
              int v14 = a2[6];
              v7[6] = v14;
              if (v14)
              {
                int v15 = a2[7];
                v7[7] = v15;
                if (v15)
                {
                  int v16 = a2[8];
                  v7[8] = v16;
                  if (v16)
                  {
                    int v17 = a2[9];
                    v7[9] = v17;
                    if (v17)
                    {
                      int v18 = a2[10];
                      v7[10] = v18;
                      if (v18)
                      {
                        int v19 = a2[11];
                        v7[11] = v19;
                        if (v19)
                        {
                          int v20 = a2[12];
                          v7[12] = v20;
                          if (v20)
                          {
                            int v21 = a2[13];
                            v7[13] = v21;
                            if (v21)
                            {
                              int v22 = a2[14];
                              v7[14] = v22;
                              if (v22)
                              {
                                int v23 = a2[15];
                                v7[15] = v23;
                                if (v23)
                                {
                                  int v24 = a2[16];
                                  v7[16] = v24;
                                  if (v24)
                                  {
                                    int v25 = a2[17];
                                    v7[17] = v25;
                                    if (v25)
                                    {
                                      int v26 = a2[18];
                                      v7[18] = v26;
                                      if (v26)
                                      {
                                        int v27 = a2[19];
                                        v7[19] = v27;
                                        if (v27)
                                        {
                                          int v28 = a2[20];
                                          v7[20] = v28;
                                          if (v28)
                                          {
                                            int v29 = a2[21];
                                            v7[21] = v29;
                                            if (v29)
                                            {
                                              int v30 = a2[22];
                                              v7[22] = v30;
                                              if (v30)
                                              {
                                                int v31 = a2[23];
                                                v7[23] = v31;
                                                if (v31)
                                                {
                                                  int v32 = a2[24];
                                                  v7[24] = v32;
                                                  if (v32)
                                                  {
                                                    int v33 = a2[25];
                                                    v7[25] = v33;
                                                    if (v33)
                                                    {
                                                      int v34 = a2[26];
                                                      v7[26] = v34;
                                                      if (v34)
                                                      {
                                                        int v35 = a2[27];
                                                        v7[27] = v35;
                                                        if (v35)
                                                        {
                                                          int v36 = a2[28];
                                                          v7[28] = v36;
                                                          if (v36)
                                                          {
                                                            int v37 = a2[29];
                                                            v7[29] = v37;
                                                            if (v37)
                                                            {
                                                              int v38 = a2[30];
                                                              v7[30] = v38;
                                                              if (v38)
                                                              {
                                                                int v39 = a2[31];
                                                                v7[31] = v39;
                                                                if (v39)
                                                                {
                                                                  int v40 = a2[32];
                                                                  v7[32] = v40;
                                                                  if (v40)
                                                                  {
                                                                    int v41 = a2[33];
                                                                    v7[33] = v41;
                                                                    if (v41)
                                                                    {
                                                                      int v42 = a2[34];
                                                                      v7[34] = v42;
                                                                      if (v42)
                                                                      {
                                                                        int v43 = a2[35];
                                                                        v7[35] = v43;
                                                                        if (v43) {
                                                                          v7[36] = 0;
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return 0LL;
}

void ___ZL28nw_flow_process_input_framesP30NWConcrete_nw_endpoint_handlerP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sbbb_block_invoke_2( uint64_t a1)
{
}

uint64_t ___ZL28nw_flow_process_input_framesP30NWConcrete_nw_endpoint_handlerP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sbbb_block_invoke_79( uint64_t a1, void *a2)
{
  v3 = a2;
  uint64_t v4 = v3;
  if (*(void *)(*(void *)(a1 + 48) + 232LL))
  {
    if (*(void *)(*(void *)(a1 + 32) + 768LL))
    {
      nw_protocol_definition_t v5 = nw_protocol_metadata_copy_definition(v3);
      BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v5, *(void *)(*(void *)(a1 + 32) + 768LL));

      if (is_equal_unsafe) {
        nw_protocol_metadata_set_original(v4, *(void **)(*(void *)(a1 + 48) + 232LL));
      }
    }
  }

  nw_content_context_set_metadata_for_protocol(*(nw_content_context_t *)(a1 + 40), v4);

  return 1LL;
}

void sub_181ED8C78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL28nw_flow_process_input_framesP30NWConcrete_nw_endpoint_handlerP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sbbb_block_invoke_81( uint64_t a1)
{
}

void ___ZL28nw_flow_process_input_framesP30NWConcrete_nw_endpoint_handlerP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sbbb_block_invoke_2_82( uint64_t a1)
{
}

uint64_t ___ZL28nw_flow_process_input_framesP30NWConcrete_nw_endpoint_handlerP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sbbb_block_invoke_83( uint64_t a1, uint64_t a2)
{
  return 1LL;
}

NWConcrete_nw_flow_final_read *nw_flow_final_read_create(void *a1, void *a2, BOOL a3, BOOL a4, void *a5)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  id v10 = a1;
  id v11 = a2;
  id v12 = a5;
  int v13 = objc_alloc(&OBJC_CLASS___NWConcrete_nw_flow_final_read);
  id v25 = v10;
  id v26 = v11;
  id v14 = v12;
  if (!v13) {
    goto LABEL_4;
  }
  v29.receiver = v13;
  v29.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_flow_final_read;
  int v15 = (NWConcrete_nw_flow_final_read *)objc_msgSendSuper2(&v29, sel_init);
  int v13 = v15;
  if (v15)
  {
    objc_storeStrong((id *)&v15->content, a1);
    objc_storeStrong((id *)&v13->content_context, a2);
    v13->receive_single_message = a3;
    v13->is_complete = a4;
    objc_storeStrong((id *)&v13->error, a5);
    goto LABEL_4;
  }

  __nwlog_obj();
  int v17 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v31 = "-[NWConcrete_nw_flow_final_read initWithContent:contentContext:receiveSingleMessage:isComplete:error:]";
  int v18 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v27 = 0;
  if ((__nwlog_fault(v18, &type, &v27) & 1) != 0)
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        int v31 = "-[NWConcrete_nw_flow_final_read initWithContent:contentContext:receiveSingleMessage:isComplete:error:]";
        _os_log_impl(&dword_181A5C000, v19, v20, "%{public}s [super init] failed", buf, 0xCu);
      }
    }

    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      BOOL v23 = os_log_type_enabled(v19, type);
      if (backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          int v31 = "-[NWConcrete_nw_flow_final_read initWithContent:contentContext:receiveSingleMessage:isComplete:error:]";
          __int16 v32 = 2082;
          int v33 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v19,  v22,  "%{public}s [super init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        int v31 = "-[NWConcrete_nw_flow_final_read initWithContent:contentContext:receiveSingleMessage:isComplete:error:]";
        _os_log_impl(&dword_181A5C000, v19, v22, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        int v31 = "-[NWConcrete_nw_flow_final_read initWithContent:contentContext:receiveSingleMessage:isComplete:error:]";
        _os_log_impl(&dword_181A5C000, v19, v24, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

void sub_181ED9038( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL29nw_flow_prepare_output_framesP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sjP30nw_protocol_message_properties_block_invoke( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5 = *(_DWORD *)(a1 + 56) - *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (v5)
  {
    unint64_t v7 = *(void *)(a1 + 40);
    if (a5 + a3 > v7)
    {
      unint64_t v8 = v7 - a3;
      if (v7 < a3) {
        unint64_t v8 = 0LL;
      }
      else {
        size_t v9 = v5;
      }
      memcpy((void *)(*(void *)(a1 + 48) + a3 - v7 + v8), (const void *)(a4 + v8), v9);
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += v9;
    }
  }

  return 1LL;
}

void ___ZL29nw_flow_prepare_output_framesP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sjP30nw_protocol_message_properties_block_invoke_85( uint64_t a1, int a2, nw_protocol_metadata *object)
{
}

uint64_t ___ZL29nw_flow_prepare_output_framesP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sjP30nw_protocol_message_properties_block_invoke_87( uint64_t a1, uint64_t a2)
{
  return 1LL;
}

uint64_t ___ZL28nw_flow_handle_send_completeP30NWConcrete_nw_endpoint_handlerP27NWConcrete_nw_endpoint_flowP16nw_flow_protocol_block_invoke( uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t nw_flow_replay_add_candidate_output_handler(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v142 = *MEMORY[0x1895F89C0];
  unsigned int v5 = a1;
  id v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v127 = "nw_endpoint_handler_get_mode";
    unint64_t v68 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v124 = 0;
    if (__nwlog_fault(v68, &type, &v124))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v70 = type;
        if (os_log_type_enabled(v69, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v127 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_181A5C000, v69, v70, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v124)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v76 = type;
        BOOL v77 = os_log_type_enabled(v69, type);
        if (backtrace_string)
        {
          if (v77)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v127 = "nw_endpoint_handler_get_mode";
            __int16 v128 = 2082;
            v129 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v69,  v76,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_134;
        }

        if (v77)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v127 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_181A5C000, v69, v76, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v100 = type;
        if (os_log_type_enabled(v69, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v127 = "nw_endpoint_handler_get_mode";
          _os_log_impl( &dword_181A5C000,  v69,  v100,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

LABEL_199:
    if (v85) {
      free(v85);
    }
    goto LABEL_53;
  }

  id v11 = (void *)(a2 + 96);
  if (a2 + 96 == v10)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v17 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    uint64_t v127 = "nw_protocol_utilities_add_input_handler";
    __int16 v128 = 2048;
    v129 = v11;
    int v18 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v124 = 0;
    if (__nwlog_fault((const char *)v18, &type, &v124))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v19 = (os_log_s *)(id)gLogObj;
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v127 = "nw_protocol_utilities_add_input_handler";
          __int16 v128 = 2048;
          v129 = v11;
          _os_log_impl(&dword_181A5C000, v19, v20, "%{public}s Cannot add input handler %p to itself", buf, 0x16u);
        }
      }

      else if (v124)
      {
        os_log_type_t v22 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v19 = (os_log_s *)(id)gLogObj;
        os_log_type_t v23 = type;
        BOOL v24 = os_log_type_enabled(v19, type);
        if (v22)
        {
          if (v24)
          {
            *(_DWORD *)buf = 136446722;
            uint64_t v127 = "nw_protocol_utilities_add_input_handler";
            __int16 v128 = 2048;
            v129 = v11;
            __int16 v130 = 2082;
            uint64_t v131 = v22;
            _os_log_impl( &dword_181A5C000,  v19,  v23,  "%{public}s Cannot add input handler %p to itself, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v22);
          if (!v18) {
            goto LABEL_53;
          }
LABEL_52:
          free(v18);
          goto LABEL_53;
        }

        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v127 = "nw_protocol_utilities_add_input_handler";
          __int16 v128 = 2048;
          v129 = v11;
          _os_log_impl( &dword_181A5C000,  v19,  v23,  "%{public}s Cannot add input handler %p to itself, no backtrace",  buf,  0x16u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v19 = (os_log_s *)(id)gLogObj;
        os_log_type_t v35 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v127 = "nw_protocol_utilities_add_input_handler";
          __int16 v128 = 2048;
          v129 = v11;
          _os_log_impl( &dword_181A5C000,  v19,  v35,  "%{public}s Cannot add input handler %p to itself, backtrace limit exceeded",  buf,  0x16u);
        }
      }
    }

    if (!v18) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }

  id v12 = *(void **)(a2 + 120);
  if (!v12 || !*v12)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v21 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v127 = "nw_protocol_utilities_add_input_handler";
      __int16 v128 = 2048;
      v129 = (void *)(a2 + 96);
      _os_log_impl( &dword_181A5C000,  v21,  OS_LOG_TYPE_ERROR,  "%{public}s Unable to invoke add_input_handler on protocol %p because it is not valid",  buf,  0x16u);
    }

    goto LABEL_53;
  }

  if ((nw_protocol_add_input_handler(a2 + 96, v10) & 1) == 0)
  {
LABEL_53:
    int v43 = v6;
    BOOL v44 = (*((_BYTE *)v43 + 268) & 0x20) == 0;

    if (v44)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      unint64_t v45 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        __int16 v46 = v43;

        uint64_t v47 = v46;
        BOOL v48 = (*((_BYTE *)v43 + 268) & 1) == 0;

        if (v48) {
          unint64_t v49 = "";
        }
        else {
          unint64_t v49 = "dry-run ";
        }
        nw_endpoint_t v50 = nw_endpoint_handler_copy_endpoint(v47);
        logging_description = nw_endpoint_get_logging_description(v50);
        __int16 v52 = v47;
        id v53 = v52;
        uint64_t v54 = v52[30];
        else {
          size_t v55 = off_189BBBBF0[v54];
        }
        size_t v123 = v55;

        __int16 v56 = v53;
        id v57 = v56;
        __int16 v58 = "path";
        switch(v6->mode)
        {
          case 0:
            break;
          case 1:
            __int16 v58 = "resolver";
            break;
          case 2:
            __int16 v58 = nw_endpoint_flow_mode_string(v56[31]);
            break;
          case 3:
            __int16 v58 = "proxy";
            break;
          case 4:
            __int16 v58 = "fallback";
            break;
          case 5:
            __int16 v58 = "transform";
            break;
          default:
            __int16 v58 = "unknown-mode";
            break;
        }

        v121 = v45;
        id v59 = v57;
        os_unfair_lock_lock((os_unfair_lock_t)v59 + 28);
        id v60 = v59[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v59 + 28);

        id_str = v46->id_str;
        id v62 = v60;
        v63 = v62;
        uint64_t v64 = *((void *)v9 + 94);
        unint64_t v65 = "invalid";
        if (v64)
        {
          v66 = *(const char **)(v64 + 16);
          if (v66) {
            unint64_t v65 = v66;
          }
        }

        *(_DWORD *)buf = 136448002;
        uint64_t v127 = "nw_flow_replay_add_candidate_output_handler";
        __int16 v128 = 2082;
        v129 = id_str;
        __int16 v130 = 2082;
        uint64_t v131 = v49;
        __int16 v132 = 2082;
        v133 = (void *)logging_description;
        __int16 v134 = 2082;
        unint64_t v45 = v121;
        uint64_t v135 = v123;
        __int16 v136 = 2082;
        uint64_t v137 = v58;
        __int16 v138 = 2114;
        id v139 = v62;
        __int16 v140 = 2082;
        *(void *)uint64_t v141 = v65;
        _os_log_impl( &dword_181A5C000,  v121,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to attach protocol %{p ublic}s to replay protocol",  buf,  0x52u);
      }
    }

    goto LABEL_75;
  }

  uint64_t internal = *(void *)(a2 + 288);
  if (!internal)
  {
    uint64_t internal = nw_hash_table_create_internal( 5u,  8,  (const void *(*)(const void *, unsigned int *))nw_replay_hash_get_key,  (unsigned int (*)(const void *, unsigned int))nw_replay_hash_key_hash,  (BOOL (*)(const void *, const void *, unsigned int))nw_replay_hash_matches_key,  (void (*)(void *))nw_replay_hash_release);
    *(void *)(a2 + 288) = internal;
  }

  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  BOOL v14 = nw_hash_table_add_object(internal, a3, (char *)&type);
  if (type == OS_LOG_TYPE_DEFAULT)
  {
    id v25 = v6;
    BOOL v26 = (*((_BYTE *)v25 + 268) & 0x20) == 0;

    if (v26)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      char v27 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        id_string = nw_endpoint_handler_get_id_string(v25);
        objc_super v29 = nw_endpoint_handler_dry_run_string(v25);
        uint64_t v118 = v9;
        nw_endpoint_t v30 = nw_endpoint_handler_copy_endpoint(v25);
        int v31 = nw_endpoint_get_logging_description(v30);
        __int16 v32 = nw_endpoint_handler_state_string(v25);
        int v33 = nw_endpoint_handler_mode_string(v25);
        id v34 = nw_endpoint_handler_copy_current_path(v25);
        *(_DWORD *)buf = 136448258;
        uint64_t v127 = "nw_flow_replay_add_candidate_output_handler";
        __int16 v128 = 2082;
        v129 = (void *)id_string;
        __int16 v130 = 2082;
        uint64_t v131 = v29;
        __int16 v132 = 2082;
        v133 = (void *)v31;
        __int16 v134 = 2082;
        uint64_t v135 = v32;
        __int16 v136 = 2082;
        uint64_t v137 = v33;
        __int16 v138 = 2114;
        id v139 = v34;
        __int16 v140 = 1042;
        *(_DWORD *)uint64_t v141 = 16;
        *(_WORD *)&v141[4] = 2098;
        *(void *)&v141[6] = a3;
        _os_log_impl( &dword_181A5C000,  v27,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Replay already has output han dler registered for %{public,uuid_t}.16P",  buf,  0x58u);

        size_t v9 = v118;
      }
    }

    goto LABEL_75;
  }

  uint64_t v15 = v14;
  *(void *)nw_hash_node_get_extra(v14) = 0LL;
  if ((nw_protocol_add_input_handler(a3, a2 + 96) & 1) == 0)
  {
    int v36 = v6;
    BOOL v37 = (*((_BYTE *)v36 + 268) & 0x20) == 0;

    if (v37)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      int v38 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        int v39 = nw_endpoint_handler_get_id_string(v36);
        uint64_t v119 = v9;
        v120 = nw_endpoint_handler_dry_run_string(v36);
        nw_endpoint_t v122 = nw_endpoint_handler_copy_endpoint(v36);
        uint64_t v117 = nw_endpoint_get_logging_description(v122);
        int v40 = nw_endpoint_handler_state_string(v36);
        int v41 = nw_endpoint_handler_mode_string(v36);
        id v42 = nw_endpoint_handler_copy_current_path(v36);
        *(_DWORD *)buf = 136448258;
        uint64_t v127 = "nw_flow_replay_add_candidate_output_handler";
        __int16 v128 = 2082;
        v129 = (void *)v39;
        __int16 v130 = 2082;
        uint64_t v131 = v120;
        __int16 v132 = 2082;
        v133 = (void *)v117;
        __int16 v134 = 2082;
        uint64_t v135 = v40;
        __int16 v136 = 2082;
        uint64_t v137 = v41;
        __int16 v138 = 2114;
        id v139 = v42;
        __int16 v140 = 2048;
        *(void *)uint64_t v141 = a2 + 96;
        *(_WORD *)&v141[8] = 2048;
        *(void *)&v141[10] = a3;
        _os_log_impl( &dword_181A5C000,  v38,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Unable to add input handler u sing replay protocol %p and protocol %p",  buf,  0x5Cu);

        size_t v9 = v119;
      }
    }

    nw_hash_table_remove_node(*(void *)(a2 + 288), v15);
LABEL_75:
    uint64_t v16 = 0LL;
    goto LABEL_76;
  }

  nw_flow_replay_send_initial_data_to_candidates(v6, (nw_flow_protocol *)a2);
  uint64_t v16 = 1LL;
LABEL_76:

LABEL_172:
  return v16;
}

    if (v75) {
      free(v75);
    }
    goto LABEL_84;
  }

        free((void *)v109);
        goto LABEL_200;
      }

      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
      os_log_type_t v109 = _os_log_send_and_compose_impl();
      uint64_t v184 = OS_LOG_TYPE_ERROR;
      unint64_t v183 = 0;
      if (v184 == OS_LOG_TYPE_FAULT)
      {
        char v124 = (os_log_s *)__nwlog_obj();
        v125 = v184;
        if (os_log_type_enabled(v124, v184))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
          size_t v126 = v124;
          uint64_t v127 = v125;
          __int16 v128 = "%{public}s called with null webtransport_stream";
          goto LABEL_215;
        }

        free((void *)v109);
        goto LABEL_200;
      }

      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
      os_log_type_t v109 = _os_log_send_and_compose_impl();
      uint64_t v184 = OS_LOG_TYPE_ERROR;
      unint64_t v183 = 0;
      if (v184 == OS_LOG_TYPE_FAULT)
      {
        char v124 = (os_log_s *)__nwlog_obj();
        v125 = v184;
        if (os_log_type_enabled(v124, v184))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_stream_destroy";
          size_t v126 = v124;
          uint64_t v127 = v125;
          __int16 v128 = "%{public}s called with null webtransport_stream";
          goto LABEL_215;
        }

                if (v95) {
                  free(v95);
                }
                id v11 = v1042;
                *(_DWORD *)(v1042 + 336) = 0;
                uint64_t v15 = &qword_18C45F000;
                uint64_t v81 = v93;
                v85 = (void *)(v16 + 632);
                goto LABEL_202;
              }

              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
              v556 = (char *)_os_log_send_and_compose_impl();
              v1065[0] = 16;
              aBlock[0] = 0;
              if (v1065[0] == 17)
              {
                v557 = (os_log_s *)__nwlog_obj();
                v558 = v1065[0];
                if (!os_log_type_enabled(v557, (os_log_type_t)v1065[0])) {
                  goto LABEL_1280;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
                v559 = "%{public}s called with null http1_connection";
                goto LABEL_1279;
              }

              if (!aBlock[0])
              {
                v557 = (os_log_s *)__nwlog_obj();
                v558 = v1065[0];
                if (!os_log_type_enabled(v557, (os_log_type_t)v1065[0])) {
                  goto LABEL_1280;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
                v559 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                goto LABEL_1279;
              }

              v611 = (char *)__nw_create_backtrace_string();
              v557 = (os_log_s *)__nwlog_obj();
              v558 = v1065[0];
              v612 = os_log_type_enabled(v557, (os_log_type_t)v1065[0]);
              if (v611)
              {
                if (v612)
                {
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v611;
                  _os_log_impl( &dword_181A5C000,  v557,  v558,  "%{public}s called with null http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v611);
                id v11 = v1042;
                if (!v556) {
                  goto LABEL_114;
                }
LABEL_1281:
                free(v556);
                goto LABEL_114;
              }

              id v11 = v1042;
              if (v612)
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
                v559 = "%{public}s called with null http1_connection, no backtrace";
LABEL_1279:
                _os_log_impl(&dword_181A5C000, v557, v558, v559, buf, 0xCu);
              }
            }

            else
            {
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
              v556 = (char *)_os_log_send_and_compose_impl();
              v1065[0] = 16;
              aBlock[0] = 0;
              if (v1065[0] == 17)
              {
                v557 = (os_log_s *)__nwlog_obj();
                v558 = v1065[0];
                if (!os_log_type_enabled(v557, (os_log_type_t)v1065[0])) {
                  goto LABEL_1280;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
                v559 = "%{public}s called with null http1_stream->protocol_http1";
                goto LABEL_1279;
              }

              if (!aBlock[0])
              {
                v557 = (os_log_s *)__nwlog_obj();
                v558 = v1065[0];
                if (!os_log_type_enabled(v557, (os_log_type_t)v1065[0])) {
                  goto LABEL_1280;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
                v559 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
                goto LABEL_1279;
              }

              v609 = (char *)__nw_create_backtrace_string();
              v557 = (os_log_s *)__nwlog_obj();
              v558 = v1065[0];
              v610 = os_log_type_enabled(v557, (os_log_type_t)v1065[0]);
              if (!v609)
              {
                id v11 = v1042;
                if (!v610) {
                  goto LABEL_1280;
                }
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
                v559 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
                goto LABEL_1279;
              }

              if (v610)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v609;
                _os_log_impl( &dword_181A5C000,  v557,  v558,  "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v609);
              id v11 = v1042;
            }

          if (v100) {
            free(v100);
          }
          os_log_type_t v89 = v11;
          size_t v97 = 0;
          os_log_type_t v98 = 2LL;
          size_t v9 = v348;
          goto LABEL_202;
        }

        if (g_channel_check_validity(v11, *(void *)(v11 + 88)))
        {
          os_log_type_t v76 = *(void *)(v11 + 112);
          goto LABEL_130;
        }
      }

      BOOL v77 = 0LL;
      uint64_t v78 = *(void *)(v11 + 64);
      if (v78) {
        goto LABEL_131;
      }
      goto LABEL_143;
    }

  if (v66) {
    free(v66);
  }
}

              if (!v83) {
                goto LABEL_212;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
              unint64_t v75 = "%{public}s called with null http1, no backtrace";
              goto LABEL_201;
            }

      if (!v56) {
        goto LABEL_42;
      }
      goto LABEL_200;
    }

    if ((*v5 & 0x800) == 0)
    {
      if (gLogDatapath)
      {
        uint64_t v64 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v65 = *(_DWORD *)(*((void *)handle + 42) + 1280LL);
          v66 = *((void *)handle + 30);
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_connect";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = handle + 636;
          *(_WORD *)&buf[22] = 2080;
          BOOL v96 = " ";
          LOWORD(v97) = 1024;
          *(_DWORD *)((char *)&v97 + 2) = v65;
          HIWORD(v97) = 2048;
          os_log_type_t v98 = v66;
          BOOL v99 = 2048;
          os_log_type_t v100 = v66;
          _os_log_impl( &dword_181A5C000,  v64,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> stream %llu is already connected",  buf,  0x3Au);
        }
      }
    }

    callbacks = a2->callbacks;
    if (callbacks)
    {
      connected = (void (*)(nw_protocol *, nw_protocol *))callbacks->connected;
      if (connected)
      {
        connected(a2, a1);
        return 1LL;
      }
    }

    __nwlog_obj();
    identifier = a2->identifier;
    if (!identifier) {
      identifier = (nw_protocol_identifier *)"invalid";
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_connect";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = identifier;
    __int16 v46 = (char *)_os_log_send_and_compose_impl();
    v101[0] = 16;
    LOBYTE(v91) = 0;
    if (__nwlog_fault(v46, v101, &v91))
    {
      if (v101[0] == 17)
      {
        uint64_t v47 = (os_log_s *)__nwlog_obj();
        BOOL v48 = v101[0];
        if (!os_log_type_enabled(v47, (os_log_type_t)v101[0])) {
          goto LABEL_170;
        }
        unint64_t v49 = a2->identifier;
        if (!v49) {
          unint64_t v49 = (nw_protocol_identifier *)"invalid";
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_connect";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v49;
        nw_endpoint_t v50 = "%{public}s protocol %{public}s has invalid connected callback";
        goto LABEL_169;
      }

      if (!(_BYTE)v91)
      {
        uint64_t v47 = (os_log_s *)__nwlog_obj();
        BOOL v48 = v101[0];
        if (!os_log_type_enabled(v47, (os_log_type_t)v101[0])) {
          goto LABEL_170;
        }
        os_log_type_t v76 = a2->identifier;
        if (!v76) {
          os_log_type_t v76 = (nw_protocol_identifier *)"invalid";
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_connect";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v76;
        nw_endpoint_t v50 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
        goto LABEL_169;
      }

      uint64_t v67 = (char *)__nw_create_backtrace_string();
      uint64_t v47 = (os_log_s *)__nwlog_obj();
      BOOL v48 = v101[0];
      unint64_t v68 = os_log_type_enabled(v47, (os_log_type_t)v101[0]);
      if (v67)
      {
        if (v68)
        {
          uint64_t v69 = a2->identifier;
          if (!v69) {
            uint64_t v69 = (nw_protocol_identifier *)"invalid";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_connect";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v69;
          *(_WORD *)&buf[22] = 2082;
          BOOL v96 = v67;
          _os_log_impl( &dword_181A5C000,  v47,  v48,  "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v67);
        goto LABEL_170;
      }

      if (v68)
      {
        os_log_type_t v83 = a2->identifier;
        if (!v83) {
          os_log_type_t v83 = (nw_protocol_identifier *)"invalid";
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_connect";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v83;
        nw_endpoint_t v50 = "%{public}s protocol %{public}s has invalid connected callback, no backtrace";
LABEL_169:
        _os_log_impl(&dword_181A5C000, v47, v48, v50, buf, 0x16u);
      }
    }

          if (*((_DWORD *)v313 + 6)) {
            goto LABEL_284;
          }
          v175 = (*(_WORD *)(v14 + 188) & 0x800) != 0 && v235 == 0;
          __int128 v176 = !v175 && (*(_WORD *)(v14 + 188) & 0x1000) == 0;
          if (v176 || !*(void *)(v14 + 112) || (*(_WORD *)(v14 + 188) & 0x8000) != 0) {
            goto LABEL_284;
          }
          if (((*(unsigned __int16 *)(v14 + 188) | (*(unsigned __int8 *)(v14 + 190) << 16)) & 0x80000) == 0
            && gLogDatapath)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            v225 = (os_log_s *)gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v227 = *(_DWORD *)(v14 + 176);
              v226 = *(_DWORD *)(v14 + 180);
              *(_DWORD *)buf = 136447234;
              uint64_t v317 = "nw_protocol_http2_get_input_frames";
              v318 = 2082;
              int64_t v319 = (const char *)(v14 + 191);
              size_t v320 = 2080;
              v321 = (uint64_t)" ";
              size_t v322 = 1024;
              *(_DWORD *)v323 = v226;
              *(_WORD *)&v323[4] = 1024;
              *(_DWORD *)&v323[6] = v227;
              _os_log_impl( &dword_181A5C000,  v225,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> no frames to return, adding metadata only frame",  buf,  0x2Cu);
            }
          }

          *(_WORD *)(v14 + 188) |= 0x8000u;
          input_frame = http2_create_input_frame((uint64_t)handle, v14, 0LL);
          if (!input_frame)
          {
LABEL_284:
            if (((*(unsigned __int16 *)(v14 + 188) | (*(unsigned __int8 *)(v14 + 190) << 16)) & 0x80000) == 0
              && gLogDatapath)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              uint64_t v218 = (os_log_s *)gconnectionLogObj;
              if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v220 = *(_DWORD *)(v14 + 176);
                uint64_t v219 = *(_DWORD *)(v14 + 180);
                v221 = *((_DWORD *)v313 + 6);
                v222 = *((_DWORD *)v309 + 6);
                *(_DWORD *)buf = 136447746;
                uint64_t v317 = "nw_protocol_http2_get_input_frames";
                v318 = 2082;
                int64_t v319 = (const char *)(v14 + 191);
                size_t v320 = 2080;
                v321 = (uint64_t)" ";
                size_t v322 = 1024;
                *(_DWORD *)v323 = v219;
                *(_WORD *)&v323[4] = 1024;
                *(_DWORD *)&v323[6] = v220;
                *(_WORD *)&v323[10] = 1024;
                *(_DWORD *)&v323[12] = v221;
                *(_WORD *)&v323[16] = 1024;
                *(_DWORD *)&v323[18] = v222;
                _os_log_impl( &dword_181A5C000,  v218,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> returning %u frames (%u total bytes)",  buf,  0x38u);
              }
            }

            int v21 = *((unsigned int *)v313 + 6);
            goto LABEL_287;
          }

          uint64_t v178 = input_frame;
          v179 = *(nw_protocol_metadata **)(v14 + 112);
          uint64_t v180 = *(unsigned __int16 *)(v14 + 188) | (*(unsigned __int8 *)(v14 + 190) << 16);
          if (v179)
          {
            v181 = (*(_WORD *)(v14 + 188) & 0x1000) != 0 && *(void *)v14 == 0LL;
            if ((v180 & 0x80000) == 0 && gLogDatapath)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              v231 = (os_log_s *)gconnectionLogObj;
              v232 = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
              v179 = *(nw_protocol_metadata **)(v14 + 112);
              if (v232)
              {
                uint64_t v234 = *(_DWORD *)(v14 + 176);
                uint64_t v233 = *(_DWORD *)(v14 + 180);
                *(_DWORD *)buf = 136448258;
                uint64_t v317 = "nw_protocol_http2_get_input_frames";
                v318 = 2082;
                int64_t v319 = (const char *)(v14 + 191);
                size_t v320 = 2080;
                v321 = (uint64_t)" ";
                size_t v322 = 1024;
                *(_DWORD *)v323 = v233;
                *(_WORD *)&v323[4] = 1024;
                *(_DWORD *)&v323[6] = v234;
                *(_WORD *)&v323[10] = 2048;
                *(void *)&v323[12] = v179;
                *(_WORD *)&v323[20] = 1024;
                *(_DWORD *)&v323[22] = v234;
                *(_WORD *)&v323[26] = 2048;
                *(void *)&v323[28] = v178;
                v324 = 1024;
                uint64_t v325 = v181;
                _os_log_impl( &dword_181A5C000,  v231,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> setting metadata %p from stream %d on frame %p, complete %u",  buf,  0x4Cu);
                v179 = *(nw_protocol_metadata **)(v14 + 112);
              }
            }

            nw_frame_set_metadata(v178, v179, 1, v181);
            if (v181) {
              v190 = 0x80;
            }
            else {
              v190 = 0;
            }
            *(_BYTE *)(v178 + 186) = v190 & 0x80 | *(_BYTE *)(v178 + 186) & 0x7F;
          }

          else if ((v180 & 0x80000) == 0 && gLogDatapath)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            uint64_t v187 = (os_log_s *)gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
            {
              v189 = *(_DWORD *)(v14 + 176);
              uint64_t v188 = *(_DWORD *)(v14 + 180);
              *(_DWORD *)buf = 136447746;
              uint64_t v317 = "nw_protocol_http2_get_input_frames";
              v318 = 2082;
              int64_t v319 = (const char *)(v14 + 191);
              size_t v320 = 2080;
              v321 = (uint64_t)" ";
              size_t v322 = 1024;
              *(_DWORD *)v323 = v188;
              *(_WORD *)&v323[4] = 1024;
              *(_DWORD *)&v323[6] = v189;
              *(_WORD *)&v323[10] = 1024;
              *(_DWORD *)&v323[12] = v189;
              *(_WORD *)&v323[16] = 2048;
              *(void *)&v323[18] = v178;
              _os_log_impl( &dword_181A5C000,  v187,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> stream %d has no metadata to set on frame %p",  buf,  0x3Cu);
            }
          }

          *(void *)(v178 + 32) = 0LL;
          tqh_last = a6->tqh_last;
          *(void *)(v178 + 40) = tqh_last;
          *tqh_last = (nw_frame *)v178;
          a6->tqh_last = (nw_frame **)(v178 + 32);
          uint64_t v192 = *((unsigned int *)v313 + 6) + 1LL;
          unint64_t v193 = v192 << 31 >> 31;
          *((_DWORD *)v313 + 6) = v192;
          if (v193 == v192 && (v193 & 0x8000000000000000LL) == 0)
          {
LABEL_282:
            if (((*(unsigned __int16 *)(v14 + 188) | (*(unsigned __int8 *)(v14 + 190) << 16)) & 0x80000) == 0
              && gLogDatapath)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              uint64_t v228 = (os_log_s *)gconnectionLogObj;
              if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
              {
                v230 = *(_DWORD *)(v14 + 176);
                v229 = *(_DWORD *)(v14 + 180);
                *(_DWORD *)buf = 136447234;
                uint64_t v317 = "nw_protocol_http2_get_input_frames";
                v318 = 2082;
                int64_t v319 = (const char *)(v14 + 191);
                size_t v320 = 2080;
                v321 = (uint64_t)" ";
                size_t v322 = 1024;
                *(_DWORD *)v323 = v229;
                *(_WORD *)&v323[4] = 1024;
                *(_DWORD *)&v323[6] = v230;
                _os_log_impl( &dword_181A5C000,  v228,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> delivering empty incoming frame",  buf,  0x2Cu);
              }
            }

            goto LABEL_284;
          }

          __nwlog_obj();
          uint64_t v194 = *((unsigned int *)v313 + 6);
          *(_DWORD *)buf = 136446978;
          uint64_t v317 = "nw_protocol_http2_get_input_frames";
          v318 = 2082;
          int64_t v319 = "return_frame_count";
          size_t v320 = 2048;
          v321 = 1LL;
          size_t v322 = 2048;
          *(void *)v323 = v194;
          v195 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          LOBYTE(v300) = 0;
          if (__nwlog_fault(v195, type, &v300))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              uint64_t v196 = (os_log_s *)__nwlog_obj();
              uint64_t v197 = type[0];
              if (os_log_type_enabled(v196, type[0]))
              {
                v198 = *((unsigned int *)v313 + 6);
                *(_DWORD *)buf = 136446978;
                uint64_t v317 = "nw_protocol_http2_get_input_frames";
                v318 = 2082;
                int64_t v319 = "return_frame_count";
                size_t v320 = 2048;
                v321 = 1LL;
                size_t v322 = 2048;
                *(void *)v323 = v198;
                v199 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_278:
                _os_log_impl(&dword_181A5C000, v196, v197, v199, buf, 0x2Au);
              }
            }

            else if ((_BYTE)v300)
            {
              v200 = (char *)__nw_create_backtrace_string();
              uint64_t v196 = (os_log_s *)__nwlog_obj();
              uint64_t v197 = type[0];
              v201 = os_log_type_enabled(v196, type[0]);
              if (v200)
              {
                if (v201)
                {
                  uint64_t v202 = *((unsigned int *)v313 + 6);
                  *(_DWORD *)buf = 136447234;
                  uint64_t v317 = "nw_protocol_http2_get_input_frames";
                  v318 = 2082;
                  int64_t v319 = "return_frame_count";
                  size_t v320 = 2048;
                  v321 = 1LL;
                  size_t v322 = 2048;
                  *(void *)v323 = v202;
                  *(_WORD *)&v323[8] = 2082;
                  *(void *)&v323[10] = v200;
                  _os_log_impl( &dword_181A5C000,  v196,  v197,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                }

                free(v200);
                goto LABEL_279;
              }

              if (v201)
              {
                uint64_t v206 = *((unsigned int *)v313 + 6);
                *(_DWORD *)buf = 136446978;
                uint64_t v317 = "nw_protocol_http2_get_input_frames";
                v318 = 2082;
                int64_t v319 = "return_frame_count";
                size_t v320 = 2048;
                v321 = 1LL;
                size_t v322 = 2048;
                *(void *)v323 = v206;
                v199 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                goto LABEL_278;
              }
            }

            else
            {
              uint64_t v196 = (os_log_s *)__nwlog_obj();
              uint64_t v197 = type[0];
              if (os_log_type_enabled(v196, type[0]))
              {
                uint64_t v203 = *((unsigned int *)v313 + 6);
                *(_DWORD *)buf = 136446978;
                uint64_t v317 = "nw_protocol_http2_get_input_frames";
                v318 = 2082;
                int64_t v319 = "return_frame_count";
                size_t v320 = 2048;
                v321 = 1LL;
                size_t v322 = 2048;
                *(void *)v323 = v203;
                v199 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                goto LABEL_278;
              }
            }
          }

void sub_181EDA8C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

BOOL nw_replay_hash_matches_key(const void *a1, const void *a2)
{
  return a1 == a2;
}

void nw_flow_replay_send_initial_data_to_candidates( NWConcrete_nw_endpoint_handler *a1, nw_flow_protocol *a2)
{
  uint64_t v47 = *MEMORY[0x1895F89C0];
  v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    int v40 = "nw_endpoint_handler_get_mode";
    unint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (__nwlog_fault(v8, &type, &v37))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          int v40 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v37)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        BOOL v17 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            int v40 = "nw_endpoint_handler_get_mode";
            __int16 v41 = 2082;
            id v42 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_35;
        }

        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          int v40 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_181A5C000, v9, v16, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          int v40 = "nw_endpoint_handler_get_mode";
          _os_log_impl( &dword_181A5C000,  v9,  v21,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

uint64_t ___ZL46nw_flow_replay_send_initial_data_to_candidatesP30NWConcrete_nw_endpoint_handlerP16nw_flow_protocol_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t v94 = *MEMORY[0x1895F89C0];
  uint64_t object = nw_hash_node_get_object(a2);
  uint64_t extra = nw_hash_node_get_extra(a2);
  if (object)
  {
    uint64_t v6 = *(void *)(object + 24);
    if (v6)
    {
      if (*(void *)(v6 + 88) && *(void *)(v6 + 96))
      {
        unint64_t v7 = (unsigned int *)extra;
        uint64_t v8 = *(void *)(a1 + 40);
        uint64_t v46 = a1;
        while (1)
        {
          id v9 = *(id *)(a1 + 32);
          os_log_type_t v10 = v9;
          if (*v7 >= *(_DWORD *)(v8 + 328))
          {

            return 1LL;
          }

          v74[0] = 0LL;
          v74[1] = v74;
          int v75 = 0;
          v74[2] = 0x2020000000LL;
          uint64_t v68 = 0LL;
          uint64_t v69 = &v68;
          uint64_t v70 = 0x3032000000LL;
          v71 = __Block_byref_object_copy__16468;
          v72 = __Block_byref_object_dispose__16469;
          id v73 = 0LL;
          v62[0] = MEMORY[0x1895F87A8];
          v62[1] = 3221225472LL;
          v63 = ___ZL29nw_flow_replay_send_one_frameP30NWConcrete_nw_endpoint_handlerP16nw_flow_protocolP11nw_protocolP20nw_replay_flow_state_block_invoke;
          uint64_t v64 = &unk_189BB8578;
          v66 = &v68;
          uint64_t v67 = v7;
          unint64_t v65 = v74;
          uint64_t v11 = *(void *)(v8 + 296);
          do
          {
            if (!v11) {
              break;
            }
            uint64_t v12 = *(void *)(v11 + 16);
            char v13 = ((uint64_t (*)(void *))v63)(v62);
            uint64_t v11 = v12;
          }

          while ((v13 & 1) != 0);
          uint64_t v14 = v69[5];
          if (!v14)
          {
            _Block_object_dispose(&v68, 8);

            _Block_object_dispose(v74, 8);
            return 1LL;
          }

          unsigned int v16 = *v7;
          uint64_t v15 = v7[1];
          uint64_t v17 = *(void *)(v14 + 112);
          if (v17)
          {
            if ((*(_WORD *)(v14 + 204) & 0x100) == 0
              || !g_channel_check_validity
              || g_channel_check_validity(v69[5], *(void *)(v14 + 88)))
            {
              LODWORD(v17) = *(_DWORD *)(v14 + 52);
              uint64_t v18 = *(unsigned int *)(v14 + 56);
              if ((_DWORD)v17) {
                LODWORD(v17) = v17 - (v18 + *(_DWORD *)(v14 + 60));
              }
              uint64_t v19 = *(void *)(v14 + 112) + v18;
              goto LABEL_20;
            }

            LODWORD(v17) = 0;
          }

          uint64_t v19 = 0LL;
LABEL_20:
          unsigned int v20 = *(unsigned __int8 *)(v69[5] + 186);
          uint64_t v21 = (v17 - v15);
          v61[0] = 0LL;
          v61[1] = v61;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)(object + 24) + 88LL))( object,  v8 + 96,  1LL,  v21,  2LL,  v61))
          {
            uint64_t v57 = 0LL;
            __int16 v58 = &v57;
            int v60 = 0;
            uint64_t v59 = 0x2020000000LL;
            v47[0] = MEMORY[0x1895F87A8];
            v47[1] = 3221225472LL;
            BOOL v48 = ___ZL29nw_flow_replay_send_one_frameP30NWConcrete_nw_endpoint_handlerP16nw_flow_protocolP11nw_protocolP20nw_replay_flow_state_block_invoke_88;
            unint64_t v49 = &unk_189BB85A0;
            nw_endpoint_t v50 = &v57;
            int v55 = v21;
            uint64_t v52 = v19 + v15;
            id v53 = v7;
            uint64_t v54 = v8;
            int v51 = &v68;
            char v56 = v20 >> 7;
            id v22 = (void *)v61[0];
            do
            {
              if (!v22) {
                break;
              }
              os_log_type_t v23 = (void *)v22[4];
              char v24 = v48((uint64_t)v47, v22);
              id v22 = v23;
            }

            while ((v24 & 1) != 0);
            a1 = v46;
            if (v61[0])
            {
              if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v10) & 1) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                BOOL v26 = (os_log_s *)(id)gconnectionLogObj;
                if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
                {
                  id_string = nw_endpoint_handler_get_id_string(v10);
                  BOOL v28 = nw_endpoint_handler_dry_run_string(v10);
                  nw_endpoint_t v29 = nw_endpoint_handler_copy_endpoint(v10);
                  logging_description = nw_endpoint_get_logging_description(v29);
                  id v42 = nw_endpoint_handler_state_string(v10);
                  int v40 = nw_endpoint_handler_mode_string(v10);
                  id v30 = nw_endpoint_handler_copy_current_path(v10);
                  int v31 = *((_DWORD *)v58 + 6);
                  *(_DWORD *)buf = 136448258;
                  BOOL v77 = "nw_flow_replay_send_one_frame";
                  __int16 v78 = 2082;
                  os_log_type_t v79 = id_string;
                  __int16 v32 = v30;
                  __int16 v80 = 2082;
                  uint64_t v81 = v28;
                  __int16 v82 = 2082;
                  os_log_type_t v83 = logging_description;
                  __int16 v84 = 2082;
                  v85 = v42;
                  __int16 v86 = 2082;
                  os_log_type_t v87 = v40;
                  __int16 v88 = 2114;
                  id v89 = v30;
                  __int16 v90 = 1024;
                  int v91 = v31;
                  __int16 v92 = 1024;
                  int v93 = v21;
                  _os_log_impl( &dword_181A5C000,  v26,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Sending %u/%u early bytes",  buf,  0x54u);
                }
              }

              (*(void (**)(uint64_t, void *))(*(void *)(object + 24) + 96LL))(object, v61);
            }

            _Block_object_dispose(&v57, 8);
          }

          else
          {
            a1 = v46;
            if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v10) & 1) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              os_log_type_t v33 = (os_log_s *)(id)gconnectionLogObj;
              if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
              {
                id v34 = nw_endpoint_handler_get_id_string(v10);
                os_log_type_t v35 = nw_endpoint_handler_dry_run_string(v10);
                nw_endpoint_t v36 = nw_endpoint_handler_copy_endpoint(v10);
                __int16 v45 = nw_endpoint_get_logging_description(v36);
                __int16 v43 = nw_endpoint_handler_state_string(v10);
                __int16 v41 = nw_endpoint_handler_mode_string(v10);
                id v37 = nw_endpoint_handler_copy_current_path(v10);
                *(_DWORD *)buf = 136448002;
                BOOL v77 = "nw_flow_replay_send_one_frame";
                __int16 v78 = 2082;
                os_log_type_t v79 = v34;
                int v38 = v37;
                __int16 v80 = 2082;
                uint64_t v81 = v35;
                __int16 v82 = 2082;
                os_log_type_t v83 = v45;
                __int16 v84 = 2082;
                v85 = v43;
                __int16 v86 = 2082;
                os_log_type_t v87 = v41;
                __int16 v88 = 2114;
                id v89 = v37;
                __int16 v90 = 1024;
                int v91 = v21;
                _os_log_impl( &dword_181A5C000,  v33,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Unable to send %u early bytes",  buf,  0x4Eu);
              }
            }
          }

          BOOL v25 = *v7 > v16;
          _Block_object_dispose(&v68, 8);

          _Block_object_dispose(v74, 8);
          if (v25)
          {
            uint64_t v8 = *(void *)(a1 + 40);
            if (*v7 < *(_DWORD *)(v8 + 328)) {
              continue;
            }
          }

          return 1LL;
        }
      }
    }
  }

  return 1LL;
}

void sub_181EDB7D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, id a46)
{
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose((const void *)(v49 - 240), 8);

  _Unwind_Resume(a1);
}

BOOL ___ZL29nw_flow_replay_send_one_frameP30NWConcrete_nw_endpoint_handlerP16nw_flow_protocolP11nw_protocolP20nw_replay_flow_state_block_invoke( uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8LL);
  int v6 = *(_DWORD *)(v5 + 24);
  int v7 = **(_DWORD **)(a1 + 48);
  if (v6 == v7) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
  }
  else {
    *(_DWORD *)(v5 + 24) = v6 + 1;
  }

  return v6 != v7;
}

uint64_t ___ZL29nw_flow_replay_send_one_frameP30NWConcrete_nw_endpoint_handlerP16nw_flow_protocolP11nw_protocolP20nw_replay_flow_state_block_invoke_88( uint64_t a1, void *a2)
{
  v3 = a2;
  if (nw_frame_uses_external_data((uint64_t)v3))
  {
    unsigned int v4 = nw_frame_unclaimed_length(v3);
    unsigned int v6 = v4;
    unsigned int v7 = *(_DWORD *)(a1 + 72);
    if (v4 < v7)
    {
      if (v4)
      {
        unsigned int v16 = dispatch_data_create(*(const void **)(a1 + 48), v4, 0LL, 0LL);
        nw_frame_set_external_data((uint64_t)v3, v16, 0LL);
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += v6;
        *(_DWORD *)(*(void *)(a1 + 56) + 4LL) += v6;
      }

      nw_frame_claim((uint64_t)v3, v5, v6, 0);
      nw_frame_collapse((uint64_t)v3);
      nw_frame_unclaim((uint64_t)v3, v17, v6, 0);
      BOOL v10 = v6 >= v7;
    }

    else
    {
      if (v7)
      {
        uint64_t v8 = dispatch_data_create(*(const void **)(a1 + 48), *(unsigned int *)(a1 + 72), 0LL, 0LL);
        nw_frame_set_external_data((uint64_t)v3, v8, 0LL);
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += *(_DWORD *)(a1 + 72);
        *(_DWORD *)(*(void *)(a1 + 56) + 4LL) += *(_DWORD *)(a1 + 72);
      }

      **(void **)(a1 + 56) = (**(_DWORD **)(a1 + 56) + 1);
      nw_frame_claim((uint64_t)v3, v5, *(_DWORD *)(a1 + 72), 0);
      nw_frame_collapse((uint64_t)v3);
      nw_frame_unclaim((uint64_t)v3, v9, *(_DWORD *)(a1 + 72), 0);
      v3[186] = v3[186] & 0x7F | ((*(_BYTE *)(a1 + 76) != 0) << 7);
      BOOL v10 = v6 >= v7;
    }
  }

  else
  {
    LODWORD(__n) = 0;
    uint64_t v11 = (void *)nw_frame_unclaimed_bytes((uint64_t)v3, &__n);
    unsigned int v13 = __n;
    unsigned int v14 = *(_DWORD *)(a1 + 72);
    if (__n < v14)
    {
      int v18 = __n;
      if ((_DWORD)__n && v11)
      {
        memcpy(v11, *(const void **)(a1 + 48), __n);
        int v18 = __n;
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += __n;
        *(_DWORD *)(*(void *)(a1 + 56) + 4LL) += v18;
      }

      nw_frame_claim((uint64_t)v3, v12, v18, 0);
      nw_frame_collapse((uint64_t)v3);
      nw_frame_unclaim((uint64_t)v3, v19, __n, 0);
    }

    else
    {
      if (v14)
      {
        memcpy(v11, *(const void **)(a1 + 48), *(unsigned int *)(a1 + 72));
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += *(_DWORD *)(a1 + 72);
      }

      **(void **)(a1 + 56) = (**(_DWORD **)(a1 + 56) + 1);
      nw_frame_claim((uint64_t)v3, v12, *(_DWORD *)(a1 + 72), 0);
      nw_frame_collapse((uint64_t)v3);
      nw_frame_unclaim((uint64_t)v3, v15, *(_DWORD *)(a1 + 72), 0);
      v3[186] = v3[186] & 0x7F | ((*(_BYTE *)(a1 + 76) != 0) << 7);
    }

    BOOL v10 = v13 >= v14;
  }

  int v20 = v10;
  nw_frame_inherit_metadata(*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), (uint64_t)v3, v20);

  return 1LL;
}

uint64_t __nw_flow_replay_select_output_handler_block_invoke(void *a1, uint64_t a2)
{
  uint64_t object = nw_hash_node_get_object(a2);
  if (object == a1[5])
  {
    *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v5 = object;
    nw_hash_table_remove_node(*(void *)(a1[6] + 288LL), a2);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 24);
      if (v6)
      {
        unsigned int v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 8);
        if (v7) {
          v7(v5, a1[6] + 96LL, 1LL);
        }
      }
    }
  }

  return 1LL;
}

uint64_t __nw_endpoint_handler_add_read_request_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  uint64_t object = nw_hash_node_get_object(a2);
  if (!object) {
    return 1LL;
  }
  uint64_t v4 = object;
  if ((*(_WORD *)(object + 332) & 0x20) == 0) {
    return 1LL;
  }
  if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v6 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      uint64_t v8 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      nw_endpoint_t v9 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      logging_description = nw_endpoint_get_logging_description(v9);
      uint64_t v11 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      uint64_t v12 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      id v13 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      uint64_t v14 = *(void *)(a1 + 40);
      int v15 = 136448258;
      unsigned int v16 = "nw_endpoint_handler_add_read_request_block_invoke";
      __int16 v17 = 2082;
      int v18 = id_string;
      __int16 v19 = 2082;
      int v20 = v8;
      __int16 v21 = 2082;
      id v22 = logging_description;
      __int16 v23 = 2082;
      char v24 = v11;
      __int16 v25 = 2082;
      BOOL v26 = v12;
      __int16 v27 = 2114;
      id v28 = v13;
      __int16 v29 = 2112;
      uint64_t v30 = v14;
      __int16 v31 = 2048;
      uint64_t v32 = v4;
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Adding new flow read request %@ to %p",  (uint8_t *)&v15,  0x5Cu);
    }
  }

  *(_WORD *)(v4 + 332) &= ~0x20u;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 1;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = nw_flow_add_read_request( *(void **)(a1 + 32),  v4,  *(void **)(a1 + 40));
  nw_flow_service_reads( *(NWConcrete_nw_endpoint_handler **)(a1 + 32),  *(NWConcrete_nw_endpoint_flow **)(a1 + 48),  (nw_flow_protocol *)v4,  0);
  return 0LL;
}

void sub_181EDBEC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL24__nw_signpost_is_enabledv_block_invoke_16681()
{
  BOOL result = networkd_settings_get_BOOL((const char *)nw_setting_enable_signposts);
  _nw_signposts_enabled = result;
  return result;
}

uint64_t nw_endpoint_handler_register_context(void *a1, void *a2)
{
  uint64_t v119 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v4)
  {
    __nwlog_obj();
    __int16 v86 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context";
    BOOL v26 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v108 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v87 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context";
        _os_log_impl(&dword_181A5C000, v27, v87, "%{public}s called with null content_context", buf, 0xCu);
      }

      goto LABEL_75;
    }

    if (!v108)
    {
      __nwlog_obj();
      __int16 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v95 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context";
        _os_log_impl( &dword_181A5C000,  v27,  v95,  "%{public}s called with null content_context, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_75;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    __int16 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v91 = type;
    BOOL v92 = os_log_type_enabled(v27, type);
    if (!backtrace_string)
    {
      if (v92)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context";
        _os_log_impl(&dword_181A5C000, v27, v91, "%{public}s called with null content_context, no backtrace", buf, 0xCu);
      }

      goto LABEL_75;
    }

    if (v92)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v27,  v91,  "%{public}s called with null content_context, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_132;
  }

  if (!v3)
  {
    __nwlog_obj();
    __int16 v88 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context";
    BOOL v26 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v108 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v89 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context";
        _os_log_impl(&dword_181A5C000, v27, v89, "%{public}s called with null handler", buf, 0xCu);
      }

void sub_181EDCED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_endpoint_handler_register_context_internal(void *a1, void *a2, void *a3)
{
  uint64_t v231 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v210 = a2;
  id v209 = a3;
  uint64_t v6 = (id *)calloc(1uLL, 0x150uLL);
  if (v6)
  {
LABEL_2:
    objc_storeStrong(v6 + 31, a3);
    nw_endpoint_flow_initialize_protocol(v5, (uint64_t)v6, 1);
    uint64_t v7 = *((void *)v210 + 97);
    uint64_t v207 = v7;
    if (v7)
    {
      uint64_t v8 = *(uint64_t **)(v7 + 24);
      unint64_t v9 = atomic_load(&nw_protocol_get_zombie_callbacks(void)::once_flag);
      if (v9 != -1LL)
      {
        *(void *)buf = &v212;
        *(void *)os_log_type_t type = buf;
        std::__call_once( &nw_protocol_get_zombie_callbacks(void)::once_flag,  type,  (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<nw_protocol_get_zombie_callbacks(void)::$_0 &&>>);
      }

      if ((nw_endpoint_handler_get_logging_disabled(v5) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        id v18 = (id)gconnectionLogObj;
        id_string = nw_endpoint_handler_get_id_string(v5);
        int v20 = nw_endpoint_handler_dry_run_string(v5);
        nw_endpoint_t v21 = nw_endpoint_handler_copy_endpoint(v5);
        logging_description = nw_endpoint_get_logging_description(v21);
        __int16 v23 = nw_endpoint_handler_state_string(v5);
        id v24 = nw_endpoint_handler_mode_string(v5);
        id v25 = nw_endpoint_handler_copy_current_path(v5);
        *(_DWORD *)buf = 136448002;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context_internal";
        __int16 v215 = 2082;
        uint64_t v216 = (uint64_t)id_string;
        __int16 v217 = 2082;
        uint64_t v218 = (uint64_t)v20;
        __int16 v219 = 2082;
        uint64_t v220 = logging_description;
        __int16 v221 = 2082;
        v222 = v23;
        __int16 v223 = 2082;
        v224 = v24;
        __int16 v225 = 2114;
        id v226 = v25;
        __int16 v227 = 2048;
        uint64_t v228 = (char *)v207;
        BOOL v26 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        char v212 = 0;
        if ((__nwlog_fault(v26, type, &v212) & 1) != 0)
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            __int16 v27 = (os_log_s *)(id)gconnectionLogObj;
            os_log_type_t v28 = type[0];
            if (os_log_type_enabled(v27, type[0]))
            {
              __int16 v29 = nw_endpoint_handler_get_id_string(v5);
              uint64_t v30 = nw_endpoint_handler_dry_run_string(v5);
              log = v27;
              nw_endpoint_t v31 = nw_endpoint_handler_copy_endpoint(v5);
              uint64_t v188 = v26;
              uint64_t v32 = nw_endpoint_get_logging_description(v31);
              os_log_type_t v33 = nw_endpoint_handler_state_string(v5);
              BOOL v34 = nw_endpoint_handler_mode_string(v5);
              id v35 = nw_endpoint_handler_copy_current_path(v5);
              *(_DWORD *)buf = 136448002;
              *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context_internal";
              __int16 v215 = 2082;
              uint64_t v216 = (uint64_t)v29;
              __int16 v217 = 2082;
              uint64_t v218 = (uint64_t)v30;
              __int16 v219 = 2082;
              uint64_t v220 = v32;
              __int16 v221 = 2082;
              v222 = v33;
              __int16 v223 = 2082;
              v224 = v34;
              __int16 v225 = 2114;
              id v226 = v35;
              __int16 v227 = 2048;
              uint64_t v228 = (char *)v207;
              __int16 v27 = log;
              _os_log_impl( &dword_181A5C000,  log,  v28,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Attempted to register c ontext with zombified multiplexed protocol %p",  buf,  0x52u);

              BOOL v26 = v188;
            }
          }

          else
          {
            if (v212)
            {
              backtrace_string = __nw_create_backtrace_string();
              if (backtrace_string)
              {
                char v37 = (char *)backtrace_string;
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                int v38 = (os_log_s *)(id)gconnectionLogObj;
                os_log_type_t v39 = type[0];
                if (os_log_type_enabled(v38, type[0]))
                {
                  int v40 = nw_endpoint_handler_get_id_string(v5);
                  char v41 = nw_endpoint_handler_dry_run_string(v5);
                  loga = v38;
                  v189 = v26;
                  nw_endpoint_t v206 = nw_endpoint_handler_copy_endpoint(v5);
                  id v42 = nw_endpoint_get_logging_description(v206);
                  nw_endpoint_t v43 = nw_endpoint_handler_state_string(v5);
                  BOOL v44 = nw_endpoint_handler_mode_string(v5);
                  id v45 = nw_endpoint_handler_copy_current_path(v5);
                  *(_DWORD *)buf = 136448258;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context_internal";
                  __int16 v215 = 2082;
                  uint64_t v216 = (uint64_t)v40;
                  __int16 v217 = 2082;
                  uint64_t v218 = (uint64_t)v41;
                  __int16 v219 = 2082;
                  uint64_t v220 = v42;
                  __int16 v221 = 2082;
                  v222 = v43;
                  __int16 v223 = 2082;
                  v224 = v44;
                  __int16 v225 = 2114;
                  id v226 = v45;
                  __int16 v227 = 2048;
                  uint64_t v228 = (char *)v207;
                  __int16 v229 = 2082;
                  v230 = v37;
                  int v38 = loga;
                  _os_log_impl( &dword_181A5C000,  loga,  v39,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Attempted to regist er context with zombified multiplexed protocol %p, dumping backtrace:%{public}s",  buf,  0x5Cu);

                  BOOL v26 = v189;
                }

                free(v37);
                if (!v26) {
                  goto LABEL_97;
                }
                goto LABEL_96;
              }

              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              os_log_type_t v95 = (os_log_s *)(id)gconnectionLogObj;
              os_log_type_t v116 = type[0];
              if (os_log_type_enabled(v95, type[0]))
              {
                __int16 v117 = nw_endpoint_handler_get_id_string(v5);
                uint64_t v118 = nw_endpoint_handler_dry_run_string(v5);
                logf = v95;
                nw_endpoint_t v119 = nw_endpoint_handler_copy_endpoint(v5);
                uint64_t v194 = v26;
                v120 = nw_endpoint_get_logging_description(v119);
                v121 = nw_endpoint_handler_state_string(v5);
                nw_endpoint_t v122 = nw_endpoint_handler_mode_string(v5);
                id v123 = nw_endpoint_handler_copy_current_path(v5);
                *(_DWORD *)buf = 136448002;
                *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context_internal";
                __int16 v215 = 2082;
                uint64_t v216 = (uint64_t)v117;
                __int16 v217 = 2082;
                uint64_t v218 = (uint64_t)v118;
                __int16 v219 = 2082;
                uint64_t v220 = v120;
                __int16 v221 = 2082;
                v222 = v121;
                __int16 v223 = 2082;
                v224 = v122;
                __int16 v225 = 2114;
                id v226 = v123;
                __int16 v227 = 2048;
                uint64_t v228 = (char *)v207;
                os_log_type_t v95 = logf;
                _os_log_impl( &dword_181A5C000,  logf,  v116,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Attempted to register context with zombified multiplexed protocol %p, no backtrace",  buf,  0x52u);

                BOOL v26 = v194;
              }
            }

            else
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              os_log_type_t v95 = (os_log_s *)(id)gconnectionLogObj;
              os_log_type_t v96 = type[0];
              if (os_log_type_enabled(v95, type[0]))
              {
                size_t v97 = nw_endpoint_handler_get_id_string(v5);
                os_log_type_t v98 = nw_endpoint_handler_dry_run_string(v5);
                logd = v95;
                nw_endpoint_t v99 = nw_endpoint_handler_copy_endpoint(v5);
                uint64_t v192 = v26;
                os_log_type_t v100 = nw_endpoint_get_logging_description(v99);
                id v101 = nw_endpoint_handler_state_string(v5);
                uint64_t v102 = nw_endpoint_handler_mode_string(v5);
                id v103 = nw_endpoint_handler_copy_current_path(v5);
                *(_DWORD *)buf = 136448002;
                *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context_internal";
                __int16 v215 = 2082;
                uint64_t v216 = (uint64_t)v97;
                __int16 v217 = 2082;
                uint64_t v218 = (uint64_t)v98;
                __int16 v219 = 2082;
                uint64_t v220 = v100;
                __int16 v221 = 2082;
                v222 = v101;
                __int16 v223 = 2082;
                v224 = v102;
                __int16 v225 = 2114;
                id v226 = v103;
                __int16 v227 = 2048;
                uint64_t v228 = (char *)v207;
                os_log_type_t v95 = logd;
                _os_log_impl( &dword_181A5C000,  logd,  v96,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Attempted to register context with zombified multiplexed protocol %p, backtrace limit exceeded",  buf,  0x52u);

                BOOL v26 = v192;
              }
            }
          }
        }

        if (v26) {
LABEL_96:
        }
          free(v26);
      }

void sub_181EDEBB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_endpoint_handler_register_context_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  nw_protocol_definition_t v6 = nw_protocol_metadata_copy_definition(v5);

  return 1LL;
}

void sub_181EDED8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_endpoint_flow_cleanup_protocol_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  uint64_t v5 = *((void *)v3 + 4);
  nw_protocol_definition_t v6 = (void *)*((void *)v3 + 5);
  if (v5)
  {
    *(void *)(v5 + 40) = v6;
    nw_protocol_definition_t v6 = (void *)*((void *)v3 + 5);
  }

  else
  {
    *(void *)(*(void *)(a1 + 32) + 280LL) = v6;
  }

  *nw_protocol_definition_t v6 = v5;
  *((void *)v3 + 4) = 0LL;
  *((void *)v3 + 5) = 0LL;
  nw_frame_finalize((uint64_t)v3);

  return 1LL;
}

uint64_t __nw_endpoint_flow_cleanup_protocol_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  uint64_t object = nw_hash_node_get_object(a2);
  nw_hash_table_remove_node(*(void *)(*(void *)(a1 + 32) + 288LL), a2);
  uint64_t v5 = *(void *)(a1 + 32);
  if (object != *(void *)(v5 + 128) || (*(_WORD *)(v5 + 332) & 0x800) != 0)
  {
    if (object)
    {
      uint64_t v7 = *(void *)(object + 24);
      if (v7)
      {
        uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 8);
        if (v8) {
          v8(object, v5 + 96, 1LL);
        }
      }
    }
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    nw_protocol_definition_t v6 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      int v10 = 136446466;
      uint64_t v11 = "nw_endpoint_flow_cleanup_protocol_block_invoke_2";
      __int16 v12 = 2048;
      uint64_t v13 = object;
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEBUG,  "%{public}s Not tearing down replay selected output handler %p",  (uint8_t *)&v10,  0x16u);
    }
  }

  return 1LL;
}

void nw_flow_notify(uint64_t a1, uint64_t a2, unsigned int a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v390 = *MEMORY[0x1895F89C0];
  id v10 = *(id *)(*(void *)(a1 + 40) + 160LL);
  if (v10)
  {
    id v360 = v10;
    uint64_t v11 = (NWConcrete_nw_endpoint_handler *)v10;
    uint64_t mode = v11->mode;

    if ((_DWORD)mode != 2)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v13 = (NWConcrete_nw_endpoint_mode_handler *)(id)gLogObj;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        else {
          nw_endpoint_t v31 = off_189BBBBC0[mode];
        }
        *(_DWORD *)buf = 136446722;
        v373 = "nw_flow_notify";
        __int16 v374 = 2082;
        unint64_t v375 = (void *)v31;
        __int16 v376 = 2082;
        unint64_t v377 = "flow";
        _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
      }

      goto LABEL_45;
    }

    uint64_t v13 = nw_endpoint_handler_copy_flow(v11);
    uint64_t v14 = v11;
    int state = v14->state;

    if (state == 5)
    {
      unsigned int v16 = v14;
      id v17 = v14;
      char v18 = *((_BYTE *)v17 + 268);

      if ((v18 & 0x20) == 0)
      {
        v359 = v13;
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        nw_endpoint_t v19 = v16;
        int v20 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          v357 = v11;
          nw_endpoint_t v21 = v17;

          uint64_t v22 = v21;
          char v23 = *((_BYTE *)v17 + 268);

          if ((v23 & 1) != 0) {
            id v24 = "dry-run ";
          }
          else {
            id v24 = "";
          }
          nw_endpoint_t v25 = nw_endpoint_handler_copy_endpoint(v22);
          logging_description = nw_endpoint_get_logging_description(v25);
          nw_endpoint_t v348 = v25;
          __int16 v27 = v22;
          os_log_type_t v28 = v27;
          uint64_t v29 = v19->state;
          else {
            uint64_t v30 = off_189BBBBF0[v29];
          }
          id_str = v21->id_str;

          id v45 = v28;
          BOOL v46 = v45;
          uint64_t v47 = "path";
          switch(v357->mode)
          {
            case 0:
              break;
            case 1:
              uint64_t v47 = "resolver";
              break;
            case 2:
              uint64_t v47 = nw_endpoint_flow_mode_string(v45[31]);
              break;
            case 3:
              uint64_t v47 = "proxy";
              break;
            case 4:
              uint64_t v47 = "fallback";
              break;
            case 5:
              uint64_t v47 = "transform";
              break;
            default:
              uint64_t v47 = "unknown-mode";
              break;
          }

          char v52 = v46;
          os_unfair_lock_lock((os_unfair_lock_t)v52 + 28);
          id v53 = v52[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v52 + 28);

          id v54 = v53;
          nw_endpoint_t v55 = v54;
          if (a3 > 0x1A) {
            char v56 = "unknown";
          }
          else {
            char v56 = off_189BBE330[a3];
          }
          *(_DWORD *)buf = 136448002;
          v373 = "nw_flow_notify";
          __int16 v374 = 2082;
          unint64_t v375 = id_str;
          __int16 v376 = 2082;
          unint64_t v377 = v24;
          __int16 v378 = 2082;
          v379 = logging_description;
          __int16 v380 = 2082;
          v381 = v30;
          __int16 v382 = 2082;
          unint64_t v383 = v47;
          __int16 v384 = 2114;
          id v385 = v54;
          __int16 v386 = 2082;
          v387 = v56;
          _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ignoring notification %{pub lic}s after cancellation",  buf,  0x52u);
        }

LABEL_44:
        uint64_t v13 = v359;
      }

void sub_181EE2068( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, void *a23)
{
  _Unwind_Resume(a1);
}

uint64_t nw_flow_supports_external_data(nw_protocol *a1)
{
  return 1LL;
}

void nw_flow_passthrough_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    default_input_handler = a1->default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        input_finished = (void (*)(void))callbacks->input_finished;
        if (input_finished) {
          input_finished();
        }
      }
    }

    return;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v15 = "nw_flow_passthrough_input_finished";
  nw_protocol_definition_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v15 = "nw_flow_passthrough_input_finished";
        unint64_t v9 = "%{public}s called with null protocol";
LABEL_19:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            id v15 = "nw_flow_passthrough_input_finished";
            __int16 v16 = 2082;
            id v17 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }

        if (!v11) {
          goto LABEL_20;
        }
        *(_DWORD *)buf = 136446210;
        id v15 = "nw_flow_passthrough_input_finished";
        unint64_t v9 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_19;
      }

      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v15 = "nw_flow_passthrough_input_finished";
        unint64_t v9 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_19;
      }
    }

uint64_t nw_flow_passthrough_supports_external_data(nw_protocol *a1)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    id v3 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v13 = "nw_flow_passthrough_supports_external_data";
    id v4 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v13 = "nw_flow_passthrough_supports_external_data";
        uint64_t v7 = "%{public}s called with null protocol";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
      }
    }

    else
    {
      if (v10)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v6 = type;
        BOOL v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v13 = "nw_flow_passthrough_supports_external_data";
            __int16 v14 = 2082;
            id v15 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v9) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v13 = "nw_flow_passthrough_supports_external_data";
        uint64_t v7 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v13 = "nw_flow_passthrough_supports_external_data";
        uint64_t v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_17;
      }
    }

uint64_t nw_flow_connect(nw_protocol *a1, nw_protocol *a2)
{
  handle = a1->handle;
  else {
    return 0LL;
  }
}

uint64_t nw_flow_updated_path()
{
  return 1LL;
}

BOOL nw_flow_listener_new_flow(uint64_t a1, void *a2, void *a3)
{
  uint64_t v262 = *MEMORY[0x1895F89C0];
  id v239 = a2;
  id v240 = a3;
  id v5 = *(id *)(*(void *)(a1 + 24) + 160LL);
  if (!v5)
  {
    v129 = 0LL;
    __nwlog_obj();
    id v187 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v245 = "nw_flow_listener_new_flow";
    uint64_t v188 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v242 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v188, &type, &v242))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v189 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v190 = type;
        if (os_log_type_enabled(v189, type))
        {
          *(_DWORD *)buf = 136446210;
          id v245 = "nw_flow_listener_new_flow";
          _os_log_impl(&dword_181A5C000, v189, v190, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v242)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v189 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v192 = type;
        BOOL v193 = os_log_type_enabled(v189, type);
        if (backtrace_string)
        {
          if (v193)
          {
            *(_DWORD *)buf = 136446466;
            id v245 = "nw_flow_listener_new_flow";
            __int16 v246 = 2082;
            uint64_t v247 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v189,  v192,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_204;
        }

        if (v193)
        {
          *(_DWORD *)buf = 136446210;
          id v245 = "nw_flow_listener_new_flow";
          _os_log_impl(&dword_181A5C000, v189, v192, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v189 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v201 = type;
        if (os_log_type_enabled(v189, type))
        {
          *(_DWORD *)buf = 136446210;
          id v245 = "nw_flow_listener_new_flow";
          _os_log_impl( &dword_181A5C000,  v189,  v201,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181EE4B34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, void *a23)
{
  _Unwind_Resume(a1);
}

void nw_flow_listener_disconnected(nw_listen_protocol *a1, nw_protocol *a2)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  id v4 = *((id *)a1->handle + 20);
  id v5 = v4;
  if (v4)
  {
    os_log_type_t v6 = (unsigned int *)v4;
    uint64_t v7 = v6[29];

    if ((_DWORD)v7 == 2)
    {
      ((void (*)(nw_protocol *, nw_listen_protocol *))a2->callbacks->remove_listen_handler)(a2, a1);
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        else {
          BOOL v9 = off_189BBBBC0[v7];
        }
        int v10 = 136446722;
        BOOL v11 = "nw_flow_listener_disconnected";
        __int16 v12 = 2082;
        uint64_t v13 = v9;
        __int16 v14 = 2082;
        id v15 = "flow";
        _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  (uint8_t *)&v10,  0x20u);
      }
    }
  }
}

void sub_181EE4E40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_flow_protocol_get_key(void *a1, BOOL *a2)
{
  uint64_t v2 = a1[30];
  BOOL v3 = v2 == 0;
  BOOL v4 = v2 != 0;
  uint64_t v5 = 31LL;
  if (!v3) {
    uint64_t v5 = 30LL;
  }
  *a2 = v4;
  return a1[v5];
}

BOOL nw_flow_protocol_matches_key(char *a1, const void *a2, int a3)
{
  uint64_t v3 = 240LL;
  if (!a3) {
    uint64_t v3 = 248LL;
  }
  return *(void *)&a1[v3] == (void)a2;
}

void nw_flow_protocol_release(void *a1)
{
  uint64_t v2 = (void *)a1[23];
  a1[23] = 0LL;

  free(a1);
}

double ___ZL34nw_flow_initialize_replay_protocolv_block_invoke()
{
  unk_18C45EEF4 = 0LL;
  unk_18C45EEEC = 0LL;
  dword_18C45EEFC = 0;
  strcpy((char *)&g_replay_protocol_identifier, "flow_replay");
  *(void *)&double result = 0x300000004LL;
  qword_18C45EF00 = 0x300000004LL;
  qword_18C45EE48 = (uint64_t)nw_protocol_default_get_local;
  unk_18C45EE50 = nw_protocol_default_get_remote;
  qword_18C45EE38 = (uint64_t)nw_protocol_default_get_parameters;
  unk_18C45EE40 = nw_protocol_default_get_path;
  qword_18C45EEC8 = (uint64_t)nw_protocol_default_reset;
  unk_18C45EED0 = nw_protocol_default_input_flush;
  qword_18C45EEA8 = (uint64_t)nw_protocol_default_copy_info;
  unk_18C45EEB0 = nw_protocol_default_add_listen_handler;
  g_replay_protocol_callbacks = (uint64_t)nw_flow_replay_add_input_handler;
  unk_18C45EDD0 = nw_flow_replay_remove_input_handler;
  qword_18C45EE18 = (uint64_t)nw_flow_replay_get_input_frames;
  unk_18C45EE20 = nw_flow_replay_get_output_frames;
  qword_18C45EE28 = (uint64_t)nw_flow_replay_finalize_output_frames;
  unk_18C45EE30 = nw_protocol_default_link_state;
  qword_18C45EE88 = (uint64_t)nw_flow_replay_output_finished;
  unk_18C45EE90 = nw_protocol_default_get_output_local;
  qword_18C45EE08 = (uint64_t)nw_protocol_default_input_available;
  unk_18C45EE10 = nw_flow_replay_output_available;
  qword_18C45EE68 = (uint64_t)nw_protocol_default_notify;
  unk_18C45EE70 = nw_flow_replay_updated_path;
  qword_18C45EDD8 = (uint64_t)nw_protocol_default_replace_input_handler;
  unk_18C45EDE0 = nw_flow_replay_connect;
  qword_18C45EDE8 = (uint64_t)nw_flow_replay_disconnect;
  unk_18C45EDF0 = nw_protocol_default_connected;
  qword_18C45EEB8 = (uint64_t)nw_protocol_default_remove_listen_handler;
  unk_18C45EEC0 = nw_flow_replay_get_message_properties;
  qword_18C45EE98 = (uint64_t)nw_protocol_default_get_output_interface;
  unk_18C45EEA0 = nw_flow_replay_waiting_for_output;
  qword_18C45EE58 = (uint64_t)nw_flow_replay_register_notification;
  unk_18C45EE60 = nw_flow_replay_unregister_notification;
  qword_18C45EE78 = (uint64_t)nw_flow_passthrough_supports_external_data;
  unk_18C45EE80 = nw_protocol_default_input_finished;
  qword_18C45EDF8 = (uint64_t)nw_flow_replay_disconnected;
  unk_18C45EE00 = nw_protocol_default_error;
  return result;
}

uint64_t nw_flow_replay_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (a2)
    {
      nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a2);
      if (!a2->output_handler) {
        nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)a1);
      }
      return 1LL;
    }

    __nwlog_obj();
    int v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v18 = "nw_flow_replay_add_input_handler";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v6, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v18 = "nw_flow_replay_add_input_handler";
          BOOL v9 = "%{public}s called with null input_protocol";
          goto LABEL_33;
        }

        goto LABEL_34;
      }

      if (!v15)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v18 = "nw_flow_replay_add_input_handler";
          BOOL v9 = "%{public}s called with null input_protocol, backtrace limit exceeded";
          goto LABEL_33;
        }

        goto LABEL_34;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      BOOL v14 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v18 = "nw_flow_replay_add_input_handler";
          BOOL v9 = "%{public}s called with null input_protocol, no backtrace";
          goto LABEL_33;
        }

        goto LABEL_34;
      }

      if (!v14) {
        goto LABEL_24;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v18 = "nw_flow_replay_add_input_handler";
      __int16 v19 = 2082;
      int v20 = backtrace_string;
      uint64_t v13 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
LABEL_23:
      _os_log_impl(&dword_181A5C000, v7, v8, v13, buf, 0x16u);
LABEL_24:

      free(backtrace_string);
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v18 = "nw_flow_replay_add_input_handler";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v6, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v18 = "nw_flow_replay_add_input_handler";
          BOOL v9 = "%{public}s called with null protocol";
LABEL_33:
          _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
        }

uint64_t nw_flow_replay_remove_input_handler(nw_protocol *a1, nw_protocol *a2, char a3)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = a1->handle;
    id v7 = *((id *)handle + 20);
    os_log_type_t v8 = v7;
    if (v7)
    {
      BOOL v9 = (unsigned int *)v7;
      uint64_t v10 = v9[29];

      if ((_DWORD)v10 == 2)
      {
        if (a2 && a2->output_handler == a1) {
          nw_protocol_set_output_handler((uint64_t)a2, 0LL);
        }
        if (a1->default_input_handler == a2)
        {
          nw_protocol_set_input_handler((uint64_t)a1, 0LL);
          output_handler = a1->output_handler;
          if (output_handler)
          {
            callbacks = output_handler->callbacks;
            if (callbacks)
            {
              remove_input_handler = (void (*)(void))callbacks->remove_input_handler;
              if (remove_input_handler) {
                remove_input_handler();
              }
            }
          }

          else
          {
            uint64_t v18 = (char *)*((void *)handle + 36);
            if (v18)
            {
              v35[0] = MEMORY[0x1895F87A8];
              v35[1] = 3221225472LL;
              v35[2] = ___ZL35nw_flow_replay_remove_input_handlerP11nw_protocolS0_b_block_invoke;
              v35[3] = &__block_descriptor_49_e23_B16__0__nw_hash_node__8l;
              v35[4] = handle;
              v35[5] = a1;
              char v36 = a3;
              nw_hash_table_apply(v18, (uint64_t)v35);
            }
          }

          uint64_t v16 = 1LL;
          goto LABEL_19;
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v14 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          else {
            char v15 = off_189BBBBC0[v10];
          }
          *(_DWORD *)buf = 136446722;
          int v40 = "nw_flow_replay_remove_input_handler";
          __int16 v41 = 2082;
          uint64_t v42 = (void *)v15;
          __int16 v43 = 2082;
          BOOL v44 = "flow";
          _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

void sub_181EE5AA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_flow_replay_get_input_frames( nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v21 = "nw_flow_replay_get_input_frames";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v21 = "nw_flow_replay_get_input_frames";
        char v15 = "%{public}s called with null protocol";
LABEL_22:
        _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0xCu);
      }
    }

    else
    {
      if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        BOOL v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v21 = "nw_flow_replay_get_input_frames";
            __int16 v22 = 2082;
            char v23 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }

        if (!v17) {
          goto LABEL_23;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v21 = "nw_flow_replay_get_input_frames";
        char v15 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_22;
      }

      __nwlog_obj();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v21 = "nw_flow_replay_get_input_frames";
        char v15 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_22;
      }
    }

BOOL nw_flow_replay_get_output_frames( nw_protocol *a1, nw_protocol *a2, unsigned int a3, int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v66 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    os_log_type_t v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_flow_replay_get_output_frames";
    BOOL v32 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v57 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v32, type, &v57))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v34 = type[0];
        if (os_log_type_enabled(v33, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_flow_replay_get_output_frames";
          _os_log_impl(&dword_181A5C000, v33, v34, "%{public}s called with null protocol", buf, 0xCu);
        }
      }

      else if (v57)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v41 = type[0];
        BOOL v42 = os_log_type_enabled(v33, type[0]);
        if (backtrace_string)
        {
          if (v42)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_flow_replay_get_output_frames";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v33,  v41,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_72;
        }

        if (v42)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_flow_replay_get_output_frames";
          _os_log_impl(&dword_181A5C000, v33, v41, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v46 = type[0];
        if (os_log_type_enabled(v33, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_flow_replay_get_output_frames";
          _os_log_impl( &dword_181A5C000,  v33,  v46,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181EE6840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_flow_replay_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = (nw_flow_protocol *)a1->handle;
    uint64_t v5 = handle->handler;
    os_log_type_t v6 = v5;
    if (v5)
    {
      size_t v7 = v5;
      uint64_t v8 = v7[29];

      if ((_DWORD)v8 == 2)
      {
        if (handle->fast_open_frames.tqh_first)
        {
          *(void *)buf = 0LL;
          *(void *)&buf[8] = buf;
          *(void *)&buf[16] = 0x2020000000LL;
          LOBYTE(v47) = 0;
          v37[0] = MEMORY[0x1895F87A8];
          v37[1] = 3221225472LL;
          os_log_type_t v38 = ___ZL37nw_flow_replay_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
          nw_endpoint_t v39 = &unk_189BB86F0;
          BOOL v42 = handle;
          __int16 v43 = a2;
          BOOL v9 = v7;
          int v40 = v9;
          os_log_type_t v41 = buf;
          tqh_first = a2->tqh_first;
          do
          {
            if (!tqh_first) {
              break;
            }
            BOOL v11 = (nw_frame *)*((void *)tqh_first + 4);
            char v12 = ((uint64_t (*)(void *))v38)(v37);
            tqh_first = v11;
          }

          while ((v12 & 1) != 0);
          if (*(_BYTE *)(*(void *)&buf[8] + 24LL)) {
            nw_flow_replay_send_initial_data_to_candidates(v9, handle);
          }

          _Block_object_dispose(buf, 8);
        }

        output_handler = a1->output_handler;
        if (!output_handler)
        {
          uint64_t v16 = 1LL;
          goto LABEL_23;
        }

        callbacks = output_handler->callbacks;
        if (callbacks)
        {
          finalize_output_frames = (uint64_t (*)(void))callbacks->finalize_output_frames;
          if (finalize_output_frames)
          {
            uint64_t v16 = finalize_output_frames();
LABEL_23:

            return v16;
          }
        }

        __nwlog_obj();
        os_log_type_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_flow_replay_finalize_output_frames";
          _os_log_impl( &dword_181A5C000,  v28,  OS_LOG_TYPE_INFO,  "%{public}s Output protocol handler does not support finalize_output_frames",  buf,  0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v17 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          else {
            uint64_t v18 = off_189BBBBC0[v8];
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_flow_replay_finalize_output_frames";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v18;
          *(_WORD *)&buf[22] = 2082;
          os_log_type_t v47 = "flow";
          _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

void sub_181EE6EFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_flow_replay_output_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    output_handler = a1->output_handler;
    if (output_handler)
    {
      callbacks = output_handler->callbacks;
      if (callbacks && (output_finished = (void (*)(void))callbacks->output_finished) != 0LL)
      {
        output_finished();
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          identifier = (nw_protocol_identifier *)"<null>";
          if (a1->identifier) {
            identifier = a1->identifier;
          }
          *(_DWORD *)buf = 136446466;
          uint64_t v18 = "nw_flow_replay_output_finished";
          __int16 v19 = 2082;
          int v20 = identifier;
          _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEBUG,  "%{public}s Protocol %{public}s does not support output finished",  buf,  0x16u);
        }
      }
    }

    return;
  }

  __nwlog_obj();
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v18 = "nw_flow_replay_output_finished";
  BOOL v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v9, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_flow_replay_output_finished";
        char v12 = "%{public}s called with null protocol";
LABEL_24:
        _os_log_impl(&dword_181A5C000, v10, v11, v12, buf, 0xCu);
      }
    }

    else
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        BOOL v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v18 = "nw_flow_replay_output_finished";
            __int16 v19 = 2082;
            int v20 = (nw_protocol_identifier *)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_26;
        }

        if (!v14) {
          goto LABEL_25;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_flow_replay_output_finished";
        char v12 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_24;
      }

      __nwlog_obj();
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_flow_replay_output_finished";
        char v12 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_24;
      }
    }

void nw_flow_replay_output_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = (nw_flow_protocol *)a1->handle;
    BOOL v4 = handle->handler;
    uint64_t v5 = v4;
    if (v4)
    {
      os_log_type_t v6 = v4;
      uint64_t mode = v6->mode;

      if ((_DWORD)mode == 2)
      {
        nw_flow_replay_send_initial_data_to_candidates(v6, handle);
        default_input_handler = a1->default_input_handler;
        if (default_input_handler)
        {
          callbacks = default_input_handler->callbacks;
          if (callbacks)
          {
            output_available = (void (*)(void))callbacks->output_available;
            if (output_available) {
              output_available();
            }
          }
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v11 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          else {
            char v12 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          BOOL v32 = "nw_flow_replay_output_available";
          __int16 v33 = 2082;
          BOOL v34 = (void *)v12;
          __int16 v35 = 2082;
          os_log_type_t v36 = "flow";
          _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

void sub_181EE77AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_flow_replay_updated_path(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  id v4 = a3;
  if (a1)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = *(id *)(v5 + 160);
    size_t v7 = v6;
    if (v6)
    {
      uint64_t v8 = (unsigned int *)v6;
      uint64_t v9 = v8[29];

      if ((_DWORD)v9 == 2)
      {
        uint64_t v10 = *(void *)(a1 + 32);
        if (v10)
        {
          uint64_t v11 = *(void *)(v10 + 24);
          if (v11)
          {
            char v12 = *(uint64_t (**)(void))(v11 + 168);
            if (v12)
            {
              uint64_t v13 = v12();
LABEL_17:

              goto LABEL_18;
            }
          }
        }

        else
        {
          os_log_type_t v16 = *(char **)(v5 + 288);
          if (v16)
          {
            v34[0] = MEMORY[0x1895F87A8];
            v34[1] = 3221225472LL;
            v34[2] = ___ZL27nw_flow_replay_updated_pathP11nw_protocolS0_PU21objcproto10OS_nw_path8NSObject_block_invoke;
            v34[3] = &unk_189BB8550;
            uint64_t v36 = a1;
            id v35 = v4;
            nw_hash_table_apply(v16, (uint64_t)v34);

            uint64_t v13 = 1LL;
            goto LABEL_17;
          }
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v14 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          else {
            char v15 = off_189BBBBC0[v9];
          }
          *(_DWORD *)buf = 136446722;
          int v40 = "nw_flow_replay_updated_path";
          __int16 v41 = 2082;
          BOOL v42 = (void *)v15;
          __int16 v43 = 2082;
          char v44 = "flow";
          _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

void sub_181EE7DC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_flow_replay_connect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = a1->handle;
    id v4 = *((id *)handle + 20);
    uint64_t v5 = v4;
    if (v4)
    {
      id v6 = (unsigned int *)v4;
      uint64_t v7 = v6[29];

      if ((_DWORD)v7 == 2)
      {
        output_handler = a1->output_handler;
        if (output_handler)
        {
          callbacks = output_handler->callbacks;
          if (callbacks)
          {
            connect = (uint64_t (*)(void))callbacks->connect;
            if (connect)
            {
              uint64_t v11 = connect();
LABEL_17:

              return v11;
            }
          }
        }

        else
        {
          BOOL v14 = (char *)*((void *)handle + 36);
          if (v14)
          {
            v32[0] = MEMORY[0x1895F87A8];
            v32[1] = 3221225472LL;
            v32[2] = ___ZL22nw_flow_replay_connectP11nw_protocolS0__block_invoke;
            v32[3] = &__block_descriptor_40_e23_B16__0__nw_hash_node__8l;
            v32[4] = a1;
            nw_hash_table_apply(v14, (uint64_t)v32);
            uint64_t v11 = 1LL;
            goto LABEL_17;
          }
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v12 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          else {
            uint64_t v13 = off_189BBBBC0[v7];
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v36 = "nw_flow_replay_connect";
          __int16 v37 = 2082;
          os_log_type_t v38 = (void *)v13;
          __int16 v39 = 2082;
          int v40 = "flow";
          _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

void sub_181EE83BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_flow_replay_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = a1->handle;
    id v4 = *((id *)handle + 20);
    uint64_t v5 = v4;
    if (v4)
    {
      id v6 = (unsigned int *)v4;
      uint64_t v7 = v6[29];

      if ((_DWORD)v7 == 2)
      {
        output_handler = a1->output_handler;
        if (output_handler)
        {
          callbacks = output_handler->callbacks;
          if (callbacks)
          {
            disconnect = (void (*)(void))callbacks->disconnect;
            if (disconnect) {
              disconnect();
            }
          }
        }

        else
        {
          uint64_t v13 = (char *)*((void *)handle + 36);
          if (v13)
          {
            v30[0] = MEMORY[0x1895F87A8];
            v30[1] = 3221225472LL;
            v30[2] = ___ZL25nw_flow_replay_disconnectP11nw_protocolS0__block_invoke;
            v30[3] = &__block_descriptor_40_e23_B16__0__nw_hash_node__8l;
            v30[4] = a1;
            nw_hash_table_apply(v13, (uint64_t)v30);
          }
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v11 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          else {
            char v12 = off_189BBBBC0[v7];
          }
          *(_DWORD *)buf = 136446722;
          BOOL v34 = "nw_flow_replay_disconnect";
          __int16 v35 = 2082;
          uint64_t v36 = (void *)v12;
          __int16 v37 = 2082;
          os_log_type_t v38 = "flow";
          _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

void sub_181EE899C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_flow_replay_get_message_properties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (!a3) {
      return;
    }
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = *(id *)(v5 + 160);
    uint64_t v7 = v6;
    if (v6)
    {
      uint64_t v8 = (unsigned int *)v6;
      uint64_t v9 = v8[29];

      if ((_DWORD)v9 == 2)
      {
        uint64_t v10 = *(void *)(a1 + 32);
        if (v10)
        {
          uint64_t v11 = *(void *)(v10 + 24);
          if (v11)
          {
            char v12 = *(void (**)(void))(v11 + 248);
            if (v12) {
              v12();
            }
          }
        }

        else
        {
          char v15 = *(char **)(v5 + 288);
          if (v15)
          {
            v32[0] = MEMORY[0x1895F87A8];
            v32[1] = 3221225472LL;
            v32[2] = ___ZL37nw_flow_replay_get_message_propertiesP11nw_protocolS0_P30nw_protocol_message_properties_block_invoke;
            v32[3] = &__block_descriptor_48_e23_B16__0__nw_hash_node__8l;
            v32[4] = a1;
            void v32[5] = a3;
            nw_hash_table_apply(v15, (uint64_t)v32);
          }
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v13 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          else {
            BOOL v14 = off_189BBBBC0[v9];
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v36 = "nw_flow_replay_get_message_properties";
          __int16 v37 = 2082;
          os_log_type_t v38 = (void *)v14;
          __int16 v39 = 2082;
          int v40 = "flow";
          _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

void sub_181EE8F90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_flow_replay_waiting_for_output(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (a1) {
    return a1->output_handler == 0LL;
  }
  __nwlog_obj();
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v13 = "nw_flow_replay_waiting_for_output";
  id v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v13 = "nw_flow_replay_waiting_for_output";
        uint64_t v7 = "%{public}s called with null protocol";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
      }
    }

    else
    {
      if (v10)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v6 = type;
        BOOL v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v13 = "nw_flow_replay_waiting_for_output";
            __int16 v14 = 2082;
            char v15 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v9) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v13 = "nw_flow_replay_waiting_for_output";
        uint64_t v7 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v13 = "nw_flow_replay_waiting_for_output";
        uint64_t v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_17;
      }
    }

uint64_t nw_flow_replay_register_notification(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v9 = *(void *)(a1 + 40);
    id v10 = *(id *)(v9 + 160);
    uint64_t v11 = v10;
    if (v10)
    {
      char v12 = (unsigned int *)v10;
      uint64_t v13 = v12[29];

      if ((_DWORD)v13 == 2)
      {
        uint64_t v14 = *(void *)(a1 + 32);
        if (v14)
        {
          uint64_t v15 = *(void *)(v14 + 24);
          if (v15)
          {
            uint64_t v16 = *(uint64_t (**)(void))(v15 + 144);
            if (v16)
            {
              uint64_t v17 = v16();
LABEL_17:

              return v17;
            }
          }
        }

        else
        {
          os_log_type_t v20 = *(char **)(v9 + 288);
          if (v20)
          {
            v38[0] = MEMORY[0x1895F87A8];
            v38[1] = 3221225472LL;
            v38[2] = ___ZL36nw_flow_replay_register_notificationP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke;
            v38[3] = &__block_descriptor_60_e23_B16__0__nw_hash_node__8l;
            int v39 = a3;
            v38[4] = a1;
            v38[5] = a4;
            v38[6] = a5;
            nw_hash_table_apply(v20, (uint64_t)v38);
            uint64_t v17 = 1LL;
            goto LABEL_17;
          }
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v18 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          else {
            os_log_type_t v19 = off_189BBBBC0[v13];
          }
          *(_DWORD *)buf = 136446722;
          __int16 v43 = "nw_flow_replay_register_notification";
          __int16 v44 = 2082;
          uint64_t v45 = (void *)v19;
          __int16 v46 = 2082;
          os_log_type_t v47 = "flow";
          _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

void sub_181EE97EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_flow_replay_unregister_notification(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = *(id *)(v5 + 160);
    uint64_t v7 = v6;
    if (v6)
    {
      uint64_t v8 = (unsigned int *)v6;
      uint64_t v9 = v8[29];

      if ((_DWORD)v9 == 2)
      {
        uint64_t v10 = *(void *)(a1 + 32);
        if (v10)
        {
          uint64_t v11 = *(void *)(v10 + 24);
          if (v11)
          {
            char v12 = *(uint64_t (**)(void))(v11 + 152);
            if (v12)
            {
              uint64_t v13 = v12();
LABEL_17:

              return v13;
            }
          }
        }

        else
        {
          uint64_t v16 = *(char **)(v5 + 288);
          if (v16)
          {
            v34[0] = MEMORY[0x1895F87A8];
            v34[1] = 3221225472LL;
            v34[2] = ___ZL38nw_flow_replay_unregister_notificationP11nw_protocolS0_31nw_protocol_notification_type_t_block_invoke;
            v34[3] = &__block_descriptor_44_e23_B16__0__nw_hash_node__8l;
            void v34[4] = a1;
            int v35 = a3;
            nw_hash_table_apply(v16, (uint64_t)v34);
            uint64_t v13 = 1LL;
            goto LABEL_17;
          }
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v14 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          else {
            uint64_t v15 = off_189BBBBC0[v9];
          }
          *(_DWORD *)buf = 136446722;
          int v39 = "nw_flow_replay_unregister_notification";
          __int16 v40 = 2082;
          uint64_t v41 = (void *)v15;
          __int16 v42 = 2082;
          __int16 v43 = "flow";
          _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

void sub_181EE9DEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_flow_replay_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = (id *)a1->handle;
    id v5 = handle[20];
    id v6 = v5;
    if (v5)
    {
      uint64_t v7 = (unsigned int *)v5;
      uint64_t v8 = v7[29];

      if ((_DWORD)v8 == 2)
      {
        if (a1->output_handler == a2)
        {
          default_input_handler = a1->default_input_handler;
          if (default_input_handler)
          {
            callbacks = default_input_handler->callbacks;
            if (callbacks)
            {
              disconnected = (void (*)(void))callbacks->disconnected;
              if (disconnected) {
                disconnected();
              }
            }
          }
        }

        else if (handle[36])
        {
          id v9 = handle[23];
          v31[0] = MEMORY[0x1895F87A8];
          v31[1] = 3221225472LL;
          v31[2] = ___ZL27nw_flow_replay_disconnectedP11nw_protocolS0__block_invoke;
          v31[3] = &unk_189BC73F8;
          os_log_type_t v32 = v7;
          os_log_type_t v33 = a2;
          os_log_type_t v34 = a1;
          nw_queue_context_async(v9, v31);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v10 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          else {
            uint64_t v11 = off_189BBBBC0[v8];
          }
          *(_DWORD *)buf = 136446722;
          os_log_type_t v38 = "nw_flow_replay_disconnected";
          __int16 v39 = 2082;
          __int16 v40 = (void *)v11;
          __int16 v41 = 2082;
          __int16 v42 = "flow";
          _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

void sub_181EEA3E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL27nw_flow_replay_disconnectedP11nw_protocolS0__block_invoke(uint64_t a1)
{
  uint64_t v7 = (uint64_t *)nw_endpoint_handler_copy_flow(*(NWConcrete_nw_endpoint_handler **)(a1 + 32));
  if (v7)
  {
    uint64_t v2 = v7[83];
    if (v2)
    {
      BOOL node = nw_hash_table_get_node(v7[83], *(void *)(a1 + 40), 0LL);
      if (node)
      {
        nw_hash_table_remove_node(v2, node);
        uint64_t v4 = *(void *)(a1 + 40);
        if (v4)
        {
          uint64_t v5 = *(void *)(v4 + 24);
          if (v5)
          {
            id v6 = *(void (**)(void))(v5 + 8);
            if (v6) {
              v6();
            }
          }
        }
      }
    }
  }
}

void sub_181EEA498( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t ___ZL38nw_flow_replay_unregister_notificationP11nw_protocolS0_31nw_protocol_notification_type_t_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t object = nw_hash_node_get_object(a2);
  if (object)
  {
    uint64_t v3 = *(void *)(object + 24);
    if (v3)
    {
      uint64_t v4 = *(void (**)(void))(v3 + 152);
      if (v4) {
        v4();
      }
    }
  }

  return 0LL;
}

uint64_t ___ZL36nw_flow_replay_register_notificationP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t object = nw_hash_node_get_object(a2);
  if (object)
  {
    uint64_t v3 = *(void *)(object + 24);
    if (v3)
    {
      uint64_t v4 = *(void (**)(void))(v3 + 144);
      if (v4) {
        v4();
      }
    }
  }

  return 0LL;
}

uint64_t ___ZL37nw_flow_replay_get_message_propertiesP11nw_protocolS0_P30nw_protocol_message_properties_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t object = nw_hash_node_get_object(a2);
  if (object)
  {
    uint64_t v3 = *(void *)(object + 24);
    if (v3)
    {
      uint64_t v4 = *(void (**)(void))(v3 + 248);
      if (v4) {
        v4();
      }
    }
  }

  return 0LL;
}

uint64_t ___ZL25nw_flow_replay_disconnectP11nw_protocolS0__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object = nw_hash_node_get_object(a2);
  if (object)
  {
    uint64_t v3 = *(void *)(object + 24);
    if (v3)
    {
      uint64_t v4 = *(void (**)(void))(v3 + 32);
      if (v4) {
        v4();
      }
    }
  }

  return 1LL;
}

uint64_t ___ZL22nw_flow_replay_connectP11nw_protocolS0__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object = nw_hash_node_get_object(a2);
  if (object)
  {
    uint64_t v3 = *(void *)(object + 24);
    if (v3)
    {
      uint64_t v4 = *(void (**)(void))(v3 + 24);
      if (v4) {
        v4();
      }
    }
  }

  return 1LL;
}

uint64_t ___ZL27nw_flow_replay_updated_pathP11nw_protocolS0_PU21objcproto10OS_nw_path8NSObject_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t object = nw_hash_node_get_object(a2);
  if (object)
  {
    uint64_t v3 = *(void *)(object + 24);
    if (v3)
    {
      uint64_t v4 = *(void (**)(void))(v3 + 168);
      if (v4) {
        v4();
      }
    }
  }

  return 1LL;
}

uint64_t ___ZL37nw_flow_replay_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke( uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  if (nw_frame_get_finalizer_context((uint64_t)v3) == *(void *)(a1 + 48))
  {
    uint64_t v4 = v3[4];
    uint64_t v5 = (void *)v3[5];
    if (v4)
    {
      *(void *)(v4 + 40) = v5;
      uint64_t v5 = (void *)v3[5];
    }

    else
    {
      *(void *)(*(void *)(a1 + 56) + 8LL) = v5;
    }

    *uint64_t v5 = v4;
    v3[4] = 0LL;
    v3[5] = 0LL;
    v21[0] = 0LL;
    v21[1] = v21;
    int v22 = 0;
    v21[2] = 0x2020000000LL;
    uint64_t v6 = *(void *)(a1 + 48);
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    uint64_t v14 = ___ZL37nw_flow_replay_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_2;
    uint64_t v15 = &unk_189BB86C8;
    os_log_type_t v18 = v21;
    uint64_t v20 = v6;
    uint64_t v16 = v3;
    id v7 = *(id *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    id v17 = v7;
    uint64_t v19 = v8;
    uint64_t v9 = *(void *)(v6 + 296);
    do
    {
      if (!v9) {
        break;
      }
      uint64_t v10 = *(void *)(v9 + 16);
      char v11 = ((uint64_t (*)(void *))v14)(v13);
      uint64_t v9 = v10;
    }

    while ((v11 & 1) != 0);

    _Block_object_dispose(v21, 8);
  }

  return 1LL;
}

BOOL ___ZL37nw_flow_replay_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_2( uint64_t a1, void *a2)
{
  uint64_t v99 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
  int v8 = *(_DWORD *)(v5 + 24);
  uint64_t v6 = (int *)(v5 + 24);
  int v7 = v8;
  int v9 = *(_DWORD *)(*(void *)(a1 + 64) + 328LL);
  if (v8 != v9)
  {
    int v10 = v7;
LABEL_19:
    *uint64_t v6 = v10 + 1;
    goto LABEL_20;
  }

  if (*(id *)(a1 + 32) == v3)
  {
    if (gLogDatapath)
    {
      id v80 = v3;
      int v58 = *(_DWORD *)(*(void *)(a1 + 64) + 328LL);
      char logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 40));
      int v9 = v58;
      uint64_t v4 = v80;
      if ((logging_disabled & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v60 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
        {
          id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
          char v61 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
          nw_endpoint_t v62 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
          logging_description = nw_endpoint_get_logging_description(v62);
          id v64 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
          nw_endpoint_t v65 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
          id v66 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
          int v67 = nw_frame_unclaimed_length(*(_DWORD **)(a1 + 32));
          *(_DWORD *)buf = 136448002;
          id v84 = "nw_flow_replay_finalize_output_frames_block_invoke_2";
          __int16 v85 = 2082;
          __int16 v86 = id_string;
          __int16 v87 = 2082;
          id v88 = v61;
          __int16 v89 = 2082;
          id v90 = logging_description;
          __int16 v91 = 2082;
          id v92 = v64;
          __int16 v93 = 2082;
          nw_endpoint_t v94 = v65;
          __int16 v95 = 2114;
          id v96 = v66;
          __int16 v97 = 1024;
          LODWORD(v98) = v67;
          _os_log_impl( &dword_181A5C000,  v60,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Received %u early bytes for fast open",  buf,  0x4Eu);
        }

        uint64_t v4 = v80;
        int v9 = v58;
      }
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 1;
    uint64_t v6 = (int *)(*(void *)(a1 + 64) + 328LL);
    int v10 = *v6;
    goto LABEL_19;
  }

  int v77 = *(_DWORD *)(*(void *)(a1 + 64) + 328LL);
  id v79 = v3;
  if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 40)) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    id v11 = (id)gconnectionLogObj;
    char v12 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
    uint64_t v13 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
    nw_endpoint_t v14 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
    uint64_t v15 = nw_endpoint_get_logging_description(v14);
    uint64_t v16 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
    id v17 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
    id v18 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
    *(_DWORD *)buf = 136447746;
    id v84 = "nw_flow_replay_finalize_output_frames_block_invoke";
    __int16 v85 = 2082;
    __int16 v86 = v12;
    __int16 v87 = 2082;
    id v88 = v13;
    __int16 v89 = 2082;
    id v90 = v15;
    __int16 v91 = 2082;
    id v92 = v16;
    __int16 v93 = 2082;
    nw_endpoint_t v94 = v17;
    __int16 v95 = 2114;
    id v96 = v18;
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v81 = 0;
    if ((__nwlog_fault(v19, &type, &v81) & 1) != 0)
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v20 = (os_log_s *)(id)gconnectionLogObj;
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          int v22 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
          os_log_type_t v23 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
          uint64_t log = v20;
          nw_endpoint_t v24 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
          id v68 = v19;
          BOOL v25 = nw_endpoint_get_logging_description(v24);
          BOOL v26 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
          os_log_type_t v27 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
          id v28 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
          *(_DWORD *)buf = 136447746;
          id v84 = "nw_flow_replay_finalize_output_frames_block_invoke";
          __int16 v85 = 2082;
          __int16 v86 = v22;
          __int16 v87 = 2082;
          id v88 = v23;
          __int16 v89 = 2082;
          id v90 = v25;
          __int16 v91 = 2082;
          id v92 = v26;
          __int16 v93 = 2082;
          nw_endpoint_t v94 = v27;
          __int16 v95 = 2114;
          id v96 = v28;
          uint64_t v20 = log;
          _os_log_impl( &dword_181A5C000,  log,  v21,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Received unexpected early frame",  buf,  0x48u);

          uint64_t v19 = v68;
        }
      }

      else if (v81)
      {
        backtrace_string = __nw_create_backtrace_string();
        if (backtrace_string)
        {
          os_log_type_t v32 = (char *)backtrace_string;
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          os_log_type_t v33 = (os_log_s *)(id)gconnectionLogObj;
          os_log_type_t v34 = type;
          if (os_log_type_enabled(v33, type))
          {
            char v35 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
            char v36 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
            loga = v33;
            os_log_type_t v37 = v35;
            id v69 = v19;
            nw_endpoint_t v76 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
            os_log_type_t v38 = nw_endpoint_get_logging_description(v76);
            __int16 v39 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
            __int16 v40 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
            id v41 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
            *(_DWORD *)buf = 136448002;
            id v84 = "nw_flow_replay_finalize_output_frames_block_invoke";
            __int16 v85 = 2082;
            __int16 v86 = v37;
            __int16 v87 = 2082;
            id v88 = v36;
            __int16 v89 = 2082;
            id v90 = v38;
            __int16 v91 = 2082;
            id v92 = v39;
            __int16 v93 = 2082;
            nw_endpoint_t v94 = v40;
            __int16 v95 = 2114;
            id v96 = v41;
            __int16 v97 = 2082;
            nw_endpoint_t v98 = v32;
            os_log_type_t v33 = loga;
            _os_log_impl( &dword_181A5C000,  loga,  v34,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Received unexpected early frame, dumping backtrace:%{public}s",  buf,  0x52u);

            uint64_t v19 = v69;
          }

          free(v32);
          if (!v19) {
            goto LABEL_16;
          }
          goto LABEL_15;
        }

        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v20 = (os_log_s *)(id)gconnectionLogObj;
        os_log_type_t v50 = type;
        if (os_log_type_enabled(v20, type))
        {
          os_log_type_t v51 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
          id v52 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
          logc = v20;
          nw_endpoint_t v53 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
          os_log_type_t v71 = v19;
          BOOL v54 = nw_endpoint_get_logging_description(v53);
          os_log_type_t v55 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
          char v56 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
          id v57 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
          *(_DWORD *)buf = 136447746;
          id v84 = "nw_flow_replay_finalize_output_frames_block_invoke";
          __int16 v85 = 2082;
          __int16 v86 = v51;
          __int16 v87 = 2082;
          id v88 = v52;
          __int16 v89 = 2082;
          id v90 = v54;
          __int16 v91 = 2082;
          id v92 = v55;
          __int16 v93 = 2082;
          nw_endpoint_t v94 = v56;
          __int16 v95 = 2114;
          id v96 = v57;
          uint64_t v20 = logc;
          _os_log_impl( &dword_181A5C000,  logc,  v50,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Received unexpected early f rame, no backtrace",  buf,  0x48u);

          uint64_t v19 = v71;
        }
      }

      else
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v20 = (os_log_s *)(id)gconnectionLogObj;
        os_log_type_t v42 = type;
        if (os_log_type_enabled(v20, type))
        {
          uint64_t v43 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 40));
          uint64_t v44 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 40));
          nw_endpoint_t logb = v20;
          nw_endpoint_t v45 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 40));
          uint64_t v70 = v19;
          __int16 v46 = nw_endpoint_get_logging_description(v45);
          os_log_type_t v47 = nw_endpoint_handler_state_string(*(void **)(a1 + 40));
          uint64_t v48 = nw_endpoint_handler_mode_string(*(void **)(a1 + 40));
          id v49 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 40));
          *(_DWORD *)buf = 136447746;
          id v84 = "nw_flow_replay_finalize_output_frames_block_invoke";
          __int16 v85 = 2082;
          __int16 v86 = v43;
          __int16 v87 = 2082;
          id v88 = v44;
          __int16 v89 = 2082;
          id v90 = v46;
          __int16 v91 = 2082;
          id v92 = v47;
          __int16 v93 = 2082;
          nw_endpoint_t v94 = v48;
          __int16 v95 = 2114;
          id v96 = v49;
          uint64_t v20 = logb;
          _os_log_impl( &dword_181A5C000,  logb,  v42,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Received unexpected early f rame, backtrace limit exceeded",  buf,  0x48u);

          uint64_t v19 = v70;
        }
      }
    }

    if (v19) {
LABEL_15:
    }
      free(v19);
  }

void sub_181EEB000( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void nw_flow_replay_frame_finalizer(void *a1, uint64_t a2, uint64_t a3)
{
  int v7 = a1;
  buffer = (void *)nw_frame_get_buffer((uint64_t)v7, 0LL);
  if (buffer) {
    free(buffer);
  }
  uint64_t v5 = v7[2];
  uint64_t v6 = (void *)v7[3];
  if (v5)
  {
    *(void *)(v5 + 24) = v6;
    uint64_t v6 = (void *)v7[3];
  }

  else
  {
    *(void *)(a3 + 304) = v6;
  }

  *uint64_t v6 = v5;
  v7[2] = 0LL;
  v7[3] = 0LL;
}

BOOL ___ZL56nw_flow_replay_selected_candidate_has_early_data_to_sendP16nw_flow_protocol_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t object = nw_hash_node_get_object(a2);
  uint64_t extra = (_DWORD *)nw_hash_node_get_extra(a2);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(v6 + 128);
  if (object == v7 && *extra < *(_DWORD *)(v6 + 328)) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  }
  return object != v7;
}

uint64_t ___ZL35nw_flow_replay_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object = nw_hash_node_get_object(a2);
  nw_hash_table_remove_node(*(void *)(*(void *)(a1 + 32) + 288LL), a2);
  if (object)
  {
    uint64_t v5 = *(void *)(object + 24);
    if (v5)
    {
      uint64_t v6 = *(void (**)(uint64_t, void, void))(v5 + 8);
      if (v6) {
        v6(object, *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
      }
    }
  }

  return 1LL;
}

NWConcrete_nw_endpoint_flow *nw_flow_copy_flow_divert_endpoint(NWConcrete_nw_endpoint_flow *a1)
{
  if (a1) {
    uint64_t v2 = a1;
  }
  return a1;
}

uint64_t ___ZL17nw_flow_connectedP11nw_protocolS0__block_invoke(uint64_t a1)
{
  return 1LL;
}

void ___ZL17nw_flow_connectedP11nw_protocolS0__block_invoke_97(uint64_t a1)
{
  uint64_t v2 = *(_WORD **)(a1 + 32);
  id v3 = -[NWConcrete_nw_error initWithDomain:code:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_error), 1, 50);
  *((_DWORD *)v2 + 20) = 589825;
  id v4 = v3;
  nw_endpoint_handler_report(v2, 0LL, v2 + 40, v3);
}

void sub_181EEB2E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void ___ZL26nw_flow_passthrough_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke( uint64_t a1, NWConcrete_nw_endpoint_handler *a2)
{
  uint64_t v74 = *MEMORY[0x1895F89C0];
  id v3 = nw_endpoint_handler_copy_flow(a2);
  id v4 = v3;
  if (v3)
  {
    nw_protocol_notify((void *)v3 + 47, *(void *)(a1 + 40), 22);
    goto LABEL_15;
  }

  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
  }
  id v5 = (id)gconnectionLogObj;
  id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
  uint64_t v7 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
  nw_endpoint_t v8 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
  logging_description = nw_endpoint_get_logging_description(v8);
  int v10 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
  id v11 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
  id v12 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
  *(_DWORD *)buf = 136448002;
  id v57 = "nw_flow_passthrough_notify_block_invoke";
  __int16 v58 = 2082;
  id v59 = id_string;
  __int16 v60 = 2082;
  char v61 = v7;
  __int16 v62 = 2082;
  v63 = logging_description;
  __int16 v64 = 2082;
  nw_endpoint_t v65 = v10;
  __int16 v66 = 2082;
  int v67 = v11;
  __int16 v68 = 2114;
  id v69 = v12;
  __int16 v70 = 2048;
  uint64_t v71 = 0LL;
  uint64_t v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v54 = 0;
  if ((__nwlog_fault(v13, &type, &v54) & 1) == 0) {
    goto LABEL_13;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    nw_endpoint_t v14 = (os_log_s *)(id)gconnectionLogObj;
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v14, type))
    {
      uint64_t v16 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      id v17 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      nw_endpoint_t v18 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      id v49 = v13;
      uint64_t v19 = nw_endpoint_get_logging_description(v18);
      uint64_t v20 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      os_log_type_t v21 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      id v22 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      *(_DWORD *)buf = 136448002;
      id v57 = "nw_flow_passthrough_notify_block_invoke";
      __int16 v58 = 2082;
      id v59 = v16;
      __int16 v60 = 2082;
      char v61 = v17;
      __int16 v62 = 2082;
      v63 = v19;
      __int16 v64 = 2082;
      nw_endpoint_t v65 = v20;
      __int16 v66 = 2082;
      int v67 = v21;
      __int16 v68 = 2114;
      id v69 = v22;
      __int16 v70 = 2048;
      uint64_t v71 = 0LL;
      _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] parent flow %p exists but does not have shared protocol",  buf,  0x52u);

      uint64_t v13 = v49;
    }

void sub_181EEB9E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL32nw_flow_passthrough_disconnectedP11nw_protocolS0__block_invoke(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  v1 = *(void **)(a1 + 32);
  if (v1)
  {
    id v3 = v1;
    uint64_t v4 = v3[29];

    if ((_DWORD)v4 == 2)
    {
      if (*(void *)(a1 + 56) == *(void *)(a1 + 40) + 376LL) {
        nw_endpoint_flow_failed_with_error(*(void **)(a1 + 32), 1, *(void **)(a1 + 48));
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v5 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        else {
          uint64_t v6 = off_189BBBBC0[v4];
        }
        *(_DWORD *)buf = 136446722;
        nw_endpoint_t v18 = "nw_flow_passthrough_disconnected_block_invoke";
        __int16 v19 = 2082;
        uint64_t v20 = (void *)v6;
        __int16 v21 = 2082;
        id v22 = "flow";
        _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
      }
    }

    return;
  }

  __nwlog_obj();
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  nw_endpoint_t v18 = "nw_flow_passthrough_disconnected_block_invoke";
  nw_endpoint_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        nw_endpoint_t v18 = "nw_flow_passthrough_disconnected_block_invoke";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null handler", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          nw_endpoint_t v18 = "nw_flow_passthrough_disconnected_block_invoke";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_28;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        nw_endpoint_t v18 = "nw_flow_passthrough_disconnected_block_invoke";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        nw_endpoint_t v18 = "nw_flow_passthrough_disconnected_block_invoke";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t ___ZL14nw_flow_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t ___ZL14nw_flow_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke_2( uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t ___ZL14nw_flow_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke_90( uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void ___ZL14nw_flow_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke_91( uint64_t a1, NWConcrete_nw_endpoint_handler *a2)
{
  uint64_t v74 = *MEMORY[0x1895F89C0];
  id v3 = nw_endpoint_handler_copy_flow(a2);
  uint64_t v4 = v3;
  if (v3)
  {
    nw_protocol_notify((void *)v3 + 47, *(void *)(a1 + 40), 22);
    goto LABEL_15;
  }

  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
  }
  id v5 = (id)gconnectionLogObj;
  id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
  uint64_t v7 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
  nw_endpoint_t v8 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
  logging_description = nw_endpoint_get_logging_description(v8);
  os_log_type_t v10 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
  id v11 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
  id v12 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
  *(_DWORD *)buf = 136448002;
  id v57 = "nw_flow_notify_block_invoke";
  __int16 v58 = 2082;
  id v59 = id_string;
  __int16 v60 = 2082;
  char v61 = v7;
  __int16 v62 = 2082;
  v63 = logging_description;
  __int16 v64 = 2082;
  nw_endpoint_t v65 = v10;
  __int16 v66 = 2082;
  int v67 = v11;
  __int16 v68 = 2114;
  id v69 = v12;
  __int16 v70 = 2048;
  uint64_t v71 = 0LL;
  BOOL v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v54 = 0;
  if ((__nwlog_fault(v13, &type, &v54) & 1) == 0) {
    goto LABEL_13;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    os_log_type_t v14 = (os_log_s *)(id)gconnectionLogObj;
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v14, type))
    {
      uint64_t v16 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      id v17 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      nw_endpoint_t v18 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      id v49 = v13;
      __int16 v19 = nw_endpoint_get_logging_description(v18);
      uint64_t v20 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      __int16 v21 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      id v22 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      *(_DWORD *)buf = 136448002;
      id v57 = "nw_flow_notify_block_invoke";
      __int16 v58 = 2082;
      id v59 = v16;
      __int16 v60 = 2082;
      char v61 = v17;
      __int16 v62 = 2082;
      v63 = v19;
      __int16 v64 = 2082;
      nw_endpoint_t v65 = v20;
      __int16 v66 = 2082;
      int v67 = v21;
      __int16 v68 = 2114;
      id v69 = v22;
      __int16 v70 = 2048;
      uint64_t v71 = 0LL;
      _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] parent flow %p exists but does not have shared protocol",  buf,  0x52u);

      BOOL v13 = v49;
    }

void sub_181EEC4E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL20nw_flow_disconnectedP11nw_protocolS0__block_invoke(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  v1 = *(void **)(a1 + 32);
  if (v1)
  {
    id v3 = v1;
    uint64_t v4 = v3[29];

    if ((_DWORD)v4 == 2)
    {
      uint64_t v5 = *(void *)(a1 + 40);
      if (*(void *)(a1 + 64) == v5 + 376)
      {
        nw_endpoint_flow_failed_with_error(*(void **)(a1 + 32), 1, *(void **)(a1 + 48));
      }

      else
      {
        uint64_t v6 = *(void *)(v5 + 864);
        if (v6)
        {
          if (*(_BYTE *)(a1 + 80))
          {
            BOOL node = nw_hash_table_get_node(v6, *(void *)(a1 + 56), 0LL);
            if (node
              && !nw_hash_table_remove_node(*(void *)(*(void *)(a1 + 40) + 864LL), node)
              && (nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              nw_endpoint_t v8 = (os_log_s *)(id)gconnectionLogObj;
              if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
              {
                id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
                os_log_type_t v10 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
                nw_endpoint_t v11 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
                logging_description = nw_endpoint_get_logging_description(v11);
                BOOL v13 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
                os_log_type_t v14 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
                id v15 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
                uint64_t v16 = *(void *)(a1 + 72);
                *(_DWORD *)buf = 136448002;
                os_log_type_t v30 = "nw_flow_disconnected_block_invoke";
                __int16 v31 = 2082;
                id v32 = (void *)id_string;
                __int16 v33 = 2082;
                os_log_type_t v34 = v10;
                __int16 v35 = 2082;
                nw_endpoint_t v36 = logging_description;
                __int16 v37 = 2082;
                os_log_type_t v38 = v13;
                __int16 v39 = 2082;
                id v40 = v14;
                __int16 v41 = 2114;
                id v42 = v15;
                __int16 v43 = 2048;
                uint64_t v44 = v16;
                _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to remove prot ocol %p from multiplexed table",  buf,  0x52u);
              }
            }
          }
        }
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v17 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        else {
          nw_endpoint_t v18 = off_189BBBBC0[v4];
        }
        *(_DWORD *)buf = 136446722;
        os_log_type_t v30 = "nw_flow_disconnected_block_invoke";
        __int16 v31 = 2082;
        id v32 = (void *)v18;
        __int16 v33 = 2082;
        os_log_type_t v34 = "flow";
        _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
      }
    }

    return;
  }

  __nwlog_obj();
  __int16 v19 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v30 = "nw_flow_disconnected_block_invoke";
  uint64_t v20 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v27 = 0;
  if (__nwlog_fault(v20, &type, &v27))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_flow_disconnected_block_invoke";
        _os_log_impl(&dword_181A5C000, v21, v22, "%{public}s called with null handler", buf, 0xCu);
      }
    }

    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v21, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v30 = "nw_flow_disconnected_block_invoke";
          __int16 v31 = 2082;
          id v32 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v21,  v24,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_38;
      }

      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_flow_disconnected_block_invoke";
        _os_log_impl(&dword_181A5C000, v21, v24, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_flow_disconnected_block_invoke";
        _os_log_impl( &dword_181A5C000,  v21,  v26,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181EECA50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL22nw_flow_input_finishedP11nw_protocolS0__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void nw_endpoint_handler_unregister_context(void *a1, void *a2)
{
  uint64_t v117 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    char v81 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v102 = "nw_endpoint_handler_unregister_context";
    BOOL v25 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v99 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v82 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        id v102 = "nw_endpoint_handler_unregister_context";
        _os_log_impl(&dword_181A5C000, v26, v82, "%{public}s called with null handler", buf, 0xCu);
      }
    }

    else if (v99)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v84 = type;
      BOOL v85 = os_log_type_enabled(v26, type);
      if (backtrace_string)
      {
        if (v85)
        {
          *(_DWORD *)buf = 136446466;
          id v102 = "nw_endpoint_handler_unregister_context";
          __int16 v103 = 2082;
          uint64_t v104 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v26,  v84,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_80;
      }

      if (v85)
      {
        *(_DWORD *)buf = 136446210;
        id v102 = "nw_endpoint_handler_unregister_context";
        _os_log_impl(&dword_181A5C000, v26, v84, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v86 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        id v102 = "nw_endpoint_handler_unregister_context";
        _os_log_impl( &dword_181A5C000,  v26,  v86,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181EED7FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_flow_reinitialize_protocol_for_handling_requests(void *a1)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v29 = "nw_endpoint_handler_get_mode";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (__nwlog_fault(v6, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v29 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v26)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v29 = "nw_endpoint_handler_get_mode";
            __int16 v30 = 2082;
            os_log_type_t v31 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }

        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v29 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v29 = "nw_endpoint_handler_get_mode";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181EEDFD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_protocol_trainer_bottom_inject_input( uint64_t a1, nw_protocol_metadata *a2, int a3, const void *a4, size_t __size, char a6)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7)
    {
      os_log_type_t v12 = 0LL;
      int v13 = 0;
      if (a4)
      {
        unsigned int v14 = __size;
        if ((_DWORD)__size)
        {
          os_log_type_t v12 = malloc(__size);
          if (!v12)
          {
            __int16 v32 = (os_log_s *)__nwlog_obj();
            os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446466;
            id v40 = "strict_malloc";
            __int16 v41 = 2048;
            id v42 = (char *)v14;
            __int16 v33 = (void *)_os_log_send_and_compose_impl();
            BOOL result = __nwlog_abort((uint64_t)v33);
            if (result)
            {
              __break(1u);
              return result;
            }

            free(v33);
          }

          memcpy(v12, a4, v14);
          int v13 = v14;
        }
      }

      uint64_t v15 = nw_frame_create(0, (uint64_t)v12, v13, (uint64_t)nw_protocol_trainer_frame_finalizer, a1);
      uint64_t v16 = v15;
      if (a2) {
        nw_frame_set_metadata(v15, a2, 1, a3);
      }
      if (v12) {
        nw_frame_set_buffer_used_malloc(v16, 1);
      }
      if (v16)
      {
        *(_BYTE *)(v16 + 186) = *(_BYTE *)(v16 + 186) & 0xFC | a6 & 3;
        *(void *)(v16 + 16) = 0LL;
        os_log_type_t v17 = *(uint64_t **)(v7 + 80);
        *(void *)(v16 + 24) = v17;
        *os_log_type_t v17 = v16;
        *(void *)(v7 + 80) = v16 + 16;
        *(void *)(v16 + 32) = 0LL;
        uint64_t v18 = v16 + 32;
        __int16 v19 = *(uint64_t **)(v7 + 96);
        *(void *)(v16 + 40) = v19;
        *__int16 v19 = v16;
LABEL_13:
        *(void *)(v7 + 96) = v18;
        return 1LL;
      }

      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      id v40 = "__nw_frame_set_ecn_flag";
      BOOL v25 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v37 = 0;
      if (__nwlog_fault(v25, &type, &v37))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          char v26 = (os_log_s *)__nwlog_obj();
          os_log_type_t v27 = type;
          if (os_log_type_enabled(v26, type))
          {
            *(_DWORD *)buf = 136446210;
            id v40 = "__nw_frame_set_ecn_flag";
            nw_endpoint_t v28 = "%{public}s called with null frame";
LABEL_60:
            _os_log_impl(&dword_181A5C000, v26, v27, v28, buf, 0xCu);
          }
        }

        else if (v37)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          char v26 = (os_log_s *)__nwlog_obj();
          os_log_type_t v27 = type;
          BOOL v36 = os_log_type_enabled(v26, type);
          if (backtrace_string)
          {
            if (v36)
            {
              *(_DWORD *)buf = 136446466;
              id v40 = "__nw_frame_set_ecn_flag";
              __int16 v41 = 2082;
              id v42 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v26,  v27,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(backtrace_string);
            goto LABEL_61;
          }

          if (v36)
          {
            *(_DWORD *)buf = 136446210;
            id v40 = "__nw_frame_set_ecn_flag";
            nw_endpoint_t v28 = "%{public}s called with null frame, no backtrace";
            goto LABEL_60;
          }
        }

        else
        {
          char v26 = (os_log_s *)__nwlog_obj();
          os_log_type_t v27 = type;
          if (os_log_type_enabled(v26, type))
          {
            *(_DWORD *)buf = 136446210;
            id v40 = "__nw_frame_set_ecn_flag";
            nw_endpoint_t v28 = "%{public}s called with null frame, backtrace limit exceeded";
            goto LABEL_60;
          }
        }
      }

void nw_protocol_trainer_frame_finalizer(nw_frame *a1, BOOL a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v18 = "nw_protocol_trainer_frame_finalizer";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v18 = "nw_protocol_trainer_frame_finalizer";
      os_log_type_t v10 = "%{public}s called with null protocol";
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v18 = "nw_protocol_trainer_frame_finalizer";
          __int16 v19 = 2082;
          os_log_type_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_35:
        if (!v7) {
          return;
        }
        goto LABEL_36;
      }

      if (!v12) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v18 = "nw_protocol_trainer_frame_finalizer";
      os_log_type_t v10 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      os_log_type_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v18 = "nw_protocol_trainer_frame_finalizer";
      os_log_type_t v10 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

uint64_t nw_protocol_trainer_bottom_notify_input(uint64_t a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v16 = "nw_protocol_trainer_bottom_notify_input";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v13)
      {
        uint64_t v6 = (os_log_s *)__nwlog_obj();
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_protocol_trainer_bottom_notify_input";
        os_log_type_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_32;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (!v10) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_protocol_trainer_bottom_notify_input";
        os_log_type_t v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_32;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v16 = "nw_protocol_trainer_bottom_notify_input";
        __int16 v17 = 2082;
        uint64_t v18 = backtrace_string;
        BOOL v11 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_22:
        _os_log_impl(&dword_181A5C000, v6, v7, v11, buf, 0x16u);
      }

uint64_t nw_protocol_trainer_bottom_check_output(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 136);
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3802000000LL;
      BOOL v25 = __Block_byref_object_copy__17322;
      char v26 = __Block_byref_object_dispose__17323;
      uint64_t object = 0LL;
      char v28 = -1;
      if (v3)
      {
        if (!*(void *)(v3 + 112)
          || (*(_WORD *)(v3 + 204) & 0x100) != 0
          && g_channel_check_validity
          && !g_channel_check_validity(v3, *(void *)(v3 + 88)))
        {
          uint64_t v7 = 0LL;
          uint64_t v9 = 0LL;
        }

        else
        {
          int v6 = *(_DWORD *)(v3 + 52);
          uint64_t v5 = *(unsigned int *)(v3 + 56);
          if (v6) {
            uint64_t v7 = (v6 - (v5 + *(_DWORD *)(v3 + 60)));
          }
          else {
            uint64_t v7 = 0LL;
          }
          uint64_t v9 = *(void *)(v3 + 112) + v5;
        }

        v21[0] = MEMORY[0x1895F87A8];
        v21[1] = 0x40000000LL;
        v21[2] = __nw_protocol_trainer_bottom_check_output_block_invoke;
        void v21[3] = &unk_189BB8778;
        v21[4] = buf;
        nw_frame_foreach_protocol_metadata(v3, 0, (uint64_t)v21);
        uint64_t v8 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(a2 + 16))( a2,  *(void *)(*(void *)&buf[8] + 40LL),  v9,  v7);
        uint64_t v10 = *(void *)(v3 + 32);
        BOOL v11 = *(void **)(v3 + 40);
        if (v10)
        {
          *(void *)(v10 + 40) = v11;
          BOOL v11 = *(void **)(v3 + 40);
        }

        else
        {
          *(void *)(v2 + 144) = v11;
        }

        *BOOL v11 = v10;
        *(void *)(v3 + 32) = 0LL;
        *(void *)(v3 + 40) = 0LL;
        nw_frame_finalize(v3);
      }

      else
      {
        uint64_t v8 = 0LL;
      }

      _Block_object_dispose(buf, 8);
      if ((v28 & 1) != 0 && object) {
        os_release(object);
      }
      return v8;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_check_output";
    char v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_check_output";
        uint64_t v16 = "%{public}s called with null trainer";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    if (!v22)
    {
      BOOL v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_check_output";
        uint64_t v16 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v14 = (os_log_s *)__nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v20 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_check_output";
        uint64_t v16 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_check_output";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      uint64_t v19 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_38;
    }

    goto LABEL_39;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_check_output";
  char v13 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v22)
    {
      BOOL v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_check_output";
        uint64_t v16 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v14 = (os_log_s *)__nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v18 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_check_output";
        uint64_t v16 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_check_output";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      uint64_t v19 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_38:
      _os_log_impl(&dword_181A5C000, v14, v15, v19, buf, 0x16u);
    }

uint64_t __Block_byref_object_copy__17322(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0LL;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__17323(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    uint64_t v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }

  *(void *)(a1 + 40) = 0LL;
}

uint64_t __nw_protocol_trainer_bottom_check_output_block_invoke(uint64_t a1, void *object)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  if (!v4)
  {
    BOOL v5 = nw_array_create();
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
    char v7 = *(_BYTE *)(v6 + 48);
    if ((v7 & 1) != 0)
    {
      uint64_t v8 = *(void **)(v6 + 40);
      if (v8)
      {
        os_release(v8);
        char v7 = *(_BYTE *)(v6 + 48);
      }
    }

    *(void *)(v6 + 40) = v5;
    *(_BYTE *)(v6 + 48) = v7 | 1;
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  }

  nw_array_append(v4, object);
  return 1LL;
}

uint64_t nw_protocol_trainer_top_check_input(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_check_input";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v22)
      {
        char v13 = (os_log_s *)__nwlog_obj();
        os_log_type_t v14 = type;
        if (!os_log_type_enabled(v13, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_check_input";
        os_log_type_t v15 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_45;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      char v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (!v17) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_check_input";
        os_log_type_t v15 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_45;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_check_input";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        BOOL v18 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_35:
        _os_log_impl(&dword_181A5C000, v13, v14, v18, buf, 0x16u);
      }

uint64_t __nw_protocol_trainer_top_check_input_block_invoke(uint64_t a1, void *object)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  if (!v4)
  {
    BOOL v5 = nw_array_create();
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
    char v7 = *(_BYTE *)(v6 + 48);
    if ((v7 & 1) != 0)
    {
      uint64_t v8 = *(void **)(v6 + 40);
      if (v8)
      {
        os_release(v8);
        char v7 = *(_BYTE *)(v6 + 48);
      }
    }

    *(void *)(v6 + 40) = v5;
    *(_BYTE *)(v6 + 48) = v7 | 1;
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  }

  nw_array_append(v4, object);
  return 1LL;
}

BOOL nw_protocol_trainer_top_inject_output( uint64_t a1, nw_protocol_metadata *a2, int a3, const void *a4, size_t __size)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v31 = "nw_protocol_trainer_top_inject_output";
    BOOL v18 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v19 = (os_log_s *)__nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v31 = "nw_protocol_trainer_top_inject_output";
        uint64_t v21 = "%{public}s called with null protocol";
LABEL_41:
        _os_log_impl(&dword_181A5C000, v19, v20, v21, buf, 0xCu);
      }

uint64_t nw_protocol_trainer_top_flush_output(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_flush_output";
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!v27)
      {
        int v11 = (os_log_s *)__nwlog_obj();
        os_log_type_t v12 = type[0];
        if (!os_log_type_enabled(v11, type[0])) {
          goto LABEL_41;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_flush_output";
        uint64_t v13 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_40;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type[0];
      BOOL v15 = os_log_type_enabled(v11, type[0]);
      if (!backtrace_string)
      {
        if (!v15) {
          goto LABEL_41;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_flush_output";
        uint64_t v13 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_40;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_flush_output";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        uint64_t v16 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_30:
        _os_log_impl(&dword_181A5C000, v11, v12, v16, buf, 0x16u);
      }

uint64_t __nw_protocol_trainer_top_flush_output_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL))
  {
    uint64_t v4 = *(void *)(a1[6] + 104LL);
    if (v4)
    {
      unsigned int v41 = 0;
      BOOL v5 = (void *)nw_frame_unclaimed_bytes(a2, &v41);
      if (!*(void *)(v4 + 112)
        || (*(_WORD *)(v4 + 204) & 0x100) != 0
        && g_channel_check_validity
        && !g_channel_check_validity(v4, *(void *)(v4 + 88)))
      {
        unsigned int v8 = 0;
        int v11 = 0LL;
      }

      else
      {
        int v7 = *(_DWORD *)(v4 + 52);
        uint64_t v6 = *(unsigned int *)(v4 + 56);
        if (v7) {
          unsigned int v8 = v7 - (v6 + *(_DWORD *)(v4 + 60));
        }
        else {
          unsigned int v8 = 0;
        }
        int v11 = (const void *)(*(void *)(v4 + 112) + v6);
      }

      uint64_t v37 = 0LL;
      os_log_type_t v38 = &v37;
      uint64_t v39 = 0x2000000000LL;
      char v40 = 0;
      v36[0] = MEMORY[0x1895F87A8];
      v36[1] = 0x40000000LL;
      v36[2] = __nw_protocol_trainer_top_flush_output_block_invoke_2;
      v36[3] = &unk_189BB87C8;
      v36[4] = &v37;
      v36[5] = a2;
      nw_frame_foreach_protocol_metadata(v4, 0, (uint64_t)v36);
      if (!*((_BYTE *)v38 + 24) && (!v5 || !v11 || v41 < v8))
      {
        *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) = 0;
        uint64_t v24 = *(void *)(a2 + 32);
        BOOL v25 = *(void **)(a2 + 40);
        if (v24)
        {
          *(void *)(v24 + 40) = v25;
          BOOL v25 = *(void **)(a2 + 40);
        }

        else
        {
          *(void *)(a1[5] + 8LL) = v25;
        }

        *BOOL v25 = v24;
        *(void *)(a2 + 32) = 0LL;
        *(void *)(a2 + 40) = 0LL;
        nw_frame_finalize(a2);
        uint64_t v29 = *(void *)(v4 + 32);
        uint64_t v30 = *(void **)(v4 + 40);
        if (v29)
        {
          *(void *)(v29 + 40) = v30;
          uint64_t v30 = *(void **)(v4 + 40);
        }

        else
        {
          *(void *)(a1[6] + 112LL) = v30;
        }

        *uint64_t v30 = v29;
        *(void *)(v4 + 32) = 0LL;
        *(void *)(v4 + 40) = 0LL;
LABEL_51:
        nw_frame_finalize(v4);
        _Block_object_dispose(&v37, 8);
        return 1LL;
      }

      if (v5 && v11)
      {
        memcpy(v5, v11, v8);
        nw_frame_claim(a2, v12, v8, 0);
        nw_frame_collapse(a2);
        nw_frame_unclaim(a2, v13, v8, 0);
      }

      uint64_t v14 = *(void *)(v4 + 32);
      BOOL v15 = *(void **)(v4 + 40);
      if (v14)
      {
        *(void *)(v14 + 40) = v15;
        BOOL v15 = *(void **)(v4 + 40);
      }

      else
      {
        *(void *)(a1[6] + 112LL) = v15;
      }

      *BOOL v15 = v14;
      *(void *)(v4 + 32) = 0LL;
      *(void *)(v4 + 40) = 0LL;
      uint64_t v16 = a1[6];
      int v17 = *(_DWORD *)(v16 + 192);
      *(_DWORD *)(v16 + 192) = v17 - 1;
      if (v17) {
        goto LABEL_51;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v18 = *(unsigned int *)(a1[6] + 192LL);
      *(_DWORD *)buf = 136446978;
      uint64_t v43 = "nw_protocol_trainer_top_flush_output_block_invoke";
      __int16 v44 = 2082;
      uint64_t v45 = "trainer->injected_output_count";
      __int16 v46 = 2048;
      uint64_t v47 = 1LL;
      __int16 v48 = 2048;
      uint64_t v49 = v18;
      BOOL v19 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v34 = 0;
      if (__nwlog_fault(v19, &type, &v34))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v20 = (os_log_s *)gLogObj;
          os_log_type_t v21 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            uint64_t v22 = *(unsigned int *)(a1[6] + 192LL);
            *(_DWORD *)buf = 136446978;
            uint64_t v43 = "nw_protocol_trainer_top_flush_output_block_invoke";
            __int16 v44 = 2082;
            uint64_t v45 = "trainer->injected_output_count";
            __int16 v46 = 2048;
            uint64_t v47 = 1LL;
            __int16 v48 = 2048;
            uint64_t v49 = v22;
            uint64_t v23 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_47:
            _os_log_impl(&dword_181A5C000, v20, v21, v23, buf, 0x2Au);
          }
        }

        else if (v34)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v20 = (os_log_s *)gLogObj;
          os_log_type_t v21 = type;
          BOOL v27 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (backtrace_string)
          {
            if (v27)
            {
              uint64_t v28 = *(unsigned int *)(a1[6] + 192LL);
              *(_DWORD *)buf = 136447234;
              uint64_t v43 = "nw_protocol_trainer_top_flush_output_block_invoke";
              __int16 v44 = 2082;
              uint64_t v45 = "trainer->injected_output_count";
              __int16 v46 = 2048;
              uint64_t v47 = 1LL;
              __int16 v48 = 2048;
              uint64_t v49 = v28;
              __int16 v50 = 2082;
              os_log_type_t v51 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v20,  v21,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
            }

            free(backtrace_string);
            goto LABEL_48;
          }

          if (v27)
          {
            uint64_t v32 = *(unsigned int *)(a1[6] + 192LL);
            *(_DWORD *)buf = 136446978;
            uint64_t v43 = "nw_protocol_trainer_top_flush_output_block_invoke";
            __int16 v44 = 2082;
            uint64_t v45 = "trainer->injected_output_count";
            __int16 v46 = 2048;
            uint64_t v47 = 1LL;
            __int16 v48 = 2048;
            uint64_t v49 = v32;
            uint64_t v23 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
            goto LABEL_47;
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v20 = (os_log_s *)gLogObj;
          os_log_type_t v21 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            uint64_t v31 = *(unsigned int *)(a1[6] + 192LL);
            *(_DWORD *)buf = 136446978;
            uint64_t v43 = "nw_protocol_trainer_top_flush_output_block_invoke";
            __int16 v44 = 2082;
            uint64_t v45 = "trainer->injected_output_count";
            __int16 v46 = 2048;
            uint64_t v47 = 1LL;
            __int16 v48 = 2048;
            uint64_t v49 = v31;
            uint64_t v23 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
            goto LABEL_47;
          }
        }
      }

uint64_t __nw_protocol_trainer_top_flush_output_block_invoke_2(uint64_t a1, nw_protocol_metadata *a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  return 1LL;
}

uint64_t nw_protocol_trainer_top_connect(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v15 = "nw_protocol_trainer_top_connect";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v15 = "nw_protocol_trainer_top_connect";
      int v7 = "%{public}s called with null protocol";
      goto LABEL_33;
    }

    if (!v12)
    {
      BOOL v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v15 = "nw_protocol_trainer_top_connect";
      int v7 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_33;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (!v9) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v15 = "nw_protocol_trainer_top_connect";
      int v7 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_33;
    }

    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v15 = "nw_protocol_trainer_top_connect";
      __int16 v16 = 2082;
      int v17 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_34:
    if (!v4) {
      return 0LL;
    }
LABEL_35:
    free(v4);
    return 0LL;
  }

  if (!*(void *)(a1 + 40))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v15 = "nw_protocol_trainer_top_connect";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v15 = "nw_protocol_trainer_top_connect";
      int v7 = "%{public}s called with null trainer";
      goto LABEL_33;
    }

    if (!v12)
    {
      BOOL v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v15 = "nw_protocol_trainer_top_connect";
      int v7 = "%{public}s called with null trainer, backtrace limit exceeded";
      goto LABEL_33;
    }

    uint64_t v10 = (char *)__nw_create_backtrace_string();
    BOOL v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v11 = os_log_type_enabled(v5, type);
    if (v10)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v15 = "nw_protocol_trainer_top_connect";
        __int16 v16 = 2082;
        int v17 = v10;
        _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null trainer, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v10);
      if (!v4) {
        return 0LL;
      }
      goto LABEL_35;
    }

    if (v11)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v15 = "nw_protocol_trainer_top_connect";
      int v7 = "%{public}s called with null trainer, no backtrace";
LABEL_33:
      _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
      goto LABEL_34;
    }

    goto LABEL_34;
  }

  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v1 + 24) + 24LL);
    if (v2) {
      return v2();
    }
  }

  return 0LL;
}

uint64_t nw_protocol_trainer_top_disconnect(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_top_disconnect";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v11)
      {
        uint64_t v4 = (os_log_s *)__nwlog_obj();
        os_log_type_t v5 = type;
        if (!os_log_type_enabled(v4, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_top_disconnect";
        os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_32;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (!backtrace_string)
      {
        if (!v8) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_top_disconnect";
        os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_32;
      }

      if (v8)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v14 = "nw_protocol_trainer_top_disconnect";
        __int16 v15 = 2082;
        __int16 v16 = backtrace_string;
        BOOL v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_22:
        _os_log_impl(&dword_181A5C000, v4, v5, v9, buf, 0x16u);
      }

uint64_t nw_protocol_trainer_top_expect_connected(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 40);
    if (v1) {
      return *(_BYTE *)(v1 + 196) & 1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_top_expect_connected";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_top_expect_connected";
        os_log_type_t v6 = "%{public}s called with null trainer";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (!v11)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_top_expect_connected";
        os_log_type_t v6 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_top_expect_connected";
        os_log_type_t v6 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v14 = "nw_protocol_trainer_top_expect_connected";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_21;
    }

    goto LABEL_22;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_protocol_trainer_top_expect_connected";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_top_expect_connected";
        os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_top_expect_connected";
        os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v14 = "nw_protocol_trainer_top_expect_connected";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v4, v5, v9, buf, 0x16u);
    }

uint64_t nw_protocol_trainer_top_expect_disconnected(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 40);
    if (v1) {
      return (*(unsigned __int8 *)(v1 + 196) >> 1) & 1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_top_expect_disconnected";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_top_expect_disconnected";
        os_log_type_t v6 = "%{public}s called with null trainer";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (!v11)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_top_expect_disconnected";
        os_log_type_t v6 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_top_expect_disconnected";
        os_log_type_t v6 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v14 = "nw_protocol_trainer_top_expect_disconnected";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_21;
    }

    goto LABEL_22;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_protocol_trainer_top_expect_disconnected";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_top_expect_disconnected";
        os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_top_expect_disconnected";
        os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v14 = "nw_protocol_trainer_top_expect_disconnected";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v4, v5, v9, buf, 0x16u);
    }

uint64_t nw_protocol_trainer_bottom_expect_disconnect(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 40);
    if (v1) {
      return (*(unsigned __int8 *)(v1 + 196) >> 2) & 1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_bottom_expect_disconnect";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_bottom_expect_disconnect";
        os_log_type_t v6 = "%{public}s called with null trainer";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (!v11)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_bottom_expect_disconnect";
        os_log_type_t v6 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_bottom_expect_disconnect";
        os_log_type_t v6 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v14 = "nw_protocol_trainer_bottom_expect_disconnect";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_21;
    }

    goto LABEL_22;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_protocol_trainer_bottom_expect_disconnect";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_bottom_expect_disconnect";
        os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_bottom_expect_disconnect";
        os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v14 = "nw_protocol_trainer_bottom_expect_disconnect";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v4, v5, v9, buf, 0x16u);
    }

uint64_t nw_protocol_trainer_bottom_expect_reset(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 40);
    if (v1) {
      return (*(unsigned __int8 *)(v1 + 196) >> 3) & 1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_bottom_expect_reset";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_bottom_expect_reset";
        os_log_type_t v6 = "%{public}s called with null trainer";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (!v11)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_bottom_expect_reset";
        os_log_type_t v6 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_bottom_expect_reset";
        os_log_type_t v6 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v14 = "nw_protocol_trainer_bottom_expect_reset";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_21;
    }

    goto LABEL_22;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_protocol_trainer_bottom_expect_reset";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_bottom_expect_reset";
        os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_bottom_expect_reset";
        os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v14 = "nw_protocol_trainer_bottom_expect_reset";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v4, v5, v9, buf, 0x16u);
    }

BOOL nw_protocol_trainer_expect_frames_consumed(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 40);
    if (v1) {
      return *(void *)(v1 + 72) == 0LL;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_expect_frames_consumed";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_expect_frames_consumed";
        os_log_type_t v6 = "%{public}s called with null trainer";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (!v11)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_expect_frames_consumed";
        os_log_type_t v6 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_expect_frames_consumed";
        os_log_type_t v6 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v14 = "nw_protocol_trainer_expect_frames_consumed";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_21;
    }

    goto LABEL_22;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v14 = "nw_protocol_trainer_expect_frames_consumed";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_expect_frames_consumed";
        os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_expect_frames_consumed";
        os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v14 = "nw_protocol_trainer_expect_frames_consumed";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v4, v5, v9, buf, 0x16u);
    }

void nw_protocol_trainer_bottom_set_output_style(uint64_t a1, int a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2)
    {
      *(_DWORD *)(v2 + 184) = a2;
      return;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_bottom_set_output_style";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (__nwlog_fault(v3, &type, &v11))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v4 = (os_log_s *)__nwlog_obj();
        os_log_type_t v5 = type;
        if (!os_log_type_enabled(v4, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_bottom_set_output_style";
        os_log_type_t v6 = "%{public}s called with null trainer";
        goto LABEL_32;
      }

      if (!v11)
      {
        uint64_t v4 = (os_log_s *)__nwlog_obj();
        os_log_type_t v5 = type;
        if (!os_log_type_enabled(v4, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_bottom_set_output_style";
        os_log_type_t v6 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_32;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v10 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v14 = "nw_protocol_trainer_bottom_set_output_style";
          __int16 v15 = 2082;
          __int16 v16 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null trainer, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (v3) {
          goto LABEL_34;
        }
        return;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_trainer_bottom_set_output_style";
        os_log_type_t v6 = "%{public}s called with null trainer, no backtrace";
LABEL_32:
        _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
      }
    }
  }

  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_bottom_set_output_style";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_protocol_trainer_bottom_set_output_style";
      os_log_type_t v6 = "%{public}s called with null protocol";
      goto LABEL_32;
    }

    if (!v11)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_protocol_trainer_bottom_set_output_style";
      os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_32;
    }

    int v7 = (char *)__nw_create_backtrace_string();
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!v7)
    {
      if (!v8) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_protocol_trainer_bottom_set_output_style";
      os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_32;
    }

    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v14 = "nw_protocol_trainer_bottom_set_output_style";
      __int16 v15 = 2082;
      __int16 v16 = v7;
      _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v7);
  }

void nw_protocol_trainer_set_local(uint64_t a1, void *object)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v15 = "nw_protocol_trainer_set_local";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v15 = "nw_protocol_trainer_set_local";
      int v7 = "%{public}s called with null protocol";
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v15 = "nw_protocol_trainer_set_local";
          __int16 v16 = 2082;
          uint64_t v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_36:
        if (!v4) {
          return;
        }
LABEL_37:
        free(v4);
        return;
      }

      if (!v9) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v15 = "nw_protocol_trainer_set_local";
      int v7 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      os_log_type_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v15 = "nw_protocol_trainer_set_local";
      int v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

uint64_t *nw_protocol_trainer_top_identifier()
{
  if (nw_protocol_trainer_top_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_trainer_top_identifier::onceToken, &__block_literal_global_17453);
  }
  return &g_trainer_top_protocol_identifier;
}

BOOL __nw_protocol_trainer_top_identifier_block_invoke()
{
  unk_18C5A2F0C = 0LL;
  unk_18C5A2F04 = 0LL;
  strcpy((char *)&g_trainer_top_protocol_identifier, "trainer_top");
  qword_18C5A2F70 = (uint64_t)nw_protocol_default_get_input_frames;
  unk_18C5A2F78 = nw_protocol_default_get_output_frames;
  qword_18C5A2F80 = (uint64_t)nw_protocol_default_finalize_output_frames;
  unk_18C5A2F88 = nw_protocol_default_link_state;
  qword_18C5A2FE0 = (uint64_t)nw_protocol_default_output_finished;
  unk_18C5A2FE8 = nw_protocol_default_get_output_local;
  qword_18C5A2F30 = (uint64_t)nw_protocol_default_replace_input_handler;
  unk_18C5A2F38 = nw_protocol_default_connect;
  qword_18C5A3020 = (uint64_t)nw_protocol_default_reset;
  unk_18C5A3028 = nw_protocol_default_input_flush;
  qword_18C5A2FD0 = (uint64_t)nw_protocol_default_supports_external_data;
  unk_18C5A2FD8 = nw_protocol_default_input_finished;
  qword_18C5A2FF0 = (uint64_t)nw_protocol_default_get_output_interface;
  unk_18C5A2FF8 = nw_protocol_default_waiting_for_output;
  qword_18C5A2FB0 = (uint64_t)nw_protocol_default_register_notification;
  unk_18C5A2FB8 = nw_protocol_default_unregister_notification;
  qword_18C5A2FC0 = (uint64_t)nw_protocol_default_notify;
  unk_18C5A2FC8 = nw_protocol_default_updated_path;
  qword_18C5A3000 = (uint64_t)nw_protocol_default_copy_info;
  unk_18C5A3008 = nw_protocol_default_add_listen_handler;
  qword_18C5A3010 = (uint64_t)nw_protocol_default_remove_listen_handler;
  unk_18C5A3018 = nw_protocol_default_get_message_properties;
  g_trainer_top_protocol_callbacks = (uint64_t)nw_protocol_default_add_input_handler;
  *(void *)algn_18C5A2F28 = nw_protocol_trainer_remove_input_handler;
  dword_18C5A2F14 = 0;
  qword_18C5A2F40 = (uint64_t)nw_protocol_default_disconnect;
  unk_18C5A2F48 = nw_protocol_trainer_connected;
  qword_18C5A2F50 = (uint64_t)nw_protocol_trainer_disconnected;
  unk_18C5A2F58 = nw_protocol_default_error;
  qword_18C5A2F60 = (uint64_t)nw_protocol_trainer_input_available;
  unk_18C5A2F68 = nw_protocol_default_output_available;
  qword_18C5A2F90 = (uint64_t)nw_protocol_trainer_get_parameters;
  unk_18C5A2F98 = nw_protocol_trainer_get_path;
  qword_18C5A2FA0 = (uint64_t)nw_protocol_trainer_get_local;
  unk_18C5A2FA8 = nw_protocol_trainer_get_remote;
  qword_18C5A2F18 = 0x100000000LL;
  return nw_protocol_register_extended(&g_trainer_top_protocol_identifier, (uint64_t)nw_protocol_trainer_top_create);
}

uint64_t nw_protocol_trainer_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v27 = "nw_protocol_trainer_remove_input_handler";
    __int16 v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v24)
      {
        uint64_t v17 = (os_log_s *)__nwlog_obj();
        os_log_type_t v18 = type;
        if (!os_log_type_enabled(v17, type)) {
          goto LABEL_57;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v27 = "nw_protocol_trainer_remove_input_handler";
        BOOL v19 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_56;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v21 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (!v21) {
          goto LABEL_57;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v27 = "nw_protocol_trainer_remove_input_handler";
        BOOL v19 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_56;
      }

      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v27 = "nw_protocol_trainer_remove_input_handler";
        __int16 v28 = 2082;
        uint64_t v29 = backtrace_string;
        uint64_t v22 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_46:
        _os_log_impl(&dword_181A5C000, v17, v18, v22, buf, 0x16u);
      }

void nw_protocol_trainer_connected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_connected";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_protocol_trainer_connected";
      os_log_type_t v6 = "%{public}s called with null protocol";
    }

    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v14 = "nw_protocol_trainer_connected";
          __int16 v15 = 2082;
          __int16 v16 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_34:
        if (!v3) {
          return;
        }
LABEL_35:
        free(v3);
        return;
      }

      if (!v8) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_protocol_trainer_connected";
      os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_protocol_trainer_connected";
      os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

void nw_protocol_trainer_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v14 = "nw_protocol_trainer_disconnected";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_protocol_trainer_disconnected";
      os_log_type_t v6 = "%{public}s called with null protocol";
    }

    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v14 = "nw_protocol_trainer_disconnected";
          __int16 v15 = 2082;
          __int16 v16 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_34:
        if (!v3) {
          return;
        }
LABEL_35:
        free(v3);
        return;
      }

      if (!v8) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_protocol_trainer_disconnected";
      os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_protocol_trainer_disconnected";
      os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

void nw_protocol_trainer_input_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_trainer_input_available";
    int v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v21 = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      BOOL v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = v21;
      if (!os_log_type_enabled(v8, v21)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_trainer_input_available";
      BOOL v10 = "%{public}s called with null protocol";
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = v21;
      BOOL v12 = os_log_type_enabled(v8, v21);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_trainer_input_available";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7) {
          return;
        }
LABEL_39:
        free(v7);
        return;
      }

      if (!v12) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_trainer_input_available";
      BOOL v10 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      BOOL v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = v21;
      if (!os_log_type_enabled(v8, v21)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_trainer_input_available";
      BOOL v10 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

uint64_t nw_protocol_trainer_get_path(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = a1->handle;
    if (handle) {
      return handle[22];
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v14 = "nw_protocol_trainer_get_path";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_trainer_get_path";
        char v6 = "%{public}s called with null trainer";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (!v11)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_trainer_get_path";
        char v6 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_trainer_get_path";
        char v6 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v14 = "nw_protocol_trainer_get_path";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      os_log_type_t v9 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_21;
    }

    goto LABEL_22;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v14 = "nw_protocol_trainer_get_path";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_trainer_get_path";
        char v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_trainer_get_path";
        char v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v14 = "nw_protocol_trainer_get_path";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      os_log_type_t v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v4, v5, v9, buf, 0x16u);
    }

uint64_t nw_protocol_trainer_get_parameters(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = a1->handle;
    if (handle) {
      return handle[21];
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v14 = "nw_protocol_trainer_get_parameters";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_trainer_get_parameters";
        char v6 = "%{public}s called with null trainer";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (!v11)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_trainer_get_parameters";
        char v6 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_trainer_get_parameters";
        char v6 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v14 = "nw_protocol_trainer_get_parameters";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      os_log_type_t v9 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_21;
    }

    goto LABEL_22;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v14 = "nw_protocol_trainer_get_parameters";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_trainer_get_parameters";
        char v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_trainer_get_parameters";
        char v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v14 = "nw_protocol_trainer_get_parameters";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      os_log_type_t v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v4, v5, v9, buf, 0x16u);
    }

uint64_t nw_protocol_trainer_get_local(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = a1->handle;
    if (handle) {
      return handle[20];
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v14 = "nw_protocol_trainer_get_local";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_trainer_get_local";
        char v6 = "%{public}s called with null trainer";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (!v11)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_trainer_get_local";
        char v6 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_trainer_get_local";
        char v6 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v14 = "nw_protocol_trainer_get_local";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      os_log_type_t v9 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_21;
    }

    goto LABEL_22;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v14 = "nw_protocol_trainer_get_local";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_trainer_get_local";
        char v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_trainer_get_local";
        char v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v14 = "nw_protocol_trainer_get_local";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      os_log_type_t v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v4, v5, v9, buf, 0x16u);
    }

uint64_t nw_protocol_trainer_get_remote(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = a1->handle;
    if (handle) {
      return handle[19];
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v14 = "nw_protocol_trainer_get_remote";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_trainer_get_remote";
        char v6 = "%{public}s called with null trainer";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (!v11)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_trainer_get_remote";
        char v6 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_trainer_get_remote";
        char v6 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v14 = "nw_protocol_trainer_get_remote";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      os_log_type_t v9 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_21;
    }

    goto LABEL_22;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v14 = "nw_protocol_trainer_get_remote";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_trainer_get_remote";
        char v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_protocol_trainer_get_remote";
        char v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v14 = "nw_protocol_trainer_get_remote";
      __int16 v15 = 2082;
      __int16 v16 = backtrace_string;
      os_log_type_t v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v4, v5, v9, buf, 0x16u);
    }

BOOL nw_protocol_trainer_top_create(const nw_protocol_identifier *a1, nw_endpoint *a2, nw_parameters *a3)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  __memptr = 0LL;
  if (!posix_memalign(&__memptr, 8uLL, 0xC8uLL))
  {
    os_log_type_t v5 = __memptr;
    if (__memptr)
    {
LABEL_3:
      v5[6] = 0u;
      v5[7] = 0u;
      v5[8] = 0u;
      v5[9] = 0u;
      *((void *)v5 + 24) = 0LL;
      v5[10] = 0u;
      v5[11] = 0u;
      v5[4] = 0u;
      v5[5] = 0u;
      v5[2] = 0u;
      v5[3] = 0u;
      *os_log_type_t v5 = 0u;
      v5[1] = 0u;
      *((void *)v5 + 2) = &g_trainer_top_protocol_identifier;
      *((void *)v5 + 3) = &g_trainer_top_protocol_callbacks;
      *((void *)v5 + 5) = v5;
      *((void *)v5 + 10) = (char *)v5 + 72;
      *((void *)v5 + 12) = (char *)v5 + 88;
      *((void *)v5 + 14) = (char *)v5 + 104;
      *((void *)v5 + 16) = (char *)v5 + 120;
      *((void *)v5 + 18) = (char *)v5 + 136;
      if (a2)
      {
        *((void *)v5 + 19) = os_retain(a2);
        if (a3)
        {
LABEL_5:
          char v6 = os_retain(a3);
LABEL_8:
          *((void *)v5 + 21) = v6;
          uuid_generate_random(out);
          *((void *)v5 + 22) = nw_path_create_static(a2, a3, 1, out, 0, 0, 1, 0, 0LL, 0LL, 0LL);
          *((_DWORD *)v5 + 46) = 0;
          return (BOOL)v5;
        }
      }

      else
      {
        *((void *)v5 + 19) = 0LL;
        if (a3) {
          goto LABEL_5;
        }
      }

      char v6 = 0LL;
      goto LABEL_8;
    }
  }

  BOOL v8 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  *(_DWORD *)out = 136446722;
  *(void *)&out[4] = "strict_memalign";
  *(_WORD *)&out[12] = 2048;
  *(void *)&out[14] = 8LL;
  __int16 v12 = 2048;
  uint64_t v13 = 200LL;
  os_log_type_t v9 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    os_log_type_t v5 = __memptr;
    goto LABEL_3;
  }

  __break(1u);
  return result;
}

uint64_t ___ZL35nw_protocol_trainer_input_availableP11nw_protocolS0__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *(void **)(a2 + 40);
  uint64_t v2 = (void *)(a2 + 32);
  if (v3)
  {
    *(void *)(v3 + 40) = v4;
    uint64_t v4 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(*(void *)(a1 + 32) + 8LL) = v4;
  }

  *uint64_t v4 = v3;
  void *v2 = 0LL;
  *(void *)(a2 + 40) = 0LL;
  uint64_t v5 = *(void *)(a1 + 40);
  char v6 = *(void **)(v5 + 128);
  *(void *)(a2 + 40) = v6;
  *char v6 = a2;
  *(void *)(v5 + 128) = v2;
  return 1LL;
}

uint64_t *nw_protocol_trainer_bottom_identifier()
{
  if (nw_protocol_trainer_bottom_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_trainer_bottom_identifier::onceToken, &__block_literal_global_12_17538);
  }
  return &g_trainer_bottom_protocol_identifier;
}

BOOL __nw_protocol_trainer_bottom_identifier_block_invoke()
{
  unk_18C5A304F = 0LL;
  unk_18C5A3047 = 0LL;
  strcpy((char *)g_trainer_bottom_protocol_identifier, "trainer_bottom");
  qword_18C5A30A0 = (uint64_t)nw_protocol_default_input_available;
  unk_18C5A30A8 = nw_protocol_default_output_available;
  qword_18C5A30E0 = (uint64_t)nw_protocol_default_get_local;
  unk_18C5A30E8 = nw_protocol_default_get_remote;
  qword_18C5A30D0 = (uint64_t)nw_protocol_default_get_parameters;
  unk_18C5A30D8 = nw_protocol_default_get_path;
  qword_18C5A3120 = (uint64_t)nw_protocol_default_output_finished;
  unk_18C5A3128 = nw_protocol_default_get_output_local;
  qword_18C5A3090 = (uint64_t)nw_protocol_default_disconnected;
  unk_18C5A3098 = nw_protocol_default_error;
  qword_18C5A3110 = (uint64_t)nw_protocol_default_supports_external_data;
  unk_18C5A3118 = nw_protocol_default_input_finished;
  qword_18C5A3130 = (uint64_t)nw_protocol_default_get_output_interface;
  unk_18C5A3138 = nw_protocol_default_waiting_for_output;
  qword_18C5A30F0 = (uint64_t)nw_protocol_default_register_notification;
  unk_18C5A30F8 = nw_protocol_default_unregister_notification;
  qword_18C5A3100 = (uint64_t)nw_protocol_default_notify;
  unk_18C5A3108 = nw_protocol_default_updated_path;
  qword_18C5A3140 = (uint64_t)nw_protocol_default_copy_info;
  unk_18C5A3148 = nw_protocol_default_add_listen_handler;
  qword_18C5A3150 = (uint64_t)nw_protocol_default_remove_listen_handler;
  unk_18C5A3158 = nw_protocol_default_get_message_properties;
  g_trainer_bottom_protocol_callbacks = (uint64_t)nw_protocol_trainer_add_input_handler;
  *(void *)algn_18C5A3068 = nw_protocol_trainer_remove_input_handler;
  qword_18C5A30B0 = (uint64_t)nw_protocol_trainer_bottom_get_input_frames;
  unk_18C5A30B8 = nw_protocol_trainer_bottom_get_output_frames;
  qword_18C5A30C0 = (uint64_t)nw_protocol_trainer_bottom_finalize_output_frames;
  unk_18C5A30C8 = nw_protocol_default_link_state;
  byte_18C5A3057 = 0;
  qword_18C5A3070 = (uint64_t)nw_protocol_default_replace_input_handler;
  unk_18C5A3078 = nw_protocol_trainer_connect;
  qword_18C5A3080 = (uint64_t)nw_protocol_trainer_disconnect;
  unk_18C5A3088 = nw_protocol_default_connected;
  qword_18C5A3160 = (uint64_t)nw_protocol_trainer_reset;
  unk_18C5A3168 = nw_protocol_default_input_flush;
  qword_18C5A3058 = 0x100000000LL;
  return nw_protocol_register_extended(g_trainer_bottom_protocol_identifier, (uint64_t)nw_protocol_trainer_bottom_create);
}

uint64_t nw_protocol_trainer_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a2);
      *(_OWORD *)handle = *(_OWORD *)a2->flow_id;
      if (!a2->output_handler) {
        nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)handle);
      }
      uint64_t v4 = mach_continuous_time();
      if (v4 <= 1) {
        uint64_t v5 = 1LL;
      }
      else {
        uint64_t v5 = v4;
      }
      handle[8] = v5;
      return 1LL;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v18 = "nw_protocol_trainer_add_input_handler";
    int v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_trainer_add_input_handler";
        BOOL v10 = "%{public}s called with null trainer";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    if (!v15)
    {
      BOOL v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_trainer_add_input_handler";
        BOOL v10 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v8 = (os_log_s *)__nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v14 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_trainer_add_input_handler";
        BOOL v10 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v18 = "nw_protocol_trainer_add_input_handler";
      __int16 v19 = 2082;
      char v20 = backtrace_string;
      uint64_t v13 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_26;
    }

    goto LABEL_27;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_protocol_trainer_add_input_handler";
  int v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v15)
    {
      BOOL v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_trainer_add_input_handler";
        BOOL v10 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v8 = (os_log_s *)__nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v12 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_protocol_trainer_add_input_handler";
        BOOL v10 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v18 = "nw_protocol_trainer_add_input_handler";
      __int16 v19 = 2082;
      char v20 = backtrace_string;
      uint64_t v13 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_26:
      _os_log_impl(&dword_181A5C000, v8, v9, v13, buf, 0x16u);
    }

uint64_t nw_protocol_trainer_bottom_get_input_frames( nw_protocol *a1, nw_protocol *a2, unsigned int a3, int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      int v37 = 0;
      *(void *)&buf[16] = 0x2000000000LL;
      *(void *)os_log_type_t type = 0LL;
      uint64_t v32 = type;
      int v34 = 0;
      uint64_t v33 = 0x2000000000LL;
      unsigned int v7 = handle[47];
      if (v7 >= a5) {
        unsigned int v8 = a5;
      }
      else {
        unsigned int v8 = handle[47];
      }
      if (!v7) {
        unsigned int v8 = a5;
      }
      v22[0] = MEMORY[0x1895F87A8];
      v22[1] = 0x40000000LL;
      uint64_t v23 = ___ZL43nw_protocol_trainer_bottom_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
      char v24 = &unk_189BB88B8;
      BOOL v25 = buf;
      char v26 = type;
      unsigned int v29 = v8;
      int v30 = a4;
      BOOL v27 = handle;
      __int16 v28 = a6;
      uint64_t v9 = *((void *)handle + 11);
      do
      {
        if (!v9) {
          break;
        }
        uint64_t v10 = *(void *)(v9 + 32);
        char v11 = ((uint64_t (*)(void *))v23)(v22);
        uint64_t v9 = v10;
      }

      while ((v11 & 1) != 0);
      uint64_t v12 = *(unsigned int *)(*(void *)&buf[8] + 24LL);
      _Block_object_dispose(type, 8);
      _Block_object_dispose(buf, 8);
      return v12;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_get_input_frames";
    BOOL v14 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type[0];
      if (os_log_type_enabled(v15, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_get_input_frames";
        uint64_t v17 = "%{public}s called with null trainer";
        goto LABEL_39;
      }

      goto LABEL_40;
    }

    if (!v35)
    {
      char v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type[0];
      if (os_log_type_enabled(v15, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_get_input_frames";
        uint64_t v17 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_39;
      }

      goto LABEL_40;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    char v15 = (os_log_s *)__nwlog_obj();
    os_log_type_t v16 = type[0];
    BOOL v21 = os_log_type_enabled(v15, type[0]);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_get_input_frames";
        uint64_t v17 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_39;
      }

      goto LABEL_40;
    }

    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_get_input_frames";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      char v20 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_29;
    }

    goto LABEL_30;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_get_input_frames";
  BOOL v14 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  char v35 = 0;
  if (type[0] != OS_LOG_TYPE_FAULT)
  {
    if (!v35)
    {
      char v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type[0];
      if (os_log_type_enabled(v15, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_get_input_frames";
        uint64_t v17 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_39;
      }

      goto LABEL_40;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    char v15 = (os_log_s *)__nwlog_obj();
    os_log_type_t v16 = type[0];
    BOOL v19 = os_log_type_enabled(v15, type[0]);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_get_input_frames";
        uint64_t v17 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_39;
      }

      goto LABEL_40;
    }

    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_get_input_frames";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      char v20 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_29:
      _os_log_impl(&dword_181A5C000, v15, v16, v20, buf, 0x16u);
    }

uint64_t nw_protocol_trainer_bottom_get_output_frames( nw_protocol *a1, nw_protocol *a2, int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      if (a4 | a3 || a5 != 1)
      {
        uint64_t v14 = 0LL;
        if (a5 && a4)
        {
          LODWORD(v14) = 0;
          for (unsigned int i = 0; i < a4; i += v16)
          {
            if (a4 - i >= 0x2400) {
              size_t v16 = 9216LL;
            }
            else {
              size_t v16 = a4 - i;
            }
            BOOL v17 = nw_calloc_type<unsigned char>(v16);
            uint64_t v18 = nw_frame_create(0, v17, v16, (uint64_t)nw_protocol_trainer_frame_finalizer, (uint64_t)a1);
            nw_frame_set_buffer_used_malloc(v18, 1);
            *(void *)(v18 + 16) = 0LL;
            BOOL v19 = (uint64_t *)handle[10];
            *(void *)(v18 + 24) = v19;
            *BOOL v19 = v18;
            handle[10] = v18 + 16;
            *(void *)(v18 + 32) = 0LL;
            tqh_last = a6->tqh_last;
            *(void *)(v18 + 40) = tqh_last;
            *tqh_last = (nw_frame *)v18;
            a6->tqh_last = (nw_frame **)(v18 + 32);
            uint64_t v14 = (v14 + 1);
          }
        }
      }

      else
      {
        uint64_t v11 = nw_frame_create(0, 0LL, 0, (uint64_t)nw_protocol_trainer_frame_finalizer, (uint64_t)a1);
        *(void *)(v11 + 16) = 0LL;
        uint64_t v12 = (uint64_t *)handle[10];
        *(void *)(v11 + 24) = v12;
        uint64_t *v12 = v11;
        handle[10] = v11 + 16;
        *(void *)(v11 + 32) = 0LL;
        uint64_t v13 = a6->tqh_last;
        *(void *)(v11 + 40) = v13;
        const char *v13 = (nw_frame *)v11;
        a6->tqh_last = (nw_frame **)(v11 + 32);
        return 1LL;
      }

      return v14;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v33 = "nw_protocol_trainer_bottom_get_output_frames";
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v23 = (os_log_s *)__nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "nw_protocol_trainer_bottom_get_output_frames";
        BOOL v25 = "%{public}s called with null trainer";
        goto LABEL_41;
      }

      goto LABEL_42;
    }

    if (!v30)
    {
      uint64_t v23 = (os_log_s *)__nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "nw_protocol_trainer_bottom_get_output_frames";
        BOOL v25 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_41;
      }

      goto LABEL_42;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v23 = (os_log_s *)__nwlog_obj();
    os_log_type_t v24 = type;
    BOOL v29 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "nw_protocol_trainer_bottom_get_output_frames";
        BOOL v25 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_41;
      }

      goto LABEL_42;
    }

    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v33 = "nw_protocol_trainer_bottom_get_output_frames";
      __int16 v34 = 2082;
      char v35 = backtrace_string;
      __int16 v28 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_31;
    }

    goto LABEL_32;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v33 = "nw_protocol_trainer_bottom_get_output_frames";
  uint64_t v22 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v30 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v30)
    {
      uint64_t v23 = (os_log_s *)__nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "nw_protocol_trainer_bottom_get_output_frames";
        BOOL v25 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_41;
      }

      goto LABEL_42;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v23 = (os_log_s *)__nwlog_obj();
    os_log_type_t v24 = type;
    BOOL v27 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "nw_protocol_trainer_bottom_get_output_frames";
        BOOL v25 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_41;
      }

      goto LABEL_42;
    }

    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v33 = "nw_protocol_trainer_bottom_get_output_frames";
      __int16 v34 = 2082;
      char v35 = backtrace_string;
      __int16 v28 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_31:
      _os_log_impl(&dword_181A5C000, v23, v24, v28, buf, 0x16u);
    }

uint64_t nw_protocol_trainer_bottom_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      v15[0] = MEMORY[0x1895F87A8];
      v15[1] = 0x40000000LL;
      size_t v16 = ___ZL49nw_protocol_trainer_bottom_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
      BOOL v17 = &__block_descriptor_tmp_22_17580;
      uint64_t v18 = a2;
      BOOL v19 = handle;
      tqh_first = a2->tqh_first;
      do
      {
        if (!tqh_first) {
          break;
        }
        uint64_t v4 = (nw_frame *)*((void *)tqh_first + 4);
        char v5 = ((uint64_t (*)(void *))v16)(v15);
        tqh_first = v4;
      }

      while ((v5 & 1) != 0);
      return 1LL;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_protocol_trainer_bottom_finalize_output_frames";
    unsigned int v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v21 = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      unsigned int v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = v21;
      if (os_log_type_enabled(v8, v21))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_protocol_trainer_bottom_finalize_output_frames";
        uint64_t v10 = "%{public}s called with null trainer";
        goto LABEL_34;
      }

      goto LABEL_35;
    }

    if (!v20)
    {
      unsigned int v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = v21;
      if (os_log_type_enabled(v8, v21))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_protocol_trainer_bottom_finalize_output_frames";
        uint64_t v10 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_34;
      }

      goto LABEL_35;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    unsigned int v8 = (os_log_s *)__nwlog_obj();
    os_log_type_t v9 = v21;
    BOOL v14 = os_log_type_enabled(v8, v21);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_protocol_trainer_bottom_finalize_output_frames";
        uint64_t v10 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_34;
      }

      goto LABEL_35;
    }

    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v23 = "nw_protocol_trainer_bottom_finalize_output_frames";
      __int16 v24 = 2082;
      BOOL v25 = backtrace_string;
      uint64_t v13 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_24;
    }

    goto LABEL_25;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v23 = "nw_protocol_trainer_bottom_finalize_output_frames";
  unsigned int v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v21 = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (v21 != OS_LOG_TYPE_FAULT)
  {
    if (!v20)
    {
      unsigned int v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = v21;
      if (os_log_type_enabled(v8, v21))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_protocol_trainer_bottom_finalize_output_frames";
        uint64_t v10 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_34;
      }

      goto LABEL_35;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    unsigned int v8 = (os_log_s *)__nwlog_obj();
    os_log_type_t v9 = v21;
    BOOL v12 = os_log_type_enabled(v8, v21);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_protocol_trainer_bottom_finalize_output_frames";
        uint64_t v10 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_34;
      }

      goto LABEL_35;
    }

    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v23 = "nw_protocol_trainer_bottom_finalize_output_frames";
      __int16 v24 = 2082;
      BOOL v25 = backtrace_string;
      uint64_t v13 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_24:
      _os_log_impl(&dword_181A5C000, v8, v9, v13, buf, 0x16u);
    }

uint64_t nw_protocol_trainer_connect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (a1->handle)
    {
      if (a2)
      {
        connected = (void (*)(nw_protocol *, nw_protocol *))a2->callbacks->connected;
        if (connected) {
          connected(a2, a1);
        }
      }

      return 1LL;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v15 = "nw_protocol_trainer_connect";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_protocol_trainer_connect";
        unsigned int v7 = "%{public}s called with null trainer";
        goto LABEL_34;
      }

      goto LABEL_35;
    }

    if (!v12)
    {
      char v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_protocol_trainer_connect";
        unsigned int v7 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_34;
      }

      goto LABEL_35;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    char v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v11 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_protocol_trainer_connect";
        unsigned int v7 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_34;
      }

      goto LABEL_35;
    }

    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      char v15 = "nw_protocol_trainer_connect";
      __int16 v16 = 2082;
      BOOL v17 = backtrace_string;
      uint64_t v10 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_24;
    }

    goto LABEL_25;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v15 = "nw_protocol_trainer_connect";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v12)
    {
      char v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_protocol_trainer_connect";
        unsigned int v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_34;
      }

      goto LABEL_35;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    char v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_protocol_trainer_connect";
        unsigned int v7 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_34;
      }

      goto LABEL_35;
    }

    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      char v15 = "nw_protocol_trainer_connect";
      __int16 v16 = 2082;
      BOOL v17 = backtrace_string;
      uint64_t v10 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_24:
      _os_log_impl(&dword_181A5C000, v5, v6, v10, buf, 0x16u);
    }

void nw_protocol_trainer_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v15 = "nw_protocol_trainer_disconnect";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      char v15 = "nw_protocol_trainer_disconnect";
      unsigned int v7 = "%{public}s called with null protocol";
      goto LABEL_36;
    }

    if (!v12)
    {
      char v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      char v15 = "nw_protocol_trainer_disconnect";
      unsigned int v7 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_36;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    char v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (!v9) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      char v15 = "nw_protocol_trainer_disconnect";
      unsigned int v7 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_36;
    }

    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      char v15 = "nw_protocol_trainer_disconnect";
      __int16 v16 = 2082;
      BOOL v17 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_37:
    if (!v4) {
      return;
    }
    goto LABEL_38;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v15 = "nw_protocol_trainer_disconnect";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      char v15 = "nw_protocol_trainer_disconnect";
      unsigned int v7 = "%{public}s called with null trainer";
      goto LABEL_36;
    }

    if (!v12)
    {
      char v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      char v15 = "nw_protocol_trainer_disconnect";
      unsigned int v7 = "%{public}s called with null trainer, backtrace limit exceeded";
      goto LABEL_36;
    }

    uint64_t v10 = (char *)__nw_create_backtrace_string();
    char v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v11 = os_log_type_enabled(v5, type);
    if (v10)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        char v15 = "nw_protocol_trainer_disconnect";
        __int16 v16 = 2082;
        BOOL v17 = v10;
        _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null trainer, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v10);
      if (!v4) {
        return;
      }
LABEL_38:
      free(v4);
      return;
    }

    if (v11)
    {
      *(_DWORD *)buf = 136446210;
      char v15 = "nw_protocol_trainer_disconnect";
      unsigned int v7 = "%{public}s called with null trainer, no backtrace";
LABEL_36:
      _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
      goto LABEL_37;
    }

    goto LABEL_37;
  }

  if (a1->default_input_handler == a2)
  {
    handle[196] |= 4u;
    if (!a2) {
      return;
    }
  }

  else if (!a2)
  {
    return;
  }

  disconnected = (void (*)(nw_protocol *, nw_protocol *))a2->callbacks->disconnected;
  if (disconnected) {
    disconnected(a2, a1);
  }
}

uint64_t nw_protocol_trainer_reset(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      if (a1->default_input_handler == a2) {
        handle[196] |= 8u;
      }
      return 1LL;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v15 = "nw_protocol_trainer_reset";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_protocol_trainer_reset";
        unsigned int v7 = "%{public}s called with null trainer";
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    if (!v12)
    {
      char v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_protocol_trainer_reset";
        unsigned int v7 = "%{public}s called with null trainer, backtrace limit exceeded";
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    char v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v11 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_protocol_trainer_reset";
        unsigned int v7 = "%{public}s called with null trainer, no backtrace";
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      char v15 = "nw_protocol_trainer_reset";
      __int16 v16 = 2082;
      BOOL v17 = backtrace_string;
      uint64_t v10 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
      goto LABEL_23;
    }

    goto LABEL_24;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v15 = "nw_protocol_trainer_reset";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v12)
    {
      char v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_protocol_trainer_reset";
        unsigned int v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    char v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        char v15 = "nw_protocol_trainer_reset";
        unsigned int v7 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      char v15 = "nw_protocol_trainer_reset";
      __int16 v16 = 2082;
      BOOL v17 = backtrace_string;
      uint64_t v10 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_23:
      _os_log_impl(&dword_181A5C000, v5, v6, v10, buf, 0x16u);
    }

BOOL nw_protocol_trainer_bottom_create(const nw_protocol_identifier *a1, nw_endpoint *a2, nw_parameters *a3)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  __memptr = 0LL;
  if (!posix_memalign(&__memptr, 8uLL, 0xC8uLL))
  {
    char v5 = __memptr;
    if (__memptr)
    {
LABEL_3:
      v5[6] = 0u;
      v5[7] = 0u;
      v5[8] = 0u;
      v5[9] = 0u;
      *((void *)v5 + 24) = 0LL;
      v5[10] = 0u;
      v5[11] = 0u;
      v5[4] = 0u;
      v5[5] = 0u;
      v5[2] = 0u;
      v5[3] = 0u;
      *char v5 = 0u;
      v5[1] = 0u;
      *((void *)v5 + 2) = &g_trainer_bottom_protocol_identifier;
      *((void *)v5 + 3) = &g_trainer_bottom_protocol_callbacks;
      *((void *)v5 + 5) = v5;
      *((void *)v5 + 10) = (char *)v5 + 72;
      *((void *)v5 + 12) = (char *)v5 + 88;
      *((void *)v5 + 14) = (char *)v5 + 104;
      *((void *)v5 + 16) = (char *)v5 + 120;
      *((void *)v5 + 18) = (char *)v5 + 136;
      if (a2)
      {
        *((void *)v5 + 19) = os_retain(a2);
        if (a3)
        {
LABEL_5:
          os_log_type_t v6 = os_retain(a3);
LABEL_8:
          *((void *)v5 + 21) = v6;
          uuid_generate_random(out);
          *((void *)v5 + 22) = nw_path_create_static(a2, a3, 1, out, 0, 0, 1, 0, 0LL, 0LL, 0LL);
          *((_DWORD *)v5 + 46) = 0;
          return (BOOL)v5;
        }
      }

      else
      {
        *((void *)v5 + 19) = 0LL;
        if (a3) {
          goto LABEL_5;
        }
      }

      os_log_type_t v6 = 0LL;
      goto LABEL_8;
    }
  }

  unsigned int v8 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  *(_DWORD *)out = 136446722;
  *(void *)&out[4] = "strict_memalign";
  *(_WORD *)&out[12] = 2048;
  *(void *)&out[14] = 8LL;
  __int16 v12 = 2048;
  uint64_t v13 = 200LL;
  BOOL v9 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    char v5 = __memptr;
    goto LABEL_3;
  }

  __break(1u);
  return result;
}

uint64_t ___ZL49nw_protocol_trainer_bottom_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *(void **)(a2 + 40);
  uint64_t v2 = (void *)(a2 + 32);
  if (v3)
  {
    *(void *)(v3 + 40) = v4;
    uint64_t v4 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(*(void *)(a1 + 32) + 8LL) = v4;
  }

  *uint64_t v4 = v3;
  void *v2 = 0LL;
  *(void *)(a2 + 40) = 0LL;
  uint64_t v5 = *(void *)(a1 + 40);
  os_log_type_t v6 = *(void **)(v5 + 144);
  *(void *)(a2 + 40) = v6;
  *os_log_type_t v6 = a2;
  *(void *)(v5 + 144) = v2;
  return 1LL;
}

uint64_t ___ZL43nw_protocol_trainer_bottom_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke( uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) >= *(_DWORD *)(a1 + 64)) {
    return 0LL;
  }
  int v4 = nw_frame_unclaimed_length((_DWORD *)a2);
  uint64_t v7 = *(void *)(a2 + 32);
  unsigned int v8 = *(void **)(a2 + 40);
  os_log_type_t v6 = (void *)(a2 + 32);
  if (v7)
  {
    *(void *)(v7 + 40) = v8;
    unsigned int v8 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(*(void *)(a1 + 48) + 96LL) = v8;
  }

  void *v8 = v7;
  *os_log_type_t v6 = 0LL;
  *(void *)(a2 + 40) = 0LL;
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void **)(v9 + 8);
  *(void *)(a2 + 40) = v10;
  void *v10 = a2;
  *(void *)(v9 + 8) = v6;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) += v4;
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return 1LL;
}

void sub_181EF8994(_Unwind_Exception *a1)
{
}

void nw_remote_packet_input_available(uint64_t a1, uint64_t a2)
{
  while (1)
  {
    id v5 = *(id *)(a1 + 40);
    objc_sync_enter(v5);
    uint64_t v6 = [v5 receiveWindowPacketCount];
    objc_sync_exit(v5);

    if (!(_DWORD)v6
      || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id *))(*(void *)(a2 + 24) + 80LL))( a2,  a1,  1LL,  0xFFFFFFFFLL,  v6,  v20))
    {
      break;
    }

    [MEMORY[0x189603FA8] array];
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    id v8 = v20[0];
    if (v8)
    {
      uint64_t v9 = (uint64_t)v8;
      do
      {
        uint64_t v10 = *(void **)(v9 + 32);
        if (!v10 && !*(void *)(v9 + 40)) {
          uint64_t v10 = 0LL;
        }
        id v11 = v10;
        if (*(void *)(v9 + 112)
          && ((*(_WORD *)(v9 + 204) & 0x100) == 0
           || !g_channel_check_validity
           || g_channel_check_validity(v9, *(void *)(v9 + 88))))
        {
          int v12 = *(_DWORD *)(v9 + 52);
          if (v12)
          {
            uint64_t v13 = *(unsigned int *)(v9 + 56);
            int v14 = v13 + *(_DWORD *)(v9 + 60);
            uint64_t v15 = (v12 - v14);
            if (v12 != v14)
            {
              uint64_t v16 = *(void *)(v9 + 112);
              if (v16)
              {
                [MEMORY[0x189603F48] dataWithBytes:v16 + v13 length:v15];
                BOOL v17 = (void *)objc_claimAutoreleasedReturnValue();
                [v7 addObject:v17];
              }
            }
          }
        }

        uint64_t v18 = *(void *)(v9 + 32);
        BOOL v19 = *(void **)(v9 + 40);
        if (v18)
        {
          *(void *)(v18 + 40) = v19;
          BOOL v19 = *(void **)(v9 + 40);
        }

        else
        {
          v20[1] = *(id *)(v9 + 40);
        }

        *BOOL v19 = v18;
        *(void *)(v9 + 32) = 0LL;
        *(void *)(v9 + 40) = 0LL;
        nw_frame_finalize(v9);

        uint64_t v9 = (uint64_t)v11;
      }

      while (v11);
    }

    [v5 delegate];
    int v4 = (void *)objc_claimAutoreleasedReturnValue();
    [v4 sendRemotePackets:v7];
  }
}

void sub_181EF8C20(_Unwind_Exception *a1)
{
}

void nw_remote_packet_output_available(uint64_t a1, uint64_t a2)
{
  id v10 = *(id *)(a1 + 40);
  [v10 writeRequests];
  int v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(v4);
  while (1)
  {
    [v10 writeRequests];
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v6 = [v5 count];

    if (!v6) {
      break;
    }
    [v10 writeRequests];
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    [v7 firstObject];
    id v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (!nw_remote_director_write_request(a1, a2, v8))
    {

      break;
    }

    [v10 writeRequests];
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    [v9 removeObjectAtIndex:0];
  }

  objc_sync_exit(v4);
}

void sub_181EF8ECC(_Unwind_Exception *a1)
{
}

void sub_181EF92CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, objc_super a14)
{
  a14.super_class = (Class)&OBJC_CLASS____NWAdvertiser;
  -[_Unwind_Exception dealloc](&a14, sel_dealloc);
  _Unwind_Resume(a1);
}

const char *nw_listener_get_id_string(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  uint64_t v2 = (char *)v1;
  if (v1)
  {
    uint64_t v3 = v1 + 42;
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v16 = "nw_listener_get_id_string";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_listener_get_id_string";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null listener", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v16 = "nw_listener_get_id_string";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null listener, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_listener_get_id_string";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_listener_get_id_string";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null listener, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181EF97EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_181EFA084( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Unwind_Resume(a1);
}

void sub_181EFB184( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20, void *a21, void *a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, id a36)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v42 - 176), 8);

  _Unwind_Resume(a1);
}

void sub_181EFB47C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181EFB9BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181EFBB0C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, id a26)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_181EFBC1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_181EFBCFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_181EFC3A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_listener_copy_description_block_invoke(uint64_t a1)
{
  uint64_t v2 = nw_parameters_copy_description_internal(*(NWConcrete_nw_parameters **)(*(void *)(a1 + 32) + 16LL), 0);
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(v3 + 176))
  {
    BOOL v4 = nw_path_copy_description(*(void **)(v3 + 176));
    uint64_t v3 = *(void *)(a1 + 32);
    id v5 = *(void **)(v3 + 264);
    if (v5)
    {
LABEL_3:
      uint64_t v6 = (char *)nw_advertise_descriptor_copy_description(v5);
      uint64_t v3 = *(void *)(a1 + 32);
      goto LABEL_6;
    }
  }

  else
  {
    BOOL v4 = 0LL;
    id v5 = *(void **)(v3 + 264);
    if (v5) {
      goto LABEL_3;
    }
  }

  uint64_t v6 = 0LL;
LABEL_6:
  uint64_t v7 = (char **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  id_string = nw_listener_get_id_string((void *)v3);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(unsigned int *)(v9 + 128);
  else {
    BOOL v11 = off_189BB8B98[v10];
  }
  description = nw_endpoint_get_description(*(void **)(v9 + 280));
  char v13 = "<NULL>";
  if (v4) {
    int v14 = (const char *)v4;
  }
  else {
    int v14 = "<NULL>";
  }
  if (v6) {
    char v13 = v6;
  }
  asprintf( v7,  "[%s %s, local endpoint: %s, parameters: %s, port: %d, path %s, service: %s]",  id_string,  v11,  description,  v2,  *(unsigned __int16 *)(*(void *)(a1 + 32) + 300LL),  v14,  v13);
  if (v6) {
    free(v6);
  }
  if (v2) {
    free(v2);
  }
  if (v4) {
    free((void *)v4);
  }
}

uint64_t __Block_byref_object_copy__17859(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__17860(uint64_t a1)
{
}

void sub_181EFC9A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_listener_cancel_complete_on_queue(NWConcrete_nw_listener *a1)
{
  uint64_t v1 = a1;
  *((_BYTE *)v1 + 302) &= ~1u;
  nw_listener_set_state_on_queue(v1, 4, 0LL);
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 3221225472LL;
  aBlock[2] = ___ZL36nw_listener_cancel_complete_on_queueP22NWConcrete_nw_listener_block_invoke;
  aBlock[3] = &unk_189BC93A0;
  uint64_t v2 = v1;
  uint64_t v6 = v2;
  uint64_t v3 = (void (**)(void))_Block_copy(aBlock);
  os_unfair_lock_lock((os_unfair_lock_t)v1 + 2);
  v3[2](v3);
  os_unfair_lock_unlock((os_unfair_lock_t)v1 + 2);

  BOOL v4 = (void *)*((void *)v2 + 32);
  *((void *)v2 + 32) = 0LL;
}

void sub_181EFCA98( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void nw_listener_reconcile_inboxes_on_queue(NWConcrete_nw_listener *a1)
{
  uint64_t v119 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  nw_context_assert_queue(*((void **)v1 + 3));
  BOOL v2 = nw_path_copy_derived_parameters(*((void **)v1 + 22));
  uint64_t v3 = (void *)*((void *)v1 + 26);
  *((void *)v1 + 26) = v2;

  nw_path_status_t status = nw_path_get_status(*((nw_path_t *)v1 + 22));
  obunint64_t j = nw_array_create();
  BOOL v5 = (status == nw_path_status_satisfied
  uint64_t v106 = 0LL;
  __int16 v107 = &v106;
  uint64_t v108 = 0x3032000000LL;
  __int16 v109 = __Block_byref_object_copy__17859;
  v110 = __Block_byref_object_dispose__17860;
  id v111 = 0LL;
  uint64_t v6 = (void *)*((void *)v1 + 4);
  uint64_t v7 = MEMORY[0x1895F87A8];
  if (v6)
  {
    v103[0] = MEMORY[0x1895F87A8];
    v103[1] = 3221225472LL;
    v103[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke;
    v103[3] = &unk_189BB8A60;
    uint64_t v104 = v1;
    id v105 = (id)obj;
    nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue(v104, v6, v103);
  }

  else
  {
    id socket_inbox_match_on_queue = nw_listener_find_socket_inbox_match_on_queue(v1, *((void **)v1 + 26));
    uint64_t v9 = (void *)v107[5];
    v107[5] = (uint64_t)socket_inbox_match_on_queue;

    uint64_t v10 = (void *)v107[5];
    if (v10)
    {
      nw_array_append(obj, v10);
      BOOL v5 = 0;
    }
  }

  id v11 = nw_parameters_copy_custom_proxy_configs(*((void **)v1 + 2));
  os_log_type_t v12 = v11;
  if (!v11 || *((void *)v11 + 2) == *((void *)v11 + 3))
  {
    id v13 = nw_path_copy_proxy_configs(*((void **)v1 + 22));

    os_log_type_t v12 = v13;
  }

  v101[0] = v7;
  v101[1] = 3221225472LL;
  v101[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_198;
  v101[3] = &unk_189BC85B0;
  int v14 = v1;
  id v102 = v14;
  nw_array_apply((unsigned __int8 *)v12, (uint64_t)v101);
  if (status != nw_path_status_satisfied
    || (nw_parameters_get_allow_socket_access(*((void **)v1 + 26)) & 1) != 0
    || *((void *)v1 + 4))
  {
    id v15 = 0LL;
  }

  else
  {
    BOOL v42 = nw_array_create();
    uint64_t v43 = (void *)*((void *)v1 + 22);
    v99[0] = v7;
    v99[1] = 3221225472LL;
    v99[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_202;
    v99[3] = &unk_189BB8AB0;
    __int16 v44 = v14;
    id v100 = v44;
    nw_path_enumerate_interface_options(v43, v99);
    uint64_t v45 = (unsigned __int8 *)nw_path_copy_flows(*((void **)v1 + 22));
    v95[0] = v7;
    v95[1] = 3221225472LL;
    v95[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_2;
    v95[3] = &unk_189BC6DB0;
    id v96 = v44;
    id v97 = (id)obj;
    id v15 = (id)v42;
    id v98 = v15;
    nw_array_apply(v45, (uint64_t)v95);
  }

  uint64_t v16 = (uint64_t *)((char *)v14 + 144);
  uint64_t v17 = *((void *)v14 + 18);
  if (v17 && *(void *)(v17 + 24) != *(void *)(v17 + 16))
  {
    v93[0] = v7;
    v93[1] = 3221225472LL;
    v93[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_3;
    v93[3] = &unk_189BC85B0;
    id v18 = (id)obj;
    id v94 = v18;
    nw_array_apply((unsigned __int8 *)v17, (uint64_t)v93);
    uint64_t v19 = nw_array_create_by_removal(*v16, (uint64_t)v18);
    char v20 = (unsigned __int8 *)v19;
    if (v19 && *(void *)(v19 + 24) != *(void *)(v19 + 16))
    {
      v91[0] = v7;
      v91[1] = 3221225472LL;
      v91[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_4;
      v91[3] = &unk_189BC85B0;
      id v92 = v14;
      nw_array_apply(v20, (uint64_t)v91);
    }
  }

  objc_storeStrong((id *)v14 + 18, (id)obj);
  int v71 = (unsigned __int8 *)v15;
  BOOL v21 = nw_array_create();
  uint64_t v22 = (unsigned __int8 *)*((void *)v14 + 19);
  v88[0] = v7;
  v88[1] = 3221225472LL;
  v88[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_205;
  v88[3] = &unk_189BC5030;
  uint64_t v23 = v7;
  __int16 v24 = v14;
  __int16 v89 = v24;
  id v25 = (id)v21;
  id v90 = v25;
  nw_array_apply(v22, (uint64_t)v88);
  v86[0] = v23;
  v86[1] = 3221225472LL;
  v86[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_3_207;
  v86[3] = &unk_189BC85B0;
  uint64_t v26 = v24;
  __int16 v87 = v26;
  nw_array_apply((unsigned __int8 *)v25, (uint64_t)v86);
  uint64_t v80 = 0LL;
  char v81 = &v80;
  uint64_t v82 = 0x3032000000LL;
  os_log_type_t v83 = __Block_byref_object_copy__17859;
  os_log_type_t v84 = __Block_byref_object_dispose__17860;
  id v85 = 0LL;
  BOOL v27 = (void *)*((void *)v1 + 4);
  if (v27)
  {
    uint64_t v28 = v23;
    v76[0] = v23;
    v76[1] = 3221225472LL;
    v76[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_208;
    v76[3] = &unk_189BB8B00;
    int v77 = v26;
    id v78 = &v106;
    id v79 = &v80;
    nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue(v77, v27, v76);

    BOOL v29 = v71;
    uint64_t v30 = v28;
    goto LABEL_52;
  }

  uint64_t v30 = v23;
  BOOL v29 = v71;
  if (v5 && !*((_DWORD *)v26 + 74))
  {
    nw_path_get_client_id(*((void **)v1 + 22), &v115);
    uint64_t v31 = -[nw_listener_inbox_socket initWithParameters:delegate:necpUUID:]( objc_alloc(&OBJC_CLASS___nw_listener_inbox_socket),  *((void **)v1 + 26),  v26,  &v115);
    uint64_t v32 = (void *)v107[5];
    v107[5] = (uint64_t)v31;

    uint64_t v33 = (void *)v107[5];
    if (!v33)
    {
      uint64_t v46 = *((void *)v1 + 2);
      if (v46 && !nw_path_parameters_get_logging_disabled(*(void *)(v46 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        uint64_t v47 = (os_log_s *)(id)glistenerLogObj;
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        {
          id_string = nw_listener_get_id_string(v26);
          uint64_t v49 = (uint64_t (*)(uint64_t, uint64_t))*((void *)v1 + 26);
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_listener_reconcile_inboxes_on_queue";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = id_string;
          *(_WORD *)&_BYTE buf[22] = 2114;
          __int16 v113 = v49;
          _os_log_impl( &dword_181A5C000,  v47,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}s] failed to create listener inbox with parameters %{public}@",  buf,  0x20u);
        }
      }

      __int16 v50 = -[NWConcrete_nw_error initWithDomain:code:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_error), 1, 22);
      int v37 = (os_log_s *)v81[5];
      v81[5] = (uint64_t)v50;
      goto LABEL_43;
    }

    uint64_t v34 = [v33 start];
    char v35 = (void *)v81[5];
    v81[5] = v34;

    uint64_t v36 = *((void *)v1 + 2);
    if (v81[5])
    {
      if (v36 && !nw_path_parameters_get_logging_disabled(*(void *)(v36 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        int v37 = (os_log_s *)(id)glistenerLogObj;
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          uint64_t v38 = nw_listener_get_id_string(v26);
          uint64_t v39 = (uint64_t (*)(uint64_t, uint64_t))v81[5];
          uint64_t v40 = v107[5];
          uint64_t v41 = *((void *)v1 + 26);
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_listener_reconcile_inboxes_on_queue";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v38;
          *(_WORD *)&_BYTE buf[22] = 2114;
          __int16 v113 = v39;
          *(_WORD *)id v114 = 2114;
          *(void *)&v114[2] = v40;
          *(_WORD *)&v114[10] = 2114;
          *(void *)&v114[12] = v41;
          _os_log_impl( &dword_181A5C000,  v37,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}s] Error %{public}@ starting inbox %{public}@. Parameters: %{public}@",  buf,  0x34u);
        }

void sub_181EFD5DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  _Block_object_dispose(&STACK[0x210], 8);
  _Unwind_Resume(a1);
}

id nw_listener_find_socket_inbox_match_on_queue(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  nw_context_assert_queue(*((void **)v3 + 3));
  uint64_t v13 = 0LL;
  int v14 = &v13;
  uint64_t v15 = 0x3032000000LL;
  uint64_t v16 = __Block_byref_object_copy__17859;
  uint64_t v17 = __Block_byref_object_dispose__17860;
  id v18 = 0LL;
  BOOL v5 = (unsigned __int8 *)*((void *)v3 + 18);
  if (v5)
  {
    v9[0] = MEMORY[0x1895F87A8];
    v9[1] = 3221225472LL;
    v9[2] = ___ZL44nw_listener_find_socket_inbox_match_on_queueP22NWConcrete_nw_listenerPU27objcproto16OS_nw_parameters8NSObject_block_invoke;
    v9[3] = &unk_189BC1378;
    id v10 = v4;
    id v11 = v3;
    os_log_type_t v12 = &v13;
    nw_array_apply(v5, (uint64_t)v9);

    uint64_t v6 = (void *)v14[5];
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  id v7 = v6;
  _Block_object_dispose(&v13, 8);

  return v7;
}

void sub_181EFD7F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke( uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  id socket_inbox_match_on_queue = nw_listener_find_socket_inbox_match_on_queue(*(void **)(a1 + 32), v3);
  if (socket_inbox_match_on_queue)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16LL);
    if (v5 && !nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
      }
      uint64_t v6 = (os_log_s *)(id)glistenerLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
        int v9 = 136446722;
        id v10 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
        __int16 v11 = 2082;
        os_log_type_t v12 = id_string;
        __int16 v13 = 2112;
        id v14 = socket_inbox_match_on_queue;
        _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_INFO,  "%{public}s [%{public}s] keeping existing multicast socket inbox: %@",  (uint8_t *)&v9,  0x20u);
      }
    }

    nw_array_append(*(void *)(a1 + 40), socket_inbox_match_on_queue);
  }

  return 1LL;
}

void sub_181EFD94C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue(void *a1, void *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  os_log_type_t v8 = v7;
  if (!v5)
  {
    __nwlog_obj();
    id v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v30 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue";
    __int16 v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null listener", buf, 0xCu);
      }
    }

    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v30 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue";
          __int16 v31 = 2082;
          uint64_t v32 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null listener, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v11) {
          goto LABEL_4;
        }
LABEL_39:
        free(v11);
        goto LABEL_4;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue";
        _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v30 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue";
        _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null listener, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181EFDE84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_198( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v99 = *MEMORY[0x1895F89C0];
  id v4 = a3;
  if (nw_proxy_config_supports_listeners(v4))
  {
    stack = nw_parameters_copy_default_protocol_stack(*(nw_parameters_t *)(*(void *)(a1 + 32) + 16LL));
    id v79 = nw_protocol_stack_copy_transport_protocol(stack);
    nw_protocol_definition_t v5 = nw_protocol_options_copy_definition(v79);
    id v6 = v4;
    id v7 = v5;
    uint64_t v80 = v7;
    if (v6)
    {
      if (v7)
      {
        if (*((void *)v6 + 1))
        {
          if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
            dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55123);
          }
          id v8 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
          BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v80, (uint64_t)v8);

          id v10 = v80;
          if (is_equal_unsafe)
          {
            if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
              dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55294);
            }
            id v10 = (nw_protocol_definition *)(id)nw_protocol_copy_quic_stream_definition::quic_definition;
          }

          identifier = nw_protocol_definition_get_identifier(v10);
          if (identifier)
          {
            *(void *)buf = 0LL;
            asprintf((char **)buf, "%s%s", "LISTEN-", identifier);
            int should_proxy_transport_at_level = nw_proxy_config_should_proxy_transport_at_level( (NWConcrete_nw_proxy_config *)v6,  *(const char **)buf,  0LL);
            id v78 = nw_dictionary_copy_value(*((void *)v6 + 1), *(uint64_t *)buf);
            if (*(void *)buf) {
              free(*(void **)buf);
            }
LABEL_56:

            id v36 = nw_proxy_config_copy_endpoint(v6);
            id v37 = *(id *)(a1 + 32);
            id v76 = v36;
            nw_context_assert_queue(*((void **)v37 + 3));
            *(void *)buf = 0LL;
            *(void *)&buf[8] = buf;
            *(void *)&buf[16] = 0x3032000000LL;
            id v96 = __Block_byref_object_copy__17859;
            id v97 = __Block_byref_object_dispose__17860;
            id v98 = 0LL;
            uint64_t v38 = (unsigned __int8 *)*((void *)v37 + 20);
            *(void *)&__int128 v90 = MEMORY[0x1895F87A8];
            *((void *)&v90 + 1) = 3221225472LL;
            __int16 v91 = ___ZL46nw_listener_copy_proxy_connection_for_endpointP22NWConcrete_nw_listenerPU25objcproto14OS_nw_endpoint8NSObject_block_invoke;
            id v92 = &unk_189BC7960;
            id v39 = v76;
            id v93 = v39;
            id v94 = buf;
            nw_array_apply(v38, (uint64_t)&v90);
            id v40 = *(id *)(*(void *)&buf[8] + 40LL);

            _Block_object_dispose(buf, 8);
            if (v40)
            {
LABEL_84:

LABEL_85:
              goto LABEL_86;
            }

            uint64_t v41 = *(void *)(*(void *)(a1 + 32) + 16LL);
            if (v41 && !nw_path_parameters_get_logging_disabled(*(void *)(v41 + 104)))
            {
              if (__nwlog_listener_log::onceToken != -1) {
                dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
              }
              BOOL v42 = (os_log_s *)(id)glistenerLogObj;
              if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
              {
                id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
                *(_WORD *)&_BYTE buf[12] = 2082;
                *(void *)&buf[14] = id_string;
                *(_WORD *)&_BYTE buf[22] = 2112;
                id v96 = (uint64_t (*)(uint64_t, uint64_t))v39;
                _os_log_impl( &dword_181A5C000,  v42,  OS_LOG_TYPE_INFO,  "%{public}s [%{public}s] Found listener proxy to %@, creating a new connection",  buf,  0x20u);
              }
            }

            id v44 = *(id *)(*(void *)(a1 + 32) + 16LL);
            BOOL v45 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v44,  0,  0);

            nw_parameters_set_server_mode((void *)v45, 0);
            nw_parameters_set_proxy_applied((void *)v45, 1);
            int v75 = nw_parameters_copy_default_protocol_stack((nw_parameters_t)v45);
            nw_protocol_stack_clear_application_protocols(v75);
            if (should_proxy_transport_at_level == 2)
            {
              nw_protocol_stack_append_application_protocol(v75, v79);
              nw_protocol_options_t v47 = nw_protocol_stack_copy_internet_protocol(stack);
              nw_protocol_stack_append_application_protocol(v75, v47);

              uint64_t v46 = v75;
            }

            else
            {
              uint64_t v46 = v75;
              if (should_proxy_transport_at_level == 3) {
                nw_protocol_stack_append_application_protocol(v75, v79);
              }
            }

            iterate_block[0] = MEMORY[0x1895F87A8];
            iterate_block[1] = 3221225472LL;
            iterate_block[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_199;
            iterate_block[3] = &unk_189BC5C80;
            __int16 v48 = v46;
            __int16 v87 = v48;
            nw_protocol_stack_iterate_application_protocols((nw_protocol_stack_t)v78, iterate_block);
            uint64_t v49 = nw_protocol_stack_copy_transport_protocol((nw_protocol_stack_t)v78);
            if (v49)
            {
              nw_protocol_stack_set_original_proxied_transport_protocol(v48, v79);
              nw_protocol_stack_set_transport_protocol(v48, v49);
            }

            uint64_t v74 = v49;
            __int128 v90 = 0uLL;
            nw_path_get_client_id(*(void **)(*(void *)(a1 + 32) + 176LL), &v90);
            __int16 v50 = (char *)(id)v45;
            os_log_type_t v51 = v50;
            if (v50)
            {
              *(_OWORD *)(v50 + 24) = v90;
              goto LABEL_72;
            }

            __nwlog_obj();
            __int16 v64 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_parameters_set_listener_uuid";
            os_log_type_t v73 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t v89 = OS_LOG_TYPE_ERROR;
            char v88 = 0;
            if (__nwlog_fault(v73, &v89, &v88))
            {
              if (v89 == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                id v65 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v66 = v89;
                if (os_log_type_enabled(v65, v89))
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_parameters_set_listener_uuid";
                  _os_log_impl(&dword_181A5C000, v65, v66, "%{public}s called with null parameters", buf, 0xCu);
                }
              }

              else
              {
                if (v88)
                {
                  backtrace_string = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  id v68 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t type = v89;
                  BOOL v69 = os_log_type_enabled(v68, v89);
                  if (backtrace_string)
                  {
                    if (v69)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(void *)&uint8_t buf[4] = "nw_parameters_set_listener_uuid";
                      *(_WORD *)&_BYTE buf[12] = 2082;
                      *(void *)&buf[14] = backtrace_string;
                      _os_log_impl( &dword_181A5C000,  v68,  type,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
                    }

                    free(backtrace_string);
                    goto LABEL_119;
                  }

                  if (v69)
                  {
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_parameters_set_listener_uuid";
                    _os_log_impl( &dword_181A5C000,  v68,  type,  "%{public}s called with null parameters, no backtrace",  buf,  0xCu);
                  }
                }

                else
                {
                  __nwlog_obj();
                  id v68 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v71 = v89;
                  if (os_log_type_enabled(v68, v89))
                  {
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_parameters_set_listener_uuid";
                    _os_log_impl( &dword_181A5C000,  v68,  v71,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
                  }
                }
              }
            }

void sub_181EFEE1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20, void *a21, uint64_t a22, void *a23, void *a24)
{
  _Unwind_Resume(a1);
}

void ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_202( uint64_t a1, void *a2, const unsigned __int8 *a3)
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  nw_protocol_definition_t v5 = a2;
  if (uuid_is_null(a3)) {
    goto LABEL_15;
  }
  id v6 = *(id *)(a1 + 32);
  uint64_t v7 = MEMORY[0x1895F87A8];
  if (v6)
  {
    id v8 = v6;
    nw_context_assert_queue(*((void **)v6 + 3));
    *(void *)id v40 = 0LL;
    *(void *)&v40[8] = v40;
    *(void *)&v40[16] = 0x2020000000LL;
    char v41 = 0;
    int v9 = (unsigned __int8 *)v8[19];
    *(void *)buf = v7;
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&buf[16] = ___ZL45nw_listener_has_flow_for_nexus_agent_on_queueP22NWConcrete_nw_listenerPh_block_invoke;
    *(void *)&__int128 v37 = &unk_189BC7338;
    id v39 = a3;
    id v10 = v8;
    *((void *)&v37 + 1) = v10;
    uint64_t v38 = v40;
    nw_array_apply(v9, (uint64_t)buf);
    LODWORD(v9) = *(_BYTE *)(*(void *)&v40[8] + 24LL) == 0;

    _Block_object_dispose(v40, 8);
    if (!(_DWORD)v9) {
      goto LABEL_15;
    }
    goto LABEL_4;
  }

  __nwlog_obj();
  os_log_type_t v22 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)id v40 = 136446210;
  *(void *)&v40[4] = "nw_listener_has_flow_for_nexus_agent_on_queue";
  os_log_type_t v23 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v34 = 0;
  if (__nwlog_fault(v23, &type, &v34))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)id v40 = 136446210;
        *(void *)&v40[4] = "nw_listener_has_flow_for_nexus_agent_on_queue";
        _os_log_impl(&dword_181A5C000, v24, v25, "%{public}s called with null listener", v40, 0xCu);
      }
    }

    else
    {
      if (v34)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v28 = type;
        BOOL v29 = os_log_type_enabled(v27, type);
        if (backtrace_string)
        {
          if (v29)
          {
            *(_DWORD *)id v40 = 136446466;
            *(void *)&v40[4] = "nw_listener_has_flow_for_nexus_agent_on_queue";
            *(_WORD *)&v40[12] = 2082;
            *(void *)&v40[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v27,  v28,  "%{public}s called with null listener, dumping backtrace:%{public}s",  v40,  0x16u);
          }

          uint64_t v7 = MEMORY[0x1895F87A8];
          free(backtrace_string);
        }

        else
        {
          if (v29)
          {
            *(_DWORD *)id v40 = 136446210;
            *(void *)&v40[4] = "nw_listener_has_flow_for_nexus_agent_on_queue";
            _os_log_impl(&dword_181A5C000, v27, v28, "%{public}s called with null listener, no backtrace", v40, 0xCu);
          }

          uint64_t v7 = MEMORY[0x1895F87A8];
        }

        goto LABEL_32;
      }

      __nwlog_obj();
      os_log_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)id v40 = 136446210;
        *(void *)&v40[4] = "nw_listener_has_flow_for_nexus_agent_on_queue";
        _os_log_impl( &dword_181A5C000,  v24,  v30,  "%{public}s called with null listener, backtrace limit exceeded",  v40,  0xCu);
      }
    }
  }

void sub_181EFF424( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_2( void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (nw_path_flow_is_assigned(v4) && (nw_path_flow_is_defunct(v4) & 1) == 0)
  {
    nw_protocol_definition_t v5 = (void *)a1[4];
    id v6 = (void *)v5[26];
    uint64_t v7 = v5;
    id v8 = v4;
    id v9 = v6;
    nw_context_assert_queue((void *)v7[3]);
    uint64_t v20 = 0LL;
    BOOL v21 = &v20;
    uint64_t v22 = 0x3032000000LL;
    os_log_type_t v23 = __Block_byref_object_copy__17859;
    os_log_type_t v24 = __Block_byref_object_dispose__17860;
    id v25 = 0LL;
    id v10 = (unsigned __int8 *)v7[18];
    if (v10)
    {
      v16[0] = MEMORY[0x1895F87A8];
      v16[1] = 3221225472LL;
      v16[2] = ___ZL45nw_listener_find_channel_inbox_match_on_queueP22NWConcrete_nw_listenerPU26objcproto15OS_nw_path_flow8NSObjectPU27objcproto16OS_nw_parametersS1__block_invoke;
      v16[3] = &unk_189BC1378;
      id v17 = v8;
      id v18 = v9;
      uint64_t v19 = &v20;
      nw_array_apply(v10, (uint64_t)v16);

      uint64_t v11 = (void *)v21[5];
    }

    else
    {
      uint64_t v11 = 0LL;
    }

    id v12 = v11;
    _Block_object_dispose(&v20, 8);

    if (v12)
    {
      uint64_t v13 = a1[5];
      id v14 = v12;
    }

    else
    {
      uint64_t v13 = a1[6];
      id v14 = v8;
    }

    nw_array_append(v13, v14);
  }

  return 1LL;
}

void sub_181EFF5DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_3( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5 || !v4) {
      goto LABEL_9;
    }
    uint64_t v7 = *(id **)(v5 + 16);
    id v6 = *(id **)(v5 + 24);
    if (v7 != v6)
    {
      while (*v7 != v4)
      {
        if (++v7 == v6)
        {
          uint64_t v7 = *(id **)(v5 + 24);
          break;
        }
      }
    }

    if (v7 == v6) {
LABEL_9:
    }
      nw_array_append(v5, v4);
  }

  return 1LL;
}

void sub_181EFF688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_4( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  id v4 = a3;
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16LL);
  if (v5 && !nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
    }
    id v6 = (os_log_s *)(id)glistenerLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      int v9 = 136446722;
      id v10 = "nw_listener_reconcile_inboxes_on_queue_block_invoke_4";
      __int16 v11 = 2082;
      id v12 = id_string;
      __int16 v13 = 2114;
      id v14 = v4;
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}s [%{public}s] cancelling retired inbox: %{public}@",  (uint8_t *)&v9,  0x20u);
    }
  }

  nw_listener_cancel_inbox_on_queue(*(NWConcrete_nw_listener **)(a1 + 32), v4);

  return 1LL;
}

void sub_181EFF7C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_205( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = 0LL;
  __int16 v13 = &v12;
  uint64_t v14 = 0x2020000000LL;
  char v15 = 0;
  id v4 = a3;
  uint64_t v5 = nw_path_copy_flow_for_registration(*(NWConcrete_nw_path **)(*(void *)(a1 + 32) + 176LL), v4);
  if (!v5 || (char v6 = v5[186], v5, (v6 & 4) == 0))
  {
    uint64_t v7 = *(void **)(*(void *)(a1 + 32) + 176LL);
    v9[0] = MEMORY[0x1895F87A8];
    v9[1] = 3221225472LL;
    v9[2] = ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_2_206;
    v9[3] = &unk_189BB8AD8;
    id v10 = v4;
    __int16 v11 = &v12;
    nw_path_enumerate_interface_options(v7, v9);
  }

  if (!*((_BYTE *)v13 + 24)) {
    nw_array_append(*(void *)(a1 + 40), v4);
  }

  _Block_object_dispose(&v12, 8);
  return 1LL;
}

void sub_181EFF8DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_3_207( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  id v4 = a3;
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16LL);
  if (v5 && !nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
    }
    char v6 = (os_log_s *)(id)glistenerLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      int v9 = 136446722;
      id v10 = "nw_listener_reconcile_inboxes_on_queue_block_invoke_3";
      __int16 v11 = 2082;
      uint64_t v12 = id_string;
      __int16 v13 = 2114;
      id v14 = v4;
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEBUG,  "%{public}s [%{public}s] Removing flow registration: %{public}@",  (uint8_t *)&v9,  0x20u);
    }
  }

  nw_path_flow_registration_close(v4);
  nw_array_remove_object(*(void *)(*(void *)(a1 + 32) + 152LL), (uint64_t)v4);

  return 1LL;
}

void sub_181EFFA40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_208( uint64_t a1, void *a2)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  __int128 v45 = 0uLL;
  nw_path_get_client_id(*(void **)(*(void *)(a1 + 32) + 176LL), &v45);
  id socket_inbox_match_on_queue = nw_listener_find_socket_inbox_match_on_queue(*(void **)(a1 + 32), v3);
  if (socket_inbox_match_on_queue)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16LL);
    if (v5 && !nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
      }
      char v6 = (os_log_s *)(id)glistenerLogObj;
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO)) {
        goto LABEL_25;
      }
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      int v35 = 136446722;
      id v36 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
      __int16 v37 = 2082;
      uint64_t v38 = id_string;
      __int16 v39 = 2112;
      id v40 = socket_inbox_match_on_queue;
      id v8 = "%{public}s [%{public}s] Keeping existing multicast socket inbox: %@";
      int v9 = v6;
      os_log_type_t v10 = OS_LOG_TYPE_INFO;
      uint32_t v11 = 32;
LABEL_8:
      _os_log_impl(&dword_181A5C000, v9, v10, v8, (uint8_t *)&v35, v11);
LABEL_25:
    }
  }

  else
  {
    uint64_t v12 = -[nw_listener_inbox_socket initWithParameters:delegate:necpUUID:]( objc_alloc(&OBJC_CLASS___nw_listener_inbox_socket),  v3,  *(void **)(a1 + 32),  &v45);
    uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;

    uint64_t v15 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    if (!v15)
    {
      uint64_t v24 = *(void *)(*(void *)(a1 + 32) + 16LL);
      if (v24 && !nw_path_parameters_get_logging_disabled(*(void *)(v24 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        id v25 = (os_log_s *)(id)glistenerLogObj;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          os_log_type_t v26 = nw_listener_get_id_string(*(void **)(a1 + 32));
          BOOL v27 = *(void **)(*(void *)(a1 + 32) + 208LL);
          int v35 = 136446722;
          id v36 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
          __int16 v37 = 2082;
          uint64_t v38 = v26;
          __int16 v39 = 2114;
          id v40 = v27;
          _os_log_impl( &dword_181A5C000,  v25,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}s] failed to create multicast listener inbox with parameters %{public}@",  (uint8_t *)&v35,  0x20u);
        }
      }

      os_log_type_t v28 = -[NWConcrete_nw_error initWithDomain:code:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_error), 1, 22);
      uint64_t v29 = *(void *)(*(void *)(a1 + 48) + 8LL);
      char v6 = *(os_log_s **)(v29 + 40);
      *(void *)(v29 + 40) = v28;
      goto LABEL_25;
    }

    [v15 setMulticast:1];
    uint64_t v16 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) start];
    uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v18 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = v16;

    uint64_t v19 = *(void *)(*(void *)(a1 + 32) + 16LL);
    if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL))
    {
      if (v19 && !nw_path_parameters_get_logging_disabled(*(void *)(v19 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        char v6 = (os_log_s *)(id)glistenerLogObj;
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
          goto LABEL_25;
        }
        uint64_t v20 = nw_listener_get_id_string(*(void **)(a1 + 32));
        BOOL v21 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
        uint64_t v22 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
        uint64_t v23 = *(void *)(*(void *)(a1 + 32) + 208LL);
        int v35 = 136447234;
        id v36 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
        __int16 v37 = 2082;
        uint64_t v38 = v20;
        __int16 v39 = 2114;
        id v40 = v21;
        __int16 v41 = 2114;
        uint64_t v42 = v22;
        __int16 v43 = 2114;
        uint64_t v44 = v23;
        id v8 = "%{public}s [%{public}s] Error %{public}@ starting multicast inbox %{public}@. Parameters: %{public}@";
        int v9 = v6;
        os_log_type_t v10 = OS_LOG_TYPE_ERROR;
        uint32_t v11 = 52;
        goto LABEL_8;
      }
    }

    else
    {
      if (v19 && !nw_path_parameters_get_logging_disabled(*(void *)(v19 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        __int16 v31 = (os_log_s *)(id)glistenerLogObj;
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          os_log_type_t v32 = nw_listener_get_id_string(*(void **)(a1 + 32));
          BOOL v33 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
          uint64_t v34 = *(void *)(*(void *)(a1 + 32) + 208LL);
          int v35 = 136446978;
          id v36 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
          __int16 v37 = 2082;
          uint64_t v38 = v32;
          __int16 v39 = 2114;
          id v40 = v33;
          __int16 v41 = 2114;
          uint64_t v42 = v34;
          _os_log_impl( &dword_181A5C000,  v31,  OS_LOG_TYPE_DEFAULT,  "%{public}s [%{public}s] Started multicast inbox %{public}@ with parameters %{public}@",  (uint8_t *)&v35,  0x2Au);
        }
      }

      nw_array_append( *(void *)(*(void *)(a1 + 32) + 144LL),  *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
    }
  }

  return 1LL;
}

void sub_181EFFEE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_210( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  id v4 = a3;
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16LL);
  if (v5 && !nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
    }
    char v6 = (os_log_s *)(id)glistenerLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      int v30 = 136446722;
      __int16 v31 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
      __int16 v32 = 2082;
      BOOL v33 = id_string;
      __int16 v34 = 2114;
      int v35 = v4;
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_INFO,  "%{public}s [%{public}s] creating new flow for %{public}@",  (uint8_t *)&v30,  0x20u);
    }
  }

  id v8 = -[nw_ip_channel_inbox initWithPath:flow:parameters:delegate:]( (id *)objc_alloc(&OBJC_CLASS___nw_ip_channel_inbox),  *(void **)(*(void *)(a1 + 32) + 176LL),  v4,  *(void **)(*(void *)(a1 + 32) + 208LL),  *(void **)(a1 + 32));
  int v9 = v8;
  if (v8)
  {
    uint64_t v10 = [v8 start];
    uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v10;

    uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 16LL);
    if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL))
    {
      if (v13 && !nw_path_parameters_get_logging_disabled(*(void *)(v13 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        id v14 = (os_log_s *)(id)glistenerLogObj;
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          goto LABEL_23;
        }
        uint64_t v15 = nw_listener_get_id_string(*(void **)(a1 + 32));
        uint64_t v16 = *(id **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
        uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 208LL);
        int v30 = 136447234;
        __int16 v31 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
        __int16 v32 = 2082;
        BOOL v33 = v15;
        __int16 v34 = 2114;
        int v35 = v16;
        __int16 v36 = 2114;
        __int16 v37 = v9;
        __int16 v38 = 2114;
        uint64_t v39 = v17;
        id v18 = "%{public}s [%{public}s] Error %{public}@ starting inbox %{public}@. Parameters: %{public}@";
        uint64_t v19 = v14;
        os_log_type_t v20 = OS_LOG_TYPE_ERROR;
        uint32_t v21 = 52;
LABEL_22:
        _os_log_impl(&dword_181A5C000, v19, v20, v18, (uint8_t *)&v30, v21);
LABEL_23:
      }
    }

    else
    {
      if (v13 && !nw_path_parameters_get_logging_disabled(*(void *)(v13 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        id v25 = (os_log_s *)(id)glistenerLogObj;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          os_log_type_t v26 = nw_listener_get_id_string(*(void **)(a1 + 32));
          BOOL v27 = *(id **)(*(void *)(a1 + 32) + 208LL);
          int v30 = 136446978;
          __int16 v31 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
          __int16 v32 = 2082;
          BOOL v33 = v26;
          __int16 v34 = 2114;
          int v35 = v9;
          __int16 v36 = 2114;
          __int16 v37 = v27;
          _os_log_impl( &dword_181A5C000,  v25,  OS_LOG_TYPE_DEFAULT,  "%{public}s [%{public}s] Started inbox %{public}@ with parameters %{public}@",  (uint8_t *)&v30,  0x2Au);
        }
      }

      nw_array_append(*(void *)(*(void *)(a1 + 32) + 144LL), v9);
    }
  }

  else
  {
    uint64_t v22 = *(void *)(*(void *)(a1 + 32) + 16LL);
    if (v22 && !nw_path_parameters_get_logging_disabled(*(void *)(v22 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
      }
      id v14 = (os_log_s *)(id)glistenerLogObj;
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_23;
      }
      uint64_t v23 = nw_listener_get_id_string(*(void **)(a1 + 32));
      uint64_t v24 = *(id **)(*(void *)(a1 + 32) + 208LL);
      int v30 = 136446722;
      __int16 v31 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
      __int16 v32 = 2082;
      BOOL v33 = v23;
      __int16 v34 = 2114;
      int v35 = v24;
      id v18 = "%{public}s [%{public}s] Failed to create IP channel flow for %{public}@";
      uint64_t v19 = v14;
      os_log_type_t v20 = OS_LOG_TYPE_DEFAULT;
      uint32_t v21 = 32;
      goto LABEL_22;
    }
  }

  BOOL v28 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL) == 0LL;

  return v28;
}

void sub_181F002FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL40nw_listener_save_local_endpoint_on_queueP22NWConcrete_nw_listener_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (nw_path_flow_is_assigned(v4)
    && (nw_path_flow_is_defunct(v4) & 1) == 0
    && (id v5 = nw_path_flow_copy_local_endpoint(v4)) != 0LL)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v8 = 1LL;
  }

  return v8;
}

void nw_listener_set_local_endpoint_on_queue(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  nw_context_assert_queue(*((void **)v3 + 3));
  if (v4)
  {
    id v5 = v4;
    __int16 v6 = __rev16([v5 port]);
  }

  else
  {
    __int16 v6 = 0;
  }

  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 3221225472LL;
  aBlock[2] = ___ZL39nw_listener_set_local_endpoint_on_queueP22NWConcrete_nw_listenerPU25objcproto14OS_nw_endpoint8NSObject_block_invoke;
  aBlock[3] = &unk_189BB8B50;
  id v7 = v3;
  id v11 = v7;
  id v8 = v4;
  id v12 = v8;
  __int16 v13 = v6;
  int v9 = (void (**)(void))_Block_copy(aBlock);
  os_unfair_lock_lock((os_unfair_lock_t)v3 + 2);
  v9[2](v9);
  os_unfair_lock_unlock((os_unfair_lock_t)v3 + 2);
}

void sub_181F00490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_listener_set_state_on_queue(void *a1, int a2, void *a3)
{
  uint64_t v113 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a3;
  nw_context_assert_queue(*((void **)v5 + 3));
  unsigned int v7 = v5[32];
  if (v7 < 3 || (v7 == 3 ? (BOOL v13 = a2 == 4) : (BOOL v13 = 0), v13))
  {
    if (v7 == a2)
    {
      id v8 = *((id *)v5 + 17);
      int v9 = v6;
      uint64_t v10 = v9;
      if (v8 && v9)
      {
        if (v8[2] != v9[2])
        {

          goto LABEL_49;
        }

        int v11 = v8[3];
        int v12 = v9[3];

        if (v11 != v12) {
          goto LABEL_49;
        }
      }

      else
      {

        if (v8 != v10) {
          goto LABEL_29;
        }
      }

      if ((*((_BYTE *)v5 + 302) & 2) != 0)
      {
        uint64_t v19 = (void *)*((void *)v5 + 2);
        if (!v19) {
          goto LABEL_98;
        }
        os_log_type_t v20 = v19;
        uint64_t v21 = v20[12];

        if ((v21 & 0x4000000) == 0)
        {
          uint64_t v22 = *((void *)v5 + 2);
          if (v22 && !nw_path_parameters_get_logging_disabled(*(void *)(v22 + 104)))
          {
            if (__nwlog_listener_log::onceToken != -1) {
              dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
            }
            uint64_t v23 = (os_log_s *)(id)glistenerLogObj;
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
            {
              id_string = nw_listener_get_id_string(v5);
              id v25 = off_189BB8B98[a2];
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_listener_set_state_on_queue";
              *(_WORD *)&_BYTE buf[12] = 2082;
              *(void *)&buf[14] = id_string;
              *(_WORD *)&_BYTE buf[22] = 2082;
              __int16 v109 = (void *(*)(uint64_t, uint64_t))v25;
              *(_WORD *)v110 = 2114;
              *(void *)&v110[2] = v10;
              _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_DEBUG,  "%{public}s [%{public}s] Skipping update for identical state and error (state: %{public}s, error: %{public}@)",  buf,  0x2Au);
            }
          }

          goto LABEL_98;
        }
      }
    }

void sub_181F010B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, void *a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, void *a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, id a42, char a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, id a48)
{
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a43, 8);

  _Block_object_dispose((const void *)(v51 - 192), 8);
  _Unwind_Resume(a1);
}

void nw_listener_stop_advertising_on_queue(NWConcrete_nw_listener *a1)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  nw_context_assert_queue(*((void **)v1 + 3));
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *((id *)v1 + 34);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v11;
    do
    {
      uint64_t v5 = 0LL;
      do
      {
        if (*(void *)v11 != v4) {
          objc_enumerationMutation(v2);
        }
        -[_NWAdvertiser stop](*(void *)(*((void *)&v10 + 1) + 8 * v5++));
      }

      while (v3 != v5);
      uint64_t v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v3);
  }

  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 3221225472LL;
  aBlock[2] = ___ZL37nw_listener_stop_advertising_on_queueP22NWConcrete_nw_listener_block_invoke;
  aBlock[3] = &unk_189BC93A0;
  id v6 = v1;
  int v9 = v6;
  unsigned int v7 = (void (**)(void))_Block_copy(aBlock);
  os_unfair_lock_lock((os_unfair_lock_t)v1 + 2);
  v7[2](v7);
  os_unfair_lock_unlock((os_unfair_lock_t)v1 + 2);
}

void sub_181F012AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v16 = v15;

  _Unwind_Resume(a1);
}

void nw_listener_start_advertising_on_queue(NWConcrete_nw_listener *a1)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  nw_context_assert_queue(*((void **)v1 + 3));
  if (*((void *)v1 + 33) && *((_DWORD *)v1 + 32) == 2 && (*((_BYTE *)v1 + 302) & 1) == 0 && !*((void *)v1 + 34))
  {
    id v2 = -[_NWAdvertiser initFor:descriptor:parent:parameters:]( (id *)objc_alloc(&OBJC_CLASS____NWAdvertiser),  v1,  *((void **)v1 + 33),  0LL,  *((void **)v1 + 26));
    if (v2)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      LOBYTE(v28) = 1;
      aBlock[0] = MEMORY[0x1895F87A8];
      aBlock[1] = 3221225472LL;
      aBlock[2] = ___ZL38nw_listener_start_advertising_on_queueP22NWConcrete_nw_listener_block_invoke;
      aBlock[3] = &unk_189BBEEE8;
      uint64_t v22 = v1;
      uint64_t v3 = v2;
      uint64_t v23 = v3;
      uint64_t v24 = buf;
      uint64_t v4 = (void (**)(void))_Block_copy(aBlock);
      os_unfair_lock_lock((os_unfair_lock_t)v1 + 2);
      v4[2](v4);
      os_unfair_lock_unlock((os_unfair_lock_t)v1 + 2);

      if (*(_BYTE *)(*(void *)&buf[8] + 24LL)) {
        -[_NWAdvertiser start]((uint64_t)v3);
      }

      _Block_object_dispose(buf, 8);
      goto LABEL_39;
    }

    uint64_t v5 = *((void *)v1 + 2);
    if (!v5 || nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104)))
    {
LABEL_39:

      goto LABEL_40;
    }

    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
    }
    id v6 = (id)glistenerLogObj;
    unsigned int v7 = v1;

    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_listener_start_advertising_on_queue";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = (char *)v7 + 42;
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v8, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        int v9 = (os_log_s *)(id)glistenerLogObj;
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          id_string = nw_listener_get_id_string(v7);
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_listener_start_advertising_on_queue";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = id_string;
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s [%{public}s] Failed to create advertiser", buf, 0x16u);
        }
      }

      else if (v25)
      {
        backtrace_string = __nw_create_backtrace_string();
        if (backtrace_string)
        {
          __int128 v13 = (char *)backtrace_string;
          if (__nwlog_listener_log::onceToken != -1) {
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
          }
          uint64_t v14 = (os_log_s *)(id)glistenerLogObj;
          os_log_type_t v15 = type;
          if (os_log_type_enabled(v14, type))
          {
            uint64_t v16 = nw_listener_get_id_string(v7);
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_listener_start_advertising_on_queue";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = v16;
            *(_WORD *)&_BYTE buf[22] = 2082;
            BOOL v28 = v13;
            _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s [%{public}s] Failed to create advertiser, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v13);
          goto LABEL_37;
        }

        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        int v9 = (os_log_s *)(id)glistenerLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          os_log_type_t v20 = nw_listener_get_id_string(v7);
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_listener_start_advertising_on_queue";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v20;
          _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s [%{public}s] Failed to create advertiser, no backtrace",  buf,  0x16u);
        }
      }

      else
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        int v9 = (os_log_s *)(id)glistenerLogObj;
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v9, type))
        {
          id v18 = nw_listener_get_id_string(v7);
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_listener_start_advertising_on_queue";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v18;
          _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s [%{public}s] Failed to create advertiser, backtrace limit exceeded",  buf,  0x16u);
        }
      }
    }

void sub_181F017D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_181F01DA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL38nw_listener_start_advertising_on_queueP22NWConcrete_nw_listener_block_invoke(uint64_t a1)
{
  v28[1] = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 272))
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (!v3 || nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104))) {
      goto LABEL_15;
    }
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
    }
    id v4 = (id)glistenerLogObj;
    id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
    *(_DWORD *)buf = 136446466;
    uint64_t v23 = "nw_listener_start_advertising_on_queue_block_invoke";
    __int16 v24 = 2082;
    char v25 = id_string;
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v6, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        unsigned int v7 = (os_log_s *)(id)glistenerLogObj;
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          int v9 = nw_listener_get_id_string(*(void **)(a1 + 32));
          *(_DWORD *)buf = 136446466;
          uint64_t v23 = "nw_listener_start_advertising_on_queue_block_invoke";
          __int16 v24 = 2082;
          char v25 = v9;
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s [%{public}s] advertisers already set", buf, 0x16u);
        }
      }

      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        unsigned int v7 = (os_log_s *)(id)glistenerLogObj;
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v15)
          {
            uint64_t v16 = nw_listener_get_id_string(*(void **)(a1 + 32));
            *(_DWORD *)buf = 136446722;
            uint64_t v23 = "nw_listener_start_advertising_on_queue_block_invoke";
            __int16 v24 = 2082;
            char v25 = v16;
            __int16 v26 = 2082;
            BOOL v27 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v14,  "%{public}s [%{public}s] advertisers already set, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(backtrace_string);
          if (!v6) {
            goto LABEL_15;
          }
          goto LABEL_14;
        }

        if (v15)
        {
          os_log_type_t v19 = nw_listener_get_id_string(*(void **)(a1 + 32));
          *(_DWORD *)buf = 136446466;
          uint64_t v23 = "nw_listener_start_advertising_on_queue_block_invoke";
          __int16 v24 = 2082;
          char v25 = v19;
          _os_log_impl( &dword_181A5C000,  v7,  v14,  "%{public}s [%{public}s] advertisers already set, no backtrace",  buf,  0x16u);
        }
      }

      else
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        unsigned int v7 = (os_log_s *)(id)glistenerLogObj;
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          id v18 = nw_listener_get_id_string(*(void **)(a1 + 32));
          *(_DWORD *)buf = 136446466;
          uint64_t v23 = "nw_listener_start_advertising_on_queue_block_invoke";
          __int16 v24 = 2082;
          char v25 = v18;
          _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s [%{public}s] advertisers already set, backtrace limit exceeded",  buf,  0x16u);
        }
      }
    }

    if (!v6)
    {
LABEL_15:
      *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
      return;
    }

void sub_181F02BDC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  _Unwind_Resume(a1);
}

id nw_listener_copy_parameters_with_port(void *a1, const char *a2, int a3)
{
  uint64_t v69 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  BOOL v6 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v5,  0,  0);

  nw_endpoint_t v7 = nw_parameters_copy_local_endpoint((nw_parameters_t)v5);
  nw_endpoint_t v8 = v7;
  if (!v7)
  {
    host = nw_endpoint_create_host("::", a2);
    if (host)
    {
LABEL_14:
      nw_parameters_set_local_endpoint((nw_parameters_t)v6, host);

      goto LABEL_49;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v23 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    uint64_t v62 = "nw_listener_copy_parameters_with_port";
    BOOL v15 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v59 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v24 = (os_log_s *)(id)gLogObj;
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v62 = "nw_listener_copy_parameters_with_port";
        _os_log_impl(&dword_181A5C000, v24, v25, "%{public}s nw_endpoint_create_host failed", buf, 0xCu);
      }
    }

    else if (v59)
    {
      backtrace_string = __nw_create_backtrace_string();
      if (backtrace_string)
      {
        __int16 v34 = (char *)backtrace_string;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v35 = (os_log_s *)(id)gLogObj;
        os_log_type_t v36 = type;
        if (os_log_type_enabled(v35, type))
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v62 = "nw_listener_copy_parameters_with_port";
          __int16 v63 = 2082;
          __int16 v64 = v34;
          _os_log_impl( &dword_181A5C000,  v35,  v36,  "%{public}s nw_endpoint_create_host failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v34);
        if (!v15) {
          goto LABEL_108;
        }
        goto LABEL_106;
      }

      __nwlog_obj();
      __int16 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v50 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v62 = "nw_listener_copy_parameters_with_port";
        _os_log_impl(&dword_181A5C000, v24, v50, "%{public}s nw_endpoint_create_host failed, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v24 = (os_log_s *)(id)gLogObj;
      os_log_type_t v42 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v62 = "nw_listener_copy_parameters_with_port";
        _os_log_impl( &dword_181A5C000,  v24,  v42,  "%{public}s nw_endpoint_create_host failed, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181F03AC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181F03C8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181F03DF0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_181F03E9C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _NWAdvertiser_dnssd_handler( _DNSServiceRef_t *a1, int a2, int a3, const char *a4, const char *a5, const char *a6, void *a7)
{
  uint64_t v62 = *MEMORY[0x1895F89C0];
  int v13 = a7;
  id v38 = v13;
  if (v13 && v13[8] == a1)
  {
    nw_context_assert_queue(*((void **)v13[1] + 3));
    uint64_t v14 = *((void *)v38[1] + 2);
    if (v14 && !nw_path_parameters_get_logging_disabled(*(void *)(v14 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
      }
      BOOL v15 = (os_log_s *)(id)glistenerLogObj;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_listener_get_id_string(v38[1]);
        *(_DWORD *)buf = 136447746;
        *(void *)&uint8_t buf[4] = "-[_NWAdvertiser handleBonjourUpdateFlags:error:name:type:domain:]";
        os_log_type_t v17 = "<NULL>";
        *(_WORD *)&_BYTE buf[12] = 2082;
        if (a4) {
          id v18 = a4;
        }
        else {
          id v18 = "<NULL>";
        }
        *(void *)&buf[14] = id_string;
        *(_WORD *)&_BYTE buf[22] = 1024;
        if (a5) {
          id v19 = a5;
        }
        else {
          id v19 = "<NULL>";
        }
        *(_DWORD *)char v59 = a2;
        if (a6) {
          os_log_type_t v17 = a6;
        }
        *(_WORD *)&v59[4] = 1024;
        *(_DWORD *)&v59[6] = a3;
        *(_WORD *)&v59[10] = 2082;
        *(void *)&v59[12] = v18;
        *(_WORD *)&v59[20] = 2082;
        *(void *)&v59[22] = v19;
        *(_WORD *)&v59[30] = 2082;
        uint64_t v60 = v17;
        _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_DEBUG,  "%{public}s [%{public}s] flags=0x%x, error=%d, name=%{public}s, type=%{public}s, domain=%{public}s",  buf,  0x40u);
      }
    }

    id WeakRetained = objc_loadWeakRetained(v38 + 3);
    uint64_t v21 = WeakRetained;
    if (a3)
    {
      dns_error = nw_error_create_dns_error(a3);
      uint64_t v23 = *((void *)v38[1] + 2);
      if (v23 && !nw_path_parameters_get_logging_disabled(*(void *)(v23 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        __int16 v24 = (os_log_s *)(id)glistenerLogObj;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          os_log_type_t v25 = nw_listener_get_id_string(v38[1]);
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "-[_NWAdvertiser handleBonjourUpdateFlags:error:name:type:domain:]";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v25;
          *(_WORD *)&_BYTE buf[22] = 2114;
          *(void *)char v59 = dns_error;
          _os_log_impl( &dword_181A5C000,  v24,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}s] Error advertising bonjour service: %{public}@",  buf,  0x20u);
        }
      }

      id v26 = v38[1];
      if (a3 == -65570)
      {
        uint64_t v27 = v26[2];
        if (v27 && !nw_path_parameters_get_logging_disabled(*(void *)(v27 + 104)))
        {
          if (__nwlog_listener_log::onceToken != -1) {
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
          }
          BOOL v28 = (os_log_s *)(id)glistenerLogObj;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            uint64_t v29 = nw_listener_get_id_string(v38[1]);
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "-[_NWAdvertiser handleBonjourUpdateFlags:error:name:type:domain:]";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = v29;
            _os_log_impl( &dword_181A5C000,  v28,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}s] advertising denied by policy",  buf,  0x16u);
          }
        }
      }

      else
      {
        nw_listener_set_state_on_queue(v26, 3, dns_error);
      }

      nw_endpoint_t bonjour_service = 0LL;
    }

    else
    {
      nw_endpoint_t bonjour_service = 0LL;
      if (a4)
      {
        if (a5)
        {
          if (a6)
          {
            if (!WeakRetained)
            {
              nw_endpoint_t bonjour_service = nw_endpoint_create_bonjour_service(a4, a5, a6);
              if ((a2 & 2) != 0)
              {
                uint64_t v52 = 0LL;
                BOOL v53 = &v52;
                uint64_t v54 = 0x3032000000LL;
                os_log_type_t v55 = __Block_byref_object_copy__17859;
                uint64_t v56 = __Block_byref_object_dispose__17860;
                id v57 = 0LL;
                uint64_t v46 = 0LL;
                os_log_type_t v47 = &v46;
                uint64_t v48 = 0x3032000000LL;
                os_log_type_t v49 = __Block_byref_object_copy__3;
                os_log_type_t v50 = __Block_byref_object_dispose__4;
                id v51 = 0LL;
                v44[0] = 0LL;
                v44[1] = v44;
                v44[2] = 0x3032000000LL;
                v44[3] = __Block_byref_object_copy__17859;
                v44[4] = __Block_byref_object_dispose__17860;
                id v45 = 0LL;
                uint64_t v31 = MEMORY[0x1895F87A8];
                os_log_type_t v32 = (os_unfair_lock_s *)v38[1];
                *(void *)buf = MEMORY[0x1895F87A8];
                *(void *)&buf[8] = 3221225472LL;
                *(void *)&buf[16] = __65___NWAdvertiser_handleBonjourUpdateFlags_error_name_type_domain___block_invoke;
                *(void *)char v59 = &unk_189BB8920;
                *(void *)&v59[8] = v38;
                nw_endpoint_t bonjour_service = bonjour_service;
                *(void *)&v59[16] = bonjour_service;
                *(void *)&v59[24] = &v52;
                uint64_t v60 = (const char *)&v46;
                dispatch_block_t v61 = v44;
                BOOL v33 = (void (**)(void))_Block_copy(buf);
                v32 += 2;
                os_unfair_lock_lock(v32);
                v33[2](v33);
                os_unfair_lock_unlock(v32);

                if (bonjour_service)
                {
                  if (v47[5])
                  {
                    __int16 v34 = (void *)v53[5];
                    if (v34)
                    {
                      dispatch_qos_class_t v35 = *((_DWORD *)v38[1] + 18);
                      block[0] = v31;
                      block[1] = 3221225472LL;
                      block[2] = __65___NWAdvertiser_handleBonjourUpdateFlags_error_name_type_domain___block_invoke_2;
                      block[3] = &unk_189BB8948;
                      os_log_type_t v41 = v44;
                      os_log_type_t v42 = &v46;
                      os_log_type_t v40 = bonjour_service;
                      char v43 = 1;
                      os_log_type_t v36 = v34;
                      dispatch_block_t v37 = dispatch_block_create_with_qos_class((dispatch_block_flags_t)0LL, v35, 0, block);
                      dispatch_async(v36, v37);
                    }
                  }
                }

                _Block_object_dispose(v44, 8);
                _Block_object_dispose(&v46, 8);

                _Block_object_dispose(&v52, 8);
              }
            }
          }
        }
      }
    }
  }
}

void sub_181F04424( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, void *a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, void *a36)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a25, 8);

  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
  BOOL result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void sub_181F04594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181F0462C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

id *nw_listener_reconcile_advertised_endpoints(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v67 = *MEMORY[0x1895F89C0];
  int v9 = a1;
  id v10 = a2;
  uint64_t v11 = a3;
  id v12 = a4;
  int v13 = a5;
  uint64_t v14 = v9[2];
  if (v14 && !nw_path_parameters_get_logging_disabled(*(void *)(v14 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
    }
    BOOL v15 = (os_log_s *)(id)glistenerLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = v9;
      os_log_type_t v17 = v16 + 42;

      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_listener_reconcile_advertised_endpoints";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = v17;
      *(_WORD *)&_BYTE buf[22] = 2112;
      __int16 v65 = (uint64_t (*)(uint64_t, uint64_t))v11;
      LOWORD(v66) = 2112;
      *(void *)((char *)&v66 + 2) = v12;
      _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_DEBUG,  "%{public}s [%{public}s] Reconciling advertised endpoints %@ for path %@",  buf,  0x2Au);
    }
  }

  *(void *)buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000LL;
  __int16 v65 = __Block_byref_object_copy__17859;
  *(void *)&__int128 v66 = __Block_byref_object_dispose__17860;
  *((void *)&v66 + 1) = 0LL;
  uint64_t v57 = 0LL;
  uint64_t v58 = &v57;
  uint64_t v59 = 0x3032000000LL;
  uint64_t v60 = __Block_byref_object_copy__17859;
  dispatch_block_t v61 = __Block_byref_object_dispose__17860;
  id v62 = 0LL;
  uint64_t v53 = 0LL;
  uint64_t v54 = &v53;
  uint64_t v55 = 0x2020000000LL;
  uint64_t v56 = 0LL;
  if (v11)
  {
    v45[0] = MEMORY[0x1895F87A8];
    v45[1] = 3221225472LL;
    v45[2] = ___ZL42nw_listener_reconcile_advertised_endpointsP22NWConcrete_nw_listenerP7NSArrayIP13_NWAdvertiserEPU22objcproto11OS_nw_array8NSObjectPU21objcproto10OS_nw_pathS6_S3__block_invoke;
    v45[3] = &unk_189BC6D60;
    os_log_type_t v50 = &v57;
    id v46 = v10;
    id v47 = v12;
    uint64_t v48 = v9;
    os_log_type_t v49 = v13;
    id v51 = buf;
    uint64_t v52 = &v53;
    nw_array_apply(v11, (uint64_t)v45);
  }

  if (!v13 || nw_advertise_descriptor_get_type(v13[2]) == 2)
  {
    nw_listener_set_device_id(v9, v54[3]);
    nw_listener_set_authorized_keys(v9, (void *)v58[5]);
  }

  if (v10)
  {
    __int128 v43 = 0u;
    __int128 v44 = 0u;
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    id v18 = v10;
    uint64_t v19 = [v18 countByEnumeratingWithState:&v41 objects:v63 count:16];
    if (v19)
    {
      uint64_t v20 = *(void *)v42;
      do
      {
        for (uint64_t i = 0LL; i != v19; ++i)
        {
          if (*(void *)v42 != v20) {
            objc_enumerationMutation(v18);
          }
          uint64_t v22 = *(void *)(*((void *)&v41 + 1) + 8 * i);
          if (([*(id *)(*(void *)&buf[8] + 40) containsObject:v22] & 1) == 0) {
            -[_NWAdvertiser stop](v22);
          }
        }

        uint64_t v19 = [v18 countByEnumeratingWithState:&v41 objects:v63 count:16];
      }

      while (v19);
    }
  }

  if (!v12) {
    goto LABEL_36;
  }
  uint64_t v23 = *(void **)(*(void *)&buf[8] + 40LL);
  if (v23)
  {
    if ([v23 count]) {
      goto LABEL_36;
    }
  }

  __int16 v24 = (id *)v12;
  id v25 = v24[6];

  if (!v25 || (v26 = v25, int v27 = v26[2], v26, v27 != 2))
  {
LABEL_35:

LABEL_36:
    BOOL v28 = (id *)*(id *)(*(void *)&buf[8] + 40LL);
    goto LABEL_37;
  }

  BOOL v28 = v24;
  uint64_t v29 = (unsigned __int8 *)v28[9];

  if (!v29) {
    goto LABEL_34;
  }
  uint64_t v35 = 0LL;
  os_log_type_t v36 = &v35;
  uint64_t v37 = 0x3032000000LL;
  id v38 = __Block_byref_object_copy__17859;
  uint64_t v39 = __Block_byref_object_dispose__17860;
  id v40 = 0LL;
  v34[1] = 3221225472LL;
  v34[2] = ___ZL42nw_listener_reconcile_advertised_endpointsP22NWConcrete_nw_listenerP7NSArrayIP13_NWAdvertiserEPU22objcproto11OS_nw_array8NSObjectPU21objcproto10OS_nw_pathS6_S3__block_invoke_193;
  v34[3] = &unk_189BC50D0;
  void v34[4] = &v35;
  BOOL v33 = v29;
  v34[0] = MEMORY[0x1895F87A8];
  nw_array_apply(v29, (uint64_t)v34);
  uint64_t v30 = v36[5];
  if (v30)
  {
    nw_listener_set_state_on_queue(v9, 3, (void *)v36[5]);
    BOOL v28 = (id *)*(id *)(*(void *)&buf[8] + 40LL);
  }

  BOOL v31 = v30 == 0;
  _Block_object_dispose(&v35, 8);

  uint64_t v29 = v33;
  if (v31)
  {
LABEL_34:

    goto LABEL_35;
  }

LABEL_37:
  _Block_object_dispose(&v53, 8);
  _Block_object_dispose(&v57, 8);

  _Block_object_dispose(buf, 8);
  return v28;
}

void sub_181F04B28( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41, uint64_t a42, uint64_t a43, uint64_t a44, char a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, id a50)
{
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a45, 8);

  _Block_object_dispose((const void *)(v56 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL42nw_listener_reconcile_advertised_endpointsP22NWConcrete_nw_listenerP7NSArrayIP13_NWAdvertiserEPU22objcproto11OS_nw_array8NSObjectPU21objcproto10OS_nw_pathS6_S3__block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v106 = *MEMORY[0x1895F89C0];
  id v4 = a3;
  id v5 = nw_endpoint_copy_public_keys(v4);
  if (v5)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 64) + 8LL);
    nw_endpoint_t v7 = *(void **)(v6 + 40);
    if (v7)
    {
      uint64_t v8 = [v7 arrayByAddingObjectsFromArray:v5];
      uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8LL);
      id v10 = *(void **)(v9 + 40);
      *(void *)(v9 + 40) = v8;
    }

    else
    {
      id v11 = v5;
      id v10 = *(void **)(v6 + 40);
      *(void *)(v6 + 40) = v11;
    }
  }

  nw_endpoint_set_txt_record(v4, 0LL);
  id v12 = (nw_endpoint *)v4;
  if (nw_endpoint_get_type(v12) == nw_endpoint_type_bonjour_service)
  {
    bonjour_service_domain = nw_endpoint_get_bonjour_service_domain(v12);
    bonjour_service_name = nw_endpoint_get_bonjour_service_name(v12);
    bonjour_service_os_log_type_t type = nw_endpoint_get_bonjour_service_type(v12);
    nw_endpoint_t bonjour_service = nw_advertise_descriptor_create_bonjour_service( bonjour_service_name,  bonjour_service_type,  bonjour_service_domain);
    os_log_type_t v17 = nw_endpoint_copy_txt_record(v12);
    nw_advertise_descriptor_set_txt_record_object(bonjour_service, v17);

    nw_advertise_descriptor_set_no_auto_rename(bonjour_service, 1);
    if (bonjour_service)
    {
      __int128 v85 = 0u;
      __int128 v86 = 0u;
      __int128 v83 = 0u;
      __int128 v84 = 0u;
      id v18 = *(id *)(a1 + 32);
      uint64_t v19 = [v18 countByEnumeratingWithState:&v83 objects:v95 count:16];
      if (v19)
      {
        uint64_t v20 = *(void *)v84;
        while (2)
        {
          for (uint64_t i = 0LL; i != v19; ++i)
          {
            if (*(void *)v84 != v20) {
              objc_enumerationMutation(v18);
            }
            uint64_t v22 = *(void ***)(*((void *)&v83 + 1) + 8 * i);
            if (nw_advertise_descriptor_is_equal(bonjour_service, v22[2], 0))
            {
              __int16 v24 = v22;
              goto LABEL_58;
            }
          }

          uint64_t v19 = [v18 countByEnumeratingWithState:&v83 objects:v95 count:16];
          if (v19) {
            continue;
          }
          break;
        }
      }

      id v18 = (id)nw_path_copy_derived_parameters(*(void **)(a1 + 40));
      uint64_t v23 = -[_NWAdvertiser initFor:descriptor:parent:parameters:]( (id *)objc_alloc(&OBJC_CLASS____NWAdvertiser),  *(void **)(a1 + 48),  bonjour_service,  *(void **)(a1 + 56),  v18);
      if (v23)
      {
        __int16 v24 = v23;
        if (![*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) count]) {
          goto LABEL_50;
        }
        id v25 = (nw_parameters_t *)*(id *)(a1 + 48);
        if (!nw_parameters_get_include_peer_to_peer(v25[2])
          || nw_parameters_get_multipath_service(v25[2]) == nw_multipath_service_disabled
          || (nw_parameters_t v26 = v25[33]) == 0LL)
        {

          goto LABEL_50;
        }

        BOOL v27 = nw_advertise_descriptor_get_type(v26) == 2;

        if (!v27)
        {
LABEL_50:
          uint64_t v46 = *(void *)(*(void *)(a1 + 48) + 16LL);
          if (v46 && !nw_path_parameters_get_logging_disabled(*(void *)(v46 + 104)))
          {
            if (__nwlog_listener_log::onceToken != -1) {
              dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
            }
            id v47 = (os_log_s *)(id)glistenerLogObj;
            if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
            {
              id_string = nw_listener_get_id_string(*(void **)(a1 + 48));
              *(_DWORD *)buf = 136446722;
              id v97 = "nw_listener_reconcile_advertised_endpoints_block_invoke";
              __int16 v98 = 2082;
              id v99 = id_string;
              __int16 v100 = 2112;
              uint64_t v101 = (uint64_t)bonjour_service;
              _os_log_impl( &dword_181A5C000,  v47,  OS_LOG_TYPE_INFO,  "%{public}s [%{public}s] Creating new advertiser for %@",  buf,  0x20u);
            }
          }

          -[_NWAdvertiser start](v24);
LABEL_58:

          os_log_type_t v49 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
          if (v49)
          {
            [v49 arrayByAddingObject:v24];
          }

          else
          {
            id v94 = v24;
            [MEMORY[0x189603F18] arrayWithObjects:&v94 count:1];
          }
          uint64_t v50 = ;
          uint64_t v51 = *(void *)(*(void *)(a1 + 72) + 8LL);
          uint64_t v52 = *(void **)(v51 + 40);
          *(void *)(v51 + 40) = v50;

          if (!*(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL)) {
            *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = nw_endpoint_get_device_id(v12);
          }
          goto LABEL_83;
        }

        uint64_t v28 = *(void *)(*(void *)(a1 + 48) + 16LL);
        if (v28 && !nw_path_parameters_get_logging_disabled(*(void *)(v28 + 104)))
        {
          if (__nwlog_listener_log::onceToken != -1) {
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
          }
          uint64_t v29 = (os_log_s *)(id)glistenerLogObj;
          if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
          {
            uint64_t v30 = nw_listener_get_id_string(*(void **)(a1 + 48));
            *(_DWORD *)buf = 136446466;
            id v97 = "nw_listener_reconcile_advertised_endpoints_block_invoke";
            __int16 v98 = 2082;
            id v99 = v30;
            _os_log_impl( &dword_181A5C000,  v29,  OS_LOG_TYPE_INFO,  "%{public}s [%{public}s] Got new keys, starting advertising timer",  buf,  0x16u);
          }
        }

        id v31 = *(id *)(a1 + 48);
        nw_context_assert_queue(*((void **)v31 + 3));
        uint64_t v32 = *((void *)v31 + 31);
        nw_listener_stop_advertise_timer_on_queue((NWConcrete_nw_listener *)v31);
        *(void *)os_log_type_t v89 = MEMORY[0x1895F87A8];
        uint64_t v90 = 3221225472LL;
        __int16 v91 = ___ZL42nw_listener_start_advertise_timer_on_queueP22NWConcrete_nw_listener_block_invoke;
        id v92 = &unk_189BC93A0;
        BOOL v33 = (char *)v31;
        id v93 = v33;
        *((void *)v31 + 31) = nw_queue_context_create_source(0LL, 2, 3, 0, v89, 0LL);
        if (v32)
        {
LABEL_106:
          uint64_t v74 = *((void *)v31 + 31);
          dispatch_time_t v75 = dispatch_time(0x8000000000000000LL, 30000000000LL);
          nw_queue_set_timer_values(v74, v75, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
          nw_queue_activate_source(*((void *)v31 + 31), v76);
          uint64_t v77 = *((void *)v33 + 2);
          if (v77 && !nw_path_parameters_get_logging_disabled(*(void *)(v77 + 104)))
          {
            if (__nwlog_listener_log::onceToken != -1) {
              dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
            }
            id v78 = (os_log_s *)(id)glistenerLogObj;
            if (os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136446466;
              id v97 = "nw_listener_start_advertise_timer_on_queue";
              __int16 v98 = 2082;
              id v99 = v33 + 42;
              _os_log_impl( &dword_181A5C000,  v78,  OS_LOG_TYPE_INFO,  "%{public}s [%{public}s] Started advertise listener timeout",  buf,  0x16u);
            }
          }

          goto LABEL_50;
        }

        int v34 = (unsigned __int16)(*((_WORD *)v33 + 120))++ + 1;
        if ((v34 & 0x10000) == 0)
        {
LABEL_99:
          uint64_t v70 = *((void *)v33 + 2);
          if (v70 && !nw_path_parameters_get_logging_disabled(*(void *)(v70 + 104)))
          {
            if (__nwlog_listener_log::onceToken != -1) {
              dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
            }
            uint64_t v71 = (os_log_s *)(id)glistenerLogObj;
            if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
            {
              __int16 v72 = nw_listener_get_id_string(v33);
              int v73 = *((unsigned __int16 *)v33 + 120);
              *(_DWORD *)buf = 136446722;
              id v97 = "nw_listener_start_advertise_timer_on_queue";
              __int16 v98 = 2082;
              id v99 = v72;
              __int16 v100 = 1024;
              LODWORD(v101) = v73;
              _os_log_impl( &dword_181A5C000,  v71,  OS_LOG_TYPE_INFO,  "%{public}s [%{public}s] Incrementing AWDL usage to %d for timer",  buf,  0x1Cu);
            }
          }

          goto LABEL_106;
        }

        __nwlog_obj();
        uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v36 = (char *)*((unsigned __int16 *)v33 + 120);
        *(_DWORD *)buf = 136446978;
        id v97 = "nw_listener_start_advertise_timer_on_queue";
        __int16 v98 = 2082;
        id v99 = "listener->awdl_use_count";
        __int16 v100 = 2048;
        uint64_t v101 = 1LL;
        __int16 v102 = 2048;
        __int16 v103 = v36;
        id v82 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v87 = 0;
        if (__nwlog_fault(v82, &type, &v87))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v80 = type;
            if (os_log_type_enabled(v37, type))
            {
              id v38 = (char *)*((unsigned __int16 *)v33 + 120);
              *(_DWORD *)buf = 136446978;
              id v97 = "nw_listener_start_advertise_timer_on_queue";
              __int16 v98 = 2082;
              id v99 = "listener->awdl_use_count";
              __int16 v100 = 2048;
              uint64_t v101 = 1LL;
              __int16 v102 = 2048;
              __int16 v103 = v38;
              _os_log_impl( &dword_181A5C000,  v37,  v80,  "%{public}s Overflow: %{public}s, increment %llu, result %llu",  buf,  0x2Au);
            }
          }

          else
          {
            if (v87)
            {
              backtrace_string = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              int v81 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v79 = type;
              BOOL v64 = os_log_type_enabled(v81, type);
              if (backtrace_string)
              {
                if (v64)
                {
                  __int16 v65 = (char *)*((unsigned __int16 *)v33 + 120);
                  *(_DWORD *)buf = 136447234;
                  id v97 = "nw_listener_start_advertise_timer_on_queue";
                  __int16 v98 = 2082;
                  id v99 = "listener->awdl_use_count";
                  __int16 v100 = 2048;
                  uint64_t v101 = 1LL;
                  __int16 v102 = 2048;
                  __int16 v103 = v65;
                  __int16 v104 = 2082;
                  id v105 = backtrace_string;
                  _os_log_impl( &dword_181A5C000,  v81,  v79,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                }

                free(backtrace_string);
                goto LABEL_96;
              }

              if (v64)
              {
                uint64_t v69 = (char *)*((unsigned __int16 *)v33 + 120);
                *(_DWORD *)buf = 136446978;
                id v97 = "nw_listener_start_advertise_timer_on_queue";
                __int16 v98 = 2082;
                id v99 = "listener->awdl_use_count";
                __int16 v100 = 2048;
                uint64_t v101 = 1LL;
                __int16 v102 = 2048;
                __int16 v103 = v69;
                _os_log_impl( &dword_181A5C000,  v81,  v79,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace",  buf,  0x2Au);
              }
            }

            else
            {
              __nwlog_obj();
              __int128 v66 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v67 = type;
              int v81 = v66;
              if (os_log_type_enabled(v66, type))
              {
                id v68 = (char *)*((unsigned __int16 *)v33 + 120);
                *(_DWORD *)buf = 136446978;
                id v97 = "nw_listener_start_advertise_timer_on_queue";
                __int16 v98 = 2082;
                id v99 = "listener->awdl_use_count";
                __int16 v100 = 2048;
                uint64_t v101 = 1LL;
                __int16 v102 = 2048;
                __int16 v103 = v68;
                _os_log_impl( &dword_181A5C000,  v81,  v67,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded",  buf,  0x2Au);
              }
            }
          }
        }

void sub_181F05990( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31)
{
  _Unwind_Resume(a1);
}

void nw_listener_set_device_id(void *a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = v3;
  if (v3)
  {
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_listener_set_device_id_block_invoke;
    aBlock[3] = &unk_189BC66E8;
    uint64_t v16 = a2;
    BOOL v15 = v3;
    id v5 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v4 + 2);
    v5[2](v5);
    os_unfair_lock_unlock(v4 + 2);

    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v20 = "nw_listener_set_device_id";
  nw_endpoint_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_listener_set_device_id";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null listener", buf, 0xCu);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = v18;
      BOOL v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v20 = "nw_listener_set_device_id";
          __int16 v21 = 2082;
          uint64_t v22 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null listener, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_listener_set_device_id";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_listener_set_device_id";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null listener, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F05D38( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void nw_listener_set_authorized_keys(void *a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_listener_set_authorized_keys_block_invoke;
    aBlock[3] = &unk_189BC9238;
    id v16 = v4;
    char v17 = v3;
    uint64_t v6 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v3 + 2);
    v6[2](v6);
    os_unfair_lock_unlock(v3 + 2);

    goto LABEL_3;
  }

  __nwlog_obj();
  nw_endpoint_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v21 = "nw_listener_set_authorized_keys";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v19 = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v8, &v19, &v18))
  {
    if (v19 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = v19;
      if (os_log_type_enabled(v9, v19))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v21 = "nw_listener_set_authorized_keys";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null listener", buf, 0xCu);
      }
    }

    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = v19;
      BOOL v13 = os_log_type_enabled(v9, v19);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v21 = "nw_listener_set_authorized_keys";
          __int16 v22 = 2082;
          uint64_t v23 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null listener, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v21 = "nw_listener_set_authorized_keys";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = v19;
      if (os_log_type_enabled(v9, v19))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v21 = "nw_listener_set_authorized_keys";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null listener, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F06074( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_181F064A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, id a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, id a34)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);

  _Block_object_dispose((const void *)(v35 - 256), 8);
  _Unwind_Resume(a1);
}

BOOL ___ZL42nw_listener_reconcile_advertised_endpointsP22NWConcrete_nw_listenerP7NSArrayIP13_NWAdvertiserEPU22objcproto11OS_nw_array8NSObjectPU21objcproto10OS_nw_pathS6_S3__block_invoke_193( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = nw_path_flow_copy_error(v4);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
  nw_endpoint_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  BOOL v8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL) == 0LL;
  return v8;
}

void __nw_listener_set_authorized_keys_block_invoke(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v2 = (id)gLogObj;
  if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_DEBUG))
  {
  }

  else
  {
    int v3 = gLogFDOverride;

    if (v3 == -1) {
      goto LABEL_34;
    }
  }

  uint64_t v4 = [*(id *)(a1 + 32) count];
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 16LL);
  if (v4)
  {
    if (v5 && !nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
      }
      uint64_t v6 = (os_log_s *)(id)glistenerLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_listener_get_id_string(*(void **)(a1 + 40));
        *(_DWORD *)buf = 136446466;
        id v25 = "nw_listener_set_authorized_keys_block_invoke";
        __int16 v26 = 2082;
        BOOL v27 = id_string;
        _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEBUG,  "%{public}s [%{public}s] Resetting authorized keys",  buf,  0x16u);
      }
    }

    __int128 v22 = 0u;
    __int128 v23 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    id v8 = *(id *)(a1 + 32);
    uint64_t v9 = [v8 countByEnumeratingWithState:&v20 objects:v30 count:16];
    if (v9)
    {
      uint64_t v11 = *(void *)v21;
      *(void *)&__int128 v10 = 136446722LL;
      __int128 v19 = v10;
      do
      {
        uint64_t v12 = 0LL;
        do
        {
          if (*(void *)v21 != v11) {
            objc_enumerationMutation(v8);
          }
          uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 16LL);
          if (v13)
          {
            os_log_type_t v14 = *(void **)(*((void *)&v20 + 1) + 8 * v12);
            if (!nw_path_parameters_get_logging_disabled(*(void *)(v13 + 104)))
            {
              if (__nwlog_listener_log::onceToken != -1) {
                dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
              }
              BOOL v15 = (os_log_s *)(id)glistenerLogObj;
              if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
              {
                id v16 = nw_listener_get_id_string(*(void **)(a1 + 40));
                uint64_t v17 = [v14 hash];
                *(_DWORD *)buf = v19;
                id v25 = "nw_listener_set_authorized_keys_block_invoke";
                __int16 v26 = 2082;
                BOOL v27 = v16;
                __int16 v28 = 2048;
                uint64_t v29 = v17;
                _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_DEBUG,  "%{public}s [%{public}s] Authorized key #0x%lx",  buf,  0x20u);
              }
            }
          }

          ++v12;
        }

        while (v9 != v12);
        uint64_t v9 = [v8 countByEnumeratingWithState:&v20 objects:v30 count:16];
      }

      while (v9);
    }
  }

  else
  {
    if (!v5 || nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104))) {
      goto LABEL_34;
    }
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
    }
    id v8 = (id)glistenerLogObj;
    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_DEBUG))
    {
      char v18 = nw_listener_get_id_string(*(void **)(a1 + 40));
      *(_DWORD *)buf = 136446466;
      id v25 = "nw_listener_set_authorized_keys_block_invoke";
      __int16 v26 = 2082;
      BOOL v27 = v18;
      _os_log_impl( &dword_181A5C000,  (os_log_t)v8,  OS_LOG_TYPE_DEBUG,  "%{public}s [%{public}s] No keys provided",  buf,  0x16u);
    }
  }

LABEL_34:
  if (objc_msgSend(*(id *)(a1 + 32), "count", v19, (void)v20)) {
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 216LL), *(id *)(a1 + 32));
  }
}

void sub_181F0699C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_listener_set_device_id_block_invoke(uint64_t a1)
{
  id v2 = *(const char **)(a1 + 40);
  if (v2)
  {
    if (*(void *)(*(void *)(a1 + 32) + 232LL))
    {
      free(*(void **)(*(void *)(a1 + 32) + 232LL));
      *(void *)(*(void *)(a1 + 32) + 232LL) = 0LL;
      id v2 = *(const char **)(a1 + 40);
      if (!v2)
      {
        __nwlog_obj();
        uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
        uint64_t v5 = (void *)_os_log_send_and_compose_impl();

        free(v5);
        id v2 = 0LL;
      }
    }

    int v3 = strdup(v2);
    if (v3)
    {
LABEL_5:
      *(void *)(*(void *)(a1 + 32) + 232LL) = v3;
      return;
    }

    __nwlog_obj();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    nw_endpoint_t v7 = (void *)_os_log_send_and_compose_impl();

    if (!__nwlog_abort((uint64_t)v7))
    {
      free(v7);
      goto LABEL_5;
    }

void nw_listener_stop_advertise_timer_on_queue(NWConcrete_nw_listener *a1)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  nw_context_assert_queue(*((void **)v1 + 3));
  if (*((void *)v1 + 31))
  {
    uint64_t v3 = *((void *)v1 + 2);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
      }
      uint64_t v4 = (os_log_s *)(id)glistenerLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        uint64_t v5 = v1;
        uint64_t v6 = (char *)v5 + 42;

        int v7 = 136446466;
        id v8 = "nw_listener_stop_advertise_timer_on_queue";
        __int16 v9 = 2082;
        __int128 v10 = v6;
        _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_INFO,  "%{public}s [%{public}s] Stopping listener timeout",  (uint8_t *)&v7,  0x16u);
      }
    }

    nw_queue_cancel_source(*((void *)v1 + 31), v2);
    *((void *)v1 + 31) = 0LL;
  }
}

void sub_181F06CB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL42nw_listener_start_advertise_timer_on_queueP22NWConcrete_nw_listener_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 16LL);
  if (v2 && !nw_path_parameters_get_logging_disabled(*(void *)(v2 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
    }
    uint64_t v3 = (os_log_s *)(id)glistenerLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      int v5 = 136446466;
      uint64_t v6 = "nw_listener_start_advertise_timer_on_queue_block_invoke";
      __int16 v7 = 2082;
      id v8 = id_string;
      _os_log_impl( &dword_181A5C000,  v3,  OS_LOG_TYPE_INFO,  "%{public}s [%{public}s] Advertise listener timeout",  (uint8_t *)&v5,  0x16u);
    }
  }

  nw_listener_adjust_awdl_usage_on_queue(*(NWConcrete_nw_listener **)(a1 + 32), 0);
  *(void *)(*(void *)(a1 + 32) + 248LL) = 0LL;
}

void nw_listener_adjust_awdl_usage_on_queue(NWConcrete_nw_listener *a1, int a2)
{
  uint64_t v58 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  nw_context_assert_queue(*((void **)v3 + 3));
  int v4 = *((unsigned __int16 *)v3 + 120);
  if (a2)
  {
    *((_WORD *)v3 + 120) = v4 + 1;
    if (((v4 + 1) & 0x10000) == 0)
    {
LABEL_11:
      uint64_t v11 = *((void *)v3 + 2);
      if (v11 && !nw_path_parameters_get_logging_disabled(*(void *)(v11 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        uint64_t v12 = (os_log_s *)(id)glistenerLogObj;
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_INFO)) {
          goto LABEL_33;
        }
        uint64_t v13 = v3;

        int v14 = *((unsigned __int16 *)v3 + 120);
        *(_DWORD *)buf = 136446722;
        os_log_type_t v49 = "nw_listener_adjust_awdl_usage_on_queue";
        __int16 v50 = 2082;
        uint64_t v51 = (char *)v13 + 42;
        __int16 v52 = 1024;
        LODWORD(v53) = v14;
        BOOL v15 = "%{public}s [%{public}s] Incrementing AWDL usage to %d";
LABEL_32:
        _os_log_impl(&dword_181A5C000, v12, OS_LOG_TYPE_INFO, v15, buf, 0x1Cu);
LABEL_33:

        goto LABEL_34;
      }

      goto LABEL_34;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    uint64_t v6 = *((unsigned __int16 *)v3 + 120);
    *(_DWORD *)buf = 136446978;
    os_log_type_t v49 = "nw_listener_adjust_awdl_usage_on_queue";
    __int16 v50 = 2082;
    uint64_t v51 = "listener->awdl_use_count";
    __int16 v52 = 2048;
    uint64_t v53 = 1LL;
    __int16 v54 = 2048;
    uint64_t v55 = v6;
    __int16 v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (__nwlog_fault(v7, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v8 = (os_log_s *)(id)gLogObj;
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          uint64_t v10 = *((unsigned __int16 *)v3 + 120);
          *(_DWORD *)buf = 136446978;
          os_log_type_t v49 = "nw_listener_adjust_awdl_usage_on_queue";
          __int16 v50 = 2082;
          uint64_t v51 = "listener->awdl_use_count";
          __int16 v52 = 2048;
          uint64_t v53 = 1LL;
          __int16 v54 = 2048;
          uint64_t v55 = v10;
          _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s Overflow: %{public}s, increment %llu, result %llu",  buf,  0x2Au);
        }
      }

      else if (v46)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v8 = (os_log_s *)(id)gLogObj;
        os_log_type_t v33 = type;
        BOOL v34 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v34)
          {
            uint64_t v35 = *((unsigned __int16 *)v3 + 120);
            *(_DWORD *)buf = 136447234;
            os_log_type_t v49 = "nw_listener_adjust_awdl_usage_on_queue";
            __int16 v50 = 2082;
            uint64_t v51 = "listener->awdl_use_count";
            __int16 v52 = 2048;
            uint64_t v53 = 1LL;
            __int16 v54 = 2048;
            uint64_t v55 = v35;
            __int16 v56 = 2082;
            uint64_t v57 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v33,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(backtrace_string);
          if (!v7) {
            goto LABEL_10;
          }
          goto LABEL_9;
        }

        if (v34)
        {
          uint64_t v44 = *((unsigned __int16 *)v3 + 120);
          *(_DWORD *)buf = 136446978;
          os_log_type_t v49 = "nw_listener_adjust_awdl_usage_on_queue";
          __int16 v50 = 2082;
          uint64_t v51 = "listener->awdl_use_count";
          __int16 v52 = 2048;
          uint64_t v53 = 1LL;
          __int16 v54 = 2048;
          uint64_t v55 = v44;
          _os_log_impl( &dword_181A5C000,  v8,  v33,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace",  buf,  0x2Au);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v8 = (os_log_s *)(id)gLogObj;
        os_log_type_t v40 = type;
        if (os_log_type_enabled(v8, type))
        {
          uint64_t v41 = *((unsigned __int16 *)v3 + 120);
          *(_DWORD *)buf = 136446978;
          os_log_type_t v49 = "nw_listener_adjust_awdl_usage_on_queue";
          __int16 v50 = 2082;
          uint64_t v51 = "listener->awdl_use_count";
          __int16 v52 = 2048;
          uint64_t v53 = 1LL;
          __int16 v54 = 2048;
          uint64_t v55 = v41;
          _os_log_impl( &dword_181A5C000,  v8,  v40,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded",  buf,  0x2Au);
        }
      }
    }

    if (!v7)
    {
LABEL_10:
      *((_WORD *)v3 + 120) = -1;
      goto LABEL_11;
    }

void sub_181F07860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181F07A4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181F07B2C(_Unwind_Exception *exception_object)
{
}

void ___ZL37nw_listener_stop_advertising_on_queueP22NWConcrete_nw_listener_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 272);
  *(void *)(v1 + 272) = 0LL;
}

void ___ZL30nw_listener_set_state_on_queueP22NWConcrete_nw_listener19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke( uint64_t a1)
{
  *(_DWORD *)(*(void *)(a1 + 32) + 128LL) = *(_DWORD *)(a1 + 64);
  uint64_t v2 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 80LL));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), *(id *)(*(void *)(a1 + 32) + 64LL));
  id v5 = *(id *)(*(void *)(a1 + 32) + 16LL);
  BOOL v6 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v5,  0,  0);

  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_181F07BFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_listener_teardown_on_queue(NWConcrete_nw_listener *a1)
{
  uint64_t v1 = a1;
  nw_context_assert_queue(*((void **)v1 + 3));
  uint64_t v2 = v1;
  nw_context_assert_queue(*((void **)v1 + 3));
  uint64_t v3 = (void *)*((void *)v2 + 18);
  uint64_t v4 = MEMORY[0x1895F87A8];
  if (v3)
  {
    id v5 = v3;
    BOOL v6 = (void *)*((void *)v2 + 18);
    *((void *)v2 + 18) = 0LL;

    uint64_t v14 = v4;
    uint64_t v15 = 3221225472LL;
    id v16 = ___ZL39nw_listener_cancel_all_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke;
    uint64_t v17 = &unk_189BC85B0;
    char v18 = v2;
    nw_array_apply(v5, (uint64_t)&v14);
  }

  uint64_t v13 = v2;
  nw_context_assert_queue(*((void **)v1 + 3));
  uint64_t v7 = (void *)*((void *)v13 + 20);
  if (v7)
  {
    id v8 = v7;
    os_log_type_t v9 = (void *)*((void *)v13 + 20);
    *((void *)v13 + 20) = 0LL;

    uint64_t v14 = v4;
    uint64_t v15 = 3221225472LL;
    id v16 = ___ZL49nw_listener_cancel_all_proxy_connections_on_queueP22NWConcrete_nw_listener_block_invoke;
    uint64_t v17 = &unk_189BC85B0;
    char v18 = v13;
    nw_array_apply(v8, (uint64_t)&v14);
  }

  nw_listener_stop_advertising_on_queue(v13);
  uint64_t v10 = (void *)*((void *)v13 + 21);
  if (v10)
  {
    nw_path_evaluator_cancel(v10);
    uint64_t v11 = (void *)*((void *)v13 + 21);
    *((void *)v13 + 21) = 0LL;
  }

  uint64_t v12 = (void *)*((void *)v13 + 19);
  *((void *)v13 + 19) = 0LL;

  nw_listener_stop_advertise_timer_on_queue(v13);
}

void sub_181F07D84( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL30nw_listener_set_state_on_queueP22NWConcrete_nw_listener19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_2( uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL)
                                                           + 16LL))( *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL),  *(unsigned int *)(a1 + 56),  *(void *)(a1 + 32));
}

uint64_t ___ZL30nw_listener_set_state_on_queueP22NWConcrete_nw_listener19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_196( uint64_t a1)
{
  return nw_utilities_execute_block_as_persona_from_parameters( *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL),  *(void **)(a1 + 32));
}

uint64_t ___ZL39nw_listener_cancel_all_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  uint64_t v4 = a3;
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16LL);
  if (v5 && !nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
    }
    BOOL v6 = (os_log_s *)(id)glistenerLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      int v9 = 136446722;
      uint64_t v10 = "nw_listener_cancel_all_inboxes_on_queue_block_invoke";
      __int16 v11 = 2082;
      uint64_t v12 = id_string;
      __int16 v13 = 2114;
      uint64_t v14 = v4;
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}s [%{public}s] cancelling all inboxes: %{public}@",  (uint8_t *)&v9,  0x20u);
    }
  }

  nw_listener_cancel_inbox_on_queue(*(NWConcrete_nw_listener **)(a1 + 32), v4);

  return 1LL;
}

void sub_181F07F18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL49nw_listener_cancel_all_proxy_connections_on_queueP22NWConcrete_nw_listener_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  uint64_t v4 = a3;
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16LL);
  if (v5 && !nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
    }
    BOOL v6 = (os_log_s *)(id)glistenerLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      int v9 = 136446722;
      uint64_t v10 = "nw_listener_cancel_all_proxy_connections_on_queue_block_invoke";
      __int16 v11 = 2082;
      uint64_t v12 = id_string;
      __int16 v13 = 2114;
      uint64_t v14 = v4;
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}s [%{public}s] cancelling proxy connection: %{public}@",  (uint8_t *)&v9,  0x20u);
    }
  }

  nw_connection_cancel(v4);

  return 1LL;
}

void sub_181F08068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_listener_cancel_inbox_on_queue(NWConcrete_nw_listener *a1, nw_listener_inbox *a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  uint64_t v4 = a2;
  nw_context_assert_queue(*((void **)v3 + 3));
  if (-[nw_listener_inbox cancel](v4, "cancel"))
  {
    ++*((_DWORD *)v3 + 74);
    uint64_t v5 = *((void *)v3 + 2);
    if (v5)
    {
      if (!nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        BOOL v6 = (os_log_s *)(id)glistenerLogObj;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          uint64_t v7 = v3;
          id v8 = (char *)v7 + 42;

          int v9 = *((_DWORD *)v3 + 74);
          int v10 = 136446978;
          __int16 v11 = "nw_listener_cancel_inbox_on_queue";
          __int16 v12 = 2082;
          __int16 v13 = v8;
          __int16 v14 = 2114;
          uint64_t v15 = v4;
          __int16 v16 = 1024;
          int v17 = v9;
          _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_INFO,  "%{public}s [%{public}s] Adding deferral for %{public}@ -> %d",  (uint8_t *)&v10,  0x26u);
        }
      }
    }
  }
}

void sub_181F081E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL39nw_listener_set_local_endpoint_on_queueP22NWConcrete_nw_listenerPU25objcproto14OS_nw_endpoint8NSObject_block_invoke( uint64_t a1)
{
  *(_WORD *)(*(void *)(a1 + 32) + 300LL) = *(_WORD *)(a1 + 48);
}

BOOL ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_2_206( uint64_t a1, uint64_t a2, const unsigned __int8 *a3)
{
  BOOL result = nw_path_flow_registration_uses_nexus(*(void **)(a1 + 32), a3);
  if (result) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }
  return result;
}

uint64_t ___ZL45nw_listener_find_channel_inbox_match_on_queueP22NWConcrete_nw_listenerPU26objcproto15OS_nw_path_flow8NSObjectPU27objcproto16OS_nw_parametersS1__block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  id v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    id v5 = v4;
    BOOL v6 = *(void **)(a1 + 40);
    id v7 = *(id *)(a1 + 32);
    id v8 = v6;
    int v9 = v8;
    if (!v5) {
      goto LABEL_49;
    }
    if (v7)
    {
      if (v8)
      {
        if (nw_parameters_is_equal(v8, *((void **)v5 + 6)))
        {
          int v10 = (void *)*((void *)v5 + 9);
          __int16 v11 = v7;
          __int16 v12 = v10;
          BOOL v13 = v11 == v12;
          if (v11 != v12 && v12)
          {
            if (v11[18] != v12[18])
            {

              goto LABEL_50;
            }

            BOOL v13 = v11[19] == v12[19];
          }

          if (v13)
          {
            uint64_t v14 = 0LL;
            uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8LL);
            __int16 v16 = *(void **)(v15 + 40);
            *(void *)(v15 + 40) = v5;
            id v5 = v16;
LABEL_51:

            goto LABEL_52;
          }

void sub_181F08810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL45nw_listener_has_flow_for_nexus_agent_on_queueP22NWConcrete_nw_listenerPh_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (!nw_path_flow_registration_uses_nexus(v4, *(const unsigned __int8 **)(a1 + 48))
    || (id v5 = nw_path_copy_flow_for_registration(*(NWConcrete_nw_path **)(*(void *)(a1 + 32) + 176LL), v4)) != 0LL
    && (char v6 = v5[186], v5, (v6 & 4) != 0))
  {
    uint64_t v7 = 1LL;
  }

  else
  {
    uint64_t v7 = 0LL;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }

  return v7;
}

void sub_181F088B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_203(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
}

uint64_t ___ZL46nw_listener_copy_proxy_connection_for_endpointP22NWConcrete_nw_listenerPU25objcproto14OS_nw_endpoint8NSObject_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  nw_endpoint_t v6 = nw_connection_copy_endpoint(v5);
  int is_equal = nw_endpoint_is_equal(v6, *(void **)(a1 + 32), 0LL);
  if (is_equal) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
  }

  return is_equal ^ 1u;
}

void sub_181F0897C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_199( uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = nw_protocol_options_copy(a2);
  nw_protocol_stack_append_application_protocol(v2, v3);
}

void sub_181F089D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void ___ZL38nw_listener_reconcile_inboxes_on_queueP22NWConcrete_nw_listener_block_invoke_200( uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v61 = *MEMORY[0x1895F89C0];
  id v5 = a3;
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 16LL);
  uint64_t v7 = &nw_protocol_copy_http_transaction_definition_definition;
  id v8 = &nw_protocol_copy_http_transaction_definition_definition;
  if (v6 && !nw_path_parameters_get_logging_disabled(*(void *)(v6 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
    }
    int v9 = (os_log_s *)(id)glistenerLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      if (a2 > 5) {
        __int16 v11 = "unknown";
      }
      else {
        __int16 v11 = off_189BB9C00[a2];
      }
      *(_DWORD *)buf = 136446978;
      __int16 v54 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
      __int16 v55 = 2082;
      __int16 v56 = (char *)id_string;
      __int16 v57 = 2082;
      uint64_t v58 = (void *)v11;
      __int16 v59 = 2112;
      id v60 = v5;
      _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_INFO,  "%{public}s [%{public}s] Proxy connection moved to state %{public}s (%@)",  buf,  0x2Au);
    }
  }

  if (a2 == 3)
  {
    uint64_t listener_protocol_on_nw_queue = nw_connection_get_listener_protocol_on_nw_queue( *(void **)(a1 + 40),  *(void **)(a1 + 48),  1);
    if (listener_protocol_on_nw_queue)
    {
      BOOL v13 = -[nw_listener_inbox_protocol initWithProtocol:delegate:]( objc_alloc(&OBJC_CLASS___nw_listener_inbox_protocol),  listener_protocol_on_nw_queue,  *(void **)(a1 + 32));
      uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8LL);
      uint64_t v15 = *(void **)(v14 + 40);
      *(void *)(v14 + 40) = v13;

      uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 16LL);
      if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL))
      {
        if (v16 && !nw_path_parameters_get_logging_disabled(*(void *)(v16 + 104)))
        {
          if (__nwlog_listener_log::onceToken != -1) {
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
          }
          int v17 = (os_log_s *)(id)glistenerLogObj;
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            uint64_t v18 = nw_listener_get_id_string(*(void **)(a1 + 32));
            __int128 v19 = *(void **)(listener_protocol_on_nw_queue + 16);
            *(_DWORD *)buf = 136446722;
            __int16 v54 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
            __int16 v55 = 2082;
            __int16 v56 = (char *)v18;
            __int16 v57 = 2082;
            uint64_t v58 = v19;
            _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_INFO,  "%{public}s [%{public}s] Created inbox for proxy protocol %{public}s",  buf,  0x20u);
          }
        }

        nw_array_append( *(void *)(*(void *)(a1 + 32) + 144LL),  *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL));
        goto LABEL_77;
      }

      if (v16 && !nw_path_parameters_get_logging_disabled(*(void *)(v16 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        BOOL v34 = (os_log_s *)(id)glistenerLogObj;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          uint64_t v35 = nw_listener_get_id_string(*(void **)(a1 + 32));
          __int16 v36 = *(void **)(listener_protocol_on_nw_queue + 16);
          *(_DWORD *)buf = 136446722;
          __int16 v54 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
          __int16 v55 = 2082;
          __int16 v56 = (char *)v35;
          __int16 v57 = 2082;
          uint64_t v58 = v36;
          _os_log_impl( &dword_181A5C000,  v34,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}s] Failed to create inbox for %{public}s",  buf,  0x20u);
        }
      }

      id v32 = *(id *)(a1 + 32);
      os_log_type_t v37 = -[NWConcrete_nw_error initWithDomain:code:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_error), 1, 12);
      nw_listener_set_state_on_queue(v32, 3, v37);
    }

    else
    {
      uint64_t v29 = *(void *)(*(void *)(a1 + 32) + 16LL);
      if (v29 && !nw_path_parameters_get_logging_disabled(*(void *)(v29 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        os_log_type_t v30 = (os_log_s *)(id)glistenerLogObj;
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          uint64_t v31 = nw_listener_get_id_string(*(void **)(a1 + 32));
          *(_DWORD *)buf = 136446466;
          __int16 v54 = "nw_listener_reconcile_inboxes_on_queue_block_invoke";
          __int16 v55 = 2082;
          __int16 v56 = (char *)v31;
          _os_log_impl( &dword_181A5C000,  v30,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}s] Listener could not find protocol to join in connection",  buf,  0x16u);
        }
      }

      id v32 = *(id *)(a1 + 32);
      os_log_type_t v33 = -[NWConcrete_nw_error initWithDomain:code:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_error), 1, 22);
      nw_listener_set_state_on_queue(v32, 3, v33);
    }

void sub_181F093D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_listener_resume_inbox(NWConcrete_nw_listener *a1, nw_listener_inbox *a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  -[nw_listener_inbox resume](v4, "resume");
  uint64_t v5 = *((void *)v3 + 2);
  if (v5 && !nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
    }
    uint64_t v6 = (os_log_s *)(id)glistenerLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = v3;
      id v8 = (char *)v7 + 42;

      int v9 = 136446722;
      int v10 = "nw_listener_resume_inbox";
      __int16 v11 = 2082;
      __int16 v12 = v8;
      __int16 v13 = 2114;
      uint64_t v14 = v4;
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}s [%{public}s] Resumed for %{public}@",  (uint8_t *)&v9,  0x20u);
    }
  }
}

void sub_181F0955C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL66nw_listener_enumerate_multicast_parameters_for_descriptor_on_queueP22NWConcrete_nw_listenerPU33objcproto22OS_nw_group_descriptor8NSObjectU13block_pointerFbPU27objcproto16OS_nw_parametersS1_E_block_invoke( uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a2;
  id v4 = *(id *)(*(void *)(a1 + 32) + 208LL);
  BOOL v5 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v4,  0,  0);

  nw_parameters_set_local_endpoint((nw_parameters_t)v5, v3);
  uint64_t v6 = (nw_interface *)nw_endpoint_copy_interface(v3);
  nw_interface_t v7 = nw_parameters_copy_required_interface((nw_parameters_t)v5);
  nw_interface_t v8 = v7;
  if (!v6) {
    goto LABEL_5;
  }
  if (!v7 || nw_interface_shallow_compare(v6, v7))
  {
    nw_parameters_require_interface((nw_parameters_t)v5, v6);
LABEL_5:
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();

    BOOL v5 = 0LL;
    goto LABEL_6;
  }

  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 16LL);
  if (v11 && !nw_path_parameters_get_logging_disabled(*(void *)(v11 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
    }
    __int16 v12 = (os_log_s *)(id)glistenerLogObj;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      int v14 = 136446978;
      uint64_t v15 = "nw_listener_enumerate_multicast_parameters_for_descriptor_on_queue_block_invoke";
      __int16 v16 = 2082;
      int v17 = id_string;
      __int16 v18 = 2112;
      __int128 v19 = v3;
      __int16 v20 = 2112;
      nw_interface_t v21 = v8;
      _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_INFO,  "%{public}s [%{public}s] skipping multicast group %@, does not match interface %@ required by parameters",  (uint8_t *)&v14,  0x2Au);
    }
  }

  uint64_t v9 = 1LL;
LABEL_6:

  return v9;
}

void sub_181F09754(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL44nw_listener_find_socket_inbox_match_on_queueP22NWConcrete_nw_listenerPU27objcproto16OS_nw_parameters8NSObject_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v5 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    uint64_t v6 = (id *)v5;
    id v7 = v6[6];
    int is_equal = nw_parameters_is_equal(v7, *(void **)(a1 + 32));
    if ((is_equal & 1) != 0)
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), a3);
    }

    else
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 16LL);
      if (v10 && !nw_path_parameters_get_logging_disabled(*(void *)(v10 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        uint64_t v11 = (os_log_s *)(id)glistenerLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          id_string = nw_listener_get_id_string(*(void **)(a1 + 40));
          uint64_t v13 = *(void *)(a1 + 32);
          int v15 = 136447234;
          __int16 v16 = "nw_listener_find_socket_inbox_match_on_queue_block_invoke";
          __int16 v17 = 2082;
          __int16 v18 = id_string;
          __int16 v19 = 2114;
          __int16 v20 = v6;
          __int16 v21 = 2114;
          id v22 = v7;
          __int16 v23 = 2114;
          uint64_t v24 = v13;
          _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_INFO,  "%{public}s [%{public}s] Ignoring existing socket listener: %{public}@, inbox parameters: (%{public}@) do not match: (%{public}@)",  (uint8_t *)&v15,  0x34u);
        }
      }
    }

    uint64_t v9 = is_equal ^ 1u;
  }

  else
  {
    uint64_t v9 = 1LL;
  }

  return v9;
}

void sub_181F0993C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL36nw_listener_cancel_complete_on_queueP22NWConcrete_nw_listener_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 80);
  *(void *)(v2 + 80) = 0LL;

  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 88);
  *(void *)(v4 + 88) = 0LL;

  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(v6 + 96);
  *(void *)(v6 + 96) = 0LL;

  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(v8 + 112);
  *(void *)(v8 + 112) = 0LL;

  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void **)(v10 + 120);
  *(void *)(v10 + 120) = 0LL;

  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void **)(v12 + 176);
  *(void *)(v12 + 176) = 0LL;
}

void sub_181F09F3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181F0A02C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *nw_listener_state_to_string(unsigned int a1)
{
  if (a1 > 4) {
    return "<unknown>";
  }
  else {
    return off_189BB8B98[a1];
  }
}

void sub_181F0AB5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_listener_t nw_listener_create(nw_parameters_t parameters)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  uint64_t v1 = parameters;
  nw_allow_use_of_dispatch_internal();
  if (v1)
  {
    uint64_t v2 = objc_alloc(&OBJC_CLASS___NWConcrete_nw_listener);
    uint64_t v3 = v1;
    BOOL v4 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v3,  0,  0);

    id v5 = -[NWConcrete_nw_listener initWithParameters:multicastDescriptor:](v2, (void *)v4, 0LL);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_listener_create";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_listener_create";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_listener_create";
          __int16 v19 = 2082;
          __int16 v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_listener_create";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_listener_create";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F0AE7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_listener_t nw_listener_create_with_port(const char *port, nw_parameters_t parameters)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  uint64_t v3 = parameters;
  nw_allow_use_of_dispatch_internal();
  if (port)
  {
    if (v3)
    {
      id v4 = nw_listener_copy_parameters_with_port(v3, port, 1);
      if (v4) {
        id v5 = -[NWConcrete_nw_listener initWithParameters:multicastDescriptor:]( objc_alloc(&OBJC_CLASS___NWConcrete_nw_listener),  v4,  0LL);
      }
      else {
        id v5 = 0LL;
      }

      goto LABEL_7;
    }

    __nwlog_obj();
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v23 = "nw_listener_create_with_port";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v8, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v23 = "nw_listener_create_with_port";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters", buf, 0xCu);
        }

void sub_181F0B388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_listener_create_with_launchd_key(void *a1, const char *a2)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  nw_allow_use_of_dispatch_internal();
  if (!v3)
  {
    __nwlog_obj();
    id v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v25 = "nw_listener_create_with_launchd_key";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v8, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v25 = "nw_listener_create_with_launchd_key";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
        }

        goto LABEL_39;
      }

      if (!v22)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v25 = "nw_listener_create_with_launchd_key";
          _os_log_impl( &dword_181A5C000,  v9,  v20,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_39;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v25 = "nw_listener_create_with_launchd_key";
          _os_log_impl(&dword_181A5C000, v9, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }

        goto LABEL_39;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v25 = "nw_listener_create_with_launchd_key";
        __int16 v26 = 2082;
        uint64_t v27 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
      }

void sub_181F0B8F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *nw_listener_create_multicast(void *a1, void *a2, const char *a3)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a2;
  nw_allow_use_of_dispatch_internal();
  if (!v5)
  {
    __nwlog_obj();
    os_log_type_t v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v33 = "nw_listener_create_multicast";
    BOOL v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v33 = "nw_listener_create_multicast";
        _os_log_impl(&dword_181A5C000, v18, v19, "%{public}s called with null multicast_descriptor", buf, 0xCu);
      }
    }

    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type;
      BOOL v24 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v33 = "nw_listener_create_multicast";
          __int16 v34 = 2082;
          uint64_t v35 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v18,  v23,  "%{public}s called with null multicast_descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v17) {
          goto LABEL_50;
        }
        goto LABEL_49;
      }

      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v33 = "nw_listener_create_multicast";
        _os_log_impl( &dword_181A5C000,  v18,  v23,  "%{public}s called with null multicast_descriptor, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v33 = "nw_listener_create_multicast";
        _os_log_impl( &dword_181A5C000,  v18,  v28,  "%{public}s called with null multicast_descriptor, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_47;
  }

  if (!v6)
  {
    __nwlog_obj();
    os_log_type_t v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v33 = "nw_listener_create_multicast";
    BOOL v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v33 = "nw_listener_create_multicast";
        _os_log_impl(&dword_181A5C000, v18, v21, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v30)
    {
      uint64_t v25 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = type;
      BOOL v27 = os_log_type_enabled(v18, type);
      if (v25)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v33 = "nw_listener_create_multicast";
          __int16 v34 = 2082;
          uint64_t v35 = v25;
          _os_log_impl( &dword_181A5C000,  v18,  v26,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v25);
LABEL_48:
        if (!v17)
        {
LABEL_50:
          BOOL v13 = 0LL;
          goto LABEL_14;
        }

void sub_181F0BEA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_listener_t nw_listener_create_with_connection(nw_connection_t connection, nw_parameters_t parameters)
{
  uint64_t v49 = *MEMORY[0x1895F89C0];
  nw_listener_t v4 = connection;
  id v5 = parameters;
  nw_allow_use_of_dispatch_internal();
  if (!v4)
  {
    __nwlog_obj();
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v44 = "nw_listener_create_with_connection";
    os_log_type_t v26 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v44 = "nw_listener_create_with_connection";
        _os_log_impl(&dword_181A5C000, v27, v28, "%{public}s called with null connection", buf, 0xCu);
      }
    }

    else if (v41)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = type;
      BOOL v33 = os_log_type_enabled(v27, type);
      if (backtrace_string)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v44 = "nw_listener_create_with_connection";
          __int16 v45 = 2082;
          char v46 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v27,  v32,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v26) {
          goto LABEL_68;
        }
        goto LABEL_67;
      }

      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v44 = "nw_listener_create_with_connection";
        _os_log_impl(&dword_181A5C000, v27, v32, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v37 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v44 = "nw_listener_create_with_connection";
        _os_log_impl( &dword_181A5C000,  v27,  v37,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_65;
  }

  if (!v5)
  {
    __nwlog_obj();
    os_log_type_t v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v44 = "nw_listener_create_with_connection";
    os_log_type_t v26 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v44 = "nw_listener_create_with_connection";
        _os_log_impl(&dword_181A5C000, v27, v30, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v41)
    {
      __int16 v34 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v35 = type;
      BOOL v36 = os_log_type_enabled(v27, type);
      if (v34)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v44 = "nw_listener_create_with_connection";
          __int16 v45 = 2082;
          char v46 = v34;
          _os_log_impl( &dword_181A5C000,  v27,  v35,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v34);
LABEL_66:
        if (!v26)
        {
LABEL_68:
          uint64_t v9 = 0LL;
          goto LABEL_32;
        }

void sub_181F0C778( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_listener_create_with_connection_block_invoke(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  uint64_t v1 = (void **)*(id *)(a1 + 32);
  uint64_t v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v21 = "nw_connection_initialize_for_listener_protocol_on_nw_queue";
    id v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v11, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (os_log_s *)(id)gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_connection_initialize_for_listener_protocol_on_nw_queue";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null connection", buf, 0xCu);
        }
      }

      else if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (os_log_s *)(id)gLogObj;
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v21 = "nw_connection_initialize_for_listener_protocol_on_nw_queue";
            __int16 v22 = 2082;
            os_log_type_t v23 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_39;
        }

        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_connection_initialize_for_listener_protocol_on_nw_queue";
          _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (os_log_s *)(id)gLogObj;
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_connection_initialize_for_listener_protocol_on_nw_queue";
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181F0CC50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_listener_allow_new_connection_inline(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_listener_allow_new_connection_inline_block_invoke;
    aBlock[3] = &unk_189BC93A0;
    os_log_type_t v13 = v1;
    uint64_t v3 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 2);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 2);

    goto LABEL_3;
  }

  __nwlog_obj();
  nw_listener_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v17 = "nw_listener_allow_new_connection_inline";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_listener_allow_new_connection_inline";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null listener", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v17 = "nw_listener_allow_new_connection_inline";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null listener, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_listener_allow_new_connection_inline";
        _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_listener_allow_new_connection_inline";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null listener, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F0CF68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_listener_allow_new_connection_inline_block_invoke(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v1 + 128))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    BOOL v16 = "nw_listener_allow_new_connection_inline_block_invoke";
    nw_listener_t v4 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault(v4, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (os_log_s *)(id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_listener_allow_new_connection_inline_block_invoke";
        os_log_type_t v7 = "%{public}s Error in client: nw_listener_allow_new_connection_inline called after nw_listener_start";
LABEL_17:
        os_log_type_t v11 = v5;
        os_log_type_t v12 = v6;
        goto LABEL_18;
      }

      if (!v13)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (os_log_s *)(id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_listener_allow_new_connection_inline_block_invoke";
        os_log_type_t v7 = "%{public}s Error in client: nw_listener_allow_new_connection_inline called after nw_listener_start, backtra"
             "ce limit exceeded";
        goto LABEL_17;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v5 = (os_log_s *)(id)gLogObj;
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v10)
        {
LABEL_19:

          if (!v4) {
            goto LABEL_13;
          }
          goto LABEL_12;
        }

        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_listener_allow_new_connection_inline_block_invoke";
        os_log_type_t v7 = "%{public}s Error in client: nw_listener_allow_new_connection_inline called after nw_listener_start, no backtrace";
        os_log_type_t v11 = v5;
        os_log_type_t v12 = v9;
LABEL_18:
        _os_log_impl(&dword_181A5C000, v11, v12, v7, buf, 0xCu);
        goto LABEL_19;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v16 = "nw_listener_allow_new_connection_inline_block_invoke";
        __int16 v17 = 2082;
        __int16 v18 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v5,  v9,  "%{public}s Error in client: nw_listener_allow_new_connection_inline called after nw_listener_start, dumping ba cktrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
    }

    if (!v4)
    {
LABEL_13:
      uint64_t v1 = *(void *)(a1 + 32);
      goto LABEL_14;
    }

void nw_listener_set_queue(nw_listener_t listener, dispatch_queue_t queue)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v3 = listener;
  nw_listener_t v4 = queue;
  id v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v27 = "nw_listener_set_queue";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v25 = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (v25 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = v25;
      if (os_log_type_enabled(v9, v25))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v27 = "nw_listener_set_queue";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null listener", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = v25;
      BOOL v15 = os_log_type_enabled(v9, v25);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v27 = "nw_listener_set_queue";
          __int16 v28 = 2082;
          os_log_type_t v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null listener, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8) {
          goto LABEL_4;
        }
LABEL_39:
        free(v8);
        goto LABEL_4;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v27 = "nw_listener_set_queue";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = v25;
      if (os_log_type_enabled(v9, v25))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v27 = "nw_listener_set_queue";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null listener, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181F0D77C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_listener_set_queue_block_invoke(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 128))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    BOOL v16 = "nw_listener_set_queue_block_invoke";
    nw_listener_t v4 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault(v4, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (os_log_s *)(id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_listener_set_queue_block_invoke";
        os_log_type_t v7 = "%{public}s Error in client: nw_listener_set_queue called after nw_listener_start";
LABEL_17:
        os_log_type_t v11 = v5;
        os_log_type_t v12 = v6;
        goto LABEL_18;
      }

      if (!v13)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v5 = (os_log_s *)(id)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_listener_set_queue_block_invoke";
        os_log_type_t v7 = "%{public}s Error in client: nw_listener_set_queue called after nw_listener_start, backtrace limit exceeded";
        goto LABEL_17;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v5 = (os_log_s *)(id)gLogObj;
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v10)
        {
LABEL_19:

          if (!v4) {
            goto LABEL_13;
          }
          goto LABEL_12;
        }

        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_listener_set_queue_block_invoke";
        os_log_type_t v7 = "%{public}s Error in client: nw_listener_set_queue called after nw_listener_start, no backtrace";
        os_log_type_t v11 = v5;
        os_log_type_t v12 = v9;
LABEL_18:
        _os_log_impl(&dword_181A5C000, v11, v12, v7, buf, 0xCu);
        goto LABEL_19;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v16 = "nw_listener_set_queue_block_invoke";
        __int16 v17 = 2082;
        BOOL v18 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v5,  v9,  "%{public}s Error in client: nw_listener_set_queue called after nw_listener_start, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
    }

    if (!v4)
    {
LABEL_13:
      uint64_t v2 = *(void *)(a1 + 32);
      goto LABEL_14;
    }

void nw_listener_register_client_demux_options_if_needed(void *a1, void *a2, void *a3)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  BOOL v8 = v7;
  if (!v5)
  {
    __nwlog_obj();
    BOOL v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v36 = "nw_listener_register_client_demux_options_if_needed";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v36 = "nw_listener_register_client_demux_options_if_needed";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null listener", buf, 0xCu);
      }
    }

    else if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v36 = "nw_listener_register_client_demux_options_if_needed";
          __int16 v37 = 2082;
          os_log_type_t v38 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null listener, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v11) {
          goto LABEL_5;
        }
LABEL_56:
        free(v11);
        goto LABEL_5;
      }

      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v36 = "nw_listener_register_client_demux_options_if_needed";
        _os_log_impl(&dword_181A5C000, v12, v19, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v36 = "nw_listener_register_client_demux_options_if_needed";
        _os_log_impl( &dword_181A5C000,  v12,  v26,  "%{public}s called with null listener, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181F0E1B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_listener_register_client_demux_options_if_needed_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  if (*(_DWORD *)(*(void *)(a1 + 32) + 128LL) == 2)
  {
    *(void *)uu = 0LL;
    *(void *)&uu[8] = 0LL;
    id v2 = nw_connection_copy_connected_path(*(void **)(a1 + 40));
    nw_path_get_client_id(v2, uu);
    if (!uuid_is_null(uu))
    {
      id v3 = *(unsigned __int8 **)(*(void *)(a1 + 32) + 160LL);
      v5[0] = MEMORY[0x1895F87A8];
      v5[1] = 3221225472LL;
      v5[2] = __nw_listener_register_client_demux_options_if_needed_block_invoke_50;
      v5[3] = &unk_189BBFE18;
      id v6 = *(id *)(a1 + 48);
      id v7 = uu;
      nw_array_apply(v3, (uint64_t)v5);
    }
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    nw_listener_t v4 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uu = 136446210;
      *(void *)&uu[4] = "nw_listener_register_client_demux_options_if_needed_block_invoke";
      _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_ERROR,  "%{public}s ignoring client demux options registration",  uu,  0xCu);
    }
  }

void sub_181F0E348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_listener_register_client_demux_options_if_needed_block_invoke_50( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  nw_listener_t v4 = a3;
  if (nw_protocol_masque_listener_get_definition(void)::definition
    && (id v5 = os_retain((void *)nw_protocol_masque_listener_get_definition(void)::definition)) != 0LL)
  {
    id v6 = (nw_protocol_definition *)os_retain(v5);
  }

  else
  {
    id v6 = 0LL;
  }

  nw_protocol_metadata_t v7 = nw_connection_copy_protocol_metadata(v4, v6);

  if (v7)
  {
    nw_masque_listener_add_client_demux_pattern(v7, *(void *)(a1 + 32), *(const unsigned __int8 **)(a1 + 40));
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v8 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      int v10 = 136446210;
      os_log_type_t v11 = "nw_listener_register_client_demux_options_if_needed_block_invoke";
      _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_INFO,  "%{public}s no metadata for masque listener",  (uint8_t *)&v10,  0xCu);
    }
  }

  return 1LL;
}

void sub_181F0E4BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_listener_set_advertise_descriptor( nw_listener_t listener, nw_advertise_descriptor_t advertise_descriptor)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  nw_listener_t v3 = listener;
  nw_listener_t v4 = advertise_descriptor;
  if (v3)
  {
    id v5 = (void *)*((void *)v3 + 3);
    v14[0] = MEMORY[0x1895F87A8];
    v14[1] = 3221225472LL;
    v14[2] = __nw_listener_set_advertise_descriptor_block_invoke;
    v14[3] = &unk_189BC9238;
    os_log_type_t v15 = v3;
    BOOL v16 = v4;
    nw_queue_context_async(v5, v14);

    goto LABEL_3;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v20 = "nw_listener_set_advertise_descriptor";
  nw_protocol_metadata_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_listener_set_advertise_descriptor";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null listener", buf, 0xCu);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = v18;
      BOOL v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v20 = "nw_listener_set_advertise_descriptor";
          __int16 v21 = 2082;
          os_log_type_t v22 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null listener, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_listener_set_advertise_descriptor";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_listener_set_advertise_descriptor";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null listener, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F0E7D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_listener_set_advertise_descriptor_block_invoke(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v2 = *(id *)(*(void *)(a1 + 32) + 264LL);
  nw_listener_t v3 = *(os_unfair_lock_s **)(a1 + 32);
  if (v2 || !*(void *)&v3[68]._os_unfair_lock_opaque)
  {
LABEL_5:
    uint64_t aBlock = MEMORY[0x1895F87A8];
    uint64_t v24 = 3221225472LL;
    BOOL v25 = __nw_listener_set_advertise_descriptor_block_invoke_52;
    os_log_type_t v26 = &unk_189BC9238;
    os_log_type_t v27 = v3;
    id v28 = *(id *)(a1 + 40);
    id v6 = (void (**)(void))_Block_copy(&aBlock);
    nw_protocol_metadata_t v7 = v3 + 2;
    os_unfair_lock_lock(v7);
    v6[2](v6);
    os_unfair_lock_unlock(v7);

    uint64_t v8 = *(void *)(a1 + 32);
    if (*(_DWORD *)(v8 + 128) == 2 && (*(_BYTE *)(v8 + 302) & 1) == 0)
    {
      if (nw_advertise_descriptor_is_equal(v2, *(void **)(a1 + 40), 1))
      {
        if (!nw_advertise_descriptor_is_equal(v2, *(void **)(a1 + 40), 0))
        {
          os_log_type_t v9 = *(void **)(*(void *)(a1 + 32) + 272LL);
          if (v9)
          {
            if ([v9 count] == 1)
            {
              [*(id *)(*(void *)(a1 + 32) + 272) objectAtIndexedSubscript:0];
              int v10 = (void *)objc_claimAutoreleasedReturnValue();
              BOOL v11 = v10[8] == 0LL;

              if (!v11)
              {
                BOOL v12 = *(nw_advertise_descriptor **)(a1 + 40);
                if (v12)
                {
                  nw_txt_record_t v13 = nw_advertise_descriptor_copy_txt_record_object(v12);
                  nw_txt_record_t v14 = v13;
                  if (v13)
                  {
                    uint16_t v15 = *((_WORD *)v13 + 8);
                    BOOL v16 = (const void *)*((void *)v13 + 1);
LABEL_20:
                    objc_msgSend( *(id *)(*(void *)(a1 + 32) + 272),  "objectAtIndexedSubscript:",  0,  v21,  v22,  aBlock,  v24,  v25,  v26,  v27);
                    char v17 = (DNSServiceRef *)objc_claimAutoreleasedReturnValue();
                    DNSServiceErrorType updated = DNSServiceUpdateRecord(v17[8], 0LL, 0, v15, v16, 0);

                    if (updated)
                    {
                      os_log_type_t v19 = *(void **)(a1 + 32);
                      dns_error = nw_error_create_dns_error(updated);
                      nw_listener_set_state_on_queue(v19, 3, dns_error);
                    }

                    goto LABEL_16;
                  }

                  uint16_t v15 = 0;
                }

                else
                {
                  uint16_t v15 = 0;
                  nw_txt_record_t v14 = 0LL;
                }

                BOOL v16 = 0LL;
                goto LABEL_20;
              }
            }
          }
        }
      }

      else
      {
        nw_listener_stop_advertising_on_queue(*(NWConcrete_nw_listener **)(a1 + 32));
        nw_listener_start_advertising_on_queue(*(NWConcrete_nw_listener **)(a1 + 32));
      }
    }

void sub_181F0EAE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void __nw_listener_set_advertise_descriptor_block_invoke_52(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  id v2 = *(void **)(a1 + 40);
  if (!v2)
  {
    os_log_type_t v9 = 0LL;
    goto LABEL_51;
  }

  nw_listener_t v3 = v2;
  nw_listener_t v4 = v3;
  int v5 = *((_DWORD *)v3 + 2);
  if (v5 == 2)
  {
    uint64_t bonjour_service = nw_advertise_descriptor_create_application_service_with_bundle_id(v3[6], v3[7]);
    if (bonjour_service)
    {
      *(_DWORD *)(bonjour_service + 64) = nw_advertise_descriptor_get_invitation_scope(v4);
      *(_DWORD *)(bonjour_service + 68) = nw_advertise_descriptor_get_invitation_route(v4);
      goto LABEL_29;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v17 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      char v33 = "nw_advertise_descriptor_copy";
      _os_log_impl(&dword_181A5C000, v17, OS_LOG_TYPE_ERROR, "%{public}s Failed to allocate copy", buf, 0xCu);
    }

    goto LABEL_23;
  }

  if (v5 != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    char v33 = "nw_advertise_descriptor_copy";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (__nwlog_fault(v11, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v12 = (os_log_s *)(id)gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          char v33 = "nw_advertise_descriptor_copy";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s invalid advertise descriptor type", buf, 0xCu);
        }
      }

      else if (v30)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v12 = (os_log_s *)(id)gLogObj;
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            char v33 = "nw_advertise_descriptor_copy";
            __int16 v34 = 2082;
            os_log_type_t v35 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          if (!v11) {
            goto LABEL_49;
          }
          goto LABEL_48;
        }

        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          char v33 = "nw_advertise_descriptor_copy";
          _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s invalid advertise descriptor type, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v12 = (os_log_s *)(id)gLogObj;
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          char v33 = "nw_advertise_descriptor_copy";
          _os_log_impl( &dword_181A5C000,  v12,  v26,  "%{public}s invalid advertise descriptor type, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v11) {
      goto LABEL_49;
    }
LABEL_48:
    free(v11);
    goto LABEL_49;
  }

  uint64_t bonjour_service = (uint64_t)nw_advertise_descriptor_create_bonjour_service(v3[2], v3[3], v3[4]);
  if (!bonjour_service)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v17 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      char v33 = "nw_advertise_descriptor_copy";
      _os_log_impl(&dword_181A5C000, v17, OS_LOG_TYPE_ERROR, "%{public}s Failed to allocate copy", buf, 0xCu);
    }

void sub_181F0F294( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{
  _Unwind_Resume(a1);
}

void nw_listener_set_advertised_endpoint_changed_handler( nw_listener_t listener, nw_listener_advertised_endpoint_changed_handler_t handler)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  nw_listener_t v3 = listener;
  nw_listener_advertised_endpoint_changed_handler_t v4 = handler;
  if (v3)
  {
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_listener_set_advertised_endpoint_changed_handler_block_invoke;
    aBlock[3] = &unk_189BC91E8;
    os_log_type_t v15 = v3;
    id v16 = v4;
    int v5 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v3 + 2);
    v5[2](v5);
    os_unfair_lock_unlock(v3 + 2);

    goto LABEL_3;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v20 = "nw_listener_set_advertised_endpoint_changed_handler";
  nw_protocol_metadata_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      nw_txt_record_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_listener_set_advertised_endpoint_changed_handler";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null listener", buf, 0xCu);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      nw_txt_record_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = v18;
      BOOL v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v20 = "nw_listener_set_advertised_endpoint_changed_handler";
          __int16 v21 = 2082;
          os_log_type_t v22 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null listener, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_listener_set_advertised_endpoint_changed_handler";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      nw_txt_record_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_listener_set_advertised_endpoint_changed_handler";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null listener, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F0F5C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_listener_set_advertised_endpoint_changed_handler_block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 128) == 4)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
      }
      nw_listener_advertised_endpoint_changed_handler_t v4 = (os_log_s *)(id)glistenerLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
        int v9 = 136446466;
        id v10 = "nw_listener_set_advertised_endpoint_changed_handler_block_invoke";
        __int16 v11 = 2082;
        BOOL v12 = id_string;
        _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}s] Cannot set advertise handler after cancel",  (uint8_t *)&v9,  0x16u);
      }
    }
  }

  else
  {
    id v6 = _Block_copy(*(const void **)(a1 + 40));
    uint64_t v7 = *(void *)(a1 + 32);
    nw_txt_record_t v8 = *(void **)(v7 + 120);
    *(void *)(v7 + 120) = v6;
  }

id nw_listener_copy_local_endpoint(void *a1)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    BOOL v20 = __Block_byref_object_copy__17859;
    __int16 v21 = __Block_byref_object_dispose__17860;
    id v22 = 0LL;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_listener_copy_local_endpoint_block_invoke;
    aBlock[3] = &unk_189BC9210;
    id v16 = buf;
    os_log_type_t v15 = v1;
    uint64_t v3 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 2);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 2);

    id v4 = *(id *)(*(void *)&buf[8] + 40LL);
    _Block_object_dispose(buf, 8);

    goto LABEL_3;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_listener_copy_local_endpoint";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      nw_txt_record_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_copy_local_endpoint";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null listener", buf, 0xCu);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      nw_txt_record_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_listener_copy_local_endpoint";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null listener, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_copy_local_endpoint";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      nw_txt_record_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_copy_local_endpoint";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null listener, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F0FA94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, id a26)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void __nw_listener_copy_local_endpoint_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v3 = (id *)(v2 + 40);
  if (!v4) {
    objc_storeStrong(v3, *(id *)(*(void *)(a1 + 32) + 288LL));
  }
}

void nw_listener_set_state_changed_handler(nw_listener_t listener, nw_listener_state_changed_handler_t handler)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  uint64_t v3 = listener;
  nw_listener_state_changed_handler_t v4 = handler;
  if (v3)
  {
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_listener_set_state_changed_handler_block_invoke;
    aBlock[3] = &unk_189BC91E8;
    os_log_type_t v15 = v3;
    id v16 = v4;
    int v5 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v3 + 2);
    v5[2](v5);
    os_unfair_lock_unlock(v3 + 2);

    goto LABEL_3;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v20 = "nw_listener_set_state_changed_handler";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      nw_txt_record_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_listener_set_state_changed_handler";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null listener", buf, 0xCu);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      nw_txt_record_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = v18;
      BOOL v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v20 = "nw_listener_set_state_changed_handler";
          __int16 v21 = 2082;
          id v22 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null listener, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_listener_set_state_changed_handler";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      nw_txt_record_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_listener_set_state_changed_handler";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null listener, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F0FE38( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_listener_set_state_changed_handler_block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 128) == 4)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
      }
      nw_listener_state_changed_handler_t v4 = (os_log_s *)(id)glistenerLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
        int v9 = 136446466;
        id v10 = "nw_listener_set_state_changed_handler_block_invoke";
        __int16 v11 = 2082;
        BOOL v12 = id_string;
        _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}s] Cannot set state changed handler after cancel",  (uint8_t *)&v9,  0x16u);
      }
    }
  }

  else
  {
    id v6 = _Block_copy(*(const void **)(a1 + 40));
    uint64_t v7 = *(void *)(a1 + 32);
    nw_txt_record_t v8 = *(void **)(v7 + 80);
    *(void *)(v7 + 80) = v6;
  }

void nw_listener_set_new_connection_handler( nw_listener_t listener, nw_listener_new_connection_handler_t handler)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  uint64_t v3 = listener;
  nw_listener_new_connection_handler_t v4 = handler;
  if (v3)
  {
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_listener_set_new_connection_handler_block_invoke;
    aBlock[3] = &unk_189BC91E8;
    os_log_type_t v15 = v3;
    id v16 = v4;
    int v5 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v3 + 2);
    v5[2](v5);
    os_unfair_lock_unlock(v3 + 2);

    goto LABEL_3;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v20 = "nw_listener_set_new_connection_handler";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      nw_txt_record_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_listener_set_new_connection_handler";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null listener", buf, 0xCu);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      nw_txt_record_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = v18;
      BOOL v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v20 = "nw_listener_set_new_connection_handler";
          __int16 v21 = 2082;
          id v22 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null listener, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_listener_set_new_connection_handler";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      nw_txt_record_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_listener_set_new_connection_handler";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null listener, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F102D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_listener_set_new_connection_handler_block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 128) == 4)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
      }
      nw_listener_new_connection_handler_t v4 = (os_log_s *)(id)glistenerLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
        int v9 = 136446466;
        id v10 = "nw_listener_set_new_connection_handler_block_invoke";
        __int16 v11 = 2082;
        BOOL v12 = id_string;
        _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}s] Cannot set new connection handler after cancel",  (uint8_t *)&v9,  0x16u);
      }
    }
  }

  else
  {
    id v6 = _Block_copy(*(const void **)(a1 + 40));
    uint64_t v7 = *(void *)(a1 + 32);
    nw_txt_record_t v8 = *(void **)(v7 + 88);
    *(void *)(v7 + 88) = v6;
  }

void nw_listener_set_new_connection_group_handler( nw_listener_t listener, nw_listener_new_connection_group_handler_t handler)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  nw_listener_t v3 = listener;
  nw_listener_new_connection_group_handler_t v4 = handler;
  if (nw_parameters_has_multiplexed_protocol_in_stack(*((void **)v3 + 2)))
  {
    v10[0] = MEMORY[0x1895F87A8];
    v10[1] = 3221225472LL;
    v10[2] = __nw_listener_set_new_connection_group_handler_block_invoke;
    v10[3] = &unk_189BC91E8;
    __int16 v11 = v3;
    id v12 = v4;
    int v5 = (void (**)(void))_Block_copy(v10);
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 2);
    v5[2](v5);
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 2);

    id v6 = v11;
LABEL_9:

    goto LABEL_10;
  }

  uint64_t v7 = *((void *)v3 + 2);
  if (v7 && !nw_path_parameters_get_logging_disabled(*(void *)(v7 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
    }
    id v6 = (nw_listener *)(id)glistenerLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      nw_txt_record_t v8 = v3;
      int v9 = v8 + 42;

      *(_DWORD *)buf = 136446466;
      nw_txt_record_t v14 = "nw_listener_set_new_connection_group_handler";
      __int16 v15 = 2082;
      id v16 = v9;
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}s] Cannot set a connection group handler without a multiplex protocol",  buf,  0x16u);
    }

    goto LABEL_9;
  }

void sub_181F105F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  uint64_t v17 = v16;

  _Unwind_Resume(a1);
}

void __nw_listener_set_new_connection_group_handler_block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 128) == 4)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
      }
      nw_listener_new_connection_group_handler_t v4 = (os_log_s *)(id)glistenerLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
        int v9 = 136446466;
        id v10 = "nw_listener_set_new_connection_group_handler_block_invoke";
        __int16 v11 = 2082;
        id v12 = id_string;
        _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}s] Cannot set new connection group handler after cancel",  (uint8_t *)&v9,  0x16u);
      }
    }
  }

  else
  {
    id v6 = _Block_copy(*(const void **)(a1 + 40));
    uint64_t v7 = *(void *)(a1 + 32);
    nw_txt_record_t v8 = *(void **)(v7 + 96);
    *(void *)(v7 + 96) = v6;
  }

void nw_listener_set_new_packet_handler(void *a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  if (v3)
  {
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_listener_set_new_packet_handler_block_invoke;
    aBlock[3] = &unk_189BC91E8;
    __int16 v15 = v3;
    id v16 = v4;
    int v5 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v3 + 2);
    v5[2](v5);
    os_unfair_lock_unlock(v3 + 2);

    goto LABEL_3;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v20 = "nw_listener_set_new_packet_handler";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      nw_txt_record_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_listener_set_new_packet_handler";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null listener", buf, 0xCu);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      nw_txt_record_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = v18;
      BOOL v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v20 = "nw_listener_set_new_packet_handler";
          __int16 v21 = 2082;
          id v22 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null listener, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_listener_set_new_packet_handler";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      nw_txt_record_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_listener_set_new_packet_handler";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null listener, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F10A94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_listener_set_new_packet_handler_block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 128) == 4)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
      }
      id v4 = (os_log_s *)(id)glistenerLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
        int v9 = 136446466;
        id v10 = "nw_listener_set_new_packet_handler_block_invoke";
        __int16 v11 = 2082;
        BOOL v12 = id_string;
        _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}s] Cannot set new packet handler after cancel",  (uint8_t *)&v9,  0x16u);
      }
    }
  }

  else
  {
    id v6 = _Block_copy(*(const void **)(a1 + 40));
    uint64_t v7 = *(void *)(a1 + 32);
    nw_txt_record_t v8 = *(void **)(v7 + 112);
    *(void *)(v7 + 112) = v6;
  }

uint32_t nw_listener_get_new_connection_limit(nw_listener_t listener)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  uint64_t v1 = listener;
  uint64_t v2 = (os_unfair_lock_s *)v1;
  if (v1)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    int v20 = 0;
    *(void *)&buf[16] = 0x2020000000LL;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_listener_get_new_connection_limit_block_invoke;
    aBlock[3] = &unk_189BC9210;
    id v16 = buf;
    __int16 v15 = v1;
    uint64_t v3 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 2);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 2);

    uint32_t v4 = *(_DWORD *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_listener_get_new_connection_limit";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      nw_txt_record_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_get_new_connection_limit";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null listener", buf, 0xCu);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      nw_txt_record_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_listener_get_new_connection_limit";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null listener, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_get_new_connection_limit";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      nw_txt_record_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_get_new_connection_limit";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null listener, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F10F3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_listener_get_new_connection_limit_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_DWORD *)(*(void *)(result + 32) + 104LL);
  return result;
}

void nw_listener_set_new_connection_limit(nw_listener_t listener, uint32_t new_connection_limit)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  uint64_t v3 = listener;
  uint32_t v4 = (os_unfair_lock_s *)v3;
  if (v3)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    uint64_t v5 = MEMORY[0x1895F87A8];
    char v26 = 0;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_listener_set_new_connection_limit_block_invoke;
    aBlock[3] = &unk_189BC7870;
    uint64_t v21 = buf;
    id v6 = v3;
    int v20 = v6;
    uint32_t v22 = new_connection_limit;
    uint64_t v7 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v4 + 2);
    v7[2](v7);
    os_unfair_lock_unlock(v4 + 2);

    if (*(_BYTE *)(*(void *)&buf[8] + 24LL))
    {
      nw_txt_record_t v8 = (void *)*((void *)v6 + 3);
      v17[0] = v5;
      v17[1] = 3221225472LL;
      v17[2] = __nw_listener_set_new_connection_limit_block_invoke_2;
      v17[3] = &unk_189BC93A0;
      os_log_type_t v18 = v6;
      nw_queue_context_async(v8, v17);
    }

    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }

  __nwlog_obj();
  os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_listener_set_new_connection_limit";
  id v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v24 = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (__nwlog_fault(v10, &v24, &v23))
  {
    if (v24 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = v24;
      if (os_log_type_enabled(v11, v24))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_set_new_connection_limit";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null listener", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = v24;
      BOOL v15 = os_log_type_enabled(v11, v24);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_listener_set_new_connection_limit";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s called with null listener, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_set_new_connection_limit";
        _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = v24;
      if (os_log_type_enabled(v11, v24))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_set_new_connection_limit";
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null listener, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F112F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22)
{
  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_listener_set_new_connection_limit_block_invoke(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 48);
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_DWORD *)(*(void *)(result + 32) + 104LL) != v1;
  if (*(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL)) {
    *(_DWORD *)(*(void *)(result + 32) + 104LL) = v1;
  }
  return result;
}

void __nw_listener_set_new_connection_limit_block_invoke_2(uint64_t a1)
{
}

void nw_listener_resume_all_inboxes_if_suspended_on_queue(NWConcrete_nw_listener *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    nw_context_assert_queue(*((void **)v1 + 3));
    uint64_t v3 = (unsigned __int8 *)*((void *)v2 + 18);
    if (v3)
    {
      v12[0] = MEMORY[0x1895F87A8];
      v12[1] = 3221225472LL;
      v12[2] = ___ZL52nw_listener_resume_all_inboxes_if_suspended_on_queueP22NWConcrete_nw_listener_block_invoke;
      v12[3] = &unk_189BC85B0;
      os_log_type_t v13 = v2;
      nw_array_apply(v3, (uint64_t)v12);
    }

    goto LABEL_4;
  }

  __nwlog_obj();
  uint32_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v17 = "nw_listener_resume_all_inboxes_if_suspended_on_queue";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_listener_resume_all_inboxes_if_suspended_on_queue";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null listener", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          char v17 = "nw_listener_resume_all_inboxes_if_suspended_on_queue";
          __int16 v18 = 2082;
          id v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null listener, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_listener_resume_all_inboxes_if_suspended_on_queue";
        _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_listener_resume_all_inboxes_if_suspended_on_queue";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null listener, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F1164C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL52nw_listener_resume_all_inboxes_if_suspended_on_queueP22NWConcrete_nw_listener_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  uint32_t v4 = a3;
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16LL);
  if (v5 && !nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
    }
    id v6 = (os_log_s *)(id)glistenerLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      int v9 = 136446722;
      BOOL v10 = "nw_listener_resume_all_inboxes_if_suspended_on_queue_block_invoke";
      __int16 v11 = 2082;
      os_log_type_t v12 = id_string;
      __int16 v13 = 2114;
      char v14 = v4;
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_INFO,  "%{public}s [%{public}s] Resuming inbox %{public}@",  (uint8_t *)&v9,  0x20u);
    }
  }

  nw_listener_resume_inbox(*(NWConcrete_nw_listener **)(a1 + 32), v4);

  return 1LL;
}

void sub_181F11798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_listener_start(nw_listener_t listener)
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  int v1 = listener;
  uint64_t v2 = (os_unfair_lock_s *)v1;
  if (v1)
  {
    *(void *)os_log_type_t v42 = 0LL;
    *(void *)&v42[8] = v42;
    *(void *)&v42[16] = 0x2020000000LL;
    uint64_t v3 = MEMORY[0x1895F87A8];
    char v43 = 0;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_listener_start_block_invoke;
    aBlock[3] = &unk_189BC9210;
    __int16 v34 = v42;
    uint32_t v4 = v1;
    char v33 = v4;
    uint64_t v5 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 2);
    v5[2](v5);
    os_unfair_lock_unlock(v2 + 2);

    if (*(_BYTE *)(*(void *)&v42[8] + 24LL))
    {
      qos_class_t v6 = qos_class_self();
      id v7 = nw_parameters_copy_context(v4[2]);
      v28[0] = v3;
      v28[1] = 3221225472LL;
      void v28[2] = __nw_listener_start_block_invoke_53;
      v28[3] = &unk_189BC76E8;
      int v29 = v4;
      qos_class_t v30 = v6;
      nw_queue_context_async_if_needed(v7, v28);

LABEL_17:
      _Block_object_dispose(v42, 8);
      goto LABEL_18;
    }

    nw_txt_record_t v8 = v4[2];
    if (!v8 || nw_path_parameters_get_logging_disabled(v8[13])) {
      goto LABEL_17;
    }
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
    }
    id v9 = (id)glistenerLogObj;
    BOOL v10 = (char *)v4 + 42;
    *(_DWORD *)buf = 136446466;
    __int16 v37 = "nw_listener_start";
    __int16 v38 = 2082;
    uint64_t v39 = (char *)v4 + 42;
    __int16 v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (__nwlog_fault(v11, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        os_log_type_t v12 = (os_log_s *)(id)glistenerLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446466;
          __int16 v37 = "nw_listener_start";
          __int16 v38 = 2082;
          uint64_t v39 = v10;
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s [%{public}s] In wrong state for start", buf, 0x16u);
        }
      }

      else if (v31)
      {
        backtrace_string = __nw_create_backtrace_string();
        if (backtrace_string)
        {
          uint64_t v15 = (char *)backtrace_string;
          if (__nwlog_listener_log::onceToken != -1) {
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
          }
          os_log_type_t v16 = (os_log_s *)(id)glistenerLogObj;
          os_log_type_t v17 = type;
          if (os_log_type_enabled(v16, type))
          {
            *(_DWORD *)buf = 136446722;
            __int16 v37 = "nw_listener_start";
            __int16 v38 = 2082;
            uint64_t v39 = v10;
            __int16 v40 = 2082;
            char v41 = v15;
            _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s [%{public}s] In wrong state for start, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v15);
          if (!v11) {
            goto LABEL_17;
          }
          goto LABEL_16;
        }

        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        os_log_type_t v12 = (os_log_s *)(id)glistenerLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446466;
          __int16 v37 = "nw_listener_start";
          __int16 v38 = 2082;
          uint64_t v39 = v10;
          _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s [%{public}s] In wrong state for start, no backtrace",  buf,  0x16u);
        }
      }

      else
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        os_log_type_t v12 = (os_log_s *)(id)glistenerLogObj;
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446466;
          __int16 v37 = "nw_listener_start";
          __int16 v38 = 2082;
          uint64_t v39 = v10;
          _os_log_impl( &dword_181A5C000,  v12,  v18,  "%{public}s [%{public}s] In wrong state for start, backtrace limit exceeded",  buf,  0x16u);
        }
      }
    }

    if (!v11) {
      goto LABEL_17;
    }
LABEL_16:
    free(v11);
    goto LABEL_17;
  }

  __nwlog_obj();
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)os_log_type_t v42 = 136446210;
  *(void *)&v42[4] = "nw_listener_start";
  uint64_t v21 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v21, buf, &type))
  {
    if (buf[0] == 17)
    {
      __nwlog_obj();
      uint32_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = buf[0];
      if (os_log_type_enabled(v22, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v42 = 136446210;
        *(void *)&v42[4] = "nw_listener_start";
        _os_log_impl(&dword_181A5C000, v22, v23, "%{public}s called with null listener", v42, 0xCu);
      }
    }

    else if (type)
    {
      os_log_type_t v24 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint32_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = buf[0];
      BOOL v26 = os_log_type_enabled(v22, (os_log_type_t)buf[0]);
      if (v24)
      {
        if (v26)
        {
          *(_DWORD *)os_log_type_t v42 = 136446466;
          *(void *)&v42[4] = "nw_listener_start";
          *(_WORD *)&v42[12] = 2082;
          *(void *)&v42[14] = v24;
          _os_log_impl( &dword_181A5C000,  v22,  v25,  "%{public}s called with null listener, dumping backtrace:%{public}s",  v42,  0x16u);
        }

        free(v24);
        goto LABEL_53;
      }

      if (v26)
      {
        *(_DWORD *)os_log_type_t v42 = 136446210;
        *(void *)&v42[4] = "nw_listener_start";
        _os_log_impl(&dword_181A5C000, v22, v25, "%{public}s called with null listener, no backtrace", v42, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint32_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = buf[0];
      if (os_log_type_enabled(v22, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)os_log_type_t v42 = 136446210;
        *(void *)&v42[4] = "nw_listener_start";
        _os_log_impl( &dword_181A5C000,  v22,  v27,  "%{public}s called with null listener, backtrace limit exceeded",  v42,  0xCu);
      }
    }
  }

void sub_181F11E60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24)
{
  _Block_object_dispose((const void *)(v26 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_listener_start_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_DWORD *)(*(void *)(result + 32) + 128LL) == 0;
  return result;
}

void __nw_listener_start_block_invoke_53(uint64_t a1)
{
  uint64_t v143 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 128))
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (!v3 || nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104))) {
      return;
    }
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
    }
    id v4 = (id)glistenerLogObj;
    id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
    int v6 = *(_DWORD *)(*(void *)(a1 + 32) + 128LL);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_listener_start_block_invoke";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = id_string;
    *(_WORD *)&_BYTE buf[22] = 1024;
    *(_DWORD *)&_BYTE buf[24] = 0;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = v6;
    id v7 = (void *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v125) = 0;
    if (__nwlog_fault((const char *)v7, type, &v125))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        nw_txt_record_t v8 = (os_log_s *)(id)glistenerLogObj;
        os_log_type_t v9 = type[0];
        if (os_log_type_enabled(v8, type[0]))
        {
          BOOL v10 = nw_listener_get_id_string(*(void **)(a1 + 32));
          int v11 = *(_DWORD *)(*(void *)(a1 + 32) + 128LL);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_listener_start_block_invoke";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v10;
          *(_WORD *)&_BYTE buf[22] = 1024;
          *(_DWORD *)&_BYTE buf[24] = 0;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v11;
          _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s [%{public}s] In wrong state for start. Expected %d, got %d.",  buf,  0x22u);
        }
      }

      else if ((_BYTE)v125)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        nw_txt_record_t v8 = (os_log_s *)(id)glistenerLogObj;
        os_log_type_t v22 = type[0];
        BOOL v23 = os_log_type_enabled(v8, type[0]);
        if (backtrace_string)
        {
          if (v23)
          {
            os_log_type_t v24 = nw_listener_get_id_string(*(void **)(a1 + 32));
            int v25 = *(_DWORD *)(*(void *)(a1 + 32) + 128LL);
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_listener_start_block_invoke";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = v24;
            *(_WORD *)&_BYTE buf[22] = 1024;
            *(_DWORD *)&_BYTE buf[24] = 0;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v25;
            *(_WORD *)&buf[34] = 2082;
            *(void *)&buf[36] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v22,  "%{public}s [%{public}s] In wrong state for start. Expected %d, got %d., dumping backtrace:%{public}s",  buf,  0x2Cu);
          }

          free(backtrace_string);
          if (!v7) {
            return;
          }
LABEL_65:
          free(v7);
          return;
        }

        if (v23)
        {
          os_log_type_t v48 = nw_listener_get_id_string(*(void **)(a1 + 32));
          int v49 = *(_DWORD *)(*(void *)(a1 + 32) + 128LL);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_listener_start_block_invoke";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v48;
          *(_WORD *)&_BYTE buf[22] = 1024;
          *(_DWORD *)&_BYTE buf[24] = 0;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v49;
          _os_log_impl( &dword_181A5C000,  v8,  v22,  "%{public}s [%{public}s] In wrong state for start. Expected %d, got %d., no backtrace",  buf,  0x22u);
        }
      }

      else
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        nw_txt_record_t v8 = (os_log_s *)(id)glistenerLogObj;
        os_log_type_t v31 = type[0];
        if (os_log_type_enabled(v8, type[0]))
        {
          id v32 = nw_listener_get_id_string(*(void **)(a1 + 32));
          int v33 = *(_DWORD *)(*(void *)(a1 + 32) + 128LL);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_listener_start_block_invoke";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v32;
          *(_WORD *)&_BYTE buf[22] = 1024;
          *(_DWORD *)&_BYTE buf[24] = 0;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v33;
          _os_log_impl( &dword_181A5C000,  v8,  v31,  "%{public}s [%{public}s] In wrong state for start. Expected %d, got %d., backtrace limit exceeded",  buf,  0x22u);
        }
      }
    }

    if (!v7) {
      return;
    }
    goto LABEL_65;
  }

  *(void *)os_log_type_t type = 0LL;
  nw_endpoint_t v130 = type;
  uint64_t v131 = 0x2020000000LL;
  char v132 = 0;
  uint64_t v125 = 0LL;
  char v126 = &v125;
  uint64_t v127 = 0x2020000000LL;
  char v128 = 0;
  uint64_t v121 = 0LL;
  id v122 = &v121;
  uint64_t v123 = 0x2020000000LL;
  uint64_t v12 = MEMORY[0x1895F87A8];
  char v124 = 0;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 3221225472LL;
  aBlock[2] = __nw_listener_start_block_invoke_54;
  aBlock[3] = &unk_189BB9B70;
  nw_endpoint_t v118 = type;
  id v117 = (id)v2;
  uint64_t v119 = &v125;
  v120 = &v121;
  os_log_type_t v13 = (void (**)(void))_Block_copy(aBlock);
  char v14 = (os_unfair_lock_s *)(v2 + 8);
  os_unfair_lock_lock(v14);
  v13[2](v13);
  os_unfair_lock_unlock(v14);

  if (*((_BYTE *)v130 + 24))
  {
    uint64_t v15 = *(void *)(a1 + 32);
    if (*((_BYTE *)v126 + 24))
    {
      uint64_t v16 = *(void *)(v15 + 16);
      if (v16 && !nw_path_parameters_get_logging_disabled(*(void *)(v16 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        os_log_type_t v17 = (os_log_s *)(id)glistenerLogObj;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          os_log_type_t v18 = nw_listener_get_id_string(*(void **)(a1 + 32));
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_listener_start_block_invoke_2";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v18;
          _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}s] Started with setting both new connection handler and new connection group handler",  buf,  0x16u);
        }
      }

void sub_181F13474( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, char a34, uint64_t a35, uint64_t a36, uint64_t a37, char a38)
{
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose(&a38, 8);
  _Unwind_Resume(a1);
}

void *__nw_listener_start_block_invoke_54(void *result)
{
  *(_BYTE *)(*(void *)(result[5] + 8LL) + 24LL) = *(void *)(result[4] + 88LL) != 0LL;
  *(_BYTE *)(*(void *)(result[6] + 8LL) + 24LL) = *(void *)(result[4] + 96LL) != 0LL;
  *(_BYTE *)(*(void *)(result[7] + 8LL) + 24LL) = *(void *)(result[4] + 112LL) != 0LL;
  return result;
}

void ___ZL26nw_listener_start_on_queueP22NWConcrete_nw_listener_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 16LL);
  if (v4 && !nw_path_parameters_get_logging_disabled(*(void *)(v4 + 104)))
  {
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
    }
    uint64_t v5 = (os_log_s *)(id)glistenerLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
      int v7 = 136446722;
      nw_txt_record_t v8 = "nw_listener_start_on_queue_block_invoke";
      __int16 v9 = 2082;
      BOOL v10 = id_string;
      __int16 v11 = 2114;
      id v12 = v3;
      _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_INFO,  "%{public}s [%{public}s] Handling new path %{public}@",  (uint8_t *)&v7,  0x20u);
    }
  }

  nw_listener_handle_new_path_on_queue(*(void **)(a1 + 32), v3);
}

void sub_181F13784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_listener_handle_new_path_on_queue(void *a1, void *a2)
{
  uint64_t v84 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  nw_context_assert_queue(*((void **)v3 + 3));
  if ((*((_DWORD *)v3 + 32) - 1) <= 1 && (*((_BYTE *)v3 + 302) & 1) == 0)
  {
    uint64_t v5 = MEMORY[0x1895F87A8];
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = ___ZL36nw_listener_handle_new_path_on_queueP22NWConcrete_nw_listenerPU21objcproto10OS_nw_path8NSObject_block_invoke;
    aBlock[3] = &unk_189BC9238;
    id v6 = v3;
    id v71 = v6;
    id v72 = v4;
    int v7 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 2);
    v7[2](v7);
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 2);

    if (nw_path_get_status(*((nw_path_t *)v6 + 22)) != nw_path_status_satisfiable)
    {
      nw_listener_clear_trigger_agents_on_queue((NWConcrete_nw_listener *)v6);
LABEL_121:
      nw_listener_reconcile_inboxes_on_queue((NWConcrete_nw_listener *)v6);

      goto LABEL_122;
    }

    nw_txt_record_t v8 = (char *)v6;
    nw_context_assert_queue(*((void **)v3 + 3));
    __int16 v9 = (id *)(v8 + 200);
    if (!*((void *)v8 + 25))
    {

      goto LABEL_14;
    }

    if (*((void *)v8 + 24))
    {
      id v10 = nw_path_copy_inactive_agent_uuids(*((void **)v6 + 22), 0);
      id v11 = v10;
      if (v10 && xpc_array_get_count(v10))
      {
        uint64_t v69 = v11;
        xpc_object_t v12 = xpc_array_create(0LL, 0LL);
        if (v12)
        {
          id v13 = *((id *)v8 + 24);
          uint64_t v14 = *((void *)v6 + 22);
          else {
            id v16 = 0LL;
          }
          int v33 = (void *)*((void *)v8 + 25);
          *(void *)buf = v5;
          *(void *)&buf[8] = 3221225472LL;
          *(void *)&buf[16] = ___ZL42nw_listener_update_trigger_agents_on_queueP22NWConcrete_nw_listener_block_invoke;
          *(void *)&__int128 v76 = &unk_189BB8B78;
          id v67 = v13;
          *((void *)&v76 + 1) = v67;
          id v68 = v16;
          id v77 = v68;
          id v34 = v12;
          id v78 = v34;
          os_log_type_t v35 = v8;
          uint64_t v79 = v35;
          xpc_array_apply(v33, buf);
          size_t count = xpc_array_get_count(v34);
          if (count)
          {
            objc_storeStrong((id *)v8 + 25, v12);
            id v37 = v68;
            uint64_t v38 = (os_log_s *)*((void *)v8 + 24);
            *((void *)v8 + 24) = v37;
          }

          else
          {
            nw_listener_clear_trigger_agents_on_queue(v35);
            uint64_t v43 = *((void *)v35 + 2);
            if (!v43 || nw_path_parameters_get_logging_disabled(*(void *)(v43 + 104)))
            {
LABEL_61:

              if (!count)
              {
LABEL_31:
                uint64_t v25 = *((void *)v8 + 2);
                if (!v25 || nw_path_parameters_get_logging_disabled(*(void *)(v25 + 104))) {
                  goto LABEL_121;
                }
                if (__nwlog_listener_log::onceToken != -1) {
                  dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
                }
                os_log_type_t v17 = (void **)(id)glistenerLogObj;
                if (os_log_type_enabled((os_log_t)v17, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v26 = v8;

                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_listener_handle_new_path_on_queue";
                  *(_WORD *)&_BYTE buf[12] = 2082;
                  *(void *)&buf[14] = v26 + 42;
                  _os_log_impl( &dword_181A5C000,  (os_log_t)v17,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}s] agents failed to become active",  buf,  0x16u);
                }

                goto LABEL_120;
              }

void sub_181F144B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, void *a23)
{
  _Unwind_Resume(a1);
}

void ___ZL36nw_listener_handle_new_path_on_queueP22NWConcrete_nw_listenerPU21objcproto10OS_nw_path8NSObject_block_invoke( uint64_t a1)
{
}

void nw_listener_clear_trigger_agents_on_queue(NWConcrete_nw_listener *a1)
{
  id v4 = a1;
  nw_context_assert_queue(*((void **)v4 + 3));
  int v1 = (void *)*((void *)v4 + 23);
  *((void *)v4 + 23) = 0LL;

  uint64_t v2 = (void *)*((void *)v4 + 24);
  *((void *)v4 + 24) = 0LL;

  id v3 = (void *)*((void *)v4 + 25);
  *((void *)v4 + 25) = 0LL;
}

void sub_181F14610( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t ___ZL42nw_listener_update_trigger_agents_on_queueP22NWConcrete_nw_listener_block_invoke( xpc_object_t *a1, uint64_t a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v4 = a3;
  uint64_t v5 = v4;
  if (!v4)
  {
    id v6 = 0LL;
LABEL_5:
    uint64_t v7 = *((void *)a1[7] + 2);
    if (v7 && !nw_path_parameters_get_logging_disabled(*(void *)(v7 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
      }
      nw_txt_record_t v8 = (os_log_s *)(id)glistenerLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        id_string = nw_listener_get_id_string(a1[7]);
        id v10 = "<NULL>";
        int v17 = 136446722;
        id v18 = "nw_listener_update_trigger_agents_on_queue_block_invoke";
        __int16 v19 = 2082;
        if (v6) {
          id v10 = v6;
        }
        uint64_t v20 = id_string;
        __int16 v21 = 2082;
        os_log_type_t v22 = v10;
        _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}s] Invalid value: %{public}s",  (uint8_t *)&v17,  0x20u);
      }
    }

    if (v6) {
      free(v6);
    }
    goto LABEL_21;
  }

  if (object_getClass(v4) != (Class)MEMORY[0x1895F92F8])
  {
    id v6 = (char *)MEMORY[0x186E12534](v5);
    goto LABEL_5;
  }

  bytes = xpc_uuid_get_bytes(v5);
  uuid_unparse(bytes, (char *)&v17);
  xpc_dictionary_get_value(a1[4], (const char *)&v17);
  xpc_object_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v13 = xpc_dictionary_get_value(a1[5], (const char *)&v17);
  uint64_t v14 = (void *)v13;
  if (v12)
  {
    if (v13)
    {
      uint int64 = xpc_dictionary_get_uint64(v12, "generation");
    }
  }

LABEL_21:
  return 1LL;
}

void sub_181F1481C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_listener_teardown_protocol_inboxes(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = nw_parameters_copy_context(v1[2]);
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_listener_teardown_protocol_inboxes_block_invoke;
    v12[3] = &unk_189BC93A0;
    uint64_t v13 = v2;
    nw_queue_context_async(v3, v12);

    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v17 = "nw_listener_teardown_protocol_inboxes";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_listener_teardown_protocol_inboxes";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null listener", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          int v17 = "nw_listener_teardown_protocol_inboxes";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null listener, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_listener_teardown_protocol_inboxes";
        _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        int v17 = "nw_listener_teardown_protocol_inboxes";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null listener, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F14B38( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_listener_teardown_protocol_inboxes_block_invoke(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 128) != 2 || (*(_BYTE *)(v2 + 302) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v2 + 16);
    if (v9 && !nw_path_parameters_get_logging_disabled(*(void *)(v9 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
      }
      nw_txt_record_t v8 = (os_log_s *)(id)glistenerLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136446466;
        char v14 = "nw_listener_teardown_protocol_inboxes_block_invoke";
        __int16 v15 = 2082;
        id v16 = id_string;
        _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}s] Listener is not ready, ignoring teardown protocol inboxes",  buf,  0x16u);
      }

      goto LABEL_18;
    }
  }

  else
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
      }
      id v4 = (os_log_s *)(id)glistenerLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = nw_listener_get_id_string(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136446466;
        char v14 = "nw_listener_teardown_protocol_inboxes_block_invoke";
        __int16 v15 = 2082;
        id v16 = v5;
        _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_DEFAULT,  "%{public}s [%{public}s] tearing down protocol inboxes",  buf,  0x16u);
      }
    }

    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = v6[18];
    if (v7)
    {
      v11[0] = MEMORY[0x1895F87A8];
      v11[1] = 3221225472LL;
      v11[2] = __nw_listener_teardown_protocol_inboxes_block_invoke_56;
      v11[3] = &unk_189BB89E8;
      xpc_object_t v12 = v6;
      nw_array_remove_objects(v7, (uint64_t)v11);
      nw_txt_record_t v8 = v12;
LABEL_18:
    }
  }

uint64_t __nw_listener_teardown_protocol_inboxes_block_invoke_56(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a2;
  objc_opt_class();
  isKindOfClass Class = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16LL);
    if (v5 && !nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
      }
      id v6 = (os_log_s *)(id)glistenerLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
        int v9 = 136446722;
        BOOL v10 = "nw_listener_teardown_protocol_inboxes_block_invoke";
        __int16 v11 = 2082;
        xpc_object_t v12 = id_string;
        __int16 v13 = 2114;
        char v14 = v3;
        _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}s [%{public}s] cancelling protocol inbox: %{public}@",  (uint8_t *)&v9,  0x20u);
      }
    }

    nw_listener_resume_inbox(*(NWConcrete_nw_listener **)(a1 + 32), v3);
    nw_listener_cancel_inbox_on_queue(*(NWConcrete_nw_listener **)(a1 + 32), v3);
  }

  return isKindOfClass & 1;
}

void sub_181F14ED8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_listener_cancel(nw_listener_t listener)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int v1 = listener;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = nw_parameters_copy_context(v1[2]);
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_listener_cancel_block_invoke;
    v12[3] = &unk_189BC93A0;
    __int16 v13 = v2;
    nw_queue_context_async(v3, v12);

    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_listener_cancel";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_listener_cancel";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null listener", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_listener_cancel";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null listener, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_listener_cancel";
        _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_listener_cancel";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null listener, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F151D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_listener_cancel_block_invoke(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 128) == 4 || (*(_BYTE *)(v2 + 302) & 1) != 0)
  {
    uint64_t v8 = *(void *)(v2 + 16);
    if (v8 && !nw_path_parameters_get_logging_disabled(*(void *)(v8 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
      }
      os_log_type_t v9 = (os_log_s *)(id)glistenerLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
        int v11 = 136446466;
        xpc_object_t v12 = "nw_listener_cancel_block_invoke";
        __int16 v13 = 2082;
        char v14 = id_string;
        _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}s] Listener is already cancelled, ignoring cancel",  (uint8_t *)&v11,  0x16u);
      }
    }
  }

  else
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
    {
      if (__nwlog_listener_log::onceToken != -1) {
        dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
      }
      id v4 = (os_log_s *)(id)glistenerLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = nw_listener_get_id_string(*(void **)(a1 + 32));
        int v11 = 136446466;
        xpc_object_t v12 = "nw_listener_cancel_block_invoke";
        __int16 v13 = 2082;
        char v14 = v5;
        _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_DEFAULT,  "%{public}s [%{public}s] cancel",  (uint8_t *)&v11,  0x16u);
      }
    }

    uint64_t v7 = *(void *)(a1 + 32);
    id v6 = (NWConcrete_nw_listener **)(a1 + 32);
    *(_BYTE *)(v7 + 302) |= 1u;
    nw_listener_resume_all_inboxes_if_suspended_on_queue(*v6);
    nw_listener_teardown_on_queue(*v6);
    if (!*((_DWORD *)*v6 + 74)) {
      nw_listener_cancel_complete_on_queue(*v6);
    }
  }

uint16_t nw_listener_get_port(nw_listener_t listener)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  int v1 = listener;
  uint64_t v2 = (os_unfair_lock_s *)v1;
  if (v1)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    __int16 v20 = 0;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_listener_get_port_block_invoke;
    aBlock[3] = &unk_189BC9210;
    id v16 = buf;
    uint64_t v15 = v1;
    uint64_t v3 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 2);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 2);

    uint16_t v4 = *(_WORD *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_listener_get_port";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_get_port";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null listener", buf, 0xCu);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_listener_get_port";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null listener, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_get_port";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_get_port";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null listener, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F1571C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_listener_get_port_block_invoke(uint64_t result)
{
  *(_WORD *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_WORD *)(*(void *)(result + 32) + 300LL);
  return result;
}

id nw_listener_copy_advertise_descriptor(void *a1)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  int v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    __int16 v20 = __Block_byref_object_copy__17859;
    uint64_t v21 = __Block_byref_object_dispose__17860;
    id v22 = 0LL;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_listener_copy_advertise_descriptor_block_invoke;
    aBlock[3] = &unk_189BC9210;
    id v16 = buf;
    uint64_t v15 = v1;
    uint64_t v3 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 2);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 2);

    id v4 = *(id *)(*(void *)&buf[8] + 40LL);
    _Block_object_dispose(buf, 8);

    goto LABEL_3;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_listener_copy_advertise_descriptor";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_copy_advertise_descriptor";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null listener", buf, 0xCu);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_listener_copy_advertise_descriptor";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null listener, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_copy_advertise_descriptor";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_copy_advertise_descriptor";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null listener, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F15AB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, id a26)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void __nw_listener_copy_advertise_descriptor_block_invoke(uint64_t a1)
{
}

id nw_listener_copy_parameters(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  int v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[2];
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v16 = "nw_listener_copy_parameters";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_listener_copy_parameters";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null listener", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v16 = "nw_listener_copy_parameters";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null listener, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_listener_copy_parameters";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_listener_copy_parameters";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null listener, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void __nw_listener_get_path_uuid_block_invoke(uint64_t a1)
{
  int v1 = *(_OWORD **)(a1 + 40);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 176LL);
  if (v2)
  {
    id v3 = v2;
    _OWORD *v1 = *(_OWORD *)(v3 + 120);
  }

  else
  {
    uuid_clear(*(unsigned __int8 **)(a1 + 40));
  }

void nw_listener_simulate_mDNSResponder_crash(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_listener_simulate_mDNSResponder_crash_block_invoke;
    aBlock[3] = &unk_189BC93A0;
    char v13 = v1;
    id v3 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 2);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 2);

    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_listener_simulate_mDNSResponder_crash";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_listener_simulate_mDNSResponder_crash";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null listener", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_listener_simulate_mDNSResponder_crash";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null listener, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_listener_simulate_mDNSResponder_crash";
        _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_listener_simulate_mDNSResponder_crash";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null listener, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F160CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_listener_simulate_mDNSResponder_crash_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 272LL);
  if (v2 && [v2 count] == 1)
  {
    [*(id *)(*(void *)(a1 + 32) + 272) objectAtIndexedSubscript:0];
    id v3 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v4 = v3[8];

    if (v4)
    {
      [*(id *)(*(void *)(a1 + 32) + 272) objectAtIndexedSubscript:0];
      uint64_t v5 = (DNSServiceRef *)objc_claimAutoreleasedReturnValue();
      dnssd_sock_t v6 = DNSServiceRefSockFD(v5[8]);

      shutdown(v6, 2);
    }
  }

void sub_181F16180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_listener_set_advertise_endpoints(void *a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    uint64_t v5 = (void *)v3[3];
    v14[0] = MEMORY[0x1895F87A8];
    v14[1] = 3221225472LL;
    v14[2] = __nw_listener_set_advertise_endpoints_block_invoke;
    v14[3] = &unk_189BC9238;
    uint64_t v15 = v3;
    id v16 = v4;
    nw_queue_context_async(v5, v14);

    goto LABEL_3;
  }

  __nwlog_obj();
  dnssd_sock_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v20 = "nw_listener_set_advertise_endpoints";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_listener_set_advertise_endpoints";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null listener", buf, 0xCu);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = v18;
      BOOL v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v20 = "nw_listener_set_advertise_endpoints";
          __int16 v21 = 2082;
          id v22 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null listener, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_listener_set_advertise_endpoints";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null listener, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_listener_set_advertise_endpoints";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null listener, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F16488( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_listener_set_advertise_endpoints_block_invoke(uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(v2 + 128);
  if (v3 == 2)
  {
    if (!*(void *)(v2 + 264))
    {
      os_log_type_t v18 = nw_listener_reconcile_advertised_endpoints( (void *)v2,  *(void **)(v2 + 272),  *(void **)(a1 + 40),  *(void **)(v2 + 176),  0LL);
      uint64_t v19 = *(os_unfair_lock_s **)(a1 + 32);
      aBlock[0] = MEMORY[0x1895F87A8];
      aBlock[1] = 3221225472LL;
      aBlock[2] = __nw_listener_set_advertise_endpoints_block_invoke_60;
      aBlock[3] = &unk_189BC9238;
      uint64_t v36 = v19;
      uint64_t v20 = v18;
      id v37 = v20;
      __int16 v21 = (void (**)(void))_Block_copy(aBlock);
      os_unfair_lock_lock(v19 + 2);
      v21[2](v21);
      os_unfair_lock_unlock(v19 + 2);

      return;
    }

    uint64_t v4 = *(void *)(v2 + 16);
    if (!v4 || nw_path_parameters_get_logging_disabled(*(void *)(v4 + 104))) {
      return;
    }
    if (__nwlog_listener_log::onceToken != -1) {
      dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
    }
    id v5 = (id)glistenerLogObj;
    id_string = nw_listener_get_id_string(*(void **)(a1 + 32));
    *(_DWORD *)buf = 136446466;
    char v41 = "nw_listener_set_advertise_endpoints_block_invoke";
    __int16 v42 = 2082;
    uint64_t v43 = id_string;
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (__nwlog_fault(v7, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        os_log_type_t v8 = (os_log_s *)(id)glistenerLogObj;
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          BOOL v10 = nw_listener_get_id_string(*(void **)(a1 + 32));
          *(_DWORD *)buf = 136446466;
          char v41 = "nw_listener_set_advertise_endpoints_block_invoke";
          __int16 v42 = 2082;
          uint64_t v43 = v10;
          _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s [%{public}s] Called on listener with advertise descriptor set",  buf,  0x16u);
        }

void sub_181F16CA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_listener_set_advertise_endpoints_block_invoke_60(uint64_t a1)
{
}

void sub_181F16E14(_Unwind_Exception *a1)
{
}

BOOL NWPBServiceBrowseReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x189611CF0];
  uint64_t v4 = (int)*MEMORY[0x189611CF0];
  unint64_t v5 = *(void *)(a2 + v4);
  dnssd_sock_t v6 = (int *)MEMORY[0x189611CE8];
  unint64_t v7 = *(void *)(a2 + (int)*MEMORY[0x189611CE8]);
  os_log_type_t v8 = (int *)MEMORY[0x189611CE0];
  if (v5 < v7)
  {
    BOOL v10 = (int *)MEMORY[0x189611CD8];
    while (1)
    {
      os_log_type_t v14 = (_BYTE *)(a2 + *v8);
      if (*v14) {
        return *(_BYTE *)(a2 + *v8) == 0;
      }
      if (v5 >= v7) {
        break;
      }
      char v15 = *(_BYTE *)(*(void *)(a2 + *v10) + v5);
      *(void *)(a2 + (int)v4) = v5 + 1;
      unint64_t v16 = v15 & 0x7F;
      if ((v15 & 0x80) == 0) {
        goto LABEL_40;
      }
      uint64_t v17 = *v3;
      unint64_t v18 = *(void *)(a2 + v17);
      if (v18 == -1LL || v18 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v19 = v18 + 1;
      int v20 = *(char *)(*(void *)(a2 + *v10) + v18);
      *(void *)(a2 + v17) = v19;
      v16 |= (unint64_t)(v20 & 0x7F) << 7;
      if ((v20 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v21 = *v3;
      unint64_t v22 = *(void *)(a2 + v21);
      if (v22 == -1LL || v22 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v23 = v22 + 1;
      int v24 = *(char *)(*(void *)(a2 + *v10) + v22);
      *(void *)(a2 + v21) = v23;
      v16 |= (unint64_t)(v24 & 0x7F) << 14;
      if ((v24 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v25 = *v3;
      unint64_t v26 = *(void *)(a2 + v25);
      if (v26 == -1LL || v26 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v27 = v26 + 1;
      int v28 = *(char *)(*(void *)(a2 + *v10) + v26);
      *(void *)(a2 + v25) = v27;
      v16 |= (unint64_t)(v28 & 0x7F) << 21;
      if ((v28 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v29 = *v3;
      unint64_t v30 = *(void *)(a2 + v29);
      if (v30 == -1LL || v30 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v31 = v30 + 1;
      int v32 = *(char *)(*(void *)(a2 + *v10) + v30);
      *(void *)(a2 + v29) = v31;
      v16 |= (unint64_t)(v32 & 0x7F) << 28;
      if ((v32 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v33 = *v3;
      unint64_t v34 = *(void *)(a2 + v33);
      if (v34 == -1LL || v34 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v35 = v34 + 1;
      int v36 = *(char *)(*(void *)(a2 + *v10) + v34);
      *(void *)(a2 + v33) = v35;
      if ((v36 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v37 = *v3;
      unint64_t v38 = *(void *)(a2 + v37);
      if (v38 == -1LL || v38 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v39 = v38 + 1;
      int v40 = *(char *)(*(void *)(a2 + *v10) + v38);
      *(void *)(a2 + v37) = v39;
      if ((v40 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v41 = *v3;
      unint64_t v42 = *(void *)(a2 + v41);
      if (v42 == -1LL || v42 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v43 = v42 + 1;
      int v44 = *(char *)(*(void *)(a2 + *v10) + v42);
      *(void *)(a2 + v41) = v43;
      if ((v44 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v45 = *v3;
      unint64_t v46 = *(void *)(a2 + v45);
      if (v46 == -1LL || v46 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v47 = v46 + 1;
      int v48 = *(char *)(*(void *)(a2 + *v10) + v46);
      *(void *)(a2 + v45) = v47;
      if ((v48 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v49 = *v3;
      unint64_t v50 = *(void *)(a2 + v49);
      if (v50 == -1LL || v50 >= *(void *)(a2 + *v6))
      {
LABEL_38:
        os_log_type_t v14 = (_BYTE *)(a2 + *v8);
        goto LABEL_39;
      }

      unint64_t v51 = v50 + 1;
      int v52 = *(char *)(*(void *)(a2 + *v10) + v50);
      *(void *)(a2 + v49) = v51;
      if (v52 < 0)
      {
        unint64_t v16 = 0LL;
        int v53 = *(unsigned __int8 *)(a2 + *v8);
        goto LABEL_42;
      }

char *nw_parameters_copy_description_internal(NWConcrete_nw_parameters *a1, int a2)
{
  uint64_t v229 = *MEMORY[0x1895F89C0];
  uint64_t v2 = a1;
  os_log_type_t v200 = v2;
  if (v2)
  {
    uint64_t v3 = v2;
    if (v2->e_bundle_id)
    {
      snprintf(__str, 0x90uLL, ", bundle id: %s", v2->e_bundle_id);
      proxy_bundle_id = v3->proxy_bundle_id;
      if (proxy_bundle_id) {
        goto LABEL_4;
      }
    }

    else
    {
      __str[0] = 0;
      proxy_bundle_id = v2->proxy_bundle_id;
      if (proxy_bundle_id)
      {
LABEL_4:
        snprintf((char *)type, 0x96uLL, ", proxy bundle id: %s", proxy_bundle_id);
        unint64_t expected_workload = v3->value.expected_workload;
        if (expected_workload) {
          goto LABEL_5;
        }
        goto LABEL_14;
      }
    }

    type[0] = OS_LOG_TYPE_DEFAULT;
    unint64_t expected_workload = v3->value.expected_workload;
    if (expected_workload)
    {
LABEL_5:
      snprintf(v222, 0x27uLL, ", expected workload: %llu", expected_workload);
      unint64_t channel_teardown_delay = v3->value.channel_teardown_delay;
      if (channel_teardown_delay)
      {
LABEL_6:
        snprintf(v221, 0x26uLL, ", teardown delay: %llums", channel_teardown_delay);
        goto LABEL_16;
      }

void sub_181F18B2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_is_system_proxy_connection(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(*((void *)v1 + 13) + 108LL) >> 13) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v16 = "nw_parameters_is_system_proxy_connection";
  dnssd_sock_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_is_system_proxy_connection";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          int v16 = "nw_parameters_is_system_proxy_connection";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_is_system_proxy_connection";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_is_system_proxy_connection";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_attach_protocol_listener(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[98] >> 6) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v16 = "nw_parameters_get_attach_protocol_listener";
  dnssd_sock_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_attach_protocol_listener";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          int v16 = "nw_parameters_get_attach_protocol_listener";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_attach_protocol_listener";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_attach_protocol_listener";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_prohibit_joining_protocols(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[98] >> 7;
    goto LABEL_3;
  }

  __nwlog_obj();
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v16 = "nw_parameters_get_prohibit_joining_protocols";
  dnssd_sock_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_prohibit_joining_protocols";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          int v16 = "nw_parameters_get_prohibit_joining_protocols";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_prohibit_joining_protocols";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_prohibit_joining_protocols";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_allow_joining_connected_fd(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((_BYTE *)v1 + 99) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v16 = "nw_parameters_get_allow_joining_connected_fd";
  dnssd_sock_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_allow_joining_connected_fd";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          int v16 = "nw_parameters_get_allow_joining_connected_fd";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_allow_joining_connected_fd";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_allow_joining_connected_fd";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_allow_duplicate_state_updates(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[99] >> 2) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v16 = "nw_parameters_get_allow_duplicate_state_updates";
  dnssd_sock_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_allow_duplicate_state_updates";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          int v16 = "nw_parameters_get_allow_duplicate_state_updates";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_allow_duplicate_state_updates";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_allow_duplicate_state_updates";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_always_open_listener_socket(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[99] >> 3) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v16 = "nw_parameters_get_always_open_listener_socket";
  dnssd_sock_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_always_open_listener_socket";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          int v16 = "nw_parameters_get_always_open_listener_socket";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_always_open_listener_socket";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_always_open_listener_socket";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_disable_listener_datapath(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[99] >> 5) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v16 = "nw_parameters_get_disable_listener_datapath";
  dnssd_sock_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_disable_listener_datapath";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          int v16 = "nw_parameters_get_disable_listener_datapath";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_disable_listener_datapath";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_disable_listener_datapath";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_allow_internet_fallback(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[100] >> 5) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v16 = "nw_parameters_get_allow_internet_fallback";
  dnssd_sock_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_allow_internet_fallback";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          int v16 = "nw_parameters_get_allow_internet_fallback";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_allow_internet_fallback";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_allow_internet_fallback";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_parameters_get_local_only(nw_parameters_t parameters)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = parameters;
  uint64_t v2 = v1;
  if (v1)
  {
    BOOL v3 = (v1[97] >> 6) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v16 = "nw_parameters_get_local_only";
  dnssd_sock_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_local_only";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          int v16 = "nw_parameters_get_local_only";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_local_only";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_local_only";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_stricter_path_scoping(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((_BYTE *)v1 + 101) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v16 = "nw_parameters_get_stricter_path_scoping";
  dnssd_sock_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_stricter_path_scoping";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          int v16 = "nw_parameters_get_stricter_path_scoping";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_stricter_path_scoping";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_stricter_path_scoping";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_prevents_system_http_proxy_authentication(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[101] >> 3) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v16 = "nw_parameters_get_prevents_system_http_proxy_authentication";
  dnssd_sock_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_prevents_system_http_proxy_authentication";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          int v16 = "nw_parameters_get_prevents_system_http_proxy_authentication";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_prevents_system_http_proxy_authentication";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_parameters_get_prevents_system_http_proxy_authentication";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_path_parameters_copy_verbose_description(NWConcrete_nw_path_parameters *a1, char *a2)
{
  out[6] = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  uint64_t v476 = 0LL;
  v477 = &v476;
  uint64_t v478 = 0x2020000000LL;
  v479 = a2;
  uint64_t v472 = 0LL;
  v473 = &v472;
  uint64_t v474 = 0x2020000000LL;
  uint64_t v475 = 512LL;
  uint64_t v468 = 0LL;
  v469 = &v468;
  uint64_t v470 = 0x2020000000LL;
  char v471 = 0;
  attributed_bundle = v3->attributed_bundle;
  if (attributed_bundle)
  {
    unint64_t v5 = attributed_bundle;
    dnssd_sock_t v6 = (const char *)*((void *)v5 + 2);

    if (v6)
    {
      id v7 = (char *)v477[3];
      size_t v8 = v473[3];
      if (v7 == a2) {
        os_log_type_t v9 = "";
      }
      else {
        os_log_type_t v9 = ", ";
      }
      unsigned int v10 = nw_context_get_privacy_level(v3->attributed_bundle) - 1;
      if (v10 > 3) {
        BOOL v11 = "unknown";
      }
      else {
        BOOL v11 = off_189BB6080[v10];
      }
      int v12 = snprintf(v7, v8, "%scontext: %s (%s)", v9, v6, v11);
      char v13 = v473;
      unint64_t v14 = v473[3];
      BOOL v15 = v14 > v12;
      unint64_t v16 = v14 - v12;
      if (v15)
      {
        if (v12 >= 1)
        {
          v477[3] += v12;
          v13[3] = v16;
        }
      }

      else
      {
        *(_BYTE *)v477[3] = 0;
        *((_BYTE *)v469 + 24) = 1;
      }
    }
  }

  if (!*((_BYTE *)v469 + 24))
  {
    uuid_unparse(v3->process_path_value.proc_uuid, (char *)out);
    __int16 v17 = (char *)v477[3];
    if (v17 == a2) {
      unint64_t v18 = "";
    }
    else {
      unint64_t v18 = ", ";
    }
    int v19 = snprintf(v17, v473[3], "%sproc: %s", v18, (const char *)out);
    int v20 = v473;
    unint64_t v21 = v473[3];
    BOOL v15 = v21 > v19;
    unint64_t v22 = v21 - v19;
    if (v15)
    {
      if (v19 >= 1)
      {
        v477[3] += v19;
        v20[3] = v22;
      }
    }

    else
    {
      *(_BYTE *)v477[3] = 0;
      *((_BYTE *)v469 + 24) = 1;
    }

    if (!*((_BYTE *)v469 + 24) && uuid_compare(v3->process_path_value.proc_uuid, v3->process_path_value.e_proc_uuid))
    {
      uuid_unparse(v3->process_path_value.e_proc_uuid, (char *)out);
      uint64_t v29 = (char *)v477[3];
      if (v29 == a2) {
        unint64_t v30 = "";
      }
      else {
        unint64_t v30 = ", ";
      }
      int v31 = snprintf(v29, v473[3], "%seffective proc: %s", v30, (const char *)out);
      int v32 = v473;
      unint64_t v33 = v473[3];
      BOOL v15 = v33 > v31;
      unint64_t v34 = v33 - v31;
      if (v15)
      {
        if (v31 >= 1)
        {
          v477[3] += v31;
          v32[3] = v34;
        }
      }

      else
      {
        *(_BYTE *)v477[3] = 0;
        *((_BYTE *)v469 + 24) = 1;
      }
    }
  }

  if (!*((_BYTE *)v469 + 24) && !uuid_is_null(v3->process_path_value.persona_id))
  {
    uuid_unparse(v3->process_path_value.persona_id, (char *)out);
    BOOL v23 = (char *)v477[3];
    int v24 = ", ";
    if (v23 == a2) {
      int v24 = "";
    }
    int v25 = snprintf(v23, v473[3], "%spersona: %s", v24, (const char *)out);
    unint64_t v26 = v473;
    unint64_t v27 = v473[3];
    BOOL v15 = v27 > v25;
    unint64_t v28 = v27 - v25;
    if (v15)
    {
      if (v25 >= 1)
      {
        v477[3] += v25;
        v26[3] = v28;
      }
    }

    else
    {
      *(_BYTE *)v477[3] = 0;
      *((_BYTE *)v469 + 24) = 1;
    }
  }

  if (!*((_BYTE *)v469 + 24))
  {
    delegated_uint pid = v3->process_path_value.delegated_upid;
    if (delegated_upid)
    {
      unint64_t v43 = (char *)v477[3];
      int v44 = ", ";
      if (v43 == a2) {
        int v44 = "";
      }
      int v45 = snprintf(v43, v473[3], "%sdelegated upid: %llu", v44, delegated_upid);
      unint64_t v46 = v473;
      unint64_t v47 = v473[3];
      BOOL v15 = v47 > v45;
      unint64_t v48 = v47 - v45;
      if (v15)
      {
        if (v45 >= 1)
        {
          v477[3] += v45;
          v46[3] = v48;
        }
      }

      else
      {
        *(_BYTE *)v477[3] = 0;
        *((_BYTE *)v469 + 24) = 1;
      }
    }
  }

  if (!*((_BYTE *)v469 + 24))
  {
    unsigned int traffic_class = v3->path_value.traffic_class;
    if (traffic_class)
    {
      unint64_t v50 = (char *)v477[3];
      uint64_t v51 = ", ";
      if (v50 == a2) {
        uint64_t v51 = "";
      }
      int v52 = snprintf(v50, v473[3], "%straffic class: %u", v51, traffic_class);
      int v53 = v473;
      unint64_t v54 = v473[3];
      BOOL v15 = v54 > v52;
      unint64_t v55 = v54 - v52;
      if (v15)
      {
        if (v52 >= 1)
        {
          v477[3] += v52;
          v53[3] = v55;
        }
      }

      else
      {
        *(_BYTE *)v477[3] = 0;
        *((_BYTE *)v469 + 24) = 1;
      }
    }
  }

  if (!*((_BYTE *)v469 + 24))
  {
    int pid = v3->process_path_value.pid;
    if (pid != getpid())
    {
      uint64_t v36 = (char *)v477[3];
      uint64_t v37 = "";
      if (v36 != a2) {
        uint64_t v37 = ", ";
      }
      int v38 = snprintf(v36, v473[3], "%spid: %d", v37, v3->process_path_value.pid);
      uint64_t v39 = v473;
      unint64_t v40 = v473[3];
      BOOL v15 = v40 > v38;
      unint64_t v41 = v40 - v38;
      if (v15)
      {
        if (v38 >= 1)
        {
          v477[3] += v38;
          v39[3] = v41;
        }
      }

      else
      {
        *(_BYTE *)v477[3] = 0;
        *((_BYTE *)v469 + 24) = 1;
      }
    }
  }

  if (!*((_BYTE *)v469 + 24))
  {
    unsigned int uid = v3->process_path_value.uid;
    if (uid != getuid())
    {
      uint64_t v57 = (char *)v477[3];
      uint64_t v58 = "";
      if (v57 != a2) {
        uint64_t v58 = ", ";
      }
      int v59 = snprintf(v57, v473[3], "%suid: %u", v58, v3->process_path_value.uid);
      uint64_t v60 = v473;
      unint64_t v61 = v473[3];
      BOOL v15 = v61 > v59;
      unint64_t v62 = v61 - v59;
      if (v15)
      {
        if (v59 >= 1)
        {
          v477[3] += v59;
          v60[3] = v62;
        }
      }

      else
      {
        *(_BYTE *)v477[3] = 0;
        *((_BYTE *)v469 + 24) = 1;
      }
    }
  }

  if (!*((_BYTE *)v469 + 24))
  {
    required_interface_os_log_type_t type = v3->path_value.required_interface_type;
    if ((_DWORD)required_interface_type)
    {
      else {
        uint64_t v70 = off_189BC9540[required_interface_type];
      }
      id v95 = (char *)v477[3];
      uint64_t v96 = ", ";
      if (v95 == a2) {
        uint64_t v96 = "";
      }
      int v97 = snprintf(v95, v473[3], "%srequired interface type: %s", v96, v70);
      unint64_t v98 = v473;
      unint64_t v99 = v473[3];
      BOOL v15 = v99 > v97;
      unint64_t v100 = v99 - v97;
      if (v15)
      {
        if (v97 >= 1)
        {
          v477[3] += v97;
          v98[3] = v100;
        }
      }

      else
      {
        *(_BYTE *)v477[3] = 0;
        *((_BYTE *)v469 + 24) = 1;
      }
    }
  }

  if (!*((_BYTE *)v469 + 24))
  {
    required_interface_subos_log_type_t type = v3->path_value.required_interface_subtype;
    if (required_interface_subtype <= 1001)
    {
      if (required_interface_subtype == 1001)
      {
        uint64_t v72 = "wifi_infrastructure";
        goto LABEL_411;
      }
    }

    else
    {
      switch(required_interface_subtype)
      {
        case 1002:
          uint64_t v72 = "wifi_awdl";
          goto LABEL_411;
        case 4001:
          uint64_t v72 = "coprocessor";
          goto LABEL_411;
        case 5001:
          uint64_t v72 = "companion";
LABEL_411:
          __int128 v301 = (char *)v477[3];
          unint64_t v302 = ", ";
          if (v301 == a2) {
            unint64_t v302 = "";
          }
          int v303 = snprintf(v301, v473[3], "%srequired interface subtype: %s", v302, v72);
          os_log_type_t v304 = v473;
          unint64_t v305 = v473[3];
          BOOL v15 = v305 > v303;
          unint64_t v306 = v305 - v303;
          if (v15)
          {
            if (v303 >= 1)
            {
              v477[3] += v303;
              v304[3] = v306;
            }
          }

          else
          {
            *(_BYTE *)v477[3] = 0;
            *((_BYTE *)v469 + 24) = 1;
          }

          goto LABEL_72;
      }
    }

    uint64_t v72 = "unknown";
    goto LABEL_411;
  }

void sub_181F1D93C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_get_prefer_no_proxy(nw_parameters_t parameters)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_parameters_t v1 = parameters;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    BOOL v3 = HIBYTE(*(unsigned __int16 *)(*((void *)v1 + 13) + 108LL)) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  unint64_t v16 = "nw_parameters_get_prefer_no_proxy";
  dnssd_sock_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_parameters_get_prefer_no_proxy";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v16 = "nw_parameters_get_prefer_no_proxy";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_parameters_get_prefer_no_proxy";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_parameters_get_prefer_no_proxy";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_no_proxy_path_selection(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(*((void *)v1 + 13) + 108LL) >> 9) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  unint64_t v16 = "nw_parameters_get_no_proxy_path_selection";
  dnssd_sock_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_parameters_get_no_proxy_path_selection";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v16 = "nw_parameters_get_no_proxy_path_selection";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_parameters_get_no_proxy_path_selection";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_parameters_get_no_proxy_path_selection";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_privacy_proxy_fail_closed(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(*((void *)v1 + 13) + 100LL) >> 6) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  unint64_t v16 = "nw_parameters_get_privacy_proxy_fail_closed";
  dnssd_sock_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_parameters_get_privacy_proxy_fail_closed";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v16 = "nw_parameters_get_privacy_proxy_fail_closed";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_parameters_get_privacy_proxy_fail_closed";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_parameters_get_privacy_proxy_fail_closed";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_privacy_proxy_fail_closed_for_unreachable_hosts(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(*((void *)v1 + 13) + 108LL) >> 10) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  unint64_t v16 = "nw_parameters_get_privacy_proxy_fail_closed_for_unreachable_hosts";
  dnssd_sock_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_parameters_get_privacy_proxy_fail_closed_for_unreachable_hosts";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v16 = "nw_parameters_get_privacy_proxy_fail_closed_for_unreachable_hosts";
          __int16 v17 = 2082;
          unint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_parameters_get_privacy_proxy_fail_closed_for_unreachable_hosts";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_parameters_get_privacy_proxy_fail_closed_for_unreachable_hosts";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t __nw_parameters_get_prohibit_cellular_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1895F92F0])
  {
    uint64_t v5 = 1LL;
    if (xpc_uint64_get_value(v4) == 2)
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
      uint64_t v5 = 0LL;
    }
  }

  else
  {
    uint64_t v5 = 1LL;
  }

  return v5;
}

void sub_181F1E478(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke( void *a1, uint64_t a2, xpc_object_t xuint)
{
  unsigned int value = xpc_uint64_get_value(xuint);
  if (value > 4) {
    dnssd_sock_t v6 = "unknown";
  }
  else {
    dnssd_sock_t v6 = off_189BC9540[value];
  }
  id v7 = ", ";
  if (!a2) {
    id v7 = "";
  }
  int v8 = snprintf( *(char **)(*(void *)(a1[4] + 8LL) + 24LL),  *(void *)(*(void *)(a1[5] + 8LL) + 24LL),  "%s%s",  v7,  v6);
  if (*(void *)(*(void *)(a1[5] + 8LL) + 24LL) <= (unint64_t)v8)
  {
    **(_BYTE **)(*(void *)(a1[4] + 8LL) + 24LL) = 0;
    *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
  }

  else if (v8 >= 1)
  {
    *(void *)(*(void *)(a1[4] + 8LL) + 24LL) += v8;
    *(void *)(*(void *)(a1[5] + 8LL) + 24LL) -= v8;
  }

  return *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_2( void *a1, uint64_t a2, xpc_object_t xuint)
{
  int value = xpc_uint64_get_value(xuint);
  if (value <= 1001)
  {
    if (!value)
    {
      dnssd_sock_t v6 = "other";
      goto LABEL_13;
    }

    if (value == 1001)
    {
      dnssd_sock_t v6 = "wifi_infrastructure";
      goto LABEL_13;
    }
  }

  else
  {
    switch(value)
    {
      case 1002:
        dnssd_sock_t v6 = "wifi_awdl";
        goto LABEL_13;
      case 4001:
        dnssd_sock_t v6 = "coprocessor";
        goto LABEL_13;
      case 5001:
        dnssd_sock_t v6 = "companion";
        goto LABEL_13;
    }
  }

  dnssd_sock_t v6 = "unknown";
LABEL_13:
  id v7 = ", ";
  if (!a2) {
    id v7 = "";
  }
  int v8 = snprintf( *(char **)(*(void *)(a1[4] + 8LL) + 24LL),  *(void *)(*(void *)(a1[5] + 8LL) + 24LL),  "%s%s",  v7,  v6);
  if (*(void *)(*(void *)(a1[5] + 8LL) + 24LL) <= (unint64_t)v8)
  {
    **(_BYTE **)(*(void *)(a1[4] + 8LL) + 24LL) = 0;
    *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
  }

  else if (v8 >= 1)
  {
    *(void *)(*(void *)(a1[4] + 8LL) + 24LL) += v8;
    *(void *)(*(void *)(a1[5] + 8LL) + 24LL) -= v8;
  }

  return *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_3( void *a1, uint64_t a2, xpc_object_t xuint)
{
  int value = xpc_uint64_get_value(xuint);
  if (value <= 1001)
  {
    if (!value)
    {
      dnssd_sock_t v6 = "other";
      goto LABEL_13;
    }

    if (value == 1001)
    {
      dnssd_sock_t v6 = "wifi_infrastructure";
      goto LABEL_13;
    }
  }

  else
  {
    switch(value)
    {
      case 1002:
        dnssd_sock_t v6 = "wifi_awdl";
        goto LABEL_13;
      case 4001:
        dnssd_sock_t v6 = "coprocessor";
        goto LABEL_13;
      case 5001:
        dnssd_sock_t v6 = "companion";
        goto LABEL_13;
    }
  }

  dnssd_sock_t v6 = "unknown";
LABEL_13:
  id v7 = ", ";
  if (!a2) {
    id v7 = "";
  }
  int v8 = snprintf( *(char **)(*(void *)(a1[4] + 8LL) + 24LL),  *(void *)(*(void *)(a1[5] + 8LL) + 24LL),  "%s%s",  v7,  v6);
  if (*(void *)(*(void *)(a1[5] + 8LL) + 24LL) <= (unint64_t)v8)
  {
    **(_BYTE **)(*(void *)(a1[4] + 8LL) + 24LL) = 0;
    *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
  }

  else if (v8 >= 1)
  {
    *(void *)(*(void *)(a1[4] + 8LL) + 24LL) += v8;
    *(void *)(*(void *)(a1[5] + 8LL) + 24LL) -= v8;
  }

  return *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_4( void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  string = xpc_dictionary_get_string(v5, "name");
  uint int64 = xpc_dictionary_get_uint64(v5, "index");
  int v8 = ", ";
  if (!a2) {
    int v8 = "";
  }
  os_log_type_t v9 = "?";
  if (string) {
    os_log_type_t v9 = string;
  }
  int v10 = snprintf( *(char **)(*(void *)(a1[4] + 8LL) + 24LL),  *(void *)(*(void *)(a1[5] + 8LL) + 24LL),  "%s%s(%llu)",  v8,  v9,  uint64);
  if (*(void *)(*(void *)(a1[5] + 8LL) + 24LL) <= (unint64_t)v10)
  {
    **(_BYTE **)(*(void *)(a1[4] + 8LL) + 24LL) = 0;
    *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
  }

  else if (v10 >= 1)
  {
    *(void *)(*(void *)(a1[4] + 8LL) + 24LL) += v10;
    *(void *)(*(void *)(a1[5] + 8LL) + 24LL) -= v10;
  }

  BOOL v11 = *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) == 0;

  return v11;
}

void sub_181F1E994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_5( void *a1, uint64_t a2, xpc_object_t xstring)
{
  string_ptr = xpc_string_get_string_ptr(xstring);
  if (string_ptr)
  {
    dnssd_sock_t v6 = ", ";
    if (!a2) {
      dnssd_sock_t v6 = "";
    }
    int v7 = snprintf( *(char **)(*(void *)(a1[4] + 8LL) + 24LL),  *(void *)(*(void *)(a1[5] + 8LL) + 24LL),  "%s%s",  v6,  string_ptr);
    if (*(void *)(*(void *)(a1[5] + 8LL) + 24LL) <= (unint64_t)v7)
    {
      **(_BYTE **)(*(void *)(a1[4] + 8LL) + 24LL) = 0;
      *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
    }

    else if (v7 >= 1)
    {
      *(void *)(*(void *)(a1[4] + 8LL) + 24LL) += v7;
      *(void *)(*(void *)(a1[5] + 8LL) + 24LL) -= v7;
    }
  }

  return *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_6( void *a1, uint64_t a2, xpc_object_t xstring)
{
  string_ptr = xpc_string_get_string_ptr(xstring);
  if (string_ptr)
  {
    dnssd_sock_t v6 = ", ";
    if (!a2) {
      dnssd_sock_t v6 = "";
    }
    int v7 = snprintf( *(char **)(*(void *)(a1[4] + 8LL) + 24LL),  *(void *)(*(void *)(a1[5] + 8LL) + 24LL),  "%s%s",  v6,  string_ptr);
    if (*(void *)(*(void *)(a1[5] + 8LL) + 24LL) <= (unint64_t)v7)
    {
      **(_BYTE **)(*(void *)(a1[4] + 8LL) + 24LL) = 0;
      *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
    }

    else if (v7 >= 1)
    {
      *(void *)(*(void *)(a1[4] + 8LL) + 24LL) += v7;
      *(void *)(*(void *)(a1[5] + 8LL) + 24LL) -= v7;
    }
  }

  return *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_7( void *a1, uint64_t a2, xpc_object_t xuuid)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  bytes = xpc_uuid_get_bytes(xuuid);
  if (bytes)
  {
    uuid_unparse(bytes, out);
    dnssd_sock_t v6 = ", ";
    if (!a2) {
      dnssd_sock_t v6 = "";
    }
    int v7 = snprintf( *(char **)(*(void *)(a1[4] + 8LL) + 24LL),  *(void *)(*(void *)(a1[5] + 8LL) + 24LL),  "%s%s",  v6,  out);
    if (*(void *)(*(void *)(a1[5] + 8LL) + 24LL) <= (unint64_t)v7)
    {
      **(_BYTE **)(*(void *)(a1[4] + 8LL) + 24LL) = 0;
      *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
    }

    else if (v7 >= 1)
    {
      *(void *)(*(void *)(a1[4] + 8LL) + 24LL) += v7;
      *(void *)(*(void *)(a1[5] + 8LL) + 24LL) -= v7;
    }
  }

  return *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_8( void *a1, uint64_t a2, xpc_object_t xstring)
{
  string_ptr = xpc_string_get_string_ptr(xstring);
  if (string_ptr)
  {
    dnssd_sock_t v6 = ", ";
    if (!a2) {
      dnssd_sock_t v6 = "";
    }
    int v7 = snprintf( *(char **)(*(void *)(a1[4] + 8LL) + 24LL),  *(void *)(*(void *)(a1[5] + 8LL) + 24LL),  "%s%s",  v6,  string_ptr);
    if (*(void *)(*(void *)(a1[5] + 8LL) + 24LL) <= (unint64_t)v7)
    {
      **(_BYTE **)(*(void *)(a1[4] + 8LL) + 24LL) = 0;
      *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
    }

    else if (v7 >= 1)
    {
      *(void *)(*(void *)(a1[4] + 8LL) + 24LL) += v7;
      *(void *)(*(void *)(a1[5] + 8LL) + 24LL) -= v7;
    }
  }

  return *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_9( void *a1, uint64_t a2, xpc_object_t xstring)
{
  string_ptr = xpc_string_get_string_ptr(xstring);
  if (string_ptr)
  {
    dnssd_sock_t v6 = ", ";
    if (!a2) {
      dnssd_sock_t v6 = "";
    }
    int v7 = snprintf( *(char **)(*(void *)(a1[4] + 8LL) + 24LL),  *(void *)(*(void *)(a1[5] + 8LL) + 24LL),  "%s%s",  v6,  string_ptr);
    if (*(void *)(*(void *)(a1[5] + 8LL) + 24LL) <= (unint64_t)v7)
    {
      **(_BYTE **)(*(void *)(a1[4] + 8LL) + 24LL) = 0;
      *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
    }

    else if (v7 >= 1)
    {
      *(void *)(*(void *)(a1[4] + 8LL) + 24LL) += v7;
      *(void *)(*(void *)(a1[5] + 8LL) + 24LL) -= v7;
    }
  }

  return *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_10( void *a1, uint64_t a2, xpc_object_t xuuid)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  bytes = xpc_uuid_get_bytes(xuuid);
  if (bytes)
  {
    uuid_unparse(bytes, out);
    dnssd_sock_t v6 = ", ";
    if (!a2) {
      dnssd_sock_t v6 = "";
    }
    int v7 = snprintf( *(char **)(*(void *)(a1[4] + 8LL) + 24LL),  *(void *)(*(void *)(a1[5] + 8LL) + 24LL),  "%s%s",  v6,  out);
    if (*(void *)(*(void *)(a1[5] + 8LL) + 24LL) <= (unint64_t)v7)
    {
      **(_BYTE **)(*(void *)(a1[4] + 8LL) + 24LL) = 0;
      *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
    }

    else if (v7 >= 1)
    {
      *(void *)(*(void *)(a1[4] + 8LL) + 24LL) += v7;
      *(void *)(*(void *)(a1[5] + 8LL) + 24LL) -= v7;
    }
  }

  return *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_11( void *a1, uint64_t a2, xpc_object_t xstring)
{
  string_ptr = xpc_string_get_string_ptr(xstring);
  if (string_ptr)
  {
    dnssd_sock_t v6 = ", ";
    if (!a2) {
      dnssd_sock_t v6 = "";
    }
    int v7 = snprintf( *(char **)(*(void *)(a1[4] + 8LL) + 24LL),  *(void *)(*(void *)(a1[5] + 8LL) + 24LL),  "%s%s",  v6,  string_ptr);
    if (*(void *)(*(void *)(a1[5] + 8LL) + 24LL) <= (unint64_t)v7)
    {
      **(_BYTE **)(*(void *)(a1[4] + 8LL) + 24LL) = 0;
      *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
    }

    else if (v7 >= 1)
    {
      *(void *)(*(void *)(a1[4] + 8LL) + 24LL) += v7;
      *(void *)(*(void *)(a1[5] + 8LL) + 24LL) -= v7;
    }
  }

  return *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_12( void *a1, uint64_t a2, xpc_object_t xstring)
{
  string_ptr = xpc_string_get_string_ptr(xstring);
  if (string_ptr)
  {
    dnssd_sock_t v6 = ", ";
    if (!a2) {
      dnssd_sock_t v6 = "";
    }
    int v7 = snprintf( *(char **)(*(void *)(a1[4] + 8LL) + 24LL),  *(void *)(*(void *)(a1[5] + 8LL) + 24LL),  "%s%s",  v6,  string_ptr);
    if (*(void *)(*(void *)(a1[5] + 8LL) + 24LL) <= (unint64_t)v7)
    {
      **(_BYTE **)(*(void *)(a1[4] + 8LL) + 24LL) = 0;
      *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
    }

    else if (v7 >= 1)
    {
      *(void *)(*(void *)(a1[4] + 8LL) + 24LL) += v7;
      *(void *)(*(void *)(a1[5] + 8LL) + 24LL) -= v7;
    }
  }

  return *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_13( void *a1, uint64_t a2, xpc_object_t xuuid)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  bytes = xpc_uuid_get_bytes(xuuid);
  if (bytes)
  {
    uuid_unparse(bytes, out);
    dnssd_sock_t v6 = ", ";
    if (!a2) {
      dnssd_sock_t v6 = "";
    }
    int v7 = snprintf( *(char **)(*(void *)(a1[4] + 8LL) + 24LL),  *(void *)(*(void *)(a1[5] + 8LL) + 24LL),  "%s%s",  v6,  out);
    if (*(void *)(*(void *)(a1[5] + 8LL) + 24LL) <= (unint64_t)v7)
    {
      **(_BYTE **)(*(void *)(a1[4] + 8LL) + 24LL) = 0;
      *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
    }

    else if (v7 >= 1)
    {
      *(void *)(*(void *)(a1[4] + 8LL) + 24LL) += v7;
      *(void *)(*(void *)(a1[5] + 8LL) + 24LL) -= v7;
    }
  }

  return *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_14( void *a1, uint64_t a2, xpc_object_t xstring)
{
  string_ptr = xpc_string_get_string_ptr(xstring);
  if (string_ptr)
  {
    dnssd_sock_t v6 = ", ";
    if (!a2) {
      dnssd_sock_t v6 = "";
    }
    int v7 = snprintf( *(char **)(*(void *)(a1[4] + 8LL) + 24LL),  *(void *)(*(void *)(a1[5] + 8LL) + 24LL),  "%s%s",  v6,  string_ptr);
    if (*(void *)(*(void *)(a1[5] + 8LL) + 24LL) <= (unint64_t)v7)
    {
      **(_BYTE **)(*(void *)(a1[4] + 8LL) + 24LL) = 0;
      *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
    }

    else if (v7 >= 1)
    {
      *(void *)(*(void *)(a1[4] + 8LL) + 24LL) += v7;
      *(void *)(*(void *)(a1[5] + 8LL) + 24LL) -= v7;
    }
  }

  return *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_15( void *a1, uint64_t a2, xpc_object_t xstring)
{
  string_ptr = xpc_string_get_string_ptr(xstring);
  if (string_ptr)
  {
    dnssd_sock_t v6 = ", ";
    if (!a2) {
      dnssd_sock_t v6 = "";
    }
    int v7 = snprintf( *(char **)(*(void *)(a1[4] + 8LL) + 24LL),  *(void *)(*(void *)(a1[5] + 8LL) + 24LL),  "%s%s",  v6,  string_ptr);
    if (*(void *)(*(void *)(a1[5] + 8LL) + 24LL) <= (unint64_t)v7)
    {
      **(_BYTE **)(*(void *)(a1[4] + 8LL) + 24LL) = 0;
      *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
    }

    else if (v7 >= 1)
    {
      *(void *)(*(void *)(a1[4] + 8LL) + 24LL) += v7;
      *(void *)(*(void *)(a1[5] + 8LL) + 24LL) -= v7;
    }
  }

  return *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) == 0;
}

BOOL ___ZL43nw_path_parameters_copy_verbose_descriptionP29NWConcrete_nw_path_parametersPcm_block_invoke_16( void *a1, uint64_t a2, xpc_object_t xuuid)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  bytes = xpc_uuid_get_bytes(xuuid);
  if (bytes)
  {
    uuid_unparse(bytes, out);
    dnssd_sock_t v6 = ", ";
    if (!a2) {
      dnssd_sock_t v6 = "";
    }
    int v7 = snprintf( *(char **)(*(void *)(a1[4] + 8LL) + 24LL),  *(void *)(*(void *)(a1[5] + 8LL) + 24LL),  "%s%s",  v6,  out);
    if (*(void *)(*(void *)(a1[5] + 8LL) + 24LL) <= (unint64_t)v7)
    {
      **(_BYTE **)(*(void *)(a1[4] + 8LL) + 24LL) = 0;
      *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
    }

    else if (v7 >= 1)
    {
      *(void *)(*(void *)(a1[4] + 8LL) + 24LL) += v7;
      *(void *)(*(void *)(a1[5] + 8LL) + 24LL) -= v7;
    }
  }

  return *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) == 0;
}

BOOL __nw_protocol_stack_includes_protocol_block_invoke(uint64_t a1, int a2, nw_protocol_options_t options)
{
  nw_protocol_definition_t v4 = nw_protocol_options_copy_definition(options);
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe(*(void *)(a1 + 32), (uint64_t)v4);
  if (is_equal_unsafe) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }
  BOOL v6 = !is_equal_unsafe;

  return v6;
}

void sub_181F1F66C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _nw_parameters_configure_protocol_disable_block_invoke()
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v0 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  BOOL v11 = "_nw_parameters_configure_protocol_disable_block_invoke";
  id v1 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (!__nwlog_fault(v1, &type, &v8))
  {
LABEL_6:
    if (!v1) {
      return;
    }
    goto LABEL_7;
  }

  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    nw_parameters_t v2 = (os_log_s *)(id)gLogObj;
    os_log_type_t v3 = type;
    if (os_log_type_enabled(v2, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v11 = "_nw_parameters_configure_protocol_disable_block_invoke";
      _os_log_impl( &dword_181A5C000,  v2,  v3,  "%{public}s _nw_parameters_configure_protocol_disable called directly",  buf,  0xCu);
    }

void _nw_parameters_configure_protocol_default_configuration_block_invoke_2()
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v0 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  BOOL v11 = "_nw_parameters_configure_protocol_default_configuration_block_invoke_2";
  id v1 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (!__nwlog_fault(v1, &type, &v8))
  {
LABEL_6:
    if (!v1) {
      return;
    }
    goto LABEL_7;
  }

  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    nw_parameters_t v2 = (os_log_s *)(id)gLogObj;
    os_log_type_t v3 = type;
    if (os_log_type_enabled(v2, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v11 = "_nw_parameters_configure_protocol_default_configuration_block_invoke_2";
      _os_log_impl( &dword_181A5C000,  v2,  v3,  "%{public}s _nw_parameters_configure_protocol_default_configuration called directly",  buf,  0xCu);
    }

void _nw_parameters_configure_sec_protocol_default_configuration_block_invoke_3()
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v0 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  BOOL v11 = "_nw_parameters_configure_sec_protocol_default_configuration_block_invoke_3";
  id v1 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (!__nwlog_fault(v1, &type, &v8))
  {
LABEL_6:
    if (!v1) {
      return;
    }
    goto LABEL_7;
  }

  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    nw_parameters_t v2 = (os_log_s *)(id)gLogObj;
    os_log_type_t v3 = type;
    if (os_log_type_enabled(v2, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v11 = "_nw_parameters_configure_sec_protocol_default_configuration_block_invoke_3";
      _os_log_impl( &dword_181A5C000,  v2,  v3,  "%{public}s _nw_parameters_configure_sec_protocol_default_configuration called directly",  buf,  0xCu);
    }

NWConcrete_nw_protocol_stack *nw_protocol_stack_create_empty()
{
  return objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_protocol_stack);
}

uint64_t __nw_protocol_stack_copy_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8LL);
  nw_protocol_definition_t v4 = nw_protocol_options_copy(a3);
  nw_array_append(v3, v4);

  return 1LL;
}

void nw_protocol_stack_prepend_application_protocol(nw_protocol_stack_t stack, nw_protocol_options_t protocol)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  nw_protocol_stack_t v3 = stack;
  nw_protocol_definition_t v4 = protocol;
  os_log_type_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    unint64_t v27 = "nw_protocol_stack_prepend_application_protocol";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v27 = "nw_protocol_stack_prepend_application_protocol";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null stack", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v27 = "nw_protocol_stack_prepend_application_protocol";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null stack, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11) {
          goto LABEL_8;
        }
LABEL_43:
        free(v11);
        goto LABEL_8;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v27 = "nw_protocol_stack_prepend_application_protocol";
        _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v27 = "nw_protocol_stack_prepend_application_protocol";
        _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null stack, backtrace limit exceeded",  buf,  0xCu);
      }
    }

BOOL nw_protocol_options_are_persistent(void *a1)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    unint64_t v26 = "nw_protocol_options_copy_definition";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v8, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v26 = "nw_protocol_options_copy_definition";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
      }

      else if (v23)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            unint64_t v26 = "nw_protocol_options_copy_definition";
            __int16 v27 = 2082;
            __int16 v28 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }

        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v26 = "nw_protocol_options_copy_definition";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v26 = "nw_protocol_options_copy_definition";
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void nw_protocol_stack_clear_application_protocols(nw_protocol_stack_t stack)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_protocol_stack_t v1 = stack;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    id v3 = (void *)*((void *)v1 + 1);
    *((void *)v1 + 1) = 0LL;

    nw_protocol_definition_t v4 = (void *)v2[2];
    v2[2] = 0LL;

    goto LABEL_3;
  }

  __nwlog_obj();
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  unint64_t v16 = "nw_protocol_stack_clear_application_protocols";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_protocol_stack_clear_application_protocols";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null stack", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v16 = "nw_protocol_stack_clear_application_protocols";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null stack, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_protocol_stack_clear_application_protocols";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_protocol_stack_clear_application_protocols";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null stack, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t __nw_protocol_stack_iterate_application_protocols_block_invoke(uint64_t a1)
{
  return 1LL;
}

BOOL __nw_protocol_stack_insert_application_protocol_before_block_invoke(void *a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL) = a1[4] == a3;
  int v3 = *(unsigned __int8 *)(*(void *)(a1[5] + 8LL) + 24LL);
  if (*(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL)) {
    *(void *)(*(void *)(a1[6] + 8LL) + 24LL) = a2;
  }
  return v3 == 0;
}

BOOL __nw_protocol_stack_insert_application_protocol_before_block_invoke_2( void *a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL) = a1[4] == a3;
  int v3 = *(unsigned __int8 *)(*(void *)(a1[5] + 8LL) + 24LL);
  if (*(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL)) {
    *(void *)(*(void *)(a1[6] + 8LL) + 24LL) = a2;
  }
  return v3 == 0;
}

void nw_protocol_stack_set_original_proxied_transport_protocol(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  int v3 = a1;
  id v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 5, a2);
    goto LABEL_3;
  }

  __nwlog_obj();
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  unint64_t v16 = "nw_protocol_stack_set_original_proxied_transport_protocol";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_protocol_stack_set_original_proxied_transport_protocol";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null stack", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v16 = "nw_protocol_stack_set_original_proxied_transport_protocol";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null stack, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_protocol_stack_set_original_proxied_transport_protocol";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v16 = "nw_protocol_stack_set_original_proxied_transport_protocol";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null stack, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

const char *nw_protocol_stack_copy_description(void *a1)
{
  nw_protocol_stack_t v1 = a1;
  uint64_t v25 = 0LL;
  unint64_t v26 = (const char **)&v25;
  uint64_t v27 = 0x2020000000LL;
  uint64_t v28 = 0LL;
  uint64_t v21 = 0LL;
  os_log_type_t v22 = &v21;
  int v24 = 0;
  uint64_t v23 = 0x2020000000LL;
  nw_parameters_t v2 = (unsigned __int8 *)v1[1];
  uint64_t v3 = MEMORY[0x1895F87A8];
  if (v2)
  {
    v20[0] = MEMORY[0x1895F87A8];
    v20[1] = 3221225472LL;
    id v20[2] = __nw_protocol_stack_copy_description_block_invoke;
    v20[3] = &unk_189BC52F8;
    v20[4] = &v25;
    v20[5] = &v21;
    nw_array_apply(v2, (uint64_t)v20);
  }

  id v4 = (unsigned __int8 *)v1[2];
  if (v4)
  {
    v19[0] = v3;
    v19[1] = 3221225472LL;
    v19[2] = __nw_protocol_stack_copy_description_block_invoke_2;
    v19[3] = &unk_189BC52F8;
    v19[4] = &v25;
    v19[5] = &v21;
    nw_array_apply(v4, (uint64_t)v19);
  }

  BOOL v5 = (void *)v1[3];
  if (v5)
  {
    uint64_t v6 = v5;
    id v7 = v6[1];

    identifier = nw_protocol_definition_get_identifier(v7);
    nw_append_format(v26 + 3, "transport [%u]: %s\n", *((_DWORD *)v22 + 6), identifier);
    ++*((_DWORD *)v22 + 6);
  }

  os_log_type_t v9 = (void *)v1[4];
  if (v9)
  {
    os_log_type_t v10 = v9;
    id v11 = v10[1];

    os_log_type_t v12 = nw_protocol_definition_get_identifier(v11);
    nw_append_format(v26 + 3, "secondary transport [%u]: %s\n", *((_DWORD *)v22 + 6), v12);
    ++*((_DWORD *)v22 + 6);
  }

  char v13 = (void *)v1[6];
  if (v13)
  {
    os_log_type_t v14 = v13;
    id v15 = v14[1];

    unint64_t v16 = nw_protocol_definition_get_identifier(v15);
    nw_append_format(v26 + 3, "internet [%u]: %s\n", *((_DWORD *)v22 + 6), v16);
    ++*((_DWORD *)v22 + 6);
  }

  __int16 v17 = v26[3];
  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v25, 8);

  return v17;
}

uint64_t __nw_protocol_stack_copy_description_block_invoke(uint64_t a1, int a2, nw_protocol_options_t options)
{
  nw_protocol_definition_t v4 = nw_protocol_options_copy_definition(options);
  identifier = nw_protocol_definition_get_identifier(v4);
  nw_append_format( (const char **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL),  "persistent application [%u]: %s\n",  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL),  identifier);
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);

  return 1LL;
}

uint64_t __nw_protocol_stack_copy_description_block_invoke_2( uint64_t a1, int a2, nw_protocol_options_t options)
{
  nw_protocol_definition_t v4 = nw_protocol_options_copy_definition(options);
  identifier = nw_protocol_definition_get_identifier(v4);
  nw_append_format( (const char **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL),  "application [%u]: %s\n",  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL),  identifier);
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);

  return 1LL;
}

void nw_protocol_stack_remove_protocol(void *a1, void *a2)
{
  uint64_t v51 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  uint64_t v36 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_stack_remove_protocol";
    uint64_t v23 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_stack_remove_protocol";
        _os_log_impl(&dword_181A5C000, v24, v25, "%{public}s called with null stack", buf, 0xCu);
      }
    }

    else if (v45)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type;
      BOOL v30 = os_log_type_enabled(v24, type);
      if (backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_stack_remove_protocol";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v24,  v29,  "%{public}s called with null stack, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_53:
        if (!v23) {
          goto LABEL_19;
        }
LABEL_54:
        free(v23);
        goto LABEL_19;
      }

      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_stack_remove_protocol";
        _os_log_impl(&dword_181A5C000, v24, v29, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v34 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_stack_remove_protocol";
        _os_log_impl( &dword_181A5C000,  v24,  v34,  "%{public}s called with null stack, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181F218C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__19159(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__19160(uint64_t a1)
{
}

BOOL __nw_protocol_stack_remove_protocol_block_invoke(uint64_t *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  nw_protocol_definition_t v5 = nw_protocol_options_copy_definition(v4);
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe(a1[4], (uint64_t)v5);
  if (is_equal_unsafe)
  {
    BOOL v7 = nw_array_duplicate_array_without_object(*(void *)(a1[5] + 8), v4);
    uint64_t v8 = *(void *)(a1[6] + 8);
    os_log_type_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;
  }

  return !is_equal_unsafe;
}

void sub_181F2198C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL __nw_protocol_stack_remove_protocol_block_invoke_2(uint64_t *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  nw_protocol_definition_t v5 = nw_protocol_options_copy_definition(v4);
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe(a1[4], (uint64_t)v5);
  if (is_equal_unsafe)
  {
    BOOL v7 = nw_array_duplicate_array_without_object(*(void *)(a1[5] + 16), v4);
    uint64_t v8 = *(void *)(a1[6] + 8);
    os_log_type_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;
  }

  return !is_equal_unsafe;
}

void sub_181F21A28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_stack_replace_protocol(void *a1, void *a2, void *a3)
{
  uint64_t v63 = *MEMORY[0x1895F89C0];
  nw_protocol_definition_t v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (!v5)
  {
    unint64_t v26 = v7;
    __nwlog_obj();
    os_log_type_t v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_stack_replace_protocol";
    uint64_t v28 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v58 = OS_LOG_TYPE_ERROR;
    char v57 = 0;
    if (v58 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v30 = v58;
      if (os_log_type_enabled(v29, v58))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_stack_replace_protocol";
        _os_log_impl(&dword_181A5C000, v29, v30, "%{public}s called with null stack", buf, 0xCu);
      }
    }

    else if (v57)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v36 = v58;
      BOOL v37 = os_log_type_enabled(v29, v58);
      if (backtrace_string)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_stack_replace_protocol";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v29,  v36,  "%{public}s called with null stack, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_78:
        if (!v28) {
          goto LABEL_28;
        }
LABEL_79:
        free(v28);
        goto LABEL_28;
      }

      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_stack_replace_protocol";
        _os_log_impl(&dword_181A5C000, v29, v36, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v43 = v58;
      if (os_log_type_enabled(v29, v58))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_stack_replace_protocol";
        _os_log_impl( &dword_181A5C000,  v29,  v43,  "%{public}s called with null stack, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181F223B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_stack_replace_protocol_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  nw_protocol_definition_t v5 = nw_protocol_options_copy_definition(v4);
  if (nw_protocol_definition_is_equal_unsafe(*(void *)(a1 + 32), (uint64_t)v5)
    || nw_protocol_definition_is_equal_unsafe(*(void *)(a1 + 40), (uint64_t)v5))
  {
    BOOL v6 = nw_array_create();
    uint64_t v7 = *(void *)(*(void *)(a1 + 64) + 8LL);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;

    id v9 = *(unsigned __int8 **)(*(void *)(a1 + 48) + 8LL);
    v14[0] = MEMORY[0x1895F87A8];
    v14[1] = 3221225472LL;
    v14[2] = __nw_protocol_stack_replace_protocol_block_invoke_2;
    v14[3] = &unk_189BC1378;
    id v15 = v4;
    __int128 v13 = *(_OWORD *)(a1 + 56);
    id v10 = (id)v13;
    __int128 v16 = v13;
    nw_array_apply(v9, (uint64_t)v14);

    uint64_t v11 = 0LL;
  }

  else
  {
    uint64_t v11 = 1LL;
  }

  return v11;
}

void sub_181F224E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_stack_replace_protocol_block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  nw_protocol_definition_t v5 = nw_protocol_options_copy_definition(v4);
  if (nw_protocol_definition_is_equal_unsafe(*(void *)(a1 + 32), (uint64_t)v5)
    || nw_protocol_definition_is_equal_unsafe(*(void *)(a1 + 40), (uint64_t)v5))
  {
    BOOL v6 = nw_array_create();
    uint64_t v7 = *(void *)(*(void *)(a1 + 64) + 8LL);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;

    id v9 = *(unsigned __int8 **)(*(void *)(a1 + 48) + 16LL);
    v14[0] = MEMORY[0x1895F87A8];
    v14[1] = 3221225472LL;
    v14[2] = __nw_protocol_stack_replace_protocol_block_invoke_4;
    v14[3] = &unk_189BC1378;
    id v15 = v4;
    __int128 v13 = *(_OWORD *)(a1 + 56);
    id v10 = (id)v13;
    __int128 v16 = v13;
    nw_array_apply(v9, (uint64_t)v14);

    uint64_t v11 = 0LL;
  }

  else
  {
    uint64_t v11 = 1LL;
  }

  return v11;
}

void sub_181F22604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_stack_replace_protocol_block_invoke_4(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  nw_protocol_definition_t v5 = v4;
  if ((id)a1[4] == v4) {
    nw_protocol_definition_t v5 = (void *)a1[5];
  }
  nw_array_append(*(void *)(*(void *)(a1[6] + 8LL) + 40LL), v5);

  return 1LL;
}

uint64_t __nw_protocol_stack_replace_protocol_block_invoke_2(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  nw_protocol_definition_t v5 = v4;
  if ((id)a1[4] == v4) {
    nw_protocol_definition_t v5 = (void *)a1[5];
  }
  nw_array_append(*(void *)(*(void *)(a1[6] + 8LL) + 40LL), v5);

  return 1LL;
}

void nw_protocol_stack_replace_protocol_with_handle(void *a1, uint64_t a2, void *a3)
{
  uint64_t v53 = *MEMORY[0x1895F89C0];
  nw_protocol_definition_t v5 = a1;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5)
  {
    __nwlog_obj();
    id v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_stack_replace_protocol_with_handle";
    int v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v48 = OS_LOG_TYPE_ERROR;
    char v47 = 0;
    if (v48 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = v48;
      if (os_log_type_enabled(v25, v48))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_stack_replace_protocol_with_handle";
        _os_log_impl(&dword_181A5C000, v25, v26, "%{public}s called with null stack", buf, 0xCu);
      }
    }

    else if (v47)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v30 = v48;
      BOOL v31 = os_log_type_enabled(v25, v48);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_stack_replace_protocol_with_handle";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v25,  v30,  "%{public}s called with null stack, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_54:
        if (!v24) {
          goto LABEL_20;
        }
LABEL_55:
        free(v24);
        goto LABEL_20;
      }

      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_stack_replace_protocol_with_handle";
        _os_log_impl(&dword_181A5C000, v25, v30, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v35 = v48;
      if (os_log_type_enabled(v25, v48))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_stack_replace_protocol_with_handle";
        _os_log_impl( &dword_181A5C000,  v25,  v35,  "%{public}s called with null stack, backtrace limit exceeded",  buf,  0xCu);
      }
    }

BOOL __nw_protocol_stack_replace_protocol_with_handle_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(v4);
  uint64_t v6 = *(void *)(a1 + 56);
  if (protocol_handle == v6)
  {
    BOOL v7 = nw_array_create();
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;

    id v10 = *(unsigned __int8 **)(*(void *)(a1 + 32) + 8LL);
    v14[0] = MEMORY[0x1895F87A8];
    v14[1] = 3221225472LL;
    v14[2] = __nw_protocol_stack_replace_protocol_with_handle_block_invoke_2;
    v14[3] = &unk_189BC1378;
    id v15 = v4;
    __int128 v13 = *(_OWORD *)(a1 + 40);
    id v11 = (id)v13;
    __int128 v16 = v13;
    nw_array_apply(v10, (uint64_t)v14);
  }

  return protocol_handle != v6;
}

BOOL __nw_protocol_stack_replace_protocol_with_handle_block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(v4);
  uint64_t v6 = *(void *)(a1 + 56);
  if (protocol_handle == v6)
  {
    BOOL v7 = nw_array_create();
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;

    id v10 = *(unsigned __int8 **)(*(void *)(a1 + 32) + 16LL);
    v14[0] = MEMORY[0x1895F87A8];
    v14[1] = 3221225472LL;
    v14[2] = __nw_protocol_stack_replace_protocol_with_handle_block_invoke_4;
    v14[3] = &unk_189BC1378;
    id v15 = v4;
    __int128 v13 = *(_OWORD *)(a1 + 40);
    id v11 = (id)v13;
    __int128 v16 = v13;
    nw_array_apply(v10, (uint64_t)v14);
  }

  return protocol_handle != v6;
}

uint64_t __nw_protocol_stack_replace_protocol_with_handle_block_invoke_4(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  nw_protocol_definition_t v5 = v4;
  if ((id)a1[4] == v4) {
    nw_protocol_definition_t v5 = (void *)a1[5];
  }
  nw_array_append(*(void *)(*(void *)(a1[6] + 8LL) + 40LL), v5);

  return 1LL;
}

uint64_t __nw_protocol_stack_replace_protocol_with_handle_block_invoke_2(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  nw_protocol_definition_t v5 = v4;
  if ((id)a1[4] == v4) {
    nw_protocol_definition_t v5 = (void *)a1[5];
  }
  nw_array_append(*(void *)(*(void *)(a1[6] + 8LL) + 40LL), v5);

  return 1LL;
}

uint64_t nw_protocol_stack_is_equal(void *a1, void *a2, int a3)
{
  nw_protocol_definition_t v5 = a1;
  uint64_t v6 = a2;
  BOOL v7 = v6;
  uint64_t is_equal = v5 == v6;
  if (v5 != v6 && v5 && v6)
  {
    uint64_t v9 = v5[1];
    uint64_t v10 = v6[1];
    if (v9 == v10) {
      goto LABEL_9;
    }
    uint64_t is_equal = 0LL;
    if (v9 && v10)
    {
      if (*(void *)(v9 + 24) - *(void *)(v9 + 16) != *(void *)(v10 + 24) - *(void *)(v10 + 16)) {
        goto LABEL_17;
      }
      uint64_t v24 = 0LL;
      id v25 = &v24;
      uint64_t v26 = 0x2020000000LL;
      char v27 = 0;
      v20[0] = MEMORY[0x1895F87A8];
      v20[1] = 3221225472LL;
      id v20[2] = __nw_protocol_stack_is_equal_block_invoke;
      v20[3] = &unk_189BB8CB8;
      int v23 = a3;
      uint64_t v21 = v6;
      uint64_t v22 = &v24;
      nw_array_apply((unsigned __int8 *)v9, (uint64_t)v20);
      int v11 = *((unsigned __int8 *)v25 + 24);

      _Block_object_dispose(&v24, 8);
      uint64_t is_equal = 0LL;
      if (!v11)
      {
LABEL_9:
        uint64_t v12 = v5[2];
        uint64_t v13 = v7[2];
        if (v12 == v13) {
          goto LABEL_21;
        }
        uint64_t is_equal = 0LL;
        if (v12 && v13)
        {
          if (*(void *)(v12 + 24) - *(void *)(v12 + 16) != *(void *)(v13 + 24) - *(void *)(v13 + 16)) {
            goto LABEL_17;
          }
          uint64_t v24 = 0LL;
          id v25 = &v24;
          uint64_t v26 = 0x2020000000LL;
          char v27 = 0;
          v16[0] = MEMORY[0x1895F87A8];
          v16[1] = 3221225472LL;
          v16[2] = __nw_protocol_stack_is_equal_block_invoke_2;
          v16[3] = &unk_189BB8CB8;
          int v19 = a3;
          id v17 = v7;
          os_log_type_t v18 = &v24;
          nw_array_apply((unsigned __int8 *)v12, (uint64_t)v16);
          int v14 = *((unsigned __int8 *)v25 + 24);

          _Block_object_dispose(&v24, 8);
          uint64_t is_equal = 0LL;
          if (!v14)
          {
LABEL_21:
            if (nw_protocol_option_is_equal((void *)v5[3], (void *)v7[3])
              && nw_protocol_option_is_equal((void *)v5[5], (void *)v7[5]))
            {
              uint64_t is_equal = nw_protocol_option_is_equal((void *)v5[6], (void *)v7[6]);
              goto LABEL_18;
            }

void sub_181F231E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_stack_is_equal_block_invoke(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  nw_array_get_object_at_index(*(void *)(*(void *)(a1 + 32) + 8LL), a2);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t is_equal = nw_protocol_option_is_equal(v5, v6);
  if ((is_equal & 1) == 0) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }

  return is_equal;
}

void sub_181F23278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_stack_is_equal_block_invoke_2(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  nw_array_get_object_at_index(*(void *)(*(void *)(a1 + 32) + 16LL), a2);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t is_equal = nw_protocol_option_is_equal(v5, v6);
  if ((is_equal & 1) == 0) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }

  return is_equal;
}

void sub_181F23308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_stack_get_hash(void *a1)
{
  nw_protocol_stack_t v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v12 = 0LL;
    uint64_t v13 = &v12;
    uint64_t v14 = 0x2020000000LL;
    uint64_t v15 = 0LL;
    id v3 = v1[1];
    uint64_t v4 = MEMORY[0x1895F87A8];
    if (v3)
    {
      v11[0] = MEMORY[0x1895F87A8];
      v11[1] = 3221225472LL;
      v11[2] = __nw_protocol_stack_get_hash_block_invoke;
      v11[3] = &unk_189BC50D0;
      void v11[4] = &v12;
      nw_array_apply(v3, (uint64_t)v11);
    }

    id v5 = v2[2];
    if (v5)
    {
      v10[0] = v4;
      v10[1] = 3221225472LL;
      v10[2] = __nw_protocol_stack_get_hash_block_invoke_2;
      v10[3] = &unk_189BC50D0;
      void v10[4] = &v12;
      nw_array_apply(v5, (uint64_t)v10);
    }

    uint64_t hash = nw_protocol_options_get_hash(v2[3]);
    v13[3] ^= hash;
    uint64_t v7 = nw_protocol_options_get_hash(v2[6]);
    uint64_t v8 = v13[3] ^ v7;
    v13[3] = v8;
    _Block_object_dispose(&v12, 8);
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  return v8;
}

void sub_181F23424(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_stack_get_hash_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) ^= nw_protocol_options_get_hash(v4);

  return 1LL;
}

void sub_181F23484(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_stack_get_hash_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) ^= nw_protocol_options_get_hash(v4);

  return 1LL;
}

void sub_181F234D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *nw_parameters_copy_description(NWConcrete_nw_parameters *a1)
{
  return nw_parameters_copy_description_internal(a1, 0);
}

id *nw_parameters_create_empty_stack()
{
  id v0 = objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters);
  nw_protocol_stack_t v1 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_protocol_stack);
  uint64_t v2 = -[NWConcrete_nw_parameters initWithStack:]((id *)&v0->super.isa, v1);

  return v2;
}

void sub_181F23540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_parameters_t nw_parameters_create_application_service(void)
{
  nw_parameters_t v0 = nw_parameters_create();
  nw_parameters_set_always_open_listener_socket(v0, 0);
  nw_parameters_set_data_mode(v0, 2u);
  *(_WORD *)(*((void *)v0 + 13) + 100LL) |= 0x100u;
  return v0;
}

void sub_181F23598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_always_open_listener_socket(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x8000000LL;
    if (!a2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFF7FFFFFFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v17 = "nw_parameters_set_always_open_listener_socket";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        id v17 = "nw_parameters_set_always_open_listener_socket";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          id v17 = "nw_parameters_set_always_open_listener_socket";
          __int16 v18 = 2082;
          int v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        id v17 = "nw_parameters_set_always_open_listener_socket";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        id v17 = "nw_parameters_set_always_open_listener_socket";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_data_mode(void *a1, unsigned int a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v26 = "nw_parameters_set_data_mode";
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_parameters_set_data_mode";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v26 = "nw_parameters_set_data_mode";
          __int16 v27 = 2082;
          os_log_type_t v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_48:
        if (!v10) {
          goto LABEL_14;
        }
        goto LABEL_49;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_parameters_set_data_mode";
        _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_parameters_set_data_mode";
        _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181F23D90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_parameters_t nw_parameters_create_secure_tcp( nw_parameters_configure_protocol_block_t configure_tls, nw_parameters_configure_protocol_block_t configure_tcp)
{
  uint64_t v65 = *MEMORY[0x1895F89C0];
  id v3 = configure_tls;
  id v4 = configure_tcp;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    BOOL v40 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v62 = "nw_parameters_create_secure_tcp";
    uint64_t v41 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v59 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v43 = type;
      if (os_log_type_enabled(v42, type))
      {
        *(_DWORD *)buf = 136446210;
        id v62 = "nw_parameters_create_secure_tcp";
        _os_log_impl(&dword_181A5C000, v42, v43, "%{public}s called with null configure_tls", buf, 0xCu);
      }

      goto LABEL_131;
    }

    if (!v59)
    {
      __nwlog_obj();
      BOOL v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v56 = type;
      if (os_log_type_enabled(v42, type))
      {
        *(_DWORD *)buf = 136446210;
        id v62 = "nw_parameters_create_secure_tcp";
        _os_log_impl( &dword_181A5C000,  v42,  v56,  "%{public}s called with null configure_tls, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_131;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v49 = type;
    BOOL v50 = os_log_type_enabled(v42, type);
    if (!backtrace_string)
    {
      if (v50)
      {
        *(_DWORD *)buf = 136446210;
        id v62 = "nw_parameters_create_secure_tcp";
        _os_log_impl(&dword_181A5C000, v42, v49, "%{public}s called with null configure_tls, no backtrace", buf, 0xCu);
      }

      goto LABEL_131;
    }

    if (v50)
    {
      *(_DWORD *)buf = 136446466;
      id v62 = "nw_parameters_create_secure_tcp";
      __int16 v63 = 2082;
      BOOL v64 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v42,  v49,  "%{public}s called with null configure_tls, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_107;
  }

  if (!v4)
  {
    __nwlog_obj();
    id v44 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v62 = "nw_parameters_create_secure_tcp";
    uint64_t v41 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v59 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v45 = type;
      if (os_log_type_enabled(v42, type))
      {
        *(_DWORD *)buf = 136446210;
        id v62 = "nw_parameters_create_secure_tcp";
        _os_log_impl(&dword_181A5C000, v42, v45, "%{public}s called with null configure_tcp", buf, 0xCu);
      }

      goto LABEL_131;
    }

    if (!v59)
    {
      __nwlog_obj();
      BOOL v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v57 = type;
      if (os_log_type_enabled(v42, type))
      {
        *(_DWORD *)buf = 136446210;
        id v62 = "nw_parameters_create_secure_tcp";
        _os_log_impl( &dword_181A5C000,  v42,  v57,  "%{public}s called with null configure_tcp, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_131;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v51 = type;
    BOOL v52 = os_log_type_enabled(v42, type);
    if (!backtrace_string)
    {
      if (v52)
      {
        *(_DWORD *)buf = 136446210;
        id v62 = "nw_parameters_create_secure_tcp";
        _os_log_impl(&dword_181A5C000, v42, v51, "%{public}s called with null configure_tcp, no backtrace", buf, 0xCu);
      }

      goto LABEL_131;
    }

    if (v52)
    {
      *(_DWORD *)buf = 136446466;
      id v62 = "nw_parameters_create_secure_tcp";
      __int16 v63 = 2082;
      BOOL v64 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v42,  v51,  "%{public}s called with null configure_tcp, dumping backtrace:%{public}s",  buf,  0x16u);
    }

void sub_181F24CE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_tfo(void *a1, BOOL a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = nw_parameters_copy_tcp_options(v3, 1);
    nw_parameters_t v6 = v5;
    if (v5)
    {
      uint64_t v7 = 4LL;
      if (!a2) {
        uint64_t v7 = 0LL;
      }
      *((void *)&v4->value + 11) = *((void *)&v4->value + 11) & 0xFFFFFFFFFFFFFFFBLL | v7;
      nw_tcp_options_set_enable_fast_open(v5, a2);
    }

    goto LABEL_7;
  }

  __nwlog_obj();
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v19 = "nw_parameters_set_tfo";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_parameters_set_tfo";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v19 = "nw_parameters_set_tfo";
          __int16 v20 = 2082;
          os_log_type_t v21 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_parameters_set_tfo";
        _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_parameters_set_tfo";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F24FF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

OS_nw_protocol_options *nw_parameters_copy_tcp_options(NWConcrete_nw_parameters *a1, int a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  default_stack = v3->default_stack;
  if (default_stack)
  {
    transport_protocol = default_stack->transport_protocol;
    if (transport_protocol && (nw_parameters_t v6 = transport_protocol, v7 = v6[1], v6, v7))
    {
      id v8 = (id)g_tcp_definition;
      BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v7, (uint64_t)v8);

      if (!is_equal_unsafe)
      {
        uint64_t v10 = 0LL;
LABEL_16:

        goto LABEL_17;
      }
    }

    else
    {
      if (a2)
      {
        options = nw_protocol_create_options((void *)g_tcp_definition);
        os_log_type_t v12 = v3->default_stack;
        os_log_type_t v13 = v12->transport_protocol;
        v12->transport_protocol = (OS_nw_protocol_options *)options;

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v14 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v27 = "nw_parameters_copy_tcp_options";
          _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_DEFAULT,  "%{public}s TCP-specific parameter set without transport protocol specified, inferring TCP",  buf,  0xCu);
        }
      }

      id v7 = 0LL;
    }

    uint64_t v10 = v3->default_stack->transport_protocol;
    goto LABEL_16;
  }

  __nwlog_obj();
  char v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v27 = "nw_parameters_copy_tcp_options";
  BOOL v17 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (__nwlog_fault(v17, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_parameters_copy_tcp_options";
        _os_log_impl(&dword_181A5C000, v18, v19, "%{public}s called with null parameters->default_stack", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v27 = "nw_parameters_copy_tcp_options";
          __int16 v28 = 2082;
          os_log_type_t v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v18,  v21,  "%{public}s called with null parameters->default_stack, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_34;
      }

      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_parameters_copy_tcp_options";
        _os_log_impl( &dword_181A5C000,  v18,  v21,  "%{public}s called with null parameters->default_stack, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_parameters_copy_tcp_options";
        _os_log_impl( &dword_181A5C000,  v18,  v23,  "%{public}s called with null parameters->default_stack, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F253FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_parameters_add_protocol_stack_member_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (*(_DWORD *)(a1 + 48) == a2) {
    nw_array_append(*(void *)(a1 + 32), *(void **)(a1 + 40));
  }
  nw_array_append(*(void *)(a1 + 32), v5);

  return 1LL;
}

uint64_t __nw_parameters_add_protocol_stack_member_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (*(_DWORD *)(a1 + 48) == a2) {
    nw_array_append(*(void *)(a1 + 32), *(void **)(a1 + 40));
  }
  nw_array_append(*(void *)(a1 + 32), v5);

  return 1LL;
}

nw_parameters_t nw_parameters_create_secure_udp( nw_parameters_configure_protocol_block_t configure_dtls, nw_parameters_configure_protocol_block_t configure_udp)
{
  uint64_t v65 = *MEMORY[0x1895F89C0];
  id v3 = configure_dtls;
  id v4 = configure_udp;
  id v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    BOOL v40 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v62 = "nw_parameters_create_secure_udp";
    uint64_t v41 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v59 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v43 = type;
      if (os_log_type_enabled(v42, type))
      {
        *(_DWORD *)buf = 136446210;
        id v62 = "nw_parameters_create_secure_udp";
        _os_log_impl(&dword_181A5C000, v42, v43, "%{public}s called with null configure_dtls", buf, 0xCu);
      }

      goto LABEL_129;
    }

    if (!v59)
    {
      __nwlog_obj();
      BOOL v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v56 = type;
      if (os_log_type_enabled(v42, type))
      {
        *(_DWORD *)buf = 136446210;
        id v62 = "nw_parameters_create_secure_udp";
        _os_log_impl( &dword_181A5C000,  v42,  v56,  "%{public}s called with null configure_dtls, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_129;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v49 = type;
    BOOL v50 = os_log_type_enabled(v42, type);
    if (!backtrace_string)
    {
      if (v50)
      {
        *(_DWORD *)buf = 136446210;
        id v62 = "nw_parameters_create_secure_udp";
        _os_log_impl(&dword_181A5C000, v42, v49, "%{public}s called with null configure_dtls, no backtrace", buf, 0xCu);
      }

      goto LABEL_129;
    }

    if (v50)
    {
      *(_DWORD *)buf = 136446466;
      id v62 = "nw_parameters_create_secure_udp";
      __int16 v63 = 2082;
      BOOL v64 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v42,  v49,  "%{public}s called with null configure_dtls, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_105;
  }

  if (!v4)
  {
    __nwlog_obj();
    id v44 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v62 = "nw_parameters_create_secure_udp";
    uint64_t v41 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v59 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v45 = type;
      if (os_log_type_enabled(v42, type))
      {
        *(_DWORD *)buf = 136446210;
        id v62 = "nw_parameters_create_secure_udp";
        _os_log_impl(&dword_181A5C000, v42, v45, "%{public}s called with null configure_udp", buf, 0xCu);
      }

      goto LABEL_129;
    }

    if (!v59)
    {
      __nwlog_obj();
      BOOL v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v57 = type;
      if (os_log_type_enabled(v42, type))
      {
        *(_DWORD *)buf = 136446210;
        id v62 = "nw_parameters_create_secure_udp";
        _os_log_impl( &dword_181A5C000,  v42,  v57,  "%{public}s called with null configure_udp, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_129;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v51 = type;
    BOOL v52 = os_log_type_enabled(v42, type);
    if (!backtrace_string)
    {
      if (v52)
      {
        *(_DWORD *)buf = 136446210;
        id v62 = "nw_parameters_create_secure_udp";
        _os_log_impl(&dword_181A5C000, v42, v51, "%{public}s called with null configure_udp, no backtrace", buf, 0xCu);
      }

      goto LABEL_129;
    }

    if (v52)
    {
      *(_DWORD *)buf = 136446466;
      id v62 = "nw_parameters_create_secure_udp";
      __int16 v63 = 2082;
      BOOL v64 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v42,  v51,  "%{public}s called with null configure_udp, dumping backtrace:%{public}s",  buf,  0x16u);
    }

void sub_181F263F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_parameters *nw_parameters_create_quic_connection(void *a1)
{
  uint64_t v56 = *MEMORY[0x1895F89C0];
  nw_protocol_stack_t v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    __int16 v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v53 = "nw_parameters_create_quic_connection";
    os_log_type_t v29 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v53 = "nw_parameters_create_quic_connection";
        _os_log_impl(&dword_181A5C000, v30, v31, "%{public}s called with null configure_quic_connection", buf, 0xCu);
      }
    }

    else if (v50)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v35 = type;
      BOOL v36 = os_log_type_enabled(v30, type);
      if (backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v53 = "nw_parameters_create_quic_connection";
          __int16 v54 = 2082;
          BOOL v55 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v30,  v35,  "%{public}s called with null configure_quic_connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_98;
      }

      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v53 = "nw_parameters_create_quic_connection";
        _os_log_impl( &dword_181A5C000,  v30,  v35,  "%{public}s called with null configure_quic_connection, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v44 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v53 = "nw_parameters_create_quic_connection";
        _os_log_impl( &dword_181A5C000,  v30,  v44,  "%{public}s called with null configure_quic_connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181F27118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_parameters *nw_parameters_create_quic_stream(void *a1, void *a2)
{
  uint64_t v70 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  nw_parameters_t v5 = v4;
  if (v3)
  {
    if (!v4)
    {
      __nwlog_obj();
      BOOL v36 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      unint64_t v67 = "nw_parameters_create_quic_stream";
      os_log_type_t v33 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v64 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v37 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v67 = "nw_parameters_create_quic_stream";
          _os_log_impl(&dword_181A5C000, v34, v37, "%{public}s called with null configure_quic_connection", buf, 0xCu);
        }

        goto LABEL_133;
      }

      if (!v64)
      {
        __nwlog_obj();
        os_log_type_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v57 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v67 = "nw_parameters_create_quic_stream";
          _os_log_impl( &dword_181A5C000,  v34,  v57,  "%{public}s called with null configure_quic_connection, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_133;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v46 = type;
      BOOL v47 = os_log_type_enabled(v34, type);
      if (!backtrace_string)
      {
        if (v47)
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v67 = "nw_parameters_create_quic_stream";
          _os_log_impl( &dword_181A5C000,  v34,  v46,  "%{public}s called with null configure_quic_connection, no backtrace",  buf,  0xCu);
        }

        goto LABEL_133;
      }

      if (v47)
      {
        *(_DWORD *)buf = 136446466;
        unint64_t v67 = "nw_parameters_create_quic_stream";
        __int16 v68 = 2082;
        uint64_t v69 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v34,  v46,  "%{public}s called with null configure_quic_connection, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_103;
    }

    if (v3 == (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_18956)
    {
      __nwlog_obj();
      os_log_type_t v38 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      unint64_t v67 = "nw_parameters_create_quic_stream";
      os_log_type_t v33 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v64 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v39 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v67 = "nw_parameters_create_quic_stream";
          _os_log_impl( &dword_181A5C000,  v34,  v39,  "%{public}s called with null (configure_quic_stream != (_nw_parameters_configure_protocol_disable))",  buf,  0xCu);
        }

        goto LABEL_133;
      }

      if (!v64)
      {
        __nwlog_obj();
        os_log_type_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v58 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v67 = "nw_parameters_create_quic_stream";
          _os_log_impl( &dword_181A5C000,  v34,  v58,  "%{public}s called with null (configure_quic_stream != (_nw_parameters_configure_protocol_disable)), backtrac e limit exceeded",  buf,  0xCu);
        }

        goto LABEL_133;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v48 = type;
      BOOL v49 = os_log_type_enabled(v34, type);
      if (!backtrace_string)
      {
        if (v49)
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v67 = "nw_parameters_create_quic_stream";
          _os_log_impl( &dword_181A5C000,  v34,  v48,  "%{public}s called with null (configure_quic_stream != (_nw_parameters_configure_protocol_disable)), no backtrace",  buf,  0xCu);
        }

        goto LABEL_133;
      }

      if (v49)
      {
        *(_DWORD *)buf = 136446466;
        unint64_t v67 = "nw_parameters_create_quic_stream";
        __int16 v68 = 2082;
        uint64_t v69 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v34,  v48,  "%{public}s called with null (configure_quic_stream != (_nw_parameters_configure_protocol_disable)), dumping ba cktrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_103;
    }

    if (v4 != (void (**)(id, id))&__block_literal_global_18956)
    {
      if (networkd_settings_get_BOOL((const char *)nw_setting_disable_quic))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        nw_parameters_t v6 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v67 = "nw_parameters_create_quic_stream";
          _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_ERROR,  "%{public}s QUIC is disabled, cannot create QUIC stream",  buf,  0xCu);
        }

        goto LABEL_9;
      }

      nw_parameters_t v8 = nw_parameters_create();
      if (v8)
      {
        if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
          dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55294);
        }
        options = nw_protocol_create_options((void *)nw_protocol_copy_quic_stream_definition::quic_definition);
        if (options)
        {
          uint64_t v10 = (id *)*((id *)v8 + 19);
          id v11 = v10;
          if (v10)
          {
            objc_storeStrong(v10 + 3, options);
            if (v5 != (void (**)(id, id))&__block_literal_global_91)
            {
              id v12 = nw_quic_stream_copy_shared_connection_options(options);
              v5[2](v5, v12);
            }

            *((_BYTE *)v8 + 92) = 2;
            *((void *)v8 + 12) |= 0x400000uLL;
            id v7 = v8;
LABEL_20:

LABEL_61:
            goto LABEL_62;
          }

          __nwlog_obj();
          BOOL v52 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          unint64_t v67 = "nw_parameters_create_quic_stream";
          uint64_t v53 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v64 = 0;
          if (__nwlog_fault(v53, &type, &v64))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              __int16 v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v55 = type;
              if (os_log_type_enabled(v54, type))
              {
                *(_DWORD *)buf = 136446210;
                unint64_t v67 = "nw_parameters_create_quic_stream";
                _os_log_impl(&dword_181A5C000, v54, v55, "%{public}s called with null stack", buf, 0xCu);
              }
            }

            else if (v64)
            {
              uint64_t v60 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              __int16 v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v61 = type;
              BOOL v62 = os_log_type_enabled(v54, type);
              if (v60)
              {
                if (v62)
                {
                  *(_DWORD *)buf = 136446466;
                  unint64_t v67 = "nw_parameters_create_quic_stream";
                  __int16 v68 = 2082;
                  uint64_t v69 = v60;
                  _os_log_impl( &dword_181A5C000,  v54,  v61,  "%{public}s called with null stack, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v60);
                goto LABEL_147;
              }

              if (v62)
              {
                *(_DWORD *)buf = 136446210;
                unint64_t v67 = "nw_parameters_create_quic_stream";
                _os_log_impl(&dword_181A5C000, v54, v61, "%{public}s called with null stack, no backtrace", buf, 0xCu);
              }
            }

            else
            {
              __nwlog_obj();
              __int16 v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v63 = type;
              if (os_log_type_enabled(v54, type))
              {
                *(_DWORD *)buf = 136446210;
                unint64_t v67 = "nw_parameters_create_quic_stream";
                _os_log_impl( &dword_181A5C000,  v54,  v63,  "%{public}s called with null stack, backtrace limit exceeded",  buf,  0xCu);
              }
            }
          }

void sub_181F28250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_parameters_t nw_parameters_create_quic(nw_parameters_configure_protocol_block_t configure_quic)
{
  uint64_t v61 = *MEMORY[0x1895F89C0];
  nw_parameters_configure_protocol_block_t v1 = configure_quic;
  uint64_t v2 = (void (**)(void, void))v1;
  if (v1)
  {
    if (v1 == &__block_literal_global_18956)
    {
      __nwlog_obj();
      os_log_type_t v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v58 = "nw_parameters_create_quic";
      os_log_type_t v29 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v55 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v58 = "nw_parameters_create_quic";
          _os_log_impl( &dword_181A5C000,  v30,  v33,  "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_disable))",  buf,  0xCu);
        }

        goto LABEL_112;
      }

      if (!v55)
      {
        __nwlog_obj();
        os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v49 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v58 = "nw_parameters_create_quic";
          _os_log_impl( &dword_181A5C000,  v30,  v49,  "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_112;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v40 = type;
      BOOL v41 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v58 = "nw_parameters_create_quic";
          _os_log_impl( &dword_181A5C000,  v30,  v40,  "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_disable)), no backtrace",  buf,  0xCu);
        }

        goto LABEL_112;
      }

      if (v41)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v58 = "nw_parameters_create_quic";
        __int16 v59 = 2082;
        uint64_t v60 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v30,  v40,  "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_88;
    }

    if (v1 != &__block_literal_global_91)
    {
      if (networkd_settings_get_BOOL((const char *)nw_setting_disable_quic))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v3 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v58 = "nw_parameters_create_quic";
          _os_log_impl( &dword_181A5C000,  v3,  OS_LOG_TYPE_ERROR,  "%{public}s QUIC is disabled, cannot create QUIC parameters",  buf,  0xCu);
        }

        goto LABEL_8;
      }

      nw_parameters_t v5 = nw_parameters_create();
      if (v5)
      {
        if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
          dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55294);
        }
        options = nw_protocol_create_options((void *)nw_protocol_copy_quic_stream_definition::quic_definition);
        if (options)
        {
          id v7 = (id *)*((id *)v5 + 19);
          nw_parameters_t v8 = v7;
          if (v7)
          {
            objc_storeStrong(v7 + 3, options);
            ((void (**)(void, NWConcrete_nw_protocol_options *))v2)[2](v2, options);
            *((_BYTE *)v5 + 92) = 2;
            *((void *)v5 + 12) |= 0x400000uLL;
            id v4 = v5;
LABEL_15:

LABEL_56:
            goto LABEL_57;
          }

          __nwlog_obj();
          BOOL v44 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          os_log_type_t v58 = "nw_parameters_create_quic";
          os_log_type_t v45 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v55 = 0;
          if (__nwlog_fault(v45, &type, &v55))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              os_log_type_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v47 = type;
              if (os_log_type_enabled(v46, type))
              {
                *(_DWORD *)buf = 136446210;
                os_log_type_t v58 = "nw_parameters_create_quic";
                _os_log_impl(&dword_181A5C000, v46, v47, "%{public}s called with null stack", buf, 0xCu);
              }
            }

            else if (v55)
            {
              BOOL v51 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              os_log_type_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v52 = type;
              BOOL v53 = os_log_type_enabled(v46, type);
              if (v51)
              {
                if (v53)
                {
                  *(_DWORD *)buf = 136446466;
                  os_log_type_t v58 = "nw_parameters_create_quic";
                  __int16 v59 = 2082;
                  uint64_t v60 = v51;
                  _os_log_impl( &dword_181A5C000,  v46,  v52,  "%{public}s called with null stack, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v51);
                goto LABEL_126;
              }

              if (v53)
              {
                *(_DWORD *)buf = 136446210;
                os_log_type_t v58 = "nw_parameters_create_quic";
                _os_log_impl(&dword_181A5C000, v46, v52, "%{public}s called with null stack, no backtrace", buf, 0xCu);
              }
            }

            else
            {
              __nwlog_obj();
              os_log_type_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v54 = type;
              if (os_log_type_enabled(v46, type))
              {
                *(_DWORD *)buf = 136446210;
                os_log_type_t v58 = "nw_parameters_create_quic";
                _os_log_impl( &dword_181A5C000,  v46,  v54,  "%{public}s called with null stack, backtrace limit exceeded",  buf,  0xCu);
              }
            }
          }

void sub_181F29168(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_migrating_peer_to_peer(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(_DWORD *)(*((void *)v1 + 13) + 103LL) = 2;
    *(_WORD *)(*((void *)v1 + 13) + 108LL) |= 0x20u;
    *((void *)v1 + 12) |= 0x10000004000uLL;
    goto LABEL_3;
  }

  __nwlog_obj();
  id v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v14 = "nw_parameters_set_migrating_peer_to_peer";
  id v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      nw_parameters_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v14 = "nw_parameters_set_migrating_peer_to_peer";
        _os_log_impl(&dword_181A5C000, v5, v6, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      nw_parameters_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v14 = "nw_parameters_set_migrating_peer_to_peer";
          __int16 v15 = 2082;
          os_log_type_t v16 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v8,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v14 = "nw_parameters_set_migrating_peer_to_peer";
        _os_log_impl(&dword_181A5C000, v5, v8, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      nw_parameters_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v14 = "nw_parameters_set_migrating_peer_to_peer";
        _os_log_impl( &dword_181A5C000,  v5,  v10,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_multipath_service(nw_parameters_t parameters, nw_multipath_service_t multipath_service)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = parameters;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    *(_DWORD *)(*((void *)v3 + 13) + 103LL) = multipath_service;
    goto LABEL_3;
  }

  __nwlog_obj();
  nw_parameters_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_set_multipath_service";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_multipath_service";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_set_multipath_service";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_multipath_service";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_multipath_service";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_no_fallback(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      __int16 v9 = 32;
    }
    else {
      __int16 v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFFFFDF;
    *(_WORD *)uint64_t v6 = v10 | v9;
    *(_BYTE *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }

  __nwlog_obj();
  BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v22 = "nw_parameters_set_no_fallback";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_no_fallback";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_parameters_set_no_fallback";
          __int16 v23 = 2082;
          os_log_type_t v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_no_fallback";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_no_fallback";
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_local_only(nw_parameters_t parameters, BOOL local_only)
{
  BOOL v2 = local_only;
  uint64_t v20 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = parameters;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x4000LL;
    if (!v2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFFFBFFFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_parameters_set_local_only";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_local_only";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_parameters_set_local_only";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_local_only";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_local_only";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_stricter_path_scoping(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x10000000000LL;
    if (!a2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFEFFFFFFFFFFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_parameters_set_stricter_path_scoping";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_stricter_path_scoping";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_parameters_set_stricter_path_scoping";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_stricter_path_scoping";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_stricter_path_scoping";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

nw_parameters_t nw_parameters_create_peer_to_peer_migrating_quic(void *a1)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null configure_quic", buf, 0xCu);
      }

      goto LABEL_53;
    }

    if (!v23)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
        _os_log_impl( &dword_181A5C000,  v7,  v20,  "%{public}s called with null configure_quic, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_53;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v14 = type;
    BOOL v15 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
        _os_log_impl(&dword_181A5C000, v7, v14, "%{public}s called with null configure_quic, no backtrace", buf, 0xCu);
      }

      goto LABEL_53;
    }

    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
      __int16 v27 = 2082;
      os_log_type_t v28 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v7,  v14,  "%{public}s called with null configure_quic, dumping backtrace:%{public}s",  buf,  0x16u);
    }

void sub_181F2A5B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_parameters *nw_parameters_create_quic_stream_with_tls_fallback( void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v153 = *MEMORY[0x1895F89C0];
  id v9 = a1;
  os_log_type_t v10 = a2;
  os_log_type_t v11 = a3;
  id v145 = a4;
  os_log_type_t v12 = a5;
  __int16 v146 = v12;
  __int16 v144 = v9;
  if (v9)
  {
    if (v12)
    {
      if (v10)
      {
        if (v11)
        {
          if (v10 == (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_18956)
          {
            __nwlog_obj();
            uint64_t v101 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            os_log_type_t v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
            id v92 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v147 = 0;
            if (__nwlog_fault(v92, &type, &v147))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                unint64_t v93 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v102 = type;
                if (os_log_type_enabled(v93, type))
                {
                  *(_DWORD *)buf = 136446210;
                  os_log_type_t v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                  _os_log_impl( &dword_181A5C000,  v93,  v102,  "%{public}s called with null (configure_quic_stream != (_nw_parameters_configure_protocol_disable))",  buf,  0xCu);
                }

                goto LABEL_255;
              }

              if (!v147)
              {
                __nwlog_obj();
                unint64_t v93 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v131 = type;
                if (os_log_type_enabled(v93, type))
                {
                  *(_DWORD *)buf = 136446210;
                  os_log_type_t v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                  _os_log_impl( &dword_181A5C000,  v93,  v131,  "%{public}s called with null (configure_quic_stream != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded",  buf,  0xCu);
                }

                goto LABEL_255;
              }

              backtrace_string = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              uint64_t v108 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v117 = type;
              BOOL v118 = os_log_type_enabled(v108, type);
              if (backtrace_string)
              {
                if (v118)
                {
                  *(_DWORD *)buf = 136446466;
                  os_log_type_t v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                  __int16 v151 = 2082;
                  os_log_type_t v152 = backtrace_string;
                  _os_log_impl( &dword_181A5C000,  v108,  v117,  "%{public}s called with null (configure_quic_stream != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s",  buf,  0x16u);
                }

                goto LABEL_226;
              }

              if (v118)
              {
                *(_DWORD *)buf = 136446210;
                os_log_type_t v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                _os_log_impl( &dword_181A5C000,  v108,  v117,  "%{public}s called with null (configure_quic_stream != (_nw_parameters_configure_protocol_disable)), no backtrace",  buf,  0xCu);
              }

              goto LABEL_281;
            }
          }

          else if (v11 == (void (**)(id, id))&__block_literal_global_18956)
          {
            __nwlog_obj();
            int v103 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            os_log_type_t v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
            id v92 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            char v147 = 0;
            if (__nwlog_fault(v92, &type, &v147))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                unint64_t v93 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v104 = type;
                if (os_log_type_enabled(v93, type))
                {
                  *(_DWORD *)buf = 136446210;
                  os_log_type_t v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                  _os_log_impl( &dword_181A5C000,  v93,  v104,  "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable))",  buf,  0xCu);
                }

                goto LABEL_255;
              }

              if (!v147)
              {
                __nwlog_obj();
                unint64_t v93 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v132 = type;
                if (os_log_type_enabled(v93, type))
                {
                  *(_DWORD *)buf = 136446210;
                  os_log_type_t v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                  _os_log_impl( &dword_181A5C000,  v93,  v132,  "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded",  buf,  0xCu);
                }

                goto LABEL_255;
              }

              backtrace_string = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              uint64_t v108 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v119 = type;
              BOOL v120 = os_log_type_enabled(v108, type);
              if (backtrace_string)
              {
                if (v120)
                {
                  *(_DWORD *)buf = 136446466;
                  os_log_type_t v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                  __int16 v151 = 2082;
                  os_log_type_t v152 = backtrace_string;
                  _os_log_impl( &dword_181A5C000,  v108,  v119,  "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s",  buf,  0x16u);
                }

                goto LABEL_226;
              }

              if (v120)
              {
                *(_DWORD *)buf = 136446210;
                os_log_type_t v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                _os_log_impl( &dword_181A5C000,  v108,  v119,  "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), no backtrace",  buf,  0xCu);
              }

LABEL_288:
                    if (v124) {
                      free(v124);
                    }
                    os_log_type_t v33 = 0LL;
                    goto LABEL_152;
                  }

                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  id v46 = (id)gLogObj;
                  *(_DWORD *)buf = 136446210;
                  os_log_type_t v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                  os_log_type_t v47 = (char *)_os_log_send_and_compose_impl();

                  os_log_type_t type = OS_LOG_TYPE_ERROR;
                  char v147 = 0;
                  if (__nwlog_fault(v47, &type, &v147))
                  {
                    if (type == OS_LOG_TYPE_FAULT)
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      os_log_type_t v48 = (os_log_s *)(id)gLogObj;
                      os_log_type_t v49 = type;
                      if (os_log_type_enabled(v48, type))
                      {
                        *(_DWORD *)buf = 136446210;
                        os_log_type_t v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                        _os_log_impl( &dword_181A5C000,  v48,  v49,  "%{public}s nw_quic_create_stream_options failed",  buf,  0xCu);
                      }
                    }

                    else if (v147)
                    {
                      os_log_type_t v58 = __nw_create_backtrace_string();
                      if (v58)
                      {
                        __int16 v59 = (char *)v58;
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        uint64_t v60 = (os_log_s *)(id)gLogObj;
                        os_log_type_t v61 = type;
                        if (os_log_type_enabled(v60, type))
                        {
                          *(_DWORD *)buf = 136446466;
                          os_log_type_t v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                          __int16 v151 = 2082;
                          os_log_type_t v152 = v59;
                          _os_log_impl( &dword_181A5C000,  v60,  v61,  "%{public}s nw_quic_create_stream_options failed, dumping backtrace:%{public}s",  buf,  0x16u);
                        }

                        free(v59);
                        if (!v47) {
                          goto LABEL_121;
                        }
                        goto LABEL_120;
                      }

                      __nwlog_obj();
                      os_log_type_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      os_log_type_t v85 = type;
                      if (os_log_type_enabled(v48, type))
                      {
                        *(_DWORD *)buf = 136446210;
                        os_log_type_t v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                        _os_log_impl( &dword_181A5C000,  v48,  v85,  "%{public}s nw_quic_create_stream_options failed, no backtrace",  buf,  0xCu);
                      }
                    }

                    else
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      os_log_type_t v48 = (os_log_s *)(id)gLogObj;
                      os_log_type_t v80 = type;
                      if (os_log_type_enabled(v48, type))
                      {
                        *(_DWORD *)buf = 136446210;
                        os_log_type_t v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                        _os_log_impl( &dword_181A5C000,  v48,  v80,  "%{public}s nw_quic_create_stream_options failed, backtrace limit exceeded",  buf,  0xCu);
                      }
                    }
                  }

                  if (!v47)
                  {
LABEL_121:
                    os_log_type_t v33 = 0LL;
LABEL_153:

                    goto LABEL_154;
                  }

                      *(void *)buf = v81;
                      *(void *)&buf[8] = 0x40000000LL;
                      *(void *)&buf[16] = ___ZL39nw_protocol_finalize_master_frame_arrayP16nw_frame_array_sb_block_invoke_39794;
                      v1051 = (uint64_t)&__block_descriptor_tmp_57_39795;
                      v1052[0] = 0;
                      v179 = *(void *)(v16 + 680);
                      do
                      {
                        if (!v179) {
                          break;
                        }
                        nw_endpoint_t v180 = *(void *)(v179 + 16);
                        int v181 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
                        v179 = v180;
                      }

                      while ((v181 & 1) != 0);
                      if (!*(void *)(v16 + 680))
                      {
                        if (!*((_BYTE *)v15 + 1537)) {
                          goto LABEL_293;
                        }
                        goto LABEL_1338;
                      }

                      v565 = v81;
                      __nwlog_obj();
                      *(_DWORD *)uint64_t aBlock = 136446210;
                      *(void *)&void aBlock[4] = "nw_protocol_finalize_master_frame_array";
                      v566 = (char *)_os_log_send_and_compose_impl();
                      type[0] = 16;
                      LOBYTE(v1045[0]) = 0;
                      if (__nwlog_fault(v566, type, v1045))
                      {
                        if (type[0] == 17)
                        {
                          v567 = (os_log_s *)__nwlog_obj();
                          v568 = type[0];
                          if (!os_log_type_enabled(v567, (os_log_type_t)type[0])) {
                            goto LABEL_1335;
                          }
                          *(_DWORD *)uint64_t aBlock = 136446210;
                          *(void *)&void aBlock[4] = "nw_protocol_finalize_master_frame_array";
                          v569 = "%{public}s frame array is not empty after finalize";
LABEL_1333:
                          v799 = v567;
LABEL_1334:
                          _os_log_impl(&dword_181A5C000, v799, v568, v569, aBlock, 0xCu);
                          goto LABEL_1335;
                        }

                        if (!LOBYTE(v1045[0]))
                        {
                          v567 = (os_log_s *)__nwlog_obj();
                          v568 = type[0];
                          if (!os_log_type_enabled(v567, (os_log_type_t)type[0])) {
                            goto LABEL_1335;
                          }
                          *(_DWORD *)uint64_t aBlock = 136446210;
                          *(void *)&void aBlock[4] = "nw_protocol_finalize_master_frame_array";
                          v569 = "%{public}s frame array is not empty after finalize, backtrace limit exceeded";
                          goto LABEL_1333;
                        }

                        v742 = (char *)__nw_create_backtrace_string();
                        v743 = (os_log_s *)__nwlog_obj();
                        v568 = type[0];
                        nw_endpoint_t logb = v743;
                        v744 = os_log_type_enabled(v743, (os_log_type_t)type[0]);
                        if (v742)
                        {
                          if (v744)
                          {
                            *(_DWORD *)uint64_t aBlock = 136446466;
                            *(void *)&void aBlock[4] = "nw_protocol_finalize_master_frame_array";
                            *(_WORD *)&aBlock[12] = 2082;
                            *(void *)&aBlock[14] = v742;
                            _os_log_impl( &dword_181A5C000,  logb,  v568,  "%{public}s frame array is not empty after finalize, dumping backtrace:%{public}s",  aBlock,  0x16u);
                          }

                          free(v742);
                        }

                        else if (v744)
                        {
                          *(_DWORD *)uint64_t aBlock = 136446210;
                          *(void *)&void aBlock[4] = "nw_protocol_finalize_master_frame_array";
                          v569 = "%{public}s frame array is not empty after finalize, no backtrace";
                          v799 = logb;
                          goto LABEL_1334;
                        }
                      }

  os_log_type_t v132 = v129;
  os_log_type_t v133 = (*(_WORD *)(*((void *)v67 + 13) + 108LL) & 0x80) == 0;

  if (v133 || !setsockopt(*(_DWORD *)&a1[4].flow_id[12], 0xFFFF, 0x10000, &v551, 4u)) {
    goto LABEL_343;
  }
  int v134 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
  }
  unint64_t v135 = (os_log_s *)gconnectionLogObj;
  if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    v553 = "nw_socket_set_common_sockopts";
    v554 = 2080;
    *(void *)v555 = (char *)a1 + 404;
    *(_WORD *)&v555[8] = 1024;
    *(_DWORD *)&v555[10] = v134;
    _os_log_impl( &dword_181A5C000,  v135,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt SO_NOWAKEFROMSLEEP failed %{darwin.errno}d",  buf,  0x1Cu);
  }

  os_log_type_t v136 = (os_log_s *)__nwlog_obj();
  BOOL v137 = v136;
  if (v134 == 22)
  {
    if (os_log_type_enabled(v136, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      v554 = 1024;
      *(_DWORD *)v555 = 22;
      _os_log_impl( &dword_181A5C000,  v137,  OS_LOG_TYPE_ERROR,  "%{public}s setsockopt SO_NOWAKEFROMSLEEP failed %{darwin.errno}d",  buf,  0x12u);
    }

    goto LABEL_343;
  }

  __int16 v140 = p_output_handler;
  *(_DWORD *)buf = 136446466;
  v553 = "nw_socket_set_common_sockopts";
  v554 = 1024;
  *(_DWORD *)v555 = v134;
  unint64_t v141 = (char *)_os_log_send_and_compose_impl();
  v548[0] = OS_LOG_TYPE_ERROR;
  v547[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v141, v548, v547))
  {
    if (v548[0] == OS_LOG_TYPE_FAULT)
    {
      id v142 = (os_log_s *)__nwlog_obj();
      id v143 = v548[0];
      if (os_log_type_enabled(v142, v548[0]))
      {
        *(_DWORD *)buf = 136446466;
        v553 = "nw_socket_set_common_sockopts";
        v554 = 1024;
        *(_DWORD *)v555 = v134;
        __int16 v144 = "%{public}s setsockopt SO_NOWAKEFROMSLEEP failed %{darwin.errno}d";
LABEL_339:
        _os_log_impl(&dword_181A5C000, v142, v143, v144, buf, 0x12u);
      }
    }

    else if (v547[0])
    {
      v535 = v72;
      id v145 = (char *)__nw_create_backtrace_string();
      id v142 = (os_log_s *)__nwlog_obj();
      id v143 = v548[0];
      __int16 v146 = os_log_type_enabled(v142, v548[0]);
      if (v145)
      {
        if (v146)
        {
          *(_DWORD *)buf = 136446722;
          v553 = "nw_socket_set_common_sockopts";
          v554 = 1024;
          *(_DWORD *)v555 = v134;
          *(_WORD *)&v555[4] = 2082;
          *(void *)&v555[6] = v145;
          _os_log_impl( &dword_181A5C000,  v142,  v143,  "%{public}s setsockopt SO_NOWAKEFROMSLEEP failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
        }

        free(v145);
        id v72 = v535;
        goto LABEL_340;
      }

      id v72 = v535;
      if (v146)
      {
        *(_DWORD *)buf = 136446466;
        v553 = "nw_socket_set_common_sockopts";
        v554 = 1024;
        *(_DWORD *)v555 = v134;
        __int16 v144 = "%{public}s setsockopt SO_NOWAKEFROMSLEEP failed %{darwin.errno}d, no backtrace";
        goto LABEL_339;
      }
    }

    else
    {
      id v142 = (os_log_s *)__nwlog_obj();
      id v143 = v548[0];
      if (os_log_type_enabled(v142, v548[0]))
      {
        *(_DWORD *)buf = 136446466;
        v553 = "nw_socket_set_common_sockopts";
        v554 = 1024;
        *(_DWORD *)v555 = v134;
        __int16 v144 = "%{public}s setsockopt SO_NOWAKEFROMSLEEP failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_339;
      }
    }
  }

  v131->flow_connect_milliseconds = nw_connection_get_transport_connect_milliseconds(v126, 0, 0);
  LOWORD(v389) = 0;
  unint64_t v225 = nw_connection_get_event_milliseconds(v126, 3, 6, &v389, 0LL);
  unint64_t v226 = v378;
  if (v225 == -1)
  {
    unint64_t v225 = nw_connection_get_event_milliseconds(v126, 3, 13, &v389, 0LL);
    if (v225 == -1) {
      goto LABEL_330;
    }
  }

  uint64_t v227 = nw_connection_get_event_milliseconds(v126, 3, 10, &v389, 0LL);
  if (v227 == -1)
  {
    uint64_t v233 = v126;
    uint64_t v234 = v233;
    if (v233)
    {
      if (v233->used_timestamps)
      {
        int v235 = 0LL;
        timestamps = v233->timestamps;
        p_event = &timestamps->var1.event;
        while (*p_event != 8 || *(p_event - 1) != 1)
        {
          ++v235;
          p_event += 8;
          if (v235 >= v233->used_timestamps)
          {

            goto LABEL_413;
          }
        }

        unint64_t v238 = nw_delta_nanos(v233->start_time, *(&timestamps->var0 + 2 * v235));

        id v239 = v238 / 0xF4240;
        unint64_t v226 = v378;
        os_log_type_t v131 = v382;
        if (v239 < v225)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v240 = (id)gLogObj;
          buf[0] = 136446722;
          *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = v238 / 0xF4240;
          HIWORD(buf[4]) = 1024;
          buf[5] = v225;
          int v241 = (char *)_os_log_send_and_compose_impl();

          v425[0] = 16;
          unint64_t v410 = 0;
          if (__nwlog_fault(v241, v425, &v410))
          {
            if (v425[0] == 17)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v242 = (os_log_s *)(id)gLogObj;
              unint64_t v243 = v425[0];
              if (os_log_type_enabled(v242, (os_log_type_t)v425[0]))
              {
                buf[0] = 136446722;
                *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
                LOWORD(buf[3]) = 1024;
                *(_DWORD *)((char *)&buf[3] + 2) = v239;
                HIWORD(buf[4]) = 1024;
                buf[5] = v225;
                _os_log_impl( &dword_181A5C000,  v242,  v243,  "%{public}s connection_cancel %u < flow_finish %u",  (uint8_t *)buf,  0x18u);
              }
            }

            else
            {
              if (v410)
              {
                v251 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                __int16 v252 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                int v253 = v425[0];
                BOOL v254 = os_log_type_enabled(v252, (os_log_type_t)v425[0]);
                if (v251)
                {
                  if (v254)
                  {
                    buf[0] = 136446978;
                    *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
                    LOWORD(buf[3]) = 1024;
                    *(_DWORD *)((char *)&buf[3] + 2) = v239;
                    HIWORD(buf[4]) = 1024;
                    buf[5] = v225;
                    LOWORD(buf[6]) = 2082;
                    *(void *)((char *)&buf[6] + 2) = v251;
                    _os_log_impl( &dword_181A5C000,  v252,  v253,  "%{public}s connection_cancel %u < flow_finish %u, dumping backtrace:%{public}s",  (uint8_t *)buf,  0x22u);
                  }

                  free(v251);
                }

                else
                {
                  if (v254)
                  {
                    buf[0] = 136446722;
                    *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
                    LOWORD(buf[3]) = 1024;
                    *(_DWORD *)((char *)&buf[3] + 2) = v239;
                    HIWORD(buf[4]) = 1024;
                    buf[5] = v225;
                    _os_log_impl( &dword_181A5C000,  v252,  v253,  "%{public}s connection_cancel %u < flow_finish %u, no backtrace",  (uint8_t *)buf,  0x18u);
                  }
                }

                goto LABEL_346;
              }

              __nwlog_obj();
              os_log_type_t v242 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              int v255 = v425[0];
              if (os_log_type_enabled(v242, (os_log_type_t)v425[0]))
              {
                buf[0] = 136446722;
                *(void *)&buf[1] = "nw_connection_stats_fill_in_nw_report_on_nw_queue";
                LOWORD(buf[3]) = 1024;
                *(_DWORD *)((char *)&buf[3] + 2) = v239;
                HIWORD(buf[4]) = 1024;
                buf[5] = v225;
                _os_log_impl( &dword_181A5C000,  v242,  v255,  "%{public}s connection_cancel %u < flow_finish %u, backtrace limit exceeded",  (uint8_t *)buf,  0x18u);
              }
            }
          }

    if (v132) {
      free(v132);
    }
LABEL_290:

    _Block_object_dispose(out, 8);
    os_log_type_t v115 = *v114;
    BOOL v116 = lock;
  }

  if (v115 != 26) {
    goto LABEL_350;
  }
  *(void *)uuid_string_t out = 0LL;
  *(void *)&out[8] = out;
  *(void *)&out[16] = 0x3032000000LL;
  *(void *)&out[24] = __Block_byref_object_copy__79337;
  *(void *)&out[32] = __Block_byref_object_dispose__79338;
  *(void *)&out[40] = 0LL;
  v373[0] = MEMORY[0x1895F87A8];
  v373[1] = 3221225472LL;
  unint64_t v374 = ___ZL30nw_agent_read_message_on_queueP19NWConcrete_nw_agent_block_invoke_161;
  unint64_t v375 = &unk_189BC9210;
  unint64_t v377 = out;
  __int16 v376 = v298;
  int v139 = v376;
  __int16 v140 = v373;
  os_unfair_lock_lock(v116);
  v374((uint64_t)v140);
  os_unfair_lock_unlock(v116);

  unint64_t v141 = *(void *)(*(void *)&out[8] + 40LL);
  if (!v141)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v144 = (id)gLogObj;
    *(_DWORD *)v413 = 136446210;
    int v414 = "nw_agent_read_message_on_queue";
    id v145 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    unint64_t v405 = 0;
    if (__nwlog_fault(v145, &type, &v405))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        __int16 v146 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v147 = type;
        if (os_log_type_enabled(v146, type))
        {
          *(_DWORD *)v413 = 136446210;
          int v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_181A5C000, v146, v147, "%{public}s No handler for CLIENT_ERROR", v413, 0xCu);
        }
      }

      else if (v405)
      {
        unint64_t v148 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        __int16 v146 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        nw_endpoint_t v149 = type;
        os_log_type_t v150 = os_log_type_enabled(v146, type);
        if (v148)
        {
          if (v150)
          {
            *(_DWORD *)v413 = 136446466;
            int v414 = "nw_agent_read_message_on_queue";
            v415 = 2082;
            unint64_t v416 = v148;
            _os_log_impl( &dword_181A5C000,  v146,  v149,  "%{public}s No handler for CLIENT_ERROR, dumping backtrace:%{public}s",  v413,  0x16u);
          }

          free(v148);
          goto LABEL_313;
        }

        if (v150)
        {
          *(_DWORD *)v413 = 136446210;
          int v414 = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_181A5C000, v146, v149, "%{public}s No handler for CLIENT_ERROR, no backtrace", v413, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        __int16 v146 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __int16 v151 = type;
        if (os_log_type_enabled(v146, type))
        {
          *(_DWORD *)v413 = 136446210;
          int v414 = "nw_agent_read_message_on_queue";
          _os_log_impl( &dword_181A5C000,  v146,  v151,  "%{public}s No handler for CLIENT_ERROR, backtrace limit exceeded",  v413,  0xCu);
        }
      }
    }

            if (v192) {
              free(v192);
            }
            goto LABEL_237;
          }

void sub_181F2C7D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, uint64_t a20, void *a21, void *a22, void *a23)
{
  _Unwind_Resume(a1);
}

nw_parameters *nw_parameters_create_secure_tcp_or_quic_stream(void *a1, void *a2, void *a3, void *a4)
{
  return nw_parameters_create_quic_stream_with_tls_fallback(a1, a2, a3, 0LL, a4);
}

nw_parameters_t nw_parameters_create_custom_ip( uint8_t custom_ip_protocol_number, nw_parameters_configure_protocol_block_t configure_ip)
{
  uint64_t v55 = *MEMORY[0x1895F89C0];
  id v3 = configure_ip;
  nw_parameters_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    __int16 v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v52 = "nw_parameters_create_custom_ip";
    os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v52 = "nw_parameters_create_custom_ip";
        _os_log_impl(&dword_181A5C000, v29, v30, "%{public}s called with null configure_ip", buf, 0xCu);
      }
    }

    else if (v49)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v34 = type;
      BOOL v35 = os_log_type_enabled(v29, type);
      if (backtrace_string)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v52 = "nw_parameters_create_custom_ip";
          __int16 v53 = 2082;
          id v54 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v29,  v34,  "%{public}s called with null configure_ip, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v28) {
          goto LABEL_98;
        }
        goto LABEL_97;
      }

      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v52 = "nw_parameters_create_custom_ip";
        _os_log_impl(&dword_181A5C000, v29, v34, "%{public}s called with null configure_ip, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v46 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v52 = "nw_parameters_create_custom_ip";
        _os_log_impl( &dword_181A5C000,  v29,  v46,  "%{public}s called with null configure_ip, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_95;
  }

  if (v3 == (void (**)(nw_parameters_configure_protocol_block_t, void))&__block_literal_global_18956)
  {
    __nwlog_obj();
    BOOL v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v52 = "nw_parameters_create_custom_ip";
    os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v52 = "nw_parameters_create_custom_ip";
        _os_log_impl( &dword_181A5C000,  v29,  v32,  "%{public}s called with null (configure_ip != (_nw_parameters_configure_protocol_disable))",  buf,  0xCu);
      }
    }

    else if (v49)
    {
      BOOL v36 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v37 = type;
      BOOL v38 = os_log_type_enabled(v29, type);
      if (v36)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v52 = "nw_parameters_create_custom_ip";
          __int16 v53 = 2082;
          id v54 = v36;
          _os_log_impl( &dword_181A5C000,  v29,  v37,  "%{public}s called with null (configure_ip != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v36);
LABEL_96:
        if (!v28)
        {
LABEL_98:
          id v9 = 0LL;
          goto LABEL_52;
        }

void sub_181F2D4B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_parameters *nw_parameters_create_legacy_tcp_socket(void *a1)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    BOOL v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v40 = "nw_parameters_create_legacy_tcp_socket";
    os_log_type_t v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_parameters_create_legacy_tcp_socket";
        _os_log_impl(&dword_181A5C000, v25, v26, "%{public}s called with null configure_tcp", buf, 0xCu);
      }
    }

    else if (v37)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v30 = type;
      BOOL v31 = os_log_type_enabled(v25, type);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v40 = "nw_parameters_create_legacy_tcp_socket";
          __int16 v41 = 2082;
          os_log_type_t v42 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v25,  v30,  "%{public}s called with null configure_tcp, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v24) {
          goto LABEL_89;
        }
        goto LABEL_88;
      }

      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_parameters_create_legacy_tcp_socket";
        _os_log_impl(&dword_181A5C000, v25, v30, "%{public}s called with null configure_tcp, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_parameters_create_legacy_tcp_socket";
        _os_log_impl( &dword_181A5C000,  v25,  v35,  "%{public}s called with null configure_tcp, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_86;
  }

  if (v1 == (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_18956)
  {
    __nwlog_obj();
    __int16 v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v40 = "nw_parameters_create_legacy_tcp_socket";
    os_log_type_t v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_parameters_create_legacy_tcp_socket";
        _os_log_impl( &dword_181A5C000,  v25,  v28,  "%{public}s called with null (configure_tcp != (_nw_parameters_configure_protocol_disable))",  buf,  0xCu);
      }
    }

    else if (v37)
    {
      os_log_type_t v32 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v33 = type;
      BOOL v34 = os_log_type_enabled(v25, type);
      if (v32)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v40 = "nw_parameters_create_legacy_tcp_socket";
          __int16 v41 = 2082;
          os_log_type_t v42 = v32;
          _os_log_impl( &dword_181A5C000,  v25,  v33,  "%{public}s called with null (configure_tcp != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v32);
LABEL_87:
        if (!v24)
        {
LABEL_89:
          nw_parameters_t v5 = 0LL;
          goto LABEL_53;
        }

void sub_181F2DF0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *nw_parameters_copy_extended_description(NWConcrete_nw_parameters *a1)
{
  return nw_parameters_copy_description_internal(a1, 1);
}

BOOL nw_parameters_create_from_dictionary(void *a1)
{
  uint64_t v280 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (!v1)
  {
    nw_parameters_t v2 = 0LL;
LABEL_160:
    __int16 v144 = v2;

    return (BOOL)v144;
  }

  nw_parameters_t v2 = nw_parameters_create();
  Class Class = object_getClass(v1);
  nw_parameters_t v4 = (objc_class *)MEMORY[0x1895F9250];
  if (Class == (Class)MEMORY[0x1895F9250] && (xpc_object_t value = xpc_dictionary_get_value(v1, "required_interface")) != 0LL)
  {
    xpc_object_t v7 = value;
    if (object_getClass(value) == v4) {
      nw_parameters_t v5 = v7;
    }
    else {
      nw_parameters_t v5 = 0LL;
    }
  }

  else
  {
    nw_parameters_t v5 = 0LL;
  }

  id v8 = v5;
  os_log_type_t v9 = nw_interface_create_from_dictionary(v8);
  uint64_t v10 = *((void *)v2 + 13);
  os_log_type_t v11 = *(void **)(v10 + 168);
  *(void *)(v10 + 16_Block_object_dispose((const void *)(v2 - 64), 8) = v9;

  *(_DWORD *)(*((void *)v2 + 13) + 76LL) = xpc_dictionary_get_uint64(v1, "required_interface_type");
  if (xpc_dictionary_get_BOOL(v1, "only_primary_requires_type")) {
    __int16 v12 = 32;
  }
  else {
    __int16 v12 = 0;
  }
  *(_WORD *)(*((void *)v2 + 13) + 100LL) = *(_WORD *)(*((void *)v2 + 13) + 100LL) & 0xFFDF | v12;
  *(_DWORD *)(*((void *)v2 + 13) + 80LL) = xpc_dictionary_get_uint64(v1, "required_interface_subtype");
  *(_DWORD *)(*((void *)v2 + 13) + 92LL) = xpc_dictionary_get_uint64(v1, "next_hop_required_interface_type");
  *(_DWORD *)(*((void *)v2 + 13) + 96LL) = xpc_dictionary_get_uint64(v1, "next_hop_required_interface_subtype");
  string = xpc_dictionary_get_string(v1, "effective_bundle_id");
  if (string) {
    nw_parameters_set_effective_bundle_id(v2, string);
  }
  id v14 = xpc_dictionary_get_string(v1, "account_id");
  if (v14) {
    nw_parameters_set_account_id(v2, v14);
  }
  os_log_type_t v15 = xpc_dictionary_get_string(v1, "attribution_context");
  if (v15) {
    nw_parameters_set_attribution_context(v2, v15);
  }
  BOOL v16 = xpc_dictionary_get_string(v1, "url");
  if (v16)
  {
    nw_endpoint_t url = nw_endpoint_create_url(v16);
    os_log_type_t v18 = (void *)*((void *)v2 + 25);
    *((void *)v2 + 25) = url;
  }

  BOOL v19 = xpc_dictionary_get_string(v1, "main_document_url");
  if (v19)
  {
    nw_endpoint_t v20 = nw_endpoint_create_url(v19);
    os_log_type_t v21 = (void *)*((void *)v2 + 26);
    *((void *)v2 + 26) = v20;
  }

  if (object_getClass(v1) == v4
    && (xpc_object_t v146 = xpc_dictionary_get_value(v1, "effective_audit_token")) != 0LL
    && (char v147 = v146, object_getClass(v146) == (Class)MEMORY[0x1895F9240]))
  {
    id v260 = v147;
    xpc_data_get_bytes(v260, (char *)v2 + 40, 0LL, 0x20uLL);
  }

  else
  {
    id v260 = 0LL;
  }

  if (object_getClass(v1) == v4
    && (xpc_object_t v148 = xpc_dictionary_get_value(v1, "local_address")) != 0LL
    && (nw_endpoint_t v149 = v148, object_getClass(v148) == v4))
  {
    id v261 = v149;
    os_log_type_t v150 = nw_endpoint_create_from_dictionary(v261);
    uint64_t v151 = *((void *)v2 + 13);
    os_log_type_t v152 = *(void **)(v151 + 160);
    *(void *)(v151 + 160) = v150;
  }

  else
  {
    id v261 = 0LL;
  }

  BOOL v22 = xpc_dictionary_get_BOOL(v1, "reuse_local_address");
  uint64_t v23 = 256LL;
  if (!v22) {
    uint64_t v23 = 0LL;
  }
  *((void *)v2 + 12) = *((void *)v2 + 12) & 0xFFFFFFFFFFFFFEFFLL | v23;
  Class v24 = object_getClass(v1);
  xpc_object_t v25 = 0LL;
  if (v24 == v4)
  {
    xpc_object_t v25 = xpc_dictionary_get_value(v1, "tls_session_id");
    if (v25)
    {
      uint64_t v153 = v25;
      if (object_getClass(v25) == (Class)MEMORY[0x1895F9240]) {
        xpc_object_t v25 = xpc_retain(v153);
      }
      else {
        xpc_object_t v25 = 0LL;
      }
    }
  }

  os_log_type_t v26 = (void *)*((void *)v2 + 16);
  *((void *)v2 + 16) = v25;

  *(_DWORD *)(*((void *)v2 + 13) + 72LL) = xpc_dictionary_get_uint64(v1, "traffic_class");
  *(_DWORD *)(*((void *)v2 + 13) + 64LL) = xpc_dictionary_get_int64(v1, "pid");
  *(_DWORD *)(*((void *)v2 + 13) + 68LL) = xpc_dictionary_get_int64(v1, "uid");
  uunsigned int uid = xpc_dictionary_get_uuid(v1, "proc_uuid");
  if (uuid) {
    *(_OWORD *)(*((void *)v2 + 13) + 8LL) = *(_OWORD *)uuid;
  }
  os_log_type_t v28 = xpc_dictionary_get_uuid(v1, "e_proc_uuid");
  if (v28) {
    *(_OWORD *)(*((void *)v2 + 13) + 24LL) = *(_OWORD *)v28;
  }
  uint64_t v29 = xpc_dictionary_get_uuid(v1, "persona_id");
  if (v29) {
    *(_OWORD *)(*((void *)v2 + 13) + 40LL) = *(_OWORD *)v29;
  }
  os_log_type_t v30 = xpc_dictionary_get_uuid(v1, "parent_id");
  if (v30) {
    *(_OWORD *)((char *)v2 + _Block_object_dispose((const void *)(v2 - 64), 8) = *(_OWORD *)v30;
  }
  *((void *)v2 + 12) = *((void *)v2 + 12) & 0xFFFFFFFFFFFFFFFELL | xpc_dictionary_get_BOOL(v1, "dry_run");
  *(_WORD *)(*((void *)v2 + 13) + 100LL) = *(_WORD *)(*((void *)v2 + 13) + 100LL) & 0xFFFE | xpc_dictionary_get_BOOL( v1,  "prohibit_expensive");
  if (xpc_dictionary_get_BOOL(v1, "prohibit_constrained")) {
    __int16 v31 = 2;
  }
  else {
    __int16 v31 = 0;
  }
  *(_WORD *)(*((void *)v2 + 13) + 100LL) = *(_WORD *)(*((void *)v2 + 13) + 100LL) & 0xFFFD | v31;
  if (xpc_dictionary_get_BOOL(v1, "allow_ultra_constrained")) {
    __int16 v32 = 4;
  }
  else {
    __int16 v32 = 0;
  }
  *(_WORD *)(*((void *)v2 + 13) + 100LL) = *(_WORD *)(*((void *)v2 + 13) + 100LL) & 0xFFFB | v32;
  if (xpc_dictionary_get_BOOL(v1, "prohibit_roaming")) {
    __int16 v33 = 8;
  }
  else {
    __int16 v33 = 0;
  }
  *(_WORD *)(*((void *)v2 + 13) + 100LL) = *(_WORD *)(*((void *)v2 + 13) + 100LL) & 0xFFF7 | v33;
  if (object_getClass(v1) == v4
    && (xpc_object_t v154 = xpc_dictionary_get_value(v1, "prohibited_interface_types")) != 0LL
    && (nw_endpoint_t v155 = v154, object_getClass(v154) == (Class)MEMORY[0x1895F9220])
    && (obunint64_t j = xpc_retain(v155)) != 0LL)
  {
    BOOL v156 = *(id **)(*((void *)v2 + 13) + 176LL);
    if (!v156)
    {
      int v157 = calloc(1uLL, 0x90uLL);
      if (!v157)
      {
        __nwlog_obj();
        int v223 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_enabled(v223, OS_LOG_TYPE_ERROR);
        *(_DWORD *)length = 136446722;
        *(void *)&length[4] = "strict_calloc";
        __int16 v276 = 2048;
        uint64_t v277 = 1LL;
        __int16 v278 = 2048;
        uint64_t v279 = 144LL;
        v224 = (void *)_os_log_send_and_compose_impl();

        BOOL result = __nwlog_abort((uint64_t)v224);
        if (result) {
          goto LABEL_341;
        }
        free(v224);
      }

      *(void *)(*((void *)v2 + 13) + 176LL) = v157;
      BOOL v156 = *(id **)(*((void *)v2 + 13) + 176LL);
    }

    objc_storeStrong(v156, obj);
  }

  else
  {
    obunint64_t j = 0LL;
  }

  if (object_getClass(v1) == v4
    && (xpc_object_t v158 = xpc_dictionary_get_value(v1, "prohibited_interface_subtypes")) != 0LL
    && (unint64_t v159 = v158, object_getClass(v158) == (Class)MEMORY[0x1895F9220])
    && (id v263 = xpc_retain(v159)) != 0LL)
  {
    uint64_t v160 = *(void *)(*((void *)v2 + 13) + 176LL);
    if (!v160)
    {
      os_log_type_t v161 = calloc(1uLL, 0x90uLL);
      if (!v161)
      {
        __nwlog_obj();
        unint64_t v225 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_enabled(v225, OS_LOG_TYPE_ERROR);
        *(_DWORD *)length = 136446722;
        *(void *)&length[4] = "strict_calloc";
        __int16 v276 = 2048;
        uint64_t v277 = 1LL;
        __int16 v278 = 2048;
        uint64_t v279 = 144LL;
        unint64_t v226 = (void *)_os_log_send_and_compose_impl();

        BOOL result = __nwlog_abort((uint64_t)v226);
        if (result) {
          goto LABEL_341;
        }
        free(v226);
      }

      *(void *)(*((void *)v2 + 13) + 176LL) = v161;
      uint64_t v160 = *(void *)(*((void *)v2 + 13) + 176LL);
    }

    objc_storeStrong((id *)(v160 + 8), v263);
  }

  else
  {
    id v263 = 0LL;
  }

  if (object_getClass(v1) == v4
    && (xpc_object_t v162 = xpc_dictionary_get_value(v1, "preferred_interface_subtypes")) != 0LL
    && (int v163 = v162, object_getClass(v162) == (Class)MEMORY[0x1895F9220])
    && (id v264 = xpc_retain(v163)) != 0LL)
  {
    uint64_t v164 = *(void *)(*((void *)v2 + 13) + 176LL);
    if (!v164)
    {
      unint64_t v165 = calloc(1uLL, 0x90uLL);
      if (!v165)
      {
        __nwlog_obj();
        uint64_t v227 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_enabled(v227, OS_LOG_TYPE_ERROR);
        *(_DWORD *)length = 136446722;
        *(void *)&length[4] = "strict_calloc";
        __int16 v276 = 2048;
        uint64_t v277 = 1LL;
        __int16 v278 = 2048;
        uint64_t v279 = 144LL;
        uint64_t v228 = (void *)_os_log_send_and_compose_impl();

        BOOL result = __nwlog_abort((uint64_t)v228);
        if (result) {
          goto LABEL_341;
        }
        free(v228);
      }

      *(void *)(*((void *)v2 + 13) + 176LL) = v165;
      uint64_t v164 = *(void *)(*((void *)v2 + 13) + 176LL);
    }

    objc_storeStrong((id *)(v164 + 16), v264);
  }

  else
  {
    id v264 = 0LL;
  }

  if (object_getClass(v1) == v4
    && (xpc_object_t v166 = xpc_dictionary_get_value(v1, "prohibited_interfaces")) != 0LL
    && (unint64_t v167 = v166, object_getClass(v166) == (Class)MEMORY[0x1895F9220])
    && (id v265 = xpc_retain(v167)) != 0LL)
  {
    uint64_t v168 = *(void *)(*((void *)v2 + 13) + 176LL);
    if (!v168)
    {
      int v169 = calloc(1uLL, 0x90uLL);
      if (!v169)
      {
        __nwlog_obj();
        int v229 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_enabled(v229, OS_LOG_TYPE_ERROR);
        *(_DWORD *)length = 136446722;
        *(void *)&length[4] = "strict_calloc";
        __int16 v276 = 2048;
        uint64_t v277 = 1LL;
        __int16 v278 = 2048;
        uint64_t v279 = 144LL;
        uint64_t v230 = (void *)_os_log_send_and_compose_impl();

        BOOL result = __nwlog_abort((uint64_t)v230);
        if (result) {
          goto LABEL_341;
        }
        free(v230);
      }

      *(void *)(*((void *)v2 + 13) + 176LL) = v169;
      uint64_t v168 = *(void *)(*((void *)v2 + 13) + 176LL);
    }

    objc_storeStrong((id *)(v168 + 24), v265);
  }

  else
  {
    id v265 = 0LL;
  }

  if (object_getClass(v1) == v4
    && (xpc_object_t v170 = xpc_dictionary_get_value(v1, "prohibited_netagent_domains")) != 0LL
    && (unint64_t v171 = v170, object_getClass(v170) == (Class)MEMORY[0x1895F9220])
    && (id v266 = xpc_retain(v171)) != 0LL)
  {
    uint64_t v172 = *(void *)(*((void *)v2 + 13) + 176LL);
    if (!v172)
    {
      nw_endpoint_t v173 = calloc(1uLL, 0x90uLL);
      if (!v173)
      {
        __nwlog_obj();
        unint64_t v231 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_enabled(v231, OS_LOG_TYPE_ERROR);
        *(_DWORD *)length = 136446722;
        *(void *)&length[4] = "strict_calloc";
        __int16 v276 = 2048;
        uint64_t v277 = 1LL;
        __int16 v278 = 2048;
        uint64_t v279 = 144LL;
        unint64_t v232 = (void *)_os_log_send_and_compose_impl();

        BOOL result = __nwlog_abort((uint64_t)v232);
        if (result) {
          goto LABEL_341;
        }
        free(v232);
      }

      *(void *)(*((void *)v2 + 13) + 176LL) = v173;
      uint64_t v172 = *(void *)(*((void *)v2 + 13) + 176LL);
    }

    objc_storeStrong((id *)(v172 + 32), v266);
  }

  else
  {
    id v266 = 0LL;
  }

  if (object_getClass(v1) == v4
    && (xpc_object_t v174 = xpc_dictionary_get_value(v1, "prohibited_netagent_types")) != 0LL
    && (int v175 = v174, object_getClass(v174) == (Class)MEMORY[0x1895F9220])
    && (id v267 = xpc_retain(v175)) != 0LL)
  {
    uint64_t v176 = *(void *)(*((void *)v2 + 13) + 176LL);
    if (!v176)
    {
      unint64_t v177 = calloc(1uLL, 0x90uLL);
      if (!v177)
      {
        __nwlog_obj();
        uint64_t v233 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_enabled(v233, OS_LOG_TYPE_ERROR);
        *(_DWORD *)length = 136446722;
        *(void *)&length[4] = "strict_calloc";
        __int16 v276 = 2048;
        uint64_t v277 = 1LL;
        __int16 v278 = 2048;
        uint64_t v279 = 144LL;
        uint64_t v234 = (void *)_os_log_send_and_compose_impl();

        BOOL result = __nwlog_abort((uint64_t)v234);
        if (result) {
          goto LABEL_341;
        }
        free(v234);
      }

      *(void *)(*((void *)v2 + 13) + 176LL) = v177;
      uint64_t v176 = *(void *)(*((void *)v2 + 13) + 176LL);
    }

    objc_storeStrong((id *)(v176 + 40), v267);
  }

  else
  {
    id v267 = 0LL;
  }

  if (object_getClass(v1) == v4
    && (xpc_object_t v178 = xpc_dictionary_get_value(v1, "prohibited_netagent_uuids")) != 0LL
    && (v179 = v178, object_getClass(v178) == (Class)MEMORY[0x1895F9220])
    && (id v268 = xpc_retain(v179)) != 0LL)
  {
    uint64_t v180 = *(void *)(*((void *)v2 + 13) + 176LL);
    if (!v180)
    {
      int v181 = calloc(1uLL, 0x90uLL);
      if (!v181)
      {
        __nwlog_obj();
        int v235 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_enabled(v235, OS_LOG_TYPE_ERROR);
        *(_DWORD *)length = 136446722;
        *(void *)&length[4] = "strict_calloc";
        __int16 v276 = 2048;
        uint64_t v277 = 1LL;
        __int16 v278 = 2048;
        uint64_t v279 = 144LL;
        nw_endpoint_t v236 = (void *)_os_log_send_and_compose_impl();

        BOOL result = __nwlog_abort((uint64_t)v236);
        if (result) {
          goto LABEL_341;
        }
        free(v236);
      }

      *(void *)(*((void *)v2 + 13) + 176LL) = v181;
      uint64_t v180 = *(void *)(*((void *)v2 + 13) + 176LL);
    }

    objc_storeStrong((id *)(v180 + 48), v268);
  }

  else
  {
    id v268 = 0LL;
  }

  if (object_getClass(v1) == v4
    && (xpc_object_t v182 = xpc_dictionary_get_value(v1, "required_netagent_domains")) != 0LL
    && (unint64_t v183 = v182, object_getClass(v182) == (Class)MEMORY[0x1895F9220])
    && (id v269 = xpc_retain(v183)) != 0LL)
  {
    uint64_t v184 = *(void *)(*((void *)v2 + 13) + 176LL);
    if (!v184)
    {
      id v185 = calloc(1uLL, 0x90uLL);
      if (!v185)
      {
        __nwlog_obj();
        unint64_t v237 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_enabled(v237, OS_LOG_TYPE_ERROR);
        *(_DWORD *)length = 136446722;
        *(void *)&length[4] = "strict_calloc";
        __int16 v276 = 2048;
        uint64_t v277 = 1LL;
        __int16 v278 = 2048;
        uint64_t v279 = 144LL;
        unint64_t v238 = (void *)_os_log_send_and_compose_impl();

        BOOL result = __nwlog_abort((uint64_t)v238);
        if (result) {
          goto LABEL_341;
        }
        free(v238);
      }

      *(void *)(*((void *)v2 + 13) + 176LL) = v185;
      uint64_t v184 = *(void *)(*((void *)v2 + 13) + 176LL);
    }

    objc_storeStrong((id *)(v184 + 56), v269);
  }

  else
  {
    id v269 = 0LL;
  }

  if (object_getClass(v1) == v4
    && (xpc_object_t v186 = xpc_dictionary_get_value(v1, "required_netagent_types")) != 0LL
    && (int v187 = v186, object_getClass(v186) == (Class)MEMORY[0x1895F9220])
    && (id v270 = xpc_retain(v187)) != 0LL)
  {
    uint64_t v188 = *(void *)(*((void *)v2 + 13) + 176LL);
    if (!v188)
    {
      unint64_t v189 = calloc(1uLL, 0x90uLL);
      if (!v189)
      {
        __nwlog_obj();
        id v239 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_enabled(v239, OS_LOG_TYPE_ERROR);
        *(_DWORD *)length = 136446722;
        *(void *)&length[4] = "strict_calloc";
        __int16 v276 = 2048;
        uint64_t v277 = 1LL;
        __int16 v278 = 2048;
        uint64_t v279 = 144LL;
        id v240 = (void *)_os_log_send_and_compose_impl();

        BOOL result = __nwlog_abort((uint64_t)v240);
        if (result) {
          goto LABEL_341;
        }
        free(v240);
      }

      *(void *)(*((void *)v2 + 13) + 176LL) = v189;
      uint64_t v188 = *(void *)(*((void *)v2 + 13) + 176LL);
    }

    objc_storeStrong((id *)(v188 + 64), v270);
  }

  else
  {
    id v270 = 0LL;
  }

  if (object_getClass(v1) == v4
    && (xpc_object_t v190 = xpc_dictionary_get_value(v1, "required_netagent_uuids")) != 0LL
    && (v191 = v190, object_getClass(v190) == (Class)MEMORY[0x1895F9220])
    && (id v271 = xpc_retain(v191)) != 0LL)
  {
    uint64_t v192 = *(void *)(*((void *)v2 + 13) + 176LL);
    if (!v192)
    {
      int v193 = calloc(1uLL, 0x90uLL);
      if (!v193)
      {
        __nwlog_obj();
        int v241 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_enabled(v241, OS_LOG_TYPE_ERROR);
        *(_DWORD *)length = 136446722;
        *(void *)&length[4] = "strict_calloc";
        __int16 v276 = 2048;
        uint64_t v277 = 1LL;
        __int16 v278 = 2048;
        uint64_t v279 = 144LL;
        os_log_type_t v242 = (void *)_os_log_send_and_compose_impl();

        BOOL result = __nwlog_abort((uint64_t)v242);
        if (result) {
          goto LABEL_341;
        }
        free(v242);
      }

      *(void *)(*((void *)v2 + 13) + 176LL) = v193;
      uint64_t v192 = *(void *)(*((void *)v2 + 13) + 176LL);
    }

    objc_storeStrong((id *)(v192 + 72), v271);
  }

  else
  {
    id v271 = 0LL;
  }

  if (object_getClass(v1) == v4
    && (xpc_object_t v194 = xpc_dictionary_get_value(v1, "preferred_netagent_domains")) != 0LL
    && (unint64_t v195 = v194, object_getClass(v194) == (Class)MEMORY[0x1895F9220])
    && (xpc_object_t v272 = xpc_retain(v195)) != 0LL)
  {
    uint64_t v196 = *(void *)(*((void *)v2 + 13) + 176LL);
    if (!v196)
    {
      uint64_t v197 = calloc(1uLL, 0x90uLL);
      if (!v197)
      {
        __nwlog_obj();
        unint64_t v243 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_enabled(v243, OS_LOG_TYPE_ERROR);
        *(_DWORD *)length = 136446722;
        *(void *)&length[4] = "strict_calloc";
        __int16 v276 = 2048;
        uint64_t v277 = 1LL;
        __int16 v278 = 2048;
        uint64_t v279 = 144LL;
        unint64_t v244 = (void *)_os_log_send_and_compose_impl();

        BOOL result = __nwlog_abort((uint64_t)v244);
        if (result) {
          goto LABEL_341;
        }
        free(v244);
      }

      *(void *)(*((void *)v2 + 13) + 176LL) = v197;
      uint64_t v196 = *(void *)(*((void *)v2 + 13) + 176LL);
    }

    objc_storeStrong((id *)(v196 + 80), v272);
  }

  else
  {
    xpc_object_t v272 = 0LL;
  }

  if (object_getClass(v1) == v4
    && (xpc_object_t v198 = xpc_dictionary_get_value(v1, "preferred_netagent_types")) != 0LL
    && (int v199 = v198, object_getClass(v198) == (Class)MEMORY[0x1895F9220]))
  {
    xpc_object_t v34 = xpc_retain(v199);
    if (v34)
    {
      uint64_t v200 = *(void *)(*((void *)v2 + 13) + 176LL);
      if (!v200)
      {
        unint64_t v201 = calloc(1uLL, 0x90uLL);
        if (!v201)
        {
          __nwlog_obj();
          id v245 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_enabled(v245, OS_LOG_TYPE_ERROR);
          *(_DWORD *)length = 136446722;
          *(void *)&length[4] = "strict_calloc";
          __int16 v276 = 2048;
          uint64_t v277 = 1LL;
          __int16 v278 = 2048;
          uint64_t v279 = 144LL;
          __int16 v246 = (void *)_os_log_send_and_compose_impl();

          BOOL result = __nwlog_abort((uint64_t)v246);
          if (result) {
            goto LABEL_341;
          }
          free(v246);
        }

        *(void *)(*((void *)v2 + 13) + 176LL) = v201;
        uint64_t v200 = *(void *)(*((void *)v2 + 13) + 176LL);
      }

      objc_storeStrong((id *)(v200 + 88), v34);
    }
  }

  else
  {
    xpc_object_t v34 = 0LL;
  }

  if (object_getClass(v1) == v4
    && (xpc_object_t v202 = xpc_dictionary_get_value(v1, "preferred_netagent_uuids")) != 0LL
    && (uint64_t v203 = v202, object_getClass(v202) == (Class)MEMORY[0x1895F9220]))
  {
    xpc_object_t v35 = xpc_retain(v203);
    if (v35)
    {
      uint64_t v204 = *(void *)(*((void *)v2 + 13) + 176LL);
      if (!v204)
      {
        int v205 = calloc(1uLL, 0x90uLL);
        if (!v205)
        {
          __nwlog_obj();
          int v247 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_enabled(v247, OS_LOG_TYPE_ERROR);
          *(_DWORD *)length = 136446722;
          *(void *)&length[4] = "strict_calloc";
          __int16 v276 = 2048;
          uint64_t v277 = 1LL;
          __int16 v278 = 2048;
          uint64_t v279 = 144LL;
          __int16 v248 = (void *)_os_log_send_and_compose_impl();

          BOOL result = __nwlog_abort((uint64_t)v248);
          if (result) {
            goto LABEL_341;
          }
          free(v248);
        }

        *(void *)(*((void *)v2 + 13) + 176LL) = v205;
        uint64_t v204 = *(void *)(*((void *)v2 + 13) + 176LL);
      }

      objc_storeStrong((id *)(v204 + 96), v35);
    }
  }

  else
  {
    xpc_object_t v35 = 0LL;
  }

  if (object_getClass(v1) == v4
    && (xpc_object_t v206 = xpc_dictionary_get_value(v1, "avoided_netagent_domains")) != 0LL
    && (unint64_t v207 = v206, object_getClass(v206) == (Class)MEMORY[0x1895F9220]))
  {
    xpc_object_t v36 = xpc_retain(v207);
    if (v36)
    {
      uint64_t v208 = *(void *)(*((void *)v2 + 13) + 176LL);
      if (!v208)
      {
        os_log_type_t v209 = calloc(1uLL, 0x90uLL);
        if (!v209)
        {
          __nwlog_obj();
          unint64_t v249 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_enabled(v249, OS_LOG_TYPE_ERROR);
          *(_DWORD *)length = 136446722;
          *(void *)&length[4] = "strict_calloc";
          __int16 v276 = 2048;
          uint64_t v277 = 1LL;
          __int16 v278 = 2048;
          uint64_t v279 = 144LL;
          unint64_t v250 = (void *)_os_log_send_and_compose_impl();

          BOOL result = __nwlog_abort((uint64_t)v250);
          if (result) {
            goto LABEL_341;
          }
          free(v250);
        }

        *(void *)(*((void *)v2 + 13) + 176LL) = v209;
        uint64_t v208 = *(void *)(*((void *)v2 + 13) + 176LL);
      }

      objc_storeStrong((id *)(v208 + 104), v36);
    }
  }

  else
  {
    xpc_object_t v36 = 0LL;
  }

  if (object_getClass(v1) == v4)
  {
    xpc_object_t v210 = xpc_dictionary_get_value(v1, "avoided_netagent_types");
    xpc_object_t v37 = v210;
    if (!v210) {
      goto LABEL_76;
    }
    if (object_getClass(v210) == (Class)MEMORY[0x1895F9220])
    {
      xpc_object_t v37 = xpc_retain(v37);
      if (v37)
      {
        uint64_t v211 = *(void *)(*((void *)v2 + 13) + 176LL);
        if (!v211)
        {
          char v212 = calloc(1uLL, 0x90uLL);
          if (!v212)
          {
            __nwlog_obj();
            v251 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_enabled(v251, OS_LOG_TYPE_ERROR);
            *(_DWORD *)length = 136446722;
            *(void *)&length[4] = "strict_calloc";
            __int16 v276 = 2048;
            uint64_t v277 = 1LL;
            __int16 v278 = 2048;
            uint64_t v279 = 144LL;
            __int16 v252 = (void *)_os_log_send_and_compose_impl();

            BOOL result = __nwlog_abort((uint64_t)v252);
            if (result) {
              goto LABEL_341;
            }
            free(v252);
          }

          *(void *)(*((void *)v2 + 13) + 176LL) = v212;
          uint64_t v211 = *(void *)(*((void *)v2 + 13) + 176LL);
        }

        objc_storeStrong((id *)(v211 + 112), v37);
      }

      goto LABEL_76;
    }
  }

  xpc_object_t v37 = 0LL;
LABEL_76:
  if (object_getClass(v1) != v4)
  {
LABEL_77:
    xpc_object_t v38 = 0LL;
    goto LABEL_78;
  }

  xpc_object_t v213 = xpc_dictionary_get_value(v1, "avoided_netagent_uuids");
  xpc_object_t v38 = v213;
  if (!v213) {
    goto LABEL_78;
  }
  if (object_getClass(v213) != (Class)MEMORY[0x1895F9220]) {
    goto LABEL_77;
  }
  xpc_object_t v38 = xpc_retain(v38);
  if (!v38)
  {
LABEL_78:
    if (object_getClass(v1) != v4)
    {
LABEL_79:
      xpc_object_t v39 = 0LL;
      goto LABEL_80;
    }

    xpc_object_t v39 = xpc_dictionary_get_value(v1, "extra_parent_ids");
    if (v39)
    {
      __int16 v216 = v39;
      if (object_getClass(v39) != (Class)MEMORY[0x1895F9220]) {
        goto LABEL_79;
      }
      xpc_object_t v39 = xpc_retain(v216);
    }

LABEL_341:
  __break(1u);
  return result;
}

void sub_181F302B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20, void *a21, void *a22, void *a23, void *a24, void *a25, void *a26, void *a27, void *a28)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_effective_bundle_id(void *a1, const char *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = a1;
  nw_parameters_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    xpc_object_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    nw_endpoint_t v20 = "nw_parameters_set_effective_bundle_id";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v8, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v20 = "nw_parameters_set_effective_bundle_id";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            nw_endpoint_t v20 = "nw_parameters_set_effective_bundle_id";
            __int16 v21 = 2082;
            BOOL v22 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_27;
        }

        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v20 = "nw_parameters_set_effective_bundle_id";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v20 = "nw_parameters_set_effective_bundle_id";
          _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void nw_parameters_set_account_id(void *a1, const char *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = a1;
  nw_parameters_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    xpc_object_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    nw_endpoint_t v20 = "nw_parameters_set_account_id";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v8, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v20 = "nw_parameters_set_account_id";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            nw_endpoint_t v20 = "nw_parameters_set_account_id";
            __int16 v21 = 2082;
            BOOL v22 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_27;
        }

        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v20 = "nw_parameters_set_account_id";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v20 = "nw_parameters_set_account_id";
          _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void nw_parameters_set_attribution_context(void *a1, const char *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = a1;
  nw_parameters_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    xpc_object_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    nw_endpoint_t v20 = "nw_parameters_set_attribution_context";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v8, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v20 = "nw_parameters_set_attribution_context";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            nw_endpoint_t v20 = "nw_parameters_set_attribution_context";
            __int16 v21 = 2082;
            BOOL v22 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_27;
        }

        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v20 = "nw_parameters_set_attribution_context";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          nw_endpoint_t v20 = "nw_parameters_set_attribution_context";
          _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

xpc_object_t nw_parameters_copy_dictionary(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    xpc_object_t v2 = xpc_dictionary_create(0LL, 0LL, 0LL);
    nw_parameters_t v3 = nw_interface_copy_dictionary(*(void **)(*((void *)v1 + 13) + 168LL));
    if (v3) {
      xpc_dictionary_set_value(v2, "required_interface", v3);
    }
    uint64_t v4 = *((void *)v1 + 13);
    uint64_t v5 = *(unsigned int *)(v4 + 76);
    if ((_DWORD)v5)
    {
      xpc_dictionary_set_uint64(v2, "required_interface_type", v5);
      uint64_t v4 = *((void *)v1 + 13);
    }

    xpc_dictionary_set_BOOL(v2, "only_primary_requires_type", (*(_WORD *)(v4 + 100) & 0x20) != 0);
    id v6 = (unsigned int *)*((void *)v1 + 13);
    uint64_t v7 = v6[20];
    if ((_DWORD)v7)
    {
      xpc_dictionary_set_uint64(v2, "required_interface_subtype", v7);
      id v6 = (unsigned int *)*((void *)v1 + 13);
    }

    uint64_t v8 = v6[23];
    if ((_DWORD)v8)
    {
      xpc_dictionary_set_uint64(v2, "next_hop_required_interface_type", v8);
      id v6 = (unsigned int *)*((void *)v1 + 13);
    }

    uint64_t v9 = v6[24];
    if ((_DWORD)v9) {
      xpc_dictionary_set_uint64(v2, "next_hop_required_interface_subtype", v9);
    }
    os_log_type_t v10 = (const char *)*((void *)v1 + 14);
    if (v10) {
      xpc_dictionary_set_string(v2, "effective_bundle_id", v10);
    }
    __int128 v39 = *(_OWORD *)(v1 + 40);
    __int128 v40 = *(_OWORD *)(v1 + 56);
    uint64_t v11 = *((void *)v1 + 13);
    os_log_type_t v12 = *(const char **)(v11 + 112);
    if (v12)
    {
      xpc_dictionary_set_string(v2, "account_id", v12);
      uint64_t v11 = *((void *)v1 + 13);
    }

    nw_endpoint_t url = *(const char **)(v11 + 120);
    if (url) {
      xpc_dictionary_set_string(v2, "attribution_context", url);
    }
    id v14 = (nw_endpoint *)*((void *)v1 + 25);
    if (v14)
    {
      nw_endpoint_t url = nw_endpoint_get_url(v14);
      if (url) {
        xpc_dictionary_set_string(v2, "url", url);
      }
    }

    os_log_type_t v15 = (nw_endpoint *)*((void *)v1 + 26);
    if (v15)
    {
      nw_endpoint_t url = nw_endpoint_get_url(v15);
      if (url) {
        xpc_dictionary_set_string(v2, "main_document_url", url);
      }
    }

    os_log_type_t v16 = (void *)objc_msgSend(*(id *)(*((void *)v1 + 13) + 160), "copyDictionary", url, v39, v40);
    if (v16) {
      xpc_dictionary_set_value(v2, "local_address", v16);
    }
    if ((v1[97] & 1) != 0) {
      xpc_dictionary_set_BOOL(v2, "reuse_local_address", 1);
    }
    xpc_dictionary_set_value(v2, "tls_session_id", *((xpc_object_t *)v1 + 16));
    uint64_t v17 = *((void *)v1 + 13);
    uint64_t v18 = *(unsigned int *)(v17 + 72);
    if ((_DWORD)v18)
    {
      xpc_dictionary_set_uint64(v2, "traffic_class", v18);
      uint64_t v17 = *((void *)v1 + 13);
    }

    int64_t v19 = *(int *)(v17 + 64);
    if ((_DWORD)v19)
    {
      xpc_dictionary_set_int64(v2, "pid", v19);
      uint64_t v17 = *((void *)v1 + 13);
    }

    int64_t v20 = *(unsigned int *)(v17 + 68);
    if ((_DWORD)v20)
    {
      xpc_dictionary_set_int64(v2, "uid", v20);
      uint64_t v17 = *((void *)v1 + 13);
    }

    xpc_dictionary_set_uuid(v2, "proc_uuid", (const unsigned __int8 *)(v17 + 8));
    xpc_dictionary_set_uuid(v2, "e_proc_uuid", (const unsigned __int8 *)(*((void *)v1 + 13) + 24LL));
    xpc_dictionary_set_uuid(v2, "persona_id", (const unsigned __int8 *)(*((void *)v1 + 13) + 40LL));
    xpc_dictionary_set_uuid(v2, "parent_id", (const unsigned __int8 *)v1 + 8);
    if ((v1[96] & 1) != 0) {
      xpc_dictionary_set_BOOL(v2, "dry_run", 1);
    }
    uint64_t v21 = *((void *)v1 + 13);
    __int16 v22 = *(_WORD *)(v21 + 100);
    if ((v22 & 1) != 0)
    {
      xpc_dictionary_set_BOOL(v2, "prohibit_expensive", 1);
      uint64_t v21 = *((void *)v1 + 13);
      __int16 v22 = *(_WORD *)(v21 + 100);
      if ((v22 & 2) == 0)
      {
LABEL_40:
        if ((v22 & 4) == 0) {
          goto LABEL_41;
        }
        goto LABEL_47;
      }
    }

    else if ((v22 & 2) == 0)
    {
      goto LABEL_40;
    }

    xpc_dictionary_set_BOOL(v2, "prohibit_constrained", 1);
    uint64_t v21 = *((void *)v1 + 13);
    __int16 v22 = *(_WORD *)(v21 + 100);
    if ((v22 & 4) == 0)
    {
LABEL_41:
      if ((v22 & 8) == 0) {
        goto LABEL_42;
      }
      goto LABEL_48;
    }

void sub_181F31928(_Unwind_Exception *a1)
{
  id v6 = v5;

  _Unwind_Resume(a1);
}

nw_parameters_t nw_parameters_copy(nw_parameters_t parameters)
{
  id v1 = parameters;
  BOOL v2 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v1,  0,  0);

  return (nw_parameters_t)v2;
}

void sub_181F319BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_copy_connected(void *a1)
{
  id v1 = a1;
  BOOL v2 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v1,  1,  0);

  return v2;
}

void sub_181F31A14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_shallow_copy(void *a1)
{
  id v1 = a1;
  BOOL v2 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v1,  0,  1);

  return v2;
}

void sub_181F31A6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_privacy_context(nw_parameters_t parameters, nw_privacy_context_t privacy_context)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = parameters;
  uint64_t v4 = privacy_context;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    id v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_parameters_set_privacy_context";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_parameters_set_privacy_context";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v23 = "nw_parameters_set_privacy_context";
          __int16 v24 = 2082;
          __int16 v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7) {
          goto LABEL_4;
        }
LABEL_39:
        free(v7);
        goto LABEL_4;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_parameters_set_privacy_context";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_parameters_set_privacy_context";
        _os_log_impl( &dword_181A5C000,  v8,  v18,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181F31F30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_require_interface(nw_parameters_t parameters, nw_interface_t interface)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = parameters;
  nw_interface_t v4 = interface;
  nw_interface_t v5 = v4;
  if (v3)
  {
    if (v4)
    {
      unsigned int v6 = *((_DWORD *)v4 + 2);
      if (nw_context_copy_implicit_context::onceToken != -1) {
        dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
      }
      id v7 = (id)nw_context_copy_implicit_context::implicit_context;
      uint64_t v8 = nw_path_copy_interface_with_generation(v7, v6, 0);

      BOOL v9 = nw_interface_shallow_compare(v8, v5);
      uint64_t v10 = *((void *)v3 + 13);
      if (v9) {
        os_log_type_t v11 = v8;
      }
      else {
        os_log_type_t v11 = (NWConcrete_nw_interface *)v5;
      }
      os_log_type_t v12 = v11;
      os_log_type_t v13 = *(void **)(v10 + 168);
      *(void *)(v10 + 16_Block_object_dispose((const void *)(v2 - 64), 8) = v12;
    }

    else
    {
      uint64_t v14 = *((void *)v3 + 13);
      os_log_type_t v15 = *(void **)(v14 + 168);
      *(void *)(v14 + 16_Block_object_dispose((const void *)(v2 - 64), 8) = 0LL;
    }

    goto LABEL_10;
  }

  __nwlog_obj();
  os_log_type_t v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v27 = "nw_parameters_require_interface";
  BOOL v17 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (__nwlog_fault(v17, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_parameters_require_interface";
        _os_log_impl(&dword_181A5C000, v18, v19, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v27 = "nw_parameters_require_interface";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v18,  v21,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }

      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_parameters_require_interface";
        _os_log_impl(&dword_181A5C000, v18, v21, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v27 = "nw_parameters_require_interface";
        _os_log_impl( &dword_181A5C000,  v18,  v23,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F32270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_required_interface_type(nw_parameters_t parameters, nw_interface_type_t interface_type)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = parameters;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    if ((*(_WORD *)(v5 + 100) & 0x100) != 0) {
      *(_DWORD *)(v5 + 92) = interface_type;
    }
    else {
      *(_DWORD *)(v5 + 76) = interface_type;
    }
    goto LABEL_5;
  }

  __nwlog_obj();
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_parameters_set_required_interface_type";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_required_interface_type";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_parameters_set_required_interface_type";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_required_interface_type";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_required_interface_type";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_next_hop_required_interface_type(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    *(_DWORD *)(*((void *)v3 + 13) + 92LL) = a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_set_next_hop_required_interface_type";
  unsigned int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_next_hop_required_interface_type";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_set_next_hop_required_interface_type";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_next_hop_required_interface_type";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_next_hop_required_interface_type";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_required_interface_subtype(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    if ((*(_WORD *)(v5 + 100) & 0x100) != 0) {
      *(_DWORD *)(v5 + 96) = a2;
    }
    else {
      *(_DWORD *)(v5 + 80) = a2;
    }
    goto LABEL_5;
  }

  __nwlog_obj();
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_parameters_set_required_interface_subtype";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_required_interface_subtype";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parameters_set_required_interface_subtype";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_required_interface_subtype";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_required_interface_subtype";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_next_hop_required_interface_subtype(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    *(_DWORD *)(*((void *)v3 + 13) + 96LL) = a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_set_next_hop_required_interface_subtype";
  unsigned int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_next_hop_required_interface_subtype";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_set_next_hop_required_interface_subtype";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_next_hop_required_interface_subtype";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_next_hop_required_interface_subtype";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_only_primary_requires_type(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    if (a2) {
      __int16 v5 = 32;
    }
    else {
      __int16 v5 = 0;
    }
    *(_WORD *)(*((void *)v3 + 13) + 100LL) = *(_WORD *)(*((void *)v3 + 13) + 100LL) & 0xFFDF | v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_parameters_set_only_primary_requires_type";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_only_primary_requires_type";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parameters_set_only_primary_requires_type";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_only_primary_requires_type";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_only_primary_requires_type";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_add_custom_proxy_config(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  __int16 v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v26 = "nw_parameters_add_custom_proxy_config";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_parameters_add_custom_proxy_config";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v26 = "nw_parameters_add_custom_proxy_config";
          __int16 v27 = 2082;
          __int16 v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v10) {
          goto LABEL_6;
        }
LABEL_41:
        free(v10);
        goto LABEL_6;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_parameters_add_custom_proxy_config";
        _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_parameters_add_custom_proxy_config";
        _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void nw_parameters_clear_custom_proxy_configs(void *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    id v3 = (void *)*((void *)v1 + 22);
    *((void *)v1 + 22) = 0LL;

    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_parameters_clear_custom_proxy_configs";
  __int16 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_parameters_clear_custom_proxy_configs";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v15 = "nw_parameters_clear_custom_proxy_configs";
          __int16 v16 = 2082;
          BOOL v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_parameters_clear_custom_proxy_configs";
        _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_parameters_clear_custom_proxy_configs";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_proxy_configuration(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  xpc_object_t v5 = v4;
  xpc_object_t objects = v4;
  if (v3)
  {
    if (v4 && object_getClass(v4) == (Class)MEMORY[0x1895F9250])
    {
      xpc_object_t v7 = xpc_array_create(&objects, 1uLL);
      os_log_type_t v8 = v7;
      if (v7)
      {
        id v9 = nw_proxy_configs_create_with_schema_array(v7);
        BOOL v10 = (void *)v3[22];
        v3[22] = v9;
      }

      xpc_object_t v5 = objects;
    }

    else
    {
      uint64_t v6 = (void *)v3[22];
      v3[22] = 0LL;
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v23 = "nw_parameters_set_proxy_configuration";
  char v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        char v23 = "nw_parameters_set_proxy_configuration";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          char v23 = "nw_parameters_set_proxy_configuration";
          __int16 v24 = 2082;
          __int16 v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        char v23 = "nw_parameters_set_proxy_configuration";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        char v23 = "nw_parameters_set_proxy_configuration";
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F33A00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id nw_parameters_copy_custom_proxy_configs(void *a1)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    id v3 = nw_context_copy_proxy_configs(*(void **)(v1[13] + 136LL));
    id v4 = v3;
    xpc_object_t v5 = (void *)v2[22];
    if (v3) {
      id combined_array = nw_array_create_combined_array(v3, v5);
    }
    else {
      id combined_array = v5;
    }
    id v7 = combined_array;

    goto LABEL_6;
  }

  __nwlog_obj();
  id v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v20 = "nw_parameters_copy_custom_proxy_configs";
  BOOL v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_parameters_copy_custom_proxy_configs";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v20 = "nw_parameters_copy_custom_proxy_configs";
          __int16 v21 = 2082;
          os_log_type_t v22 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_parameters_copy_custom_proxy_configs";
        _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_parameters_copy_custom_proxy_configs";
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F33CEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_effective_proxy_config(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 23, a2);
    goto LABEL_3;
  }

  __nwlog_obj();
  xpc_object_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_set_effective_proxy_config";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_effective_proxy_config";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_set_effective_proxy_config";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_effective_proxy_config";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_effective_proxy_config";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

id nw_parameters_copy_effective_proxy_config(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    id v3 = v1[23];
    goto LABEL_3;
  }

  __nwlog_obj();
  xpc_object_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_copy_effective_proxy_config";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_copy_effective_proxy_config";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_copy_effective_proxy_config";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_copy_effective_proxy_config";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_copy_effective_proxy_config";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_effective_audit_token(void *a1, __int128 *a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    __int128 v5 = *a2;
    *(_OWORD *)(v3 + 56) = a2[1];
    *(_OWORD *)(v3 + 40) = v5;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_parameters_set_effective_audit_token";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_effective_audit_token";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parameters_set_effective_audit_token";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_effective_audit_token";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_effective_audit_token";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_effective_audit_token(void *a1, _OWORD *a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    id v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_parameters_get_effective_audit_token";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v8, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v19 = "nw_parameters_get_effective_audit_token";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v19 = "nw_parameters_get_effective_audit_token";
            __int16 v20 = 2082;
            __int16 v21 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v19 = "nw_parameters_get_effective_audit_token";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v19 = "nw_parameters_get_effective_audit_token";
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void nw_parameters_set_proxy_bundle_id(void *a1, const char *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    id v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v20 = "nw_parameters_set_proxy_bundle_id";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v8, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v20 = "nw_parameters_set_proxy_bundle_id";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v20 = "nw_parameters_set_proxy_bundle_id";
            __int16 v21 = 2082;
            uint64_t v22 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_27;
        }

        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v20 = "nw_parameters_set_proxy_bundle_id";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v20 = "nw_parameters_set_proxy_bundle_id";
          _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

BOOL nw_parameters_get_proxy_bundle_id(void *a1)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    BOOL v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v26 = "nw_parameters_get_proxy_bundle_id";
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v14, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v26 = "nw_parameters_get_proxy_bundle_id";
          _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v23)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        BOOL v19 = os_log_type_enabled(v15, type);
        if (backtrace_string)
        {
          if (v19)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v26 = "nw_parameters_get_proxy_bundle_id";
            __int16 v27 = 2082;
            __int16 v28 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v15,  v18,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_40;
        }

        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v26 = "nw_parameters_get_proxy_bundle_id";
          _os_log_impl(&dword_181A5C000, v15, v18, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v26 = "nw_parameters_get_proxy_bundle_id";
          _os_log_impl( &dword_181A5C000,  v15,  v20,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void ___ZL39nw_parameters_copy_self_proxy_bundle_idv_block_invoke()
{
  if (nw_utilities_get_self_bundle_id::onceToken != -1) {
    dispatch_once(&nw_utilities_get_self_bundle_id::onceToken, &__block_literal_global_7);
  }
}

void nw_parameters_set_source_application_by_bundle_id_internal(void *a1, const char *a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    nw_parameters_set_effective_bundle_id(v3, a2);
    __int128 v5 = (void *)NEHelperCacheCopyAppUUIDMappingExtended();
    uint64_t v6 = v5;
    if (v5 && object_getClass(v5) == (Class)MEMORY[0x1895F9220] && xpc_array_get_count(v6))
    {
      v4[12] &= ~0x1000uLL;
      *(_OWORD *)(v4[13] + 24LL) = *(_OWORD *)xpc_array_get_uuid(v6, 0LL);
    }

    else
    {
      v4[12] |= 0x1000uLL;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint32_t v7 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        BOOL v19 = "nw_parameters_set_source_application_by_bundle_id_internal";
        __int16 v20 = 2082;
        __int16 v21 = (void *)a2;
        _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_ERROR,  "%{public}s Failed to convert from bundle ID (%{public}s) to UUID. This could lead to incorrect policies and accounting.",  buf,  0x16u);
      }
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v19 = "nw_parameters_set_source_application_by_bundle_id_internal";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v19 = "nw_parameters_set_source_application_by_bundle_id_internal";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v19 = "nw_parameters_set_source_application_by_bundle_id_internal";
          __int16 v20 = 2082;
          __int16 v21 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v19 = "nw_parameters_set_source_application_by_bundle_id_internal";
        _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v19 = "nw_parameters_set_source_application_by_bundle_id_internal";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F3538C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_e_proc_uuid(void *a1, _OWORD *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *(_OWORD *)(*((void *)v3 + 13) + 24LL) = *a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  __int128 v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_parameters_set_e_proc_uuid";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint32_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_parameters_set_e_proc_uuid";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint32_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_parameters_set_e_proc_uuid";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_parameters_set_e_proc_uuid";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint32_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_parameters_set_e_proc_uuid";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_source_application_by_bundle_id(void *a1, const char *a2)
{
}

void nw_parameters_set_source_application_by_external_bundle_id(void *a1, const char *a2)
{
}

uint64_t nw_parameters_get_effective_process_name(void *a1)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[14];
    if (!v3)
    {
      id v4 = v1;
      if (uuid_is_null((const unsigned __int8 *)(v4[13] + 24LL)))
      {
      }

      else
      {
        int v18 = uuid_compare((const unsigned __int8 *)(v4[13] + 24LL), (const unsigned __int8 *)(v4[13] + 8LL));

        if (v18)
        {
          *(_OWORD *)uu = *(_OWORD *)(v4[13] + 24LL);
          if (!uuid_is_null(uu))
          {
            BOOL v19 = nw_utilities_copy_bundle_id_for_uuid(uu);
            if (v19)
            {
              nw_parameters_set_effective_bundle_id(v4, (const char *)v19);
              free((void *)v19);
            }
          }
        }
      }

      *(_OWORD *)os_log_type_t type = 0u;
      __int128 v35 = 0u;
      if (nw_copy_current_audit_token(type))
      {
        __int128 v5 = v4;
        uint64_t v6 = v5;
        __int128 v7 = *(_OWORD *)(v5 + 56);
        *(_OWORD *)uu = *(_OWORD *)(v5 + 40);
        *(_OWORD *)&uu[16] = v7;
        if (*(void *)uu | *(void *)&uu[8] | (unint64_t)v7 | *((void *)&v7 + 1))
        {
          BOOL v11 = *((void *)v5 + 5) == *(void *)type
             && *((void *)v5 + 6) == *(void *)&type[8]
             && *((void *)v5 + 7) == (void)v35
             && *((void *)v5 + 8) == *((void *)&v35 + 1);

          if (!v11)
          {
            os_log_type_t v12 = (__int128 *)(v6 + 40);
            __int128 v36 = 0u;
            __int128 v37 = 0u;
            char v13 = v6;
            BOOL v14 = v13;
            __int128 v15 = v12[1];
            *(_OWORD *)uu = *v12;
            *(_OWORD *)&uu[16] = v15;
            if (*(void *)uu | *(void *)&uu[8] | (unint64_t)v15 | *((void *)&v15 + 1))
            {
              __int128 v16 = v12[1];
              __int128 v36 = *v12;
              __int128 v37 = v16;
            }

            v33[2] = v36;
            v33[3] = v37;
            if ((unint64_t)v36 | *((void *)&v36 + 1) | (unint64_t)v37 | *((void *)&v37 + 1))
            {
              v33[0] = v36;
              v33[1] = v37;
              BOOL v17 = nw_utilities_copy_bundle_id_for_audit_token(v33);
              if (v17)
              {
                nw_parameters_set_effective_bundle_id(v14, (const char *)v17);
                free((void *)v17);
              }
            }
          }
        }

        else
        {
        }
      }

      pid_t v20 = getpid();
      int v21 = *(_DWORD *)(v4[13] + 64LL);
      if (v21 >= 1 && v21 != v20)
      {
        BOOL v23 = nw_utilities_copy_bundle_id_for_pid(v21);
        if (v23)
        {
          nw_parameters_set_effective_bundle_id(v4, (const char *)v23);
          free((void *)v23);
        }
      }

      uint64_t v3 = v2[14];
      if (!v3)
      {
        if (nw_utilities_get_self_name::onceToken != -1) {
          dispatch_once(&nw_utilities_get_self_name::onceToken, &__block_literal_global_8_44151);
        }
        uint64_t v3 = nw_utilities_get_self_name::name;
      }
    }

    goto LABEL_40;
  }

  __nwlog_obj();
  __int16 v25 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)uu = 136446210;
  *(void *)&uu[4] = "nw_parameters_get_effective_process_name";
  uint64_t v26 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v36) = 0;
  if (__nwlog_fault(v26, type, &v36))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type[0];
      if (os_log_type_enabled(v27, type[0]))
      {
        *(_DWORD *)uu = 136446210;
        *(void *)&uu[4] = "nw_parameters_get_effective_process_name";
        _os_log_impl(&dword_181A5C000, v27, v28, "%{public}s called with null parameters", uu, 0xCu);
      }
    }

    else if ((_BYTE)v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v30 = type[0];
      BOOL v31 = os_log_type_enabled(v27, type[0]);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)uu = 136446466;
          *(void *)&uu[4] = "nw_parameters_get_effective_process_name";
          *(_WORD *)&uu[12] = 2082;
          *(void *)&uu[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v27,  v30,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  uu,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_57;
      }

      if (v31)
      {
        *(_DWORD *)uu = 136446210;
        *(void *)&uu[4] = "nw_parameters_get_effective_process_name";
        _os_log_impl(&dword_181A5C000, v27, v30, "%{public}s called with null parameters, no backtrace", uu, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = type[0];
      if (os_log_type_enabled(v27, type[0]))
      {
        *(_DWORD *)uu = 136446210;
        *(void *)&uu[4] = "nw_parameters_get_effective_process_name";
        _os_log_impl( &dword_181A5C000,  v27,  v32,  "%{public}s called with null parameters, backtrace limit exceeded",  uu,  0xCu);
      }
    }
  }

void sub_181F35AD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_source_application(void *a1, __int128 *a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = v3;
  if (v3)
  {
    __int128 v5 = *a2;
    *(_OWORD *)(v3 + 56) = a2[1];
    *(_OWORD *)(v3 + 40) = v5;
    int v6 = *((_DWORD *)a2 + 5);
    *(_DWORD *)(*((void *)v3 + 13) + 64LL) = v6;
    *(_DWORD *)(*((void *)v3 + 13) + 68LL) = *((_DWORD *)a2 + 1);
    uint64_t v24 = 0LL;
    memset(buffer, 0, sizeof(buffer));
    int v7 = proc_pidinfo(v6, 17, 1uLL, buffer, 56);
    uint64_t v8 = v4[12];
    if (v7 == 56)
    {
      v4[12] = v8 & 0xFFFFFFFFFFFFDFFFLL;
      *(_OWORD *)(v4[13] + 24LL) = buffer[0];
    }

    else
    {
      v4[12] = v8 | 0x2000;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v9 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        pid_t v20 = "nw_parameters_set_source_application";
        __int16 v21 = 1024;
        int v22 = v6;
        _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_ERROR,  "%{public}s Failed to convert from PID (%d) to UUID. This could lead to incorrect policies and accounting.",  buf,  0x12u);
      }
    }

    goto LABEL_7;
  }

  __nwlog_obj();
  os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(buffer[0]) = 136446210;
  *(void *)((char *)buffer + 4) = "nw_parameters_set_source_application";
  BOOL v11 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  char v18 = 0;
  if (__nwlog_fault(v11, buf, &v18))
  {
    if (buf[0] == 17)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = buf[0];
      if (os_log_type_enabled(v12, (os_log_type_t)buf[0]))
      {
        LODWORD(buffer[0]) = 136446210;
        *(void *)((char *)buffer + 4) = "nw_parameters_set_source_application";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null parameters", (uint8_t *)buffer, 0xCu);
      }
    }

    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = buf[0];
      BOOL v16 = os_log_type_enabled(v12, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v16)
        {
          LODWORD(buffer[0]) = 136446466;
          *(void *)((char *)buffer + 4) = "nw_parameters_set_source_application";
          WORD6(buffer[0]) = 2082;
          *(void *)((char *)buffer + 14) = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  (uint8_t *)buffer,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }

      if (v16)
      {
        LODWORD(buffer[0]) = 136446210;
        *(void *)((char *)buffer + 4) = "nw_parameters_set_source_application";
        _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null parameters, no backtrace",  (uint8_t *)buffer,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = buf[0];
      if (os_log_type_enabled(v12, (os_log_type_t)buf[0]))
      {
        LODWORD(buffer[0]) = 136446210;
        *(void *)((char *)buffer + 4) = "nw_parameters_set_source_application";
        _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null parameters, backtrace limit exceeded",  (uint8_t *)buffer,  0xCu);
      }
    }
  }

void sub_181F35E9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_pid(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *(_DWORD *)(*((void *)v3 + 13) + 64LL) = a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  __int128 v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_parameters_set_pid";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_pid";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_parameters_set_pid";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_pid";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_pid";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_uid(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *(_DWORD *)(*((void *)v3 + 13) + 68LL) = a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  __int128 v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_parameters_set_uid";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_uid";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_parameters_set_uid";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_uid";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_uid";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_application_id(void *a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  __int128 v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_parameters_set_application_id";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    uu[0] = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type[0];
      if (os_log_type_enabled(v12, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_parameters_set_application_id";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (uu[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type[0];
      BOOL v19 = os_log_type_enabled(v12, type[0]);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_parameters_set_application_id";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v18,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_49:
        if (!v11) {
          goto LABEL_12;
        }
LABEL_50:
        free(v11);
        goto LABEL_12;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_parameters_set_application_id";
        _os_log_impl(&dword_181A5C000, v12, v18, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type[0];
      if (os_log_type_enabled(v12, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_parameters_set_application_id";
        _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181F369B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_persona(void *a1, _OWORD *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *(_OWORD *)(*((void *)v3 + 13) + 40LL) = *a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  __int128 v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_parameters_set_persona";
  __int128 v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_persona";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_parameters_set_persona";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_persona";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_persona";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_parameters_copy_application_id(void *a1)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    BOOL v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_parameters_copy_application_id";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v29) = 16;
    uu[0] = 0;
    if (__nwlog_fault(v15, &v29, uu))
    {
      if (v29 == 17)
      {
        __nwlog_obj();
        BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v17 = v29;
        if (os_log_type_enabled(v16, (os_log_type_t)v29))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_copy_application_id";
          _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (uu[0])
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = v29;
        BOOL v21 = os_log_type_enabled(v16, (os_log_type_t)v29);
        if (backtrace_string)
        {
          if (v21)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_parameters_copy_application_id";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v16,  v20,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_51;
        }

        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_copy_application_id";
          _os_log_impl(&dword_181A5C000, v16, v20, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v25 = v29;
        if (os_log_type_enabled(v16, (os_log_type_t)v29))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_copy_application_id";
          _os_log_impl( &dword_181A5C000,  v16,  v25,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181F37280(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_get_persona(uint64_t a1, unsigned __int8 *uu)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    *(_OWORD *)uu = *(_OWORD *)(*(void *)(a1 + 104) + 40LL);
    return uuid_is_null(uu) == 0;
  }

  __nwlog_obj();
  id v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v14 = "nw_parameters_get_persona";
  id v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_parameters_get_persona";
        _os_log_impl(&dword_181A5C000, v5, v6, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v14 = "nw_parameters_get_persona";
          __int16 v15 = 2082;
          BOOL v16 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v8,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_19;
      }

      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_parameters_get_persona";
        _os_log_impl(&dword_181A5C000, v5, v8, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_parameters_get_persona";
        _os_log_impl( &dword_181A5C000,  v5,  v10,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_parameters_is_persona_set(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (a1) {
    return uuid_is_null((const unsigned __int8 *)(*(void *)(a1 + 104) + 40LL)) == 0;
  }
  __nwlog_obj();
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v13 = "nw_parameters_is_persona_set";
  id v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v3, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_parameters_is_persona_set";
        _os_log_impl(&dword_181A5C000, v4, v5, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v10)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          char v13 = "nw_parameters_is_persona_set";
          __int16 v14 = 2082;
          __int16 v15 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v4,  v7,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_19;
      }

      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_parameters_is_persona_set";
        _os_log_impl(&dword_181A5C000, v4, v7, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_parameters_is_persona_set";
        _os_log_impl( &dword_181A5C000,  v4,  v9,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_use_persona(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      int v9 = 0x80000;
    }
    else {
      int v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFF7FFFF;
    *(_WORD *)uint64_t v6 = v10;
    *(_BYTE *)(v6 + 2) = (v10 | v9) >> 16;
    goto LABEL_6;
  }

  __nwlog_obj();
  char v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v22 = "nw_parameters_set_use_persona";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_parameters_set_use_persona";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v22 = "nw_parameters_set_use_persona";
          __int16 v23 = 2082;
          os_log_type_t v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_parameters_set_use_persona";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_parameters_set_use_persona";
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_use_persona(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int8 *)(*((void *)v1 + 13) + 110LL) >> 3) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_use_persona";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_use_persona";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_use_persona";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_use_persona";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_use_persona";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

const char *nw_parameters_get_url(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_parameters_get_url";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_get_url";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v17 = "nw_parameters_get_url";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_get_url";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_get_url";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181F37FD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_sanitized_url(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_parameters_get_sanitized_url";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_get_sanitized_url";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v17 = "nw_parameters_get_sanitized_url";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_get_sanitized_url";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_get_sanitized_url";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181F38280(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_url_endpoint(void *a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v25 = "nw_parameters_set_url_endpoint";
    int v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_parameters_set_url_endpoint";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v25 = "nw_parameters_set_url_endpoint";
          __int16 v26 = 2082;
          __int16 v27 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v9) {
          goto LABEL_5;
        }
LABEL_40:
        free(v9);
        goto LABEL_5;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_parameters_set_url_endpoint";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_parameters_set_url_endpoint";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181F3877C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_main_document_url(void *a1, const char *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2 && *a2)
    {
      nw_endpoint_t url = nw_endpoint_create_url(a2);
      id v6 = (void *)v4[26];
      v4[26] = url;
    }

    else
    {
      id v6 = (void *)v3[26];
      v3[26] = 0LL;
    }

    goto LABEL_7;
  }

  __nwlog_obj();
  int v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_parameters_set_main_document_url";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_main_document_url";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_parameters_set_main_document_url";
          __int16 v19 = 2082;
          os_log_type_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_main_document_url";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_main_document_url";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F38A4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *nw_parameters_get_main_document_url(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_parameters_get_main_document_url";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_get_main_document_url";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v17 = "nw_parameters_get_main_document_url";
            __int16 v18 = 2082;
            __int16 v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_get_main_document_url";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_get_main_document_url";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181F38CFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFTypeRef nw_parameters_copy_main_document_cfurl(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v17 = "nw_parameters_copy_main_document_cfurl";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_main_document_cfurl";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v17 = "nw_parameters_copy_main_document_cfurl";
            __int16 v18 = 2082;
            __int16 v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_main_document_cfurl";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v17 = "nw_parameters_copy_main_document_cfurl";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181F38FAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_delegated_unique_pid(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  CFTypeRef v4 = v3;
  if (v3)
  {
    *(void *)(*((void *)v3 + 13) + 56LL) = a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_parameters_set_delegated_unique_pid";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_delegated_unique_pid";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_parameters_set_delegated_unique_pid";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_delegated_unique_pid";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_delegated_unique_pid";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_required_address_family(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  CFTypeRef v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v22 = "nw_parameters_set_required_address_family";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v12, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          char v22 = "nw_parameters_set_required_address_family";
          _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        BOOL v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            char v22 = "nw_parameters_set_required_address_family";
            __int16 v23 = 2082;
            os_log_type_t v24 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_29;
        }

        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          char v22 = "nw_parameters_set_required_address_family";
          _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          char v22 = "nw_parameters_set_required_address_family";
          _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181F3957C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_local_address_preference(void *a1, nw_ip_local_address_preference_t a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  CFTypeRef v4 = v3;
  if (v3)
  {
    id v5 = *(void **)(v3[19] + 48LL);
    if (v5)
    {
      id v6 = v5;
      id v7 = v6[1];

      id v8 = (id)g_ip_definition;
      BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v7, (uint64_t)v8);

      if (is_equal_unsafe) {
        nw_ip_options_set_local_address_preference(*(nw_protocol_options_t *)(v4[19] + 48LL), a2);
      }
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  nw_ip_version_t v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v21 = "nw_parameters_set_local_address_preference";
  BOOL v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v11, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v21 = "nw_parameters_set_local_address_preference";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v21 = "nw_parameters_set_local_address_preference";
          __int16 v22 = 2082;
          __int16 v23 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v21 = "nw_parameters_set_local_address_preference";
        _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v21 = "nw_parameters_set_local_address_preference";
        _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F398B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *nw_parameters_get_upper_transport_protocol_identifier(void *a1)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    int v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v21 = "nw_parameters_get_upper_transport_protocol_identifier";
    nw_ip_version_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v10, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v21 = "nw_parameters_get_upper_transport_protocol_identifier";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v21 = "nw_parameters_get_upper_transport_protocol_identifier";
            __int16 v22 = 2082;
            __int16 v23 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_26;
        }

        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v21 = "nw_parameters_get_upper_transport_protocol_identifier";
          _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v21 = "nw_parameters_get_upper_transport_protocol_identifier";
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181F39BF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_parameters_get_upper_transport_protocol_options_block_invoke(uint64_t a1, void *a2)
{
  options = a2;
  if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55294);
  }
  id v4 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
  nw_protocol_definition_t v5 = nw_protocol_options_copy_definition(options);
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, (uint64_t)v5);

  if (is_equal_unsafe) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a2);
  }
}

void sub_181F39CCC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_local_endpoint(nw_parameters_t parameters, nw_endpoint_t local_endpoint)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = parameters;
  id v4 = local_endpoint;
  nw_protocol_definition_t v5 = v4;
  if (v3)
  {
    if (v4 && (BOOL v6 = v4, v7 = -[nw_endpoint type](v6, "type"), v6, v7 == 1))
    {
      objc_storeStrong((id *)(*((void *)v3 + 13) + 160LL), local_endpoint);
    }

    else
    {
      uint64_t v8 = *((void *)v3 + 13);
      int v9 = *(void **)(v8 + 160);
      *(void *)(v8 + 160) = 0LL;
    }

    goto LABEL_6;
  }

  __nwlog_obj();
  nw_ip_version_t v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v21 = "nw_parameters_set_local_endpoint";
  BOOL v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v11, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v21 = "nw_parameters_set_local_endpoint";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v21 = "nw_parameters_set_local_endpoint";
          __int16 v22 = 2082;
          __int16 v23 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v21 = "nw_parameters_set_local_endpoint";
        _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v21 = "nw_parameters_set_local_endpoint";
        _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F39FC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_reuse_local_address(nw_parameters_t parameters, BOOL reuse_local_address)
{
  BOOL v2 = reuse_local_address;
  uint64_t v20 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = parameters;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 256LL;
    if (!v2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFFFFEFFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v17 = "nw_parameters_set_reuse_local_address";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_parameters_set_reuse_local_address";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v17 = "nw_parameters_set_reuse_local_address";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_parameters_set_reuse_local_address";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_parameters_set_reuse_local_address";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

const char *nw_data_mode_to_string(unsigned int a1)
{
  if (a1 > 3) {
    return "unknown";
  }
  else {
    return off_189BB8FA8[a1];
  }
}

void nw_parameters_set_traffic_class(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    *(_DWORD *)(*((void *)v3 + 13) + 72LL) = a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_parameters_set_traffic_class";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_traffic_class";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_parameters_set_traffic_class";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_traffic_class";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_traffic_class";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_expected_workload(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    *((void *)v3 + 9) = a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_parameters_set_expected_workload";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_expected_workload";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_parameters_set_expected_workload";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_expected_workload";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_expected_workload";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_expected_workload(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 9);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_parameters_get_expected_workload";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_expected_workload";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_parameters_get_expected_workload";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_expected_workload";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_expected_workload";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_channel_teardown_delay(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    *((void *)v3 + 10) = a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_parameters_set_channel_teardown_delay";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_channel_teardown_delay";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_parameters_set_channel_teardown_delay";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_channel_teardown_delay";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_channel_teardown_delay";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_channel_teardown_delay(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 10);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_parameters_get_channel_teardown_delay";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_channel_teardown_delay";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_parameters_get_channel_teardown_delay";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_channel_teardown_delay";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_channel_teardown_delay";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_channel_demux_options(void *a1, void *a2)
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    __int16 v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v39 = "nw_parameters_set_channel_demux_options";
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v39 = "nw_parameters_set_channel_demux_options";
        _os_log_impl(&dword_181A5C000, v20, v23, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      BOOL v26 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v39 = "nw_parameters_set_channel_demux_options";
          __int16 v40 = 2082;
          uint64_t v41 = (uint64_t)backtrace_string;
          _os_log_impl( &dword_181A5C000,  v20,  v25,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_56:
        if (!v19)
        {
LABEL_19:

          return;
        }

void sub_181F3B670( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_parameters_set_channel_demux_options_block_invoke(uint64_t a1, int a2, xpc_object_t value)
{
  return 1LL;
}

void nw_parameters_set_proc_uuid(void *a1, _OWORD *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *(_OWORD *)(*((void *)v3 + 13) + 8LL) = *a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v16 = "nw_parameters_set_proc_uuid";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_parameters_set_proc_uuid";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v16 = "nw_parameters_set_proc_uuid";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_parameters_set_proc_uuid";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_parameters_set_proc_uuid";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_parent_id_inner(NWConcrete_nw_parameters *a1, const unsigned __int8 *a2, int a3)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  uint64_t v5 = a1;
  BOOL v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v29 = "nw_parameters_set_parent_id_inner";
    char v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v29 = "nw_parameters_set_parent_id_inner";
        _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v29 = "nw_parameters_set_parent_id_inner";
          __int16 v30 = 2082;
          uint64_t v31 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v19,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_43:
        if (!v13) {
          goto LABEL_9;
        }
LABEL_44:
        free(v13);
        goto LABEL_9;
      }

      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v29 = "nw_parameters_set_parent_id_inner";
        _os_log_impl(&dword_181A5C000, v14, v19, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v29 = "nw_parameters_set_parent_id_inner";
        _os_log_impl( &dword_181A5C000,  v14,  v24,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181F3BE5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_parent_id(NWConcrete_nw_parameters *a1, const unsigned __int8 *a2)
{
}

void nw_parameters_add_parent_id(void *a1, const unsigned __int8 *a2)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = (unsigned __int8 *)v3;
  if (!v3)
  {
    __nwlog_obj();
    char v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v30 = "nw_parameters_add_parent_id";
    char v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v30 = "nw_parameters_add_parent_id";
        _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v30 = "nw_parameters_add_parent_id";
          __int16 v31 = 2082;
          uint64_t v32 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v15,  v20,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_47:
        if (!v14) {
          goto LABEL_13;
        }
LABEL_48:
        free(v14);
        goto LABEL_13;
      }

      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v30 = "nw_parameters_add_parent_id";
        _os_log_impl(&dword_181A5C000, v15, v20, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v30 = "nw_parameters_add_parent_id";
        _os_log_impl( &dword_181A5C000,  v15,  v25,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181F3C3B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_get_parent_id(void *a1, _OWORD *a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v22 = "nw_parameters_get_parent_id";
    xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_get_parent_id";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_parameters_get_parent_id";
          __int16 v23 = 2082;
          BOOL v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_get_parent_id";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_get_parent_id";
        _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_parameters_iterate_parent_ids_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = v4;
  if (v4)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    bytes = xpc_uuid_get_bytes(v4);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, const uint8_t *))(v6 + 16))(v6, bytes);
  }

  else
  {
    uint64_t v8 = 1LL;
  }

  return v8;
}

void sub_181F3C8C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_dry_run(void *a1, unsigned int a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFFFFFFELL | a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_parameters_set_dry_run";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_dry_run";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_parameters_set_dry_run";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_dry_run";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_dry_run";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_prohibit_expensive(nw_parameters_t parameters, BOOL prohibit_expensive)
{
  __int16 v2 = prohibit_expensive;
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = parameters;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    *(_WORD *)(*((void *)v3 + 13) + 100LL) = *(_WORD *)(*((void *)v3 + 13) + 100LL) & 0xFFFE | v2;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_parameters_set_prohibit_expensive";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_prohibit_expensive";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_parameters_set_prohibit_expensive";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_prohibit_expensive";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_prohibit_expensive";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_prohibit_constrained(nw_parameters_t parameters, BOOL prohibit_constrained)
{
  BOOL v2 = prohibit_constrained;
  uint64_t v20 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = parameters;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    if (v2) {
      __int16 v5 = 2;
    }
    else {
      __int16 v5 = 0;
    }
    *(_WORD *)(*((void *)v3 + 13) + 100LL) = *(_WORD *)(*((void *)v3 + 13) + 100LL) & 0xFFFD | v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_parameters_set_prohibit_constrained";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_prohibit_constrained";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parameters_set_prohibit_constrained";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_prohibit_constrained";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_prohibit_constrained";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_allow_ultra_constrained(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    if (a2) {
      __int16 v5 = 4;
    }
    else {
      __int16 v5 = 0;
    }
    *(_WORD *)(*((void *)v3 + 13) + 100LL) = *(_WORD *)(*((void *)v3 + 13) + 100LL) & 0xFFFB | v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_parameters_set_allow_ultra_constrained";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_allow_ultra_constrained";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parameters_set_allow_ultra_constrained";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_allow_ultra_constrained";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_allow_ultra_constrained";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_allow_ultra_constrained(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(*((void *)v1 + 13) + 100LL) >> 2) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  __int16 v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_parameters_get_allow_ultra_constrained";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_allow_ultra_constrained";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_parameters_get_allow_ultra_constrained";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_allow_ultra_constrained";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_allow_ultra_constrained";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_prohibit_roaming(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    if (a2) {
      __int16 v5 = 8;
    }
    else {
      __int16 v5 = 0;
    }
    *(_WORD *)(*((void *)v3 + 13) + 100LL) = *(_WORD *)(*((void *)v3 + 13) + 100LL) & 0xFFF7 | v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_parameters_set_prohibit_roaming";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_prohibit_roaming";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parameters_set_prohibit_roaming";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_prohibit_roaming";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_prohibit_roaming";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_prohibit_interface_type(nw_parameters_t parameters, nw_interface_type_t interface_type)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = parameters;
  nw_parameters_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_parameters_prohibit_interface_type";
    char v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_parameters_prohibit_interface_type";
        _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_parameters_prohibit_interface_type";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v15,  v18,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_47;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_parameters_prohibit_interface_type";
        _os_log_impl(&dword_181A5C000, v15, v18, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_parameters_prohibit_interface_type";
        _os_log_impl( &dword_181A5C000,  v15,  v28,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_47;
  }

  __int16 v5 = *(void ***)(*((void *)v3 + 13) + 176LL);
  if (v5)
  {
    uint64_t v6 = *v5;
    if (!*v5) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }

  BOOL v7 = calloc(1uLL, 0x90uLL);
  if (v7)
  {
LABEL_6:
    *(void *)(v4[13] + 176LL) = v7;
    uint64_t v6 = **(void ***)(v4[13] + 176LL);
    if (!v6) {
      goto LABEL_9;
    }
LABEL_7:
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    LOBYTE(v35) = 0;
    applier[0] = MEMORY[0x1895F87A8];
    applier[1] = 3221225472LL;
    applier[2] = __nw_parameters_prohibit_interface_type_block_invoke;
    applier[3] = &unk_189BB8D68;
    nw_interface_type_t v31 = interface_type;
    void applier[4] = buf;
    xpc_array_apply(v6, applier);
    int v8 = *(unsigned __int8 *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    if (v8)
    {
LABEL_11:

      return;
    }

    os_log_type_t v9 = **(void ***)(v4[13] + 176LL);
    if (v9)
    {
LABEL_10:
      xpc_array_set_uint64(v9, 0xFFFFFFFFFFFFFFFFLL, interface_type);
      goto LABEL_11;
    }

void sub_181F3DF00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_parameters_prohibit_interface_type_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1895F92F0])
  {
    uint64_t v5 = 1LL;
    if (xpc_uint64_get_value(v4) == *(_DWORD *)(a1 + 40))
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
      uint64_t v5 = 0LL;
    }
  }

  else
  {
    uint64_t v5 = 1LL;
  }

  return v5;
}

void sub_181F3DFA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_clear_prohibited_interface_types(nw_parameters_t parameters)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_parameters_t v1 = parameters;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    nw_parameters_t v3 = *(void ***)(*((void *)v1 + 13) + 176LL);
    if (v3)
    {
      id v4 = *v3;
      char *v3 = 0LL;
    }

    goto LABEL_4;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_clear_prohibited_interface_types";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_clear_prohibited_interface_types";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_clear_prohibited_interface_types";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_clear_prohibited_interface_types";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_clear_prohibited_interface_types";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_iterate_prohibited_interface_types( nw_parameters_t parameters, nw_parameters_iterate_interface_types_block_t iterate_block)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = parameters;
  nw_parameters_iterate_interface_types_block_t v4 = iterate_block;
  uint64_t v5 = v4;
  if (v3)
  {
    uint64_t v6 = *(void ***)(*((void *)v3 + 13) + 176LL);
    if (v6)
    {
      BOOL v7 = *v6;
      if (*v6)
      {
        applier[0] = MEMORY[0x1895F87A8];
        applier[1] = 3221225472LL;
        applier[2] = __nw_parameters_iterate_prohibited_interface_types_block_invoke;
        applier[3] = &unk_189BC0F80;
        id v17 = v4;
        xpc_array_apply(v7, applier);
      }
    }

    goto LABEL_5;
  }

  __nwlog_obj();
  os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v21 = "nw_parameters_iterate_prohibited_interface_types";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v9, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v21 = "nw_parameters_iterate_prohibited_interface_types";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v21 = "nw_parameters_iterate_prohibited_interface_types";
          __int16 v22 = 2082;
          __int16 v23 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v21 = "nw_parameters_iterate_prohibited_interface_types";
        _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v21 = "nw_parameters_iterate_prohibited_interface_types";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F3E548( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_parameters_iterate_prohibited_interface_types_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  xpc_uint64_get_value(v4);
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();

  return v5;
}

void sub_181F3E5AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_prohibited_interface_types(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "nw_parameters_set_prohibited_interface_types";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v11, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_prohibited_interface_types";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null parameters", applier, 0xCu);
        }
      }

      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&void applier[4] = "nw_parameters_set_prohibited_interface_types";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  applier,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }

        if (v16)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_prohibited_interface_types";
          _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null parameters, no backtrace",  applier,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_prohibited_interface_types";
          _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null parameters, backtrace limit exceeded",  applier,  0xCu);
        }
      }
    }

void sub_181F3E9B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_prohibited_interface_subtypes(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "nw_parameters_set_prohibited_interface_subtypes";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v11, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_prohibited_interface_subtypes";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null parameters", applier, 0xCu);
        }
      }

      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&void applier[4] = "nw_parameters_set_prohibited_interface_subtypes";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  applier,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }

        if (v16)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_prohibited_interface_subtypes";
          _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null parameters, no backtrace",  applier,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_prohibited_interface_subtypes";
          _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null parameters, backtrace limit exceeded",  applier,  0xCu);
        }
      }
    }

void sub_181F3EDCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_preferred_interface_subtypes(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "nw_parameters_set_preferred_interface_subtypes";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v11, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_preferred_interface_subtypes";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null parameters", applier, 0xCu);
        }
      }

      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&void applier[4] = "nw_parameters_set_preferred_interface_subtypes";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  applier,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }

        if (v16)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_preferred_interface_subtypes";
          _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null parameters, no backtrace",  applier,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_preferred_interface_subtypes";
          _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null parameters, backtrace limit exceeded",  applier,  0xCu);
        }
      }
    }

void sub_181F3F1E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_has_preferred_interface_subtypes(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v18 = "nw_parameters_has_preferred_interface_subtypes";
    xpc_object_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v7, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          char v18 = "nw_parameters_has_preferred_interface_subtypes";
          _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            char v18 = "nw_parameters_has_preferred_interface_subtypes";
            __int16 v19 = 2082;
            char v20 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }

        if (v12)
        {
          *(_DWORD *)buf = 136446210;
          char v18 = "nw_parameters_has_preferred_interface_subtypes";
          _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          char v18 = "nw_parameters_has_preferred_interface_subtypes";
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181F3F4A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_prohibit_interface(nw_parameters_t parameters, nw_interface_t interface)
{
  uint64_t v51 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = parameters;
  id v4 = interface;
  BOOL v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v46 = "nw_parameters_prohibit_interface";
    BOOL v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v46 = "nw_parameters_prohibit_interface";
        _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v43)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v46 = "nw_parameters_prohibit_interface";
          __int16 v47 = 2082;
          uint64_t v48 = (uint64_t)backtrace_string;
          _os_log_impl( &dword_181A5C000,  v15,  v24,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_72:
        if (!v14) {
          goto LABEL_12;
        }
LABEL_73:
        free(v14);
        goto LABEL_12;
      }

      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v46 = "nw_parameters_prohibit_interface";
        _os_log_impl(&dword_181A5C000, v15, v24, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v46 = "nw_parameters_prohibit_interface";
        _os_log_impl( &dword_181A5C000,  v15,  v36,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181F3FEBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_clear_prohibited_interfaces(nw_parameters_t parameters)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_parameters_t v1 = parameters;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *(void *)(*((void *)v1 + 13) + 176LL);
    if (v3)
    {
      id v4 = *(void **)(v3 + 24);
      *(void *)(v3 + 24) = 0LL;
    }

    goto LABEL_4;
  }

  __nwlog_obj();
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_clear_prohibited_interfaces";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_clear_prohibited_interfaces";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_clear_prohibited_interfaces";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_clear_prohibited_interfaces";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_clear_prohibited_interfaces";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_iterate_prohibited_interfaces( nw_parameters_t parameters, nw_parameters_iterate_interfaces_block_t iterate_block)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = parameters;
  nw_parameters_iterate_interfaces_block_t v4 = iterate_block;
  BOOL v5 = v4;
  if (v3)
  {
    uint64_t v6 = *(void *)(*((void *)v3 + 13) + 176LL);
    if (v6)
    {
      uint64_t v7 = *(void **)(v6 + 24);
      if (v7)
      {
        applier[0] = MEMORY[0x1895F87A8];
        applier[1] = 3221225472LL;
        applier[2] = __nw_parameters_iterate_prohibited_interfaces_block_invoke;
        applier[3] = &unk_189BC0F80;
        id v17 = v4;
        xpc_array_apply(v7, applier);
      }
    }

    goto LABEL_5;
  }

  __nwlog_obj();
  os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v21 = "nw_parameters_iterate_prohibited_interfaces";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v9, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v21 = "nw_parameters_iterate_prohibited_interfaces";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v21 = "nw_parameters_iterate_prohibited_interfaces";
          __int16 v22 = 2082;
          uint64_t v23 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v21 = "nw_parameters_iterate_prohibited_interfaces";
        _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v21 = "nw_parameters_iterate_prohibited_interfaces";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F40478( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_parameters_iterate_prohibited_interfaces_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  nw_parameters_iterate_interfaces_block_t v4 = nw_interface_create_from_dictionary(a3);
  if (v4) {
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
  else {
    uint64_t v5 = 1LL;
  }

  return v5;
}

void sub_181F404E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_prohibited_interfaces(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "nw_parameters_set_prohibited_interfaces";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v11, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_prohibited_interfaces";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null parameters", applier, 0xCu);
        }
      }

      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&void applier[4] = "nw_parameters_set_prohibited_interfaces";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  applier,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }

        if (v16)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_prohibited_interfaces";
          _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null parameters, no backtrace",  applier,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_prohibited_interfaces";
          _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null parameters, backtrace limit exceeded",  applier,  0xCu);
        }
      }
    }

void sub_181F408F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_has_prohibited_netagents(void *a1)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  nw_parameters_t v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v20 = "nw_parameters_has_prohibited_netagents";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v9, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          char v20 = "nw_parameters_has_prohibited_netagents";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            char v20 = "nw_parameters_has_prohibited_netagents";
            __int16 v21 = 2082;
            __int16 v22 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_28;
        }

        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          char v20 = "nw_parameters_has_prohibited_netagents";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          char v20 = "nw_parameters_has_prohibited_netagents";
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181F40BF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_prohibited_netagent_classes(void *a1, void *a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  uint64_t v5 = a1;
  unint64_t v6 = a2;
  unint64_t v7 = a3;
  uint64_t v8 = (void *)v7;
  if (!v5)
  {
    __nwlog_obj();
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "nw_parameters_set_prohibited_netagent_classes";
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v24, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_prohibited_netagent_classes";
          _os_log_impl(&dword_181A5C000, v25, v26, "%{public}s called with null parameters", applier, 0xCu);
        }
      }

      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v28 = type;
        BOOL v29 = os_log_type_enabled(v25, type);
        if (backtrace_string)
        {
          if (v29)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&void applier[4] = "nw_parameters_set_prohibited_netagent_classes";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v25,  v28,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  applier,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_40;
        }

        if (v29)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_prohibited_netagent_classes";
          _os_log_impl( &dword_181A5C000,  v25,  v28,  "%{public}s called with null parameters, no backtrace",  applier,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_prohibited_netagent_classes";
          _os_log_impl( &dword_181A5C000,  v25,  v32,  "%{public}s called with null parameters, backtrace limit exceeded",  applier,  0xCu);
        }
      }
    }

void sub_181F41108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_prohibited_netagent_uuids(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "nw_parameters_set_prohibited_netagent_uuids";
    os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v11, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        xpc_object_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_prohibited_netagent_uuids";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null parameters", applier, 0xCu);
        }
      }

      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        xpc_object_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&void applier[4] = "nw_parameters_set_prohibited_netagent_uuids";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  applier,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }

        if (v16)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_prohibited_netagent_uuids";
          _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null parameters, no backtrace",  applier,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        xpc_object_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_prohibited_netagent_uuids";
          _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null parameters, backtrace limit exceeded",  applier,  0xCu);
        }
      }
    }

void sub_181F41524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_required_netagent_classes(void *a1, void *a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  uint64_t v5 = a1;
  unint64_t v6 = a2;
  unint64_t v7 = a3;
  uint64_t v8 = (void *)v7;
  if (!v5)
  {
    __nwlog_obj();
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "nw_parameters_set_required_netagent_classes";
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v24, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_required_netagent_classes";
          _os_log_impl(&dword_181A5C000, v25, v26, "%{public}s called with null parameters", applier, 0xCu);
        }
      }

      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v28 = type;
        BOOL v29 = os_log_type_enabled(v25, type);
        if (backtrace_string)
        {
          if (v29)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&void applier[4] = "nw_parameters_set_required_netagent_classes";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v25,  v28,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  applier,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_39;
        }

        if (v29)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_required_netagent_classes";
          _os_log_impl( &dword_181A5C000,  v25,  v28,  "%{public}s called with null parameters, no backtrace",  applier,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_required_netagent_classes";
          _os_log_impl( &dword_181A5C000,  v25,  v32,  "%{public}s called with null parameters, backtrace limit exceeded",  applier,  0xCu);
        }
      }
    }

void sub_181F41A34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_preferred_netagent_classes(void *a1, void *a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  uint64_t v5 = a1;
  unint64_t v6 = a2;
  unint64_t v7 = a3;
  uint64_t v8 = (void *)v7;
  if (!v5)
  {
    __nwlog_obj();
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "nw_parameters_set_preferred_netagent_classes";
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v24, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_preferred_netagent_classes";
          _os_log_impl(&dword_181A5C000, v25, v26, "%{public}s called with null parameters", applier, 0xCu);
        }
      }

      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v28 = type;
        BOOL v29 = os_log_type_enabled(v25, type);
        if (backtrace_string)
        {
          if (v29)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&void applier[4] = "nw_parameters_set_preferred_netagent_classes";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v25,  v28,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  applier,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_39;
        }

        if (v29)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_preferred_netagent_classes";
          _os_log_impl( &dword_181A5C000,  v25,  v28,  "%{public}s called with null parameters, no backtrace",  applier,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_preferred_netagent_classes";
          _os_log_impl( &dword_181A5C000,  v25,  v32,  "%{public}s called with null parameters, backtrace limit exceeded",  applier,  0xCu);
        }
      }
    }

void sub_181F41F4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

size_t nw_parameters_get_agent_preference(NWConcrete_nw_parameters *a1, const char *a2, const char *a3)
{
  nw_parameters_t v3 = a1;
  required_interface = v3->path_parameters->required_interface;
  uint64_t v5 = (void *)*((void *)required_interface + 10);
  size_t count = xpc_array_get_count(v5);
  size_t v7 = xpc_array_get_count(*((xpc_object_t *)v3->path_parameters->required_interface + 11));
  uint64_t v8 = 88LL;
  if (count < v7) {
    uint64_t v8 = 80LL;
  }
  size_t v9 = xpc_array_get_count(*(xpc_object_t *)((char *)v3->path_parameters->required_interface + v8));
  if (!v9)
  {
LABEL_16:
    BOOL v16 = v3->path_parameters->required_interface;
    xpc_object_t v17 = (void *)*((void *)v16 + 13);
    if (v17 && *((void *)v16 + 14))
    {
      size_t v18 = xpc_array_get_count(v17);
      size_t v19 = xpc_array_get_count(*((xpc_object_t *)v3->path_parameters->required_interface + 14));
      uint64_t v20 = 112LL;
      if (v18 < v19) {
        uint64_t v20 = 104LL;
      }
      size_t v15 = xpc_array_get_count(*(xpc_object_t *)((char *)v3->path_parameters->required_interface + v20));
      if (v15)
      {
        size_t v21 = 0LL;
        while (1)
        {
          string = xpc_array_get_string(*((xpc_object_t *)v3->path_parameters->required_interface + 13), v21);
          uint64_t v23 = xpc_array_get_string(*((xpc_object_t *)v3->path_parameters->required_interface + 14), v21);
          uint64_t v24 = v23;
          BOOL v25 = !string || v23 == 0LL;
          if (!v25 && !strcmp("com.apple.networkrelay", string) && !strcmp("CompanionProxy", v24)) {
            break;
          }
          if (v15 == ++v21) {
            goto LABEL_30;
          }
        }

        size_t v15 = 2LL;
      }

      goto LABEL_31;
    }

void sub_181F42174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_avoided_netagent_classes(void *a1, void *a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  uint64_t v5 = a1;
  unint64_t v6 = a2;
  unint64_t v7 = a3;
  uint64_t v8 = (void *)v7;
  if (!v5)
  {
    __nwlog_obj();
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "nw_parameters_set_avoided_netagent_classes";
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v24, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_avoided_netagent_classes";
          _os_log_impl(&dword_181A5C000, v25, v26, "%{public}s called with null parameters", applier, 0xCu);
        }
      }

      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v28 = type;
        BOOL v29 = os_log_type_enabled(v25, type);
        if (backtrace_string)
        {
          if (v29)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&void applier[4] = "nw_parameters_set_avoided_netagent_classes";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v25,  v28,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  applier,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_39;
        }

        if (v29)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_avoided_netagent_classes";
          _os_log_impl( &dword_181A5C000,  v25,  v28,  "%{public}s called with null parameters, no backtrace",  applier,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_avoided_netagent_classes";
          _os_log_impl( &dword_181A5C000,  v25,  v32,  "%{public}s called with null parameters, backtrace limit exceeded",  applier,  0xCu);
        }
      }
    }

void sub_181F42690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_has_required_netagents(void *a1)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  nw_parameters_t v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    xpc_object_t v20 = "nw_parameters_has_required_netagents";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v9, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        size_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          xpc_object_t v20 = "nw_parameters_has_required_netagents";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        size_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            xpc_object_t v20 = "nw_parameters_has_required_netagents";
            __int16 v21 = 2082;
            __int16 v22 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_28;
        }

        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          xpc_object_t v20 = "nw_parameters_has_required_netagents";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        size_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          xpc_object_t v20 = "nw_parameters_has_required_netagents";
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181F42994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_has_preferred_netagents(void *a1)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  nw_parameters_t v1 = a1;
  nw_parameters_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v21 = "nw_parameters_has_preferred_netagents";
    size_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v10, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v21 = "nw_parameters_has_preferred_netagents";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v21 = "nw_parameters_has_preferred_netagents";
            __int16 v22 = 2082;
            uint64_t v23 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_29;
        }

        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v21 = "nw_parameters_has_preferred_netagents";
          _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v21 = "nw_parameters_has_preferred_netagents";
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181F42C98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_has_required_interface_type(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    BOOL v3 = *(_DWORD *)(*((void *)v1 + 13) + 76LL) != 0;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_has_required_interface_type";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_has_required_interface_type";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_has_required_interface_type";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_has_required_interface_type";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_has_required_interface_type";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_parameters_has_required_interface_subtype(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    BOOL v3 = *(_DWORD *)(*((void *)v1 + 13) + 80LL) != 0;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_has_required_interface_subtype";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_has_required_interface_subtype";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_has_required_interface_subtype";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_has_required_interface_subtype";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_has_required_interface_subtype";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_require_netagent_uuid(void *a1, const unsigned __int8 *a2)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  BOOL v3 = a1;
  BOOL v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v30 = "nw_parameters_require_netagent_uuid";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_parameters_require_netagent_uuid";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v30 = "nw_parameters_require_netagent_uuid";
          __int16 v31 = 2082;
          uint64_t v32 = (uint64_t)backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_45:
        if (!v12) {
          goto LABEL_9;
        }
LABEL_46:
        free(v12);
        goto LABEL_9;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_parameters_require_netagent_uuid";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_parameters_require_netagent_uuid";
        _os_log_impl( &dword_181A5C000,  v13,  v22,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181F437BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_required_netagent_uuids(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  BOOL v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "nw_parameters_set_required_netagent_uuids";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v11, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_required_netagent_uuids";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null parameters", applier, 0xCu);
        }
      }

      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&void applier[4] = "nw_parameters_set_required_netagent_uuids";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  applier,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }

        if (v16)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_required_netagent_uuids";
          _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null parameters, no backtrace",  applier,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_required_netagent_uuids";
          _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null parameters, backtrace limit exceeded",  applier,  0xCu);
        }
      }
    }

void sub_181F43BD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_preferred_netagent_uuids(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  BOOL v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "nw_parameters_set_preferred_netagent_uuids";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v11, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_preferred_netagent_uuids";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null parameters", applier, 0xCu);
        }
      }

      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&void applier[4] = "nw_parameters_set_preferred_netagent_uuids";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  applier,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }

        if (v16)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_preferred_netagent_uuids";
          _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null parameters, no backtrace",  applier,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_preferred_netagent_uuids";
          _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null parameters, backtrace limit exceeded",  applier,  0xCu);
        }
      }
    }

void sub_181F43FE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_avoided_netagent_uuids(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  BOOL v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(void *)&void applier[4] = "nw_parameters_set_avoided_netagent_uuids";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v11, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_avoided_netagent_uuids";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null parameters", applier, 0xCu);
        }
      }

      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&void applier[4] = "nw_parameters_set_avoided_netagent_uuids";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  applier,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }

        if (v16)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_avoided_netagent_uuids";
          _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null parameters, no backtrace",  applier,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&void applier[4] = "nw_parameters_set_avoided_netagent_uuids";
          _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null parameters, backtrace limit exceeded",  applier,  0xCu);
        }
      }
    }

void sub_181F443F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_allow_socket_access(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      __int16 v5 = 16;
    }
    else {
      __int16 v5 = 0;
    }
    *(_WORD *)(*((void *)v3 + 13) + 100LL) = *(_WORD *)(*((void *)v3 + 13) + 100LL) & 0xFFEF | v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_parameters_set_allow_socket_access";
  xpc_object_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_allow_socket_access";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_parameters_set_allow_socket_access";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_allow_socket_access";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_allow_socket_access";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_service_class(nw_parameters_t parameters, nw_service_class_t service_class)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = parameters;
  nw_parameters_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    xpc_object_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v24 = "nw_parameters_set_service_class";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v24 = "nw_parameters_set_service_class";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v24 = "nw_parameters_set_service_class";
          __int16 v25 = 2082;
          os_log_type_t v26 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_45:
        if (!v8) {
          goto LABEL_11;
        }
LABEL_46:
        free(v8);
        goto LABEL_11;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v24 = "nw_parameters_set_service_class";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v24 = "nw_parameters_set_service_class";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

nw_service_class_t nw_parameters_get_service_class(nw_parameters_t parameters)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = parameters;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    nw_service_class_t v3 = v1[94];
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_parameters_get_service_class";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      xpc_object_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_service_class";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      xpc_object_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_parameters_get_service_class";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_service_class";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      xpc_object_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_service_class";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_parameters_multipath_fallback_allowed(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    BOOL v3 = (*(_DWORD *)(*((void *)v1 + 13) + 103LL) & 0xFFFFFFFE) == 2;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_parameters_multipath_fallback_allowed";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      xpc_object_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_multipath_fallback_allowed";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      xpc_object_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_parameters_multipath_fallback_allowed";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_multipath_fallback_allowed";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      xpc_object_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_multipath_fallback_allowed";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_multipath_force_enable(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x2000000LL;
    if (!a2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFDFFFFFFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  int v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_parameters_set_multipath_force_enable";
  xpc_object_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_multipath_force_enable";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parameters_set_multipath_force_enable";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_multipath_force_enable";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_multipath_force_enable";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_multipath_force_enable(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[99] >> 1) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_parameters_get_multipath_force_enable";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      xpc_object_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_multipath_force_enable";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      xpc_object_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_parameters_get_multipath_force_enable";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_multipath_force_enable";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      xpc_object_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_multipath_force_enable";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_is_fallback(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x10000LL;
    if (!a2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFFEFFFFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  int v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_parameters_set_is_fallback";
  xpc_object_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_is_fallback";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parameters_set_is_fallback";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_is_fallback";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_is_fallback";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_no_fullstack_fallback(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x20000LL;
    if (!a2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFFDFFFFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  int v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_parameters_set_no_fullstack_fallback";
  xpc_object_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_no_fullstack_fallback";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parameters_set_no_fullstack_fallback";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_no_fullstack_fallback";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_no_fullstack_fallback";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_no_fullstack_fallback(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[98] >> 1) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_parameters_get_no_fullstack_fallback";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      xpc_object_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_no_fullstack_fallback";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      xpc_object_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_parameters_get_no_fullstack_fallback";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_no_fullstack_fallback";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      xpc_object_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_get_no_fullstack_fallback";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_fallback_applied(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      __int16 v9 = 2048;
    }
    else {
      __int16 v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFFF7FF;
    *(_WORD *)uint64_t v6 = v10 | v9;
    *(_BYTE *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }

  __nwlog_obj();
  BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v22 = "nw_parameters_set_fallback_applied";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_fallback_applied";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_parameters_set_fallback_applied";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_fallback_applied";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_fallback_applied";
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_fallback_mode(void *a1, char a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    *(_BYTE *)(*((void *)v3 + 13) + 107LL) = a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_set_fallback_mode";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_fallback_mode";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_set_fallback_mode";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_fallback_mode";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_fallback_mode";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_proxy_applied(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      __int16 v9 = 4096;
    }
    else {
      __int16 v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFFEFFF;
    *(_WORD *)uint64_t v6 = v10 | v9;
    *(_BYTE *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }

  __nwlog_obj();
  BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v22 = "nw_parameters_set_proxy_applied";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_proxy_applied";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_parameters_set_proxy_applied";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_proxy_applied";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_proxy_applied";
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_proxy_applied(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(*((void *)v1 + 13) + 108LL) >> 12) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_proxy_applied";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_proxy_applied";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_proxy_applied";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_proxy_applied";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_proxy_applied";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_is_approved_app_domain(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 13);
    int v4 = *(unsigned __int16 *)(v3 + 108);
    v3 += 108LL;
    *(_BYTE *)(v3 + 2) = (v4 | (*(unsigned __int8 *)(v3 + 2) << 16) | 0x10000u) >> 16;
    *(_WORD *)uint64_t v3 = v4;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_set_is_approved_app_domain";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_is_approved_app_domain";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_set_is_approved_app_domain";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_is_approved_app_domain";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_is_approved_app_domain";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_is_known_tracker(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  int v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      __int16 v9 = 0x4000;
    }
    else {
      __int16 v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFFBFFF;
    *(_WORD *)uint64_t v6 = v10 | v9;
    *(_BYTE *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }

  __nwlog_obj();
  BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v22 = "nw_parameters_set_is_known_tracker";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_is_known_tracker";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_parameters_set_is_known_tracker";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_is_known_tracker";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_is_known_tracker";
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_parent_is_known_tracker(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[99] >> 7;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_parent_is_known_tracker";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_parent_is_known_tracker";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_parent_is_known_tracker";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_parent_is_known_tracker";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_parent_is_known_tracker";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_block_trackers(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  int v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x200000000LL;
    if (!a2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFDFFFFFFFFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_parameters_set_block_trackers";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_block_trackers";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parameters_set_block_trackers";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_block_trackers";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_block_trackers";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_internal_attribution(void *a1, char a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  int v4 = v3;
  if (v3)
  {
    *(_BYTE *)(*((void *)v3 + 13) + 102LL) = a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_set_internal_attribution";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_internal_attribution";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_set_internal_attribution";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_internal_attribution";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_internal_attribution";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_attribution(nw_parameters_t parameters, nw_parameters_attribution_t attribution)
{
  int v2 = attribution;
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = parameters;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    *(_BYTE *)(*((void *)v3 + 13) + 102LL) = 2 * (v2 == 2);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_set_attribution";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_attribution";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_set_attribution";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_attribution";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_attribution";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_website_attribution(void *a1, const char *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    *(_BYTE *)(v3[13] + 102LL) = 2 * (a2 != 0LL);
    nw_parameters_set_attribution_context(v3, a2);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_set_website_attribution";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_website_attribution";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_set_website_attribution";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_website_attribution";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_website_attribution";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

const char *nw_parameters_internal_attribution_to_string(unsigned int a1)
{
  if (a1 > 2) {
    return "unknown";
  }
  else {
    return off_189BB8FC8[a1];
  }
}

uint64_t nw_parameters_string_to_internal_attribution(const char *a1)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (!strncasecmp(a1, "user", 5uLL)) {
      return 1LL;
    }
    uint64_t result = strncasecmp(a1, "developer", 0xAuLL);
    if ((_DWORD)result) {
      return 2 * (strncasecmp(a1, "website", 8uLL) == 0);
    }
    return result;
  }

  __nwlog_obj();
  nw_parameters_t v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v13 = "nw_parameters_string_to_internal_attribution";
  nw_parameters_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v4, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_parameters_string_to_internal_attribution";
        int v7 = "%{public}s called with null string";
LABEL_20:
        _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
      }
    }

    else
    {
      if (v10)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v6 = type;
        BOOL v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)buf = 136446466;
            char v13 = "nw_parameters_string_to_internal_attribution";
            __int16 v14 = 2082;
            BOOL v15 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null string, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }

        if (!v9) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_parameters_string_to_internal_attribution";
        int v7 = "%{public}s called with null string, no backtrace";
        goto LABEL_20;
      }

      __nwlog_obj();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        char v13 = "nw_parameters_string_to_internal_attribution";
        int v7 = "%{public}s called with null string, backtrace limit exceeded";
        goto LABEL_20;
      }
    }

void nw_parameters_set_is_non_app_initiated(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 2;
    }
    else {
      char v5 = 0;
    }
    *(_BYTE *)(*((void *)v3 + 13) + 102LL) = v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  os_log_type_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_parameters_set_is_non_app_initiated";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_is_non_app_initiated";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parameters_set_is_non_app_initiated";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_is_non_app_initiated";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_is_non_app_initiated";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_desperate_ivan(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x40000LL;
    if (!a2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFFBFFFFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  os_log_type_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_parameters_set_desperate_ivan";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_desperate_ivan";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parameters_set_desperate_ivan";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_desperate_ivan";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_desperate_ivan";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_tls(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v22 = "nw_parameters_set_tls";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v12, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_parameters_set_tls";
          _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        BOOL v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v22 = "nw_parameters_set_tls";
            __int16 v23 = 2082;
            uint64_t v24 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }

        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_parameters_set_tls";
          _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_parameters_set_tls";
          _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181F48654(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_discretionary(void *a1, __int16 a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    *(_WORD *)(*((void *)v3 + 13) + 108LL) = *(_WORD *)(*((void *)v3 + 13) + 108LL) & 0xFFFE | a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_set_discretionary";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_discretionary";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_set_discretionary";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_discretionary";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_discretionary";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_is_custom_protocols_only(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[97] >> 3) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_is_custom_protocols_only";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_is_custom_protocols_only";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_is_custom_protocols_only";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_is_custom_protocols_only";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_is_custom_protocols_only";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_custom_protocols_only(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 2048LL;
    if (!a2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFFFF7FFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  os_log_type_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_parameters_set_custom_protocols_only";
  char v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_custom_protocols_only";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parameters_set_custom_protocols_only";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_custom_protocols_only";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_custom_protocols_only";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_companion_link_upgrade_preference(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    *(_DWORD *)(*((void *)v3 + 13) + 88LL) = a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_set_companion_link_upgrade_preference";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_companion_link_upgrade_preference";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_set_companion_link_upgrade_preference";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_companion_link_upgrade_preference";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_companion_link_upgrade_preference";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_companion_link_upgrade_preference(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = *(unsigned int *)(*((void *)v1 + 13) + 88LL);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_companion_link_upgrade_preference";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_companion_link_upgrade_preference";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_companion_link_upgrade_preference";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_companion_link_upgrade_preference";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_companion_link_upgrade_preference";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_tls_session_id(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 16, a2);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_set_tls_session_id";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_tls_session_id";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_set_tls_session_id";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_tls_session_id";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_tls_session_id";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

id nw_parameters_copy_tls_session_id(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    id v3 = v1[16];
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_copy_tls_session_id";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_copy_tls_session_id";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_copy_tls_session_id";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_copy_tls_session_id";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_copy_tls_session_id";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_server_mode(void *a1, char a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if ((a2 & 1) != 0)
    {
      *(_DWORD *)(v3[13] + 84) = 0;
      unint64_t v5 = v3[12] & 0xFFFFFFFFFFFFFF3FLL | 0x80;
      uint64_t v6 = 0x8000LL;
    }

    else
    {
      uint64_t v6 = 0LL;
      unint64_t v5 = v3[12];
    }

    v3[12] = v5 & 0xFFFFFFFFFFFF7FFFLL | v6;
    goto LABEL_6;
  }

  __nwlog_obj();
  char v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_parameters_set_server_mode";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_parameters_set_server_mode";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_parameters_set_server_mode";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_parameters_set_server_mode";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_parameters_set_server_mode";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_fast_open_enabled(nw_parameters_t parameters, BOOL fast_open_enabled)
{
  BOOL v2 = fast_open_enabled;
  uint64_t v20 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = parameters;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 4LL;
    if (!v2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFFFFFFBLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_parameters_set_fast_open_enabled";
  char v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_fast_open_enabled";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parameters_set_fast_open_enabled";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_fast_open_enabled";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_fast_open_enabled";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_tfo_no_cookie(void *a1, char a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = nw_parameters_copy_tcp_options(v3, 1);
    uint64_t v6 = v5;
    if (v5) {
      nw_tcp_options_set_no_fast_open_cookie(v5, a2);
    }

    goto LABEL_5;
  }

  __nwlog_obj();
  char v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_parameters_set_tfo_no_cookie";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_parameters_set_tfo_no_cookie";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_parameters_set_tfo_no_cookie";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_parameters_set_tfo_no_cookie";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_parameters_set_tfo_no_cookie";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F4A0E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_get_tfo_no_cookie(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    nw_parameters_t v3 = nw_parameters_copy_tcp_options(v1, 0);
    nw_parameters_t v4 = v3;
    if (v3) {
      BOOL no_fast_open_cookie = nw_tcp_options_get_no_fast_open_cookie(v3);
    }
    else {
      BOOL no_fast_open_cookie = 0LL;
    }

    goto LABEL_6;
  }

  __nwlog_obj();
  char v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_parameters_get_tfo_no_cookie";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_parameters_get_tfo_no_cookie";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_parameters_get_tfo_no_cookie";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_parameters_get_tfo_no_cookie";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_parameters_get_tfo_no_cookie";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F4A3C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_use_tfo_heuristics(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v2 = (os_log_s *)(id)gLogObj;
  nw_parameters_t v3 = v2;
  if (a1)
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v14 = "nw_parameters_set_use_tfo_heuristics";
      _os_log_impl( &dword_181A5C000,  v3,  OS_LOG_TYPE_INFO,  "%{public}s nw_parameters_set_use_tfo_heuristics is deprecated",  buf,  0xCu);
    }

    return;
  }

  *(_DWORD *)buf = 136446210;
  os_log_type_t v14 = "nw_parameters_set_use_tfo_heuristics";
  nw_parameters_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v14 = "nw_parameters_set_use_tfo_heuristics";
        _os_log_impl(&dword_181A5C000, v5, v6, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v14 = "nw_parameters_set_use_tfo_heuristics";
          __int16 v15 = 2082;
          os_log_type_t v16 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v8,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v14 = "nw_parameters_set_use_tfo_heuristics";
        _os_log_impl(&dword_181A5C000, v5, v8, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v14 = "nw_parameters_set_use_tfo_heuristics";
        _os_log_impl( &dword_181A5C000,  v5,  v10,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_use_tfo_heuristics(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  __nwlog_obj();
  nw_parameters_t v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v14 = "nw_parameters_get_use_tfo_heuristics";
  nw_parameters_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v14 = "nw_parameters_get_use_tfo_heuristics";
        _os_log_impl(&dword_181A5C000, v5, v6, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v14 = "nw_parameters_get_use_tfo_heuristics";
          __int16 v15 = 2082;
          os_log_type_t v16 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v8,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_19;
      }

      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v14 = "nw_parameters_get_use_tfo_heuristics";
        _os_log_impl(&dword_181A5C000, v5, v8, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v14 = "nw_parameters_get_use_tfo_heuristics";
        _os_log_impl( &dword_181A5C000,  v5,  v10,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_fast_open_force_enable(void *a1, char a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = nw_parameters_copy_tcp_options(v3, 1);
    os_log_type_t v6 = v5;
    if (v5) {
      nw_tcp_options_set_fast_open_force_enable(v5, a2);
    }

    goto LABEL_5;
  }

  __nwlog_obj();
  char v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_parameters_set_fast_open_force_enable";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_parameters_set_fast_open_force_enable";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_parameters_set_fast_open_force_enable";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_parameters_set_fast_open_force_enable";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_parameters_set_fast_open_force_enable";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F4ABFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_get_fast_open_force_enable(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    nw_parameters_t v3 = nw_parameters_copy_tcp_options(v1, 0);
    nw_parameters_t v4 = v3;
    if (v3) {
      BOOL fast_open_force_enable = nw_tcp_options_get_fast_open_force_enable(v3);
    }
    else {
      BOOL fast_open_force_enable = 0LL;
    }

    goto LABEL_6;
  }

  __nwlog_obj();
  char v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_parameters_get_fast_open_force_enable";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_parameters_get_fast_open_force_enable";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_parameters_get_fast_open_force_enable";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_parameters_get_fast_open_force_enable";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_parameters_get_fast_open_force_enable";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F4AED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_reduce_buffering(void *a1, char a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = nw_parameters_copy_tcp_options(v3, 1);
    os_log_type_t v6 = v5;
    if (v5) {
      nw_tcp_options_set_reduce_buffering(v5, a2);
    }

    goto LABEL_5;
  }

  __nwlog_obj();
  char v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_parameters_set_reduce_buffering";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_parameters_set_reduce_buffering";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_parameters_set_reduce_buffering";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_parameters_set_reduce_buffering";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_parameters_set_reduce_buffering";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F4B1A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_get_reduce_buffering(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    nw_parameters_t v3 = nw_parameters_copy_tcp_options(v1, 0);
    nw_parameters_t v4 = v3;
    if (v3) {
      BOOL reduce_buffering = nw_tcp_options_get_reduce_buffering(v3);
    }
    else {
      BOOL reduce_buffering = 0LL;
    }

    goto LABEL_6;
  }

  __nwlog_obj();
  char v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_parameters_get_reduce_buffering";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_parameters_get_reduce_buffering";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_parameters_get_reduce_buffering";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_parameters_get_reduce_buffering";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_parameters_get_reduce_buffering";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F4B478(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_get_no_delay(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    nw_parameters_t v3 = nw_parameters_copy_tcp_options(v1, 0);
    nw_parameters_t v4 = v3;
    if (v3) {
      BOOL no_delay = nw_tcp_options_get_no_delay(v3);
    }
    else {
      BOOL no_delay = 0LL;
    }

    goto LABEL_6;
  }

  __nwlog_obj();
  char v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_parameters_get_no_delay";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_parameters_get_no_delay";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_parameters_get_no_delay";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_parameters_get_no_delay";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_parameters_get_no_delay";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F4B750(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_expired_dns_behavior( nw_parameters_t parameters, nw_parameters_expired_dns_behavior_t expired_dns_behavior)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = parameters;
  nw_parameters_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v22 = "nw_parameters_set_expired_dns_behavior";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_expired_dns_behavior";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_parameters_set_expired_dns_behavior";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_expired_dns_behavior";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_expired_dns_behavior";
        _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void nw_parameters_set_use_long_outstanding_queries(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 8LL;
    if (!a2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFFFFFF7LL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  os_log_type_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v17 = "nw_parameters_set_use_long_outstanding_queries";
  char v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_parameters_set_use_long_outstanding_queries";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v17 = "nw_parameters_set_use_long_outstanding_queries";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_parameters_set_use_long_outstanding_queries";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_parameters_set_use_long_outstanding_queries";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_ignore_resolver_stats(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 16LL;
    if (!a2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFFFFFEFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  os_log_type_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v17 = "nw_parameters_set_ignore_resolver_stats";
  char v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_parameters_set_ignore_resolver_stats";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v17 = "nw_parameters_set_ignore_resolver_stats";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_parameters_set_ignore_resolver_stats";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_parameters_set_ignore_resolver_stats";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_include_peer_to_peer(nw_parameters_t parameters, BOOL include_peer_to_peer)
{
  BOOL v2 = include_peer_to_peer;
  uint64_t v25 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = parameters;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (v2) {
      __int16 v9 = 8;
    }
    else {
      __int16 v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFFFFF7;
    *(_WORD *)uint64_t v6 = v10 | v9;
    *(_BYTE *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }

  __nwlog_obj();
  os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v22 = "nw_parameters_set_include_peer_to_peer";
  BOOL v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_include_peer_to_peer";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_parameters_set_include_peer_to_peer";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_include_peer_to_peer";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_include_peer_to_peer";
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_parameters_get_include_peer_to_peer(nw_parameters_t parameters)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_parameters_t v1 = parameters;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    BOOL v3 = (*(unsigned __int16 *)(*((void *)v1 + 13) + 108LL) >> 3) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_include_peer_to_peer";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_include_peer_to_peer";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_include_peer_to_peer";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_include_peer_to_peer";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_include_peer_to_peer";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_use_awdl(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      __int16 v9 = 8;
    }
    else {
      __int16 v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFFFFF7;
    *(_WORD *)uint64_t v6 = v10 | v9;
    *(_BYTE *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }

  __nwlog_obj();
  BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v22 = "nw_parameters_set_use_awdl";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_use_awdl";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_parameters_set_use_awdl";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_use_awdl";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_use_awdl";
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_use_p2p(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      __int16 v9 = 16;
    }
    else {
      __int16 v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFFFFEF;
    *(_WORD *)uint64_t v6 = v10 | v9;
    *(_BYTE *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }

  __nwlog_obj();
  BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v22 = "nw_parameters_set_use_p2p";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_use_p2p";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_parameters_set_use_p2p";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_use_p2p";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_use_p2p";
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_resolve_ptr(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 32LL;
    if (!a2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFFFFFDFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_parameters_set_resolve_ptr";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_resolve_ptr";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_parameters_set_resolve_ptr";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_resolve_ptr";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_resolve_ptr";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_resolve_ptr(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_parameters_t v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[96] >> 5) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_resolve_ptr";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_resolve_ptr";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_resolve_ptr";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_resolve_ptr";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_resolve_ptr";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_indefinite(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_parameters_t v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[96] >> 6) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_indefinite";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_indefinite";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_indefinite";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_indefinite";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_indefinite";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_indefinite_set(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_parameters_t v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[96] >> 7;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_indefinite_set";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_indefinite_set";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_indefinite_set";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_indefinite_set";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_indefinite_set";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_no_proxy(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      __int16 v9 = 2;
    }
    else {
      __int16 v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFFFFFD;
    *(_WORD *)uint64_t v6 = v10 | v9;
    *(_BYTE *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }

  __nwlog_obj();
  BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v22 = "nw_parameters_set_no_proxy";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_no_proxy";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_parameters_set_no_proxy";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_no_proxy";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_no_proxy";
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_no_proxy(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(*((void *)v1 + 13) + 108LL) >> 1) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_no_proxy";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_no_proxy";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_no_proxy";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_no_proxy";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_no_proxy";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_no_opaque_proxy(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 2LL;
    if (!a2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFFFFFFDLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_parameters_set_no_opaque_proxy";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_no_opaque_proxy";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parameters_set_no_opaque_proxy";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_no_opaque_proxy";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_no_opaque_proxy";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_no_opaque_proxy(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[96] >> 1) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_no_opaque_proxy";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_no_opaque_proxy";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_no_opaque_proxy";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_no_opaque_proxy";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_no_opaque_proxy";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_no_transform(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      __int16 v9 = 4;
    }
    else {
      __int16 v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFFFFFB;
    *(_WORD *)uint64_t v6 = v10 | v9;
    *(_BYTE *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }

  __nwlog_obj();
  BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v22 = "nw_parameters_set_no_transform";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_no_transform";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_parameters_set_no_transform";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_no_transform";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_no_transform";
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_no_transform(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(*((void *)v1 + 13) + 108LL) >> 2) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_no_transform";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_no_transform";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_no_transform";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_no_transform";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_no_transform";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_no_cellular_fallback(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      __int16 v9 = 64;
    }
    else {
      __int16 v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFFFFBF;
    *(_WORD *)uint64_t v6 = v10 | v9;
    *(_BYTE *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }

  __nwlog_obj();
  BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v22 = "nw_parameters_set_no_cellular_fallback";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_no_cellular_fallback";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_parameters_set_no_cellular_fallback";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_no_cellular_fallback";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_no_cellular_fallback";
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_no_cellular_fallback(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(*((void *)v1 + 13) + 108LL) >> 6) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_no_cellular_fallback";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_no_cellular_fallback";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_no_cellular_fallback";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_no_cellular_fallback";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_no_cellular_fallback";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_no_wake_from_sleep(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      __int16 v9 = 128;
    }
    else {
      __int16 v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFFFF7F;
    *(_WORD *)uint64_t v6 = v10 | v9;
    *(_BYTE *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }

  __nwlog_obj();
  BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v22 = "nw_parameters_set_no_wake_from_sleep";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_no_wake_from_sleep";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_parameters_set_no_wake_from_sleep";
          __int16 v23 = 2082;
          uint64_t v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_no_wake_from_sleep";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_parameters_set_no_wake_from_sleep";
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_sleep_keepalive_interval(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    *((_DWORD *)v3 + 22) = a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_set_sleep_keepalive_interval";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_sleep_keepalive_interval";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_set_sleep_keepalive_interval";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_sleep_keepalive_interval";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_sleep_keepalive_interval";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_keepalive_enabled(void *a1, BOOL a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = nw_parameters_copy_tcp_options(v3, 1);
    uint64_t v6 = v5;
    if (v5) {
      nw_tcp_options_set_enable_keepalive(v5, a2);
    }

    goto LABEL_5;
  }

  __nwlog_obj();
  int v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_parameters_set_keepalive_enabled";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_keepalive_enabled";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_parameters_set_keepalive_enabled";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_keepalive_enabled";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_keepalive_enabled";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F4F3E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_get_keepalive_enabled(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    id v3 = nw_parameters_copy_tcp_options(v1, 0);
    nw_parameters_t v4 = v3;
    if (v3) {
      BOOL enable_keepalive = nw_tcp_options_get_enable_keepalive(v3);
    }
    else {
      BOOL enable_keepalive = 0LL;
    }

    goto LABEL_6;
  }

  __nwlog_obj();
  int v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_parameters_get_keepalive_enabled";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_keepalive_enabled";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_parameters_get_keepalive_enabled";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_keepalive_enabled";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_keepalive_enabled";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F4F6C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_keepalive_idle_time(void *a1, uint32_t a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = nw_parameters_copy_tcp_options(v3, 1);
    uint64_t v6 = v5;
    if (v5) {
      nw_tcp_options_set_keepalive_idle_time(v5, a2);
    }

    goto LABEL_5;
  }

  __nwlog_obj();
  int v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_parameters_set_keepalive_idle_time";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_keepalive_idle_time";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_parameters_set_keepalive_idle_time";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_keepalive_idle_time";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_keepalive_idle_time";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F4F98C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_keepalive_idle_time(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    id v3 = nw_parameters_copy_tcp_options(v1, 0);
    nw_parameters_t v4 = v3;
    if (v3) {
      uint64_t keepalive_idle_time = nw_tcp_options_get_keepalive_idle_time(v3);
    }
    else {
      uint64_t keepalive_idle_time = 0LL;
    }

    goto LABEL_6;
  }

  __nwlog_obj();
  int v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_parameters_get_keepalive_idle_time";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_keepalive_idle_time";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_parameters_get_keepalive_idle_time";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_keepalive_idle_time";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_keepalive_idle_time";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F4FC64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_keepalive_interval(void *a1, uint32_t a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = nw_parameters_copy_tcp_options(v3, 1);
    uint64_t v6 = v5;
    if (v5) {
      nw_tcp_options_set_keepalive_interval(v5, a2);
    }

    goto LABEL_5;
  }

  __nwlog_obj();
  int v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_parameters_set_keepalive_interval";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_keepalive_interval";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_parameters_set_keepalive_interval";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_keepalive_interval";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_keepalive_interval";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F4FF30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_keepalive_interval(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    id v3 = nw_parameters_copy_tcp_options(v1, 0);
    nw_parameters_t v4 = v3;
    if (v3) {
      uint64_t keepalive_interval = nw_tcp_options_get_keepalive_interval(v3);
    }
    else {
      uint64_t keepalive_interval = 0LL;
    }

    goto LABEL_6;
  }

  __nwlog_obj();
  int v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_parameters_get_keepalive_interval";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_keepalive_interval";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_parameters_get_keepalive_interval";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_keepalive_interval";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_keepalive_interval";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F50208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_keepalive_offload(void *a1, char a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = nw_parameters_copy_tcp_options(v3, 1);
    uint64_t v6 = v5;
    if (v5) {
      nw_tcp_options_set_enable_keepalive_offload(v5, a2);
    }

    goto LABEL_5;
  }

  __nwlog_obj();
  int v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_parameters_set_keepalive_offload";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_keepalive_offload";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_parameters_set_keepalive_offload";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_keepalive_offload";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_keepalive_offload";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F504D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_get_keepalive_offload(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    id v3 = nw_parameters_copy_tcp_options(v1, 0);
    nw_parameters_t v4 = v3;
    if (v3) {
      BOOL enable_keepalive_offload = nw_tcp_options_get_enable_keepalive_offload(v3);
    }
    else {
      BOOL enable_keepalive_offload = 0LL;
    }

    goto LABEL_6;
  }

  __nwlog_obj();
  int v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_parameters_get_keepalive_offload";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_keepalive_offload";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_parameters_get_keepalive_offload";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_keepalive_offload";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_keepalive_offload";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F507AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_minimum_tls_protocol_version(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    id v3 = nw_parameters_copy_tls_options(v1);
    nw_parameters_t v4 = v3;
    if (v3)
    {
      uint64_t v5 = (sec_protocol_options *)v3;
      SSLProtocol v6 = tls_helper_SSLProtocol_from_version();
      sec_protocol_options_set_tls_min_version(v5, v6);
    }

    goto LABEL_5;
  }

  __nwlog_obj();
  int v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_parameters_set_minimum_tls_protocol_version";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_minimum_tls_protocol_version";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_parameters_set_minimum_tls_protocol_version";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_minimum_tls_protocol_version";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_minimum_tls_protocol_version";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F50A88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_parameters_copy_tls_options(NWConcrete_nw_parameters *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v11 = 0LL;
  os_log_type_t v12 = &v11;
  uint64_t v13 = 0x3032000000LL;
  os_log_type_t v14 = __Block_byref_object_copy__19159;
  char v15 = __Block_byref_object_dispose__19160;
  id v16 = 0LL;
  default_stack = (nw_protocol_stack *)v1->default_stack;
  if (!default_stack
    || (iterate_block[0] = MEMORY[0x1895F87A8],
        iterate_block[1] = 3221225472LL,
        iterate_block[2] = ___ZL30nw_parameters_copy_tls_optionsP24NWConcrete_nw_parametersb_block_invoke,
        iterate_block[3] = &unk_189BBD000,
        iterate_void block[4] = &v11,
        nw_protocol_stack_iterate_application_protocols(default_stack, iterate_block),
        (id v3 = (void *)v12[5]) == 0LL))
  {
    nw_parameters_t v4 = (void *)nw_protocol_boringssl_copy_definition();
    options = nw_protocol_create_options(v4);

    SSLProtocol v6 = (void *)v12[5];
    v12[5] = (uint64_t)options;

    nw_protocol_stack_append_application_protocol(v1->default_stack, (void *)v12[5]);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v7 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v18 = "nw_parameters_copy_tls_options";
      _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_DEFAULT,  "%{public}s TLS-specific parameter set without TLS set, adding TLS",  buf,  0xCu);
    }

    id v3 = (void *)v12[5];
  }

  id v8 = v3;
  _Block_object_dispose(&v11, 8);

  return v8;
}

void sub_181F50C5C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  os_log_type_t v22 = v21;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void ___ZL30nw_parameters_copy_tls_optionsP24NWConcrete_nw_parametersb_block_invoke(uint64_t a1, void *a2)
{
  options = a2;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL))
  {
    nw_parameters_t v4 = (void *)nw_protocol_boringssl_copy_definition();
    nw_protocol_definition_t v5 = nw_protocol_options_copy_definition(options);
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, (uint64_t)v5);

    if (is_equal_unsafe) {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a2);
    }
  }
}

void sub_181F50D30( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_minimum_tls_protocol_version(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  __nwlog_obj();
  id v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v14 = "nw_parameters_get_minimum_tls_protocol_version";
  nw_parameters_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      nw_protocol_definition_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v14 = "nw_parameters_get_minimum_tls_protocol_version";
        _os_log_impl(&dword_181A5C000, v5, v6, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      nw_protocol_definition_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v14 = "nw_parameters_get_minimum_tls_protocol_version";
          __int16 v15 = 2082;
          id v16 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v8,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_19;
      }

      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v14 = "nw_parameters_get_minimum_tls_protocol_version";
        _os_log_impl(&dword_181A5C000, v5, v8, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      nw_protocol_definition_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v14 = "nw_parameters_get_minimum_tls_protocol_version";
        _os_log_impl( &dword_181A5C000,  v5,  v10,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_maximum_tls_protocol_version(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    id v3 = nw_parameters_copy_tls_options(v1);
    nw_parameters_t v4 = v3;
    if (v3)
    {
      nw_protocol_definition_t v5 = (sec_protocol_options *)v3;
      SSLProtocol v6 = tls_helper_SSLProtocol_from_version();
      sec_protocol_options_set_tls_max_version(v5, v6);
    }

    goto LABEL_5;
  }

  __nwlog_obj();
  int v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_parameters_set_maximum_tls_protocol_version";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_maximum_tls_protocol_version";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_parameters_set_maximum_tls_protocol_version";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_maximum_tls_protocol_version";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_maximum_tls_protocol_version";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F5129C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_maximum_tls_protocol_version(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  __nwlog_obj();
  id v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v14 = "nw_parameters_get_maximum_tls_protocol_version";
  nw_parameters_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      nw_protocol_definition_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v14 = "nw_parameters_get_maximum_tls_protocol_version";
        _os_log_impl(&dword_181A5C000, v5, v6, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      nw_protocol_definition_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v14 = "nw_parameters_get_maximum_tls_protocol_version";
          __int16 v15 = 2082;
          id v16 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v8,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_19;
      }

      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v14 = "nw_parameters_get_maximum_tls_protocol_version";
        _os_log_impl(&dword_181A5C000, v5, v8, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      nw_protocol_definition_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v14 = "nw_parameters_get_maximum_tls_protocol_version";
        _os_log_impl( &dword_181A5C000,  v5,  v10,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_ssl_cipher_suites(void *a1, tls_ciphersuite_t *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v31 = *MEMORY[0x1895F89C0];
  nw_protocol_definition_t v5 = a1;
  os_log_type_t v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    char v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_parameters_set_ssl_cipher_suites";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_parameters_set_ssl_cipher_suites";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v28 = "nw_parameters_set_ssl_cipher_suites";
          __int16 v29 = 2082;
          os_log_type_t v30 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_43:
        if (!v12) {
          goto LABEL_9;
        }
LABEL_44:
        free(v12);
        goto LABEL_9;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_parameters_set_ssl_cipher_suites";
        _os_log_impl(&dword_181A5C000, v13, v18, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_parameters_set_ssl_cipher_suites";
        _os_log_impl( &dword_181A5C000,  v13,  v23,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181F51A2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_get_ssl_cipher_suites(void *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  if (!v5)
  {
    __nwlog_obj();
    os_log_type_t v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_parameters_get_ssl_cipher_suites";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_parameters_get_ssl_cipher_suites";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v28 = "nw_parameters_get_ssl_cipher_suites";
          __int16 v29 = 2082;
          os_log_type_t v30 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v15,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v7) {
          goto LABEL_5;
        }
LABEL_56:
        free(v7);
        goto LABEL_5;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_parameters_get_ssl_cipher_suites";
        _os_log_impl(&dword_181A5C000, v8, v15, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_parameters_get_ssl_cipher_suites";
        _os_log_impl( &dword_181A5C000,  v8,  v22,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void nw_parameters_set_tls_session_ticket_enabled(void *a1, BOOL a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    id v5 = nw_parameters_copy_tls_options(v3);
    os_log_type_t v6 = v5;
    if (v5)
    {
      id v7 = (sec_protocol_options *)v5;
      sec_protocol_options_set_tls_tickets_enabled(v7, a2);
    }

    goto LABEL_5;
  }

  __nwlog_obj();
  os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v19 = "nw_parameters_set_tls_session_ticket_enabled";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      tls_ciphersuite_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v19 = "nw_parameters_set_tls_session_ticket_enabled";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      tls_ciphersuite_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v19 = "nw_parameters_set_tls_session_ticket_enabled";
          __int16 v20 = 2082;
          BOOL v21 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v19 = "nw_parameters_set_tls_session_ticket_enabled";
        _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      tls_ciphersuite_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v19 = "nw_parameters_set_tls_session_ticket_enabled";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F523AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_tls_session_ticket_enabled(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  __nwlog_obj();
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v14 = "nw_parameters_get_tls_session_ticket_enabled";
  nw_parameters_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_parameters_get_tls_session_ticket_enabled";
        _os_log_impl(&dword_181A5C000, v5, v6, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v14 = "nw_parameters_get_tls_session_ticket_enabled";
          __int16 v15 = 2082;
          char v16 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v8,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_19;
      }

      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_parameters_get_tls_session_ticket_enabled";
        _os_log_impl(&dword_181A5C000, v5, v8, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v14 = "nw_parameters_get_tls_session_ticket_enabled";
        _os_log_impl( &dword_181A5C000,  v5,  v10,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_tls_enforce_ev(void *a1)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1) {
    goto LABEL_2;
  }
  __nwlog_obj();
  nw_parameters_t v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v13 = "nw_parameters_set_tls_enforce_ev";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (__nwlog_fault(v3, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      nw_parameters_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v13 = "nw_parameters_set_tls_enforce_ev";
        _os_log_impl(&dword_181A5C000, v4, v5, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v10)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      nw_parameters_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v13 = "nw_parameters_set_tls_enforce_ev";
          __int16 v14 = 2082;
          __int16 v15 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v4,  v7,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_19;
      }

      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v13 = "nw_parameters_set_tls_enforce_ev";
        _os_log_impl(&dword_181A5C000, v4, v7, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      nw_parameters_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v13 = "nw_parameters_set_tls_enforce_ev";
        _os_log_impl( &dword_181A5C000,  v4,  v9,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_receive_any_interface(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 512LL;
    if (!a2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFFFFDFFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  os_log_type_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_parameters_set_receive_any_interface";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_parameters_set_receive_any_interface";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_parameters_set_receive_any_interface";
          __int16 v18 = 2082;
          BOOL v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_parameters_set_receive_any_interface";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_parameters_set_receive_any_interface";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_receive_any_interface(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[97] >> 1) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v16 = "nw_parameters_get_receive_any_interface";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_parameters_get_receive_any_interface";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v16 = "nw_parameters_get_receive_any_interface";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_parameters_get_receive_any_interface";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_parameters_get_receive_any_interface";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_ecn_mode(void *a1, unsigned int a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = "nw_parameters_set_ecn_mode";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_parameters_set_ecn_mode";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v22 = "nw_parameters_set_ecn_mode";
          __int16 v23 = 2082;
          os_log_type_t v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_parameters_set_ecn_mode";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_parameters_set_ecn_mode";
        _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void nw_parameters_set_background_traffic_management(void *a1, char a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = nw_parameters_copy_tcp_options(v3, 1);
    os_log_type_t v6 = v5;
    if (v5) {
      nw_tcp_options_set_enable_background_traffic_management(v5, a2);
    }

    goto LABEL_5;
  }

  __nwlog_obj();
  os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_parameters_set_background_traffic_management";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_background_traffic_management";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_parameters_set_background_traffic_management";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_background_traffic_management";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_set_background_traffic_management";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F53578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_get_background_traffic_management(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    id v3 = nw_parameters_copy_tcp_options(v1, 0);
    nw_parameters_t v4 = v3;
    if (v3) {
      BOOL enable_background_traffic_management = nw_tcp_options_get_enable_background_traffic_management(v3);
    }
    else {
      BOOL enable_background_traffic_management = 0LL;
    }

    goto LABEL_6;
  }

  __nwlog_obj();
  os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_parameters_get_background_traffic_management";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_background_traffic_management";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_parameters_get_background_traffic_management";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_background_traffic_management";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_parameters_get_background_traffic_management";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F53850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_initial_data_payload(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v23 = "nw_parameters_set_initial_data_payload";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v7, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v23 = "nw_parameters_set_initial_data_payload";
          _os_log_impl(&dword_181A5C000, v8, v15, "%{public}s called with null parameters", buf, 0xCu);
        }

        goto LABEL_22;
      }

      if (!v20)
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v23 = "nw_parameters_set_initial_data_payload";
          _os_log_impl( &dword_181A5C000,  v8,  v19,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_22;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v23 = "nw_parameters_set_initial_data_payload";
          _os_log_impl(&dword_181A5C000, v8, v17, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }

        goto LABEL_22;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v23 = "nw_parameters_set_initial_data_payload";
        __int16 v24 = 2082;
        uint64_t v25 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v8,  v17,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
    }

id nw_parameters_copy_initial_data_payload(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    id v3 = v1[18];
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_parameters_copy_initial_data_payload";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_copy_initial_data_payload";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_parameters_copy_initial_data_payload";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_copy_initial_data_payload";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_copy_initial_data_payload";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL __nw_parameters_has_protocol_at_level_block_invoke(uint64_t a1, int a2, nw_protocol_options_t options)
{
  nw_protocol_definition_t v4 = nw_protocol_options_copy_definition(options);
  identifier = nw_protocol_definition_get_identifier(v4);
  BOOL v6 = nw_protocols_are_equal(*(void **)(a1 + 40), identifier);
  if (v6) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  }
  BOOL v7 = !v6;

  return v7;
}

BOOL nw_parameters_has_proxy_protocol_in_effective_config(void *a1)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = (nw_protocol_stack_t *)v1;
  if (v1)
  {
    if (*((void *)v1 + 19))
    {
      id v3 = *((id *)v1 + 23);
      nw_protocol_definition_t v4 = v3;
      if (v3 && (uint64_t v5 = v3, v6 = v5[38], v5, v6 == 1))
      {
        nw_protocol_options_t v7 = nw_protocol_stack_copy_transport_protocol(v2[19]);
        nw_protocol_options_t v8 = v7;
        if (v7)
        {
          os_log_type_t v9 = v7;
          id v10 = v9[1];

          *(_DWORD *)os_log_type_t type = 4;
          BOOL v11 = (nw_protocol_stack *)nw_proxy_config_copy_protocol_stack(v5, v10, type);
          os_log_type_t v12 = v11;
          if (v11)
          {
            *(void *)buf = 0LL;
            *(void *)&buf[8] = buf;
            *(void *)&buf[16] = 0x2020000000LL;
            char v32 = 0;
            iterate_block[0] = MEMORY[0x1895F87A8];
            iterate_block[1] = 3221225472LL;
            iterate_block[2] = __nw_parameters_has_proxy_protocol_in_effective_config_block_invoke;
            iterate_block[3] = &unk_189BBD000;
            iterate_void block[4] = buf;
            nw_protocol_stack_iterate_application_protocols(v11, iterate_block);
            BOOL v13 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
            _Block_object_dispose(buf, 8);
          }

          else
          {
            BOOL v13 = 0LL;
          }
        }

        else
        {
          BOOL v13 = 0LL;
        }
      }

      else
      {
        BOOL v13 = 0LL;
      }

      goto LABEL_14;
    }

    __nwlog_obj();
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_parameters_has_proxy_protocol_in_effective_config";
    BOOL v16 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (__nwlog_fault(v16, type, &v30))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        __int16 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type[0];
        if (os_log_type_enabled(v17, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_has_proxy_protocol_in_effective_config";
          _os_log_impl(&dword_181A5C000, v17, v20, "%{public}s called with null parameters->default_stack", buf, 0xCu);
        }

void sub_181F545FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_parameters_has_proxy_protocol_in_effective_config_block_invoke( uint64_t a1, nw_protocol_options_t options)
{
  nw_protocol_definition_t v3 = nw_protocol_options_copy_definition(options);
  if (nw_protocol_definition_is_proxy(v3)) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  }
}

BOOL nw_parameters_has_multiplexed_protocol_in_stack(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    if (nw_protocol_http2_transport_identifier::onceToken[0] != -1) {
      dispatch_once(nw_protocol_http2_transport_identifier::onceToken, &__block_literal_global_36918);
    }
    if (nw_parameters_has_protocol_in_stack(v1, &g_http2_transport_protocol_identifier)) {
      goto LABEL_8;
    }
    if (nw_protocol_http2_identifier::onceToken != -1) {
      dispatch_once(&nw_protocol_http2_identifier::onceToken, &__block_literal_global_83570);
    }
    if (nw_parameters_has_protocol_in_stack(v1, &nw_protocol_http2_identifier::http2_protocol_identifier))
    {
LABEL_8:
      BOOL has_protocol_in_stack = 1LL;
    }

    else
    {
      quic_stream_protocol_identifier = nw_protocol_get_quic_stream_protocol_identifier();
      BOOL has_protocol_in_stack = nw_parameters_has_protocol_in_stack(v1, quic_stream_protocol_identifier);
    }

    goto LABEL_10;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_parameters_has_multiplexed_protocol_in_stack";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      nw_protocol_options_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_has_multiplexed_protocol_in_stack";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      nw_protocol_options_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_parameters_has_multiplexed_protocol_in_stack";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_has_multiplexed_protocol_in_stack";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      nw_protocol_options_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_has_multiplexed_protocol_in_stack";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F5498C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_has_persistent_protocol_in_stack(void *a1)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    id v3 = v1[19];
    nw_protocol_definition_t v4 = v3;
    if (v3)
    {
      uint64_t v5 = *((void *)v3 + 1);
      if (v5)
      {
        BOOL v6 = *(void *)(v5 + 24) != *(void *)(v5 + 16);
LABEL_43:

        goto LABEL_44;
      }

uint64_t __nw_parameters_internal_iterate_protocol_stack_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  nw_protocol_definition_t v4 = a3;
  nw_protocol_definition_t v5 = nw_protocol_options_copy_definition(v4);
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();

  return v6;
}

void sub_181F54EDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_inherit_protocol_instances(void *a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  uint64_t v71 = *MEMORY[0x1895F89C0];
  os_log_type_t v9 = a1;
  os_log_type_t v10 = a3;
  BOOL v11 = v10;
  if (!v9)
  {
    __nwlog_obj();
    char v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_parameters_inherit_protocol_instances";
    uint64_t v33 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v67 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v35 = type[0];
      if (os_log_type_enabled(v34, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_parameters_inherit_protocol_instances";
        _os_log_impl(&dword_181A5C000, v34, v35, "%{public}s called with null new_parameters", buf, 0xCu);
      }
    }

    else if (v67)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v47 = type[0];
      BOOL v48 = os_log_type_enabled(v34, type[0]);
      if (backtrace_string)
      {
        if (v48)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_parameters_inherit_protocol_instances";
          __int16 v69 = 2082;
          int v70 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v34,  v47,  "%{public}s called with null new_parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_94:
        if (!v33) {
          goto LABEL_34;
        }
LABEL_95:
        free(v33);
        goto LABEL_34;
      }

      if (v48)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_parameters_inherit_protocol_instances";
        _os_log_impl(&dword_181A5C000, v34, v47, "%{public}s called with null new_parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v58 = type[0];
      if (os_log_type_enabled(v34, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_parameters_inherit_protocol_instances";
        _os_log_impl( &dword_181A5C000,  v34,  v58,  "%{public}s called with null new_parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181F559A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_protocol_stack_application_protocols_are_equal_below( void *a1, uint64_t a2, void *a3, uint64_t a4, int a5, void *a6, void *a7)
{
  uint64_t v66 = *MEMORY[0x1895F89C0];
  char v13 = a1;
  id v14 = a3;
  int v15 = v14;
  if (a4)
  {
    BOOL v16 = 1LL;
    if (!v13 || !v14 || !v13[2] || !v14[2]) {
      goto LABEL_30;
    }
    uint64_t v17 = *(void *)(a4 + 16);
    if (v17)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      char v65 = 0;
      uint64_t v58 = 0LL;
      os_log_type_t v59 = &v58;
      uint64_t v60 = 0x2020000000LL;
      uint64_t v61 = 0LL;
      uint64_t v18 = MEMORY[0x1895F87A8];
      v57[0] = MEMORY[0x1895F87A8];
      v57[1] = 3221225472LL;
      v57[2] = ___ZL55nw_protocol_stack_application_protocols_are_equal_belowP28NWConcrete_nw_protocol_stackmS0_P11nw_protocol28nw_parameters_compare_mode_tPmS4__block_invoke;
      v57[3] = &unk_189BB8EC0;
      v57[5] = buf;
      v57[6] = a4;
      v57[4] = &v58;
      nw_protocol_stack_iterate_application_protocols_with_index(v14, v57);
      if (!*(_BYTE *)(*(void *)&buf[8] + 24LL))
      {
        if (gLogDatapath)
        {
          __nwlog_obj();
          os_log_type_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)os_log_type_t v62 = 136446722;
            *(void *)&void v62[4] = "nw_protocol_stack_application_protocols_are_equal_below";
            *(_WORD *)&v62[12] = 2048;
            *(void *)&v62[14] = a4;
            *(_WORD *)&v62[22] = 2048;
            BOOL v63 = v15;
            _os_log_impl( &dword_181A5C000,  v40,  OS_LOG_TYPE_DEBUG,  "%{public}s join protocol %p not in protocol stack %p",  v62,  0x20u);
          }
        }

        BOOL v16 = 0LL;
        goto LABEL_29;
      }

      uint64_t v19 = v13[1];
      if (v19) {
        uint64_t v19 = (uint64_t)(*(void *)(v19 + 24) - *(void *)(v19 + 16)) >> 3;
      }
      uint64_t v20 = v13[2];
      if (v20)
      {
        uint64_t v21 = (uint64_t)(*(void *)(v20 + 24) - *(void *)(v20 + 16)) >> 3;
        uint64_t v22 = v15[1];
        if (!v22)
        {
LABEL_13:
          uint64_t v23 = v21 + v19;
          uint64_t v24 = v15[2];
          if (v24) {
            uint64_t v24 = (uint64_t)(*(void *)(v24 + 24) - *(void *)(v24 + 16)) >> 3;
          }
          *(void *)os_log_type_t v62 = 0LL;
          *(void *)&v62[8] = v62;
          *(void *)&v62[16] = 0x2020000000LL;
          LOBYTE(v63) = 0;
          uint64_t v53 = 0LL;
          BOOL v54 = &v53;
          uint64_t v55 = 0x2020000000LL;
          uint64_t v56 = 0LL;
          v52[0] = v18;
          v52[1] = 3221225472LL;
          v52[2] = ___ZL55nw_protocol_stack_application_protocols_are_equal_belowP28NWConcrete_nw_protocol_stackmS0_P11nw_protocol28nw_parameters_compare_mode_tPmS4__block_invoke_384;
          v52[3] = &unk_189BB8EE8;
          v52[8] = v23;
          v52[9] = v24 + v22;
          v52[10] = a2;
          v52[4] = &v58;
          void v52[5] = &v53;
          v52[6] = v62;
          v52[7] = v17;
          nw_protocol_stack_iterate_application_protocols_with_index(v13, v52);
          if (*(_BYTE *)(*(void *)&v62[8] + 24LL) && *(_BYTE *)(*(void *)&buf[8] + 24LL))
          {
            uint64_t v48 = 0LL;
            __int16 v49 = &v48;
            uint64_t v50 = 0x2020000000LL;
            char v51 = 0;
            v42[0] = v18;
            v42[1] = 3221225472LL;
            v42[2] = ___ZL55nw_protocol_stack_application_protocols_are_equal_belowP28NWConcrete_nw_protocol_stackmS0_P11nw_protocol28nw_parameters_compare_mode_tPmS4__block_invoke_2;
            v42[3] = &unk_189BB8F10;
            uint64_t v44 = &v53;
            char v43 = v15;
            os_log_type_t v45 = &v58;
            BOOL v46 = &v48;
            int v47 = a5;
            nw_protocol_stack_iterate_application_protocols_with_index(v13, v42);
            BOOL v16 = *((_BYTE *)v49 + 24) == 0;

            _Block_object_dispose(&v48, 8);
            if (a6) {
              BOOL v25 = a7 == 0LL;
            }
            else {
              BOOL v25 = 1;
            }
            if (!v25 && v16)
            {
              *a6 = v54[3];
              *a7 = v59[3];
              BOOL v16 = 1LL;
            }
          }

          else
          {
            BOOL v16 = 0LL;
          }

          _Block_object_dispose(&v53, 8);
          _Block_object_dispose(v62, 8);
LABEL_29:
          _Block_object_dispose(&v58, 8);
          _Block_object_dispose(buf, 8);
          goto LABEL_30;
        }
      }

      else
      {
        uint64_t v21 = 0LL;
        uint64_t v22 = v15[1];
        if (!v22) {
          goto LABEL_13;
        }
      }

      uint64_t v22 = (uint64_t)(*(void *)(v22 + 24) - *(void *)(v22 + 16)) >> 3;
      goto LABEL_13;
    }

    __nwlog_obj();
    os_log_type_t v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_stack_application_protocols_are_equal_below";
    __int16 v29 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v5_Block_object_dispose(va, 8) = 16;
    v62[0] = 0;
    if (__nwlog_fault(v29, &v58, v62))
    {
      if (v58 == 17)
      {
        __nwlog_obj();
        id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v36 = v58;
        if (os_log_type_enabled(v30, (os_log_type_t)v58))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_stack_application_protocols_are_equal_below";
          _os_log_impl(&dword_181A5C000, v30, v36, "%{public}s called with null join_identifier", buf, 0xCu);
        }

uint64_t __nw_parameters_inherit_protocol_instances_block_invoke(uint64_t a1, unint64_t a2, void *a3)
{
  nw_protocol_definition_t v5 = a3;
  uint64_t v6 = v5;
  unint64_t v7 = *(void *)(a1 + 40);
  unint64_t v8 = a2 - v7;
  if (a2 > v7)
  {
    uint64_t v9 = *(void *)(a1 + 48);
    nw_protocol_definition_t v10 = nw_protocol_options_copy_definition(v5);
    BOOL v11 = (void *)nw_protocol_stack_copy_application_protocol_at_index( *(NWConcrete_nw_protocol_stack **)(a1 + 32),  v8 + v9);
    os_log_type_t v12 = v11;
    if (v6 && v11 && nw_protocol_options_matches_definition(v11, v10))
    {
      char v13 = v12;
      id v14 = v6;
      snprintf(v14 + 48, 0x54uLL, "%s", v13 + 48);
      *((_WORD *)v14 + 6_Block_object_dispose(va, 8) = *((_WORD *)v13 + 68);

      int v15 = v13;
      uint64_t v16 = *((void *)v15 + 2);

      uint64_t v17 = v14;
      *((void *)v17 + 2) = v16;
    }
  }

  return 1LL;
}

void sub_181F5625C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_protocol_stack_iterate_application_protocols_with_index(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  v20[0] = 0LL;
  v20[1] = v20;
  id v20[2] = 0x2020000000LL;
  v20[3] = 0LL;
  uint64_t v16 = 0LL;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000LL;
  char v19 = 0;
  nw_protocol_definition_t v5 = (unsigned __int8 *)v3[1];
  uint64_t v6 = MEMORY[0x1895F87A8];
  v12[0] = MEMORY[0x1895F87A8];
  v12[1] = 3221225472LL;
  v12[2] = ___ZL58nw_protocol_stack_iterate_application_protocols_with_indexP28NWConcrete_nw_protocol_stackU13block_pointerFbmPU33objcproto22OS_nw_protocol_options8NSObjectE_block_invoke;
  v12[3] = &unk_189BB8F38;
  id v7 = v4;
  id v13 = v7;
  id v14 = v20;
  int v15 = &v16;
  nw_array_apply(v5, (uint64_t)v12);
  if (!*((_BYTE *)v17 + 24))
  {
    unint64_t v8 = (unsigned __int8 *)v3[2];
    v9[0] = v6;
    v9[1] = 3221225472LL;
    v9[2] = ___ZL58nw_protocol_stack_iterate_application_protocols_with_indexP28NWConcrete_nw_protocol_stackU13block_pointerFbmPU33objcproto22OS_nw_protocol_options8NSObjectE_block_invoke_2;
    v9[3] = &unk_189BB8F60;
    id v10 = v7;
    BOOL v11 = v20;
    nw_array_apply(v8, (uint64_t)v9);
  }

  _Block_object_dispose(&v16, 8);
  _Block_object_dispose(v20, 8);
}

uint64_t ___ZL58nw_protocol_stack_iterate_application_protocols_with_indexP28NWConcrete_nw_protocol_stackU13block_pointerFbmPU33objcproto22OS_nw_protocol_options8NSObjectE_block_invoke( void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(a1[4] + 16LL))();
  ++*(void *)(*(void *)(a1[5] + 8LL) + 24LL);
  if ((result & 1) == 0) {
    *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
  }
  return result;
}

uint64_t ___ZL58nw_protocol_stack_iterate_application_protocols_with_indexP28NWConcrete_nw_protocol_stackU13block_pointerFbmPU33objcproto22OS_nw_protocol_options8NSObjectE_block_invoke_2( uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  return result;
}

uint64_t nw_protocol_stack_copy_application_protocol_at_index( NWConcrete_nw_protocol_stack *a1, unint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t persistent_application_protocols = (uint64_t)v3->persistent_application_protocols;
    if (persistent_application_protocols)
    {
      if (v6 > a2) {
        goto LABEL_7;
      }
    }

    else
    {
      unint64_t v6 = 0LL;
    }

    a2 -= v6;
    uint64_t persistent_application_protocols = (uint64_t)v4->application_protocols;
LABEL_7:
    uint64_t v7 = nw_array_get_object_at_index(persistent_application_protocols, a2);
    goto LABEL_8;
  }

  __nwlog_obj();
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v20 = "nw_protocol_stack_copy_application_protocol_at_index";
  id v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_protocol_stack_copy_application_protocol_at_index";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null stack", buf, 0xCu);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v20 = "nw_protocol_stack_copy_application_protocol_at_index";
          __int16 v21 = 2082;
          uint64_t v22 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s called with null stack, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_protocol_stack_copy_application_protocol_at_index";
        _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_protocol_stack_copy_application_protocol_at_index";
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null stack, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL ___ZL55nw_protocol_stack_application_protocols_are_equal_belowP28NWConcrete_nw_protocol_stackmS0_P11nw_protocol28nw_parameters_compare_mode_tPmS4__block_invoke( void *a1, uint64_t a2, void *a3)
{
  uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(a3);
  uint64_t v6 = a1[6];
  if (protocol_handle == v6)
  {
    *(void *)(*(void *)(a1[4] + 8LL) + 24LL) = a2;
    *(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL) = 1;
  }

  return protocol_handle != v6;
}

uint64_t ___ZL55nw_protocol_stack_application_protocols_are_equal_belowP28NWConcrete_nw_protocol_stackmS0_P11nw_protocol28nw_parameters_compare_mode_tPmS4__block_invoke_384( uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  identifier = nw_protocol_parameters_get_identifier(v5);
  if (nw_protocols_are_equal(identifier, *(void **)(a1 + 56))
    && *(void *)(a1 + 64) - a2 == *(void *)(a1 + 72) - *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    uint64_t v7 = *(void *)(a1 + 80);
    uint64_t v8 = 1LL;
    if (v7 == -1 || v7 == a2)
    {
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = a2;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
      uint64_t v8 = 0LL;
    }
  }

  else
  {
    uint64_t v8 = 1LL;
  }

  return v8;
}

uint64_t ___ZL55nw_protocol_stack_application_protocols_are_equal_belowP28NWConcrete_nw_protocol_stackmS0_P11nw_protocol28nw_parameters_compare_mode_tPmS4__block_invoke_2( uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  unint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  BOOL v7 = a2 >= v6;
  unint64_t v8 = a2 - v6;
  if (v8 != 0 && v7)
  {
    uint64_t v9 = (void *)nw_protocol_stack_copy_application_protocol_at_index( *(NWConcrete_nw_protocol_stack **)(a1 + 32),  v8 + *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL));
    uint64_t is_equal = nw_protocol_option_is_equal(v5, v9);
    if ((is_equal & 1) == 0) {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 1;
    }
  }

  else
  {
    uint64_t is_equal = 1LL;
  }

  return is_equal;
}

void sub_181F568B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *nw_protocol_parameters_get_identifier(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    id v3 = (id *)v1;
    id v4 = v3[1];

    identifier = nw_protocol_definition_get_identifier(v4);
    goto LABEL_3;
  }

  __nwlog_obj();
  BOOL v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v18 = "nw_protocol_parameters_get_identifier";
  unint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_protocol_parameters_get_identifier";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null protocol_parameters", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v18 = "nw_protocol_parameters_get_identifier";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_protocol_parameters_get_identifier";
        _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null protocol_parameters, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_protocol_parameters_get_identifier";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null protocol_parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_log_protocol_instances(void *a1)
{
  uint64_t v67 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    id v3 = (void **)v1[19];
    if (v3)
    {
      v53[0] = MEMORY[0x1895F87A8];
      v53[1] = 3221225472LL;
      v53[2] = __nw_parameters_log_protocol_instances_block_invoke;
      v53[3] = &unk_189BB8DE0;
      id v4 = v2;
      BOOL v54 = v4;
      nw_protocol_stack_iterate_application_protocols_with_index(v3, v53);
      id v5 = v3[3];
      if (v5)
      {
        unint64_t v6 = v5;
        id v7 = v6[1];

        identifier = nw_protocol_definition_get_identifier(v7);
        uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(v3[3]);
        if (gLogDatapath)
        {
          uint64_t v33 = protocol_handle;
          __nwlog_obj();
          BOOL v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
          {
            os_log_type_t v35 = v3[3];
            *(_DWORD *)buf = 136447234;
            uint64_t v58 = "nw_parameters_log_protocol_instances";
            __int16 v59 = 2048;
            uint64_t v60 = (char *)v4;
            __int16 v61 = 2048;
            os_log_type_t v62 = v35;
            __int16 v63 = 2080;
            uint64_t v64 = identifier;
            __int16 v65 = 2048;
            uint64_t v66 = v33;
            _os_log_impl( &dword_181A5C000,  v34,  OS_LOG_TYPE_DEBUG,  "%{public}s Parameters %p, transport, options %p (%s), protocol handle %p",  buf,  0x34u);
          }
        }
      }

      os_log_type_t v10 = v3[4];
      if (v10)
      {
        BOOL v11 = v10;
        id v12 = v11[1];

        BOOL v13 = nw_protocol_definition_get_identifier(v12);
        uint64_t v14 = nw_protocol_options_get_protocol_handle(v3[4]);
        if (gLogDatapath)
        {
          uint64_t v36 = v14;
          __nwlog_obj();
          os_log_type_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
          {
            os_log_type_t v38 = v3[4];
            *(_DWORD *)buf = 136447234;
            uint64_t v58 = "nw_parameters_log_protocol_instances";
            __int16 v59 = 2048;
            uint64_t v60 = (char *)v4;
            __int16 v61 = 2048;
            os_log_type_t v62 = v38;
            __int16 v63 = 2080;
            uint64_t v64 = v13;
            __int16 v65 = 2048;
            uint64_t v66 = v36;
            _os_log_impl( &dword_181A5C000,  v37,  OS_LOG_TYPE_DEBUG,  "%{public}s Parameters %p, secondary transport, options %p (%s), protocol handle %p",  buf,  0x34u);
          }
        }
      }

      char v15 = v3[6];
      if (v15)
      {
        os_log_type_t v16 = v15;
        id v17 = v16[1];

        uint64_t v18 = nw_protocol_definition_get_identifier(v17);
        uint64_t v19 = nw_protocol_options_get_protocol_handle(v3[6]);
        if (gLogDatapath)
        {
          uint64_t v39 = v19;
          __nwlog_obj();
          os_log_type_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
          {
            os_log_type_t v41 = v3[6];
            *(_DWORD *)buf = 136447234;
            uint64_t v58 = "nw_parameters_log_protocol_instances";
            __int16 v59 = 2048;
            uint64_t v60 = (char *)v4;
            __int16 v61 = 2048;
            os_log_type_t v62 = v41;
            __int16 v63 = 2080;
            uint64_t v64 = v18;
            __int16 v65 = 2048;
            uint64_t v66 = v39;
            _os_log_impl( &dword_181A5C000,  v40,  OS_LOG_TYPE_DEBUG,  "%{public}s Parameters %p, internet, options %p (%s), protocol handle %p",  buf,  0x34u);
          }
        }
      }

      uint64_t v20 = v3[7];
      if (v20)
      {
        uint64_t v21 = v20;
        id v22 = v21[1];

        uint64_t v23 = nw_protocol_definition_get_identifier(v22);
        uint64_t v24 = nw_protocol_options_get_protocol_handle(v3[7]);
        if (gLogDatapath)
        {
          uint64_t v42 = v24;
          __nwlog_obj();
          char v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v44 = v3[7];
            *(_DWORD *)buf = 136447234;
            uint64_t v58 = "nw_parameters_log_protocol_instances";
            __int16 v59 = 2048;
            uint64_t v60 = (char *)v4;
            __int16 v61 = 2048;
            os_log_type_t v62 = v44;
            __int16 v63 = 2080;
            uint64_t v64 = v23;
            __int16 v65 = 2048;
            uint64_t v66 = v42;
            _os_log_impl( &dword_181A5C000,  v43,  OS_LOG_TYPE_DEBUG,  "%{public}s Parameters %p, link, options %p (%s), protocol handle %p",  buf,  0x34u);
          }
        }
      }

LABEL_16:
      goto LABEL_17;
    }

    __nwlog_obj();
    __int16 v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v58 = "nw_parameters_log_protocol_instances";
    id v30 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (__nwlog_fault(v30, &type, &v55))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v58 = "nw_parameters_log_protocol_instances";
          _os_log_impl(&dword_181A5C000, v31, v32, "%{public}s called with null stack", buf, 0xCu);
        }
      }

      else if (v55)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v49 = type;
        BOOL v50 = os_log_type_enabled(v31, type);
        if (backtrace_string)
        {
          if (v50)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v58 = "nw_parameters_log_protocol_instances";
            __int16 v59 = 2082;
            uint64_t v60 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v31,  v49,  "%{public}s called with null stack, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_64;
        }

        if (v50)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v58 = "nw_parameters_log_protocol_instances";
          _os_log_impl(&dword_181A5C000, v31, v49, "%{public}s called with null stack, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v52 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v58 = "nw_parameters_log_protocol_instances";
          _os_log_impl( &dword_181A5C000,  v31,  v52,  "%{public}s called with null stack, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

uint64_t __nw_parameters_log_protocol_instances_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v5 = a3;
  nw_protocol_definition_t v6 = nw_protocol_options_copy_definition(v5);
  identifier = nw_protocol_definition_get_identifier(v6);
  uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(v5);
  if (gLogDatapath)
  {
    uint64_t v10 = protocol_handle;
    __nwlog_obj();
    BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      int v13 = 136447490;
      uint64_t v14 = "nw_parameters_log_protocol_instances_block_invoke";
      __int16 v15 = 2048;
      uint64_t v16 = v12;
      __int16 v17 = 2048;
      uint64_t v18 = a2;
      __int16 v19 = 2048;
      uint64_t v20 = v5;
      __int16 v21 = 2080;
      id v22 = identifier;
      __int16 v23 = 2048;
      uint64_t v24 = v10;
      _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_DEBUG,  "%{public}s Parameters %p, index %zu, options %p (%s), protocol handle %p",  (uint8_t *)&v13,  0x3Eu);
    }
  }

  return 1LL;
}

uint64_t nw_protocol_parameters_iterate_stack(void *a1, int a2, void *a3, void *a4)
{
  uint64_t v58 = *MEMORY[0x1895F89C0];
  id v7 = a1;
  id v8 = a4;
  uint64_t v9 = (void (**)(void, void, void))v8;
  if (v7)
  {
    if (v8)
    {
      uint64_t v10 = v7[19];
      BOOL v11 = v10;
      if (v10)
      {
        switch(a2)
        {
          case 2:
            uint64_t v12 = (void *)v10[6];
            if (!v12) {
              goto LABEL_73;
            }
            int v13 = v12;
            id v14 = v13[1];

            identifier = nw_protocol_definition_get_identifier(v14);
            if (nw_protocols_are_equal(a3, identifier)) {
              v9[2](v9, 0LL, v11[6]);
            }
            goto LABEL_14;
          case 3:
            __int16 v17 = (void *)v10[3];
            if (!v17) {
              goto LABEL_73;
            }
            uint64_t v18 = v17;
            id v14 = v18[1];

            __int16 v19 = nw_protocol_definition_get_identifier(v14);
            if (nw_protocols_are_equal(a3, v19)) {
              v9[2](v9, 0LL, v11[3]);
            }
LABEL_14:

            uint64_t v20 = 1LL;
            break;
          case 4:
            __int16 v21 = (unsigned __int8 *)v10[2];
            if (!v21) {
              goto LABEL_73;
            }
            v46[0] = MEMORY[0x1895F87A8];
            v46[1] = 3221225472LL;
            v46[2] = __nw_protocol_parameters_iterate_stack_block_invoke_2;
            v46[3] = &unk_189BB8D90;
            uint64_t v48 = a3;
            BOOL v47 = v9;
            nw_array_apply(v21, (uint64_t)v46);
            id v22 = v47;
            goto LABEL_19;
          case 5:
            __int16 v23 = (unsigned __int8 *)v10[1];
            if (!v23) {
              goto LABEL_73;
            }
            v49[0] = MEMORY[0x1895F87A8];
            v49[1] = 3221225472LL;
            v49[2] = __nw_protocol_parameters_iterate_stack_block_invoke;
            v49[3] = &unk_189BB8D90;
            os_log_type_t v51 = a3;
            BOOL v50 = v9;
            nw_array_apply(v23, (uint64_t)v49);
            id v22 = v50;
LABEL_19:

            uint64_t v20 = 1LL;
            break;
          default:
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v16 = (os_log_s *)(id)gLogObj;
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              char v55 = "nw_protocol_parameters_iterate_stack";
              __int16 v56 = 1024;
              LODWORD(v57) = a2;
              _os_log_impl( &dword_181A5C000,  v16,  OS_LOG_TYPE_ERROR,  "%{public}s Unsupported protocol level %u",  buf,  0x12u);
            }

            goto LABEL_73;
        }

void sub_181F57D98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_parameters_iterate_stack_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  nw_protocol_definition_t v5 = nw_protocol_options_copy_definition(v4);
  identifier = nw_protocol_definition_get_identifier(v5);
  if (nw_protocols_are_equal(*(void **)(a1 + 40), identifier)) {
    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
  else {
    uint64_t v7 = 1LL;
  }

  return v7;
}

void sub_181F57E34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_parameters_iterate_stack_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  nw_protocol_definition_t v5 = nw_protocol_options_copy_definition(v4);
  identifier = nw_protocol_definition_get_identifier(v5);
  if (nw_protocols_are_equal(*(void **)(a1 + 40), identifier)) {
    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
  else {
    uint64_t v7 = 1LL;
  }

  return v7;
}

void sub_181F57EC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_protocol_instance(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v4 = a1;
  nw_protocol_definition_t v5 = v4;
  if (v4)
  {
    nw_protocol_definition_t v6 = v4;
    v6[2] = a3;

    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v18 = "nw_parameters_set_protocol_instance";
  id v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_parameters_set_protocol_instance";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null protocol_parameters", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v18 = "nw_parameters_set_protocol_instance";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_parameters_set_protocol_instance";
        _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null protocol_parameters, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_parameters_set_protocol_instance";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null protocol_parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_protocol_parameters_copy_value(void *a1, const char *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = nw_parameters_copy_protocol_value_from_parameters(v3, a2);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v18 = "nw_protocol_parameters_copy_value";
  id v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_protocol_parameters_copy_value";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null protocol_parameters", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v18 = "nw_protocol_parameters_copy_value";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_protocol_parameters_copy_value";
        _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null protocol_parameters, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_protocol_parameters_copy_value";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null protocol_parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F5840C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_copy_protocol_value_from_parameters(void *a1, const char *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = (id *)v3;
    id v6 = v5[5];

    if (v6 && object_getClass(v6) == (Class)MEMORY[0x1895F9250])
    {
      uint64_t v7 = xpc_dictionary_get_value(v6, a2);
    }

    else
    {
      uint64_t v7 = 0LL;
    }

    goto LABEL_7;
  }

  __nwlog_obj();
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v20 = "nw_parameters_copy_protocol_value_from_parameters";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_parameters_copy_protocol_value_from_parameters";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null protocol_parameters", buf, 0xCu);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v20 = "nw_parameters_copy_protocol_value_from_parameters";
          __int16 v21 = 2082;
          id v22 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_parameters_copy_protocol_value_from_parameters";
        _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s called with null protocol_parameters, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_parameters_copy_protocol_value_from_parameters";
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null protocol_parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F58704(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_parameters_copy_protocol_value_from_level(void *a1, int a2, uint64_t a3, const char *a4)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  uint64_t v7 = a1;
  id v8 = (void **)v7[19];
  uint64_t v9 = v8;
  if (v8)
  {
    *(void *)BOOL v41 = 0LL;
    *(void *)&v41[8] = v41;
    *(void *)&v41[16] = 0x3032000000LL;
    os_log_type_t v42 = __Block_byref_object_copy__19159;
    os_log_type_t v43 = __Block_byref_object_dispose__19160;
    id v44 = 0LL;
    switch(a2)
    {
      case 2:
        os_log_type_t v10 = v8[6];
        if (!v10) {
          goto LABEL_18;
        }
        BOOL v11 = v10;
        uint64_t v12 = v11[2];

        if (v12) {
          BOOL v13 = v12 == a3;
        }
        else {
          BOOL v13 = 0;
        }
        if (!v13) {
          goto LABEL_24;
        }
        uint64_t v14 = nw_parameters_copy_protocol_value_from_parameters(v9[6], a4);
        goto LABEL_17;
      case 3:
        BOOL v15 = v8[3];
        if (!v15) {
          goto LABEL_18;
        }
        os_log_type_t v16 = v15;
        uint64_t v17 = v16[2];

        if (v17) {
          BOOL v18 = v17 == a3;
        }
        else {
          BOOL v18 = 0;
        }
        if (v18)
        {
          uint64_t v14 = nw_parameters_copy_protocol_value_from_parameters(v9[3], a4);
LABEL_17:
          __int16 v19 = *(void **)(*(void *)&v41[8] + 40LL);
          *(void *)(*(void *)&v41[8] + 40LL) = v14;
        }

        goto LABEL_24;
      case 4:
        id v22 = (unsigned __int8 *)v8[2];
        uint64_t v34 = MEMORY[0x1895F87A8];
        uint64_t v23 = ___ZL44nw_parameters_copy_protocol_value_from_levelP24NWConcrete_nw_parameters19nw_protocol_level_tP11nw_protocolPKc_block_invoke_2;
        uint64_t v24 = &v34;
        goto LABEL_23;
      case 5:
        id v22 = (unsigned __int8 *)v8[1];
        uint64_t v35 = MEMORY[0x1895F87A8];
        uint64_t v23 = ___ZL44nw_parameters_copy_protocol_value_from_levelP24NWConcrete_nw_parameters19nw_protocol_level_tP11nw_protocolPKc_block_invoke;
        uint64_t v24 = &v35;
LABEL_23:
        v24[1] = 3221225472LL;
        v24[2] = (uint64_t)v23;
        v24[3] = (uint64_t)&unk_189BB8F88;
        v24[4] = (uint64_t)v41;
        v24[5] = a3;
        v24[6] = (uint64_t)a4;
        nw_array_apply(v22, (uint64_t)v24);
LABEL_24:
        id v21 = *(id *)(*(void *)&v41[8] + 40LL);
        break;
      default:
LABEL_18:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v20 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          BOOL v38 = "nw_parameters_copy_protocol_value_from_level";
          __int16 v39 = 1024;
          int v40 = a2;
          _os_log_impl(&dword_181A5C000, v20, OS_LOG_TYPE_ERROR, "%{public}s Unsupported protocol level %u", buf, 0x12u);
        }

        id v21 = 0LL;
        break;
    }

    _Block_object_dispose(v41, 8);

    goto LABEL_26;
  }

  __nwlog_obj();
  id v26 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)BOOL v41 = 136446210;
  *(void *)&void v41[4] = "nw_parameters_copy_protocol_value_from_level";
  os_log_type_t v27 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  char v36 = 0;
  if (__nwlog_fault(v27, buf, &v36))
  {
    if (buf[0] == 17)
    {
      __nwlog_obj();
      os_log_type_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = buf[0];
      if (os_log_type_enabled(v28, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)BOOL v41 = 136446210;
        *(void *)&void v41[4] = "nw_parameters_copy_protocol_value_from_level";
        _os_log_impl(&dword_181A5C000, v28, v29, "%{public}s called with null stack", v41, 0xCu);
      }
    }

    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v31 = buf[0];
      BOOL v32 = os_log_type_enabled(v28, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)BOOL v41 = 136446466;
          *(void *)&void v41[4] = "nw_parameters_copy_protocol_value_from_level";
          *(_WORD *)&v41[12] = 2082;
          *(void *)&v41[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v28,  v31,  "%{public}s called with null stack, dumping backtrace:%{public}s",  v41,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_43;
      }

      if (v32)
      {
        *(_DWORD *)BOOL v41 = 136446210;
        *(void *)&void v41[4] = "nw_parameters_copy_protocol_value_from_level";
        _os_log_impl(&dword_181A5C000, v28, v31, "%{public}s called with null stack, no backtrace", v41, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v33 = buf[0];
      if (os_log_type_enabled(v28, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)BOOL v41 = 136446210;
        *(void *)&void v41[4] = "nw_parameters_copy_protocol_value_from_level";
        _os_log_impl( &dword_181A5C000,  v28,  v33,  "%{public}s called with null stack, backtrace limit exceeded",  v41,  0xCu);
      }
    }
  }

void sub_181F58B98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL44nw_parameters_copy_protocol_value_from_levelP24NWConcrete_nw_parameters19nw_protocol_level_tP11nw_protocolPKc_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(v4);
  if (protocol_handle && protocol_handle == *(void *)(a1 + 40))
  {
    uint64_t v6 = nw_parameters_copy_protocol_value_from_parameters(v4, *(const char **)(a1 + 48));
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8LL);
    id v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }

  BOOL v9 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL) == 0LL;

  return v9;
}

void sub_181F58C40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL44nw_parameters_copy_protocol_value_from_levelP24NWConcrete_nw_parameters19nw_protocol_level_tP11nw_protocolPKc_block_invoke_2( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(v4);
  if (protocol_handle && protocol_handle == *(void *)(a1 + 40))
  {
    uint64_t v6 = nw_parameters_copy_protocol_value_from_parameters(v4, *(const char **)(a1 + 48));
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8LL);
    id v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }

  BOOL v9 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL) == 0LL;

  return v9;
}

void sub_181F58CC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned __int8 *nw_parameters_copy_protocol_options(void *a1, void *a2, _DWORD *a3)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a2;
  uint64_t v7 = v6;
  if (v5)
  {
    if (v6)
    {
      id v8 = nw_parameters_copy_protocol_options_internal(v5, v6, a3);
      goto LABEL_4;
    }

    __nwlog_obj();
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v26 = "nw_parameters_copy_protocol_options";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v11, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          id v26 = "nw_parameters_copy_protocol_options";
          _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null protocol_instance", buf, 0xCu);
        }

void sub_181F59190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned __int8 *nw_parameters_copy_protocol_options_internal(void *a1, void *a2, _DWORD *a3)
{
  uint64_t v58 = *MEMORY[0x1895F89C0];
  id v6 = a1;
  id v44 = v6;
  id v45 = a2;
  if (v45)
  {
    id v7 = v6[19];
    id v8 = v7;
    if (v7)
    {
      uint64_t v9 = MEMORY[0x1895F87A8];
      if (*((void *)v7 + 1))
      {
        *(void *)buf = 0LL;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x3032000000LL;
        char v55 = __Block_byref_object_copy__19159;
        __int16 v56 = __Block_byref_object_dispose__19160;
        id v57 = 0LL;
        uint64_t v3 = (unsigned __int8 *)*((void *)v7 + 1);
        v49[0] = MEMORY[0x1895F87A8];
        v49[1] = 3221225472LL;
        v49[2] = ___ZL44nw_parameters_copy_protocol_options_internalP24NWConcrete_nw_parametersPU40objcproto29NWConcrete_nw_protocol_handle8NSObjectP19nw_protocol_level_t_block_invoke;
        v49[3] = &unk_189BC7960;
        id v50 = v45;
        os_log_type_t v51 = buf;
        nw_array_apply(v3, (uint64_t)v49);
        uint64_t v10 = *(void *)&buf[8];
        uint64_t v11 = *(void *)(*(void *)&buf[8] + 40LL);
        if (v11)
        {
          if (a3)
          {
            *a3 = 5;
            uint64_t v12 = *(void **)(v10 + 40);
          }

          else
          {
            uint64_t v12 = *(void **)(*(void *)&buf[8] + 40LL);
          }

          uint64_t v3 = v12;
        }

        _Block_object_dispose(buf, 8);
        if (v11) {
          goto LABEL_39;
        }
      }

      if (v8[2])
      {
        *(void *)buf = 0LL;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x3032000000LL;
        char v55 = __Block_byref_object_copy__19159;
        __int16 v56 = __Block_byref_object_dispose__19160;
        id v57 = 0LL;
        os_log_type_t v13 = (unsigned __int8 *)v8[2];
        v46[0] = v9;
        v46[1] = 3221225472LL;
        v46[2] = ___ZL44nw_parameters_copy_protocol_options_internalP24NWConcrete_nw_parametersPU40objcproto29NWConcrete_nw_protocol_handle8NSObjectP19nw_protocol_level_t_block_invoke_2;
        v46[3] = &unk_189BC7960;
        id v47 = v45;
        uint64_t v48 = buf;
        nw_array_apply(v13, (uint64_t)v46);
        uint64_t v14 = *(void *)&buf[8];
        uint64_t v15 = *(void *)(*(void *)&buf[8] + 40LL);
        if (v15)
        {
          if (a3)
          {
            *a3 = 4;
            os_log_type_t v16 = *(void **)(v14 + 40);
          }

          else
          {
            os_log_type_t v16 = *(void **)(*(void *)&buf[8] + 40LL);
          }

          uint64_t v3 = v16;
        }

        _Block_object_dispose(buf, 8);
        if (v15) {
          goto LABEL_39;
        }
      }

      os_log_type_t v17 = (void *)v8[3];
      if (v17
        && (BOOL v18 = v17, v19 = v18[2], v18, v19)
        && v19 == [v45 getProtocolStructure])
      {
        if (a3) {
          *a3 = 3;
        }
        id v26 = (void *)v8[3];
      }

      else
      {
        BOOL v20 = (void *)v8[4];
        if (v20
          && (os_log_type_t v21 = v20, v22 = v21[2], v21, v22)
          && v22 == [v45 getProtocolStructure])
        {
          if (a3) {
            *a3 = 3;
          }
          id v26 = (void *)v8[4];
        }

        else
        {
          char v23 = (void *)v8[6];
          if (!v23
            || (uint64_t v24 = v23, v25 = v24[2], v24, !v25)
            || v25 != [v45 getProtocolStructure])
          {
LABEL_28:
            uint64_t v3 = 0LL;
LABEL_39:

            goto LABEL_40;
          }

          if (a3) {
            *a3 = 2;
          }
          id v26 = (void *)v8[6];
        }
      }

      uint64_t v3 = v26;
      goto LABEL_39;
    }

    __nwlog_obj();
    BOOL v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_parameters_copy_protocol_options_internal";
    os_log_type_t v33 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v53 = OS_LOG_TYPE_ERROR;
    char v52 = 0;
    if (__nwlog_fault(v33, &v53, &v52))
    {
      if (v53 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v35 = v53;
        if (os_log_type_enabled(v34, v53))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_copy_protocol_options_internal";
          _os_log_impl(&dword_181A5C000, v34, v35, "%{public}s called with null stack", buf, 0xCu);
        }
      }

      else if (v52)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v40 = v53;
        BOOL v41 = os_log_type_enabled(v34, v53);
        if (backtrace_string)
        {
          if (v41)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_parameters_copy_protocol_options_internal";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v34,  v40,  "%{public}s called with null stack, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_76;
        }

        if (v41)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_copy_protocol_options_internal";
          _os_log_impl(&dword_181A5C000, v34, v40, "%{public}s called with null stack, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v43 = v53;
        if (os_log_type_enabled(v34, v53))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_copy_protocol_options_internal";
          _os_log_impl( &dword_181A5C000,  v34,  v43,  "%{public}s called with null stack, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181F598AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL44nw_parameters_copy_protocol_options_internalP24NWConcrete_nw_parametersPU40objcproto29NWConcrete_nw_protocol_handle8NSObjectP19nw_protocol_level_t_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(v5);
  if (protocol_handle && protocol_handle == [*(id *)(a1 + 32) getProtocolStructure])
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
    uint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v7 = 1LL;
  }

  return v7;
}

void sub_181F59958(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL44nw_parameters_copy_protocol_options_internalP24NWConcrete_nw_parametersPU40objcproto29NWConcrete_nw_protocol_handle8NSObjectP19nw_protocol_level_t_block_invoke_2( uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(v5);
  if (protocol_handle && protocol_handle == [*(id *)(a1 + 32) getProtocolStructure])
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
    uint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v7 = 1LL;
  }

  return v7;
}

void sub_181F599E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned __int8 *nw_parameters_copy_protocol_options_for_definition(void *a1, void *a2)
{
  uint64_t v57 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
      id v6 = (unsigned __int8 **)v3[19];
      uint64_t v7 = v6;
      if (v6)
      {
        id v8 = v6[1];
        uint64_t v9 = MEMORY[0x1895F87A8];
        if (v8)
        {
          *(void *)buf = 0LL;
          *(void *)&buf[8] = buf;
          *(void *)&buf[16] = 0x3032000000LL;
          BOOL v54 = __Block_byref_object_copy__19159;
          char v55 = __Block_byref_object_dispose__19160;
          id v56 = 0LL;
          v48[0] = MEMORY[0x1895F87A8];
          v48[1] = 3221225472LL;
          v48[2] = __nw_parameters_copy_protocol_options_for_definition_block_invoke;
          v48[3] = &unk_189BC7960;
          id v49 = v5;
          id v50 = buf;
          nw_array_apply(v8, (uint64_t)v48);
          uint64_t v10 = *(void **)(*(void *)&buf[8] + 40LL);
          if (v10)
          {
            uint64_t v11 = v10;

            _Block_object_dispose(buf, 8);
LABEL_25:

            goto LABEL_26;
          }

          _Block_object_dispose(buf, 8);
        }

        uint64_t v12 = v7[2];
        if (v12)
        {
          *(void *)buf = 0LL;
          *(void *)&buf[8] = buf;
          *(void *)&buf[16] = 0x3032000000LL;
          BOOL v54 = __Block_byref_object_copy__19159;
          char v55 = __Block_byref_object_dispose__19160;
          id v56 = 0LL;
          v45[0] = v9;
          v45[1] = 3221225472LL;
          v45[2] = __nw_parameters_copy_protocol_options_for_definition_block_invoke_2;
          v45[3] = &unk_189BC7960;
          id v46 = v5;
          id v47 = buf;
          nw_array_apply(v12, (uint64_t)v45);
          os_log_type_t v13 = *(void **)(*(void *)&buf[8] + 40LL);
          if (v13)
          {
            uint64_t v11 = v13;

            _Block_object_dispose(buf, 8);
            goto LABEL_25;
          }

          _Block_object_dispose(buf, 8);
        }

        uint64_t v14 = v7[3];
        if (v14)
        {
          uint64_t v15 = v14;
          id v16 = v15[1];

          if (nw_protocol_definition_is_equal_unsafe((uint64_t)v5, (uint64_t)v16))
          {
            uint64_t v11 = v7[3];

            goto LABEL_25;
          }
        }

        os_log_type_t v17 = v7[4];
        if (v17)
        {
          BOOL v18 = v17;
          id v19 = v18[1];

          if (nw_protocol_definition_is_equal_unsafe((uint64_t)v5, (uint64_t)v19))
          {
            uint64_t v11 = v7[4];

            goto LABEL_25;
          }
        }

        BOOL v20 = v7[6];
        if (v20)
        {
          os_log_type_t v21 = v20;
          id v22 = v21[1];

          if (nw_protocol_definition_is_equal_unsafe((uint64_t)v5, (uint64_t)v22))
          {
            uint64_t v11 = v7[6];

            goto LABEL_25;
          }
        }

void sub_181F5A2F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

BOOL __nw_parameters_copy_protocol_options_for_definition_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  nw_protocol_definition_t v6 = nw_protocol_options_copy_definition(v5);
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe(*(void *)(a1 + 32), (uint64_t)v6);
  if (is_equal_unsafe) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
  }

  return !is_equal_unsafe;
}

void sub_181F5A3A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL __nw_parameters_copy_protocol_options_for_definition_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  nw_protocol_definition_t v6 = nw_protocol_options_copy_definition(v5);
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe(*(void *)(a1 + 32), (uint64_t)v6);
  if (is_equal_unsafe) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
  }

  return !is_equal_unsafe;
}

void sub_181F5A43C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_add_to_protocol_stack(void *a1, int a2, unsigned int a3, __int128 *a4)
{
  id v7 = a1;
  protocol_parameters = nw_parameters_create_protocol_parameters(a4);
  if (protocol_parameters) {
    uint64_t v9 = nw_parameters_add_protocol_stack_member(v7, a2, a3, protocol_parameters);
  }
  else {
    uint64_t v9 = 0LL;
  }

  return v9;
}

void sub_181F5A4C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_remove_from_protocol_stack(void *a1, int a2, void *a3)
{
  uint64_t v64 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  nw_protocol_definition_t v6 = v5;
  if (v5)
  {
    if (a3)
    {
      id v7 = (unsigned __int8 **)v5[19];
      id v8 = v7;
      if (v7)
      {
        switch(a2)
        {
          case 2:
            uint64_t v9 = v7[6];
            if (!v9) {
              goto LABEL_23;
            }
            uint64_t v10 = v9;
            id v11 = v10[1];

            identifier = nw_protocol_definition_get_identifier(v11);
            if (!nw_protocols_are_equal(a3, identifier)) {
              goto LABEL_20;
            }
            os_log_type_t v13 = v8[6];
            v8[6] = 0LL;
            break;
          case 3:
            id v16 = v7[3];
            if (v16)
            {
              os_log_type_t v17 = v16;
              id v18 = v17[1];

              id v19 = nw_protocol_definition_get_identifier(v18);
              if (nw_protocols_are_equal(a3, v19))
              {
                BOOL v20 = v8[3];
                v8[3] = 0LL;
              }
            }

            os_log_type_t v21 = v8[4];
            if (!v21) {
              goto LABEL_23;
            }
            id v22 = v21;
            id v11 = v22[1];

            char v23 = nw_protocol_definition_get_identifier(v11);
            if (!nw_protocols_are_equal(a3, v23)) {
              goto LABEL_20;
            }
            os_log_type_t v13 = v8[4];
            v8[4] = 0LL;
            break;
          case 4:
            *(void *)buf = 0LL;
            *(void *)&buf[8] = buf;
            *(void *)&buf[16] = 0x3032000000LL;
            __int16 v61 = __Block_byref_object_copy__19159;
            os_log_type_t v62 = __Block_byref_object_dispose__19160;
            uint64_t v24 = v7 + 2;
            __int16 v63 = v7[2];
            uint64_t v25 = *v24;
            v50[0] = MEMORY[0x1895F87A8];
            v50[1] = 3221225472LL;
            v50[2] = __nw_parameters_remove_from_protocol_stack_block_invoke_2;
            v50[3] = &unk_189BC7338;
            char v52 = buf;
            os_log_type_t v53 = a3;
            char v51 = v8;
            nw_array_apply(v25, (uint64_t)v50);
            objc_storeStrong((id *)v8 + 2, *(id *)(*(void *)&buf[8] + 40LL));

            _Block_object_dispose(buf, 8);
            goto LABEL_23;
          case 5:
            *(void *)buf = 0LL;
            *(void *)&buf[8] = buf;
            *(void *)&buf[16] = 0x3032000000LL;
            __int16 v61 = __Block_byref_object_copy__19159;
            os_log_type_t v62 = __Block_byref_object_dispose__19160;
            id v26 = v7 + 1;
            __int16 v63 = v7[1];
            os_log_type_t v27 = *v26;
            v54[0] = MEMORY[0x1895F87A8];
            v54[1] = 3221225472LL;
            v54[2] = __nw_parameters_remove_from_protocol_stack_block_invoke;
            v54[3] = &unk_189BC7338;
            id v56 = buf;
            uint64_t v57 = a3;
            char v55 = v8;
            nw_array_apply(v27, (uint64_t)v54);
            objc_storeStrong((id *)v8 + 1, *(id *)(*(void *)&buf[8] + 40LL));

            _Block_object_dispose(buf, 8);
            goto LABEL_23;
          default:
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v14 = (os_log_s *)(id)gLogObj;
            if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_parameters_remove_from_protocol_stack";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = a2;
              _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_ERROR,  "%{public}s Unsupported protocol level %u",  buf,  0x12u);
            }

            goto LABEL_11;
        }

LABEL_20:
LABEL_23:
        uint64_t v15 = 1LL;
LABEL_24:

        goto LABEL_25;
      }

      __nwlog_obj();
      os_log_type_t v35 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_parameters_remove_from_protocol_stack";
      BOOL v36 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t v59 = OS_LOG_TYPE_ERROR;
      char v58 = 0;
      if (__nwlog_fault(v36, &v59, &v58))
      {
        if (v59 == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v38 = v59;
          if (os_log_type_enabled(v37, v59))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_parameters_remove_from_protocol_stack";
            _os_log_impl(&dword_181A5C000, v37, v38, "%{public}s called with null stack", buf, 0xCu);
          }
        }

        else if (v58)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v45 = v59;
          BOOL v46 = os_log_type_enabled(v37, v59);
          if (backtrace_string)
          {
            if (v46)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_parameters_remove_from_protocol_stack";
              *(_WORD *)&_BYTE buf[12] = 2082;
              *(void *)&buf[14] = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v37,  v45,  "%{public}s called with null stack, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(backtrace_string);
            goto LABEL_77;
          }

          if (v46)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_parameters_remove_from_protocol_stack";
            _os_log_impl(&dword_181A5C000, v37, v45, "%{public}s called with null stack, no backtrace", buf, 0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          os_log_type_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v49 = v59;
          if (os_log_type_enabled(v37, v59))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_parameters_remove_from_protocol_stack";
            _os_log_impl( &dword_181A5C000,  v37,  v49,  "%{public}s called with null stack, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

BOOL __nw_parameters_remove_from_protocol_stack_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  nw_protocol_definition_t v5 = nw_protocol_options_copy_definition(v4);
  identifier = nw_protocol_definition_get_identifier(v5);
  BOOL v7 = nw_protocols_are_equal(*(void **)(a1 + 48), identifier);
  if (v7)
  {
    BOOL v8 = nw_array_duplicate_array_without_object(*(void *)(*(void *)(a1 + 32) + 8LL), v4);
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }

  return !v7;
}

BOOL __nw_parameters_remove_from_protocol_stack_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  nw_protocol_definition_t v5 = nw_protocol_options_copy_definition(v4);
  identifier = nw_protocol_definition_get_identifier(v5);
  BOOL v7 = nw_protocols_are_equal(*(void **)(a1 + 48), identifier);
  if (v7)
  {
    BOOL v8 = nw_array_duplicate_array_without_object(*(void *)(*(void *)(a1 + 32) + 16LL), v4);
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }

  return !v7;
}

void nw_parameters_remove_application_protocol_options_from_protocol_stack(void *a1, void *a2)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  nw_protocol_definition_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
          __int16 v37 = 2082;
          os_log_type_t v38 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_53:
        if (!v10) {
          goto LABEL_6;
        }
LABEL_54:
        free(v10);
        goto LABEL_6;
      }

      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
        _os_log_impl(&dword_181A5C000, v11, v20, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v36 = "nw_parameters_remove_application_protocol_options_from_protocol_stack";
        _os_log_impl( &dword_181A5C000,  v11,  v28,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_parameters_remove_application_protocol_options_from_protocol_stack_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void nw_parameters_remove_definition_from_protocol_stack(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  nw_protocol_definition_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    nw_protocol_definition_t v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v23 = "nw_parameters_remove_definition_from_protocol_stack";
    BOOL v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_remove_definition_from_protocol_stack";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v23 = "nw_parameters_remove_definition_from_protocol_stack";
          __int16 v24 = 2082;
          uint64_t v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7) {
          goto LABEL_4;
        }
LABEL_39:
        free(v7);
        goto LABEL_4;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_remove_definition_from_protocol_stack";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_remove_definition_from_protocol_stack";
        _os_log_impl( &dword_181A5C000,  v8,  v18,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181F5BB6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_metadata(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  nw_protocol_definition_t v5 = v4;
  if (v3)
  {
    if (!v4 || object_getClass(v4) == (Class)MEMORY[0x1895F9240])
    {
      objc_storeStrong(v3 + 27, a2);
      goto LABEL_24;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v23 = "nw_parameters_set_metadata";
    BOOL v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v8 = (os_log_s *)(id)gLogObj;
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_set_metadata";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null metadata - wrong type", buf, 0xCu);
      }
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v8 = (os_log_s *)(id)gLogObj;
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v23 = "nw_parameters_set_metadata";
          __int16 v24 = 2082;
          uint64_t v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null metadata - wrong type, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (v7) {
          goto LABEL_23;
        }
        goto LABEL_24;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_set_metadata";
        _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null metadata - wrong type, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v8 = (os_log_s *)(id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_set_metadata";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null metadata - wrong type, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_21;
  }

  __nwlog_obj();
  BOOL v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v23 = "nw_parameters_set_metadata";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v7, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_set_metadata";
        _os_log_impl(&dword_181A5C000, v8, v15, "%{public}s called with null parameters", buf, 0xCu);
      }

void sub_181F5C09C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_transform_array(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  nw_protocol_definition_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    id v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v23 = "nw_parameters_set_transform_array";
    BOOL v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_set_transform_array";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v23 = "nw_parameters_set_transform_array";
          __int16 v24 = 2082;
          uint64_t v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v7) {
          goto LABEL_5;
        }
LABEL_40:
        free(v7);
        goto LABEL_5;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_set_transform_array";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_set_transform_array";
        _os_log_impl( &dword_181A5C000,  v8,  v18,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

BOOL nw_parameters_has_transforms(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    BOOL v3 = *((void *)v1 + 20) != 0LL;
    goto LABEL_3;
  }

  __nwlog_obj();
  nw_protocol_definition_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_has_transforms";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_has_transforms";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_has_transforms";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_has_transforms";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_has_transforms";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_companion_preference(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *(_DWORD *)(*((void *)v3 + 13) + 84LL) = a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  nw_protocol_definition_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_set_companion_preference";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_companion_preference";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_set_companion_preference";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_companion_preference";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_set_companion_preference";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_companion_preference(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *(unsigned int *)(*((void *)v1 + 13) + 84LL);
    goto LABEL_3;
  }

  __nwlog_obj();
  nw_protocol_definition_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_companion_preference";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_companion_preference";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_companion_preference";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_companion_preference";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_companion_preference";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_https_proxy_is_opaque(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x100000LL;
    if (!a2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFEFFFFFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_parameters_set_https_proxy_is_opaque";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_https_proxy_is_opaque";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parameters_set_https_proxy_is_opaque";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_https_proxy_is_opaque";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_https_proxy_is_opaque";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_https_proxy_is_opaque(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[98] >> 4) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_https_proxy_is_opaque";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_https_proxy_is_opaque";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_https_proxy_is_opaque";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_https_proxy_is_opaque";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_https_proxy_is_opaque";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_https_proxy_over_tls(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x200000LL;
    if (!a2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFDFFFFFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_parameters_set_https_proxy_over_tls";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_https_proxy_over_tls";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parameters_set_https_proxy_over_tls";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_https_proxy_over_tls";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_https_proxy_over_tls";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_clear_proxy_options(void *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_parameters_t v2 = v1;
  if (v1)
  {
    id v3 = (void *)*((void *)v1 + 21);
    *((void *)v1 + 21) = 0LL;

    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_parameters_clear_proxy_options";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_parameters_clear_proxy_options";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v15 = "nw_parameters_clear_proxy_options";
          __int16 v16 = 2082;
          __int16 v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_parameters_clear_proxy_options";
        _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_parameters_clear_proxy_options";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL __nw_parameters_copy_proxy_options_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a3;
  nw_protocol_definition_t v6 = nw_protocol_options_copy_definition(v5);
  BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, *(void *)(a1 + 32));

  if (is_equal_unsafe) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
  }

  return !is_equal_unsafe;
}

void sub_181F5D838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_attach_protocol_listener(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x400000LL;
    if (!a2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFBFFFFFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  nw_protocol_definition_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_parameters_set_attach_protocol_listener";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_attach_protocol_listener";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parameters_set_attach_protocol_listener";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_attach_protocol_listener";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_attach_protocol_listener";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_prohibit_joining_protocols(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x800000LL;
    if (!a2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFF7FFFFFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  nw_protocol_definition_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_parameters_set_prohibit_joining_protocols";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_prohibit_joining_protocols";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parameters_set_prohibit_joining_protocols";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_prohibit_joining_protocols";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_prohibit_joining_protocols";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_allow_joining_connected_fd(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x1000000LL;
    if (!a2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFEFFFFFFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  nw_protocol_definition_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_parameters_set_allow_joining_connected_fd";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_allow_joining_connected_fd";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parameters_set_allow_joining_connected_fd";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_allow_joining_connected_fd";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_allow_joining_connected_fd";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_allow_duplicate_state_updates(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x4000000LL;
    if (!a2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFBFFFFFFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  nw_protocol_definition_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_parameters_set_allow_duplicate_state_updates";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_allow_duplicate_state_updates";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parameters_set_allow_duplicate_state_updates";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_allow_duplicate_state_updates";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_allow_duplicate_state_updates";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_disable_listener_datapath(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x20000000LL;
    if (!a2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFDFFFFFFFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  nw_protocol_definition_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_parameters_set_disable_listener_datapath";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_disable_listener_datapath";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_parameters_set_disable_listener_datapath";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_disable_listener_datapath";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_parameters_set_disable_listener_datapath";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_allow_sharing_port_with_listener_for_connection(void *a1, void *a2, void *a3)
{
  uint64_t v47 = *MEMORY[0x1895F89C0];
  uint64_t v5 = a1;
  id v6 = a2;
  id v40 = a3;
  if (!v5)
  {
    __nwlog_obj();
    os_log_type_t v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)uint64_t aBlock = 136446210;
    *(void *)&void aBlock[4] = "nw_parameters_allow_sharing_port_with_listener_for_connection";
    __int16 v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)uint64_t aBlock = 136446210;
        *(void *)&void aBlock[4] = "nw_parameters_allow_sharing_port_with_listener_for_connection";
        _os_log_impl(&dword_181A5C000, v25, v26, "%{public}s called with null parameters", aBlock, 0xCu);
      }
    }

    else if (v41)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v30 = type;
      BOOL v31 = os_log_type_enabled(v25, type);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)uint64_t aBlock = 136446466;
          *(void *)&void aBlock[4] = "nw_parameters_allow_sharing_port_with_listener_for_connection";
          *(_WORD *)&aBlock[12] = 2082;
          *(void *)&aBlock[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v25,  v30,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  aBlock,  0x16u);
        }

        free(backtrace_string);
LABEL_53:
        if (!v24) {
          goto LABEL_19;
        }
LABEL_54:
        free(v24);
        goto LABEL_19;
      }

      if (v31)
      {
        *(_DWORD *)uint64_t aBlock = 136446210;
        *(void *)&void aBlock[4] = "nw_parameters_allow_sharing_port_with_listener_for_connection";
        _os_log_impl(&dword_181A5C000, v25, v30, "%{public}s called with null parameters, no backtrace", aBlock, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)uint64_t aBlock = 136446210;
        *(void *)&void aBlock[4] = "nw_parameters_allow_sharing_port_with_listener_for_connection";
        _os_log_impl( &dword_181A5C000,  v25,  v35,  "%{public}s called with null parameters, backtrace limit exceeded",  aBlock,  0xCu);
      }
    }

void sub_181F5EC80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, void *a24)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL46nw_parameters_register_demux_options_if_neededP24NWConcrete_nw_parametersPU25objcproto14OS_nw_listener8NSObjectPU27objcproto16OS_nw_connectionS1__block_invoke( uint64_t a1)
{
  return nw_masque_add_additional_demux_pattern(*(void **)(a1 + 32), *(void *)(a1 + 40));
}

void nw_parameters_allow_sharing_port_with_listener(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    id v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v23 = "nw_parameters_allow_sharing_port_with_listener";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_allow_sharing_port_with_listener";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v23 = "nw_parameters_allow_sharing_port_with_listener";
          __int16 v24 = 2082;
          uint64_t v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7) {
          goto LABEL_4;
        }
LABEL_39:
        free(v7);
        goto LABEL_4;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_allow_sharing_port_with_listener";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v23 = "nw_parameters_allow_sharing_port_with_listener";
        _os_log_impl( &dword_181A5C000,  v8,  v18,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181F5F1DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_get_listener_uuid(void *a1, _OWORD *a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v22 = "nw_parameters_get_listener_uuid";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v22 = "nw_parameters_get_listener_uuid";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          id v22 = "nw_parameters_get_listener_uuid";
          __int16 v23 = 2082;
          __int16 v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        id v22 = "nw_parameters_get_listener_uuid";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v22 = "nw_parameters_get_listener_uuid";
        _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void nw_parameters_set_tracker_context(void *a1, const char *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    nw_parameters_set_attribution_context(v3, a2);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_parameters_set_tracker_context";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_tracker_context";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_parameters_set_tracker_context";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_tracker_context";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_parameters_set_tracker_context";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_attributed_bundle_identifier(void *a1, const char *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v20 = "nw_parameters_set_attributed_bundle_identifier";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v8, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          char v20 = "nw_parameters_set_attributed_bundle_identifier";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            char v20 = "nw_parameters_set_attributed_bundle_identifier";
            __int16 v21 = 2082;
            id v22 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_27;
        }

        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          char v20 = "nw_parameters_set_attributed_bundle_identifier";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          char v20 = "nw_parameters_set_attributed_bundle_identifier";
          _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

uint64_t nw_parameters_get_should_trust_invalid_certificates(void *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (!v1)
  {
    __nwlog_obj();
    id v3 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v15 = "nw_parameters_get_should_trust_invalid_certificates";
    id v4 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (__nwlog_fault(v4, &type, &v12))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v6 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v15 = "nw_parameters_get_should_trust_invalid_certificates";
          _os_log_impl(&dword_181A5C000, v5, v6, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v15 = "nw_parameters_get_should_trust_invalid_certificates";
            __int16 v16 = 2082;
            char v17 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v5,  v8,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (v9)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v15 = "nw_parameters_get_should_trust_invalid_certificates";
          _os_log_impl(&dword_181A5C000, v5, v8, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v15 = "nw_parameters_get_should_trust_invalid_certificates";
          _os_log_impl( &dword_181A5C000,  v5,  v10,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181F5FF40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_should_trust_invalid_certificates(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x200000000000LL;
    if (!a2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFDFFFFFFFFFFFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  os_log_type_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v17 = "nw_parameters_set_should_trust_invalid_certificates";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_parameters_set_should_trust_invalid_certificates";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          char v17 = "nw_parameters_set_should_trust_invalid_certificates";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_parameters_set_should_trust_invalid_certificates";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_parameters_set_should_trust_invalid_certificates";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_parameters_get_should_skip_probe_sampling(void *a1)
{
  id v1 = a1;
  if (os_variant_allows_internal_security_policies()) {
    BOOL v2 = (v1[101] & 0x40) != 0
  }
      || networkd_settings_get_BOOL((const char *)nw_setting_tcpconn_disable_tls_experiment_sampling);
  else {
    BOOL v2 = 0LL;
  }

  return v2;
}

void sub_181F6025C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_should_skip_probe_sampling(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x400000000000LL;
    if (!a2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFBFFFFFFFFFFFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  os_log_type_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v17 = "nw_parameters_set_should_skip_probe_sampling";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_parameters_set_should_skip_probe_sampling";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          char v17 = "nw_parameters_set_should_skip_probe_sampling";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_parameters_set_should_skip_probe_sampling";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        char v17 = "nw_parameters_set_should_skip_probe_sampling";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_is_equal(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  uint64_t v6 = v3 == v4;
  if (v3 != v4 && v3 && v4)
  {
    if (memcmp(v3 + 8, v4 + 8, 0x60uLL)) {
      goto LABEL_42;
    }
    id v7 = nw_parameters_copy_path_parameters(v3, 0);
    id v8 = nw_parameters_copy_path_parameters(v5, 0);
    BOOL v9 = nw_path_parameters_are_equal(v7, v8, 0);

    if (!v9) {
      goto LABEL_42;
    }
    os_log_type_t v10 = (const char *)*((void *)v3 + 14);
    os_log_type_t v11 = (const char *)*((void *)v5 + 14);
    if (v10 != v11 && v10 && v11)
    {
      if (strcmp(v10, v11)) {
        goto LABEL_42;
      }
    }

    else if (v10 != v11)
    {
      goto LABEL_42;
    }

    BOOL v12 = (const char *)*((void *)v3 + 15);
    os_log_type_t v13 = (const char *)*((void *)v5 + 15);
    if (v12 != v13 && v12 && v13)
    {
      if (strcmp(v12, v13)) {
        goto LABEL_42;
      }
    }

    else if (v12 != v13)
    {
      goto LABEL_42;
    }

    if (!nw_endpoint_is_equal(*((void **)v3 + 25), *((void **)v5 + 25), 0LL)
      || !nw_endpoint_is_equal(*((void **)v3 + 26), *((void **)v5 + 26), 0LL)
      || !nw_xpc_objects_equal(*((void **)v3 + 16), *((void **)v5 + 16))
      || !nw_xpc_objects_equal(*((void **)v3 + 17), *((void **)v5 + 17)))
    {
      goto LABEL_42;
    }

    uint64_t v14 = *((void *)v3 + 20);
    uint64_t v15 = *((void *)v5 + 20);
    if (v14 == v15) {
      goto LABEL_46;
    }
    uint64_t v6 = 0LL;
    if (v14 && v15)
    {
      if (*(void *)(v14 + 24) - *(void *)(v14 + 16) != *(void *)(v15 + 24) - *(void *)(v15 + 16)) {
        goto LABEL_42;
      }
      uint64_t v34 = 0LL;
      os_log_type_t v35 = &v34;
      uint64_t v36 = 0x2020000000LL;
      char v37 = 1;
      v31[0] = MEMORY[0x1895F87A8];
      v31[1] = 3221225472LL;
      v31[2] = __nw_parameters_is_equal_block_invoke;
      v31[3] = &unk_189BC7960;
      __int16 v16 = (unsigned __int8 *)v14;
      id v32 = v5;
      os_log_type_t v33 = &v34;
      nw_array_apply(v16, (uint64_t)v31);
      uint64_t v6 = *((unsigned __int8 *)v35 + 24);

      _Block_object_dispose(&v34, 8);
      if ((_DWORD)v6)
      {
LABEL_46:
        uint64_t v17 = *((void *)v3 + 22);
        uint64_t v18 = *((void *)v5 + 22);
        if (v17 == v18) {
          goto LABEL_47;
        }
        uint64_t v6 = 0LL;
        if (v17 && v18)
        {
          uint64_t v19 = (unsigned __int8 *)*((void *)v3 + 22);
          if (*(void *)(v17 + 24) - *(void *)(v17 + 16) != *(void *)(v18 + 24) - *(void *)(v18 + 16)) {
            goto LABEL_42;
          }
          uint64_t v34 = 0LL;
          os_log_type_t v35 = &v34;
          uint64_t v36 = 0x2020000000LL;
          char v37 = 0;
          v28[0] = MEMORY[0x1895F87A8];
          v28[1] = 3221225472LL;
          void v28[2] = __nw_parameters_is_equal_block_invoke_2;
          v28[3] = &unk_189BC7960;
          id v29 = v5;
          os_log_type_t v30 = &v34;
          nw_array_apply(v19, (uint64_t)v28);
          int v20 = *((unsigned __int8 *)v35 + 24);

          _Block_object_dispose(&v34, 8);
          uint64_t v6 = 0LL;
          if (!v20)
          {
LABEL_47:
            if (!nw_proxy_config_is_equal(*((void **)v3 + 23), *((void **)v5 + 23))
              || !nw_proxy_config_is_equal(*((void **)v3 + 24), *((void **)v5 + 24))
              || !nw_protocol_stack_is_equal(*((void **)v3 + 19), *((void **)v5 + 19), 0))
            {
              goto LABEL_42;
            }

            uint64_t v21 = *((void *)v3 + 21);
            uint64_t v22 = *((void *)v5 + 21);
            if (v21 == v22) {
              goto LABEL_48;
            }
            uint64_t v6 = 0LL;
            if (v21 && v22)
            {
              if (*(void *)(v21 + 24) - *(void *)(v21 + 16) != *(void *)(v22 + 24) - *(void *)(v22 + 16)) {
                goto LABEL_42;
              }
              uint64_t v34 = 0LL;
              os_log_type_t v35 = &v34;
              uint64_t v36 = 0x2020000000LL;
              char v37 = 0;
              v25[0] = MEMORY[0x1895F87A8];
              v25[1] = 3221225472LL;
              v25[2] = __nw_parameters_is_equal_block_invoke_3;
              v25[3] = &unk_189BC7960;
              id v26 = v5;
              BOOL v27 = &v34;
              nw_array_apply((unsigned __int8 *)v21, (uint64_t)v25);
              int v23 = *((unsigned __int8 *)v35 + 24);

              _Block_object_dispose(&v34, 8);
              uint64_t v6 = 0LL;
              if (!v23)
              {
LABEL_48:
                if (nw_dispatch_data_is_equal(*((dispatch_data_t *)v3 + 18), *((dispatch_data_s **)v5 + 18)))
                {
                  uint64_t v6 = nw_xpc_objects_equal(*((void **)v3 + 27), *((void **)v5 + 27));
                  goto LABEL_43;
                }

void sub_181F608E0(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

BOOL nw_xpc_objects_equal(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  BOOL v6 = v3 == v4;
  if (v3 != v4 && v3 && v4) {
    BOOL v6 = xpc_equal(v3, v4);
  }

  return v6;
}

{
  id v3;
  id v4;
  void *v5;
  BOOL v6;
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  BOOL v6 = v3 == v4;
  if (v3 != v4 && v3 && v4) {
    BOOL v6 = xpc_equal(v3, v4);
  }

  return v6;
}

void sub_181F60978(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_parameters_is_equal_block_invoke(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  nw_array_get_object_at_index(*(void *)(*(void *)(a1 + 32) + 160LL), a2);
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v7 = nw_protocol_transform_compare(v5, v6, 0);
  if ((v7 & 1) == 0) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
  }

  return v7;
}

void sub_181F60A0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_parameters_is_equal_block_invoke_2(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  nw_array_get_object_at_index(*(void *)(*(void *)(a1 + 32) + 176LL), a2);
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t is_equal = nw_proxy_config_is_equal(v5, v6);
  if ((is_equal & 1) == 0) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }

  return is_equal;
}

void sub_181F60A9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_parameters_is_equal_block_invoke_3(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  nw_array_get_object_at_index(*(void *)(*(void *)(a1 + 32) + 168LL), a2);
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t is_equal = nw_protocol_option_is_equal(v5, v6);
  if ((is_equal & 1) == 0) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }

  return is_equal;
}

void sub_181F60B2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_parameters_are_compatible(void *a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  BOOL v9 = a1;
  os_log_type_t v10 = a3;
  os_log_type_t v11 = v10;
  BOOL v12 = v9 == v10;
  if (v9 != v10 && v9 && v10)
  {
    os_log_type_t v13 = v9[23];
    int v14 = 3;
    if (v13)
    {
      uint64_t v15 = v13;
      char v16 = v15[170];

      if ((v16 & 1) != 0) {
        int v14 = 4;
      }
      else {
        int v14 = 3;
      }
    }

    if (a4) {
      int v17 = 2;
    }
    else {
      int v17 = 1;
    }
    if (!a5) {
      int v14 = v17;
    }
    if ((a5 & 1) == 0)
    {
      uint64_t v18 = v9;
      id v19 = v18[25];

      int v20 = v11;
      id v21 = v20[25];

      if (v19)
      {
        if (v21)
        {
          url_scheme = (const char *)nw_endpoint_get_url_scheme(v19);
          int v23 = (const char *)nw_endpoint_get_url_scheme(v21);
          if (strcasecmp(url_scheme, v23))
          {

LABEL_24:
            BOOL v12 = 0LL;
            goto LABEL_25;
          }
        }
      }
    }

    id v24 = nw_parameters_copy_path_parameters(v9, 0);
    id v25 = nw_parameters_copy_path_parameters(v11, 0);
    BOOL v26 = nw_path_parameters_are_equal(v24, v25, v14);

    if (!v26) {
      goto LABEL_24;
    }
    BOOL v27 = v9[19];
    if (a4)
    {
      if (!nw_protocol_stack_application_protocols_are_equal_below(v27, a2, v11[19], a4, v14, 0LL, 0LL)) {
        goto LABEL_24;
      }
    }

    else if (!nw_protocol_stack_is_equal(v27, v11[19], v14))
    {
      goto LABEL_24;
    }

    BOOL v12 = 1LL;
  }

void sub_181F60CDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

size_t nw_parameters_get_hash(void *a1)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    uint64_t v46 = 0LL;
    uint64_t v47 = &v46;
    uint64_t v48 = 0x2020000000LL;
    uint64_t v49 = 0LL;
    uint64_t v39 = 0LL;
    id v40 = &v39;
    uint64_t v41 = 0x9812000000LL;
    os_log_type_t v42 = __Block_byref_object_copy__110;
    BOOL v43 = __Block_byref_object_dispose__111;
    memset(&v45, 0, sizeof(v45));
    os_log_type_t v44 = &unk_18296448D;
    CC_SHA256_Init(&v45);
    CC_SHA256_Update((CC_SHA256_CTX *)(v40 + 6), v1 + 8, 0x60u);
    CC_SHA256_Update((CC_SHA256_CTX *)(v40 + 6), (const void *)(*((void *)v1 + 13) + 8LL), 0x40u);
    CC_SHA256_Update((CC_SHA256_CTX *)(v40 + 6), (const void *)(*((void *)v1 + 13) + 72LL), 0x1Eu);
    CC_SHA256_Update((CC_SHA256_CTX *)(v40 + 6), (const void *)(*((void *)v1 + 13) + 102LL), 9u);
    BOOL v2 = (const void *)*((void *)v1 + 14);
    if (v2)
    {
      CC_LONG v3 = strlen(*((const char **)v1 + 14));
      CC_SHA256_Update((CC_SHA256_CTX *)(v40 + 6), v2, v3);
    }

    id v4 = (const void *)*((void *)v1 + 15);
    if (v4)
    {
      CC_LONG v5 = strlen(*((const char **)v1 + 15));
      CC_SHA256_Update((CC_SHA256_CTX *)(v40 + 6), v4, v5);
    }

    uint64_t v6 = *((void *)v1 + 13);
    uint64_t v7 = *(const void **)(v6 + 112);
    if (v7)
    {
      CC_LONG v8 = strlen(*(const char **)(v6 + 112));
      CC_SHA256_Update((CC_SHA256_CTX *)(v40 + 6), v7, v8);
      uint64_t v6 = *((void *)v1 + 13);
    }

    BOOL v9 = *(const void **)(v6 + 120);
    if (v9)
    {
      CC_LONG v10 = strlen(*(const char **)(v6 + 120));
      CC_SHA256_Update((CC_SHA256_CTX *)(v40 + 6), v9, v10);
      uint64_t v6 = *((void *)v1 + 13);
    }

    os_log_type_t v11 = *(const void **)(v6 + 128);
    if (v11)
    {
      CC_LONG v12 = strlen(*(const char **)(v6 + 128));
      CC_SHA256_Update((CC_SHA256_CTX *)(v40 + 6), v11, v12);
      uint64_t v6 = *((void *)v1 + 13);
    }

    uint64_t v14 = *(void *)(v6 + 136);
    os_log_type_t v13 = (const void *)(v6 + 136);
    if (v14) {
      CC_SHA256_Update((CC_SHA256_CTX *)(v40 + 6), v13, 8u);
    }
    CC_SHA256_Final(md, (CC_SHA256_CTX *)(v40 + 6));
    int8x16_t v15 = veorq_s8(*(int8x16_t *)md, v51);
    v47[3] ^= *(void *)&veor_s8(*(int8x8_t *)v15.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
    uint64_t v16 = [*((id *)v1 + 25) getHash];
    v47[3] ^= v16;
    uint64_t v17 = [*(id *)(*((void *)v1 + 13) + 160) getHash];
    v47[3] ^= v17;
    shallow_uint64_t hash = nw_interface_get_shallow_hash(*(void **)(*((void *)v1 + 13) + 168LL));
    v47[3] ^= shallow_hash;
    uint64_t hash = nw_protocol_stack_get_hash(*((void **)v1 + 19));
    v47[3] ^= hash;
    id v20 = nw_parameters_copy_path_parameters(v1, 0);
    uint64_t v21 = nw_path_parameters_get_hash(v20);
    v47[3] ^= v21;

    uint64_t v22 = (unsigned __int8 *)*((void *)v1 + 20);
    uint64_t v23 = MEMORY[0x1895F87A8];
    if (v22)
    {
      v38[0] = MEMORY[0x1895F87A8];
      v38[1] = 3221225472LL;
      v38[2] = __nw_parameters_get_hash_block_invoke;
      v38[3] = &unk_189BC50D0;
      v38[4] = &v46;
      nw_array_apply(v22, (uint64_t)v38);
    }

    id v24 = (unsigned __int8 *)*((void *)v1 + 22);
    v37[0] = v23;
    v37[1] = 3221225472LL;
    void v37[2] = __nw_parameters_get_hash_block_invoke_2;
    v37[3] = &unk_189BC50D0;
    void v37[4] = &v46;
    nw_array_apply(v24, (uint64_t)v37);
    size_t v25 = nw_proxy_config_get_hash(*((void **)v1 + 23));
    v47[3] ^= v25;
    size_t v26 = nw_proxy_config_get_hash(*((void **)v1 + 24));
    v47[3] ^= v26;
    BOOL v27 = (void *)*((void *)v1 + 16);
    if (v27)
    {
      size_t v28 = xpc_hash(v27);
      v47[3] ^= v28;
    }

    id v29 = (void *)*((void *)v1 + 17);
    if (v29)
    {
      size_t v30 = xpc_hash(v29);
      v47[3] ^= v30;
    }

    BOOL v31 = (dispatch_data_s *)*((void *)v1 + 18);
    if (v31)
    {
      applier[0] = v23;
      applier[1] = 3221225472LL;
      applier[2] = __nw_parameters_get_hash_block_invoke_3;
      applier[3] = &unk_189BB9C38;
      void applier[4] = &v39;
      dispatch_data_apply(v31, applier);
    }

    id v32 = (void *)*((void *)v1 + 27);
    if (v32)
    {
      size_t v33 = xpc_hash(v32);
      size_t v34 = v47[3] ^ v33;
      v47[3] = v34;
    }

    else
    {
      size_t v34 = v47[3];
    }

    _Block_object_dispose(&v39, 8);
    _Block_object_dispose(&v46, 8);
  }

  else
  {
    size_t v34 = 0LL;
  }

  return v34;
}

void sub_181F61158( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  id v20 = v18;

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v19 - 136), 8);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__110(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 48);
  __int128 v3 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v3 - 128), 8) = v2;
  __n128 result = *(__n128 *)(a2 + 96);
  __int128 v5 = *(_OWORD *)(a2 + 112);
  __int128 v6 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 12_Block_object_dispose((const void *)(v3 - 128), 8) = v6;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t __nw_parameters_get_hash_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) ^= nw_protocol_transform_get_hash(v4);

  return 1LL;
}

void sub_181F61210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_parameters_get_hash_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) ^= nw_proxy_config_get_hash(v4);

  return 1LL;
}

void sub_181F61264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_parameters_get_hash_block_invoke_3(uint64_t a1, int a2, int a3, void *data, CC_LONG len)
{
  return 1LL;
}

BOOL nw_parameters_get_tls13_enabled()
{
  return !networkd_settings_get_BOOL((const char *)nw_setting_tcpconn_disable_tls13);
}

BOOL nw_parameters_get_tls_experiments_enabled(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 101) & 0x40) != 0
      || networkd_settings_get_BOOL((const char *)nw_setting_tcpconn_enable_tls_experiments);
}

void nw_parameters_set_is_probe(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = 1024LL;
    if (!a2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFFFFBFFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  __int128 v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_parameters_set_is_probe";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      CC_LONG v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_parameters_set_is_probe";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      CC_LONG v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_parameters_set_is_probe";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_parameters_set_is_probe";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      CC_LONG v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_parameters_set_is_probe";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_allow_unusable_addresses(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x80000LL;
    if (!a2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFFFF7FFFFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  __int128 v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_parameters_set_allow_unusable_addresses";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      CC_LONG v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_parameters_set_allow_unusable_addresses";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      CC_LONG v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_parameters_set_allow_unusable_addresses";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_parameters_set_allow_unusable_addresses";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      CC_LONG v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_parameters_set_allow_unusable_addresses";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_prefer_no_proxy(nw_parameters_t parameters, BOOL prefer_no_proxy)
{
  BOOL v2 = prefer_no_proxy;
  uint64_t v25 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = parameters;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (v2) {
      __int16 v9 = 256;
    }
    else {
      __int16 v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFFFEFF;
    *(_WORD *)uint64_t v6 = v10 | v9;
    *(_BYTE *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }

  __nwlog_obj();
  os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v22 = "nw_parameters_set_prefer_no_proxy";
  BOOL v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_parameters_set_prefer_no_proxy";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v22 = "nw_parameters_set_prefer_no_proxy";
          __int16 v23 = 2082;
          id v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_parameters_set_prefer_no_proxy";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_parameters_set_prefer_no_proxy";
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_no_proxy_path_selection(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      __int16 v9 = 512;
    }
    else {
      __int16 v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFFFDFF;
    *(_WORD *)uint64_t v6 = v10 | v9;
    *(_BYTE *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }

  __nwlog_obj();
  os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v22 = "nw_parameters_set_no_proxy_path_selection";
  BOOL v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_parameters_set_no_proxy_path_selection";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v22 = "nw_parameters_set_no_proxy_path_selection";
          __int16 v23 = 2082;
          id v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_parameters_set_no_proxy_path_selection";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_parameters_set_no_proxy_path_selection";
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_privacy_proxy_fail_closed(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    if (a2) {
      __int16 v5 = 64;
    }
    else {
      __int16 v5 = 0;
    }
    *(_WORD *)(*((void *)v3 + 13) + 100LL) = *(_WORD *)(*((void *)v3 + 13) + 100LL) & 0xFFBF | v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_parameters_set_privacy_proxy_fail_closed";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_privacy_proxy_fail_closed";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_parameters_set_privacy_proxy_fail_closed";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_privacy_proxy_fail_closed";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_privacy_proxy_fail_closed";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_privacy_proxy_fail_closed_for_unreachable_hosts(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      __int16 v9 = 1024;
    }
    else {
      __int16 v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFFFBFF;
    *(_WORD *)uint64_t v6 = v10 | v9;
    *(_BYTE *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }

  __nwlog_obj();
  os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v22 = "nw_parameters_set_privacy_proxy_fail_closed_for_unreachable_hosts";
  BOOL v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_parameters_set_privacy_proxy_fail_closed_for_unreachable_hosts";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v22 = "nw_parameters_set_privacy_proxy_fail_closed_for_unreachable_hosts";
          __int16 v23 = 2082;
          id v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_parameters_set_privacy_proxy_fail_closed_for_unreachable_hosts";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_parameters_set_privacy_proxy_fail_closed_for_unreachable_hosts";
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_prohibit_privacy_proxy(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    if (a2) {
      __int16 v5 = 128;
    }
    else {
      __int16 v5 = 0;
    }
    *(_WORD *)(*((void *)v3 + 13) + 100LL) = *(_WORD *)(*((void *)v3 + 13) + 100LL) & 0xFF7F | v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_parameters_set_prohibit_privacy_proxy";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_prohibit_privacy_proxy";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_parameters_set_prohibit_privacy_proxy";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_prohibit_privacy_proxy";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_prohibit_privacy_proxy";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_disable_legacy_tls_versions(void *a1)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    id v3 = (id *)v1[19];
    nw_parameters_t v4 = v3;
    if (v3)
    {
      id v5 = v3[3];
      if (nw_parameters_get_tls(v2) && !nw_protocol_options_is_udp(v5))
      {
        uint64_t v6 = (void *)nw_protocol_boringssl_copy_definition();
        int v7 = nw_parameters_copy_protocol_options_for_definition(v2, v6);

        int v8 = v7;
        os_log_type_t v9 = v8;
        if (v8)
        {
          sec_protocol_options_set_min_tls_protocol_version(v8, tls_protocol_version_TLSv12);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          unsigned int v10 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v22 = "nw_parameters_disable_legacy_tls_versions";
            _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_INFO,  "%{public}s Disabling legacy TLS 1.0/1.1 for connection parameters",  buf,  0xCu);
          }
        }
      }
    }

    goto LABEL_12;
  }

  __nwlog_obj();
  os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v22 = "nw_parameters_disable_legacy_tls_versions";
  BOOL v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_parameters_disable_legacy_tls_versions";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v22 = "nw_parameters_disable_legacy_tls_versions";
          __int16 v23 = 2082;
          id v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_29;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_parameters_disable_legacy_tls_versions";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = "nw_parameters_disable_legacy_tls_versions";
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F62928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_create_data(void *a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (v3)
  {
    if (a2)
    {
      BYTE2(v19) = 0;
      LOWORD(v19) = 0;
      uint64_t necp_parameters = nw_path_create_necp_parameters(a2, 0LL, 0LL, 0LL, 0LL, v3, 0LL, 0LL, v19);
      goto LABEL_4;
    }

    __nwlog_obj();
    unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v23 = "nw_parameters_create_data";
    int v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v7, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v23 = "nw_parameters_create_data";
          _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null data_len", buf, 0xCu);
        }

void sub_181F62E30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_update_with_data(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  uint64_t v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    int v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v29 = "nw_parameters_update_with_data";
    int v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        id v29 = "nw_parameters_update_with_data";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          id v29 = "nw_parameters_update_with_data";
          __int16 v30 = 2082;
          BOOL v31 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v8) {
          goto LABEL_5;
        }
LABEL_56:
        free(v8);
        goto LABEL_5;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        id v29 = "nw_parameters_update_with_data";
        _os_log_impl(&dword_181A5C000, v9, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        id v29 = "nw_parameters_update_with_data";
        _os_log_impl( &dword_181A5C000,  v9,  v23,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181F63514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_parameters_set_requires_dnssec_validation(nw_parameters_t parameters, BOOL requires_dnssec_validation)
{
  BOOL v2 = requires_dnssec_validation;
  uint64_t v20 = *MEMORY[0x1895F89C0];
  nw_parameters_t v3 = parameters;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x40000000LL;
    if (!v2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFFBFFFFFFFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_parameters_set_requires_dnssec_validation";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_requires_dnssec_validation";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_parameters_set_requires_dnssec_validation";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_requires_dnssec_validation";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_requires_dnssec_validation";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_prohibit_encrypted_dns(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x100000000LL;
    if (!a2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFEFFFFFFFFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_parameters_set_prohibit_encrypted_dns";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_prohibit_encrypted_dns";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_parameters_set_prohibit_encrypted_dns";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_prohibit_encrypted_dns";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_prohibit_encrypted_dns";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_fail_if_svcb_received(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x400000000LL;
    if (!a2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFFBFFFFFFFFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_parameters_set_fail_if_svcb_received";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_fail_if_svcb_received";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_parameters_set_fail_if_svcb_received";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_fail_if_svcb_received";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_fail_if_svcb_received";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_include_ble(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x800000000LL;
    if (!a2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFF7FFFFFFFFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_parameters_set_include_ble";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_include_ble";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_parameters_set_include_ble";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_include_ble";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_include_ble";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_include_screen_off_devices(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x1000000000LL;
    if (!a2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFEFFFFFFFFFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_parameters_set_include_screen_off_devices";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_include_screen_off_devices";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_parameters_set_include_screen_off_devices";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_include_screen_off_devices";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_include_screen_off_devices";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_allow_internet_fallback(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_parameters_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = 0x2000000000LL;
    if (!a2) {
      uint64_t v5 = 0LL;
    }
    *((void *)v3 + 12) = *((void *)v3 + 12) & 0xFFFFFFDFFFFFFFFFLL | v5;
    goto LABEL_5;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_parameters_set_allow_internet_fallback";
  int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_allow_internet_fallback";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_parameters_set_allow_internet_fallback";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_allow_internet_fallback";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_parameters_set_allow_internet_fallback";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_parameters_get_next_hop_required_interface_type(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = *(unsigned int *)(*((void *)v1 + 13) + 92LL);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_next_hop_required_interface_type";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_next_hop_required_interface_type";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_next_hop_required_interface_type";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_next_hop_required_interface_type";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_next_hop_required_interface_type";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_parameters_has_companion_proxy_required_interface_type(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1;
    int v4 = *(_DWORD *)(v3[13] + 92LL);

    BOOL v5 = v4 != 0;
    goto LABEL_3;
  }

  __nwlog_obj();
  int v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_parameters_has_companion_proxy_required_interface_type";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_parameters_has_companion_proxy_required_interface_type";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_parameters_has_companion_proxy_required_interface_type";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_parameters_has_companion_proxy_required_interface_type";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_parameters_has_companion_proxy_required_interface_type";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_parameters_set_use_enhanced_privacy_mode(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  int v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      int v9 = 0x20000;
    }
    else {
      int v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFDFFFF;
    *(_WORD *)uint64_t v6 = v10;
    *(_BYTE *)(v6 + 2) = (v10 | v9) >> 16;
    goto LABEL_6;
  }

  __nwlog_obj();
  BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v22 = "nw_parameters_set_use_enhanced_privacy_mode";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_parameters_set_use_enhanced_privacy_mode";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v22 = "nw_parameters_set_use_enhanced_privacy_mode";
          __int16 v23 = 2082;
          os_log_type_t v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_parameters_set_use_enhanced_privacy_mode";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_parameters_set_use_enhanced_privacy_mode";
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

id nw_parameters_copy_application_service_identity()
{
  v11[3] = *MEMORY[0x1895F89C0];
  uint64_t v0 = *MEMORY[0x18960B988];
  v10[0] = *MEMORY[0x18960B998];
  v10[1] = v0;
  v11[0] = *MEMORY[0x18960B9D0];
  v11[1] = &unk_189BFD238;
  v10[2] = *MEMORY[0x18960BE68];
  v11[2] = MEMORY[0x189604A88];
  [MEMORY[0x189603F68] dictionaryWithObjects:v11 forKeys:v10 count:3];
  id v1 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1895F87A8];
  v8[1] = 3221225472LL;
  v8[2] = __nw_parameters_copy_application_service_identity_block_invoke;
  v8[3] = &unk_189BC93A0;
  int v9 = v1;
  uint64_t v2 = nw_parameters_copy_application_service_identity::once;
  id v3 = v1;
  int v4 = v3;
  if (v2 == -1)
  {
    uint64_t v5 = v3;
  }

  else
  {
    dispatch_once(&nw_parameters_copy_application_service_identity::once, v8);
    uint64_t v5 = v9;
  }

  id v6 = (id)nw_parameters_copy_application_service_identity::identity;

  return v6;
}

void __nw_parameters_copy_application_service_identity_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x1895F89C0];
  CFErrorRef error = 0LL;
  id v1 = SecKeyCreateRandomKey(*(CFDictionaryRef *)(a1 + 32), &error);
  uint64_t v2 = v1;
  if (v1) {
    BOOL v3 = error == 0LL;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    SecKeyRef v8 = SecKeyCopyPublicKey(v1);
    SelfSignedCertificate = (const void *)SecGenerateSelfSignedCertificate();
    if (v8) {
      CFRelease(v8);
    }
    if (SelfSignedCertificate)
    {
      unsigned int v10 = (__SecIdentity *)SecIdentityCreate();
      CFRelease(v2);
      CFRelease(SelfSignedCertificate);
      if (v10)
      {
        sec_identity_t v11 = sec_identity_create(v10);
        os_log_type_t v12 = (void *)nw_parameters_copy_application_service_identity::identity;
        nw_parameters_copy_application_service_identity::identity = (uint64_t)v11;

        CFRelease(v10);
        if (nw_parameters_copy_application_service_identity::identity) {
          return;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v13 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        CC_SHA256_CTX v45 = "nw_parameters_copy_application_service_identity_block_invoke";
        os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v41 = 0;
        if (!__nwlog_fault(v14, &type, &v41))
        {
LABEL_87:
          if (!v14) {
            return;
          }
          goto LABEL_88;
        }

        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v15 = (os_log_s *)(id)gLogObj;
          os_log_type_t v16 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            CC_SHA256_CTX v45 = "nw_parameters_copy_application_service_identity_block_invoke";
            _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s sec_identity_create failed", buf, 0xCu);
          }

nw_parameters_t nw_parameters_create_application_service_quic()
{
  id v0 = nw_parameters_copy_application_service_identity();
  id v1 = v0;
  if (v0) {
    nw_parameters_t application_service_quic_using_identity = nw_parameters_create_application_service_quic_using_identity(v0);
  }
  else {
    nw_parameters_t application_service_quic_using_identity = 0LL;
  }

  return application_service_quic_using_identity;
}

void sub_181F659BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_parameters_t nw_parameters_create_application_service_quic_using_identity(void *a1)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    nw_parameters_t v2 = nw_parameters_create();
    nw_parameters_set_migrating_peer_to_peer(v2);
    nw_parameters_set_use_awdl(v2, 1);
    options = nw_protocol_create_options((void *)g_udp_definition);
    nw_udp_options_set_use_quic_stats(options, 1);
    nw_udp_options_set_no_metadata(options, 1);
    if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55294);
    }
    id v4 = nw_protocol_create_options((void *)nw_protocol_copy_quic_stream_definition::quic_definition);
    uint64_t v5 = nw_quic_copy_sec_protocol_options((nw_protocol_options_t)v4);
    sec_protocol_options_add_tls_application_protocol(v5, "application-service");

    id v6 = nw_quic_stream_copy_shared_connection_options(v4);
    nw_quic_connection_set_probe_simultaneously(v6, 1);

    os_log_type_t v7 = nw_quic_copy_sec_protocol_options((nw_protocol_options_t)v4);
    sec_protocol_options_set_peer_authentication_required(v7, 1);
    id v8 = nw_quic_stream_copy_shared_connection_options(v4);
    nw_quic_connection_set_local_identity(v8, v1);
    nw_quic_connection_set_pmtud_for_non_transport(v8, 1);
    nw_quic_connection_set_migration_for_non_transport(v8, 1);
    nw_quic_connection_set_source_connection_id_length(v8, 4);
    nw_protocol_stack_t v9 = nw_parameters_copy_default_protocol_stack(v2);
    nw_protocol_stack_append_application_protocol(v9, v4);
    nw_protocol_stack_set_transport_protocol(v9, (nw_protocol_options_t)options);

    goto LABEL_7;
  }

  __nwlog_obj();
  sec_identity_t v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v22 = "nw_parameters_create_application_service_quic_using_identity";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_parameters_create_application_service_quic_using_identity";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null identity", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v22 = "nw_parameters_create_application_service_quic_using_identity";
          __int16 v23 = 2082;
          id v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null identity, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_parameters_create_application_service_quic_using_identity";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null identity, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_parameters_create_application_service_quic_using_identity";
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null identity, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F65DA0(_Unwind_Exception *a1)
{
  id v8 = v6;

  _Unwind_Resume(a1);
}

void nw_parameters_set_web_search_content(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)v3 + 13);
    int v7 = *(unsigned __int16 *)(v5 + 108);
    uint64_t v6 = v5 + 108;
    int v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2) {
      int v9 = 0x40000;
    }
    else {
      int v9 = 0;
    }
    unsigned int v10 = v8 & 0xFFFBFFFF;
    *(_WORD *)uint64_t v6 = v10;
    *(_BYTE *)(v6 + 2) = (v10 | v9) >> 16;
    goto LABEL_6;
  }

  __nwlog_obj();
  sec_identity_t v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v22 = "nw_parameters_set_web_search_content";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_parameters_set_web_search_content";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v22 = "nw_parameters_set_web_search_content";
          __int16 v23 = 2082;
          id v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_parameters_set_web_search_content";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v22 = "nw_parameters_set_web_search_content";
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

nw_parameters *nw_parameters_create_secure_http_messaging(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v166 = *MEMORY[0x1895F89C0];
  id v9 = a1;
  unsigned int v10 = a2;
  xpc_object_t v158 = a3;
  unint64_t v159 = a4;
  id v11 = a5;
  BOOL v156 = v10;
  int v157 = v9;
  nw_endpoint_t v155 = v11;
  if (!v9)
  {
    __nwlog_obj();
    BOOL v109 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    int v163 = "nw_parameters_create_secure_http_messaging";
    uint64_t v110 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v160 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v111 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v112 = type;
      if (os_log_type_enabled(v111, type))
      {
        *(_DWORD *)buf = 136446210;
        int v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl(&dword_181A5C000, v111, v112, "%{public}s called with null configure_tls", buf, 0xCu);
      }

      goto LABEL_296;
    }

    if (!v160)
    {
      __nwlog_obj();
      BOOL v111 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v146 = type;
      if (os_log_type_enabled(v111, type))
      {
        *(_DWORD *)buf = 136446210;
        int v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl( &dword_181A5C000,  v111,  v146,  "%{public}s called with null configure_tls, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_296;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v128 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v129 = type;
    BOOL v130 = os_log_type_enabled(v128, type);
    if (!backtrace_string)
    {
      if (v130)
      {
        *(_DWORD *)buf = 136446210;
        int v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl(&dword_181A5C000, v128, v129, "%{public}s called with null configure_tls, no backtrace", buf, 0xCu);
      }

      goto LABEL_314;
    }

    if (v130)
    {
      *(_DWORD *)buf = 136446466;
      int v163 = "nw_parameters_create_secure_http_messaging";
      __int16 v164 = 2082;
      unint64_t v165 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v128,  v129,  "%{public}s called with null configure_tls, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_267;
  }

  if (!v10)
  {
    __nwlog_obj();
    BOOL v113 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    int v163 = "nw_parameters_create_secure_http_messaging";
    uint64_t v110 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v160 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v111 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v114 = type;
      if (os_log_type_enabled(v111, type))
      {
        *(_DWORD *)buf = 136446210;
        int v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl(&dword_181A5C000, v111, v114, "%{public}s called with null configure_quic_stream", buf, 0xCu);
      }

      goto LABEL_296;
    }

    if (!v160)
    {
      __nwlog_obj();
      BOOL v111 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v147 = type;
      if (os_log_type_enabled(v111, type))
      {
        *(_DWORD *)buf = 136446210;
        int v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl( &dword_181A5C000,  v111,  v147,  "%{public}s called with null configure_quic_stream, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_296;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v128 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v131 = type;
    BOOL v132 = os_log_type_enabled(v128, type);
    if (!backtrace_string)
    {
      if (v132)
      {
        *(_DWORD *)buf = 136446210;
        int v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl( &dword_181A5C000,  v128,  v131,  "%{public}s called with null configure_quic_stream, no backtrace",  buf,  0xCu);
      }

      goto LABEL_314;
    }

    if (v132)
    {
      *(_DWORD *)buf = 136446466;
      int v163 = "nw_parameters_create_secure_http_messaging";
      __int16 v164 = 2082;
      unint64_t v165 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v128,  v131,  "%{public}s called with null configure_quic_stream, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_267;
  }

  if (!v158)
  {
    __nwlog_obj();
    BOOL v115 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    int v163 = "nw_parameters_create_secure_http_messaging";
    uint64_t v110 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v160 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v111 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v116 = type;
      if (os_log_type_enabled(v111, type))
      {
        *(_DWORD *)buf = 136446210;
        int v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl(&dword_181A5C000, v111, v116, "%{public}s called with null configure_quic_connection", buf, 0xCu);
      }

      goto LABEL_296;
    }

    if (!v160)
    {
      __nwlog_obj();
      BOOL v111 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v148 = type;
      if (os_log_type_enabled(v111, type))
      {
        *(_DWORD *)buf = 136446210;
        int v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl( &dword_181A5C000,  v111,  v148,  "%{public}s called with null configure_quic_connection, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_296;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v128 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v133 = type;
    BOOL v134 = os_log_type_enabled(v128, type);
    if (!backtrace_string)
    {
      if (v134)
      {
        *(_DWORD *)buf = 136446210;
        int v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl( &dword_181A5C000,  v128,  v133,  "%{public}s called with null configure_quic_connection, no backtrace",  buf,  0xCu);
      }

      goto LABEL_314;
    }

    if (v134)
    {
      *(_DWORD *)buf = 136446466;
      int v163 = "nw_parameters_create_secure_http_messaging";
      __int16 v164 = 2082;
      unint64_t v165 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v128,  v133,  "%{public}s called with null configure_quic_connection, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_267;
  }

  if (!v159)
  {
    __nwlog_obj();
    BOOL v117 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    int v163 = "nw_parameters_create_secure_http_messaging";
    uint64_t v110 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v160 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v111 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v118 = type;
      if (os_log_type_enabled(v111, type))
      {
        *(_DWORD *)buf = 136446210;
        int v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl(&dword_181A5C000, v111, v118, "%{public}s called with null configure_tcp", buf, 0xCu);
      }

      goto LABEL_296;
    }

    if (!v160)
    {
      __nwlog_obj();
      BOOL v111 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v149 = type;
      if (os_log_type_enabled(v111, type))
      {
        *(_DWORD *)buf = 136446210;
        int v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl( &dword_181A5C000,  v111,  v149,  "%{public}s called with null configure_tcp, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_296;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v128 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v135 = type;
    BOOL v136 = os_log_type_enabled(v128, type);
    if (!backtrace_string)
    {
      if (v136)
      {
        *(_DWORD *)buf = 136446210;
        int v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl(&dword_181A5C000, v128, v135, "%{public}s called with null configure_tcp, no backtrace", buf, 0xCu);
      }

      goto LABEL_314;
    }

    if (v136)
    {
      *(_DWORD *)buf = 136446466;
      int v163 = "nw_parameters_create_secure_http_messaging";
      __int16 v164 = 2082;
      unint64_t v165 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v128,  v135,  "%{public}s called with null configure_tcp, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_267;
  }

  os_log_type_t v12 = (void (**)(id, NWConcrete_nw_protocol_options *))v11;
  if (!v11)
  {
    __nwlog_obj();
    BOOL v119 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    int v163 = "nw_parameters_create_secure_http_messaging";
    uint64_t v110 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v160 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v111 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v120 = type;
      if (os_log_type_enabled(v111, type))
      {
        *(_DWORD *)buf = 136446210;
        int v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl(&dword_181A5C000, v111, v120, "%{public}s called with null configure_http_messaging", buf, 0xCu);
      }

      goto LABEL_296;
    }

    if (!v160)
    {
      __nwlog_obj();
      BOOL v111 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v150 = type;
      if (os_log_type_enabled(v111, type))
      {
        *(_DWORD *)buf = 136446210;
        int v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl( &dword_181A5C000,  v111,  v150,  "%{public}s called with null configure_http_messaging, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_296;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v128 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v137 = type;
    BOOL v138 = os_log_type_enabled(v128, type);
    if (!backtrace_string)
    {
      if (v138)
      {
        *(_DWORD *)buf = 136446210;
        int v163 = "nw_parameters_create_secure_http_messaging";
        _os_log_impl( &dword_181A5C000,  v128,  v137,  "%{public}s called with null configure_http_messaging, no backtrace",  buf,  0xCu);
      }

      goto LABEL_314;
    }

    if (v138)
    {
      *(_DWORD *)buf = 136446466;
      int v163 = "nw_parameters_create_secure_http_messaging";
      __int16 v164 = 2082;
      unint64_t v165 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v128,  v137,  "%{public}s called with null configure_http_messaging, dumping backtrace:%{public}s",  buf,  0x16u);
    }

void sub_181F68570( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20, void *a21)
{
  _Unwind_Resume(a1);
}

void sub_181F6864C()
{
}

void sub_181F68654()
{
}

nw_parameters *nw_parameters_create_webtransport_http(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v61 = *MEMORY[0x1895F89C0];
  int v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  id v11 = v10;
  if (!v8)
  {
    __nwlog_obj();
    id v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v58 = "nw_parameters_create_webtransport_http";
    char v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        char v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_181A5C000, v20, v21, "%{public}s called with null configure_tls", buf, 0xCu);
      }

      goto LABEL_107;
    }

    if (!v55)
    {
      __nwlog_obj();
      id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v48 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        char v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl( &dword_181A5C000,  v20,  v48,  "%{public}s called with null configure_tls, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_107;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v35 = type;
    BOOL v36 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        char v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_181A5C000, v20, v35, "%{public}s called with null configure_tls, no backtrace", buf, 0xCu);
      }

      goto LABEL_107;
    }

    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      char v58 = "nw_parameters_create_webtransport_http";
      __int16 v59 = 2082;
      uint64_t v60 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v20,  v35,  "%{public}s called with null configure_tls, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_63;
  }

  if (!v9)
  {
    __nwlog_obj();
    id v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v58 = "nw_parameters_create_webtransport_http";
    char v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        char v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_181A5C000, v20, v23, "%{public}s called with null configure_quic", buf, 0xCu);
      }

      goto LABEL_107;
    }

    if (!v55)
    {
      __nwlog_obj();
      id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v49 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        char v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl( &dword_181A5C000,  v20,  v49,  "%{public}s called with null configure_quic, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_107;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v37 = type;
    BOOL v38 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        char v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_181A5C000, v20, v37, "%{public}s called with null configure_quic, no backtrace", buf, 0xCu);
      }

      goto LABEL_107;
    }

    if (v38)
    {
      *(_DWORD *)buf = 136446466;
      char v58 = "nw_parameters_create_webtransport_http";
      __int16 v59 = 2082;
      uint64_t v60 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v20,  v37,  "%{public}s called with null configure_quic, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_63;
  }

  if (!v10)
  {
    __nwlog_obj();
    id v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v58 = "nw_parameters_create_webtransport_http";
    char v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        char v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_181A5C000, v20, v25, "%{public}s called with null configure_tcp", buf, 0xCu);
      }

      goto LABEL_107;
    }

    if (!v55)
    {
      __nwlog_obj();
      id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v50 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        char v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl( &dword_181A5C000,  v20,  v50,  "%{public}s called with null configure_tcp, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_107;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v39 = type;
    BOOL v40 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (v40)
      {
        *(_DWORD *)buf = 136446210;
        char v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_181A5C000, v20, v39, "%{public}s called with null configure_tcp, no backtrace", buf, 0xCu);
      }

      goto LABEL_107;
    }

    if (v40)
    {
      *(_DWORD *)buf = 136446466;
      char v58 = "nw_parameters_create_webtransport_http";
      __int16 v59 = 2082;
      uint64_t v60 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v20,  v39,  "%{public}s called with null configure_tcp, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_63;
  }

  if (!v7)
  {
    __nwlog_obj();
    os_log_type_t v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v58 = "nw_parameters_create_webtransport_http";
    char v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        char v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl(&dword_181A5C000, v20, v27, "%{public}s called with null configure_webtransport", buf, 0xCu);
      }

      goto LABEL_107;
    }

    if (!v55)
    {
      __nwlog_obj();
      id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v51 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        char v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl( &dword_181A5C000,  v20,  v51,  "%{public}s called with null configure_webtransport, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_107;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v41 = type;
    BOOL v42 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (v42)
      {
        *(_DWORD *)buf = 136446210;
        char v58 = "nw_parameters_create_webtransport_http";
        _os_log_impl( &dword_181A5C000,  v20,  v41,  "%{public}s called with null configure_webtransport, no backtrace",  buf,  0xCu);
      }

      goto LABEL_107;
    }

    if (v42)
    {
      *(_DWORD *)buf = 136446466;
      char v58 = "nw_parameters_create_webtransport_http";
      __int16 v59 = 2082;
      uint64_t v60 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v20,  v41,  "%{public}s called with null configure_webtransport, dumping backtrace:%{public}s",  buf,  0x16u);
    }

void sub_181F693E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_parameters_create_webtransport_http_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  nw_http_messaging_options_set_http1_options(v2, 0LL);
  nw_http2_set_local_max_webtransport_sessions(v2, 1LL);
  nw_http2_set_capsule_handling_disabled(v2, 1LL);
  nw_http3_set_0rtt_enabled(v2, 0LL);
}

void sub_181F69484( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

BOOL nw_parameters_enumerate_transformed_parameters(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (v3)
  {
    if (v4)
    {
      uint64_t v6 = (unsigned __int8 *)v3[20];
      v22[0] = MEMORY[0x1895F87A8];
      v22[1] = 3221225472LL;
      void v22[2] = __nw_parameters_enumerate_transformed_parameters_block_invoke;
      v22[3] = &unk_189BC5258;
      os_log_type_t v23 = v3;
      id v24 = v5;
      BOOL v7 = nw_array_apply(v6, (uint64_t)v22);

      goto LABEL_4;
    }

    __nwlog_obj();
    nw_parameters_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_parameters_enumerate_transformed_parameters";
    id v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v26 = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v10, &v26, &v25))
    {
      if (v26 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = v26;
        if (os_log_type_enabled(v11, v26))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v28 = "nw_parameters_enumerate_transformed_parameters";
          _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null enumerator", buf, 0xCu);
        }

uint64_t __nw_parameters_enumerate_transformed_parameters_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v60 = *MEMORY[0x1895F89C0];
  id v4 = a3;
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = v5;
  if (v5)
  {
    BOOL v7 = (id *)v5;
    BOOL v8 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v7,  0,  0);

    id v9 = (void **)*(id *)(v8 + 152);
    if (v9)
    {
      id v10 = v7[19];
      id v11 = v10;
      if (v10)
      {
        *(void *)buf = MEMORY[0x1895F87A8];
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&buf[16] = ___ZL42nw_parameters_copy_with_protocol_instancesP24NWConcrete_nw_parameters_block_invoke;
        char v58 = &unk_189BB8DE0;
        os_log_type_t v12 = (void **)v10;
        __int16 v59 = v12;
        nw_protocol_stack_iterate_application_protocols_with_index(v9, buf);
        nw_parameters_t v13 = v9[3];
        if (v13)
        {
          os_log_type_t v14 = v12[3];
          if (v14)
          {
            char v15 = v14;
            os_log_type_t v16 = v13;
            snprintf(v16 + 48, 0x54uLL, "%s", v15 + 48);
            *((_WORD *)v16 + 6_Block_object_dispose((const void *)(v3 - 128), 8) = *((_WORD *)v15 + 68);

            uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(v12[3]);
            nw_protocol_options_set_instance(v9[3], protocol_handle);
          }
        }

        os_log_type_t v18 = v9[4];
        if (v18)
        {
          BOOL v19 = v12[4];
          if (v19)
          {
            os_log_type_t v20 = v19;
            os_log_type_t v21 = v18;
            snprintf(v21 + 48, 0x54uLL, "%s", v20 + 48);
            *((_WORD *)v21 + 6_Block_object_dispose((const void *)(v3 - 128), 8) = *((_WORD *)v20 + 68);

            uint64_t v22 = nw_protocol_options_get_protocol_handle(v12[4]);
            nw_protocol_options_set_instance(v9[4], v22);
          }
        }

        os_log_type_t v23 = v9[6];
        if (v23)
        {
          id v24 = v12[6];
          if (v24)
          {
            char v25 = v24;
            os_log_type_t v26 = v23;
            snprintf(v26 + 48, 0x54uLL, "%s", v25 + 48);
            *((_WORD *)v26 + 6_Block_object_dispose((const void *)(v3 - 128), 8) = *((_WORD *)v25 + 68);

            uint64_t v27 = nw_protocol_options_get_protocol_handle(v12[6]);
            nw_protocol_options_set_instance(v9[6], v27);
          }
        }

        os_log_type_t v28 = (id *)(id)v8;

LABEL_14:
LABEL_15:

        goto LABEL_16;
      }

      __nwlog_obj();
      os_log_type_t v39 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_parameters_copy_with_protocol_instances";
      BOOL v40 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v55 = 0;
      if (__nwlog_fault(v40, &type, &v55))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v42 = type;
          if (os_log_type_enabled(v41, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_parameters_copy_with_protocol_instances";
            _os_log_impl(&dword_181A5C000, v41, v42, "%{public}s called with null existing_stack", buf, 0xCu);
          }
        }

        else if (v55)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v50 = type;
          BOOL v51 = os_log_type_enabled(v41, type);
          if (backtrace_string)
          {
            if (v51)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_parameters_copy_with_protocol_instances";
              *(_WORD *)&_BYTE buf[12] = 2082;
              *(void *)&buf[14] = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v41,  v50,  "%{public}s called with null existing_stack, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(backtrace_string);
            goto LABEL_71;
          }

          if (v51)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_parameters_copy_with_protocol_instances";
            _os_log_impl( &dword_181A5C000,  v41,  v50,  "%{public}s called with null existing_stack, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          os_log_type_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v54 = type;
          if (os_log_type_enabled(v41, type))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_parameters_copy_with_protocol_instances";
            _os_log_impl( &dword_181A5C000,  v41,  v54,  "%{public}s called with null existing_stack, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

void sub_181F6A260(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL42nw_parameters_copy_with_protocol_instancesP24NWConcrete_nw_parameters_block_invoke( uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (void *)nw_protocol_stack_copy_application_protocol_at_index(*(NWConcrete_nw_protocol_stack **)(a1 + 32), a2);
  BOOL v7 = v6;
  if (v5 && v6)
  {
    BOOL v8 = v6;
    id v9 = (char *)v5;
    snprintf(v9 + 48, 0x54uLL, "%s", v8 + 48);
    *((_WORD *)v9 + 6_Block_object_dispose((const void *)(v3 - 128), 8) = *((_WORD *)v8 + 68);

    id v10 = v8;
    uint64_t v11 = *((void *)v10 + 2);

    os_log_type_t v12 = v9;
    *((void *)v12 + 2) = v11;
  }

  return 1LL;
}

BOOL nw_parameters_are_equivalent_for_path_evaluation(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
      id v6 = nw_parameters_copy_path_parameters(v3, 0);
      id v7 = nw_parameters_copy_path_parameters(v5, 0);
      BOOL v8 = nw_path_parameters_are_equal(v6, v7, 1u);

      goto LABEL_4;
    }

    __nwlog_obj();
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v26 = "nw_parameters_are_equivalent_for_path_evaluation";
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v11, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v26 = "nw_parameters_are_equivalent_for_path_evaluation";
          _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null right", buf, 0xCu);
        }

void sub_181F6A81C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_next_hop_required_interface_subtype(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = *(unsigned int *)(*((void *)v1 + 13) + 96LL);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_parameters_get_next_hop_required_interface_subtype";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_next_hop_required_interface_subtype";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_parameters_get_next_hop_required_interface_subtype";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_next_hop_required_interface_subtype";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_parameters_get_next_hop_required_interface_subtype";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t NWPBAgentReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x189611CF0];
  uint64_t v4 = (int)*MEMORY[0x189611CF0];
  unint64_t v5 = *(void *)(a2 + v4);
  id v6 = (int *)MEMORY[0x189611CE8];
  unint64_t v7 = *(void *)(a2 + (int)*MEMORY[0x189611CE8]);
  os_log_type_t v8 = (int *)MEMORY[0x189611CE0];
  if (v5 < v7)
  {
    os_log_type_t v10 = (int *)MEMORY[0x189611CD8];
    BOOL v11 = (objc_class *)&OBJC_IVAR___NWConcrete_nw_application_id_is_bundle_id_external;
    os_log_type_t v12 = &OBJC_IVAR___NWConcrete_nw_browse_result_txt_record;
    char v13 = &OBJC_IVAR___NWConcrete_nw_browse_result_txt_record;
    while (1)
    {
      __int16 v17 = (_BYTE *)(a2 + *v8);
      if (*v17) {
        return *(_BYTE *)(a2 + *v8) == 0;
      }
      if (v5 >= v7) {
        break;
      }
      char v18 = *(_BYTE *)(*(void *)(a2 + *v10) + v5);
      *(void *)(a2 + (int)v4) = v5 + 1;
      unint64_t v19 = v18 & 0x7F;
      if ((v18 & 0x80) == 0) {
        goto LABEL_41;
      }
      uint64_t v20 = *v3;
      unint64_t v21 = *(void *)(a2 + v20);
      if (v21 == -1LL || v21 >= *(void *)(a2 + *v6)) {
        goto LABEL_39;
      }
      unint64_t v22 = v21 + 1;
      int v23 = *(char *)(*(void *)(a2 + *v10) + v21);
      *(void *)(a2 + v20) = v22;
      v19 |= (unint64_t)(v23 & 0x7F) << 7;
      if ((v23 & 0x80000000) == 0) {
        goto LABEL_41;
      }
      uint64_t v24 = *v3;
      unint64_t v25 = *(void *)(a2 + v24);
      if (v25 == -1LL || v25 >= *(void *)(a2 + *v6)) {
        goto LABEL_39;
      }
      unint64_t v26 = v25 + 1;
      int v27 = *(char *)(*(void *)(a2 + *v10) + v25);
      *(void *)(a2 + v24) = v26;
      v19 |= (unint64_t)(v27 & 0x7F) << 14;
      if ((v27 & 0x80000000) == 0) {
        goto LABEL_41;
      }
      uint64_t v28 = *v3;
      unint64_t v29 = *(void *)(a2 + v28);
      if (v29 == -1LL || v29 >= *(void *)(a2 + *v6)) {
        goto LABEL_39;
      }
      unint64_t v30 = v29 + 1;
      int v31 = *(char *)(*(void *)(a2 + *v10) + v29);
      *(void *)(a2 + v2_Block_object_dispose((const void *)(v3 - 128), 8) = v30;
      v19 |= (unint64_t)(v31 & 0x7F) << 21;
      if ((v31 & 0x80000000) == 0) {
        goto LABEL_41;
      }
      uint64_t v32 = *v3;
      unint64_t v33 = *(void *)(a2 + v32);
      if (v33 == -1LL || v33 >= *(void *)(a2 + *v6)) {
        goto LABEL_39;
      }
      unint64_t v34 = v33 + 1;
      int v35 = *(char *)(*(void *)(a2 + *v10) + v33);
      *(void *)(a2 + v32) = v34;
      v19 |= (unint64_t)(v35 & 0x7F) << 28;
      if ((v35 & 0x80000000) == 0) {
        goto LABEL_41;
      }
      uint64_t v36 = *v3;
      unint64_t v37 = *(void *)(a2 + v36);
      if (v37 == -1LL || v37 >= *(void *)(a2 + *v6))
      {
LABEL_39:
        __int16 v17 = (_BYTE *)(a2 + *v8);
        goto LABEL_40;
      }

      unint64_t v38 = v37 + 1;
      int v39 = *(char *)(*(void *)(a2 + *v10) + v37);
      *(void *)(a2 + v36) = v38;
      if (v39 < 0)
      {
        uint64_t v40 = *v3;
        unint64_t v41 = *(void *)(a2 + v40);
        if (v41 == -1LL || v41 >= *(void *)(a2 + *v6)) {
          goto LABEL_39;
        }
        unint64_t v42 = v41 + 1;
        int v43 = *(char *)(*(void *)(a2 + *v10) + v41);
        *(void *)(a2 + v40) = v42;
        if (v43 < 0)
        {
          uint64_t v44 = *v3;
          unint64_t v45 = *(void *)(a2 + v44);
          if (v45 == -1LL || v45 >= *(void *)(a2 + *v6)) {
            goto LABEL_39;
          }
          unint64_t v46 = v45 + 1;
          int v47 = *(char *)(*(void *)(a2 + *v10) + v45);
          *(void *)(a2 + v44) = v46;
          if (v47 < 0)
          {
            uint64_t v48 = *v3;
            unint64_t v49 = *(void *)(a2 + v48);
            if (v49 == -1LL || v49 >= *(void *)(a2 + *v6)) {
              goto LABEL_39;
            }
            unint64_t v50 = v49 + 1;
            int v51 = *(char *)(*(void *)(a2 + *v10) + v49);
            *(void *)(a2 + v4_Block_object_dispose((const void *)(v3 - 128), 8) = v50;
            if (v51 < 0)
            {
              uint64_t v52 = *v3;
              unint64_t v53 = *(void *)(a2 + v52);
              if (v53 == -1LL || v53 >= *(void *)(a2 + *v6)) {
                goto LABEL_39;
              }
              unint64_t v54 = v53 + 1;
              int v55 = *(char *)(*(void *)(a2 + *v10) + v53);
              *(void *)(a2 + v52) = v54;
              if (v55 < 0)
              {
                unint64_t v19 = 0LL;
                int v56 = *(unsigned __int8 *)(a2 + *v8);
                goto LABEL_43;
              }
            }
          }
        }
      }

BOOL NWPBAgentClassReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x189611CF0];
  uint64_t v4 = (int)*MEMORY[0x189611CF0];
  unint64_t v5 = *(void *)(a2 + v4);
  id v6 = (int *)MEMORY[0x189611CE8];
  unint64_t v7 = *(void *)(a2 + (int)*MEMORY[0x189611CE8]);
  os_log_type_t v8 = (int *)MEMORY[0x189611CE0];
  if (v5 < v7)
  {
    os_log_type_t v10 = (int *)MEMORY[0x189611CD8];
    while (1)
    {
      uint64_t v14 = (_BYTE *)(a2 + *v8);
      if (*v14) {
        return *(_BYTE *)(a2 + *v8) == 0;
      }
      if (v5 >= v7) {
        break;
      }
      char v15 = *(_BYTE *)(*(void *)(a2 + *v10) + v5);
      *(void *)(a2 + (int)v4) = v5 + 1;
      unint64_t v16 = v15 & 0x7F;
      if ((v15 & 0x80) == 0) {
        goto LABEL_40;
      }
      uint64_t v17 = *v3;
      unint64_t v18 = *(void *)(a2 + v17);
      if (v18 == -1LL || v18 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v19 = v18 + 1;
      int v20 = *(char *)(*(void *)(a2 + *v10) + v18);
      *(void *)(a2 + v17) = v19;
      v16 |= (unint64_t)(v20 & 0x7F) << 7;
      if ((v20 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v21 = *v3;
      unint64_t v22 = *(void *)(a2 + v21);
      if (v22 == -1LL || v22 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v23 = v22 + 1;
      int v24 = *(char *)(*(void *)(a2 + *v10) + v22);
      *(void *)(a2 + v21) = v23;
      v16 |= (unint64_t)(v24 & 0x7F) << 14;
      if ((v24 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v25 = *v3;
      unint64_t v26 = *(void *)(a2 + v25);
      if (v26 == -1LL || v26 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v27 = v26 + 1;
      int v28 = *(char *)(*(void *)(a2 + *v10) + v26);
      *(void *)(a2 + v25) = v27;
      v16 |= (unint64_t)(v28 & 0x7F) << 21;
      if ((v28 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v29 = *v3;
      unint64_t v30 = *(void *)(a2 + v29);
      if (v30 == -1LL || v30 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v31 = v30 + 1;
      int v32 = *(char *)(*(void *)(a2 + *v10) + v30);
      *(void *)(a2 + v29) = v31;
      v16 |= (unint64_t)(v32 & 0x7F) << 28;
      if ((v32 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v33 = *v3;
      unint64_t v34 = *(void *)(a2 + v33);
      if (v34 == -1LL || v34 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v35 = v34 + 1;
      int v36 = *(char *)(*(void *)(a2 + *v10) + v34);
      *(void *)(a2 + v33) = v35;
      if ((v36 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v37 = *v3;
      unint64_t v38 = *(void *)(a2 + v37);
      if (v38 == -1LL || v38 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v39 = v38 + 1;
      int v40 = *(char *)(*(void *)(a2 + *v10) + v38);
      *(void *)(a2 + v37) = v39;
      if ((v40 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v41 = *v3;
      unint64_t v42 = *(void *)(a2 + v41);
      if (v42 == -1LL || v42 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v43 = v42 + 1;
      int v44 = *(char *)(*(void *)(a2 + *v10) + v42);
      *(void *)(a2 + v41) = v43;
      if ((v44 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v45 = *v3;
      unint64_t v46 = *(void *)(a2 + v45);
      if (v46 == -1LL || v46 >= *(void *)(a2 + *v6)) {
        goto LABEL_38;
      }
      unint64_t v47 = v46 + 1;
      int v48 = *(char *)(*(void *)(a2 + *v10) + v46);
      *(void *)(a2 + v45) = v47;
      if ((v48 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      uint64_t v49 = *v3;
      unint64_t v50 = *(void *)(a2 + v49);
      if (v50 == -1LL || v50 >= *(void *)(a2 + *v6))
      {
LABEL_38:
        uint64_t v14 = (_BYTE *)(a2 + *v8);
        goto LABEL_39;
      }

      unint64_t v51 = v50 + 1;
      int v52 = *(char *)(*(void *)(a2 + *v10) + v50);
      *(void *)(a2 + v49) = v51;
      if (v52 < 0)
      {
        unint64_t v16 = 0LL;
        int v53 = *(unsigned __int8 *)(a2 + *v8);
        goto LABEL_42;
      }

BOOL nw_protocol_http_client_bottom_create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_create";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v10, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v11 = (os_log_s *)__nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_create";
          char v13 = "%{public}s called with null parameters";
LABEL_40:
          _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
        }
      }

      else if (v22)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v11 = (os_log_s *)__nwlog_obj();
        os_log_type_t v12 = type;
        BOOL v20 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_create";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_41;
        }

        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_create";
          char v13 = "%{public}s called with null parameters, no backtrace";
          goto LABEL_40;
        }
      }

      else
      {
        uint64_t v11 = (os_log_s *)__nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_create";
          char v13 = "%{public}s called with null parameters, backtrace limit exceeded";
          goto LABEL_40;
        }
      }
    }

uint64_t __nw_protocol_http_client_bottom_create_block_invoke(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0LL;
  }
  return *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
}

void ___ZL51nw_protocol_http_client_bottom_get_listen_callbacksv_block_invoke()
{
  nw_protocol_http_client_bottom_get_listen_callbacks(void)::listen_protocol_callbacks = (uint64_t)nw_protocol_http_client_bottom_listen_protocol_new_flow;
  unk_18C593420 = nw_protocol_http_client_bottom_listen_protocol_disconnected;
}

uint64_t nw_protocol_http_client_bottom_listen_protocol_new_flow( nw_listen_protocol *a1, nw_endpoint *a2, nw_parameters *a3)
{
  return 0LL;
}

void nw_protocol_http_client_bottom_listen_protocol_disconnected(nw_listen_protocol *a1, nw_protocol *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v18 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v4 = (os_log_s *)__nwlog_obj();
        os_log_type_t v5 = type;
        BOOL v11 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            unint64_t v18 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
            __int16 v19 = 2082;
            BOOL v20 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null listener, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
        }

        else if (v11)
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v18 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
          id v6 = "%{public}s called with null listener, no backtrace";
          goto LABEL_23;
        }
      }

      else
      {
        uint64_t v4 = (os_log_s *)__nwlog_obj();
        os_log_type_t v5 = type;
        if (os_log_type_enabled(v4, type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v18 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
          id v6 = "%{public}s called with null listener, backtrace limit exceeded";
          goto LABEL_23;
        }
      }

      goto LABEL_24;
    }

    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_24;
    }
    *(_DWORD *)buf = 136446210;
    unint64_t v18 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
    id v6 = "%{public}s called with null listener";
LABEL_23:
    _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
    goto LABEL_24;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v18 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (v15)
      {
        char v7 = (char *)__nw_create_backtrace_string();
        uint64_t v4 = (os_log_s *)__nwlog_obj();
        os_log_type_t v5 = type;
        BOOL v12 = os_log_type_enabled(v4, type);
        if (v7)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            unint64_t v18 = "nw_protocol_http_client_bottom_listen_protocol_disconnected";
            __int16 v19 = 2082;
            BOOL v20 = v7;
            id v9 = "%{public}s called with null existing_protocol, dumping backtrace:%{public}s";
            goto LABEL_16;
          }

void nw_protocol_http_client_bottom_teardown(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v14 = "nw_protocol_http_client_bottom_teardown";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_protocol_http_client_bottom_teardown";
      id v6 = "%{public}s called with null protocol";
    }

    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v14 = "nw_protocol_http_client_bottom_teardown";
          __int16 v15 = 2082;
          unint64_t v16 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v3) {
          return;
        }
LABEL_39:
        free(v3);
        return;
      }

      if (!v8) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_protocol_http_client_bottom_teardown";
      id v6 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_protocol_http_client_bottom_teardown";
      id v6 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

void nw_http_client_bottom_destroy(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if ((*(_BYTE *)(a1 + 294) & 4) == 0)
  {
    if (gLogDatapath)
    {
      BOOL v8 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        int v9 = 136446722;
        BOOL v10 = "nw_http_client_bottom_destroy";
        __int16 v11 = 2082;
        uint64_t v12 = a1 + 208;
        __int16 v13 = 2080;
        uint64_t v14 = " ";
        _os_log_impl(&dword_181A5C000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", (uint8_t *)&v9, 0x20u);
      }
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 176) + 16LL))();
  uint64_t v2 = *(const void **)(a1 + 176);
  if (v2)
  {
    _Block_release(v2);
    *(void *)(a1 + 176) = 0LL;
  }

  uint64_t v3 = *(void **)(a1 + 184);
  if (v3)
  {
    *(void *)(a1 + 192) = v3;
    operator delete(v3);
  }

  if ((*(_BYTE *)(a1 + 168) & 1) != 0)
  {
    uint64_t v4 = *(void **)(a1 + 160);
    if (v4) {
      os_release(v4);
    }
  }

  *(void *)(a1 + 160) = 0LL;
  if ((*(_BYTE *)(a1 + 152) & 1) != 0)
  {
    os_log_type_t v5 = *(void **)(a1 + 144);
    if (v5) {
      os_release(v5);
    }
  }

  *(void *)(a1 + 144) = 0LL;
  if ((*(_BYTE *)(a1 + 128) & 1) != 0)
  {
    id v6 = *(void **)(a1 + 120);
    if (v6) {
      os_release(v6);
    }
  }

  *(void *)(a1 + 120) = 0LL;
  if ((*(_BYTE *)(a1 + 112) & 1) != 0)
  {
    char v7 = *(void **)(a1 + 104);
    if (v7) {
      os_release(v7);
    }
  }

  free((void *)a1);
}

void ___ZL44nw_protocol_http_client_bottom_get_callbacksv_block_invoke()
{
  qword_18C593210 = (uint64_t)nw_protocol_common_get_input_frames;
  unk_18C593218 = nw_protocol_common_get_output_frames;
  qword_18C593200 = (uint64_t)nw_protocol_common_input_available;
  unk_18C593208 = nw_protocol_common_output_available;
  qword_18C593280 = (uint64_t)nw_protocol_common_output_finished;
  unk_18C593288 = nw_protocol_common_get_output_local_endpoint;
  qword_18C5932C0 = (uint64_t)nw_protocol_common_reset;
  unk_18C5932C8 = nw_protocol_common_input_flush;
  qword_18C5932B8 = (uint64_t)nw_protocol_common_get_message_properties;
  qword_18C593270 = (uint64_t)nw_protocol_common_supports_external_data;
  unk_18C593278 = nw_protocol_common_input_finished;
  qword_18C593290 = (uint64_t)nw_protocol_common_get_output_interface;
  qword_18C593298 = (uint64_t)nw_protocol_common_waiting_for_output;
  unk_18C5932A0 = nw_protocol_common_copy_info;
  qword_18C593250 = (uint64_t)nw_protocol_common_register_notification;
  unk_18C593258 = nw_protocol_common_unregister_notification;
  qword_18C593260 = (uint64_t)nw_protocol_common_notify;
  unk_18C593268 = nw_protocol_common_updated_path;
  qword_18C593220 = (uint64_t)nw_protocol_common_finalize_output_frames;
  unk_18C593228 = nw_protocol_common_link_state;
  nw_protocol_http_client_bottom_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_http_client_bottom_add_input_handler;
  *(void *)algn_18C5931C8 = nw_protocol_http_client_bottom_remove_input_handler;
  qword_18C593230 = (uint64_t)nw_protocol_http_client_bottom_get_parameters;
  unk_18C593238 = nw_protocol_common_get_path;
  qword_18C593240 = (uint64_t)nw_protocol_common_get_local_endpoint;
  unk_18C593248 = nw_protocol_http_client_bottom_get_remote_endpoint;
  qword_18C5931D0 = (uint64_t)nw_protocol_http_client_bottom_replace_input_handler;
  unk_18C5931D8 = nw_protocol_http_client_bottom_connect;
  qword_18C5931E0 = (uint64_t)nw_protocol_http_client_bottom_disconnect;
  unk_18C5931E8 = nw_protocol_http_client_bottom_connected;
  qword_18C5931F0 = (uint64_t)nw_protocol_http_client_bottom_disconnected;
  unk_18C5931F8 = nw_protocol_http_client_bottom_error;
}

uint64_t nw_protocol_http_client_bottom_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v54 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unint64_t v50 = 136446210;
    *(void *)&void v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
    unint64_t v30 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    char v41 = 0;
    if (buf[0] != 17)
    {
      if (!v41)
      {
        unint64_t v31 = (os_log_s *)__nwlog_obj();
        os_log_type_t v32 = buf[0];
        if (os_log_type_enabled(v31, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)unint64_t v50 = 136446210;
          *(void *)&void v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
          uint64_t v33 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_102;
        }

        goto LABEL_103;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v31 = (os_log_s *)__nwlog_obj();
      os_log_type_t v32 = buf[0];
      BOOL v35 = os_log_type_enabled(v31, (os_log_type_t)buf[0]);
      if (!backtrace_string)
      {
        if (v35)
        {
          *(_DWORD *)unint64_t v50 = 136446210;
          *(void *)&void v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
          uint64_t v33 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_102;
        }

        goto LABEL_103;
      }

      if (!v35) {
        goto LABEL_87;
      }
      *(_DWORD *)unint64_t v50 = 136446466;
      *(void *)&void v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
      *(_WORD *)&v50[12] = 2082;
      *(void *)&v50[14] = backtrace_string;
      int v36 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_86;
    }

    unint64_t v31 = (os_log_s *)__nwlog_obj();
    os_log_type_t v32 = buf[0];
    if (!os_log_type_enabled(v31, (os_log_type_t)buf[0])) {
      goto LABEL_103;
    }
    *(_DWORD *)unint64_t v50 = 136446210;
    *(void *)&void v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
    uint64_t v33 = "%{public}s called with null protocol";
LABEL_102:
    _os_log_impl(&dword_181A5C000, v31, v32, v33, v50, 0xCu);
    goto LABEL_103;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)unint64_t v50 = 136446210;
    *(void *)&void v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
    unint64_t v30 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    char v41 = 0;
    if (buf[0] != 17)
    {
      if (!v41)
      {
        unint64_t v31 = (os_log_s *)__nwlog_obj();
        os_log_type_t v32 = buf[0];
        if (os_log_type_enabled(v31, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)unint64_t v50 = 136446210;
          *(void *)&void v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
          uint64_t v33 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
          goto LABEL_102;
        }

        goto LABEL_103;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v31 = (os_log_s *)__nwlog_obj();
      os_log_type_t v32 = buf[0];
      BOOL v37 = os_log_type_enabled(v31, (os_log_type_t)buf[0]);
      if (!backtrace_string)
      {
        if (v37)
        {
          *(_DWORD *)unint64_t v50 = 136446210;
          *(void *)&void v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
          uint64_t v33 = "%{public}s called with null http_client_bottom, no backtrace";
          goto LABEL_102;
        }

        goto LABEL_103;
      }

      if (!v37) {
        goto LABEL_87;
      }
      *(_DWORD *)unint64_t v50 = 136446466;
      *(void *)&void v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
      *(_WORD *)&v50[12] = 2082;
      *(void *)&v50[14] = backtrace_string;
      int v36 = "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s";
      goto LABEL_86;
    }

    unint64_t v31 = (os_log_s *)__nwlog_obj();
    os_log_type_t v32 = buf[0];
    if (!os_log_type_enabled(v31, (os_log_type_t)buf[0])) {
      goto LABEL_103;
    }
    *(_DWORD *)unint64_t v50 = 136446210;
    *(void *)&void v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
    uint64_t v33 = "%{public}s called with null http_client_bottom";
    goto LABEL_102;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)unint64_t v50 = 136446210;
    *(void *)&void v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
    unint64_t v30 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    char v41 = 0;
    if (buf[0] != 17)
    {
      if (!v41)
      {
        unint64_t v31 = (os_log_s *)__nwlog_obj();
        os_log_type_t v32 = buf[0];
        if (os_log_type_enabled(v31, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)unint64_t v50 = 136446210;
          *(void *)&void v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
          uint64_t v33 = "%{public}s called with null input_protocol, backtrace limit exceeded";
          goto LABEL_102;
        }

        goto LABEL_103;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v31 = (os_log_s *)__nwlog_obj();
      os_log_type_t v32 = buf[0];
      BOOL v38 = os_log_type_enabled(v31, (os_log_type_t)buf[0]);
      if (!backtrace_string)
      {
        if (v38)
        {
          *(_DWORD *)unint64_t v50 = 136446210;
          *(void *)&void v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
          uint64_t v33 = "%{public}s called with null input_protocol, no backtrace";
          goto LABEL_102;
        }

        goto LABEL_103;
      }

      if (!v38) {
        goto LABEL_87;
      }
      *(_DWORD *)unint64_t v50 = 136446466;
      *(void *)&void v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
      *(_WORD *)&v50[12] = 2082;
      *(void *)&v50[14] = backtrace_string;
      int v36 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
      goto LABEL_86;
    }

    unint64_t v31 = (os_log_s *)__nwlog_obj();
    os_log_type_t v32 = buf[0];
    if (!os_log_type_enabled(v31, (os_log_type_t)buf[0])) {
      goto LABEL_103;
    }
    *(_DWORD *)unint64_t v50 = 136446210;
    *(void *)&void v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
    uint64_t v33 = "%{public}s called with null input_protocol";
    goto LABEL_102;
  }

  if (handle[17]) {
    return nw_http_client_bottom_add_to_messaging((uint64_t)a1->handle, (uint64_t)a2);
  }
  parameters = (void *)nw_protocol_get_parameters((uint64_t)a2);
  if (!parameters)
  {
    __nwlog_obj();
    *(_DWORD *)unint64_t v50 = 136446210;
    *(void *)&void v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
    unint64_t v30 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    char v41 = 0;
    if (buf[0] == 17)
    {
      unint64_t v31 = (os_log_s *)__nwlog_obj();
      os_log_type_t v32 = buf[0];
      if (!os_log_type_enabled(v31, (os_log_type_t)buf[0])) {
        goto LABEL_103;
      }
      *(_DWORD *)unint64_t v50 = 136446210;
      *(void *)&void v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
      uint64_t v33 = "%{public}s called with null parameters";
      goto LABEL_102;
    }

    if (!v41)
    {
      unint64_t v31 = (os_log_s *)__nwlog_obj();
      os_log_type_t v32 = buf[0];
      if (os_log_type_enabled(v31, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)unint64_t v50 = 136446210;
        *(void *)&void v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
        uint64_t v33 = "%{public}s called with null parameters, backtrace limit exceeded";
        goto LABEL_102;
      }

      goto LABEL_103;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    unint64_t v31 = (os_log_s *)__nwlog_obj();
    os_log_type_t v32 = buf[0];
    BOOL v39 = os_log_type_enabled(v31, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v39)
      {
        *(_DWORD *)unint64_t v50 = 136446210;
        *(void *)&void v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
        uint64_t v33 = "%{public}s called with null parameters, no backtrace";
        goto LABEL_102;
      }

      goto LABEL_103;
    }

    if (!v39) {
      goto LABEL_87;
    }
    *(_DWORD *)unint64_t v50 = 136446466;
    *(void *)&void v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
    *(_WORD *)&v50[12] = 2082;
    *(void *)&v50[14] = backtrace_string;
    int v36 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
LABEL_86:
    _os_log_impl(&dword_181A5C000, v31, v32, v36, v50, 0x16u);
    goto LABEL_87;
  }

  char v7 = nw_parameters_copy_protocol_options_legacy(parameters, a1);
  if (!v7)
  {
    __nwlog_obj();
    *(_DWORD *)unint64_t v50 = 136446210;
    *(void *)&void v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
    unint64_t v30 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    char v41 = 0;
    if (buf[0] == 17)
    {
      unint64_t v31 = (os_log_s *)__nwlog_obj();
      os_log_type_t v32 = buf[0];
      if (os_log_type_enabled(v31, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)unint64_t v50 = 136446210;
        *(void *)&void v50[4] = "nw_protocol_http_client_bottom_add_input_handler";
        uint64_t v33 = "%{public}s called with null options";
        goto LABEL_102;
      }

uint64_t nw_protocol_http_client_bottom_replace_input_handler( nw_protocol *a1, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
    int v16 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        uint64_t v17 = (os_log_s *)__nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
          unint64_t v19 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_83;
        }

        goto LABEL_84;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v21 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
          unint64_t v19 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_83;
        }

        goto LABEL_84;
      }

      if (!v21) {
        goto LABEL_66;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
      __int16 v30 = 2082;
      unint64_t v31 = (nw_protocol *)backtrace_string;
      unint64_t v22 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_65;
    }

    uint64_t v17 = (os_log_s *)__nwlog_obj();
    os_log_type_t v18 = type;
    if (!os_log_type_enabled(v17, type)) {
      goto LABEL_84;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
    unint64_t v19 = "%{public}s called with null protocol";
LABEL_83:
    _os_log_impl(&dword_181A5C000, v17, v18, v19, buf, 0xCu);
    goto LABEL_84;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
    int v16 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        uint64_t v17 = (os_log_s *)__nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
          unint64_t v19 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
          goto LABEL_83;
        }

        goto LABEL_84;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v23 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
          unint64_t v19 = "%{public}s called with null http_client_bottom, no backtrace";
          goto LABEL_83;
        }

        goto LABEL_84;
      }

      if (!v23) {
        goto LABEL_66;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
      __int16 v30 = 2082;
      unint64_t v31 = (nw_protocol *)backtrace_string;
      unint64_t v22 = "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s";
      goto LABEL_65;
    }

    uint64_t v17 = (os_log_s *)__nwlog_obj();
    os_log_type_t v18 = type;
    if (!os_log_type_enabled(v17, type)) {
      goto LABEL_84;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
    unint64_t v19 = "%{public}s called with null http_client_bottom";
    goto LABEL_83;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
    int v16 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_84;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
      unint64_t v19 = "%{public}s called with null old_input_protocol";
      goto LABEL_83;
    }

    if (!v26)
    {
      uint64_t v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
        unint64_t v19 = "%{public}s called with null old_input_protocol, backtrace limit exceeded";
        goto LABEL_83;
      }

      goto LABEL_84;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v17 = (os_log_s *)__nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v24 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
        unint64_t v19 = "%{public}s called with null old_input_protocol, no backtrace";
        goto LABEL_83;
      }

      goto LABEL_84;
    }

    if (!v24) {
      goto LABEL_66;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
    __int16 v30 = 2082;
    unint64_t v31 = (nw_protocol *)backtrace_string;
    unint64_t v22 = "%{public}s called with null old_input_protocol, dumping backtrace:%{public}s";
LABEL_65:
    _os_log_impl(&dword_181A5C000, v17, v18, v22, buf, 0x16u);
    goto LABEL_66;
  }

  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
    int v16 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v29 = "nw_protocol_http_client_bottom_replace_input_handler";
        unint64_t v19 = "%{public}s called with null new_input_protocol";
        goto LABEL_83;
      }

uint64_t nw_protocol_http_client_bottom_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v59 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int128 v52 = "nw_protocol_http_client_bottom_remove_input_handler";
    BOOL v38 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v39 = (os_log_s *)__nwlog_obj();
      os_log_type_t v40 = type;
      if (!os_log_type_enabled(v39, type)) {
        goto LABEL_111;
      }
      *(_DWORD *)buf = 136446210;
      __int128 v52 = "nw_protocol_http_client_bottom_remove_input_handler";
      char v41 = "%{public}s called with null protocol";
LABEL_110:
      _os_log_impl(&dword_181A5C000, v39, v40, v41, buf, 0xCu);
      goto LABEL_111;
    }

    if (!v49)
    {
      BOOL v39 = (os_log_s *)__nwlog_obj();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        __int128 v52 = "nw_protocol_http_client_bottom_remove_input_handler";
        char v41 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_110;
      }

      goto LABEL_111;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v39 = (os_log_s *)__nwlog_obj();
    os_log_type_t v40 = type;
    BOOL v43 = os_log_type_enabled(v39, type);
    if (!backtrace_string)
    {
      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        __int128 v52 = "nw_protocol_http_client_bottom_remove_input_handler";
        char v41 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_110;
      }

      goto LABEL_111;
    }

    if (!v43) {
      goto LABEL_95;
    }
    *(_DWORD *)buf = 136446466;
    __int128 v52 = "nw_protocol_http_client_bottom_remove_input_handler";
    __int16 v53 = 2082;
    uint64_t v54 = (nw_protocol *)backtrace_string;
    __int16 v44 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_94:
    _os_log_impl(&dword_181A5C000, v39, v40, v44, buf, 0x16u);
    goto LABEL_95;
  }

  handle = (nw_protocol *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int128 v52 = "nw_protocol_http_client_bottom_remove_input_handler";
    BOOL v38 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v39 = (os_log_s *)__nwlog_obj();
      os_log_type_t v40 = type;
      if (!os_log_type_enabled(v39, type)) {
        goto LABEL_111;
      }
      *(_DWORD *)buf = 136446210;
      __int128 v52 = "nw_protocol_http_client_bottom_remove_input_handler";
      char v41 = "%{public}s called with null http_client_bottom";
      goto LABEL_110;
    }

    if (!v49)
    {
      BOOL v39 = (os_log_s *)__nwlog_obj();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        __int128 v52 = "nw_protocol_http_client_bottom_remove_input_handler";
        char v41 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
        goto LABEL_110;
      }

      goto LABEL_111;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v39 = (os_log_s *)__nwlog_obj();
    os_log_type_t v40 = type;
    BOOL v45 = os_log_type_enabled(v39, type);
    if (!backtrace_string)
    {
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        __int128 v52 = "nw_protocol_http_client_bottom_remove_input_handler";
        char v41 = "%{public}s called with null http_client_bottom, no backtrace";
        goto LABEL_110;
      }

      goto LABEL_111;
    }

    if (!v45) {
      goto LABEL_95;
    }
    *(_DWORD *)buf = 136446466;
    __int128 v52 = "nw_protocol_http_client_bottom_remove_input_handler";
    __int16 v53 = 2082;
    uint64_t v54 = (nw_protocol *)backtrace_string;
    __int16 v44 = "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s";
    goto LABEL_94;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int128 v52 = "nw_protocol_http_client_bottom_remove_input_handler";
    BOOL v38 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v39 = (os_log_s *)__nwlog_obj();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        __int128 v52 = "nw_protocol_http_client_bottom_remove_input_handler";
        char v41 = "%{public}s called with null other_protocol";
        goto LABEL_110;
      }

uint64_t nw_protocol_http_client_bottom_get_parameters(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v14 = "nw_protocol_http_client_bottom_get_parameters";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_protocol_http_client_bottom_get_parameters";
      id v6 = "%{public}s called with null protocol";
    }

    else
    {
      if (!v11)
      {
        uint64_t v4 = (os_log_s *)__nwlog_obj();
        os_log_type_t v5 = type;
        if (!os_log_type_enabled(v4, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_http_client_bottom_get_parameters";
        id v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_32;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v14 = "nw_protocol_http_client_bottom_get_parameters";
          __int16 v15 = 2082;
          uint64_t v16 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v3) {
          return 0LL;
        }
        goto LABEL_34;
      }

      if (!v8) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_protocol_http_client_bottom_get_parameters";
      id v6 = "%{public}s called with null protocol, no backtrace";
    }

uint64_t nw_protocol_http_client_bottom_get_remote_endpoint(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v14 = "nw_protocol_http_client_bottom_get_remote_endpoint";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_protocol_http_client_bottom_get_remote_endpoint";
      id v6 = "%{public}s called with null protocol";
    }

    else
    {
      if (!v11)
      {
        uint64_t v4 = (os_log_s *)__nwlog_obj();
        os_log_type_t v5 = type;
        if (!os_log_type_enabled(v4, type)) {
          goto LABEL_33;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v14 = "nw_protocol_http_client_bottom_get_remote_endpoint";
        id v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_32;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v14 = "nw_protocol_http_client_bottom_get_remote_endpoint";
          __int16 v15 = 2082;
          uint64_t v16 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v3) {
          return 0LL;
        }
        goto LABEL_34;
      }

      if (!v8) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = "nw_protocol_http_client_bottom_get_remote_endpoint";
      id v6 = "%{public}s called with null protocol, no backtrace";
    }

uint64_t nw_protocol_http_client_bottom_connect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v57 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v52 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v43 = (os_log_s *)__nwlog_obj();
      os_log_type_t v44 = type;
      if (!os_log_type_enabled(v43, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
      __int16 v15 = "%{public}s called with null protocol";
      goto LABEL_103;
    }

    if (!v52)
    {
      BOOL v43 = (os_log_s *)__nwlog_obj();
      os_log_type_t v44 = type;
      if (!os_log_type_enabled(v43, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
      __int16 v15 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_103;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v43 = (os_log_s *)__nwlog_obj();
    os_log_type_t v44 = type;
    BOOL v46 = os_log_type_enabled(v43, type);
    if (!backtrace_string)
    {
      if (!v46) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
      __int16 v15 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_103;
    }

    if (!v46) {
      goto LABEL_90;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    unint64_t v47 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
    goto LABEL_89;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v52 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v43 = (os_log_s *)__nwlog_obj();
      os_log_type_t v44 = type;
      if (!os_log_type_enabled(v43, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
      __int16 v15 = "%{public}s called with null http_client_bottom";
      goto LABEL_103;
    }

    if (!v52)
    {
      BOOL v43 = (os_log_s *)__nwlog_obj();
      os_log_type_t v44 = type;
      if (!os_log_type_enabled(v43, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
      __int16 v15 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
      goto LABEL_103;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v43 = (os_log_s *)__nwlog_obj();
    os_log_type_t v44 = type;
    BOOL v48 = os_log_type_enabled(v43, type);
    if (!backtrace_string)
    {
      if (!v48) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
      __int16 v15 = "%{public}s called with null http_client_bottom, no backtrace";
      goto LABEL_103;
    }

    if (!v48) {
      goto LABEL_90;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    unint64_t v47 = "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s";
LABEL_89:
    _os_log_impl(&dword_181A5C000, v43, v44, v47, buf, 0x16u);
    goto LABEL_90;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v52 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v43 = (os_log_s *)__nwlog_obj();
      os_log_type_t v44 = type;
      if (!os_log_type_enabled(v43, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
      __int16 v15 = "%{public}s called with null other_protocol";
      goto LABEL_103;
    }

    if (v52)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v43 = (os_log_s *)__nwlog_obj();
      os_log_type_t v44 = type;
      BOOL v49 = os_log_type_enabled(v43, type);
      if (backtrace_string)
      {
        if (v49)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          unint64_t v47 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
          goto LABEL_89;
        }

void nw_protocol_http_client_bottom_connected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v82 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v77 = "nw_protocol_http_client_bottom_connected";
    BOOL v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v74 = 0;
    if (__nwlog_fault(v17, &type, &v74))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v18 = (os_log_s *)__nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v77 = "nw_protocol_http_client_bottom_connected";
          uint64_t v20 = "%{public}s called with null protocol";
LABEL_131:
          _os_log_impl(&dword_181A5C000, v18, v19, v20, buf, 0xCu);
        }
      }

      else if (v74)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v18 = (os_log_s *)__nwlog_obj();
        os_log_type_t v19 = type;
        BOOL v72 = os_log_type_enabled(v18, type);
        if (backtrace_string)
        {
          if (v72)
          {
            *(_DWORD *)buf = 136446466;
            unint64_t v77 = "nw_protocol_http_client_bottom_connected";
            __int16 v78 = 2082;
            int v79 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v18,  v19,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
        }

        else if (v72)
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v77 = "nw_protocol_http_client_bottom_connected";
          uint64_t v20 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_131;
        }
      }

      else
      {
        os_log_type_t v18 = (os_log_s *)__nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          unint64_t v77 = "nw_protocol_http_client_bottom_connected";
          uint64_t v20 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_131;
        }
      }
    }

void nw_protocol_http_client_bottom_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v27 = "nw_protocol_http_client_bottom_disconnect";
    os_log_type_t v14 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      int v27 = "nw_protocol_http_client_bottom_disconnect";
      BOOL v17 = "%{public}s called with null protocol";
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v19 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          int v27 = "nw_protocol_http_client_bottom_disconnect";
          __int16 v28 = 2082;
          os_log_type_t v29 = (nw_protocol *)backtrace_string;
          _os_log_impl( &dword_181A5C000,  v15,  v16,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_74:
        if (!v14) {
          return;
        }
        goto LABEL_75;
      }

      if (!v19) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      int v27 = "nw_protocol_http_client_bottom_disconnect";
      BOOL v17 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      __int16 v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      int v27 = "nw_protocol_http_client_bottom_disconnect";
      BOOL v17 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_73;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v27 = "nw_protocol_http_client_bottom_disconnect";
    os_log_type_t v14 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v24)
      {
        __int16 v15 = (os_log_s *)__nwlog_obj();
        os_log_type_t v16 = type;
        if (!os_log_type_enabled(v15, type)) {
          goto LABEL_74;
        }
        *(_DWORD *)buf = 136446210;
        int v27 = "nw_protocol_http_client_bottom_disconnect";
        BOOL v17 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
        goto LABEL_73;
      }

      uint64_t v20 = (char *)__nw_create_backtrace_string();
      __int16 v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v21 = os_log_type_enabled(v15, type);
      if (!v20)
      {
        if (!v21) {
          goto LABEL_74;
        }
        *(_DWORD *)buf = 136446210;
        int v27 = "nw_protocol_http_client_bottom_disconnect";
        BOOL v17 = "%{public}s called with null http_client_bottom, no backtrace";
        goto LABEL_73;
      }

      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        int v27 = "nw_protocol_http_client_bottom_disconnect";
        __int16 v28 = 2082;
        os_log_type_t v29 = (nw_protocol *)v20;
        uint64_t v22 = "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s";
LABEL_58:
        _os_log_impl(&dword_181A5C000, v15, v16, v22, buf, 0x16u);
      }

void nw_protocol_http_client_bottom_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v17 = "nw_protocol_http_client_bottom_disconnected";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v14)
      {
        uint64_t v5 = (os_log_s *)__nwlog_obj();
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_protocol_http_client_bottom_disconnected";
        os_log_type_t v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_45;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v9) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_protocol_http_client_bottom_disconnected";
        os_log_type_t v7 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_45;
      }

      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v17 = "nw_protocol_http_client_bottom_disconnected";
        __int16 v18 = 2082;
        BOOL v19 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_46;
    }

    uint64_t v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v17 = "nw_protocol_http_client_bottom_disconnected";
    os_log_type_t v7 = "%{public}s called with null protocol";
LABEL_45:
    _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
    goto LABEL_46;
  }

  handle = a1->handle;
  if (handle)
  {
    if (a2)
    {
      handle[294] |= 2u;
      nw_protocol_remove_instance((uint64_t)handle);
      nw_protocol_disconnected(*((void **)handle + 6), (uint64_t)a2);
      return;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v17 = "nw_protocol_http_client_bottom_disconnected";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v4, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v5 = (os_log_s *)__nwlog_obj();
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_protocol_http_client_bottom_disconnected";
        os_log_type_t v7 = "%{public}s called with null other_protocol";
        goto LABEL_45;
      }

      if (!v14)
      {
        uint64_t v5 = (os_log_s *)__nwlog_obj();
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_protocol_http_client_bottom_disconnected";
        os_log_type_t v7 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_45;
      }

      BOOL v10 = (char *)__nw_create_backtrace_string();
      uint64_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v13 = os_log_type_enabled(v5, type);
      if (!v10)
      {
        if (!v13) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_protocol_http_client_bottom_disconnected";
        os_log_type_t v7 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_45;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v17 = "nw_protocol_http_client_bottom_disconnected";
        __int16 v18 = 2082;
        BOOL v19 = v10;
        BOOL v12 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
        goto LABEL_30;
      }

      goto LABEL_31;
    }

void nw_protocol_http_client_bottom_error(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v16 = "nw_protocol_http_client_bottom_error";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v13)
      {
        uint64_t v4 = (os_log_s *)__nwlog_obj();
        os_log_type_t v5 = type;
        if (!os_log_type_enabled(v4, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_http_client_bottom_error";
        os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_45;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (!backtrace_string)
      {
        if (!v8) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_http_client_bottom_error";
        os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_45;
      }

      if (v8)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v16 = "nw_protocol_http_client_bottom_error";
        __int16 v17 = 2082;
        __int16 v18 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_46;
    }

    uint64_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v16 = "nw_protocol_http_client_bottom_error";
    os_log_type_t v6 = "%{public}s called with null protocol";
LABEL_45:
    _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
    goto LABEL_46;
  }

  handle = (void **)a1->handle;
  if (handle)
  {
    if (a2)
    {
      nw_protocol_error(handle[6], (uint64_t)a2);
      return;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v16 = "nw_protocol_http_client_bottom_error";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault(v3, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v4 = (os_log_s *)__nwlog_obj();
        os_log_type_t v5 = type;
        if (!os_log_type_enabled(v4, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_http_client_bottom_error";
        os_log_type_t v6 = "%{public}s called with null other_protocol";
        goto LABEL_45;
      }

      if (!v13)
      {
        uint64_t v4 = (os_log_s *)__nwlog_obj();
        os_log_type_t v5 = type;
        if (!os_log_type_enabled(v4, type)) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_http_client_bottom_error";
        os_log_type_t v6 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_45;
      }

      BOOL v9 = (char *)__nw_create_backtrace_string();
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v12 = os_log_type_enabled(v4, type);
      if (!v9)
      {
        if (!v12) {
          goto LABEL_46;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_protocol_http_client_bottom_error";
        os_log_type_t v6 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_45;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v16 = "nw_protocol_http_client_bottom_error";
        __int16 v17 = 2082;
        __int16 v18 = v9;
        BOOL v11 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
        goto LABEL_30;
      }

      goto LABEL_31;
    }

uint64_t nw_protocol_http_client_bottom_accept(uint64_t a1, void *a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_accept";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v21 = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      BOOL v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = v21;
      if (!os_log_type_enabled(v10, v21)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_accept";
      BOOL v12 = "%{public}s called with null protocol";
      goto LABEL_51;
    }

    if (!v20)
    {
      BOOL v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = v21;
      if (!os_log_type_enabled(v10, v21)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_accept";
      BOOL v12 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_51;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v10 = (os_log_s *)__nwlog_obj();
    os_log_type_t v11 = v21;
    BOOL v14 = os_log_type_enabled(v10, v21);
    if (!backtrace_string)
    {
      if (!v14) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_accept";
      BOOL v12 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_51;
    }

    if (!v14) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_accept";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    __int16 v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_37:
    _os_log_impl(&dword_181A5C000, v10, v11, v15, buf, 0x16u);
    goto LABEL_38;
  }

  uint64_t v3 = *(void *)(a1 + 40);
  if (!v3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_accept";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v21 = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      BOOL v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = v21;
      if (!os_log_type_enabled(v10, v21)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_accept";
      BOOL v12 = "%{public}s called with null http_client_bottom";
      goto LABEL_51;
    }

    if (!v20)
    {
      BOOL v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = v21;
      if (!os_log_type_enabled(v10, v21)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_accept";
      BOOL v12 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
      goto LABEL_51;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v10 = (os_log_s *)__nwlog_obj();
    os_log_type_t v11 = v21;
    BOOL v16 = os_log_type_enabled(v10, v21);
    if (!backtrace_string)
    {
      if (!v16) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_accept";
      BOOL v12 = "%{public}s called with null http_client_bottom, no backtrace";
      goto LABEL_51;
    }

    if (!v16) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_accept";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    __int16 v15 = "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s";
    goto LABEL_37;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_accept";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v21 = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      BOOL v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = v21;
      if (!os_log_type_enabled(v10, v21)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_accept";
      BOOL v12 = "%{public}s called with null endpoint";
      goto LABEL_51;
    }

    if (!v20)
    {
      BOOL v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = v21;
      if (!os_log_type_enabled(v10, v21)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_accept";
      BOOL v12 = "%{public}s called with null endpoint, backtrace limit exceeded";
      goto LABEL_51;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v10 = (os_log_s *)__nwlog_obj();
    os_log_type_t v11 = v21;
    BOOL v17 = os_log_type_enabled(v10, v21);
    if (backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_accept";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        __int16 v15 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
        goto LABEL_37;
      }

uint64_t nw_http_client_bottom_add_to_messaging(uint64_t a1, uint64_t a2)
{
  uint64_t v86 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    parameters = (void *)nw_protocol_get_parameters(a2);
    if (parameters)
    {
      os_log_type_t v5 = parameters;
      nw_parameters_log_protocol_instances(parameters);
      uint64_t v6 = v5;
      BOOL v7 = (nw_protocol_stack *)v6[19];

      v79[0] = 0LL;
      v79[1] = v79;
      v79[2] = 0x2000000000LL;
      char v80 = 0;
      *(void *)os_log_type_t type = 0LL;
      BOOL v73 = type;
      uint64_t v74 = 0x3802000000LL;
      int v75 = __Block_byref_object_copy__22336;
      uint64_t v76 = __Block_byref_object_dispose__22337;
      unint64_t v77 = 0LL;
      char v78 = -1;
      uint64_t v8 = MEMORY[0x1895F87A8];
      iterate_block[0] = MEMORY[0x1895F87A8];
      iterate_block[1] = 0x40000000LL;
      iterate_block[2] = ___ZL38nw_http_client_bottom_add_to_messagingP30nw_protocol_http_client_bottomP11nw_protocol_block_invoke;
      iterate_block[3] = &unk_189BB90B8;
      iterate_void block[4] = v79;
      void iterate_block[5] = type;
      iterate_block[6] = a1;
      uint64_t v60 = v7;
      nw_protocol_stack_iterate_application_protocols(v7, iterate_block);
      if (*((void *)v73 + 5))
      {
        BOOL v9 = nw_parameters_copy_protocol_options_legacy(v6, (nw_protocol *)a1);
        if (v9)
        {
          BOOL v10 = v9;
          os_log_type_t v11 = v10;
          uint64_t v12 = 0LL;
          __s[0] = 0;
          while (1)
          {
            int v13 = v10[v12 + 48];
            __s[v12] = v13;
            if (!v13) {
              break;
            }
            if (++v12 == 83)
            {
              char v85 = 0;
              break;
            }
          }

          size_t v14 = strlen(__s);
          __int16 v15 = strchr(__s, 58);
          if (v15) {
            *__int16 v15 = 0;
          }
          BOOL v16 = v14 > 2;
          BOOL v17 = (void *)*((void *)v73 + 5);
          __int16 v18 = v11;
          __int16 v19 = *((_WORD *)v18 + 68);

          nw_protocol_options_set_log_id(v17, "C", &__s[2 * v16], (unsigned __int16)(v19 + 1));
          char v20 = (void *)*((void *)v73 + 5);
          if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
            dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72514);
          }
          id v21 = (id)nw_protocol_copy_http_messaging_definition_definition;
          nw_parameters_set_protocol_instance(v20, v22, *(void *)(a1 + 136));
          if (v21) {
            os_release(v21);
          }
          char v23 = *(void **)(a1 + 160);
          if (v23)
          {
            uint64_t v24 = v6;
            id v25 = v23;
            objc_storeStrong(v24 + 23, v23);
          }

          uint64_t v26 = (void *)nw_protocol_get_parameters(*(void *)(a1 + 136));
          if (!v26) {
            goto LABEL_36;
          }
          int v27 = v26;
          __int16 v28 = (nw_protocol_stack *)v27[19];

          v69[0] = 0LL;
          v69[1] = v69;
          v69[2] = 0x2000000000LL;
          char v70 = 0;
          *(void *)id v62 = 0LL;
          uint64_t v63 = v62;
          uint64_t v64 = 0x3802000000LL;
          unint64_t v65 = __Block_byref_object_copy__22336;
          char v66 = __Block_byref_object_dispose__22337;
          uint64_t object = 0LL;
          char v68 = -1;
          v61[0] = v8;
          v61[1] = 0x40000000LL;
          void v61[2] = ___ZL38nw_http_client_bottom_add_to_messagingP30nw_protocol_http_client_bottomP11nw_protocol_block_invoke_21;
          v61[3] = &unk_189BB90E0;
          v61[5] = v62;
          v61[6] = a1;
          v61[4] = v69;
          nw_protocol_stack_iterate_application_protocols(v28, v61);
          if (!*((void *)v63 + 5))
          {
            nw_protocol_options_t v29 = nw_protocol_stack_copy_transport_protocol(v28);
            __int16 v30 = v63;
            char v31 = *((_BYTE *)v63 + 48);
            if ((v31 & 1) != 0)
            {
              uint64_t v32 = (void *)*((void *)v63 + 5);
              if (v32)
              {
                os_release(v32);
                char v31 = *((_BYTE *)v30 + 48);
              }
            }

            *((void *)v30 + 5) = v29;
            *((_BYTE *)v30 + 4_Block_object_dispose((const void *)(v3 - 128), 8) = v31 | 1;
          }

          BOOL v33 = v6;
          uint64_t v34 = (nw_protocol_stack *)v6[19];

          nw_protocol_options_t v35 = nw_protocol_stack_copy_transport_protocol(v34);
          nw_protocol_options_t v36 = v35;
          uint64_t v37 = (void *)*((void *)v63 + 5);
          if (v37)
          {
            if (v35)
            {
              BOOL v38 = v37;
              id v39 = v38[1];

              if (nw_protocol_options_matches_definition(v36, v39))
              {
                uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(*((void **)v63 + 5));
                unint64_t v41 = v36;
                *((void *)v41 + 2) = protocol_handle;
              }

              goto LABEL_28;
            }
          }

          else if (v35)
          {
LABEL_28:
            os_release(v36);
          }

          if (v34) {
            os_release(v34);
          }
          _Block_object_dispose(v62, 8);
          if ((v68 & 1) != 0 && object) {
            os_release(object);
          }
          _Block_object_dispose(v69, 8);
          if (v28) {
            os_release(v28);
          }
LABEL_36:
          nw_protocol_set_output_handler(a2, 0LL);
          uint64_t v42 = nw_protocol_add_input_handler(*(void *)(a1 + 136), a2);
          os_release(v18);
          goto LABEL_37;
        }

        __nwlog_obj();
        *(_DWORD *)__s = 136446210;
        uint64_t v82 = "nw_http_client_bottom_add_to_messaging";
        BOOL v48 = (char *)_os_log_send_and_compose_impl();
        v62[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v69[0]) = 0;
        if (__nwlog_fault(v48, v62, v69))
        {
          if (v62[0] == OS_LOG_TYPE_FAULT)
          {
            BOOL v49 = (os_log_s *)__nwlog_obj();
            os_log_type_t v50 = v62[0];
            if (!os_log_type_enabled(v49, v62[0])) {
              goto LABEL_101;
            }
            *(_DWORD *)__s = 136446210;
            uint64_t v82 = "nw_http_client_bottom_add_to_messaging";
            __int128 v51 = "%{public}s called with null options";
            goto LABEL_100;
          }

          if (!LOBYTE(v69[0]))
          {
            BOOL v49 = (os_log_s *)__nwlog_obj();
            os_log_type_t v50 = v62[0];
            if (!os_log_type_enabled(v49, v62[0])) {
              goto LABEL_101;
            }
            *(_DWORD *)__s = 136446210;
            uint64_t v82 = "nw_http_client_bottom_add_to_messaging";
            __int128 v51 = "%{public}s called with null options, backtrace limit exceeded";
            goto LABEL_100;
          }

          backtrace_string = (char *)__nw_create_backtrace_string();
          BOOL v49 = (os_log_s *)__nwlog_obj();
          os_log_type_t v50 = v62[0];
          BOOL v59 = os_log_type_enabled(v49, v62[0]);
          if (backtrace_string)
          {
            if (v59)
            {
              *(_DWORD *)__s = 136446466;
              uint64_t v82 = "nw_http_client_bottom_add_to_messaging";
              __int16 v83 = 2082;
              uint64_t v84 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v49,  v50,  "%{public}s called with null options, dumping backtrace:%{public}s",  (uint8_t *)__s,  0x16u);
            }

            free(backtrace_string);
            if (!v48) {
              goto LABEL_103;
            }
            goto LABEL_102;
          }

          if (v59)
          {
            *(_DWORD *)__s = 136446210;
            uint64_t v82 = "nw_http_client_bottom_add_to_messaging";
            __int128 v51 = "%{public}s called with null options, no backtrace";
LABEL_100:
            _os_log_impl(&dword_181A5C000, v49, v50, v51, (uint8_t *)__s, 0xCu);
          }
        }
      }

      else
      {
        __nwlog_obj();
        *(_DWORD *)__s = 136446210;
        uint64_t v82 = "nw_http_client_bottom_add_to_messaging";
        BOOL v48 = (char *)_os_log_send_and_compose_impl();
        v62[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(v69[0]) = 0;
        if (v62[0] == OS_LOG_TYPE_FAULT)
        {
          BOOL v49 = (os_log_s *)__nwlog_obj();
          os_log_type_t v50 = v62[0];
          if (!os_log_type_enabled(v49, v62[0])) {
            goto LABEL_101;
          }
          *(_DWORD *)__s = 136446210;
          uint64_t v82 = "nw_http_client_bottom_add_to_messaging";
          __int128 v51 = "%{public}s called with null messaging_options";
          goto LABEL_100;
        }

        if (!LOBYTE(v69[0]))
        {
          BOOL v49 = (os_log_s *)__nwlog_obj();
          os_log_type_t v50 = v62[0];
          if (!os_log_type_enabled(v49, v62[0])) {
            goto LABEL_101;
          }
          *(_DWORD *)__s = 136446210;
          uint64_t v82 = "nw_http_client_bottom_add_to_messaging";
          __int128 v51 = "%{public}s called with null messaging_options, backtrace limit exceeded";
          goto LABEL_100;
        }

        uint64_t v56 = (char *)__nw_create_backtrace_string();
        BOOL v49 = (os_log_s *)__nwlog_obj();
        os_log_type_t v50 = v62[0];
        BOOL v57 = os_log_type_enabled(v49, v62[0]);
        if (!v56)
        {
          if (!v57) {
            goto LABEL_101;
          }
          *(_DWORD *)__s = 136446210;
          uint64_t v82 = "nw_http_client_bottom_add_to_messaging";
          __int128 v51 = "%{public}s called with null messaging_options, no backtrace";
          goto LABEL_100;
        }

        if (v57)
        {
          *(_DWORD *)__s = 136446466;
          uint64_t v82 = "nw_http_client_bottom_add_to_messaging";
          __int16 v83 = 2082;
          uint64_t v84 = v56;
          _os_log_impl( &dword_181A5C000,  v49,  v50,  "%{public}s called with null messaging_options, dumping backtrace:%{public}s",  (uint8_t *)__s,  0x16u);
        }

        free(v56);
      }

uint64_t __Block_byref_object_copy__22336(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(result + 4_Block_object_dispose((const void *)(v3 - 128), 8) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0LL;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__22337(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    uint64_t v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }

  *(void *)(a1 + 40) = 0LL;
}

void ___ZL38nw_http_client_bottom_add_to_messagingP30nw_protocol_http_client_bottomP11nw_protocol_block_invoke( void *a1, void *a2)
{
  uint64_t v2 = a2;
  if (*(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL))
  {
    if (!*(void *)(*(void *)(a1[5] + 8LL) + 40LL) && nw_protocol_options_is_http_messaging(a2))
    {
      if (v2) {
        uint64_t v2 = os_retain(v2);
      }
      uint64_t v4 = *(void *)(a1[5] + 8LL);
      char v5 = *(_BYTE *)(v4 + 48);
      if ((v5 & 1) != 0)
      {
        uint64_t v6 = *(void **)(v4 + 40);
        if (v6)
        {
          os_release(v6);
          char v5 = *(_BYTE *)(v4 + 48);
        }
      }

      *(void *)(v4 + 40) = v2;
      *(_BYTE *)(v4 + 4_Block_object_dispose((const void *)(v3 - 128), 8) = v5 | 1;
    }
  }

  else if (nw_protocol_options_get_protocol_handle(a2) == a1[6])
  {
    *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) = 1;
  }

void ___ZL38nw_http_client_bottom_add_to_messagingP30nw_protocol_http_client_bottomP11nw_protocol_block_invoke_21( void *a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t protocol_handle = nw_protocol_options_get_protocol_handle(a2);
  uint64_t v5 = *(void *)(a1[4] + 8LL);
  if (protocol_handle == *(void *)(a1[6] + 136LL))
  {
    *(_BYTE *)(v5 + 24) = 1;
  }

  else if (*(_BYTE *)(v5 + 24))
  {
    if (v2) {
      uint64_t v2 = os_retain(v2);
    }
    uint64_t v6 = *(void *)(a1[5] + 8LL);
    char v7 = *(_BYTE *)(v6 + 48);
    if ((v7 & 1) != 0)
    {
      uint64_t v8 = *(void **)(v6 + 40);
      if (v8)
      {
        os_release(v8);
        char v7 = *(_BYTE *)(v6 + 48);
      }
    }

    *(void *)(v6 + 40) = v2;
    *(_BYTE *)(v6 + 4_Block_object_dispose((const void *)(v3 - 128), 8) = v7 | 1;
    *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) = 0;
  }

uint64_t nw_http_client_bottom_stalled(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v25 = "nw_http_client_bottom_stalled";
    BOOL v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_http_client_bottom_stalled";
      __int16 v19 = "%{public}s called with null http_client_bottom";
    }

    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v21 = os_log_type_enabled(v17, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          id v25 = "nw_http_client_bottom_stalled";
          __int16 v26 = 2082;
          int v27 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v17,  v18,  "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_34;
      }

      if (!v21)
      {
LABEL_34:
        if (v16) {
          free(v16);
        }
        return 0LL;
      }

      *(_DWORD *)buf = 136446210;
      id v25 = "nw_http_client_bottom_stalled";
      __int16 v19 = "%{public}s called with null http_client_bottom, no backtrace";
    }

    else
    {
      BOOL v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      id v25 = "nw_http_client_bottom_stalled";
      __int16 v19 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v17, v18, v19, buf, 0xCu);
    goto LABEL_34;
  }

  if (!*(void *)(a1 + 136))
  {
    uint64_t v4 = *(void *)(a1 + 96);
    if (v4
      && ((uint64_t v5 = mach_continuous_approximate_time(), v5 <= 1) ? (v6 = 1LL) : (v6 = v5),
          unint64_t v7 = nw_delta_nanos(v4, v6),
          int64_t int64_with_default = networkd_settings_get_int64_with_default( (const char *)nw_setting_proxy_setup_threshold_seconds,  5LL),  v7 > 1000000000 * int64_with_default))
    {
      if ((*(_BYTE *)(a1 + 294) & 4) == 0)
      {
        int64_t v9 = int64_with_default;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v10 = gLogObj;
        uint64_t v2 = 1LL;
        if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
          return v2;
        }
        *(_DWORD *)buf = 136446978;
        id v25 = "nw_http_client_bottom_stalled";
        __int16 v26 = 2082;
        int v27 = (char *)(a1 + 208);
        __int16 v28 = 2080;
        nw_protocol_options_t v29 = " ";
        __int16 v30 = 2048;
        int64_t v31 = v9;
        os_log_type_t v11 = "%{public}s %{public}s%sdenying join attempt because http_client_bottom was not ready within %lld seconds";
        uint64_t v12 = (os_log_s *)v10;
        uint32_t v13 = 42;
LABEL_18:
        _os_log_impl(&dword_181A5C000, v12, OS_LOG_TYPE_INFO, v11, buf, v13);
        return v2;
      }
    }

    else
    {
      if (!*(_WORD *)(a1 + 292)
        || networkd_settings_get_int64_with_default((const char *)nw_setting_proxy_maximum_stall_count, 5LL) >= *(unsigned __int16 *)(a1 + 292))
      {
        return 0LL;
      }

      if ((*(_BYTE *)(a1 + 294) & 4) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v14 = gLogObj;
        uint64_t v2 = 1LL;
        if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
          return v2;
        }
        int v15 = *(unsigned __int16 *)(a1 + 292);
        *(_DWORD *)buf = 136446978;
        id v25 = "nw_http_client_bottom_stalled";
        __int16 v26 = 2082;
        int v27 = (char *)(a1 + 208);
        __int16 v28 = 2080;
        nw_protocol_options_t v29 = " ";
        __int16 v30 = 1024;
        LODWORD(v31) = v15;
        os_log_type_t v11 = "%{public}s %{public}s%sdenying join attempt because http_client_bottom hit %u stalls";
        uint64_t v12 = (os_log_s *)v14;
        uint32_t v13 = 38;
        goto LABEL_18;
      }
    }

    return 1LL;
  }

  return 0LL;
}

uint64_t __nw_protocol_http_client_bottom_accept_block_invoke(uint64_t a1, nw_endpoint_t endpoint)
{
  hostname = nw_endpoint_get_hostname(endpoint);
  unsigned int port = nw_endpoint_get_port(*(nw_endpoint_t *)(*(void *)(a1 + 40) + 120LL));
  host_with_numeric_unsigned int port = nw_endpoint_create_host_with_numeric_port(hostname, port);
  int is_equal = nw_endpoint_is_equal(*(void **)(*(void *)(a1 + 40) + 120LL), (void *)host_with_numeric_port, 0LL);
  if (is_equal) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  }
  if (host_with_numeric_port) {
    os_release((void *)host_with_numeric_port);
  }
  return is_equal ^ 1u;
}

uint64_t ___ZL38nw_protocol_http_client_bottom_connectP11nw_protocolS0__block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v118 = *MEMORY[0x1895F89C0];
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if (!result) {
    return result;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
    uint64_t v84 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v114 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v85 = (os_log_s *)__nwlog_obj();
      os_log_type_t v86 = type[0];
      if (!os_log_type_enabled(v85, type[0])) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
      char v87 = "%{public}s called with null http_messaging_protocol";
    }

    else if (v114)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v85 = (os_log_s *)__nwlog_obj();
      os_log_type_t v86 = type[0];
      BOOL v89 = os_log_type_enabled(v85, type[0]);
      if (backtrace_string)
      {
        if (v89)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v85,  v86,  "%{public}s called with null http_messaging_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_131;
      }

      if (!v89)
      {
LABEL_131:
        if (v84) {
          free(v84);
        }
        return 0LL;
      }

      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
      char v87 = "%{public}s called with null http_messaging_protocol, no backtrace";
    }

    else
    {
      char v85 = (os_log_s *)__nwlog_obj();
      os_log_type_t v86 = type[0];
      if (!os_log_type_enabled(v85, type[0])) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
      char v87 = "%{public}s called with null http_messaging_protocol, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v85, v86, v87, buf, 0xCu);
    goto LABEL_131;
  }

  uint64_t v6 = result;
  if (nw_protocol_copy_info(a2, 253))
  {
    uint64_t result = 0LL;
    if ((*(_BYTE *)(v6 + 294) & 4) == 0)
    {
      if (gLogDatapath)
      {
        unint64_t v7 = (os_log_s *)__nwlog_obj();
        uint64_t result = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
        if ((_DWORD)result)
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v6 + 208;
          *(_WORD *)&_BYTE buf[22] = 2080;
          unint64_t v116 = " ";
          uint64_t v8 = "%{public}s %{public}s%sreplacing protocol already has a listen handler, ignoring";
          int64_t v9 = v7;
          os_log_type_t v10 = OS_LOG_TYPE_DEBUG;
LABEL_29:
          _os_log_impl(&dword_181A5C000, v9, v10, v8, buf, 0x20u);
          return 0LL;
        }
      }
    }

    return result;
  }

  os_log_type_t v11 = *(void **)(a2 + 16);
  if (nw_protocol_http_messaging_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_messaging_identifier::onceToken, &__block_literal_global_76181);
  }
  BOOL v12 = nw_protocols_are_equal(v11, nw_protocol_http_messaging_identifier::protocol_identifier);
  uint32_t v13 = *(void **)(a2 + 16);
  if (nw_protocol_http1_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_39881);
  }
  if (nw_protocols_are_equal(v13, &nw_protocol_http1_identifier::http1_protocol_identifier)) {
    goto LABEL_19;
  }
  uint64_t v14 = *(void **)(a2 + 16);
  if (nw_protocol_http2_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http2_identifier::onceToken, &__block_literal_global_83570);
  }
  if (nw_protocols_are_equal(v14, &nw_protocol_http2_identifier::http2_protocol_identifier)) {
    goto LABEL_19;
  }
  int v15 = *(void **)(a2 + 16);
  if (nw_protocol_http3_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http3_identifier::onceToken, &__block_literal_global_10);
  }
  if (nw_protocols_are_equal(v15, &nw_protocol_http3_identifier::http3_protocol_identifier))
  {
LABEL_19:
    BOOL v16 = 1;
  }

  else
  {
    uint64_t v45 = *(void **)(a2 + 16);
    if (nw_protocol_oblivious_http_identifier::onceToken != -1) {
      dispatch_once(&nw_protocol_oblivious_http_identifier::onceToken, &__block_literal_global_28577);
    }
    BOOL v16 = nw_protocols_are_equal(v45, &nw_protocol_oblivious_http_identifier::ohttp_protocol_identifier);
  }

  uint64_t v17 = *(void *)(v6 + 136);
  if (v17) {
    BOOL v18 = 1;
  }
  else {
    BOOL v18 = !v12 && !v16;
  }
  if (!v18)
  {
    if ((*(_BYTE *)(v6 + 294) & 4) == 0)
    {
      if (gLogDatapath)
      {
        unint64_t v90 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v6 + 208;
          *(_WORD *)&_BYTE buf[22] = 2080;
          unint64_t v116 = " ";
          *(_WORD *)int v117 = 2048;
          *(void *)&v117[2] = a2;
          _os_log_impl( &dword_181A5C000,  v90,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%ssetting http_messaging %p",  buf,  0x2Au);
        }
      }
    }

    *(void *)(v6 + 136) = a2;
LABEL_33:
    if ((*(_BYTE *)(v6 + 294) & 1) == 0 && v16)
    {
      if ((*(_BYTE *)(v6 + 294) & 4) == 0)
      {
        if (gLogDatapath)
        {
          unint64_t v91 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v92 = *(void *)(v6 + 136);
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = v6 + 208;
            *(_WORD *)&_BYTE buf[22] = 2080;
            unint64_t v116 = " ";
            *(_WORD *)int v117 = 2048;
            *(void *)&v117[2] = v92;
            *(_WORD *)&v117[10] = 2048;
            *(void *)&v117[12] = a2;
            _os_log_impl( &dword_181A5C000,  v91,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sreplacing http_messaging %p with %p",  buf,  0x34u);
          }
        }
      }

      *(void *)(v6 + 136) = a2;
    }

    if (*(_DWORD *)(*(void *)(a2 + 16) + 36LL) != 2)
    {
      if ((*(_BYTE *)(v6 + 294) & 4) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v44 = (os_log_s *)gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_override_http_messaging";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = v6 + 208;
          *(_WORD *)&_BYTE buf[22] = 2080;
          unint64_t v116 = " ";
          _os_log_impl( &dword_181A5C000,  v44,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sReverse proxy tunnel is not multiplex",  buf,  0x20u);
        }
      }

      return 1LL;
    }

    *(void *)(v6 + 136) = a2;
    nw_protocol_add_listen_handler(a2, v6 + 64);
    uint64_t v21 = *(void *)(v6 + 72);
    if (v21 != *(void *)(v6 + 136)) {
      *(void *)(v6 + 136) = v21;
    }
    if (!a3 || !nw_protocol_metadata_is_http_connection(a3)) {
      goto LABEL_76;
    }
    char v22 = os_retain(a3);
    char v23 = *(_BYTE *)(v6 + 152);
    if ((v23 & 1) != 0)
    {
      uint64_t v24 = *(void **)(v6 + 144);
      if (v24)
      {
        os_release(v24);
        char v23 = *(_BYTE *)(v6 + 152);
      }
    }

    *(void *)(v6 + 144) = v22;
    *(_BYTE *)(v6 + 152) = v23 | 1;
    id v25 = v22;
    __int16 v26 = &__block_literal_global_31;
    id v27 = &__block_literal_global_31;
    uint64_t v28 = MEMORY[0x1895F87A8];
    if (v25)
    {
      nw_protocol_options_t v29 = (id *)v25;
      id v30 = v29[1];

      if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
      }
      BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v30,  nw_protocol_copy_http_connection_definition_definition);

      if (is_equal_unsafe)
      {
        *(void *)buf = v28;
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&buf[16] = __nw_http_connection_metadata_set_certificate_added_handler_block_invoke;
        unint64_t v116 = (const char *)&unk_189BC67A0;
        *(void *)&v117[8] = v6;
        id v32 = &__block_literal_global_31;
        *(void *)int v117 = &__block_literal_global_31;
        if (v29[4])
        {
          (*(void (**)(_BYTE *))&buf[16])(buf);
          __int16 v26 = *(void **)v117;
        }

        goto LABEL_55;
      }

      __nwlog_obj();
      uint64_t v97 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_certificate_added_handler";
      unint64_t v94 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      char v114 = 0;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        unint64_t v95 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v98 = type[0];
        if (os_log_type_enabled(v95, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_certificate_added_handler";
          _os_log_impl(&dword_181A5C000, v95, v98, "%{public}s metadata must be http_connection", buf, 0xCu);
        }
      }

      else if (v114)
      {
        unint64_t v102 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        unint64_t v95 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v103 = type[0];
        BOOL v104 = os_log_type_enabled(v95, type[0]);
        if (v102)
        {
          if (v104)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_set_certificate_added_handler";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = v102;
            _os_log_impl( &dword_181A5C000,  v95,  v103,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v102);
          if (!v94)
          {
LABEL_55:

            BOOL v33 = *(void **)(v6 + 144);
            *(void *)os_log_type_t type = v28;
            uint64_t v110 = 0x40000000LL;
            unint64_t v111 = ___ZL54nw_protocol_http_client_bottom_override_http_messagingP30nw_protocol_http_client_bottomP11nw_protocolP20nw_protocol_metadata_block_invoke_2;
            unint64_t v112 = &__block_descriptor_tmp_32_22409;
            uint64_t v113 = v6;
            nw_http_connection_metadata_enumerate_secondary_certificates(v33, type);
            parameters = (nw_parameters *)nw_protocol_get_parameters(*(void *)(v6 + 136));
            if (!parameters)
            {
LABEL_76:
              uint64_t v46 = v6 + 208;
              uint64_t v47 = &nwlog_legacy_init(void)::init_once;
              BOOL v48 = nwlog_legacy_init_once;
              BOOL v49 = &qword_18C45F000;
              os_log_type_t v50 = "nw_protocol_http_client_bottom_override_http_messaging";
              while (1)
              {
                uint64_t v52 = *(void *)(v6 + 184);
                uint64_t v51 = *(void *)(v6 + 192);
                uint64_t v53 = v52;
                if (v52 != v51)
                {
                  while (*(_DWORD *)(v53 + 8) == 2)
                  {
                    v53 += 16LL;
                    if (v53 == v51) {
                      return 1LL;
                    }
                  }
                }

                if (v53 == v51) {
                  return 1LL;
                }
                uint64_t v54 = *(void **)v53;
                int v55 = *(_DWORD *)(v53 + 8);
                uint64_t v56 = v53 + 16;
                if (v53 + 16 != v51)
                {
                  unint64_t v57 = v51 - v53 - 32;
                  if (v57 >= 0x10)
                  {
                    uint64_t v58 = (v53 - v52) >> 4;
                    uint64_t v59 = (v57 >> 4) + 1;
                    uint64_t v60 = 16 * (v59 & 0x1FFFFFFFFFFFFFFELL);
                    v53 += v60;
                    uint64_t v61 = v52 + 16 * v58 + 24;
                    uint64_t v62 = v59 & 0x1FFFFFFFFFFFFFFELL;
                    do
                    {
                      uint64_t v63 = *(void *)(v61 + 8);
                      *(void *)(v61 - 24) = *(void *)(v61 - 8);
                      *(void *)(v61 - _Block_object_dispose((const void *)(v3 - 128), 8) = v63;
                      LODWORD(v63) = *(_DWORD *)(v61 + 16);
                      *(_DWORD *)(v61 - 16) = *(_DWORD *)v61;
                      *(_DWORD *)uint64_t v61 = v63;
                      v61 += 32LL;
                      v62 -= 2LL;
                    }

                    while (v62);
                    if (v59 == (v59 & 0x1FFFFFFFFFFFFFFELL)) {
                      goto LABEL_89;
                    }
                    v56 += v60;
                  }

                  do
                  {
                    *(void *)uint64_t v53 = *(void *)v56;
                    *(_DWORD *)(v53 + _Block_object_dispose((const void *)(v3 - 128), 8) = *(_DWORD *)(v56 + 8);
                    v53 += 16LL;
                    v56 += 16LL;
                  }

                  while (v56 != v51);
                }

uint64_t ___ZL38nw_protocol_http_client_bottom_connectP11nw_protocolS0__block_invoke_2(uint64_t a1)
{
  uint64_t v2 = 1LL;
  return v2;
}

uint64_t ___ZL54nw_protocol_http_client_bottom_override_http_messagingP30nw_protocol_http_client_bottomP11nw_protocolP20nw_protocol_metadata_block_invoke_2( uint64_t a1, nw_endpoint_t endpoint)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  hostname = nw_endpoint_get_hostname(endpoint);
  unsigned int port = nw_endpoint_get_port(*(nw_endpoint_t *)(*(void *)(a1 + 32) + 120LL));
  host_with_numeric_unsigned int port = nw_endpoint_create_host_with_numeric_port(hostname, port);
  uint64_t v6 = *(void *)(a1 + 32);
  if (!v6 || (*(_BYTE *)(v6 + 294) & 4) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v8 = (os_log_s *)__nwlog_obj();
      BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
      uint64_t v6 = *(void *)(a1 + 32);
      if (v9)
      {
        os_log_type_t v10 = (const char *)(v6 + 208);
        if (!v6) {
          os_log_type_t v10 = "";
        }
        int v12 = 136446978;
        uint32_t v13 = "nw_protocol_http_client_bottom_override_http_messaging_block_invoke_2";
        __int16 v14 = 2082;
        int v15 = v10;
        os_log_type_t v11 = " ";
        if (!v6) {
          os_log_type_t v11 = "";
        }
        __int16 v16 = 2080;
        uint64_t v17 = v11;
        __int16 v18 = 2112;
        BOOL v19 = host_with_numeric_port;
        _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%smaking endpoint %@ joinable by http_client_bottom",  (uint8_t *)&v12,  0x2Au);
        uint64_t v6 = *(void *)(a1 + 32);
      }
    }
  }

  nw_protocol_http_client_bottom_endpoint_joinable(v6, (void *)host_with_numeric_port);
  if (host_with_numeric_port) {
    os_release((void *)host_with_numeric_port);
  }
  return 1LL;
}

void nw_protocol_http_client_bottom_endpoint_joinable(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v16 = "nw_protocol_http_client_bottom_endpoint_joinable";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v16 = "nw_protocol_http_client_bottom_endpoint_joinable";
      uint64_t v8 = "%{public}s called with null http_client_bottom";
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_protocol_http_client_bottom_endpoint_joinable";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_33:
        if (!v5) {
          return;
        }
        goto LABEL_34;
      }

      if (!v10) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v16 = "nw_protocol_http_client_bottom_endpoint_joinable";
      uint64_t v8 = "%{public}s called with null http_client_bottom, no backtrace";
    }

    else
    {
      uint64_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v16 = "nw_protocol_http_client_bottom_endpoint_joinable";
      uint64_t v8 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
    }

void ___ZL54nw_protocol_http_client_bottom_override_http_messagingP30nw_protocol_http_client_bottomP11nw_protocolP20nw_protocol_metadata_block_invoke( int a1, uint64_t a2, nw_endpoint_t endpoint)
{
  hostname = nw_endpoint_get_hostname(endpoint);
  unsigned int port = nw_endpoint_get_port(*(nw_endpoint_t *)(a2 + 120));
  host_with_numeric_unsigned int port = nw_endpoint_create_host_with_numeric_port(hostname, port);
  nw_protocol_http_client_bottom_endpoint_joinable(a2, (void *)host_with_numeric_port);
  if (host_with_numeric_port) {
    os_release((void *)host_with_numeric_port);
  }
}

double __nw_protocol_http_client_bottom_identifier_block_invoke()
{
  *(void *)&double result = 0x200000005LL;
  qword_18C592890 = 0x200000005LL;
  return result;
}

BOOL __nw_endpoint_flow_uses_multipath_block_invoke(uint64_t a1, int a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v25 = 0LL;
  if (!copyconninfo(a2, -1, &v25))
  {
    id v4 = v25;
    int v5 = *((_DWORD *)v25 + 7);
    BOOL v3 = v5 == 2;
    if (v5 == 2)
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(_DWORD *)v25 & 0x500) == 256;
      uint64_t v6 = (void *)v4[1];
      if (v6)
      {
        free(v6);
        v4[1] = 0LL;
      }

      os_log_type_t v7 = (void *)v4[2];
      if (v7)
      {
        free(v7);
        v4[2] = 0LL;
      }

      uint64_t v8 = (void *)v4[4];
      if (!v8)
      {
        BOOL v3 = 1LL;
LABEL_34:
        free(v4);
        return v3;
      }

BOOL ___Z44nw_endpoint_flow_get_multipath_subflow_countP27NWConcrete_nw_endpoint_flow_block_invoke( uint64_t a1, int a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v25 = 0LL;
  if (!copyconninfo(a2, -1, &v25))
  {
    id v4 = v25;
    int v5 = *((_DWORD *)v25 + 7);
    BOOL v3 = v5 == 2;
    if (v5 == 2)
    {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = **((_DWORD **)v25 + 4);
      uint64_t v6 = (void *)v4[1];
      if (v6)
      {
        free(v6);
        v4[1] = 0LL;
      }

      os_log_type_t v7 = (void *)v4[2];
      if (v7)
      {
        free(v7);
        v4[2] = 0LL;
      }

      uint64_t v8 = (void *)v4[4];
      if (!v8)
      {
        BOOL v3 = 1LL;
LABEL_34:
        free(v4);
        return v3;
      }

uint64_t ___Z46nw_endpoint_flow_copy_multipath_subflow_countsP27NWConcrete_nw_endpoint_flow_block_invoke( uint64_t a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (!copyconninfo(a2, -1, (void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)))
  {
    if (*(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) + 28LL) == 2) {
      return 1LL;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    __int16 v18 = "nw_endpoint_flow_copy_multipath_subflow_counts_block_invoke";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = (os_log_s *)(id)gLogObj;
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_endpoint_flow_copy_multipath_subflow_counts_block_invoke";
        id v9 = "%{public}s Didn't get a CIAUX_MPTCP";
LABEL_20:
        os_log_type_t v13 = v7;
        os_log_type_t v14 = v8;
LABEL_21:
        _os_log_impl(&dword_181A5C000, v13, v14, v9, buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = (os_log_s *)(id)gLogObj;
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v18 = "nw_endpoint_flow_copy_multipath_subflow_counts_block_invoke";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v11,  "%{public}s Didn't get a CIAUX_MPTCP, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_endpoint_flow_copy_multipath_subflow_counts_block_invoke";
        id v9 = "%{public}s Didn't get a CIAUX_MPTCP, no backtrace";
        os_log_type_t v13 = v7;
        os_log_type_t v14 = v11;
        goto LABEL_21;
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = (os_log_s *)(id)gLogObj;
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_endpoint_flow_copy_multipath_subflow_counts_block_invoke";
        id v9 = "%{public}s Didn't get a CIAUX_MPTCP, backtrace limit exceeded";
        goto LABEL_20;
      }
    }

LABEL_23:
    if (v6) {
      free(v6);
    }
    return 0LL;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v3 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446210;
    __int16 v18 = "nw_endpoint_flow_copy_multipath_subflow_counts_block_invoke";
    _os_log_impl(&dword_181A5C000, v3, OS_LOG_TYPE_ERROR, "%{public}s copyconninfo failed", buf, 0xCu);
  }

  return 0LL;
}

uint64_t ___Z40nw_endpoint_flow_copy_multipath_tcp_infoP27NWConcrete_nw_endpoint_flow_block_invoke( uint64_t a1, int a2)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  __int16 v28 = 0LL;
  if (!copymptcpinfo(a2, &v28))
  {
    BOOL v3 = v28;
    if (*((_DWORD *)v28 + 4))
    {
      uint64_t v4 = 0LL;
      unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (1)
      {
        uint64_t v5 = *(void *)(v3[1] + 8 * v4);
        if (!v5) {
          goto LABEL_6;
        }
        uint64_t v6 = *(_DWORD **)(v5 + 32);
        *(void *)key = 0LL;
        uint64_t v36 = 0LL;
        char v37 = 0;
        unsigned int v7 = v6[15];
        if (!v7 || if_indextoname(v7, key))
        {
          xpc_dictionary_set_data(*(xpc_object_t *)(a1 + 32), key, v6, 0x198uLL);
          goto LABEL_5;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v8 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          int v9 = v6[15];
          *(_DWORD *)buf = 136446466;
          uint64_t v30 = "nw_endpoint_flow_copy_multipath_tcp_info_block_invoke";
          __int16 v31 = 1024;
          int v32 = v9;
          _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_ERROR,  "%{public}s if_indextoname failed for outif: %d",  buf,  0x12u);
        }

        int v10 = **(_DWORD **)(StatusReg + 8);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v11 = (os_log_s *)(id)gLogObj;
        BOOL v12 = v11;
        if (v10 == 6)
        {
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v30 = "nw_endpoint_flow_copy_multipath_tcp_info_block_invoke";
            __int16 v31 = 1024;
            int v32 = 6;
            _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_ERROR,  "%{public}s if_indextoname %{darwin.errno}d",  buf,  0x12u);
          }

          goto LABEL_5;
        }

        *(_DWORD *)buf = 136446466;
        uint64_t v30 = "nw_endpoint_flow_copy_multipath_tcp_info_block_invoke";
        __int16 v31 = 1024;
        int v32 = v10;
        os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v26 = 0;
LABEL_30:
        if (v13) {
          goto LABEL_31;
        }
LABEL_5:
        BOOL v3 = v28;
LABEL_6:
      }

      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v14 = (id)gLogObj;
        os_log_type_t v15 = type;
        if (!os_log_type_enabled((os_log_t)v14, type))
        {
LABEL_29:

          goto LABEL_30;
        }

        *(_DWORD *)buf = 136446466;
        uint64_t v30 = "nw_endpoint_flow_copy_multipath_tcp_info_block_invoke";
        __int16 v31 = 1024;
        int v32 = v10;
        os_log_type_t v16 = (os_log_s *)v14;
        os_log_type_t v17 = v15;
        __int16 v18 = "%{public}s if_indextoname %{darwin.errno}d";
      }

      else
      {
        if (v26)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v20 = (os_log_s *)(id)gLogObj;
          os_log_type_t v21 = type;
          BOOL v22 = os_log_type_enabled(v20, type);
          if (backtrace_string)
          {
            if (v22)
            {
              *(_DWORD *)buf = 136446722;
              uint64_t v30 = "nw_endpoint_flow_copy_multipath_tcp_info_block_invoke";
              __int16 v31 = 1024;
              int v32 = v10;
              __int16 v33 = 2082;
              uint64_t v34 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v20,  v21,  "%{public}s if_indextoname %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
            }

            free(backtrace_string);
            if (!v13) {
              goto LABEL_5;
            }
          }

          else
          {
            if (v22)
            {
              *(_DWORD *)buf = 136446466;
              uint64_t v30 = "nw_endpoint_flow_copy_multipath_tcp_info_block_invoke";
              __int16 v31 = 1024;
              int v32 = v10;
              _os_log_impl( &dword_181A5C000,  v20,  v21,  "%{public}s if_indextoname %{darwin.errno}d, no backtrace",  buf,  0x12u);
            }

            if (!v13) {
              goto LABEL_5;
            }
          }

id nw_connection_copy_proxy_settings(void *a1)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    os_log_type_t v21 = __Block_byref_object_copy__22936;
    BOOL v22 = __Block_byref_object_dispose__22937;
    id v23 = 0LL;
    v15[0] = MEMORY[0x1895F87A8];
    v15[1] = 3221225472LL;
    void v15[2] = __nw_connection_copy_proxy_settings_block_invoke;
    v15[3] = &unk_189BC9210;
    os_log_type_t v16 = v1;
    os_log_type_t v17 = buf;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_copy_proxy_settings_block_invoke((uint64_t)v15);
    os_unfair_lock_unlock(v2 + 34);
    BOOL v3 = *(void **)(*(void *)&buf[8] + 40LL);
    if (v3)
    {
      uint64_t v4 = v3;
      id v5 = v4[23];
    }

    else
    {
      id v5 = 0LL;
    }

    _Block_object_dispose(buf, 8);
    goto LABEL_6;
  }

  __nwlog_obj();
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_copy_proxy_settings";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v8, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_copy_proxy_settings";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
      }
    }

    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_copy_proxy_settings";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_copy_proxy_settings";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_copy_proxy_settings";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t __Block_byref_object_copy__22936(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__22937(uint64_t a1)
{
}

void __nw_connection_copy_proxy_settings_block_invoke(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  uint64_t v2 = (void *)nw_endpoint_handler_copy_connected_path(*(void **)(*(void *)(a1 + 32) + 144LL));
  BOOL v3 = v2;
  if (v2)
  {
    uint64_t v4 = v2;
    id v5 = v4[2];

    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
    unsigned int v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL))
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 16LL);
      if (v8)
      {
        if (!nw_path_parameters_get_logging_disabled(*(void *)(v8 + 104)))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          int v9 = (os_log_s *)(id)gconnectionLogObj;
          if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
            goto LABEL_16;
          }
          int v10 = *(_DWORD *)(*(void *)(a1 + 32) + 448LL);
          int v14 = 136446466;
          os_log_type_t v15 = "nw_connection_copy_proxy_settings_block_invoke";
          __int16 v16 = 1024;
          int v17 = v10;
          os_log_type_t v11 = "%{public}s [C%u] has no connected parameters";
LABEL_15:
          _os_log_impl(&dword_181A5C000, v9, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v14, 0x12u);
LABEL_16:
        }
      }
    }
  }

  else
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 16LL);
    if (v12 && !nw_path_parameters_get_logging_disabled(*(void *)(v12 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      int v9 = (os_log_s *)(id)gconnectionLogObj;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      int v13 = *(_DWORD *)(*(void *)(a1 + 32) + 448LL);
      int v14 = 136446466;
      os_log_type_t v15 = "nw_connection_copy_proxy_settings_block_invoke";
      __int16 v16 = 1024;
      int v17 = v13;
      os_log_type_t v11 = "%{public}s [C%u] has no connected path";
      goto LABEL_15;
    }
  }
}

void ___ZL20nw_mem_region_updateP13nw_mem_region_block_invoke(uint64_t a1)
{
  uint64_t v49 = *MEMORY[0x1895F89C0];
  size_t v1 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v1 + 384))
  {
    if (gLogDatapath)
    {
      __int16 v33 = (os_log_s *)__nwlog_obj();
      BOOL v34 = os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG);
      size_t v1 = *(void *)(a1 + 32);
      if (v34)
      {
        int v35 = *(_DWORD *)(v1 + 384);
        *(_DWORD *)buf = 136446466;
        uint64_t v42 = "nw_mem_region_update_block_invoke";
        __int16 v43 = 1024;
        LODWORD(v44) = v35;
        _os_log_impl(&dword_181A5C000, v33, OS_LOG_TYPE_DEBUG, "%{public}s waking up %u waiters to reclaim", buf, 0x12u);
        size_t v1 = *(void *)(a1 + 32);
      }
    }

    *(_DWORD *)(v1 + 384) = 0;
  }

  unint64_t v2 = *(void *)(v1 + 328);
  if (v2 <= 1 << (flsll(3LL * *(void *)(v1 + 16) + 4) - 2)) {
    size_t v3 = 1 << (flsll(3LL * *(void *)(v1 + 16) + 4) - 2);
  }
  else {
    size_t v3 = *(void *)(v1 + 328);
  }
  if (*(void *)(v1 + 336) >= v3) {
    size_t v4 = v3;
  }
  else {
    size_t v4 = *(void *)(v1 + 336);
  }
  unint64_t v5 = *(void *)(v1 + 352) + 1LL;
  if (v4 < v5 >> 1 || v4 > 2 * v5)
  {
    if (!v4 || v4 >> 60)
    {
      uint64_t v36 = (os_log_s *)__nwlog_obj();
      os_log_type_enabled(v36, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      uint64_t v42 = "strict_calloc";
      char v37 = (void *)_os_log_send_and_compose_impl();
      free(v37);
    }

    unsigned int v7 = (char *)calloc(v4, 0x10uLL);
    if (v7)
    {
      if (!v4) {
        goto LABEL_27;
      }
      goto LABEL_19;
    }

    uint64_t v38 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v38, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    uint64_t v42 = "strict_calloc";
    __int16 v43 = 2048;
    size_t v44 = v4;
    __int16 v45 = 2048;
    *(void *)uint64_t v46 = 16LL;
    nw_protocol_options_t v39 = (void *)_os_log_send_and_compose_impl();
    if (!__nwlog_abort((uint64_t)v39))
    {
      free(v39);
      if (!v4) {
        goto LABEL_27;
      }
LABEL_19:
      if (v4 >= 0xA && ((_DWORD)v4 ? (BOOL v8 = (v4 - 1) >> 32 == 0) : (BOOL v8 = 0), v8))
      {
        unint64_t v9 = v4 & 0xFFFFFFFFFFFFFFFCLL;
        id v27 = (double *)(v7 + 32);
        __int128 v28 = 0uLL;
        unint64_t v29 = v4 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          *(void *)&v50.val[1].f64[0] = v27 - 4;
          *(void *)&v50.val[1].f64[1] = v27 - 2;
          uint64_t v30 = v27;
          __int16 v31 = v27 + 2;
          v50.val[0] = 0uLL;
          vst2q_f64(*(double **)&v50.val[1].f64[0], v50);
          vst2q_f64(v27, *(float64x2x2_t *)&v28);
          v27 += 8;
          v29 -= 4LL;
        }

        while (v29);
        int v10 = v4 & 0xFFFFFFFC;
        if (v4 == v9) {
          goto LABEL_27;
        }
      }

      else
      {
        unint64_t v9 = 0LL;
        int v10 = 0;
      }

      unsigned int v11 = v10 + 1;
      do
      {
        uint64_t v12 = &v7[16 * v9];
        *(void *)uint64_t v12 = 0LL;
        *((void *)v12 + 1) = v12;
        unint64_t v9 = v11++;
      }

      while (v4 > v9);
LABEL_27:
      uint64_t v13 = *(void *)(v1 + 352);
      int v14 = *(char **)(v1 + 360);
      *(void *)(v1 + 352) = v4 - 1;
      *(void *)(v1 + 360) = v7;
      ++*(void *)(v1 + 24);
      unint64_t v15 = v13 + 1;
      if (v13 == -1)
      {
        int v16 = 0;
      }

      else
      {
        uint64_t v17 = 0LL;
        int v16 = 0;
        do
        {
          uint64_t v18 = &v14[16 * v17];
          __int16 v19 = *(uint64_t **)v18;
          if (*(void *)v18)
          {
            uint64_t v20 = *(void *)(v1 + 344);
            do
            {
              uint64_t v25 = *v19;
              char v26 = (void *)v19[1];
              if (*v19)
              {
                *(void *)(v25 + _Block_object_dispose((const void *)(v3 - 128), 8) = v26;
                char v26 = (void *)v19[1];
              }

              else
              {
                *((void *)v18 + 1) = v26;
              }

              void *v26 = v25;
              uint64_t v21 = *(void *)(v1 + 360);
              unint64_t v22 = v19[3];
              *__int16 v19 = 0LL;
              size_t v23 = v21 + 16 * (((v22 >> v20) + v22 + (v22 >> (2 * v20))) & (v4 - 1));
              uint64_t v24 = *(uint64_t ***)(v23 + 8);
              v19[1] = (uint64_t)v24;
              *uint64_t v24 = v19;
              *(void *)(v23 + _Block_object_dispose((const void *)(v3 - 128), 8) = v19;
              ++v16;
              __int16 v19 = *(uint64_t **)v18;
            }

            while (*(void *)v18);
          }

          ++v17;
        }

        while (v15 > v17);
      }

      if (gLogDatapath)
      {
        nw_protocol_options_t v40 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136447234;
          uint64_t v42 = "nw_mem_region_hash_rescale";
          __int16 v43 = 2048;
          size_t v44 = v1;
          __int16 v45 = 1024;
          *(_DWORD *)uint64_t v46 = v15;
          *(_WORD *)&void v46[4] = 1024;
          *(_DWORD *)&v46[6] = v4;
          __int16 v47 = 1024;
          int v48 = v16;
          _os_log_impl( &dword_181A5C000,  v40,  OS_LOG_TYPE_DEBUG,  "%{public}s nwr %p old_size %u new_size %u [%u moved]",  buf,  0x28u);
        }
      }

      if (v14) {
        free(v14);
      }
      return;
    }

void nw_mem_region_release(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  int v1 = *(_DWORD *)(a1 + 4) - 1;
  *(_DWORD *)(a1 + 4) = v1;
  if (!v1)
  {
    if (gLogDatapath)
    {
      uint64_t v25 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        __int128 v28 = "nw_mem_region_destroy";
        __int16 v29 = 2082;
        *(void *)uint64_t v30 = a1 + 160;
        *(_WORD *)&v30[8] = 2048;
        *(void *)&v30[10] = a1;
        _os_log_impl(&dword_181A5C000, v25, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s: nwr %p", buf, 0x20u);
      }
    }

    if (*(void *)(a1 + 16))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
      uint64_t v3 = *(void *)(a1 + 16);
      *(_DWORD *)buf = 136446978;
      __int128 v28 = "nw_mem_region_destroy";
      __int16 v29 = 2082;
      *(void *)uint64_t v30 = a1 + 160;
      *(_WORD *)&v30[8] = 2048;
      *(void *)&v30[10] = a1;
      *(_WORD *)&v30[18] = 2048;
      *(void *)&v30[20] = v3;
      size_t v4 = (void *)_os_log_send_and_compose_impl();
      if (__nwlog_abort((uint64_t)v4))
      {
LABEL_42:
        __break(1u);
        return;
      }

      free(v4);
    }

    if (*(void *)(a1 + 144) || *(void *)(a1 + 152))
    {
      os_unfair_lock_lock((os_unfair_lock_t)&nw_mem_region_lock);
      uint64_t v5 = *(void *)(a1 + 144);
      uint64_t v6 = *(void **)(a1 + 152);
      if (v5)
      {
        *(void *)(v5 + 152) = v6;
        uint64_t v6 = *(void **)(a1 + 152);
      }

      else
      {
        qword_18C45F258 = *(void *)(a1 + 152);
      }

      *uint64_t v6 = v5;
      os_unfair_lock_unlock((os_unfair_lock_t)&nw_mem_region_lock);
    }

    if (gLogDatapath)
    {
      char v26 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        __int128 v28 = "nw_mem_region_depopulate";
        __int16 v29 = 2082;
        *(void *)uint64_t v30 = a1 + 160;
        _os_log_impl(&dword_181A5C000, v26, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s", buf, 0x16u);
      }
    }

    uint64_t v7 = *(void *)(a1 + 368);
    if (v7)
    {
      BOOL v8 = (vm_map_t *)MEMORY[0x1895FBBE0];
      do
      {
        while (1)
        {
          uint64_t v9 = *(void *)v7;
          if (mach_vm_deallocate(*v8, *(void *)(v7 + 24), *(void *)(a1 + 88)))
          {
            uint64_t v13 = (os_log_s *)__nwlog_obj();
            os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446466;
            __int128 v28 = "nw_mem_region_depopulate";
            __int16 v29 = 2082;
            *(void *)uint64_t v30 = "VERIFY result == 0 failed";
            int v14 = (void *)_os_log_send_and_compose_impl();
            free(v14);
          }

          *(void *)(v7 + 24) = 0LL;
          *(void *)(v7 + 32) = 0LL;
          *(_DWORD *)(v7 + 4_Block_object_dispose((const void *)(v3 - 128), 8) = 1;
          unint64_t v10 = *(unsigned int *)(v7 + 40);
          nw_segment_freelist_remove((void *)a1, (uint64_t *)v7, 1);
          unint64_t v11 = *(unsigned int *)(v7 + 40);
          uint64_t v12 = *(void *)(a1 + 304);
          if (gLogDatapath)
          {
            unint64_t v15 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v16 = *(void *)(v7 + 24);
              uint64_t v17 = *(void *)(v7 + 32);
              int v18 = *(_DWORD *)(a1 + 240);
              *(_DWORD *)buf = 136447234;
              __int128 v28 = "nw_segment_destroy";
              __int16 v29 = 1024;
              *(_DWORD *)uint64_t v30 = v11;
              *(_WORD *)&v30[4] = 2048;
              *(void *)&v30[6] = v16;
              *(_WORD *)&v30[14] = 2048;
              *(void *)&v30[16] = v17;
              *(_WORD *)&v30[24] = 1024;
              *(_DWORD *)&v30[26] = v18;
              _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_DEBUG,  "%{public}s   [%u] [0x%llx-0x%llx) 0x%X",  buf,  0x2Cu);
            }
          }

          *(void *)(v12 + ((v11 >> 3) & 0x1FFFFFF8)) |= 1LL << v11;
          malloc_zone_free((malloc_zone_t *)g_slab_zone, (void *)v7);
          if (((*(void *)(*(void *)(a1 + 304) + ((v10 >> 3) & 0x1FFFFFF8)) >> v10) & 1) == 0) {
            break;
          }
          uint64_t v7 = v9;
          if (!v9) {
            goto LABEL_26;
          }
        }

        __int16 v19 = (os_log_s *)__nwlog_obj();
        os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446466;
        __int128 v28 = "nw_mem_region_depopulate";
        __int16 v29 = 2082;
        *(void *)uint64_t v30 = "VERIFY bit_test(nwr->nwr_seg_bmap[i / BMAPSZ], i % BMAPSZ) failed";
        uint64_t v20 = (void *)_os_log_send_and_compose_impl();
        free(v20);
        uint64_t v7 = v9;
      }

      while (v9);
    }

void nw_mem_region_stats_dump()
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  os_unfair_lock_lock((os_unfair_lock_t)&nw_mem_region_lock);
  id v0 = (void *)nw_mem_region_head;
  if (nw_mem_region_head)
  {
    do
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v1 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        uint64_t v2 = v0[4];
        uint64_t v3 = v0[5];
        uint64_t v4 = v0[6];
        uint64_t v5 = v0[7];
        *(_DWORD *)buf = 136447490;
        uint64_t v7 = "nw_mem_region_stats_dump";
        __int16 v8 = 2082;
        uint64_t v9 = v0 + 20;
        __int16 v10 = 2048;
        uint64_t v11 = v2;
        __int16 v12 = 2048;
        uint64_t v13 = v4;
        __int16 v14 = 2048;
        uint64_t v15 = v3;
        __int16 v16 = 2048;
        uint64_t v17 = v5;
        _os_log_impl( &dword_181A5C000,  v1,  OS_LOG_TYPE_INFO,  "%{public}s \n \n %{public}s: \n \tNumber of Segments Created %llu\n \tMaximum Segment Used %llu\n \tNumber of Segments Freed %llu\n \tNumber of Segment Alloc Failures %llu",  buf,  0x3Eu);
      }

      id v0 = (void *)v0[18];
    }

    while (v0);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&nw_mem_region_lock);
}

void sub_181F79114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181F793A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181F7956C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181F7962C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181F79864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_device_color(void *a1)
{
  *(void *)&v40[13] = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    char v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v38 = "nw_endpoint_get_device_color";
    id v27 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        __int128 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v38 = "nw_endpoint_get_device_color";
          _os_log_impl(&dword_181A5C000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }

      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        __int128 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v38 = "nw_endpoint_get_device_color";
            __int16 v39 = 2082;
            *(void *)nw_protocol_options_t v40 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v28,  v31,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }

        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v38 = "nw_endpoint_get_device_color";
          _os_log_impl(&dword_181A5C000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        __int128 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v38 = "nw_endpoint_get_device_color";
          _os_log_impl( &dword_181A5C000,  v28,  v33,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181F79E48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_advertised_route(void *a1)
{
  *(void *)&v40[13] = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    char v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v38 = "nw_endpoint_get_advertised_route";
    id v27 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        __int128 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v38 = "nw_endpoint_get_advertised_route";
          _os_log_impl(&dword_181A5C000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }

      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        __int128 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v38 = "nw_endpoint_get_advertised_route";
            __int16 v39 = 2082;
            *(void *)nw_protocol_options_t v40 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v28,  v31,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }

        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v38 = "nw_endpoint_get_advertised_route";
          _os_log_impl(&dword_181A5C000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        __int128 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v38 = "nw_endpoint_get_advertised_route";
          _os_log_impl( &dword_181A5C000,  v28,  v33,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181F7A468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181F7AB38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_set_device_color(void *a1, int a2)
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  int v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_color";
    uint64_t v30 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (__nwlog_fault(v30, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_color";
          _os_log_impl(&dword_181A5C000, v31, v32, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }

      else if (v38)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v34 = type;
        BOOL v35 = os_log_type_enabled(v31, type);
        if (backtrace_string)
        {
          if (v35)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_color";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v31,  v34,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_41;
        }

        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_color";
          _os_log_impl(&dword_181A5C000, v31, v34, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v36 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_color";
          _os_log_impl( &dword_181A5C000,  v31,  v36,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181F7B16C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_set_advertised_route(void *a1, int a2)
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  int v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_set_advertised_route";
    uint64_t v30 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (__nwlog_fault(v30, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_advertised_route";
          _os_log_impl(&dword_181A5C000, v31, v32, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }

      else if (v38)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v34 = type;
        BOOL v35 = os_log_type_enabled(v31, type);
        if (backtrace_string)
        {
          if (v35)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_set_advertised_route";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v31,  v34,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_41;
        }

        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_advertised_route";
          _os_log_impl(&dword_181A5C000, v31, v34, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v36 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_advertised_route";
          _os_log_impl( &dword_181A5C000,  v31,  v36,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181F7B7E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *nw_endpoint_create_apple_service(const char *a1, const char *a2)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    os_log_type_t v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v47 = "nw_endpoint_create_apple_service";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v44 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v33 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v47 = "nw_endpoint_create_apple_service";
        _os_log_impl(&dword_181A5C000, v8, v33, "%{public}s called with null apple_id", buf, 0xCu);
      }

      goto LABEL_57;
    }

    if (v44 == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v39 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v47 = "nw_endpoint_create_apple_service";
        _os_log_impl( &dword_181A5C000,  v8,  v39,  "%{public}s called with null apple_id, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_57;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v35 = type[0];
    BOOL v36 = os_log_type_enabled(v8, type[0]);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v47 = "nw_endpoint_create_apple_service";
        _os_log_impl(&dword_181A5C000, v8, v35, "%{public}s called with null apple_id, no backtrace", buf, 0xCu);
      }

      goto LABEL_57;
    }

    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v47 = "nw_endpoint_create_apple_service";
      __int16 v48 = 2082;
      uint64_t v49 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v8,  v35,  "%{public}s called with null apple_id, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_93;
  }

  size_t v4 = strlen(a1);
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    __int16 v47 = "nw_endpoint_create_apple_service";
    __int16 v48 = 2082;
    uint64_t v49 = "apple_id";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v44 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v8 = (os_log_s *)(id)gLogObj;
      os_log_type_t v9 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v47 = "nw_endpoint_create_apple_service";
        __int16 v48 = 2082;
        uint64_t v49 = "apple_id";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s invalid empty string %{public}s", buf, 0x16u);
      }

      goto LABEL_57;
    }

    if (v44 == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v8 = (os_log_s *)(id)gLogObj;
      os_log_type_t v19 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v47 = "nw_endpoint_create_apple_service";
        __int16 v48 = 2082;
        uint64_t v49 = "apple_id";
        _os_log_impl( &dword_181A5C000,  v8,  v19,  "%{public}s invalid empty string %{public}s, backtrace limit exceeded",  buf,  0x16u);
      }

      goto LABEL_57;
    }

    os_log_type_t v11 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v8 = (os_log_s *)(id)gLogObj;
    os_log_type_t v12 = type[0];
    BOOL v13 = os_log_type_enabled(v8, type[0]);
    if (!v11)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v47 = "nw_endpoint_create_apple_service";
        __int16 v48 = 2082;
        uint64_t v49 = "apple_id";
        _os_log_impl(&dword_181A5C000, v8, v12, "%{public}s invalid empty string %{public}s, no backtrace", buf, 0x16u);
      }

      goto LABEL_57;
    }

    if (v13)
    {
      *(_DWORD *)buf = 136446722;
      __int16 v47 = "nw_endpoint_create_apple_service";
      __int16 v48 = 2082;
      uint64_t v49 = "apple_id";
      __int16 v50 = 2082;
      uint64_t v51 = v11;
      _os_log_impl( &dword_181A5C000,  v8,  v12,  "%{public}s invalid empty string %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
    }

    goto LABEL_37;
  }

  if (v4 < 0x400)
  {
    if (a2)
    {
      size_t v10 = strlen(a2);
      if (v10)
      {
        if (v10 >= 0x400)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v5 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            __int16 v47 = "nw_endpoint_create_apple_service";
            __int16 v48 = 2082;
            uint64_t v49 = "service";
            __int16 v50 = 1024;
            LODWORD(v51) = 1024;
            _os_log_impl(&dword_181A5C000, v5, OS_LOG_TYPE_ERROR, "%{public}s %{public}s is longer than %d", buf, 0x1Cu);
          }

          goto LABEL_6;
        }

        uuid_generate_random((unsigned __int8 *)type);
        BOOL v16 = -[NWConcrete_nw_application_service_endpoint initWithApplicationService:alias:serviceUUID:deviceName:deviceModel:contactID:]( objc_alloc(&OBJC_CLASS___NWConcrete_nw_application_service_endpoint),  a2,  a1,  (const unsigned __int8 *)type,  0LL,  0LL,  0LL);
        int v17 = (void *)v16;
        if (v16)
        {
          id v18 = (id)v16;
LABEL_70:

          return v17;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v22 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        __int16 v47 = "nw_endpoint_create_apple_service";
        os_log_type_t v23 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t v44 = OS_LOG_TYPE_ERROR;
        char v43 = 0;
        if (__nwlog_fault(v23, &v44, &v43))
        {
          if (v44 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v25 = v44;
            if (os_log_type_enabled(v24, v44))
            {
              *(_DWORD *)buf = 136446210;
              __int16 v47 = "nw_endpoint_create_apple_service";
              _os_log_impl( &dword_181A5C000,  v24,  v25,  "%{public}s NWOSApplicationServiceEndpoint alloc/init failed",  buf,  0xCu);
            }
          }

          else if (v43)
          {
            int v27 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v28 = v44;
            BOOL v29 = os_log_type_enabled(v24, v44);
            if (v27)
            {
              if (v29)
              {
                *(_DWORD *)buf = 136446466;
                __int16 v47 = "nw_endpoint_create_apple_service";
                __int16 v48 = 2082;
                uint64_t v49 = v27;
                _os_log_impl( &dword_181A5C000,  v24,  v28,  "%{public}s NWOSApplicationServiceEndpoint alloc/init failed, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v27);
              goto LABEL_68;
            }

            if (v29)
            {
              *(_DWORD *)buf = 136446210;
              __int16 v47 = "nw_endpoint_create_apple_service";
              _os_log_impl( &dword_181A5C000,  v24,  v28,  "%{public}s NWOSApplicationServiceEndpoint alloc/init failed, no backtrace",  buf,  0xCu);
            }
          }

          else
          {
            __nwlog_obj();
            uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v31 = v44;
            if (os_log_type_enabled(v24, v44))
            {
              *(_DWORD *)buf = 136446210;
              __int16 v47 = "nw_endpoint_create_apple_service";
              _os_log_impl( &dword_181A5C000,  v24,  v31,  "%{public}s NWOSApplicationServiceEndpoint alloc/init failed, backtrace limit exceeded",  buf,  0xCu);
            }
          }
        }

void *nw_endpoint_create_application_service_internal( const char *a1, const char *a2, const unsigned __int8 *a3, const char *a4, const char *a5, int a6, int a7, const char *a8)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  if ((unint64_t)a1 | (unint64_t)a2)
  {
    BOOL v10 = -[NWConcrete_nw_application_service_endpoint initWithApplicationService:alias:serviceUUID:deviceName:deviceModel:contactID:]( objc_alloc(&OBJC_CLASS___NWConcrete_nw_application_service_endpoint),  a1,  a2,  a3,  a4,  a5,  a8);
    os_log_type_t v11 = (void *)v10;
    if (v10)
    {
      nw_endpoint_set_device_color((void *)v10, a6);
      nw_endpoint_set_advertised_route(v11, a7);
      id v12 = v11;
LABEL_11:

      return v11;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v13 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v33 = "nw_endpoint_create_application_service_internal";
    id v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (__nwlog_fault(v14, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v15 = (os_log_s *)(id)gLogObj;
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v33 = "nw_endpoint_create_application_service_internal";
          _os_log_impl( &dword_181A5C000,  v15,  v16,  "%{public}s NWOSApplicationServiceEndpoint alloc/init failed",  buf,  0xCu);
        }
      }

      else if (v30)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v15 = (os_log_s *)(id)gLogObj;
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v15, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v33 = "nw_endpoint_create_application_service_internal";
            __int16 v34 = 2082;
            os_log_type_t v35 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v15,  v19,  "%{public}s NWOSApplicationServiceEndpoint alloc/init failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          if (!v14) {
            goto LABEL_11;
          }
          goto LABEL_10;
        }

        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v33 = "nw_endpoint_create_application_service_internal";
          _os_log_impl( &dword_181A5C000,  v15,  v19,  "%{public}s NWOSApplicationServiceEndpoint alloc/init failed, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v15 = (os_log_s *)(id)gLogObj;
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v33 = "nw_endpoint_create_application_service_internal";
          _os_log_impl( &dword_181A5C000,  v15,  v21,  "%{public}s NWOSApplicationServiceEndpoint alloc/init failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v14) {
      goto LABEL_11;
    }
LABEL_10:
    free(v14);
    goto LABEL_11;
  }

  __nwlog_obj();
  id v22 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v33 = "nw_endpoint_create_application_service_internal";
  os_log_type_t v23 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v30 = 0;
  if (__nwlog_fault(v23, &type, &v30))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v33 = "nw_endpoint_create_application_service_internal";
        _os_log_impl( &dword_181A5C000,  v24,  v25,  "%{public}s called with null Either application service or alias must be specified",  buf,  0xCu);
      }
    }

    else if (v30)
    {
      os_log_type_t v26 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = type;
      BOOL v28 = os_log_type_enabled(v24, type);
      if (v26)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v33 = "nw_endpoint_create_application_service_internal";
          __int16 v34 = 2082;
          os_log_type_t v35 = v26;
          _os_log_impl( &dword_181A5C000,  v24,  v27,  "%{public}s called with null Either application service or alias must be specified, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v26);
        goto LABEL_41;
      }

      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v33 = "nw_endpoint_create_application_service_internal";
        _os_log_impl( &dword_181A5C000,  v24,  v27,  "%{public}s called with null Either application service or alias must be specified, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v33 = "nw_endpoint_create_application_service_internal";
        _os_log_impl( &dword_181A5C000,  v24,  v29,  "%{public}s called with null Either application service or alias must be specified, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F7CB0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *nw_endpoint_create_application_service(const char *a1, const unsigned __int8 *a2)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    os_log_type_t v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v40 = "nw_endpoint_create_application_service";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_endpoint_create_application_service";
        _os_log_impl(&dword_181A5C000, v8, v27, "%{public}s called with null application_service", buf, 0xCu);
      }

      goto LABEL_37;
    }

    if (!v37)
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v33 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_endpoint_create_application_service";
        _os_log_impl( &dword_181A5C000,  v8,  v33,  "%{public}s called with null application_service, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_37;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v29 = type;
    BOOL v30 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_endpoint_create_application_service";
        _os_log_impl( &dword_181A5C000,  v8,  v29,  "%{public}s called with null application_service, no backtrace",  buf,  0xCu);
      }

      goto LABEL_37;
    }

    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v40 = "nw_endpoint_create_application_service";
      __int16 v41 = 2082;
      os_log_type_t v42 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v8,  v29,  "%{public}s called with null application_service, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_73;
  }

  size_t v4 = strlen(a1);
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    os_log_type_t v40 = "nw_endpoint_create_application_service";
    __int16 v41 = 2082;
    os_log_type_t v42 = "application_service";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v8 = (os_log_s *)(id)gLogObj;
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v40 = "nw_endpoint_create_application_service";
        __int16 v41 = 2082;
        os_log_type_t v42 = "application_service";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s invalid empty string %{public}s", buf, 0x16u);
      }
    }

    else if (v37)
    {
      id v13 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v8 = (os_log_s *)(id)gLogObj;
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v8, type);
      if (v13)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446722;
          os_log_type_t v40 = "nw_endpoint_create_application_service";
          __int16 v41 = 2082;
          os_log_type_t v42 = "application_service";
          __int16 v43 = 2082;
          os_log_type_t v44 = v13;
          _os_log_impl( &dword_181A5C000,  v8,  v14,  "%{public}s invalid empty string %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v13);
        if (!v7) {
          return 0LL;
        }
        goto LABEL_39;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v40 = "nw_endpoint_create_application_service";
        __int16 v41 = 2082;
        os_log_type_t v42 = "application_service";
        _os_log_impl(&dword_181A5C000, v8, v14, "%{public}s invalid empty string %{public}s, no backtrace", buf, 0x16u);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v8 = (os_log_s *)(id)gLogObj;
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v40 = "nw_endpoint_create_application_service";
        __int16 v41 = 2082;
        os_log_type_t v42 = "application_service";
        _os_log_impl( &dword_181A5C000,  v8,  v20,  "%{public}s invalid empty string %{public}s, backtrace limit exceeded",  buf,  0x16u);
      }
    }

    goto LABEL_37;
  }

  if (v4 >= 0x400)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v5 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      os_log_type_t v40 = "nw_endpoint_create_application_service";
      __int16 v41 = 2082;
      os_log_type_t v42 = "application_service";
      __int16 v43 = 1024;
      LODWORD(v44) = 1024;
      _os_log_impl(&dword_181A5C000, v5, OS_LOG_TYPE_ERROR, "%{public}s %{public}s is longer than %d", buf, 0x1Cu);
    }

    return 0LL;
  }

  if (a2)
  {
    BOOL v10 = -[NWConcrete_nw_application_service_endpoint initWithApplicationService:alias:serviceUUID:deviceName:deviceModel:contactID:]( objc_alloc(&OBJC_CLASS___NWConcrete_nw_application_service_endpoint),  a1,  "alias",  a2,  0LL,  0LL,  0LL);
    os_log_type_t v11 = (void *)v10;
    if (v10)
    {
      id v12 = (id)v10;
LABEL_49:

      return v11;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v16 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v40 = "nw_endpoint_create_application_service";
    int v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (__nwlog_fault(v17, &type, &v37))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v18 = (os_log_s *)(id)gLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v40 = "nw_endpoint_create_application_service";
          _os_log_impl( &dword_181A5C000,  v18,  v19,  "%{public}s NWOSApplicationServiceEndpoint (serviceUUID) alloc/init failed",  buf,  0xCu);
        }
      }

      else if (v37)
      {
        os_log_type_t v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v18 = (os_log_s *)(id)gLogObj;
        os_log_type_t v22 = type;
        BOOL v23 = os_log_type_enabled(v18, type);
        if (v21)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v40 = "nw_endpoint_create_application_service";
            __int16 v41 = 2082;
            os_log_type_t v42 = v21;
            _os_log_impl( &dword_181A5C000,  v18,  v22,  "%{public}s NWOSApplicationServiceEndpoint (serviceUUID) alloc/init failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v21);
          if (!v17) {
            goto LABEL_49;
          }
          goto LABEL_48;
        }

        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v40 = "nw_endpoint_create_application_service";
          _os_log_impl( &dword_181A5C000,  v18,  v22,  "%{public}s NWOSApplicationServiceEndpoint (serviceUUID) alloc/init failed, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v18 = (os_log_s *)(id)gLogObj;
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v40 = "nw_endpoint_create_application_service";
          _os_log_impl( &dword_181A5C000,  v18,  v24,  "%{public}s NWOSApplicationServiceEndpoint (serviceUUID) alloc/init failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v17) {
      goto LABEL_49;
    }
LABEL_48:
    free(v17);
    goto LABEL_49;
  }

  __nwlog_obj();
  os_log_type_t v31 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v40 = "nw_endpoint_create_application_service";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v37 = 0;
  if (__nwlog_fault(v7, &type, &v37))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_endpoint_create_application_service";
        _os_log_impl(&dword_181A5C000, v8, v32, "%{public}s called with null service_uuid", buf, 0xCu);
      }

void *nw_endpoint_create_application_service_with_alias(const char *a1, const char *a2)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    os_log_type_t v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v47 = "nw_endpoint_create_application_service_with_alias";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v44 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v33 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v47 = "nw_endpoint_create_application_service_with_alias";
        _os_log_impl(&dword_181A5C000, v8, v33, "%{public}s called with null application_service", buf, 0xCu);
      }

      goto LABEL_57;
    }

    if (v44 == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v39 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v47 = "nw_endpoint_create_application_service_with_alias";
        _os_log_impl( &dword_181A5C000,  v8,  v39,  "%{public}s called with null application_service, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_57;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v35 = type[0];
    BOOL v36 = os_log_type_enabled(v8, type[0]);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v47 = "nw_endpoint_create_application_service_with_alias";
        _os_log_impl( &dword_181A5C000,  v8,  v35,  "%{public}s called with null application_service, no backtrace",  buf,  0xCu);
      }

      goto LABEL_57;
    }

    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v47 = "nw_endpoint_create_application_service_with_alias";
      __int16 v48 = 2082;
      uint64_t v49 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v8,  v35,  "%{public}s called with null application_service, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_93;
  }

  size_t v4 = strlen(a1);
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    __int16 v47 = "nw_endpoint_create_application_service_with_alias";
    __int16 v48 = 2082;
    uint64_t v49 = "application_service";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v44 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v8 = (os_log_s *)(id)gLogObj;
      os_log_type_t v9 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v47 = "nw_endpoint_create_application_service_with_alias";
        __int16 v48 = 2082;
        uint64_t v49 = "application_service";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s invalid empty string %{public}s", buf, 0x16u);
      }

      goto LABEL_57;
    }

    if (v44 == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v8 = (os_log_s *)(id)gLogObj;
      os_log_type_t v19 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v47 = "nw_endpoint_create_application_service_with_alias";
        __int16 v48 = 2082;
        uint64_t v49 = "application_service";
        _os_log_impl( &dword_181A5C000,  v8,  v19,  "%{public}s invalid empty string %{public}s, backtrace limit exceeded",  buf,  0x16u);
      }

      goto LABEL_57;
    }

    os_log_type_t v11 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v8 = (os_log_s *)(id)gLogObj;
    os_log_type_t v12 = type[0];
    BOOL v13 = os_log_type_enabled(v8, type[0]);
    if (!v11)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v47 = "nw_endpoint_create_application_service_with_alias";
        __int16 v48 = 2082;
        uint64_t v49 = "application_service";
        _os_log_impl(&dword_181A5C000, v8, v12, "%{public}s invalid empty string %{public}s, no backtrace", buf, 0x16u);
      }

      goto LABEL_57;
    }

    if (v13)
    {
      *(_DWORD *)buf = 136446722;
      __int16 v47 = "nw_endpoint_create_application_service_with_alias";
      __int16 v48 = 2082;
      uint64_t v49 = "application_service";
      __int16 v50 = 2082;
      uint64_t v51 = v11;
      _os_log_impl( &dword_181A5C000,  v8,  v12,  "%{public}s invalid empty string %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
    }

    goto LABEL_37;
  }

  if (v4 < 0x400)
  {
    if (a2)
    {
      size_t v10 = strlen(a2);
      if (v10)
      {
        if (v10 >= 0x400)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v5 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            __int16 v47 = "nw_endpoint_create_application_service_with_alias";
            __int16 v48 = 2082;
            uint64_t v49 = "alias";
            __int16 v50 = 1024;
            LODWORD(v51) = 1024;
            _os_log_impl(&dword_181A5C000, v5, OS_LOG_TYPE_ERROR, "%{public}s %{public}s is longer than %d", buf, 0x1Cu);
          }

          goto LABEL_6;
        }

        uuid_generate_random((unsigned __int8 *)type);
        BOOL v16 = -[NWConcrete_nw_application_service_endpoint initWithApplicationService:alias:serviceUUID:deviceName:deviceModel:contactID:]( objc_alloc(&OBJC_CLASS___NWConcrete_nw_application_service_endpoint),  a1,  a2,  (const unsigned __int8 *)type,  0LL,  0LL,  0LL);
        int v17 = (void *)v16;
        if (v16)
        {
          id v18 = (id)v16;
LABEL_70:

          return v17;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v22 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        __int16 v47 = "nw_endpoint_create_application_service_with_alias";
        BOOL v23 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t v44 = OS_LOG_TYPE_ERROR;
        char v43 = 0;
        if (__nwlog_fault(v23, &v44, &v43))
        {
          if (v44 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            os_log_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v25 = v44;
            if (os_log_type_enabled(v24, v44))
            {
              *(_DWORD *)buf = 136446210;
              __int16 v47 = "nw_endpoint_create_application_service_with_alias";
              _os_log_impl( &dword_181A5C000,  v24,  v25,  "%{public}s NWOSApplicationServiceEndpoint (serviceUUID with alias) alloc/init failed",  buf,  0xCu);
            }
          }

          else if (v43)
          {
            os_log_type_t v27 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            os_log_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v28 = v44;
            BOOL v29 = os_log_type_enabled(v24, v44);
            if (v27)
            {
              if (v29)
              {
                *(_DWORD *)buf = 136446466;
                __int16 v47 = "nw_endpoint_create_application_service_with_alias";
                __int16 v48 = 2082;
                uint64_t v49 = v27;
                _os_log_impl( &dword_181A5C000,  v24,  v28,  "%{public}s NWOSApplicationServiceEndpoint (serviceUUID with alias) alloc/init failed, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v27);
              goto LABEL_68;
            }

            if (v29)
            {
              *(_DWORD *)buf = 136446210;
              __int16 v47 = "nw_endpoint_create_application_service_with_alias";
              _os_log_impl( &dword_181A5C000,  v24,  v28,  "%{public}s NWOSApplicationServiceEndpoint (serviceUUID with alias) alloc/init failed, no backtrace",  buf,  0xCu);
            }
          }

          else
          {
            __nwlog_obj();
            os_log_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v31 = v44;
            if (os_log_type_enabled(v24, v44))
            {
              *(_DWORD *)buf = 136446210;
              __int16 v47 = "nw_endpoint_create_application_service_with_alias";
              _os_log_impl( &dword_181A5C000,  v24,  v31,  "%{public}s NWOSApplicationServiceEndpoint (serviceUUID with alias) alloc/init failed, backtrace limit exceeded",  buf,  0xCu);
            }
          }
        }

uint64_t nw_endpoint_get_application_service_alias(void *a1)
{
  *(void *)&v40[13] = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v38 = "nw_endpoint_get_application_service_alias";
    os_log_type_t v27 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_endpoint_get_application_service_alias";
          _os_log_impl(&dword_181A5C000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }

      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v38 = "nw_endpoint_get_application_service_alias";
            __int16 v39 = 2082;
            *(void *)os_log_type_t v40 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v28,  v31,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }

        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_endpoint_get_application_service_alias";
          _os_log_impl(&dword_181A5C000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_endpoint_get_application_service_alias";
          _os_log_impl( &dword_181A5C000,  v28,  v33,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181F7E8B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_application_service_name(void *a1)
{
  *(void *)&v40[13] = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v38 = "nw_endpoint_get_application_service_name";
    os_log_type_t v27 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_endpoint_get_application_service_name";
          _os_log_impl(&dword_181A5C000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }

      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v38 = "nw_endpoint_get_application_service_name";
            __int16 v39 = 2082;
            *(void *)os_log_type_t v40 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v28,  v31,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }

        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_endpoint_get_application_service_name";
          _os_log_impl(&dword_181A5C000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_endpoint_get_application_service_name";
          _os_log_impl( &dword_181A5C000,  v28,  v33,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181F7EEDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_set_application_service_name(void *a1, const char *a2)
{
  uint64_t v53 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  int v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    BOOL v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_set_application_service_name";
    os_log_type_t v33 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v49 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_set_application_service_name";
        _os_log_impl(&dword_181A5C000, v34, v35, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }

    else if (v49)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v39 = type;
      BOOL v40 = os_log_type_enabled(v34, type);
      if (backtrace_string)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_application_service_name";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v34,  v39,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_64:
        if (!v33) {
          goto LABEL_28;
        }
        goto LABEL_65;
      }

      if (v40)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_set_application_service_name";
        _os_log_impl(&dword_181A5C000, v34, v39, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v46 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_set_application_service_name";
        _os_log_impl( &dword_181A5C000,  v34,  v46,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181F7F824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_get_service_identifier(void *a1, _OWORD *a2)
{
  *(void *)&v40[13] = *MEMORY[0x1895F89C0];
  id v3 = a1;
  int v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v38 = "nw_endpoint_get_service_identifier";
    id v27 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_endpoint_get_service_identifier";
          _os_log_impl(&dword_181A5C000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }

      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        int v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v38 = "nw_endpoint_get_service_identifier";
            __int16 v39 = 2082;
            *(void *)BOOL v40 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v28,  v31,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_41;
        }

        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_endpoint_get_service_identifier";
          _os_log_impl(&dword_181A5C000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        int v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_endpoint_get_service_identifier";
          _os_log_impl( &dword_181A5C000,  v28,  v33,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181F7FE44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_set_service_identifier(void *a1, _OWORD *a2)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  int v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_set_service_identifier";
    int v30 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_set_service_identifier";
        _os_log_impl(&dword_181A5C000, v31, v32, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }

    else if (v44)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v36 = type;
      BOOL v37 = os_log_type_enabled(v31, type);
      if (backtrace_string)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_service_identifier";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v31,  v36,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_59:
        if (!v30) {
          goto LABEL_25;
        }
        goto LABEL_60;
      }

      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_set_service_identifier";
        _os_log_impl(&dword_181A5C000, v31, v36, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v41 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_set_service_identifier";
        _os_log_impl( &dword_181A5C000,  v31,  v41,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_181F806C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_device_name(void *a1)
{
  *(void *)&v40[13] = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v38 = "nw_endpoint_get_device_name";
    int v27 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_endpoint_get_device_name";
          _os_log_impl(&dword_181A5C000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }

      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        int v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v38 = "nw_endpoint_get_device_name";
            __int16 v39 = 2082;
            *(void *)BOOL v40 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v28,  v31,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }

        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_endpoint_get_device_name";
          _os_log_impl(&dword_181A5C000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        int v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v38 = "nw_endpoint_get_device_name";
          _os_log_impl( &dword_181A5C000,  v28,  v33,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181F80CE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_set_device_name(void *a1, const char *a2)
{
  uint64_t v47 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  int v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    BOOL v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_name";
    os_log_type_t v33 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (__nwlog_fault(v33, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v35 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_name";
          _os_log_impl(&dword_181A5C000, v34, v35, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }

      else if (v43)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v37 = type;
        BOOL v38 = os_log_type_enabled(v34, type);
        if (backtrace_string)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_name";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v34,  v37,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_48;
        }

        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_name";
          _os_log_impl(&dword_181A5C000, v34, v37, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v41 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_name";
          _os_log_impl( &dword_181A5C000,  v34,  v41,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181F81430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_device_model(void *a1)
{
  *(void *)&v40[13] = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v38 = "nw_endpoint_get_device_model";
    id v27 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v38 = "nw_endpoint_get_device_model";
          _os_log_impl(&dword_181A5C000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }

      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        int v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v38 = "nw_endpoint_get_device_model";
            __int16 v39 = 2082;
            *(void *)BOOL v40 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v28,  v31,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }

        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v38 = "nw_endpoint_get_device_model";
          _os_log_impl(&dword_181A5C000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        int v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v38 = "nw_endpoint_get_device_model";
          _os_log_impl( &dword_181A5C000,  v28,  v33,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181F81A50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_set_device_model(void *a1, const char *a2)
{
  uint64_t v47 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  int v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    BOOL v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_model";
    os_log_type_t v33 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (__nwlog_fault(v33, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v35 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_model";
          _os_log_impl(&dword_181A5C000, v34, v35, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }

      else if (v43)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v37 = type;
        BOOL v38 = os_log_type_enabled(v34, type);
        if (backtrace_string)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_model";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v34,  v37,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_48;
        }

        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_model";
          _os_log_impl(&dword_181A5C000, v34, v37, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v41 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_device_model";
          _os_log_impl( &dword_181A5C000,  v34,  v41,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181F82198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_contact_id(void *a1)
{
  *(void *)&v40[13] = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v38 = "nw_endpoint_get_contact_id";
    id v27 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v38 = "nw_endpoint_get_contact_id";
          _os_log_impl(&dword_181A5C000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }

      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        int v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v38 = "nw_endpoint_get_contact_id";
            __int16 v39 = 2082;
            *(void *)BOOL v40 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v28,  v31,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }

        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v38 = "nw_endpoint_get_contact_id";
          _os_log_impl(&dword_181A5C000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        int v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v38 = "nw_endpoint_get_contact_id";
          _os_log_impl( &dword_181A5C000,  v28,  v33,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181F827B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_endpoint_set_contact_id(void *a1, const char *a2)
{
  uint64_t v47 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  int v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    BOOL v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_set_contact_id";
    os_log_type_t v33 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (__nwlog_fault(v33, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v35 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_contact_id";
          _os_log_impl(&dword_181A5C000, v34, v35, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }

      else if (v43)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v37 = type;
        BOOL v38 = os_log_type_enabled(v34, type);
        if (backtrace_string)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_set_contact_id";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v34,  v37,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_48;
        }

        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_contact_id";
          _os_log_impl(&dword_181A5C000, v34, v37, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v41 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_set_contact_id";
          _os_log_impl( &dword_181A5C000,  v34,  v41,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_181F82F00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void saveAndPostNetworkdSettings(void *a1, void *a2, uint64_t a3)
{
  uint64_t v126 = *MEMORY[0x1895F89C0];
  id v4 = a1;
  id v5 = a2;
  uint64_t v88 = v5;
  if (v4 == v5 || !v4 || !v5)
  {
    if (v4 == v5) {
      goto LABEL_22;
    }
LABEL_7:
    id v6 = v4;
    [NSString stringWithUTF8String:nw_file_path_settings];
    id v7 = (void *)objc_claimAutoreleasedReturnValue();
    int v8 = v7;
    if (v4)
    {
      [v6 description];
      int v9 = (void *)objc_claimAutoreleasedReturnValue();
      [v9 stringByReplacingOccurrencesOfString:@"\n" withString:&stru_189BCAF98];
      id v10 = (id)objc_claimAutoreleasedReturnValue();

      char v11 = [v6 writeToFile:v8 atomically:1];
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v12 = (os_log_s *)(id)gLogObj;
      id v13 = v12;
      if ((v11 & 1) != 0)
      {
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "saveNetworkdSettings";
          *(_WORD *)&_BYTE buf[12] = 2114;
          *(void *)&buf[14] = v10;
          id v14 = "%{public}s Successfully wrote updated networkd settings %{public}@";
          int v15 = v13;
          os_log_type_t v16 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
          _os_log_impl(&dword_181A5C000, v15, v16, v14, buf, 0x16u);
        }
      }

      else if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "saveNetworkdSettings";
        *(_WORD *)&_BYTE buf[12] = 2114;
        *(void *)&buf[14] = v10;
        id v14 = "%{public}s failed to save networkd settings %{public}@ to file";
        int v15 = v13;
        os_log_type_t v16 = OS_LOG_TYPE_ERROR;
        goto LABEL_18;
      }

LABEL_20:
LABEL_21:

      goto LABEL_22;
    }

    if (!unlink((const char *)[v7 UTF8String]))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v10 = (id)gLogObj;
      if (os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "saveNetworkdSettings";
        _os_log_impl( &dword_181A5C000,  (os_log_t)v10,  OS_LOG_TYPE_DEFAULT,  "%{public}s Successfully unlinked networkd settings",  buf,  0xCu);
      }

      goto LABEL_20;
    }

    int v17 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v18 = (id)gLogObj;
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "saveNetworkdSettings";
    *(_WORD *)&_BYTE buf[12] = 2114;
    *(void *)&buf[14] = v8;
    *(_WORD *)&_BYTE buf[22] = 1024;
    LODWORD(v100) = v17;
    LODWORD(v85) = 28;
    uint64_t v84 = buf;
    id v19 = (void *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v93 = 0;
    if (!__nwlog_fault((const char *)v19, type, &v93))
    {
LABEL_93:
      if (v19) {
        free(v19);
      }
      goto LABEL_21;
    }

    int v20 = v17;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v21 = (os_log_s *)(id)gLogObj;
      os_log_type_t v22 = type[0];
      if (os_log_type_enabled(v21, type[0]))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "saveNetworkdSettings";
        *(_WORD *)&_BYTE buf[12] = 2114;
        *(void *)&buf[14] = v8;
        *(_WORD *)&_BYTE buf[22] = 1024;
        LODWORD(v100) = v20;
        BOOL v23 = "%{public}s unlink(%{public}@) failed %{darwin.errno}d";
LABEL_90:
        uint64_t v82 = v21;
        os_log_type_t v83 = v22;
LABEL_91:
        _os_log_impl(&dword_181A5C000, v82, v83, v23, buf, 0x1Cu);
      }
    }

    else
    {
      if (v93)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v21 = (os_log_s *)(id)gLogObj;
        os_log_type_t v80 = type[0];
        BOOL v81 = os_log_type_enabled(v21, type[0]);
        if (backtrace_string)
        {
          if (v81)
          {
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "saveNetworkdSettings";
            *(_WORD *)&_BYTE buf[12] = 2114;
            *(void *)&buf[14] = v8;
            *(_WORD *)&_BYTE buf[22] = 1024;
            LODWORD(v100) = v20;
            WORD2(v100) = 2082;
            *(void *)((char *)&v100 + 6) = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v21,  v80,  "%{public}s unlink(%{public}@) failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x26u);
          }

          free(backtrace_string);
          goto LABEL_93;
        }

        if (!v81) {
          goto LABEL_92;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "saveNetworkdSettings";
        *(_WORD *)&_BYTE buf[12] = 2114;
        *(void *)&buf[14] = v8;
        *(_WORD *)&_BYTE buf[22] = 1024;
        LODWORD(v100) = v20;
        BOOL v23 = "%{public}s unlink(%{public}@) failed %{darwin.errno}d, no backtrace";
        uint64_t v82 = v21;
        os_log_type_t v83 = v80;
        goto LABEL_91;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v21 = (os_log_s *)(id)gLogObj;
      os_log_type_t v22 = type[0];
      if (os_log_type_enabled(v21, type[0]))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "saveNetworkdSettings";
        *(_WORD *)&_BYTE buf[12] = 2114;
        *(void *)&buf[14] = v8;
        *(_WORD *)&_BYTE buf[22] = 1024;
        LODWORD(v100) = v20;
        BOOL v23 = "%{public}s unlink(%{public}@) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_90;
      }
    }

void fixFilePermissions(void *a1)
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = open((const char *)[v1 UTF8String], 2);
  if ((v2 & 0x80000000) == 0)
  {
    int v3 = v2;
    memset(&v43, 0, sizeof(v43));
    if (fstat(v2, &v43))
    {
      int v4 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v5 = (id)gLogObj;
      *(_DWORD *)os_log_type_t v37 = 136446978;
      BOOL v38 = "fixFilePermissions";
      __int16 v39 = 1024;
      *(_DWORD *)uint64_t v40 = v3;
      *(_WORD *)&v40[4] = 2114;
      *(void *)&v40[6] = v1;
      *(_WORD *)&v40[14] = 1024;
      *(_DWORD *)&v40[16] = v4;
      id v6 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v35 = 0;
      if (__nwlog_fault((const char *)v6, &type, &v35))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v7 = (os_log_s *)(id)gLogObj;
          os_log_type_t v8 = type;
          if (!os_log_type_enabled(v7, type)) {
            goto LABEL_34;
          }
          *(_DWORD *)os_log_type_t v37 = 136446978;
          BOOL v38 = "fixFilePermissions";
          __int16 v39 = 1024;
          *(_DWORD *)uint64_t v40 = v3;
          *(_WORD *)&v40[4] = 2114;
          *(void *)&v40[6] = v1;
          *(_WORD *)&v40[14] = 1024;
          *(_DWORD *)&v40[16] = v4;
          int v9 = "%{public}s fstat(%d) on %{public}@ failed %{darwin.errno}d";
LABEL_32:
          id v28 = v7;
          os_log_type_t v29 = v8;
          goto LABEL_33;
        }

        if (!v35)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v7 = (os_log_s *)(id)gLogObj;
          os_log_type_t v8 = type;
          if (!os_log_type_enabled(v7, type)) {
            goto LABEL_34;
          }
          *(_DWORD *)os_log_type_t v37 = 136446978;
          BOOL v38 = "fixFilePermissions";
          __int16 v39 = 1024;
          *(_DWORD *)uint64_t v40 = v3;
          *(_WORD *)&v40[4] = 2114;
          *(void *)&v40[6] = v1;
          *(_WORD *)&v40[14] = 1024;
          *(_DWORD *)&v40[16] = v4;
          int v9 = "%{public}s fstat(%d) on %{public}@ failed %{darwin.errno}d, backtrace limit exceeded";
          goto LABEL_32;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v7 = (os_log_s *)(id)gLogObj;
        os_log_type_t v23 = type;
        BOOL v24 = os_log_type_enabled(v7, type);
        if (!backtrace_string)
        {
          if (!v24)
          {
LABEL_34:

            if (v6) {
LABEL_35:
            }
              free(v6);
LABEL_36:
            close(v3);
            goto LABEL_37;
          }

          *(_DWORD *)os_log_type_t v37 = 136446978;
          BOOL v38 = "fixFilePermissions";
          __int16 v39 = 1024;
          *(_DWORD *)uint64_t v40 = v3;
          *(_WORD *)&v40[4] = 2114;
          *(void *)&v40[6] = v1;
          *(_WORD *)&v40[14] = 1024;
          *(_DWORD *)&v40[16] = v4;
          int v9 = "%{public}s fstat(%d) on %{public}@ failed %{darwin.errno}d, no backtrace";
          id v28 = v7;
          os_log_type_t v29 = v23;
LABEL_33:
          _os_log_impl(&dword_181A5C000, v28, v29, v9, (uint8_t *)v37, 0x22u);
          goto LABEL_34;
        }

        if (v24)
        {
          *(_DWORD *)os_log_type_t v37 = 136447234;
          BOOL v38 = "fixFilePermissions";
          __int16 v39 = 1024;
          *(_DWORD *)uint64_t v40 = v3;
          *(_WORD *)&v40[4] = 2114;
          *(void *)&v40[6] = v1;
          *(_WORD *)&v40[14] = 1024;
          *(_DWORD *)&v40[16] = v4;
          __int16 v41 = 2082;
          v42[0] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v23,  "%{public}s fstat(%d) on %{public}@ failed %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)v37,  0x2Cu);
        }

        free(backtrace_string);
      }

void updateOSLogPlistFromLevel(uint64_t a1, char a2, double a3)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  if ((a2 & 1) == 0)
  {
    __int128 v26 = 0uLL;
    getLastUpdateModTimeFromPath((const char *)nw_file_path_settings, (__darwin_time_t *)&v26 + 1, (uint64_t *)&v26);
    __int128 v25 = 0uLL;
    id v5 = objc_alloc(NSString);
    id v6 = (void *)objc_msgSend( v5,  "initWithFormat:",  @"/Library/Preferences/Logging/Subsystems/%s.plist",  nw_oslog_subsystem);
    getLastUpdateModTimeFromPath( (const char *)[v6 UTF8String],  (__darwin_time_t *)&v25 + 1,  (uint64_t *)&v25);

    __int128 v7 = v26;
    if (v26 != 0)
    {
      __int128 v8 = v25;
      if (v25 != 0
        && (*((uint64_t *)&v26 + 1) < *((uint64_t *)&v25 + 1)
         || *((void *)&v26 + 1) == *((void *)&v25 + 1) && (uint64_t)v26 < (uint64_t)v25))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v9 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136447234;
          id v28 = "updateOSLogPlistFromLevel";
          __int16 v29 = 2048;
          uint64_t v30 = (const char *)*((void *)&v7 + 1);
          __int16 v31 = 2048;
          uint64_t v32 = v7;
          __int16 v33 = 2048;
          uint64_t v34 = *((void *)&v8 + 1);
          __int16 v35 = 2048;
          uint64_t v36 = v8;
          dev_t v10 = "%{public}s skipping OSLog settings update %ld.%09ld < %ld.%09ld";
          id v11 = v9;
          os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
          uint32_t v13 = 52;
LABEL_26:
          _os_log_impl(&dword_181A5C000, v11, v12, v10, buf, v13);
          goto LABEL_31;
        }

        goto LABEL_31;
      }
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v3 = (Class *)(id)gLogObj;
    if (os_log_type_enabled((os_log_t)v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136447234;
      id v28 = "updateOSLogPlistFromLevel";
      __int16 v29 = 2048;
      uint64_t v30 = (const char *)*((void *)&v7 + 1);
      __int16 v31 = 2048;
      uint64_t v32 = v7;
      __int16 v33 = 2048;
      uint64_t v34 = *((void *)&v25 + 1);
      __int16 v35 = 2048;
      uint64_t v36 = v25;
      _os_log_impl( &dword_181A5C000,  (os_log_t)v3,  OS_LOG_TYPE_DEFAULT,  "%{public}s performing OSLog settings update %ld.%09ld, %ld.%09ld",  buf,  0x34u);
    }
  }

  gotLoadHelper_x19__OBJC_CLASS___OSLogPreferencesSubsystem(a3);
  if (objc_opt_class())
  {
    id v14 = objc_alloc(v3[263]);
    [NSString stringWithUTF8String:nw_oslog_subsystem];
    int v15 = (void *)objc_claimAutoreleasedReturnValue();
    int v9 = (os_log_s *)[v14 initWithName:v15];

    if (v9)
    {
      if (a1 <= 6) {
        int v16 = "Inherit";
      }
      else {
        int v16 = "Debug";
      }
      if (a1 <= 6) {
        uint64_t v17 = 1LL;
      }
      else {
        uint64_t v17 = 4LL;
      }
      -[os_log_s setEnabledLevel:](v9, "setEnabledLevel:", v17);
      -[os_log_s setPersistedLevel:](v9, "setPersistedLevel:", v17);
      if (-[os_log_s enabledLevel](v9, "enabledLevel") == v17
        && -[os_log_s persistedLevel](v9, "persistedLevel") == v17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v18 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          id v28 = "updateOSLogPlistFromLevel";
          __int16 v29 = 2082;
          uint64_t v30 = v16;
          id v19 = "%{public}s successfully set new logging level to %{public}s";
          os_log_type_t v20 = v18;
          os_log_type_t v21 = OS_LOG_TYPE_DEFAULT;
          uint32_t v22 = 22;
LABEL_29:
          _os_log_impl(&dword_181A5C000, v20, v21, v19, buf, v22);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v18 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          uint64_t v23 = -[os_log_s enabledLevel](v9, "enabledLevel");
          uint64_t v24 = -[os_log_s persistedLevel](v9, "persistedLevel");
          *(_DWORD *)buf = 136446978;
          id v28 = "updateOSLogPlistFromLevel";
          __int16 v29 = 2082;
          uint64_t v30 = v16;
          __int16 v31 = 2048;
          uint64_t v32 = v23;
          __int16 v33 = 2048;
          uint64_t v34 = v24;
          id v19 = "%{public}s failed to set new logging level to %{public}s (%ld,%ld)";
          os_log_type_t v20 = v18;
          os_log_type_t v21 = OS_LOG_TYPE_ERROR;
          uint32_t v22 = 42;
          goto LABEL_29;
        }
      }

      goto LABEL_31;
    }
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v9 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446210;
    id v28 = "updateOSLogPlistFromLevel";
    dev_t v10 = "%{public}s failed to allocate an OSLogPreferencesSubsystem";
    id v11 = v9;
    os_log_type_t v12 = OS_LOG_TYPE_ERROR;
    uint32_t v13 = 12;
    goto LABEL_26;
  }

void getLastUpdateModTimeFromPath(const char *a1, __darwin_time_t *a2, uint64_t *a3)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  memset(&v20, 0, sizeof(v20));
  if (!stat(a1, &v20))
  {
    uint64_t tv_nsec = v20.st_mtimespec.tv_nsec;
    *a2 = v20.st_mtimespec.tv_sec;
    *a3 = tv_nsec;
    return;
  }

  int v6 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (v6 != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    int buf = 136446722;
    uint32_t v22 = "getLastUpdateModTimeFromPath";
    __int16 v23 = 2082;
    uint64_t v24 = a1;
    __int16 v25 = 1024;
    int v26 = v6;
    __int128 v8 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault((const char *)v8, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v9 = (os_log_s *)(id)gLogObj;
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_20;
        }
        int buf = 136446722;
        uint32_t v22 = "getLastUpdateModTimeFromPath";
        __int16 v23 = 2082;
        uint64_t v24 = a1;
        __int16 v25 = 1024;
        int v26 = v6;
        id v11 = "%{public}s stat(%{public}s) failed %{darwin.errno}d";
LABEL_18:
        int v16 = v9;
        os_log_type_t v17 = v10;
        goto LABEL_19;
      }

      if (!v18)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v9 = (os_log_s *)(id)gLogObj;
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_20;
        }
        int buf = 136446722;
        uint32_t v22 = "getLastUpdateModTimeFromPath";
        __int16 v23 = 2082;
        uint64_t v24 = a1;
        __int16 v25 = 1024;
        int v26 = v6;
        id v11 = "%{public}s stat(%{public}s) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_18;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v9 = (os_log_s *)(id)gLogObj;
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (!v15)
        {
LABEL_20:

          if (!v8) {
            return;
          }
LABEL_14:
          free(v8);
          return;
        }

        int buf = 136446722;
        uint32_t v22 = "getLastUpdateModTimeFromPath";
        __int16 v23 = 2082;
        uint64_t v24 = a1;
        __int16 v25 = 1024;
        int v26 = v6;
        id v11 = "%{public}s stat(%{public}s) failed %{darwin.errno}d, no backtrace";
        int v16 = v9;
        os_log_type_t v17 = v14;
LABEL_19:
        _os_log_impl(&dword_181A5C000, v16, v17, v11, (uint8_t *)&buf, 0x1Cu);
        goto LABEL_20;
      }

      if (v15)
      {
        int buf = 136446978;
        uint32_t v22 = "getLastUpdateModTimeFromPath";
        __int16 v23 = 2082;
        uint64_t v24 = a1;
        __int16 v25 = 1024;
        int v26 = v6;
        __int16 v27 = 2082;
        id v28 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s stat(%{public}s) failed %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)&buf,  0x26u);
      }

      free(backtrace_string);
    }

    if (!v8) {
      return;
    }
    goto LABEL_14;
  }

void __handleEventForManagedNetworkSettings_block_invoke(uint64_t a1)
{
  id v2 = +[ManagedNetworkSettings sharedMNS](&OBJC_CLASS___ManagedNetworkSettings, "sharedMNS");
  [v2 handleEvent:*(void *)(a1 + 32)];
}

uint64_t nwphShouldRunCheck(void *a1, void *a2, void *a3, int a4, double a5, double a6)
{
  uint64_t v66 = *MEMORY[0x1895F89C0];
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  if (v12
    && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
    && ([v11 timeIntervalSinceDate:v12], v14 < a5))
  {
    double v40 = v14;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v16 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v57 = "nwphShouldRunCheck";
      __int16 v58 = 2080;
      __int16 v41 = "settings";
      *(_DWORD *)int buf = 136447234;
      if (a4) {
        __int16 v41 = "asset";
      }
      uint64_t v59 = (void *)v41;
      __int16 v60 = 2114;
      int64_t v61 = (int64_t)v12;
      __int16 v62 = 2048;
      int64_t v63 = *(void *)&v40;
      __int16 v64 = 2048;
      double v65 = a5;
      uint64_t v42 = "%{public}s last %s attempt was at %{public}@ (%f < %f), skipping";
      goto LABEL_37;
    }
  }

  else
  {
    if (!v13
      || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)
      || ([v11 timeIntervalSinceDate:v13], v15 >= a6))
    {
      int v16 = (os_log_s *)v12;
      id v17 = v13;
      xpc_object_t v18 = xpc_dictionary_create(0LL, 0LL, 0LL);
      if (v18)
      {
        id v52 = v11;
        id v19 = objc_alloc_init(MEMORY[0x189603F50]);
        [v19 timeIntervalSince1970];
        uint64_t v21 = (uint64_t)v20;
        int64_t v22 = (uint64_t)v20 % 86400;
        xpc_dictionary_set_int64(v18, "time_of_day", v22);
        -[os_log_s timeIntervalSince1970](v16, "timeIntervalSince1970");
        id v51 = v13;
        if (v23 <= 0.0)
        {
          int64_t v25 = -1LL;
        }

        else
        {
          -[os_log_s timeIntervalSince1970](v16, "timeIntervalSince1970");
          int64_t v25 = v21 - (uint64_t)v24;
        }

        uint64_t v32 = v16;
        xpc_dictionary_set_int64(v18, "seconds_since_last_attempt", v25);
        [v17 timeIntervalSince1970];
        id v34 = v17;
        if (v33 <= 0.0)
        {
          *(double *)&int64_t v36 = NAN;
        }

        else
        {
          [v17 timeIntervalSince1970];
          int64_t v36 = v21 - (uint64_t)v35;
        }

        xpc_dictionary_set_int64(v18, "seconds_since_last_success", v36);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v37 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        {
          BOOL v38 = "settings configuration";
          *(_DWORD *)int buf = 136447234;
          uint64_t v57 = "nwphReportCheck";
          __int16 v58 = 2080;
          if (a4) {
            BOOL v38 = "asset check";
          }
          uint64_t v59 = (void *)v38;
          __int16 v60 = 2048;
          int64_t v61 = v22;
          __int16 v62 = 2048;
          int64_t v63 = v25;
          __int16 v64 = 2048;
          double v65 = *(double *)&v36;
          _os_log_impl( &dword_181A5C000,  v37,  OS_LOG_TYPE_DEBUG,  "%{public}s %s event: (time_of_day: %lld, seconds_since_last_attempt: %lld, seconds_since_last_success: %lld)",  buf,  0x34u);
        }

        analytics_send_event_delayInitStub(v39);
        int v26 = v34;
        int v16 = v32;
        id v13 = v51;
        id v11 = v52;
        goto LABEL_45;
      }

      int v26 = v17;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v27 = (id)gLogObj;
      *(_DWORD *)int buf = 136446210;
      uint64_t v57 = "nwphReportCheck";
      id v28 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v54 = 0;
      if (!__nwlog_fault((const char *)v28, &type, &v54))
      {
LABEL_43:
        if (!v28)
        {
LABEL_45:

          uint64_t v49 = 1LL;
          goto LABEL_46;
        }

void __nwphCheckMobileAsset_block_invoke(uint64_t a1, unint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a2 < 0x24 && ((0x800003FFFuLL >> a2) & 1) != 0) {
    int v4 = off_189BB93F0[a2];
  }
  else {
    int v4 = (__CFString *)objc_msgSend(objc_alloc(NSString), "initWithFormat:", @"Invalid[%lld]", a2);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v5 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 136446466;
    double v15 = "nwphCheckMobileAsset_block_invoke";
    __int16 v16 = 2114;
    id v17 = v4;
    _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_DEFAULT,  "%{public}s Got the download catalog reply %{public}@",  buf,  0x16u);
  }

  if (!a2)
  {
    gotLoadHelper_x8__OBJC_CLASS___MAAssetQuery(v6);
    __int128 v8 = (void *)[objc_alloc(*(Class *)(v7 + 248)) initWithType:@"com.apple.MobileAsset.network.networknomicon"];
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v9 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      double v15 = "nwphCheckMobileAsset_block_invoke";
      _os_log_impl(&dword_181A5C000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s querying mobile asset metadata", buf, 0xCu);
    }

    v11[0] = MEMORY[0x1895F87A8];
    v11[1] = 3221225472LL;
    v11[2] = __nwphCheckMobileAsset_block_invoke_253;
    v11[3] = &unk_189BB92C8;
    id v12 = v8;
    id v13 = *(id *)(a1 + 32);
    id v10 = v8;
    [v10 queryMetaData:v11];
  }
}

void __nwphConfigureRemoteSettings_block_invoke()
{
  uint64_t v112 = *MEMORY[0x1895F89C0];
  [MEMORY[0x189603FC8] dictionaryWithContentsOfFile:@"/Library/Preferences/com.apple.networkd.networknomicon.plist"];
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  if (!v0) {
    id v0 = objc_alloc_init(MEMORY[0x189603FC8]);
  }
  id v1 = (void *)MEMORY[0x189603F50];
  id v2 = v0;
  [v1 date];
  int v3 = (void *)objc_claimAutoreleasedReturnValue();
  [v2 objectForKeyedSubscript:@"kNWSettingsKeyLastRun"];
  int v4 = (void *)objc_claimAutoreleasedReturnValue();
  [v2 objectForKeyedSubscript:@"kNWSettingsKeyFrequencySeconds"];
  id v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    uint64_t v6 = [v5 longLongValue];
    double v7 = 86400.0;
  }

  else
  {
    double v7 = 86400.0;
  }

  char v8 = nwphShouldRunCheck(v3, 0LL, v4, 0, 0.0, v7);

  if ((v8 & 1) != 0)
  {
    [MEMORY[0x189603F50] date];
    int v9 = (void *)objc_claimAutoreleasedReturnValue();
    [v2 setObject:v9 forKeyedSubscript:@"kNWSettingsKeyLastRun"];

    id v10 = &unk_182665000;
    if ([v2 writeToFile:@"/Library/Preferences/com.apple.networkd.networknomicon.plist" atomically:1]) {
      goto LABEL_29;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (id)gLogObj;
    *(_DWORD *)int buf = 136446722;
    uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
    __int16 v107 = 2114;
    *(void *)uint64_t v108 = v2;
    *(_WORD *)&v108[8] = 2114;
    uint64_t v109 = @"/Library/Preferences/com.apple.networkd.networknomicon.plist";
    LODWORD(v91) = 32;
    __int128 v90 = buf;
    id v12 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t v104 = OS_LOG_TYPE_ERROR;
    char v103 = 0;
    if (!__nwlog_fault((const char *)v12, &v104, &v103))
    {
LABEL_27:
      if (v12) {
LABEL_28:
      }
        free(v12);
LABEL_29:
      uint64_t v21 = (const char *)nw_setting_libnetcore_debug;
      networkd_settings_init();
      if (sCachedSettings)
      {
        pthread_mutex_lock(&sSettingsMutex);
        if (sCachedSettings) {

        }
          int64_t int64 = xpc_dictionary_get_int64((xpc_object_t)sCachedSettings, v21);
        else {
          int64_t int64 = 0LL;
        }
        pthread_mutex_unlock(&sSettingsMutex);
      }

      else
      {
        int64_t int64 = 0LL;
      }

      objc_msgSend(NSString, "stringWithUTF8String:", nw_file_path_settings, v90, v91);
      int64_t v22 = (void *)objc_claimAutoreleasedReturnValue();
      [MEMORY[0x189603FC8] dictionaryWithContentsOfFile:v22];
      id v16 = (id)objc_claimAutoreleasedReturnValue();
      if (!v16)
      {
        [MEMORY[0x189603FC8] dictionary];
        id v16 = (id)objc_claimAutoreleasedReturnValue();
      }

      unint64_t v99 = (void *)[v16 copy];
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      double v23 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        BOOL v24 = networkd_settings_get_BOOL((const char *)nw_setting_enable_quic);
        *(_DWORD *)int buf = 136446466;
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 1024;
        *(_DWORD *)uint64_t v108 = v24;
        _os_log_impl(&dword_181A5C000, v23, OS_LOG_TYPE_DEBUG, "%{public}s QUIC was set to: %u", buf, 0x12u);
      }

      uint32_t int64_with_default = networkd_settings_get_int64_with_default( (const char *)nw_setting_enable_quic_numerator,  100LL);
      uint32_t v26 = networkd_settings_get_int64_with_default((const char *)nw_setting_enable_quic_denominator, 100LL);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v27 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = v10[391];
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 1024;
        *(_DWORD *)uint64_t v108 = int64_with_default;
        *(_WORD *)&v108[4] = 1024;
        *(_DWORD *)&v108[6] = v26;
        _os_log_impl(&dword_181A5C000, v27, OS_LOG_TYPE_DEBUG, "%{public}s enable_quic sampled at: %u / %u", buf, 0x18u);
      }

      uint32_t v28 = arc4random_uniform(v26);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v29 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 1024;
        *(_DWORD *)uint64_t v108 = v28 < int64_with_default;
        _os_log_impl(&dword_181A5C000, v29, OS_LOG_TYPE_DEBUG, "%{public}s enabling QUIC: %u", buf, 0x12u);
      }

      uint64_t v30 = [objc_alloc(MEMORY[0x189607968]) initWithBool:v28 < int64_with_default];
      if (v30)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          [NSString stringWithUTF8String:nw_setting_enable_quic];
          __int16 v31 = (void *)objc_claimAutoreleasedReturnValue();
          [v16 setObject:v30 forKeyedSubscript:v31];
        }
      }

      __int128 v97 = (void *)v30;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v32 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        BOOL quic_l4s_enabled = network_config_get_quic_l4s_enabled();
        *(_DWORD *)int buf = 136446466;
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 1024;
        *(_DWORD *)uint64_t v108 = quic_l4s_enabled;
        _os_log_impl(&dword_181A5C000, v32, OS_LOG_TYPE_DEBUG, "%{public}s L4S was set to: %u", buf, 0x12u);
      }

      uint32_t v34 = networkd_settings_get_int64_with_default((const char *)nw_setting_enable_l4s_numerator, 0LL);
      uint32_t v35 = networkd_settings_get_int64_with_default((const char *)nw_setting_enable_l4s_denominator, 100LL);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int64_t v36 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = v10[391];
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 1024;
        *(_DWORD *)uint64_t v108 = v34;
        *(_WORD *)&v108[4] = 1024;
        *(_DWORD *)&v108[6] = v35;
        _os_log_impl(&dword_181A5C000, v36, OS_LOG_TYPE_DEBUG, "%{public}s enable L4S sampled at: %u / %u", buf, 0x18u);
      }

      uint64_t v37 = v10;

      uint32_t v38 = arc4random_uniform(v35);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      double v39 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
      {
        if (v38 >= v34) {
          double v40 = "disabl";
        }
        else {
          double v40 = "enabl";
        }
        *(_DWORD *)int buf = 136446466;
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 2080;
        *(void *)uint64_t v108 = v40;
        _os_log_impl(&dword_181A5C000, v39, OS_LOG_TYPE_DEBUG, "%{public}s %sing L4S", buf, 0x16u);
      }

      uint64_t v41 = [objc_alloc(MEMORY[0x189607968]) initWithBool:v38 < v34];
      if (v41)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          [NSString stringWithUTF8String:nw_setting_enable_l4s];
          uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue();
          [v16 setObject:v41 forKeyedSubscript:v42];
        }
      }

      __int128 v96 = (void *)v41;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      stat v43 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
      {
        BOOL tcp_accurate_ecn_enabled = network_config_get_tcp_accurate_ecn_enabled();
        *(_DWORD *)int buf = 136446466;
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 1024;
        *(_DWORD *)uint64_t v108 = tcp_accurate_ecn_enabled;
        _os_log_impl(&dword_181A5C000, v43, OS_LOG_TYPE_DEBUG, "%{public}s Accurate ECN was set to: %u", buf, 0x12u);
      }

      uint32_t v45 = networkd_settings_get_int64_with_default((const char *)nw_setting_enable_accurate_ecn_numerator, 0LL);
      uint32_t v46 = networkd_settings_get_int64_with_default((const char *)nw_setting_enable_accurate_ecn_denominator, 100LL);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      double v47 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = v10[391];
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 1024;
        *(_DWORD *)uint64_t v108 = v45;
        *(_WORD *)&v108[4] = 1024;
        *(_DWORD *)&v108[6] = v46;
        _os_log_impl( &dword_181A5C000,  v47,  OS_LOG_TYPE_DEBUG,  "%{public}s enable Accurate ECN sampled at: %u / %u",  buf,  0x18u);
      }

      uint32_t v48 = arc4random_uniform(v46);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v49 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
      {
        if (v48 >= v45) {
          __int16 v50 = "disabl";
        }
        else {
          __int16 v50 = "enabl";
        }
        *(_DWORD *)int buf = 136446466;
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 2080;
        *(void *)uint64_t v108 = v50;
        _os_log_impl(&dword_181A5C000, v49, OS_LOG_TYPE_DEBUG, "%{public}s %sing Accurate ECN", buf, 0x16u);
      }

      uint32_t v100 = v48;

      uint64_t v51 = [objc_alloc(MEMORY[0x189607968]) initWithBool:v48 < v45];
      if (v51)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          [NSString stringWithUTF8String:nw_setting_enable_accurate_ecn];
          id v52 = (void *)objc_claimAutoreleasedReturnValue();
          [v16 setObject:v51 forKeyedSubscript:v52];
        }
      }

      unint64_t v94 = (void *)v51;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v53 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
      {
        BOOL tcp_l4s_enabled = network_config_get_tcp_l4s_enabled();
        *(_DWORD *)int buf = 136446466;
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 1024;
        *(_DWORD *)uint64_t v108 = tcp_l4s_enabled;
        _os_log_impl(&dword_181A5C000, v53, OS_LOG_TYPE_DEBUG, "%{public}s TCP L4S was set to: %u", buf, 0x12u);
      }

      uint32_t v101 = networkd_settings_get_int64_with_default((const char *)nw_setting_enable_tcp_l4s_numerator, 0LL);
      uint32_t v55 = networkd_settings_get_int64_with_default((const char *)nw_setting_enable_tcp_l4s_denominator, 100LL);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v56 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = v10[391];
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 1024;
        *(_DWORD *)uint64_t v108 = v101;
        *(_WORD *)&v108[4] = 1024;
        *(_DWORD *)&v108[6] = v55;
        _os_log_impl( &dword_181A5C000,  v56,  OS_LOG_TYPE_DEBUG,  "%{public}s enable TCP L4S sampled at: %u / %u",  buf,  0x18u);
      }

      uint32_t v95 = v45;

      uint32_t v57 = arc4random_uniform(v55);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v58 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
      {
        if (v57 >= v101) {
          uint64_t v59 = "disabl";
        }
        else {
          uint64_t v59 = "enabl";
        }
        *(_DWORD *)int buf = 136446466;
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 2080;
        *(void *)uint64_t v108 = v59;
        _os_log_impl(&dword_181A5C000, v58, OS_LOG_TYPE_DEBUG, "%{public}s %sing TCP L4S", buf, 0x16u);
      }

      uint32_t v93 = v57;

      uint64_t v60 = [objc_alloc(MEMORY[0x189607968]) initWithBool:v57 < v101];
      uint32_t v61 = v100;
      if (v60)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          [NSString stringWithUTF8String:nw_setting_enable_tcp_l4s];
          __int16 v62 = (void *)objc_claimAutoreleasedReturnValue();
          [v16 setObject:v60 forKeyedSubscript:v62];
        }
      }

      __int128 v92 = (void *)v60;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int64_t v63 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
      {
        BOOL v64 = networkd_settings_get_BOOL((const char *)nw_setting_enable_unified_http);
        *(_DWORD *)int buf = 136446466;
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 1024;
        *(_DWORD *)uint64_t v108 = v64;
        _os_log_impl(&dword_181A5C000, v63, OS_LOG_TYPE_DEBUG, "%{public}s unified HTTP was set to: %u", buf, 0x12u);
      }

      uint32_t v65 = networkd_settings_get_int64_with_default((const char *)nw_setting_enable_unified_http_numerator, 100LL);
      uint32_t v66 = networkd_settings_get_int64_with_default((const char *)nw_setting_enable_unified_http_denominator, 100LL);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v67 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = v37[391];
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 1024;
        *(_DWORD *)uint64_t v108 = v65;
        *(_WORD *)&v108[4] = 1024;
        *(_DWORD *)&v108[6] = v66;
        _os_log_impl( &dword_181A5C000,  v67,  OS_LOG_TYPE_DEBUG,  "%{public}s enable_unified_http sampled at: %u / %u",  buf,  0x18u);
      }

      uint32_t v68 = arc4random_uniform(v66);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v69 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 1024;
        *(_DWORD *)uint64_t v108 = v68 < v65;
        _os_log_impl(&dword_181A5C000, v69, OS_LOG_TYPE_DEBUG, "%{public}s enabling unified HTTP: %u", buf, 0x12u);
      }

      uint32_t v70 = (void *)[objc_alloc(MEMORY[0x189607968]) initWithBool:v68 < v65];
      if (v70)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          [NSString stringWithUTF8String:nw_setting_enable_unified_http];
          uint32_t v71 = (void *)objc_claimAutoreleasedReturnValue();
          [v16 setObject:v70 forKeyedSubscript:v71];
        }
      }

      int64_t v72 = networkd_settings_get_int64_with_default((const char *)nw_setting_activity_investigation_id, 0LL);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint32_t v73 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v107 = 2048;
        *(void *)uint64_t v108 = v72;
        _os_log_impl( &dword_181A5C000,  v73,  OS_LOG_TYPE_DEFAULT,  "%{public}s Current Investigation ID: %llu",  buf,  0x16u);
      }

      if (v72)
      {
        uint32_t v74 = (const char *)nw_setting_activity_investigation_id_start_time;
        networkd_settings_init();
        if (sCachedSettings)
        {
          pthread_mutex_lock(&sSettingsMutex);
          if (sCachedSettings) {
            int64_t v75 = xpc_dictionary_get_int64((xpc_object_t)sCachedSettings, v74);
          }
          else {
            int64_t v75 = 0LL;
          }
          unint64_t v76 = 0x189607000uLL;
          pthread_mutex_unlock(&sSettingsMutex);
        }

        else
        {
          unint64_t v76 = 0x189607000LL;
          int64_t v75 = 0LL;
        }

        __uint64_t v77 = clock_gettime_nsec_np(_CLOCK_REALTIME);
        char v78 = (const __CFString *)v77;
        if (v75 - 1 >= v77)
        {
          BOOL v81 = (os_log_s *)[objc_alloc(MEMORY[0x189607968]) initWithUnsignedLongLong:v77];
          if (v81)
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              [*(id *)(v76 + 2600) stringWithUTF8String:nw_setting_activity_investigation_id_start_time];
              uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue();
              [v16 setObject:v81 forKeyedSubscript:v84];

              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v85 = (os_log_s *)(id)gLogObj;
              if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)int buf = 136446466;
                uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
                __int16 v107 = 2048;
                *(void *)uint64_t v108 = v78;
                _os_log_impl( &dword_181A5C000,  v85,  OS_LOG_TYPE_DEFAULT,  "%{public}s Overriding Investigation ID start time to %llu",  buf,  0x16u);
              }
            }
          }
        }

        else
        {
          unint64_t v79 = v77 - v75;
          unint64_t v80 = (v77 - v75) / 0x3B9ACA00;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v81 = (os_log_s *)(id)gLogObj;
          BOOL v82 = os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT);
          if (v79 < 0x2261034C3CA00LL)
          {
            uint32_t v61 = v100;
            if (v82)
            {
              *(_DWORD *)int buf = 136446978;
              uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
              __int16 v107 = 2048;
              *(void *)uint64_t v108 = v75;
              *(_WORD *)&v108[8] = 2048;
              uint64_t v109 = v78;
              __int16 v110 = 2048;
              unint64_t v111 = v80;
              _os_log_impl( &dword_181A5C000,  v81,  OS_LOG_TYPE_DEFAULT,  "%{public}s Investigation ID has not expired (start: %llu, now: %llu, delta_sec: %llu)",  buf,  0x2Au);
            }
          }

          else
          {
            uint32_t v61 = v100;
            if (v82)
            {
              *(_DWORD *)int buf = 136446978;
              uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
              __int16 v107 = 2048;
              *(void *)uint64_t v108 = v75;
              *(_WORD *)&v108[8] = 2048;
              uint64_t v109 = v78;
              __int16 v110 = 2048;
              unint64_t v111 = v80;
              _os_log_impl( &dword_181A5C000,  v81,  OS_LOG_TYPE_DEFAULT,  "%{public}s Investigation ID expired, removing (start: %llu, now: %llu, delta_sec: %llu)",  buf,  0x2Au);
            }

            [*(id *)(v76 + 2600) stringWithUTF8String:nw_setting_activity_investigation_id];
            os_log_type_t v83 = (void *)objc_claimAutoreleasedReturnValue();
            [v16 setObject:0 forKeyedSubscript:v83];

            [*(id *)(v76 + 2600) stringWithUTF8String:nw_setting_activity_investigation_id_start_time];
            BOOL v81 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            [v16 setObject:0 forKeyedSubscript:v81];
          }
        }
      }

      BOOL v86 = v61 < v95;
      saveAndPostNetworkdSettings(v16, v99, int64);
      BOOL v87 = !networkd_settings_get_BOOL((const char *)nw_setting_disable_l4s_aqm);
      id v88 = +[ManagedNetworkSettings sharedMNS](&OBJC_CLASS___ManagedNetworkSettings, "sharedMNS");
      [v88 queue];
      __int128 v89 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1895F87A8];
      block[1] = 3221225472LL;
      block[2] = __nwphConfigureRemoteSettings_block_invoke_374;
      block[3] = &__block_descriptor_56_e5_v8__0l;
      void block[4] = v86;
      block[5] = v93 < v101;
      block[6] = v87;
      dispatch_async(v89, block);

      goto LABEL_114;
    }

    if (v104 == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v13 = (id)gLogObj;
      os_log_type_t v14 = v104;
      if (!os_log_type_enabled((os_log_t)v13, v104))
      {
LABEL_26:

        goto LABEL_27;
      }

      *(_DWORD *)int buf = 136446722;
      uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
      __int16 v107 = 2114;
      *(void *)uint64_t v108 = v2;
      *(_WORD *)&v108[8] = 2114;
      uint64_t v109 = @"/Library/Preferences/com.apple.networkd.networknomicon.plist";
      double v15 = "%{public}s Failed to save networknomicon settings run %{public}@ to %{public}@";
    }

    else
    {
      if (v103)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v18 = (os_log_s *)(id)gLogObj;
        os_log_type_t v19 = v104;
        BOOL v20 = os_log_type_enabled(v18, v104);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)int buf = 136446978;
            uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
            __int16 v107 = 2114;
            *(void *)uint64_t v108 = v2;
            *(_WORD *)&v108[8] = 2114;
            uint64_t v109 = @"/Library/Preferences/com.apple.networkd.networknomicon.plist";
            __int16 v110 = 2082;
            unint64_t v111 = (unint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v18,  v19,  "%{public}s Failed to save networknomicon settings run %{public}@ to %{public}@, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(backtrace_string);
          id v10 = (void *)&unk_182665000;
          if (!v12) {
            goto LABEL_29;
          }
        }

        else
        {
          if (v20)
          {
            *(_DWORD *)int buf = 136446722;
            uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
            __int16 v107 = 2114;
            *(void *)uint64_t v108 = v2;
            *(_WORD *)&v108[8] = 2114;
            uint64_t v109 = @"/Library/Preferences/com.apple.networkd.networknomicon.plist";
            _os_log_impl( &dword_181A5C000,  v18,  v19,  "%{public}s Failed to save networknomicon settings run %{public}@ to %{public}@, no backtrace",  buf,  0x20u);
          }

          id v10 = (void *)&unk_182665000;
          if (!v12) {
            goto LABEL_29;
          }
        }

        goto LABEL_28;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v13 = (id)gLogObj;
      os_log_type_t v14 = v104;
      if (!os_log_type_enabled((os_log_t)v13, v104)) {
        goto LABEL_26;
      }
      *(_DWORD *)int buf = 136446722;
      uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
      __int16 v107 = 2114;
      *(void *)uint64_t v108 = v2;
      *(_WORD *)&v108[8] = 2114;
      uint64_t v109 = @"/Library/Preferences/com.apple.networkd.networknomicon.plist";
      double v15 = "%{public}s Failed to save networknomicon settings run %{public}@ to %{public}@, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, (os_log_t)v13, v14, v15, buf, 0x20u);
    goto LABEL_26;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v16 = (id)gLogObj;
  if (os_log_type_enabled((os_log_t)v16, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 136446210;
    uint64_t v106 = "nwphConfigureRemoteSettings_block_invoke";
    _os_log_impl( &dword_181A5C000,  (os_log_t)v16,  OS_LOG_TYPE_DEBUG,  "%{public}s skipping remote settings run",  buf,  0xCu);
  }

void __nwphConfigureRemoteSettings_block_invoke_374(void *a1)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  [MEMORY[0x189603FC8] dictionaryWithContentsOfFile:@"/Library/Preferences/com.apple.networkd.sysctl.plist"];
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  if (!v2) {
    id v2 = objc_alloc_init(MEMORY[0x189603FC8]);
  }
  [v2 objectForKeyedSubscript:@"net.inet.tcp.accurate_ecn"];
  int v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0) && [v3 longLongValue] == a1[4])
  {
    int v4 = 0;
  }

  else
  {
    [MEMORY[0x189607968] numberWithLongLong:a1[4]];
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    [v2 setObject:v5 forKeyedSubscript:@"net.inet.tcp.accurate_ecn"];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v6 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      double v7 = (void *)a1[4];
      *(_DWORD *)int buf = 136446466;
      int64_t v36 = "nwphConfigureRemoteSettings_block_invoke";
      __int16 v37 = 2048;
      id v38 = v7;
      _os_log_impl(&dword_181A5C000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s Changing Accurate ECN to %lld", buf, 0x16u);
    }

    int v4 = 1;
  }

  [v2 objectForKeyedSubscript:@"net.inet.tcp.l4s"];
  char v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0) || [v8 longLongValue] != a1[5])
  {
    [MEMORY[0x189607968] numberWithLongLong:a1[5]];
    int v9 = (void *)objc_claimAutoreleasedReturnValue();
    [v2 setObject:v9 forKeyedSubscript:@"net.inet.tcp.l4s"];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = (void *)a1[5];
      *(_DWORD *)int buf = 136446466;
      int64_t v36 = "nwphConfigureRemoteSettings_block_invoke";
      __int16 v37 = 2048;
      id v38 = v11;
      _os_log_impl(&dword_181A5C000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s Changing TCP L4S to %lld", buf, 0x16u);
    }

    int v4 = 1;
  }

  [v2 objectForKeyedSubscript:@"net.classq.enable_l4s"];
  id v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v12 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0) || [v12 longLongValue] != a1[6])
  {
    [MEMORY[0x189607968] numberWithLongLong:a1[6]];
    id v13 = (void *)objc_claimAutoreleasedReturnValue();
    [v2 setObject:v13 forKeyedSubscript:@"net.classq.enable_l4s"];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v14 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      double v15 = (void *)a1[6];
      *(_DWORD *)int buf = 136446466;
      int64_t v36 = "nwphConfigureRemoteSettings_block_invoke";
      __int16 v37 = 2048;
      id v38 = v15;
      _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_DEFAULT,  "%{public}s Changing L4S AQM enablement to %lld",  buf,  0x16u);
    }

    int v4 = 1;
  }

  [v2 objectForKeyedSubscript:@"net.classq.fq_codel.fq_enable_pacing"];
  id v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (v16 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0) && [v16 longLongValue] == a1[6])
  {
    if (!v4) {
      goto LABEL_43;
    }
  }

  else
  {
    [MEMORY[0x189607968] numberWithLongLong:a1[6]];
    id v17 = (void *)objc_claimAutoreleasedReturnValue();
    [v2 setObject:v17 forKeyedSubscript:@"net.classq.fq_codel.fq_enable_pacing"];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v18 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      os_log_type_t v19 = (void *)a1[6];
      *(_DWORD *)int buf = 136446466;
      int64_t v36 = "nwphConfigureRemoteSettings_block_invoke";
      __int16 v37 = 2048;
      id v38 = v19;
      _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_DEFAULT,  "%{public}s Changing L4S AQM Pacing enablement to %lld",  buf,  0x16u);
    }
  }

  if (([v2 writeToFile:@"/Library/Preferences/com.apple.networkd.sysctl.plist" atomically:1] & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v20 = (id)gLogObj;
    *(_DWORD *)int buf = 136446722;
    int64_t v36 = "nwphConfigureRemoteSettings_block_invoke";
    __int16 v37 = 2114;
    id v38 = v2;
    __int16 v39 = 2114;
    double v40 = @"/Library/Preferences/com.apple.networkd.sysctl.plist";
    LODWORD(v32) = 32;
    __int16 v31 = buf;
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v21, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int64_t v22 = (os_log_s *)(id)gLogObj;
        os_log_type_t v23 = type;
        if (!os_log_type_enabled(v22, type)) {
          goto LABEL_48;
        }
        *(_DWORD *)int buf = 136446722;
        int64_t v36 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v37 = 2114;
        id v38 = v2;
        __int16 v39 = 2114;
        double v40 = @"/Library/Preferences/com.apple.networkd.sysctl.plist";
        BOOL v24 = "%{public}s Failed to save network settings %{public}@ to %{public}@";
LABEL_46:
        id v29 = v22;
        os_log_type_t v30 = v23;
        goto LABEL_47;
      }

      if (!v33)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int64_t v22 = (os_log_s *)(id)gLogObj;
        os_log_type_t v23 = type;
        if (!os_log_type_enabled(v22, type)) {
          goto LABEL_48;
        }
        *(_DWORD *)int buf = 136446722;
        int64_t v36 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v37 = 2114;
        id v38 = v2;
        __int16 v39 = 2114;
        double v40 = @"/Library/Preferences/com.apple.networkd.sysctl.plist";
        BOOL v24 = "%{public}s Failed to save network settings %{public}@ to %{public}@, backtrace limit exceeded";
        goto LABEL_46;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int64_t v22 = (os_log_s *)(id)gLogObj;
      os_log_type_t v26 = type;
      BOOL v27 = os_log_type_enabled(v22, type);
      if (!backtrace_string)
      {
        if (!v27)
        {
LABEL_48:

          if (!v21) {
            goto LABEL_42;
          }
          goto LABEL_41;
        }

        *(_DWORD *)int buf = 136446722;
        int64_t v36 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v37 = 2114;
        id v38 = v2;
        __int16 v39 = 2114;
        double v40 = @"/Library/Preferences/com.apple.networkd.sysctl.plist";
        BOOL v24 = "%{public}s Failed to save network settings %{public}@ to %{public}@, no backtrace";
        id v29 = v22;
        os_log_type_t v30 = v26;
LABEL_47:
        _os_log_impl(&dword_181A5C000, v29, v30, v24, buf, 0x20u);
        goto LABEL_48;
      }

      if (v27)
      {
        *(_DWORD *)int buf = 136446978;
        int64_t v36 = "nwphConfigureRemoteSettings_block_invoke";
        __int16 v37 = 2114;
        id v38 = v2;
        __int16 v39 = 2114;
        double v40 = @"/Library/Preferences/com.apple.networkd.sysctl.plist";
        __int16 v41 = 2082;
        uint64_t v42 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v22,  v26,  "%{public}s Failed to save network settings %{public}@ to %{public}@, dumping backtrace:%{public}s",  buf,  0x2Au);
      }

      free(backtrace_string);
    }

    if (v21) {
LABEL_41:
    }
      free(v21);
  }

void __nwphCheckMobileAsset_block_invoke_253(uint64_t a1, unint64_t a2)
{
  uint64_t v666 = *MEMORY[0x1895F89C0];
  if (a2 < 0xD && ((0x103Fu >> a2) & 1) != 0) {
    int v4 = off_189BB9510[a2];
  }
  else {
    int v4 = (__CFString *)objc_msgSend(objc_alloc(NSString), "initWithFormat:", @"Invalid[%lld]", a2);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v5 = &qword_18C45F000;
  uint64_t v6 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int buf = 136446466;
    v659 = "nwphCheckMobileAsset_block_invoke";
    __int16 v660 = 2114;
    uint64_t v661 = (uint64_t)v4;
    _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}s queried mobile asset metadata with res %{public}@",  (uint8_t *)&buf,  0x16u);
  }

  if (!a2)
  {
    [*(id *)(a1 + 32) results];
    double v7 = (void *)objc_claimAutoreleasedReturnValue();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v8 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = [v7 count];
      id v10 = *(__CFString **)(a1 + 32);
      -[__CFString queryParams](v10, "queryParams");
      id v11 = (char *)objc_claimAutoreleasedReturnValue();
      int buf = 136446978;
      v659 = "nwphCheckMobileAsset_block_invoke";
      __int16 v660 = 2048;
      uint64_t v661 = v9;
      __int16 v662 = 2114;
      v663 = v10;
      __int16 v664 = 2114;
      v665 = v11;
      _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_DEFAULT,  "%{public}s queried mobile asset metadata got %llu results %{public}@ params %{public}@",  (uint8_t *)&buf,  0x2Au);
    }

    [MEMORY[0x189603FC8] dictionaryWithContentsOfFile:@"/Library/Preferences/com.apple.networkd.networknomicon.plist"];
    id v12 = (id)objc_claimAutoreleasedReturnValue();
    if (!v12) {
      id v12 = objc_alloc_init(MEMORY[0x189603FC8]);
    }
    [v12 setObject:0 forKeyedSubscript:@"RandomID"];
    __int128 v656 = 0u;
    __int128 v654 = 0u;
    __int128 v655 = 0u;
    __int128 v653 = 0u;
    obuint64_t j = v7;
    uint64_t v642 = [obj countByEnumeratingWithState:&v653 objects:v657 count:16];
    if (v642)
    {
      uint64_t v637 = a1;
      v638 = v4;
      v639 = v12;
      id v13 = 0LL;
      uint64_t v641 = *(void *)v654;
      while (1)
      {
        uint64_t v14 = 0LL;
        do
        {
          if (*(void *)v654 != v641) {
            objc_enumerationMutation(obj);
          }
          id v18 = *(id *)(*((void *)&v653 + 1) + 8 * v14);

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v19 = (os_log_s *)(id)v5[131];
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            int buf = 136446466;
            v659 = "nwphCheckMobileAsset_block_invoke";
            __int16 v660 = 2114;
            uint64_t v661 = (uint64_t)v18;
            _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_DEFAULT,  "%{public}s Received asset %{public}@",  (uint8_t *)&buf,  0x16u);
          }

          uint64_t v643 = v14;

          [v18 attributes];
          id v20 = (void *)objc_claimAutoreleasedReturnValue();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v21 = (os_log_s *)(id)v5[131];
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            int buf = 136446466;
            v659 = "nwphCheckMobileAsset_block_invoke";
            __int16 v660 = 2114;
            uint64_t v661 = (uint64_t)v20;
            _os_log_impl( &dword_181A5C000,  v21,  OS_LOG_TYPE_DEFAULT,  "%{public}s Received asset attributes %{public}@",  (uint8_t *)&buf,  0x16u);
          }

          uint64_t v22 = [v20 objectForKeyedSubscript:@"NetworknomiconVersion"];
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v23 = (os_log_s *)(id)v5[131];
          BOOL v24 = v23;
          v645 = (void *)v22;
          v644 = v18;
          if (v22)
          {
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
            {
              int buf = 136446466;
              v659 = "nwphCheckMobileAsset_block_invoke";
              __int16 v660 = 2114;
              uint64_t v661 = v22;
              _os_log_impl( &dword_181A5C000,  v24,  OS_LOG_TYPE_DEFAULT,  "%{public}s Received NetworknomiconVersion %{public}@",  (uint8_t *)&buf,  0x16u);
            }

            [v20 objectForKeyedSubscript:@"NetworknomiconECNPercentage"];
            BOOL v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (v24 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
            {
              unint64_t v25 = -[os_log_s longLongValue](v24, "longLongValue");
              BOOL v26 = v25 < 0x65;
            }

            else
            {
              BOOL v26 = 0;
              unint64_t v25 = -1LL;
            }

            [v20 objectForKeyedSubscript:@"NetworknomiconPollFrequencySeconds"];
            BOOL v27 = (void *)objc_claimAutoreleasedReturnValue();
            if (v27)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                uint64_t v28 = [v27 longLongValue];
                if ((unint64_t)(v28 - 3600) < 0x277EF1)
                {
                  [MEMORY[0x189607968] numberWithLongLong:v28];
                  id v29 = (void *)objc_claimAutoreleasedReturnValue();
                  [v639 setObject:v29 forKeyedSubscript:@"PollFrequencySeconds"];
                }
              }
            }

            [v20 objectForKeyedSubscript:@"NetworknomiconSettingsFrequencySeconds"];
            os_log_type_t v30 = (void *)objc_claimAutoreleasedReturnValue();
            if (v30)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                uint64_t v31 = [v30 longLongValue];
                if ((unint64_t)(v31 - 3600) < 0x277EF1)
                {
                  [MEMORY[0x189607968] numberWithLongLong:v31];
                  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue();
                  [v639 setObject:v32 forKeyedSubscript:@"kNWSettingsKeyFrequencySeconds"];
                }
              }
            }

            if (v26)
            {
              id v33 = +[ManagedNetworkSettings sharedMNS](&OBJC_CLASS___ManagedNetworkSettings, "sharedMNS");
              [v33 queue];
              uint32_t v34 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue();
              v650[0] = MEMORY[0x1895F87A8];
              v650[1] = 3221225472LL;
              v650[2] = __nwphCheckMobileAsset_block_invoke_263;
              v650[3] = &unk_189BC66E8;
              unint64_t v652 = v25;
              id v651 = v639;
              dispatch_async(v34, v650);
            }

            id v5 = &qword_18C45F000;
          }

          else if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            int buf = 136446466;
            v659 = "nwphCheckMobileAsset_block_invoke";
            __int16 v660 = 2114;
            uint64_t v661 = (uint64_t)v20;
            _os_log_impl( &dword_181A5C000,  v24,  OS_LOG_TYPE_ERROR,  "%{public}s Bad asset attributes %{public}@",  (uint8_t *)&buf,  0x16u);
          }

          [v20 objectForKeyedSubscript:@"ActivityRateVersion"];
          uint32_t v35 = (void *)objc_claimAutoreleasedReturnValue();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v17 = (os_log_s *)(id)v5[131];
          BOOL v36 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
          if (v35)
          {
            if (v36)
            {
              int buf = 136446466;
              v659 = "nwphCheckMobileAsset_block_invoke";
              __int16 v660 = 2114;
              uint64_t v661 = (uint64_t)v35;
              _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_DEFAULT,  "%{public}s Received ActivityRateVersion %{public}@",  (uint8_t *)&buf,  0x16u);
            }

            id v17 = (os_log_s *)objc_alloc_init(MEMORY[0x189603FC8]);
            __int16 v37 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "libnetcore");
            [v20 objectForKeyedSubscript:v37];
            id v38 = (void *)objc_claimAutoreleasedReturnValue();
            if (v38
              && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
              && ([v38 longLongValue] & 0x8000000000000000) == 0)
            {
              [NSString stringWithUTF8String:nw_setting_activity_report_numerator_libnetcore];
              __int16 v39 = (void *)objc_claimAutoreleasedReturnValue();
              -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v38, v39);

              int v40 = 1;
            }

            else
            {
              int v40 = 0;
            }

            __int16 v41 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "cfnetwork");
            [v20 objectForKeyedSubscript:v41];
            uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue();
            if (v42)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v42 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_cfnetwork];
                uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v42, v43);

                int v40 = 1;
              }
            }

            uint64_t v44 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "coremedia");
            [v20 objectForKeyedSubscript:v44];
            uint32_t v45 = (void *)objc_claimAutoreleasedReturnValue();
            if (v45)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v45 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_coremedia];
                uint32_t v46 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v45, v46);

                int v40 = 1;
              }
            }

            double v47 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "parsec");
            [v20 objectForKeyedSubscript:v47];
            uint32_t v48 = (void *)objc_claimAutoreleasedReturnValue();
            if (v48)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v48 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_parsec];
                uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v48, v49);

                int v40 = 1;
              }
            }

            __int16 v50 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "siri");
            [v20 objectForKeyedSubscript:v50];
            uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue();
            if (v51)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v51 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_siri];
                id v52 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v51, v52);

                int v40 = 1;
              }
            }

            id v53 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "webkit");
            [v20 objectForKeyedSubscript:v53];
            char v54 = (void *)objc_claimAutoreleasedReturnValue();
            if (v54)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v54 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_webkit];
                uint32_t v55 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v54, v55);

                int v40 = 1;
              }
            }

            uint64_t v56 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "coremedia_crabs");
            [v20 objectForKeyedSubscript:v56];
            uint32_t v57 = (void *)objc_claimAutoreleasedReturnValue();
            if (v57)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v57 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_coremedia_crabs];
                __int16 v58 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v57, v58);

                int v40 = 1;
              }
            }

            uint64_t v59 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "coremedia_hls");
            [v20 objectForKeyedSubscript:v59];
            uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue();
            if (v60)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v60 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_coremedia_hls];
                uint32_t v61 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v60, v61);

                int v40 = 1;
              }
            }

            __int16 v62 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "cloudkit");
            [v20 objectForKeyedSubscript:v62];
            int64_t v63 = (void *)objc_claimAutoreleasedReturnValue();
            if (v63)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v63 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_cloudkit];
                BOOL v64 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v63, v64);

                int v40 = 1;
              }
            }

            uint32_t v65 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "mmcs");
            [v20 objectForKeyedSubscript:v65];
            uint32_t v66 = (void *)objc_claimAutoreleasedReturnValue();
            if (v66)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v66 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_mmcs];
                uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v66, v67);

                int v40 = 1;
              }
            }

            uint32_t v68 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "mail");
            [v20 objectForKeyedSubscript:v68];
            int v69 = (void *)objc_claimAutoreleasedReturnValue();
            if (v69)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v69 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_mail];
                uint32_t v70 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v69, v70);

                int v40 = 1;
              }
            }

            uint32_t v71 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "facetime");
            [v20 objectForKeyedSubscript:v71];
            int64_t v72 = (void *)objc_claimAutoreleasedReturnValue();
            if (v72)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v72 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_facetime];
                uint32_t v73 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v72, v73);

                int v40 = 1;
              }
            }

            uint32_t v74 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "adplatforms");
            [v20 objectForKeyedSubscript:v74];
            int64_t v75 = (void *)objc_claimAutoreleasedReturnValue();
            if (v75)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v75 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_adplatforms];
                unint64_t v76 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v75, v76);

                int v40 = 1;
              }
            }

            __uint64_t v77 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "corelocation");
            [v20 objectForKeyedSubscript:v77];
            char v78 = (void *)objc_claimAutoreleasedReturnValue();
            if (v78)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v78 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_corelocation];
                unint64_t v79 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v78, v79);

                int v40 = 1;
              }
            }

            unint64_t v80 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "airplay_sender");
            [v20 objectForKeyedSubscript:v80];
            BOOL v81 = (void *)objc_claimAutoreleasedReturnValue();
            if (v81)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v81 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_airplay_sender];
                BOOL v82 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v81, v82);

                int v40 = 1;
              }
            }

            os_log_type_t v83 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "airplay_receiver");
            [v20 objectForKeyedSubscript:v83];
            uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue();
            if (v84)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v84 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_airplay_receiver];
                uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v84, v85);

                int v40 = 1;
              }
            }

            BOOL v86 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "maps");
            [v20 objectForKeyedSubscript:v86];
            BOOL v87 = (void *)objc_claimAutoreleasedReturnValue();
            if (v87)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v87 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_maps];
                id v88 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v87, v88);

                int v40 = 1;
              }
            }

            __int128 v89 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "maps_internal");
            [v20 objectForKeyedSubscript:v89];
            __int128 v90 = (void *)objc_claimAutoreleasedReturnValue();
            if (v90)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v90 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_maps_internal];
                uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v90, v91);

                int v40 = 1;
              }
            }

            __int128 v92 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "maps_external");
            [v20 objectForKeyedSubscript:v92];
            uint32_t v93 = (void *)objc_claimAutoreleasedReturnValue();
            if (v93)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v93 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_maps_external];
                unint64_t v94 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v93, v94);

                int v40 = 1;
              }
            }

            uint32_t v95 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "network_speed_test");
            [v20 objectForKeyedSubscript:v95];
            __int128 v96 = (void *)objc_claimAutoreleasedReturnValue();
            if (v96)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v96 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_network_speed_test];
                __int128 v97 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v96, v97);

                int v40 = 1;
              }
            }

            os_log_type_t v98 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "captive");
            [v20 objectForKeyedSubscript:v98];
            unint64_t v99 = (void *)objc_claimAutoreleasedReturnValue();
            if (v99)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v99 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_captive];
                uint32_t v100 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v99, v100);

                int v40 = 1;
              }
            }

            uint32_t v101 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "safe_browsing");
            [v20 objectForKeyedSubscript:v101];
            uint64_t v102 = (void *)objc_claimAutoreleasedReturnValue();
            if (v102)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v102 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_safe_browsing];
                char v103 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v102, v103);

                int v40 = 1;
              }
            }

            os_log_type_t v104 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "dns");
            [v20 objectForKeyedSubscript:v104];
            uint64_t v105 = (void *)objc_claimAutoreleasedReturnValue();
            if (v105)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v105 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_dns];
                uint64_t v106 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v105, v106);

                int v40 = 1;
              }
            }

            __int16 v107 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "music");
            [v20 objectForKeyedSubscript:v107];
            uint64_t v108 = (void *)objc_claimAutoreleasedReturnValue();
            if (v108)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v108 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_music];
                uint64_t v109 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v108, v109);

                int v40 = 1;
              }
            }

            __int16 v110 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "battery");
            [v20 objectForKeyedSubscript:v110];
            unint64_t v111 = (void *)objc_claimAutoreleasedReturnValue();
            if (v111)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v111 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_battery];
                uint64_t v112 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v111, v112);

                int v40 = 1;
              }
            }

            uint64_t v113 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "cloud_media_services");
            [v20 objectForKeyedSubscript:v113];
            uint64_t v114 = (void *)objc_claimAutoreleasedReturnValue();
            if (v114)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v114 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_cloud_media_services];
                uint64_t v115 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v114, v115);

                int v40 = 1;
              }
            }

            uint64_t v116 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "avconference");
            [v20 objectForKeyedSubscript:v116];
            uint64_t v117 = (void *)objc_claimAutoreleasedReturnValue();
            if (v117)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v117 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_avconference];
                uint64_t v118 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v117, v118);

                int v40 = 1;
              }
            }

            uint64_t v119 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "appstore");
            [v20 objectForKeyedSubscript:v119];
            uint64_t v120 = (void *)objc_claimAutoreleasedReturnValue();
            if (v120)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v120 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_appstore];
                uint64_t v121 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v120, v121);

                int v40 = 1;
              }
            }

            uint64_t v122 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "telephony_service");
            [v20 objectForKeyedSubscript:v122];
            uint64_t v123 = (void *)objc_claimAutoreleasedReturnValue();
            if (v123)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v123 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_telephony_service];
                uint64_t v124 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v123, v124);

                int v40 = 1;
              }
            }

            uint64_t v125 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "network_experiments");
            [v20 objectForKeyedSubscript:v125];
            uint64_t v126 = (void *)objc_claimAutoreleasedReturnValue();
            if (v126)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v126 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_network_experiments];
                unint64_t v127 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v126, v127);

                int v40 = 1;
              }
            }

            unint64_t v128 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "network_perf");
            [v20 objectForKeyedSubscript:v128];
            char v129 = (void *)objc_claimAutoreleasedReturnValue();
            if (v129)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v129 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_network_perf];
                uint64_t v130 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v129, v130);

                int v40 = 1;
              }
            }

            uint64_t v131 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "hotspot");
            [v20 objectForKeyedSubscript:v131];
            unint64_t v132 = (void *)objc_claimAutoreleasedReturnValue();
            if (v132)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v132 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_hotspot];
                unint64_t v133 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v132, v133);

                int v40 = 1;
              }
            }

            int v134 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "weather");
            [v20 objectForKeyedSubscript:v134];
            uint64_t v135 = (void *)objc_claimAutoreleasedReturnValue();
            if (v135)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v135 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_weather];
                unint64_t v136 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v135, v136);

                int v40 = 1;
              }
            }

            unint64_t v137 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "coordination");
            [v20 objectForKeyedSubscript:v137];
            int v138 = (void *)objc_claimAutoreleasedReturnValue();
            if (v138)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v138 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_coordination];
                uint64_t v139 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v138, v139);

                int v40 = 1;
              }
            }

            unint64_t v140 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "appstore_jet");
            [v20 objectForKeyedSubscript:v140];
            unint64_t v141 = (void *)objc_claimAutoreleasedReturnValue();
            if (v141)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v141 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_appstore_jet];
                int v142 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v141, v142);

                int v40 = 1;
              }
            }

            uint64_t v143 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "soundboard");
            [v20 objectForKeyedSubscript:v143];
            unint64_t v144 = (void *)objc_claimAutoreleasedReturnValue();
            if (v144)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v144 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_soundboard];
                unint64_t v145 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v144, v145);

                int v40 = 1;
              }
            }

            int v146 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "aea");
            [v20 objectForKeyedSubscript:v146];
            uint64_t v147 = (void *)objc_claimAutoreleasedReturnValue();
            if (v147)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v147 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_aea];
                unint64_t v148 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v147, v148);

                int v40 = 1;
              }
            }

            unint64_t v149 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "homekit");
            [v20 objectForKeyedSubscript:v149];
            char v150 = (void *)objc_claimAutoreleasedReturnValue();
            if (v150)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v150 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_homekit];
                uint64_t v151 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v150, v151);

                int v40 = 1;
              }
            }

            uint64_t v152 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "wifi");
            [v20 objectForKeyedSubscript:v152];
            unint64_t v153 = (void *)objc_claimAutoreleasedReturnValue();
            if (v153)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v153 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_wifi];
                unint64_t v154 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v153, v154);

                int v40 = 1;
              }
            }

            int v155 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "app_launch");
            [v20 objectForKeyedSubscript:v155];
            uint64_t v156 = (void *)objc_claimAutoreleasedReturnValue();
            if (v156)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v156 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_app_launch];
                unint64_t v157 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v156, v157);

                int v40 = 1;
              }
            }

            unint64_t v158 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "ams");
            [v20 objectForKeyedSubscript:v158];
            int v159 = (void *)objc_claimAutoreleasedReturnValue();
            if (v159)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v159 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_ams];
                uint64_t v160 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v159, v160);

                int v40 = 1;
              }
            }

            unint64_t v161 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "reve");
            [v20 objectForKeyedSubscript:v161];
            unint64_t v162 = (void *)objc_claimAutoreleasedReturnValue();
            if (v162)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v162 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_reve];
                int v163 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v162, v163);

                int v40 = 1;
              }
            }

            uint64_t v164 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "network_quality");
            [v20 objectForKeyedSubscript:v164];
            unint64_t v165 = (void *)objc_claimAutoreleasedReturnValue();
            if (v165)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v165 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_network_quality];
                unint64_t v166 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v165, v166);

                int v40 = 1;
              }
            }

            int v167 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "news");
            [v20 objectForKeyedSubscript:v167];
            uint64_t v168 = (void *)objc_claimAutoreleasedReturnValue();
            if (v168)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v168 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_news];
                uint64_t v169 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v168, v169);

                int v40 = 1;
              }
            }

            unint64_t v170 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "cloud_compute");
            [v20 objectForKeyedSubscript:v170];
            unint64_t v171 = (void *)objc_claimAutoreleasedReturnValue();
            if (v171)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v171 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_cloud_compute];
                int v172 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v171, v172);

                int v40 = 1;
              }
            }

            uint64_t v173 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "push");
            [v20 objectForKeyedSubscript:v173];
            unint64_t v174 = (void *)objc_claimAutoreleasedReturnValue();
            if (v174)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v174 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_push];
                unint64_t v175 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v174, v175);

                int v40 = 1;
              }
            }

            int v176 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "nw_actor_system");
            [v20 objectForKeyedSubscript:v176];
            uint64_t v177 = (void *)objc_claimAutoreleasedReturnValue();
            if (v177)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v177 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_nw_actor_system];
                unint64_t v178 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v177, v178);

                int v40 = 1;
              }
            }

            unint64_t v179 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "app_intents_services");
            [v20 objectForKeyedSubscript:v179];
            int v180 = (void *)objc_claimAutoreleasedReturnValue();
            if (v180)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v180 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_app_intents_services];
                uint64_t v181 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v180, v181);

                int v40 = 1;
              }
            }

            unint64_t v182 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "stocks");
            [v20 objectForKeyedSubscript:v182];
            unint64_t v183 = (void *)objc_claimAutoreleasedReturnValue();
            if (v183)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v183 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_stocks];
                int v184 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v183, v184);

                int v40 = 1;
              }
            }

            uint64_t v185 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "tv_app");
            [v20 objectForKeyedSubscript:v185];
            unint64_t v186 = (void *)objc_claimAutoreleasedReturnValue();
            if (v186)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v186 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_tv_app];
                unint64_t v187 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v186, v187);

                int v40 = 1;
              }
            }

            int v188 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_num_%s_%s",  "tv",  "rapport");
            [v20 objectForKeyedSubscript:v188];
            uint64_t v189 = (void *)objc_claimAutoreleasedReturnValue();
            if (v189)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v189 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_numerator_rapport];
                unint64_t v190 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v189, v190);

                int v40 = 1;
              }
            }

            unint64_t v191 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "libnetcore");
            [v20 objectForKeyedSubscript:v191];
            int v192 = (void *)objc_claimAutoreleasedReturnValue();
            if (v192)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v192 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_libnetcore];
                uint64_t v193 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v192, v193);

                int v40 = 1;
              }
            }

            unint64_t v194 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "cfnetwork");
            [v20 objectForKeyedSubscript:v194];
            unint64_t v195 = (void *)objc_claimAutoreleasedReturnValue();
            if (v195)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v195 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_cfnetwork];
                int v196 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v195, v196);

                int v40 = 1;
              }
            }

            uint64_t v197 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "coremedia");
            [v20 objectForKeyedSubscript:v197];
            unint64_t v198 = (void *)objc_claimAutoreleasedReturnValue();
            if (v198)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v198 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_coremedia];
                unint64_t v199 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v198, v199);

                int v40 = 1;
              }
            }

            int v200 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "parsec");
            [v20 objectForKeyedSubscript:v200];
            uint64_t v201 = (void *)objc_claimAutoreleasedReturnValue();
            if (v201)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v201 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_parsec];
                unint64_t v202 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v201, v202);

                int v40 = 1;
              }
            }

            unint64_t v203 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "siri");
            [v20 objectForKeyedSubscript:v203];
            uint64_t v204 = (void *)objc_claimAutoreleasedReturnValue();
            if (v204)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v204 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_siri];
                uint64_t v205 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v204, v205);

                int v40 = 1;
              }
            }

            unint64_t v206 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "webkit");
            [v20 objectForKeyedSubscript:v206];
            unint64_t v207 = (void *)objc_claimAutoreleasedReturnValue();
            if (v207)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v207 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_webkit];
                int v208 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v207, v208);

                int v40 = 1;
              }
            }

            uint64_t v209 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "coremedia_crabs");
            [v20 objectForKeyedSubscript:v209];
            unint64_t v210 = (void *)objc_claimAutoreleasedReturnValue();
            if (v210)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v210 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_coremedia_crabs];
                unint64_t v211 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v210, v211);

                int v40 = 1;
              }
            }

            int v212 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "coremedia_hls");
            [v20 objectForKeyedSubscript:v212];
            uint64_t v213 = (void *)objc_claimAutoreleasedReturnValue();
            if (v213)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v213 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_coremedia_hls];
                unint64_t v214 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v213, v214);

                int v40 = 1;
              }
            }

            unint64_t v215 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "cloudkit");
            [v20 objectForKeyedSubscript:v215];
            int v216 = (void *)objc_claimAutoreleasedReturnValue();
            if (v216)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v216 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_cloudkit];
                uint64_t v217 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v216, v217);

                int v40 = 1;
              }
            }

            unint64_t v218 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "mmcs");
            [v20 objectForKeyedSubscript:v218];
            unint64_t v219 = (void *)objc_claimAutoreleasedReturnValue();
            if (v219)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v219 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_mmcs];
                uint64_t v220 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v219, v220);

                int v40 = 1;
              }
            }

            uint64_t v221 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "mail");
            [v20 objectForKeyedSubscript:v221];
            unint64_t v222 = (void *)objc_claimAutoreleasedReturnValue();
            if (v222)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v222 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_mail];
                unint64_t v223 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v222, v223);

                int v40 = 1;
              }
            }

            int v224 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "facetime");
            [v20 objectForKeyedSubscript:v224];
            uint64_t v225 = (void *)objc_claimAutoreleasedReturnValue();
            if (v225)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v225 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_facetime];
                unint64_t v226 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v225, v226);

                int v40 = 1;
              }
            }

            unint64_t v227 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "adplatforms");
            [v20 objectForKeyedSubscript:v227];
            int v228 = (void *)objc_claimAutoreleasedReturnValue();
            if (v228)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v228 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_adplatforms];
                uint64_t v229 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v228, v229);

                int v40 = 1;
              }
            }

            unint64_t v230 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "corelocation");
            [v20 objectForKeyedSubscript:v230];
            unint64_t v231 = (void *)objc_claimAutoreleasedReturnValue();
            if (v231)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v231 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_corelocation];
                int v232 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v231, v232);

                int v40 = 1;
              }
            }

            uint64_t v233 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "airplay_sender");
            [v20 objectForKeyedSubscript:v233];
            unint64_t v234 = (void *)objc_claimAutoreleasedReturnValue();
            if (v234)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v234 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_airplay_sender];
                unint64_t v235 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v234, v235);

                int v40 = 1;
              }
            }

            uint64_t v236 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "airplay_receiver");
            [v20 objectForKeyedSubscript:v236];
            uint64_t v237 = (void *)objc_claimAutoreleasedReturnValue();
            if (v237)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v237 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_airplay_receiver];
                unint64_t v238 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v237, v238);

                int v40 = 1;
              }
            }

            unint64_t v239 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "maps");
            [v20 objectForKeyedSubscript:v239];
            int v240 = (void *)objc_claimAutoreleasedReturnValue();
            if (v240)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v240 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_maps];
                uint64_t v241 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v240, v241);

                int v40 = 1;
              }
            }

            unint64_t v242 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "maps_internal");
            [v20 objectForKeyedSubscript:v242];
            unint64_t v243 = (void *)objc_claimAutoreleasedReturnValue();
            if (v243)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v243 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_maps_internal];
                int v244 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v243, v244);

                int v40 = 1;
              }
            }

            uint64_t v245 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "maps_external");
            [v20 objectForKeyedSubscript:v245];
            unint64_t v246 = (void *)objc_claimAutoreleasedReturnValue();
            if (v246)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v246 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_maps_external];
                unint64_t v247 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v246, v247);

                int v40 = 1;
              }
            }

            int v248 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "network_speed_test");
            [v20 objectForKeyedSubscript:v248];
            uint64_t v249 = (void *)objc_claimAutoreleasedReturnValue();
            if (v249)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v249 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_network_speed_test];
                unint64_t v250 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v249, v250);

                int v40 = 1;
              }
            }

            unint64_t v251 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "captive");
            [v20 objectForKeyedSubscript:v251];
            uint64_t v252 = (void *)objc_claimAutoreleasedReturnValue();
            if (v252)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v252 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_captive];
                uint64_t v253 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v252, v253);

                int v40 = 1;
              }
            }

            unint64_t v254 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "safe_browsing");
            [v20 objectForKeyedSubscript:v254];
            unint64_t v255 = (void *)objc_claimAutoreleasedReturnValue();
            if (v255)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v255 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_safe_browsing];
                int v256 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v255, v256);

                int v40 = 1;
              }
            }

            uint64_t v257 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "dns");
            [v20 objectForKeyedSubscript:v257];
            unint64_t v258 = (void *)objc_claimAutoreleasedReturnValue();
            if (v258)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v258 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_dns];
                unint64_t v259 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v258, v259);

                int v40 = 1;
              }
            }

            int v260 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "music");
            [v20 objectForKeyedSubscript:v260];
            uint64_t v261 = (void *)objc_claimAutoreleasedReturnValue();
            if (v261)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v261 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_music];
                unint64_t v262 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v261, v262);

                int v40 = 1;
              }
            }

            unint64_t v263 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "battery");
            [v20 objectForKeyedSubscript:v263];
            int v264 = (void *)objc_claimAutoreleasedReturnValue();
            if (v264)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v264 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_battery];
                uint64_t v265 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v264, v265);

                int v40 = 1;
              }
            }

            unint64_t v266 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "cloud_media_services");
            [v20 objectForKeyedSubscript:v266];
            unint64_t v267 = (void *)objc_claimAutoreleasedReturnValue();
            if (v267)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v267 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_cloud_media_services];
                uint64_t v268 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v267, v268);

                int v40 = 1;
              }
            }

            id v269 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "avconference");
            [v20 objectForKeyedSubscript:v269];
            id v270 = (void *)objc_claimAutoreleasedReturnValue();
            if (v270)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v270 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_avconference];
                id v271 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v270, v271);

                int v40 = 1;
              }
            }

            xpc_object_t v272 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "appstore");
            [v20 objectForKeyedSubscript:v272];
            char v273 = (void *)objc_claimAutoreleasedReturnValue();
            if (v273)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v273 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_appstore];
                os_log_type_t v274 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v273, v274);

                int v40 = 1;
              }
            }

            nw_endpoint_t v275 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "telephony_service");
            [v20 objectForKeyedSubscript:v275];
            __int16 v276 = (void *)objc_claimAutoreleasedReturnValue();
            if (v276)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v276 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_telephony_service];
                uint64_t v277 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v276, v277);

                int v40 = 1;
              }
            }

            __int16 v278 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "network_experiments");
            [v20 objectForKeyedSubscript:v278];
            uint64_t v279 = (void *)objc_claimAutoreleasedReturnValue();
            if (v279)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v279 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_network_experiments];
                uint64_t v280 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v279, v280);

                int v40 = 1;
              }
            }

            int v281 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "network_perf");
            [v20 objectForKeyedSubscript:v281];
            uint64_t v282 = (void *)objc_claimAutoreleasedReturnValue();
            if (v282)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v282 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_network_perf];
                unint64_t v283 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v282, v283);

                int v40 = 1;
              }
            }

            unint64_t v284 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "hotspot");
            [v20 objectForKeyedSubscript:v284];
            v285 = (void *)objc_claimAutoreleasedReturnValue();
            if (v285)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v285 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_hotspot];
                size_t v286 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v285, v286);

                int v40 = 1;
              }
            }

            id v287 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "weather");
            [v20 objectForKeyedSubscript:v287];
            int v288 = (void *)objc_claimAutoreleasedReturnValue();
            if (v288)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v288 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_weather];
                unint64_t v289 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v288, v289);

                int v40 = 1;
              }
            }

            unint64_t v290 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "coordination");
            [v20 objectForKeyedSubscript:v290];
            unint64_t v291 = (void *)objc_claimAutoreleasedReturnValue();
            if (v291)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v291 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_coordination];
                unint64_t v292 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v291, v292);

                int v40 = 1;
              }
            }

            v293 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "appstore_jet");
            [v20 objectForKeyedSubscript:v293];
            v294 = (void *)objc_claimAutoreleasedReturnValue();
            if (v294)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v294 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_appstore_jet];
                int v295 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v294, v295);

                int v40 = 1;
              }
            }

            os_log_type_t v296 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "soundboard");
            [v20 objectForKeyedSubscript:v296];
            unint64_t v297 = (void *)objc_claimAutoreleasedReturnValue();
            if (v297)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v297 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_soundboard];
                unint64_t v298 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v297, v298);

                int v40 = 1;
              }
            }

            int v299 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "aea");
            [v20 objectForKeyedSubscript:v299];
            int v300 = (void *)objc_claimAutoreleasedReturnValue();
            if (v300)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v300 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_aea];
                __int128 v301 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v300, v301);

                int v40 = 1;
              }
            }

            unint64_t v302 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "homekit");
            [v20 objectForKeyedSubscript:v302];
            int v303 = (void *)objc_claimAutoreleasedReturnValue();
            if (v303)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v303 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_homekit];
                os_log_type_t v304 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v303, v304);

                int v40 = 1;
              }
            }

            unint64_t v305 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "wifi");
            [v20 objectForKeyedSubscript:v305];
            unint64_t v306 = (void *)objc_claimAutoreleasedReturnValue();
            if (v306)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v306 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_wifi];
                nw_endpoint_t v307 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v306, v307);

                int v40 = 1;
              }
            }

            v308 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "app_launch");
            [v20 objectForKeyedSubscript:v308];
            int v309 = (void *)objc_claimAutoreleasedReturnValue();
            if (v309)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v309 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_app_launch];
                v310 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v309, v310);

                int v40 = 1;
              }
            }

            unint64_t v311 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "ams");
            [v20 objectForKeyedSubscript:v311];
            unint64_t v312 = (void *)objc_claimAutoreleasedReturnValue();
            if (v312)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v312 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_ams];
                uint64_t v313 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v312, v313);

                int v40 = 1;
              }
            }

            id v314 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "reve");
            [v20 objectForKeyedSubscript:v314];
            uint64_t v315 = (void *)objc_claimAutoreleasedReturnValue();
            if (v315)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v315 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_reve];
                int v316 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v315, v316);

                int v40 = 1;
              }
            }

            uint64_t v317 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "network_quality");
            [v20 objectForKeyedSubscript:v317];
            unint64_t v318 = (void *)objc_claimAutoreleasedReturnValue();
            if (v318)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v318 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_network_quality];
                unint64_t v319 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v318, v319);

                int v40 = 1;
              }
            }

            size_t v320 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "news");
            [v20 objectForKeyedSubscript:v320];
            v321 = (void *)objc_claimAutoreleasedReturnValue();
            if (v321)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v321 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_news];
                size_t v322 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v321, v322);

                int v40 = 1;
              }
            }

            int v323 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "cloud_compute");
            [v20 objectForKeyedSubscript:v323];
            int v324 = (void *)objc_claimAutoreleasedReturnValue();
            if (v324)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v324 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_cloud_compute];
                unint64_t v325 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v324, v325);

                int v40 = 1;
              }
            }

            unint64_t v326 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "push");
            [v20 objectForKeyedSubscript:v326];
            nw_endpoint_t v327 = (void *)objc_claimAutoreleasedReturnValue();
            if (v327)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v327 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_push];
                uint64_t v328 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v327, v328);

                int v40 = 1;
              }
            }

            unint64_t v329 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "nw_actor_system");
            [v20 objectForKeyedSubscript:v329];
            int v330 = (void *)objc_claimAutoreleasedReturnValue();
            if (v330)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v330 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_nw_actor_system];
                id v331 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v330, v331);

                int v40 = 1;
              }
            }

            unint64_t v332 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "app_intents_services");
            [v20 objectForKeyedSubscript:v332];
            unint64_t v333 = (void *)objc_claimAutoreleasedReturnValue();
            if (v333)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v333 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_app_intents_services];
                uint64_t v334 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v333, v334);

                int v40 = 1;
              }
            }

            os_log_type_t v335 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "stocks");
            [v20 objectForKeyedSubscript:v335];
            unint64_t v336 = (void *)objc_claimAutoreleasedReturnValue();
            if (v336)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v336 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_stocks];
                int v337 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v336, v337);

                int v40 = 1;
              }
            }

            BOOL v338 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "tv_app");
            [v20 objectForKeyedSubscript:v338];
            unint64_t v339 = (void *)objc_claimAutoreleasedReturnValue();
            if (v339)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v339 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_tv_app];
                unint64_t v340 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v339, v340);

                int v40 = 1;
              }
            }

            v341 = (void *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"activity_rate_den_%s_%s",  "tv",  "rapport");
            [v20 objectForKeyedSubscript:v341];
            v342 = (void *)objc_claimAutoreleasedReturnValue();
            if (v342)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0
                && ([v342 longLongValue] & 0x8000000000000000) == 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_denominator_rapport];
                v343 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v342, v343);

                int v40 = 1;
              }
            }

            [NSString stringWithUTF8String:nw_setting_activity_report_destination];
            int v344 = (void *)objc_claimAutoreleasedReturnValue();
            [v20 objectForKeyedSubscript:v344];
            v345 = (void *)objc_claimAutoreleasedReturnValue();

            if (v345)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_report_destination];
                unint64_t v346 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v345, v346);

                int v40 = 1;
              }
            }

            id v347 = objc_alloc(NSString);
            nw_endpoint_t v348 = (void *)objc_msgSend( v347,  "initWithFormat:",  @"%s_%s",  nw_setting_activity_default_numerator_old1,  "tv");
            [v20 objectForKeyedSubscript:v348];
            unsigned __int8 v349 = (void *)objc_claimAutoreleasedReturnValue();
            if (v349)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_default_numerator_old1];
                uint64_t v350 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v349, v350);

                int v40 = 1;
              }
            }

            id v351 = objc_alloc(NSString);
            nw_endpoint_t v352 = (void *)objc_msgSend( v351,  "initWithFormat:",  @"%s_%s",  nw_setting_activity_default_denominator_old1,  "tv");
            [v20 objectForKeyedSubscript:v352];
            unint64_t v353 = (void *)objc_claimAutoreleasedReturnValue();
            if (v353)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_default_denominator_old1];
                unint64_t v354 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v353, v354);

                int v40 = 1;
              }
            }

            id v355 = objc_alloc(NSString);
            v356 = (void *)objc_msgSend( v355,  "initWithFormat:",  @"%s_%s",  nw_setting_activity_default_numerator,  "tv");
            [v20 objectForKeyedSubscript:v356];
            v357 = (void *)objc_claimAutoreleasedReturnValue();
            if (v357)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_default_numerator];
                int v358 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v357, v358);

                int v40 = 1;
              }
            }

            id v359 = objc_alloc(NSString);
            unint64_t v360 = (void *)objc_msgSend( v359,  "initWithFormat:",  @"%s_%s",  nw_setting_activity_default_denominator,  "tv");
            [v20 objectForKeyedSubscript:v360];
            unint64_t v361 = (void *)objc_claimAutoreleasedReturnValue();
            if (v361)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_default_denominator];
                v362 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v361, v362);

                int v40 = 1;
              }
            }

            id v363 = objc_alloc(NSString);
            char v364 = (void *)objc_msgSend( v363,  "initWithFormat:",  @"%s_%s",  nw_setting_statistics_report_numerator,  "tv");
            [v20 objectForKeyedSubscript:v364];
            int v365 = (void *)objc_claimAutoreleasedReturnValue();
            if (v365)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_statistics_report_numerator];
                v366 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v365, v366);

                int v40 = 1;
              }
            }

            id v367 = objc_alloc(NSString);
            unint64_t v368 = (void *)objc_msgSend( v367,  "initWithFormat:",  @"%s_%s",  nw_setting_statistics_report_denominator,  "tv");
            [v20 objectForKeyedSubscript:v368];
            id v369 = (void *)objc_claimAutoreleasedReturnValue();
            if (v369)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_statistics_report_denominator];
                v370 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v369, v370);

                int v40 = 1;
              }
            }

            id v371 = objc_alloc(NSString);
            int v372 = (void *)objc_msgSend(v371, "initWithFormat:", @"%s_%s", nw_setting_disable_svcb, "tv");
            [v20 objectForKeyedSubscript:v372];
            v373 = (void *)objc_claimAutoreleasedReturnValue();
            if (v373)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_disable_svcb];
                unint64_t v374 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v373, v374);

                int v40 = 1;
              }
            }

            id v375 = objc_alloc(NSString);
            __int16 v376 = (void *)objc_msgSend(v375, "initWithFormat:", @"%s_%s", nw_setting_disable_svcb_router, "tv");
            [v20 objectForKeyedSubscript:v376];
            unint64_t v377 = (void *)objc_claimAutoreleasedReturnValue();
            if (v377)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_disable_svcb_router];
                __int16 v378 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v377, v378);

                int v40 = 1;
              }
            }

            id v379 = objc_alloc(NSString);
            __int16 v380 = (void *)objc_msgSend( v379,  "initWithFormat:",  @"%s_%s",  nw_setting_activity_elevated_numerator,  "tv");
            [v20 objectForKeyedSubscript:v380];
            unint64_t v381 = (void *)objc_claimAutoreleasedReturnValue();
            if (v381)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_elevated_numerator];
                unint64_t v382 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v381, v382);

                int v40 = 1;
              }
            }

            id v383 = objc_alloc(NSString);
            __int16 v384 = (void *)objc_msgSend( v383,  "initWithFormat:",  @"%s_%s",  nw_setting_activity_elevated_denominator,  "tv");
            [v20 objectForKeyedSubscript:v384];
            id v385 = (void *)objc_claimAutoreleasedReturnValue();
            if (v385)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_activity_elevated_denominator];
                int v386 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v385, v386);

                int v40 = 1;
              }
            }

            id v387 = objc_alloc(NSString);
            unint64_t v388 = (void *)objc_msgSend(v387, "initWithFormat:", @"%s_%s", nw_setting_disable_quic_old1, "tv");
            [v20 objectForKeyedSubscript:v388];
            unint64_t v389 = (void *)objc_claimAutoreleasedReturnValue();
            if (v389)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_disable_quic_old1];
                uint64_t v390 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v389, v390);

                int v40 = 1;
              }
            }

            id v391 = objc_alloc(NSString);
            v392 = (void *)objc_msgSend( v391,  "initWithFormat:",  @"%s_%s",  nw_setting_disable_quic_race_old1,  "tv");
            [v20 objectForKeyedSubscript:v392];
            int v393 = (void *)objc_claimAutoreleasedReturnValue();
            if (v393)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_disable_quic_race_old1];
                v394 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v393, v394);

                int v40 = 1;
              }
            }

            id v395 = objc_alloc(NSString);
            unint64_t v396 = (void *)objc_msgSend( v395,  "initWithFormat:",  @"%s_%s",  nw_setting_enable_quic_numerator_old1,  "tv");
            [v20 objectForKeyedSubscript:v396];
            v397 = (void *)objc_claimAutoreleasedReturnValue();
            if (v397)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old1];
                uint64_t v398 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v397, v398);

                int v40 = 1;
              }
            }

            id v399 = objc_alloc(NSString);
            int v400 = (void *)objc_msgSend( v399,  "initWithFormat:",  @"%s_%s",  nw_setting_enable_quic_denominator_old1,  "tv");
            [v20 objectForKeyedSubscript:v400];
            v401 = (void *)objc_claimAutoreleasedReturnValue();
            if (v401)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old1];
                unint64_t v402 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v401, v402);

                int v40 = 1;
              }
            }

            id v403 = objc_alloc(NSString);
            uint64_t v404 = (void *)objc_msgSend(v403, "initWithFormat:", @"%s_%s", nw_setting_disable_quic_old2, "tv");
            [v20 objectForKeyedSubscript:v404];
            unint64_t v405 = (void *)objc_claimAutoreleasedReturnValue();
            if (v405)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_disable_quic_old2];
                uint64_t v406 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v405, v406);

                int v40 = 1;
              }
            }

            id v407 = objc_alloc(NSString);
            uint64_t v408 = (void *)objc_msgSend( v407,  "initWithFormat:",  @"%s_%s",  nw_setting_disable_quic_race_old2,  "tv");
            [v20 objectForKeyedSubscript:v408];
            unint64_t v409 = (void *)objc_claimAutoreleasedReturnValue();
            if (v409)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_disable_quic_race_old2];
                unint64_t v410 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v409, v410);

                int v40 = 1;
              }
            }

            id v411 = objc_alloc(NSString);
            unint64_t v412 = (void *)objc_msgSend( v411,  "initWithFormat:",  @"%s_%s",  nw_setting_enable_quic_numerator_old2,  "tv");
            [v20 objectForKeyedSubscript:v412];
            v413 = (void *)objc_claimAutoreleasedReturnValue();
            if (v413)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old2];
                int v414 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v413, v414);

                int v40 = 1;
              }
            }

            id v415 = objc_alloc(NSString);
            unint64_t v416 = (void *)objc_msgSend( v415,  "initWithFormat:",  @"%s_%s",  nw_setting_enable_quic_denominator_old2,  "tv");
            [v20 objectForKeyedSubscript:v416];
            unint64_t v417 = (void *)objc_claimAutoreleasedReturnValue();
            if (v417)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old2];
                v418 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v417, v418);

                int v40 = 1;
              }
            }

            id v419 = objc_alloc(NSString);
            v420 = (void *)objc_msgSend(v419, "initWithFormat:", @"%s_%s", nw_setting_disable_quic_old3, "tv");
            [v20 objectForKeyedSubscript:v420];
            int v421 = (void *)objc_claimAutoreleasedReturnValue();
            if (v421)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_disable_quic_old3];
                v422 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v421, v422);

                int v40 = 1;
              }
            }

            id v423 = objc_alloc(NSString);
            unint64_t v424 = (void *)objc_msgSend( v423,  "initWithFormat:",  @"%s_%s",  nw_setting_disable_quic_race_old3,  "tv");
            [v20 objectForKeyedSubscript:v424];
            v425 = (void *)objc_claimAutoreleasedReturnValue();
            if (v425)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_disable_quic_race_old3];
                size_t v426 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v425, v426);

                int v40 = 1;
              }
            }

            id v427 = objc_alloc(NSString);
            v428 = (void *)objc_msgSend( v427,  "initWithFormat:",  @"%s_%s",  nw_setting_enable_quic_numerator_old3,  "tv");
            [v20 objectForKeyedSubscript:v428];
            unint64_t v429 = (void *)objc_claimAutoreleasedReturnValue();
            if (v429)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old3];
                unint64_t v430 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v429, v430);

                int v40 = 1;
              }
            }

            id v431 = objc_alloc(NSString);
            size_t v432 = (void *)objc_msgSend( v431,  "initWithFormat:",  @"%s_%s",  nw_setting_enable_quic_denominator_old3,  "tv");
            [v20 objectForKeyedSubscript:v432];
            size_t v433 = (void *)objc_claimAutoreleasedReturnValue();
            if (v433)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old3];
                v434 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v433, v434);

                int v40 = 1;
              }
            }

            id v435 = objc_alloc(NSString);
            unint64_t v436 = (void *)objc_msgSend(v435, "initWithFormat:", @"%s_%s", nw_setting_disable_quic_old4, "tv");
            [v20 objectForKeyedSubscript:v436];
            v437 = (void *)objc_claimAutoreleasedReturnValue();
            if (v437)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_disable_quic_old4];
                v438 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v437, v438);

                int v40 = 1;
              }
            }

            id v439 = objc_alloc(NSString);
            v440 = (void *)objc_msgSend( v439,  "initWithFormat:",  @"%s_%s",  nw_setting_disable_quic_race_old4,  "tv");
            [v20 objectForKeyedSubscript:v440];
            v441 = (void *)objc_claimAutoreleasedReturnValue();
            if (v441)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_disable_quic_race_old4];
                v442 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v441, v442);

                int v40 = 1;
              }
            }

            id v443 = objc_alloc(NSString);
            v444 = (void *)objc_msgSend( v443,  "initWithFormat:",  @"%s_%s",  nw_setting_enable_quic_numerator_old4,  "tv");
            [v20 objectForKeyedSubscript:v444];
            v445 = (void *)objc_claimAutoreleasedReturnValue();
            if (v445)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old4];
                v446 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v445, v446);

                int v40 = 1;
              }
            }

            id v447 = objc_alloc(NSString);
            v448 = (void *)objc_msgSend( v447,  "initWithFormat:",  @"%s_%s",  nw_setting_enable_quic_denominator_old4,  "tv");
            [v20 objectForKeyedSubscript:v448];
            v449 = (void *)objc_claimAutoreleasedReturnValue();
            if (v449)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old4];
                v450 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v449, v450);

                int v40 = 1;
              }
            }

            id v451 = objc_alloc(NSString);
            v452 = (void *)objc_msgSend(v451, "initWithFormat:", @"%s_%s", nw_setting_disable_quic_old5, "tv");
            [v20 objectForKeyedSubscript:v452];
            v453 = (void *)objc_claimAutoreleasedReturnValue();
            if (v453)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_disable_quic_old5];
                v454 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v453, v454);

                int v40 = 1;
              }
            }

            id v455 = objc_alloc(NSString);
            v456 = (void *)objc_msgSend( v455,  "initWithFormat:",  @"%s_%s",  nw_setting_disable_quic_race_old5,  "tv");
            [v20 objectForKeyedSubscript:v456];
            v457 = (void *)objc_claimAutoreleasedReturnValue();
            if (v457)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_disable_quic_race_old5];
                v458 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v457, v458);

                int v40 = 1;
              }
            }

            id v459 = objc_alloc(NSString);
            v460 = (void *)objc_msgSend( v459,  "initWithFormat:",  @"%s_%s",  nw_setting_enable_quic_numerator_old5,  "tv");
            [v20 objectForKeyedSubscript:v460];
            v461 = (void *)objc_claimAutoreleasedReturnValue();
            if (v461)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old5];
                v462 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v461, v462);

                int v40 = 1;
              }
            }

            id v463 = objc_alloc(NSString);
            v464 = (void *)objc_msgSend( v463,  "initWithFormat:",  @"%s_%s",  nw_setting_enable_quic_denominator_old5,  "tv");
            [v20 objectForKeyedSubscript:v464];
            v465 = (void *)objc_claimAutoreleasedReturnValue();
            if (v465)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old5];
                v466 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v465, v466);

                int v40 = 1;
              }
            }

            id v467 = objc_alloc(NSString);
            uint64_t v468 = (void *)objc_msgSend(v467, "initWithFormat:", @"%s_%s", nw_setting_disable_quic_old6, "tv");
            [v20 objectForKeyedSubscript:v468];
            v469 = (void *)objc_claimAutoreleasedReturnValue();
            if (v469)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_disable_quic_old6];
                uint64_t v470 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v469, v470);

                int v40 = 1;
              }
            }

            id v471 = objc_alloc(NSString);
            uint64_t v472 = (void *)objc_msgSend( v471,  "initWithFormat:",  @"%s_%s",  nw_setting_disable_quic_race_old6,  "tv");
            [v20 objectForKeyedSubscript:v472];
            v473 = (void *)objc_claimAutoreleasedReturnValue();
            if (v473)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_disable_quic_race_old6];
                uint64_t v474 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v473, v474);

                int v40 = 1;
              }
            }

            id v475 = objc_alloc(NSString);
            uint64_t v476 = (void *)objc_msgSend( v475,  "initWithFormat:",  @"%s_%s",  nw_setting_enable_quic_numerator_old6,  "tv");
            [v20 objectForKeyedSubscript:v476];
            v477 = (void *)objc_claimAutoreleasedReturnValue();
            if (v477)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old6];
                uint64_t v478 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v477, v478);

                int v40 = 1;
              }
            }

            id v479 = objc_alloc(NSString);
            uint64_t v480 = (void *)objc_msgSend( v479,  "initWithFormat:",  @"%s_%s",  nw_setting_enable_quic_denominator_old6,  "tv");
            [v20 objectForKeyedSubscript:v480];
            v481 = (void *)objc_claimAutoreleasedReturnValue();
            if (v481)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old6];
                uint64_t v482 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v481, v482);

                int v40 = 1;
              }
            }

            id v483 = objc_alloc(NSString);
            v484 = (void *)objc_msgSend(v483, "initWithFormat:", @"%s_%s", nw_setting_disable_quic_old7, "tv");
            [v20 objectForKeyedSubscript:v484];
            v485 = (void *)objc_claimAutoreleasedReturnValue();
            if (v485)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_disable_quic_old7];
                v486 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v485, v486);

                int v40 = 1;
              }
            }

            id v487 = objc_alloc(NSString);
            v488 = (void *)objc_msgSend( v487,  "initWithFormat:",  @"%s_%s",  nw_setting_disable_quic_race_old7,  "tv");
            [v20 objectForKeyedSubscript:v488];
            v489 = (void *)objc_claimAutoreleasedReturnValue();
            if (v489)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_disable_quic_race_old7];
                v490 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v489, v490);

                int v40 = 1;
              }
            }

            id v491 = objc_alloc(NSString);
            v492 = (void *)objc_msgSend( v491,  "initWithFormat:",  @"%s_%s",  nw_setting_enable_quic_numerator_old7,  "tv");
            [v20 objectForKeyedSubscript:v492];
            v493 = (void *)objc_claimAutoreleasedReturnValue();
            if (v493)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old7];
                v494 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v493, v494);

                int v40 = 1;
              }
            }

            id v495 = objc_alloc(NSString);
            v496 = (void *)objc_msgSend( v495,  "initWithFormat:",  @"%s_%s",  nw_setting_enable_quic_denominator_old7,  "tv");
            [v20 objectForKeyedSubscript:v496];
            v497 = (void *)objc_claimAutoreleasedReturnValue();
            if (v497)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old7];
                v498 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v497, v498);

                int v40 = 1;
              }
            }

            id v499 = objc_alloc(NSString);
            v500 = (void *)objc_msgSend(v499, "initWithFormat:", @"%s_%s", nw_setting_disable_quic_old8, "tv");
            [v20 objectForKeyedSubscript:v500];
            v501 = (void *)objc_claimAutoreleasedReturnValue();
            if (v501)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_disable_quic_old8];
                v502 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v501, v502);

                int v40 = 1;
              }
            }

            id v503 = objc_alloc(NSString);
            v504 = (void *)objc_msgSend( v503,  "initWithFormat:",  @"%s_%s",  nw_setting_disable_quic_race_old8,  "tv");
            [v20 objectForKeyedSubscript:v504];
            v505 = (void *)objc_claimAutoreleasedReturnValue();
            if (v505)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_disable_quic_race_old8];
                v506 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v505, v506);

                int v40 = 1;
              }
            }

            id v507 = objc_alloc(NSString);
            v508 = (void *)objc_msgSend( v507,  "initWithFormat:",  @"%s_%s",  nw_setting_enable_quic_numerator_old8,  "tv");
            [v20 objectForKeyedSubscript:v508];
            v509 = (void *)objc_claimAutoreleasedReturnValue();
            if (v509)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old8];
                v510 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v509, v510);

                int v40 = 1;
              }
            }

            id v511 = objc_alloc(NSString);
            v512 = (void *)objc_msgSend( v511,  "initWithFormat:",  @"%s_%s",  nw_setting_enable_quic_denominator_old8,  "tv");
            [v20 objectForKeyedSubscript:v512];
            v513 = (void *)objc_claimAutoreleasedReturnValue();
            if (v513)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old8];
                v514 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v513, v514);

                int v40 = 1;
              }
            }

            id v515 = objc_alloc(NSString);
            v516 = (void *)objc_msgSend(v515, "initWithFormat:", @"%s_%s", nw_setting_disable_quic, "tv");
            [v20 objectForKeyedSubscript:v516];
            v517 = (void *)objc_claimAutoreleasedReturnValue();
            if (v517)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_disable_quic];
                v518 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v517, v518);

                int v40 = 1;
              }
            }

            id v519 = objc_alloc(NSString);
            v520 = (void *)objc_msgSend(v519, "initWithFormat:", @"%s_%s", nw_setting_disable_quic_race, "tv");
            [v20 objectForKeyedSubscript:v520];
            v521 = (void *)objc_claimAutoreleasedReturnValue();
            if (v521)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_disable_quic_race];
                v522 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v521, v522);

                int v40 = 1;
              }
            }

            id v523 = objc_alloc(NSString);
            v524 = (void *)objc_msgSend(v523, "initWithFormat:", @"%s_%s", nw_setting_enable_quic_numerator, "tv");
            [v20 objectForKeyedSubscript:v524];
            v525 = (void *)objc_claimAutoreleasedReturnValue();
            if (v525)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_quic_numerator];
                v526 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v525, v526);

                int v40 = 1;
              }
            }

            id v527 = objc_alloc(NSString);
            v528 = (void *)objc_msgSend( v527,  "initWithFormat:",  @"%s_%s",  nw_setting_enable_quic_denominator,  "tv");
            [v20 objectForKeyedSubscript:v528];
            v529 = (void *)objc_claimAutoreleasedReturnValue();
            if (v529)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_quic_denominator];
                v530 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v529, v530);

                int v40 = 1;
              }
            }

            id v531 = objc_alloc(NSString);
            v532 = (void *)objc_msgSend(v531, "initWithFormat:", @"%s_%s", nw_setting_ech_probe_numerator, "tv");
            [v20 objectForKeyedSubscript:v532];
            v533 = (void *)objc_claimAutoreleasedReturnValue();
            if (v533)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_ech_probe_numerator];
                v534 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v533, v534);

                int v40 = 1;
              }
            }

            id v535 = objc_alloc(NSString);
            v536 = (void *)objc_msgSend(v535, "initWithFormat:", @"%s_%s", nw_setting_ech_probe_denominator, "tv");
            [v20 objectForKeyedSubscript:v536];
            v537 = (void *)objc_claimAutoreleasedReturnValue();
            if (v537)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_ech_probe_denominator];
                v538 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v537, v538);

                int v40 = 1;
              }
            }

            id v539 = objc_alloc(NSString);
            v540 = (void *)objc_msgSend(v539, "initWithFormat:", @"%s_%s", nw_setting_ech_canary_numerator, "tv");
            [v20 objectForKeyedSubscript:v540];
            v541 = (void *)objc_claimAutoreleasedReturnValue();
            if (v541)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_ech_canary_numerator];
                v542 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v541, v542);

                int v40 = 1;
              }
            }

            id v543 = objc_alloc(NSString);
            v544 = (void *)objc_msgSend( v543,  "initWithFormat:",  @"%s_%s",  nw_setting_ech_canary_denominator,  "tv");
            [v20 objectForKeyedSubscript:v544];
            v545 = (void *)objc_claimAutoreleasedReturnValue();
            if (v545)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_ech_canary_denominator];
                v546 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v545, v546);

                int v40 = 1;
              }
            }

            id v547 = objc_alloc(NSString);
            v548 = (void *)objc_msgSend(v547, "initWithFormat:", @"%s_%s", nw_setting_flow_report_numerator, "tv");
            [v20 objectForKeyedSubscript:v548];
            v549 = (void *)objc_claimAutoreleasedReturnValue();
            if (v549)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_flow_report_numerator];
                v550 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v549, v550);

                int v40 = 1;
              }
            }

            id v551 = objc_alloc(NSString);
            v552 = (void *)objc_msgSend( v551,  "initWithFormat:",  @"%s_%s",  nw_setting_flow_report_denominator,  "tv");
            [v20 objectForKeyedSubscript:v552];
            v553 = (void *)objc_claimAutoreleasedReturnValue();
            if (v553)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_flow_report_denominator];
                v554 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v553, v554);

                int v40 = 1;
              }
            }

            id v555 = objc_alloc(NSString);
            v556 = (void *)objc_msgSend( v555,  "initWithFormat:",  @"%s_%s",  nw_setting_proxy_race_report_numerator,  "tv");
            [v20 objectForKeyedSubscript:v556];
            v557 = (void *)objc_claimAutoreleasedReturnValue();
            if (v557)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_proxy_race_report_numerator];
                v558 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v557, v558);

                int v40 = 1;
              }
            }

            id v559 = objc_alloc(NSString);
            v560 = (void *)objc_msgSend( v559,  "initWithFormat:",  @"%s_%s",  nw_setting_proxy_race_report_denominator,  "tv");
            [v20 objectForKeyedSubscript:v560];
            v561 = (void *)objc_claimAutoreleasedReturnValue();
            if (v561)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_proxy_race_report_denominator];
                v562 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v561, v562);

                int v40 = 1;
              }
            }

            id v563 = objc_alloc(NSString);
            v564 = (void *)objc_msgSend( v563,  "initWithFormat:",  @"%s_%s",  nw_setting_enable_l4s_numerator_old1,  "tv");
            [v20 objectForKeyedSubscript:v564];
            v565 = (void *)objc_claimAutoreleasedReturnValue();
            if (v565)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_l4s_numerator_old1];
                v566 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v565, v566);

                int v40 = 1;
              }
            }

            id v567 = objc_alloc(NSString);
            v568 = (void *)objc_msgSend( v567,  "initWithFormat:",  @"%s_%s",  nw_setting_enable_l4s_denominator_old1,  "tv");
            [v20 objectForKeyedSubscript:v568];
            v569 = (void *)objc_claimAutoreleasedReturnValue();
            if (v569)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_l4s_denominator_old1];
                v570 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v569, v570);

                int v40 = 1;
              }
            }

            id v571 = objc_alloc(NSString);
            v572 = (void *)objc_msgSend(v571, "initWithFormat:", @"%s_%s", nw_setting_enable_l4s_numerator, "tv");
            [v20 objectForKeyedSubscript:v572];
            v573 = (void *)objc_claimAutoreleasedReturnValue();
            if (v573)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_l4s_numerator];
                v574 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v573, v574);

                int v40 = 1;
              }
            }

            id v575 = objc_alloc(NSString);
            v576 = (void *)objc_msgSend( v575,  "initWithFormat:",  @"%s_%s",  nw_setting_enable_l4s_denominator,  "tv");
            [v20 objectForKeyedSubscript:v576];
            v577 = (void *)objc_claimAutoreleasedReturnValue();
            if (v577)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_l4s_denominator];
                v578 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v577, v578);

                int v40 = 1;
              }
            }

            id v579 = objc_alloc(NSString);
            v580 = (void *)objc_msgSend( v579,  "initWithFormat:",  @"%s_%s",  nw_setting_enable_accurate_ecn_numerator_old1,  "tv");
            [v20 objectForKeyedSubscript:v580];
            v581 = (void *)objc_claimAutoreleasedReturnValue();
            if (v581)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_accurate_ecn_numerator_old1];
                v582 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v581, v582);

                int v40 = 1;
              }
            }

            id v583 = objc_alloc(NSString);
            v584 = (void *)objc_msgSend( v583,  "initWithFormat:",  @"%s_%s",  nw_setting_enable_accurate_ecn_denominator_old1,  "tv");
            [v20 objectForKeyedSubscript:v584];
            v585 = (void *)objc_claimAutoreleasedReturnValue();
            if (v585)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_accurate_ecn_denominator_old1];
                v586 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v585, v586);

                int v40 = 1;
              }
            }

            id v587 = objc_alloc(NSString);
            v588 = (void *)objc_msgSend( v587,  "initWithFormat:",  @"%s_%s",  nw_setting_enable_accurate_ecn_numerator,  "tv");
            [v20 objectForKeyedSubscript:v588];
            v589 = (void *)objc_claimAutoreleasedReturnValue();
            if (v589)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_accurate_ecn_numerator];
                v590 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v589, v590);

                int v40 = 1;
              }
            }

            id v591 = objc_alloc(NSString);
            v592 = (void *)objc_msgSend( v591,  "initWithFormat:",  @"%s_%s",  nw_setting_enable_accurate_ecn_denominator,  "tv");
            [v20 objectForKeyedSubscript:v592];
            v593 = (void *)objc_claimAutoreleasedReturnValue();
            if (v593)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_accurate_ecn_denominator];
                v594 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v593, v594);

                int v40 = 1;
              }
            }

            id v595 = objc_alloc(NSString);
            v596 = (void *)objc_msgSend( v595,  "initWithFormat:",  @"%s_%s",  nw_setting_enable_tcp_l4s_numerator,  "tv");
            [v20 objectForKeyedSubscript:v596];
            v597 = (void *)objc_claimAutoreleasedReturnValue();
            if (v597)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_tcp_l4s_numerator];
                v598 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v597, v598);

                int v40 = 1;
              }
            }

            id v599 = objc_alloc(NSString);
            v600 = (void *)objc_msgSend( v599,  "initWithFormat:",  @"%s_%s",  nw_setting_enable_tcp_l4s_denominator,  "tv");
            [v20 objectForKeyedSubscript:v600];
            v601 = (void *)objc_claimAutoreleasedReturnValue();
            if (v601)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_tcp_l4s_denominator];
                v602 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v601, v602);

                int v40 = 1;
              }
            }

            id v603 = objc_alloc(NSString);
            v604 = (void *)objc_msgSend(v603, "initWithFormat:", @"%s_%s", nw_setting_disable_l4s_aqm, "tv");
            [v20 objectForKeyedSubscript:v604];
            v605 = (void *)objc_claimAutoreleasedReturnValue();
            if (v605)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_disable_l4s_aqm];
                v606 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v605, v606);

                int v40 = 1;
              }
            }

            id v607 = objc_alloc(NSString);
            v608 = (void *)objc_msgSend( v607,  "initWithFormat:",  @"%s_%s",  nw_setting_enable_unified_http_numerator,  "tv");
            [v20 objectForKeyedSubscript:v608];
            v609 = (void *)objc_claimAutoreleasedReturnValue();
            if (v609)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_unified_http_numerator];
                v610 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v609, v610);

                int v40 = 1;
              }
            }

            id v611 = objc_alloc(NSString);
            v612 = (void *)objc_msgSend( v611,  "initWithFormat:",  @"%s_%s",  nw_setting_enable_unified_http_denominator,  "tv");
            [v20 objectForKeyedSubscript:v612];
            v613 = (void *)objc_claimAutoreleasedReturnValue();
            if (v613)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_unified_http_denominator];
                v614 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v613, v614);

                int v40 = 1;
              }
            }

            id v615 = objc_alloc(NSString);
            v616 = (void *)objc_msgSend( v615,  "initWithFormat:",  @"%s_%s",  nw_setting_enable_unified_http_numerator_old,  "tv");
            [v20 objectForKeyedSubscript:v616];
            v617 = (void *)objc_claimAutoreleasedReturnValue();
            if (v617)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                [NSString stringWithUTF8String:nw_setting_enable_unified_http_numerator_old];
                v618 = (void *)objc_claimAutoreleasedReturnValue();
                -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v617, v618);

                int v40 = 1;
              }
            }

            id v619 = objc_alloc(NSString);
            v620 = (void *)objc_msgSend( v619,  "initWithFormat:",  @"%s_%s",  nw_setting_enable_unified_http_denominator_old,  "tv");
            [v20 objectForKeyedSubscript:v620];
            v621 = (void *)objc_claimAutoreleasedReturnValue();
            if (v621 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
            {
              [NSString stringWithUTF8String:nw_setting_enable_unified_http_denominator_old];
              v622 = (void *)objc_claimAutoreleasedReturnValue();
              -[os_log_s setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v621, v622);
            }

            else
            {

              if (!v40)
              {
                id v5 = &qword_18C45F000;
                goto LABEL_17;
              }
            }

            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v5 = &qword_18C45F000;
            v623 = (os_log_s *)(id)gLogObj;
            if (os_log_type_enabled(v623, OS_LOG_TYPE_DEBUG))
            {
              int buf = 136446210;
              v659 = "nwphCheckMobileAsset_block_invoke";
              _os_log_impl( &dword_181A5C000,  v623,  OS_LOG_TYPE_DEBUG,  "%{public}s Some new setting was found",  (uint8_t *)&buf,  0xCu);
            }

            id v15 = +[ManagedNetworkSettings sharedMNS](&OBJC_CLASS___ManagedNetworkSettings, "sharedMNS");
            [v15 queue];
            id v16 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue();
            block[0] = MEMORY[0x1895F87A8];
            block[1] = 3221225472LL;
            block[2] = __nwphCheckMobileAsset_block_invoke_324;
            block[3] = &unk_189BC93A0;
            id v17 = v17;
            v649 = v17;
            dispatch_async(v16, block);
          }

          else if (v36)
          {
            int buf = 136446466;
            v659 = "nwphCheckMobileAsset_block_invoke_2";
            __int16 v660 = 2114;
            uint64_t v661 = (uint64_t)v20;
            _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_DEFAULT,  "%{public}s Asset attributes do not contain ActivityRateVersion: %{public}@",  (uint8_t *)&buf,  0x16u);
          }

LABEL_690:
    goto LABEL_691;
  }

                  if (v264) {
                    free(v264);
                  }
                  unint64_t v340 = *(void *)(v12 + 480);
                  if (v340) {
                    goto LABEL_693;
                  }
                  goto LABEL_559;
                }

                unint64_t v266 = (os_log_s *)__nwlog_obj();
                unint64_t v267 = v963[0];
                if (!os_log_type_enabled(v266, (os_log_type_t)v963[0])) {
                  goto LABEL_690;
                }
                unint64_t v430 = *(void *)(v262 + 488);
                *(_DWORD *)int buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
                *(_WORD *)&_BYTE buf[12] = 2048;
                *(void *)&buf[14] = v262;
                *(_WORD *)&_BYTE buf[22] = 2048;
                v961 = v261;
                *(_WORD *)v962 = 2048;
                *(void *)&v962[2] = v430;
                id v269 = "%{public}s Connection %p does not already have stream %p, has %p, backtrace limit exceeded";
              }

              id v431 = v266;
              size_t v432 = v267;
LABEL_689:
              _os_log_impl(&dword_181A5C000, v431, v432, v269, buf, 0x2Au);
              goto LABEL_690;
            }

            __nwlog_obj();
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
            v815 = (char *)_os_log_send_and_compose_impl();
            v963[0] = 16;
            LOBYTE(aBlock) = 0;
            if (__nwlog_fault(v815, v963, &aBlock))
            {
              if (v963[0] == 17)
              {
                v816 = (os_log_s *)__nwlog_obj();
                v817 = v963[0];
                if (!os_log_type_enabled(v816, (os_log_type_t)v963[0])) {
                  goto LABEL_1583;
                }
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
                v818 = "%{public}s called with null http1_connection";
                goto LABEL_1582;
              }

              if (!(_BYTE)aBlock)
              {
                v816 = (os_log_s *)__nwlog_obj();
                v817 = v963[0];
                if (!os_log_type_enabled(v816, (os_log_type_t)v963[0])) {
                  goto LABEL_1583;
                }
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
                v818 = "%{public}s called with null http1_connection, backtrace limit exceeded";
                goto LABEL_1582;
              }

              v865 = (char *)__nw_create_backtrace_string();
              v816 = (os_log_s *)__nwlog_obj();
              v817 = v963[0];
              v868 = os_log_type_enabled(v816, (os_log_type_t)v963[0]);
              if (!v865)
              {
                if (!v868) {
                  goto LABEL_1583;
                }
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
                v818 = "%{public}s called with null http1_connection, no backtrace";
                goto LABEL_1582;
              }

              if (v868)
              {
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
                *(_WORD *)&_BYTE buf[12] = 2082;
                *(void *)&buf[14] = v865;
                v867 = "%{public}s called with null http1_connection, dumping backtrace:%{public}s";
                goto LABEL_1358;
              }

              goto LABEL_1359;
            }

LABEL_694:
}

                  _os_log_impl(&dword_181A5C000, v443, v444, v445, buf, 0xCu);
                  goto LABEL_695;
                }

                if ((*(_BYTE *)(v282 + 276) & 0x10) != 0) {
                  goto LABEL_554;
                }
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                id v359 = (os_log_s *)gLogObj;
                if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_554;
                }
                unint64_t v360 = *(void *)(v282 + 88);
                if (v360) {
                  unint64_t v361 = *(_DWORD *)(v360 + 460);
                }
                else {
                  unint64_t v361 = -1;
                }
                __int16 v384 = *(void *)(v282 + 64);
                *(_DWORD *)int buf = 136447234;
                *(void *)&uint8_t buf[4] = "nw_webtransport_stream_configure_metadata_with_options";
                *(_WORD *)&_BYTE buf[12] = 2082;
                *(void *)&buf[14] = v282 + 192;
                *(_WORD *)&_BYTE buf[22] = 2080;
                id v531 = (uint64_t)" ";
                *(_WORD *)v532 = 1024;
                *(_DWORD *)&v532[2] = v361;
                *(_WORD *)&v532[6] = 2048;
                *(void *)&v532[8] = v384;
                _os_log_impl( &dword_181A5C000,  v359,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:s%lld> Invalid protocol options for webtransport stream",  buf,  0x30u);
                if ((*(_BYTE *)(v282 + 276) & 8) != 0) {
                  goto LABEL_575;
                }
LABEL_555:
                nw_protocol_set_output_handler(v282, 0LL);
                *(void *)(v282 + 56) = 0LL;
                if (!*(void *)(v327 + 376))
                {
                  if ((*(_BYTE *)(v282 + 276) & 0x10) == 0)
                  {
                    unint64_t v377 = (os_log_s *)__nwlog_obj();
                    if (os_log_type_enabled(v377, OS_LOG_TYPE_ERROR))
                    {
                      __int16 v378 = *(void *)(v282 + 88);
                      if (v378) {
                        id v379 = *(_DWORD *)(v378 + 460);
                      }
                      else {
                        id v379 = -1;
                      }
                      unint64_t v388 = *(void *)(v282 + 64);
                      *(_DWORD *)int buf = 136447234;
                      *(void *)&uint8_t buf[4] = "nw_webtransport_http3_stream_reconfigure_and_start";
                      *(_WORD *)&_BYTE buf[12] = 2082;
                      *(void *)&buf[14] = v282 + 192;
                      *(_WORD *)&_BYTE buf[22] = 2080;
                      id v531 = (uint64_t)" ";
                      *(_WORD *)v532 = 1024;
                      *(_DWORD *)&v532[2] = v379;
                      *(_WORD *)&v532[6] = 2048;
                      *(void *)&v532[8] = v388;
                      unint64_t v389 = v377;
                      uint64_t v390 = "%{public}s %{public}s%s<i%u:s%lld> no http connection metadata when attempting to start web"
                             "transport http3 stream";
LABEL_704:
                      _os_log_impl(&dword_181A5C000, v389, OS_LOG_TYPE_ERROR, v390, buf, 0x30u);
                    }
                  }

void __nwphCheckMobileAsset_block_invoke_263(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  [MEMORY[0x189603FC8] dictionaryWithContentsOfFile:@"/Library/Preferences/com.apple.networkd.sysctl.plist"];
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  if (!v2) {
    id v2 = objc_alloc_init(MEMORY[0x189603FC8]);
  }
  [v2 objectForKeyedSubscript:@"net.inet.tcp.ecn_setup_percentage"];
  int v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v3
    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)
    || [v3 longLongValue] != *(void *)(a1 + 40))
  {
    [MEMORY[0x189607968] numberWithLongLong:*(void *)(a1 + 40)];
    int v4 = (void *)objc_claimAutoreleasedReturnValue();
    [v2 setObject:v4 forKeyedSubscript:@"net.inet.tcp.ecn_setup_percentage"];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      *(_DWORD *)int buf = 136446466;
      uint64_t v28 = "nwphCheckMobileAsset_block_invoke";
      __int16 v29 = 2048;
      uint64_t v30 = v6;
      _os_log_impl(&dword_181A5C000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s Changing ECN Percentage to %lld", buf, 0x16u);
    }

    if ([v2 writeToFile:@"/Library/Preferences/com.apple.networkd.sysctl.plist" atomically:1]) {
      goto LABEL_20;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    uint64_t v8 = *(void *)(a1 + 32);
    *(_DWORD *)int buf = 136446722;
    uint64_t v28 = "nwphCheckMobileAsset_block_invoke";
    __int16 v29 = 2114;
    uint64_t v30 = v8;
    __int16 v31 = 2114;
    uint64_t v32 = @"/Library/Preferences/com.apple.networkd.sysctl.plist";
    LODWORD(v24) = 32;
    os_log_type_t v23 = buf;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v9, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v10 = (os_log_s *)(id)gLogObj;
        os_log_type_t v11 = type;
        if (!os_log_type_enabled(v10, type)) {
          goto LABEL_26;
        }
        uint64_t v12 = *(void *)(a1 + 32);
        *(_DWORD *)int buf = 136446722;
        uint64_t v28 = "nwphCheckMobileAsset_block_invoke";
        __int16 v29 = 2114;
        uint64_t v30 = v12;
        __int16 v31 = 2114;
        uint64_t v32 = @"/Library/Preferences/com.apple.networkd.sysctl.plist";
        id v13 = "%{public}s Failed to save network settings %{public}@ to %{public}@";
LABEL_24:
        id v20 = v10;
        os_log_type_t v21 = v11;
        goto LABEL_25;
      }

      if (!v25)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v10 = (os_log_s *)(id)gLogObj;
        os_log_type_t v11 = type;
        if (!os_log_type_enabled(v10, type)) {
          goto LABEL_26;
        }
        uint64_t v19 = *(void *)(a1 + 32);
        *(_DWORD *)int buf = 136446722;
        uint64_t v28 = "nwphCheckMobileAsset_block_invoke";
        __int16 v29 = 2114;
        uint64_t v30 = v19;
        __int16 v31 = 2114;
        uint64_t v32 = @"/Library/Preferences/com.apple.networkd.sysctl.plist";
        id v13 = "%{public}s Failed to save network settings %{public}@ to %{public}@, backtrace limit exceeded";
        goto LABEL_24;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v10 = (os_log_s *)(id)gLogObj;
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (!v16)
        {
LABEL_26:

          if (!v9) {
            goto LABEL_20;
          }
          goto LABEL_19;
        }

        uint64_t v22 = *(void *)(a1 + 32);
        *(_DWORD *)int buf = 136446722;
        uint64_t v28 = "nwphCheckMobileAsset_block_invoke";
        __int16 v29 = 2114;
        uint64_t v30 = v22;
        __int16 v31 = 2114;
        uint64_t v32 = @"/Library/Preferences/com.apple.networkd.sysctl.plist";
        id v13 = "%{public}s Failed to save network settings %{public}@ to %{public}@, no backtrace";
        id v20 = v10;
        os_log_type_t v21 = v15;
LABEL_25:
        _os_log_impl(&dword_181A5C000, v20, v21, v13, buf, 0x20u);
        goto LABEL_26;
      }

      if (v16)
      {
        uint64_t v17 = *(void *)(a1 + 32);
        *(_DWORD *)int buf = 136446978;
        uint64_t v28 = "nwphCheckMobileAsset_block_invoke";
        __int16 v29 = 2114;
        uint64_t v30 = v17;
        __int16 v31 = 2114;
        uint64_t v32 = @"/Library/Preferences/com.apple.networkd.sysctl.plist";
        __int16 v33 = 2082;
        uint32_t v34 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s Failed to save network settings %{public}@ to %{public}@, dumping backtrace:%{public}s",  buf,  0x2Au);
      }

      free(backtrace_string);
    }

    if (!v9)
    {
LABEL_20:
      id v18 = +[ManagedNetworkSettings sharedMNS](&OBJC_CLASS___ManagedNetworkSettings, "sharedMNS", v23, v24);
      [v18 reloadMNS];

      goto LABEL_21;
    }

void __nwphCheckMobileAsset_block_invoke_324(uint64_t a1)
{
}

void addNewNetworkdSettings(void *a1, int a2)
{
  uint64_t v325 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  int v4 = (const char *)nw_setting_libnetcore_debug;
  networkd_settings_init();
  if (sCachedSettings)
  {
    pthread_mutex_lock(&sSettingsMutex);
    if (sCachedSettings) {

    }
      int64_t int64 = xpc_dictionary_get_int64((xpc_object_t)sCachedSettings, v4);
    else {
      int64_t int64 = 0LL;
    }
    pthread_mutex_unlock(&sSettingsMutex);
  }

  else
  {
    int64_t int64 = 0LL;
  }

  [NSString stringWithUTF8String:nw_file_path_settings];
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  [MEMORY[0x189603FC8] dictionaryWithContentsOfFile:v5];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    [MEMORY[0x189603FC8] dictionary];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  }

  uint64_t v313 = [v6 copy];
  if (a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "libnetcore";
      _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_libnetcore];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v8];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_libnetcore];
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v9];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "cfnetwork";
      _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_cfnetwork];
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v11];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_cfnetwork];
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v12];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v13 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "coremedia";
      _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_coremedia];
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v14];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_coremedia];
    os_log_type_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v15];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v16 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "parsec";
      _os_log_impl( &dword_181A5C000,  v16,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_parsec];
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v17];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_parsec];
    id v18 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v18];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v19 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "siri";
      _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_siri];
    id v20 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v20];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_siri];
    os_log_type_t v21 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v21];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v22 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "webkit";
      _os_log_impl( &dword_181A5C000,  v22,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_webkit];
    os_log_type_t v23 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v23];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_webkit];
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v24];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v25 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "coremedia_crabs";
      _os_log_impl( &dword_181A5C000,  v25,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_coremedia_crabs];
    BOOL v26 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v26];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_coremedia_crabs];
    BOOL v27 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v27];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v28 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "coremedia_hls";
      _os_log_impl( &dword_181A5C000,  v28,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_coremedia_hls];
    __int16 v29 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v29];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_coremedia_hls];
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v30];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v31 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "cloudkit";
      _os_log_impl( &dword_181A5C000,  v31,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_cloudkit];
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v32];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_cloudkit];
    __int16 v33 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v33];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint32_t v34 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "mmcs";
      _os_log_impl( &dword_181A5C000,  v34,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_mmcs];
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v35];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_mmcs];
    BOOL v36 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v36];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v37 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "mail";
      _os_log_impl( &dword_181A5C000,  v37,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_mail];
    id v38 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v38];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_mail];
    __int16 v39 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v39];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v40 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "facetime";
      _os_log_impl( &dword_181A5C000,  v40,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_facetime];
    __int16 v41 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v41];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_facetime];
    uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v42];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v43 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "adplatforms";
      _os_log_impl( &dword_181A5C000,  v43,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_adplatforms];
    uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v44];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_adplatforms];
    uint32_t v45 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v45];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint32_t v46 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "corelocation";
      _os_log_impl( &dword_181A5C000,  v46,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_corelocation];
    double v47 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v47];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_corelocation];
    uint32_t v48 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v48];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v49 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "airplay_sender";
      _os_log_impl( &dword_181A5C000,  v49,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_airplay_sender];
    __int16 v50 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v50];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_airplay_sender];
    uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v51];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v52 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "airplay_receiver";
      _os_log_impl( &dword_181A5C000,  v52,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_airplay_receiver];
    id v53 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v53];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_airplay_receiver];
    char v54 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v54];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint32_t v55 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "maps";
      _os_log_impl( &dword_181A5C000,  v55,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_maps];
    uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v56];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_maps];
    uint32_t v57 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v57];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v58 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "maps_internal";
      _os_log_impl( &dword_181A5C000,  v58,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_maps_internal];
    uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v59];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_maps_internal];
    uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v60];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint32_t v61 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "maps_external";
      _os_log_impl( &dword_181A5C000,  v61,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_maps_external];
    __int16 v62 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v62];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_maps_external];
    int64_t v63 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v63];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v64 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "network_speed_test";
      _os_log_impl( &dword_181A5C000,  v64,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_network_speed_test];
    uint32_t v65 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v65];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_network_speed_test];
    uint32_t v66 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v66];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v67 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "captive";
      _os_log_impl( &dword_181A5C000,  v67,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_captive];
    uint32_t v68 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v68];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_captive];
    int v69 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v69];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint32_t v70 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "safe_browsing";
      _os_log_impl( &dword_181A5C000,  v70,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_safe_browsing];
    uint32_t v71 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v71];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_safe_browsing];
    int64_t v72 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v72];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint32_t v73 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "dns";
      _os_log_impl( &dword_181A5C000,  v73,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_dns];
    uint32_t v74 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v74];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_dns];
    int64_t v75 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v75];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v76 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "music";
      _os_log_impl( &dword_181A5C000,  v76,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_music];
    __uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v77];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_music];
    char v78 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v78];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v79 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "battery";
      _os_log_impl( &dword_181A5C000,  v79,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_battery];
    unint64_t v80 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v80];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_battery];
    BOOL v81 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v81];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v82 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "cloud_media_services";
      _os_log_impl( &dword_181A5C000,  v82,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_cloud_media_services];
    os_log_type_t v83 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v83];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_cloud_media_services];
    uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v84];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v85 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v85, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "avconference";
      _os_log_impl( &dword_181A5C000,  v85,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_avconference];
    BOOL v86 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v86];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_avconference];
    BOOL v87 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v87];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v88 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v88, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "appstore";
      _os_log_impl( &dword_181A5C000,  v88,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_appstore];
    __int128 v89 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v89];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_appstore];
    __int128 v90 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v90];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v91 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v91, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "telephony_service";
      _os_log_impl( &dword_181A5C000,  v91,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_telephony_service];
    __int128 v92 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v92];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_telephony_service];
    uint32_t v93 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v93];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v94 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v94, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "network_experiments";
      _os_log_impl( &dword_181A5C000,  v94,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_network_experiments];
    uint32_t v95 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v95];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_network_experiments];
    __int128 v96 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v96];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int128 v97 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v97, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "network_perf";
      _os_log_impl( &dword_181A5C000,  v97,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_network_perf];
    os_log_type_t v98 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v98];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_network_perf];
    unint64_t v99 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v99];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint32_t v100 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v100, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "hotspot";
      _os_log_impl( &dword_181A5C000,  v100,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_hotspot];
    uint32_t v101 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v101];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_hotspot];
    uint64_t v102 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v102];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v103 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v103, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "weather";
      _os_log_impl( &dword_181A5C000,  v103,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_weather];
    os_log_type_t v104 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v104];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_weather];
    uint64_t v105 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v105];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v106 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v106, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "coordination";
      _os_log_impl( &dword_181A5C000,  v106,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_coordination];
    __int16 v107 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v107];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_coordination];
    uint64_t v108 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v108];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v109 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v109, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "appstore_jet";
      _os_log_impl( &dword_181A5C000,  v109,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_appstore_jet];
    __int16 v110 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v110];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_appstore_jet];
    unint64_t v111 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v111];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v112 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v112, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "soundboard";
      _os_log_impl( &dword_181A5C000,  v112,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_soundboard];
    uint64_t v113 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v113];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_soundboard];
    uint64_t v114 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v114];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v115 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v115, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "aea";
      _os_log_impl( &dword_181A5C000,  v115,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_aea];
    uint64_t v116 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v116];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_aea];
    uint64_t v117 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v117];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v118 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v118, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "homekit";
      _os_log_impl( &dword_181A5C000,  v118,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_homekit];
    uint64_t v119 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v119];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_homekit];
    uint64_t v120 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v120];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v121 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v121, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "wifi";
      _os_log_impl( &dword_181A5C000,  v121,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_wifi];
    uint64_t v122 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v122];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_wifi];
    uint64_t v123 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v123];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v124 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v124, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "app_launch";
      _os_log_impl( &dword_181A5C000,  v124,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_app_launch];
    uint64_t v125 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v125];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_app_launch];
    uint64_t v126 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v126];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v127 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v127, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "ams";
      _os_log_impl( &dword_181A5C000,  v127,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_ams];
    unint64_t v128 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v128];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_ams];
    char v129 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v129];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v130 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v130, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "reve";
      _os_log_impl( &dword_181A5C000,  v130,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_reve];
    uint64_t v131 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v131];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_reve];
    unint64_t v132 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v132];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v133 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v133, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "network_quality";
      _os_log_impl( &dword_181A5C000,  v133,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_network_quality];
    int v134 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v134];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_network_quality];
    uint64_t v135 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v135];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v136 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v136, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "news";
      _os_log_impl( &dword_181A5C000,  v136,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_news];
    unint64_t v137 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v137];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_news];
    int v138 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v138];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v139 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v139, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "cloud_compute";
      _os_log_impl( &dword_181A5C000,  v139,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_cloud_compute];
    unint64_t v140 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v140];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_cloud_compute];
    unint64_t v141 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v141];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v142 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v142, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "push";
      _os_log_impl( &dword_181A5C000,  v142,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_push];
    uint64_t v143 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v143];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_push];
    unint64_t v144 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v144];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v145 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v145, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "nw_actor_system";
      _os_log_impl( &dword_181A5C000,  v145,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_nw_actor_system];
    int v146 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v146];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_nw_actor_system];
    uint64_t v147 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v147];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v148 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v148, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "app_intents_services";
      _os_log_impl( &dword_181A5C000,  v148,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_app_intents_services];
    unint64_t v149 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v149];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_app_intents_services];
    char v150 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v150];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v151 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v151, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "stocks";
      _os_log_impl( &dword_181A5C000,  v151,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_stocks];
    uint64_t v152 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v152];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_stocks];
    unint64_t v153 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v153];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v154 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v154, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "tv_app";
      _os_log_impl( &dword_181A5C000,  v154,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_tv_app];
    int v155 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v155];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_tv_app];
    uint64_t v156 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v156];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v157 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v157, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = "rapport";
      _os_log_impl( &dword_181A5C000,  v157,  OS_LOG_TYPE_INFO,  "%{public}s Removing sampling rate for domain %s",  buf,  0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_numerator_rapport];
    unint64_t v158 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v158];

    [NSString stringWithUTF8String:nw_setting_activity_report_denominator_rapport];
    int v159 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v159];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v160 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v160, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_activity_report_destination;
      _os_log_impl(&dword_181A5C000, v160, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_report_destination];
    unint64_t v161 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v161];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v162 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v162, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_activity_default_numerator_old1;
      _os_log_impl(&dword_181A5C000, v162, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_default_numerator_old1];
    int v163 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v163];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v164 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v164, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_activity_default_denominator_old1;
      _os_log_impl(&dword_181A5C000, v164, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_default_denominator_old1];
    unint64_t v165 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v165];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v166 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v166, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_activity_default_numerator;
      _os_log_impl(&dword_181A5C000, v166, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_default_numerator];
    int v167 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v167];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v168 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v168, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_activity_default_denominator;
      _os_log_impl(&dword_181A5C000, v168, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_default_denominator];
    uint64_t v169 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v169];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v170 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v170, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_statistics_report_numerator;
      _os_log_impl(&dword_181A5C000, v170, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_statistics_report_numerator];
    unint64_t v171 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v171];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v172 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v172, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_statistics_report_denominator;
      _os_log_impl(&dword_181A5C000, v172, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_statistics_report_denominator];
    uint64_t v173 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v173];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v174 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v174, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_disable_svcb;
      _os_log_impl(&dword_181A5C000, v174, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_disable_svcb];
    unint64_t v175 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v175];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v176 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v176, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_disable_svcb_router;
      _os_log_impl(&dword_181A5C000, v176, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_disable_svcb_router];
    uint64_t v177 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v177];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v178 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v178, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_activity_elevated_numerator;
      _os_log_impl(&dword_181A5C000, v178, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_elevated_numerator];
    unint64_t v179 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v179];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v180 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v180, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_activity_elevated_denominator;
      _os_log_impl(&dword_181A5C000, v180, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_activity_elevated_denominator];
    uint64_t v181 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v181];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v182 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v182, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_disable_quic_old1;
      _os_log_impl(&dword_181A5C000, v182, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_disable_quic_old1];
    unint64_t v183 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v183];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v184 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v184, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_disable_quic_race_old1;
      _os_log_impl(&dword_181A5C000, v184, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_disable_quic_race_old1];
    uint64_t v185 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v185];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v186 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v186, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_quic_numerator_old1;
      _os_log_impl(&dword_181A5C000, v186, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old1];
    unint64_t v187 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v187];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v188 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v188, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_quic_denominator_old1;
      _os_log_impl(&dword_181A5C000, v188, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old1];
    uint64_t v189 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v189];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v190 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v190, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_disable_quic_old2;
      _os_log_impl(&dword_181A5C000, v190, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_disable_quic_old2];
    unint64_t v191 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v191];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v192 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v192, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_disable_quic_race_old2;
      _os_log_impl(&dword_181A5C000, v192, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_disable_quic_race_old2];
    uint64_t v193 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v193];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v194 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v194, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_quic_numerator_old2;
      _os_log_impl(&dword_181A5C000, v194, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old2];
    unint64_t v195 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v195];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v196 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v196, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_quic_denominator_old2;
      _os_log_impl(&dword_181A5C000, v196, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old2];
    uint64_t v197 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v197];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v198 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v198, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_disable_quic_old3;
      _os_log_impl(&dword_181A5C000, v198, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_disable_quic_old3];
    unint64_t v199 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v199];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v200 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v200, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_disable_quic_race_old3;
      _os_log_impl(&dword_181A5C000, v200, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_disable_quic_race_old3];
    uint64_t v201 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v201];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v202 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v202, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_quic_numerator_old3;
      _os_log_impl(&dword_181A5C000, v202, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old3];
    unint64_t v203 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v203];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v204 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v204, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_quic_denominator_old3;
      _os_log_impl(&dword_181A5C000, v204, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old3];
    uint64_t v205 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v205];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v206 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v206, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_disable_quic_old4;
      _os_log_impl(&dword_181A5C000, v206, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_disable_quic_old4];
    unint64_t v207 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v207];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v208 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v208, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_disable_quic_race_old4;
      _os_log_impl(&dword_181A5C000, v208, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_disable_quic_race_old4];
    uint64_t v209 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v209];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v210 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v210, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_quic_numerator_old4;
      _os_log_impl(&dword_181A5C000, v210, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old4];
    unint64_t v211 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v211];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v212 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v212, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_quic_denominator_old4;
      _os_log_impl(&dword_181A5C000, v212, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old4];
    uint64_t v213 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v213];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v214 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v214, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_disable_quic_old5;
      _os_log_impl(&dword_181A5C000, v214, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_disable_quic_old5];
    unint64_t v215 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v215];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v216 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v216, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_disable_quic_race_old5;
      _os_log_impl(&dword_181A5C000, v216, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_disable_quic_race_old5];
    uint64_t v217 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v217];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v218 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v218, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_quic_numerator_old5;
      _os_log_impl(&dword_181A5C000, v218, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old5];
    unint64_t v219 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v219];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v220 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v220, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_quic_denominator_old5;
      _os_log_impl(&dword_181A5C000, v220, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old5];
    uint64_t v221 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v221];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v222 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v222, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_disable_quic_old6;
      _os_log_impl(&dword_181A5C000, v222, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_disable_quic_old6];
    unint64_t v223 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v223];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v224 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v224, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_disable_quic_race_old6;
      _os_log_impl(&dword_181A5C000, v224, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_disable_quic_race_old6];
    uint64_t v225 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v225];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v226 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v226, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_quic_numerator_old6;
      _os_log_impl(&dword_181A5C000, v226, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old6];
    unint64_t v227 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v227];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v228 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v228, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_quic_denominator_old6;
      _os_log_impl(&dword_181A5C000, v228, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old6];
    uint64_t v229 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v229];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v230 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v230, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_disable_quic_old7;
      _os_log_impl(&dword_181A5C000, v230, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_disable_quic_old7];
    unint64_t v231 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v231];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v232 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v232, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_disable_quic_race_old7;
      _os_log_impl(&dword_181A5C000, v232, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_disable_quic_race_old7];
    uint64_t v233 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v233];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v234 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v234, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_quic_numerator_old7;
      _os_log_impl(&dword_181A5C000, v234, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old7];
    unint64_t v235 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v235];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v236 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v236, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_quic_denominator_old7;
      _os_log_impl(&dword_181A5C000, v236, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old7];
    uint64_t v237 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v237];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v238 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v238, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_disable_quic_old8;
      _os_log_impl(&dword_181A5C000, v238, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_disable_quic_old8];
    unint64_t v239 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v239];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v240 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v240, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_disable_quic_race_old8;
      _os_log_impl(&dword_181A5C000, v240, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_disable_quic_race_old8];
    uint64_t v241 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v241];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v242 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v242, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_quic_numerator_old8;
      _os_log_impl(&dword_181A5C000, v242, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_quic_numerator_old8];
    unint64_t v243 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v243];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v244 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v244, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_quic_denominator_old8;
      _os_log_impl(&dword_181A5C000, v244, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_quic_denominator_old8];
    uint64_t v245 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v245];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v246 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v246, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_disable_quic;
      _os_log_impl(&dword_181A5C000, v246, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_disable_quic];
    unint64_t v247 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v247];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v248 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v248, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_disable_quic_race;
      _os_log_impl(&dword_181A5C000, v248, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_disable_quic_race];
    uint64_t v249 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v249];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v250 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v250, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_quic_numerator;
      _os_log_impl(&dword_181A5C000, v250, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_quic_numerator];
    unint64_t v251 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v251];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v252 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v252, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_quic_denominator;
      _os_log_impl(&dword_181A5C000, v252, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_quic_denominator];
    uint64_t v253 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v253];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v254 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v254, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_ech_probe_numerator;
      _os_log_impl(&dword_181A5C000, v254, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_ech_probe_numerator];
    unint64_t v255 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v255];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v256 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v256, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_ech_probe_denominator;
      _os_log_impl(&dword_181A5C000, v256, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_ech_probe_denominator];
    uint64_t v257 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v257];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v258 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v258, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_ech_canary_numerator;
      _os_log_impl(&dword_181A5C000, v258, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_ech_canary_numerator];
    unint64_t v259 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v259];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v260 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v260, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_ech_canary_denominator;
      _os_log_impl(&dword_181A5C000, v260, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_ech_canary_denominator];
    uint64_t v261 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v261];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v262 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v262, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_flow_report_numerator;
      _os_log_impl(&dword_181A5C000, v262, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_flow_report_numerator];
    unint64_t v263 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v263];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v264 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v264, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_flow_report_denominator;
      _os_log_impl(&dword_181A5C000, v264, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_flow_report_denominator];
    uint64_t v265 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v265];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v266 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v266, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_proxy_race_report_numerator;
      _os_log_impl(&dword_181A5C000, v266, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_proxy_race_report_numerator];
    unint64_t v267 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v267];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v268 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v268, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_proxy_race_report_denominator;
      _os_log_impl(&dword_181A5C000, v268, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_proxy_race_report_denominator];
    id v269 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v269];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v270 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v270, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_l4s_numerator_old1;
      _os_log_impl(&dword_181A5C000, v270, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_l4s_numerator_old1];
    id v271 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v271];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    xpc_object_t v272 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v272, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_l4s_denominator_old1;
      _os_log_impl(&dword_181A5C000, v272, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_l4s_denominator_old1];
    char v273 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v273];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v274 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v274, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_l4s_numerator;
      _os_log_impl(&dword_181A5C000, v274, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_l4s_numerator];
    nw_endpoint_t v275 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v275];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v276 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v276, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_l4s_denominator;
      _os_log_impl(&dword_181A5C000, v276, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_l4s_denominator];
    uint64_t v277 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v277];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v278 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v278, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_accurate_ecn_numerator_old1;
      _os_log_impl(&dword_181A5C000, v278, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_accurate_ecn_numerator_old1];
    uint64_t v279 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v279];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v280 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v280, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_accurate_ecn_denominator_old1;
      _os_log_impl(&dword_181A5C000, v280, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_accurate_ecn_denominator_old1];
    int v281 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v281];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v282 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v282, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_accurate_ecn_numerator;
      _os_log_impl(&dword_181A5C000, v282, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_accurate_ecn_numerator];
    unint64_t v283 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v283];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v284 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v284, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_accurate_ecn_denominator;
      _os_log_impl(&dword_181A5C000, v284, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_accurate_ecn_denominator];
    v285 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v285];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    size_t v286 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v286, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_tcp_l4s_numerator;
      _os_log_impl(&dword_181A5C000, v286, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_tcp_l4s_numerator];
    id v287 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v287];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v288 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v288, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_tcp_l4s_denominator;
      _os_log_impl(&dword_181A5C000, v288, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_tcp_l4s_denominator];
    unint64_t v289 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v289];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v290 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v290, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_disable_l4s_aqm;
      _os_log_impl(&dword_181A5C000, v290, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_disable_l4s_aqm];
    unint64_t v291 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v291];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v292 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v292, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_unified_http_numerator;
      _os_log_impl(&dword_181A5C000, v292, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_unified_http_numerator];
    v293 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v293];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v294 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v294, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_unified_http_denominator;
      _os_log_impl(&dword_181A5C000, v294, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_unified_http_denominator];
    int v295 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v295];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v296 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v296, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_unified_http_numerator_old;
      _os_log_impl(&dword_181A5C000, v296, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_unified_http_numerator_old];
    unint64_t v297 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v297];

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v298 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v298, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446466;
      size_t v322 = "addNewNetworkdSettings";
      __int16 v323 = 2080;
      int v324 = (const char *)nw_setting_enable_unified_http_denominator_old;
      _os_log_impl(&dword_181A5C000, v298, OS_LOG_TYPE_INFO, "%{public}s Removing setting %s", buf, 0x16u);
    }

    [NSString stringWithUTF8String:nw_setting_enable_unified_http_denominator_old];
    int v299 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setObject:0 forKeyedSubscript:v299];
  }

  objc_msgSend(v3, "description", v313);
  int v300 = (void *)objc_claimAutoreleasedReturnValue();
  [v300 stringByReplacingOccurrencesOfString:@"\n" withString:&stru_189BCAF98];
  __int128 v301 = (char *)objc_claimAutoreleasedReturnValue();

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  unint64_t v302 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v302, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)int buf = 136446466;
    size_t v322 = "addNewNetworkdSettings";
    __int16 v323 = 2112;
    int v324 = v301;
    _os_log_impl(&dword_181A5C000, v302, OS_LOG_TYPE_INFO, "%{public}s Overriding with new settings %@", buf, 0x16u);
  }

  __int128 v318 = 0u;
  __int128 v319 = 0u;
  __int128 v316 = 0u;
  __int128 v317 = 0u;
  id v303 = v3;
  uint64_t v304 = [v303 countByEnumeratingWithState:&v316 objects:v320 count:16];
  if (v304)
  {
    uint64_t v305 = v304;
    uint64_t v306 = *(void *)v317;
    do
    {
      for (uint64_t i = 0LL; i != v305; ++i)
      {
        if (*(void *)v317 != v306) {
          objc_enumerationMutation(v303);
        }
        uint64_t v308 = *(void *)(*((void *)&v316 + 1) + 8 * i);
        [v303 objectForKeyedSubscript:v308];
        int v309 = (void *)objc_claimAutoreleasedReturnValue();
        [v6 setObject:v309 forKeyedSubscript:v308];
      }

      uint64_t v305 = [v303 countByEnumeratingWithState:&v316 objects:v320 count:16];
    }

    while (v305);
  }

  [v6 description];
  v310 = (void *)objc_claimAutoreleasedReturnValue();
  [v310 stringByReplacingOccurrencesOfString:@"\n" withString:&stru_189BCAF98];
  unint64_t v311 = (char *)objc_claimAutoreleasedReturnValue();

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  unint64_t v312 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v312, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)int buf = 136446466;
    size_t v322 = "addNewNetworkdSettings";
    __int16 v323 = 2112;
    int v324 = v311;
    _os_log_impl(&dword_181A5C000, v312, OS_LOG_TYPE_INFO, "%{public}s Created new networkd settings %@", buf, 0x16u);
  }

  if (![v6 count])
  {

    uint64_t v6 = 0LL;
  }

  saveAndPostNetworkdSettings(v6, v314, int64);
}

void __runProbes_block_invoke(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  if (gRunningProbes != 1)
  {
    gRunningProbes = 1;
    id v4 = +[ManagedNetworkSettings sharedMNS](&OBJC_CLASS___ManagedNetworkSettings, "sharedMNS");
    [v4 queue];
    id v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue();
    dispatch_assert_queue_V2(v5);

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v6 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nwphResetProbesOnQueue";
      _os_log_impl(&dword_181A5C000, v6, OS_LOG_TYPE_DEBUG, "%{public}s Resetting ECH settings", buf, 0xCu);
    }

    id v7 = (void *)[objc_alloc(MEMORY[0x189603FC8]) initWithCapacity:1];
    [NSString stringWithUTF8String:nw_setting_ech_probe_enabled];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    [v7 setValue:MEMORY[0x189604A80] forKey:v8];

    addNewNetworkdSettings(v7, 0);
    id v9 = *(id *)(a1 + 32);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (os_log_s *)(id)gLogObj;
    os_log_type_t v11 = v10;
    if (v9)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nwphRunProbes";
        _os_log_impl(&dword_181A5C000, v11, OS_LOG_TYPE_DEBUG, "%{public}s starting network probes", buf, 0xCu);
      }

      uint32_t int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_ech_canary_numerator, 0LL);
      uint32_t v13 = networkd_settings_get_int64_with_default((const char *)nw_setting_ech_canary_denominator, 0LL);
      uint32_t v14 = arc4random_uniform(v13);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v15 = (os_log_s *)(id)gLogObj;
      BOOL v16 = v15;
      if (v14 >= int64_with_default)
      {
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nwphRunProbes";
          *(_WORD *)&_BYTE buf[12] = 2112;
          *(void *)&buf[14] = v9;
          _os_log_impl( &dword_181A5C000,  v16,  OS_LOG_TYPE_DEFAULT,  "%{public}s Not selected to run ECH canary. Finished with transaction %@",  buf,  0x16u);
        }

        gRunningProbes = 0;
      }

      else
      {
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136446722;
          *(void *)&uint8_t buf[4] = "nwphShouldRunECHCanaryProbe";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = int64_with_default;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v13;
          _os_log_impl(&dword_181A5C000, v16, OS_LOG_TYPE_DEBUG, "%{public}s ECH canary sampled at %u / %u", buf, 0x18u);
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v17 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nwphRunProbes";
          _os_log_impl(&dword_181A5C000, v17, OS_LOG_TYPE_DEBUG, "%{public}s Running ECH canary probe", buf, 0xCu);
        }

        id v18 = nw_activity_create(40, 1);
        nw_activity_activate(v18);
        *(void *)int buf = MEMORY[0x1895F87A8];
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&buf[16] = __nwphRunProbes_block_invoke;
        __int16 v31 = &unk_189BC5E10;
        id v32 = v18;
        id v33 = v9;
        uint64_t v19 = v18;
        nwphRunECHProbes(1, v19, buf);
      }

void __nwphRunProbes_block_invoke(uint64_t a1, int a2)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    v5[0] = MEMORY[0x1895F87A8];
    v5[1] = 3221225472LL;
    v5[2] = __nwphRunProbes_block_invoke_2;
    v5[3] = &unk_189BC5E10;
    id v6 = v3;
    id v7 = *(id *)(a1 + 40);
    nwphRunECHProbes(0, v6, v5);
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446210;
      id v9 = "nwphRunProbes_block_invoke";
      _os_log_impl(&dword_181A5C000, v4, OS_LOG_TYPE_INFO, "%{public}s ECH local probes failed, saving", buf, 0xCu);
    }

    nwphProbesComplete(0, *(void **)(a1 + 32), *(void **)(a1 + 40));
  }

void nwphRunECHProbes(int a1, void *a2, void *a3)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  id v5 = a2;
  id v6 = a3;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v7 = (os_log_s *)(id)gLogObj;
  uint64_t v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      id v9 = "generic";
      if (a1) {
        id v9 = "regional";
      }
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nwphRunECHProbes";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = v9;
      _os_log_impl(&dword_181A5C000, v8, OS_LOG_TYPE_DEBUG, "%{public}s starting %{public}s network probes", buf, 0x16u);
    }

    *(void *)int buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v35 = 0;
    v32[0] = 0LL;
    v32[1] = v32;
    v32[2] = 0x2020000000LL;
    char v33 = 0;
    v30[0] = 0LL;
    v30[1] = v30;
    v30[2] = 0x2020000000LL;
    char v31 = 0;
    if (a1) {
      int v10 = 2;
    }
    else {
      int v10 = 5;
    }
    if (a1) {
      os_log_type_t v11 = @"https://croissant.cdn-apple.com";
    }
    else {
      os_log_type_t v11 = @"https://croissant.edge.apple";
    }
    v28[0] = 0LL;
    v28[1] = v28;
    void v28[2] = 0x2020000000LL;
    int v29 = v10;
    v19[0] = MEMORY[0x1895F87A8];
    v19[1] = 3221225472LL;
    v19[2] = __nwphRunECHProbes_block_invoke;
    v19[3] = &unk_189BB93A8;
    char v27 = a1;
    os_log_type_t v23 = buf;
    os_log_type_t v24 = v28;
    uint64_t v20 = v11;
    id v21 = v5;
    char v25 = v32;
    BOOL v26 = v30;
    id v22 = v6;
    nwphRunProbe(v11, 0, v21, v10, v19);

    _Block_object_dispose(v28, 8);
    _Block_object_dispose(v30, 8);
    _Block_object_dispose(v32, 8);
    _Block_object_dispose(buf, 8);
    goto LABEL_13;
  }

  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nwphRunECHProbes";
  uint64_t v12 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v32[0]) = 16;
  LOBYTE(v30[0]) = 0;
  if (__nwlog_fault(v12, v32, v30))
  {
    if (LOBYTE(v32[0]) == 17)
    {
      __nwlog_obj();
      uint32_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = v32[0];
      if (os_log_type_enabled(v13, v32[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nwphRunECHProbes";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null parent_activity", buf, 0xCu);
      }
    }

    else if (LOBYTE(v30[0]))
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint32_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = v32[0];
      BOOL v17 = os_log_type_enabled(v13, v32[0]);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nwphRunECHProbes";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null parent_activity, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_30;
      }

      if (v17)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nwphRunECHProbes";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null parent_activity, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint32_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = v32[0];
      if (os_log_type_enabled(v13, v32[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nwphRunECHProbes";
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null parent_activity, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181F967C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void __nwphRunECHProbes_block_invoke(uint64_t a1, int a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = a2;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v4 = (os_log_s *)(id)gLogObj;
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (a2)
  {
    if (v5)
    {
      id v6 = "regional";
      if (!*(_BYTE *)(a1 + 88)) {
        id v6 = "generic";
      }
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v24 = "nwphRunECHProbes_block_invoke";
      __int16 v25 = 2082;
      BOOL v26 = v6;
      _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_INFO,  "%{public}s First %{public}s ECH probe succeeded, starting second",  buf,  0x16u);
    }

    if (*(_BYTE *)(a1 + 88)) {
      int v7 = 3;
    }
    else {
      int v7 = 6;
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = v7;
    uint64_t v8 = *(void **)(a1 + 32);
    id v9 = *(void **)(a1 + 40);
    v16[0] = MEMORY[0x1895F87A8];
    char v10 = *(_BYTE *)(a1 + 88);
    int8x16_t v11 = vextq_s8(*(int8x16_t *)(a1 + 64), *(int8x16_t *)(a1 + 64), 8uLL);
    int v12 = *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
    v16[1] = 3221225472LL;
    v16[2] = __nwphRunECHProbes_block_invoke_385;
    v16[3] = &unk_189BB9380;
    char v22 = v10;
    int8x16_t v20 = v11;
    id v17 = v8;
    id v13 = *(id *)(a1 + 40);
    uint64_t v14 = *(void *)(a1 + 80);
    id v18 = v13;
    uint64_t v21 = v14;
    id v19 = *(id *)(a1 + 48);
    nwphRunProbe(v17, 1, v9, v12, v16);
  }

  else
  {
    if (v5)
    {
      os_log_type_t v15 = "regional";
      if (!*(_BYTE *)(a1 + 88)) {
        os_log_type_t v15 = "generic";
      }
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v24 = "nwphRunECHProbes_block_invoke";
      __int16 v25 = 2082;
      BOOL v26 = v15;
      _os_log_impl(&dword_181A5C000, v4, OS_LOG_TYPE_INFO, "%{public}s First %{public}s ECH probe failed", buf, 0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

void nwphRunProbe(void *a1, int a2, void *a3, int a4, void *a5)
{
  uint64_t v63 = *MEMORY[0x1895F89C0];
  id v9 = a1;
  id v10 = a3;
  id v11 = a5;
  int v12 = (void (**)(void, void))v11;
  if (!v9)
  {
    __nwlog_obj();
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    __int16 v58 = "nwphRunProbe";
    char v31 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (v55)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v33 = type;
        BOOL v43 = os_log_type_enabled(v32, type);
        if (backtrace_string)
        {
          if (v43)
          {
            *(_DWORD *)int buf = 136446466;
            __int16 v58 = "nwphRunProbe";
            __int16 v59 = 2082;
            uint64_t v60 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v32,  v33,  "%{public}s called with null probeTarget, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
LABEL_86:
          if (!v31)
          {
LABEL_88:
            v12[2](v12, 0LL);
            goto LABEL_24;
          }